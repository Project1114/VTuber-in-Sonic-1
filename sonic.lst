00000000                            ; /=========================================================================\
00000000                            ; º	This file is generated by The Interactive Disassembler (IDA)	    º
00000000                            ; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            		include	"Equates.asm"
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Equates
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =FFFFFF90                  HBlankRAM	=	$FFFFFF90		; word	; jmp $00000000
00000000 =FFFFFF92                  HBlankRout	=	HBlankRAM+$02		; long	; ''
00000000 =FFFFFF96                  VBlankRAM	=	HBlankRout+$04		; word	; jmp $00000000
00000000 =FFFFFF98                  VBlankRout	=	VBlankRAM+$02		; long	; ''
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                            		include	"Equz80.asm"
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; ListEqu.exe generated from "Dual PCM\Z80.lst"
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00000018                  Z80E_Read = $18 
00000000 =000000DD                  x = $DD 
00000000 =000000FD                  y = $FD 
00000000 =00000000                  ldin = $0 
00000000 =00000000                  deci = $0 
00000000 =00000000                  inci = $0 
00000000 =00000000                  M_Read = $0 
00000000 =00000000                  M_CapPCM = $0 
00000000 =00000000                  M_Flush01 = $0 
00000000 =00000000                  M_Flush02 = $0 
00000000 =00000000                  M_Revert01 = $0 
00000000 =00000000                  M_Revert02 = $0 
00000000 =00000000                  M_Wrap = $0 
00000000 =00000000                  M_WrapCondition = $0 
00000000 =00000000                  Z80_Start = $0 
00000000 =00000010                  Z80_Stack = $10 
00000000 =00000010                  BreakLate = $10 
00000000 =00000028                  PCM1_ResetJmp = $28 
00000000 =00000030                  PCM2_ResetJmp = $30 
00000000 =00000038                  BreakVBlank = $38 
00000000 =00000040                  BVB_Check = $40 
00000000 =00000046                  BreakPrep = $46 
00000000 =00000063                  BreakDMA = $63 
00000000 =00000074                  BDMA_NoExchange = $74 
00000000 =00000082                  BDMA_NoFixVolume = $82 
00000000 =00000083                  BDMA_NoFixFlush = $83 
00000000 =00000084                  BDMA_ReadSet = $84 
00000000 =00000084                  BreakBank = $84 
00000000 =00000090                  BDMA_NoMax = $90 
00000000 =0000009A                  BDMA_FlushLoop = $9A 
00000000 =0000009A                  Z80_VBlank2 = $9A 
00000000 =0000009E                  BDMA_Flush02 = $9E 
00000000 =000000B3                  Z80_VBlank1 = $B3 
00000000 =000000B7                  BDMA_Flush01 = $B7 
00000000 =00000107                  BDMA_NoRestore = $107 
00000000 =00000107                  YM_FlushTimer = $107 
00000000 =00000116                  YMF_Buff1 = $116 
00000000 =00000120                  YM_Flush = $120 
00000000 =00000123                  YMF_NextByte = $123 
00000000 =00000142                  Z80_DelayYM1 = $142 
00000000 =00000169                  Z80_DelayYM2 = $169 
00000000 =00000189                  YMF_Finish02 = $189 
00000000 =0000018E                  Z80_DelayYM3 = $18E 
00000000 =00000192                  YMF_Finish01 = $192 
00000000 =00000197                  Z80_DelayYM4 = $197 
00000000 =0000019B                  PCM_Flush_exx = $19B 
00000000 =0000019C                  PCM_Flush = $19C 
00000000 =0000019F                  PCM_NextByte = $19F 
00000000 =000001B3                  Z80_DelayEnd1 = $1B3 
00000000 =000001B5                  YMF_Enter02 = $1B5 
00000000 =000001CC                  Z80_DelayEnd2 = $1CC 
00000000 =000001CE                  YMF_Enter01 = $1CE 
00000000 =000001F6                  YMF_SetBuff1 = $1F6 
00000000 =00000202                  VB_PCM1_VolOK = $202 
00000000 =0000020C                  VB_PCM2_VolOK = $20C 
00000000 =0000020D                  PCM_VolChangeDel = $20D 
00000000 =00000218                  PCM1_VolumeNext = $218 
00000000 =0000021D                  PCM2_VolumeNext = $21D 
00000000 =00000222                  PCM_VolChangeNo = $222 
00000000 =00000229                  Z80_Int1 = $229 
00000000 =0000022D                  Z80_Init = $22D 
00000000 =00000291                  CatchUp = $291 
00000000 =00000292                  CatchUp_Exx = $292 
00000000 =000002A6                  Z80_Int2 = $2A6 
00000000 =000002A7                  PCM1_MuteRet = $2A7 
00000000 =000002AC                  Int1_nop = $2AC 
00000000 =000002AD                  PCM1_Switch = $2AD 
00000000 =000002B8                  PCM1_OverflwCur = $2B8 
00000000 =000002C1                  PCM1_OverflwDiv = $2C1 
00000000 =000002DF                  Int1_lda = $2DF 
00000000 =000002E4                  PCM1_PrepRet = $2E4 
00000000 =000002E4                  PCM1_SampCur = $2E4 
00000000 =000002E7                  PCM1_Buffer = $2E7 
00000000 =000002EA                  PCM1_PitchQuo = $2EA 
00000000 =000002ED                  PCM1_PitchDiv = $2ED 
00000000 =000002F0                  PCM1_PitchCur = $2F0 
00000000 =000002F2                  PCM1_PreInst01 = $2F2 
00000000 =000002F7                  PCM1_PreInst02 = $2F7 
00000000 =000002FC                  PCM1_PreInst03 = $2FC 
00000000 =00000318                  PCM1_PreInst04 = $318 
00000000 =0000031D                  PCM1_PreInst05 = $31D 
00000000 =00000322                  PCM1_PreInst06 = $322 
00000000 =00000327                  PCM1_PreInst07 = $327 
00000000 =00000343                  PCM1_PreInst08 = $343 
00000000 =00000348                  PCM1_PreInst09 = $348 
00000000 =0000034D                  PCM1_PreInst0A = $34D 
00000000 =00000352                  PCM1_PreInst0B = $352 
00000000 =00000357                  PCM1_PreInst0C = $357 
00000000 =00000373                  PCM1_PreInst0D = $373 
00000000 =00000378                  PCM1_PreInst0E = $378 
00000000 =0000037D                  PCM1_PreInst0F = $37D 
00000000 =00000382                  PCM1_PreInst10 = $382 
00000000 =0000039E                  PCM1_PreInst11 = $39E 
00000000 =000003A3                  PCM1_PreInst12 = $3A3 
00000000 =000003A8                  PCM1_PreInst13 = $3A8 
00000000 =000003AD                  PCM1_PreInst14 = $3AD 
00000000 =000003B2                  PCM1_PreInst15 = $3B2 
00000000 =000003CE                  PCM1_PreInst16 = $3CE 
00000000 =000003D3                  PCM1_PreInst17 = $3D3 
00000000 =000003D8                  PCM1_PreInst18 = $3D8 
00000000 =00000403                  PCM2_MuteRet = $403 
00000000 =00000408                  Int2_nop = $408 
00000000 =00000409                  PCM2_Switch = $409 
00000000 =00000414                  PCM2_OverflwCur = $414 
00000000 =00000432                  PCM2_OverflwDiv = $432 
00000000 =0000043B                  Int2_lda = $43B 
00000000 =00000440                  PCM2_PrepRet = $440 
00000000 =00000440                  PCM2_SampCur = $440 
00000000 =00000443                  PCM2_Buffer = $443 
00000000 =00000446                  PCM2_PitchQuo = $446 
00000000 =00000449                  PCM2_PitchDiv = $449 
00000000 =0000044C                  PCM2_PitchCur = $44C 
00000000 =0000044E                  PCM2_PreInst01 = $44E 
00000000 =0000046A                  PCM2_PreInst02 = $46A 
00000000 =0000046F                  PCM2_PreInst03 = $46F 
00000000 =00000474                  PCM2_PreInst04 = $474 
00000000 =00000479                  PCM2_PreInst05 = $479 
00000000 =0000047E                  PCM2_PreInst06 = $47E 
00000000 =0000049A                  PCM2_PreInst07 = $49A 
00000000 =0000049F                  PCM2_PreInst08 = $49F 
00000000 =000004A4                  PCM2_PreInst09 = $4A4 
00000000 =000004A9                  PCM2_PreInst0A = $4A9 
00000000 =000004C5                  PCM2_PreInst0B = $4C5 
00000000 =000004CA                  PCM2_PreInst0C = $4CA 
00000000 =000004CF                  PCM2_PreInst0D = $4CF 
00000000 =000004D4                  PCM2_PreInst0E = $4D4 
00000000 =000004D9                  PCM2_PreInst0F = $4D9 
00000000 =000004F5                  PCM2_PreInst10 = $4F5 
00000000 =000004FA                  PCM2_PreInst11 = $4FA 
00000000 =000004FF                  PCM2_PreInst12 = $4FF 
00000000 =00000504                  PCM2_PreInst13 = $504 
00000000 =00000520                  PCM2_PreInst14 = $520 
00000000 =00000525                  PCM2_PreInst15 = $525 
00000000 =0000052A                  PCM2_PreInst16 = $52A 
00000000 =0000052F                  PCM2_PreInst17 = $52F 
00000000 =00000534                  PCM2_PreInst18 = $534 
00000000 =0000055F                  UPD1_Buffer = $55F 
00000000 =00000565                  UPD1_SampCur = $565 
00000000 =0000056B                  UPD1_PitchCur = $56B 
00000000 =000005A3                  PCM_BuffNoReset = $5A3 
00000000 =000005A4                  PCM1_ChangeBank = $5A4 
00000000 =000005BB                  PCM1_IgnoreBank = $5BB 
00000000 =000005BB                  PCM2_ChangeBank = $5BB 
00000000 =000005D2                  PCM2_IgnoreBank = $5D2 
00000000 =000005D2                  PCM1_ChangePitch = $5D2 
00000000 =000005DC                  PCM1_PitchHigh = $5DC 
00000000 =000005E7                  PCM1_PitchLow = $5E7 
00000000 =00000603                  PCM1_IgnorePitch = $603 
00000000 =00000603                  PCM2_ChangePitch = $603 
00000000 =0000060D                  PCM2_PitchHigh = $60D 
00000000 =00000618                  PCM2_PitchLow = $618 
00000000 =00000634                  PCM2_IgnorePitch = $634 
00000000 =00000634                  PCM_ChangeVolume = $634 
00000000 =00000641                  PCM1_Volume = $641 
00000000 =00000646                  PCM2_Volume = $646 
00000000 =0000064B                  PCM_VolumeAlter = $64B 
00000000 =0000064E                  PCM_VolumeRet = $64E 
00000000 =0000064E                  PCM1_NewRET = $64E 
00000000 =00000651                  PCM2_NewRET = $651 
00000000 =00000654                  PCM_NoUpdate = $654 
00000000 =0000066A                  CU_ValidDist = $66A 
00000000 =0000066F                  CU_Flush = $66F 
00000000 =00000673                  FL_NextByte = $673 
00000000 =00000687                  Z80_Flush1 = $687 
00000000 =000006A1                  Z80_Flush2 = $6A1 
00000000 =000006BC                  PCM1_Mute = $6BC 
00000000 =000006CE                  PCM1_Normal = $6CE 
00000000 =000006D4                  PCM1_Reverse = $6D4 
00000000 =000006ED                  PCM1_PrepReset = $6ED 
00000000 =000006FC                  PCM1_PrepCount = $6FC 
00000000 =0000070A                  PCM1_PrepLoc = $70A 
00000000 =0000072E                  Int1_jp = $72E 
00000000 =00000731                  PCM1_Reset = $731 
00000000 =00000745                  PCM1_ValueAdd = $745 
00000000 =00000770                  Int1_ldhl = $770 
00000000 =00000782                  PCM1_ResInst = $782 
00000000 =00000787                  PCM1_ResSamp = $787 
00000000 =0000078A                  PCM1_ResBuff = $78A 
00000000 =0000078D                  PCM1_ResDiv = $78D 
00000000 =00000790                  PCM1_ResPitCur = $790 
00000000 =00000794                  PCM1_ResQuo = $794 
00000000 =00000797                  PCM1_ResJump = $797 
00000000 =0000079A                  PCM1_NewSample = $79A 
00000000 =000007AA                  PCM1_NewNormal = $7AA 
00000000 =000007B0                  PCM1_NewReverse = $7B0 
00000000 =000007C7                  PCM2_Mute = $7C7 
00000000 =000007D9                  PCM2_Normal = $7D9 
00000000 =000007DF                  PCM2_Reverse = $7DF 
00000000 =000007F8                  PCM2_PrepReset = $7F8 
00000000 =00000807                  PCM2_PrepCount = $807 
00000000 =00000815                  PCM2_PrepLoc = $815 
00000000 =00000824                  Int2_jp = $824 
00000000 =00000827                  PCM2_Reset = $827 
00000000 =0000083B                  PCM2_ValueAdd = $83B 
00000000 =00000866                  Int2_ldhl = $866 
00000000 =00000878                  PCM2_ResInst = $878 
00000000 =0000087D                  PCM2_ResSamp = $87D 
00000000 =00000880                  PCM2_ResBuff = $880 
00000000 =00000883                  PCM2_ResDiv = $883 
00000000 =00000886                  PCM2_ResPitCur = $886 
00000000 =0000088A                  PCM2_ResQuo = $88A 
00000000 =0000088D                  PCM2_ResJump = $88D 
00000000 =00000890                  PCM2_NewSample = $890 
00000000 =000008A0                  PCM2_NewNormal = $8A0 
00000000 =000008A6                  PCM2_NewReverse = $8A6 
00000000 =00000A00                  PCM_Volume1 = $A00 
00000000 =00000B00                  PCM_Volume2 = $B00 
00000000 =00000C00                  PCM1_PrepTable = $C00 
00000000 =00000C30                  PCM2_PrepTable = $C30 
00000000 =00000C60                  PCM1_BankCur = $C60 
00000000 =00000C61                  PCM2_BankCur = $C61 
00000000 =00000C62                  MuteSample = $C62 
00000000 =00000C64                  MuteBank = $C64 
00000000 =00000C65                  MuteSample_Rev = $C65 
00000000 =00000C67                  MuteBank_Rev = $C67 
00000000 =00000C68                  YM_Buffer = $C68 
00000000 =00000C69                  PCM1_Sample = $C69 
00000000 =00000C6B                  PCM1_Bank = $C6B 
00000000 =00000C6C                  PCM1_Sample_Rev = $C6C 
00000000 =00000C6E                  PCM1_Bank_Rev = $C6E 
00000000 =00000C6F                  PCM1_SampleNext = $C6F 
00000000 =00000C71                  PCM1_BankNext = $C71 
00000000 =00000C72                  PCM1_SampleNext_Rev = $C72 
00000000 =00000C74                  PCM1_BankNext_Rev = $C74 
00000000 =00000C75                  PCM2_Sample = $C75 
00000000 =00000C77                  PCM2_Bank = $C77 
00000000 =00000C78                  PCM2_Sample_Rev = $C78 
00000000 =00000C7A                  PCM2_Bank_Rev = $C7A 
00000000 =00000C7B                  PCM2_SampleNext = $C7B 
00000000 =00000C7D                  PCM2_BankNext = $C7D 
00000000 =00000C7E                  PCM2_SampleNext_Rev = $C7E 
00000000 =00000C80                  PCM2_BankNext_Rev = $C80 
00000000 =00000CB0                  PCM_Buffer1 = $CB0 
00000000 =00000EB0                  PCM_Buffer2 = $EB0 
00000000 =00001000                  YM_Buffer1 = $1000 
00000000 =00001400                  YM_Buffer2 = $1400 
00000000 =00001800                  PCM_OverflwCalc = $1800 
00000000 =00001A00                  PCM_VolumeControl = $1A00 
00000000 =00001A06                  PCM1_VolumeNew = $1A06 
00000000 =00001A08                  PCM1_VolumeCur = $1A08 
00000000 =00001A13                  PCM1_VolTimer = $1A13 
00000000 =00001A1B                  PCM1_NoVolume = $1A1B 
00000000 =00001A1B                  PCM2_VolumeNew = $1A1B 
00000000 =00001A1D                  PCM2_VolumeCur = $1A1D 
00000000 =00001A28                  PCM2_VolTimer = $1A28 
00000000 =00001A30                  PCM2_NoVolume = $1A30 
00000000 =00001A35                  SwitchVolume = $1A35 
00000000 =00001A38                  SV_VolumeBank = $1A38 
00000000 =00001A55                  SV_NoMute = $1A55 
00000000 =00001A5A                  SV_LoadVolume = $1A5A 
00000000 =00001A6E                  SV_Flush = $1A6E 
00000000 =00001A91                  SVF_NoMute = $1A91 
00000000 =00001A96                  SVF_LoadVolume = $1A96 
00000000 =00001AAB                  SVF_StartVolume = $1AAB 
00000000 =00001AFC                  SwitchBank = $1AFC 
00000000 =00001B03                  SetBank = $1B03 
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                            		include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),($C00004).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000 =000007A0                  torsoart = $7A0 ($C tiles)
00000000 =000007AC                  headart = $7AC ($14 tiles)
00000000 =00000798                  hairart = $798 (8 tiles)
00000000 =000006BA                  ringart = $6BA ($E tiles)
00000000 =00000568                  pointsart = $568 (9 tiles)
00000000 =00000571                  lamppostart = $571 ($A tiles)
00000000                            
00000000 =0000022D                  ssringart = $22D ($E tiles)
00000000                            
00000000 =FFFFF5C0                  SonimeSST = $FFFFF5C0
00000000 =FFFFFFF9                  v_ssangleprev = $FFFFFFF9
00000000 =FFFFF601                  FromSEGA = $FFFFF601
00000000                            
00000000 =00000000                  sonime_headtimer = 0
00000000 =00000002                  sonime_headx = 2
00000000 =00000003                  sonime_heady = 3
00000000 =00000004                  sonime_routine = 4
00000000 =00000005                  sonime_routine2 = 5
00000000 =00000006                  sonime_headx2 = 6
00000000 =00000007                  sonime_headx3 = 7
00000000 =00000009                  sonime_hairx = 9
00000000 =0000000A                  sonime_heady2 = $A
00000000 =0000000B                  sonime_heady3 = $B
00000000 =0000000D                  sonime_hairy = $D
00000000 =0000000E                  sonime_face = $E
00000000 =0000000F                  sonime_faceold = $F
00000000 =00000010                  sonime_facetimer = $10
00000000 =00000012                  sonime_ear = $12
00000000 =00000013                  sonime_earold = $13
00000000 =00000014                  sonime_eartimer = $14
00000000 =00000016                  sonime_torsox = $16
00000000 =00000017                  sonime_movein = $17
00000000 =00000018                  sonime_waittimer = $18
00000000 =00000019                  sonime_waittimer2 = $19
00000000 =00000020                  sonime_pausetimer = $20
00000000 =00000022                  sonime_airtimer = $22
00000000                            
00000000 =00000000                  face_neutrall = 0
00000000 =00000001                  face_blink = 1
00000000 =00000002                  face_neutrallm = 2
00000000 =00000003                  face_neutralm = 3
00000000 =00000004                  face_neutralr = 4
00000000 =00000005                  face_frustrated = 5
00000000 =00000006                  face_surprised = 6
00000000 =00000007                  face_happy = 7
00000000 =00000008                  face_confused = 8
00000000 =00000009                  face_meltdown = 9
00000000 =0000000A                  face_panic = $A
00000000 =0000000B                  face_impatient = $B
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            	; --- Alignment ---
00000000                            
00000000                            align		macro	Size,Value
00000000                            		dcb.b	Size-(*%Size),Value
00000000                            		endm
00000000                            
00000000                            	; --- Stop Z80 ---
00000000                            
00000000                            StopZ80		macro
00000000                            		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
00000000                            		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
00000000                            		bne.s	*-$08					; if not, branch
00000000                            		endm
00000000                            
00000000                            	; --- Start Z80 ---
00000000                            
00000000                            StartZ80	macro
00000000                            		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
00000000                            		endm
00000000                            
00000000                            ResetZ80	macro
00000000                            		move.w	#$0000,($A11200).l			; request Z80 reset (ON)
00000000                            		endm
00000000                            
00000000                            NeglectZ80	macro
00000000                            		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
00000000                            		endm
00000000                            
00000000                            	; --- DMA to (a6) containing C00004 ---
00000000                            
00000000                            DMA:		macro	Size, Source, Destination
00000000                            		move.l	#(((((Size/$02)<<$08)&$FF0000)+((Size/$02)&$FF))+$94009300),(a6)
00000000                            		move.l	#((((((Source&$FFFFFF)/$02)<<$08)&$FF0000)+(((Source&$FFFFFF)/$02)&$FF))+$96009500),(a6)
00000000                            		move.l	#(((((Source&$FFFFFF)/$02)&$7F0000)+$97000000)+((Destination>>$10)&$FFFF)),(a6)
00000000                            		move.w	#((Destination&$FF7F)|$80),(a6)
00000000                            		endm
00000000                            
00000000                            	; --- Storing 68k address for Z80 as dc ---
00000000                            
00000000                            dcz80		macro	Sample, SampleRev, SampleLoop, SampleLoopRev
00000000                            		dc.b	((Sample)&$FF)
00000000                            		dc.b	((((Sample)>>$08)&$7F)|$80)
00000000                            		dc.b	(((Sample)&$7F8000)>>$0F)
00000000                            		dc.b	(((SampleRev)-1)&$FF)
00000000                            		dc.b	(((((SampleRev)-1)>>$08)&$7F)|$80)
00000000                            		dc.b	((((SampleRev)-1)&$7F8000)>>$0F)
00000000                            		dc.b	((SampleLoop)&$FF)
00000000                            		dc.b	((((SampleLoop)>>$08)&$7F)|$80)
00000000                            		dc.b	(((SampleLoop)&$7F8000)>>$0F)
00000000                            		dc.b	(((SampleLoopRev)-1)&$FF)
00000000                            		dc.b	(((((SampleLoopRev)-1)>>$08)&$7F)|$80)
00000000                            		dc.b	((((SampleLoopRev)-1)&$7F8000)>>$0F)
00000000                            		endm
00000000                            
00000000                            	; --- End marker for PCM samples ---
00000000                            
00000000                            EndMarker	macro
00000000                            		dcb.b	Z80E_Read*(($1000+$100)/$100),$00
00000000                            		endm
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            PlayPCM2	macro	Sample
00000000                            		move.l	a0,-(sp)
00000000                            		move.l	a1,-(sp)
00000000                            		lea (Sample).l,a0 ; load sample pointers
00000000                            		lea ($A00C75).l,a1 ; load PCM2 pointers
00000000                            		move.w #$0100,($A11100).l ; request Z80 stop (ON)
00000000                            		btst.b #$00,($A11100).l ; has the Z80 stopped yet?
00000000                            		bne.s *-$08 ; if not, branch
00000000                            		move.b #1,($A0060E).l ; set pitch quotient
00000000                            		move.b #0,($A00619).l ; set pitch fraction
00000000                            		move.b #%11010010,($A00603).l ; set request
00000000                            		move.b (a0)+,(a1)+ ; set address of sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; set address of reverse sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; set address of loop sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; set address of loop reverse sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b #%11011010,($A00651).l ; set request
00000000                            		move.w #$0000,($A11100).l ; request Z80 stop (OFF)
00000000                            		move.l	(sp)+,a1
00000000                            		move.l	(sp)+,a0
00000000                            		endm
00000000                            
00000000 =000001FF                  Max_Rings = 511 ; default. maximum number possible is 759
00000000 =00000400                  Rings_Space = (Max_Rings+1)*2
00000000                            
00000000 =FFFF8000                  Object_Respawn_Table = $FFFF8000
00000000 =FFFFFE2A                  Camera_X_pos_last = $FFFFFE2A
00000000 =FFFFF76E                  Camera_Y_pos_last = $FFFFF76E
00000000                            
00000000 =FFFF8300                  Ring_Positions = $FFFF8300
00000000 =FFFF8700                  Ring_start_addr_ROM = Ring_Positions+Rings_Space
00000000 =FFFF8704                  Ring_end_addr_ROM = Ring_Positions+Rings_Space+4
00000000 =FFFF8708                  Ring_start_addr_RAM = Ring_Positions+Rings_Space+8
00000000 =FFFF870A                  Perfect_rings_left = Ring_Positions+Rings_Space+$A
00000000 =FFFF870C                  Rings_manager_routine = Ring_Positions+Rings_Space+$C
00000000 =FFFF870D                  Level_started_flag = Ring_Positions+Rings_Space+$D
00000000 =FFFF870E                  Ring_consumption_table = Ring_Positions+Rings_Space+$E
00000000 =00000014                  respawn_index = $14	
00000000                            
00000000 =FFFFF60E                  v_pocketbottom = $FFFFF60E
00000000 =FFFFF610                  v_pocketx = $FFFFF610
00000000 =FFFFF612                  f_insidepocket = $FFFFF612
00000000                            
00000000 =0000000B                  mainspr_mapframe    = $B
00000000 =0000000E                  mainspr_width        = $E
00000000 =0000000F                  mainspr_childsprites     = $F    ; amount of child sprites
00000000 =00000014                  mainspr_height        = $14
00000000 =00000010                  sub2_x_pos        = $10    ;x_vel
00000000 =00000012                  sub2_y_pos        = $12    ;y_vel
00000000 =00000015                  sub2_mapframe        = $15
00000000 =00000016                  sub3_x_pos        = $16    ;y_radius
00000000 =00000018                  sub3_y_pos        = $18    ;priority
00000000 =0000001B                  sub3_mapframe        = $1B    ;anim_frame
00000000 =0000001C                  sub4_x_pos        = $1C    ;anim
00000000 =0000001E                  sub4_y_pos        = $1E    ;anim_frame_duration
00000000 =00000021                  sub4_mapframe        = $21    ;collision_property
00000000 =00000022                  sub5_x_pos        = $22    ;status
00000000 =00000024                  sub5_y_pos        = $24    ;routine
00000000 =00000027                  sub5_mapframe        = $27
00000000 =00000028                  sub6_x_pos        = $28    ;subtype
00000000 =0000002A                  sub6_y_pos        = $2A
00000000 =0000002D                  sub6_mapframe        = $2D
00000000 =0000002E                  sub7_x_pos        = $2E
00000000 =00000030                  sub7_y_pos        = $30
00000000 =00000033                  sub7_mapframe        = $33
00000000 =00000034                  sub8_x_pos        = $34
00000000 =00000036                  sub8_y_pos        = $36
00000000 =00000039                  sub8_mapframe        = $39
00000000 =0000003A                  sub9_x_pos        = $3A
00000000 =0000003C                  sub9_y_pos        = $3C
00000000 =0000003F                  sub9_mapframe        = $3F
00000000 =00000006                  next_subspr       = $6	
00000000                            	
00000000 =00000001                  Yes		=	1
00000000 =00000000                  No		=	0
00000000                            
00000000 =00000000                  MUTEDAC		=	No
00000000 =00000000                  MUTEFM		=	No
00000000 =00000000                  MUTEPSG		=	No
00000000 =00000000                  MUTEPSG		=	No
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3139+  Date:		dc.b '(C)SEGA 1991.APR' ; Release date
00000120 5654 5542 4552 2049 4E20+  Title_Local:	dc.b 'VTUBER IN SONIC 1                               ' ; Domestic name
00000150 5654 5542 4552 2049 4E20+  Title_Int:	dc.b 'VTUBER IN SONIC 1                               ' ; International name
00000180 474D 2030 3030 3034 3034+  Serial:					dc.b "GM 00004049-01" ; Serial/version number (Rev01)
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E                            
0000030E                            loc_348:
0000030E 2CC7                       		move.l	d7,(a6)+
00000310 51CE FFFC                  		dbf	d6,loc_348
00000314 1039 00A1 0001             		move.b	($A10001).l,d0
0000031A 0200 00C0                  		andi.b	#$C0,d0
0000031E 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000322 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
0000032A                            
0000032A                            GameInit:
0000032A 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000330 7E00                       		moveq	#0,d7
00000332 3C3C 3F7F                  		move.w	#$3F7F,d6
00000336                            
00000336                            GameClrRAM:
00000336 2CC7                       		move.l	d7,(a6)+
00000338 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
0000033C 6100 0000                  		bsr.w	VDPSetupGame
00000340 6100 0000                  		bsr.w	SoundDriverLoad
00000344 6100 0000                  		bsr.w	JoypadInit
00000348 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000034E                            
0000034E 41FA 0000                  		lea	GML_Int(pc),a0				; load interrupt list
00000352 3258                       		movea.w	(a0)+,a1				; load dump address
00000354 22D8                       		move.l	(a0)+,(a1)+				; jmp $0000
00000356 22D8                       		move.l	(a0)+,(a1)+				; $0000 jmp
00000358 22D8                       		move.l	(a0)+,(a1)+				; $00000000
0000035A                            
0000035A                            MainGameLoop:
0000035A 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000035E 0240 001C                  		andi.w	#$1C,d0
00000362 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000366 60F2                       		bra.s	MainGameLoop
00000368                            
00000368 FF90                       GML_Int:	dc.w	HBlankRAM&$FFFF
0000036A 4EF9 0000 0000             		jmp	PalToCRAM
00000370 4EF9 0000 0000             		jmp	loc_B10
00000376                            
00000376 4E73                       NullBlank:	rte
00000378                            
00000378                            ; ===========================================================================
00000378                            ; ---------------------------------------------------------------------------
00000378                            ; Main game mode array
00000378                            ; ---------------------------------------------------------------------------
00000378                            
00000378                            GameModeArray:
00000378 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000037C                            ; ===========================================================================
0000037C 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
00000380                            ; ===========================================================================
00000380 6000 0000                  		bra.w	Level		; Demo Mode ($08)
00000384                            ; ===========================================================================
00000384 6000 0000                  		bra.w	Level		; Normal Level ($0C)
00000388                            ; ===========================================================================
00000388 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
0000038C                            ; ===========================================================================
0000038C 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
00000390                            ; ===========================================================================
00000390 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
00000394                            ; ===========================================================================
00000394 6000 0000                  		bra.w	Credits		; Credits ($1C)
00000398                            ; ===========================================================================
00000398 4E75                       		rts	
0000039A                            ; ===========================================================================
0000039A                            
0000039A                            loc_43A:
0000039A 46FC 2700                  		move	#$2700,sr
0000039E 544F                       		addq.w	#2,sp
000003A0 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
000003A4 544F                       		addq.w	#2,sp
000003A6 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003AC 6100 0000                  		bsr.w	ShowErrorMsg
000003B0 202F 0002                  		move.l	2(sp),d0
000003B4 6100 0000                  		bsr.w	sub_5BA
000003B8 2038 FC40                  		move.l	($FFFFFC40).w,d0
000003BC 6100 0000                  		bsr.w	sub_5BA
000003C0 6000                       		bra.s	loc_478
000003C2                            ; ===========================================================================
000003C2                            
000003C2                            loc_462:
000003C2 46FC 2700                  		move	#$2700,sr
000003C6 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003CC 6100 0000                  		bsr.w	ShowErrorMsg
000003D0 202F 0002                  		move.l	2(sp),d0
000003D4 6100 0000                  		bsr.w	sub_5BA
000003D8                            
000003D8                            loc_478:
000003D8 6100 0000                  		bsr.w	ErrorWaitForC
000003DC 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
000003E2 46FC 2300                  		move	#$2300,sr
000003E6 4E73                       		rte	
000003E8                            
000003E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000003E8                            
000003E8                            
000003E8                            ShowErrorMsg:				; XREF: loc_43A; loc_462
000003E8 4DF9 00C0 0000             		lea	($C00000).l,a6
000003EE 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000003F8 41F9 0000 0000             		lea	(Art_Text).l,a0
000003FE 323C 027F                  		move.w	#$27F,d1
00000402                            
00000402                            Error_LoadGfx:
00000402 3C98                       		move.w	(a0)+,(a6)
00000404 51C9 FFFC                  		dbf	d1,Error_LoadGfx
00000408 7000                       		moveq	#0,d0		; clear	d0
0000040A 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
0000040E 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000412 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000416 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
00000420 7212                       		moveq	#$12,d1		; number of characters
00000422                            
00000422                            Error_LoopChars:
00000422 7000                       		moveq	#0,d0
00000424 1018                       		move.b	(a0)+,d0
00000426 0640 0790                  		addi.w	#$790,d0
0000042A 3C80                       		move.w	d0,(a6)
0000042C 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
00000430 4E75                       		rts	
00000432                            ; End of function ShowErrorMsg
00000432                            
00000432                            ; ===========================================================================
00000432 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
00000436 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
0000043A 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
0000043E 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
00000442 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
00000446 0000                       		dc.w asc_5A6-ErrorText
00000448 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
0000045B 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000046E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000481 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000494 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
000004A7 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
000004BA 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
000004CD 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
000004E0 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
000004F3 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
00000506 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
0000051A 00                         		even
0000051A                            
0000051A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000051A                            
0000051A                            
0000051A                            sub_5BA:				; XREF: loc_43A; loc_462
0000051A 3CBC 07CA                  		move.w	#$7CA,(a6)
0000051E 7407                       		moveq	#7,d2
00000520                            
00000520                            loc_5C0:
00000520 E998                       		rol.l	#4,d0
00000522 6100                       		bsr.s	sub_5CA
00000524 51CA FFFA                  		dbf	d2,loc_5C0
00000528 4E75                       		rts	
0000052A                            ; End of function sub_5BA
0000052A                            
0000052A                            
0000052A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000052A                            
0000052A                            
0000052A                            sub_5CA:				; XREF: sub_5BA
0000052A 3200                       		move.w	d0,d1
0000052C 0241 000F                  		andi.w	#$F,d1
00000530 0C41 000A                  		cmpi.w	#$A,d1
00000534 6500                       		bcs.s	loc_5D8
00000536 5E41                       		addq.w	#7,d1
00000538                            
00000538                            loc_5D8:
00000538 0641 07C0                  		addi.w	#$7C0,d1
0000053C 3C81                       		move.w	d1,(a6)
0000053E 4E75                       		rts	
00000540                            ; End of function sub_5CA
00000540                            
00000540                            
00000540                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000540                            
00000540                            
00000540                            ErrorWaitForC:				; XREF: loc_478
00000540 6100 0000                  		bsr.w	ReadJoypads
00000544 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
0000054A 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000054E 4E75                       		rts	
00000550                            ; End of function ErrorWaitForC
00000550                            
00000550                            ; ===========================================================================
00000550                            
00000550                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000A70                            		even
00000A70                            
00000A70                            ; ===========================================================================
00000A70                            
00000A70                            loc_B10:				; XREF: Vectors
00000A70 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000A74 4A38 F62A                  		tst.b	($FFFFF62A).w
00000A78 6700                       		beq.s	loc_B88
00000A7A 3039 00C0 0004             		move.w	($C00004).l,d0
00000A80 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000A8A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000A92 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000A98 6700                       		beq.s	loc_B42
00000A9A 303C 0700                  		move.w	#$700,d0
00000A9E                            
00000A9E                            loc_B3E:
00000A9E 51C8 FFFE                  		dbf	d0,loc_B3E
00000AA2                            
00000AA2                            loc_B42:
00000AA2 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000AA6 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000AAC 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000AB2 0240 003E                  		andi.w	#$3E,d0
00000AB6 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000ABA 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000ABE                            
00000ABE                            loc_B5E:				; XREF: loc_B88
00000ABE 4EB9 0000 0000             		jsr	sub_71B4C
00000AC4                            
00000AC4                            loc_B64:				; XREF: loc_D50
00000AC4 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000AC8 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000ACC 4E73                       		rte	
00000ACE                            ; ===========================================================================
00000ACE 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000AD2 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000AD6 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000ADA 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000ADE 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000AE2 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000AE6 0000                       		dc.w loc_E72-off_B6E
00000AE8                            ; ===========================================================================
00000AE8                            
00000AE8                            loc_B88:				; XREF: loc_B10; off_B6E
00000AE8 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000AEE 6700                       		beq.s	loc_B9A
00000AF0 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000AF6 6600 FFC6                  		bne.w	loc_B5E
00000AFA                            
00000AFA                            loc_B9A:
00000AFA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000B00 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000B04 3039 00C0 0004             		move.w	($C00004).l,d0
00000B0A 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B10 6700                       		beq.s	loc_BBA
00000B12 303C 0700                  		move.w	#$700,d0
00000B16                            
00000B16                            loc_BB6:
00000B16 51C8 FFFE                  		dbf	d0,loc_BB6
00000B1A                            
00000B1A                            loc_BBA:
00000B1A 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B20 4A38 F64E                  		tst.b	($FFFFF64E).w
00000B24 6600                       		bne.s	loc_BFE
00000B26 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B2C 3ABC 8C81                  		move.w	#$8C81,(a5)
00000B30 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B36 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000B3C 3ABC 977F                  		move.w	#$977F,(a5)
00000B40 3ABC C000                  		move.w	#$C000,(a5)
00000B44 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B4A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B4E 6000                       		bra.s	loc_C22
00000B50                            ; ===========================================================================
00000B50                            
00000B50                            loc_BFE:				; XREF: loc_BC8
00000B50 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B56 3ABC 8C89                  		move.w	#$8C89,(a5)
00000B5A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B60 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000B66 3ABC 977F                  		move.w	#$977F,(a5)
00000B6A 3ABC C000                  		move.w	#$C000,(a5)
00000B6E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B74 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B78                            
00000B78                            loc_C22:				; XREF: loc_BC8
00000B78 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000B7C 6000 FF40                  		bra.w	loc_B5E
00000B80                            ; ===========================================================================
00000B80                            
00000B80                            loc_C32:				; XREF: off_B6E
00000B80 6100 0000                  		bsr.w	sub_106E
00000B84                            
00000B84                            loc_C36:				; XREF: off_B6E
00000B84 4A78 F614                  		tst.w	($FFFFF614).w
00000B88 6700 0000                  		beq.w	locret_C42
00000B8C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000B90                            
00000B90                            locret_C42:
00000B90 4E75                       		rts	
00000B92                            ; ===========================================================================
00000B92                            
00000B92                            loc_C44:				; XREF: off_B6E
00000B92 6100 0000                  		bsr.w	sub_106E
00000B96 6100 0000                  		bsr.w	sub_6886
00000B9A 6100 0000                  		bsr.w	sub_1642
00000B9E 4A78 F614                  		tst.w	($FFFFF614).w
00000BA2 6700 0000                  		beq.w	locret_C5C
00000BA6 5378 F614                  		subq.w	#1,($FFFFF614).w
00000BAA                            
00000BAA                            locret_C5C:
00000BAA 4E75                       		rts	
00000BAC                            ; ===========================================================================
00000BAC                            
00000BAC                            loc_C5E:				; XREF: off_B6E
00000BAC 6100 0000                  		bsr.w	sub_106E
00000BB0 4E75                       		rts
00000BB2                            
00000BB2                            ; Return:
00000BB2 6100 0000                  		bsr.w	ReadJoypads
00000BB6 4E75                       		rts	
00000BB8                            ; ===========================================================================
00000BB8                            
00000BB8                            loc_C64:				; XREF: off_B6E
00000BB8 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000BBE 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000BC2                            
00000BC2                            loc_C6E:				; XREF: off_B6E
00000BC2 6100 0000                  		bsr.w	ReadJoypads
00000BC6 4A38 F64E                  		tst.b	($FFFFF64E).w
00000BCA 6600                       		bne.s	loc_CB0
00000BCC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BD2 3ABC 8C81                  		move.w	#$8C81,(a5)
00000BD6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BDC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BE2 3ABC 977F                  		move.w	#$977F,(a5)
00000BE6 3ABC C000                  		move.w	#$C000,(a5)
00000BEA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BF4 6000                       		bra.s	loc_CD4
00000BF6                            ; ===========================================================================
00000BF6                            
00000BF6                            loc_CB0:				; XREF: loc_C76
00000BF6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BFC 3ABC 8C89                  		move.w	#$8C89,(a5)
00000C00 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C06 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C0C 3ABC 977F                  		move.w	#$977F,(a5)
00000C10 3ABC C000                  		move.w	#$C000,(a5)
00000C14 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C1A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C1E                            
00000C1E                            loc_CD4:				; XREF: loc_C76
00000C1E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C22 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C28 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000C2E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000C34 3ABC 977F                  		move.w	#$977F,(a5)
00000C38 3ABC 7C00                  		move.w	#$7C00,(a5)
00000C3C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C42 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C46 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C4C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000C52 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000C58 3ABC 977F                  		move.w	#$977F,(a5)
00000C5C 3ABC 7800                  		move.w	#$7800,(a5)
00000C60 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C66 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C6A 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000C70                            
00000C70                            loc_D50:
00000C70 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000C76 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000C7C 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000C82 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000C88 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000C8E 6400                       		bcc.s	Demo_Time
00000C90 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000C96 588F                       		addq.l	#4,sp
00000C98 6000 FE2A                  		bra.w	loc_B64
00000C9C                            
00000C9C                            ; ---------------------------------------------------------------------------
00000C9C                            ; Subroutine to	run a demo for an amount of time
00000C9C                            ; ---------------------------------------------------------------------------
00000C9C                            
00000C9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000C9C                            
00000C9C                            
00000C9C                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000C9C 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000CA0 4EB9 0000 0000             		jsr	AniArt_Load
00000CA6 4EB9 0000 0000             		jsr	HudUpdate
00000CAC 6100 0000                  		bsr.w	sub_165E
00000CB0 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000CB4 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000CB8 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000CBC                            
00000CBC                            Demo_TimeEnd:
00000CBC 4E75                       		rts	
00000CBE                            ; End of function Demo_Time
00000CBE                            
00000CBE                            ; ===========================================================================
00000CBE                            
00000CBE                            loc_DA6:				; XREF: off_B6E
00000CBE 6100 0000                  		bsr.w	ReadJoypads
00000CC2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CC8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CCE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000CD4 3ABC 977F                  		move.w	#$977F,(a5)
00000CD8 3ABC C000                  		move.w	#$C000,(a5)
00000CDC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CE2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CE6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CEC 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000CF2 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000CF8 3ABC 977F                  		move.w	#$977F,(a5)
00000CFC 3ABC 7800                  		move.w	#$7800,(a5)
00000D00 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D06 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D0A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D10 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000D16 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000D1C 3ABC 977F                  		move.w	#$977F,(a5)
00000D20 3ABC 7C00                  		move.w	#$7C00,(a5)
00000D24 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D2A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D2E 6100 0000                  		bsr.w	PalCycle_SS
00000D32 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000D38                            
00000D38                            loc_E64:
00000D38 0C38 0060 F625             		cmpi.b	#96,($FFFFF625).w
00000D3E 6400                       		bcc.s	@update
00000D40 6000 0000                  		bra.w	locret_E70
00000D44                            
00000D44                            	@update:
00000D44 4EB9 0000 0000             		jsr	SS_LoadWalls
00000D4A 4A78 F614                  		tst.w	($FFFFF614).w
00000D4E 6700 0000                  		beq.w	locret_E70
00000D52 5378 F614                  		subq.w	#1,($FFFFF614).w
00000D56                            
00000D56                            locret_E70:
00000D56 4E75                       		rts	
00000D58                            ; ===========================================================================
00000D58                            
00000D58                            loc_E72:				; XREF: off_B6E
00000D58 6100 0000                  		bsr.w	ReadJoypads
00000D5C 4A38 F64E                  		tst.b	($FFFFF64E).w
00000D60 6600                       		bne.s	loc_EB4
00000D62 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D68 3ABC 8C81                  		move.w	#$8C81,(a5)
00000D6C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000D72 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000D78 3ABC 977F                  		move.w	#$977F,(a5)
00000D7C 3ABC C000                  		move.w	#$C000,(a5)
00000D80 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000D86 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D8A 6000                       		bra.s	loc_ED8
00000D8C                            ; ===========================================================================
00000D8C                            
00000D8C                            loc_EB4:				; XREF: loc_E7A
00000D8C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D92 3ABC 8C89                  		move.w	#$8C89,(a5)
00000D96 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000D9C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DA2 3ABC 977F                  		move.w	#$977F,(a5)
00000DA6 3ABC C000                  		move.w	#$C000,(a5)
00000DAA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DB0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DB4                            
00000DB4                            loc_ED8:				; XREF: loc_E7A
00000DB4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000DB8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DBE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000DC4 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000DCA                            
00000DCA                            loc_EEE:
00000DCA 3ABC 977F                  		move.w	#$977F,(a5)
00000DCE 3ABC 7C00                  		move.w	#$7C00,(a5)
00000DD2 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000DD8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DE2 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000DE8 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000DEE 3ABC 977F                  		move.w	#$977F,(a5)
00000DF2 3ABC 7800                  		move.w	#$7800,(a5)
00000DF6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000DFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E00 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E06                            
00000E06                            loc_F54:
00000E06 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000E0C 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000E12 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000E18 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000E1E 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000E22 4EB9 0000 0000             		jsr	AniArt_Load
00000E28 4EB9 0000 0000             		jsr	HudUpdate
00000E2E 6100 0000                  		bsr.w	sub_1642
00000E32 4E75                       		rts	
00000E34                            ; ===========================================================================
00000E34                            
00000E34                            loc_F8A:				; XREF: off_B6E
00000E34 6100 0000                  		bsr.w	sub_106E
00000E38 5238 F628                  		addq.b	#1,($FFFFF628).w
00000E3C 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000E42 4E75                       		rts	
00000E44                            ; ===========================================================================
00000E44                            
00000E44                            loc_F9A:				; XREF: off_B6E
00000E44 6100 0000                  		bsr.w	sub_106E
00000E48 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E4C 6000 0000                  		bra.w	sub_1642
00000E50                            ; ===========================================================================
00000E50                            
00000E50                            loc_FA6:				; XREF: off_B6E
00000E50 6100 0000                  		bsr.w	ReadJoypads
00000E54 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E5A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E60 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E66 3ABC 977F                  		move.w	#$977F,(a5)
00000E6A 3ABC C000                  		move.w	#$C000,(a5)
00000E6E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E74 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E78 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E7E 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000E84 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000E8A 3ABC 977F                  		move.w	#$977F,(a5)
00000E8E 3ABC 7800                  		move.w	#$7800,(a5)
00000E92 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E98 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E9C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EA2 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000EA8 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000EAE 3ABC 977F                  		move.w	#$977F,(a5)
00000EB2 3ABC 7C00                  		move.w	#$7C00,(a5)
00000EB6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EBC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EC0 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000EC6                            
00000EC6                            loc_1060:
00000EC6 4A78 F614                  		tst.w	($FFFFF614).w
00000ECA 6700 0000                  		beq.w	locret_106C
00000ECE 5378 F614                  		subq.w	#1,($FFFFF614).w
00000ED2                            
00000ED2                            locret_106C:
00000ED2 4E75                       		rts	
00000ED4                            
00000ED4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000ED4                            
00000ED4                            
00000ED4                            sub_106E:				; XREF: loc_C32; et al
00000ED4 6100 0000                  		bsr.w	ReadJoypads
00000ED8 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EDC 6600                       		bne.s	loc_10B0
00000EDE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EE4 3ABC 8C81                  		move.w	#$8C81,(a5)
00000EE8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EEE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EF4 3ABC 977F                  		move.w	#$977F,(a5)
00000EF8 3ABC C000                  		move.w	#$C000,(a5)
00000EFC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F02 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F06                            
00000F06                            PAL1_LOAD:
00000F06 6000                       		bra.s	loc_10D4
00000F08                            ; ===========================================================================
00000F08                            
00000F08                            loc_10B0:
00000F08 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F0E 3ABC 8C89                  		move.w	#$8C89,(a5)
00000F12 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000F18 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000F1E 3ABC 977F                  		move.w	#$977F,(a5)
00000F22 3ABC C000                  		move.w	#$C000,(a5)
00000F26 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F2C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F30                            loc_10D4:
00000F30 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F36 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F3C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F42 3ABC 977F                  		move.w	#$977F,(a5)
00000F46 3ABC 7800                  		move.w	#$7800,(a5)
00000F4A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F50 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F54 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F5A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F60 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F66 3ABC 977F                  		move.w	#$977F,(a5)
00000F6A 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F6E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F74 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F78 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F7E 4E75                       		rts	
00000F80                            ; End of function sub_106E
00000F80                            
00000F80                            ; ---------------------------------------------------------------------------
00000F80                            ; Subroutine to	move pallets from the RAM to CRAM
00000F80                            ; ---------------------------------------------------------------------------
00000F80                            
00000F80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F80                            
00000F80                            
00000F80                            PalToCRAM:
00000F80 46FC 2700                  		move	#$2700,sr
00000F84 4A78 F644                  		tst.w	($FFFFF644).w
00000F88 6700                       		beq.s	locret_119C
00000F8A 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00000F90 2F08                       		move.l	a0,-(sp)
00000F92 41F9 00C0 0004             		lea	($C00004).l,a0
00000F98 30BC 8C89                  		move.w	#$8C89,(a0)
00000F9C 30BC 8ADF                  		move.w	#$8ADF,(a0)
00000FA0 205F                       		move.l	(sp)+,a0
00000FA2 4A38 F64F                  		tst.b	($FFFFF64F).w
00000FA6 6600                       		bne.s	loc_119E
00000FA8                            
00000FA8                            locret_119C:
00000FA8 4E73                       		rte	
00000FAA                            ; ===========================================================================
00000FAA                            
00000FAA                            loc_119E:				; XREF: PalToCRAM
00000FAA 4238 F64F                  		clr.b	($FFFFF64F).w
00000FAE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000FB2 6100 FCE8                  		bsr.w	Demo_Time
00000FB6 4EB9 0000 0000             		jsr	sub_71B4C
00000FBC 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000FC0 4E73                       		rte	
00000FC2                            ; End of function PalToCRAM
00000FC2                            
00000FC2                            ; ---------------------------------------------------------------------------
00000FC2                            ; Subroutine to	initialise joypads
00000FC2                            ; ---------------------------------------------------------------------------
00000FC2                            
00000FC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FC2                            
00000FC2                            
00000FC2                            JoypadInit:				; XREF: GameClrRAM
00000FC2 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FCA                            
00000FCA                            Joypad_WaitZ80:
00000FCA 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
00000FD2 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
00000FD4 7040                       		moveq	#$40,d0
00000FD6 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00000FDC 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00000FE2 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00000FE8 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000FF0 4E75                       		rts	
00000FF2                            ; End of function JoypadInit
00000FF2                            
00000FF2                            ; ---------------------------------------------------------------------------
00000FF2                            ; Subroutine to	read joypad input, and send it to the RAM
00000FF2                            ; ---------------------------------------------------------------------------
00000FF2                            
00000FF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FF2                            
00000FF2                            
00000FF2                            ReadJoypads:
00000FF2 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00000FF6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00000FFC 6100                       		bsr.s	Joypad_Read	; do the first joypad
00000FFE 5449                       		addq.w	#2,a1		; do the second	joypad
00001000                            
00001000                            Joypad_Read:
00001000 12BC 0000                  		move.b	#0,(a1)
00001004 4E71                       		nop	
00001006 4E71                       		nop	
00001008 1011                       		move.b	(a1),d0
0000100A E508                       		lsl.b	#2,d0
0000100C 0200 00C0                  		andi.b	#$C0,d0
00001010 12BC 0040                  		move.b	#$40,(a1)
00001014 4E71                       		nop	
00001016 4E71                       		nop	
00001018 1211                       		move.b	(a1),d1
0000101A 0201 003F                  		andi.b	#$3F,d1
0000101E 8001                       		or.b	d1,d0
00001020 4600                       		not.b	d0
00001022 1210                       		move.b	(a0),d1
00001024 B101                       		eor.b	d0,d1
00001026 10C0                       		move.b	d0,(a0)+
00001028 C200                       		and.b	d0,d1
0000102A 10C1                       		move.b	d1,(a0)+
0000102C 4E75                       		rts	
0000102E                            ; End of function ReadJoypads
0000102E                            
0000102E                            
0000102E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000102E                            
0000102E                            
0000102E                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
0000102E 41F9 00C0 0004             		lea	($C00004).l,a0
00001034 43F9 00C0 0000             		lea	($C00000).l,a1
0000103A 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001040 7E12                       		moveq	#$12,d7
00001042                            
00001042                            VDP_Loop:
00001042 309A                       		move.w	(a2)+,(a0)
00001044 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001048                            
00001048 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
0000104E 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001052 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001058 7000                       		moveq	#0,d0
0000105A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001064 3E3C 003F                  		move.w	#$3F,d7
00001068                            
00001068                            VDP_ClrCRAM:
00001068 3280                       		move.w	d0,(a1)
0000106A 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
0000106E                            
0000106E 42B8 F616                  		clr.l	($FFFFF616).w
00001072 42B8 F61A                  		clr.l	($FFFFF61A).w
00001076 2F01                       		move.l	d1,-(sp)
00001078 4BF9 00C0 0004             		lea	($C00004).l,a5
0000107E 3ABC 8F01                  		move.w	#$8F01,(a5)
00001082 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
00001088 3ABC 9780                  		move.w	#$9780,(a5)
0000108C 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001092 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000109A                            
0000109A                            loc_128E:
0000109A 3215                       		move.w	(a5),d1
0000109C 0801 0001                  		btst	#1,d1
000010A0 66F8                       		bne.s	loc_128E
000010A2                            
000010A2 3ABC 8F02                  		move.w	#$8F02,(a5)
000010A6 221F                       		move.l	(sp)+,d1
000010A8 4E75                       		rts	
000010AA                            ; End of function VDPSetupGame
000010AA                            
000010AA                            ; ===========================================================================
000010AA 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000010B2 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000010BA 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000010C2 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000010CA 9001 9100 9200             		dc.w $9001, $9100, $9200
000010D0                            
000010D0                            ; ---------------------------------------------------------------------------
000010D0                            ; Subroutine to	clear the screen
000010D0                            ; ---------------------------------------------------------------------------
000010D0                            
000010D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010D0                            
000010D0                            
000010D0                            ClearScreen:
000010D0 4BF9 00C0 0004             		lea	($C00004).l,a5
000010D6 3ABC 8F01                  		move.w	#$8F01,(a5)
000010DA 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000010E0 3ABC 9780                  		move.w	#$9780,(a5)
000010E4 2ABC 4000 0083             		move.l	#$40000083,(a5)
000010EA 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000010F2                            
000010F2                            loc_12E6:
000010F2 3215                       		move.w	(a5),d1
000010F4 0801 0001                  		btst	#1,d1
000010F8 66F8                       		bne.s	loc_12E6
000010FA                            
000010FA 3ABC 8F02                  		move.w	#$8F02,(a5)
000010FE 4BF9 00C0 0004             		lea	($C00004).l,a5
00001104 3ABC 8F01                  		move.w	#$8F01,(a5)
00001108 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
0000110E 3ABC 9780                  		move.w	#$9780,(a5)
00001112 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001118 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001120                            
00001120                            loc_1314:
00001120 3215                       		move.w	(a5),d1
00001122 0801 0001                  		btst	#1,d1
00001126 66F8                       		bne.s	loc_1314
00001128                            
00001128 3ABC 8F02                  		move.w	#$8F02,(a5)
0000112C 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001134 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
0000113C 43F8 F838                  		lea	($FFFFF838).w,a1
00001140 7000                       		moveq	#0,d0
00001142 323C 0092                  		move.w	#$92,d1
00001146                            
00001146                            loc_133A:
00001146 22C0                       		move.l	d0,(a1)+
00001148 51C9 FFFC                  		dbf	d1,loc_133A
0000114C                            
0000114C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001150 7000                       		moveq	#0,d0
00001152 323C 0100                  		move.w	#$100,d1
00001156                            
00001156                            loc_134A:
00001156 22C0                       		move.l	d0,(a1)+
00001158 51C9 FFFC                  		dbf	d1,loc_134A
0000115C 4E75                       		rts	
0000115E                            ; End of function ClearScreen
0000115E                            
0000115E                            ; ---------------------------------------------------------------------------
0000115E                            ; Subroutine to	load the sound driver
0000115E                            ; ---------------------------------------------------------------------------
0000115E                            
0000115E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000115E                            
0000115E                            
0000115E                            SoundDriverLoad:
0000115E 41F9 0000 0000             		lea	(Z80ROM).l,a0				; load Z80 ROM data
00001164 43F9 00A0 0000             		lea	($A00000).l,a1				; load Z80 RAM space address
0000116A 323C 0000                  		move.w	#(Z80ROM_End-Z80ROM)-$01,d1		; set repeat times
0000116E 33FC 0100 00A1 1100        		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
00001176 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
0000117E 0839 0000 00A1 1100        		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
00001186 66F6                       		bne.s	*-$08					; if not, branch
00001188                            
00001188                            SM_LoadZ80:
00001188 12D8                       		move.b	(a0)+,(a1)+				; dump Z80 data to Z80 space
0000118A 51C9 FFFC                  		dbf	d1,SM_LoadZ80				; repeat til done
0000118E 41F9 0000 0000             		lea	(StopSample).l,a0			; load stop/mute sample address
00001194 43F9 00A0 0C62             		lea	($A00000+MuteSample).l,a1		; load Z80 RAM space where the pointer is to be stored
0000119A 12D8                       		move.b	(a0)+,(a1)+				; copy pointer over into Z80
0000119C 12D8                       		move.b	(a0)+,(a1)+				; ''
0000119E 12D8                       		move.b	(a0)+,(a1)+				; ''
000011A0 12D8                       		move.b	(a0)+,(a1)+				; CHG: copy "reverse" pointer over into Z80
000011A2 12D8                       		move.b	(a0)+,(a1)+				; ''
000011A4 12D8                       		move.b	(a0)+,(a1)+				; ''
000011A6 43F9 00A0 1A38             		lea	($A00000+SV_VolumeBank).l,a1		; load volume bank address write routine
000011AC 12FC 0000                  		move.b 	#$74|((PCM_Volumes>>$0F)&1),(a1)+	; write "ld  (hl),?" instructions
000011B0 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$10)&1),(a1)+	; ''
000011B4 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$11)&1),(a1)+	; ''
000011B8 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$12)&1),(a1)+	; ''
000011BC 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$13)&1),(a1)+	; ''
000011C0 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$14)&1),(a1)+	; ''
000011C4 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$15)&1),(a1)+	; ''
000011C8 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$16)&1),(a1)+	; ''
000011CC 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$17)&1),(a1)+	; ''
000011D0 33FC 0000 00A1 1200        		move.w	#$0000,($A11200).l			; request Z80 reset (ON)
000011D8 727F                       		moveq	#$7F,d1					; set repeat times
000011DA 51C9 FFFE                  		dbf	d1,*					; there's no way of checking for reset, so a manual delay is necessary
000011DE 33FC 0000 00A1 1100        		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
000011E6 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
000011EE 4E75                       		rts						; return
000011F0                            ; End of function SoundDriverLoad
000011F0                            
000011F0                            ; ---------------------------------------------------------------------------
000011F0                            ; Subroutine to	play a sound or	music track
000011F0                            ; ---------------------------------------------------------------------------
000011F0                            
000011F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011F0                            
000011F0                            
000011F0                            PlaySound:
000011F0 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000011F4 4E75                       		rts	
000011F6                            ; End of function PlaySound
000011F6                            
000011F6                            ; ---------------------------------------------------------------------------
000011F6                            ; Subroutine to	play a special sound/music (E0-E4)
000011F6                            ;
000011F6                            ; E0 - Fade out
000011F6                            ; E1 - Sega
000011F6                            ; E2 - Speed up
000011F6                            ; E3 - Normal speed
000011F6                            ; E4 - Stop
000011F6                            ; ---------------------------------------------------------------------------
000011F6                            
000011F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011F6                            
000011F6                            
000011F6                            PlaySound_Special:
000011F6 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000011FA 4E75                       		rts	
000011FC                            ; End of function PlaySound_Special
000011FC                            
000011FC                            ; ===========================================================================
000011FC                            ; ---------------------------------------------------------------------------
000011FC                            ; Unused sound/music subroutine
000011FC                            ; ---------------------------------------------------------------------------
000011FC                            
000011FC                            PlaySound_Unk:
000011FC 11C0 F00C                  		move.b	d0,($FFFFF00C).w
00001200 4E75                       		rts	
00001202                            
00001202                            ; ---------------------------------------------------------------------------
00001202                            ; Subroutine to	pause the game
00001202                            ; ---------------------------------------------------------------------------
00001202                            
00001202                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001202                            
00001202                            
00001202                            PauseGame:				; XREF: Level_MainLoop; et al
00001202 4E71                       		nop	
00001204 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
00001208 6700 0000                  		beq.w	Unpause		; if not, branch
0000120C 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
00001210 6600                       		bne.s	loc_13BE	; if yes, branch
00001212 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001218 6700 0000                  		beq.w	Pause_DoNothing	; if not, branch
0000121C                            
0000121C                            loc_13BE:
0000121C 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
00001222 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001228                            
00001228                            loc_13CA:
00001228 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
0000122E 6100 0000                  		bsr.w	DelayProgram
00001232 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
00001236 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001238 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0000123E 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001240 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001246 4E71                       		nop	
00001248 6000                       		bra.s	loc_1404
0000124A                            ; ===========================================================================
0000124A                            
0000124A                            Pause_ChkBC:				; XREF: PauseGame
0000124A 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001250 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001252 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001258 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000125A                            
0000125A                            Pause_ChkStart:				; XREF: PauseGame
0000125A 4A78 F5E0                  		tst.w	(SonimeSST+sonime_pausetimer).w
0000125E 6600                       		bne.s	@waitlonger
00001260 11FC 0001 F5CE             		move.b	#face_blink,(SonimeSST+sonime_face).w
00001266 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000126C 6000                       		bra.s	@cont
0000126E                            
0000126E                            	@waitlonger:
0000126E 5378 F5E0                  		subi.w	#1,(SonimeSST+sonime_pausetimer).w
00001272                            
00001272                            	@cont:
00001272 41F8 D000                  		lea	($FFFFD000).w,a0 ; a0=object
00001276 7000                       		moveq	#0,d0
00001278 7E7F                       		moveq	#$7F,d7 ; run the first $80 objects out of levels
0000127A 4EB9 0000 0000             		jsr		loc_D368
00001280 4EB9 0000 0000             		jsr		BuildSprites
00001286 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0000128C 6600                       		bne.s	@notss
0000128E 4EB9 0000 0000             		jsr	SS_ShowLayout
00001294                            
00001294                            	@notss:
00001294 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0000129A 678C                       		beq.s	loc_13CA	; if not, branch
0000129C 31FC 0200 F5E0             		move.w	#$200,(SonimeSST+sonime_pausetimer).w
000012A2                            
000012A2                            loc_1404:				; XREF: PauseGame
000012A2 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000012A8                            
000012A8                            Unpause:				; XREF: PauseGame
000012A8 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
000012AE                            
000012AE                            Pause_DoNothing:			; XREF: PauseGame
000012AE 4E75                       		rts	
000012B0                            ; ===========================================================================
000012B0                            
000012B0                            Pause_SlowMo:				; XREF: PauseGame
000012B0 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
000012B6 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000012BC 4E75                       		rts	
000012BE                            ; End of function PauseGame
000012BE                            
000012BE                            ; ---------------------------------------------------------------------------
000012BE                            ; Subroutine to	display	patterns via the VDP
000012BE                            ; ---------------------------------------------------------------------------
000012BE                            
000012BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012BE                            
000012BE                            
000012BE                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
000012BE 4DF9 00C0 0000             		lea	($C00000).l,a6
000012C4 283C 0080 0000             		move.l	#$800000,d4
000012CA                            
000012CA                            loc_142C:
000012CA 2D40 0004                  		move.l	d0,4(a6)
000012CE 3601                       		move.w	d1,d3
000012D0                            
000012D0                            loc_1432:
000012D0 3C99                       		move.w	(a1)+,(a6)
000012D2 51CB FFFC                  		dbf	d3,loc_1432
000012D6 D084                       		add.l	d4,d0
000012D8 51CA FFF0                  		dbf	d2,loc_142C
000012DC 4E75                       		rts	
000012DE                            ; End of function ShowVDPGraphics
000012DE                            
000012DE                            ; ==============================================================================
000012DE                            ; ------------------------------------------------------------------------------
000012DE                            ; Nemesis decompression routine
000012DE                            ; ------------------------------------------------------------------------------
000012DE                            ; Optimized by vladikcomper
000012DE                            ; ------------------------------------------------------------------------------
000012DE                             
000012DE                            NemDec_RAM:
000012DE 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
000012E2 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
000012E6 6000                           bra.s   NemDec_Main
000012E8                             
000012E8                            ; ------------------------------------------------------------------------------
000012E8                            NemDec:
000012E8 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
000012EC 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
000012F2 47FA 0000                      lea NemDec_WriteRowToVDP(pc),a3
000012F6                             
000012F6                            NemDec_Main:
000012F6 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
000012FA 3418                           move.w  (a0)+,d2        ; get number of patterns
000012FC 6A00                           bpl.s   @0          ; are we in Mode 0?
000012FE 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
00001302 E74A                       @0  lsl.w   #3,d2
00001304 3A42                           movea.w d2,a5
00001306 7607                           moveq   #7,d3
00001308 7400                           moveq   #0,d2
0000130A 7800                           moveq   #0,d4
0000130C 6100 0000                      bsr.w   NemDec4
00001310 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
00001312 E145                           asl.w   #8,d5           ; shift up by a byte
00001314 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
00001316 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
0000131A 6100                           bsr.s   NemDec2
0000131C 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
00001320 4E75                           rts
00001322                             
00001322                            ; ---------------------------------------------------------------------------
00001322                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001322                            ; ---------------------------------------------------------------------------
00001322                             
00001322                            NemDec2:
00001322 3E06                           move.w  d6,d7
00001324 5147                           subq.w  #8,d7           ; get shift value
00001326 3205                           move.w  d5,d1
00001328 EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
0000132A 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
0000132E 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
00001330 0241 00FF                      andi.w  #$FF,d1
00001334 D241                           add.w   d1,d1
00001336 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
0000133A 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
0000133E 6400                           bcc.s   @0          ; if not, branch
00001340 5046                           addq.w  #8,d6
00001342 E145                           asl.w   #8,d5
00001344 1A18                           move.b  (a0)+,d5        ; read next byte
00001346 1231 1001                  @0  move.b  1(a1,d1.w),d1
0000134A 3001                           move.w  d1,d0
0000134C 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
00001350 0240 00F0                      andi.w  #$F0,d0
00001354                             
00001354                            NemDec_GetRepeatCount:
00001354 E848                           lsr.w   #4,d0           ; get repeat count
00001356                             
00001356                            NemDec_WritePixel:
00001356 E98C                           lsl.l   #4,d4           ; shift up by a nybble
00001358 8801                           or.b    d1,d4           ; write pixel
0000135A 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
0000135E 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
00001360                            ; ---------------------------------------------------------------------------
00001360                             
00001360                            NemDec3:
00001360 7800                           moveq   #0,d4           ; reset row
00001362 7607                           moveq   #7,d3           ; reset nybble counter
00001364                             
00001364                            NemDec_WritePixelLoop:
00001364 51C8 FFF0                      dbf d0,NemDec_WritePixel
00001368 60B8                           bra.s   NemDec2
0000136A                            ; ---------------------------------------------------------------------------
0000136A                             
0000136A                            NemDec_InlineData:
0000136A 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
0000136C 0C46 0009                      cmpi.w  #9,d6
00001370 6400                           bcc.s   @0
00001372 5046                           addq.w  #8,d6
00001374 E145                           asl.w   #8,d5
00001376 1A18                           move.b  (a0)+,d5
00001378 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
0000137A 3205                           move.w  d5,d1
0000137C EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
0000137E 3001                           move.w  d1,d0
00001380 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
00001384 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
00001388 0C46 0009                      cmpi.w  #9,d6
0000138C 64C6                           bcc.s   NemDec_GetRepeatCount
0000138E 5046                           addq.w  #8,d6
00001390 E145                           asl.w   #8,d5
00001392 1A18                           move.b  (a0)+,d5
00001394 60BE                           bra.s   NemDec_GetRepeatCount
00001396                             
00001396                            ; ---------------------------------------------------------------------------
00001396                            ; Subroutines to output decompressed entry
00001396                            ; Selected depending on current decompression mode
00001396                            ; ---------------------------------------------------------------------------
00001396                             
00001396                            NemDec_WriteRowToVDP:
00001396                            loc_1502:
00001396 2884                           move.l  d4,(a4)         ; write 8-pixel row
00001398 534D                           subq.w  #1,a5
0000139A 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
0000139C 66C2                           bne.s   NemDec3         ; if not, branch
0000139E 4E75                           rts
000013A0                            ; ---------------------------------------------------------------------------
000013A0                             
000013A0                            NemDec_WriteRowToVDP_XOR:
000013A0 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013A2 2882                           move.l  d2,(a4)         ; and write the result
000013A4 534D                           subq.w  #1,a5
000013A6 380D                           move.w  a5,d4
000013A8 66B6                           bne.s   NemDec3
000013AA 4E75                           rts
000013AC                            ; ---------------------------------------------------------------------------
000013AC                             
000013AC                            NemDec_WriteRowToRAM:
000013AC 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
000013AE 534D                           subq.w  #1,a5
000013B0 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013B2 66AC                           bne.s   NemDec3         ; if not, branch
000013B4 4E75                           rts
000013B6                            ; ---------------------------------------------------------------------------
000013B6                             
000013B6                            NemDec_WriteRowToRAM_XOR:
000013B6 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013B8 28C2                           move.l  d2,(a4)+        ; and write the result
000013BA 534D                           subq.w  #1,a5
000013BC 380D                           move.w  a5,d4
000013BE 66A0                           bne.s   NemDec3
000013C0 4E75                           rts
000013C2                             
000013C2                            ; ---------------------------------------------------------------------------
000013C2                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
000013C2                            ; ---------------------------------------------------------------------------
000013C2                             
000013C2                            NemDec4:
000013C2 1018                           move.b  (a0)+,d0        ; read first byte
000013C4                             
000013C4                            @ChkEnd:
000013C4 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
000013C8 6600                           bne.s   @NewPalIndex        ; if not, branch
000013CA 4E75                           rts
000013CC                            ; ---------------------------------------------------------------------------
000013CC                             
000013CC                            @NewPalIndex:
000013CC 3E00                           move.w  d0,d7
000013CE                             
000013CE                            @ItemLoop:
000013CE 1018                           move.b  (a0)+,d0        ; read next byte
000013D0 6BF2                           bmi.s   @ChkEnd         ; ~~
000013D2 1200                           move.b  d0,d1
000013D4 0247 000F                      andi.w  #$F,d7          ; get palette index
000013D8 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
000013DC 8E41                           or.w    d1,d7           ; combine the two
000013DE 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
000013E2 1200                           move.b  d0,d1
000013E4 E149                           lsl.w   #8,d1
000013E6 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
000013E8 7208                           moveq   #8,d1
000013EA 9240                           sub.w   d0,d1           ; is the code 8 bits long?
000013EC 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
000013EE 1018                           move.b  (a0)+,d0        ; get code
000013F0 D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
000013F2 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
000013F6 60D6                           bra.s   @ItemLoop       ; repeat
000013F8                            ; ---------------------------------------------------------------------------
000013F8                             
000013F8                            @ItemShortCode:
000013F8 1018                           move.b  (a0)+,d0        ; get code
000013FA E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
000013FC D040                           add.w   d0,d0           ; get index into code table
000013FE 7A01                           moveq   #1,d5
00001400 E36D                           lsl.w   d1,d5
00001402 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
00001404 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
00001408                             
00001408                            @ItemShortCodeLoop:
00001408 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
0000140A 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
0000140E 60BE                           bra.s   @ItemLoop
00001410                            
00001410                            ; ===============================================================
00001410                            ; ---------------------------------------------------------------
00001410                            ; uncompressed art to VRAM loader
00001410                            ; ---------------------------------------------------------------
00001410                            ; INPUT:
00001410                            ;       a0      - Source Offset
00001410                            ;   d0  - length in tiles
00001410                            ; ---------------------------------------------------------------
00001410                            LoadUncArt:
00001410 46FC 2700                          move    #$2700,sr   ; disable interrupts
00001414 4DF9 00C0 0000                     lea $C00000.l,a6    ; get VDP data port
0000141A                             
0000141A                            LoadArt_Loop:
0000141A 2C98                               move.l  (a0)+,(a6)  ; transfer 4 bytes
0000141C 2C98                               move.l  (a0)+,(a6)  ; transfer 4 more bytes
0000141E 2C98                               move.l  (a0)+,(a6)  ; and so on and so forth
00001420 2C98                               move.l  (a0)+,(a6)  ;
00001422 2C98                               move.l  (a0)+,(a6)  ;
00001424 2C98                               move.l  (a0)+,(a6)  ;
00001426 2C98                               move.l  (a0)+,(a6)  ; in total transfer 32 bytes
00001428 2C98                               move.l  (a0)+,(a6)  ; which is 1 full tile
0000142A                             
0000142A 51C8 FFEE                          dbf d0, LoadArt_Loop; loop until d0 = 0
0000142E 46FC 2300                          move    #$2300,sr   ; enable interrupts
00001432 4E75                               rts	
00001434                            
00001434                            ; ---------------------------------------------------------------------------
00001434                            ; Subroutine to	load pattern load cues
00001434                            ; ---------------------------------------------------------------------------
00001434                            
00001434                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001434                            
00001434                            
00001434                            LoadPLC:
00001434 48E7 0060                  		movem.l	a1-a2,-(sp)
00001438 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000143E D040                       		add.w	d0,d0
00001440 3031 0000                  		move.w	(a1,d0.w),d0
00001444 43F1 0000                  		lea	(a1,d0.w),a1
00001448 45F8 F680                  		lea	($FFFFF680).w,a2
0000144C                            
0000144C                            loc_1598:
0000144C 4A92                       		tst.l	(a2)
0000144E 6700                       		beq.s	loc_15A0
00001450 5C4A                       		addq.w	#6,a2
00001452 60F8                       		bra.s	loc_1598
00001454                            ; ===========================================================================
00001454                            
00001454                            loc_15A0:				; XREF: LoadPLC
00001454 3019                       		move.w	(a1)+,d0
00001456 6B00                       		bmi.s	loc_15AC
00001458                            
00001458                            loc_15A4:
00001458 24D9                       		move.l	(a1)+,(a2)+
0000145A 34D9                       		move.w	(a1)+,(a2)+
0000145C 51C8 FFFA                  		dbf	d0,loc_15A4
00001460                            
00001460                            loc_15AC:
00001460 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001464 4E75                       		rts	
00001466                            ; End of function LoadPLC
00001466                            
00001466                            
00001466                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001466                            
00001466                            
00001466                            LoadPLC2:
00001466 48E7 0060                  		movem.l	a1-a2,-(sp)
0000146A 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001470 D040                       		add.w	d0,d0
00001472 3031 0000                  		move.w	(a1,d0.w),d0
00001476 43F1 0000                  		lea	(a1,d0.w),a1
0000147A 6100                       		bsr.s	ClearPLC
0000147C 45F8 F680                  		lea	($FFFFF680).w,a2
00001480 3019                       		move.w	(a1)+,d0
00001482 6B00                       		bmi.s	loc_15D8
00001484                            
00001484                            loc_15D0:
00001484 24D9                       		move.l	(a1)+,(a2)+
00001486 34D9                       		move.w	(a1)+,(a2)+
00001488 51C8 FFFA                  		dbf	d0,loc_15D0
0000148C                            
0000148C                            loc_15D8:
0000148C 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001490 4E75                       		rts	
00001492                            ; End of function LoadPLC2
00001492                            
00001492                            ; ---------------------------------------------------------------------------
00001492                            ; Subroutine to	clear the pattern load cues
00001492                            ; ---------------------------------------------------------------------------
00001492                            
00001492                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001492                            
00001492                            
00001492                            ClearPLC:				; XREF: LoadPLC2
00001492 45F8 F680                  		lea	($FFFFF680).w,a2
00001496 701F                       		moveq	#$1F,d0
00001498                            
00001498                            ClearPLC_Loop:
00001498 429A                       		clr.l	(a2)+
0000149A 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000149E 4E75                       		rts	
000014A0                            ; End of function ClearPLC
000014A0                            
000014A0                            ; ---------------------------------------------------------------------------
000014A0                            ; Subroutine to	use graphics listed in a pattern load cue
000014A0                            ; ---------------------------------------------------------------------------
000014A0                            
000014A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014A0                            
000014A0                            
000014A0                            RunPLC_RAM:				; XREF: Pal_FadeTo
000014A0 4AB8 F680                  		tst.l	($FFFFF680).w
000014A4 6700                       		beq.s	locret_1640
000014A6 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000014AA 6600                       		bne.s	locret_1640
000014AC 2078 F680                  		movea.l	($FFFFF680).w,a0
000014B0 47F9 0000 1396             		lea	(loc_1502).l,a3
000014B6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000014BA 3418                       		move.w	(a0)+,d2
000014BC 6A00                       		bpl.s	loc_160E
000014BE D6FC 000A                  		adda.w	#$A,a3
000014C2                            
000014C2                            loc_160E:
000014C2 0242 7FFF                  		andi.w	#$7FFF,d2
000014C6 6100 FEFA                  		bsr.w	NemDec4
000014CA 1A18                       		move.b	(a0)+,d5
000014CC E145                       		asl.w	#8,d5
000014CE 1A18                       		move.b	(a0)+,d5
000014D0 7C10                       		moveq	#$10,d6
000014D2 7000                       		moveq	#0,d0
000014D4 21C8 F680                  		move.l	a0,($FFFFF680).w
000014D8 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000014DC 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000014E0 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000014E4 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000014E8 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000014EC 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000014F0 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
000014F4                            		
000014F4                            locret_1640:
000014F4 4E75                       		rts	
000014F6                            ; End of function RunPLC_RAM
000014F6                            
000014F6                            
000014F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014F6                            
000014F6                            
000014F6                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
000014F6 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000014FA 6700 0000                  		beq.w	locret_16DA
000014FE 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001504 7000                       		moveq	#0,d0
00001506 3038 F684                  		move.w	($FFFFF684).w,d0
0000150A 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001510 6000                       		bra.s	loc_1676
00001512                            ; End of function sub_1642
00001512                            
00001512                            
00001512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001512                            
00001512                            
00001512                            sub_165E:				; XREF: Demo_Time
00001512 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001516 6700                       		beq.s	locret_16DA
00001518 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000151E 7000                       		moveq	#0,d0
00001520 3038 F684                  		move.w	($FFFFF684).w,d0
00001524 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000152A                            
0000152A                            loc_1676:				; XREF: sub_1642
0000152A 49F9 00C0 0004             		lea	($C00004).l,a4
00001530 E588                       		lsl.l	#2,d0
00001532 E448                       		lsr.w	#2,d0
00001534 0040 4000                  		ori.w	#$4000,d0
00001538 4840                       		swap	d0
0000153A 2880                       		move.l	d0,(a4)
0000153C 594C                       		subq.w	#4,a4
0000153E 2078 F680                  		movea.l	($FFFFF680).w,a0
00001542 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001546 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
0000154A 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
0000154E 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001552 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001556 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
0000155A 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000155E                            
0000155E                            loc_16AA:				; XREF: sub_165E
0000155E 3A7C 0008                  		movea.w	#8,a5
00001562 6100 FDFC                  		bsr.w	NemDec3
00001566 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
0000156A 6700                       		beq.s	loc_16DC
0000156C 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001570 66EC                       		bne.s	loc_16AA
00001572 21C8 F680                  		move.l	a0,($FFFFF680).w
00001576 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000157A 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000157E 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001582 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001586 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000158A 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000158E                            
0000158E                            locret_16DA:				; XREF: sub_1642
0000158E 4E75                       		rts	
00001590                            ; ===========================================================================
00001590                            
00001590                            loc_16DC:				; XREF: sub_165E
00001590 41F8 F680                  		lea	($FFFFF680).w,a0
00001594 7015                       		moveq	#$15,d0
00001596                            
00001596                            loc_16E2:				; XREF: sub_165E
00001596 20E8 0006                  		move.l	6(a0),(a0)+
0000159A 51C8 FFFA                  		dbf	d0,loc_16E2
0000159E 4E75                       		rts	
000015A0                            ; End of function sub_165E
000015A0                            
000015A0                            ; ---------------------------------------------------------------------------
000015A0                            ; Subroutine to	execute	the pattern load cue
000015A0                            ; ---------------------------------------------------------------------------
000015A0                            
000015A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015A0                            
000015A0                            
000015A0                            RunPLC_ROM:
000015A0 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000015A6 D040                       		add.w	d0,d0
000015A8 3031 0000                  		move.w	(a1,d0.w),d0
000015AC 43F1 0000                  		lea	(a1,d0.w),a1
000015B0 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
000015B2                            
000015B2                            RunPLC_Loop:
000015B2 2059                       		movea.l	(a1)+,a0	; get art pointer
000015B4 7000                       		moveq	#0,d0
000015B6 3019                       		move.w	(a1)+,d0	; get VRAM address
000015B8 E588                       		lsl.l	#2,d0		; divide address by $20
000015BA E448                       		lsr.w	#2,d0
000015BC 0040 4000                  		ori.w	#$4000,d0
000015C0 4840                       		swap	d0
000015C2 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
000015C8 6100 FD1E                  		bsr.w	NemDec		; decompress
000015CC 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
000015D0 4E75                       		rts	
000015D2                            ; End of function RunPLC_ROM
000015D2                            
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            ; Enigma decompression algorithm
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            
000015D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015D2                            
000015D2                            
000015D2                            EniDec:
000015D2 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
000015D6 3640                       		movea.w	d0,a3
000015D8 1018                       		move.b	(a0)+,d0
000015DA 4880                       		ext.w	d0
000015DC 3A40                       		movea.w	d0,a5
000015DE 1818                       		move.b	(a0)+,d4
000015E0 E70C                       		lsl.b	#3,d4
000015E2 3458                       		movea.w	(a0)+,a2
000015E4 D4CB                       		adda.w	a3,a2
000015E6 3858                       		movea.w	(a0)+,a4
000015E8 D8CB                       		adda.w	a3,a4
000015EA 1A18                       		move.b	(a0)+,d5
000015EC E145                       		asl.w	#8,d5
000015EE 1A18                       		move.b	(a0)+,d5
000015F0 7C10                       		moveq	#$10,d6
000015F2                            
000015F2                            loc_173E:				; XREF: loc_1768
000015F2 7007                       		moveq	#7,d0
000015F4 3E06                       		move.w	d6,d7
000015F6 9E40                       		sub.w	d0,d7
000015F8 3205                       		move.w	d5,d1
000015FA EE69                       		lsr.w	d7,d1
000015FC 0241 007F                  		andi.w	#$7F,d1
00001600 3401                       		move.w	d1,d2
00001602 0C41 0040                  		cmpi.w	#$40,d1
00001606 6400                       		bcc.s	loc_1758
00001608 7006                       		moveq	#6,d0
0000160A E24A                       		lsr.w	#1,d2
0000160C                            
0000160C                            loc_1758:
0000160C 6100 0000                  		bsr.w	sub_188C
00001610 0242 000F                  		andi.w	#$F,d2
00001614 E849                       		lsr.w	#4,d1
00001616 D241                       		add.w	d1,d1
00001618 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000161C                            ; End of function EniDec
0000161C                            
0000161C                            ; ===========================================================================
0000161C                            
0000161C                            loc_1768:				; XREF: loc_17B4
0000161C 32CA                       		move.w	a2,(a1)+
0000161E 524A                       		addq.w	#1,a2
00001620 51CA FFFA                  		dbf	d2,loc_1768
00001624 60CC                       		bra.s	loc_173E
00001626                            ; ===========================================================================
00001626                            
00001626                            loc_1772:				; XREF: loc_17B4
00001626 32CC                       		move.w	a4,(a1)+
00001628 51CA FFFC                  		dbf	d2,loc_1772
0000162C 60C4                       		bra.s	loc_173E
0000162E                            ; ===========================================================================
0000162E                            
0000162E                            loc_177A:				; XREF: loc_17B4
0000162E 6100 0000                  		bsr.w	loc_17DC
00001632                            
00001632                            loc_177E:
00001632 32C1                       		move.w	d1,(a1)+
00001634 51CA FFFC                  		dbf	d2,loc_177E
00001638 60B8                       		bra.s	loc_173E
0000163A                            ; ===========================================================================
0000163A                            
0000163A                            loc_1786:				; XREF: loc_17B4
0000163A 6100 0000                  		bsr.w	loc_17DC
0000163E                            
0000163E                            loc_178A:
0000163E 32C1                       		move.w	d1,(a1)+
00001640 5241                       		addq.w	#1,d1
00001642 51CA FFFA                  		dbf	d2,loc_178A
00001646 60AA                       		bra.s	loc_173E
00001648                            ; ===========================================================================
00001648                            
00001648                            loc_1794:				; XREF: loc_17B4
00001648 6100 0000                  		bsr.w	loc_17DC
0000164C                            
0000164C                            loc_1798:
0000164C 32C1                       		move.w	d1,(a1)+
0000164E 5341                       		subq.w	#1,d1
00001650 51CA FFFA                  		dbf	d2,loc_1798
00001654 609C                       		bra.s	loc_173E
00001656                            ; ===========================================================================
00001656                            
00001656                            loc_17A2:				; XREF: loc_17B4
00001656 0C42 000F                  		cmpi.w	#$F,d2
0000165A 6700                       		beq.s	loc_17C4
0000165C                            
0000165C                            loc_17A8:
0000165C 6100 0000                  		bsr.w	loc_17DC
00001660 32C1                       		move.w	d1,(a1)+
00001662 51CA FFF8                  		dbf	d2,loc_17A8
00001666 608A                       		bra.s	loc_173E
00001668                            ; ===========================================================================
00001668                            
00001668                            loc_17B4:				; XREF: EniDec
00001668 60B2                       		bra.s	loc_1768
0000166A                            ; ===========================================================================
0000166A 60B0                       		bra.s	loc_1768
0000166C                            ; ===========================================================================
0000166C 60B8                       		bra.s	loc_1772
0000166E                            ; ===========================================================================
0000166E 60B6                       		bra.s	loc_1772
00001670                            ; ===========================================================================
00001670 60BC                       		bra.s	loc_177A
00001672                            ; ===========================================================================
00001672 60C6                       		bra.s	loc_1786
00001674                            ; ===========================================================================
00001674 60D2                       		bra.s	loc_1794
00001676                            ; ===========================================================================
00001676 60DE                       		bra.s	loc_17A2
00001678                            ; ===========================================================================
00001678                            
00001678                            loc_17C4:				; XREF: loc_17A2
00001678 5348                       		subq.w	#1,a0
0000167A 0C46 0010                  		cmpi.w	#$10,d6
0000167E 6600                       		bne.s	loc_17CE
00001680 5348                       		subq.w	#1,a0
00001682                            
00001682                            loc_17CE:
00001682 3008                       		move.w	a0,d0
00001684 E248                       		lsr.w	#1,d0
00001686 6400                       		bcc.s	loc_17D6
00001688 5248                       		addq.w	#1,a0
0000168A                            
0000168A                            loc_17D6:
0000168A 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
0000168E 4E75                       		rts	
00001690                            ; ===========================================================================
00001690                            
00001690                            loc_17DC:				; XREF: loc_17A2
00001690 360B                       		move.w	a3,d3
00001692 1204                       		move.b	d4,d1
00001694 D201                       		add.b	d1,d1
00001696 6400                       		bcc.s	loc_17EE
00001698 5346                       		subq.w	#1,d6
0000169A 0D05                       		btst	d6,d5
0000169C 6700                       		beq.s	loc_17EE
0000169E 0043 8000                  		ori.w	#-$8000,d3
000016A2                            
000016A2                            loc_17EE:
000016A2 D201                       		add.b	d1,d1
000016A4 6400                       		bcc.s	loc_17FC
000016A6 5346                       		subq.w	#1,d6
000016A8 0D05                       		btst	d6,d5
000016AA 6700                       		beq.s	loc_17FC
000016AC 0643 4000                  		addi.w	#$4000,d3
000016B0                            
000016B0                            loc_17FC:
000016B0 D201                       		add.b	d1,d1
000016B2 6400                       		bcc.s	loc_180A
000016B4 5346                       		subq.w	#1,d6
000016B6 0D05                       		btst	d6,d5
000016B8 6700                       		beq.s	loc_180A
000016BA 0643 2000                  		addi.w	#$2000,d3
000016BE                            
000016BE                            loc_180A:
000016BE D201                       		add.b	d1,d1
000016C0 6400                       		bcc.s	loc_1818
000016C2 5346                       		subq.w	#1,d6
000016C4 0D05                       		btst	d6,d5
000016C6 6700                       		beq.s	loc_1818
000016C8 0043 1000                  		ori.w	#$1000,d3
000016CC                            
000016CC                            loc_1818:
000016CC D201                       		add.b	d1,d1
000016CE 6400                       		bcc.s	loc_1826
000016D0 5346                       		subq.w	#1,d6
000016D2 0D05                       		btst	d6,d5
000016D4 6700                       		beq.s	loc_1826
000016D6 0043 0800                  		ori.w	#$800,d3
000016DA                            
000016DA                            loc_1826:
000016DA 3205                       		move.w	d5,d1
000016DC 3E06                       		move.w	d6,d7
000016DE 9E4D                       		sub.w	a5,d7
000016E0 6400                       		bcc.s	loc_1856
000016E2 3C07                       		move.w	d7,d6
000016E4 0646 0010                  		addi.w	#$10,d6
000016E8 4447                       		neg.w	d7
000016EA EF69                       		lsl.w	d7,d1
000016EC 1A10                       		move.b	(a0),d5
000016EE EF3D                       		rol.b	d7,d5
000016F0 DE47                       		add.w	d7,d7
000016F2 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
000016F6 D245                       		add.w	d5,d1
000016F8                            
000016F8                            loc_1844:				; XREF: loc_1868
000016F8 300D                       		move.w	a5,d0
000016FA D040                       		add.w	d0,d0
000016FC C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001700 D243                       		add.w	d3,d1
00001702 1A18                       		move.b	(a0)+,d5
00001704 E14D                       		lsl.w	#8,d5
00001706 1A18                       		move.b	(a0)+,d5
00001708 4E75                       		rts	
0000170A                            ; ===========================================================================
0000170A                            
0000170A                            loc_1856:				; XREF: loc_1826
0000170A 6700                       		beq.s	loc_1868
0000170C EE69                       		lsr.w	d7,d1
0000170E 300D                       		move.w	a5,d0
00001710 D040                       		add.w	d0,d0
00001712 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001716 D243                       		add.w	d3,d1
00001718 300D                       		move.w	a5,d0
0000171A 6000                       		bra.s	sub_188C
0000171C                            ; ===========================================================================
0000171C                            
0000171C                            loc_1868:				; XREF: loc_1856
0000171C 7C10                       		moveq	#$10,d6
0000171E                            
0000171E                            loc_186A:
0000171E 60D8                       		bra.s	loc_1844
00001720                            ; ===========================================================================
00001720 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001736 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001740                            
00001740                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001740                            
00001740                            
00001740                            sub_188C:				; XREF: EniDec
00001740 9C40                       		sub.w	d0,d6
00001742 0C46 0009                  		cmpi.w	#9,d6
00001746 6400                       		bcc.s	locret_189A
00001748 5046                       		addq.w	#8,d6
0000174A E145                       		asl.w	#8,d5
0000174C 1A18                       		move.b	(a0)+,d5
0000174E                            
0000174E                            locret_189A:
0000174E 4E75                       		rts	
00001750                            ; End of function sub_188C
00001750                            
00001750                            ; ===========================================================================
00001750                            ; ---------------------------------------------------------------------------
00001750                            ; Kosinski decompression routine
00001750                            ;
00001750                            ; Created by vladikcomper
00001750                            ; Special thanks to flamewing and MarkeyJester
00001750                            ; ---------------------------------------------------------------------------
00001750                             
00001750                            _Kos_RunBitStream macro
00001750                                dbf d2,@skip\@
00001750                                moveq   #7,d2
00001750                                move.b  d1,d0
00001750                                swap    d3
00001750                                bpl.s   @skip\@
00001750                                move.b  (a0)+,d0            ; get desc. bitfield
00001750                                move.b  (a0)+,d1            ;
00001750                                move.b  (a4,d0.w),d0            ; reload converted desc. bitfield from a LUT
00001750                                move.b  (a4,d1.w),d1            ;
00001750                            @skip\@
00001750                                endm
00001750                            ; ---------------------------------------------------------------------------
00001750                             
00001750                            KosDec:
00001750 7E07                           moveq   #7,d7
00001752 7000                           moveq   #0,d0
00001754 7200                           moveq   #0,d1
00001756 49FA 0000                      lea KosDec_ByteMap(pc),a4
0000175A 1018                           move.b  (a0)+,d0            ; get desc field low-byte
0000175C 1218                           move.b  (a0)+,d1            ; get desc field hi-byte
0000175E 1034 0000                      move.b  (a4,d0.w),d0            ; reload converted desc. bitfield from a LUT
00001762 1234 1000                      move.b  (a4,d1.w),d1            ;
00001766 7407                           moveq   #7,d2               ; set repeat count to 8
00001768 76FF                           moveq   #-1,d3              ; d3 will be desc field switcher
0000176A 4243                           clr.w   d3              ;
0000176C 6000                           bra.s   KosDec_FetchNewCode
0000176E                             
0000176E                            KosDec_FetchCodeLoop:
0000176E                                ; code 1 (Uncompressed byte)
0000176E 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
00001786 12D8                           move.b  (a0)+,(a1)+
00001788                             
00001788                            KosDec_FetchNewCode:
00001788 D000                           add.b   d0,d0               ; get a bit from the bitstream
0000178A 65E2                           bcs.s   KosDec_FetchCodeLoop        ; if code = 0, branch
0000178C                             
0000178C                                ; codes 00 and 01
0000178C 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017A4 7800                           moveq   #0,d4               ; d4 will contain copy count
000017A6 D000                           add.b   d0,d0               ; get a bit from the bitstream
000017A8 6500                           bcs.s   KosDec_Code_01
000017AA                             
000017AA                                ; code 00 (Dictionary ref. short)
000017AA 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017C2 D000                           add.b   d0,d0               ; get a bit from the bitstream
000017C4 D944                           addx.w  d4,d4
000017C6 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017DE D000                           add.b   d0,d0               ; get a bit from the bitstream
000017E0 D944                           addx.w  d4,d4
000017E2 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017FA 7AFF                           moveq   #-1,d5
000017FC 1A18                           move.b  (a0)+,d5            ; d5 = displacement
000017FE                             
000017FE                            KosDec_StreamCopy:
000017FE 47F1 5000                      lea (a1,d5),a3
00001802 12DB                           move.b  (a3)+,(a1)+         ; do 1 extra copy (to compensate for +1 to copy counter)
00001804                             
00001804                            KosDec_copy:
00001804 12DB                           move.b  (a3)+,(a1)+
00001806 51CC FFFC                      dbf d4,KosDec_copy
0000180A 6000 FF7C                      bra.w   KosDec_FetchNewCode
0000180E                            ; ---------------------------------------------------------------------------
0000180E                            KosDec_Code_01:
0000180E                                ; code 01 (Dictionary ref. long / special)
0000180E 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
00001826 1C18                           move.b  (a0)+,d6            ; d6 = %LLLLLLLL
00001828 1818                           move.b  (a0)+,d4            ; d4 = %HHHHHCCC
0000182A 7AFF                           moveq   #-1,d5
0000182C 1A04                           move.b  d4,d5               ; d5 = %11111111 HHHHHCCC
0000182E EB4D                           lsl.w   #5,d5               ; d5 = %111HHHHH CCC00000
00001830 1A06                           move.b  d6,d5               ; d5 = %111HHHHH LLLLLLLL
00001832 C847                           and.w   d7,d4               ; d4 = %00000CCC
00001834 66C8                           bne.s   KosDec_StreamCopy       ; if CCC=0, branch
00001836                             
00001836                                ; special mode (extended counter)
00001836 1818                           move.b  (a0)+,d4            ; read cnt
00001838 6700                           beq.s   KosDec_Quit         ; if cnt=0, quit decompression
0000183A 5304                           subq.b  #1,d4
0000183C 6700 FF4A                      beq.w   KosDec_FetchNewCode     ; if cnt=1, fetch a new code
00001840                             
00001840 47F1 5000                      lea (a1,d5),a3
00001844 12DB                           move.b  (a3)+,(a1)+         ; do 1 extra copy (to compensate for +1 to copy counter)
00001846 3C04                           move.w  d4,d6
00001848 4646                           not.w   d6
0000184A CC47                           and.w   d7,d6
0000184C DC46                           add.w   d6,d6
0000184E E64C                           lsr.w   #3,d4
00001850 4EFB 6000                      jmp KosDec_largecopy(pc,d6.w)
00001854                             
00001854                            KosDec_largecopy:
00001854                                rept 8
00001854                                move.b  (a3)+,(a1)+
00001854 12DB 12DB 12DB 12DB 12DB+      endr
00001864 51CC FFEE                      dbf d4,KosDec_largecopy
00001868 6000 FF1E                      bra.w   KosDec_FetchNewCode
0000186C                             
0000186C                            KosDec_Quit:
0000186C 4E75                           rts
0000186E                             
0000186E                            ; ---------------------------------------------------------------------------
0000186E                            ; A look-up table to invert bits order in desc. field bytes
0000186E                            ; ---------------------------------------------------------------------------
0000186E                             
0000186E                            KosDec_ByteMap:
0000186E 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
0000187E 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
0000188E 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
0000189E 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
000018AE 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
000018BE 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
000018CE 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
000018DE 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
000018EE 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
000018FE 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
0000190E 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
0000191E 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
0000192E 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
0000193E 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
0000194E 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
0000195E 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
0000196E                             
0000196E                            ; ===========================================================================
0000196E                            
0000196E                            ; ---------------------------------------------------------------------------
0000196E                            ; Pallet cycling routine loading subroutine
0000196E                            ; ---------------------------------------------------------------------------
0000196E                            
0000196E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000196E                            
0000196E                            
0000196E                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
0000196E 7400                       		moveq	#0,d2
00001970 7000                       		moveq	#0,d0
00001972 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001976 D040                       		add.w	d0,d0		; multiply by 2
00001978 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
0000197C 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001980                            ; End of function PalCycle_Load
00001980                            
00001980                            ; ===========================================================================
00001980                            ; ---------------------------------------------------------------------------
00001980                            ; Pallet cycling routines
00001980                            ; ---------------------------------------------------------------------------
00001980 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001982 0000                       		dc.w PalCycle_LZ-PalCycle
00001984 0000                       		dc.w PalCycle_MZ-PalCycle
00001986 0000                       		dc.w PalCycle_SLZ-PalCycle
00001988 0000                       		dc.w PalCycle_SYZ-PalCycle
0000198A 0000                       		dc.w PalCycle_SBZ-PalCycle
0000198C 0000                       		dc.w PalCycle_GHZ-PalCycle
0000198E                            
0000198E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000198E                            
0000198E                            
0000198E                            PalCycle_Title:				; XREF: TitleScreen
0000198E 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001994 6000                       		bra.s	loc_196A
00001996                            ; ===========================================================================
00001996                            
00001996                            PalCycle_GHZ:				; XREF: PalCycle
00001996 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
0000199C                            
0000199C                            loc_196A:				; XREF: PalCycle_Title
0000199C 5378 F634                  		subq.w	#1,($FFFFF634).w
000019A0 6A00                       		bpl.s	locret_1990
000019A2 31FC 0005 F634             		move.w	#5,($FFFFF634).w
000019A8 3038 F632                  		move.w	($FFFFF632).w,d0
000019AC 5278 F632                  		addq.w	#1,($FFFFF632).w
000019B0 0240 0003                  		andi.w	#3,d0
000019B4 E748                       		lsl.w	#3,d0
000019B6 43F8 FB50                  		lea	($FFFFFB50).w,a1
000019BA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019BE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019C2                            
000019C2                            locret_1990:
000019C2 4E75                       		rts	
000019C4                            ; End of function PalCycle_Title
000019C4                            
000019C4                            
000019C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019C4                            
000019C4                            
000019C4                            PalCycle_LZ:				; XREF: PalCycle
000019C4 5378 F634                  		subq.w	#1,($FFFFF634).w
000019C8 6A00                       		bpl.s	loc_19D8
000019CA 31FC 0002 F634             		move.w	#2,($FFFFF634).w
000019D0 3038 F632                  		move.w	($FFFFF632).w,d0
000019D4 5278 F632                  		addq.w	#1,($FFFFF632).w
000019D8 0240 0003                  		andi.w	#3,d0
000019DC E748                       		lsl.w	#3,d0
000019DE 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
000019E4 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
000019EA 6600                       		bne.s	loc_19C0
000019EC 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
000019F2                            
000019F2                            loc_19C0:
000019F2 43F8 FB56                  		lea	($FFFFFB56).w,a1
000019F6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019FA 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019FE 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001A02 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A06 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001A0A                            
00001A0A                            loc_19D8:
00001A0A 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001A0E 0240 0007                  		andi.w	#7,d0
00001A12 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001A16 6700                       		beq.s	locret_1A3A
00001A18 7201                       		moveq	#1,d1
00001A1A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001A1E 6700                       		beq.s	loc_19F0
00001A20 4441                       		neg.w	d1
00001A22                            
00001A22                            loc_19F0:
00001A22 3038 F650                  		move.w	($FFFFF650).w,d0
00001A26 0240 0003                  		andi.w	#3,d0
00001A2A D041                       		add.w	d1,d0
00001A2C 0C40 0003                  		cmpi.w	#3,d0
00001A30 6500                       		bcs.s	loc_1A0A
00001A32 3200                       		move.w	d0,d1
00001A34 7000                       		moveq	#0,d0
00001A36 4A41                       		tst.w	d1
00001A38 6A00                       		bpl.s	loc_1A0A
00001A3A 7002                       		moveq	#2,d0
00001A3C                            
00001A3C                            loc_1A0A:
00001A3C 31C0 F650                  		move.w	d0,($FFFFF650).w
00001A40 D040                       		add.w	d0,d0
00001A42 3200                       		move.w	d0,d1
00001A44 D040                       		add.w	d0,d0
00001A46 D041                       		add.w	d1,d0
00001A48 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001A4E 43F8 FB78                  		lea	($FFFFFB78).w,a1
00001A52 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A56 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A5A 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001A60 43F8 FAF8                  		lea	($FFFFFAF8).w,a1
00001A64 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A68 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A6C                            
00001A6C                            locret_1A3A:
00001A6C 4E75                       		rts	
00001A6E                            ; End of function PalCycle_LZ
00001A6E                            
00001A6E                            ; ===========================================================================
00001A6E 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001A76                            ; ===========================================================================
00001A76                            
00001A76                            PalCycle_MZ:				; XREF: PalCycle
00001A76 4E75                       		rts	
00001A78                            
00001A78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A78                            
00001A78                            
00001A78                            PalCycle_SLZ:				; XREF: PalCycle
00001A78 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A7C 6A00                       		bpl.s	locret_1A80
00001A7E 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001A84 3038 F632                  		move.w	($FFFFF632).w,d0
00001A88 5240                       		addq.w	#1,d0
00001A8A 0C40 0006                  		cmpi.w	#6,d0
00001A8E 6500                       		bcs.s	loc_1A60
00001A90 7000                       		moveq	#0,d0
00001A92                            
00001A92                            loc_1A60:
00001A92 31C0 F632                  		move.w	d0,($FFFFF632).w
00001A96 3200                       		move.w	d0,d1
00001A98 D241                       		add.w	d1,d1
00001A9A D041                       		add.w	d1,d0
00001A9C D040                       		add.w	d0,d0
00001A9E 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001AA4 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001AA8 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001AAC 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001AB2                            
00001AB2                            locret_1A80:
00001AB2 4E75                       		rts	
00001AB4                            ; End of function PalCycle_SLZ
00001AB4                            
00001AB4                            
00001AB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AB4                            
00001AB4                            
00001AB4                            PalCycle_SYZ:				; XREF: PalCycle
00001AB4 5378 F634                  		subq.w	#1,($FFFFF634).w
00001AB8 6A00                       		bpl.s	locret_1AC6
00001ABA 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001AC0 3038 F632                  		move.w	($FFFFF632).w,d0
00001AC4 5278 F632                  		addq.w	#1,($FFFFF632).w
00001AC8 0240 0003                  		andi.w	#3,d0
00001ACC E548                       		lsl.w	#2,d0
00001ACE 3200                       		move.w	d0,d1
00001AD0 D040                       		add.w	d0,d0
00001AD2 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001AD8 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001ADC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001AE0 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001AE4 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001AEA 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001AEE 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001AF2 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001AF8                            
00001AF8                            locret_1AC6:
00001AF8 4E75                       		rts	
00001AFA                            ; End of function PalCycle_SYZ
00001AFA                            
00001AFA                            
00001AFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AFA                            
00001AFA                            
00001AFA                            PalCycle_SBZ:				; XREF: PalCycle
00001AFA 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001B00 4A38 FE11                  		tst.b	($FFFFFE11).w
00001B04 6700                       		beq.s	loc_1ADA
00001B06 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001B0C                            
00001B0C                            loc_1ADA:
00001B0C 43F8 F650                  		lea	($FFFFF650).w,a1
00001B10 321A                       		move.w	(a2)+,d1
00001B12                            
00001B12                            loc_1AE0:
00001B12 5311                       		subq.b	#1,(a1)
00001B14 6B00                       		bmi.s	loc_1AEA
00001B16 5489                       		addq.l	#2,a1
00001B18 5C8A                       		addq.l	#6,a2
00001B1A 6000                       		bra.s	loc_1B06
00001B1C                            ; ===========================================================================
00001B1C                            
00001B1C                            loc_1AEA:				; XREF: PalCycle_SBZ
00001B1C 12DA                       		move.b	(a2)+,(a1)+
00001B1E 1011                       		move.b	(a1),d0
00001B20 5200                       		addq.b	#1,d0
00001B22 B01A                       		cmp.b	(a2)+,d0
00001B24 6500                       		bcs.s	loc_1AF6
00001B26 7000                       		moveq	#0,d0
00001B28                            
00001B28                            loc_1AF6:
00001B28 12C0                       		move.b	d0,(a1)+
00001B2A 0240 000F                  		andi.w	#$F,d0
00001B2E D040                       		add.w	d0,d0
00001B30 305A                       		movea.w	(a2)+,a0
00001B32 365A                       		movea.w	(a2)+,a3
00001B34 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001B38                            
00001B38                            loc_1B06:				; XREF: PalCycle_SBZ
00001B38 51C9 FFD8                  		dbf	d1,loc_1AE0
00001B3C 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B40 6A00                       		bpl.s	locret_1B64
00001B42 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001B48 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001B4E 4A38 FE11                  		tst.b	($FFFFFE11).w
00001B52 6700                       		beq.s	loc_1B2E
00001B54 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001B5A 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001B60                            
00001B60                            loc_1B2E:
00001B60 72FF                       		moveq	#-1,d1
00001B62 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B66 6700                       		beq.s	loc_1B38
00001B68 4441                       		neg.w	d1
00001B6A                            
00001B6A                            loc_1B38:
00001B6A 3038 F632                  		move.w	($FFFFF632).w,d0
00001B6E 0240 0003                  		andi.w	#3,d0
00001B72 D041                       		add.w	d1,d0
00001B74 0C40 0003                  		cmpi.w	#3,d0
00001B78 6500                       		bcs.s	loc_1B52
00001B7A 3200                       		move.w	d0,d1
00001B7C 7000                       		moveq	#0,d0
00001B7E 4A41                       		tst.w	d1
00001B80 6A00                       		bpl.s	loc_1B52
00001B82 7002                       		moveq	#2,d0
00001B84                            
00001B84                            loc_1B52:
00001B84 31C0 F632                  		move.w	d0,($FFFFF632).w
00001B88 D040                       		add.w	d0,d0
00001B8A 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001B8E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B92 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B96                            
00001B96                            locret_1B64:
00001B96 4E75                       		rts	
00001B98                            ; End of function PalCycle_SBZ
00001B98                            
00001B98                            ; ===========================================================================
00001B98                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001BB8                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001BD8                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001BF8                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001C0A                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001C1C                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001C84                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001CA8                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001CC8                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001CD8                            
00001CD8                            Pal_SBZCycList:
00001CD8                            	include "_inc\SBZ pallet script 1.asm"
00001CD8                            ; ---------------------------------------------------------------------------
00001CD8                            ; Scrap Brain Zone 1 pallet cycling script
00001CD8                            ; ---------------------------------------------------------------------------
00001CD8 0008                       	dc.w 8			; number of entries - 1
00001CDA 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001CDC 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001CDE FB50                       	dc.w $FB50		; RAM address
00001CE0 0D08                       	dc.b $D, 8
00001CE2 0000                       	dc.w Pal_SBZCyc2
00001CE4 FB52                       	dc.w $FB52
00001CE6 0E08                       	dc.b $E, 8
00001CE8 0000                       	dc.w Pal_SBZCyc3
00001CEA FB6E                       	dc.w $FB6E
00001CEC 0B08                       	dc.b $B, 8
00001CEE 0000                       	dc.w Pal_SBZCyc5
00001CF0 FB70                       	dc.w $FB70
00001CF2 0708                       	dc.b 7,	8
00001CF4 0000                       	dc.w Pal_SBZCyc6
00001CF6 FB72                       	dc.w $FB72
00001CF8 1C10                       	dc.b $1C, $10
00001CFA 0000                       	dc.w Pal_SBZCyc7
00001CFC FB7E                       	dc.w $FB7E
00001CFE 0303                       	dc.b 3,	3
00001D00 0000                       	dc.w Pal_SBZCyc8
00001D02 FB78                       	dc.w $FB78
00001D04 0303                       	dc.b 3,	3
00001D06 0000                       	dc.w Pal_SBZCyc8+2
00001D08 FB7A                       	dc.w $FB7A
00001D0A 0303                       	dc.b 3,	3
00001D0C 0000                       	dc.w Pal_SBZCyc8+4
00001D0E FB7C                       	dc.w $FB7C
00001D10                            	even
00001D10                            	even
00001D10                            
00001D10                            Pal_SBZCycList2:
00001D10                            	include "_inc\SBZ pallet script 2.asm"
00001D10                            ; ---------------------------------------------------------------------------
00001D10                            ; Scrap Brain Zone 2 pallet cycling script
00001D10                            ; ---------------------------------------------------------------------------
00001D10 0006                       	dc.w 6
00001D12 0708                       	dc.b 7,	8
00001D14 0000                       	dc.w Pal_SBZCyc1
00001D16 FB50                       	dc.w $FB50
00001D18 0D08                       	dc.b $D, 8
00001D1A 0000                       	dc.w Pal_SBZCyc2
00001D1C FB52                       	dc.w $FB52
00001D1E 0908                       	dc.b 9,	8
00001D20 0000                       	dc.w Pal_SBZCyc9
00001D22 FB70                       	dc.w $FB70
00001D24 0708                       	dc.b 7,	8
00001D26 0000                       	dc.w Pal_SBZCyc6
00001D28 FB72                       	dc.w $FB72
00001D2A 0303                       	dc.b 3,	3
00001D2C 0000                       	dc.w Pal_SBZCyc8
00001D2E FB78                       	dc.w $FB78
00001D30 0303                       	dc.b 3,	3
00001D32 0000                       	dc.w Pal_SBZCyc8+2
00001D34 FB7A                       	dc.w $FB7A
00001D36 0303                       	dc.b 3,	3
00001D38 0000                       	dc.w Pal_SBZCyc8+4
00001D3A FB7C                       	dc.w $FB7C
00001D3C                            	even
00001D3C                            	even
00001D3C                            
00001D3C                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001D4C                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001D5C                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001D6C                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001D78                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001D88                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001D98                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001DB8                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001DC2                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001DD2                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001DDE                            ; ---------------------------------------------------------------------------
00001DDE                            ; Subroutine to	fade out and fade in
00001DDE                            ; ---------------------------------------------------------------------------
00001DDE                            
00001DDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DDE                            
00001DDE                            
00001DDE                            Pal_FadeTo:
00001DDE 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001DE4                            
00001DE4                            Pal_FadeTo2:
00001DE4 7000                       		moveq	#0,d0
00001DE6 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DEA 1038 F626                  		move.b	($FFFFF626).w,d0
00001DEE D0C0                       		adda.w	d0,a0
00001DF0 7200                       		moveq	#0,d1
00001DF2 1038 F627                  		move.b	($FFFFF627).w,d0
00001DF6                            
00001DF6                            Pal_ToBlack:
00001DF6 30C1                       		move.w	d1,(a0)+
00001DF8 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001DFC                            
00001DFC 383C 0015                  		move.w	#$15,d4
00001E00                            
00001E00                            loc_1DCE:
00001E00 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E06 6100 0000                  		bsr.w	DelayProgram
00001E0A 6100                       		bsr.s	Pal_FadeIn
00001E0C 6100 F692                  		bsr.w	RunPLC_RAM
00001E10 51CC FFEE                  		dbf	d4,loc_1DCE
00001E14 4E75                       		rts	
00001E16                            ; End of function Pal_FadeTo
00001E16                            
00001E16                            ; ---------------------------------------------------------------------------
00001E16                            ; Pallet fade-in subroutine
00001E16                            ; ---------------------------------------------------------------------------
00001E16                            
00001E16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E16                            
00001E16                            
00001E16                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001E16 7000                       		moveq	#0,d0
00001E18 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E1C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001E20 1038 F626                  		move.b	($FFFFF626).w,d0
00001E24 D0C0                       		adda.w	d0,a0
00001E26 D2C0                       		adda.w	d0,a1
00001E28 1038 F627                  		move.b	($FFFFF627).w,d0
00001E2C                            
00001E2C                            loc_1DFA:
00001E2C 6100                       		bsr.s	Pal_AddColor
00001E2E 51C8 FFFC                  		dbf	d0,loc_1DFA
00001E32                            
00001E32                            locret_1E24:
00001E32 4E75                       		rts	
00001E34                            ; End of function Pal_FadeIn
00001E34                            
00001E34                            
00001E34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E34                            
00001E34                            
00001E34                            Pal_AddColor:				; XREF: Pal_FadeIn
00001E34 3419                       		move.w	(a1)+,d2
00001E36 3610                       		move.w	(a0),d3
00001E38 B642                       		cmp.w	d2,d3
00001E3A 6700                       		beq.s	loc_1E4E
00001E3C 3203                       		move.w	d3,d1
00001E3E 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001E42 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001E44 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00001E46 30C1                       		move.w	d1,(a0)+	; update pallet
00001E48 4E75                       		rts	
00001E4A                            ; ===========================================================================
00001E4A                            
00001E4A                            Pal_AddGreen:				; XREF: Pal_AddColor
00001E4A 3203                       		move.w	d3,d1
00001E4C 0641 0020                  		addi.w	#$20,d1		; increase green value
00001E50 B242                       		cmp.w	d2,d1
00001E52 6200                       		bhi.s	Pal_AddRed
00001E54 30C1                       		move.w	d1,(a0)+	; update pallet
00001E56 4E75                       		rts	
00001E58                            ; ===========================================================================
00001E58                            
00001E58                            Pal_AddRed:				; XREF: Pal_AddGreen
00001E58 5458                       		addq.w	#2,(a0)+	; increase red value
00001E5A 4E75                       		rts	
00001E5C                            ; ===========================================================================
00001E5C                            
00001E5C                            loc_1E4E:				; XREF: Pal_AddColor
00001E5C 5448                       		addq.w	#2,a0
00001E5E 4E75                       		rts	
00001E60                            ; End of function Pal_AddColor
00001E60                            
00001E60                            
00001E60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E60                            
00001E60                            
00001E60                            Pal_FadeFrom:
00001E60 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001E66                            
00001E66                            Pal_FadeFrom2:
00001E66 383C 0015                  		move.w	#$15,d4
00001E6A                            
00001E6A                            loc_1E5C:
00001E6A 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E70 6100 0000                  		bsr.w	DelayProgram
00001E74 6100                       		bsr.s	Pal_FadeOut
00001E76 6100 F628                  		bsr.w	RunPLC_RAM
00001E7A 51CC FFEE                  		dbf	d4,loc_1E5C
00001E7E 4E75                       		rts	
00001E80                            ; End of function Pal_FadeFrom
00001E80                            
00001E80                            ; ---------------------------------------------------------------------------
00001E80                            ; Pallet fade-out subroutine
00001E80                            ; ---------------------------------------------------------------------------
00001E80                            
00001E80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E80                            
00001E80                            
00001E80                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001E80 7000                       		moveq	#0,d0
00001E82 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E86 1038 F626                  		move.b	($FFFFF626).w,d0
00001E8A D0C0                       		adda.w	d0,a0
00001E8C 1038 F627                  		move.b	($FFFFF627).w,d0
00001E90                            
00001E90                            loc_1E82:
00001E90 6100                       		bsr.s	Pal_DecColor
00001E92 51C8 FFFC                  		dbf	d0,loc_1E82
00001E96                            
00001E96 7000                       		moveq	#0,d0
00001E98 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001E9C 1038 F626                  		move.b	($FFFFF626).w,d0
00001EA0 D0C0                       		adda.w	d0,a0
00001EA2 1038 F627                  		move.b	($FFFFF627).w,d0
00001EA6                            
00001EA6                            loc_1E98:
00001EA6 6100                       		bsr.s	Pal_DecColor
00001EA8 51C8 FFFC                  		dbf	d0,loc_1E98
00001EAC 4E75                       		rts	
00001EAE                            ; End of function Pal_FadeOut
00001EAE                            
00001EAE                            
00001EAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EAE                            
00001EAE                            
00001EAE                            Pal_DecColor:				; XREF: Pal_FadeOut
00001EAE 3410                       		move.w	(a0),d2
00001EB0 6700                       		beq.s	loc_1ECC
00001EB2 3202                       		move.w	d2,d1
00001EB4 0241 000E                  		andi.w	#$E,d1
00001EB8 6700                       		beq.s	Pal_DecGreen
00001EBA 5558                       		subq.w	#2,(a0)+	; decrease red value
00001EBC 4E75                       		rts	
00001EBE                            ; ===========================================================================
00001EBE                            
00001EBE                            Pal_DecGreen:				; XREF: Pal_DecColor
00001EBE 3202                       		move.w	d2,d1
00001EC0 0241 00E0                  		andi.w	#$E0,d1
00001EC4 6700                       		beq.s	Pal_DecBlue
00001EC6 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001ECA 4E75                       		rts	
00001ECC                            ; ===========================================================================
00001ECC                            
00001ECC                            Pal_DecBlue:				; XREF: Pal_DecGreen
00001ECC 3202                       		move.w	d2,d1
00001ECE 0241 0E00                  		andi.w	#$E00,d1
00001ED2 6700                       		beq.s	loc_1ECC
00001ED4 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001ED8 4E75                       		rts	
00001EDA                            ; ===========================================================================
00001EDA                            
00001EDA                            loc_1ECC:				; XREF: Pal_DecColor
00001EDA 5448                       		addq.w	#2,a0
00001EDC 4E75                       		rts	
00001EDE                            ; End of function Pal_DecColor
00001EDE                            
00001EDE                            ; ---------------------------------------------------------------------------
00001EDE                            ; Subroutine to	fill the pallet	with white (special stage)
00001EDE                            ; ---------------------------------------------------------------------------
00001EDE                            
00001EDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EDE                            
00001EDE                            
00001EDE                            Pal_MakeWhite:				; XREF: SpecialStage
00001EDE 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001EE4 7000                       		moveq	#0,d0
00001EE6 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001EEA 1038 F626                  		move.b	($FFFFF626).w,d0
00001EEE D0C0                       		adda.w	d0,a0
00001EF0 323C 0EEE                  		move.w	#$EEE,d1
00001EF4 1038 F627                  		move.b	($FFFFF627).w,d0
00001EF8                            
00001EF8                            PalWhite_Loop:
00001EF8 30C1                       		move.w	d1,(a0)+
00001EFA 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00001EFE 383C 0015                  		move.w	#$15,d4
00001F02                            
00001F02                            loc_1EF4:
00001F02 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F08 6100 0000                  		bsr.w	DelayProgram
00001F0C 6100                       		bsr.s	Pal_WhiteToBlack
00001F0E 6100 F590                  		bsr.w	RunPLC_RAM
00001F12 51CC FFEE                  		dbf	d4,loc_1EF4
00001F16 4E75                       		rts	
00001F18                            ; End of function Pal_MakeWhite
00001F18                            
00001F18                            
00001F18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F18                            
00001F18                            
00001F18                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00001F18 7000                       		moveq	#0,d0
00001F1A 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F1E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001F22 1038 F626                  		move.b	($FFFFF626).w,d0
00001F26 D0C0                       		adda.w	d0,a0
00001F28 D2C0                       		adda.w	d0,a1
00001F2A 1038 F627                  		move.b	($FFFFF627).w,d0
00001F2E                            
00001F2E                            loc_1F20:
00001F2E 6100                       		bsr.s	Pal_DecColor2
00001F30 51C8 FFFC                  		dbf	d0,loc_1F20
00001F34                            
00001F34                            locret_1F4A:
00001F34 4E75                       		rts	
00001F36                            ; End of function Pal_WhiteToBlack
00001F36                            
00001F36                            
00001F36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F36                            
00001F36                            
00001F36                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00001F36 3419                       		move.w	(a1)+,d2
00001F38 3610                       		move.w	(a0),d3
00001F3A B642                       		cmp.w	d2,d3
00001F3C 6700                       		beq.s	loc_1F78
00001F3E 3203                       		move.w	d3,d1
00001F40 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001F44 6500                       		bcs.s	loc_1F64
00001F46 B242                       		cmp.w	d2,d1
00001F48 6500                       		bcs.s	loc_1F64
00001F4A 30C1                       		move.w	d1,(a0)+
00001F4C 4E75                       		rts	
00001F4E                            ; ===========================================================================
00001F4E                            
00001F4E                            loc_1F64:				; XREF: Pal_DecColor2
00001F4E 3203                       		move.w	d3,d1
00001F50 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001F54 6500                       		bcs.s	loc_1F74
00001F56 B242                       		cmp.w	d2,d1
00001F58 6500                       		bcs.s	loc_1F74
00001F5A 30C1                       		move.w	d1,(a0)+
00001F5C 4E75                       		rts	
00001F5E                            ; ===========================================================================
00001F5E                            
00001F5E                            loc_1F74:				; XREF: loc_1F64
00001F5E 5558                       		subq.w	#2,(a0)+	; decrease red value
00001F60 4E75                       		rts	
00001F62                            ; ===========================================================================
00001F62                            
00001F62                            loc_1F78:				; XREF: Pal_DecColor2
00001F62 5448                       		addq.w	#2,a0
00001F64 4E75                       		rts	
00001F66                            ; End of function Pal_DecColor2
00001F66                            
00001F66                            ; ---------------------------------------------------------------------------
00001F66                            ; Subroutine to	make a white flash when	you enter a special stage
00001F66                            ; ---------------------------------------------------------------------------
00001F66                            
00001F66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F66                            
00001F66                            
00001F66                            Pal_MakeFlash:				; XREF: SpecialStage
00001F66 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001F6C 383C 0015                  		move.w	#$15,d4
00001F70                            
00001F70                            loc_1F86:
00001F70 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F76 6100 0000                  		bsr.w	DelayProgram
00001F7A 6100                       		bsr.s	Pal_ToWhite
00001F7C 6100 F522                  		bsr.w	RunPLC_RAM
00001F80 51CC FFEE                  		dbf	d4,loc_1F86
00001F84 4E75                       		rts	
00001F86                            ; End of function Pal_MakeFlash
00001F86                            
00001F86                            
00001F86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F86                            
00001F86                            
00001F86                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00001F86 7000                       		moveq	#0,d0
00001F88 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F8C 1038 F626                  		move.b	($FFFFF626).w,d0
00001F90 D0C0                       		adda.w	d0,a0
00001F92 1038 F627                  		move.b	($FFFFF627).w,d0
00001F96                            
00001F96                            loc_1FAC:
00001F96 6100                       		bsr.s	Pal_AddColor2
00001F98 51C8 FFFC                  		dbf	d0,loc_1FAC
00001F9C 7000                       		moveq	#0,d0
00001F9E 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FA2 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA6 D0C0                       		adda.w	d0,a0
00001FA8 1038 F627                  		move.b	($FFFFF627).w,d0
00001FAC                            
00001FAC                            loc_1FC2:
00001FAC 6100                       		bsr.s	Pal_AddColor2
00001FAE 51C8 FFFC                  		dbf	d0,loc_1FC2
00001FB2 4E75                       		rts	
00001FB4                            ; End of function Pal_ToWhite
00001FB4                            
00001FB4                            
00001FB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FB4                            
00001FB4                            
00001FB4                            Pal_AddColor2:				; XREF: Pal_ToWhite
00001FB4 3410                       		move.w	(a0),d2
00001FB6 0C42 0EEE                  		cmpi.w	#$EEE,d2
00001FBA 6700                       		beq.s	loc_2006
00001FBC 3202                       		move.w	d2,d1
00001FBE 0241 000E                  		andi.w	#$E,d1
00001FC2 0C41 000E                  		cmpi.w	#$E,d1
00001FC6 6700                       		beq.s	loc_1FE2
00001FC8 5458                       		addq.w	#2,(a0)+	; increase red value
00001FCA 4E75                       		rts	
00001FCC                            ; ===========================================================================
00001FCC                            
00001FCC                            loc_1FE2:				; XREF: Pal_AddColor2
00001FCC 3202                       		move.w	d2,d1
00001FCE 0241 00E0                  		andi.w	#$E0,d1
00001FD2 0C41 00E0                  		cmpi.w	#$E0,d1
00001FD6 6700                       		beq.s	loc_1FF4
00001FD8 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00001FDC 4E75                       		rts	
00001FDE                            ; ===========================================================================
00001FDE                            
00001FDE                            loc_1FF4:				; XREF: loc_1FE2
00001FDE 3202                       		move.w	d2,d1
00001FE0 0241 0E00                  		andi.w	#$E00,d1
00001FE4 0C41 0E00                  		cmpi.w	#$E00,d1
00001FE8 6700                       		beq.s	loc_2006
00001FEA 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00001FEE 4E75                       		rts	
00001FF0                            ; ===========================================================================
00001FF0                            
00001FF0                            loc_2006:				; XREF: Pal_AddColor2
00001FF0 5448                       		addq.w	#2,a0
00001FF2 4E75                       		rts	
00001FF4                            ; End of function Pal_AddColor2
00001FF4                            
00001FF4                            ; ---------------------------------------------------------------------------
00001FF4                            ; Pallet cycling routine - Sega	logo
00001FF4                            ; ---------------------------------------------------------------------------
00001FF4                            
00001FF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FF4                            
00001FF4                            
00001FF4                            PalCycle_Sega:				; XREF: SegaScreen
00001FF4 4A38 F635                  		tst.b	($FFFFF635).w
00001FF8 6600                       		bne.s	loc_206A
00001FFA 43F8 FB20                  		lea	($FFFFFB20).w,a1
00001FFE 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002004 7205                       		moveq	#5,d1
00002006 3038 F632                  		move.w	($FFFFF632).w,d0
0000200A                            
0000200A                            loc_2020:
0000200A 6A00                       		bpl.s	loc_202A
0000200C 5448                       		addq.w	#2,a0
0000200E 5341                       		subq.w	#1,d1
00002010 5440                       		addq.w	#2,d0
00002012 60F6                       		bra.s	loc_2020
00002014                            ; ===========================================================================
00002014                            
00002014                            loc_202A:				; XREF: PalCycle_Sega
00002014 3400                       		move.w	d0,d2
00002016 0242 001E                  		andi.w	#$1E,d2
0000201A 6600                       		bne.s	loc_2034
0000201C 5440                       		addq.w	#2,d0
0000201E                            
0000201E                            loc_2034:
0000201E 0C40 0060                  		cmpi.w	#$60,d0
00002022 6400                       		bcc.s	loc_203E
00002024 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002028                            
00002028                            loc_203E:
00002028 5440                       		addq.w	#2,d0
0000202A 51C9 FFE8                  		dbf	d1,loc_202A
0000202E 3038 F632                  		move.w	($FFFFF632).w,d0
00002032 5440                       		addq.w	#2,d0
00002034 3400                       		move.w	d0,d2
00002036 0242 001E                  		andi.w	#$1E,d2
0000203A 6600                       		bne.s	loc_2054
0000203C 5440                       		addq.w	#2,d0
0000203E                            
0000203E                            loc_2054:
0000203E 0C40 0064                  		cmpi.w	#$64,d0
00002042 6D00                       		blt.s	loc_2062
00002044 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000204A 70F4                       		moveq	#-$C,d0
0000204C                            
0000204C                            loc_2062:
0000204C 31C0 F632                  		move.w	d0,($FFFFF632).w
00002050 7001                       		moveq	#1,d0
00002052 4E75                       		rts	
00002054                            ; ===========================================================================
00002054                            
00002054                            loc_206A:				; XREF: loc_202A
00002054 5338 F634                  		subq.b	#1,($FFFFF634).w
00002058 6A00                       		bpl.s	loc_20BC
0000205A 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002060 3038 F632                  		move.w	($FFFFF632).w,d0
00002064 0640 000C                  		addi.w	#$C,d0
00002068 0C40 0030                  		cmpi.w	#$30,d0
0000206C 6500                       		bcs.s	loc_2088
0000206E 7000                       		moveq	#0,d0
00002070 4E75                       		rts	
00002072                            ; ===========================================================================
00002072                            
00002072                            loc_2088:				; XREF: loc_206A
00002072 31C0 F632                  		move.w	d0,($FFFFF632).w
00002076 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000207C 41F0 0000                  		lea	(a0,d0.w),a0
00002080 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002084 22D8                       		move.l	(a0)+,(a1)+
00002086 22D8                       		move.l	(a0)+,(a1)+
00002088 3298                       		move.w	(a0)+,(a1)
0000208A 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000208E 7000                       		moveq	#0,d0
00002090 722C                       		moveq	#$2C,d1
00002092                            
00002092                            loc_20A8:
00002092 3400                       		move.w	d0,d2
00002094 0242 001E                  		andi.w	#$1E,d2
00002098 6600                       		bne.s	loc_20B2
0000209A 5440                       		addq.w	#2,d0
0000209C                            
0000209C                            loc_20B2:
0000209C 3390 0000                  		move.w	(a0),(a1,d0.w)
000020A0 5440                       		addq.w	#2,d0
000020A2 51C9 FFEE                  		dbf	d1,loc_20A8
000020A6                            
000020A6                            loc_20BC:
000020A6 7001                       		moveq	#1,d0
000020A8 4E75                       		rts	
000020AA                            ; End of function PalCycle_Sega
000020AA                            
000020AA                            ; ===========================================================================
000020AA                            
000020AA                            Pal_Sega1:	incbin	pallet\sega1.bin
000020B6                            Pal_Sega2:	incbin	pallet\sega2.bin
000020E6                            
000020E6                            ; ---------------------------------------------------------------------------
000020E6                            ; Subroutines to load pallets
000020E6                            ; ---------------------------------------------------------------------------
000020E6                            
000020E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020E6                            
000020E6                            
000020E6                            PalLoad1:
000020E6 43F9 0000 0000             		lea	(PalPointers).l,a1
000020EC E748                       		lsl.w	#3,d0
000020EE D2C0                       		adda.w	d0,a1
000020F0 2459                       		movea.l	(a1)+,a2
000020F2 3659                       		movea.w	(a1)+,a3
000020F4 D6FC 0080                  		adda.w	#$80,a3
000020F8 3E19                       		move.w	(a1)+,d7
000020FA                            
000020FA                            loc_2110:
000020FA 26DA                       		move.l	(a2)+,(a3)+
000020FC 51CF FFFC                  		dbf	d7,loc_2110
00002100 4E75                       		rts	
00002102                            ; End of function PalLoad1
00002102                            
00002102                            
00002102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002102                            
00002102                            
00002102                            PalLoad2:
00002102 43F9 0000 0000             		lea	(PalPointers).l,a1
00002108 E748                       		lsl.w	#3,d0
0000210A D2C0                       		adda.w	d0,a1
0000210C 2459                       		movea.l	(a1)+,a2
0000210E 3659                       		movea.w	(a1)+,a3
00002110 3E19                       		move.w	(a1)+,d7
00002112                            
00002112                            loc_2128:
00002112 26DA                       		move.l	(a2)+,(a3)+
00002114 51CF FFFC                  		dbf	d7,loc_2128
00002118 4E75                       		rts	
0000211A                            ; End of function PalLoad2
0000211A                            
0000211A                            ; ---------------------------------------------------------------------------
0000211A                            ; Underwater pallet loading subroutine
0000211A                            ; ---------------------------------------------------------------------------
0000211A                            
0000211A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000211A                            
0000211A                            
0000211A                            PalLoad3_Water:
0000211A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002120 E748                       		lsl.w	#3,d0
00002122 D2C0                       		adda.w	d0,a1
00002124 2459                       		movea.l	(a1)+,a2
00002126 3659                       		movea.w	(a1)+,a3
00002128 96FC 0080                  		suba.w	#$80,a3
0000212C 3E19                       		move.w	(a1)+,d7
0000212E                            
0000212E                            loc_2144:
0000212E 26DA                       		move.l	(a2)+,(a3)+
00002130 51CF FFFC                  		dbf	d7,loc_2144
00002134 4E75                       		rts	
00002136                            ; End of function PalLoad3_Water
00002136                            
00002136                            
00002136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002136                            
00002136                            
00002136                            PalLoad4_Water:
00002136 43F9 0000 0000             		lea	(PalPointers).l,a1
0000213C E748                       		lsl.w	#3,d0
0000213E D2C0                       		adda.w	d0,a1
00002140 2459                       		movea.l	(a1)+,a2
00002142 3659                       		movea.w	(a1)+,a3
00002144 96FC 0100                  		suba.w	#$100,a3
00002148 3E19                       		move.w	(a1)+,d7
0000214A                            
0000214A                            loc_2160:
0000214A 26DA                       		move.l	(a2)+,(a3)+
0000214C 51CF FFFC                  		dbf	d7,loc_2160
00002150 4E75                       		rts	
00002152                            ; End of function PalLoad4_Water
00002152                            
00002152                            ; ===========================================================================
00002152                            ; ---------------------------------------------------------------------------
00002152                            ; Pallet pointers
00002152                            ; ---------------------------------------------------------------------------
00002152                            PalPointers:
00002152                            	include "_inc\Pallet pointers.asm"
00002152                            ; ---------------------------------------------------------------------------
00002152                            ; Pallet pointers
00002152                            ; ---------------------------------------------------------------------------
00002152 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002156 FB00                       	dc.w $FB00		; RAM address
00002158 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000215A 0000 0000                  	dc.l Pal_Title
0000215E FB00                       	dc.w $FB00
00002160 001F                       	dc.w $1F
00002162 0000 0000                  	dc.l Pal_LevelSel
00002166 FB00                       	dc.w $FB00
00002168 001F                       	dc.w $1F
0000216A 0000 0000                  	dc.l Pal_Sonic
0000216E FB00                       	dc.w $FB00
00002170 0007                       	dc.w 7
00002172 0000 0000                  	dc.l Pal_GHZ
00002176 FB20                       	dc.w $FB20
00002178 0017                       	dc.w $17
0000217A 0000 0000                  	dc.l Pal_LZ
0000217E FB20                       	dc.w $FB20
00002180 0017                       	dc.w $17
00002182 0000 0000                  	dc.l Pal_MZ
00002186 FB20                       	dc.w $FB20
00002188 0017                       	dc.w $17
0000218A 0000 0000                  	dc.l Pal_SLZ
0000218E FB20                       	dc.w $FB20
00002190 0017                       	dc.w $17
00002192 0000 0000                  	dc.l Pal_SYZ
00002196 FB20                       	dc.w $FB20
00002198 0017                       	dc.w $17
0000219A 0000 0000                  	dc.l Pal_SBZ1
0000219E FB20                       	dc.w $FB20
000021A0 0017                       	dc.w $17
000021A2 0000 0000                  	dc.l Pal_Special
000021A6 FB00                       	dc.w $FB00
000021A8 001F                       	dc.w $1F
000021AA 0000 0000                  	dc.l Pal_LZWater
000021AE FB00                       	dc.w $FB00
000021B0 001F                       	dc.w $1F
000021B2 0000 0000                  	dc.l Pal_SBZ3
000021B6 FB20                       	dc.w $FB20
000021B8 0017                       	dc.w $17
000021BA 0000 0000                  	dc.l Pal_SBZ3Water
000021BE FB00                       	dc.w $FB00
000021C0 001F                       	dc.w $1F
000021C2 0000 0000                  	dc.l Pal_SBZ2
000021C6 FB20                       	dc.w $FB20
000021C8 0017                       	dc.w $17
000021CA 0000 0000                  	dc.l Pal_LZSonWater
000021CE FB00                       	dc.w $FB00
000021D0 0007                       	dc.w 7
000021D2 0000 0000                  	dc.l Pal_SBZ3SonWat
000021D6 FB00                       	dc.w $FB00
000021D8 0007                       	dc.w 7
000021DA 0000 0000                  	dc.l Pal_SpeResult
000021DE FB00                       	dc.w $FB00
000021E0 001F                       	dc.w $1F
000021E2 0000 0000                  	dc.l Pal_SpeContinue
000021E6 FB00                       	dc.w $FB00
000021E8 000F                       	dc.w $F
000021EA 0000 0000                  	dc.l Pal_Ending
000021EE FB00                       	dc.w $FB00
000021F0 001F                       	dc.w $1F
000021F2 0000 0000                  	dc.l Pal_Sonic
000021F6 FB20                       	dc.w $FB20
000021F8 0007                       	dc.w 7
000021F8 0007                       	dc.w 7
000021FA                            
000021FA                            ; ---------------------------------------------------------------------------
000021FA                            ; Pallet data
000021FA                            ; ---------------------------------------------------------------------------
000021FA                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
0000227A                            Pal_Title:	incbin	pallet\title.bin
000022FA                            Pal_LevelSel:	incbin	pallet\levelsel.bin
0000237A                            Pal_Sonic:	incbin	pallet\sonic.bin
0000239A                            Pal_GHZ:	incbin	pallet\ghz.bin
000023FA                            Pal_LZ:		incbin	pallet\lz.bin
0000245A                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000024DA                            Pal_MZ:		incbin	pallet\mz.bin
0000253A                            Pal_SLZ:	incbin	pallet\slz.bin
0000259A                            Pal_SYZ:	incbin	pallet\syz.bin
000025FA                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
0000265A                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000026BA                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
0000273A                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
0000279A                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
0000281A                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
0000283A                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
0000285A                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
000028DA                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
0000291A                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
0000299A                            
0000299A                            ; ---------------------------------------------------------------------------
0000299A                            ; Subroutine to	delay the program by ($FFFFF62A) frames
0000299A                            ; ---------------------------------------------------------------------------
0000299A                            
0000299A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000299A                            
0000299A                            WaitVBlank:
0000299A                            DelayProgram:				; XREF: PauseGame
0000299A 46FC 2300                  		move	#$2300,sr
0000299E                            
0000299E                            loc_29AC:
0000299E 4A38 F62A                  		tst.b	($FFFFF62A).w
000029A2 66FA                       		bne.s	loc_29AC
000029A4 4E75                       		rts	
000029A6                            ; End of function DelayProgram
000029A6                            
000029A6                            ; ---------------------------------------------------------------------------
000029A6                            ; Subroutine to	generate a pseudo-random number	in d0
000029A6                            ; ---------------------------------------------------------------------------
000029A6                            
000029A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029A6                            
000029A6                            
000029A6                            RandomNumber:
000029A6 2238 F636                  		move.l	($FFFFF636).w,d1
000029AA 6600                       		bne.s	loc_29C0
000029AC 223C 2A6D 365A             		move.l	#$2A6D365A,d1
000029B2                            
000029B2                            loc_29C0:
000029B2 2001                       		move.l	d1,d0
000029B4 E581                       		asl.l	#2,d1
000029B6 D280                       		add.l	d0,d1
000029B8 E781                       		asl.l	#3,d1
000029BA D280                       		add.l	d0,d1
000029BC 3001                       		move.w	d1,d0
000029BE 4841                       		swap	d1
000029C0 D041                       		add.w	d1,d0
000029C2 3200                       		move.w	d0,d1
000029C4 4841                       		swap	d1
000029C6 21C1 F636                  		move.l	d1,($FFFFF636).w
000029CA 4E75                       		rts	
000029CC                            ; End of function RandomNumber
000029CC                            
000029CC                            
000029CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029CC                            
000029CC                            
000029CC                            CalcSine:
000029CC 0240 00FF                          andi.w  #$FF,d0
000029D0 5040                               addq.w  #8,d0
000029D2 D040                               add.w   d0,d0
000029D4 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
000029D8 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
000029DC 4E75                               rts
000029DE                            ; End of function CalcSine
000029DE                            
000029DE                            ; ===========================================================================
000029DE                            
000029DE                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360º sine wave
00002C5E                            
00002C5E                            ; ===========================================================================
00002C5E 48E7 6000                  		movem.l	d1-d2,-(sp)
00002C62 3200                       		move.w	d0,d1
00002C64 4841                       		swap	d1
00002C66 7000                       		moveq	#0,d0
00002C68 3200                       		move.w	d0,d1
00002C6A 7407                       		moveq	#7,d2
00002C6C                            
00002C6C                            loc_2C80:
00002C6C E599                       		rol.l	#2,d1
00002C6E D040                       		add.w	d0,d0
00002C70 5240                       		addq.w	#1,d0
00002C72 9240                       		sub.w	d0,d1
00002C74 6400                       		bcc.s	loc_2C9A
00002C76 D240                       		add.w	d0,d1
00002C78 5340                       		subq.w	#1,d0
00002C7A 51CA FFF0                  		dbf	d2,loc_2C80
00002C7E E248                       		lsr.w	#1,d0
00002C80 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002C84 4E75                       		rts	
00002C86                            ; ===========================================================================
00002C86                            
00002C86                            loc_2C9A:
00002C86 5240                       		addq.w	#1,d0
00002C88 51CA FFE2                  		dbf	d2,loc_2C80
00002C8C E248                       		lsr.w	#1,d0
00002C8E 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002C92 4E75                       		rts	
00002C94                            
00002C94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C94                            
00002C94                            
00002C94                            CalcAngle:
00002C94 48E7 1800                  		movem.l	d3-d4,-(sp)
00002C98 7600                       		moveq	#0,d3
00002C9A 7800                       		moveq	#0,d4
00002C9C 3601                       		move.w	d1,d3
00002C9E 3802                       		move.w	d2,d4
00002CA0 8843                       		or.w	d3,d4
00002CA2 6700                       		beq.s	loc_2D04
00002CA4 3802                       		move.w	d2,d4
00002CA6 4A43                       		tst.w	d3
00002CA8 6A00 0000                  		bpl.w	loc_2CC2
00002CAC 4443                       		neg.w	d3
00002CAE                            
00002CAE                            loc_2CC2:
00002CAE 4A44                       		tst.w	d4
00002CB0 6A00 0000                  		bpl.w	loc_2CCA
00002CB4 4444                       		neg.w	d4
00002CB6                            
00002CB6                            loc_2CCA:
00002CB6 B843                       		cmp.w	d3,d4
00002CB8 6400 0000                  		bcc.w	loc_2CDC
00002CBC E18C                       		lsl.l	#8,d4
00002CBE 88C3                       		divu.w	d3,d4
00002CC0 7000                       		moveq	#0,d0
00002CC2 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002CC6 6000                       		bra.s	loc_2CE6
00002CC8                            ; ===========================================================================
00002CC8                            
00002CC8                            loc_2CDC:				; XREF: CalcAngle
00002CC8 E18B                       		lsl.l	#8,d3
00002CCA 86C4                       		divu.w	d4,d3
00002CCC 7040                       		moveq	#$40,d0
00002CCE 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002CD2                            
00002CD2                            loc_2CE6:
00002CD2 4A41                       		tst.w	d1
00002CD4 6A00 0000                  		bpl.w	loc_2CF2
00002CD8 4440                       		neg.w	d0
00002CDA 0640 0080                  		addi.w	#$80,d0
00002CDE                            
00002CDE                            loc_2CF2:
00002CDE 4A42                       		tst.w	d2
00002CE0 6A00 0000                  		bpl.w	loc_2CFE
00002CE4 4440                       		neg.w	d0
00002CE6 0640 0100                  		addi.w	#$100,d0
00002CEA                            
00002CEA                            loc_2CFE:
00002CEA 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002CEE 4E75                       		rts	
00002CF0                            ; ===========================================================================
00002CF0                            
00002CF0                            loc_2D04:				; XREF: CalcAngle
00002CF0 303C 0040                  		move.w	#$40,d0
00002CF4 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002CF8 4E75                       		rts	
00002CFA                            ; End of function CalcAngle
00002CFA                            
00002CFA                            ; ===========================================================================
00002CFA                            
00002CFA                            Angle_Data:	incbin	misc\angles.bin
00002DFC                            
00002DFC                            ; ===========================================================================
00002DFC                            
00002DFC                            ; ---------------------------------------------------------------------------
00002DFC                            ; Sega screen
00002DFC                            ; ---------------------------------------------------------------------------
00002DFC                            
00002DFC                            SegaScreen:				; XREF: GameModeArray
00002DFC 103C 00E4                  		move.b	#$E4,d0
00002E00 6100 E3F4                  		bsr.w	PlaySound_Special ; stop music
00002E04 6100 E68C                  		bsr.w	ClearPLC
00002E08 6100 F056                  		bsr.w	Pal_FadeFrom
00002E0C 4DF9 00C0 0004             		lea	($C00004).l,a6
00002E12 3CBC 8004                  		move.w	#$8004,(a6)
00002E16 3CBC 8230                  		move.w	#$8230,(a6)
00002E1A 3CBC 8407                  		move.w	#$8407,(a6)
00002E1E 3CBC 8700                  		move.w	#$8700,(a6)
00002E22 3CBC 8B00                  		move.w	#$8B00,(a6)
00002E26 4238 F64E                  		clr.b	($FFFFF64E).w
00002E2A 46FC 2700                  		move	#$2700,sr
00002E2E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002E32 0200 00BF                  		andi.b	#$BF,d0
00002E36 33C0 00C0 0004             		move.w	d0,($C00004).l
00002E3C 6100 E292                  		bsr.w	ClearScreen
00002E40 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002E4A 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00002E50 6100 E496                  		bsr.w	NemDec
00002E54 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E5A 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00002E60 303C 0000                  		move.w	#0,d0
00002E64 6100 E76C                  		bsr.w	EniDec
00002E68 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E6E 203C 6510 0003             		move.l	#$65100003,d0
00002E74 7217                       		moveq	#$17,d1
00002E76 7407                       		moveq	#7,d2
00002E78 6100 E444                  		bsr.w	ShowVDPGraphics
00002E7C 43F9 00FF 0180             		lea	($FF0180).l,a1
00002E82 203C 4000 0003             		move.l	#$40000003,d0
00002E88 7227                       		moveq	#$27,d1
00002E8A 741B                       		moveq	#$1B,d2
00002E8C 6100 E430                  		bsr.w	ShowVDPGraphics
00002E90 7000                       		moveq	#0,d0
00002E92 6100 F26E                  		bsr.w	PalLoad2	; load Sega logo pallet
00002E96 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00002E9C 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00002EA2 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00002EA8 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00002EAE 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w		
00002EB4 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002EB8 0000 0040                  		ori.b	#$40,d0
00002EBC 33C0 00C0 0004             		move.w	d0,($C00004).l
00002EC2                            
00002EC2                            Sega_WaitPallet:
00002EC2 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002EC8 6100 FAD0                  		bsr.w	DelayProgram
00002ECC 6100 F126                  		bsr.w	PalCycle_Sega
00002ED0 66F0                       		bne.s	Sega_WaitPallet
00002ED2                            
00002ED2 103C 00E1                  		move.b	#$E1,d0
00002ED6 6100 E31E                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00002EDA 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00002EE0 6100 FAB8                  		bsr.w	DelayProgram
00002EE4 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00002EEA                            
00002EEA                            Sega_WaitEnd:
00002EEA 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002EF0 6100 FAA8                  		bsr.w	DelayProgram
00002EF4 4A78 F614                  		tst.w	($FFFFF614).w
00002EF8 6700                       		beq.s	Sega_GotoTitle
00002EFA 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00002F00 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00002F02                            
00002F02                            Sega_GotoTitle:
00002F02 11FC 0001 F601             		move.b	#1,(FromSEGA).w
00002F08 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00002F0E 103C 00E4                  		move.b	#$E4,d0
00002F12 6100 E2E2                  		bsr.w	PlaySound_Special ; stop music
00002F16 6100 E57A                  		bsr.w	ClearPLC
00002F1A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002F20 6100 EF44                  		bsr.w	Pal_FadeFrom2
00002F24 46FC 2700                  		move	#$2700,sr
00002F28 6100 E234                  		bsr.w	SoundDriverLoad
00002F2C 4DF9 00C0 0004             		lea	($C00004).l,a6
00002F32 3CBC 8004                  		move.w	#$8004,(a6)
00002F36 3CBC 8230                  		move.w	#$8230,(a6)
00002F3A 3CBC 8407                  		move.w	#$8407,(a6)
00002F3E 3CBC 9001                  		move.w	#$9001,(a6)
00002F42 3CBC 9200                  		move.w	#$9200,(a6)
00002F46 3CBC 8B03                  		move.w	#$8B03,(a6)
00002F4A 3CBC 8720                  		move.w	#$8720,(a6)
00002F4E 4238 F64E                  		clr.b	($FFFFF64E).w
00002F52 6100 E17C                  		bsr.w	ClearScreen
00002F56 4EB9 0000 0000             		jsr SHC2021
00002F5C 6000                       		bra.s	TitleSkip
00002F5E                            ; ===========================================================================
00002F5E                            
00002F5E                            ; ---------------------------------------------------------------------------
00002F5E                            ; Title	screen
00002F5E                            ; ---------------------------------------------------------------------------
00002F5E                            
00002F5E                            TitleScreen:				; XREF: GameModeArray
00002F5E 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00002F64 103C 00E4                  		move.b	#$E4,d0
00002F68 6100 E28C                  		bsr.w	PlaySound_Special ; stop music
00002F6C 6100 E524                  		bsr.w	ClearPLC
00002F70 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00002F76 6100 EEEE                  		bsr.w	Pal_FadeFrom2
00002F7A 46FC 2700                  		move	#$2700,sr
00002F7E 6100 E1DE                  		bsr.w	SoundDriverLoad
00002F82 4DF9 00C0 0004             		lea	($C00004).l,a6
00002F88 3CBC 8004                  		move.w	#$8004,(a6)
00002F8C 3CBC 8230                  		move.w	#$8230,(a6)
00002F90 3CBC 8407                  		move.w	#$8407,(a6)
00002F94 3CBC 9001                  		move.w	#$9001,(a6)
00002F98 3CBC 9200                  		move.w	#$9200,(a6)
00002F9C 3CBC 8B03                  		move.w	#$8B03,(a6)
00002FA0 3CBC 8720                  		move.w	#$8720,(a6)
00002FA4 4238 F64E                  		clr.b	($FFFFF64E).w
00002FA8 6100 E126                  		bsr.w	ClearScreen
00002FAC                            
00002FAC                            TitleSkip:
00002FAC 43F8 D000                  		lea	($FFFFD000).w,a1
00002FB0 7000                       		moveq	#0,d0
00002FB2 323C 07FF                  		move.w	#$7FF,d1
00002FB6                            
00002FB6                            Title_ClrObjRam:
00002FB6 22C0                       		move.l	d0,(a1)+
00002FB8 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00002FBC                            
00002FBC 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002FC6 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00002FCC 6100 E31A                  		bsr.w	NemDec
00002FD0 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00002FDA 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00002FE0 6100 E306                  		bsr.w	NemDec
00002FE4 43F9 00FF 0000             		lea	($FF0000).l,a1
00002FEA 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00002FF0 303C 0000                  		move.w	#0,d0
00002FF4 6100 E5DC                  		bsr.w	EniDec
00002FF8 43F9 00FF 0000             		lea	($FF0000).l,a1
00002FFE 203C 4000 0003             		move.l	#$40000003,d0
00003004 7227                       		moveq	#$27,d1
00003006 741B                       		moveq	#$1B,d2
00003008 6100 E2B4                  		bsr.w	ShowVDPGraphics
0000300C                            
0000300C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003010 7000                       		moveq	#0,d0
00003012 323C 001F                  		move.w	#$1F,d1
00003016                            
00003016                            Title_ClrPallet:
00003016 22C0                       		move.l	d0,(a1)+
00003018 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
0000301C                            
0000301C 7014                       		moveq	#$14,d0		; load Sonic's pallet
0000301E 6100 F0C6                  		bsr.w	PalLoad1
00003022 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00003028 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w		
0000302E 4EB9 0000 0000             		jsr	ObjectsLoad
00003034 4EB9 0000 0000             		jsr	BuildSprites
0000303A 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003040 4A38 F601                  		tst.b	(FromSEGA).w
00003044 6700 0000                  		beq.w	@skip
00003048 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000304E                            
0000304E                            	@skip:
0000304E 6100 ED94                  		bsr.w	Pal_FadeTo2
00003052 46FC 2700                  		move	#$2700,sr
00003056 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00003060 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003066 6100 E280                  		bsr.w	NemDec
0000306A 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003074 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
0000307A 6100 E26C                  		bsr.w	NemDec
0000307E 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003088 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
0000308E 6100 E258                  		bsr.w	NemDec
00003092 4DF9 00C0 0000             		lea	($C00000).l,a6
00003098 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000030A0 4BF9 0000 0550             		lea	(Art_Text).l,a5
000030A6 323C 028F                  		move.w	#$28F,d1
000030AA                            
000030AA                            Title_LoadText:
000030AA 3C9D                       		move.w	(a5)+,(a6)
000030AC 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
000030B0                            
000030B0 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
000030B6 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
000030BC 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
000030C2 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000030C8 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000030CE 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000030D4 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
000030DA 6100 0000                  		bsr.w	LevelSizeLoad
000030DE 6100 0000                  		bsr.w	DeformBgLayer
000030E2 43F8 B000                  		lea	($FFFFB000).w,a1
000030E6 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
000030EC 303C 0000                  		move.w	#0,d0
000030F0 6100 E4E0                  		bsr.w	EniDec
000030F4 6100 0000                  		bsr.w	LevelLayoutLoad
000030F8 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000030FE 4A38 F601                  		tst.b	(FromSEGA).w
00003102 6700                       		beq.s	@notSEGA
00003104 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000310A                            
0000310A                            	@notSEGA:
0000310A 6100 ED5A                  		bsr.w	Pal_FadeFrom2
0000310E 46FC 2700                  		move	#$2700,sr
00003112 6100 DFBC                  		bsr.w	ClearScreen
00003116 4BF9 00C0 0004             		lea	($C00004).l,a5
0000311C 4DF9 00C0 0000             		lea	($C00000).l,a6
00003122 47F8 F708                  		lea	($FFFFF708).w,a3
00003126 49F8 A440                  		lea	($FFFFA440).w,a4
0000312A 343C 6000                  		move.w	#$6000,d2
0000312E 6100 0000                  		bsr.w	LoadTilesFromStart2
00003132 43F9 00FF 0000             		lea	($FF0000).l,a1
00003138 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
0000313E 303C 0000                  		move.w	#0,d0
00003142 6100 E48E                  		bsr.w	EniDec
00003146 43F9 00FF 0000             		lea	($FF0000).l,a1
0000314C 203C 4206 0003             		move.l	#$42060003,d0
00003152 7221                       		moveq	#$21,d1
00003154 7415                       		moveq	#$15,d2
00003156 6100 E166                  		bsr.w	ShowVDPGraphics
0000315A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003164 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
0000316A 6100 E17C                  		bsr.w	NemDec
0000316E 7001                       		moveq	#1,d0		; load title screen pallet
00003170 6100 EF74                  		bsr.w	PalLoad1
00003174 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003178 6100 E07C                  		bsr.w	PlaySound_Special
0000317C 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003182                            		;move.b	#1,($FFFFFFE1).w ; enable slow-mo mode
00003182 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003188 43F8 D080                  		lea	($FFFFD080).w,a1
0000318C 7000                       		moveq	#0,d0
0000318E 323C 0007                  		move.w	#7,d1
00003192                            
00003192                            Title_ClrObjRam2:
00003192 22C0                       		move.l	d0,(a1)+
00003194 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003198                            
00003198 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000319E 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000031A4 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000031AA 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000031B0 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000031B6 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
000031BC 4EB9 0000 0000             		jsr	ObjectsLoad
000031C2 6100 0000                  		bsr.w	DeformBgLayer
000031C6 4EB9 0000 0000             		jsr	BuildSprites
000031CC 7000                       		moveq	#0,d0
000031CE 6100 E296                  		bsr.w	LoadPLC2
000031D2 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000031D8 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000031DE 3038 F60C                  		move.w	($FFFFF60C).w,d0
000031E2 0000 0040                  		ori.b	#$40,d0
000031E6 33C0 00C0 0004             		move.w	d0,($C00004).l
000031EC 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000031F2 4A38 F601                  		tst.b	(FromSEGA).w
000031F6 6700                       		beq.s	@notSEGA
000031F8 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000031FE 11FC 0000 F5C4             		move.b	#0,(SonimeSST+sonime_routine).w
00003204 11FC 0000 F601             		move.b	#0,(FromSEGA).w
0000320A                            
0000320A                            	@notSEGA:
0000320A 6100 EBD8                  		bsr.w	Pal_FadeTo2
0000320E                            
0000320E                            loc_317C:
0000320E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003214 6100 F784                  		bsr.w	DelayProgram
00003218 4EB9 0000 0000             		jsr	ObjectsLoad
0000321E 6100 0000                  		bsr.w	DeformBgLayer
00003222 4EB9 0000 0000             		jsr	BuildSprites
00003228 6100 E764                  		bsr.w	PalCycle_Title
0000322C 6100 E272                  		bsr.w	RunPLC_RAM
00003230 3038 D008                  		move.w	($FFFFD008).w,d0
00003234 5440                       		addq.w	#2,d0
00003236 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
0000323A 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
0000323E 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003240 6000 FD1C                  		bra.w	TitleScreen
00003244                            ; ===========================================================================
00003244                            
00003244                            Title_ChkRegion:
00003244 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003248 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
0000324A 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003250 6000                       		bra.s	Title_EnterCheat
00003252                            ; ===========================================================================
00003252                            
00003252                            Title_RegionJ:				; XREF: Title_ChkRegion
00003252 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003258                            
00003258                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003258 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
0000325C D0C0                       		adda.w	d0,a0
0000325E 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00003262 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003266 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003268 6600                       		bne.s	loc_3210	; if not, branch
0000326A 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
0000326E 4A00                       		tst.b	d0
00003270 6600                       		bne.s	Title_CountC
00003272 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003276 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
0000327A E249                       		lsr.w	#1,d1
0000327C 0241 0003                  		andi.w	#3,d1
00003280 6700                       		beq.s	Title_PlayRing
00003282 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003286 6A00                       		bpl.s	Title_PlayRing
00003288 7201                       		moveq	#1,d1
0000328A 1181 1001                  		move.b	d1,1(a0,d1.w)
0000328E                            
0000328E                            Title_PlayRing:
0000328E 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003294 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003298 6100 DF5C                  		bsr.w	PlaySound_Special
0000329C 6000                       		bra.s	Title_CountC
0000329E                            ; ===========================================================================
0000329E                            
0000329E                            loc_3210:				; XREF: Title_EnterCheat
0000329E 4A00                       		tst.b	d0
000032A0 6700                       		beq.s	Title_CountC
000032A2 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000032A8 6700                       		beq.s	Title_CountC
000032AA 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000032B0                            
000032B0                            Title_CountC:
000032B0 1038 F605                  		move.b	($FFFFF605).w,d0
000032B4 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000032B8 6700                       		beq.s	loc_3230	; if not, branch
000032BA 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000032BE                            
000032BE                            loc_3230:
000032BE 4A78 F614                  		tst.w	($FFFFF614).w
000032C2 6700 0000                  		beq.w	Demo
000032C6 0838 0005 F605             		btst	#5,($FFFFF605).w	; has C been pressed?
000032CC 6700                       		beq.s	Title_StartCheck		; if not, branch
000032CE 33FC 0100 00A1 1100        		move.w #$0100,($A11100).l ; request Z80 stop (ON)
000032D6 0839 0000 00A1 1100        		btst.b #$00,($A11100).l ; has the Z80 stopped yet?
000032DE 66F6                       		bne.s *-$08 ; if not, branch
000032E0 0879 0007 00A0 0647        		bchg #7,($A00647).l ; set volume
000032E8 13FC 00DA 00A0 0651        		move.b #%11011010,($A00651).l ; set request
000032F0 33FC 0000 00A1 1100        		move.w #$0000,($A11100).l ; request Z80 stop (OFF)
000032F8 103C 00B5                  		move.b	#$B5,d0
000032FC 6100 DEF8                  		bsr.w	PlaySound_Special
00003300                            
00003300                            Title_StartCheck:
00003300 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003306 6700 FF06                  		beq.w	loc_317C	; if not, branch
0000330A                            
0000330A                            Title_ChkLevSel:
0000330A 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
0000330E 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003312 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003318 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000331C 7002                       		moveq	#2,d0
0000331E 6100 EDE2                  		bsr.w	PalLoad2	; load level select pallet
00003322 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003326 7000                       		moveq	#0,d0
00003328 323C 00DF                  		move.w	#$DF,d1
0000332C                            
0000332C                            Title_ClrScroll:
0000332C 22C0                       		move.l	d0,(a1)+
0000332E 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003332                            
00003332 21C0 F616                  		move.l	d0,($FFFFF616).w
00003336 46FC 2700                  		move	#$2700,sr
0000333A 4DF9 00C0 0000             		lea	($C00000).l,a6
00003340 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
0000334A 323C 03FF                  		move.w	#$3FF,d1
0000334E                            
0000334E                            Title_ClrVram:
0000334E 2C80                       		move.l	d0,(a6)
00003350 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003354                            
00003354 6100 0000                  		bsr.w	LevSelTextLoad
00003358                            
00003358                            ; ---------------------------------------------------------------------------
00003358                            ; Level	Select
00003358                            ; ---------------------------------------------------------------------------
00003358                            
00003358                            LevelSelect:
00003358 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000335E 6100 F63A                  		bsr.w	DelayProgram
00003362 4EB9 0000 0000             		jsr		BuildSprites
00003368 6100 0000                  		bsr.w	LevSelControls
0000336C 6100 E132                  		bsr.w	RunPLC_RAM
00003370 4AB8 F680                  		tst.l	($FFFFF680).w
00003374 66E2                       		bne.s	LevelSelect
00003376 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
0000337C 67DA                       		beq.s	LevelSelect	; if not, branch
0000337E 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003382 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00003386 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003388 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000338C 0640 0080                  		addi.w	#$80,d0
00003390 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
00003394 6700                       		beq.s	LevSel_NoCheat	; if not, branch
00003396 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
0000339A 6700                       		beq.s	LevSel_Ending	; if yes, branch
0000339C 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
000033A0 6700                       		beq.s	LevSel_Credits	; if yes, branch
000033A2                            
000033A2                            LevSel_NoCheat:
000033A2 0C40 0094                  		cmpi.w	#$94,d0		; is sound $80-$94 being played?
000033A6 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
000033A8 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
000033AC 65AA                       		bcs.s	LevelSelect	; if yes, branch
000033AE                            
000033AE                            LevSel_PlaySnd:
000033AE 6100 DE46                  		bsr.w	PlaySound_Special
000033B2 60A4                       		bra.s	LevelSelect
000033B4                            ; ===========================================================================
000033B4                            
000033B4                            LevSel_Ending:				; XREF: LevelSelect
000033B4 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000033BA 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000033C0                            	;	move.b	#0,($FFFFFE57).w ; clear emeralds
000033C0 4E75                       		rts	
000033C2                            ; ===========================================================================
000033C2                            
000033C2                            LevSel_Credits:				; XREF: LevelSelect
000033C2 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000033C8 103C 0091                  		move.b	#$91,d0
000033CC 6100 DE28                  		bsr.w	PlaySound_Special ; play credits music
000033D0 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
000033D6 4E75                       		rts	
000033D8                            ; ===========================================================================
000033D8                            
000033D8                            LevSel_Level_SS:			; XREF: LevelSelect
000033D8 D040                       		add.w	d0,d0
000033DA 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000033DE 6B00 FF78                  		bmi.w	LevelSelect
000033E2 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
000033E6 6600                       		bne.s	LevSel_Level	; if not, branch
000033E8 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000033EE 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
000033F2 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000033F8 7000                       		moveq	#0,d0
000033FA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000033FE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003402 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003406 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
0000340A                            	;	move.l	#$00010203,($FFFFFE58).w ; clear emeralds
0000340A                            	;	move.l	#$04050000,($FFFFFE5C).w ; clear emeralds
0000340A 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)	
00003412 4E75                       		rts	
00003414                            ; ===========================================================================
00003414                            ; ---------------------------------------------------------------------------
00003414                            ; Level	select - level pointers
00003414                            ; ---------------------------------------------------------------------------
00003414                            LSelectPointers:
00003414                            		incbin	misc\ls_point.bin
0000343E                            		even
0000343E                            
0000343E                            LevSel_Level:				; XREF: LevSel_Level_SS
0000343E 0240 3FFF                  		andi.w	#$3FFF,d0
00003442 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003446                            
00003446                            PlayLevel:				; XREF: ROM:00003246j ...
00003446 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000344C 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003452 7000                       		moveq	#0,d0
00003454 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003458 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000345C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003460 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003464 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003468                            	;	move.l	#$01020304,($FFFFFE58).w ; clear emeralds
00003468                            	;	move.l	#$05000000,($FFFFFE5C).w ; clear emeralds
00003468 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
0000346C 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)			
00003474 103C 00E0                  		move.b	#$E0,d0
00003478 6100 DD7C                  		bsr.w	PlaySound_Special ; fade out music
0000347C 4E75                       		rts	
0000347E                            ; ===========================================================================
0000347E                            ; ---------------------------------------------------------------------------
0000347E                            ; Level	select codes
0000347E                            ; ---------------------------------------------------------------------------
0000347E                            LevelSelectCode_J:
0000347E                            		incbin	misc\ls_jcode.bin
00003484                            		even
00003484                            
00003484                            LevelSelectCode_US:
00003484                            		incbin	misc\ls_ucode.bin
0000348A                            		even
0000348A                            ; ===========================================================================
0000348A                            
0000348A                            ; ---------------------------------------------------------------------------
0000348A                            ; Demo mode
0000348A                            ; ---------------------------------------------------------------------------
0000348A                            
0000348A                            Demo:					; XREF: TitleScreen
0000348A 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003490                            
00003490                            loc_33B6:				; XREF: loc_33E4
00003490 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003496 6100 F502                  		bsr.w	DelayProgram
0000349A 6100 0000                  		bsr.w	DeformBgLayer
0000349E 6100 E4CE                  		bsr.w	PalCycle_Load
000034A2 6100 DFFC                  		bsr.w	RunPLC_RAM
000034A6 3038 D008                  		move.w	($FFFFD008).w,d0
000034AA 5440                       		addq.w	#2,d0
000034AC 31C0 D008                  		move.w	d0,($FFFFD008).w
000034B0 0C40 1C00                  		cmpi.w	#$1C00,d0
000034B4 6500                       		bcs.s	loc_33E4
000034B6 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set screen mode to 0
000034BC 4E75                       		rts	
000034BE                            ; ===========================================================================
000034BE                            
000034BE                            loc_33E4:				; XREF: Demo
000034BE 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000034C4 6600 FE44                  		bne.w	Title_ChkLevSel	; if yes, branch
000034C8 4A78 F614                  		tst.w	($FFFFF614).w
000034CC 6600 FFC2                  		bne.w	loc_33B6
000034D0 103C 00E0                  		move.b	#$E0,d0
000034D4 6100 DD20                  		bsr.w	PlaySound_Special ; fade out music
000034D8 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
000034DC 0240 0007                  		andi.w	#7,d0
000034E0 D040                       		add.w	d0,d0
000034E2 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000034E6 31C0 FE10                  		move.w	d0,($FFFFFE10).w
000034EA 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
000034EE 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
000034F4 6500                       		bcs.s	loc_3422	; if yes, branch
000034F6 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
000034FC                            
000034FC                            loc_3422:
000034FC 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003502 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003508 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
0000350C 6600                       		bne.s	Demo_Level	; if not, branch
0000350E 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003514 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003518 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
0000351C                            
0000351C                            Demo_Level:
0000351C 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003522 7000                       		moveq	#0,d0
00003524 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003528 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000352C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003530 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)		
00003538 4E75                       		rts	
0000353A                            ; ===========================================================================
0000353A                            ; ---------------------------------------------------------------------------
0000353A                            ; Levels used in demos
0000353A                            ; ---------------------------------------------------------------------------
0000353A                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003542                            		even
00003542                            
00003542                            ; ---------------------------------------------------------------------------
00003542                            ; Subroutine to	change what you're selecting in the level select
00003542                            ; ---------------------------------------------------------------------------
00003542                            
00003542                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003542                            
00003542                            
00003542                            LevSelControls:				; XREF: LevelSelect
00003542 1238 F605                  		move.b	($FFFFF605).w,d1
00003546 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
0000354A 6600                       		bne.s	LevSel_UpDown	; if yes, branch
0000354C 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003550 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003552                            
00003552                            LevSel_UpDown:
00003552 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003558 1238 F604                  		move.b	($FFFFF604).w,d1
0000355C 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003560 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003562 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003566 0801 0000                  		btst	#0,d1		; is up	pressed?
0000356A 6700                       		beq.s	LevSel_Down	; if not, branch
0000356C 5340                       		subq.w	#1,d0		; move up 1 selection
0000356E 6400                       		bcc.s	LevSel_Down
00003570 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00003572                            
00003572                            LevSel_Down:
00003572 0801 0001                  		btst	#1,d1		; is down pressed?
00003576 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003578 5240                       		addq.w	#1,d0		; move down 1 selection
0000357A 0C40 0015                  		cmpi.w	#$15,d0
0000357E 6500                       		bcs.s	LevSel_Refresh
00003580 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00003582                            
00003582                            LevSel_Refresh:
00003582 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
00003586 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
0000358A 4E75                       		rts	
0000358C                            ; ===========================================================================
0000358C                            
0000358C                            LevSel_SndTest:				; XREF: LevSelControls
0000358C 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
00003592 6600                       		bne.s	LevSel_NoMove	; if not, branch
00003594 1238 F605                  		move.b	($FFFFF605).w,d1
00003598 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
0000359C 6700                       		beq.s	LevSel_NoMove	; if not, branch
0000359E 3038 FF84                  		move.w	($FFFFFF84).w,d0
000035A2 0801 0002                  		btst	#2,d1		; is left pressed?
000035A6 6700                       		beq.s	LevSel_Right	; if not, branch
000035A8 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000035AA 6400                       		bcc.s	LevSel_Right
000035AC 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
000035AE                            
000035AE                            LevSel_Right:
000035AE 0801 0003                  		btst	#3,d1		; is right pressed?
000035B2 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000035B4 5240                       		addq.w	#1,d0		; add 1	to sound test
000035B6 0C40 0050                  		cmpi.w	#$50,d0
000035BA 6500                       		bcs.s	LevSel_Refresh2
000035BC 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000035BE                            
000035BE                            LevSel_Refresh2:
000035BE 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
000035C2 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000035C6                            
000035C6                            LevSel_NoMove:
000035C6 4E75                       		rts	
000035C8                            ; End of function LevSelControls
000035C8                            
000035C8                            ; ---------------------------------------------------------------------------
000035C8                            ; Subroutine to load level select text
000035C8                            ; ---------------------------------------------------------------------------
000035C8                            
000035C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000035C8                            
000035C8                            
000035C8                            LevSelTextLoad:				; XREF: TitleScreen
000035C8 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000035CE 4DF9 00C0 0000             		lea	($C00000).l,a6
000035D4 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
000035DA 363C E680                  		move.w	#$E680,d3	; VRAM setting
000035DE 7214                       		moveq	#$14,d1		; number of lines of text
000035E0                            
000035E0                            loc_34FE:				; XREF: LevSelTextLoad+26j
000035E0 2D44 0004                  		move.l	d4,4(a6)
000035E4 6100 0000                  		bsr.w	LevSel_ChgLine
000035E8 0684 0080 0000             		addi.l	#$800000,d4
000035EE 51C9 FFF0                  		dbf	d1,loc_34FE
000035F2 7000                       		moveq	#0,d0
000035F4 3038 FF82                  		move.w	($FFFFFF82).w,d0
000035F8 3200                       		move.w	d0,d1
000035FA 283C 6210 0003             		move.l	#$62100003,d4
00003600 EF48                       		lsl.w	#7,d0
00003602 4840                       		swap	d0
00003604 D880                       		add.l	d0,d4
00003606 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000360C E749                       		lsl.w	#3,d1
0000360E 3001                       		move.w	d1,d0
00003610 D241                       		add.w	d1,d1
00003612 D240                       		add.w	d0,d1
00003614 D2C1                       		adda.w	d1,a1
00003616 363C C680                  		move.w	#$C680,d3
0000361A 2D44 0004                  		move.l	d4,4(a6)
0000361E 6100 0000                  		bsr.w	LevSel_ChgLine
00003622 363C E680                  		move.w	#$E680,d3
00003626 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
0000362C 6600                       		bne.s	loc_3550
0000362E 363C C680                  		move.w	#$C680,d3
00003632                            
00003632                            loc_3550:
00003632 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
0000363C 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003640 0640 0080                  		addi.w	#$80,d0
00003644                            
00003644                            DRAWNUMBER:
00003644 1400                       		move.b	d0,d2
00003646 E808                       		lsr.b	#4,d0
00003648 6100 0000                  		bsr.w	LevSel_ChgSnd
0000364C 1002                       		move.b	d2,d0
0000364E 6100 0000                  		bsr.w	LevSel_ChgSnd
00003652 4E75                       		rts	
00003654                            ; End of function LevSelTextLoad
00003654                            
00003654                            
00003654                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003654                            
00003654                            
00003654                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003654 0240 000F                  		andi.w	#$F,d0
00003658 0C00 000A                  		cmpi.b	#$A,d0
0000365C 6500                       		bcs.s	loc_3580
0000365E 5E00                       		addi.b	#7,d0
00003660                            
00003660                            loc_3580:
00003660 D043                       		add.w	d3,d0
00003662 3C80                       		move.w	d0,(a6)
00003664 4E75                       		rts	
00003666                            ; End of function LevSel_ChgSnd
00003666                            
00003666                            
00003666                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003666                            
00003666                            
00003666                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003666 7417                       		moveq	#$17,d2		; number of characters per line
00003668                            
00003668                            loc_3588:
00003668 7000                       		moveq	#0,d0
0000366A 1019                       		move.b	(a1)+,d0
0000366C 6A00                       		bpl.s	loc_3598
0000366E 3CBC 0000                  		move.w	#0,(a6)
00003672 51CA FFF4                  		dbf	d2,loc_3588
00003676 4E75                       		rts	
00003678                            ; ===========================================================================
00003678                            
00003678                            loc_3598:				; XREF: LevSel_ChgLine
00003678 D043                       		add.w	d3,d0
0000367A 3C80                       		move.w	d0,(a6)
0000367C 51CA FFEA                  		dbf	d2,loc_3588
00003680 4E75                       		rts	
00003682                            ; End of function LevSel_ChgLine
00003682                            
00003682                            ; ===========================================================================
00003682                            ; ---------------------------------------------------------------------------
00003682                            ; Level	select menu text
00003682                            ; ---------------------------------------------------------------------------
00003682                            LevelMenuText:	incbin	misc\menutext.bin
0000387A                            		even
0000387A                            ; ---------------------------------------------------------------------------
0000387A                            ; Music	playlist
0000387A                            ; ---------------------------------------------------------------------------
0000387A                            MusicList:	incbin	misc\muslist1.bin
00003882                            		even
00003882                            ; ===========================================================================
00003882                            
00003882                            ; ---------------------------------------------------------------------------
00003882                            ; Level
00003882                            ; ---------------------------------------------------------------------------
00003882                            
00003882                            Level:					; XREF: GameModeArray
00003882 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003888 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w		
0000388E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003892 6B00                       		bmi.s	loc_37B6
00003894 103C 00E0                  		move.b	#$E0,d0
00003898 6100 D95C                  		bsr.w	PlaySound_Special ; fade out music
0000389C                            
0000389C                            loc_37B6:
0000389C 6100 DBF4                  		bsr.w	ClearPLC
000038A0 6100 E5BE                  		bsr.w	Pal_FadeFrom
000038A4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000038A8 6B00                       		bmi.s	Level_ClrRam
000038AA 46FC 2700                  		move	#$2700,sr
000038AE 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
000038B8 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
000038BE 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
000038C4 4EB8 1410                          jsr LoadUncArt          ; load uncompressed art
000038C8 46FC 2300                  		move	#$2300,sr
000038CC 7000                       		moveq	#0,d0
000038CE 1038 FE10                  		move.b	($FFFFFE10).w,d0
000038D2 E948                       		lsl.w	#4,d0
000038D4 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000038DA 45F2 0000                  		lea	(a2,d0.w),a2
000038DE 7000                       		moveq	#0,d0
000038E0 1012                       		move.b	(a2),d0
000038E2 6700                       		beq.s	loc_37FC
000038E4 6100 DB4E                  		bsr.w	LoadPLC		; load level patterns
000038E8                            
000038E8                            loc_37FC:
000038E8 7001                       		moveq	#1,d0
000038EA 6100 DB48                  		bsr.w	LoadPLC		; load standard	patterns
000038EE                            
000038EE                            Level_ClrRam:
000038EE 43F8 D000                  		lea	($FFFFD000).w,a1
000038F2 7000                       		moveq	#0,d0
000038F4 323C 07FF                  		move.w	#$7FF,d1
000038F8                            
000038F8                            Level_ClrObjRam:
000038F8 22C0                       		move.l	d0,(a1)+
000038FA 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
000038FE                            
000038FE 43F8 F628                  		lea	($FFFFF628).w,a1
00003902 7000                       		moveq	#0,d0
00003904 323C 0015                  		move.w	#$15,d1
00003908                            
00003908                            Level_ClrVars:
00003908 22C0                       		move.l	d0,(a1)+
0000390A 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
0000390E                            
0000390E 43F8 F700                  		lea	($FFFFF700).w,a1
00003912 7000                       		moveq	#0,d0
00003914 323C 003F                  		move.w	#$3F,d1
00003918                            
00003918                            Level_ClrVars2:
00003918 22C0                       		move.l	d0,(a1)+
0000391A 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
0000391E                            
0000391E 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003922 7000                       		moveq	#0,d0
00003924 323C 0047                  		move.w	#$47,d1
00003928                            
00003928                            Level_ClrVars3:
00003928 22C0                       		move.l	d0,(a1)+
0000392A 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
0000392E 46FC 2700                  		move	#$2700,sr
00003932 6100 D79C                  		bsr.w	ClearScreen
00003936 4DF9 00C0 0004             		lea	($C00004).l,a6
0000393C 3CBC 8B03                  		move.w	#$8B03,(a6)
00003940 3CBC 8230                  		move.w	#$8230,(a6)
00003944 3CBC 8407                  		move.w	#$8407,(a6)
00003948 3CBC 857C                  		move.w	#$857C,(a6)
0000394C 3CBC 9001                  		move.w	#$9001,(a6)
00003950 3CBC 8004                  		move.w	#$8004,(a6)
00003954 3CBC 8720                  		move.w	#$8720,(a6)
00003958 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000395E 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003962 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003968 6600                       		bne.s	Level_LoadPal	; if not, branch
0000396A 3CBC 8014                  		move.w	#$8014,(a6)
0000396E 7000                       		moveq	#0,d0
00003970 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003974 D040                       		add.w	d0,d0
00003976 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
0000397C 3031 0000                  		move.w	(a1,d0.w),d0
00003980 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003984 31C0 F648                  		move.w	d0,($FFFFF648).w
00003988 31C0 F64A                  		move.w	d0,($FFFFF64A).w
0000398C 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003990 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003994 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
0000399A                            
0000399A                            Level_LoadPal:
0000399A 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000039A0 46FC 2300                  		move	#$2300,sr
000039A4 7003                       		moveq	#3,d0
000039A6 6100 E75A                  		bsr.w	PalLoad2	; load Sonic's pallet line
000039AA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000039B0 6600                       		bne.s	Level_GetBgm	; if not, branch
000039B2 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
000039B4 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
000039BA 6600                       		bne.s	Level_WaterPal	; if not, branch
000039BC 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
000039BE                            
000039BE                            Level_WaterPal:
000039BE 6100 E75A                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
000039C2 4A38 FE30                  		tst.b	($FFFFFE30).w
000039C6 6700                       		beq.s	Level_GetBgm
000039C8 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000039CE                            
000039CE                            Level_GetBgm:
000039CE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000039D2 6B00                       		bmi.s	loc_3946
000039D4 7000                       		moveq	#0,d0
000039D6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000039DA 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3?
000039E0 6600                       		bne.s	Level_BgmNotLZ4	; if not, branch
000039E2 7005                       		moveq	#5,d0		; move 5 to d0
000039E4                            
000039E4                            Level_BgmNotLZ4:
000039E4 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000039EA 6600                       		bne.s	Level_PlayBgm	; if not, branch
000039EC 7006                       		moveq	#6,d0		; move 6 to d0
000039EE                            
000039EE                            Level_PlayBgm:
000039EE 43F9 0000 387A             		lea	(MusicList).l,a1 ; load	music playlist
000039F4 1031 0000                  		move.b	(a1,d0.w),d0	; add d0 to a1
000039F8 6100 D7F6                  		bsr.w	PlaySound	; play music
000039FC 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003A02                            
00003A02                            Level_TtlCard:
00003A02 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003A08 6100 EF90                  		bsr.w	DelayProgram
00003A0C 4EB9 0000 0000             		jsr	ObjectsLoad
00003A12 4EB9 0000 0000             		jsr	BuildSprites
00003A18 6100 DA86                  		bsr.w	RunPLC_RAM
00003A1C 3038 D108                  		move.w	($FFFFD108).w,d0
00003A20 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003A24 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003A26 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003A2A 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003A2C 4EB9 0000 0000             		jsr	Hud_Base
00003A32                            
00003A32                            loc_3946:
00003A32 7003                       		moveq	#3,d0
00003A34 6100 E6B0                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003A38 6100 0000                  		bsr.w	LevelSizeLoad
00003A3C 6100 0000                  		bsr.w	DeformBgLayer
00003A40 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003A46 6100 0000                  		bsr.w	LoadZoneTiles	; load level art			
00003A4A 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003A4E 6100 0000                  		bsr.w	LoadTilesFromStart
00003A52 4EB9 0000 0000             		jsr	FloorLog_Unk
00003A58 6100 0000                  		bsr.w	ColIndexLoad
00003A5C 6100 0000                  		bsr.w	LZWaterEffects
00003A60 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003A66 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003A6A 6B00                       		bmi.s	Level_ChkDebug
00003A6C 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003A72 11FC 0001 FFD0                     move.b    #1,($FFFFFFD0).w
00003A78                            		
00003A78                            Level_ChkDebug:
00003A78 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003A7C 6700                       		beq.s	Level_ChkWater	; if not, branch
00003A7E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003A84 6700                       		beq.s	Level_ChkWater	; if not, branch
00003A86 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003A8C                            
00003A8C                            Level_ChkWater:
00003A8C 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003A92 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003A98 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
00003A9E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003AA4 6600                       		bne.s	Level_LoadObj	; if not, branch
00003AA6 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003AAC 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003AB2 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003AB8 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003ABE                            
00003ABE                            Level_LoadObj:
00003ABE 4EB9 0000 0000             		jsr	ObjPosLoad
00003AC4 11FC 0000 870C             		move.b	#0,(Rings_manager_routine).w
00003ACA 4EB9 0000 0000             		jsr	RingsManager				
00003AD0 4EB9 0000 0000             		jsr	ObjectsLoad
00003AD6 4EB9 0000 0000             		jsr	BuildSprites
00003ADC 7000                       		moveq	#0,d0
00003ADE 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003AE2 6600                       		bne.s	loc_39E8	; if yes, branch
00003AE4 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003AE8 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003AEC 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003AF0                            
00003AF0                            loc_39E8:
00003AF0 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003AF4 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003AF8 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003AFC 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003B00 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00003B04 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003B08 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003B0C 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003B10 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
00003B14 6100 0000                  		bsr.w	OscillateNumInit
00003B18 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003B1E 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003B24 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003B2A 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003B30 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003B36 7000                       		moveq	#0,d0
00003B38 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003B3C E548                       		lsl.w	#2,d0
00003B3E 2271 0000                  		movea.l	(a1,d0.w),a1
00003B42 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003B46 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003B48 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003B4E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003B52 5340                       		subq.w	#1,d0
00003B54 E548                       		lsl.w	#2,d0
00003B56 2271 0000                  		movea.l	(a1,d0.w),a1
00003B5A                            
00003B5A                            Level_Demo:
00003B5A 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003B60 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003B64 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003B6A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003B6E 6A00                       		bpl.s	Level_ChkWaterPal
00003B70 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003B76 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003B7C 6600                       		bne.s	Level_ChkWaterPal
00003B7E 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003B84                            
00003B84                            Level_ChkWaterPal:
00003B84 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003B8A 6600                       		bne.s	Level_Delay	; if not, branch
00003B8C 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003B8E 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003B94 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003B96 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003B98                            
00003B98                            Level_WaterPal2:
00003B98 6100 E59C                  		bsr.w	PalLoad4_Water
00003B9C                            
00003B9C                            Level_Delay:
00003B9C 323C 0003                  		move.w	#3,d1
00003BA0                            
00003BA0                            Level_DelayLoop:
00003BA0 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003BA6 6100 EDF2                  		bsr.w	DelayProgram
00003BAA 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003BAE                            
00003BAE 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003BB4 6100 E22E                  		bsr.w	Pal_FadeTo2
00003BB8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003BBC 6B00                       		bmi.s	Level_ClrCardArt
00003BBE 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003BC2 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003BC6 5838 D124                  		addq.b	#4,($FFFFD124).w
00003BCA 5838 D164                  		addq.b	#4,($FFFFD164).w
00003BCE 6000                       		bra.s	Level_StartGame
00003BD0                            ; ===========================================================================
00003BD0                            
00003BD0                            Level_ClrCardArt:
00003BD0 7002                       		moveq	#2,d0
00003BD2 4EB9 0000 1434             		jsr	(LoadPLC).l	; load explosion patterns
00003BD8 7000                       		moveq	#0,d0
00003BDA 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003BDE 0640 0015                  		addi.w	#$15,d0
00003BE2 4EB9 0000 1434             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003BE8                            
00003BE8                            Level_StartGame:
00003BE8 11FC 0001 870D             		move.b	#1,(Level_started_flag).w
00003BEE 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003BF4                            
00003BF4                            ; ---------------------------------------------------------------------------
00003BF4                            ; Main level loop (when	all title card and loading sequences are finished)
00003BF4                            ; ---------------------------------------------------------------------------
00003BF4                            
00003BF4                            Level_MainLoop:
00003BF4 6100 D60C                  		bsr.w	PauseGame
00003BF8 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003BFE 6100 ED9A                  		bsr.w	DelayProgram
00003C02 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003C06 6100 0000                  		bsr.w	MoveSonicInDemo
00003C0A 6100 0000                  		bsr.w	LZWaterEffects
00003C0E 4EB9 0000 0000             		jsr	ObjectsLoad
00003C14 4A78 FE08                  		tst.w	($FFFFFE08).w
00003C18 6600                       		bne.s	loc_3B10
00003C1A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003C20 6400                       		bcc.s	loc_3B14
00003C22                            
00003C22                            loc_3B10:
00003C22 6100 0000                  		bsr.w	DeformBgLayer
00003C26                            
00003C26                            loc_3B14:
00003C26 4EB9 0000 0000             		jsr	BuildSprites
00003C2C 4EB9 0000 0000             		jsr	ObjPosLoad
00003C32 4EB9 0000 0000             		jsr	RingsManager
00003C38 6100 DD34                  		bsr.w	PalCycle_Load
00003C3C 6100 D862                  		bsr.w	RunPLC_RAM
00003C40 6100 0000                  		bsr.w	OscillateNumDo
00003C44 6100 0000                  		bsr.w	ChangeRingFrame
00003C48 6100 0000                  		bsr.w	SignpostArtLoad
00003C4C 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003C52 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003C54 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003C58 6600 FC28                  		bne.w	Level		; if yes, branch
00003C5C 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003C62 6700 FF90                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003C66 4E75                       		rts	
00003C68                            ; ===========================================================================
00003C68                            
00003C68                            Level_ChkDemo:				; XREF: Level_MainLoop
00003C68 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003C6C 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003C6E 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003C72 6700                       		beq.s	Level_EndDemo	; if not, branch
00003C74 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003C7A 6700 FF78                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003C7E 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00003C84 4E75                       		rts	
00003C86                            ; ===========================================================================
00003C86                            
00003C86                            Level_EndDemo:				; XREF: Level_ChkDemo
00003C86 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003C8C 6600                       		bne.s	loc_3B88	; if not, branch
00003C8E 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00003C94 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003C98 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003C9A 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003CA0                            
00003CA0                            loc_3B88:
00003CA0 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003CA6 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003CAC 4278 F794                  		clr.w	($FFFFF794).w
00003CB0                            
00003CB0                            loc_3B98:
00003CB0 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003CB6 6100 ECE2                  		bsr.w	DelayProgram
00003CBA 6100 0000                  		bsr.w	MoveSonicInDemo
00003CBE 4EB9 0000 0000             		jsr	ObjectsLoad
00003CC4 4EB9 0000 0000             		jsr	BuildSprites
00003CCA 4EB9 0000 0000             		jsr	ObjPosLoad
00003CD0 5378 F794                  		subq.w	#1,($FFFFF794).w
00003CD4 6A00                       		bpl.s	loc_3BC8
00003CD6 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003CDC 6100 E1A2                  		bsr.w	Pal_FadeOut
00003CE0                            
00003CE0                            loc_3BC8:
00003CE0 4A78 F614                  		tst.w	($FFFFF614).w
00003CE4 66CA                       		bne.s	loc_3B98
00003CE6 4E75                       		rts	
00003CE8                            ; ===========================================================================
00003CE8                            ; ---------------------------------------------------------------------------
00003CE8                            ; Subroutine to	do special water effects in Labyrinth Zone
00003CE8                            ; ---------------------------------------------------------------------------
00003CE8                            
00003CE8                            LZWaterEffects:				; XREF: Level
00003CE8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003CEE 6600                       		bne.s	locret_3C28	; if not, branch
00003CF0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003CF6 6400                       		bcc.s	LZMoveWater
00003CF8 6100 0000                  		bsr.w	LZWindTunnels
00003CFC 6100 0000                  		bsr.w	LZWaterSlides
00003D00 6100 0000                  		bsr.w	LZDynamicWater
00003D04                            
00003D04                            LZMoveWater:
00003D04 4238 F64E                  		clr.b	($FFFFF64E).w
00003D08 7000                       		moveq	#0,d0
00003D0A 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003D0E E248                       		lsr.w	#1,d0
00003D10 D078 F648                  		add.w	($FFFFF648).w,d0
00003D14 31C0 F646                  		move.w	d0,($FFFFF646).w
00003D18 3038 F646                  		move.w	($FFFFF646).w,d0
00003D1C 9078 F704                  		sub.w	($FFFFF704).w,d0
00003D20 6400                       		bcc.s	loc_3C1A
00003D22 4A40                       		tst.w	d0
00003D24 6A00                       		bpl.s	loc_3C1A
00003D26 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003D2C 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003D32                            
00003D32                            loc_3C1A:
00003D32 0C40 00DF                  		cmpi.w	#$DF,d0
00003D36 6500                       		bcs.s	loc_3C24
00003D38 303C 00DF                  		move.w	#$DF,d0
00003D3C                            
00003D3C                            loc_3C24:
00003D3C 11C0 F625                  		move.b	d0,($FFFFF625).w
00003D40                            
00003D40                            locret_3C28:
00003D40 4E75                       		rts	
00003D42                            ; ===========================================================================
00003D42                            ; ---------------------------------------------------------------------------
00003D42                            ; Labyrinth default water heights
00003D42                            ; ---------------------------------------------------------------------------
00003D42                            WaterHeight:	incbin	misc\lz_heigh.bin
00003D4A                            		even
00003D4A                            ; ===========================================================================
00003D4A                            
00003D4A                            ; ---------------------------------------------------------------------------
00003D4A                            ; Labyrinth dynamic water routines
00003D4A                            ; ---------------------------------------------------------------------------
00003D4A                            
00003D4A                            LZDynamicWater:				; XREF: LZWaterEffects
00003D4A 7000                       		moveq	#0,d0
00003D4C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003D50 D040                       		add.w	d0,d0
00003D52 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003D56 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003D5A 7200                       		moveq	#0,d1
00003D5C 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003D60 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003D64 9078 F648                  		sub.w	($FFFFF648).w,d0
00003D68 6700                       		beq.s	locret_3C5A
00003D6A 6400                       		bcc.s	loc_3C56
00003D6C 4441                       		neg.w	d1
00003D6E                            
00003D6E                            loc_3C56:
00003D6E D378 F648                  		add.w	d1,($FFFFF648).w
00003D72                            
00003D72                            locret_3C5A:
00003D72 4E75                       		rts	
00003D74                            ; ===========================================================================
00003D74 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003D76 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003D78 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003D7A 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003D7C                            ; ===========================================================================
00003D7C                            
00003D7C                            DynWater_LZ1:				; XREF: DynWater_Index
00003D7C 3038 F700                  		move.w	($FFFFF700).w,d0
00003D80 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003D84 6600                       		bne.s	loc_3CD0
00003D86 323C 00B8                  		move.w	#$B8,d1
00003D8A 0C40 0600                  		cmpi.w	#$600,d0
00003D8E 6500                       		bcs.s	loc_3CB4
00003D90 323C 0108                  		move.w	#$108,d1
00003D94 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003D9A 6500                       		bcs.s	loc_3CBA
00003D9C 0C40 0C00                  		cmpi.w	#$C00,d0
00003DA0 6500                       		bcs.s	loc_3CB4
00003DA2 323C 0318                  		move.w	#$318,d1
00003DA6 0C40 1080                  		cmpi.w	#$1080,d0
00003DAA 6500                       		bcs.s	loc_3CB4
00003DAC 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003DB2 323C 05C8                  		move.w	#$5C8,d1
00003DB6 0C40 1380                  		cmpi.w	#$1380,d0
00003DBA 6500                       		bcs.s	loc_3CB4
00003DBC 323C 03A8                  		move.w	#$3A8,d1
00003DC0 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003DC4 6600                       		bne.s	loc_3CB4
00003DC6 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003DCC                            
00003DCC                            loc_3CB4:
00003DCC 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DD0 4E75                       		rts	
00003DD2                            ; ===========================================================================
00003DD2                            
00003DD2                            loc_3CBA:				; XREF: DynWater_LZ1
00003DD2 0C40 0C80                  		cmpi.w	#$C80,d0
00003DD6 65F4                       		bcs.s	loc_3CB4
00003DD8 323C 00E8                  		move.w	#$E8,d1
00003DDC 0C40 1500                  		cmpi.w	#$1500,d0
00003DE0 65EA                       		bcs.s	loc_3CB4
00003DE2 323C 0108                  		move.w	#$108,d1
00003DE6 60E4                       		bra.s	loc_3CB4
00003DE8                            ; ===========================================================================
00003DE8                            
00003DE8                            loc_3CD0:				; XREF: DynWater_LZ1
00003DE8 5302                       		subq.b	#1,d2
00003DEA 6600                       		bne.s	locret_3CF4
00003DEC 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00003DF2 6400                       		bcc.s	locret_3CF4
00003DF4 323C 03A8                  		move.w	#$3A8,d1
00003DF8 0C40 1300                  		cmpi.w	#$1300,d0
00003DFC 6500                       		bcs.s	loc_3CF0
00003DFE 323C 0108                  		move.w	#$108,d1
00003E02 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003E08                            
00003E08                            loc_3CF0:
00003E08 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E0C                            
00003E0C                            locret_3CF4:
00003E0C 4E75                       		rts	
00003E0E                            ; ===========================================================================
00003E0E                            
00003E0E                            DynWater_LZ2:				; XREF: DynWater_Index
00003E0E 3038 F700                  		move.w	($FFFFF700).w,d0
00003E12 323C 0328                  		move.w	#$328,d1
00003E16 0C40 0500                  		cmpi.w	#$500,d0
00003E1A 6500                       		bcs.s	loc_3D12
00003E1C 323C 03C8                  		move.w	#$3C8,d1
00003E20 0C40 0B00                  		cmpi.w	#$B00,d0
00003E24 6500                       		bcs.s	loc_3D12
00003E26 323C 0428                  		move.w	#$428,d1
00003E2A                            
00003E2A                            loc_3D12:
00003E2A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E2E 4E75                       		rts	
00003E30                            ; ===========================================================================
00003E30                            
00003E30                            DynWater_LZ3:				; XREF: DynWater_Index
00003E30 3038 F700                  		move.w	($FFFFF700).w,d0
00003E34 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003E38 6600                       		bne.s	loc_3D5E
00003E3A 323C 0900                  		move.w	#$900,d1
00003E3E 0C40 0600                  		cmpi.w	#$600,d0
00003E42 6500                       		bcs.s	loc_3D54
00003E44 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00003E4A 6500                       		bcs.s	loc_3D54
00003E4C 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003E52 6400                       		bcc.s	loc_3D54
00003E54 323C 04C8                  		move.w	#$4C8,d1
00003E58 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00003E5E 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003E64 303C 00B7                  		move.w	#$B7,d0
00003E68 6100 D38C                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00003E6C                            
00003E6C                            loc_3D54:
00003E6C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E70 31C1 F648                  		move.w	d1,($FFFFF648).w
00003E74 4E75                       		rts	
00003E76                            ; ===========================================================================
00003E76                            
00003E76                            loc_3D5E:				; XREF: DynWater_LZ3
00003E76 5302                       		subq.b	#1,d2
00003E78 6600                       		bne.s	loc_3DA8
00003E7A 323C 04C8                  		move.w	#$4C8,d1
00003E7E 0C40 0770                  		cmpi.w	#$770,d0
00003E82 6500                       		bcs.s	loc_3DA2
00003E84 323C 0308                  		move.w	#$308,d1
00003E88 0C40 1400                  		cmpi.w	#$1400,d0
00003E8C 6500                       		bcs.s	loc_3DA2
00003E8E 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00003E94 6700                       		beq.s	loc_3D8E
00003E96 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003E9C 6400                       		bcc.s	loc_3D8E
00003E9E 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00003EA4 6400                       		bcc.s	loc_3DA2
00003EA6                            
00003EA6                            loc_3D8E:
00003EA6 323C 0508                  		move.w	#$508,d1
00003EAA 31C1 F648                  		move.w	d1,($FFFFF648).w
00003EAE 0C40 1770                  		cmpi.w	#$1770,d0
00003EB2 6500                       		bcs.s	loc_3DA2
00003EB4 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003EBA                            
00003EBA                            loc_3DA2:
00003EBA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003EBE 4E75                       		rts	
00003EC0                            ; ===========================================================================
00003EC0                            
00003EC0                            loc_3DA8:
00003EC0 5302                       		subq.b	#1,d2
00003EC2 6600                       		bne.s	loc_3DD2
00003EC4 323C 0508                  		move.w	#$508,d1
00003EC8 0C40 1860                  		cmpi.w	#$1860,d0
00003ECC 6500                       		bcs.s	loc_3DCC
00003ECE 323C 0188                  		move.w	#$188,d1
00003ED2 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003ED6 6400                       		bcc.s	loc_3DC6
00003ED8 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003EDC 6600                       		bne.s	loc_3DCC
00003EDE                            
00003EDE                            loc_3DC6:
00003EDE 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00003EE4                            
00003EE4                            loc_3DCC:
00003EE4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003EE8 4E75                       		rts	
00003EEA                            ; ===========================================================================
00003EEA                            
00003EEA                            loc_3DD2:
00003EEA 5302                       		subq.b	#1,d2
00003EEC 6600                       		bne.s	loc_3E0E
00003EEE 323C 0188                  		move.w	#$188,d1
00003EF2 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003EF6 6500                       		bcs.s	loc_3E04
00003EF8 323C 0900                  		move.w	#$900,d1
00003EFC 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00003F00 6500                       		bcs.s	loc_3E04
00003F02 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00003F08 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00003F0E 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00003F14 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00003F1A 4E75                       		rts	
00003F1C                            ; ===========================================================================
00003F1C                            
00003F1C                            loc_3E04:
00003F1C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003F20 31C1 F648                  		move.w	d1,($FFFFF648).w
00003F24 4E75                       		rts	
00003F26                            ; ===========================================================================
00003F26                            
00003F26                            loc_3E0E:
00003F26 0C40 1E00                  		cmpi.w	#$1E00,d0
00003F2A 6500                       		bcs.s	locret_3E1A
00003F2C 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00003F32                            
00003F32                            locret_3E1A:
00003F32 4E75                       		rts	
00003F34                            ; ===========================================================================
00003F34                            
00003F34                            DynWater_SBZ3:				; XREF: DynWater_Index
00003F34 323C 0228                  		move.w	#$228,d1
00003F38 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00003F3E 6500                       		bcs.s	loc_3E2C
00003F40 323C 04C8                  		move.w	#$4C8,d1
00003F44                            
00003F44                            loc_3E2C:
00003F44 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003F48 4E75                       		rts
00003F4A                            
00003F4A                            ; ---------------------------------------------------------------------------
00003F4A                            ; Labyrinth Zone "wind tunnels"	subroutine
00003F4A                            ; ---------------------------------------------------------------------------
00003F4A                            
00003F4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F4A                            
00003F4A                            
00003F4A                            LZWindTunnels:				; XREF: LZWaterEffects
00003F4A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00003F4E 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00003F52 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00003F58 7000                       		moveq	#0,d0
00003F5A 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003F5E E748                       		lsl.w	#3,d0
00003F60 D4C0                       		adda.w	d0,a2
00003F62 7200                       		moveq	#0,d1
00003F64 4A38 FE11                  		tst.b	($FFFFFE11).w
00003F68 6600                       		bne.s	loc_3E56
00003F6A 7201                       		moveq	#1,d1
00003F6C 514A                       		subq.w	#8,a2
00003F6E                            
00003F6E                            loc_3E56:
00003F6E 43F8 D000                  		lea	($FFFFD000).w,a1
00003F72                            
00003F72                            LZWind_Loop:
00003F72 3029 0008                  		move.w	8(a1),d0
00003F76 B052                       		cmp.w	(a2),d0
00003F78 6500 0000                  		bcs.w	loc_3EF4
00003F7C B06A 0004                  		cmp.w	4(a2),d0
00003F80 6400 0000                  		bcc.w	loc_3EF4
00003F84 3429 000C                  		move.w	$C(a1),d2
00003F88 B46A 0002                  		cmp.w	2(a2),d2
00003F8C 6500                       		bcs.s	loc_3EF4
00003F8E B46A 0006                  		cmp.w	6(a2),d2
00003F92 6400                       		bcc.s	loc_3EF4
00003F94 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003F98 0200 003F                  		andi.b	#$3F,d0
00003F9C 6600                       		bne.s	loc_3E90
00003F9E 303C 00D0                  		move.w	#$D0,d0
00003FA2 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play rushing water sound
00003FA8                            
00003FA8                            loc_3E90:
00003FA8 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00003FAC 6600 0000                  		bne.w	locret_3F0A
00003FB0 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00003FB6 6400                       		bcc.s	loc_3F06
00003FB8 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00003FBE 0440 0080                  		subi.w	#$80,d0
00003FC2 B052                       		cmp.w	(a2),d0
00003FC4 6400                       		bcc.s	LZWind_Move
00003FC6 7002                       		moveq	#2,d0
00003FC8 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00003FCE 6600                       		bne.s	loc_3EBA
00003FD0 4440                       		neg.w	d0
00003FD2                            
00003FD2                            loc_3EBA:
00003FD2 D169 000C                  		add.w	d0,$C(a1)
00003FD6                            
00003FD6                            LZWind_Move:
00003FD6 5869 0008                  		addq.w	#4,8(a1)
00003FDA 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00003FE0 337C 0000 0012             		move.w	#0,$12(a1)
00003FE6 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00003FEC 08E9 0001 0022             		bset	#1,$22(a1)
00003FF2 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00003FF8 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00003FFA 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00003FFE                            
00003FFE                            LZWind_MoveDown:
00003FFE 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004004 6700                       		beq.s	locret_3EF2	; if not, branch
00004006 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000400A                            
0000400A                            locret_3EF2:
0000400A 4E75                       		rts	
0000400C                            ; ===========================================================================
0000400C                            
0000400C                            loc_3EF4:				; XREF: LZWindTunnels
0000400C 504A                       		addq.w	#8,a2
0000400E 51C9 FF62                  		dbf	d1,LZWind_Loop
00004012 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004016 6700                       		beq.s	locret_3F0A
00004018 137C 0000 001C             		move.b	#0,$1C(a1)
0000401E                            
0000401E                            loc_3F06:
0000401E 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004022                            
00004022                            locret_3F0A:
00004022 4E75                       		rts	
00004024                            ; End of function LZWindTunnels
00004024                            
00004024                            ; ===========================================================================
00004024 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
0000402C 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
0000403E 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
0000404C                            					; XREF: LZWindTunnels
0000404C                            		even
0000404C                            
0000404C                            ; ---------------------------------------------------------------------------
0000404C                            ; Labyrinth Zone water slide subroutine
0000404C                            ; ---------------------------------------------------------------------------
0000404C                            
0000404C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000404C                            
0000404C                            
0000404C                            LZWaterSlides:				; XREF: LZWaterEffects
0000404C 43F8 D000                  		lea	($FFFFD000).w,a1
00004050 0829 0001 0022             		btst	#1,$22(a1)
00004056 6600                       		bne.s	loc_3F6A
00004058 3029 000C                  		move.w	$C(a1),d0
0000405C E248                       		lsr.w	#1,d0
0000405E 0240 0380                  		andi.w	#$380,d0
00004062 1229 0008                  		move.b	8(a1),d1
00004066 0241 007F                  		andi.w	#$7F,d1
0000406A D041                       		add.w	d1,d0
0000406C 45F8 A400                  		lea	($FFFFA400).w,a2
00004070 1032 0000                  		move.b	(a2,d0.w),d0
00004074 45FA 0000                  		lea	byte_3FCF(pc),a2
00004078 7206                       		moveq	#6,d1
0000407A                            
0000407A                            loc_3F62:
0000407A B022                       		cmp.b	-(a2),d0
0000407C 57C9 FFFC                  		dbeq	d1,loc_3F62
00004080 6700                       		beq.s	LZSlide_Move
00004082                            
00004082                            loc_3F6A:
00004082 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00004086 6700                       		beq.s	locret_3F7A
00004088 337C 0005 003E             		move.w	#5,$3E(a1)
0000408E 4238 F7CA                  		clr.b	($FFFFF7CA).w
00004092                            
00004092                            locret_3F7A:
00004092 4E75                       		rts	
00004094                            ; ===========================================================================
00004094                            
00004094                            LZSlide_Move:				; XREF: LZWaterSlides
00004094 0C41 0003                  		cmpi.w	#3,d1
00004098 6400                       		bcc.s	loc_3F84
0000409A 4E71                       		nop	
0000409C                            
0000409C                            loc_3F84:
0000409C 08A9 0000 0022             		bclr	#0,$22(a1)
000040A2 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000040A6 1340 0020                  		move.b	d0,$20(a1)
000040AA 6A00                       		bpl.s	loc_3F9A
000040AC 08E9 0000 0022             		bset	#0,$22(a1)
000040B2                            
000040B2                            loc_3F9A:
000040B2 4229 0021                  		clr.b	$21(a1)
000040B6 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000040BC 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000040C2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000040C6 0200 001F                  		andi.b	#$1F,d0
000040CA 6600                       		bne.s	locret_3FBE
000040CC 303C 00D0                  		move.w	#$D0,d0
000040D0 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play water sound
000040D6                            
000040D6                            locret_3FBE:
000040D6 4E75                       		rts	
000040D8                            ; End of function LZWaterSlides
000040D8                            
000040D8                            ; ===========================================================================
000040D8 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
000040E7 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
000040E8                            		even
000040E8                            
000040E8                            ; ---------------------------------------------------------------------------
000040E8                            ; Subroutine to	move Sonic in demo mode
000040E8                            ; ---------------------------------------------------------------------------
000040E8                            
000040E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000040E8                            
000040E8                            
000040E8                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
000040E8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000040EC 6600                       		bne.s	MoveDemo_On	; if yes, branch
000040EE 4E75                       		rts	
000040F0                            ; ===========================================================================
000040F0                            
000040F0                            ; This is an unused subroutine for recording a demo
000040F0                            
000040F0                            MoveDemo_Record:
000040F0 43F9 0008 0000             		lea	($80000).l,a1
000040F6 3038 F790                  		move.w	($FFFFF790).w,d0
000040FA D2C0                       		adda.w	d0,a1
000040FC 1038 F604                  		move.b	($FFFFF604).w,d0
00004100 B011                       		cmp.b	(a1),d0
00004102 6600                       		bne.s	loc_3FFA
00004104 5229 0001                  		addq.b	#1,1(a1)
00004108 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
0000410E 6700                       		beq.s	loc_3FFA
00004110 4E75                       		rts	
00004112                            ; ===========================================================================
00004112                            
00004112                            loc_3FFA:				; XREF: MoveDemo_Record
00004112 1340 0002                  		move.b	d0,2(a1)
00004116 137C 0000 0003             		move.b	#0,3(a1)
0000411C 5478 F790                  		addq.w	#2,($FFFFF790).w
00004120 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004126 4E75                       		rts	
00004128                            ; ===========================================================================
00004128                            
00004128                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004128 4A38 F604                  		tst.b	($FFFFF604).w
0000412C 6A00                       		bpl.s	loc_4022
0000412E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004132 6B00                       		bmi.s	loc_4022
00004134 11FC 0004 F600             		move.b	#4,($FFFFF600).w
0000413A                            
0000413A                            loc_4022:
0000413A 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004140 7000                       		moveq	#0,d0
00004142 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004146 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0000414C 6600                       		bne.s	loc_4038
0000414E 7006                       		moveq	#6,d0
00004150                            
00004150                            loc_4038:
00004150 E548                       		lsl.w	#2,d0
00004152 2271 0000                  		movea.l	(a1,d0.w),a1
00004156 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000415A 6A00                       		bpl.s	loc_4056
0000415C 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004162 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004166 5340                       		subq.w	#1,d0
00004168 E548                       		lsl.w	#2,d0
0000416A 2271 0000                  		movea.l	(a1,d0.w),a1
0000416E                            
0000416E                            loc_4056:
0000416E 3038 F790                  		move.w	($FFFFF790).w,d0
00004172 D2C0                       		adda.w	d0,a1
00004174 1011                       		move.b	(a1),d0
00004176 41F8 F604                  		lea	($FFFFF604).w,a0
0000417A 1200                       		move.b	d0,d1
0000417C 1428 FFFE                  		move.b	-2(a0),d2
00004180 B500                       		eor.b	d2,d0
00004182 10C1                       		move.b	d1,(a0)+
00004184 C001                       		and.b	d1,d0
00004186 10C0                       		move.b	d0,(a0)+
00004188 5338 F792                  		subq.b	#1,($FFFFF792).w
0000418C 6400                       		bcc.s	locret_407E
0000418E 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004194 5478 F790                  		addq.w	#2,($FFFFF790).w
00004198                            
00004198                            locret_407E:
00004198 4E75                       		rts	
0000419A                            ; End of function MoveSonicInDemo
0000419A                            
0000419A                            ; ===========================================================================
0000419A                            ; ---------------------------------------------------------------------------
0000419A                            ; Demo sequence	pointers
0000419A                            ; ---------------------------------------------------------------------------
0000419A                            Demo_Index:
0000419A                            	include "_inc\Demo pointers for intro.asm"
0000419A                            ; ---------------------------------------------------------------------------
0000419A                            ; Demo sequence	pointers
0000419A                            ; ---------------------------------------------------------------------------
0000419A 0000 0000                  	dc.l Demo_GHZ
0000419E 0000 0000                  	dc.l Demo_GHZ
000041A2 0000 0000                  	dc.l Demo_MZ
000041A6 0000 0000                  	dc.l Demo_MZ
000041AA 0000 0000                  	dc.l Demo_SYZ
000041AE 0000 0000                  	dc.l Demo_SYZ
000041B2 0000 0000                  	dc.l Demo_SS
000041B6 0000 0000                  	dc.l Demo_SS
000041B6 0000 0000                  	dc.l Demo_SS
000041BA                            
000041BA                            Demo_EndIndex:
000041BA                            	include "_inc\Demo pointers for ending.asm"
000041BA                            ; ---------------------------------------------------------------------------
000041BA                            ; Demo (ending) sequence pointers
000041BA                            ; ---------------------------------------------------------------------------
000041BA 0000 0000                  	dc.l Demo_EndGHZ1
000041BE 0000 0000                  	dc.l Demo_EndMZ
000041C2 0000 0000                  	dc.l Demo_EndSYZ
000041C6 0000 0000                  	dc.l Demo_EndLZ
000041CA 0000 0000                  	dc.l Demo_EndSLZ
000041CE 0000 0000                  	dc.l Demo_EndSBZ1
000041D2 0000 0000                  	dc.l Demo_EndSBZ2
000041D6 0000 0000                  	dc.l Demo_EndGHZ2
000041D6 0000 0000                  	dc.l Demo_EndGHZ2
000041DA                            
000041DA 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000041EA 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000041FA 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000420A                            		even
0000420A                            
0000420A                            ; ---------------------------------------------------------------------------
0000420A                            ; Collision index loading subroutine
0000420A                            ; ---------------------------------------------------------------------------
0000420A                            
0000420A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000420A                            
0000420A                            
0000420A                            ColIndexLoad:				; XREF: Level
0000420A 7000                       		moveq	#0,d0
0000420C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004210 E548                       		lsl.w	#2,d0
00004212 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004218 4E75                       		rts	
0000421A                            ; End of function ColIndexLoad
0000421A                            
0000421A                            ; ===========================================================================
0000421A                            ; ---------------------------------------------------------------------------
0000421A                            ; Collision index pointers
0000421A                            ; ---------------------------------------------------------------------------
0000421A                            ColPointers:
0000421A                            	include "_inc\Collision index pointers.asm"
0000421A                            ; ---------------------------------------------------------------------------
0000421A                            ; Collision index pointers
0000421A                            ; ---------------------------------------------------------------------------
0000421A 0000 0000                  	dc.l Col_GHZ
0000421E 0000 0000                  	dc.l Col_LZ
00004222 0000 0000                  	dc.l Col_MZ
00004226 0000 0000                  	dc.l Col_SLZ
0000422A 0000 0000                  	dc.l Col_SYZ
0000422E 0000 0000                  	dc.l Col_SBZ
0000422E 0000 0000                  	dc.l Col_SBZ
00004232                            
00004232                            ; ---------------------------------------------------------------------------
00004232                            ; Oscillating number subroutine
00004232                            ; ---------------------------------------------------------------------------
00004232                            
00004232                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004232                            
00004232                            
00004232                            OscillateNumInit:			; XREF: Level
00004232 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004236 45F9 0000 0000             		lea	(Osc_Data).l,a2
0000423C 7220                       		moveq	#$20,d1
0000423E                            
0000423E                            Osc_Loop:
0000423E 32DA                       		move.w	(a2)+,(a1)+
00004240 51C9 FFFC                  		dbf	d1,Osc_Loop
00004244 4E75                       		rts	
00004246                            ; End of function OscillateNumInit
00004246                            
00004246                            ; ===========================================================================
00004246 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
0000424A 0000 0080                  		dc.w 0,	$80
0000424E 0000 0080                  		dc.w 0,	$80
00004252 0000 0080                  		dc.w 0,	$80
00004256 0000 0080                  		dc.w 0,	$80
0000425A 0000 0080                  		dc.w 0,	$80
0000425E 0000 0080                  		dc.w 0,	$80
00004262 0000 0080                  		dc.w 0,	$80
00004266 0000 0080                  		dc.w 0,	$80
0000426A 0000 50F0                  		dc.w 0,	$50F0
0000426E 011E 2080                  		dc.w $11E, $2080
00004272 00B4 3080                  		dc.w $B4, $3080
00004276 010E 5080                  		dc.w $10E, $5080
0000427A 01C2 7080                  		dc.w $1C2, $7080
0000427E 0276 0080                  		dc.w $276, $80
00004282 0000 0080                  		dc.w 0,	$80
00004286 0000                       		dc.w 0
00004288                            		even
00004288                            
00004288                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004288                            
00004288                            
00004288                            OscillateNumDo:				; XREF: Level
00004288 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000428E 6400                       		bcc.s	locret_41C4
00004290 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004294 45F9 0000 0000             		lea	(Osc_Data2).l,a2
0000429A 3619                       		move.w	(a1)+,d3
0000429C 720F                       		moveq	#$F,d1
0000429E                            
0000429E                            loc_4184:
0000429E 341A                       		move.w	(a2)+,d2
000042A0 381A                       		move.w	(a2)+,d4
000042A2 0303                       		btst	d1,d3
000042A4 6600                       		bne.s	loc_41A4
000042A6 3029 0002                  		move.w	2(a1),d0
000042AA D042                       		add.w	d2,d0
000042AC 3340 0002                  		move.w	d0,2(a1)
000042B0 D151                       		add.w	d0,0(a1)
000042B2 B811                       		cmp.b	0(a1),d4
000042B4 6200                       		bhi.s	loc_41BA
000042B6 03C3                       		bset	d1,d3
000042B8 6000                       		bra.s	loc_41BA
000042BA                            ; ===========================================================================
000042BA                            
000042BA                            loc_41A4:				; XREF: OscillateNumDo
000042BA 3029 0002                  		move.w	2(a1),d0
000042BE 9042                       		sub.w	d2,d0
000042C0 3340 0002                  		move.w	d0,2(a1)
000042C4 D151                       		add.w	d0,0(a1)
000042C6 B811                       		cmp.b	0(a1),d4
000042C8 6300                       		bls.s	loc_41BA
000042CA 0383                       		bclr	d1,d3
000042CC                            
000042CC                            loc_41BA:
000042CC 5849                       		addq.w	#4,a1
000042CE 51C9 FFCE                  		dbf	d1,loc_4184
000042D2 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
000042D6                            
000042D6                            locret_41C4:
000042D6 4E75                       		rts	
000042D8                            ; End of function OscillateNumDo
000042D8                            
000042D8                            ; ===========================================================================
000042D8 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
000042DC 0002 0018                  		dc.w 2,	$18
000042E0 0002 0020                  		dc.w 2,	$20
000042E4 0002 0030                  		dc.w 2,	$30
000042E8 0004 0020                  		dc.w 4,	$20
000042EC 0008 0008                  		dc.w 8,	8
000042F0 0008 0040                  		dc.w 8,	$40
000042F4 0004 0040                  		dc.w 4,	$40
000042F8 0002 0050                  		dc.w 2,	$50
000042FC 0002 0050                  		dc.w 2,	$50
00004300 0002 0020                  		dc.w 2,	$20
00004304 0003 0030                  		dc.w 3,	$30
00004308 0005 0050                  		dc.w 5,	$50
0000430C 0007 0070                  		dc.w 7,	$70
00004310 0002 0010                  		dc.w 2,	$10
00004314 0002 0010                  		dc.w 2,	$10
00004318                            		even
00004318                            
00004318                            ; ---------------------------------------------------------------------------
00004318                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004318                            ; ---------------------------------------------------------------------------
00004318                            
00004318                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004318                            
00004318                            
00004318                            ChangeRingFrame:			; XREF: Level
00004318 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0000431C 6A00                       		bpl.s	loc_421C
0000431E 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004324 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004328 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0000432E                            
0000432E                            loc_421C:
0000432E 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004332 6A00                       		bpl.s	loc_4232
00004334 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0000433A 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0000433E 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004344                            
00004344                            loc_4232:
00004344 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004348 6A00                       		bpl.s	loc_4250
0000434A 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004350 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004354 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
0000435A 6500                       		bcs.s	loc_4250
0000435C 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004362                            
00004362                            loc_4250:
00004362 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004366 6700                       		beq.s	locret_4272
00004368 7000                       		moveq	#0,d0
0000436A 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
0000436E D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004372 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004376 EF58                       		rol.w	#7,d0
00004378 0240 0003                  		andi.w	#3,d0
0000437C 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004380 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004384                            
00004384                            locret_4272:
00004384 4E75                       		rts	
00004386                            ; End of function ChangeRingFrame
00004386                            
00004386                            ; ---------------------------------------------------------------------------
00004386                            ; End-of-act signpost pattern loading subroutine
00004386                            ; ---------------------------------------------------------------------------
00004386                            
00004386                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004386                            
00004386                            
00004386                            SignpostArtLoad:			; XREF: Level
00004386 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0000438A 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
0000438E 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004394 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004396 3038 F700                  		move.w	($FFFFF700).w,d0
0000439A 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000439E 0441 0100                  		subi.w	#$100,d1
000043A2 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000043A4 6D00                       		blt.s	Signpost_Exit	; if not, branch
000043A6 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000043AA 6700                       		beq.s	Signpost_Exit
000043AC B278 F728                  		cmp.w	($FFFFF728).w,d1
000043B0 6700                       		beq.s	Signpost_Exit
000043B2 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000043B6 7012                       		moveq	#$12,d0
000043B8 6000 D0AC                  		bra.w	LoadPLC2	; load signpost	patterns
000043BC                            ; ===========================================================================
000043BC                            
000043BC                            Signpost_Exit:
000043BC 4E75                       		rts	
000043BE                            ; End of function SignpostArtLoad
000043BE                            
000043BE                            ; ===========================================================================
000043BE                            Demo_GHZ:	incbin	demodata\i_ghz.bin
0000443E                            Demo_MZ:	incbin	demodata\i_mz.bin
0000456E                            Demo_SYZ:	incbin	demodata\i_syz.bin
000045EE                            Demo_SS:	incbin	demodata\i_ss.bin
000046EE                            ; ===========================================================================
000046EE                            
000046EE                            ; ---------------------------------------------------------------------------
000046EE                            ; Special Stage
000046EE                            ; ---------------------------------------------------------------------------
000046EE                            
000046EE                            SpecialStage:				; XREF: GameModeArray
000046EE 303C 00CA                  		move.w	#$CA,d0
000046F2 6100 CB02                  		bsr.w	PlaySound_Special ; play special stage entry sound
000046F6 4EB9 0000 0000             		jsr	BuildSprites
000046FC 6100 D868                  		bsr.w	Pal_MakeFlash
00004700 46FC 2700                  		move	#$2700,sr
00004704 4DF9 00C0 0004             		lea	($C00004).l,a6
0000470A 3CBC 8B03                  		move.w	#$8B03,(a6)
0000470E 3CBC 8004                  		move.w	#$8004,(a6)
00004712 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004718 3CBC 9011                  		move.w	#$9011,(a6)
0000471C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004720 0200 00BF                  		andi.b	#$BF,d0
00004724 33C0 00C0 0004             		move.w	d0,($C00004).l
0000472A 6100 C9A4                  		bsr.w	ClearScreen
0000472E 46FC 2300                  		move	#$2300,sr
00004732 4BF9 00C0 0004             		lea	($C00004).l,a5
00004738 3ABC 8F01                  		move.w	#$8F01,(a5)
0000473C 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004742 3ABC 9780                  		move.w	#$9780,(a5)
00004746 2ABC 5000 0081             		move.l	#$50000081,(a5)
0000474C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004754                            
00004754                            loc_463C:
00004754 3215                       		move.w	(a5),d1
00004756 0801 0001                  		btst	#1,d1
0000475A 66F8                       		bne.s	loc_463C
0000475C 3ABC 8F02                  		move.w	#$8F02,(a5)
00004760 6100 0000                  		bsr.w	SS_BGLoad
00004764 7014                       		moveq	#$14,d0
00004766 6100 CE38                  		bsr.w	RunPLC_ROM	; load special stage patterns
0000476A                            
0000476A 43F8 D000                  		lea	($FFFFD000).w,a1
0000476E 7000                       		moveq	#0,d0
00004770 323C 07FF                  		move.w	#$7FF,d1
00004774                            
00004774                            SS_ClrObjRam:
00004774 22C0                       		move.l	d0,(a1)+
00004776 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
0000477A                            
0000477A 43F8 F700                  		lea	($FFFFF700).w,a1
0000477E 7000                       		moveq	#0,d0
00004780 323C 003F                  		move.w	#$3F,d1
00004784                            
00004784                            SS_ClrRam:
00004784 22C0                       		move.l	d0,(a1)+
00004786 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
0000478A                            
0000478A 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000478E 7000                       		moveq	#0,d0
00004790 323C 0027                  		move.w	#$27,d1
00004794                            
00004794                            SS_ClrRam2:
00004794 22C0                       		move.l	d0,(a1)+
00004796 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
0000479A                            
0000479A 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000479E 7000                       		moveq	#0,d0
000047A0 323C 007F                  		move.w	#$7F,d1
000047A4                            
000047A4                            SS_ClrNemRam:
000047A4 22C0                       		move.l	d0,(a1)+
000047A6 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000047AA 4238 F64E                  		clr.b	($FFFFF64E).w
000047AE 4278 FE02                  		clr.w	($FFFFFE02).w
000047B2 700A                       		moveq	#$A,d0
000047B4 6100 D930                  		bsr.w	PalLoad1	; load special stage pallet
000047B8 4EB9 0000 0000             		jsr	SS_Load
000047BE 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
000047C4 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000047CC 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000047D4 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
000047DA 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w
000047E0 6100 0000                  		bsr.w	PalCycle_SS
000047E4 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
000047E8 11FC 00FF FFF9             		move.b	#$FF,(v_ssangleprev).w	; fill previous angle with obviously false value to force an update
000047EE 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
000047F4 303C 0089                  		move.w	#$89,d0
000047F8 6100 C9F6                  		bsr.w	PlaySound	; play special stage BG	music
000047FC 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004802 43F9 0000 419A             		lea	(Demo_Index).l,a1
00004808 7006                       		moveq	#6,d0
0000480A E548                       		lsl.w	#2,d0
0000480C 2271 0000                  		movea.l	(a1,d0.w),a1
00004810 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004816 5338 F792                  		subq.b	#1,($FFFFF792).w
0000481A 4278 FE20                  		clr.w	($FFFFFE20).w
0000481E 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004822 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004828 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000482E 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004832 6700                       		beq.s	SS_NoDebug	; if not, branch
00004834 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
0000483A 6700                       		beq.s	SS_NoDebug	; if not, branch
0000483C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004842                            
00004842                            SS_NoDebug:
00004842 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004846 0000 0040                  		ori.b	#$40,d0
0000484A 33C0 00C0 0004             		move.w	d0,($C00004).l
00004850 6100 D68C                  		bsr.w	Pal_MakeWhite
00004854                            
00004854                            ; ---------------------------------------------------------------------------
00004854                            ; Main Special Stage loop
00004854                            ; ---------------------------------------------------------------------------
00004854                            
00004854                            SS_MainLoop:
00004854 6100 C9AC                  		bsr.w	PauseGame
00004858 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
0000485E 6100 E13A                  		bsr.w	DelayProgram
00004862 6100 F884                  		bsr.w	MoveSonicInDemo
00004866 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
0000486C 4EB9 0000 0000             		jsr	ObjectsLoad
00004872 4EB9 0000 0000             		jsr	BuildSprites
00004878 4EB9 0000 0000             		jsr	SS_ShowLayout
0000487E 6100 0000                  		bsr.w	SS_BGAnimate
00004882 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004886 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004888 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
0000488C 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004890                            
00004890                            SS_ChkEnd:
00004890 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004896 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
0000489A                            
0000489A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000489E 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
000048A2 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000048A8 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
000048AE 6500                       		bcs.s	SS_End		; if not, branch
000048B0 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
000048B4                            
000048B4                            SS_End:
000048B4 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
000048BA 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000048C0 4278 F794                  		clr.w	($FFFFF794).w
000048C4                            
000048C4                            SS_EndLoop:
000048C4 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000048CA 6100 E0CE                  		bsr.w	DelayProgram
000048CE 6100 F818                  		bsr.w	MoveSonicInDemo
000048D2 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000048D8 4EB9 0000 0000             		jsr	ObjectsLoad
000048DE 4EB9 0000 0000             		jsr	BuildSprites
000048E4 4EB9 0000 0000             		jsr	SS_ShowLayout
000048EA 6100 0000                  		bsr.w	SS_BGAnimate
000048EE 5378 F794                  		subq.w	#1,($FFFFF794).w
000048F2 6A00                       		bpl.s	loc_47D4
000048F4 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000048FA 6100 D68A                  		bsr.w	Pal_ToWhite
000048FE                            
000048FE                            loc_47D4:
000048FE 4A78 F614                  		tst.w	($FFFFF614).w
00004902 66C0                       		bne.s	SS_EndLoop
00004904                            
00004904 46FC 2700                  		move	#$2700,sr
00004908 4DF9 00C0 0004             		lea	($C00004).l,a6
0000490E 3CBC 8230                  		move.w	#$8230,(a6)
00004912 3CBC 8407                  		move.w	#$8407,(a6)
00004916 3CBC 9001                  		move.w	#$9001,(a6)
0000491A 6100 C7B4                  		bsr.w	ClearScreen
0000491E 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
00004928 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
0000492E 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
00004934 4EB8 1410                          jsr LoadUncArt          ; load uncompressed art
00004938 4EB9 0000 0000             		jsr	Hud_Base
0000493E 46FC 2300                  		move	#$2300,sr
00004942 7011                       		moveq	#$11,d0
00004944 6100 D7BC                  		bsr.w	PalLoad2	; load results screen pallet
00004948 7000                       		moveq	#0,d0
0000494A 6100 CB1A                  		bsr.w	LoadPLC2
0000494E 701B                       		moveq	#$1B,d0
00004950 6100 CAE2                  		bsr.w	LoadPLC		; load results screen patterns
00004954 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
0000495A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004960 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004964 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004968 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
0000496C 303C 008E                  		move.w	#$8E,d0
00004970 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004976 43F8 D000                  		lea	($FFFFD000).w,a1
0000497A 7000                       		moveq	#0,d0
0000497C 323C 07FF                  		move.w	#$7FF,d1
00004980                            
00004980                            SS_EndClrObjRam:
00004980 22C0                       		move.l	d0,(a1)+
00004982 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004986                            
00004986 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
0000498C                            
0000498C                            SS_NormalExit:
0000498C 6100 C874                  		bsr.w	PauseGame
00004990 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004996 6100 E002                  		bsr.w	DelayProgram
0000499A 4EB9 0000 0000             		jsr	ObjectsLoad
000049A0 4EB9 0000 0000             		jsr	BuildSprites
000049A6 6100 CAF8                  		bsr.w	RunPLC_RAM
000049AA 4A78 FE02                  		tst.w	($FFFFFE02).w
000049AE 67DC                       		beq.s	SS_NormalExit
000049B0 4AB8 F680                  		tst.l	($FFFFF680).w
000049B4 66D6                       		bne.s	SS_NormalExit
000049B6 303C 00CA                  		move.w	#$CA,d0
000049BA 6100 C83A                  		bsr.w	PlaySound_Special ; play special stage exit sound
000049BE 6100 D5A6                  		bsr.w	Pal_MakeFlash
000049C2 4E75                       		rts	
000049C4                            ; ===========================================================================
000049C4                            
000049C4                            SS_ToSegaScreen:
000049C4 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set screen mode to 00 (Sega screen)
000049CA 4E75                       		rts
000049CC                            
000049CC                            ; ---------------------------------------------------------------------------
000049CC                            ; Special stage	background loading subroutine
000049CC                            ; ---------------------------------------------------------------------------
000049CC                            
000049CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000049CC                            
000049CC                            
000049CC                            SS_BGLoad:				; XREF: SpecialStage
000049CC 43F9 00FF 0000             		lea	($FF0000).l,a1
000049D2 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000049D8 303C 4051                  		move.w	#$4051,d0
000049DC 6100 CBF4                  		bsr.w	EniDec
000049E0 263C 5000 0001             		move.l	#$50000001,d3
000049E6 45F9 00FF 0080             		lea	($FF0080).l,a2
000049EC 7E06                       		moveq	#6,d7
000049EE                            
000049EE                            loc_48BE:
000049EE 2003                       		move.l	d3,d0
000049F0 7C03                       		moveq	#3,d6
000049F2 7800                       		moveq	#0,d4
000049F4 0C47 0003                  		cmpi.w	#3,d7
000049F8 6400                       		bcc.s	loc_48CC
000049FA 7801                       		moveq	#1,d4
000049FC                            
000049FC                            loc_48CC:
000049FC 7A07                       		moveq	#7,d5
000049FE                            
000049FE                            loc_48CE:
000049FE 224A                       		movea.l	a2,a1
00004A00 0A04 0001                  		eori.b	#1,d4
00004A04 6600                       		bne.s	loc_48E2
00004A06 0C47 0006                  		cmpi.w	#6,d7
00004A0A 6600                       		bne.s	loc_48F2
00004A0C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004A12                            
00004A12                            loc_48E2:
00004A12 48E7 F800                  		movem.l	d0-d4,-(sp)
00004A16 7207                       		moveq	#7,d1
00004A18 7407                       		moveq	#7,d2
00004A1A 6100 C8A2                  		bsr.w	ShowVDPGraphics
00004A1E 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004A22                            
00004A22                            loc_48F2:
00004A22 0680 0010 0000             		addi.l	#$100000,d0
00004A28 51CD FFD4                  		dbf	d5,loc_48CE
00004A2C 0680 0380 0000             		addi.l	#$3800000,d0
00004A32 0A04 0001                  		eori.b	#1,d4
00004A36 51CE FFC4                  		dbf	d6,loc_48CC
00004A3A 0683 1000 0000             		addi.l	#$10000000,d3
00004A40 6A00                       		bpl.s	loc_491C
00004A42 4843                       		swap	d3
00004A44 0683 0000 C000             		addi.l	#$C000,d3
00004A4A 4843                       		swap	d3
00004A4C                            
00004A4C                            loc_491C:
00004A4C D4FC 0080                  		adda.w	#$80,a2
00004A50 51CF FF9C                  		dbf	d7,loc_48BE
00004A54 43F9 00FF 0000             		lea	($FF0000).l,a1
00004A5A 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004A60 303C 4000                  		move.w	#$4000,d0
00004A64 6100 CB6C                  		bsr.w	EniDec
00004A68 43F9 00FF 0000             		lea	($FF0000).l,a1
00004A6E 203C 4000 0003             		move.l	#$40000003,d0
00004A74 723F                       		moveq	#$3F,d1
00004A76 741F                       		moveq	#$1F,d2
00004A78 6100 C844                  		bsr.w	ShowVDPGraphics
00004A7C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004A82 203C 5000 0003             		move.l	#$50000003,d0
00004A88 723F                       		moveq	#$3F,d1
00004A8A 743F                       		moveq	#$3F,d2
00004A8C 6100 C830                  		bsr.w	ShowVDPGraphics
00004A90 4E75                       		rts	
00004A92                            ; End of function SS_BGLoad
00004A92                            
00004A92                            ; ---------------------------------------------------------------------------
00004A92                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
00004A92                            ; to be issued the next time ProcessDMAQueue is called.
00004A92                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
00004A92                            ; by issuing the commands (this subroutine DOES check for overflow)
00004A92                            ; ---------------------------------------------------------------------------
00004A92                            ; In case you wish to use this queue system outside of the spin dash, this is the
00004A92                            ; registers in which it expects data in:
00004A92                            ; d1.l: Address to data (In 68k address space)
00004A92                            ; d2.w: Destination in VRAM
00004A92                            ; d3.w: Length of data
00004A92                            ; ---------------------------------------------------------------------------
00004A92                            
00004A92                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00004A92                            
00004A92                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
00004A92                            QueueDMATransfer:
00004A92 2278 C8FC                  		movea.l ($FFFFC8FC).w,a1
00004A96 B2FC C8FC                  		cmpa.w #$C8FC,a1
00004A9A 6700                       		beq.s QueueDMATransfer_Done ; return if there's no more room in the buffer
00004A9C                            
00004A9C                            ; piece together some VDP commands and store them for later...
00004A9C 303C 9300                  		move.w #$9300,d0 ; command to specify DMA transfer length & $00FF
00004AA0 1003                       		move.b d3,d0
00004AA2 32C0                       		move.w d0,(a1)+ ; store command
00004AA4                            
00004AA4 303C 9400                  		move.w #$9400,d0 ; command to specify DMA transfer length & $FF00
00004AA8 E04B                       		lsr.w #8,d3
00004AAA 1003                       		move.b d3,d0
00004AAC 32C0                       		move.w d0,(a1)+ ; store command
00004AAE                            
00004AAE 303C 9500                  		move.w #$9500,d0 ; command to specify source address & $0001FE
00004AB2 E289                       		lsr.l #1,d1
00004AB4 1001                       		move.b d1,d0
00004AB6 32C0                       		move.w d0,(a1)+ ; store command
00004AB8                            
00004AB8 303C 9600                  		move.w #$9600,d0 ; command to specify source address & $01FE00
00004ABC E089                       		lsr.l #8,d1
00004ABE 1001                       		move.b d1,d0
00004AC0 32C0                       		move.w d0,(a1)+ ; store command
00004AC2                            
00004AC2 303C 9700                  		move.w #$9700,d0 ; command to specify source address & $FE0000
00004AC6 E089                       		lsr.l #8,d1
00004AC8 1001                       		move.b d1,d0
00004ACA 32C0                       		move.w d0,(a1)+ ; store command
00004ACC                            
00004ACC 0282 0000 FFFF             		andi.l #$FFFF,d2 ; command to specify destination address and begin DMA
00004AD2 E58A                       		lsl.l #2,d2
00004AD4 E44A                       		lsr.w #2,d2
00004AD6 4842                       		swap d2
00004AD8 0082 4000 0080             		ori.l #$40000080,d2 ; set bits to specify VRAM transfer
00004ADE 22C2                       		move.l d2,(a1)+ ; store command
00004AE0                            
00004AE0 21C9 C8FC                  		move.l a1,($FFFFC8FC).w ; set the next free slot address
00004AE4 B2FC C8FC                  		cmpa.w #$C8FC,a1
00004AE8 6700                       		beq.s QueueDMATransfer_Done ; return if there's no more room in the buffer
00004AEA 32BC 0000                  		move.w #0,(a1) ; put a stop token at the end of the used part of the buffer
00004AEE                            ; return_14AA:
00004AEE                            QueueDMATransfer_Done:
00004AEE 4E75                       		rts
00004AF0                            ; End of function QueueDMATransfer
00004AF0                            
00004AF0                            ; ---------------------------------------------------------------------------
00004AF0                            ; Subroutine for issuing all VDP commands that were queued
00004AF0                            ; (by earlier calls to QueueDMATransfer)
00004AF0                            ; Resets the queue when it's done
00004AF0                            ; ---------------------------------------------------------------------------
00004AF0                            
00004AF0                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00004AF0                            
00004AF0                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
00004AF0                            ProcessDMAQueue:
00004AF0 4BF9 00C0 0004             		lea ($C00004).l,a5
00004AF6 43F8 C800                  		lea ($FFFFC800).w,a1
00004AFA                            ; loc_14B6:
00004AFA                            ProcessDMAQueue_Loop:
00004AFA 3019                       		move.w (a1)+,d0
00004AFC 6700                       		beq.s ProcessDMAQueue_Done ; branch if we reached a stop token
00004AFE                            		; issue a set of VDP commands...
00004AFE 3A80                       		move.w d0,(a5) ; transfer length
00004B00 3A99                       		move.w (a1)+,(a5) ; transfer length
00004B02 3A99                       		move.w (a1)+,(a5) ; source address
00004B04 3A99                       		move.w (a1)+,(a5) ; source address
00004B06 3A99                       		move.w (a1)+,(a5) ; source address
00004B08 3A99                       		move.w (a1)+,(a5) ; destination
00004B0A 3A99                       		move.w (a1)+,(a5) ; destination
00004B0C B2FC C8FC                  		cmpa.w #$C8FC,a1
00004B10 66E8                       		bne.s ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
00004B12                            ; loc_14CE:
00004B12                            ProcessDMAQueue_Done:
00004B12 31FC 0000 C800             		move.w #0,($FFFFC800).w
00004B18 21FC FFFF C800 C8FC        		move.l #$FFFFC800,($FFFFC8FC).w
00004B20 4E75                       		rts
00004B22                            ; End of function ProcessDMAQueue
00004B22                            
00004B22                            ; ---------------------------------------------------------------------------
00004B22                            ; Pallet cycling routine - special stage
00004B22                            ; ---------------------------------------------------------------------------
00004B22                            
00004B22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B22                            
00004B22                            
00004B22                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004B22 4A78 F63A                  		tst.w	($FFFFF63A).w
00004B26 6600                       		bne.s	locret_49E6
00004B28 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004B2C 6A00                       		bpl.s	locret_49E6
00004B2E 4DF9 00C0 0004             		lea	($C00004).l,a6
00004B34 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004B38 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004B3C 0240 001F                  		andi.w	#$1F,d0
00004B40 E548                       		lsl.w	#2,d0
00004B42 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004B48 D0C0                       		adda.w	d0,a0
00004B4A 1018                       		move.b	(a0)+,d0
00004B4C 6A00                       		bpl.s	loc_4992
00004B4E 303C 01FF                  		move.w	#$1FF,d0
00004B52                            
00004B52                            loc_4992:
00004B52 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004B56 7000                       		moveq	#0,d0
00004B58 1018                       		move.b	(a0)+,d0
00004B5A 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004B5E 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004B64 43F1 0000                  		lea	(a1,d0.w),a1
00004B68 303C 8200                  		move.w	#-$7E00,d0
00004B6C 1019                       		move.b	(a1)+,d0
00004B6E 3C80                       		move.w	d0,(a6)
00004B70 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004B74 303C 8400                  		move.w	#-$7C00,d0
00004B78 1018                       		move.b	(a0)+,d0
00004B7A 3C80                       		move.w	d0,(a6)
00004B7C 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004B86 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004B8E 7000                       		moveq	#0,d0
00004B90 1018                       		move.b	(a0)+,d0
00004B92 6B00                       		bmi.s	loc_49E8
00004B94 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004B9A D2C0                       		adda.w	d0,a1
00004B9C 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004BA0 24D9                       		move.l	(a1)+,(a2)+
00004BA2 24D9                       		move.l	(a1)+,(a2)+
00004BA4 24D9                       		move.l	(a1)+,(a2)+
00004BA6                            
00004BA6                            locret_49E6:
00004BA6 4E75                       		rts	
00004BA8                            ; ===========================================================================
00004BA8                            
00004BA8                            loc_49E8:				; XREF: PalCycle_SS
00004BA8 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004BAC 0C40 008A                  		cmpi.w	#$8A,d0
00004BB0 6500                       		bcs.s	loc_49F4
00004BB2 5241                       		addq.w	#1,d1
00004BB4                            
00004BB4                            loc_49F4:
00004BB4 C2FC 002A                  		mulu.w	#$2A,d1
00004BB8 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004BBE D2C1                       		adda.w	d1,a1
00004BC0 0240 007F                  		andi.w	#$7F,d0
00004BC4 0880 0000                  		bclr	#0,d0
00004BC8 6700                       		beq.s	loc_4A18
00004BCA 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004BCE 24D1                       		move.l	(a1),(a2)+
00004BD0 24E9 0004                  		move.l	4(a1),(a2)+
00004BD4 24E9 0008                  		move.l	8(a1),(a2)+
00004BD8                            
00004BD8                            loc_4A18:
00004BD8 D2FC 000C                  		adda.w	#$C,a1
00004BDC 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004BE0 0C40 000A                  		cmpi.w	#$A,d0
00004BE4 6500                       		bcs.s	loc_4A2E
00004BE6 0440 000A                  		subi.w	#$A,d0
00004BEA 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004BEE                            
00004BEE                            loc_4A2E:
00004BEE 3200                       		move.w	d0,d1
00004BF0 D040                       		add.w	d0,d0
00004BF2 D041                       		add.w	d1,d0
00004BF4 D2C0                       		adda.w	d0,a1
00004BF6 24D9                       		move.l	(a1)+,(a2)+
00004BF8 34D9                       		move.w	(a1)+,(a2)+
00004BFA 4E75                       		rts	
00004BFC                            ; End of function PalCycle_SS
00004BFC                            
00004BFC                            ; ===========================================================================
00004BFC 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004C0C                            					; XREF: PalCycle_SS
00004C0C 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004C1C 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004C2C FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004C3C 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004C4C 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004C5C 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004C6C FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004C7C                            		even
00004C7C 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004C8A                            					; XREF: PalCycle_SS
00004C8A                            		even
00004C8A                            
00004C8A                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004CD2                            		even
00004CD2                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004DA4                            		even
00004DA4                            
00004DA4                            ; ---------------------------------------------------------------------------
00004DA4                            ; Subroutine to	make the special stage background animated
00004DA4                            ; ---------------------------------------------------------------------------
00004DA4                            
00004DA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004DA4                            
00004DA4                            
00004DA4                            SS_BGAnimate:				; XREF: SpecialStage
00004DA4 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004DA8 6600                       		bne.s	loc_4BF6
00004DAA 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004DB0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004DB6                            
00004DB6                            loc_4BF6:
00004DB6 0C40 0008                  		cmpi.w	#8,d0
00004DBA 6400                       		bcc.s	loc_4C4E
00004DBC 0C40 0006                  		cmpi.w	#6,d0
00004DC0 6600                       		bne.s	loc_4C10
00004DC2 5278 F718                  		addq.w	#1,($FFFFF718).w
00004DC6 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004DCA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004DD0                            
00004DD0                            loc_4C10:
00004DD0 7000                       		moveq	#0,d0
00004DD2 3038 F708                  		move.w	($FFFFF708).w,d0
00004DD6 4440                       		neg.w	d0
00004DD8 4840                       		swap	d0
00004DDA 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004DE0 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004DE4 7609                       		moveq	#9,d3
00004DE6                            
00004DE6                            loc_4C26:
00004DE6 302B 0002                  		move.w	2(a3),d0
00004DEA 6100 DBE0                  		bsr.w	CalcSine
00004DEE 7400                       		moveq	#0,d2
00004DF0 1419                       		move.b	(a1)+,d2
00004DF2 C1C2                       		muls.w	d2,d0
00004DF4 E080                       		asr.l	#8,d0
00004DF6 36C0                       		move.w	d0,(a3)+
00004DF8 1419                       		move.b	(a1)+,d2
00004DFA 4882                       		ext.w	d2
00004DFC D55B                       		add.w	d2,(a3)+
00004DFE 51CB FFE6                  		dbf	d3,loc_4C26
00004E02 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004E06 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004E0C 6000                       		bra.s	loc_4C7E
00004E0E                            ; ===========================================================================
00004E0E                            
00004E0E                            loc_4C4E:				; XREF: SS_BGAnimate
00004E0E 0C40 000C                  		cmpi.w	#$C,d0
00004E12 6600                       		bne.s	loc_4C74
00004E14 5378 F718                  		subq.w	#1,($FFFFF718).w
00004E18 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004E1C 243C 0001 8000             		move.l	#$18000,d2
00004E22 7206                       		moveq	#6,d1
00004E24                            
00004E24                            loc_4C64:
00004E24 2013                       		move.l	(a3),d0
00004E26 9082                       		sub.l	d2,d0
00004E28 26C0                       		move.l	d0,(a3)+
00004E2A 0482 0000 2000             		subi.l	#$2000,d2
00004E30 51C9 FFF2                  		dbf	d1,loc_4C64
00004E34                            
00004E34                            loc_4C74:
00004E34 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004E38 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004E3E                            
00004E3E                            loc_4C7E:
00004E3E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004E42 3038 F718                  		move.w	($FFFFF718).w,d0
00004E46 4440                       		neg.w	d0
00004E48 4840                       		swap	d0
00004E4A 7600                       		moveq	#0,d3
00004E4C 161A                       		move.b	(a2)+,d3
00004E4E 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004E52 4442                       		neg.w	d2
00004E54 0242 00FF                  		andi.w	#$FF,d2
00004E58 E54A                       		lsl.w	#2,d2
00004E5A                            
00004E5A                            loc_4C9A:
00004E5A 301B                       		move.w	(a3)+,d0
00004E5C 544B                       		addq.w	#2,a3
00004E5E 7200                       		moveq	#0,d1
00004E60 121A                       		move.b	(a2)+,d1
00004E62 5341                       		subq.w	#1,d1
00004E64                            
00004E64                            loc_4CA4:
00004E64 2380 2000                  		move.l	d0,(a1,d2.w)
00004E68 5842                       		addq.w	#4,d2
00004E6A 0242 03FC                  		andi.w	#$3FC,d2
00004E6E 51C9 FFF4                  		dbf	d1,loc_4CA4
00004E72 51CB FFE6                  		dbf	d3,loc_4C9A
00004E76 4E75                       		rts	
00004E78                            ; End of function SS_BGAnimate
00004E78                            
00004E78                            ; ===========================================================================
00004E78 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00004E84                            		even
00004E84 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00004E8C                            		even
00004E8C 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00004EA0                            		even
00004EA0                            					; XREF: SS_BGAnimate
00004EA0                            ; ===========================================================================
00004EA0                            
00004EA0                            ; ---------------------------------------------------------------------------
00004EA0                            ; Continue screen
00004EA0                            ; ---------------------------------------------------------------------------
00004EA0                            
00004EA0                            ContinueScreen:				; XREF: GameModeArray
00004EA0 6100 CFBE                  		bsr.w	Pal_FadeFrom
00004EA4 46FC 2700                  		move	#$2700,sr
00004EA8 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004EAC 0200 00BF                  		andi.b	#$BF,d0
00004EB0 33C0 00C0 0004             		move.w	d0,($C00004).l
00004EB6 4DF9 00C0 0004             		lea	($C00004).l,a6
00004EBC 3CBC 8004                  		move.w	#$8004,(a6)
00004EC0 3CBC 8700                  		move.w	#$8700,(a6)
00004EC4 6100 C20A                  		bsr.w	ClearScreen
00004EC8 43F8 D000                  		lea	($FFFFD000).w,a1
00004ECC 7000                       		moveq	#0,d0
00004ECE 323C 07FF                  		move.w	#$7FF,d1
00004ED2                            
00004ED2                            Cont_ClrObjRam:
00004ED2 22C0                       		move.l	d0,(a1)+
00004ED4 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00004ED8                            
00004ED8 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
00004EE2 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
00004EE8 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
00004EEE 4EB8 1410                          jsr LoadUncArt          ; load uncompressed art
00004EF2 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00004EFC 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00004F02 6100 C3E4                  		bsr.w	NemDec
00004F06 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00004F10 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00004F16 6100 C3D0                  		bsr.w	NemDec
00004F1A 720A                       		moveq	#10,d1
00004F1C 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00004F22 7012                       		moveq	#$12,d0
00004F24 6100 D1C0                  		bsr.w	PalLoad1	; load continue	screen pallet
00004F28 103C 0090                  		move.b	#$90,d0
00004F2C 6100 C2C2                  		bsr.w	PlaySound	; play continue	music
00004F30 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00004F36 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
00004F3C 42B8 F700                  		clr.l	($FFFFF700).w
00004F40 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00004F48 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00004F4E 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00004F54 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00004F5A 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00004F60 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00004F66 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00004F6C 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00004F72 11FC 0000 FFD0             		move.b    #0,($FFFFFFD0).w
00004F78 4EB9 0000 0000             		jsr	ObjectsLoad
00004F7E 4EB9 0000 0000             		jsr	BuildSprites
00004F84 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004F88 0000 0040                  		ori.b	#$40,d0
00004F8C 33C0 00C0 0004             		move.w	d0,($C00004).l
00004F92 6100 CE4A                  		bsr.w	Pal_FadeTo
00004F96                            
00004F96                            ; ---------------------------------------------------------------------------
00004F96                            ; Continue screen main loop
00004F96                            ; ---------------------------------------------------------------------------
00004F96                            
00004F96                            Cont_MainLoop:
00004F96 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004F9C 6100 D9FC                  		bsr.w	DelayProgram
00004FA0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004FA6 6400                       		bcc.s	loc_4DF2
00004FA8 46FC 2700                  		move	#$2700,sr
00004FAC 3238 F614                  		move.w	($FFFFF614).w,d1
00004FB0 82FC 003C                  		divu.w	#$3C,d1
00004FB4 0281 0000 000F             		andi.l	#$F,d1
00004FBA 4EB9 0000 0000             		jsr	ContScrCounter
00004FC0 46FC 2300                  		move	#$2300,sr
00004FC4                            
00004FC4                            loc_4DF2:
00004FC4 4EB9 0000 0000             		jsr	ObjectsLoad
00004FCA 4EB9 0000 0000             		jsr	BuildSprites
00004FD0 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00004FD6 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00004FD8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004FDE 64B6                       		bcc.s	Cont_MainLoop
00004FE0 0C78 0100 F614             		cmpi.w	#$100,($FFFFF614).w
00004FE6 6E00 FFAE                  		bgt.w	Cont_MainLoop
00004FEA 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00004FF0 0C78 0040 F614             		cmpi.w	#$40,($FFFFF614).w
00004FF6 6E00 FF9E                  		bgt.w	Cont_MainLoop
00004FFA 11FC 0009 F5CE             		move.b	#face_meltdown,(SonimeSST+sonime_face).w
00005000 4A78 F614                  		tst.w	($FFFFF614).w
00005004 6600 FF90                  		bne.w	Cont_MainLoop
00005008 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
0000500E 4E75                       		rts	
00005010                            ; ===========================================================================
00005010                            
00005010                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005010 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005016 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000501C 7000                       		moveq	#0,d0
0000501E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005022 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005026 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000502A 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
0000502E 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005032 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)			
0000503A 4E75                       		rts	
0000503C                            ; ===========================================================================
0000503C                            
0000503C                            ; ---------------------------------------------------------------------------
0000503C                            ; Object 80 - Continue screen elements
0000503C                            ; ---------------------------------------------------------------------------
0000503C                            
0000503C                            Obj80:					; XREF: Obj_Index
0000503C 7000                       		moveq	#0,d0
0000503E 1028 0024                  		move.b	$24(a0),d0
00005042 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005046 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
0000504A                            ; ===========================================================================
0000504A 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
0000504C 0000                       		dc.w Obj80_Display-Obj80_Index
0000504E 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005050 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005052                            ; ===========================================================================
00005052                            
00005052                            Obj80_Main:				; XREF: Obj80_Index
00005052 5428 0024                  		addq.b	#2,$24(a0)
00005056 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
0000505E 317C 8500 0002             		move.w	#$8500,2(a0)
00005064 117C 0000 0001             		move.b	#0,1(a0)
0000506A 117C 003C 0019             		move.b	#$3C,$19(a0)
00005070 317C 0120 0008             		move.w	#$120,8(a0)
00005076 317C 00C0 000A             		move.w	#$C0,$A(a0)
0000507C 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005082                            
00005082                            Obj80_Display:				; XREF: Obj80_Index
00005082 4EF9 0000 0000             		jmp	DisplaySprite
00005088                            ; ===========================================================================
00005088                            Obj80_MiniSonicPos:
00005088 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
0000509A 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000050A6                            ; ===========================================================================
000050A6                            
000050A6                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000050A6 2248                       		movea.l	a0,a1
000050A8 45F9 0000 5088             		lea	(Obj80_MiniSonicPos).l,a2
000050AE 7200                       		moveq	#0,d1
000050B0 1238 FE18                  		move.b	($FFFFFE18).w,d1
000050B4 5501                       		subq.b	#2,d1
000050B6 6400                       		bcc.s	loc_4EC4
000050B8 4EF9 0000 0000             		jmp	DeleteObject
000050BE                            ; ===========================================================================
000050BE                            
000050BE                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
000050BE 7601                       		moveq	#1,d3
000050C0 0C01 000E                  		cmpi.b	#$E,d1
000050C4 6500                       		bcs.s	loc_4ED0
000050C6 7600                       		moveq	#0,d3
000050C8 720E                       		moveq	#$E,d1
000050CA                            
000050CA                            loc_4ED0:
000050CA 1401                       		move.b	d1,d2
000050CC 0202 0001                  		andi.b	#1,d2
000050D0                            
000050D0                            Obj80_MiniSonLoop:
000050D0 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
000050D4 335A 0008                  		move.w	(a2)+,8(a1)
000050D8 4A02                       		tst.b	d2
000050DA 6700                       		beq.s	loc_4EEA
000050DC 0469 000A 0008             		subi.w	#$A,8(a1)
000050E2                            
000050E2                            loc_4EEA:
000050E2 337C 00D0 000A             		move.w	#$D0,$A(a1)
000050E8 137C 0006 001A             		move.b	#6,$1A(a1)
000050EE 137C 0006 0024             		move.b	#6,$24(a1)
000050F4 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
000050FC 337C 8551 0002             		move.w	#$8551,2(a1)
00005102 137C 0000 0001             		move.b	#0,1(a1)
00005108 43E9 0040                  		lea	$40(a1),a1
0000510C 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005110 43E9 FFC0                  		lea	-$40(a1),a1
00005114 1343 0028                  		move.b	d3,$28(a1)
00005118                            
00005118                            Obj80_ChkType:				; XREF: Obj80_Index
00005118 4A28 0028                  		tst.b	$28(a0)
0000511C 6700                       		beq.s	loc_4F40
0000511E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005124 6500                       		bcs.s	loc_4F40
00005126 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000512A 0200 0001                  		andi.b	#1,d0
0000512E 6600                       		bne.s	loc_4F40
00005130 4A78 D010                  		tst.w	($FFFFD010).w
00005134 6600                       		bne.s	Obj80_Delete
00005136 4E75                       		rts	
00005138                            ; ===========================================================================
00005138                            
00005138                            loc_4F40:				; XREF: Obj80_ChkType
00005138 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000513C 0200 000F                  		andi.b	#$F,d0
00005140 6600                       		bne.s	Obj80_Display2
00005142 0868 0000 001A             		bchg	#0,$1A(a0)
00005148                            
00005148                            Obj80_Display2:
00005148 4EF9 0000 0000             		jmp	DisplaySprite
0000514E                            ; ===========================================================================
0000514E                            
0000514E                            Obj80_Delete:				; XREF: Obj80_ChkType
0000514E 4EF9 0000 0000             		jmp	DeleteObject
00005154                            ; ===========================================================================
00005154                            
00005154                            ; ---------------------------------------------------------------------------
00005154                            ; Object 81 - Sonic on the continue screen
00005154                            ; ---------------------------------------------------------------------------
00005154                            
00005154                            Obj81:					; XREF: Obj_Index
00005154 7000                       		moveq	#0,d0
00005156 1028 0024                  		move.b	$24(a0),d0
0000515A 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
0000515E 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005162 4EF9 0000 0000             		jmp	DisplaySprite
00005168                            ; ===========================================================================
00005168 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
0000516A 0000                       		dc.w Obj81_ChkLand-Obj81_Index
0000516C 0000                       		dc.w Obj81_Animate-Obj81_Index
0000516E 0000                       		dc.w Obj81_Run-Obj81_Index
00005170                            ; ===========================================================================
00005170                            
00005170                            Obj81_Main:				; XREF: Obj81_Index
00005170 5428 0024                  		addq.b	#2,$24(a0)
00005174 317C 00A0 0008             		move.w	#$A0,8(a0)
0000517A 317C 00C0 000C             		move.w	#$C0,$C(a0)
00005180 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005188 317C 0780 0002             		move.w	#$780,2(a0)
0000518E 117C 0004 0001             		move.b	#4,1(a0)
00005194 117C 0002 0018             		move.b	#2,$18(a0)
0000519A 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000051A0 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000051A6                            
000051A6                            Obj81_ChkLand:				; XREF: Obj81_Index
000051A6 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000051AC 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000051AE 5428 0024                  		addq.b	#2,$24(a0)
000051B2 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
000051B6 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000051BE 317C 8500 0002             		move.w	#$8500,2(a0)
000051C4 117C 0000 001C             		move.b	#0,$1C(a0)
000051CA 6000                       		bra.s	Obj81_Animate
000051CC                            ; ===========================================================================
000051CC                            
000051CC                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
000051CC 4EB9 0000 0000             		jsr	SpeedToPos
000051D2 4EB9 0000 0000             		jsr	Sonic_Animate
000051D8 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000051DE                            ; ===========================================================================
000051DE                            
000051DE                            Obj81_Animate:				; XREF: Obj81_Index
000051DE 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
000051E2 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
000051E4 43F9 0000 0000             		lea	(Ani_obj81).l,a1
000051EA 4EF9 0000 0000             		jmp	AnimateSprite
000051F0                            ; ===========================================================================
000051F0                            
000051F0                            Obj81_GetUp:				; XREF: Obj81_Animate
000051F0 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
000051F6 5428 0024                  		addq.b	#2,$24(a0)
000051FA 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005202 317C 0780 0002             		move.w	#$780,2(a0)
00005208 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
0000520E 4268 0020                  		clr.w	$20(a0)
00005212 5168 000C                  		subq.w	#8,$C(a0)
00005216 103C 00E0                  		move.b	#$E0,d0
0000521A 6100 BFDA                  		bsr.w	PlaySound_Special ; fade out music
0000521E                            
0000521E                            Obj81_Run:				; XREF: Obj81_Index
0000521E 0C68 0800 0020             		cmpi.w	#$800,$20(a0)	; check	Sonic's "run speed" (not moving)
00005224 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005226 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
0000522C 6000                       		bra.s	Obj81_ShowRun
0000522E                            ; ===========================================================================
0000522E                            
0000522E                            Obj81_AddSpeed:				; XREF: Obj81_Run
0000522E 0668 0020 0020             		addi.w	#$20,$20(a0)	; increase "run	speed"
00005234                            
00005234                            Obj81_ShowRun:				; XREF: Obj81_Run
00005234 4EB9 0000 0000             		jsr	SpeedToPos
0000523A 4EB9 0000 0000             		jsr	Sonic_Animate
00005240 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005246                            ; ===========================================================================
00005246                            Ani_obj81:
00005246                            	include "_anim\obj81.asm"
00005246                            ; ---------------------------------------------------------------------------
00005246                            ; Animation script - Sonic on the continue screen
00005246                            ; ---------------------------------------------------------------------------
00005246 0000                       		dc.w byte_504A-Ani_obj81
00005248 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005254 00                         		even
00005254 00                         		even
00005254                            
00005254                            ; ---------------------------------------------------------------------------
00005254                            ; Sprite mappings - Continue screen
00005254                            ; ---------------------------------------------------------------------------
00005254                            Map_obj80:
00005254                            	include "_maps\obj80.asm"
00005254                            ; ---------------------------------------------------------------------------
00005254                            ; Sprite mappings - Continue screen
00005254                            ; ---------------------------------------------------------------------------
00005254 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005258 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
0000525C 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005260 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005264 0B                         byte_5066:	dc.b $B
00005265 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
0000526A F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
0000526F F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005274 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005279 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
0000527E F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005283 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005288 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
0000528D 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005292 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005297 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
0000529C 03                         byte_509E:	dc.b 3
0000529D 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000052A2 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000052A7 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000052AC 03                         byte_50AE:	dc.b 3
000052AD 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000052B2 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000052B7 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000052BC 03                         byte_50BE:	dc.b 3
000052BD 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000052C2 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000052C7 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000052CC 02                         byte_50CE:	dc.b 2
000052CD 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000052D2 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000052D7 01                         byte_50D9:	dc.b 1
000052D8 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000052DD 01                         byte_50DF:	dc.b 1
000052DE 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000052E4 00                         		even
000052E4 00                         		even
000052E4                            
000052E4                            ; ===========================================================================
000052E4                            ; ---------------------------------------------------------------------------
000052E4                            ; Ending sequence in Green Hill	Zone
000052E4                            ; ---------------------------------------------------------------------------
000052E4                            
000052E4                            EndingSequence:				; XREF: GameModeArray
000052E4 103C 00E4                  		move.b	#$E4,d0
000052E8 6100 BF0C                  		bsr.w	PlaySound_Special ; stop music
000052EC 6100 CB72                  		bsr.w	Pal_FadeFrom
000052F0 43F8 D000                  		lea	($FFFFD000).w,a1
000052F4 7000                       		moveq	#0,d0
000052F6 323C 07FF                  		move.w	#$7FF,d1
000052FA                            
000052FA                            End_ClrObjRam:
000052FA 22C0                       		move.l	d0,(a1)+
000052FC 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005300                            
00005300 43F8 F628                  		lea	($FFFFF628).w,a1
00005304 7000                       		moveq	#0,d0
00005306 323C 0015                  		move.w	#$15,d1
0000530A                            
0000530A                            End_ClrRam:
0000530A 22C0                       		move.l	d0,(a1)+
0000530C 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005310                            
00005310 43F8 F700                  		lea	($FFFFF700).w,a1
00005314 7000                       		moveq	#0,d0
00005316 323C 003F                  		move.w	#$3F,d1
0000531A                            
0000531A                            End_ClrRam2:
0000531A 22C0                       		move.l	d0,(a1)+
0000531C 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005320                            
00005320 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005324 7000                       		moveq	#0,d0
00005326 323C 0047                  		move.w	#$47,d1
0000532A                            
0000532A                            End_ClrRam3:
0000532A 22C0                       		move.l	d0,(a1)+
0000532C 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005330                            
00005330 46FC 2700                  		move	#$2700,sr
00005334 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005338 33C0 00C0 0004             		move.w	d0,($C00004).l
0000533E 6100 BD90                  		bsr.w	ClearScreen
00005342 4DF9 00C0 0004             		lea	($C00004).l,a6
00005348 3CBC 8B03                  		move.w	#$8B03,(a6)
0000534C 3CBC 8230                  		move.w	#$8230,(a6)
00005350 3CBC 8407                  		move.w	#$8407,(a6)
00005354 3CBC 857C                  		move.w	#$857C,(a6)
00005358 3CBC 9001                  		move.w	#$9001,(a6)
0000535C 3CBC 8004                  		move.w	#$8004,(a6)
00005360 3CBC 8720                  		move.w	#$8720,(a6)
00005364 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000536A 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000536E 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005374 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
0000537A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005380 6700                       		beq.s	End_LoadData	; if yes, branch
00005382 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005388                            
00005388                            End_LoadData:
00005388 701C                       		moveq	#$1C,d0
0000538A 6100 C214                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
0000538E 4EB9 0000 0000             		jsr	Hud_Base
00005394 6100 0000                  		bsr.w	LevelSizeLoad
00005398 6100 0000                  		bsr.w	DeformBgLayer
0000539C 08F8 0002 F754             		bset	#2,($FFFFF754).w
000053A2 6100 0000                  		bsr.w	LoadZoneTiles	; load level art			
000053A6 6100 0000                  		bsr.w	MainLoadBlockLoad
000053AA 6100 0000                  		bsr.w	LoadTilesFromStart
000053AE 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000053B6 46FC 2300                  		move	#$2300,sr
000053BA 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000053C0 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000053C4 6100 C38A                  		bsr.w	KosDec
000053C8 7003                       		moveq	#3,d0
000053CA 6100 CD1A                  		bsr.w	PalLoad1	; load Sonic's pallet
000053CE 303C 008B                  		move.w	#$8B,d0
000053D2 6100 BE1C                  		bsr.w	PlaySound	; play ending sequence music
000053D6 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
000053DC 6700                       		beq.s	End_LoadSonic	; if not, branch
000053DE 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000053E4                            
000053E4                            End_LoadSonic:
000053E4 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000053EA 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
000053F0 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
000053F6 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
000053FC 31FC F800 D020             		move.w	#$F800,($FFFFD020).w ; set Sonic's speed
00005402 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005408 11FC 0001 FFD0                     move.b    #1,($FFFFFFD0).w
0000540E 4EB9 0000 0000             		jsr	ObjPosLoad
00005414 4EB9 0000 0000             		jsr	ObjectsLoad
0000541A 4EB9 0000 0000             		jsr	BuildSprites
00005420 7000                       		moveq	#0,d0
00005422 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005426 21C0 FE22                  		move.l	d0,($FFFFFE22).w
0000542A 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000542E 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005432 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005436 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
0000543A 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000543E 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005442 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005446 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000544A 6100 EDE6                  		bsr.w	OscillateNumInit
0000544E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005454 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
0000545A 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005460 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005466 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000546C 6100 D52C                  		bsr.w	DelayProgram
00005470 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005474 0000 0040                  		ori.b	#$40,d0
00005478 33C0 00C0 0004             		move.w	d0,($C00004).l
0000547E 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00005484 6100 C958                  		bsr.w	Pal_FadeTo
00005488                            
00005488                            ; ---------------------------------------------------------------------------
00005488                            ; Main ending sequence loop
00005488                            ; ---------------------------------------------------------------------------
00005488                            
00005488                            End_MainLoop:
00005488 6100 BD78                  		bsr.w	PauseGame
0000548C 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005492 6100 D506                  		bsr.w	DelayProgram
00005496 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000549A 6100 0000                  		bsr.w	End_MoveSonic
0000549E 4EB9 0000 0000             		jsr	ObjectsLoad
000054A4 6100 0000                  		bsr.w	DeformBgLayer
000054A8 4EB9 0000 0000             		jsr	BuildSprites
000054AE 4EB9 0000 0000             		jsr	ObjPosLoad
000054B4 6100 C4B8                  		bsr.w	PalCycle_Load
000054B8 6100 EDCE                  		bsr.w	OscillateNumDo
000054BC 6100 EE5A                  		bsr.w	ChangeRingFrame
000054C0 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
000054C6 6700                       		beq.s	loc_52DA	; if yes, branch
000054C8 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
000054CE 103C 0091                  		move.b	#$91,d0
000054D2 6100 BD22                  		bsr.w	PlaySound_Special ; play credits music
000054D6 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
000054DC 4E75                       		rts	
000054DE                            ; ===========================================================================
000054DE                            
000054DE                            loc_52DA:
000054DE 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000054E2 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000054E6                            
000054E6 4278 FE02                  		clr.w	($FFFFFE02).w
000054EA 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000054F0 4278 F794                  		clr.w	($FFFFF794).w
000054F4                            
000054F4                            End_AllEmlds:				; XREF: loc_5334
000054F4 6100 BD0C                  		bsr.w	PauseGame
000054F8 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000054FE 6100 D49A                  		bsr.w	DelayProgram
00005502 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005506 6100 0000                  		bsr.w	End_MoveSonic
0000550A 4EB9 0000 0000             		jsr	ObjectsLoad
00005510 6100 0000                  		bsr.w	DeformBgLayer
00005514 4EB9 0000 0000             		jsr	BuildSprites
0000551A 4EB9 0000 0000             		jsr	ObjPosLoad
00005520 6100 ED66                  		bsr.w	OscillateNumDo
00005524 6100 EDF2                  		bsr.w	ChangeRingFrame
00005528 5378 F794                  		subq.w	#1,($FFFFF794).w
0000552C 6A00                       		bpl.s	loc_5334
0000552E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005534 6100 CA50                  		bsr.w	Pal_ToWhite
00005538                            
00005538                            loc_5334:
00005538 4A78 FE02                  		tst.w	($FFFFFE02).w
0000553C 6700 FFB6                  		beq.w	End_AllEmlds
00005540 4278 FE02                  		clr.w	($FFFFFE02).w
00005544 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
0000554A 4BF9 00C0 0004             		lea	($C00004).l,a5
00005550 4DF9 00C0 0000             		lea	($C00000).l,a6
00005556 47F8 F700                  		lea	($FFFFF700).w,a3
0000555A 49F8 A400                  		lea	($FFFFA400).w,a4
0000555E 343C 4000                  		move.w	#$4000,d2
00005562 6100 0000                  		bsr.w	LoadTilesFromStart2
00005566 7013                       		moveq	#$13,d0
00005568 6100 CB7C                  		bsr.w	PalLoad1	; load ending pallet
0000556C 6100 C970                  		bsr.w	Pal_MakeWhite
00005570 6000 FF16                  		bra.w	End_MainLoop
00005574                            
00005574                            ; ---------------------------------------------------------------------------
00005574                            ; Subroutine controlling Sonic on the ending sequence
00005574                            ; ---------------------------------------------------------------------------
00005574                            
00005574                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005574                            
00005574                            
00005574                            End_MoveSonic:				; XREF: End_MainLoop
00005574 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00005578 6600                       		bne.s	End_MoveSonic2
0000557A 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005580 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005582 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005586 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
0000558C 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005592 4E75                       		rts	
00005594                            ; ===========================================================================
00005594                            
00005594                            End_MoveSonic2:				; XREF: End_MoveSonic
00005594 5500                       		subq.b	#2,d0
00005596 6600                       		bne.s	End_MoveSonic3
00005598 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
0000559E 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000055A0 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000055A4 7000                       		moveq	#0,d0
000055A6 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000055AA 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000055AE 31C0 D020                  		move.w	d0,($FFFFD020).w
000055B2 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000055B8 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000055BE 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
000055C4 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
000055CA 4E75                       		rts	
000055CC                            ; ===========================================================================
000055CC                            
000055CC                            End_MoveSonic3:				; XREF: End_MoveSonic
000055CC 5500                       		subq.b	#2,d0
000055CE 6600                       		bne.s	End_MoveSonExit
000055D0 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000055D4 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
000055DA 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
000055E0 4278 D024                  		clr.w	($FFFFD024).w
000055E4                            
000055E4                            End_MoveSonExit:
000055E4 4E75                       		rts	
000055E6                            ; End of function End_MoveSonic
000055E6                            
000055E6                            ; ===========================================================================
000055E6                            ; ---------------------------------------------------------------------------
000055E6                            ; Object 87 - Sonic on ending sequence
000055E6                            ; ---------------------------------------------------------------------------
000055E6                            
000055E6                            Obj87:					; XREF: Obj_Index
000055E6 7000                       		moveq	#0,d0
000055E8 1028 0025                  		move.b	$25(a0),d0
000055EC 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
000055F0 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
000055F4 4EF9 0000 0000             		jmp	DisplaySprite
000055FA                            ; ===========================================================================
000055FA 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
000055FE 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005602 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005606 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
0000560A 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
0000560E                            ; ===========================================================================
0000560E                            
0000560E                            Obj87_Main:				; XREF: Obj87_Index
0000560E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005614 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005616 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
0000561C 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005622 4E75                       		rts	
00005624                            ; ===========================================================================
00005624                            
00005624                            Obj87_Main2:				; XREF: Obj87_Main
00005624 5428 0025                  		addq.b	#2,$25(a0)
00005628 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005630 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005636 117C 0004 0001             		move.b	#4,1(a0)
0000563C 4228 0022                  		clr.b	$22(a0)
00005640 117C 0002 0018             		move.b	#2,$18(a0)
00005646 117C 0000 001A             		move.b	#0,$1A(a0)
0000564C 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005652                            
00005652                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005652 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005656 6600                       		bne.s	Obj87_Wait
00005658 5428 0025                  		addq.b	#2,$25(a0)
0000565C 317C 0001 001C             		move.w	#1,$1C(a0)
00005662 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005668                            
00005668                            Obj87_Wait:
00005668 4E75                       		rts	
0000566A                            ; ===========================================================================
0000566A                            
0000566A                            Obj87_LookUp:				; XREF: Obj87_Index
0000566A 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005672 6600                       		bne.s	locret_5480
00005674 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
0000567A 317C 005A 0030             		move.w	#$5A,$30(a0)
00005680 5428 0025                  		addq.b	#2,$25(a0)
00005684                            
00005684                            locret_5480:
00005684 4E75                       		rts	
00005686                            ; ===========================================================================
00005686                            
00005686                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005686 5368 0030                  		subq.w	#1,$30(a0)
0000568A 6600                       		bne.s	Obj87_Wait2
0000568C 43F8 D400                  		lea	($FFFFD400).w,a1
00005690 323C 00FF                  		move.w	#$FF,d1
00005694                            
00005694                            Obj87_ClrLoop:
00005694 4299                       		clr.l	(a1)+
00005696 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
0000569A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000056A0 5428 0025                  		addq.b	#2,$25(a0)
000056A4 117C 0001 001C             		move.b	#1,$1C(a0)
000056AA 317C 003C 0030             		move.w	#$3C,$30(a0)
000056B0                            
000056B0                            Obj87_Wait2:
000056B0 4E75                       		rts	
000056B2                            ; ===========================================================================
000056B2                            
000056B2                            Obj87_MakeLogo:				; XREF: Obj87_Index
000056B2 5368 0030                  		subq.w	#1,$30(a0)
000056B6 6600                       		bne.s	Obj87_Wait3
000056B8 5428 0025                  		addq.b	#2,$25(a0)
000056BC 317C 00B4 0030             		move.w	#$B4,$30(a0)
000056C2 117C 0002 001C             		move.b	#2,$1C(a0)
000056C8 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000056CE                            
000056CE                            Obj87_Wait3:
000056CE 4E75                       		rts	
000056D0                            ; ===========================================================================
000056D0                            
000056D0                            Obj87_Animate:				; XREF: Obj87_Index
000056D0 43F9 0000 0000             		lea	(Ani_obj87).l,a1
000056D6 4EF9 0000 0000             		jmp	AnimateSprite
000056DC                            ; ===========================================================================
000056DC                            
000056DC                            Obj87_Leap:				; XREF: Obj87_Index
000056DC 5368 0030                  		subq.w	#1,$30(a0)
000056E0 6600                       		bne.s	Obj87_Wait4
000056E2 5428 0025                  		addq.b	#2,$25(a0)
000056E6 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000056EE 317C 03E1 0002             		move.w	#$3E1,2(a0)
000056F4 117C 0004 0001             		move.b	#4,1(a0)
000056FA 4228 0022                  		clr.b	$22(a0)
000056FE 117C 0002 0018             		move.b	#2,$18(a0)
00005704 117C 0005 001A             		move.b	#5,$1A(a0)
0000570A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005710 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005716 60B8                       		bra.s	Obj87_Animate
00005718                            ; ===========================================================================
00005718                            
00005718                            Obj87_Wait4:				; XREF: Obj87_Leap
00005718 4E75                       		rts	
0000571A                            ; ===========================================================================
0000571A                            Ani_obj87:
0000571A                            	include "_anim\obj87.asm"
0000571A                            ; ---------------------------------------------------------------------------
0000571A                            ; Animation script - Sonic on the ending sequence
0000571A                            ; ---------------------------------------------------------------------------
0000571A 0000                       		dc.w byte_551C-Ani_obj87
0000571C 0000                       		dc.w byte_552A-Ani_obj87
0000571E 0000                       		dc.w byte_5534-Ani_obj87
00005720 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
0000572E 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005738 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005740                            		even
00005740                            		even
00005740                            
00005740                            ; ===========================================================================
00005740                            ; ---------------------------------------------------------------------------
00005740                            ; Object 88 - chaos emeralds on	the ending sequence
00005740                            ; ---------------------------------------------------------------------------
00005740                            
00005740                            Obj88:					; XREF: Obj_Index
00005740 7000                       		moveq	#0,d0
00005742 1028 0024                  		move.b	$24(a0),d0
00005746 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
0000574A 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
0000574E 4EF9 0000 0000             		jmp	DisplaySprite
00005754                            ; ===========================================================================
00005754 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005756 0000                       		dc.w Obj88_Move-Obj88_Index
00005758                            ; ===========================================================================
00005758                            
00005758                            Obj88_Main:				; XREF: Obj88_Index
00005758 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
0000575E 6700                       		beq.s	Obj88_Main2
00005760 588F                       		addq.l	#4,sp
00005762 4E75                       		rts	
00005764                            ; ===========================================================================
00005764                            
00005764                            Obj88_Main2:				; XREF: Obj88_Main
00005764 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
0000576A 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005770 2248                       		movea.l	a0,a1
00005772 7600                       		moveq	#0,d3
00005774 7401                       		moveq	#1,d2
00005776 7205                       		moveq	#5,d1
00005778                            
00005778                            Obj88_MainLoop:
00005778 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
0000577C 5429 0024                  		addq.b	#2,$24(a1)
00005780 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005788 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000578E 137C 0004 0001             		move.b	#4,1(a1)
00005794 137C 0001 0018             		move.b	#1,$18(a1)
0000579A 3368 0008 0038             		move.w	8(a0),$38(a1)
000057A0 3368 000C 003A             		move.w	$C(a0),$3A(a1)
000057A6 1342 001C                  		move.b	d2,$1C(a1)
000057AA 1342 001A                  		move.b	d2,$1A(a1)
000057AE 5202                       		addq.b	#1,d2
000057B0 1343 0026                  		move.b	d3,$26(a1)
000057B4 0603 002A                  		addi.b	#$2A,d3
000057B8 43E9 0040                  		lea	$40(a1),a1
000057BC 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000057C0                            
000057C0                            Obj88_Move:				; XREF: Obj88_Index
000057C0 3028 003E                  		move.w	$3E(a0),d0
000057C4 D168 0026                  		add.w	d0,$26(a0)
000057C8 1028 0026                  		move.b	$26(a0),d0
000057CC 4EB9 0000 29CC             		jsr	(CalcSine).l
000057D2 7800                       		moveq	#0,d4
000057D4 1828 003C                  		move.b	$3C(a0),d4
000057D8 C3C4                       		muls.w	d4,d1
000057DA E081                       		asr.l	#8,d1
000057DC C1C4                       		muls.w	d4,d0
000057DE E080                       		asr.l	#8,d0
000057E0 D268 0038                  		add.w	$38(a0),d1
000057E4 D068 003A                  		add.w	$3A(a0),d0
000057E8 3141 0008                  		move.w	d1,8(a0)
000057EC 3140 000C                  		move.w	d0,$C(a0)
000057F0 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
000057F6 6700                       		beq.s	loc_55FA
000057F8 0668 0020 003C             		addi.w	#$20,$3C(a0)
000057FE                            
000057FE                            loc_55FA:
000057FE 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005804 6700                       		beq.s	loc_5608
00005806 0668 0020 003E             		addi.w	#$20,$3E(a0)
0000580C                            
0000580C                            loc_5608:
0000580C 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005812 6700                       		beq.s	locret_5614
00005814 5368 003A                  		subq.w	#1,$3A(a0)
00005818                            
00005818                            locret_5614:
00005818 4E75                       		rts	
0000581A                            ; ===========================================================================
0000581A                            ; ---------------------------------------------------------------------------
0000581A                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
0000581A                            ; ---------------------------------------------------------------------------
0000581A                            
0000581A                            Obj89:					; XREF: Obj_Index
0000581A 7000                       		moveq	#0,d0
0000581C 1028 0024                  		move.b	$24(a0),d0
00005820 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005824 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005828                            ; ===========================================================================
00005828 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
0000582A 0000                       		dc.w Obj89_Move-Obj89_Index
0000582C 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
0000582E                            ; ===========================================================================
0000582E                            
0000582E                            Obj89_Main:				; XREF: Obj89_Index
0000582E 5428 0024                  		addq.b	#2,$24(a0)
00005832 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005838 317C 00D8 000A             		move.w	#$D8,$A(a0)
0000583E 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005846 317C 05C5 0002             		move.w	#$5C5,2(a0)
0000584C 117C 0000 0001             		move.b	#0,1(a0)
00005852 117C 0000 0018             		move.b	#0,$18(a0)
00005858                            
00005858                            Obj89_Move:				; XREF: Obj89_Index
00005858 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
0000585E 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005860 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005866 4EF9 0000 0000             		jmp	DisplaySprite
0000586C                            ; ===========================================================================
0000586C                            
0000586C                            Obj89_Delay:				; XREF: Obj89_Move
0000586C 5428 0024                  		addq.b	#2,$24(a0)
00005870 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005876                            
00005876                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005876 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000587A 6A00                       		bpl.s	Obj89_Display
0000587C 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005882                            
00005882                            Obj89_Display:
00005882 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005888                            ; ===========================================================================
00005888                            ; ---------------------------------------------------------------------------
00005888                            ; Sprite mappings - Sonic on the ending	sequence
00005888                            ; ---------------------------------------------------------------------------
00005888                            Map_obj87:
00005888                            	include "_maps\obj87.asm"
00005888                            ; ---------------------------------------------------------------------------
00005888                            ; Sprite mappings - Sonic on the ending	sequence
00005888                            ; ---------------------------------------------------------------------------
00005888 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
0000588C 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005890 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005894 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005898 02                         byte_5690:	dc.b 2
00005899 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
0000589E 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000058A3 03                         byte_569B:	dc.b 3
000058A4 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000058A9 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000058AE 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000058B3 02                         byte_56AB:	dc.b 2
000058B4 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000058B9 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000058BE 02                         byte_56B6:	dc.b 2
000058BF EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000058C4 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000058C9 02                         byte_56C1:	dc.b 2
000058CA EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000058CF FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000058D4 03                         byte_56CC:	dc.b 3
000058D5 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000058DA EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000058DF 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000058E4 07                         byte_56DC:	dc.b 7
000058E5 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000058EA BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000058EF BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
000058F4 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
000058F9 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
000058FE E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005903 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005908 18                         byte_5700:	dc.b $18
00005909 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
0000590E 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005913 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005918 980B 0098 30               		dc.b $98, $B, 0, $98, $30
0000591D A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005922 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005927 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
0000592C A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005931 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005936 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
0000593B A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005940 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005945 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
0000594A B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
0000594F B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005954 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005959 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
0000595E D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005963 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005968 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
0000596D D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005972 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005977 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
0000597C F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005982 00                         		even
00005982 00                         		even
00005982                            
00005982                            ; ---------------------------------------------------------------------------
00005982                            ; Sprite mappings - chaos emeralds on the ending sequence
00005982                            ; ---------------------------------------------------------------------------
00005982                            Map_obj88:
00005982                            	include "_maps\obj88.asm"
00005982                            ; ---------------------------------------------------------------------------
00005982                            ; Sprite mappings - chaos emeralds on the ending sequence
00005982                            ; ---------------------------------------------------------------------------
00005982 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005986 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
0000598A 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
0000598E 0000                       		dc.w byte_57AC-Map_obj88
00005990 01                         byte_5788:	dc.b 1
00005991 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005996 01                         byte_578E:	dc.b 1
00005997 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000599C 01                         byte_5794:	dc.b 1
0000599D F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
000059A2 01                         byte_579A:	dc.b 1
000059A3 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
000059A8 01                         byte_57A0:	dc.b 1
000059A9 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
000059AE 01                         byte_57A6:	dc.b 1
000059AF F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000059B4 01                         byte_57AC:	dc.b 1
000059B5 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000059BA                            		even
000059BA                            		even
000059BA                            
000059BA                            ; ---------------------------------------------------------------------------
000059BA                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000059BA                            ; ---------------------------------------------------------------------------
000059BA                            Map_obj89:
000059BA                            	include "_maps\obj89.asm"
000059BA                            ; ---------------------------------------------------------------------------
000059BA                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000059BA                            ; ---------------------------------------------------------------------------
000059BA 0000                       		dc.w byte_57B4-Map_obj89
000059BC 03                         byte_57B4:	dc.b 3
000059BD F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000059C2 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000059C7 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000059CC                            		even
000059CC                            		even
000059CC                            
000059CC                            ; ===========================================================================
000059CC                            ; ---------------------------------------------------------------------------
000059CC                            ; Credits ending sequence
000059CC                            ; ---------------------------------------------------------------------------
000059CC                            
000059CC                            Credits:				; XREF: GameModeArray
000059CC 6100 BAC4                  		bsr.w	ClearPLC
000059D0 6100 C48E                  		bsr.w	Pal_FadeFrom
000059D4 4DF9 00C0 0004             		lea	($C00004).l,a6
000059DA 3CBC 8004                  		move.w	#$8004,(a6)
000059DE 3CBC 8230                  		move.w	#$8230,(a6)
000059E2 3CBC 8407                  		move.w	#$8407,(a6)
000059E6 3CBC 9001                  		move.w	#$9001,(a6)
000059EA 3CBC 9200                  		move.w	#$9200,(a6)
000059EE 3CBC 8B03                  		move.w	#$8B03,(a6)
000059F2 3CBC 8720                  		move.w	#$8720,(a6)
000059F6 4238 F64E                  		clr.b	($FFFFF64E).w
000059FA 6100 B6D4                  		bsr.w	ClearScreen
000059FE 43F8 D000                  		lea	($FFFFD000).w,a1
00005A02 7000                       		moveq	#0,d0
00005A04 323C 07FF                  		move.w	#$7FF,d1
00005A08                            
00005A08                            Cred_ClrObjRam:
00005A08 22C0                       		move.l	d0,(a1)+
00005A0A 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005A0E                            
00005A0E 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005A18 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005A1E 6100 B8C8                  		bsr.w	NemDec
00005A22 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005A26 7000                       		moveq	#0,d0
00005A28 323C 001F                  		move.w	#$1F,d1
00005A2C                            
00005A2C                            Cred_ClrPallet:
00005A2C 22C0                       		move.l	d0,(a1)+
00005A2E 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005A32                            
00005A32 7014                       		moveq	#$14,d0
00005A34 6100 C6B0                  		bsr.w	PalLoad1	; load Sonic's pallet
00005A38 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005A3E 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w
00005A44 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00005A4A 4EB9 0000 0000             		jsr	ObjectsLoad
00005A50 4EB9 0000 0000             		jsr	BuildSprites
00005A56 6100 0000                  		bsr.w	EndingDemoLoad
00005A5A 7000                       		moveq	#0,d0
00005A5C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005A60 E948                       		lsl.w	#4,d0
00005A62 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005A68 45F2 0000                  		lea	(a2,d0.w),a2
00005A6C 7000                       		moveq	#0,d0
00005A6E 1012                       		move.b	(a2),d0
00005A70 6700                       		beq.s	loc_5862
00005A72 6100 B9C0                  		bsr.w	LoadPLC		; load level patterns
00005A76                            
00005A76                            loc_5862:
00005A76 7001                       		moveq	#1,d0
00005A78 6100 B9BA                  		bsr.w	LoadPLC		; load standard	level patterns
00005A7C 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005A82 6100 C35A                  		bsr.w	Pal_FadeTo
00005A86                            
00005A86                            Cred_WaitLoop:
00005A86 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005A8C 6100 CF0C                  		bsr.w	DelayProgram
00005A90 6100 BA0E                  		bsr.w	RunPLC_RAM
00005A94 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005A98 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005A9A 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005A9E 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005AA0 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005AA6 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005AAA 4E75                       		rts	
00005AAC                            
00005AAC                            ; ---------------------------------------------------------------------------
00005AAC                            ; Ending sequence demo loading subroutine
00005AAC                            ; ---------------------------------------------------------------------------
00005AAC                            
00005AAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005AAC                            
00005AAC                            
00005AAC                            EndingDemoLoad:				; XREF: Credits
00005AAC 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005AB0 0240 000F                  		andi.w	#$F,d0
00005AB4 D040                       		add.w	d0,d0
00005AB6 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005ABA 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005ABE 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005AC2 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005AC8 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005ACA 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005AD0 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005AD6 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005ADC 7000                       		moveq	#0,d0
00005ADE 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005AE2 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005AE6 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005AEA 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005AEE 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005AF4 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005AF6 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005AFC 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005B00 303C 0008                  		move.w	#8,d0
00005B04                            
00005B04                            EndDemo_LampLoad:
00005B04 24D9                       		move.l	(a1)+,(a2)+
00005B06 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005B0A                            
00005B0A                            EndDemo_Exit:
00005B0A 4E75                       		rts	
00005B0C                            ; End of function EndingDemoLoad
00005B0C                            
00005B0C                            ; ===========================================================================
00005B0C                            ; ---------------------------------------------------------------------------
00005B0C                            ; Levels used in the end sequence demos
00005B0C                            ; ---------------------------------------------------------------------------
00005B0C                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005B1C                            
00005B1C                            ; ---------------------------------------------------------------------------
00005B1C                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005B1C                            ; ---------------------------------------------------------------------------
00005B1C                            EndDemo_LampVar:
00005B1C 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005B1E 0A00 062C 000D             		dc.w $A00, $62C, $D
00005B24 0000 0000                  		dc.l 0
00005B28 0000                       		dc.b 0,	0
00005B2A 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005B3E 0101                       		dc.b 1,	1
00005B40                            ; ===========================================================================
00005B40                            ; ---------------------------------------------------------------------------
00005B40                            ; "TRY AGAIN" and "END"	screens
00005B40                            ; ---------------------------------------------------------------------------
00005B40                            
00005B40                            TryAgainEnd:				; XREF: Credits
00005B40 6100 B950                  		bsr.w	ClearPLC
00005B44 6100 C31A                  		bsr.w	Pal_FadeFrom
00005B48 4DF9 00C0 0004             		lea	($C00004).l,a6
00005B4E 3CBC 8004                  		move.w	#$8004,(a6)
00005B52 3CBC 8230                  		move.w	#$8230,(a6)
00005B56 3CBC 8407                  		move.w	#$8407,(a6)
00005B5A 3CBC 9001                  		move.w	#$9001,(a6)
00005B5E 3CBC 9200                  		move.w	#$9200,(a6)
00005B62 3CBC 8B03                  		move.w	#$8B03,(a6)
00005B66 3CBC 8720                  		move.w	#$8720,(a6)
00005B6A 4238 F64E                  		clr.b	($FFFFF64E).w
00005B6E 6100 B560                  		bsr.w	ClearScreen
00005B72 43F8 D000                  		lea	($FFFFD000).w,a1
00005B76 7000                       		moveq	#0,d0
00005B78 323C 07FF                  		move.w	#$7FF,d1
00005B7C                            
00005B7C                            TryAg_ClrObjRam:
00005B7C 22C0                       		move.l	d0,(a1)+
00005B7E 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005B82                            
00005B82 701D                       		moveq	#$1D,d0
00005B84 6100 BA1A                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005B88 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005B8C 7000                       		moveq	#0,d0
00005B8E 323C 001F                  		move.w	#$1F,d1
00005B92                            
00005B92                            TryAg_ClrPallet:
00005B92 22C0                       		move.l	d0,(a1)+
00005B94 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005B98                            
00005B98 7013                       		moveq	#$13,d0
00005B9A 6100 C54A                  		bsr.w	PalLoad1	; load ending pallet
00005B9E 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005BA2 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005BA8 4EB9 0000 0000             		jsr	ObjectsLoad
00005BAE 4EB9 0000 0000             		jsr	BuildSprites
00005BB4 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005BBA 6100 C222                  		bsr.w	Pal_FadeTo
00005BBE                            
00005BBE                            ; ---------------------------------------------------------------------------
00005BBE                            ; "TRY AGAIN" and "END"	screen main loop
00005BBE                            ; ---------------------------------------------------------------------------
00005BBE                            TryAg_MainLoop:
00005BBE 6100 B642                  		bsr.w	PauseGame
00005BC2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005BC8 6100 CDD0                  		bsr.w	DelayProgram
00005BCC 4EB9 0000 0000             		jsr	ObjectsLoad
00005BD2 4EB9 0000 0000             		jsr	BuildSprites
00005BD8 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005BDE 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005BE0 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005BE4 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005BE6 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005BEC 67D0                       		beq.s	TryAg_MainLoop
00005BEE                            
00005BEE                            TryAg_Exit:
00005BEE 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00005BF4 4E75                       		rts	
00005BF6                            
00005BF6                            ; ===========================================================================
00005BF6                            ; ---------------------------------------------------------------------------
00005BF6                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005BF6                            ; ---------------------------------------------------------------------------
00005BF6                            
00005BF6                            Obj8B:					; XREF: Obj_Index
00005BF6 7000                       		moveq	#0,d0
00005BF8 1028 0024                  		move.b	$24(a0),d0
00005BFC 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005C00 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005C04 4EF9 0000 0000             		jmp	DisplaySprite
00005C0A                            ; ===========================================================================
00005C0A 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005C0C 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005C0E 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005C10 0000                       		dc.w loc_5A8E-Obj8B_Index
00005C12                            ; ===========================================================================
00005C12                            
00005C12                            Obj8B_Main:				; XREF: Obj8B_Index
00005C12 5428 0024                  		addq.b	#2,$24(a0)
00005C16 317C 0120 0008             		move.w	#$120,8(a0)
00005C1C 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005C22 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005C2A 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005C30 117C 0000 0001             		move.b	#0,1(a0)
00005C36 117C 0002 0018             		move.b	#2,$18(a0)
00005C3C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005C42 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00005C48 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005C4E 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005C50 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
00005C56 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005C5C 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005C62 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005C68 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005C6E                            
00005C6E                            Obj8B_Animate:				; XREF: Obj8B_Index
00005C6E 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005C74 4EF9 0000 0000             		jmp	AnimateSprite
00005C7A                            ; ===========================================================================
00005C7A                            
00005C7A                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005C7A 5428 0024                  		addq.b	#2,$24(a0)
00005C7E 7002                       		moveq	#2,d0
00005C80 0828 0000 001C             		btst	#0,$1C(a0)
00005C86 6700                       		beq.s	loc_5A6A
00005C88 4440                       		neg.w	d0
00005C8A                            
00005C8A                            loc_5A6A:
00005C8A 43F8 D800                  		lea	($FFFFD800).w,a1
00005C8E 7205                       		moveq	#5,d1
00005C90                            
00005C90                            loc_5A70:
00005C90 1340 003E                  		move.b	d0,$3E(a1)
00005C94 3400                       		move.w	d0,d2
00005C96 E742                       		asl.w	#3,d2
00005C98 D529 0026                  		add.b	d2,$26(a1)
00005C9C 43E9 0040                  		lea	$40(a1),a1
00005CA0 51C9 FFEE                  		dbf	d1,loc_5A70
00005CA4 5228 001A                  		addq.b	#1,$1A(a0)
00005CA8 317C 0070 0030             		move.w	#112,$30(a0)
00005CAE                            
00005CAE                            loc_5A8E:				; XREF: Obj8B_Index
00005CAE 5368 0030                  		subq.w	#1,$30(a0)
00005CB2 6A00                       		bpl.s	locret_5AA0
00005CB4 0868 0000 001C             		bchg	#0,$1C(a0)
00005CBA 117C 0002 0024             		move.b	#2,$24(a0)
00005CC0                            
00005CC0                            locret_5AA0:
00005CC0 4E75                       		rts	
00005CC2                            ; ===========================================================================
00005CC2                            Ani_obj8B:
00005CC2                            	include "_anim\obj8B.asm"
00005CC2                            ; ---------------------------------------------------------------------------
00005CC2                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005CC2                            ; ---------------------------------------------------------------------------
00005CC2 0000                       		dc.w byte_5AA8-Ani_obj8B
00005CC4 0000                       		dc.w byte_5AAC-Ani_obj8B
00005CC6 0000                       		dc.w byte_5AB0-Ani_obj8B
00005CC8 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005CCC 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005CD0 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005CE2                            		even
00005CE2                            		even
00005CE2                            
00005CE2                            ; ===========================================================================
00005CE2                            ; ---------------------------------------------------------------------------
00005CE2                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005CE2                            ; ---------------------------------------------------------------------------
00005CE2                            
00005CE2                            Obj8C:					; XREF: Obj_Index
00005CE2 7000                       		moveq	#0,d0
00005CE4 1028 0024                  		move.b	$24(a0),d0
00005CE8 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005CEC 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005CF0 4EF9 0000 0000             		jmp	DisplaySprite
00005CF6                            ; ===========================================================================
00005CF6 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005CF8 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005CFA                            ; ===========================================================================
00005CFA                            
00005CFA                            Obj8C_Main:				; XREF: Obj8C_Index
00005CFA 2248                       		movea.l	a0,a1
00005CFC 7400                       		moveq	#0,d2
00005CFE 7600                       		moveq	#0,d3
00005D00 7205                       		moveq	#5,d1
00005D02 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005D06                            
00005D06                            Obj8C_MakeEms:				; XREF: loc_5B42
00005D06 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005D0A 5429 0024                  		addq.b	#2,$24(a1)
00005D0E 237C 0000 5982 0004        		move.l	#Map_obj88,4(a1)
00005D16 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005D1C 137C 0000 0001             		move.b	#0,1(a1)
00005D22 137C 0001 0018             		move.b	#1,$18(a1)
00005D28 337C 0104 0008             		move.w	#$104,8(a1)
00005D2E 337C 0120 0038             		move.w	#$120,$38(a1)
00005D34 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005D3A 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005D40 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005D46 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005D4A                            
00005D4A                            Obj8C_ChkEms:
00005D4A 7000                       		moveq	#0,d0
00005D4C 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005D50 5340                       		subq.w	#1,d0
00005D52 6500                       		bcs.s	loc_5B42
00005D54                            
00005D54                            Obj8C_ChkEmLoop:
00005D54 B433 0000                  		cmp.b	(a3,d0.w),d2
00005D58 6600                       		bne.s	loc_5B3E
00005D5A 5202                       		addq.b	#1,d2
00005D5C 60EC                       		bra.s	Obj8C_ChkEms
00005D5E                            ; ===========================================================================
00005D5E                            
00005D5E                            loc_5B3E:
00005D5E 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005D62                            
00005D62                            loc_5B42:
00005D62 1342 001A                  		move.b	d2,$1A(a1)
00005D66 5229 001A                  		addq.b	#1,$1A(a1)
00005D6A 5202                       		addq.b	#1,d2
00005D6C 137C 0080 0026             		move.b	#$80,$26(a1)
00005D72 1343 001E                  		move.b	d3,$1E(a1)
00005D76 1343 001F                  		move.b	d3,$1F(a1)
00005D7A 0643 000A                  		addi.w	#$A,d3
00005D7E 43E9 0040                  		lea	$40(a1),a1
00005D82 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005D86                            
00005D86                            Obj8C_Move:				; XREF: Obj8C_Index
00005D86 4A68 003E                  		tst.w	$3E(a0)
00005D8A 6700                       		beq.s	locret_5BBA
00005D8C 4A28 001E                  		tst.b	$1E(a0)
00005D90 6700                       		beq.s	loc_5B78
00005D92 5328 001E                  		subq.b	#1,$1E(a0)
00005D96 6600                       		bne.s	loc_5B80
00005D98                            
00005D98                            loc_5B78:
00005D98 3028 003E                  		move.w	$3E(a0),d0
00005D9C D168 0026                  		add.w	d0,$26(a0)
00005DA0                            
00005DA0                            loc_5B80:
00005DA0 1028 0026                  		move.b	$26(a0),d0
00005DA4 6700                       		beq.s	loc_5B8C
00005DA6 0C00 0080                  		cmpi.b	#$80,d0
00005DAA 6600                       		bne.s	loc_5B96
00005DAC                            
00005DAC                            loc_5B8C:
00005DAC 4268 003E                  		clr.w	$3E(a0)
00005DB0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005DB6                            
00005DB6                            loc_5B96:
00005DB6 4EB9 0000 29CC             		jsr	(CalcSine).l
00005DBC 7800                       		moveq	#0,d4
00005DBE 1828 003C                  		move.b	$3C(a0),d4
00005DC2 C3C4                       		muls.w	d4,d1
00005DC4 E081                       		asr.l	#8,d1
00005DC6 C1C4                       		muls.w	d4,d0
00005DC8 E080                       		asr.l	#8,d0
00005DCA D268 0038                  		add.w	$38(a0),d1
00005DCE D068 003A                  		add.w	$3A(a0),d0
00005DD2 3141 0008                  		move.w	d1,8(a0)
00005DD6 3140 000A                  		move.w	d0,$A(a0)
00005DDA                            
00005DDA                            locret_5BBA:
00005DDA 4E75                       		rts	
00005DDC                            ; ===========================================================================
00005DDC                            ; ---------------------------------------------------------------------------
00005DDC                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005DDC                            ; ---------------------------------------------------------------------------
00005DDC                            Map_obj8B:
00005DDC                            	include "_maps\obj8B.asm"
00005DDC                            ; ---------------------------------------------------------------------------
00005DDC                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005DDC                            ; ---------------------------------------------------------------------------
00005DDC 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005DE0 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005DE4 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005DE8 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005DEC 08                         byte_5BCC:	dc.b 8
00005DED E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005DF2 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005DF7 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005DFC F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005E01 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005E06 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005E0B 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005E10 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E15 08                         byte_5BF5:	dc.b 8
00005E16 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005E1B F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005E20 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005E25 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005E2A 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005E2F 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005E34 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005E39 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E3E 08                         byte_5C1E:	dc.b 8
00005E3F E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005E44 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005E49 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005E4E F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005E53 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005E58 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005E5D 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005E62 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E67 08                         byte_5C47:	dc.b 8
00005E68 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005E6D F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005E72 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005E77 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005E7C 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005E81 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005E86 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005E8B 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E90 0C                         byte_5C70:	dc.b $C
00005E91 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005E96 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005E9B 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005EA0 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005EA5 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005EAA F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005EAF 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005EB4 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005EB9 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005EBE 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005EC3 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005EC8 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005ECD 0A                         byte_5CAD:	dc.b $A
00005ECE D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005ED3 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005ED8 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00005EDD D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00005EE2 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00005EE7 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00005EEC 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005EF1 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005EF6 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00005EFB 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00005F00 0A                         byte_5CE0:	dc.b $A
00005F01 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00005F06 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00005F0B EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00005F10 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00005F15 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00005F1A EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00005F1F 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005F24 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005F29 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00005F2E 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00005F33 0C                         byte_5D13:	dc.b $C
00005F34 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00005F39 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00005F3E 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00005F43 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00005F48 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00005F4D FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00005F52 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00005F57 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00005F5C 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00005F61 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00005F66 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005F6B 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005F70                            		even
00005F70                            		even
00005F70                            
00005F70                            ; ---------------------------------------------------------------------------
00005F70                            ; Ending sequence demos
00005F70                            ; ---------------------------------------------------------------------------
00005F70                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00005F9E                            		even
00005F9E                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00005FDE                            		even
00005FDE                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
0000600E                            		even
0000600E                            Demo_EndLZ:	incbin	demodata\e_lz.bin
0000603E                            		even
0000603E                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
0000605E                            		even
0000605E                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
0000607E                            		even
0000607E                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000060AE                            		even
000060AE                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
000060DE                            		even
000060DE                            
000060DE                            ; ---------------------------------------------------------------------------
000060DE                            ; Subroutine to	load level boundaries and start	locations
000060DE                            ; ---------------------------------------------------------------------------
000060DE                            
000060DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000060DE                            
000060DE                            
000060DE                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
000060DE 7000                       		moveq	#0,d0
000060E0 11C0 F740                  		move.b	d0,($FFFFF740).w
000060E4 11C0 F741                  		move.b	d0,($FFFFF741).w
000060E8 11C0 F746                  		move.b	d0,($FFFFF746).w
000060EC 11C0 F748                  		move.b	d0,($FFFFF748).w
000060F0 11C0 F742                  		move.b	d0,($FFFFF742).w
000060F4 3038 FE10                  		move.w	($FFFFFE10).w,d0
000060F8 ED08                       		lsl.b	#6,d0
000060FA E848                       		lsr.w	#4,d0
000060FC 3200                       		move.w	d0,d1
000060FE D040                       		add.w	d0,d0
00006100 D041                       		add.w	d1,d0
00006102 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006106 3018                       		move.w	(a0)+,d0
00006108 31C0 F730                  		move.w	d0,($FFFFF730).w
0000610C 2018                       		move.l	(a0)+,d0
0000610E 21C0 F728                  		move.l	d0,($FFFFF728).w
00006112 21C0 F720                  		move.l	d0,($FFFFF720).w
00006116 2018                       		move.l	(a0)+,d0
00006118 21C0 F72C                  		move.l	d0,($FFFFF72C).w
0000611C 21C0 F724                  		move.l	d0,($FFFFF724).w
00006120 3038 F728                  		move.w	($FFFFF728).w,d0
00006124 0640 0240                  		addi.w	#$240,d0
00006128 31C0 F732                  		move.w	d0,($FFFFF732).w
0000612C 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006132 3018                       		move.w	(a0)+,d0
00006134 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006138 6000 0000                  		bra.w	LevSz_ChkLamp
0000613C                            ; ===========================================================================
0000613C                            ; ---------------------------------------------------------------------------
0000613C                            ; Level size array and ending start location array
0000613C                            ; ---------------------------------------------------------------------------
0000613C                            LevelSizeArray:	incbin	misc\lvl_size.bin
0000628C                            		even
0000628C                            
0000628C                            EndingStLocArray:
0000628C                            		incbin	misc\sloc_end.bin
000062AC                            		even
000062AC                            
000062AC                            ; ===========================================================================
000062AC                            
000062AC                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000062AC 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000062B0 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000062B2 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000062B8 3238 D008                  		move.w	($FFFFD008).w,d1
000062BC 3038 D00C                  		move.w	($FFFFD00C).w,d0
000062C0 6000                       		bra.s	loc_60D0
000062C2                            ; ===========================================================================
000062C2                            
000062C2                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000062C2 3038 FE10                  		move.w	($FFFFFE10).w,d0
000062C6 ED08                       		lsl.b	#6,d0
000062C8 E848                       		lsr.w	#4,d0
000062CA 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000062CE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000062D2 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000062D4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000062D8 5340                       		subq.w	#1,d0
000062DA E548                       		lsl.w	#2,d0
000062DC 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000062E0                            
000062E0                            LevSz_SonicPos:
000062E0 7200                       		moveq	#0,d1
000062E2 3219                       		move.w	(a1)+,d1
000062E4 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000062E8 7000                       		moveq	#0,d0
000062EA 3011                       		move.w	(a1),d0
000062EC 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000062F0                            
000062F0                            loc_60D0:				; XREF: LevSz_ChkLamp
000062F0 0441 00A0                  		subi.w	#$A0,d1
000062F4 6400                       		bcc.s	loc_60D8
000062F6 7200                       		moveq	#0,d1
000062F8                            
000062F8                            loc_60D8:
000062F8 3438 F72A                  		move.w	($FFFFF72A).w,d2
000062FC B242                       		cmp.w	d2,d1
000062FE 6500                       		bcs.s	loc_60E2
00006300 3202                       		move.w	d2,d1
00006302                            
00006302                            loc_60E2:
00006302 31C1 F700                  		move.w	d1,($FFFFF700).w
00006306 0440 0060                  		subi.w	#$60,d0
0000630A 6400                       		bcc.s	loc_60EE
0000630C 7000                       		moveq	#0,d0
0000630E                            
0000630E                            loc_60EE:
0000630E B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006312 6D00                       		blt.s	loc_60F8
00006314 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006318                            
00006318                            loc_60F8:
00006318 31C0 F704                  		move.w	d0,($FFFFF704).w
0000631C 6100 0000                  		bsr.w	BgScrollSpeed
00006320 7000                       		moveq	#0,d0
00006322 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006326 E508                       		lsl.b	#2,d0
00006328 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
0000632E 6000 0000                  		bra.w	LevSz_Unk
00006332                            ; ===========================================================================
00006332                            ; ---------------------------------------------------------------------------
00006332                            ; Sonic	start location array
00006332                            ; ---------------------------------------------------------------------------
00006332                            StartLocArray:	incbin	misc\sloc_lev.bin
000063A2                            		even
000063A2                            
000063A2                            ; ---------------------------------------------------------------------------
000063A2                            ; Which	256x256	tiles contain loops or roll-tunnels
000063A2                            ; ---------------------------------------------------------------------------
000063A2                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
000063A2                            ; loop,	loop, tunnel, tunnel
000063A2                            ; ---------------------------------------------------------------------------
000063A2                            LoopTileNums:	incbin	misc\loopnums.bin
000063BE                            		even
000063BE                            
000063BE                            ; ===========================================================================
000063BE                            
000063BE                            LevSz_Unk:				; XREF: LevelSizeLoad
000063BE 7000                       		moveq	#0,d0
000063C0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000063C4 E748                       		lsl.w	#3,d0
000063C6 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000063CA 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000063CE 24D9                       		move.l	(a1)+,(a2)+
000063D0 24D9                       		move.l	(a1)+,(a2)+
000063D2 4E75                       		rts	
000063D4                            ; End of function LevelSizeLoad
000063D4                            
000063D4                            ; ===========================================================================
000063D4 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000063DC 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063E4 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063EC 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063F4 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063FC 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006404 0070 0100 0100 0100        		dc.l $700100, $1000100
0000640C                            
0000640C                            ; ---------------------------------------------------------------------------
0000640C                            ; Subroutine to	set scroll speed of some backgrounds
0000640C                            ; ---------------------------------------------------------------------------
0000640C                            
0000640C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000640C                            
0000640C                            
0000640C                            BgScrollSpeed:				; XREF: LevelSizeLoad
0000640C 4A38 FE30                  		tst.b	($FFFFFE30).w
00006410 6600                       		bne.s	loc_6206
00006412 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006416 31C0 F714                  		move.w	d0,($FFFFF714).w
0000641A 31C1 F708                  		move.w	d1,($FFFFF708).w
0000641E 31C1 F710                  		move.w	d1,($FFFFF710).w
00006422 31C1 F718                  		move.w	d1,($FFFFF718).w
00006426                            
00006426                            loc_6206:
00006426 7400                       		moveq	#0,d2
00006428 1438 FE10                  		move.b	($FFFFFE10).w,d2
0000642C D442                       		add.w	d2,d2
0000642E 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006432 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006436                            ; End of function BgScrollSpeed
00006436                            
00006436                            ; ===========================================================================
00006436 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
0000643A 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
0000643E 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006442 0000                       		dc.w BgScroll_End-BgScroll_Index
00006444                            ; ===========================================================================
00006444                            
00006444                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006444 42B8 F708                  		clr.l	($FFFFF708).w
00006448 42B8 F70C                  		clr.l	($FFFFF70C).w
0000644C 42B8 F714                  		clr.l	($FFFFF714).w
00006450 42B8 F71C                  		clr.l	($FFFFF71C).w
00006454 45F8 A800                  		lea	($FFFFA800).w,a2
00006458 429A                       		clr.l	(a2)+
0000645A 429A                       		clr.l	(a2)+
0000645C 429A                       		clr.l	(a2)+
0000645E 4E75                       		rts 
00006460                            ; ===========================================================================
00006460                            
00006460                            BgScroll_LZ:				; XREF: BgScroll_Index
00006460 E280                       		asr.l	#1,d0
00006462 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006466 4E75                       		rts	
00006468                            ; ===========================================================================
00006468                            
00006468                            BgScroll_MZ:				; XREF: BgScroll_Index
00006468 4E75                       		rts	
0000646A                            ; ===========================================================================
0000646A                            
0000646A                            BgScroll_SLZ:				; XREF: BgScroll_Index
0000646A E280                       		asr.l	#1,d0
0000646C 0640 00C0                  		addi.w	#$C0,d0
00006470 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006474 42B8 F708                  		clr.l	($FFFFF708).w
00006478 4E75                       		rts	
0000647A                            ; ===========================================================================
0000647A                            
0000647A                            BgScroll_SYZ:				; XREF: BgScroll_Index
0000647A E980                       		asl.l	#4,d0
0000647C 2400                       		move.l	d0,d2
0000647E E380                       		asl.l	#1,d0
00006480 D082                       		add.l	d2,d0
00006482 E080                       		asr.l	#8,d0
00006484 5240                       		addq.w	#1,d0
00006486 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000648A 42B8 F708                  		clr.l	($FFFFF708).w
0000648E 4E75                       		rts	
00006490                            ; ===========================================================================
00006490                            
00006490                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006490 0240 07F8                  		andi.w	#$7F8,d0
00006494 E640                       		asr.w	#3,d0
00006496 5240                       		addq.w	#1,d0
00006498 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000649C 4E75                       		rts	
0000649E                            ; ===========================================================================
0000649E                            
0000649E                            BgScroll_End:				; XREF: BgScroll_Index
0000649E 3038 F700                  		move.w	($FFFFF700).w,d0
000064A2 E240                       		asr.w	#1,d0
000064A4 31C0 F708                  		move.w	d0,($FFFFF708).w
000064A8 31C0 F710                  		move.w	d0,($FFFFF710).w
000064AC E440                       		asr.w	#2,d0
000064AE 3200                       		move.w	d0,d1
000064B0 D040                       		add.w	d0,d0
000064B2 D041                       		add.w	d1,d0
000064B4 31C0 F718                  		move.w	d0,($FFFFF718).w
000064B8 42B8 F70C                  		clr.l	($FFFFF70C).w
000064BC 42B8 F714                  		clr.l	($FFFFF714).w
000064C0 42B8 F71C                  		clr.l	($FFFFF71C).w
000064C4 45F8 A800                  		lea	($FFFFA800).w,a2
000064C8 429A                       		clr.l	(a2)+
000064CA 429A                       		clr.l	(a2)+
000064CC 429A                       		clr.l	(a2)+
000064CE 4E75                       		rts
000064D0                            
000064D0                            ; ---------------------------------------------------------------------------
000064D0                            ; Background layer deformation subroutines
000064D0                            ; ---------------------------------------------------------------------------
000064D0                            
000064D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000064D0                            
000064D0                            
000064D0                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
000064D0 4A38 F744                  		tst.b	($FFFFF744).w
000064D4 6700                       		beq.s	loc_628E
000064D6 4E75                       		rts	
000064D8                            ; ===========================================================================
000064D8                            
000064D8                            loc_628E:
000064D8 4278 F754                  		clr.w	($FFFFF754).w
000064DC 4278 F756                  		clr.w	($FFFFF756).w
000064E0 4278 F758                  		clr.w	($FFFFF758).w
000064E4 4278 F75A                  		clr.w	($FFFFF75A).w
000064E8 6100 0000                  		bsr.w	ScrollHoriz
000064EC 6100 0000                  		bsr.w	ScrollVertical
000064F0 6100 0000                  		bsr.w	DynScrResizeLoad
000064F4 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000064FA 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006500 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006506 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000650C 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00006512 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006518 7000                       		moveq	#0,d0
0000651A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000651E D040                       		add.w	d0,d0
00006520 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006524 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006528                            ; End of function DeformBgLayer
00006528                            
00006528                            ; ===========================================================================
00006528                            ; ---------------------------------------------------------------------------
00006528                            ; Offset index for background layer deformation	code
00006528                            ; ---------------------------------------------------------------------------
00006528 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
0000652C 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006530 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006534 0000                       		dc.w Deform_GHZ-Deform_Index
00006536                            ; ---------------------------------------------------------------------------
00006536                            ; Green	Hill Zone background layer deformation code
00006536                            ; ---------------------------------------------------------------------------
00006536                            
00006536                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006536                            
00006536                            
00006536                            Deform_GHZ:
00006536 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000653A 48C4                       		ext.l	d4
0000653C EB84                       		asl.l	#5,d4
0000653E 2204                       		move.l	d4,d1
00006540 E384                       		asl.l	#1,d4
00006542 D881                       		add.l	d1,d4
00006544 7C00                       		moveq	#0,d6
00006546 6100 0000                  		bsr.w	ScrollBlock6
0000654A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000654E 48C4                       		ext.l	d4
00006550 EF84                       		asl.l	#7,d4
00006552 7C00                       		moveq	#0,d6
00006554 6100 0000                  		bsr.w	ScrollBlock5
00006558 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000655C 3038 F704                  		move.w	($FFFFF704).w,d0
00006560 0240 07FF                  		andi.w	#$7FF,d0
00006564 EA48                       		lsr.w	#5,d0
00006566 4440                       		neg.w	d0
00006568 0640 0020                  		addi.w	#$20,d0	; ' '
0000656C 6A00                       		bpl.s	Deform_GHZ_1
0000656E 7000                       		moveq	#0,d0
00006570                            
00006570                            Deform_GHZ_1:				; XREF: Deform_GHZ
00006570 3800                       		move.w	d0,d4
00006572 31C0 F618                  		move.w	d0,($FFFFF618).w
00006576 3038 F700                  		move.w	($FFFFF700).w,d0
0000657A 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006580 6600                       		bne.s	Deform_GHZ_2
00006582 7000                       		moveq	#0,d0
00006584                            
00006584                            Deform_GHZ_2:				; XREF: Deform_GHZ
00006584 4440                       		neg.w	d0
00006586 4840                       		swap	d0
00006588 45F8 A800                  		lea	($FFFFA800).w,a2
0000658C 069A 0001 0000             		addi.l	#$10000,(a2)+
00006592 069A 0000 C000             		addi.l	#$C000,(a2)+
00006598 069A 0000 8000             		addi.l	#$8000,(a2)+
0000659E 3038 A800                  		move.w	($FFFFA800).w,d0
000065A2 D078 F718                  		add.w	($FFFFF718).w,d0
000065A6 4440                       		neg.w	d0
000065A8 323C 001F                  		move.w	#$1F,d1
000065AC 9244                       		sub.w	d4,d1
000065AE 6500                       		bcs.s	Deform_GHZ_4
000065B0                            
000065B0                            Deform_GHZ_3:				; XREF: Deform_GHZ
000065B0 22C0                       		move.l	d0,(a1)+
000065B2 51C9 FFFC                  		dbf	d1,Deform_GHZ_3
000065B6                            
000065B6                            Deform_GHZ_4:				; XREF: Deform_GHZ
000065B6 3038 A804                  		move.w	($FFFFA804).w,d0
000065BA D078 F718                  		add.w	($FFFFF718).w,d0
000065BE 4440                       		neg.w	d0
000065C0 323C 000F                  		move.w	#$F,d1
000065C4                            
000065C4                            Deform_GHZ_5:				; XREF: Deform_GHZ
000065C4 22C0                       		move.l	d0,(a1)+
000065C6 51C9 FFFC                  		dbf	d1,Deform_GHZ_5
000065CA 3038 A808                  		move.w	($FFFFA808).w,d0
000065CE D078 F718                  		add.w	($FFFFF718).w,d0
000065D2 4440                       		neg.w	d0
000065D4 323C 000F                  		move.w	#$F,d1
000065D8                            
000065D8                            Deform_GHZ_6:				; XREF: Deform_GHZ
000065D8 22C0                       		move.l	d0,(a1)+
000065DA 51C9 FFFC                  		dbf	d1,Deform_GHZ_6
000065DE 323C 002F                  		move.w	#$2F,d1	; '/'
000065E2 3038 F718                  		move.w	($FFFFF718).w,d0
000065E6 4440                       		neg.w	d0
000065E8                            
000065E8                            Deform_GHZ_7:				; XREF: Deform_GHZ
000065E8 22C0                       		move.l	d0,(a1)+
000065EA 51C9 FFFC                  		dbf	d1,Deform_GHZ_7
000065EE 323C 0027                  		move.w	#$27,d1	; '''
000065F2 3038 F710                  		move.w	($FFFFF710).w,d0
000065F6 4440                       		neg.w	d0
000065F8                            
000065F8                            Deform_GHZ_8:				; XREF: Deform_GHZ
000065F8 22C0                       		move.l	d0,(a1)+
000065FA 51C9 FFFC                  		dbf	d1,Deform_GHZ_8
000065FE 3038 F710                  		move.w	($FFFFF710).w,d0
00006602 3438 F700                  		move.w	($FFFFF700).w,d2
00006606 9440                       		sub.w	d0,d2
00006608 48C2                       		ext.l	d2
0000660A E182                       		asl.l	#8,d2
0000660C 85FC 0068                  		divs.w	#$68,d2	; 'h'
00006610 48C2                       		ext.l	d2
00006612 E182                       		asl.l	#8,d2
00006614 7600                       		moveq	#0,d3
00006616 3600                       		move.w	d0,d3
00006618 323C 0047                  		move.w	#$47,d1	; 'G'
0000661C D244                       		add.w	d4,d1
0000661E                            
0000661E                            Deform_GHZ_9:				; XREF: Deform_GHZ
0000661E 3003                       		move.w	d3,d0
00006620 4440                       		neg.w	d0
00006622 22C0                       		move.l	d0,(a1)+
00006624 4843                       		swap	d3
00006626 D682                       		add.l	d2,d3
00006628 4843                       		swap	d3
0000662A 51C9 FFF2                  		dbf	d1,Deform_GHZ_9
0000662E 4E75                       		rts	
00006630                            ; End of function Deform_GHZ
00006630                            
00006630                            ; ===========================================================================
00006630                            ; ---------------------------------------------------------------------------
00006630                            ; Scroll routine for Labyrinth Zone - optimised by MarkeyJester
00006630                            ; ---------------------------------------------------------------------------
00006630                            
00006630                            Deform_LZ:
00006630 7007                       		moveq	#$07,d0					; prepare multiplication 100 / 2 for BG scrolling
00006632 3838 F73A                  		move.w	($FFFFF73A).w,d4			; load horizontal movement distance (Since last frame)
00006636 48C4                       		ext.l	d4					; extend to long-word signed
00006638 E1A4                       		asl.l	d0,d4					; align as fixed point 16, but divide by 2 for BG
0000663A 3A38 F73C                  		move.w	($FFFFF73C).w,d5			; load vertical movement distance (Since last frame)
0000663E 48C5                       		ext.l	d5					; extend to long-word signed
00006640 E1A5                       		asl.l	d0,d5					; align as fixed point 16, but divide by 2 for BG
00006642 6100 0000                  		bsr.w	ScrollBlock1				; adjust BG scroll positions (and set draw code direction flags)
00006646 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w		; set BG V-scroll position
0000664C 43F8 CC00                  		lea	($FFFFCC00).w,a1			; load H-scroll buffer
00006650 3038 F700                  		move.w	($FFFFF700).w,d0			; load FG X position
00006654 4440                       		neg.w	d0					; reverse
00006656 4840                       		swap	d0					; send to upper word
00006658 3038 F708                  		move.w	($FFFFF708).w,d0			; load BG X position
0000665C 4440                       		neg.w	d0					; reverse
0000665E 7600                       		moveq	#$00,d3					; clear d3
00006660 1638 F7D8                  		move.b	($FFFFF7D8).w,d3			; load wave-scroll timer
00006664 0678 0080 F7D8             		addi.w	#$0080,($FFFFF7D8).w			; increase wave-scroll timer
0000666A 343C 00E0                  		move.w	#$00E0,d2				; prepare water-line count
0000666E 3238 F646                  		move.w	($FFFFF646).w,d1			; load water line position
00006672 9278 F704                  		sub.w	($FFFFF704).w,d1			; minus FG Y position
00006676 6B00                       		bmi.s	DLZ_Water				; if the screen is already underwater, branch
00006678 B242                       		cmp.w	d2,d1					; is the water line below the screen?
0000667A 6F00                       		ble.s	DLZ_NoWater				; if not, branch
0000667C 3202                       		move.w	d2,d1					; set at maximum
0000667E                            
0000667E                            DLZ_NoWater:
0000667E 9441                       		sub.w	d1,d2					; subtract from water-line count
00006680 D601                       		add.b	d1,d3					; advance scroll wave timer to correct amount
00006682 5301                       		subq.b	#$01,d1					; decrease above water count
00006684 6500                       		bcs.s	DLZ_Water				; if finished, branch
00006686                            
00006686                            DLZ_Above:
00006686 22C0                       		move.l	d0,(a1)+				; save scroll position to buffer
00006688 51C9 FFFC                  		dbf	d1,DLZ_Above				; repeat for all above water lines
0000668C                            
0000668C                            DLZ_Water:
0000668C 5302                       		subq.b	#$01,d2					; decrease below water count
0000668E 6500                       		bcs.s	DLZ_Finish				; if finished, branch
00006690 3200                       		move.w	d0,d1					; copy BG position back to d1
00006692 4840                       		swap	d0					; move FG position back to lower word in d0
00006694 3803                       		move.w	d3,d4					; copy sroll timer for BG use
00006696 D638 F705                  		add.b	($FFFFF704+$01).w,d3			; add FG Y position
0000669A D838 F70D                  		add.b	($FFFFF70C+$01).w,d4			; add BG Y position
0000669E D643                       		add.w	d3,d3					; multiply by word size (2)
000066A0 D844                       		add.w	d4,d4					; ''
000066A2 47F9 0000 0000             		lea	(DLZ_WaveBG).l,a3			; load beginning of BG wave data
000066A8 D6C4                       		adda.w	d4,a3					; advance to correct starting point
000066AA 1813                       		move.b	(a3),d4					; get current position byte
000066AC E404                       		asr.b	#$02,d4					; get only the position bits
000066AE 4884                       		ext.w	d4					; extend to word
000066B0 D244                       		add.w	d4,d1					; adjust BG's current position
000066B2 45FB 3000                  		lea	DLZ_WaveFG(pc,d3.w),a2			; load correct starting point of FG wave data
000066B6 1812                       		move.b	(a2),d4					; get current position byte
000066B8 E404                       		asr.b	#$02,d4					; get only the position bits
000066BA 4884                       		ext.w	d4					; extend to word
000066BC D044                       		add.w	d4,d0					; adjust FG's current position
000066BE                            
000066BE                            DLZ_Below:
000066BE D05A                       		add.w	(a2)+,d0				; alter FG horizontal position
000066C0 32C0                       		move.w	d0,(a1)+				; save to scroll buffer
000066C2 D25B                       		add.w	(a3)+,d1				; alter BG horizontal position
000066C4 32C1                       		move.w	d1,(a1)+				; save to scroll buffer
000066C6 51CA FFF6                  		dbf	d2,DLZ_Below				; repeat for all below water lines
000066CA                            
000066CA                            DLZ_Finish:
000066CA 4E75                       		rts						; return
000066CC                            
000066CC                            ; ---------------------------------------------------------------------------
000066CC                            ; Scroll data for the FG
000066CC                            ; ---------------------------------------------------------------------------
000066CC                            
000066CC                            DLZ_WaveFG:
000066CC                            		rept	$02
000066CC                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
000066CC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066CC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066CC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066CC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066CC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066CC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066CC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066CC                            		dc.w	$03FF,$FC00,$FFFF,$F800,$FBFF,$F400,$F400,$F400,$F401,$F800,$F801,$FC00,$FC01,$0000,$0000,$0000
000066CC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066CC                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
000066CC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066CC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066CC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066CC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066CC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066CC 0001 0400 0401 0800 0801+  		endr
00006ACC                            
00006ACC                            ; ---------------------------------------------------------------------------
00006ACC                            ; Scroll data for the BG
00006ACC                            ; ---------------------------------------------------------------------------
00006ACC                            
00006ACC                            DLZ_WaveBG:	rept	$04
00006ACC                            		dc.w	$FC01,$0000,$0000,$0000,$0000,$0000,$0001,$0400,$0400,$0400,$0400,$0401,$0800,$0800,$0800,$0800
00006ACC                            		dc.w	$0800,$0800,$0801,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00
00006ACC                            		dc.w	$0C01,$13FF,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0FFF
00006ACC                            		dc.w	$0800,$0800,$0800,$0800,$0800,$0800,$0BFF,$0400,$0400,$0400,$0400,$07FF,$0000,$0000,$0000,$0000
00006ACC                            		dc.w	$0000,$03FF,$FC00,$FC00,$FC00,$FC00,$FFFF,$F800,$F800,$F800,$F800,$FBFF,$F400,$F400,$F400,$F400
00006ACC                            		dc.w	$F400,$F400,$F7FF,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000
00006ACC                            		dc.w	$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F001
00006ACC                            		dc.w	$F400,$F400,$F400,$F400,$F400,$F400,$F401,$F800,$F800,$F800,$F800,$F801,$FC00,$FC00,$FC00,$FC00
00006ACC FC01 0000 0000 0000 0000+  		endr
00006ECC                            
00006ECC                            ; ===========================================================================
00006ECC                            
00006ECC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006ECC                            
00006ECC                            
00006ECC                            Deform_MZ:
00006ECC 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006ED0 48C4                       		ext.l	d4
00006ED2 ED84                       		asl.l	#6,d4
00006ED4 2204                       		move.l	d4,d1
00006ED6 E384                       		asl.l	#1,d4
00006ED8 D881                       		add.l	d1,d4
00006EDA 7C02                       		moveq	#2,d6
00006EDC 6100 0000                  		bsr.w	ScrollBlock4
00006EE0 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006EE4 48C4                       		ext.l	d4
00006EE6 ED84                       		asl.l	#6,d4
00006EE8 7C06                       		moveq	#6,d6
00006EEA 6100 0000                  		bsr.w	ScrollBlock6
00006EEE 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006EF2 48C4                       		ext.l	d4
00006EF4 EF84                       		asl.l	#7,d4
00006EF6 7C04                       		moveq	#4,d6
00006EF8 6100 0000                  		bsr.w	ScrollBlock5
00006EFC 303C 0200                  		move.w	#$200,d0
00006F00 3238 F704                  		move.w	($FFFFF704).w,d1
00006F04 0441 01C8                  		subi.w	#$1C8,d1
00006F08 6500                       		bcs.s	Deform_MZ_1
00006F0A 3401                       		move.w	d1,d2
00006F0C D241                       		add.w	d1,d1
00006F0E D242                       		add.w	d2,d1
00006F10 E441                       		asr.w	#2,d1
00006F12 D041                       		add.w	d1,d0
00006F14                            
00006F14                            Deform_MZ_1:				; XREF: Deform_MZ
00006F14 31C0 F714                  		move.w	d0,($FFFFF714).w
00006F18 31C0 F71C                  		move.w	d0,($FFFFF71C).w
00006F1C 6100 0000                  		bsr.w	ScrollBlock3
00006F20 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006F26 1038 F756                  		move.b	($FFFFF756).w,d0
00006F2A 8038 F758                  		or.b	($FFFFF758).w,d0
00006F2E 8138 F75A                  		or.b	d0,($FFFFF75A).w
00006F32 4238 F756                  		clr.b	($FFFFF756).w
00006F36 4238 F758                  		clr.b	($FFFFF758).w
00006F3A 43F8 A800                  		lea	($FFFFA800).w,a1
00006F3E 3438 F700                  		move.w	($FFFFF700).w,d2
00006F42 4442                       		neg.w	d2
00006F44 3002                       		move.w	d2,d0
00006F46 E440                       		asr.w	#2,d0
00006F48 9042                       		sub.w	d2,d0
00006F4A 48C0                       		ext.l	d0
00006F4C E780                       		asl.l	#3,d0
00006F4E 81FC 0005                  		divs.w	#5,d0
00006F52 48C0                       		ext.l	d0
00006F54 E980                       		asl.l	#4,d0
00006F56 E180                       		asl.l	#8,d0
00006F58 7600                       		moveq	#0,d3
00006F5A 3602                       		move.w	d2,d3
00006F5C E243                       		asr.w	#1,d3
00006F5E 323C 0004                  		move.w	#4,d1
00006F62                            
00006F62                            Deform_MZ_2:				; XREF: Deform_MZ
00006F62 32C3                       		move.w	d3,(a1)+
00006F64 4843                       		swap	d3
00006F66 D680                       		add.l	d0,d3
00006F68 4843                       		swap	d3
00006F6A 51C9 FFF6                  		dbf	d1,Deform_MZ_2
00006F6E 3038 F718                  		move.w	($FFFFF718).w,d0
00006F72 4440                       		neg.w	d0
00006F74 323C 0001                  		move.w	#1,d1
00006F78                            
00006F78                            Deform_MZ_3:				; XREF: Deform_MZ
00006F78 32C0                       		move.w	d0,(a1)+
00006F7A 51C9 FFFC                  		dbf	d1,Deform_MZ_3
00006F7E 3038 F710                  		move.w	($FFFFF710).w,d0
00006F82 4440                       		neg.w	d0
00006F84 323C 0008                  		move.w	#8,d1
00006F88                            
00006F88                            Deform_MZ_4:				; XREF: Deform_MZ
00006F88 32C0                       		move.w	d0,(a1)+
00006F8A 51C9 FFFC                  		dbf	d1,Deform_MZ_4
00006F8E 3038 F708                  		move.w	($FFFFF708).w,d0
00006F92 4440                       		neg.w	d0
00006F94 323C 000F                  		move.w	#$F,d1
00006F98                            
00006F98                            Deform_MZ_5:				; XREF: Deform_MZ
00006F98 32C0                       		move.w	d0,(a1)+
00006F9A 51C9 FFFC                  		dbf	d1,Deform_MZ_5
00006F9E 45F8 A800                  		lea	($FFFFA800).w,a2
00006FA2 3038 F70C                  		move.w	($FFFFF70C).w,d0
00006FA6 0440 0200                  		subi.w	#$200,d0
00006FAA 3400                       		move.w	d0,d2
00006FAC 0C40 0100                  		cmpi.w	#$100,d0
00006FB0 6500                       		bcs.s	Deform_MZ_6
00006FB2 303C 0100                  		move.w	#$100,d0
00006FB6                            
00006FB6                            Deform_MZ_6:				; XREF: Deform_MZ
00006FB6 0240 01F0                  		andi.w	#$1F0,d0
00006FBA E648                       		lsr.w	#3,d0
00006FBC 45F2 0000                  		lea	(a2,d0.w),a2
00006FC0 6000 0000                  		bra.w	Deform_All
00006FC4                            ; ===========================================================================
00006FC4                            
00006FC4                            Deform_SLZ:
00006FC4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006FC8 48C5                       		ext.l	d5
00006FCA EF85                       		asl.l	#7,d5
00006FCC 6100 0000                  		bsr.w	ScrollBlock2
00006FD0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006FD6 43F8 A800                  		lea	($FFFFA800).w,a1
00006FDA 3438 F700                  		move.w	($FFFFF700).w,d2
00006FDE 4442                       		neg.w	d2
00006FE0 3002                       		move.w	d2,d0
00006FE2 E640                       		asr.w	#3,d0
00006FE4 9042                       		sub.w	d2,d0
00006FE6 48C0                       		ext.l	d0
00006FE8 E980                       		asl.l	#4,d0
00006FEA 81FC 001C                  		divs.w	#$1C,d0
00006FEE 48C0                       		ext.l	d0
00006FF0 E980                       		asl.l	#4,d0
00006FF2 E180                       		asl.l	#8,d0
00006FF4 7600                       		moveq	#0,d3
00006FF6 3602                       		move.w	d2,d3
00006FF8 323C 001B                  		move.w	#$1B,d1
00006FFC                            
00006FFC                            Deform_SLZ_1:				; XREF: Deform_MZ
00006FFC 32C3                       		move.w	d3,(a1)+
00006FFE 4843                       		swap	d3
00007000 D680                       		add.l	d0,d3
00007002 4843                       		swap	d3
00007004 51C9 FFF6                  		dbf	d1,Deform_SLZ_1
00007008 3002                       		move.w	d2,d0
0000700A E640                       		asr.w	#3,d0
0000700C 3200                       		move.w	d0,d1
0000700E E241                       		asr.w	#1,d1
00007010 D041                       		add.w	d1,d0
00007012 323C 0004                  		move.w	#4,d1
00007016                            
00007016                            Deform_SLZ_2:				; XREF: Deform_MZ
00007016 32C0                       		move.w	d0,(a1)+
00007018 51C9 FFFC                  		dbf	d1,Deform_SLZ_2
0000701C 3002                       		move.w	d2,d0
0000701E E440                       		asr.w	#2,d0
00007020 323C 0004                  		move.w	#4,d1
00007024                            
00007024                            Deform_SLZ_3:				; XREF: Deform_MZ
00007024 32C0                       		move.w	d0,(a1)+
00007026 51C9 FFFC                  		dbf	d1,Deform_SLZ_3
0000702A 3002                       		move.w	d2,d0
0000702C E240                       		asr.w	#1,d0
0000702E 323C 001D                  		move.w	#$1D,d1
00007032                            
00007032                            Deform_SLZ_4:				; XREF: Deform_MZ
00007032 32C0                       		move.w	d0,(a1)+
00007034 51C9 FFFC                  		dbf	d1,Deform_SLZ_4
00007038 45F8 A800                  		lea	($FFFFA800).w,a2
0000703C 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007040 3400                       		move.w	d0,d2
00007042 0440 00C0                  		subi.w	#$C0,d0	; 'À'
00007046 0240 03F0                  		andi.w	#$3F0,d0
0000704A E648                       		lsr.w	#3,d0
0000704C 45F2 0000                  		lea	(a2,d0.w),a2
00007050                            
00007050                            Deform_All:				; XREF: Deform_MZ, Deform_SYZ, ...
00007050 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007054 323C 000E                  		move.w	#$E,d1
00007058 3038 F700                  		move.w	($FFFFF700).w,d0
0000705C 4440                       		neg.w	d0
0000705E 4840                       		swap	d0
00007060 0242 000F                  		andi.w	#$F,d2
00007064 D442                       		add.w	d2,d2
00007066 301A                       		move.w	(a2)+,d0
00007068 4EFB 2000                  		jmp	Deform_All_2(pc,d2.w)
0000706C                            ; End of function Deform_MZ
0000706C                            
0000706C                            ; ===========================================================================
0000706C                            
0000706C                            Deform_All_1:				; XREF: Deform_All
0000706C 301A                       		move.w	(a2)+,d0
0000706E                            
0000706E                            Deform_All_2:
0000706E 22C0                       		move.l	d0,(a1)+
00007070 22C0                       		move.l	d0,(a1)+
00007072 22C0                       		move.l	d0,(a1)+
00007074 22C0                       		move.l	d0,(a1)+
00007076 22C0                       		move.l	d0,(a1)+
00007078 22C0                       		move.l	d0,(a1)+
0000707A 22C0                       		move.l	d0,(a1)+
0000707C 22C0                       		move.l	d0,(a1)+
0000707E 22C0                       		move.l	d0,(a1)+
00007080 22C0                       		move.l	d0,(a1)+
00007082 22C0                       		move.l	d0,(a1)+
00007084 22C0                       		move.l	d0,(a1)+
00007086 22C0                       		move.l	d0,(a1)+
00007088 22C0                       		move.l	d0,(a1)+
0000708A 22C0                       		move.l	d0,(a1)+
0000708C 22C0                       		move.l	d0,(a1)+
0000708E 51C9 FFDC                  		dbf	d1,Deform_All_1
00007092 4E75                       		rts	
00007094                            
00007094                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007094                            
00007094                            
00007094                            Deform_SYZ:
00007094 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007098 48C5                       		ext.l	d5
0000709A E985                       		asl.l	#4,d5
0000709C 2205                       		move.l	d5,d1
0000709E E385                       		asl.l	#1,d5
000070A0 DA81                       		add.l	d1,d5
000070A2 6100 0000                  		bsr.w	ScrollBlock2
000070A6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000070AC 43F8 A800                  		lea	($FFFFA800).w,a1
000070B0 3438 F700                  		move.w	($FFFFF700).w,d2
000070B4 4442                       		neg.w	d2
000070B6 3002                       		move.w	d2,d0
000070B8 E640                       		asr.w	#3,d0
000070BA 9042                       		sub.w	d2,d0
000070BC 48C0                       		ext.l	d0
000070BE E780                       		asl.l	#3,d0
000070C0 81FC 0008                  		divs.w	#8,d0
000070C4 48C0                       		ext.l	d0
000070C6 E980                       		asl.l	#4,d0
000070C8 E180                       		asl.l	#8,d0
000070CA 7600                       		moveq	#0,d3
000070CC 3602                       		move.w	d2,d3
000070CE E243                       		asr.w	#1,d3
000070D0 323C 0007                  		move.w	#7,d1
000070D4                            
000070D4                            Deform_SYZ_1:				; XREF: Deform_SYZ
000070D4 32C3                       		move.w	d3,(a1)+
000070D6 4843                       		swap	d3
000070D8 D680                       		add.l	d0,d3
000070DA 4843                       		swap	d3
000070DC 51C9 FFF6                  		dbf	d1,Deform_SYZ_1
000070E0 3002                       		move.w	d2,d0
000070E2 E640                       		asr.w	#3,d0
000070E4 323C 0004                  		move.w	#4,d1
000070E8                            
000070E8                            Deform_SYZ_2:				; XREF: Deform_SYZ
000070E8 32C0                       		move.w	d0,(a1)+
000070EA 51C9 FFFC                  		dbf	d1,Deform_SYZ_2
000070EE 3002                       		move.w	d2,d0
000070F0 E440                       		asr.w	#2,d0
000070F2 323C 0005                  		move.w	#5,d1
000070F6                            
000070F6                            Deform_SYZ_3:				; XREF: Deform_SYZ
000070F6 32C0                       		move.w	d0,(a1)+
000070F8 51C9 FFFC                  		dbf	d1,Deform_SYZ_3
000070FC 3002                       		move.w	d2,d0
000070FE 3202                       		move.w	d2,d1
00007100 E241                       		asr.w	#1,d1
00007102 9041                       		sub.w	d1,d0
00007104 48C0                       		ext.l	d0
00007106 E980                       		asl.l	#4,d0
00007108 81FC 000E                  		divs.w	#$E,d0
0000710C 48C0                       		ext.l	d0
0000710E E980                       		asl.l	#4,d0
00007110 E180                       		asl.l	#8,d0
00007112 7600                       		moveq	#0,d3
00007114 3602                       		move.w	d2,d3
00007116 E243                       		asr.w	#1,d3
00007118 323C 000D                  		move.w	#$D,d1
0000711C                            
0000711C                            Deform_SYZ_4:				; XREF: Deform_SYZ
0000711C 32C3                       		move.w	d3,(a1)+
0000711E 4843                       		swap	d3
00007120 D680                       		add.l	d0,d3
00007122 4843                       		swap	d3
00007124 51C9 FFF6                  		dbf	d1,Deform_SYZ_4
00007128 45F8 A800                  		lea	($FFFFA800).w,a2
0000712C 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007130 3400                       		move.w	d0,d2
00007132 0240 01F0                  		andi.w	#$1F0,d0
00007136 E648                       		lsr.w	#3,d0
00007138 45F2 0000                  		lea	(a2,d0.w),a2
0000713C 6000 FF12                  		bra.w	Deform_All
00007140                            ; End of function Deform_SYZ
00007140                            
00007140                            
00007140                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007140                            
00007140                            
00007140                            Deform_SBZ:
00007140 4A38 FE11                  		tst.b	($FFFFFE11).w
00007144 6600 0000                  		bne.w	Deform_SBZ_Act2
00007148 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000714C 48C4                       		ext.l	d4
0000714E EF84                       		asl.l	#7,d4
00007150 7C02                       		moveq	#2,d6
00007152 6100 0000                  		bsr.w	ScrollBlock4
00007156 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000715A 48C4                       		ext.l	d4
0000715C ED84                       		asl.l	#6,d4
0000715E 7C06                       		moveq	#6,d6
00007160 6100 0000                  		bsr.w	ScrollBlock6
00007164 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007168 48C4                       		ext.l	d4
0000716A EB84                       		asl.l	#5,d4
0000716C 2204                       		move.l	d4,d1
0000716E E384                       		asl.l	#1,d4
00007170 D881                       		add.l	d1,d4
00007172 7C04                       		moveq	#4,d6
00007174 6100 0000                  		bsr.w	ScrollBlock5
00007178 7800                       		moveq	#0,d4
0000717A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000717E 48C5                       		ext.l	d5
00007180 EB85                       		asl.l	#5,d5
00007182 6100 0000                  		bsr.w	ScrollBlock1_2
00007186 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000718A 31C0 F714                  		move.w	d0,($FFFFF714).w
0000718E 31C0 F71C                  		move.w	d0,($FFFFF71C).w
00007192 31C0 F618                  		move.w	d0,($FFFFF618).w
00007196 1038 F756                  		move.b	($FFFFF756).w,d0
0000719A 8038 F75A                  		or.b	($FFFFF75A).w,d0
0000719E 8138 F758                  		or.b	d0,($FFFFF758).w
000071A2 4238 F756                  		clr.b	($FFFFF756).w
000071A6 4238 F75A                  		clr.b	($FFFFF75A).w
000071AA 43F8 A800                  		lea	($FFFFA800).w,a1
000071AE 3438 F700                  		move.w	($FFFFF700).w,d2
000071B2 4442                       		neg.w	d2
000071B4 E442                       		asr.w	#2,d2
000071B6 3002                       		move.w	d2,d0
000071B8 E240                       		asr.w	#1,d0
000071BA 9042                       		sub.w	d2,d0
000071BC 48C0                       		ext.l	d0
000071BE E780                       		asl.l	#3,d0
000071C0 81FC 0004                  		divs.w	#4,d0
000071C4 48C0                       		ext.l	d0
000071C6 E980                       		asl.l	#4,d0
000071C8 E180                       		asl.l	#8,d0
000071CA 7600                       		moveq	#0,d3
000071CC 3602                       		move.w	d2,d3
000071CE 323C 0003                  		move.w	#3,d1
000071D2                            
000071D2                            Deform_SBZ_1:				; XREF: Deform_SBZ
000071D2 32C3                       		move.w	d3,(a1)+
000071D4 4843                       		swap	d3
000071D6 D680                       		add.l	d0,d3
000071D8 4843                       		swap	d3
000071DA 51C9 FFF6                  		dbf	d1,Deform_SBZ_1
000071DE 3038 F718                  		move.w	($FFFFF718).w,d0
000071E2 4440                       		neg.w	d0
000071E4 323C 0009                  		move.w	#9,d1
000071E8                            
000071E8                            Deform_SBZ_2:				; XREF: Deform_SBZ
000071E8 32C0                       		move.w	d0,(a1)+
000071EA 51C9 FFFC                  		dbf	d1,Deform_SBZ_2
000071EE 3038 F710                  		move.w	($FFFFF710).w,d0
000071F2 4440                       		neg.w	d0
000071F4 323C 0006                  		move.w	#6,d1
000071F8                            
000071F8                            Deform_SBZ_3:				; XREF: Deform_SBZ
000071F8 32C0                       		move.w	d0,(a1)+
000071FA 51C9 FFFC                  		dbf	d1,Deform_SBZ_3
000071FE 3038 F708                  		move.w	($FFFFF708).w,d0
00007202 4440                       		neg.w	d0
00007204 323C 000A                  		move.w	#$A,d1
00007208                            
00007208                            Deform_SBZ_4:				; XREF: Deform_SBZ
00007208 32C0                       		move.w	d0,(a1)+
0000720A 51C9 FFFC                  		dbf	d1,Deform_SBZ_4
0000720E 45F8 A800                  		lea	($FFFFA800).w,a2
00007212 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007216 3400                       		move.w	d0,d2
00007218 0240 01F0                  		andi.w	#$1F0,d0
0000721C E648                       		lsr.w	#3,d0
0000721E 45F2 0000                  		lea	(a2,d0.w),a2
00007222 6000 FE2C                  		bra.w	Deform_All
00007226                            ; ===========================================================================
00007226                            
00007226                            Deform_SBZ_Act2:			; XREF: Deform_SBZ
00007226 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000722A 48C4                       		ext.l	d4
0000722C ED84                       		asl.l	#6,d4
0000722E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007232 48C5                       		ext.l	d5
00007234 EB85                       		asl.l	#5,d5
00007236 6100 0000                  		bsr.w	ScrollBlock1
0000723A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007240 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007244 323C 00DF                  		move.w	#$DF,d1	; 'ß'
00007248 3038 F700                  		move.w	($FFFFF700).w,d0
0000724C 4440                       		neg.w	d0
0000724E 4840                       		swap	d0
00007250 3038 F708                  		move.w	($FFFFF708).w,d0
00007254 4440                       		neg.w	d0
00007256                            
00007256                            Deform_SBZ_Act2_1:			; XREF: Deform_SBZ
00007256 22C0                       		move.l	d0,(a1)+
00007258 51C9 FFFC                  		dbf	d1,Deform_SBZ_Act2_1
0000725C 4E75                       		rts	
0000725E                            ; End of function Deform_SBZ
0000725E                            
0000725E                            ; ---------------------------------------------------------------------------
0000725E                            ; Subroutine to	scroll the level horizontally as Sonic moves
0000725E                            ; ---------------------------------------------------------------------------
0000725E                            
0000725E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000725E                            
0000725E                            
0000725E                            ScrollHoriz:				; XREF: DeformBgLayer
0000725E 3838 F700                  		move.w	($FFFFF700).w,d4
00007262 6100                       		bsr.s	ScrollHoriz2
00007264 3038 F700                  		move.w	($FFFFF700).w,d0
00007268 0240 0010                  		andi.w	#$10,d0
0000726C 1238 F74A                  		move.b	($FFFFF74A).w,d1
00007270 B300                       		eor.b	d1,d0
00007272 6600                       		bne.s	locret_65B0
00007274 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
0000727A 3038 F700                  		move.w	($FFFFF700).w,d0
0000727E 9044                       		sub.w	d4,d0
00007280 6A00                       		bpl.s	loc_65AA
00007282 08F8 0002 F754             		bset	#2,($FFFFF754).w
00007288 4E75                       		rts	
0000728A                            ; ===========================================================================
0000728A                            
0000728A                            loc_65AA:
0000728A 08F8 0003 F754             		bset	#3,($FFFFF754).w
00007290                            
00007290                            locret_65B0:
00007290 4E75                       		rts	
00007292                            ; End of function ScrollHoriz
00007292                            
00007292                            
00007292                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007292                            
00007292                            
00007292                            ScrollHoriz2:				; XREF: ScrollHoriz
00007292 3038 D008                  		move.w	($FFFFD008).w,d0
00007296 9078 F700                  		sub.w	($FFFFF700).w,d0
0000729A 0440 0090                  		subi.w	#$90,d0
0000729E 6B00                       		bmi.s	loc_65F6				; cs to mi (for negative)
000072A0 0440 0010                  		subi.w	#$10,d0
000072A4 6A00                       		bpl.s	loc_65CC				; cc to pl (for negative)
000072A6 4278 F73A                  		clr.w	($FFFFF73A).w
000072AA 4E75                       		rts
000072AC                            ; ===========================================================================
000072AC                            
000072AC                            loc_65CC:
000072AC 0C40 0010                  		cmpi.w	#$10,d0
000072B0 6500                       		bcs.s	loc_65D6
000072B2 303C 0010                  		move.w	#$10,d0
000072B6                            
000072B6                            loc_65D6:
000072B6 D078 F700                  		add.w	($FFFFF700).w,d0
000072BA B078 F72A                  		cmp.w	($FFFFF72A).w,d0
000072BE 6D00                       		blt.s	loc_65E4
000072C0 3038 F72A                  		move.w	($FFFFF72A).w,d0
000072C4                            
000072C4                            loc_65E4:
000072C4 3200                       		move.w	d0,d1
000072C6 9278 F700                  		sub.w	($FFFFF700).w,d1
000072CA E141                       		asl.w	#8,d1
000072CC 31C0 F700                  		move.w	d0,($FFFFF700).w
000072D0 31C1 F73A                  		move.w	d1,($FFFFF73A).w
000072D4 4E75                       		rts	
000072D6                            ; ===========================================================================
000072D6                            
000072D6                            loc_65F6:				; XREF: ScrollHoriz2
000072D6 D078 F700                  		add.w	($FFFFF700).w,d0
000072DA B078 F728                  		cmp.w	($FFFFF728).w,d0
000072DE 6EE4                       		bgt.s	loc_65E4
000072E0 3038 F728                  		move.w	($FFFFF728).w,d0
000072E4 60DE                       		bra.s	loc_65E4
000072E6                            ; End of function ScrollHoriz2
000072E6                            
000072E6                            ; ===========================================================================
000072E6 4A40                       		tst.w	d0
000072E8 6A00                       		bpl.s	loc_6610
000072EA 303C FFFE                  		move.w	#-2,d0
000072EE 60E6                       		bra.s	loc_65F6
000072F0                            ; ===========================================================================
000072F0                            
000072F0                            loc_6610:
000072F0 303C 0002                  		move.w	#2,d0
000072F4 60B6                       		bra.s	loc_65CC
000072F6                            
000072F6                            ; ---------------------------------------------------------------------------
000072F6                            ; Subroutine to	scroll the level vertically as Sonic moves
000072F6                            ; ---------------------------------------------------------------------------
000072F6                            
000072F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072F6                            
000072F6                            
000072F6                            ScrollVertical:				; XREF: DeformBgLayer
000072F6 7200                       		moveq	#0,d1
000072F8 3038 D00C                  		move.w	($FFFFD00C).w,d0
000072FC 9078 F704                  		sub.w	($FFFFF704).w,d0
00007300 0838 0002 D022             		btst	#2,($FFFFD022).w
00007306 6700                       		beq.s	loc_662A
00007308 5B40                       		subq.w	#5,d0
0000730A                            
0000730A                            loc_662A:
0000730A 0838 0001 D022             		btst	#1,($FFFFD022).w
00007310 6700                       		beq.s	loc_664A
00007312 0640 0020                  		addi.w	#$20,d0
00007316 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000731A 6500                       		bcs.s	loc_6696
0000731C 0440 0040                  		subi.w	#$40,d0
00007320 6400                       		bcc.s	loc_6696
00007322 4A38 F75C                  		tst.b	($FFFFF75C).w
00007326 6600                       		bne.s	loc_66A8
00007328 6000                       		bra.s	loc_6656
0000732A                            ; ===========================================================================
0000732A                            
0000732A                            loc_664A:
0000732A 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000732E 6600                       		bne.s	loc_665C
00007330 4A38 F75C                  		tst.b	($FFFFF75C).w
00007334 6600                       		bne.s	loc_66A8
00007336                            
00007336                            loc_6656:
00007336 4278 F73C                  		clr.w	($FFFFF73C).w
0000733A 4E75                       		rts	
0000733C                            ; ===========================================================================
0000733C                            
0000733C                            loc_665C:
0000733C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00007342 6600                       		bne.s	loc_6684
00007344 3238 D020                  		move.w	($FFFFD020).w,d1
00007348 6A00                       		bpl.s	loc_666C
0000734A 4441                       		neg.w	d1
0000734C                            
0000734C                            loc_666C:
0000734C 0C41 0800                  		cmpi.w	#$800,d1
00007350 6400                       		bcc.s	loc_6696
00007352 323C 0600                  		move.w	#$600,d1
00007356 0C40 0006                  		cmpi.w	#6,d0
0000735A 6E00                       		bgt.s	loc_66F6
0000735C 0C40 FFFA                  		cmpi.w	#-6,d0
00007360 6D00                       		blt.s	loc_66C0
00007362 6000                       		bra.s	loc_66AE
00007364                            ; ===========================================================================
00007364                            
00007364                            loc_6684:
00007364 323C 0200                  		move.w	#$200,d1
00007368 0C40 0002                  		cmpi.w	#2,d0
0000736C 6E00                       		bgt.s	loc_66F6
0000736E 0C40 FFFE                  		cmpi.w	#-2,d0
00007372 6D00                       		blt.s	loc_66C0
00007374 6000                       		bra.s	loc_66AE
00007376                            ; ===========================================================================
00007376                            
00007376                            loc_6696:
00007376 323C 1000                  		move.w	#$1000,d1
0000737A 0C40 0010                  		cmpi.w	#$10,d0
0000737E 6E00                       		bgt.s	loc_66F6
00007380 0C40 FFF0                  		cmpi.w	#-$10,d0
00007384 6D00                       		blt.s	loc_66C0
00007386 6000                       		bra.s	loc_66AE
00007388                            ; ===========================================================================
00007388                            
00007388                            loc_66A8:
00007388 7000                       		moveq	#0,d0
0000738A 11C0 F75C                  		move.b	d0,($FFFFF75C).w
0000738E                            
0000738E                            loc_66AE:
0000738E 7200                       		moveq	#0,d1
00007390 3200                       		move.w	d0,d1
00007392 D278 F704                  		add.w	($FFFFF704).w,d1
00007396 4A40                       		tst.w	d0
00007398 6A00 0000                  		bpl.w	loc_6700
0000739C 6000 0000                  		bra.w	loc_66CC
000073A0                            ; ===========================================================================
000073A0                            
000073A0                            loc_66C0:
000073A0 4441                       		neg.w	d1
000073A2 48C1                       		ext.l	d1
000073A4 E181                       		asl.l	#8,d1
000073A6 D2B8 F704                  		add.l	($FFFFF704).w,d1
000073AA 4841                       		swap	d1
000073AC                            
000073AC                            loc_66CC:
000073AC B278 F72C                  		cmp.w	($FFFFF72C).w,d1
000073B0 6E00                       		bgt.s	loc_6724
000073B2 0C41 FF00                  		cmpi.w	#-$100,d1
000073B6 6E00                       		bgt.s	loc_66F0
000073B8 0241 07FF                  		andi.w	#$7FF,d1
000073BC 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000073C2 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
000073C8 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000073CE 6000                       		bra.s	loc_6724
000073D0                            ; ===========================================================================
000073D0                            
000073D0                            loc_66F0:
000073D0 3238 F72C                  		move.w	($FFFFF72C).w,d1
000073D4 6000                       		bra.s	loc_6724
000073D6                            ; ===========================================================================
000073D6                            
000073D6                            loc_66F6:
000073D6 48C1                       		ext.l	d1
000073D8 E181                       		asl.l	#8,d1
000073DA D2B8 F704                  		add.l	($FFFFF704).w,d1
000073DE 4841                       		swap	d1
000073E0                            
000073E0                            loc_6700:
000073E0 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
000073E4 6D00                       		blt.s	loc_6724
000073E6 0441 0800                  		subi.w	#$800,d1
000073EA 6500                       		bcs.s	loc_6720
000073EC 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000073F2 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
000073F8 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000073FE 6000                       		bra.s	loc_6724
00007400                            ; ===========================================================================
00007400                            
00007400                            loc_6720:
00007400 3238 F72E                  		move.w	($FFFFF72E).w,d1
00007404                            
00007404                            loc_6724:
00007404 3838 F704                  		move.w	($FFFFF704).w,d4
00007408 4841                       		swap	d1
0000740A 2601                       		move.l	d1,d3
0000740C 96B8 F704                  		sub.l	($FFFFF704).w,d3
00007410 E09B                       		ror.l	#8,d3
00007412 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00007416 21C1 F704                  		move.l	d1,($FFFFF704).w
0000741A 3038 F704                  		move.w	($FFFFF704).w,d0
0000741E 0240 0010                  		andi.w	#$10,d0
00007422 1238 F74B                  		move.b	($FFFFF74B).w,d1
00007426 B300                       		eor.b	d1,d0
00007428 6600                       		bne.s	locret_6766
0000742A 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00007430 3038 F704                  		move.w	($FFFFF704).w,d0
00007434 9044                       		sub.w	d4,d0
00007436 6A00                       		bpl.s	loc_6760
00007438 08F8 0000 F754             		bset	#0,($FFFFF754).w
0000743E 4E75                       		rts	
00007440                            ; ===========================================================================
00007440                            
00007440                            loc_6760:
00007440 08F8 0001 F754             		bset	#1,($FFFFF754).w
00007446                            
00007446                            locret_6766:
00007446 4E75                       		rts	
00007448                            ; End of function ScrollVertical
00007448                            
00007448                            
00007448                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007448                            
00007448                            
00007448                            ScrollBlock1:				; XREF: Deform_LZ, Deform_SBZ
00007448 2438 F708                  		move.l	($FFFFF708).w,d2
0000744C 2002                       		move.l	d2,d0
0000744E D084                       		add.l	d4,d0
00007450 21C0 F708                  		move.l	d0,($FFFFF708).w
00007454 2200                       		move.l	d0,d1
00007456 4841                       		swap	d1
00007458 0241 0010                  		andi.w	#$10,d1
0000745C 1638 F74C                  		move.b	($FFFFF74C).w,d3
00007460 B701                       		eor.b	d3,d1
00007462 6600                       		bne.s	ScrollBlock1_2
00007464 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
0000746A 9082                       		sub.l	d2,d0
0000746C 6A00                       		bpl.s	ScrollBlock1_1
0000746E 08F8 0002 F756             		bset	#2,($FFFFF756).w
00007474 6000                       		bra.s	ScrollBlock1_2
00007476                            ; ===========================================================================
00007476                            
00007476                            ScrollBlock1_1:				; XREF: ScrollBlock1
00007476 08F8 0003 F756             		bset	#3,($FFFFF756).w
0000747C                            
0000747C                            ScrollBlock1_2:				; XREF: ScrollBlock1, Deform_SBZ, ...
0000747C 2638 F70C                  		move.l	($FFFFF70C).w,d3
00007480 2003                       		move.l	d3,d0
00007482 D085                       		add.l	d5,d0
00007484 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00007488 2200                       		move.l	d0,d1
0000748A 4841                       		swap	d1
0000748C 0241 0010                  		andi.w	#$10,d1
00007490 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007494 B501                       		eor.b	d2,d1
00007496 6600                       		bne.s	ScrollBlock1_End
00007498 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000749E 9083                       		sub.l	d3,d0
000074A0 6A00                       		bpl.s	ScrollBlock1_3
000074A2 08F8 0000 F756             		bset	#0,($FFFFF756).w
000074A8 4E75                       		rts	
000074AA                            ; ===========================================================================
000074AA                            
000074AA                            ScrollBlock1_3:				; XREF: ScrollBlock1
000074AA 08F8 0001 F756             		bset	#1,($FFFFF756).w
000074B0                            
000074B0                            ScrollBlock1_End:			; XREF: ScrollBlock1
000074B0 4E75                       		rts	
000074B2                            ; End of function ScrollBlock1
000074B2                            
000074B2                            
000074B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074B2                            
000074B2                            
000074B2                            ScrollBlock2:				; XREF: Deform_MZ, Deform_SYZ
000074B2 2638 F70C                  		move.l	($FFFFF70C).w,d3
000074B6 2003                       		move.l	d3,d0
000074B8 D085                       		add.l	d5,d0
000074BA 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000074BE 2200                       		move.l	d0,d1
000074C0 4841                       		swap	d1
000074C2 0241 0010                  		andi.w	#$10,d1
000074C6 1438 F74D                  		move.b	($FFFFF74D).w,d2
000074CA B501                       		eor.b	d2,d1
000074CC 6600                       		bne.s	ScrollBlock2_End
000074CE 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000074D4 9083                       		sub.l	d3,d0
000074D6 6A00                       		bpl.s	ScrollBlock2_1
000074D8 08F8 0004 F756             		bset	#4,($FFFFF756).w
000074DE 4E75                       		rts	
000074E0                            ; ===========================================================================
000074E0                            
000074E0                            ScrollBlock2_1:				; XREF: ScrollBlock2
000074E0 08F8 0005 F756             		bset	#5,($FFFFF756).w
000074E6                            
000074E6                            ScrollBlock2_End:			; XREF: ScrollBlock2
000074E6 4E75                       		rts	
000074E8                            ; End of function ScrollBlock2
000074E8                            
000074E8                            
000074E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074E8                            
000074E8                            
000074E8                            ScrollBlock3:				; XREF: Deform_MZ
000074E8 3638 F70C                  		move.w	($FFFFF70C).w,d3
000074EC 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000074F0 3200                       		move.w	d0,d1
000074F2 0241 0010                  		andi.w	#$10,d1
000074F6 1438 F74D                  		move.b	($FFFFF74D).w,d2
000074FA B501                       		eor.b	d2,d1
000074FC 6600                       		bne.s	ScrollBlock3_End
000074FE 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007504 9043                       		sub.w	d3,d0
00007506 6A00                       		bpl.s	ScrollBlock3_1
00007508 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000750E 4E75                       		rts	
00007510                            ; ===========================================================================
00007510                            
00007510                            ScrollBlock3_1:				; XREF: ScrollBlock3
00007510 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007516                            
00007516                            ScrollBlock3_End:			; XREF: ScrollBlock3
00007516 4E75                       		rts	
00007518                            ; End of function ScrollBlock3
00007518                            
00007518                            
00007518                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007518                            
00007518                            
00007518                            ScrollBlock4:				; XREF: Deform_MZ, Deform_SBZ
00007518 2438 F708                  		move.l	($FFFFF708).w,d2
0000751C 2002                       		move.l	d2,d0
0000751E D084                       		add.l	d4,d0
00007520 21C0 F708                  		move.l	d0,($FFFFF708).w
00007524 2200                       		move.l	d0,d1
00007526 4841                       		swap	d1
00007528 0241 0010                  		andi.w	#$10,d1
0000752C 1638 F74C                  		move.b	($FFFFF74C).w,d3
00007530 B701                       		eor.b	d3,d1
00007532 6600                       		bne.s	ScrollBlock4_End
00007534 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
0000753A 9082                       		sub.l	d2,d0
0000753C 6A00                       		bpl.s	ScrollBlock4_1
0000753E 0DF8 F756                  		bset	d6,($FFFFF756).w
00007542 6000                       		bra.s	ScrollBlock4_End
00007544                            ; ===========================================================================
00007544                            
00007544                            ScrollBlock4_1:				; XREF: ScrollBlock4
00007544 5206                       		addq.b	#1,d6
00007546 0DF8 F756                  		bset	d6,($FFFFF756).w
0000754A                            
0000754A                            ScrollBlock4_End:			; XREF: ScrollBlock4
0000754A 4E75                       		rts	
0000754C                            ; End of function ScrollBlock4
0000754C                            
0000754C                            
0000754C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000754C                            
0000754C                            
0000754C                            ScrollBlock5:				; XREF: Deform_GHZ, Deform_MZ, ...
0000754C 2438 F710                  		move.l	($FFFFF710).w,d2
00007550 2002                       		move.l	d2,d0
00007552 D084                       		add.l	d4,d0
00007554 21C0 F710                  		move.l	d0,($FFFFF710).w
00007558 2200                       		move.l	d0,d1
0000755A 4841                       		swap	d1
0000755C 0241 0010                  		andi.w	#$10,d1
00007560 1638 F74E                  		move.b	($FFFFF74E).w,d3
00007564 B701                       		eor.b	d3,d1
00007566 6600                       		bne.s	ScrollBlock5_End
00007568 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
0000756E 9082                       		sub.l	d2,d0
00007570 6A00                       		bpl.s	ScrollBlock5_1
00007572 0DF8 F758                  		bset	d6,($FFFFF758).w
00007576 6000                       		bra.s	ScrollBlock5_End
00007578                            ; ===========================================================================
00007578                            
00007578                            ScrollBlock5_1:				; XREF: ScrollBlock5
00007578 5206                       		addq.b	#1,d6
0000757A 0DF8 F758                  		bset	d6,($FFFFF758).w
0000757E                            
0000757E                            ScrollBlock5_End:			; XREF: ScrollBlock5
0000757E 4E75                       		rts	
00007580                            ; End of function ScrollBlock5
00007580                            
00007580                            
00007580                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007580                            
00007580                            
00007580                            ScrollBlock6:				; XREF: Deform_GHZ, Deform_MZ, ...
00007580 2438 F718                  		move.l	($FFFFF718).w,d2
00007584 2002                       		move.l	d2,d0
00007586 D084                       		add.l	d4,d0
00007588 21C0 F718                  		move.l	d0,($FFFFF718).w
0000758C 2200                       		move.l	d0,d1
0000758E 4841                       		swap	d1
00007590 0241 0010                  		andi.w	#$10,d1
00007594 1638 F750                  		move.b	($FFFFF750).w,d3
00007598 B701                       		eor.b	d3,d1
0000759A 6600                       		bne.s	ScrollBlock6_End
0000759C 0A38 0010 F750             		eori.b	#$10,($FFFFF750).w
000075A2 9082                       		sub.l	d2,d0
000075A4 6A00                       		bpl.s	ScrollBlock6_1
000075A6 0DF8 F75A                  		bset	d6,($FFFFF75A).w
000075AA 6000                       		bra.s	ScrollBlock6_End
000075AC                            ; ===========================================================================
000075AC                            
000075AC                            ScrollBlock6_1:				; XREF: ScrollBlock6
000075AC 5206                       		addq.b	#1,d6
000075AE 0DF8 F75A                  		bset	d6,($FFFFF75A).w
000075B2                            
000075B2                            ScrollBlock6_End:			; XREF: ScrollBlock6
000075B2 4E75                       		rts	
000075B4                            ; End of function ScrollBlock6
000075B4                            
000075B4                            
000075B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075B4                            
000075B4                            
000075B4                            sub_6886:		
000075B4 4BF9 00C0 0004             		lea	($C00004).l,a5
000075BA 4DF9 00C0 0000             		lea	($C00000).l,a6
000075C0 45F8 F756                  		lea	($FFFFF756).w,a2
000075C4 47F8 F708                  		lea	($FFFFF708).w,a3
000075C8 49F8 A440                  		lea	($FFFFA440).w,a4
000075CC 343C 6000                  		move.w	#$6000,d2
000075D0 6100 0000                  		bsr.w	sub_6D0A
000075D4 45F8 F758                  		lea	($FFFFF758).w,a2
000075D8 47F8 F710                  		lea	($FFFFF710).w,a3
000075DC 6000 0000                  		bra.w	sub_6DA6
000075E0                            ; End of function sub_6886
000075E0                            
000075E0                            ; ---------------------------------------------------------------------------
000075E0                            ; Subroutine to	display	correct	tiles as you move
000075E0                            ; ---------------------------------------------------------------------------
000075E0                            
000075E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075E0                            
000075E0                            
000075E0                            LoadTilesAsYouMove:			; XREF: Demo_Time
000075E0 4BF9 00C0 0004             		lea	($C00004).l,a5
000075E6 4DF9 00C0 0000             		lea	($C00000).l,a6
000075EC 45F8 FF32                  		lea	($FFFFFF32).w,a2
000075F0 47F8 FF18                  		lea	($FFFFFF18).w,a3
000075F4 49F8 A440                  		lea	($FFFFA440).w,a4
000075F8 343C 6000                  		move.w	#$6000,d2
000075FC 6100 0000                  		bsr.w	sub_6D0A
00007600 45F8 FF34                  		lea	($FFFFFF34).w,a2
00007604 47F8 FF20                  		lea	($FFFFFF20).w,a3
00007608 6100 0000                  		bsr.w	sub_6DA6
0000760C 45F8 FF36                  		lea	($FFFFFF36).w,a2
00007610 47F8 FF28                  		lea	($FFFFFF28).w,a3
00007614 6100 0000                  		bsr.w	sub_6EA4
00007618 45F8 FF30                  		lea	($FFFFFF30).w,a2
0000761C 47F8 FF10                  		lea	($FFFFFF10).w,a3
00007620 49F8 A400                  		lea	($FFFFA400).w,a4
00007624 343C 4000                  		move.w	#$4000,d2
00007628 4A38 F745                  		tst.b	($FFFFF745).w
0000762C 6700                       		beq.s	Draw_FG
0000762E 11FC 0000 F745             		move.b	#0,($FFFFF745).w	;Reset the redraw flag
00007634 78F0                       		moveq	#-$10,d4			;Go to top line oflevel data relative camera position
00007636 7C0F                       		moveq	#$F,d6				;
00007638                            
00007638                            Draw_All:
00007638 48E7 0E00                  		movem.l	d4-d6,-(sp)			; This whole routine basically redraws the whole
0000763C 7AF0                       		moveq	#-$10,d5			; area instead of merely a line of tiles
0000763E 3204                       		move.w	d4,d1
00007640 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007644 3801                       		move.w	d1,d4
00007646 7AF0                       		moveq	#-$10,d5
00007648 6100 0000                  		bsr.w	DrawTiles_LR
0000764C 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007650 0644 0010                  		addi.w	#$10,d4
00007654 51CE FFE2                  		dbf	d6,Draw_All
00007658 4E75                       		rts	
0000765A                            
0000765A                            Draw_FG:
0000765A 4A12                       		tst.b	(a2)
0000765C 6700                       		beq.s	locret_6D08
0000765E 0892 0000                  		bclr	#0,(a2)
00007662 6700                       		beq.s	loc_6CBE
00007664 78F0                       		moveq	#-$10,d4
00007666 7AF0                       		moveq	#-$10,d5
00007668 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000766C 78F0                       		moveq	#-$10,d4
0000766E 7AF0                       		moveq	#-$10,d5
00007670 6100 0000                  		bsr.w	DrawTiles_LR
00007674                            
00007674                            loc_6CBE:
00007674 0892 0001                  		bclr	#1,(a2)
00007678 6700                       		beq.s	loc_6CD8
0000767A 383C 00E0                  		move.w	#$E0,d4	; 'à'
0000767E 7AF0                       		moveq	#-$10,d5
00007680 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007684 383C 00E0                  		move.w	#$E0,d4	; 'à'
00007688 7AF0                       		moveq	#-$10,d5
0000768A 6100 0000                  		bsr.w	DrawTiles_LR
0000768E                            
0000768E                            loc_6CD8:
0000768E 0892 0002                  		bclr	#2,(a2)
00007692 6700                       		beq.s	loc_6CEE
00007694 78F0                       		moveq	#-$10,d4
00007696 7AF0                       		moveq	#-$10,d5
00007698 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000769C 78F0                       		moveq	#-$10,d4
0000769E 7AF0                       		moveq	#-$10,d5
000076A0 6100 0000                  		bsr.w	DrawTiles_TB
000076A4                            
000076A4                            loc_6CEE:
000076A4 0892 0003                  		bclr	#3,(a2)
000076A8 6700                       		beq.s	locret_6D08
000076AA 78F0                       		moveq	#-$10,d4
000076AC 3A3C 0140                  		move.w	#$140,d5
000076B0 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076B4 78F0                       		moveq	#-$10,d4
000076B6 3A3C 0140                  		move.w	#$140,d5
000076BA 6100 0000                  		bsr.w	DrawTiles_TB
000076BE                            
000076BE                            locret_6D08:
000076BE 4E75                       		rts	
000076C0                            
000076C0                            ; End of function LoadTilesAsYouMove
000076C0                            
000076C0                            
000076C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076C0                            
000076C0                            
000076C0                            sub_6D0A:
000076C0 4A12                       		tst.b	(a2)
000076C2 6700 0000                  		beq.w	locret_6DA4
000076C6 0892 0000                  		bclr	#0,(a2)
000076CA 6700                       		beq.s	loc_6D26
000076CC 78F0                       		moveq	#-$10,d4
000076CE 7AF0                       		moveq	#-$10,d5
000076D0 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076D4 78F0                       		moveq	#-$10,d4
000076D6 7AF0                       		moveq	#-$10,d5
000076D8 6100 0000                  		bsr.w	DrawTiles_LR
000076DC                            
000076DC                            loc_6D26:
000076DC 0892 0001                  		bclr	#1,(a2)
000076E0 6700                       		beq.s	loc_6D40
000076E2 383C 00E0                  		move.w	#$E0,d4	; 'à'
000076E6 7AF0                       		moveq	#-$10,d5
000076E8 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076EC 383C 00E0                  		move.w	#$E0,d4	; 'à'
000076F0 7AF0                       		moveq	#-$10,d5
000076F2 6100 0000                  		bsr.w	DrawTiles_LR
000076F6                            
000076F6                            loc_6D40:
000076F6 0892 0002                  		bclr	#2,(a2)
000076FA 6700                       		beq.s	loc_6D56
000076FC 78F0                       		moveq	#-$10,d4
000076FE 7AF0                       		moveq	#-$10,d5
00007700 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007704 78F0                       		moveq	#-$10,d4
00007706 7AF0                       		moveq	#-$10,d5
00007708 6100 0000                  		bsr.w	DrawTiles_TB
0000770C                            
0000770C                            loc_6D56:
0000770C 0892 0003                  		bclr	#3,(a2)
00007710 6700                       		beq.s	loc_6D70
00007712 78F0                       		moveq	#-$10,d4
00007714 3A3C 0140                  		move.w	#$140,d5
00007718 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000771C 78F0                       		moveq	#-$10,d4
0000771E 3A3C 0140                  		move.w	#$140,d5
00007722 6100 0000                  		bsr.w	DrawTiles_TB
00007726                            
00007726                            loc_6D70:
00007726 0892 0004                  		bclr	#4,(a2)
0000772A 6700                       		beq.s	loc_6D88
0000772C 78F0                       		moveq	#-$10,d4
0000772E 7A00                       		moveq	#0,d5
00007730 6100 0000                  		bsr.w	loc_7176
00007734 78F0                       		moveq	#-$10,d4
00007736 7A00                       		moveq	#0,d5
00007738 7C1F                       		moveq	#$1F,d6
0000773A 6100 0000                  		bsr.w	DrawTiles_LR3
0000773E                            
0000773E                            loc_6D88:
0000773E 0892 0005                  		bclr	#5,(a2)
00007742 6700                       		beq.s	locret_6DA4
00007744 383C 00E0                  		move.w	#$E0,d4	; 'à'
00007748 7A00                       		moveq	#0,d5
0000774A 6100 0000                  		bsr.w	loc_7176
0000774E 383C 00E0                  		move.w	#$E0,d4	; 'à'
00007752 7A00                       		moveq	#0,d5
00007754 7C1F                       		moveq	#$1F,d6
00007756 6100 0000                  		bsr.w	DrawTiles_LR3
0000775A                            
0000775A                            locret_6DA4:
0000775A 4E75                       		rts	
0000775C                            ; End of function sub_6D0A
0000775C                            
0000775C                            
0000775C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000775C                            
0000775C                            
0000775C                            sub_6DA6:
0000775C 4A12                       		tst.b	(a2)
0000775E 6700 0000                  		beq.w	locret_6DF2
00007762 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w
00007768 6700 0000                  		beq.w	loc_6E16
0000776C 0892 0000                  		bclr	#0,(a2)
00007770 6700                       		beq.s	loc_6DD2
00007772 383C 0070                  		move.w	#$70,d4	; 'p'
00007776 7AF0                       		moveq	#-$10,d5
00007778 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000777C 383C 0070                  		move.w	#$70,d4	; 'p'
00007780 7AF0                       		moveq	#-$10,d5
00007782 7C02                       		moveq	#2,d6
00007784 6100 0000                  		bsr.w	DrawTiles_TB2
00007788                            
00007788                            loc_6DD2:
00007788 0892 0001                  		bclr	#1,(a2)
0000778C 6700                       		beq.s	locret_6DF2
0000778E 383C 0070                  		move.w	#$70,d4	; 'p'
00007792 3A3C 0140                  		move.w	#$140,d5
00007796 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000779A 383C 0070                  		move.w	#$70,d4	; 'p'
0000779E 3A3C 0140                  		move.w	#$140,d5
000077A2 7C02                       		moveq	#2,d6
000077A4 6100 0000                  		bsr.w	DrawTiles_TB2
000077A8                            
000077A8                            locret_6DF2:
000077A8 4E75                       		rts	
000077AA                            ; ===========================================================================
000077AA 00                         unk_6DF4:	dc.b   0 ;	 
000077AB 00                         unk_6DF5:	dc.b   0 ;	 
000077AC 00                         		dc.b   0 ;  
000077AD 00                         		dc.b   0 ;  
000077AE 00                         		dc.b   0 ;  
000077AF 06                         		dc.b   6 ;  
000077B0 06                         		dc.b   6 ;  
000077B1 06                         		dc.b   6 ;  
000077B2 06                         		dc.b   6 ;  
000077B3 06                         		dc.b   6 ;  
000077B4 06                         		dc.b   6 ;  
000077B5 06                         		dc.b   6 ;  
000077B6 06                         		dc.b   6 ;  
000077B7 06                         		dc.b   6 ;  
000077B8 06                         		dc.b   6 ;  
000077B9 04                         		dc.b   4 ;  
000077BA 04                         		dc.b   4 ;  
000077BB 04                         		dc.b   4 ;  
000077BC 04                         		dc.b   4 ;  
000077BD 04                         		dc.b   4 ;  
000077BE 04                         		dc.b   4 ;  
000077BF 04                         		dc.b   4 ;  
000077C0 02                         		dc.b   2 ;  
000077C1 02                         		dc.b   2 ;  
000077C2 02                         		dc.b   2 ;  
000077C3 02                         		dc.b   2 ;  
000077C4 02                         		dc.b   2 ;  
000077C5 02                         		dc.b   2 ;  
000077C6 02                         		dc.b   2 ;  
000077C7 02                         		dc.b   2 ;  
000077C8 02                         		dc.b   2 ;  
000077C9 02                         		dc.b   2 ;  
000077CA 02                         		dc.b   2 ;  
000077CB 00                         		dc.b   0 ;  
000077CC                            ; ===========================================================================
000077CC                            
000077CC                            loc_6E16:
000077CC 78F0                       		moveq	#-$10,d4
000077CE 0892 0000                  		bclr	#0,(a2)
000077D2 6600                       		bne.s	loc_6E28
000077D4 0892 0001                  		bclr	#1,(a2)
000077D8 6700                       		beq.s	loc_6E72
000077DA 383C 00E0                  		move.w	#$E0,d4	; 'à'
000077DE                            
000077DE                            loc_6E28:
000077DE 41F9 0000 77AB             		lea	(unk_6DF5).l,a0
000077E4 3038 F70C                  		move.w	($FFFFF70C).w,d0
000077E8 D044                       		add.w	d4,d0
000077EA 0240 01F0                  		andi.w	#$1F0,d0
000077EE E848                       		lsr.w	#4,d0
000077F0 1030 0000                  		move.b	(a0,d0.w),d0
000077F4 47F9 0000 0000             		lea	(unk_6FE4).l,a3
000077FA 3673 0000                  		movea.w	(a3,d0.w),a3
000077FE 6700                       		beq.s	loc_6E5E
00007800 7AF0                       		moveq	#-$10,d5
00007802 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007806 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000780A 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000780E 6100 0000                  		bsr.w	DrawTiles_LR
00007812 6000                       		bra.s	loc_6E72
00007814                            ; ===========================================================================
00007814                            
00007814                            loc_6E5E:
00007814 7A00                       		moveq	#0,d5
00007816 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000781A 6100 0000                  		bsr.w	loc_7176
0000781E 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007822 7C1F                       		moveq	#$1F,d6
00007824 6100 0000                  		bsr.w	DrawTiles_LR3
00007828                            
00007828                            loc_6E72:
00007828 4A12                       		tst.b	(a2)
0000782A 6600                       		bne.s	loc_6E78
0000782C 4E75                       		rts	
0000782E                            ; ===========================================================================
0000782E                            
0000782E                            loc_6E78:
0000782E 78F0                       		moveq	#-$10,d4
00007830 7AF0                       		moveq	#-$10,d5
00007832 1012                       		move.b	(a2),d0
00007834 0200 00A8                  		andi.b	#-$58,d0
00007838 6700                       		beq.s	loc_6E8C
0000783A E208                       		lsr.b	#1,d0
0000783C 1480                       		move.b	d0,(a2)
0000783E 3A3C 0140                  		move.w	#$140,d5
00007842                            
00007842                            loc_6E8C:
00007842 41F9 0000 77AA             		lea	(unk_6DF4).l,a0
00007848 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000784C 0240 01F0                  		andi.w	#$1F0,d0
00007850 E848                       		lsr.w	#4,d0
00007852 41F0 0000                  		lea	(a0,d0.w),a0
00007856 6000 0000                  		bra.w	loc_6FEC
0000785A                            ; End of function sub_6DA6
0000785A                            
0000785A                            
0000785A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000785A                            
0000785A                            
0000785A                            sub_6EA4:
0000785A 4A12                       		tst.b	(a2)
0000785C 6700 0000                  		beq.w	locret_6EF0
00007860 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
00007866 6700 0000                  		beq.w	loc_6F54
0000786A 0892 0000                  		bclr	#0,(a2)
0000786E 6700                       		beq.s	loc_6ED0_2
00007870 383C 0040                  		move.w	#$40,d4	; '@'
00007874 7AF0                       		moveq	#-$10,d5
00007876 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000787A 383C 0040                  		move.w	#$40,d4	; '@'
0000787E 7AF0                       		moveq	#-$10,d5
00007880 7C02                       		moveq	#2,d6
00007882 6100 0000                  		bsr.w	DrawTiles_TB2
00007886                            
00007886                            loc_6ED0_2:
00007886 0892 0001                  		bclr	#1,(a2)
0000788A 6700                       		beq.s	locret_6EF0
0000788C 383C 0040                  		move.w	#$40,d4	; '@'
00007890 3A3C 0140                  		move.w	#$140,d5
00007894 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007898 383C 0040                  		move.w	#$40,d4	; '@'
0000789C 3A3C 0140                  		move.w	#$140,d5
000078A0 7C02                       		moveq	#2,d6
000078A2 6100 0000                  		bsr.w	DrawTiles_TB2
000078A6                            
000078A6                            locret_6EF0:
000078A6 4E75                       		rts	
000078A8                            ; ===========================================================================
000078A8 00                         unk_6EF2:	dc.b   0 ;	 
000078A9 00                         unk_6EF3:	dc.b   0 ;	 
000078AA 00                         		dc.b   0 ;  
000078AB 00                         		dc.b   0 ;  
000078AC 00                         		dc.b   0 ;  
000078AD 00                         		dc.b   0 ;  
000078AE 06                         		dc.b   6 ;  
000078AF 06                         		dc.b   6 ;  
000078B0 04                         		dc.b   4 ;  
000078B1 04                         		dc.b   4 ;  
000078B2 04                         		dc.b   4 ;  
000078B3 04                         		dc.b   4 ;  
000078B4 04                         		dc.b   4 ;  
000078B5 04                         		dc.b   4 ;  
000078B6 04                         		dc.b   4 ;  
000078B7 04                         		dc.b   4 ;  
000078B8 04                         		dc.b   4 ;  
000078B9 02                         		dc.b   2 ;  
000078BA 02                         		dc.b   2 ;  
000078BB 02                         		dc.b   2 ;  
000078BC 02                         		dc.b   2 ;  
000078BD 02                         		dc.b   2 ;  
000078BE 02                         		dc.b   2 ;  
000078BF 02                         		dc.b   2 ;  
000078C0 02                         		dc.b   2 ;  
000078C1 02                         		dc.b   2 ;  
000078C2 02                         		dc.b   2 ;  
000078C3 02                         		dc.b   2 ;  
000078C4 02                         		dc.b   2 ;  
000078C5 02                         		dc.b   2 ;  
000078C6 02                         		dc.b   2 ;  
000078C7 02                         		dc.b   2 ;  
000078C8 02                         		dc.b   2 ;  
000078C9 02                         		dc.b   2 ;  
000078CA 02                         		dc.b   2 ;  
000078CB 02                         		dc.b   2 ;  
000078CC 02                         		dc.b   2 ;  
000078CD 02                         		dc.b   2 ;  
000078CE 02                         		dc.b   2 ;  
000078CF 02                         		dc.b   2 ;  
000078D0 02                         		dc.b   2 ;  
000078D1 02                         		dc.b   2 ;  
000078D2 02                         		dc.b   2 ;  
000078D3 02                         		dc.b   2 ;  
000078D4 02                         		dc.b   2 ;  
000078D5 02                         		dc.b   2 ;  
000078D6 02                         		dc.b   2 ;  
000078D7 02                         		dc.b   2 ;  
000078D8 02                         		dc.b   2 ;  
000078D9 02                         		dc.b   2 ;  
000078DA 02                         		dc.b   2 ;  
000078DB 02                         		dc.b   2 ;  
000078DC 02                         		dc.b   2 ;  
000078DD 02                         		dc.b   2 ;  
000078DE 02                         		dc.b   2 ;  
000078DF 02                         		dc.b   2 ;  
000078E0 02                         		dc.b   2 ;  
000078E1 02                         		dc.b   2 ;  
000078E2 02                         		dc.b   2 ;  
000078E3 02                         		dc.b   2 ;  
000078E4 02                         		dc.b   2 ;  
000078E5 02                         		dc.b   2 ;  
000078E6 02                         		dc.b   2 ;  
000078E7 02                         		dc.b   2 ;  
000078E8 02                         		dc.b   2 ;  
000078E9 02                         		dc.b   2 ;  
000078EA 02                         		dc.b   2 ;  
000078EB 02                         		dc.b   2 ;  
000078EC 02                         		dc.b   2 ;  
000078ED 02                         		dc.b   2 ;  
000078EE 02                         		dc.b   2 ;  
000078EF 02                         		dc.b   2 ;  
000078F0 02                         		dc.b   2 ;  
000078F1 02                         		dc.b   2 ;  
000078F2 02                         		dc.b   2 ;  
000078F3 02                         		dc.b   2 ;  
000078F4 02                         		dc.b   2 ;  
000078F5 02                         		dc.b   2 ;  
000078F6 02                         		dc.b   2 ;  
000078F7 02                         		dc.b   2 ;  
000078F8 02                         		dc.b   2 ;  
000078F9 02                         		dc.b   2 ;  
000078FA 02                         		dc.b   2 ;  
000078FB 02                         		dc.b   2 ;  
000078FC 02                         		dc.b   2 ;  
000078FD 02                         		dc.b   2 ;  
000078FE 02                         		dc.b   2 ;  
000078FF 02                         		dc.b   2 ;  
00007900 02                         		dc.b   2 ;  
00007901 02                         		dc.b   2 ;  
00007902 02                         		dc.b   2 ;  
00007903 02                         		dc.b   2 ;  
00007904 02                         		dc.b   2 ;  
00007905 02                         		dc.b   2 ;  
00007906 02                         		dc.b   2 ;  
00007907 02                         		dc.b   2 ;  
00007908 02                         		dc.b   2 ;  
00007909 00                         		dc.b   0 ;  
0000790A                            ; ===========================================================================
0000790A                            
0000790A                            loc_6F54:
0000790A 78F0                       		moveq	#-$10,d4
0000790C 0892 0000                  		bclr	#0,(a2)
00007910 6600                       		bne.s	loc_6F66
00007912 0892 0001                  		bclr	#1,(a2)
00007916 6700                       		beq.s	loc_6FAE
00007918 383C 00E0                  		move.w	#$E0,d4	; 'à'
0000791C                            
0000791C                            loc_6F66:
0000791C 41F9 0000 78A9             		lea	(unk_6EF3).l,a0
00007922 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007926 0440 0200                  		subi.w	#$200,d0
0000792A D044                       		add.w	d4,d0
0000792C 0240 07F0                  		andi.w	#$7F0,d0
00007930 E848                       		lsr.w	#4,d0
00007932 1030 0000                  		move.b	(a0,d0.w),d0
00007936 367B 0000                  		movea.w	unk_6FE4(pc,d0.w),a3
0000793A 6700                       		beq.s	loc_6F9A
0000793C 7AF0                       		moveq	#-$10,d5
0000793E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007942 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007946 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000794A 6100 0000                  		bsr.w	DrawTiles_LR
0000794E 6000                       		bra.s	loc_6FAE
00007950                            ; ===========================================================================
00007950                            
00007950                            loc_6F9A:
00007950 7A00                       		moveq	#0,d5
00007952 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007956 6100 0000                  		bsr.w	loc_7176
0000795A 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000795E 7C1F                       		moveq	#$1F,d6
00007960 6100 0000                  		bsr.w	DrawTiles_LR3
00007964                            
00007964                            loc_6FAE:
00007964 4A12                       		tst.b	(a2)
00007966 6600                       		bne.s	loc_6FB4
00007968 4E75                       		rts	
0000796A                            ; ===========================================================================
0000796A                            
0000796A                            loc_6FB4:
0000796A 78F0                       		moveq	#-$10,d4
0000796C 7AF0                       		moveq	#-$10,d5
0000796E 1012                       		move.b	(a2),d0
00007970 0200 00A8                  		andi.b	#-$58,d0
00007974 6700                       		beq.s	loc_6FC8
00007976 E208                       		lsr.b	#1,d0
00007978 1480                       		move.b	d0,(a2)
0000797A 3A3C 0140                  		move.w	#$140,d5
0000797E                            
0000797E                            loc_6FC8:
0000797E 41F9 0000 78A8             		lea	(unk_6EF2).l,a0
00007984 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007988 0440 0200                  		subi.w	#$200,d0
0000798C 0240 07F0                  		andi.w	#$7F0,d0
00007990 E848                       		lsr.w	#4,d0
00007992 41F0 0000                  		lea	(a0,d0.w),a0
00007996 6000 0000                  		bra.w	loc_6FEC
0000799A                            ; ===========================================================================
0000799A FF                         unk_6FE4:	dc.b $FF ;  
0000799B 18                         		dc.b $18 ;  
0000799C FF                         		dc.b $FF ;  
0000799D 18                         		dc.b $18 ;  
0000799E FF                         		dc.b $FF ;  
0000799F 20                         		dc.b $20 ;  
000079A0 FF                         		dc.b $FF ;  
000079A1 28                         		dc.b $28 ; (
000079A2                            ; ===========================================================================
000079A2                            
000079A2                            loc_6FEC:
000079A2 7C0F                       		moveq	#$F,d6
000079A4 2E3C 0080 0000             		move.l	#$800000,d7
000079AA                            
000079AA                            loc_6FF4:
000079AA 7000                       		moveq	#0,d0
000079AC 1018                       		move.b	(a0)+,d0
000079AE 0112                       		btst	d0,(a2)
000079B0 6700                       		beq.s	loc_701C
000079B2 367B 00E6                  		movea.w	unk_6FE4(pc,d0.w),a3
000079B6 48E7 0C80                  		movem.l	d4-d5/a0,-(sp)
000079BA 48E7 0C00                  		movem.l	d4-d5,-(sp)
000079BE 6100 0000                  		bsr.w	sub_712A
000079C2 4CDF 0030                  		movem.l	(sp)+,d4-d5
000079C6 6100 0000                  		bsr.w	Calc_VRAM_Pos
000079CA 6100 0000                  		bsr.w	sub_70AC
000079CE 4CDF 0130                  		movem.l	(sp)+,d4-d5/a0
000079D2                            
000079D2                            loc_701C:
000079D2 0644 0010                  		addi.w	#$10,d4
000079D6 51CE FFD2                  		dbf	d6,loc_6FF4
000079DA 4212                       		clr.b	(a2)
000079DC 4E75                       		rts	
000079DE                            ; End of function sub_6EA4
000079DE                            
000079DE                            
000079DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079DE                            
000079DE                            
000079DE                            DrawTiles_LR:
000079DE 7C15                       		moveq	#$15,d6
000079E0                            ; End of function DrawTiles_LR
000079E0                            
000079E0                            
000079E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079E0                            
000079E0                            
000079E0                            DrawTiles_LR2:
000079E0 2E3C 0080 0000             		move.l	#$800000,d7
000079E6 2200                       		move.l	d0,d1
000079E8                            
000079E8                            loc_7032:
000079E8 48E7 0C00                  		movem.l	d4-d5,-(sp)
000079EC 6100 0000                  		bsr.w	sub_712A
000079F0 2001                       		move.l	d1,d0
000079F2 6100 0000                  		bsr.w	sub_70AC
000079F6 5801                       		addq.b	#4,d1
000079F8 0201 007F                  		andi.b	#$7F,d1	; '?'
000079FC 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007A00 0645 0010                  		addi.w	#$10,d5
00007A04 51CE FFE2                  		dbf	d6,loc_7032
00007A08 4E75                       		rts	
00007A0A                            ; End of function DrawTiles_LR2
00007A0A                            
00007A0A                            
00007A0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A0A                            
00007A0A                            
00007A0A                            DrawTiles_LR3:
00007A0A 2E3C 0080 0000             		move.l	#$800000,d7
00007A10 2200                       		move.l	d0,d1
00007A12                            
00007A12                            loc_705C:
00007A12 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007A16 6100 0000                  		bsr.w	loc_712C
00007A1A 2001                       		move.l	d1,d0
00007A1C 6100 0000                  		bsr.w	sub_70AC
00007A20 5801                       		addq.b	#4,d1
00007A22 0201 007F                  		andi.b	#$7F,d1	; '?'
00007A26 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007A2A 0645 0010                  		addi.w	#$10,d5
00007A2E 51CE FFE2                  		dbf	d6,loc_705C
00007A32 4E75                       		rts	
00007A34                            ; End of function DrawTiles_LR3
00007A34                            
00007A34                            
00007A34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A34                            
00007A34                            
00007A34                            DrawTiles_TB:
00007A34 7C0F                       		moveq	#$F,d6
00007A36                            ; End of function DrawTiles_TB
00007A36                            
00007A36                            
00007A36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A36                            
00007A36                            
00007A36                            DrawTiles_TB2:
00007A36 2E3C 0080 0000             		move.l	#$800000,d7
00007A3C 2200                       		move.l	d0,d1
00007A3E                            
00007A3E                            loc_7088:
00007A3E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007A42 6100 0000                  		bsr.w	sub_712A
00007A46 2001                       		move.l	d1,d0
00007A48 6100 0000                  		bsr.w	sub_70AC
00007A4C 0641 0100                  		addi.w	#$100,d1
00007A50 0241 0FFF                  		andi.w	#$FFF,d1
00007A54 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007A58 0644 0010                  		addi.w	#$10,d4
00007A5C 51CE FFE0                  		dbf	d6,loc_7088
00007A60 4E75                       		rts	
00007A62                            ; End of function DrawTiles_TB2
00007A62                            
00007A62                            
00007A62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A62                            
00007A62                            
00007A62                            sub_70AC:
00007A62 8042                       		or.w	d2,d0
00007A64 4840                       		swap	d0
00007A66 0810 0004                  		btst	#4,(a0)
00007A6A 6600                       		bne.s	loc_70E8
00007A6C 0810 0003                  		btst	#3,(a0)
00007A70 6600                       		bne.s	loc_70C8
00007A72 2A80                       		move.l	d0,(a5)
00007A74 2C99                       		move.l	(a1)+,(a6)
00007A76 D087                       		add.l	d7,d0
00007A78 2A80                       		move.l	d0,(a5)
00007A7A 2C99                       		move.l	(a1)+,(a6)
00007A7C 4E75                       		rts	
00007A7E                            ; ===========================================================================
00007A7E                            
00007A7E                            loc_70C8:
00007A7E 2A80                       		move.l	d0,(a5)
00007A80 2819                       		move.l	(a1)+,d4
00007A82 0A84 0800 0800             		eori.l	#$8000800,d4
00007A88 4844                       		swap	d4
00007A8A 2C84                       		move.l	d4,(a6)
00007A8C D087                       		add.l	d7,d0
00007A8E 2A80                       		move.l	d0,(a5)
00007A90 2819                       		move.l	(a1)+,d4
00007A92 0A84 0800 0800             		eori.l	#$8000800,d4
00007A98 4844                       		swap	d4
00007A9A 2C84                       		move.l	d4,(a6)
00007A9C 4E75                       		rts	
00007A9E                            ; ===========================================================================
00007A9E                            
00007A9E                            loc_70E8:
00007A9E 0810 0003                  		btst	#3,(a0)
00007AA2 6600                       		bne.s	loc_710A
00007AA4 2A80                       		move.l	d0,(a5)
00007AA6 2A19                       		move.l	(a1)+,d5
00007AA8 2819                       		move.l	(a1)+,d4
00007AAA 0A84 1000 1000             		eori.l	#$10001000,d4
00007AB0 2C84                       		move.l	d4,(a6)
00007AB2 D087                       		add.l	d7,d0
00007AB4 2A80                       		move.l	d0,(a5)
00007AB6 0A85 1000 1000             		eori.l	#$10001000,d5
00007ABC 2C85                       		move.l	d5,(a6)
00007ABE 4E75                       		rts	
00007AC0                            ; ===========================================================================
00007AC0                            
00007AC0                            loc_710A:
00007AC0 2A80                       		move.l	d0,(a5)
00007AC2 2A19                       		move.l	(a1)+,d5
00007AC4 2819                       		move.l	(a1)+,d4
00007AC6 0A84 1800 1800             		eori.l	#$18001800,d4
00007ACC 4844                       		swap	d4
00007ACE 2C84                       		move.l	d4,(a6)
00007AD0 D087                       		add.l	d7,d0
00007AD2 2A80                       		move.l	d0,(a5)
00007AD4 0A85 1800 1800             		eori.l	#$18001800,d5
00007ADA 4845                       		swap	d5
00007ADC 2C85                       		move.l	d5,(a6)
00007ADE 4E75                       		rts	
00007AE0                            ; End of function sub_70AC
00007AE0                            
00007AE0                            
00007AE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AE0                            
00007AE0                            
00007AE0                            sub_712A:
00007AE0 DA53                       		add.w	(a3),d5
00007AE2                            
00007AE2                            loc_712C:
00007AE2 D86B 0004                  		add.w	4(a3),d4
00007AE6 43F8 B000                  		lea	($FFFFB000).w,a1
00007AEA 3604                       		move.w	d4,d3
00007AEC E24B                       		lsr.w	#1,d3
00007AEE 0243 0380                  		andi.w	#$380,d3
00007AF2 E64D                       		lsr.w	#3,d5
00007AF4 3005                       		move.w	d5,d0
00007AF6 EA48                       		lsr.w	#5,d0
00007AF8 0240 007F                  		andi.w	#$7F,d0	; '?'
00007AFC D043                       		add.w	d3,d0
00007AFE 4A38 FE10                  		tst.b	($FFFFFE10).w	
00007B02 6700                       		beq.s	@ghz		
00007B04 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w	
00007B0A 6700                       		beq.s	@lz		
00007B0C 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w	
00007B12 6700                       		beq.s	@mz		
00007B14 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w	
00007B1A 6700                       		beq.s	@slz		
00007B1C 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w	
00007B22 6700                       		beq.s	@syz		
00007B24 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w	
00007B2A 6700                       		beq.s	@sbz				
00007B2C 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
00007B32 6700                       		beq.s	@ghz		; if yes, branch
00007B34 76FF                       		moveq	#-1,d3		; load chunks from RAM
00007B36 6100                       		bsr.s	LocateBlock
00007B38 6000                       		bra.s	@continue
00007B3A                            
00007B3A                            @ghz:
00007B3A 7600                       		moveq	#0,d3
00007B3C 6100                       		bsr.s	LocateBlock
00007B3E 0683 0000 0000             		add.l	#Blk256_GHZ,d3
00007B44 6000 0000                  		bra.w	@continue
00007B48                            	
00007B48                            @lz:
00007B48 7600                       		moveq	#0,d3
00007B4A 6100                       		bsr.s	LocateBlock
00007B4C 0683 0000 0000             		add.l	#Blk256_LZ,d3
00007B52 6000 0000                  		bra.w	@continue
00007B56                            		
00007B56                            @mz:
00007B56 7600                       		moveq	#0,d3
00007B58 6100                       		bsr.s	LocateBlock
00007B5A 0683 0000 0000             		add.l	#Blk256_MZ,d3
00007B60 6000 0000                  		bra.w	@continue
00007B64                            		
00007B64                            @slz:
00007B64 7600                       		moveq	#0,d3
00007B66 6100                       		bsr.s	LocateBlock
00007B68 0683 0000 0000             		add.l	#Blk256_SLZ,d3
00007B6E 6000 0000                  		bra.w	@continue
00007B72                            		
00007B72                            @syz:
00007B72 7600                       		moveq	#0,d3
00007B74 6100                       		bsr.s	LocateBlock
00007B76 0683 0000 0000             		add.l	#Blk256_SYZ,d3
00007B7C 6000 0000                  		bra.w	@continue
00007B80                            		
00007B80                            @sbz:
00007B80 7600                       		moveq	#0,d3
00007B82 6100                       		bsr.s	LocateBlock
00007B84 0683 0000 0000             		add.l	#Blk256_SBZ,d3		
00007B8A 6000 0000                  		bra.w	@continue
00007B8E                            		
00007B8E                            @continue:
00007B8E 2043                       		movea.l	d3,a0
00007B90 3610                       		move.w	(a0),d3
00007B92 0243 03FF                  		andi.w	#$3FF,d3
00007B96 E74B                       		lsl.w	#3,d3
00007B98 D2C3                       		adda.w	d3,a1
00007B9A 4E75                       		rts	
00007B9C                            ; ---------------------------------------------------------------------------
00007B9C                            
00007B9C                            LocateBlock:
00007B9C 1634 0000                  		move.b	(a4,d0.w),d3	; load chunk ID in d3
00007BA0 6700                       		beq.s	LocateBlock_EmptyChunk
00007BA2 5303                       		subq.b	#1,d3
00007BA4 0243 007F                  		andi.w	#$7F,d3	; '?'
00007BA8 EE5B                       		ror.w	#7,d3
00007BAA D844                       		add.w	d4,d4
00007BAC 0244 01E0                  		andi.w	#$1E0,d4
00007BB0 0245 001E                  		andi.w	#$1E,d5
00007BB4 D644                       		add.w	d4,d3
00007BB6 D645                       		add.w	d5,d3
00007BB8 4E75                       		rts
00007BBA                            ; ---------------------------------------------------------------------------
00007BBA                            
00007BBA                            LocateBlock_EmptyChunk:
00007BBA 584F                       		addq.w	#4,sp	; pop a stack frame to leave a1 pointing at the first tile
00007BBC 4E75                       		rts
00007BBE                            ; End of function sub_712A
00007BBE                            
00007BBE                            
00007BBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BBE                            
00007BBE                            
00007BBE                            Calc_VRAM_Pos:
00007BBE DA53                       		add.w	(a3),d5
00007BC0                            
00007BC0                            loc_7176:
00007BC0 D86B 0004                  		add.w	4(a3),d4
00007BC4 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
00007BC8 0245 01F0                  		andi.w	#$1F0,d5
00007BCC E94C                       		lsl.w	#4,d4
00007BCE E44D                       		lsr.w	#2,d5
00007BD0 D845                       		add.w	d5,d4
00007BD2 7003                       		moveq	#3,d0
00007BD4 4840                       		swap	d0
00007BD6 3004                       		move.w	d4,d0
00007BD8 4E75                       		rts	
00007BDA                            ; End of function Calc_VRAM_Pos
00007BDA                            
00007BDA                            ; ===========================================================================
00007BDA D86B 0004                  		add.w	4(a3),d4
00007BDE DA53                       		add.w	(a3),d5
00007BE0 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
00007BE4 0245 01F0                  		andi.w	#$1F0,d5
00007BE8 E94C                       		lsl.w	#4,d4
00007BEA E44D                       		lsr.w	#2,d5
00007BEC D845                       		add.w	d5,d4
00007BEE 7002                       		moveq	#2,d0
00007BF0 4840                       		swap	d0
00007BF2 3004                       		move.w	d4,d0
00007BF4 4E75                       		rts	
00007BF6                            
00007BF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BF6                            
00007BF6                            
00007BF6                            LoadTilesFromStart:
00007BF6 4BF9 00C0 0004             		lea	($C00004).l,a5
00007BFC 4DF9 00C0 0000             		lea	($C00000).l,a6
00007C02 47F8 F700                  		lea	($FFFFF700).w,a3
00007C06 49F8 A400                  		lea	($FFFFA400).w,a4
00007C0A 343C 4000                  		move.w	#$4000,d2
00007C0E 6100                       		bsr.s	LoadTilesFromStart2
00007C10 47F8 F708                  		lea	($FFFFF708).w,a3
00007C14 49F8 A440                  		lea	($FFFFA440).w,a4
00007C18 343C 6000                  		move.w	#$6000,d2
00007C1C 4A38 FE10                  		tst.b	($FFFFFE10).w
00007C20 6700 0000                  		beq.w	loc_7220
00007C24 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
00007C2A 6700 0000                  		beq.w	loc_725A
00007C2E 0C78 0500 FE10             		cmpi.w	#$500,($FFFFFE10).w
00007C34 6700 0000                  		beq.w	loc_7288
00007C38 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w
00007C3E 6700 0000                  		beq.w	loc_7220
00007C42                            ; End of function LoadTilesFromStart
00007C42                            
00007C42                            
00007C42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C42                            
00007C42                            
00007C42                            LoadTilesFromStart2:
00007C42 78F0                       		moveq	#-$10,d4
00007C44 7C0F                       		moveq	#$F,d6
00007C46                            
00007C46                            loc_71FC:
00007C46 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007C4A 7A00                       		moveq	#0,d5
00007C4C 3204                       		move.w	d4,d1
00007C4E 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
00007C52 3801                       		move.w	d1,d4
00007C54 7A00                       		moveq	#0,d5
00007C56 7C1F                       		moveq	#$1F,d6
00007C58 6100 FD86                  		bsr.w	DrawTiles_LR2
00007C5C 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007C60 0644 0010                  		addi.w	#$10,d4
00007C64 51CE FFE0                  		dbf	d6,loc_71FC
00007C68 4E75                       		rts	
00007C6A                            ; End of function LoadTilesFromStart2
00007C6A                            
00007C6A                            ; ===========================================================================
00007C6A                            
00007C6A                            loc_7220:
00007C6A 7800                       		moveq	#0,d4
00007C6C 7C0F                       		moveq	#$F,d6
00007C6E                            
00007C6E                            loc_7224:
00007C6E 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007C72 41F9 0000 0000             		lea	(unk_724A).l,a0
00007C78 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007C7C D044                       		add.w	d4,d0
00007C7E 0240 00F0                  		andi.w	#$F0,d0	; 'ð'
00007C82 6100 0000                  		bsr.w	sub_72BA
00007C86 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007C8A 0644 0010                  		addi.w	#$10,d4
00007C8E 51CE FFDE                  		dbf	d6,loc_7224
00007C92 4E75                       		rts	
00007C94                            ; ===========================================================================
00007C94 00                         unk_724A:	dc.b   0 ;	 
00007C95 00                         		dc.b   0 ;  
00007C96 00                         		dc.b   0 ;  
00007C97 00                         		dc.b   0 ;  
00007C98 06                         		dc.b   6 ;  
00007C99 06                         		dc.b   6 ;  
00007C9A 06                         		dc.b   6 ;  
00007C9B 04                         		dc.b   4 ;  
00007C9C 04                         		dc.b   4 ;  
00007C9D 04                         		dc.b   4 ;  
00007C9E 00                         		dc.b   0 ;  
00007C9F 00                         		dc.b   0 ;  
00007CA0 00                         		dc.b   0 ;  
00007CA1 00                         		dc.b   0 ;  
00007CA2 00                         		dc.b   0 ;  
00007CA3 00                         		dc.b   0 ;  
00007CA4                            ; ===========================================================================
00007CA4                            
00007CA4                            loc_725A:
00007CA4 78F0                       		moveq	#-$10,d4
00007CA6 7C0F                       		moveq	#$F,d6
00007CA8                            
00007CA8                            loc_725E:
00007CA8 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007CAC 41F9 0000 78A9             		lea	(unk_6EF3).l,a0
00007CB2 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007CB6 0440 0200                  		subi.w	#$200,d0
00007CBA D044                       		add.w	d4,d0
00007CBC 0240 07F0                  		andi.w	#$7F0,d0
00007CC0 6100 0000                  		bsr.w	sub_72BA
00007CC4 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007CC8 0644 0010                  		addi.w	#$10,d4
00007CCC 51CE FFDA                  		dbf	d6,loc_725E
00007CD0 4E75                       		rts	
00007CD2                            ; ===========================================================================
00007CD2                            
00007CD2                            loc_7288:
00007CD2 78F0                       		moveq	#-$10,d4
00007CD4 7C0F                       		moveq	#$F,d6
00007CD6                            
00007CD6                            loc_728C:
00007CD6 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007CDA 41F9 0000 77AB             		lea	(unk_6DF5).l,a0
00007CE0 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007CE4 D044                       		add.w	d4,d0
00007CE6 0240 01F0                  		andi.w	#$1F0,d0
00007CEA 6100 0000                  		bsr.w	sub_72BA
00007CEE 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007CF2 0644 0010                  		addi.w	#$10,d4
00007CF6 51CE FFDE                  		dbf	d6,loc_728C
00007CFA 4E75                       		rts	
00007CFC                            ; ===========================================================================
00007CFC F7                         unk_72B2:	dc.b $F7 ; ÷
00007CFD 08                         		dc.b   8 ;  
00007CFE F7                         		dc.b $F7 ; ÷
00007CFF 08                         		dc.b   8 ;  
00007D00 F7                         		dc.b $F7 ; ÷
00007D01 10                         		dc.b $10 ;  
00007D02 F7                         		dc.b $F7 ; ÷
00007D03 18                         		dc.b $18 ;  
00007D04                            
00007D04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D04                            
00007D04                            
00007D04                            sub_72BA:
00007D04 E848                       		lsr.w	#4,d0
00007D06 1030 0000                  		move.b	(a0,d0.w),d0
00007D0A 367B 00F0                  		movea.w	unk_72B2(pc,d0.w),a3
00007D0E 6700                       		beq.s	loc_72DA
00007D10 7AF0                       		moveq	#-$10,d5
00007D12 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007D16 6100 FEA6                  		bsr.w	Calc_VRAM_Pos
00007D1A 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007D1E 6100 FCBE                  		bsr.w	DrawTiles_LR
00007D22 6000                       		bra.s	locret_72EE
00007D24                            ; ===========================================================================
00007D24                            
00007D24                            loc_72DA:
00007D24 7A00                       		moveq	#0,d5
00007D26 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007D2A 6100 FE94                  		bsr.w	loc_7176
00007D2E 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007D32 7C1F                       		moveq	#$1F,d6
00007D34 6100 FCD4                  		bsr.w	DrawTiles_LR3
00007D38                            
00007D38                            locret_72EE:
00007D38 4E75                       		rts	
00007D3A                            ; End of function sub_72BA
00007D3A                            
00007D3A                            LoadZoneTiles:
00007D3A 7000                       		moveq	#0,d0			; Clear d0
00007D3C 1038 FE10                  		move.b	($FFFFFE10).w,d0		; Load number of current zone to d0
00007D40 E948                       		lsl.w	#4,d0			; Multiply by $10, converting the zone ID into an offset
00007D42 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2	; Load LevelHeaders's address into a2
00007D48 45F2 0000                  		lea	(a2,d0.w),a2		; Offset LevelHeaders by the zone-offset, and load the resultant address to a2
00007D4C 201A                       		move.l	(a2)+,d0		; Move the first longword of data that a2 points to to d0, this contains the zone's first PLC ID and its art's address.
00007D4E                            						; The auto increment is pointless as a2 is overwritten later, and nothing reads from a2 before then
00007D4E 0280 00FF FFFF             		andi.l	#$FFFFFF,d0    		; Filter out the first byte, which contains the first PLC ID, leaving the address of the zone's art in d0
00007D54 2040                       		movea.l	d0,a0			; Load the address of the zone's art into a0 (source)
00007D56 43F9 00FF 0000             		lea	($FF0000).l,a1		; Load v_256x256/StartOfRAM (in this context, an art buffer) into a1 (destination)
00007D5C 6100 99F2                  		bsr.w	KosDec			; Decompress a0 to a1 (Kosinski compression)
00007D60                            
00007D60 3609                       		move.w	a1,d3			; Move a word of a1 to d3, note that a1 doesn't exactly contain the address of v_256x256/StartOfRAM anymore, after KosDec, a1 now contains v_256x256/StartOfRAM + the size of the file decompressed to it, d3 now contains the length of the file that was decompressed
00007D62 3E03                       		move.w	d3,d7			; Move d3 to d7, for use in seperate calculations
00007D64                            
00007D64 0243 0FFF                  		andi.w	#$FFF,d3		; Remove the high nibble of the high byte of the length of decompressed file, this nibble is how many $1000 bytes the decompressed art is
00007D68 E24B                       		lsr.w	#1,d3			; Half the value of 'length of decompressed file', d3 becomes the 'DMA transfer length'
00007D6A                            
00007D6A E95F                       		rol.w	#4,d7			; Rotate (left) length of decompressed file by one nibble
00007D6C 0247 000F                  		andi.w	#$F,d7			; Only keep the low nibble of low byte (the same one filtered out of d3 above), this nibble is how many $1000 bytes the decompressed art is
00007D70                            
00007D70 3407                       @loop:		move.w	d7,d2			; Move d7 to d2, note that the ahead dbf removes 1 byte from d7 each time it loops, meaning that the following calculations will have different results each time
00007D72 EF4A                       		lsl.w	#7,d2
00007D74 EB4A                       		lsl.w	#5,d2			; Shift (left) d2 by $C, making it high nibble of the high byte, d2 is now the size of the decompressed file rounded down to the nearest $1000 bytes, d2 becomes the 'destination address'
00007D76                            
00007D76 223C 00FF FFFF             		move.l	#$FFFFFF,d1		; Fill d1 with $FF
00007D7C 3202                       		move.w	d2,d1			; Move d2 to d1, overwriting the last word of $FF's with d2, this turns d1 into 'StartOfRAM'+'However many $1000 bytes the decompressed art is', d1 becomes the 'source address'
00007D7E                            
00007D7E 4EB9 0000 4A92             		jsr	(QueueDMATransfer).l	; Use d1, d2, and d3 to locate the decompressed art and ready for transfer to VRAM
00007D84 3F07                       		move.w	d7,-(sp)		; Store d7 in the Stack
00007D86 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00007D8C 6100 AC0C                  		bsr.w	DelayProgram
00007D90 6100 970E                  		bsr.w	RunPLC_RAM
00007D94 3E1F                       		move.w	(sp)+,d7		; Restore d7 from the Stack
00007D96 363C 0800                  		move.w	#$800,d3		; Force the DMA transfer length to be $1000/2 (the first cycle is dynamic because the art's DMA'd backwards)
00007D9A 51CF FFD4                  		dbf	d7,@loop		; Loop for each $1000 bytes the decompressed art is
00007D9E                            
00007D9E 4E75                       		rts
00007DA0                            ; End of function LoadZoneTiles
00007DA0                            
00007DA0                            ; ---------------------------------------------------------------------------
00007DA0                            ; Main Load Block loading subroutine
00007DA0                            ; ---------------------------------------------------------------------------
00007DA0                            
00007DA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DA0                            
00007DA0                            
00007DA0                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007DA0 7000                       		moveq	#0,d0
00007DA2 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007DA6 E948                       		lsl.w	#4,d0
00007DA8 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007DAE 45F2 0000                  		lea	(a2,d0.w),a2
00007DB2 2F0A                       		move.l	a2,-(sp)
00007DB4 588A                       		addq.l	#4,a2
00007DB6 205A                       		movea.l	(a2)+,a0
00007DB8 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007DBC 303C 0000                  		move.w	#0,d0
00007DC0 6100 9810                  		bsr.w	EniDec
00007DC4 205A                       		movea.l	(a2)+,a0
00007DC6 4A38 FE10                  		tst.b	($FFFFFE10).w	; are we in Green Hill Zone?
00007DCA 6700                       		beq.s	@no_dec		; if yes, branch
00007DCC 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
00007DD2 6700                       		beq.s	@no_dec		; if yes, branch
00007DD4 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007DDA 6100 9974                  		bsr.w	KosDec
00007DDE                            
00007DDE                            @no_dec:		
00007DDE 6100 0000                  		bsr.w	LevelLayoutLoad
00007DE2 301A                       		move.w	(a2)+,d0
00007DE4 3012                       		move.w	(a2),d0
00007DE6 0240 00FF                  		andi.w	#$FF,d0
00007DEA 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007DF0 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007DF2 700C                       		moveq	#$C,d0		; use SB3 pallet
00007DF4                            
00007DF4                            MLB_ChkSBZPal:
00007DF4 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007DFA 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007DFC 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007E02 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007E04                            
00007E04                            MLB_UsePal0E:
00007E04 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00007E06                            
00007E06                            MLB_NormalPal:
00007E06 6100 A2DE                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007E0A 245F                       		movea.l	(sp)+,a2
00007E0C 584A                       		addq.w	#4,a2
00007E0E 7000                       		moveq	#0,d0
00007E10 1012                       		move.b	(a2),d0
00007E12 6700                       		beq.s	locret_6D10
00007E14 6100 961E                  		bsr.w	LoadPLC		; load pattern load cues
00007E18                            
00007E18                            locret_6D10:
00007E18 4E75                       		rts	
00007E1A                            ; End of function MainLoadBlockLoad
00007E1A                            
00007E1A                            ; ---------------------------------------------------------------------------
00007E1A                            ; Level	layout loading subroutine
00007E1A                            ; ---------------------------------------------------------------------------
00007E1A                            
00007E1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E1A                            
00007E1A                            
00007E1A                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007E1A 47F8 A400                  		lea	($FFFFA400).w,a3
00007E1E 323C 01FF                  		move.w	#$1FF,d1
00007E22 7000                       		moveq	#0,d0
00007E24                            
00007E24                            LevLoad_ClrRam:
00007E24 26C0                       		move.l	d0,(a3)+
00007E26 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007E2A                            
00007E2A 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007E2E 7200                       		moveq	#0,d1
00007E30 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007E34 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007E38 7202                       		moveq	#2,d1
00007E3A                            ; End of function LevelLayoutLoad
00007E3A                            
00007E3A                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007E3A                            
00007E3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E3A                            
00007E3A                            
00007E3A                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007E3A 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007E3E ED08                       		lsl.b	#6,d0
00007E40 EA48                       		lsr.w	#5,d0
00007E42 3400                       		move.w	d0,d2
00007E44 D040                       		add.w	d0,d0
00007E46 D042                       		add.w	d2,d0
00007E48 D041                       		add.w	d1,d0
00007E4A 43F9 0000 0000             		lea	(Level_Index).l,a1
00007E50 3031 0000                  		move.w	(a1,d0.w),d0
00007E54 43F1 0000                  		lea	(a1,d0.w),a1
00007E58 7200                       		moveq	#0,d1
00007E5A 3401                       		move.w	d1,d2
00007E5C 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007E5E 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007E60                            
00007E60                            LevLoad_NumRows:
00007E60 3001                       		move.w	d1,d0
00007E62 204B                       		movea.l	a3,a0
00007E64                            
00007E64                            LevLoad_Row:
00007E64 10D9                       		move.b	(a1)+,(a0)+
00007E66 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007E6A 47EB 0080                  		lea	$80(a3),a3	; do next row
00007E6E 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007E72 4E75                       		rts	
00007E74                            ; End of function LevelLayoutLoad2
00007E74                            
00007E74                            ; ---------------------------------------------------------------------------
00007E74                            ; Dynamic screen resize	loading	subroutine
00007E74                            ; ---------------------------------------------------------------------------
00007E74                            
00007E74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E74                            
00007E74                            
00007E74                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007E74 7000                       		moveq	#0,d0
00007E76 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007E7A D040                       		add.w	d0,d0
00007E7C 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007E80 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007E84 7202                       		moveq	#2,d1
00007E86 3038 F726                  		move.w	($FFFFF726).w,d0
00007E8A 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007E8E 6700                       		beq.s	locret_6DAA
00007E90 6400                       		bcc.s	loc_6DAC
00007E92 4441                       		neg.w	d1
00007E94 3038 F704                  		move.w	($FFFFF704).w,d0
00007E98 B078 F726                  		cmp.w	($FFFFF726).w,d0
00007E9C 6300                       		bls.s	loc_6DA0
00007E9E 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007EA2 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007EA8                            
00007EA8                            loc_6DA0:
00007EA8 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007EAC 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007EB2                            
00007EB2                            locret_6DAA:
00007EB2 4E75                       		rts	
00007EB4                            ; ===========================================================================
00007EB4                            
00007EB4                            loc_6DAC:				; XREF: DynScrResizeLoad
00007EB4 3038 F704                  		move.w	($FFFFF704).w,d0
00007EB8 5040                       		addq.w	#8,d0
00007EBA B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007EBE 6500                       		bcs.s	loc_6DC4
00007EC0 0838 0001 D022             		btst	#1,($FFFFD022).w
00007EC6 6700                       		beq.s	loc_6DC4
00007EC8 D241                       		add.w	d1,d1
00007ECA D241                       		add.w	d1,d1
00007ECC                            
00007ECC                            loc_6DC4:
00007ECC D378 F72E                  		add.w	d1,($FFFFF72E).w
00007ED0 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007ED6 4E75                       		rts	
00007ED8                            ; End of function DynScrResizeLoad
00007ED8                            
00007ED8                            ; ===========================================================================
00007ED8                            ; ---------------------------------------------------------------------------
00007ED8                            ; Offset index for dynamic screen resizing
00007ED8                            ; ---------------------------------------------------------------------------
00007ED8 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007EDC 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007EE0 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007EE4 0000                       		dc.w Resize_Ending-Resize_Index
00007EE6                            ; ===========================================================================
00007EE6                            ; ---------------------------------------------------------------------------
00007EE6                            ; Green	Hill Zone dynamic screen resizing
00007EE6                            ; ---------------------------------------------------------------------------
00007EE6                            
00007EE6                            Resize_GHZ:				; XREF: Resize_Index
00007EE6 7000                       		moveq	#0,d0
00007EE8 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007EEC D040                       		add.w	d0,d0
00007EEE 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007EF2 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007EF6                            ; ===========================================================================
00007EF6 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007EF8 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007EFA 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007EFC                            ; ===========================================================================
00007EFC                            
00007EFC                            Resize_GHZ1:
00007EFC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007F02 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007F08 6500                       		bcs.s	locret_6E08	; if not, branch
00007F0A 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007F10                            
00007F10                            locret_6E08:
00007F10 4E75                       		rts	
00007F12                            ; ===========================================================================
00007F12                            
00007F12                            Resize_GHZ2:
00007F12 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007F18 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007F1E 6500                       		bcs.s	locret_6E3A
00007F20 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007F26 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007F2C 6500                       		bcs.s	locret_6E3A
00007F2E 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007F34 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00007F3A 6500                       		bcs.s	locret_6E3A
00007F3C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007F42                            
00007F42                            locret_6E3A:
00007F42 4E75                       		rts	
00007F44                            ; ===========================================================================
00007F44                            
00007F44                            Resize_GHZ3:
00007F44 7000                       		moveq	#0,d0
00007F46 1038 F742                  		move.b	($FFFFF742).w,d0
00007F4A 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007F4E 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007F52                            ; ===========================================================================
00007F52 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007F54 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007F56 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007F58                            ; ===========================================================================
00007F58                            
00007F58                            Resize_GHZ3main:
00007F58 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007F5E 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007F64 6500                       		bcs.s	locret_6E96
00007F66 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007F6C 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007F72 6500                       		bcs.s	locret_6E96
00007F74 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007F7A 6500                       		bcs.s	loc_6E98
00007F7C 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007F82 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007F88 6400                       		bcc.s	loc_6E8E
00007F8A 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007F90 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007F96                            
00007F96                            loc_6E8E:
00007F96 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007F9C 6400                       		bcc.s	loc_6E98
00007F9E                            
00007F9E                            locret_6E96:
00007F9E 4E75                       		rts	
00007FA0                            ; ===========================================================================
00007FA0                            
00007FA0                            loc_6E98:
00007FA0 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007FA6 5438 F742                  		addq.b	#2,($FFFFF742).w
00007FAA 4E75                       		rts	
00007FAC                            ; ===========================================================================
00007FAC                            
00007FAC                            Resize_GHZ3boss:
00007FAC 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007FB2 6400                       		bcc.s	loc_6EB0
00007FB4 5538 F742                  		subq.b	#2,($FFFFF742).w
00007FB8                            
00007FB8                            loc_6EB0:
00007FB8 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007FBE 6500                       		bcs.s	locret_6EE8
00007FC0 6100 0000                  		bsr.w	SingleObjLoad
00007FC4 6600                       		bne.s	loc_6ED0
00007FC6 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007FCA 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007FD0 337C 0280 000C             		move.w	#$280,$C(a1)
00007FD6                            
00007FD6                            loc_6ED0:
00007FD6 303C 008C                  		move.w	#$8C,d0
00007FDA 6100 9214                  		bsr.w	PlaySound	; play boss music
00007FDE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007FE4 5438 F742                  		addq.b	#2,($FFFFF742).w
00007FE8 7011                       		moveq	#$11,d0
00007FEA 6000 9448                  		bra.w	LoadPLC		; load boss patterns
00007FEE                            ; ===========================================================================
00007FEE                            
00007FEE                            locret_6EE8:
00007FEE 4E75                       		rts	
00007FF0                            ; ===========================================================================
00007FF0                            
00007FF0                            Resize_GHZ3end:
00007FF0 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007FF6 4E75                       		rts	
00007FF8                            ; ===========================================================================
00007FF8                            ; ---------------------------------------------------------------------------
00007FF8                            ; Labyrinth Zone dynamic screen	resizing
00007FF8                            ; ---------------------------------------------------------------------------
00007FF8                            
00007FF8                            Resize_LZ:				; XREF: Resize_Index
00007FF8 7000                       		moveq	#0,d0
00007FFA 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007FFE D040                       		add.w	d0,d0
00008000 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00008004 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00008008                            ; ===========================================================================
00008008 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
0000800A 0000                       		dc.w Resize_LZ12-Resize_LZx
0000800C 0000                       		dc.w Resize_LZ3-Resize_LZx
0000800E 0000                       		dc.w Resize_SBZ3-Resize_LZx
00008010                            ; ===========================================================================
00008010                            
00008010                            Resize_LZ12:
00008010 4E75                       		rts	
00008012                            ; ===========================================================================
00008012                            
00008012                            Resize_LZ3:
00008012 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
00008016 6700                       		beq.s	loc_6F28	; if not, branch
00008018 43F8 A506                  		lea	($FFFFA506).w,a1
0000801C 0C11 0007                  		cmpi.b	#7,(a1)
00008020 6700                       		beq.s	loc_6F28
00008022 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00008026 303C 00B7                  		move.w	#$B7,d0
0000802A 6100 91CA                  		bsr.w	PlaySound_Special ; play rumbling sound
0000802E                            
0000802E                            loc_6F28:
0000802E 4A38 F742                  		tst.b	($FFFFF742).w
00008032 6600                       		bne.s	locret_6F64
00008034 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000803A 6500                       		bcs.s	locret_6F62
0000803C 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00008042 6400                       		bcc.s	locret_6F62
00008044 6100 0000                  		bsr.w	SingleObjLoad
00008048 6600                       		bne.s	loc_6F4A
0000804A 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
0000804E                            
0000804E                            loc_6F4A:
0000804E 303C 008C                  		move.w	#$8C,d0
00008052 6100 919C                  		bsr.w	PlaySound	; play boss music
00008056 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000805C 5438 F742                  		addq.b	#2,($FFFFF742).w
00008060 7011                       		moveq	#$11,d0
00008062 6000 93D0                  		bra.w	LoadPLC		; load boss patterns
00008066                            ; ===========================================================================
00008066                            
00008066                            locret_6F62:
00008066 4E75                       		rts	
00008068                            ; ===========================================================================
00008068                            
00008068                            locret_6F64:
00008068 4E75                       		rts	
0000806A                            ; ===========================================================================
0000806A                            
0000806A                            Resize_SBZ3:
0000806A 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00008070 6500                       		bcs.s	locret_6F8C
00008072 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00008078 6400                       		bcc.s	locret_6F8C	; if not, branch
0000807A 4238 FE30                  		clr.b	($FFFFFE30).w
0000807E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00008084 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
0000808A 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00008090                            
00008090                            locret_6F8C:
00008090 4E75                       		rts	
00008092                            ; ===========================================================================
00008092                            ; ---------------------------------------------------------------------------
00008092                            ; Marble Zone dynamic screen resizing
00008092                            ; ---------------------------------------------------------------------------
00008092                            
00008092                            Resize_MZ:				; XREF: Resize_Index
00008092 7000                       		moveq	#0,d0
00008094 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008098 D040                       		add.w	d0,d0
0000809A 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
0000809E 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000080A2                            ; ===========================================================================
000080A2 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000080A4 0000                       		dc.w Resize_MZ2-Resize_MZx
000080A6 0000                       		dc.w Resize_MZ3-Resize_MZx
000080A8                            ; ===========================================================================
000080A8                            
000080A8                            Resize_MZ1:
000080A8 7000                       		moveq	#0,d0
000080AA 1038 F742                  		move.b	($FFFFF742).w,d0
000080AE 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000080B2 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000080B6                            ; ===========================================================================
000080B6 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000080B8 0000                       		dc.w loc_6FEA-off_6FB2
000080BA 0000                       		dc.w loc_702E-off_6FB2
000080BC 0000                       		dc.w loc_7050-off_6FB2
000080BE                            ; ===========================================================================
000080BE                            
000080BE                            loc_6FBA:
000080BE 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000080C4 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000080CA 6500                       		bcs.s	locret_6FE8
000080CC 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000080D2 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000080D8 6500                       		bcs.s	locret_6FE8
000080DA 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000080E0 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000080E6 6500                       		bcs.s	locret_6FE8
000080E8 5438 F742                  		addq.b	#2,($FFFFF742).w
000080EC                            
000080EC                            locret_6FE8:
000080EC 4E75                       		rts	
000080EE                            ; ===========================================================================
000080EE                            
000080EE                            loc_6FEA:
000080EE 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000080F4 6400                       		bcc.s	loc_6FF8
000080F6 5538 F742                  		subq.b	#2,($FFFFF742).w
000080FA 4E75                       		rts	
000080FC                            ; ===========================================================================
000080FC                            
000080FC                            loc_6FF8:
000080FC 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00008102 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00008108 6400                       		bcc.s	locret_702C
0000810A 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00008110 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00008116 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
0000811C 6400                       		bcc.s	locret_702C
0000811E 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00008124 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000812A 6500                       		bcs.s	locret_702C
0000812C 5438 F742                  		addq.b	#2,($FFFFF742).w
00008130                            
00008130                            locret_702C:
00008130 4E75                       		rts	
00008132                            ; ===========================================================================
00008132                            
00008132                            loc_702E:
00008132 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00008138 6400                       		bcc.s	loc_703C
0000813A 5538 F742                  		subq.b	#2,($FFFFF742).w
0000813E 4E75                       		rts	
00008140                            ; ===========================================================================
00008140                            
00008140                            loc_703C:
00008140 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00008146 6500                       		bcs.s	locret_704E
00008148 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
0000814E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008152                            
00008152                            locret_704E:
00008152 4E75                       		rts	
00008154                            ; ===========================================================================
00008154                            
00008154                            loc_7050:
00008154 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
0000815A 6500                       		bcs.s	locret_7072
0000815C 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00008162 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00008168 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
0000816E 6500                       		bcs.s	locret_7072
00008170 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00008176                            
00008176                            locret_7072:
00008176 4E75                       		rts	
00008178                            ; ===========================================================================
00008178                            
00008178                            Resize_MZ2:
00008178 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000817E 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00008184 6500                       		bcs.s	locret_7088
00008186 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000818C                            
0000818C                            locret_7088:
0000818C 4E75                       		rts	
0000818E                            ; ===========================================================================
0000818E                            
0000818E                            Resize_MZ3:
0000818E 7000                       		moveq	#0,d0
00008190 1038 F742                  		move.b	($FFFFF742).w,d0
00008194 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008198 4EFB 0000                  		jmp	off_7098(pc,d0.w)
0000819C                            ; ===========================================================================
0000819C 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
0000819E 0000                       		dc.w Resize_MZ3end-off_7098
000081A0                            ; ===========================================================================
000081A0                            
000081A0                            Resize_MZ3boss:
000081A0 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000081A6 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000081AC 6500                       		bcs.s	locret_70E8
000081AE 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000081B4 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000081BA 6500                       		bcs.s	locret_70E8
000081BC 6100 0000                  		bsr.w	SingleObjLoad
000081C0 6600                       		bne.s	loc_70D0
000081C2 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
000081C6 337C 19F0 0008             		move.w	#$19F0,8(a1)
000081CC 337C 022C 000C             		move.w	#$22C,$C(a1)
000081D2                            
000081D2                            loc_70D0:
000081D2 303C 008C                  		move.w	#$8C,d0
000081D6 6100 9018                  		bsr.w	PlaySound	; play boss music
000081DA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000081E0 5438 F742                  		addq.b	#2,($FFFFF742).w
000081E4 7011                       		moveq	#$11,d0
000081E6 6000 924C                  		bra.w	LoadPLC		; load boss patterns
000081EA                            ; ===========================================================================
000081EA                            
000081EA                            locret_70E8:
000081EA 4E75                       		rts	
000081EC                            ; ===========================================================================
000081EC                            
000081EC                            Resize_MZ3end:
000081EC 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000081F2 4E75                       		rts	
000081F4                            ; ===========================================================================
000081F4                            ; ---------------------------------------------------------------------------
000081F4                            ; Star Light Zone dynamic screen resizing
000081F4                            ; ---------------------------------------------------------------------------
000081F4                            
000081F4                            Resize_SLZ:				; XREF: Resize_Index
000081F4 7000                       		moveq	#0,d0
000081F6 1038 FE11                  		move.b	($FFFFFE11).w,d0
000081FA D040                       		add.w	d0,d0
000081FC 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00008200 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00008204                            ; ===========================================================================
00008204 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
00008206 0000                       		dc.w Resize_SLZ12-Resize_SLZx
00008208 0000                       		dc.w Resize_SLZ3-Resize_SLZx
0000820A                            ; ===========================================================================
0000820A                            
0000820A                            Resize_SLZ12:
0000820A 4E75                       		rts	
0000820C                            ; ===========================================================================
0000820C                            
0000820C                            Resize_SLZ3:
0000820C 7000                       		moveq	#0,d0
0000820E 1038 F742                  		move.b	($FFFFF742).w,d0
00008212 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008216 4EFB 0000                  		jmp	off_7118(pc,d0.w)
0000821A                            ; ===========================================================================
0000821A 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
0000821C 0000                       		dc.w Resize_SLZ3boss-off_7118
0000821E 0000                       		dc.w Resize_SLZ3end-off_7118
00008220                            ; ===========================================================================
00008220                            
00008220                            Resize_SLZ3main:
00008220 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00008226 6500                       		bcs.s	locret_7130
00008228 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000822E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008232                            
00008232                            locret_7130:
00008232 4E75                       		rts	
00008234                            ; ===========================================================================
00008234                            
00008234                            Resize_SLZ3boss:
00008234 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000823A 6500                       		bcs.s	locret_715C
0000823C 6100 0000                  		bsr.w	SingleObjLoad
00008240 6600                       		bne.s	loc_7144
00008242 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00008246                            
00008246                            loc_7144:
00008246 303C 008C                  		move.w	#$8C,d0
0000824A 6100 8FA4                  		bsr.w	PlaySound	; play boss music
0000824E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008254 5438 F742                  		addq.b	#2,($FFFFF742).w
00008258 7011                       		moveq	#$11,d0
0000825A 6000 91D8                  		bra.w	LoadPLC		; load boss patterns
0000825E                            ; ===========================================================================
0000825E                            
0000825E                            locret_715C:
0000825E 4E75                       		rts	
00008260                            ; ===========================================================================
00008260                            
00008260                            Resize_SLZ3end:
00008260 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008266 4E75                       		rts
00008268 4E75                       		rts
0000826A                            ; ===========================================================================
0000826A                            ; ---------------------------------------------------------------------------
0000826A                            ; Spring Yard Zone dynamic screen resizing
0000826A                            ; ---------------------------------------------------------------------------
0000826A                            
0000826A                            Resize_SYZ:				; XREF: Resize_Index
0000826A 7000                       		moveq	#0,d0
0000826C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008270 D040                       		add.w	d0,d0
00008272 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00008276 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
0000827A                            ; ===========================================================================
0000827A 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
0000827C 0000                       		dc.w Resize_SYZ2-Resize_SYZx
0000827E 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00008280                            ; ===========================================================================
00008280                            
00008280                            Resize_SYZ1:
00008280 4E75                       		rts	
00008282                            ; ===========================================================================
00008282                            
00008282                            Resize_SYZ2:
00008282 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008288 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
0000828E 6500                       		bcs.s	locret_71A2
00008290 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00008296 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
0000829C 6500                       		bcs.s	locret_71A2
0000829E 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000082A4                            
000082A4                            locret_71A2:
000082A4 4E75                       		rts	
000082A6                            ; ===========================================================================
000082A6                            
000082A6                            Resize_SYZ3:
000082A6 7000                       		moveq	#0,d0
000082A8 1038 F742                  		move.b	($FFFFF742).w,d0
000082AC 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000082B0 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000082B4                            ; ===========================================================================
000082B4 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000082B6 0000                       		dc.w Resize_SYZ3boss-off_71B2
000082B8 0000                       		dc.w Resize_SYZ3end-off_71B2
000082BA                            ; ===========================================================================
000082BA                            
000082BA                            Resize_SYZ3main:
000082BA 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000082C0 6500                       		bcs.s	locret_71CE
000082C2 6100 0000                  		bsr.w	SingleObjLoad
000082C6 6600                       		bne.s	locret_71CE
000082C8 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000082CC 5438 F742                  		addq.b	#2,($FFFFF742).w
000082D0                            
000082D0                            locret_71CE:
000082D0 4E75                       		rts	
000082D2                            ; ===========================================================================
000082D2                            
000082D2                            Resize_SYZ3boss:
000082D2 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000082D8 6500                       		bcs.s	locret_7200
000082DA 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000082E0 6100 0000                  		bsr.w	SingleObjLoad
000082E4 6600                       		bne.s	loc_71EC
000082E6 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000082EA 5438 F742                  		addq.b	#2,($FFFFF742).w
000082EE                            
000082EE                            loc_71EC:
000082EE 303C 008C                  		move.w	#$8C,d0
000082F2 6100 8EFC                  		bsr.w	PlaySound	; play boss music
000082F6 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000082FC 7011                       		moveq	#$11,d0
000082FE 6000 9134                  		bra.w	LoadPLC		; load boss patterns
00008302                            ; ===========================================================================
00008302                            
00008302                            locret_7200:
00008302 4E75                       		rts	
00008304                            ; ===========================================================================
00008304                            
00008304                            Resize_SYZ3end:
00008304 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000830A 4E75                       		rts	
0000830C                            ; ===========================================================================
0000830C                            ; ---------------------------------------------------------------------------
0000830C                            ; Scrap	Brain Zone dynamic screen resizing
0000830C                            ; ---------------------------------------------------------------------------
0000830C                            
0000830C                            Resize_SBZ:				; XREF: Resize_Index
0000830C 7000                       		moveq	#0,d0
0000830E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008312 D040                       		add.w	d0,d0
00008314 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00008318 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
0000831C                            ; ===========================================================================
0000831C 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
0000831E 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00008320 0000                       		dc.w Resize_FZ-Resize_SBZx
00008322                            ; ===========================================================================
00008322                            
00008322                            Resize_SBZ1:
00008322 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00008328 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
0000832E 6500                       		bcs.s	locret_7242
00008330 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00008336 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000833C 6500                       		bcs.s	locret_7242
0000833E 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00008344                            
00008344                            locret_7242:
00008344 4E75                       		rts	
00008346                            ; ===========================================================================
00008346                            
00008346                            Resize_SBZ2:
00008346 7000                       		moveq	#0,d0
00008348 1038 F742                  		move.b	($FFFFF742).w,d0
0000834C 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008350 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008354                            ; ===========================================================================
00008354 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00008356 0000                       		dc.w Resize_SBZ2boss-off_7252
00008358 0000                       		dc.w Resize_SBZ2boss2-off_7252
0000835A 0000                       		dc.w Resize_SBZ2end-off_7252
0000835C                            ; ===========================================================================
0000835C                            
0000835C                            Resize_SBZ2main:
0000835C 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00008362 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00008368 6500                       		bcs.s	locret_727A
0000836A 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00008370 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00008376 6500                       		bcs.s	locret_727A
00008378 5438 F742                  		addq.b	#2,($FFFFF742).w
0000837C                            
0000837C                            locret_727A:
0000837C 4E75                       		rts	
0000837E                            ; ===========================================================================
0000837E                            
0000837E                            Resize_SBZ2boss:
0000837E 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00008384 6500                       		bcs.s	locret_7298
00008386 6100 0000                  		bsr.w	SingleObjLoad
0000838A 6600                       		bne.s	locret_7298
0000838C 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00008390 5438 F742                  		addq.b	#2,($FFFFF742).w
00008394 701E                       		moveq	#$1E,d0
00008396 6000 909C                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
0000839A                            ; ===========================================================================
0000839A                            
0000839A                            locret_7298:
0000839A 4E75                       		rts	
0000839C                            ; ===========================================================================
0000839C                            
0000839C                            Resize_SBZ2boss2:
0000839C 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000083A2 6500                       		bcs.s	loc_72B6
000083A4 6100 0000                  		bsr.w	SingleObjLoad
000083A8 6600                       		bne.s	loc_72B0
000083AA 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000083AE 5438 F742                  		addq.b	#2,($FFFFF742).w
000083B2                            
000083B2                            loc_72B0:
000083B2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000083B8                            
000083B8                            loc_72B6:
000083B8 6000                       		bra.s	loc_72C2
000083BA                            ; ===========================================================================
000083BA                            
000083BA                            Resize_SBZ2end:
000083BA 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000083C0 6500                       		bcs.s	loc_72C2
000083C2 4E75                       		rts	
000083C4                            ; ===========================================================================
000083C4                            
000083C4                            loc_72C2:
000083C4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000083CA 4E75                       		rts	
000083CC                            ; ===========================================================================
000083CC                            
000083CC                            Resize_FZ:
000083CC 7000                       		moveq	#0,d0
000083CE 1038 F742                  		move.b	($FFFFF742).w,d0
000083D2 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
000083D6 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000083DA                            ; ===========================================================================
000083DA 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
000083DE 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
000083E2 0000                       		dc.w Resize_FZend2-off_72D8
000083E4                            ; ===========================================================================
000083E4                            
000083E4                            Resize_FZmain:
000083E4 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
000083EA 6500                       		bcs.s	loc_72F4
000083EC 5438 F742                  		addq.b	#2,($FFFFF742).w
000083F0 701F                       		moveq	#$1F,d0
000083F2 6100 9040                  		bsr.w	LoadPLC		; load FZ boss patterns
000083F6                            
000083F6                            loc_72F4:
000083F6 60CC                       		bra.s	loc_72C2
000083F8                            ; ===========================================================================
000083F8                            
000083F8                            Resize_FZboss:
000083F8 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
000083FE 6500                       		bcs.s	loc_7312
00008400 6100 0000                  		bsr.w	SingleObjLoad
00008404 6600                       		bne.s	loc_7312
00008406 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
0000840A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000840E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008414                            
00008414                            loc_7312:
00008414 60AE                       		bra.s	loc_72C2
00008416                            ; ===========================================================================
00008416                            
00008416                            Resize_FZend:
00008416 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0000841C 6500                       		bcs.s	loc_7320
0000841E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008422                            
00008422                            loc_7320:
00008422 60A0                       		bra.s	loc_72C2
00008424                            ; ===========================================================================
00008424                            
00008424                            locret_7322:
00008424 4E75                       		rts	
00008426                            ; ===========================================================================
00008426                            
00008426                            Resize_FZend2:
00008426 609C                       		bra.s	loc_72C2
00008428                            ; ===========================================================================
00008428                            ; ---------------------------------------------------------------------------
00008428                            ; Ending sequence dynamic screen resizing (empty)
00008428                            ; ---------------------------------------------------------------------------
00008428                            
00008428                            Resize_Ending:				; XREF: Resize_Index
00008428 4E75                       		rts	
0000842A                            ; ===========================================================================
0000842A                            ; ---------------------------------------------------------------------------
0000842A                            ; Object 11 - GHZ bridge
0000842A                            ; ---------------------------------------------------------------------------
0000842A                            
0000842A                            Obj11:					; XREF: Obj_Index
0000842A 7000                       		moveq	#0,d0
0000842C 1028 0024                  		move.b	$24(a0),d0
00008430 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00008434 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00008438                            ; ===========================================================================
00008438 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
0000843C 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00008440 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00008444                            ; ===========================================================================
00008444                            
00008444                            Obj11_Main:				; XREF: Obj11_Index
00008444 5428 0024                  		addq.b	#2,$24(a0)
00008448 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00008450 317C 438E 0002             		move.w	#$438E,2(a0)
00008456 117C 0004 0001             		move.b	#4,1(a0)
0000845C 117C 0003 0018             		move.b	#3,$18(a0)
00008462 117C 0080 0019             		move.b	#$80,$19(a0)
00008468 3428 000C                  		move.w	$C(a0),d2
0000846C 3628 0008                  		move.w	8(a0),d3
00008470 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008472 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00008476 7200                       		moveq	#0,d1
00008478 1212                       		move.b	(a2),d1		; copy a2 to d1
0000847A 14FC 0000                  		move.b	#0,(a2)+
0000847E 3001                       		move.w	d1,d0
00008480 E248                       		lsr.w	#1,d0
00008482 E948                       		lsl.w	#4,d0
00008484 9640                       		sub.w	d0,d3
00008486 5501                       		subq.b	#2,d1
00008488 6500                       		bcs.s	Obj11_Action
0000848A                            
0000848A                            Obj11_MakeBdg:
0000848A 6100 0000                  		bsr.w	SingleObjLoad
0000848E 6600                       		bne.s	Obj11_Action
00008490 5228 0028                  		addq.b	#1,$28(a0)
00008494 B668 0008                  		cmp.w	8(a0),d3
00008498 6600                       		bne.s	loc_73B8
0000849A 0643 0010                  		addi.w	#$10,d3
0000849E 3142 000C                  		move.w	d2,$C(a0)
000084A2 3142 003C                  		move.w	d2,$3C(a0)
000084A6 3A08                       		move.w	a0,d5
000084A8 0445 D000                  		subi.w	#-$3000,d5
000084AC EC4D                       		lsr.w	#6,d5
000084AE 0245 007F                  		andi.w	#$7F,d5
000084B2 14C5                       		move.b	d5,(a2)+
000084B4 5228 0028                  		addq.b	#1,$28(a0)
000084B8                            
000084B8                            loc_73B8:				; XREF: ROM:00007398j
000084B8 3A09                       		move.w	a1,d5
000084BA 0445 D000                  		subi.w	#-$3000,d5
000084BE EC4D                       		lsr.w	#6,d5
000084C0 0245 007F                  		andi.w	#$7F,d5
000084C4 14C5                       		move.b	d5,(a2)+
000084C6 137C 000A 0024             		move.b	#$A,$24(a1)
000084CC 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
000084CE 3342 000C                  		move.w	d2,$C(a1)
000084D2 3342 003C                  		move.w	d2,$3C(a1)
000084D6 3343 0008                  		move.w	d3,8(a1)
000084DA 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
000084E2 337C 438E 0002             		move.w	#$438E,2(a1)
000084E8 137C 0004 0001             		move.b	#4,1(a1)
000084EE 137C 0003 0018             		move.b	#3,$18(a1)
000084F4 137C 0008 0019             		move.b	#8,$19(a1)
000084FA 0643 0010                  		addi.w	#$10,d3
000084FE 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00008502                            
00008502                            Obj11_Action:				; XREF: Obj11_Index
00008502 6100                       		bsr.s	Obj11_Solid
00008504 4A28 003E                  		tst.b	$3E(a0)
00008508 6700                       		beq.s	Obj11_Display
0000850A 5928 003E                  		subq.b	#4,$3E(a0)
0000850E 6100 0000                  		bsr.w	Obj11_Bend
00008512                            
00008512                            Obj11_Display:
00008512 6100 0000                  		bsr.w	DisplaySprite
00008516 6000 0000                  		bra.w	Obj11_ChkDel
0000851A                            
0000851A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000851A                            
0000851A                            
0000851A                            Obj11_Solid:				; XREF: Obj11_Action
0000851A 7200                       		moveq	#0,d1
0000851C 1228 0028                  		move.b	$28(a0),d1
00008520 E749                       		lsl.w	#3,d1
00008522 3401                       		move.w	d1,d2
00008524 5041                       		addq.w	#8,d1
00008526 D442                       		add.w	d2,d2
00008528 43F8 D000                  		lea	($FFFFD000).w,a1
0000852C 4A69 0012                  		tst.w	$12(a1)
00008530 6B00 0000                  		bmi.w	locret_751E
00008534 3029 0008                  		move.w	8(a1),d0
00008538 9068 0008                  		sub.w	8(a0),d0
0000853C D041                       		add.w	d1,d0
0000853E 6B00 0000                  		bmi.w	locret_751E
00008542 B042                       		cmp.w	d2,d0
00008544 6400 0000                  		bcc.w	locret_751E
00008548 6000                       		bra.s	Platform2
0000854A                            ; End of function Obj11_Solid
0000854A                            
0000854A                            ; ---------------------------------------------------------------------------
0000854A                            ; Platform subroutine
0000854A                            ; ---------------------------------------------------------------------------
0000854A                            
0000854A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000854A                            
0000854A                            
0000854A                            PlatformObject:
0000854A 43F8 D000                  		lea	($FFFFD000).w,a1
0000854E 4A69 0012                  		tst.w	$12(a1)
00008552 6B00 0000                  		bmi.w	locret_751E
00008556 3029 0008                  		move.w	8(a1),d0
0000855A 9068 0008                  		sub.w	8(a0),d0
0000855E D041                       		add.w	d1,d0
00008560 6B00 0000                  		bmi.w	locret_751E
00008564 D241                       		add.w	d1,d1
00008566 B041                       		cmp.w	d1,d0
00008568 6400 0000                  		bcc.w	locret_751E
0000856C                            
0000856C                            Platform2:
0000856C 3028 000C                  		move.w	$C(a0),d0
00008570 5140                       		subq.w	#8,d0
00008572                            
00008572                            Platform3:
00008572 3429 000C                  		move.w	$C(a1),d2
00008576 1229 0016                  		move.b	$16(a1),d1
0000857A 4881                       		ext.w	d1
0000857C D242                       		add.w	d2,d1
0000857E 5841                       		addq.w	#4,d1
00008580 9041                       		sub.w	d1,d0
00008582 6200 0000                  		bhi.w	locret_751E
00008586 0C40 FFF0                  		cmpi.w	#-$10,d0
0000858A 6500 0000                  		bcs.w	locret_751E
0000858E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008592 6B00 0000                  		bmi.w	locret_751E
00008596 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000859C 6400 0000                  		bcc.w	locret_751E
000085A0 D440                       		add.w	d0,d2
000085A2 5642                       		addq.w	#3,d2
000085A4 3342 000C                  		move.w	d2,$C(a1)
000085A8 5428 0024                  		addq.b	#2,$24(a0)
000085AC                            
000085AC                            loc_74AE:
000085AC 0829 0003 0022             		btst	#3,$22(a1)
000085B2 6700                       		beq.s	loc_74DC
000085B4 7000                       		moveq	#0,d0
000085B6 1029 003D                  		move.b	$3D(a1),d0
000085BA ED48                       		lsl.w	#6,d0
000085BC 0680 00FF D000             		addi.l	#$FFD000,d0
000085C2 2440                       		movea.l	d0,a2
000085C4 08AA 0003 0022             		bclr	#3,$22(a2)
000085CA 422A 0025                  		clr.b	$25(a2)
000085CE 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
000085D4 6600                       		bne.s	loc_74DC
000085D6 552A 0024                  		subq.b	#2,$24(a2)
000085DA                            
000085DA                            loc_74DC:
000085DA 3008                       		move.w	a0,d0
000085DC 0440 D000                  		subi.w	#-$3000,d0
000085E0 EC48                       		lsr.w	#6,d0
000085E2 0240 007F                  		andi.w	#$7F,d0
000085E6 1340 003D                  		move.b	d0,$3D(a1)
000085EA 137C 0000 0026             		move.b	#0,$26(a1)
000085F0 337C 0000 0012             		move.w	#0,$12(a1)
000085F6 3369 0010 0020             		move.w	$10(a1),$20(a1)
000085FC 0829 0001 0022             		btst	#1,$22(a1)
00008602 6700                       		beq.s	loc_7512
00008604 2F08                       		move.l	a0,-(sp)
00008606 2049                       		movea.l	a1,a0
00008608 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0000860E 205F                       		movea.l	(sp)+,a0
00008610                            
00008610                            loc_7512:
00008610 08E9 0003 0022             		bset	#3,$22(a1)
00008616 08E8 0003 0022             		bset	#3,$22(a0)
0000861C                            
0000861C                            locret_751E:
0000861C 4E75                       		rts	
0000861E                            ; End of function PlatformObject
0000861E                            
0000861E                            ; ---------------------------------------------------------------------------
0000861E                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
0000861E                            ; ---------------------------------------------------------------------------
0000861E                            
0000861E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000861E                            
0000861E                            
0000861E                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
0000861E 43F8 D000                  		lea	($FFFFD000).w,a1
00008622 4A69 0012                  		tst.w	$12(a1)
00008626 6B00 FFF4                  		bmi.w	locret_751E
0000862A 3029 0008                  		move.w	8(a1),d0
0000862E 9068 0008                  		sub.w	8(a0),d0
00008632 D041                       		add.w	d1,d0
00008634 6BE6                       		bmi.s	locret_751E
00008636 D241                       		add.w	d1,d1
00008638 B041                       		cmp.w	d1,d0
0000863A 64E0                       		bcc.s	locret_751E
0000863C 0828 0000 0001             		btst	#0,1(a0)
00008642 6700                       		beq.s	loc_754A
00008644 4640                       		not.w	d0
00008646 D041                       		add.w	d1,d0
00008648                            
00008648                            loc_754A:
00008648 E248                       		lsr.w	#1,d0
0000864A 7600                       		moveq	#0,d3
0000864C 1632 0000                  		move.b	(a2,d0.w),d3
00008650 3028 000C                  		move.w	$C(a0),d0
00008654 9043                       		sub.w	d3,d0
00008656 6000 FF1A                  		bra.w	Platform3
0000865A                            ; End of function SlopeObject
0000865A                            
0000865A                            
0000865A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000865A                            
0000865A                            
0000865A                            Obj15_Solid:				; XREF: Obj15_SetSolid
0000865A 43F8 D000                  		lea	($FFFFD000).w,a1
0000865E 4A69 0012                  		tst.w	$12(a1)
00008662 6B00 FFB8                  		bmi.w	locret_751E
00008666 3029 0008                  		move.w	8(a1),d0
0000866A 9068 0008                  		sub.w	8(a0),d0
0000866E D041                       		add.w	d1,d0
00008670 6B00 FFAA                  		bmi.w	locret_751E
00008674 D241                       		add.w	d1,d1
00008676 B041                       		cmp.w	d1,d0
00008678 6400 FFA2                  		bcc.w	locret_751E
0000867C 3028 000C                  		move.w	$C(a0),d0
00008680 9043                       		sub.w	d3,d0
00008682 6000 FEEE                  		bra.w	Platform3
00008686                            ; End of function Obj15_Solid
00008686                            
00008686                            ; ===========================================================================
00008686                            
00008686                            Obj11_Action2:				; XREF: Obj11_Index
00008686 6100                       		bsr.s	Obj11_WalkOff
00008688 6100 0000                  		bsr.w	DisplaySprite
0000868C 6000 0000                  		bra.w	Obj11_ChkDel
00008690                            
00008690                            ; ---------------------------------------------------------------------------
00008690                            ; Subroutine allowing Sonic to walk off a bridge
00008690                            ; ---------------------------------------------------------------------------
00008690                            
00008690                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008690                            
00008690                            
00008690                            Obj11_WalkOff:				; XREF: Obj11_Action2
00008690 7200                       		moveq	#0,d1
00008692 1228 0028                  		move.b	$28(a0),d1
00008696 E749                       		lsl.w	#3,d1
00008698 3401                       		move.w	d1,d2
0000869A 5041                       		addq.w	#8,d1
0000869C 6100                       		bsr.s	ExitPlatform2
0000869E 6400                       		bcc.s	locret_75BE
000086A0 E848                       		lsr.w	#4,d0
000086A2 1140 003F                  		move.b	d0,$3F(a0)
000086A6 1028 003E                  		move.b	$3E(a0),d0
000086AA 0C00 0040                  		cmpi.b	#$40,d0
000086AE 6700                       		beq.s	loc_75B6
000086B0 5828 003E                  		addq.b	#4,$3E(a0)
000086B4                            
000086B4                            loc_75B6:
000086B4 6100 0000                  		bsr.w	Obj11_Bend
000086B8 6100 0000                  		bsr.w	Obj11_MoveSonic
000086BC                            
000086BC                            locret_75BE:
000086BC 4E75                       		rts	
000086BE                            ; End of function Obj11_WalkOff
000086BE                            
000086BE                            ; ---------------------------------------------------------------------------
000086BE                            ; Subroutine allowing Sonic to walk or jump off	a platform
000086BE                            ; ---------------------------------------------------------------------------
000086BE                            
000086BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086BE                            
000086BE                            
000086BE                            ExitPlatform:
000086BE 3401                       		move.w	d1,d2
000086C0                            
000086C0                            ExitPlatform2:
000086C0 D442                       		add.w	d2,d2
000086C2 43F8 D000                  		lea	($FFFFD000).w,a1
000086C6 0829 0001 0022             		btst	#1,$22(a1)
000086CC 6600                       		bne.s	loc_75E0
000086CE 3029 0008                  		move.w	8(a1),d0
000086D2 9068 0008                  		sub.w	8(a0),d0
000086D6 D041                       		add.w	d1,d0
000086D8 6B00                       		bmi.s	loc_75E0
000086DA B042                       		cmp.w	d2,d0
000086DC 6500                       		bcs.s	locret_75F2
000086DE                            
000086DE                            loc_75E0:
000086DE 08A9 0003 0022             		bclr	#3,$22(a1)
000086E4 117C 0002 0024             		move.b	#2,$24(a0)
000086EA 08A8 0003 0022             		bclr	#3,$22(a0)
000086F0                            
000086F0                            locret_75F2:
000086F0 4E75                       		rts	
000086F2                            ; End of function ExitPlatform
000086F2                            
000086F2                            
000086F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086F2                            
000086F2                            
000086F2                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
000086F2 7000                       		moveq	#0,d0
000086F4 1028 003F                  		move.b	$3F(a0),d0
000086F8 1030 0029                  		move.b	$29(a0,d0.w),d0
000086FC ED48                       		lsl.w	#6,d0
000086FE 0680 00FF D000             		addi.l	#$FFD000,d0
00008704 2440                       		movea.l	d0,a2
00008706 43F8 D000                  		lea	($FFFFD000).w,a1
0000870A 302A 000C                  		move.w	$C(a2),d0
0000870E 5140                       		subq.w	#8,d0
00008710 7200                       		moveq	#0,d1
00008712 1229 0016                  		move.b	$16(a1),d1
00008716 9041                       		sub.w	d1,d0
00008718 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
0000871C 4E75                       		rts	
0000871E                            ; End of function Obj11_MoveSonic
0000871E                            
0000871E                            
0000871E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000871E                            
0000871E                            
0000871E                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
0000871E 1028 003E                  		move.b	$3E(a0),d0
00008722 6100 A2A8                  		bsr.w	CalcSine
00008726 3800                       		move.w	d0,d4
00008728 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
0000872E 7000                       		moveq	#0,d0
00008730 1028 0028                  		move.b	$28(a0),d0
00008734 E948                       		lsl.w	#4,d0
00008736 7600                       		moveq	#0,d3
00008738 1628 003F                  		move.b	$3F(a0),d3
0000873C 3403                       		move.w	d3,d2
0000873E D640                       		add.w	d0,d3
00008740 7A00                       		moveq	#0,d5
00008742 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00008748 1A35 3000                  		move.b	(a5,d3.w),d5
0000874C 0243 000F                  		andi.w	#$F,d3
00008750 E94B                       		lsl.w	#4,d3
00008752 47F4 3000                  		lea	(a4,d3.w),a3
00008756 45E8 0029                  		lea	$29(a0),a2
0000875A                            
0000875A                            loc_765C:
0000875A 7000                       		moveq	#0,d0
0000875C 101A                       		move.b	(a2)+,d0
0000875E ED48                       		lsl.w	#6,d0
00008760 0680 00FF D000             		addi.l	#$FFD000,d0
00008766 2240                       		movea.l	d0,a1
00008768 7000                       		moveq	#0,d0
0000876A 101B                       		move.b	(a3)+,d0
0000876C 5240                       		addq.w	#1,d0
0000876E C0C5                       		mulu.w	d5,d0
00008770 C0C4                       		mulu.w	d4,d0
00008772 4840                       		swap	d0
00008774 D069 003C                  		add.w	$3C(a1),d0
00008778 3340 000C                  		move.w	d0,$C(a1)
0000877C 51CA FFDC                  		dbf	d2,loc_765C
00008780 7000                       		moveq	#0,d0
00008782 1028 0028                  		move.b	$28(a0),d0
00008786 7600                       		moveq	#0,d3
00008788 1628 003F                  		move.b	$3F(a0),d3
0000878C 5203                       		addq.b	#1,d3
0000878E 9600                       		sub.b	d0,d3
00008790 4403                       		neg.b	d3
00008792 6B00                       		bmi.s	locret_76CA
00008794 3403                       		move.w	d3,d2
00008796 E94B                       		lsl.w	#4,d3
00008798 47F4 3000                  		lea	(a4,d3.w),a3
0000879C D6C2                       		adda.w	d2,a3
0000879E 5342                       		subq.w	#1,d2
000087A0 6500                       		bcs.s	locret_76CA
000087A2                            
000087A2                            loc_76A4:
000087A2 7000                       		moveq	#0,d0
000087A4 101A                       		move.b	(a2)+,d0
000087A6 ED48                       		lsl.w	#6,d0
000087A8 0680 00FF D000             		addi.l	#$FFD000,d0
000087AE 2240                       		movea.l	d0,a1
000087B0 7000                       		moveq	#0,d0
000087B2 1023                       		move.b	-(a3),d0
000087B4 5240                       		addq.w	#1,d0
000087B6 C0C5                       		mulu.w	d5,d0
000087B8 C0C4                       		mulu.w	d4,d0
000087BA 4840                       		swap	d0
000087BC D069 003C                  		add.w	$3C(a1),d0
000087C0 3340 000C                  		move.w	d0,$C(a1)
000087C4 51CA FFDC                  		dbf	d2,loc_76A4
000087C8                            
000087C8                            locret_76CA:
000087C8 4E75                       		rts	
000087CA                            ; End of function Obj11_Bend
000087CA                            
000087CA                            ; ===========================================================================
000087CA                            ; ---------------------------------------------------------------------------
000087CA                            ; GHZ bridge-bending data
000087CA                            ; (Defines how the bridge bends	when Sonic walks across	it)
000087CA                            ; ---------------------------------------------------------------------------
000087CA                            Obj11_BendData:	incbin	misc\ghzbend1.bin
000088DA                            		even
000088DA                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000089DA                            		even
000089DA                            
000089DA                            ; ===========================================================================
000089DA                            
000089DA                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000089DA 3028 0008                  		move.w	8(a0),d0
000089DE 0240 FF80                  		andi.w	#$FF80,d0
000089E2 3238 F700                  		move.w	($FFFFF700).w,d1
000089E6 0441 0080                  		subi.w	#$80,d1
000089EA 0241 FF80                  		andi.w	#$FF80,d1
000089EE 9041                       		sub.w	d1,d0
000089F0 0C40 0280                  		cmpi.w	#$280,d0
000089F4 6300                       		bls.s	Obj11_NoDel
000089F6 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000089FA 6700                       		beq.s	Obj11_DelAll		; if it's zero, don't remember object
000089FC 3440                       		movea.w	d0,a2	; load address into a2
000089FE 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00008A02 6000                       		bra.s	Obj11_DelAll	; and delete object
00008A04                            
00008A04                            Obj11_NoDel:
00008A04 4E75                       		rts	
00008A06                            ; ===========================================================================
00008A06                            
00008A06                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00008A06 7400                       		moveq	#0,d2
00008A08 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00008A0C 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00008A0E 5302                       		subq.b	#1,d2		; subtract 1
00008A10 6500                       		bcs.s	Obj11_Delete
00008A12                            
00008A12                            Obj11_DelLoop:
00008A12 7000                       		moveq	#0,d0
00008A14 101A                       		move.b	(a2)+,d0
00008A16 ED48                       		lsl.w	#6,d0
00008A18 0680 00FF D000             		addi.l	#$FFD000,d0
00008A1E 2240                       		movea.l	d0,a1
00008A20 B048                       		cmp.w	a0,d0
00008A22 6700                       		beq.s	loc_791E
00008A24 6100 0000                  		bsr.w	DeleteObject2
00008A28                            
00008A28                            loc_791E:
00008A28 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00008A2C                            
00008A2C                            Obj11_Delete:
00008A2C 6100 0000                  		bsr.w	DeleteObject
00008A30 4E75                       		rts	
00008A32                            ; ===========================================================================
00008A32                            
00008A32                            Obj11_Delete2:				; XREF: Obj11_Index
00008A32 6100 0000                  		bsr.w	DeleteObject
00008A36 4E75                       		rts	
00008A38                            ; ===========================================================================
00008A38                            
00008A38                            Obj11_Display2:				; XREF: Obj11_Index
00008A38 6100 0000                  		bsr.w	DisplaySprite
00008A3C 4E75                       		rts	
00008A3E                            ; ===========================================================================
00008A3E                            ; ---------------------------------------------------------------------------
00008A3E                            ; Sprite mappings - GHZ	bridge
00008A3E                            ; ---------------------------------------------------------------------------
00008A3E                            Map_obj11:
00008A3E                            	include "_maps\obj11.asm"
00008A3E                            ; ---------------------------------------------------------------------------
00008A3E                            ; Sprite mappings - GHZ	bridge
00008A3E                            ; ---------------------------------------------------------------------------
00008A3E 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00008A42 0000                       		dc.w byte_794B-Map_obj11
00008A44 01                         byte_793A:	dc.b 1
00008A45 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008A4A 02                         byte_7940:	dc.b 2
00008A4B F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00008A50 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00008A55 01                         byte_794B:	dc.b 1
00008A56 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00008A5C 00                         		even
00008A5C 00                         		even
00008A5C                            
00008A5C                            ; ===========================================================================
00008A5C                            ; ---------------------------------------------------------------------------
00008A5C                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00008A5C                            ;	    - spiked ball on a chain (SBZ)
00008A5C                            ; ---------------------------------------------------------------------------
00008A5C                            
00008A5C                            Obj15:					; XREF: Obj_Index
00008A5C 7000                       		moveq	#0,d0
00008A5E 1028 0024                  		move.b	$24(a0),d0
00008A62 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00008A66 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00008A6A                            ; ===========================================================================
00008A6A 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00008A6E 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00008A72 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00008A76 0000                       		dc.w Obj15_Action-Obj15_Index
00008A78                            ; ===========================================================================
00008A78                            
00008A78                            Obj15_Main:				; XREF: Obj15_Index
00008A78 5428 0024                  		addq.b	#2,$24(a0)
00008A7C 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00008A84 317C 4380 0002             		move.w	#$4380,2(a0)
00008A8A 117C 0004 0001             		move.b	#4,1(a0)
00008A90 117C 0003 0018             		move.b	#3,$18(a0)
00008A96 117C 0018 0019             		move.b	#$18,$19(a0)
00008A9C 117C 0008 0016             		move.b	#8,$16(a0)
00008AA2 3168 000C 0038             		move.w	$C(a0),$38(a0)
00008AA8 3168 0008 003A             		move.w	8(a0),$3A(a0)
00008AAE 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008AB4 6600                       		bne.s	Obj15_NotSLZ
00008AB6 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00008ABE 317C 43DC 0002             		move.w	#$43DC,2(a0)
00008AC4 117C 0020 0019             		move.b	#$20,$19(a0)
00008ACA 117C 0010 0016             		move.b	#$10,$16(a0)
00008AD0 117C 0099 0020             		move.b	#$99,$20(a0)
00008AD6                            
00008AD6                            Obj15_NotSLZ:
00008AD6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008ADC 6600                       		bne.s	Obj15_SetLength
00008ADE 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00008AE6 317C 0391 0002             		move.w	#$391,2(a0)
00008AEC 117C 0018 0019             		move.b	#$18,$19(a0)
00008AF2 117C 0018 0016             		move.b	#$18,$16(a0)
00008AF8 117C 0086 0020             		move.b	#$86,$20(a0)
00008AFE 117C 000C 0024             		move.b	#$C,$24(a0)
00008B04                            
00008B04                            Obj15_SetLength:
00008B04 1810                       		move.b	0(a0),d4
00008B06 7200                       		moveq	#0,d1
00008B08 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008B0C 1212                       		move.b	(a2),d1		; move a2 to d1
00008B0E 3F01                       		move.w	d1,-(sp)
00008B10 0241 000F                  		andi.w	#$F,d1
00008B14 14FC 0000                  		move.b	#0,(a2)+
00008B18 3601                       		move.w	d1,d3
00008B1A E94B                       		lsl.w	#4,d3
00008B1C 5003                       		addq.b	#8,d3
00008B1E 1143 003C                  		move.b	d3,$3C(a0)
00008B22 5103                       		subq.b	#8,d3
00008B24 4A28 001A                  		tst.b	$1A(a0)
00008B28 6700                       		beq.s	Obj15_MakeChain
00008B2A 5003                       		addq.b	#8,d3
00008B2C 5341                       		subq.w	#1,d1
00008B2E                            
00008B2E                            Obj15_MakeChain:
00008B2E 6100 0000                  		bsr.w	SingleObjLoad
00008B32 6600                       		bne.s	loc_7A92
00008B34 5228 0028                  		addq.b	#1,$28(a0)
00008B38 3A09                       		move.w	a1,d5
00008B3A 0445 D000                  		subi.w	#-$3000,d5
00008B3E EC4D                       		lsr.w	#6,d5
00008B40 0245 007F                  		andi.w	#$7F,d5
00008B44 14C5                       		move.b	d5,(a2)+
00008B46 137C 000A 0024             		move.b	#$A,$24(a1)
00008B4C 1284                       		move.b	d4,0(a1)	; load swinging	object
00008B4E 2368 0004 0004             		move.l	4(a0),4(a1)
00008B54 3368 0002 0002             		move.w	2(a0),2(a1)
00008B5A 08A9 0006 0002             		bclr	#6,2(a1)
00008B60 137C 0004 0001             		move.b	#4,1(a1)
00008B66 137C 0004 0018             		move.b	#4,$18(a1)
00008B6C 137C 0008 0019             		move.b	#8,$19(a1)
00008B72 137C 0001 001A             		move.b	#1,$1A(a1)
00008B78 1343 003C                  		move.b	d3,$3C(a1)
00008B7C 0403 0010                  		subi.b	#$10,d3
00008B80 6400                       		bcc.s	loc_7A8E
00008B82 137C 0002 001A             		move.b	#2,$1A(a1)
00008B88 137C 0003 0018             		move.b	#3,$18(a1)
00008B8E 08E9 0006 0002             		bset	#6,2(a1)
00008B94                            
00008B94                            loc_7A8E:
00008B94 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00008B98                            
00008B98                            loc_7A92:
00008B98 3A08                       		move.w	a0,d5
00008B9A 0445 D000                  		subi.w	#-$3000,d5
00008B9E EC4D                       		lsr.w	#6,d5
00008BA0 0245 007F                  		andi.w	#$7F,d5
00008BA4 14C5                       		move.b	d5,(a2)+
00008BA6 317C 4080 0026             		move.w	#$4080,$26(a0)
00008BAC 317C FE00 003E             		move.w	#-$200,$3E(a0)
00008BB2 321F                       		move.w	(sp)+,d1
00008BB4 0801 0004                  		btst	#4,d1		; is object type $8X ?
00008BB8 6700                       		beq.s	loc_7AD4	; if not, branch
00008BBA 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00008BC2 317C 43AA 0002             		move.w	#$43AA,2(a0)
00008BC8 117C 0001 001A             		move.b	#1,$1A(a0)
00008BCE 117C 0002 0018             		move.b	#2,$18(a0)
00008BD4 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008BDA                            
00008BDA                            loc_7AD4:
00008BDA 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008BE0 6700                       		beq.s	Obj15_Action	; if yes, branch
00008BE2                            
00008BE2                            Obj15_SetSolid:				; XREF: Obj15_Index
00008BE2 7200                       		moveq	#0,d1
00008BE4 1228 0019                  		move.b	$19(a0),d1
00008BE8 7600                       		moveq	#0,d3
00008BEA 1628 0016                  		move.b	$16(a0),d3
00008BEE 6100 FA6A                  		bsr.w	Obj15_Solid
00008BF2                            
00008BF2                            Obj15_Action:				; XREF: Obj15_Index
00008BF2 6100 0000                  		bsr.w	Obj15_Move
00008BF6 6100 0000                  		bsr.w	DisplaySprite
00008BFA 6000 0000                  		bra.w	Obj15_ChkDel
00008BFE                            ; ===========================================================================
00008BFE                            
00008BFE                            Obj15_Action2:				; XREF: Obj15_Index
00008BFE 7200                       		moveq	#0,d1
00008C00 1228 0019                  		move.b	$19(a0),d1
00008C04 6100 FAB8                  		bsr.w	ExitPlatform
00008C08 3F28 0008                  		move.w	8(a0),-(sp)
00008C0C 6100 0000                  		bsr.w	Obj15_Move
00008C10 341F                       		move.w	(sp)+,d2
00008C12 7600                       		moveq	#0,d3
00008C14 1628 0016                  		move.b	$16(a0),d3
00008C18 5203                       		addq.b	#1,d3
00008C1A 6100 0000                  		bsr.w	MvSonicOnPtfm
00008C1E 6100 0000                  		bsr.w	DisplaySprite
00008C22 6000 0000                  		bra.w	Obj15_ChkDel
00008C26                            
00008C26 4E75                       		rts
00008C28                            
00008C28                            ; ---------------------------------------------------------------------------
00008C28                            ; Subroutine to	change Sonic's position with a platform
00008C28                            ; ---------------------------------------------------------------------------
00008C28                            
00008C28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C28                            
00008C28                            
00008C28                            MvSonicOnPtfm:
00008C28 43F8 D000                  		lea	($FFFFD000).w,a1
00008C2C 3028 000C                  		move.w	$C(a0),d0
00008C30 9043                       		sub.w	d3,d0
00008C32 6000                       		bra.s	MvSonic2
00008C34                            ; End of function MvSonicOnPtfm
00008C34                            
00008C34                            ; ---------------------------------------------------------------------------
00008C34                            ; Subroutine to	change Sonic's position with a platform
00008C34                            ; ---------------------------------------------------------------------------
00008C34                            
00008C34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C34                            
00008C34                            
00008C34                            MvSonicOnPtfm2:
00008C34 43F8 D000                  		lea	($FFFFD000).w,a1
00008C38 3028 000C                  		move.w	$C(a0),d0
00008C3C 0440 0009                  		subi.w	#9,d0
00008C40                            
00008C40                            MvSonic2:
00008C40 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008C44 6B00                       		bmi.s	locret_7B62
00008C46 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008C4C 6400                       		bcc.s	locret_7B62
00008C4E 4A78 FE08                  		tst.w	($FFFFFE08).w
00008C52 6600                       		bne.s	locret_7B62
00008C54 9468 0008                  		sub.w	8(a0),d2
00008C58 9569 0008                  		sub.w	d2,8(a1)
00008C5C 7200                       		moveq	#0,d1
00008C5E 1229 0016                  		move.b	$16(a1),d1
00008C62 9041                       		sub.w	d1,d0
00008C64 B069 000C                  		cmp.w	$C(a1),d0
00008C68 6600                       		bne.s	@frustrated
00008C6A 4A42                       		tst.w	d2
00008C6C 6600                       		bne.s	@frustrated
00008C6E 3340 000C                  		move.w	d0,$C(a1)	
00008C72 4A38 F5D9                  		tst.b	(SonimeSST+sonime_waittimer2).w
00008C76 6700                       		beq.s	@resetwaittimer
00008C78 4A38 F5D8                  		tst.b	(SonimeSST+sonime_waittimer).w
00008C7C 6600                       		bne.s	locret_7B62
00008C7E 5338 F5D9                  		subi.b	#1,(SonimeSST+sonime_waittimer2).w
00008C82 6000                       		bra.s	@frustrated2
00008C84                            
00008C84                            	@frustrated:
00008C84 11FC 0020 F5D9             		move.b	#$20,(SonimeSST+sonime_waittimer2).w
00008C8A 3340 000C                  		move.w	d0,$C(a1)
00008C8E 4A38 F5D8                  		tst.b	(SonimeSST+sonime_waittimer).w
00008C92 6600                       		bne.s	@subtract
00008C94                            
00008C94                            	@frustrated2:
00008C94 11FC 000B F5CE             		move.b	#face_impatient,(SonimeSST+sonime_face).w
00008C9A 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00008CA0 4E75                       		rts
00008CA2                            
00008CA2                            	@subtract:
00008CA2 5338 F5D8                  		subi.b	#1,(SonimeSST+sonime_waittimer).w
00008CA6 4E75                       		rts
00008CA8                            
00008CA8                            	@resetwaittimer:
00008CA8 11FC 0060 F5D8             		move.b	#$60,(SonimeSST+sonime_waittimer).w
00008CAE                            
00008CAE                            locret_7B62:
00008CAE 4E75                       		rts	
00008CB0                            ; End of function MvSonicOnPtfm2
00008CB0                            
00008CB0                            
00008CB0                            CheckIfMoving:
00008CB0                            
00008CB0                            
00008CB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CB0                            
00008CB0                            
00008CB0                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008CB0 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008CB4 323C 0080                  		move.w	#$80,d1
00008CB8 0828 0000 0022             		btst	#0,$22(a0)
00008CBE 6700                       		beq.s	loc_7B78
00008CC0 4440                       		neg.w	d0
00008CC2 D041                       		add.w	d1,d0
00008CC4                            
00008CC4                            loc_7B78:
00008CC4 6000                       		bra.s	Obj15_Move2
00008CC6                            ; End of function Obj15_Move
00008CC6                            
00008CC6                            
00008CC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CC6                            
00008CC6                            
00008CC6                            Obj48_Move:				; XREF: Obj48_Display2
00008CC6 4A28 003D                  		tst.b	$3D(a0)
00008CCA 6600                       		bne.s	loc_7B9C
00008CCC 3028 003E                  		move.w	$3E(a0),d0
00008CD0 5040                       		addq.w	#8,d0
00008CD2 3140 003E                  		move.w	d0,$3E(a0)
00008CD6 D168 0026                  		add.w	d0,$26(a0)
00008CDA 0C40 0200                  		cmpi.w	#$200,d0
00008CDE 6600                       		bne.s	loc_7BB6
00008CE0 117C 0001 003D             		move.b	#1,$3D(a0)
00008CE6 6000                       		bra.s	loc_7BB6
00008CE8                            ; ===========================================================================
00008CE8                            
00008CE8                            loc_7B9C:
00008CE8 3028 003E                  		move.w	$3E(a0),d0
00008CEC 5140                       		subq.w	#8,d0
00008CEE 3140 003E                  		move.w	d0,$3E(a0)
00008CF2 D168 0026                  		add.w	d0,$26(a0)
00008CF6 0C40 FE00                  		cmpi.w	#-$200,d0
00008CFA 6600                       		bne.s	loc_7BB6
00008CFC 117C 0000 003D             		move.b	#0,$3D(a0)
00008D02                            
00008D02                            loc_7BB6:
00008D02 1028 0026                  		move.b	$26(a0),d0
00008D06                            ; End of function Obj48_Move
00008D06                            
00008D06                            
00008D06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D06                            
00008D06                            
00008D06                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008D06 6100 9CC4                  		bsr.w	CalcSine
00008D0A 3428 0038                  		move.w	$38(a0),d2
00008D0E 3628 003A                  		move.w	$3A(a0),d3
00008D12 45E8 0028                  		lea	$28(a0),a2
00008D16 7C00                       		moveq	#0,d6
00008D18 1C1A                       		move.b	(a2)+,d6
00008D1A                            
00008D1A                            loc_7BCE:
00008D1A 7800                       		moveq	#0,d4
00008D1C 181A                       		move.b	(a2)+,d4
00008D1E ED4C                       		lsl.w	#6,d4
00008D20 0684 00FF D000             		addi.l	#$FFD000,d4
00008D26 2244                       		movea.l	d4,a1
00008D28 7800                       		moveq	#0,d4
00008D2A 1829 003C                  		move.b	$3C(a1),d4
00008D2E 2A04                       		move.l	d4,d5
00008D30 C9C0                       		muls.w	d0,d4
00008D32 E084                       		asr.l	#8,d4
00008D34 CBC1                       		muls.w	d1,d5
00008D36 E085                       		asr.l	#8,d5
00008D38 D842                       		add.w	d2,d4
00008D3A DA43                       		add.w	d3,d5
00008D3C 3344 000C                  		move.w	d4,$C(a1)
00008D40 3345 0008                  		move.w	d5,8(a1)
00008D44 51CE FFD4                  		dbf	d6,loc_7BCE
00008D48 4E75                       		rts	
00008D4A                            ; End of function Obj15_Move2
00008D4A                            
00008D4A                            ; ===========================================================================
00008D4A                            
00008D4A                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008D4A 3028 003A                  		move.w	$3A(a0),d0
00008D4E 0240 FF80                  		andi.w	#$FF80,d0
00008D52 3238 F700                  		move.w	($FFFFF700).w,d1
00008D56 0441 0080                  		subi.w	#$80,d1
00008D5A 0241 FF80                  		andi.w	#$FF80,d1
00008D5E 9041                       		sub.w	d1,d0
00008D60 0C40 0280                  		cmpi.w	#$280,d0
00008D64 6300                       		bls.s	Obj15_NoDel
00008D66 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00008D6A 6700                       		beq.s	Obj15_DelAll		; if it's zero, don't remember object
00008D6C 3440                       		movea.w	d0,a2	; load address into a2
00008D6E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00008D72 6000                       		bra.s	Obj15_DelAll	; and delete object
00008D74                            
00008D74                            Obj15_NoDel:
00008D74 4E75                       		rts	
00008D76                            ; ===========================================================================
00008D76                            
00008D76                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00008D76 7400                       		moveq	#0,d2
00008D78 45E8 0028                  		lea	$28(a0),a2
00008D7C 141A                       		move.b	(a2)+,d2
00008D7E                            
00008D7E                            Obj15_DelLoop:
00008D7E 7000                       		moveq	#0,d0
00008D80 101A                       		move.b	(a2)+,d0
00008D82 ED48                       		lsl.w	#6,d0
00008D84 0680 00FF D000             		addi.l	#$FFD000,d0
00008D8A 2240                       		movea.l	d0,a1
00008D8C 6100 0000                  		bsr.w	DeleteObject2
00008D90 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008D94 4E75                       		rts	
00008D96                            ; ===========================================================================
00008D96                            
00008D96                            Obj15_Delete:				; XREF: Obj15_Index
00008D96 6100 0000                  		bsr.w	DeleteObject
00008D9A 4E75                       		rts	
00008D9C                            ; ===========================================================================
00008D9C                            
00008D9C                            Obj15_Display:				; XREF: Obj15_Index
00008D9C 6000 0000                  		bra.w	DisplaySprite
00008DA0                            ; ===========================================================================
00008DA0                            ; ---------------------------------------------------------------------------
00008DA0                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008DA0                            ; ---------------------------------------------------------------------------
00008DA0                            Map_obj15:
00008DA0                            	include "_maps\obj15ghz.asm"
00008DA0                            ; ---------------------------------------------------------------------------
00008DA0                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008DA0                            ; ---------------------------------------------------------------------------
00008DA0 0000                       		dc.w byte_7C4E-Map_obj15
00008DA2 0000                       		dc.w byte_7C59-Map_obj15
00008DA4 0000                       		dc.w byte_7C5F-Map_obj15
00008DA6 02                         byte_7C4E:	dc.b 2
00008DA7 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008DAC F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008DB1 01                         byte_7C59:	dc.b 1
00008DB2 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008DB7 01                         byte_7C5F:	dc.b 1
00008DB8 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008DBE 00                         		even
00008DBE 00                         		even
00008DBE                            
00008DBE                            ; ---------------------------------------------------------------------------
00008DBE                            ; Sprite mappings - SLZ	swinging platforms
00008DBE                            ; ---------------------------------------------------------------------------
00008DBE                            Map_obj15a:
00008DBE                            	include "_maps\obj15slz.asm"
00008DBE                            ; ---------------------------------------------------------------------------
00008DBE                            ; Sprite mappings - SLZ	swinging platforms
00008DBE                            ; ---------------------------------------------------------------------------
00008DBE 0000                       		dc.w byte_7C6C-Map_obj15a
00008DC0 0000                       		dc.w byte_7C95-Map_obj15a
00008DC2 0000                       		dc.w byte_7C9B-Map_obj15a
00008DC4 08                         byte_7C6C:	dc.b 8
00008DC5 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00008DCA F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008DCF F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008DD4 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008DD9 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008DDE 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008DE3 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008DE8 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008DED 01                         byte_7C95:	dc.b 1
00008DEE F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008DF3 01                         byte_7C9B:	dc.b 1
00008DF4 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008DFA 00                         		even
00008DFA 00                         		even
00008DFA                            
00008DFA                            ; ===========================================================================
00008DFA                            ; ---------------------------------------------------------------------------
00008DFA                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008DFA                            ; ---------------------------------------------------------------------------
00008DFA                            
00008DFA                            Obj17:					; XREF: Obj_Index
00008DFA 7000                       		moveq	#0,d0
00008DFC 1028 0024                  		move.b	$24(a0),d0
00008E00 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008E04 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008E08                            ; ===========================================================================
00008E08 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008E0A 0000                       		dc.w Obj17_Action-Obj17_Index
00008E0C 0000                       		dc.w Obj17_Action-Obj17_Index
00008E0E 0000                       		dc.w Obj17_Delete-Obj17_Index
00008E10 0000                       		dc.w Obj17_Display-Obj17_Index
00008E12                            ; ===========================================================================
00008E12                            
00008E12                            Obj17_Main:				; XREF: Obj17_Index
00008E12 5428 0024                  		addq.b	#2,$24(a0)
00008E16 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008E1E 317C 4398 0002             		move.w	#$4398,2(a0)
00008E24 117C 0007 0022             		move.b	#7,$22(a0)
00008E2A 117C 0004 0001             		move.b	#4,1(a0)
00008E30 117C 0003 0018             		move.b	#3,$18(a0)
00008E36 117C 0008 0019             		move.b	#8,$19(a0)
00008E3C 3428 000C                  		move.w	$C(a0),d2
00008E40 3628 0008                  		move.w	8(a0),d3
00008E44 1810                       		move.b	0(a0),d4
00008E46 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008E4A 7200                       		moveq	#0,d1
00008E4C 1212                       		move.b	(a2),d1		; move a2 to d1
00008E4E 14FC 0000                  		move.b	#0,(a2)+
00008E52 3001                       		move.w	d1,d0
00008E54 E248                       		lsr.w	#1,d0
00008E56 E948                       		lsl.w	#4,d0
00008E58 9640                       		sub.w	d0,d3
00008E5A 5501                       		subq.b	#2,d1
00008E5C 6500                       		bcs.s	Obj17_Action
00008E5E 7C00                       		moveq	#0,d6
00008E60                            
00008E60                            Obj17_MakeHelix:
00008E60 6100 0000                  		bsr.w	SingleObjLoad
00008E64 6600                       		bne.s	Obj17_Action
00008E66 5228 0028                  		addq.b	#1,$28(a0)
00008E6A 3A09                       		move.w	a1,d5
00008E6C 0445 D000                  		subi.w	#$D000,d5
00008E70 EC4D                       		lsr.w	#6,d5
00008E72 0245 007F                  		andi.w	#$7F,d5
00008E76 14C5                       		move.b	d5,(a2)+
00008E78 137C 0008 0024             		move.b	#8,$24(a1)
00008E7E 1284                       		move.b	d4,0(a1)
00008E80 3342 000C                  		move.w	d2,$C(a1)
00008E84 3343 0008                  		move.w	d3,8(a1)
00008E88 2368 0004 0004             		move.l	4(a0),4(a1)
00008E8E 337C 4398 0002             		move.w	#$4398,2(a1)
00008E94 137C 0004 0001             		move.b	#4,1(a1)
00008E9A 137C 0003 0018             		move.b	#3,$18(a1)
00008EA0 137C 0008 0019             		move.b	#8,$19(a1)
00008EA6 1346 003E                  		move.b	d6,$3E(a1)
00008EAA 5206                       		addq.b	#1,d6
00008EAC 0206 0007                  		andi.b	#7,d6
00008EB0 0643 0010                  		addi.w	#$10,d3
00008EB4 B668 0008                  		cmp.w	8(a0),d3
00008EB8 6600                       		bne.s	loc_7D78
00008EBA 1146 003E                  		move.b	d6,$3E(a0)
00008EBE 5206                       		addq.b	#1,d6
00008EC0 0206 0007                  		andi.b	#7,d6
00008EC4 0643 0010                  		addi.w	#$10,d3
00008EC8 5228 0028                  		addq.b	#1,$28(a0)
00008ECC                            
00008ECC                            loc_7D78:
00008ECC 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008ED0                            
00008ED0                            Obj17_Action:				; XREF: Obj17_Index
00008ED0 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008ED4 6100 0000                  		bsr.w	DisplaySprite
00008ED8 6000 0000                  		bra.w	Obj17_ChkDel
00008EDC                            
00008EDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EDC                            
00008EDC                            
00008EDC                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008EDC 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008EE0 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008EE6 D028 003E                  		add.b	$3E(a0),d0
00008EEA 0200 0007                  		andi.b	#7,d0
00008EEE 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008EF2 6600                       		bne.s	locret_7DA6
00008EF4 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008EFA                            
00008EFA                            locret_7DA6:
00008EFA 4E75                       		rts	
00008EFC                            ; End of function Obj17_RotateSpikes
00008EFC                            
00008EFC                            ; ===========================================================================
00008EFC                            
00008EFC                            Obj17_ChkDel:				; XREF: Obj17_Action
00008EFC 3028 0008                  		move.w	8(a0),d0
00008F00 0240 FF80                  		andi.w	#$FF80,d0
00008F04 3238 F700                  		move.w	($FFFFF700).w,d1
00008F08 0441 0080                  		subi.w	#$80,d1
00008F0C 0241 FF80                  		andi.w	#$FF80,d1
00008F10 9041                       		sub.w	d1,d0
00008F12 0C40 0280                  		cmpi.w	#$280,d0
00008F16 6300                       		bls.s	Obj17_NoDel
00008F18 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00008F1C 6700                       		beq.s	Obj17_DelAll		; if it's zero, don't remember object
00008F1E 3440                       		movea.w	d0,a2	; load address into a2
00008F20 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00008F24 6000                       		bra.s	Obj17_DelAll	; and delete object
00008F26                            
00008F26                            Obj17_NoDel:
00008F26 4E75                       		rts	
00008F28                            ; ===========================================================================
00008F28                            
00008F28                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008F28 7400                       		moveq	#0,d2
00008F2A 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008F2E 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008F30 5502                       		subq.b	#2,d2
00008F32 6500                       		bcs.s	Obj17_Delete
00008F34                            
00008F34                            Obj17_DelLoop:
00008F34 7000                       		moveq	#0,d0
00008F36 101A                       		move.b	(a2)+,d0
00008F38 ED48                       		lsl.w	#6,d0
00008F3A 0680 00FF D000             		addi.l	#$FFD000,d0
00008F40 2240                       		movea.l	d0,a1
00008F42 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008F46 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008F4A                            
00008F4A                            Obj17_Delete:				; XREF: Obj17_Index
00008F4A 6100 0000                  		bsr.w	DeleteObject
00008F4E 4E75                       		rts	
00008F50                            ; ===========================================================================
00008F50                            
00008F50                            Obj17_Display:				; XREF: Obj17_Index
00008F50 6100 FF8A                  		bsr.w	Obj17_RotateSpikes
00008F54 6000 0000                  		bra.w	DisplaySprite
00008F58                            ; ===========================================================================
00008F58                            ; ---------------------------------------------------------------------------
00008F58                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008F58                            ; ---------------------------------------------------------------------------
00008F58                            Map_obj17:
00008F58                            	include "_maps\obj17.asm"
00008F58                            ; ---------------------------------------------------------------------------
00008F58                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008F58                            ; ---------------------------------------------------------------------------
00008F58 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008F5C 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008F60 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008F64 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008F68 01                         byte_7E08:	dc.b 1
00008F69 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008F6E 01                         byte_7E0E:	dc.b 1
00008F6F F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008F74 01                         byte_7E14:	dc.b 1
00008F75 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008F7A 01                         byte_7E1A:	dc.b 1
00008F7B FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008F80 01                         byte_7E20:	dc.b 1
00008F81 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008F86 01                         byte_7E26:	dc.b 1
00008F87 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008F8C 01                         byte_7E2C:	dc.b 1
00008F8D F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008F92                            		even
00008F92                            		even
00008F92                            
00008F92                            ; ===========================================================================
00008F92                            ; ---------------------------------------------------------------------------
00008F92                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008F92                            ; ---------------------------------------------------------------------------
00008F92                            
00008F92                            Obj18:					; XREF: Obj_Index
00008F92 7000                       		moveq	#0,d0
00008F94 1028 0024                  		move.b	$24(a0),d0
00008F98 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008F9C 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008FA0                            ; ===========================================================================
00008FA0 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008FA2 0000                       		dc.w Obj18_Solid-Obj18_Index
00008FA4 0000                       		dc.w Obj18_Action2-Obj18_Index
00008FA6 0000                       		dc.w Obj18_Delete-Obj18_Index
00008FA8 0000                       		dc.w Obj18_Action-Obj18_Index
00008FAA                            ; ===========================================================================
00008FAA                            
00008FAA                            Obj18_Main:				; XREF: Obj18_Index
00008FAA 5428 0024                  		addq.b	#2,$24(a0)
00008FAE 317C 4000 0002             		move.w	#$4000,2(a0)
00008FB4 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008FBC 117C 0020 0019             		move.b	#$20,$19(a0)
00008FC2 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008FC8 6600                       		bne.s	Obj18_NotSYZ
00008FCA 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008FD2 117C 0020 0019             		move.b	#$20,$19(a0)
00008FD8                            
00008FD8                            Obj18_NotSYZ:
00008FD8 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008FDE 6600                       		bne.s	Obj18_NotSLZ
00008FE0 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008FE8 117C 0020 0019             		move.b	#$20,$19(a0)
00008FEE 317C 4000 0002             		move.w	#$4000,2(a0)
00008FF4 117C 0003 0028             		move.b	#3,$28(a0)
00008FFA                            
00008FFA                            Obj18_NotSLZ:
00008FFA 117C 0004 0001             		move.b	#4,1(a0)
00009000 117C 0004 0018             		move.b	#4,$18(a0)
00009006 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000900C 3168 000C 0034             		move.w	$C(a0),$34(a0)
00009012 3168 0008 0032             		move.w	8(a0),$32(a0)
00009018 317C 0080 0026             		move.w	#$80,$26(a0)
0000901E 7200                       		moveq	#0,d1
00009020 1028 0028                  		move.b	$28(a0),d0
00009024 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00009028 6600                       		bne.s	Obj18_SetFrame	; if not, branch
0000902A 5201                       		addq.b	#1,d1		; use frame #1
0000902C 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00009032                            
00009032                            Obj18_SetFrame:
00009032 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00009036                            
00009036                            Obj18_Solid:				; XREF: Obj18_Index
00009036 4A28 0038                  		tst.b	$38(a0)
0000903A 6700                       		beq.s	loc_7EE0
0000903C 5928 0038                  		subq.b	#4,$38(a0)
00009040                            
00009040                            loc_7EE0:
00009040 7200                       		moveq	#0,d1
00009042 1228 0019                  		move.b	$19(a0),d1
00009046 6100 F502                  		bsr.w	PlatformObject
0000904A                            
0000904A                            Obj18_Action:				; XREF: Obj18_Index
0000904A 6100 0000                  		bsr.w	Obj18_Move
0000904E 6100 0000                  		bsr.w	Obj18_Nudge
00009052 6100 0000                  		bsr.w	DisplaySprite
00009056 6000 0000                  		bra.w	Obj18_ChkDel
0000905A                            ; ===========================================================================
0000905A                            
0000905A                            Obj18_Action2:				; XREF: Obj18_Index
0000905A 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00009060 6700                       		beq.s	loc_7F06
00009062 5828 0038                  		addq.b	#4,$38(a0)
00009066                            
00009066                            loc_7F06:
00009066 7200                       		moveq	#0,d1
00009068 1228 0019                  		move.b	$19(a0),d1
0000906C 6100 F650                  		bsr.w	ExitPlatform
00009070 3F28 0008                  		move.w	8(a0),-(sp)
00009074 6100 0000                  		bsr.w	Obj18_Move
00009078 6100 0000                  		bsr.w	Obj18_Nudge
0000907C 341F                       		move.w	(sp)+,d2
0000907E 6100 FBB4                  		bsr.w	MvSonicOnPtfm2
00009082 6100 0000                  		bsr.w	DisplaySprite
00009086 6000 0000                  		bra.w	Obj18_ChkDel
0000908A                            
0000908A 4E75                       		rts
0000908C                            
0000908C                            ; ---------------------------------------------------------------------------
0000908C                            ; Subroutine to	move platform slightly when you	stand on it
0000908C                            ; ---------------------------------------------------------------------------
0000908C                            
0000908C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000908C                            
0000908C                            
0000908C                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
0000908C 1028 0038                  		move.b	$38(a0),d0
00009090 6100 993A                  		bsr.w	CalcSine
00009094 323C 0400                  		move.w	#$400,d1
00009098 C1C1                       		muls.w	d1,d0
0000909A 4840                       		swap	d0
0000909C D068 002C                  		add.w	$2C(a0),d0
000090A0 3140 000C                  		move.w	d0,$C(a0)
000090A4 4E75                       		rts	
000090A6                            ; End of function Obj18_Nudge
000090A6                            
000090A6                            ; ---------------------------------------------------------------------------
000090A6                            ; Subroutine to	move platforms
000090A6                            ; ---------------------------------------------------------------------------
000090A6                            
000090A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000090A6                            
000090A6                            
000090A6                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
000090A6 7000                       		moveq	#0,d0
000090A8 1028 0028                  		move.b	$28(a0),d0
000090AC 0240 000F                  		andi.w	#$F,d0
000090B0 D040                       		add.w	d0,d0
000090B2 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000090B6 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000090BA                            ; End of function Obj18_Move
000090BA                            
000090BA                            ; ===========================================================================
000090BA 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000090BE 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000090C2 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000090C6 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000090CA 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000090CE 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000090D2 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000090D4                            ; ===========================================================================
000090D4                            
000090D4                            Obj18_Type00:
000090D4 4E75                       		rts			; platform 00 doesn't move
000090D6                            ; ===========================================================================
000090D6                            
000090D6                            Obj18_Type05:
000090D6 3028 0032                  		move.w	$32(a0),d0
000090DA 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000090DE 4401                       		neg.b	d1		; reverse platform-motion
000090E0 0601 0040                  		addi.b	#$40,d1
000090E4 6000                       		bra.s	Obj18_01_Move
000090E6                            ; ===========================================================================
000090E6                            
000090E6                            Obj18_Type01:
000090E6 3028 0032                  		move.w	$32(a0),d0
000090EA 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000090EE 0401 0040                  		subi.b	#$40,d1
000090F2                            
000090F2                            Obj18_01_Move:
000090F2 4881                       		ext.w	d1
000090F4 D041                       		add.w	d1,d0
000090F6 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000090FA 6000 0000                  		bra.w	Obj18_ChgMotion
000090FE                            ; ===========================================================================
000090FE                            
000090FE                            Obj18_Type0C:
000090FE 3028 0034                  		move.w	$34(a0),d0
00009102 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00009106 4401                       		neg.b	d1		; reverse platform-motion
00009108 0601 0030                  		addi.b	#$30,d1
0000910C 6000                       		bra.s	Obj18_02_Move
0000910E                            ; ===========================================================================
0000910E                            
0000910E                            Obj18_Type0B:
0000910E 3028 0034                  		move.w	$34(a0),d0
00009112 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00009116 0401 0030                  		subi.b	#$30,d1
0000911A 6000                       		bra.s	Obj18_02_Move
0000911C                            ; ===========================================================================
0000911C                            
0000911C                            Obj18_Type06:
0000911C 3028 0034                  		move.w	$34(a0),d0
00009120 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00009124 4401                       		neg.b	d1		; reverse platform-motion
00009126 0601 0040                  		addi.b	#$40,d1
0000912A 6000                       		bra.s	Obj18_02_Move
0000912C                            ; ===========================================================================
0000912C                            
0000912C                            Obj18_Type02:
0000912C 3028 0034                  		move.w	$34(a0),d0
00009130 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00009134 0401 0040                  		subi.b	#$40,d1
00009138                            
00009138                            Obj18_02_Move:
00009138 4881                       		ext.w	d1
0000913A D041                       		add.w	d1,d0
0000913C 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009140 6000 0000                  		bra.w	Obj18_ChgMotion
00009144                            ; ===========================================================================
00009144                            
00009144                            Obj18_Type03:
00009144 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009148 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
0000914A 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00009150 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00009152 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00009158                            
00009158                            Obj18_03_NoMove:
00009158 4E75                       		rts	
0000915A                            ; ===========================================================================
0000915A                            
0000915A                            Obj18_03_Wait:
0000915A 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
0000915E 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00009160 317C 0020 003A             		move.w	#32,$3A(a0)
00009166 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
0000916A 4E75                       		rts	
0000916C                            ; ===========================================================================
0000916C                            
0000916C                            Obj18_Type04:
0000916C 4A68 003A                  		tst.w	$3A(a0)
00009170 6700                       		beq.s	loc_8048
00009172 5368 003A                  		subq.w	#1,$3A(a0)
00009176 6600                       		bne.s	loc_8048
00009178 0828 0003 0022             		btst	#3,$22(a0)
0000917E 6700                       		beq.s	loc_8042
00009180 08E9 0001 0022             		bset	#1,$22(a1)
00009186 08A9 0003 0022             		bclr	#3,$22(a1)
0000918C 137C 0002 0024             		move.b	#2,$24(a1)
00009192 08A8 0003 0022             		bclr	#3,$22(a0)
00009198 4228 0025                  		clr.b	$25(a0)
0000919C 3368 0012 0012             		move.w	$12(a0),$12(a1)
000091A2                            
000091A2                            loc_8042:
000091A2 117C 0008 0024             		move.b	#8,$24(a0)
000091A8                            
000091A8                            loc_8048:
000091A8 2628 002C                  		move.l	$2C(a0),d3
000091AC 3028 0012                  		move.w	$12(a0),d0
000091B0 48C0                       		ext.l	d0
000091B2 E180                       		asl.l	#8,d0
000091B4 D680                       		add.l	d0,d3
000091B6 2143 002C                  		move.l	d3,$2C(a0)
000091BA 0668 0038 0012             		addi.w	#$38,$12(a0)
000091C0 3038 F72E                  		move.w	($FFFFF72E).w,d0
000091C4 0640 00E0                  		addi.w	#$E0,d0
000091C8 B068 002C                  		cmp.w	$2C(a0),d0
000091CC 6400                       		bcc.s	locret_8074
000091CE 117C 0006 0024             		move.b	#6,$24(a0)
000091D4                            
000091D4                            locret_8074:
000091D4 4E75                       		rts	
000091D6                            ; ===========================================================================
000091D6                            
000091D6                            Obj18_Type07:
000091D6 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000091DA 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
000091DC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
000091E0 7000                       		moveq	#0,d0
000091E2 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
000091E6 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000091E8 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000091EC 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000091EE 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000091F4                            
000091F4                            Obj18_07_NoMove:
000091F4 4E75                       		rts	
000091F6                            ; ===========================================================================
000091F6                            
000091F6                            Obj18_07_Wait:
000091F6 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000091FA 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000091FC 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00009200 4E75                       		rts	
00009202                            ; ===========================================================================
00009202                            
00009202                            Obj18_Type08:
00009202 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009206 3028 0034                  		move.w	$34(a0),d0
0000920A 0440 0200                  		subi.w	#$200,d0
0000920E B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009212 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00009214 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00009218                            
00009218                            Obj18_08_NoStop:
00009218 4E75                       		rts	
0000921A                            ; ===========================================================================
0000921A                            
0000921A                            Obj18_Type0A:
0000921A 3028 0034                  		move.w	$34(a0),d0
0000921E 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00009222 0401 0040                  		subi.b	#$40,d1
00009226 4881                       		ext.w	d1
00009228 E241                       		asr.w	#1,d1
0000922A D041                       		add.w	d1,d0
0000922C 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009230                            
00009230                            Obj18_ChgMotion:
00009230 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00009236 4E75                       		rts	
00009238                            ; ===========================================================================
00009238                            
00009238                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00009238 3028 0032                  		move.w	$32(a0),d0
0000923C 0240 FF80                  		andi.w	#$FF80,d0
00009240 3238 F700                  		move.w	($FFFFF700).w,d1
00009244 0441 0080                  		subi.w	#$80,d1
00009248 0241 FF80                  		andi.w	#$FF80,d1
0000924C 9041                       		sub.w	d1,d0
0000924E 0C40 0280                  		cmpi.w	#$280,d0
00009252 6300                       		bls.s	Obj18_NoDel
00009254 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00009258 6700                       		beq.s	Obj18_Delete		; if it's zero, don't remember object
0000925A 3440                       		movea.w	d0,a2	; load address into a2
0000925C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00009260 6000                       		bra.s	Obj18_Delete	; and delete object
00009262                            
00009262                            Obj18_NoDel:
00009262 4E75                       		rts	
00009264                            ; ===========================================================================
00009264                            
00009264                            Obj18_Delete:				; XREF: Obj18_Index
00009264 6000 0000                  		bra.w	DeleteObject
00009268                            ; ===========================================================================
00009268                            ; ---------------------------------------------------------------------------
00009268                            ; Sprite mappings - unused
00009268                            ; ---------------------------------------------------------------------------
00009268                            Map_obj18x:
00009268                            	include "_maps\obj18x.asm"
00009268                            ; ---------------------------------------------------------------------------
00009268                            ; Sprite mappings - unused
00009268                            ; ---------------------------------------------------------------------------
00009268 0000                       		dc.w byte_80FE-Map_obj18x
0000926A 0000                       		dc.w byte_8109-Map_obj18x
0000926C 02                         byte_80FE:	dc.b 2
0000926D F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009272 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009277 0A                         byte_8109:	dc.b $A
00009278 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
0000927D 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009282 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00009287 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
0000928C 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009291 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00009296 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
0000929B 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
000092A0 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
000092A5 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
000092AA                            		even
000092AA                            		even
000092AA                            
000092AA                            ; ---------------------------------------------------------------------------
000092AA                            ; Sprite mappings - GHZ	platforms
000092AA                            ; ---------------------------------------------------------------------------
000092AA                            Map_obj18:
000092AA                            	include "_maps\obj18ghz.asm"
000092AA                            ; ---------------------------------------------------------------------------
000092AA                            ; Sprite mappings - GHZ	platforms
000092AA                            ; ---------------------------------------------------------------------------
000092AA 0000                       		dc.w byte_8140-Map_obj18
000092AC 0000                       		dc.w byte_8155-Map_obj18
000092AE 04                         byte_8140:	dc.b 4
000092AF F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
000092B4 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
000092B9 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
000092BE F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
000092C3 0A                         byte_8155:	dc.b $A
000092C4 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000092C9 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
000092CE 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
000092D3 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
000092D8 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000092DD F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000092E2 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
000092E7 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000092EC 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000092F1 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000092F6                            		even
000092F6                            		even
000092F6                            
000092F6                            ; ---------------------------------------------------------------------------
000092F6                            ; Sprite mappings - SYZ	platforms
000092F6                            ; ---------------------------------------------------------------------------
000092F6                            Map_obj18a:
000092F6                            	include "_maps\obj18syz.asm"
000092F6                            ; ---------------------------------------------------------------------------
000092F6                            ; Sprite mappings - SYZ	platforms
000092F6                            ; ---------------------------------------------------------------------------
000092F6 0000                       		dc.w byte_818A-Map_obj18a
000092F8 03                         byte_818A:	dc.b 3
000092F9 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000092FE F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009303 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009308                            		even
00009308                            		even
00009308                            
00009308                            ; ---------------------------------------------------------------------------
00009308                            ; Sprite mappings - SLZ	platforms
00009308                            ; ---------------------------------------------------------------------------
00009308                            Map_obj18b:
00009308                            	include "_maps\obj18slz.asm"
00009308                            ; ---------------------------------------------------------------------------
00009308                            ; Sprite mappings - SLZ	platforms
00009308                            ; ---------------------------------------------------------------------------
00009308 0000                       		dc.w byte_819C-Map_obj18b
0000930A 02                         byte_819C:	dc.b 2
0000930B F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009310 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009316 00                         		even
00009316 00                         		even
00009316                            
00009316                            ; ===========================================================================
00009316                            ; ---------------------------------------------------------------------------
00009316                            ; Object 19 - blank
00009316                            ; ---------------------------------------------------------------------------
00009316                            
00009316                            Obj19:					; XREF: Obj_Index
00009316 4E75                       		rts	
00009318                            ; ===========================================================================
00009318                            ; ---------------------------------------------------------------------------
00009318                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009318                            ; ---------------------------------------------------------------------------
00009318                            Map_obj48:
00009318                            	include "_maps\obj48.asm"
00009318                            ; ---------------------------------------------------------------------------
00009318                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009318                            ; ---------------------------------------------------------------------------
00009318 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
0000931C 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00009320 06                         byte_81B2:	dc.b 6
00009321 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009326 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
0000932B E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009330 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009335 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0000933A 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000933F 04                         byte_81D1:	dc.b 4
00009340 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009345 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
0000934A 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000934F 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009354 04                         byte_81E6:	dc.b 4
00009355 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0000935A E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000935F 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009364 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009369 04                         byte_81FB:	dc.b 4
0000936A E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0000936F E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009374 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009379 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000937E                            		even
0000937E                            		even
0000937E                            
0000937E                            ; ===========================================================================
0000937E                            ; ---------------------------------------------------------------------------
0000937E                            ; Object 1A - GHZ collapsing ledge
0000937E                            ; ---------------------------------------------------------------------------
0000937E                            
0000937E                            Obj1A:					; XREF: Obj_Index
0000937E 7000                       		moveq	#0,d0
00009380 1028 0024                  		move.b	$24(a0),d0
00009384 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00009388 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
0000938C                            ; ===========================================================================
0000938C 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00009390 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00009394 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00009398                            ; ===========================================================================
00009398                            
00009398                            Obj1A_Main:				; XREF: Obj1A_Index
00009398 5428 0024                  		addq.b	#2,$24(a0)
0000939C 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
000093A4 317C 4000 0002             		move.w	#$4000,2(a0)
000093AA 0028 0004 0001             		ori.b	#4,1(a0)
000093B0 117C 0004 0018             		move.b	#4,$18(a0)
000093B6 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
000093BC 117C 0064 0019             		move.b	#$64,$19(a0)
000093C2 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000093C8 117C 0038 0016             		move.b	#$38,$16(a0)
000093CE 08E8 0004 0001             		bset	#4,1(a0)
000093D4                            
000093D4                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
000093D4 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
000093D8 6700                       		beq.s	Obj1A_Slope	; if not, branch
000093DA 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
000093DE 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
000093E2 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000093E6                            
000093E6                            Obj1A_Slope:
000093E6 323C 0030                  		move.w	#$30,d1
000093EA 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000093F0 6100 F22C                  		bsr.w	SlopeObject
000093F4 6000 0000                  		bra.w	MarkObjGone
000093F8                            ; ===========================================================================
000093F8                            
000093F8                            Obj1A_Touch:				; XREF: Obj1A_Index
000093F8 4A28 0038                  		tst.b	$38(a0)
000093FC 6700 0000                  		beq.w	loc_847A
00009400 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009406 5328 0038                  		subq.b	#1,$38(a0)
0000940A                            
0000940A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000940A                            
0000940A                            
0000940A                            Obj1A_WalkOff:				; XREF: Obj1A_Index
0000940A 323C 0030                  		move.w	#$30,d1
0000940E 6100 F2AE                  		bsr.w	ExitPlatform
00009412 323C 0030                  		move.w	#$30,d1
00009416 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000941C 3428 0008                  		move.w	8(a0),d2
00009420 6100 0000                  		bsr.w	SlopeObject2
00009424 6000 0000                  		bra.w	MarkObjGone
00009428                            ; End of function Obj1A_WalkOff
00009428                            
00009428                            ; ===========================================================================
00009428                            
00009428                            Obj1A_Display:				; XREF: Obj1A_Index
00009428 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000942C 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
0000942E 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009432 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009436 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000943A 6000 0000                  		bra.w	DisplaySprite
0000943E                            ; ===========================================================================
0000943E                            
0000943E                            loc_82D0:				; XREF: Obj1A_Display
0000943E 5328 0038                  		subq.b	#1,$38(a0)
00009442 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00009446 43F8 D000                  		lea	($FFFFD000).w,a1
0000944A 0829 0003 0022             		btst	#3,$22(a1)
00009450 6700                       		beq.s	loc_82FC
00009452 4A28 0038                  		tst.b	$38(a0)
00009456 6600                       		bne.s	locret_8308
00009458 08A9 0003 0022             		bclr	#3,$22(a1)
0000945E 08A9 0005 0022             		bclr	#5,$22(a1)
00009464 137C 0001 001D             		move.b	#1,$1D(a1)
0000946A                            
0000946A                            loc_82FC:
0000946A 117C 0000 003A             		move.b	#0,$3A(a0)
00009470 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00009476                            
00009476                            locret_8308:
00009476 4E75                       		rts	
00009478                            ; ===========================================================================
00009478                            
00009478                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00009478 6100 0000                  		bsr.w	ObjectFall
0000947C 6100 0000                  		bsr.w	DisplaySprite
00009480 4A28 0001                  		tst.b	1(a0)
00009484 6A00                       		bpl.s	Obj1A_Delete
00009486 4E75                       		rts	
00009488                            ; ===========================================================================
00009488                            
00009488                            Obj1A_Delete:				; XREF: Obj1A_Index
00009488 6100 0000                  		bsr.w	DeleteObject
0000948C 4E75                       		rts	
0000948E                            ; ===========================================================================
0000948E                            ; ---------------------------------------------------------------------------
0000948E                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
0000948E                            ; ---------------------------------------------------------------------------
0000948E                            
0000948E                            Obj53:					; XREF: Obj_Index
0000948E 7000                       		moveq	#0,d0
00009490 1028 0024                  		move.b	$24(a0),d0
00009494 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00009498 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
0000949C                            ; ===========================================================================
0000949C 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
000094A0 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
000094A4 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
000094A8                            ; ===========================================================================
000094A8                            
000094A8                            Obj53_Main:				; XREF: Obj53_Index
000094A8 5428 0024                  		addq.b	#2,$24(a0)
000094AC 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
000094B4 317C 42B8 0002             		move.w	#$42B8,2(a0)
000094BA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000094C0 6600                       		bne.s	Obj53_NotSLZ
000094C2 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
000094C8 5428 001A                  		addq.b	#2,$1A(a0)
000094CC                            
000094CC                            Obj53_NotSLZ:
000094CC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000094D2 6600                       		bne.s	Obj53_NotSBZ
000094D4 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
000094DA                            
000094DA                            Obj53_NotSBZ:
000094DA 0028 0004 0001             		ori.b	#4,1(a0)
000094E0 117C 0004 0018             		move.b	#4,$18(a0)
000094E6 117C 0007 0038             		move.b	#7,$38(a0)
000094EC 117C 0044 0019             		move.b	#$44,$19(a0)
000094F2                            
000094F2                            Obj53_ChkTouch:				; XREF: Obj53_Index
000094F2 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000094F6 6700                       		beq.s	Obj53_Solid	; if not, branch
000094F8 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000094FC 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00009500 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009504                            
00009504                            Obj53_Solid:
00009504 323C 0020                  		move.w	#$20,d1
00009508 6100 F040                  		bsr.w	PlatformObject
0000950C 4A28 0028                  		tst.b	$28(a0)
00009510 6A00                       		bpl.s	Obj53_MarkAsGone
00009512 0829 0003 0022             		btst	#3,$22(a1)
00009518 6700                       		beq.s	Obj53_MarkAsGone
0000951A 08A8 0000 0001             		bclr	#0,1(a0)
00009520 3029 0008                  		move.w	8(a1),d0
00009524 9068 0008                  		sub.w	8(a0),d0
00009528 6400                       		bcc.s	Obj53_MarkAsGone
0000952A 08E8 0000 0001             		bset	#0,1(a0)
00009530                            
00009530                            Obj53_MarkAsGone:
00009530 6000 0000                  		bra.w	MarkObjGone
00009534                            ; ===========================================================================
00009534                            
00009534                            Obj53_Touch:				; XREF: Obj53_Index
00009534 4A28 0038                  		tst.b	$38(a0)
00009538 6700 0000                  		beq.w	loc_8458
0000953C 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009542 5328 0038                  		subq.b	#1,$38(a0)
00009546                            
00009546                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009546                            
00009546                            
00009546                            Obj53_WalkOff:				; XREF: Obj53_Index
00009546 323C 0020                  		move.w	#$20,d1
0000954A 6100 F172                  		bsr.w	ExitPlatform
0000954E 3428 0008                  		move.w	8(a0),d2
00009552 6100 F6E0                  		bsr.w	MvSonicOnPtfm2
00009556 6000 0000                  		bra.w	MarkObjGone
0000955A                            ; End of function Obj53_WalkOff
0000955A                            
0000955A                            ; ===========================================================================
0000955A                            
0000955A                            Obj53_Display:				; XREF: Obj53_Index
0000955A 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000955E 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00009560 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009564 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009568 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000956C 6000 0000                  		bra.w	DisplaySprite
00009570                            ; ===========================================================================
00009570                            
00009570                            loc_8402:
00009570 5328 0038                  		subq.b	#1,$38(a0)
00009574 6100 FFD0                  		bsr.w	Obj53_WalkOff
00009578 43F8 D000                  		lea	($FFFFD000).w,a1
0000957C 0829 0003 0022             		btst	#3,$22(a1)
00009582 6700                       		beq.s	loc_842E
00009584 4A28 0038                  		tst.b	$38(a0)
00009588 6600                       		bne.s	locret_843A
0000958A 08A9 0003 0022             		bclr	#3,$22(a1)
00009590 08A9 0005 0022             		bclr	#5,$22(a1)
00009596 137C 0001 001D             		move.b	#1,$1D(a1)
0000959C                            
0000959C                            loc_842E:
0000959C 117C 0000 003A             		move.b	#0,$3A(a0)
000095A2 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
000095A8                            
000095A8                            locret_843A:
000095A8 4E75                       		rts	
000095AA                            ; ===========================================================================
000095AA                            
000095AA                            Obj53_TimeZero:				; XREF: Obj53_Display
000095AA 6100 0000                  		bsr.w	ObjectFall
000095AE 6100 0000                  		bsr.w	DisplaySprite
000095B2 4A28 0001                  		tst.b	1(a0)
000095B6 6A00                       		bpl.s	Obj53_Delete
000095B8 4E75                       		rts	
000095BA                            ; ===========================================================================
000095BA                            
000095BA                            Obj53_Delete:				; XREF: Obj53_Index
000095BA 6100 0000                  		bsr.w	DeleteObject
000095BE 4E75                       		rts	
000095C0                            ; ===========================================================================
000095C0                            
000095C0                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
000095C0 117C 0000 003A             		move.b	#0,$3A(a0)
000095C6                            
000095C6                            loc_8458:				; XREF: Obj53_Touch
000095C6 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
000095CC 0828 0000 0028             		btst	#0,$28(a0)
000095D2 6700                       		beq.s	loc_846C
000095D4 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
000095DA                            
000095DA                            loc_846C:
000095DA 7207                       		moveq	#7,d1
000095DC 5228 001A                  		addq.b	#1,$1A(a0)
000095E0 6000                       		bra.s	loc_8486
000095E2                            ; ===========================================================================
000095E2                            
000095E2                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
000095E2 117C 0000 003A             		move.b	#0,$3A(a0)
000095E8                            
000095E8                            loc_847A:				; XREF: Obj1A_Touch
000095E8 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
000095EE 7218                       		moveq	#$18,d1
000095F0 5428 001A                  		addq.b	#2,$1A(a0)
000095F4                            
000095F4                            loc_8486:				; XREF: Obj53_Collapse
000095F4 7000                       		moveq	#0,d0
000095F6 1028 001A                  		move.b	$1A(a0),d0
000095FA D040                       		add.w	d0,d0
000095FC 2668 0004                  		movea.l	4(a0),a3
00009600 D6F3 0000                  		adda.w	(a3,d0.w),a3
00009604 524B                       		addq.w	#1,a3
00009606 08E8 0005 0001             		bset	#5,1(a0)
0000960C 1810                       		move.b	0(a0),d4
0000960E 1A28 0001                  		move.b	1(a0),d5
00009612 2248                       		movea.l	a0,a1
00009614 6000                       		bra.s	loc_84B2
00009616                            ; ===========================================================================
00009616                            
00009616                            loc_84AA:
00009616 6100 0000                  		bsr.w	SingleObjLoad
0000961A 6600                       		bne.s	loc_84F2
0000961C 5A4B                       		addq.w	#5,a3
0000961E                            
0000961E                            loc_84B2:
0000961E 137C 0006 0024             		move.b	#6,$24(a1)
00009624 1284                       		move.b	d4,0(a1)
00009626 234B 0004                  		move.l	a3,4(a1)
0000962A 1345 0001                  		move.b	d5,1(a1)
0000962E 3368 0008 0008             		move.w	8(a0),8(a1)
00009634 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000963A 3368 0002 0002             		move.w	2(a0),2(a1)
00009640 1368 0018 0018             		move.b	$18(a0),$18(a1)
00009646 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000964C 135C 0038                  		move.b	(a4)+,$38(a1)
00009650 B3C8                       		cmpa.l	a0,a1
00009652 6400                       		bcc.s	loc_84EE
00009654 6100 0000                  		bsr.w	DisplaySprite2
00009658                            
00009658                            loc_84EE:
00009658 51C9 FFBC                  		dbf	d1,loc_84AA
0000965C                            
0000965C                            loc_84F2:
0000965C 6100 0000                  		bsr.w	DisplaySprite
00009660 303C 00B9                  		move.w	#$B9,d0
00009664 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play collapsing	sound
0000966A                            ; ===========================================================================
0000966A                            ; ---------------------------------------------------------------------------
0000966A                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
0000966A                            ; ---------------------------------------------------------------------------
0000966A 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
0000967A 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00009684 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
0000968C 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00009694                            
00009694                            ; ---------------------------------------------------------------------------
00009694                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00009694                            ; ---------------------------------------------------------------------------
00009694                            
00009694                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009694                            
00009694                            
00009694                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00009694 43F8 D000                  		lea	($FFFFD000).w,a1
00009698 0829 0003 0022             		btst	#3,$22(a1)
0000969E 6700                       		beq.s	locret_856E
000096A0 3029 0008                  		move.w	8(a1),d0
000096A4 9068 0008                  		sub.w	8(a0),d0
000096A8 D041                       		add.w	d1,d0
000096AA E248                       		lsr.w	#1,d0
000096AC 0828 0000 0001             		btst	#0,1(a0)
000096B2 6700                       		beq.s	loc_854E
000096B4 4640                       		not.w	d0
000096B6 D041                       		add.w	d1,d0
000096B8                            
000096B8                            loc_854E:
000096B8 7200                       		moveq	#0,d1
000096BA 1232 0000                  		move.b	(a2,d0.w),d1
000096BE 3028 000C                  		move.w	$C(a0),d0
000096C2 9041                       		sub.w	d1,d0
000096C4 7200                       		moveq	#0,d1
000096C6 1229 0016                  		move.b	$16(a1),d1
000096CA 9041                       		sub.w	d1,d0
000096CC 3340 000C                  		move.w	d0,$C(a1)
000096D0 9468 0008                  		sub.w	8(a0),d2
000096D4 9569 0008                  		sub.w	d2,8(a1)
000096D8                            
000096D8                            locret_856E:
000096D8 4E75                       		rts	
000096DA                            ; End of function SlopeObject2
000096DA                            
000096DA                            ; ===========================================================================
000096DA                            ; ---------------------------------------------------------------------------
000096DA                            ; Collision data for GHZ collapsing ledge
000096DA                            ; ---------------------------------------------------------------------------
000096DA                            Obj1A_SlopeData:
000096DA                            		incbin	misc\ghzledge.bin
0000970A                            		even
0000970A                            
0000970A                            ; ---------------------------------------------------------------------------
0000970A                            ; Sprite mappings - GHZ	collapsing ledge
0000970A                            ; ---------------------------------------------------------------------------
0000970A                            Map_obj1A:
0000970A                            	include "_maps\obj1A.asm"
0000970A                            ; ---------------------------------------------------------------------------
0000970A                            ; Sprite mappings - GHZ	collapsing ledge
0000970A                            ; ---------------------------------------------------------------------------
0000970A 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
0000970E 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00009712 10                         byte_85A8:	dc.b $10
00009713 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009718 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000971D E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009722 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009727 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000972C D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009731 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009736 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000973B F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009740 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009745 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000974A 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000974F 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009754 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009759 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000975E 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009763 10                         byte_85F9:	dc.b $10
00009764 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009769 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000976E E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009773 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009778 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000977D D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009782 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009787 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000978C F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009791 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009796 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000979B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000097A0 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000097A5 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000097AA 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000097AF 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000097B4 19                         byte_864A:	dc.b $19
000097B5 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
000097BA C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000097BF D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000097C4 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
000097C9 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
000097CE E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
000097D3 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
000097D8 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000097DD D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000097E2 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000097E7 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000097EC F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000097F1 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
000097F6 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
000097FB F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009800 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009805 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000980A 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000980F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009814 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009819 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000981E 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009823 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009828 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000982D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009832 19                         byte_86C8:	dc.b $19
00009833 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00009838 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000983D D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009842 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009847 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000984C E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009851 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009856 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000985B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009860 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009865 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000986A F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000986F F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009874 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009879 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000987E F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009883 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009888 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000988D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009892 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009897 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000989C 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000098A1 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000098A6 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000098AB 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000098B0                            		even
000098B0                            		even
000098B0                            
000098B0                            ; ---------------------------------------------------------------------------
000098B0                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000098B0                            ; ---------------------------------------------------------------------------
000098B0                            Map_obj53:
000098B0                            	include "_maps\obj53.asm"
000098B0                            ; ---------------------------------------------------------------------------
000098B0                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000098B0                            ; ---------------------------------------------------------------------------
000098B0 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
000098B4 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
000098B8 04                         byte_874E:	dc.b 4
000098B9 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
000098BE 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
000098C3 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
000098C8 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
000098CD 08                         byte_8763:	dc.b 8
000098CE F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
000098D3 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000098D8 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000098DD F805 0000 10               		dc.b $F8, 5, 0,	0, $10
000098E2 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
000098E7 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
000098EC 0805 0000 00               		dc.b 8,	5, 0, 0, 0
000098F1 0805 0000 10               		dc.b 8,	5, 0, 0, $10
000098F6 04                         byte_878C:	dc.b 4
000098F7 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
000098FC 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00009901 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00009906 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000990B 08                         byte_87A1:	dc.b 8
0000990C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00009911 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00009916 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000991B F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00009920 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00009925 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000992A 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000992F 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00009934                            		even
00009934                            		even
00009934                            
00009934                            ; ===========================================================================
00009934                            ; ---------------------------------------------------------------------------
00009934                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00009934                            ; ---------------------------------------------------------------------------
00009934                            
00009934                            Obj1C:					; XREF: Obj_Index
00009934 7000                       		moveq	#0,d0
00009936 1028 0024                  		move.b	$24(a0),d0
0000993A 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
0000993E 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00009942                            ; ===========================================================================
00009942 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00009944 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00009946                            ; ===========================================================================
00009946                            
00009946                            Obj1C_Main:				; XREF: Obj1C_Index
00009946 5428 0024                  		addq.b	#2,$24(a0)
0000994A 7000                       		moveq	#0,d0
0000994C 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00009950 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00009954 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00009958 2159 0004                  		move.l	(a1)+,4(a0)
0000995C 3159 0002                  		move.w	(a1)+,2(a0)
00009960 0028 0004 0001             		ori.b	#4,1(a0)
00009966 1159 001A                  		move.b	(a1)+,$1A(a0)
0000996A 1159 0019                  		move.b	(a1)+,$19(a0)
0000996E 1159 0018                  		move.b	(a1)+,$18(a0)
00009972 1159 0020                  		move.b	(a1)+,$20(a0)
00009976                            
00009976                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00009976 3028 0008                  		move.w	8(a0),d0
0000997A 0240 FF80                  		andi.w	#$FF80,d0
0000997E 3238 F700                  		move.w	($FFFFF700).w,d1
00009982 0441 0080                  		subi.w	#$80,d1
00009986 0241 FF80                  		andi.w	#$FF80,d1
0000998A 9041                       		sub.w	d1,d0
0000998C 0C40 0280                  		cmpi.w	#$280,d0
00009990 6300 0000                  		bls.w	DisplaySprite
00009994 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00009998 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000999C 3440                       		movea.w	d0,a2	; load address into a2
0000999E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000099A2 6000 0000                  		bra.w	DeleteObject	; and delete object
000099A6                            ; ===========================================================================
000099A6                            ; ---------------------------------------------------------------------------
000099A6                            ; Variables for	object $1C are stored in an array
000099A6                            ; ---------------------------------------------------------------------------
000099A6 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
000099AA 44D8                       		dc.w $44D8		; VRAM setting
000099AC 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
000099B0 0000 0000                  		dc.l Map_obj1C
000099B4 44D8                       		dc.w $44D8
000099B6 0008 0200                  		dc.b 0,	8, 2, 0
000099BA 0000 0000                  		dc.l Map_obj1C
000099BE 44D8                       		dc.w $44D8
000099C0 0008 0200                  		dc.b 0,	8, 2, 0
000099C4 0000 8A3E                  		dc.l Map_obj11
000099C8 438E                       		dc.w $438E
000099CA 0110 0100                  		dc.b 1,	$10, 1,	0
000099CE 0000 0000                  		dc.l Map_obj1C
000099D2 4000                       		dc.w $4000
000099D4 0110 0000                  		dc.b 1,	$10, 0, 0
000099D8 0000 0000                  		dc.l Map_obj1C
000099DC 4000                       		dc.w $4000
000099DE 0210 0000                  		dc.b 2,	$10, 0, 0
000099E2 0000 0000                  		dc.l Map_obj1C
000099E6 4000                       		dc.w $4000
000099E8 0310 0000                  		dc.b 3,	$10, 0, 0
000099EC 0000 0000                  		dc.l Map_obj1C
000099F0 4000                       		dc.w $4000
000099F2 0460 0700                  		dc.b 4,	$60, 7, 0
000099F6                            ; ---------------------------------------------------------------------------
000099F6                            ; Sprite mappings - SLZ	lava thrower
000099F6                            ; ---------------------------------------------------------------------------
000099F6                            Map_obj1C:
000099F6                            	include "_maps\obj1C.asm"
000099F6                            Mappings:
000099F6 0000                       Mappings_0: 	dc.w Mappings_A-Mappings
000099F8 0000                       Mappings_2: 	dc.w Mappings_10-Mappings
000099FA 0000                       Mappings_4: 	dc.w Mappings_16-Mappings
000099FC 0000                       Mappings_6: 	dc.w Mappings_1C-Mappings
000099FE 0000                       Mappings_8: 	dc.w Mappings_22-Mappings
00009A00 01                         Mappings_A: 	dc.b $1
00009A01 F007 0000 F8               	dc.b $F0, $7, $0, $0, $F8
00009A06 01                         Mappings_10: 	dc.b $1
00009A07 F00F 0001 F0               	dc.b $F0, $F, $0, $1, $F0
00009A0C 01                         Mappings_16: 	dc.b $1
00009A0D F00F 0011 F0               	dc.b $F0, $F, $0, $11, $F0
00009A12 01                         Mappings_1C: 	dc.b $1
00009A13 F00F 0042 F0               	dc.b $F0, $F, $0, $42, $F0
00009A18 18                         Mappings_22: 	dc.b $18
00009A19 E00F 01C6 A0               	dc.b $E0, $F, $1, $C6, $A0
00009A1E E00F 01D6 C0               	dc.b $E0, $F, $1, $D6, $C0
00009A23 E00F 01E6 00               	dc.b $E0, $F, $1, $E6, $0
00009A28 E00F 01F6 40               	dc.b $E0, $F, $1, $F6, $40
00009A2D E00F 09D6 E0               	dc.b $E0, $F, $9, $D6, $E0
00009A32 E00F 09C6 20               	dc.b $E0, $F, $9, $C6, $20
00009A37 000F 01C6 A0               	dc.b $0, $F, $1, $C6, $A0
00009A3C 000F 01D6 C0               	dc.b $0, $F, $1, $D6, $C0
00009A41 000F 09D6 E0               	dc.b $0, $F, $9, $D6, $E0
00009A46 000F 01E6 00               	dc.b $0, $F, $1, $E6, $0
00009A4B 000F 09C6 20               	dc.b $0, $F, $9, $C6, $20
00009A50 000F 01F6 40               	dc.b $0, $F, $1, $F6, $40
00009A55 200F 01C6 A0               	dc.b $20, $F, $1, $C6, $A0
00009A5A 200F 01D6 C0               	dc.b $20, $F, $1, $D6, $C0
00009A5F 200F 09D6 E0               	dc.b $20, $F, $9, $D6, $E0
00009A64 200F 01E6 00               	dc.b $20, $F, $1, $E6, $0
00009A69 200F 09C6 20               	dc.b $20, $F, $9, $C6, $20
00009A6E 200F 01F6 40               	dc.b $20, $F, $1, $F6, $40
00009A73 C00F 01D6 C0               	dc.b $C0, $F, $1, $D6, $C0
00009A78 C00F 09D6 E0               	dc.b $C0, $F, $9, $D6, $E0
00009A7D C00F 09CA 00               	dc.b $C0, $F, $9, $CA, $0
00009A82 C00F 01E6 20               	dc.b $C0, $F, $1, $E6, $20
00009A87 D00D 01C6 A1               	dc.b $D0, $D, $1, $C6, $A1
00009A8C D00D 01F6 40               	dc.b $D0, $D, $1, $F6, $40
00009A92 00                         	even
00009A92 00                         	even
00009A92                            
00009A92                            ; ===========================================================================
00009A92                            ; ---------------------------------------------------------------------------
00009A92                            ; Object 03 - LZ Air Pockets
00009A92                            ; ---------------------------------------------------------------------------
00009A92                            
00009A92                            Obj03:					; XREF: Obj_Index
00009A92 7000                       		moveq	#0,d0
00009A94 1028 0024                  		move.b	$24(a0),d0
00009A98 323B 0000                  		move.w	Obj03_Index(pc,d0.w),d1
00009A9C 4EFB 1000                  		jmp	Obj03_Index(pc,d1.w)
00009AA0                            ; ===========================================================================
00009AA0 0000                       Obj03_Index:	dc.w Obj03_Main-Obj03_Index
00009AA2 0000                       		dc.w Obj03_ChkDel-Obj03_Index
00009AA4                            ; ===========================================================================
00009AA4                            
00009AA4                            Obj03_Main:				; XREF: Obj03_Index
00009AA4 5428 0024                  		addq.b	#2,$24(a0)
00009AA8 217C 0000 0000 0004        		move.l	#Map_Obj03,4(a0)
00009AB0 317C 4000 0002             		move.w	#$4000,2(a0)
00009AB6 0028 0004 0001             		ori.b	#4,1(a0)
00009ABC 117C 0060 0019             		move.b	#$60,$19(a0)
00009AC2 117C 0007 0018             		move.b	#7,$18(a0)
00009AC8 117C 0000 001A             		move.b	#0,$1A(a0)
00009ACE 3028 0008                  		move.w	8(a0),d0
00009AD2 31C0 F610                  		move.w	d0,(v_pocketx).w
00009AD6 3028 000C                  		move.w	$C(a0),d0
00009ADA 0640 0040                  		addi.w	#$40,d0
00009ADE 31C0 F60E                  		move.w	d0,(v_pocketbottom).w
00009AE2                            
00009AE2                            Obj03_ChkDel:				; XREF: Obj03_Index
00009AE2 43F8 D000                  		lea	($FFFFD000).w,a1
00009AE6 3029 0008                  		move.w	8(a1),d0
00009AEA 9068 0008                  		sub.w	8(a0),d0
00009AEE 0640 0060                  		addi.w	#$60,d0
00009AF2 6B00                       		bmi.s	@outpocket
00009AF4 0C40 00C0                  		cmpi.w	#$C0,d0
00009AF8 6400                       		bcc.s	@outpocket
00009AFA 3028 000C                  		move.w	$C(a0),d0
00009AFE 9069 000C                  		sub.w	$C(a1),d0
00009B02 0640 0040                  		addi.w	#$40,d0
00009B06 6B00                       		bmi.s	@outpocket
00009B08 0C40 0080                  		cmpi.w	#$80,d0
00009B0C 6400                       		bcc.s	@outpocket
00009B0E                            
00009B0E 50F8 F612                  		st		(f_insidepocket).w
00009B12 6000                       		bra.s	@chkgone
00009B14                            
00009B14                            	@outpocket:
00009B14 51F8 F612                  		sf		(f_insidepocket).w
00009B18                            
00009B18                            	@chkgone:
00009B18 3028 0008                  		move.w	8(a0),d0
00009B1C 0240 FF80                  		andi.w	#$FF80,d0
00009B20 3238 F700                  		move.w	($FFFFF700).w,d1
00009B24 0441 0080                  		subi.w	#$80,d1
00009B28 0241 FF80                  		andi.w	#$FF80,d1
00009B2C 9041                       		sub.w	d1,d0
00009B2E 0C40 0280                  		cmpi.w	#$280,d0
00009B32 6300 0000                  		bls.w	DisplaySprite
00009B36 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00009B3A 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
00009B3E 3440                       		movea.w	d0,a2	; load address into a2
00009B40 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00009B44 6000 0000                  		bra.w	DeleteObject	; and delete object
00009B48                            ; ---------------------------------------------------------------------------
00009B48                            ; Sprite mappings - LZ Air Pockets
00009B48                            ; ---------------------------------------------------------------------------
00009B48                            Map_Obj03:
00009B48                            	include "_maps\obj03.asm"
00009B48                            obj03map:
00009B48 0000                       obj03map_0: 	dc.w obj03map_2-obj03map
00009B4A 18                         obj03map_2: 	dc.b $18
00009B4B E00F 01C6 A0               	dc.b $E0, $F, $1, $C6, $A0
00009B50 E00F 01D6 C0               	dc.b $E0, $F, $1, $D6, $C0
00009B55 E00F 01E6 00               	dc.b $E0, $F, $1, $E6, $0
00009B5A E00F 01F6 40               	dc.b $E0, $F, $1, $F6, $40
00009B5F E00F 09D6 E0               	dc.b $E0, $F, $9, $D6, $E0
00009B64 E00F 09C6 20               	dc.b $E0, $F, $9, $C6, $20
00009B69 000F 01C6 A0               	dc.b $0, $F, $1, $C6, $A0
00009B6E 000F 01D6 C0               	dc.b $0, $F, $1, $D6, $C0
00009B73 000F 09D6 E0               	dc.b $0, $F, $9, $D6, $E0
00009B78 000F 01E6 00               	dc.b $0, $F, $1, $E6, $0
00009B7D 000F 09C6 20               	dc.b $0, $F, $9, $C6, $20
00009B82 000F 01F6 40               	dc.b $0, $F, $1, $F6, $40
00009B87 200F 01C6 A0               	dc.b $20, $F, $1, $C6, $A0
00009B8C 200F 01D6 C0               	dc.b $20, $F, $1, $D6, $C0
00009B91 200F 09D6 E0               	dc.b $20, $F, $9, $D6, $E0
00009B96 200F 01E6 00               	dc.b $20, $F, $1, $E6, $0
00009B9B 200F 09C6 20               	dc.b $20, $F, $9, $C6, $20
00009BA0 200F 01F6 40               	dc.b $20, $F, $1, $F6, $40
00009BA5 C00F 01D6 C0               	dc.b $C0, $F, $1, $D6, $C0
00009BAA C00F 09D6 E0               	dc.b $C0, $F, $9, $D6, $E0
00009BAF C00F 09CA 00               	dc.b $C0, $F, $9, $CA, $0
00009BB4 C00F 01E6 20               	dc.b $C0, $F, $1, $E6, $20
00009BB9 D00D 01C6 A1               	dc.b $D0, $D, $1, $C6, $A1
00009BBE D00D 01F6 40               	dc.b $D0, $D, $1, $F6, $40
00009BC4 00                         	even
00009BC4 00                         	even
00009BC4                            
00009BC4                            ; ===========================================================================
00009BC4                            ; ---------------------------------------------------------------------------
00009BC4                            ; Object 1D - switch that activates when Sonic touches it
00009BC4                            ; (this	is not used anywhere in	the game)
00009BC4                            ; ---------------------------------------------------------------------------
00009BC4                            
00009BC4                            Obj1D:					; XREF: Obj_Index
00009BC4 7000                       		moveq	#0,d0
00009BC6 1028 0024                  		move.b	$24(a0),d0
00009BCA 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00009BCE 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00009BD2                            ; ===========================================================================
00009BD2 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00009BD4 0000                       		dc.w Obj1D_Action-Obj1D_Index
00009BD6 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00009BD8                            ; ===========================================================================
00009BD8                            
00009BD8                            Obj1D_Main:				; XREF: Obj1D_Index
00009BD8 5428 0024                  		addq.b	#2,$24(a0)
00009BDC 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00009BE4 317C 4000 0002             		move.w	#$4000,2(a0)
00009BEA 117C 0004 0001             		move.b	#4,1(a0)
00009BF0 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00009BF6 117C 0010 0019             		move.b	#$10,$19(a0)
00009BFC 117C 0005 0018             		move.b	#5,$18(a0)
00009C02                            
00009C02                            Obj1D_Action:				; XREF: Obj1D_Index
00009C02 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00009C08 323C 0010                  		move.w	#$10,d1
00009C0C 6100 0000                  		bsr.w	Obj1D_ChkTouch
00009C10 6700                       		beq.s	Obj1D_ChkDel
00009C12 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00009C16 7001                       		moveq	#1,d0
00009C18 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00009C1C                            
00009C1C                            Obj1D_ChkDel:
00009C1C 6100 0000                  		bsr.w	DisplaySprite
00009C20 3028 0008                  		move.w	8(a0),d0
00009C24 0240 FF80                  		andi.w	#$FF80,d0
00009C28 3238 F700                  		move.w	($FFFFF700).w,d1
00009C2C 0441 0080                  		subi.w	#$80,d1
00009C30 0241 FF80                  		andi.w	#$FF80,d1
00009C34 9041                       		sub.w	d1,d0
00009C36 0C40 0280                  		cmpi.w	#$280,d0
00009C3A 6300                       		bls.s	Obj1D_NoDel
00009C3C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00009C40 6700                       		beq.s	Obj1D_Delete		; if it's zero, don't remember object
00009C42 3440                       		movea.w	d0,a2	; load address into a2
00009C44 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00009C48 6000                       		bra.s	Obj1D_Delete	; and delete object
00009C4A                            
00009C4A                            Obj1D_NoDel:
00009C4A 4E75                       		rts	
00009C4C                            ; ===========================================================================
00009C4C                            
00009C4C                            Obj1D_Delete:				; XREF: Obj1D_Index
00009C4C 6100 0000                  		bsr.w	DeleteObject
00009C50 4E75                       		rts	
00009C52                            ; ---------------------------------------------------------------------------
00009C52                            ; Subroutine to	check if Sonic touches the object
00009C52                            ; ---------------------------------------------------------------------------
00009C52                            
00009C52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C52                            
00009C52                            
00009C52                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00009C52 43F8 D000                  		lea	($FFFFD000).w,a1
00009C56 3029 0008                  		move.w	8(a1),d0
00009C5A 9068 0008                  		sub.w	8(a0),d0
00009C5E D041                       		add.w	d1,d0
00009C60 6B00                       		bmi.s	loc_8918
00009C62 D241                       		add.w	d1,d1
00009C64 B041                       		cmp.w	d1,d0
00009C66 6400                       		bcc.s	loc_8918
00009C68 3429 000C                  		move.w	$C(a1),d2
00009C6C 1229 0016                  		move.b	$16(a1),d1
00009C70 4881                       		ext.w	d1
00009C72 D242                       		add.w	d2,d1
00009C74 3028 000C                  		move.w	$C(a0),d0
00009C78 0440 0010                  		subi.w	#$10,d0
00009C7C 9041                       		sub.w	d1,d0
00009C7E 6200                       		bhi.s	loc_8918
00009C80 0C40 FFF0                  		cmpi.w	#-$10,d0
00009C84 6500                       		bcs.s	loc_8918
00009C86 70FF                       		moveq	#-1,d0
00009C88 4E75                       		rts	
00009C8A                            ; ===========================================================================
00009C8A                            
00009C8A                            loc_8918:
00009C8A 7000                       		moveq	#0,d0
00009C8C 4E75                       		rts	
00009C8E                            ; End of function Obj1D_ChkTouch
00009C8E                            
00009C8E                            ; ===========================================================================
00009C8E                            ; ---------------------------------------------------------------------------
00009C8E                            ; Sprite mappings - object 1D
00009C8E                            ; ---------------------------------------------------------------------------
00009C8E                            Map_obj1D:
00009C8E                            	include "_maps\obj1D.asm"
00009C8E                            ; ---------------------------------------------------------------------------
00009C8E                            ; Sprite mappings - object 1D
00009C8E                            ; ---------------------------------------------------------------------------
00009C8E 0000                       		dc.w byte_891E-Map_obj1D
00009C90 04                         byte_891E:	dc.b 4
00009C91 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00009C96 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00009C9B E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00009CA0 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00009CA6 00                         		even
00009CA6 00                         		even
00009CA6                            
00009CA6                            ; ===========================================================================
00009CA6                            ; ---------------------------------------------------------------------------
00009CA6                            ; Object 2A - doors (SBZ)
00009CA6                            ; ---------------------------------------------------------------------------
00009CA6                            
00009CA6                            Obj2A:					; XREF: Obj_Index
00009CA6 7000                       		moveq	#0,d0
00009CA8 1028 0024                  		move.b	$24(a0),d0
00009CAC 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00009CB0 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00009CB4                            ; ===========================================================================
00009CB4 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00009CB6 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00009CB8                            ; ===========================================================================
00009CB8                            
00009CB8                            Obj2A_Main:				; XREF: Obj2A_Index
00009CB8 5428 0024                  		addq.b	#2,$24(a0)
00009CBC 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00009CC4 317C 42E8 0002             		move.w	#$42E8,2(a0)
00009CCA 0028 0004 0001             		ori.b	#4,1(a0)
00009CD0 117C 0008 0019             		move.b	#8,$19(a0)
00009CD6 117C 0004 0018             		move.b	#4,$18(a0)
00009CDC                            
00009CDC                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00009CDC 323C 0040                  		move.w	#$40,d1
00009CE0 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00009CE4 3038 D008                  		move.w	($FFFFD008).w,d0
00009CE8 D041                       		add.w	d1,d0
00009CEA B068 0008                  		cmp.w	8(a0),d0
00009CEE 6500                       		bcs.s	Obj2A_Animate
00009CF0 9041                       		sub.w	d1,d0
00009CF2 9041                       		sub.w	d1,d0
00009CF4 B068 0008                  		cmp.w	8(a0),d0
00009CF8 6400                       		bcc.s	Obj2A_Animate
00009CFA D041                       		add.w	d1,d0
00009CFC B068 0008                  		cmp.w	8(a0),d0
00009D00 6400                       		bcc.s	loc_899A
00009D02 0828 0000 0022             		btst	#0,$22(a0)
00009D08 6600                       		bne.s	Obj2A_Animate
00009D0A 6000                       		bra.s	Obj2A_Open
00009D0C                            ; ===========================================================================
00009D0C                            
00009D0C                            loc_899A:				; XREF: Obj2A_OpenShut
00009D0C 0828 0000 0022             		btst	#0,$22(a0)
00009D12 6700                       		beq.s	Obj2A_Animate
00009D14                            
00009D14                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009D14 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00009D1A                            
00009D1A                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00009D1A 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00009D20 6100 0000                  		bsr.w	AnimateSprite
00009D24 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00009D28 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00009D2A 323C 0011                  		move.w	#$11,d1
00009D2E 343C 0020                  		move.w	#$20,d2
00009D32 3602                       		move.w	d2,d3
00009D34 5243                       		addq.w	#1,d3
00009D36 3828 0008                  		move.w	8(a0),d4
00009D3A 6100 0000                  		bsr.w	SolidObject
00009D3E                            
00009D3E                            Obj2A_MarkAsUsed:
00009D3E 6000 0000                  		bra.w	MarkObjGone
00009D42                            ; ===========================================================================
00009D42                            Ani_obj2A:
00009D42                            	include "_anim\obj2A.asm"
00009D42                            ; ---------------------------------------------------------------------------
00009D42                            ; Animation script - doors (SBZ)
00009D42                            ; ---------------------------------------------------------------------------
00009D42 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009D44 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009D46 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009D52 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009D5E                            		even
00009D5E                            		even
00009D5E                            
00009D5E                            ; ---------------------------------------------------------------------------
00009D5E                            ; Sprite mappings - doors (SBZ)
00009D5E                            ; ---------------------------------------------------------------------------
00009D5E                            Map_obj2A:
00009D5E                            	include "_maps\obj2A.asm"
00009D5E                            ; ---------------------------------------------------------------------------
00009D5E                            ; Sprite mappings - doors (SBZ)
00009D5E                            ; ---------------------------------------------------------------------------
00009D5E 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009D62 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00009D66 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00009D6A 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00009D6E 0000                       		dc.w byte_8A56-Map_obj2A
00009D70 02                         byte_89FE:	dc.b 2
00009D71 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00009D76 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00009D7B 02                         byte_8A09:	dc.b 2
00009D7C DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00009D81 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00009D86 02                         byte_8A14:	dc.b 2
00009D87 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00009D8C 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00009D91 02                         byte_8A1F:	dc.b 2
00009D92 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00009D97 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00009D9C 02                         byte_8A2A:	dc.b 2
00009D9D D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00009DA2 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00009DA7 02                         byte_8A35:	dc.b 2
00009DA8 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00009DAD 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00009DB2 02                         byte_8A40:	dc.b 2
00009DB3 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00009DB8 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00009DBD 02                         byte_8A4B:	dc.b 2
00009DBE C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00009DC3 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00009DC8 02                         byte_8A56:	dc.b 2
00009DC9 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00009DCE 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00009DD4 00                         		even
00009DD4 00                         		even
00009DD4                            
00009DD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009DD4                            
00009DD4                            
00009DD4                            Obj44_SolidWall:			; XREF: Obj44_Solid
00009DD4 6100 0000                  		bsr.w	Obj44_SolidWall2
00009DD8 6700                       		beq.s	loc_8AA8
00009DDA 6B00 0000                  		bmi.w	loc_8AC4
00009DDE 4A40                       		tst.w	d0
00009DE0 6700 0000                  		beq.w	loc_8A92
00009DE4 6B00                       		bmi.s	loc_8A7C
00009DE6 4A69 0010                  		tst.w	$10(a1)
00009DEA 6B00                       		bmi.s	loc_8A92
00009DEC 6000                       		bra.s	loc_8A82
00009DEE                            ; ===========================================================================
00009DEE                            
00009DEE                            loc_8A7C:
00009DEE 4A69 0010                  		tst.w	$10(a1)
00009DF2 6A00                       		bpl.s	loc_8A92
00009DF4                            
00009DF4                            loc_8A82:
00009DF4 9169 0008                  		sub.w	d0,8(a1)
00009DF8 337C 0000 0020             		move.w	#0,$20(a1)
00009DFE 337C 0000 0010             		move.w	#0,$10(a1)
00009E04                            
00009E04                            loc_8A92:
00009E04 0829 0001 0022             		btst	#1,$22(a1)
00009E0A 6600                       		bne.s	loc_8AB6
00009E0C 08E9 0005 0022             		bset	#5,$22(a1)
00009E12 08E8 0005 0022             		bset	#5,$22(a0)
00009E18 4E75                       		rts	
00009E1A                            ; ===========================================================================
00009E1A                            
00009E1A                            loc_8AA8:
00009E1A 0828 0005 0022             		btst	#5,$22(a0)
00009E20 6700                       		beq.s	locret_8AC2
00009E22 337C 0001 001C             		move.w	#1,$1C(a1)
00009E28                            
00009E28                            loc_8AB6:
00009E28 08A8 0005 0022             		bclr	#5,$22(a0)
00009E2E 08A9 0005 0022             		bclr	#5,$22(a1)
00009E34                            
00009E34                            locret_8AC2:
00009E34 4E75                       		rts	
00009E36                            ; ===========================================================================
00009E36                            
00009E36                            loc_8AC4:
00009E36 4A69 0012                  		tst.w	$12(a1)
00009E3A 6A00                       		bpl.s	locret_8AD8
00009E3C 4A43                       		tst.w	d3
00009E3E 6A00                       		bpl.s	locret_8AD8
00009E40 9769 000C                  		sub.w	d3,$C(a1)
00009E44 337C 0000 0012             		move.w	#0,$12(a1)
00009E4A                            
00009E4A                            locret_8AD8:
00009E4A 4E75                       		rts	
00009E4C                            ; End of function Obj44_SolidWall
00009E4C                            
00009E4C                            
00009E4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E4C                            
00009E4C                            
00009E4C                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009E4C 43F8 D000                  		lea	($FFFFD000).w,a1
00009E50 3029 0008                  		move.w	8(a1),d0
00009E54 9068 0008                  		sub.w	8(a0),d0
00009E58 D041                       		add.w	d1,d0
00009E5A 6B00                       		bmi.s	loc_8B48
00009E5C 3601                       		move.w	d1,d3
00009E5E D643                       		add.w	d3,d3
00009E60 B043                       		cmp.w	d3,d0
00009E62 6200                       		bhi.s	loc_8B48
00009E64 1629 0016                  		move.b	$16(a1),d3
00009E68 4883                       		ext.w	d3
00009E6A D443                       		add.w	d3,d2
00009E6C 3629 000C                  		move.w	$C(a1),d3
00009E70 9668 000C                  		sub.w	$C(a0),d3
00009E74 D642                       		add.w	d2,d3
00009E76 6B00                       		bmi.s	loc_8B48
00009E78 3802                       		move.w	d2,d4
00009E7A D844                       		add.w	d4,d4
00009E7C B644                       		cmp.w	d4,d3
00009E7E 6400                       		bcc.s	loc_8B48
00009E80 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009E84 6B00                       		bmi.s	loc_8B48
00009E86 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009E8C 6400                       		bcc.s	loc_8B48
00009E8E 4A78 FE08                  		tst.w	($FFFFFE08).w
00009E92 6600                       		bne.s	loc_8B48
00009E94 3A00                       		move.w	d0,d5
00009E96 B240                       		cmp.w	d0,d1
00009E98 6400                       		bcc.s	loc_8B30
00009E9A D241                       		add.w	d1,d1
00009E9C 9041                       		sub.w	d1,d0
00009E9E 3A00                       		move.w	d0,d5
00009EA0 4445                       		neg.w	d5
00009EA2                            
00009EA2                            loc_8B30:
00009EA2 3203                       		move.w	d3,d1
00009EA4 B443                       		cmp.w	d3,d2
00009EA6 6400                       		bcc.s	loc_8B3C
00009EA8 9644                       		sub.w	d4,d3
00009EAA 3203                       		move.w	d3,d1
00009EAC 4441                       		neg.w	d1
00009EAE                            
00009EAE                            loc_8B3C:
00009EAE BA41                       		cmp.w	d1,d5
00009EB0 6200                       		bhi.s	loc_8B44
00009EB2 7801                       		moveq	#1,d4
00009EB4 4E75                       		rts	
00009EB6                            ; ===========================================================================
00009EB6                            
00009EB6                            loc_8B44:
00009EB6 78FF                       		moveq	#-1,d4
00009EB8 4E75                       		rts	
00009EBA                            ; ===========================================================================
00009EBA                            
00009EBA                            loc_8B48:
00009EBA 7800                       		moveq	#0,d4
00009EBC 4E75                       		rts	
00009EBE                            ; End of function Obj44_SolidWall2
00009EBE                            
00009EBE                            ; ===========================================================================
00009EBE                            ; ---------------------------------------------------------------------------
00009EBE                            ; Object 1E - Ball Hog enemy (SBZ)
00009EBE                            ; ---------------------------------------------------------------------------
00009EBE                            
00009EBE                            Obj1E:					; XREF: Obj_Index
00009EBE 7000                       		moveq	#0,d0
00009EC0 1028 0024                  		move.b	$24(a0),d0
00009EC4 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00009EC8 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00009ECC                            ; ===========================================================================
00009ECC 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009ECE 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009ED0                            ; ===========================================================================
00009ED0                            
00009ED0                            Obj1E_Main:				; XREF: Obj1E_Index
00009ED0 117C 0013 0016             		move.b	#$13,$16(a0)
00009ED6 117C 0008 0017             		move.b	#8,$17(a0)
00009EDC 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009EE4 317C 2302 0002             		move.w	#$2302,2(a0)
00009EEA 117C 0004 0001             		move.b	#4,1(a0)
00009EF0 117C 0004 0018             		move.b	#4,$18(a0)
00009EF6 117C 0005 0020             		move.b	#5,$20(a0)
00009EFC 117C 000C 0019             		move.b	#$C,$19(a0)
00009F02 6100 0000                  		bsr.w	ObjectFall
00009F06 4EB9 0000 0000             		jsr	ObjHitFloor
00009F0C 4A41                       		tst.w	d1
00009F0E 6A00                       		bpl.s	locret_8BAC
00009F10 D368 000C                  		add.w	d1,$C(a0)
00009F14 317C 0000 0012             		move.w	#0,$12(a0)
00009F1A 5428 0024                  		addq.b	#2,$24(a0)
00009F1E                            
00009F1E                            locret_8BAC:
00009F1E 4E75                       		rts	
00009F20                            ; ===========================================================================
00009F20                            
00009F20                            Obj1E_Action:				; XREF: Obj1E_Index
00009F20 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009F26 6100 0000                  		bsr.w	AnimateSprite
00009F2A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009F30 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009F32 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009F36 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009F38 6000                       		bra.s	Obj1E_MarkAsGone
00009F3A                            ; ===========================================================================
00009F3A                            
00009F3A                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009F3A 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009F3E                            
00009F3E                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009F3E 6000 0000                  		bra.w	MarkObjGone
00009F42                            ; ===========================================================================
00009F42                            
00009F42                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009F42 117C 0001 0032             		move.b	#1,$32(a0)
00009F48 6100 0000                  		bsr.w	SingleObjLoad
00009F4C 6600                       		bne.s	loc_8C1A
00009F4E 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009F52 3368 0008 0008             		move.w	8(a0),8(a1)
00009F58 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009F5E 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009F64 337C 0000 0012             		move.w	#0,$12(a1)
00009F6A 70FC                       		moveq	#-4,d0
00009F6C 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009F72 6700                       		beq.s	loc_8C0A	; if not, branch
00009F74 4440                       		neg.w	d0
00009F76 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00009F7A                            
00009F7A                            loc_8C0A:
00009F7A D169 0008                  		add.w	d0,8(a1)
00009F7E 0669 000C 000C             		addi.w	#$C,$C(a1)
00009F84 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00009F8A                            
00009F8A                            loc_8C1A:
00009F8A 60B2                       		bra.s	Obj1E_MarkAsGone
00009F8C                            ; ===========================================================================
00009F8C                            ; ---------------------------------------------------------------------------
00009F8C                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009F8C                            ; ---------------------------------------------------------------------------
00009F8C                            
00009F8C                            Obj20:					; XREF: Obj_Index
00009F8C 7000                       		moveq	#0,d0
00009F8E 1028 0024                  		move.b	$24(a0),d0
00009F92 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00009F96 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00009F9A                            ; ===========================================================================
00009F9A 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009F9C 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009F9E                            ; ===========================================================================
00009F9E                            
00009F9E                            Obj20_Main:				; XREF: Obj20_Index
00009F9E 5428 0024                  		addq.b	#2,$24(a0)
00009FA2 117C 0007 0016             		move.b	#7,$16(a0)
00009FA8 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009FB0 317C 2302 0002             		move.w	#$2302,2(a0)
00009FB6 117C 0004 0001             		move.b	#4,1(a0)
00009FBC 117C 0003 0018             		move.b	#3,$18(a0)
00009FC2 117C 0087 0020             		move.b	#$87,$20(a0)
00009FC8 117C 0008 0019             		move.b	#8,$19(a0)
00009FCE 7000                       		moveq	#0,d0
00009FD0 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009FD4 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009FD8 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00009FDC 117C 0004 001A             		move.b	#4,$1A(a0)
00009FE2                            
00009FE2                            Obj20_Bounce:				; XREF: Obj20_Index
00009FE2 4EB9 0000 0000             		jsr	ObjectFall
00009FE8 4A68 0012                  		tst.w	$12(a0)
00009FEC 6B00                       		bmi.s	Obj20_ChkExplode
00009FEE 4EB9 0000 0000             		jsr	ObjHitFloor
00009FF4 4A41                       		tst.w	d1
00009FF6 6A00                       		bpl.s	Obj20_ChkExplode
00009FF8 D368 000C                  		add.w	d1,$C(a0)
00009FFC 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A002 4A03                       		tst.b	d3
0000A004 6700                       		beq.s	Obj20_ChkExplode
0000A006 6B00                       		bmi.s	loc_8CA4
0000A008 4A68 0010                  		tst.w	$10(a0)
0000A00C 6A00                       		bpl.s	Obj20_ChkExplode
0000A00E 4468 0010                  		neg.w	$10(a0)
0000A012 6000                       		bra.s	Obj20_ChkExplode
0000A014                            ; ===========================================================================
0000A014                            
0000A014                            loc_8CA4:				; XREF: Obj20_Bounce
0000A014 4A68 0010                  		tst.w	$10(a0)
0000A018 6B00                       		bmi.s	Obj20_ChkExplode
0000A01A 4468 0010                  		neg.w	$10(a0)
0000A01E                            
0000A01E                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
0000A01E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
0000A022 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
0000A024 10BC 0024                  		move.b	#$24,0(a0)
0000A028 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
0000A02C 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0000A032 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000A036                            ; ===========================================================================
0000A036                            
0000A036                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000A036 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A03A 6A00                       		bpl.s	Obj20_Display
0000A03C 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
0000A042 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000A048                            
0000A048                            Obj20_Display:
0000A048 6100 0000                  		bsr.w	DisplaySprite
0000A04C 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A050 0640 00E0                  		addi.w	#$E0,d0
0000A054 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000A058 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A05C 4E75                       		rts	
0000A05E                            ; ===========================================================================
0000A05E                            ; ---------------------------------------------------------------------------
0000A05E                            ; Object 24 - explosion	from a destroyed monitor
0000A05E                            ; ---------------------------------------------------------------------------
0000A05E                            
0000A05E                            Obj24:					; XREF: Obj_Index
0000A05E 7000                       		moveq	#0,d0
0000A060 1028 0024                  		move.b	$24(a0),d0
0000A064 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000A068 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000A06C                            ; ===========================================================================
0000A06C 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000A06E 0000                       		dc.w Obj24_Animate-Obj24_Index
0000A070                            ; ===========================================================================
0000A070                            
0000A070                            Obj24_Main:				; XREF: Obj24_Index
0000A070 5428 0024                  		addq.b	#2,$24(a0)
0000A074 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
0000A07C 317C 041C 0002             		move.w	#$41C,2(a0)
0000A082 117C 0004 0001             		move.b	#4,1(a0)
0000A088 117C 0001 0018             		move.b	#1,$18(a0)
0000A08E 117C 0000 0020             		move.b	#0,$20(a0)
0000A094 117C 000C 0019             		move.b	#$C,$19(a0)
0000A09A 117C 0009 001E             		move.b	#9,$1E(a0)
0000A0A0 117C 0000 001A             		move.b	#0,$1A(a0)
0000A0A6 303C 00A5                  		move.w	#$A5,d0
0000A0AA 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play explosion sound
0000A0B0                            
0000A0B0                            Obj24_Animate:				; XREF: Obj24_Index
0000A0B0 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A0B4 6A00                       		bpl.s	Obj24_Display
0000A0B6 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
0000A0BC 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000A0C0 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000A0C6 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A0CA                            
0000A0CA                            Obj24_Display:
0000A0CA 6000 0000                  		bra.w	DisplaySprite
0000A0CE                            ; ===========================================================================
0000A0CE                            ; ---------------------------------------------------------------------------
0000A0CE                            ; Object 27 - explosion	from a destroyed enemy
0000A0CE                            ; ---------------------------------------------------------------------------
0000A0CE                            
0000A0CE                            Obj27:					; XREF: Obj_Index
0000A0CE 7000                       		moveq	#0,d0
0000A0D0 1028 0024                  		move.b	$24(a0),d0
0000A0D4 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000A0D8 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000A0DC                            ; ===========================================================================
0000A0DC 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
0000A0DE 0000                       		dc.w Obj27_Main-Obj27_Index
0000A0E0 0000                       		dc.w Obj27_Animate-Obj27_Index
0000A0E2                            ; ===========================================================================
0000A0E2                            
0000A0E2                            Obj27_LoadAnimal:			; XREF: Obj27_Index
0000A0E2 5428 0024                  		addq.b	#2,$24(a0)
0000A0E6 6100 0000                  		bsr.w	SingleObjLoad
0000A0EA 6600                       		bne.s	Obj27_Main
0000A0EC 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0000A0F0 3368 0008 0008             		move.w	8(a0),8(a1)
0000A0F6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A0FC 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A102                            
0000A102                            Obj27_Main:				; XREF: Obj27_Index
0000A102 5428 0024                  		addq.b	#2,$24(a0)
0000A106 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000A10E 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A114 117C 0004 0001             		move.b	#4,1(a0)
0000A11A 117C 0001 0018             		move.b	#1,$18(a0)
0000A120 117C 0000 0020             		move.b	#0,$20(a0)
0000A126 117C 000C 0019             		move.b	#$C,$19(a0)
0000A12C 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000A132 117C 0000 001A             		move.b	#0,$1A(a0)
0000A138 303C 00C1                  		move.w	#$C1,d0
0000A13C 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000A142                            
0000A142                            Obj27_Animate:				; XREF: Obj27_Index
0000A142 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A146 6A00                       		bpl.s	Obj27_Display
0000A148 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000A14E 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000A152 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000A158 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A15C                            
0000A15C                            Obj27_Display:
0000A15C 6000 0000                  		bra.w	DisplaySprite
0000A160                            ; ===========================================================================
0000A160                            ; ---------------------------------------------------------------------------
0000A160                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A160                            ; ---------------------------------------------------------------------------
0000A160                            
0000A160                            Obj3F:					; XREF: Obj_Index
0000A160 7000                       		moveq	#0,d0
0000A162 1028 0024                  		move.b	$24(a0),d0
0000A166 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000A16A 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000A16E                            ; ===========================================================================
0000A16E 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000A170 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
0000A172                            ; ===========================================================================
0000A172                            
0000A172                            Obj3F_Main:				; XREF: Obj3F_Index
0000A172 5428 0024                  		addq.b	#2,$24(a0)
0000A176 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
0000A17E 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A184 117C 0004 0001             		move.b	#4,1(a0)
0000A18A 117C 0001 0018             		move.b	#1,$18(a0)
0000A190 117C 0000 0020             		move.b	#0,$20(a0)
0000A196 117C 000C 0019             		move.b	#$C,$19(a0)
0000A19C 117C 0007 001E             		move.b	#7,$1E(a0)
0000A1A2 117C 0000 001A             		move.b	#0,$1A(a0)
0000A1A8 303C 00C4                  		move.w	#$C4,d0
0000A1AC 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
0000A1B2                            ; ===========================================================================
0000A1B2                            Ani_obj1E:
0000A1B2                            	include "_anim\obj1E.asm"
0000A1B2                            ; ---------------------------------------------------------------------------
0000A1B2                            ; Animation script - doors (SBZ)
0000A1B2                            ; ---------------------------------------------------------------------------
0000A1B2 0000                       		dc.w byte_8E4A-Ani_obj1E
0000A1B4 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
0000A1CC 00                         		even
0000A1CC 00                         		even
0000A1CC                            
0000A1CC                            ; ---------------------------------------------------------------------------
0000A1CC                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A1CC                            ; ---------------------------------------------------------------------------
0000A1CC                            Map_obj1E:
0000A1CC                            	include "_maps\obj1E.asm"
0000A1CC                            ; ---------------------------------------------------------------------------
0000A1CC                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A1CC                            ; ---------------------------------------------------------------------------
0000A1CC 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
0000A1D0 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
0000A1D4 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
0000A1D8 02                         byte_8E6E:	dc.b 2
0000A1D9 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A1DE FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
0000A1E3 02                         byte_8E79:	dc.b 2
0000A1E4 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A1E9 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
0000A1EE 02                         byte_8E84:	dc.b 2
0000A1EF F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
0000A1F4 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000A1F9 02                         byte_8E8F:	dc.b 2
0000A1FA E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
0000A1FF F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
0000A204 01                         byte_8E9A:	dc.b 1
0000A205 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000A20A 01                         byte_8EA0:	dc.b 1
0000A20B F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
0000A210                            		even
0000A210                            		even
0000A210                            
0000A210                            ; ---------------------------------------------------------------------------
0000A210                            ; Sprite mappings - explosion
0000A210                            ; ---------------------------------------------------------------------------
0000A210                            Map_obj24:
0000A210                            	include "_maps\obj24.asm"
0000A210                            ; ---------------------------------------------------------------------------
0000A210                            ; Sprite mappings - explosion
0000A210                            ; ---------------------------------------------------------------------------
0000A210 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
0000A214 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000A218 01                         byte_8EAE:	dc.b 1
0000A219 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A21E 01                         byte_8EB4:	dc.b 1
0000A21F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A224 01                         byte_8EBA:	dc.b 1
0000A225 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A22A 01                         byte_8EC0:	dc.b 1
0000A22B F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A230                            		even
0000A230                            		even
0000A230                            
0000A230                            ; ---------------------------------------------------------------------------
0000A230                            ; Sprite mappings - explosion
0000A230                            ; ---------------------------------------------------------------------------
0000A230 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
0000A234 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000A238 0000                       		dc.w byte_8EF7-Map_obj27
0000A23A 01                         byte_8ED0:	dc.b 1
0000A23B F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A240 01                         byte_8ED6:	dc.b 1
0000A241 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A246 01                         byte_8EDC:	dc.b 1
0000A247 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A24C 04                         byte_8EE2:	dc.b 4
0000A24D EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A252 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A257 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A25C FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A261 04                         byte_8EF7:	dc.b 4
0000A262 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A267 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A26C 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A271 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A276                            		even
0000A276                            ; ---------------------------------------------------------------------------
0000A276                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A276                            ; ---------------------------------------------------------------------------
0000A276 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000A278 0000                       		dc.w byte_8F16-Map_obj3F
0000A27A 0000                       		dc.w byte_8F1C-Map_obj3F
0000A27C FFD6                       		dc.w byte_8EE2-Map_obj3F
0000A27E FFEB                       		dc.w byte_8EF7-Map_obj3F
0000A280 01                         byte_8F16:	dc.b 1
0000A281 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A286 01                         byte_8F1C:	dc.b 1
0000A287 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A28C                            		even
0000A28C                            ; ===========================================================================
0000A28C                            ; ---------------------------------------------------------------------------
0000A28C                            ; Object 28 - animals
0000A28C                            ; ---------------------------------------------------------------------------
0000A28C                            
0000A28C                            Obj28:					; XREF: Obj_Index
0000A28C 7000                       		moveq	#0,d0
0000A28E 1028 0024                  		move.b	$24(a0),d0
0000A292 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000A296 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000A29A                            ; ===========================================================================
0000A29A 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000A29E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A2A2 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000A2A6 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A2AA 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000A2AE 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000A2B2 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000A2B6 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A2BA 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A2BE 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000A2C2 0000                       		dc.w loc_92D6-Obj28_Index
0000A2C4                            
0000A2C4 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000A2D0                            
0000A2D0 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000A2D4 0000 0000                  		dc.l Map_obj28
0000A2D8 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000A2DC 0000 0000                  		dc.l Map_obj28a		; mappings address
0000A2E0 FE80 FD00                  		dc.w $FE80, $FD00
0000A2E4 0000 0000                  		dc.l Map_obj28
0000A2E8 FEC0 FE80                  		dc.w $FEC0, $FE80
0000A2EC 0000 0000                  		dc.l Map_obj28a
0000A2F0 FE40 FD00                  		dc.w $FE40, $FD00
0000A2F4 0000 0000                  		dc.l Map_obj28b
0000A2F8 FD00 FC00                  		dc.w $FD00, $FC00
0000A2FC 0000 0000                  		dc.l Map_obj28a
0000A300 FD80 FC80                  		dc.w $FD80, $FC80
0000A304 0000 0000                  		dc.l Map_obj28b
0000A308                            
0000A308 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A318 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000A328 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000A334                            
0000A334 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000A348 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
0000A35C 0000 0000                  		dc.l Map_obj28b
0000A360                            
0000A360 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000A372 0565 05B3                  		dc.w $565, $5B3
0000A376                            ; ===========================================================================
0000A376                            
0000A376                            Obj28_Ending:				; XREF: Obj28_Index
0000A376 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000A37A 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000A37E 7000                       		moveq	#0,d0
0000A380 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000A384 D040                       		add.w	d0,d0		; multiply d0 by 2
0000A386 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000A38A 0440 0014                  		subi.w	#$14,d0
0000A38E 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000A394 D040                       		add.w	d0,d0
0000A396 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000A39C 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000A3A0 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000A3A6 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000A3AC 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000A3B2 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000A3B8 117C 000C 0016             		move.b	#$C,$16(a0)
0000A3BE 117C 0004 0001             		move.b	#4,1(a0)
0000A3C4 08E8 0000 0001             		bset	#0,1(a0)
0000A3CA 117C 0006 0018             		move.b	#6,$18(a0)
0000A3D0 117C 0008 0019             		move.b	#8,$19(a0)
0000A3D6 117C 0007 001E             		move.b	#7,$1E(a0)
0000A3DC 6000 0000                  		bra.w	DisplaySprite
0000A3E0                            ; ===========================================================================
0000A3E0                            
0000A3E0                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000A3E0 5428 0024                  		addq.b	#2,$24(a0)
0000A3E4 6100 85C0                  		bsr.w	RandomNumber
0000A3E8 0240 0001                  		andi.w	#1,d0
0000A3EC 7200                       		moveq	#0,d1
0000A3EE 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000A3F2 D241                       		add.w	d1,d1
0000A3F4 D240                       		add.w	d0,d1
0000A3F6 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000A3FA 1031 1000                  		move.b	(a1,d1.w),d0
0000A3FE 1140 0030                  		move.b	d0,$30(a0)
0000A402 E748                       		lsl.w	#3,d0
0000A404 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000A408 D2C0                       		adda.w	d0,a1
0000A40A 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000A40E 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000A412 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000A416 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000A41C 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000A422 6700                       		beq.s	loc_90C0	; if yes, branch
0000A424 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000A42A                            
0000A42A                            loc_90C0:
0000A42A 117C 000C 0016             		move.b	#$C,$16(a0)
0000A430 117C 0004 0001             		move.b	#4,1(a0)
0000A436 08E8 0000 0001             		bset	#0,1(a0)
0000A43C 117C 0006 0018             		move.b	#6,$18(a0)
0000A442 117C 0008 0019             		move.b	#8,$19(a0)
0000A448 117C 0007 001E             		move.b	#7,$1E(a0)
0000A44E 117C 0002 001A             		move.b	#2,$1A(a0)
0000A454 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A45A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A45E 6600                       		bne.s	loc_911C
0000A460 6100 0000                  		bsr.w	SingleObjLoad
0000A464 6600                       		bne.s	Obj28_Display
0000A466 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000A46A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A470 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A476 3028 003E                  		move.w	$3E(a0),d0
0000A47A E248                       		lsr.w	#1,d0
0000A47C 1340 001A                  		move.b	d0,$1A(a1)
0000A480                            
0000A480                            Obj28_Display:
0000A480 6000 0000                  		bra.w	DisplaySprite
0000A484                            ; ===========================================================================
0000A484                            
0000A484                            loc_911C:
0000A484 117C 0012 0024             		move.b	#$12,$24(a0)
0000A48A 4268 0010                  		clr.w	$10(a0)
0000A48E 6000 0000                  		bra.w	DisplaySprite
0000A492                            ; ===========================================================================
0000A492                            
0000A492                            loc_912A:				; XREF: Obj28_Index
0000A492 4A28 0001                  		tst.b	1(a0)
0000A496 6A00 0000                  		bpl.w	DeleteObject
0000A49A 6100 0000                  		bsr.w	ObjectFall
0000A49E 4A68 0012                  		tst.w	$12(a0)
0000A4A2 6B00                       		bmi.s	loc_9180
0000A4A4 4EB9 0000 0000             		jsr	ObjHitFloor
0000A4AA 4A41                       		tst.w	d1
0000A4AC 6A00                       		bpl.s	loc_9180
0000A4AE D368 000C                  		add.w	d1,$C(a0)
0000A4B2 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A4B8 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A4BE 117C 0001 001A             		move.b	#1,$1A(a0)
0000A4C4 1028 0030                  		move.b	$30(a0),d0
0000A4C8 D000                       		add.b	d0,d0
0000A4CA 5800                       		addq.b	#4,d0
0000A4CC 1140 0024                  		move.b	d0,$24(a0)
0000A4D0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A4D4 6700                       		beq.s	loc_9180
0000A4D6 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000A4DC 6700                       		beq.s	loc_9180
0000A4DE 4468 0010                  		neg.w	$10(a0)
0000A4E2 0868 0000 0001             		bchg	#0,1(a0)
0000A4E8                            
0000A4E8                            loc_9180:
0000A4E8 6000 0000                  		bra.w	DisplaySprite
0000A4EC                            ; ===========================================================================
0000A4EC                            
0000A4EC                            loc_9184:				; XREF: Obj28_Index
0000A4EC 6100 0000                  		bsr.w	ObjectFall
0000A4F0 117C 0001 001A             		move.b	#1,$1A(a0)
0000A4F6 4A68 0012                  		tst.w	$12(a0)
0000A4FA 6B00                       		bmi.s	loc_91AE
0000A4FC 117C 0000 001A             		move.b	#0,$1A(a0)
0000A502 4EB9 0000 0000             		jsr	ObjHitFloor
0000A508 4A41                       		tst.w	d1
0000A50A 6A00                       		bpl.s	loc_91AE
0000A50C D368 000C                  		add.w	d1,$C(a0)
0000A510 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A516                            
0000A516                            loc_91AE:
0000A516 4A28 0028                  		tst.b	$28(a0)
0000A51A 6600                       		bne.s	loc_9224
0000A51C 4A28 0001                  		tst.b	1(a0)
0000A520 6A00 0000                  		bpl.w	DeleteObject
0000A524 6000 0000                  		bra.w	DisplaySprite
0000A528                            ; ===========================================================================
0000A528                            
0000A528                            loc_91C0:				; XREF: Obj28_Index
0000A528 6100 0000                  		bsr.w	SpeedToPos
0000A52C 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A532 4A68 0012                  		tst.w	$12(a0)
0000A536 6B00                       		bmi.s	loc_91FC
0000A538 4EB9 0000 0000             		jsr	ObjHitFloor
0000A53E 4A41                       		tst.w	d1
0000A540 6A00                       		bpl.s	loc_91FC
0000A542 D368 000C                  		add.w	d1,$C(a0)
0000A546 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A54C 4A28 0028                  		tst.b	$28(a0)
0000A550 6700                       		beq.s	loc_91FC
0000A552 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000A558 6700                       		beq.s	loc_91FC
0000A55A 4468 0010                  		neg.w	$10(a0)
0000A55E 0868 0000 0001             		bchg	#0,1(a0)
0000A564                            
0000A564                            loc_91FC:
0000A564 5328 001E                  		subq.b	#1,$1E(a0)
0000A568 6A00                       		bpl.s	loc_9212
0000A56A 117C 0001 001E             		move.b	#1,$1E(a0)
0000A570 5228 001A                  		addq.b	#1,$1A(a0)
0000A574 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A57A                            
0000A57A                            loc_9212:
0000A57A 4A28 0028                  		tst.b	$28(a0)
0000A57E 6600                       		bne.s	loc_9224
0000A580 4A28 0001                  		tst.b	1(a0)
0000A584 6A00 0000                  		bpl.w	DeleteObject
0000A588 6000 0000                  		bra.w	DisplaySprite
0000A58C                            ; ===========================================================================
0000A58C                            
0000A58C                            loc_9224:				; XREF: Obj28_Index
0000A58C 3028 0008                  		move.w	8(a0),d0
0000A590 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A594 6500                       		bcs.s	loc_923C
0000A596 0440 0180                  		subi.w	#$180,d0
0000A59A 6A00                       		bpl.s	loc_923C
0000A59C 4A28 0001                  		tst.b	1(a0)
0000A5A0 6A00 0000                  		bpl.w	DeleteObject
0000A5A4                            
0000A5A4                            loc_923C:
0000A5A4 6000 0000                  		bra.w	DisplaySprite
0000A5A8                            ; ===========================================================================
0000A5A8                            
0000A5A8                            loc_9240:				; XREF: Obj28_Index
0000A5A8 4A28 0001                  		tst.b	1(a0)
0000A5AC 6A00 0000                  		bpl.w	DeleteObject
0000A5B0 5368 0036                  		subq.w	#1,$36(a0)
0000A5B4 6600 0000                  		bne.w	loc_925C
0000A5B8 117C 0002 0024             		move.b	#2,$24(a0)
0000A5BE 117C 0003 0018             		move.b	#3,$18(a0)
0000A5C4                            
0000A5C4                            loc_925C:
0000A5C4 6000 0000                  		bra.w	DisplaySprite
0000A5C8                            ; ===========================================================================
0000A5C8                            
0000A5C8                            loc_9260:				; XREF: Obj28_Index
0000A5C8 6100 0000                  		bsr.w	sub_9404
0000A5CC 6400                       		bcc.s	loc_927C
0000A5CE 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A5D4 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A5DA 117C 000E 0024             		move.b	#$E,$24(a0)
0000A5E0 6000 FF46                  		bra.w	loc_91C0
0000A5E4                            ; ===========================================================================
0000A5E4                            
0000A5E4                            loc_927C:
0000A5E4 6000 FFA6                  		bra.w	loc_9224
0000A5E8                            ; ===========================================================================
0000A5E8                            
0000A5E8                            loc_9280:				; XREF: Obj28_Index
0000A5E8 6100 0000                  		bsr.w	sub_9404
0000A5EC 6A00                       		bpl.s	loc_92B6
0000A5EE 4268 0010                  		clr.w	$10(a0)
0000A5F2 4268 0032                  		clr.w	$32(a0)
0000A5F6 6100 0000                  		bsr.w	SpeedToPos
0000A5FA 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A600 6100 0000                  		bsr.w	loc_93C4
0000A604 6100 0000                  		bsr.w	loc_93EC
0000A608 5328 001E                  		subq.b	#1,$1E(a0)
0000A60C 6A00                       		bpl.s	loc_92B6
0000A60E 117C 0001 001E             		move.b	#1,$1E(a0)
0000A614 5228 001A                  		addq.b	#1,$1A(a0)
0000A618 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A61E                            
0000A61E                            loc_92B6:
0000A61E 6000 FF6C                  		bra.w	loc_9224
0000A622                            ; ===========================================================================
0000A622                            
0000A622                            loc_92BA:				; XREF: Obj28_Index
0000A622 6100 0000                  		bsr.w	sub_9404
0000A626 6A00                       		bpl.s	loc_9310
0000A628 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A62E 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A634 117C 0004 0024             		move.b	#4,$24(a0)
0000A63A 6000 FEB0                  		bra.w	loc_9184
0000A63E                            ; ===========================================================================
0000A63E                            
0000A63E                            loc_92D6:				; XREF: Obj28_Index
0000A63E 6100 0000                  		bsr.w	ObjectFall
0000A642 117C 0001 001A             		move.b	#1,$1A(a0)
0000A648 4A68 0012                  		tst.w	$12(a0)
0000A64C 6B00                       		bmi.s	loc_9310
0000A64E 117C 0000 001A             		move.b	#0,$1A(a0)
0000A654 4EB9 0000 0000             		jsr	ObjHitFloor
0000A65A 4A41                       		tst.w	d1
0000A65C 6A00                       		bpl.s	loc_9310
0000A65E 4628 0029                  		not.b	$29(a0)
0000A662 6600                       		bne.s	loc_9306
0000A664 4468 0010                  		neg.w	$10(a0)
0000A668 0868 0000 0001             		bchg	#0,1(a0)
0000A66E                            
0000A66E                            loc_9306:
0000A66E D368 000C                  		add.w	d1,$C(a0)
0000A672 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A678                            
0000A678                            loc_9310:
0000A678 6000 FF12                  		bra.w	loc_9224
0000A67C                            ; ===========================================================================
0000A67C                            
0000A67C                            loc_9314:				; XREF: Obj28_Index
0000A67C 6100 0000                  		bsr.w	sub_9404
0000A680 6A00                       		bpl.s	loc_932E
0000A682 4268 0010                  		clr.w	$10(a0)
0000A686 4268 0032                  		clr.w	$32(a0)
0000A68A 6100 0000                  		bsr.w	ObjectFall
0000A68E 6100 0000                  		bsr.w	loc_93C4
0000A692 6100 0000                  		bsr.w	loc_93EC
0000A696                            
0000A696                            loc_932E:
0000A696 6000 FEF4                  		bra.w	loc_9224
0000A69A                            ; ===========================================================================
0000A69A                            
0000A69A                            loc_9332:				; XREF: Obj28_Index
0000A69A 6100 0000                  		bsr.w	sub_9404
0000A69E 6A00                       		bpl.s	loc_936C
0000A6A0 6100 0000                  		bsr.w	ObjectFall
0000A6A4 117C 0001 001A             		move.b	#1,$1A(a0)
0000A6AA 4A68 0012                  		tst.w	$12(a0)
0000A6AE 6B00                       		bmi.s	loc_936C
0000A6B0 117C 0000 001A             		move.b	#0,$1A(a0)
0000A6B6 4EB9 0000 0000             		jsr	ObjHitFloor
0000A6BC 4A41                       		tst.w	d1
0000A6BE 6A00                       		bpl.s	loc_936C
0000A6C0 4468 0010                  		neg.w	$10(a0)
0000A6C4 0868 0000 0001             		bchg	#0,1(a0)
0000A6CA D368 000C                  		add.w	d1,$C(a0)
0000A6CE 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A6D4                            
0000A6D4                            loc_936C:
0000A6D4 6000 FEB6                  		bra.w	loc_9224
0000A6D8                            ; ===========================================================================
0000A6D8                            
0000A6D8                            loc_9370:				; XREF: Obj28_Index
0000A6D8 6100 0000                  		bsr.w	sub_9404
0000A6DC 6A00                       		bpl.s	loc_93C0
0000A6DE 6100 0000                  		bsr.w	SpeedToPos
0000A6E2 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A6E8 4A68 0012                  		tst.w	$12(a0)
0000A6EC 6B00                       		bmi.s	loc_93AA
0000A6EE 4EB9 0000 0000             		jsr	ObjHitFloor
0000A6F4 4A41                       		tst.w	d1
0000A6F6 6A00                       		bpl.s	loc_93AA
0000A6F8 4628 0029                  		not.b	$29(a0)
0000A6FC 6600                       		bne.s	loc_93A0
0000A6FE 4468 0010                  		neg.w	$10(a0)
0000A702 0868 0000 0001             		bchg	#0,1(a0)
0000A708                            
0000A708                            loc_93A0:
0000A708 D368 000C                  		add.w	d1,$C(a0)
0000A70C 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A712                            
0000A712                            loc_93AA:
0000A712 5328 001E                  		subq.b	#1,$1E(a0)
0000A716 6A00                       		bpl.s	loc_93C0
0000A718 117C 0001 001E             		move.b	#1,$1E(a0)
0000A71E 5228 001A                  		addq.b	#1,$1A(a0)
0000A722 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A728                            
0000A728                            loc_93C0:
0000A728 6000 FE62                  		bra.w	loc_9224
0000A72C                            ; ===========================================================================
0000A72C                            
0000A72C                            loc_93C4:
0000A72C 117C 0001 001A             		move.b	#1,$1A(a0)
0000A732 4A68 0012                  		tst.w	$12(a0)
0000A736 6B00                       		bmi.s	locret_93EA
0000A738 117C 0000 001A             		move.b	#0,$1A(a0)
0000A73E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A744 4A41                       		tst.w	d1
0000A746 6A00                       		bpl.s	locret_93EA
0000A748 D368 000C                  		add.w	d1,$C(a0)
0000A74C 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A752                            
0000A752                            locret_93EA:
0000A752 4E75                       		rts	
0000A754                            ; ===========================================================================
0000A754                            
0000A754                            loc_93EC:
0000A754 08E8 0000 0001             		bset	#0,1(a0)
0000A75A 3028 0008                  		move.w	8(a0),d0
0000A75E 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A762 6400                       		bcc.s	locret_9402
0000A764 08A8 0000 0001             		bclr	#0,1(a0)
0000A76A                            
0000A76A                            locret_9402:
0000A76A 4E75                       		rts	
0000A76C                            
0000A76C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A76C                            
0000A76C                            
0000A76C                            sub_9404:
0000A76C 3038 D008                  		move.w	($FFFFD008).w,d0
0000A770 9068 0008                  		sub.w	8(a0),d0
0000A774 0440 00B8                  		subi.w	#$B8,d0
0000A778 4E75                       		rts	
0000A77A                            ; End of function sub_9404
0000A77A                            
0000A77A                            ; ===========================================================================
0000A77A                            ; ---------------------------------------------------------------------------
0000A77A                            ; Object 29 - points that appear when you destroy something
0000A77A                            ; ---------------------------------------------------------------------------
0000A77A                            
0000A77A                            Obj29:					; XREF: Obj_Index
0000A77A 7000                       		moveq	#0,d0
0000A77C 1028 0024                  		move.b	$24(a0),d0
0000A780 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000A784 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000A788 6000 0000                  		bra.w	DisplaySprite
0000A78C                            ; ===========================================================================
0000A78C 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0000A78E 0000                       		dc.w Obj29_Slower-Obj29_Index
0000A790                            ; ===========================================================================
0000A790                            
0000A790                            Obj29_Main:				; XREF: Obj29_Index
0000A790 5428 0024                  		addq.b	#2,$24(a0)
0000A794 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
0000A79C 317C 2568 0002             		move.w	#($2000+pointsart),2(a0)
0000A7A2 117C 0004 0001             		move.b	#4,1(a0)
0000A7A8 117C 0001 0018             		move.b	#1,$18(a0)
0000A7AE 117C 0008 0019             		move.b	#8,$19(a0)
0000A7B4 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000A7BA                            
0000A7BA                            Obj29_Slower:				; XREF: Obj29_Index
0000A7BA 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A7BE 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000A7C2 6100 0000                  		bsr.w	SpeedToPos
0000A7C6 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A7CC 4E75                       		rts	
0000A7CE                            ; ===========================================================================
0000A7CE                            ; ---------------------------------------------------------------------------
0000A7CE                            ; Sprite mappings - animals
0000A7CE                            ; ---------------------------------------------------------------------------
0000A7CE                            Map_obj28:
0000A7CE                            	include "_maps\obj28.asm"
0000A7CE                            ; ---------------------------------------------------------------------------
0000A7CE                            ; Sprite mappings - animals
0000A7CE                            ; ---------------------------------------------------------------------------
0000A7CE 0000                       		dc.w byte_9472-Map_obj28
0000A7D0 0000                       		dc.w byte_9478-Map_obj28
0000A7D2 0000                       		dc.w byte_946C-Map_obj28
0000A7D4 01                         byte_946C:	dc.b 1
0000A7D5 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A7DA 01                         byte_9472:	dc.b 1
0000A7DB F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000A7E0 01                         byte_9478:	dc.b 1
0000A7E1 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000A7E6                            		even
0000A7E6                            		even
0000A7E6                            
0000A7E6                            Map_obj28a:
0000A7E6                            	include "_maps\obj28a.asm"
0000A7E6                            ; ---------------------------------------------------------------------------
0000A7E6                            ; Sprite mappings - animals
0000A7E6                            ; ---------------------------------------------------------------------------
0000A7E6 0000                       		dc.w byte_948A-Map_obj28a
0000A7E8 0000                       		dc.w byte_9490-Map_obj28a
0000A7EA 0000                       		dc.w byte_9484-Map_obj28a
0000A7EC 01                         byte_9484:	dc.b 1
0000A7ED F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A7F2 01                         byte_948A:	dc.b 1
0000A7F3 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000A7F8 01                         byte_9490:	dc.b 1
0000A7F9 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000A7FE                            		even
0000A7FE                            		even
0000A7FE                            
0000A7FE                            Map_obj28b:
0000A7FE                            	include "_maps\obj28b.asm"
0000A7FE                            ; ---------------------------------------------------------------------------
0000A7FE                            ; Sprite mappings - animals
0000A7FE                            ; ---------------------------------------------------------------------------
0000A7FE 0000                       		dc.w byte_94A2-Map_obj28b
0000A800 0000                       		dc.w byte_94A8-Map_obj28b
0000A802 0000                       		dc.w byte_949C-Map_obj28b
0000A804 01                         byte_949C:	dc.b 1
0000A805 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A80A 01                         byte_94A2:	dc.b 1
0000A80B FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000A810 01                         byte_94A8:	dc.b 1
0000A811 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000A816                            		even
0000A816                            		even
0000A816                            
0000A816                            ; ---------------------------------------------------------------------------
0000A816                            ; Sprite mappings - points that	appear when you	destroy	something
0000A816                            ; ---------------------------------------------------------------------------
0000A816                            Map_obj29:
0000A816                            	include "_maps\obj29.asm"
0000A816                            ; ---------------------------------------------------------------------------
0000A816                            ; Sprite mappings - points that	appear when you	destroy	something
0000A816                            ; ---------------------------------------------------------------------------
0000A816 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000A81A 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
0000A81E 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000A822 0000                       		dc.w byte_94E5-Map_obj29
0000A824 01                         byte_94BC:	dc.b 1
0000A825 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000A82A 01                         byte_94C2:	dc.b 1
0000A82B FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000A830 01                         byte_94C8:	dc.b 1
0000A831 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000A836 01                         byte_94CE:	dc.b 1
0000A837 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
0000A83C 01                         byte_94D4:	dc.b 1
0000A83D FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000A842 02                         byte_94DA:	dc.b 2
0000A843 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000A848 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000A84D 02                         byte_94E5:	dc.b 2
0000A84E FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000A853 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000A858                            		even
0000A858                            		even
0000A858                            
0000A858                            ; ===========================================================================
0000A858                            ; ---------------------------------------------------------------------------
0000A858                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000A858                            ; ---------------------------------------------------------------------------
0000A858                            
0000A858                            Obj1F:					; XREF: Obj_Index
0000A858 7000                       		moveq	#0,d0
0000A85A 1028 0024                  		move.b	$24(a0),d0
0000A85E 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000A862 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000A866                            ; ===========================================================================
0000A866 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000A868 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000A86A 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000A86C 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000A86E 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000A870                            ; ===========================================================================
0000A870                            
0000A870                            Obj1F_Main:				; XREF: Obj1F_Index
0000A870 117C 0010 0016             		move.b	#$10,$16(a0)
0000A876 117C 0008 0017             		move.b	#8,$17(a0)
0000A87C 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A884 317C 0400 0002             		move.w	#$400,2(a0)
0000A88A 117C 0004 0001             		move.b	#4,1(a0)
0000A890 117C 0003 0018             		move.b	#3,$18(a0)
0000A896 117C 0006 0020             		move.b	#6,$20(a0)
0000A89C 117C 0015 0019             		move.b	#$15,$19(a0)
0000A8A2 6100 0000                  		bsr.w	ObjectFall
0000A8A6 4EB9 0000 0000             		jsr	ObjHitFloor
0000A8AC 4A41                       		tst.w	d1
0000A8AE 6A00                       		bpl.s	locret_955A
0000A8B0 D368 000C                  		add.w	d1,$C(a0)
0000A8B4 1143 0026                  		move.b	d3,$26(a0)
0000A8B8 317C 0000 0012             		move.w	#0,$12(a0)
0000A8BE 5428 0024                  		addq.b	#2,$24(a0)
0000A8C2                            
0000A8C2                            locret_955A:
0000A8C2 4E75                       		rts	
0000A8C4                            ; ===========================================================================
0000A8C4                            
0000A8C4                            Obj1F_Action:				; XREF: Obj1F_Index
0000A8C4 7000                       		moveq	#0,d0
0000A8C6 1028 0025                  		move.b	$25(a0),d0
0000A8CA 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000A8CE 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000A8D2 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A8D8 6100 0000                  		bsr.w	AnimateSprite
0000A8DC 6000 0000                  		bra.w	MarkObjGone
0000A8E0                            ; ===========================================================================
0000A8E0 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000A8E2 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000A8E4                            ; ===========================================================================
0000A8E4                            
0000A8E4                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000A8E4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000A8E8 6A00                       		bpl.s	locret_95B6
0000A8EA 4A28 0001                  		tst.b	1(a0)
0000A8EE 6A00                       		bpl.s	Obj1F_Move
0000A8F0 0868 0001 0032             		bchg	#1,$32(a0)
0000A8F6 6600                       		bne.s	Obj1F_MakeFire
0000A8F8                            
0000A8F8                            Obj1F_Move:
0000A8F8 5428 0025                  		addq.b	#2,$25(a0)
0000A8FC 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000A902 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000A908 6100 0000                  		bsr.w	Obj1F_SetAni
0000A90C 5600                       		addq.b	#3,d0
0000A90E 1140 001C                  		move.b	d0,$1C(a0)
0000A912 0868 0000 0022             		bchg	#0,$22(a0)
0000A918 6600                       		bne.s	locret_95B6
0000A91A 4468 0010                  		neg.w	$10(a0)		; change direction
0000A91E                            
0000A91E                            locret_95B6:
0000A91E 4E75                       		rts	
0000A920                            ; ===========================================================================
0000A920                            
0000A920                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000A920 317C 003B 0030             		move.w	#$3B,$30(a0)
0000A926 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000A92C 6100 0000                  		bsr.w	SingleObjLoad
0000A930 6600                       		bne.s	Obj1F_MakeFire2
0000A932 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000A936 137C 0006 0024             		move.b	#6,$24(a1)
0000A93C 3368 0008 0008             		move.w	8(a0),8(a1)
0000A942 0469 0010 0008             		subi.w	#$10,8(a1)
0000A948 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A94E 337C FF00 0010             		move.w	#-$100,$10(a1)
0000A954                            
0000A954                            Obj1F_MakeFire2:
0000A954 6100 0000                  		bsr.w	SingleObjLoad
0000A958 6600                       		bne.s	locret_9618
0000A95A 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000A95E 137C 0006 0024             		move.b	#6,$24(a1)
0000A964 3368 0008 0008             		move.w	8(a0),8(a1)
0000A96A 0669 0010 0008             		addi.w	#$10,8(a1)
0000A970 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A976 337C 0100 0010             		move.w	#$100,$10(a1)
0000A97C                            
0000A97C                            locret_9618:
0000A97C 4E75                       		rts	
0000A97E                            ; ===========================================================================
0000A97E                            
0000A97E                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000A97E 5368 0030                  		subq.w	#1,$30(a0)
0000A982 6B00                       		bmi.s	loc_966E
0000A984 6100 0000                  		bsr.w	SpeedToPos
0000A988 0868 0000 0032             		bchg	#0,$32(a0)
0000A98E 6600                       		bne.s	loc_9654
0000A990 3628 0008                  		move.w	8(a0),d3
0000A994 0643 0010                  		addi.w	#$10,d3
0000A998 0828 0000 0022             		btst	#0,$22(a0)
0000A99E 6700                       		beq.s	loc_9640
0000A9A0 0443 0020                  		subi.w	#$20,d3
0000A9A4                            
0000A9A4                            loc_9640:
0000A9A4 4EB9 0000 0000             		jsr	ObjHitFloor2
0000A9AA 0C41 FFF8                  		cmpi.w	#-8,d1
0000A9AE 6D00                       		blt.s	loc_966E
0000A9B0 0C41 000C                  		cmpi.w	#$C,d1
0000A9B4 6C00                       		bge.s	loc_966E
0000A9B6 4E75                       		rts	
0000A9B8                            ; ===========================================================================
0000A9B8                            
0000A9B8                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000A9B8 4EB9 0000 0000             		jsr	ObjHitFloor
0000A9BE D368 000C                  		add.w	d1,$C(a0)
0000A9C2 1143 0026                  		move.b	d3,$26(a0)
0000A9C6 6100 0000                  		bsr.w	Obj1F_SetAni
0000A9CA 5600                       		addq.b	#3,d0
0000A9CC 1140 001C                  		move.b	d0,$1C(a0)
0000A9D0 4E75                       		rts	
0000A9D2                            ; ===========================================================================
0000A9D2                            
0000A9D2                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000A9D2 5528 0025                  		subq.b	#2,$25(a0)
0000A9D6 317C 003B 0030             		move.w	#59,$30(a0)
0000A9DC 317C 0000 0010             		move.w	#0,$10(a0)
0000A9E2 6100 0000                  		bsr.w	Obj1F_SetAni
0000A9E6 1140 001C                  		move.b	d0,$1C(a0)
0000A9EA 4E75                       		rts	
0000A9EC                            ; ---------------------------------------------------------------------------
0000A9EC                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000A9EC                            ; ---------------------------------------------------------------------------
0000A9EC                            
0000A9EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A9EC                            
0000A9EC                            
0000A9EC                            Obj1F_SetAni:				; XREF: loc_966E
0000A9EC 7000                       		moveq	#0,d0
0000A9EE 1628 0026                  		move.b	$26(a0),d3
0000A9F2 6B00                       		bmi.s	loc_96A4
0000A9F4 0C03 0006                  		cmpi.b	#6,d3
0000A9F8 6500                       		bcs.s	locret_96A2
0000A9FA 7001                       		moveq	#1,d0
0000A9FC 0828 0000 0022             		btst	#0,$22(a0)
0000AA02 6600                       		bne.s	locret_96A2
0000AA04 7002                       		moveq	#2,d0
0000AA06                            
0000AA06                            locret_96A2:
0000AA06 4E75                       		rts	
0000AA08                            ; ===========================================================================
0000AA08                            
0000AA08                            loc_96A4:				; XREF: Obj1F_SetAni
0000AA08 0C03 00FA                  		cmpi.b	#-6,d3
0000AA0C 6200                       		bhi.s	locret_96B6
0000AA0E 7002                       		moveq	#2,d0
0000AA10 0828 0000 0022             		btst	#0,$22(a0)
0000AA16 6600                       		bne.s	locret_96B6
0000AA18 7001                       		moveq	#1,d0
0000AA1A                            
0000AA1A                            locret_96B6:
0000AA1A 4E75                       		rts	
0000AA1C                            ; End of function Obj1F_SetAni
0000AA1C                            
0000AA1C                            ; ===========================================================================
0000AA1C                            
0000AA1C                            Obj1F_Delete:				; XREF: Obj1F_Index
0000AA1C 6100 0000                  		bsr.w	DeleteObject
0000AA20 4E75                       		rts	
0000AA22                            ; ===========================================================================
0000AA22                            ; ---------------------------------------------------------------------------
0000AA22                            ; Sub-object - missile that the	Crabmeat throws
0000AA22                            ; ---------------------------------------------------------------------------
0000AA22                            
0000AA22                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000AA22 5428 0024                  		addq.b	#2,$24(a0)
0000AA26 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000AA2E 317C 0400 0002             		move.w	#$400,2(a0)
0000AA34 117C 0004 0001             		move.b	#4,1(a0)
0000AA3A 117C 0003 0018             		move.b	#3,$18(a0)
0000AA40 117C 0087 0020             		move.b	#$87,$20(a0)
0000AA46 117C 0008 0019             		move.b	#8,$19(a0)
0000AA4C 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AA52 117C 0007 001C             		move.b	#7,$1C(a0)
0000AA58                            
0000AA58                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000AA58 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000AA5E 6100 0000                  		bsr.w	AnimateSprite
0000AA62 6100 0000                  		bsr.w	ObjectFall
0000AA66 6100 0000                  		bsr.w	DisplaySprite
0000AA6A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000AA6E 0640 00E0                  		addi.w	#$E0,d0
0000AA72 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000AA76 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000AA78 4E75                       		rts	
0000AA7A                            ; ===========================================================================
0000AA7A                            
0000AA7A                            Obj1F_Delete2:
0000AA7A 6000 0000                  		bra.w	DeleteObject
0000AA7E                            ; ===========================================================================
0000AA7E                            Ani_obj1F:
0000AA7E                            	include "_anim\obj1F.asm"
0000AA7E                            ; ---------------------------------------------------------------------------
0000AA7E                            ; Animation script - Crabmeat enemy
0000AA7E                            ; ---------------------------------------------------------------------------
0000AA7E 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000AA84 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000AA8A 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000AA8E 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000AA92 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000AA96 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000AA9A 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000AAA0 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000AAA6 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000AAAC 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000AAB0 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000AAB4                            		even
0000AAB4                            		even
0000AAB4                            
0000AAB4                            ; ---------------------------------------------------------------------------
0000AAB4                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000AAB4                            ; ---------------------------------------------------------------------------
0000AAB4                            Map_obj1F:
0000AAB4                            	include "_maps\obj1F.asm"
0000AAB4                            ; ---------------------------------------------------------------------------
0000AAB4                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000AAB4                            ; ---------------------------------------------------------------------------
0000AAB4 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000AAB8 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
0000AABC 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
0000AAC0 0000                       		dc.w byte_97D7-Map_obj1F
0000AAC2 04                         byte_975E:	dc.b 4
0000AAC3 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000AAC8 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000AACD 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000AAD2 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000AAD7 04                         byte_9773:	dc.b 4
0000AAD8 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
0000AADD F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000AAE2 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000AAE7 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000AAEC 04                         byte_9788:	dc.b 4
0000AAED EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000AAF2 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000AAF7 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000AAFC FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000AB01 04                         byte_979D:	dc.b 4
0000AB02 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000AB07 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000AB0C FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000AB11 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000AB16 06                         byte_97B2:	dc.b 6
0000AB17 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0000AB1C F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000AB21 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000AB26 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000AB2B 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000AB30 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000AB35 01                         byte_97D1:	dc.b 1
0000AB36 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0000AB3B 01                         byte_97D7:	dc.b 1
0000AB3C F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
0000AB42 00                         		even
0000AB42 00                         		even
0000AB42                            
0000AB42                            ; ===========================================================================
0000AB42                            ; ---------------------------------------------------------------------------
0000AB42                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000AB42                            ; ---------------------------------------------------------------------------
0000AB42                            
0000AB42                            Obj22:					; XREF: Obj_Index
0000AB42 7000                       		moveq	#0,d0
0000AB44 1028 0024                  		move.b	$24(a0),d0
0000AB48 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000AB4C 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000AB50                            ; ===========================================================================
0000AB50 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000AB52 0000                       		dc.w Obj22_Action-Obj22_Index
0000AB54 0000                       		dc.w Obj22_Delete-Obj22_Index
0000AB56                            ; ===========================================================================
0000AB56                            
0000AB56                            Obj22_Main:				; XREF: Obj22_Index
0000AB56 5428 0024                  		addq.b	#2,$24(a0)
0000AB5A 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000AB62 317C 0444 0002             		move.w	#$444,2(a0)
0000AB68 117C 0004 0001             		move.b	#4,1(a0)
0000AB6E 117C 0003 0018             		move.b	#3,$18(a0)
0000AB74 117C 0008 0020             		move.b	#8,$20(a0)
0000AB7A 117C 0018 0019             		move.b	#$18,$19(a0)
0000AB80                            
0000AB80                            Obj22_Action:				; XREF: Obj22_Index
0000AB80 7000                       		moveq	#0,d0
0000AB82 1028 0025                  		move.b	$25(a0),d0
0000AB86 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000AB8A 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000AB8E 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000AB94 6100 0000                  		bsr.w	AnimateSprite
0000AB98 6000 0000                  		bra.w	MarkObjGone
0000AB9C                            ; ===========================================================================
0000AB9C 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000AB9E 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000ABA0                            ; ===========================================================================
0000ABA0                            
0000ABA0                            Obj22_Move:				; XREF: Obj22_Index2
0000ABA0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000ABA4 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000ABA6 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000ABAC 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000ABAE 5428 0025                  		addq.b	#2,$25(a0)
0000ABB2 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000ABB8 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000ABBE 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000ABC4 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000ABCA 6600                       		bne.s	locret_986C	; if not, branch
0000ABCC 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000ABD0                            
0000ABD0                            locret_986C:
0000ABD0 4E75                       		rts	
0000ABD2                            ; ===========================================================================
0000ABD2                            
0000ABD2                            Obj22_Fire:				; XREF: Obj22_Move
0000ABD2 6100 0000                  		bsr.w	SingleObjLoad
0000ABD6 6600                       		bne.s	locret_98D0
0000ABD8 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000ABDC 3368 0008 0008             		move.w	8(a0),8(a1)
0000ABE2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ABE8 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000ABEE 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000ABF4 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000ABFA 303C 0018                  		move.w	#$18,d0
0000ABFE 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000AC04 6600                       		bne.s	loc_98AA	; if not, branch
0000AC06 4440                       		neg.w	d0
0000AC08 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000AC0C                            
0000AC0C                            loc_98AA:
0000AC0C D169 0008                  		add.w	d0,8(a1)
0000AC10 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000AC16 337C 000E 0032             		move.w	#$E,$32(a1)
0000AC1C 2348 003C                  		move.l	a0,$3C(a1)
0000AC20 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000AC26 317C 003B 0032             		move.w	#$3B,$32(a0)
0000AC2C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000AC32                            
0000AC32                            locret_98D0:
0000AC32 4E75                       		rts	
0000AC34                            ; ===========================================================================
0000AC34                            
0000AC34                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000AC34 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000AC38 6B00                       		bmi.s	Obj22_ChgDir
0000AC3A 6100 0000                  		bsr.w	SpeedToPos
0000AC3E 4A28 0034                  		tst.b	$34(a0)
0000AC42 6600                       		bne.s	locret_992A
0000AC44 3038 D008                  		move.w	($FFFFD008).w,d0
0000AC48 9068 0008                  		sub.w	8(a0),d0
0000AC4C 6A00                       		bpl.s	Obj22_SetNrSonic
0000AC4E 4440                       		neg.w	d0
0000AC50                            
0000AC50                            Obj22_SetNrSonic:
0000AC50 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000AC54 6400                       		bcc.s	locret_992A	; if not, branch
0000AC56 4A28 0001                  		tst.b	1(a0)
0000AC5A 6A00                       		bpl.s	locret_992A
0000AC5C 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000AC62 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000AC68 6000                       		bra.s	Obj22_Stop
0000AC6A                            ; ===========================================================================
0000AC6A                            
0000AC6A                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000AC6A 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000AC70 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000AC76 317C 003B 0032             		move.w	#59,$32(a0)
0000AC7C                            
0000AC7C                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000AC7C 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000AC80 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000AC86 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000AC8C                            
0000AC8C                            locret_992A:
0000AC8C 4E75                       		rts	
0000AC8E                            ; ===========================================================================
0000AC8E                            
0000AC8E                            Obj22_Delete:				; XREF: Obj22_Index
0000AC8E 6100 0000                  		bsr.w	DeleteObject
0000AC92 4E75                       		rts	
0000AC94                            ; ===========================================================================
0000AC94                            ; ---------------------------------------------------------------------------
0000AC94                            ; Object 23 - missile that Buzz	Bomber throws
0000AC94                            ; ---------------------------------------------------------------------------
0000AC94                            
0000AC94                            Obj23:					; XREF: Obj_Index
0000AC94 7000                       		moveq	#0,d0
0000AC96 1028 0024                  		move.b	$24(a0),d0
0000AC9A 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000AC9E 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000ACA2                            ; ===========================================================================
0000ACA2 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000ACA4 0000                       		dc.w Obj23_Animate-Obj23_Index
0000ACA6 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000ACA8 0000                       		dc.w Obj23_Delete-Obj23_Index
0000ACAA 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000ACAC                            ; ===========================================================================
0000ACAC                            
0000ACAC                            Obj23_Main:				; XREF: Obj23_Index
0000ACAC 5368 0032                  		subq.w	#1,$32(a0)
0000ACB0 6A00                       		bpl.s	Obj23_ChkCancel
0000ACB2 5428 0024                  		addq.b	#2,$24(a0)
0000ACB6 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000ACBE 317C 2444 0002             		move.w	#$2444,2(a0)
0000ACC4 117C 0004 0001             		move.b	#4,1(a0)
0000ACCA 117C 0003 0018             		move.b	#3,$18(a0)
0000ACD0 117C 0008 0019             		move.b	#8,$19(a0)
0000ACD6 0228 0003 0022             		andi.b	#3,$22(a0)
0000ACDC 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000ACE0 6700                       		beq.s	Obj23_Animate	; if not, branch
0000ACE2 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000ACE8 117C 0087 0020             		move.b	#$87,$20(a0)
0000ACEE 117C 0001 001C             		move.b	#1,$1C(a0)
0000ACF4 6000                       		bra.s	Obj23_Animate2
0000ACF6                            ; ===========================================================================
0000ACF6                            
0000ACF6                            Obj23_Animate:				; XREF: Obj23_Index
0000ACF6 6100                       		bsr.s	Obj23_ChkCancel
0000ACF8 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000ACFE 6100 0000                  		bsr.w	AnimateSprite
0000AD02 6000 0000                  		bra.w	DisplaySprite
0000AD06                            ; ---------------------------------------------------------------------------
0000AD06                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000AD06                            ; destroyed, and if it has, then cancel	the missile
0000AD06                            ; ---------------------------------------------------------------------------
0000AD06                            
0000AD06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AD06                            
0000AD06                            
0000AD06                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000AD06 2268 003C                  		movea.l	$3C(a0),a1
0000AD0A 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000AD0E 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000AD10 4E75                       		rts	
0000AD12                            ; End of function Obj23_ChkCancel
0000AD12                            
0000AD12                            ; ===========================================================================
0000AD12                            
0000AD12                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000AD12 0828 0007 0022             		btst	#7,$22(a0)
0000AD18 6600                       		bne.s	Obj23_Explode
0000AD1A 117C 0087 0020             		move.b	#$87,$20(a0)
0000AD20 117C 0001 001C             		move.b	#1,$1C(a0)
0000AD26 6100 0000                  		bsr.w	SpeedToPos
0000AD2A 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000AD30 6100 0000                  		bsr.w	AnimateSprite
0000AD34 6100 0000                  		bsr.w	DisplaySprite
0000AD38 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000AD3C 0640 00E0                  		addi.w	#$E0,d0
0000AD40 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000AD44 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000AD46 4E75                       		rts	
0000AD48                            ; ===========================================================================
0000AD48                            
0000AD48                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000AD48 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000AD4C 117C 0000 0024             		move.b	#0,$24(a0)
0000AD52 6000 F30A                  		bra.w	Obj24
0000AD56                            ; ===========================================================================
0000AD56                            
0000AD56                            Obj23_Delete:				; XREF: Obj23_Index
0000AD56 6100 0000                  		bsr.w	DeleteObject
0000AD5A 4E75                       		rts	
0000AD5C                            ; ===========================================================================
0000AD5C                            
0000AD5C                            Obj23_FromNewt:				; XREF: Obj23_Index
0000AD5C 4A28 0001                  		tst.b	1(a0)
0000AD60 6AF4                       		bpl.s	Obj23_Delete
0000AD62 6100 0000                  		bsr.w	SpeedToPos
0000AD66                            
0000AD66                            Obj23_Animate2:				; XREF: Obj23_Main
0000AD66 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000AD6C 6100 0000                  		bsr.w	AnimateSprite
0000AD70 6100 0000                  		bsr.w	DisplaySprite
0000AD74 4E75                       		rts	
0000AD76                            ; ===========================================================================
0000AD76                            Ani_obj22:
0000AD76                            	include "_anim\obj22.asm"
0000AD76                            ; ---------------------------------------------------------------------------
0000AD76                            ; Animation script - Buzz Bomber enemy
0000AD76                            ; ---------------------------------------------------------------------------
0000AD76 0000                       		dc.w byte_9A1E-Ani_obj22
0000AD78 0000                       		dc.w byte_9A22-Ani_obj22
0000AD7A 0000                       		dc.w byte_9A26-Ani_obj22
0000AD7C 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000AD80 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000AD84 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000AD88                            		even
0000AD88                            		even
0000AD88                            
0000AD88                            Ani_obj23:
0000AD88                            	include "_anim\obj23.asm"
0000AD88                            ; ---------------------------------------------------------------------------
0000AD88                            ; Animation script - missile that Buzz Bomber throws
0000AD88                            ; ---------------------------------------------------------------------------
0000AD88 0000                       		dc.w byte_9A2E-Ani_obj23
0000AD8A 0000                       		dc.w byte_9A32-Ani_obj23
0000AD8C 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000AD90 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000AD94                            		even
0000AD94                            		even
0000AD94                            
0000AD94                            ; ---------------------------------------------------------------------------
0000AD94                            ; Sprite mappings - Buzz Bomber	enemy
0000AD94                            ; ---------------------------------------------------------------------------
0000AD94                            Map_obj22:
0000AD94                            	include "_maps\obj22.asm"
0000AD94                            ; ---------------------------------------------------------------------------
0000AD94                            ; Sprite mappings - Buzz Bomber	enemy
0000AD94                            ; ---------------------------------------------------------------------------
0000AD94 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
0000AD98 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
0000AD9C 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
0000ADA0 06                         byte_9A42:	dc.b 6
0000ADA1 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000ADA6 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000ADAB 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000ADB0 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000ADB5 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000ADBA F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000ADBF 06                         byte_9A61:	dc.b 6
0000ADC0 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000ADC5 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000ADCA 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000ADCF 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000ADD4 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000ADD9 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000ADDE 07                         byte_9A80:	dc.b 7
0000ADDF 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000ADE4 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000ADE9 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000ADEE 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000ADF3 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000ADF8 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000ADFD F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000AE02 07                         byte_9AA4:	dc.b 7
0000AE03 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000AE08 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000AE0D F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000AE12 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000AE17 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000AE1C F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000AE21 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000AE26 06                         byte_9AC8:	dc.b 6
0000AE27 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000AE2C 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000AE31 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000AE36 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000AE3B F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000AE40 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000AE45 04                         byte_9AE7:	dc.b 4
0000AE46 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000AE4B 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000AE50 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000AE55 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000AE5A F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000AE5F F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000AE64                            		even
0000AE64                            		even
0000AE64                            
0000AE64                            ; ---------------------------------------------------------------------------
0000AE64                            ; Sprite mappings - missile that Buzz Bomber throws
0000AE64                            ; ---------------------------------------------------------------------------
0000AE64                            Map_obj23:
0000AE64                            	include "_maps\obj23.asm"
0000AE64                            ; ---------------------------------------------------------------------------
0000AE64                            ; Sprite mappings - missile that Buzz Bomber throws
0000AE64                            ; ---------------------------------------------------------------------------
0000AE64 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000AE68 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000AE6C 01                         byte_9B0E:	dc.b 1
0000AE6D F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000AE72 01                         byte_9B14:	dc.b 1
0000AE73 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000AE78 01                         byte_9B1A:	dc.b 1
0000AE79 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000AE7E 01                         byte_9B20:	dc.b 1
0000AE7F F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000AE84                            		even
0000AE84                            		even
0000AE84                            
0000AE84                            ; ===========================================================================
0000AE84                            ; ---------------------------------------------------------------------------
0000AE84                            ; Object 25 - rings
0000AE84                            ; ---------------------------------------------------------------------------
0000AE84                            
0000AE84                            Obj25:					; XREF: Obj_Index
0000AE84 7000                       		moveq	#0,d0
0000AE86 1028 0024                  		move.b	$24(a0),d0
0000AE8A 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000AE8E 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000AE92                            ; ===========================================================================
0000AE92 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000AE94 0000                       		dc.w Obj25_Animate-Obj25_Index
0000AE96 0000                       		dc.w Obj25_Collect-Obj25_Index
0000AE98 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000AE9A 0000                       		dc.w Obj25_Delete-Obj25_Index
0000AE9C                            ; ===========================================================================
0000AE9C                            
0000AE9C                            Obj25_Main:				; XREF: Obj25_Index		addq.b	#2,$24(a0)
0000AE9C 3168 0008 0032             		move.w	8(a0),$32(a0)
0000AEA2 217C 0000 0000 0004        		move.l	#Map_obj25,4(a0)
0000AEAA 317C 26BA 0002             		move.w	#($2000+ringart),2(a0)
0000AEB0 117C 0004 0001             		move.b	#4,1(a0)
0000AEB6 117C 0002 0018             		move.b	#2,$18(a0)
0000AEBC 117C 0047 0020             		move.b	#$47,$20(a0)
0000AEC2 117C 0008 0019             		move.b	#8,$19(a0)
0000AEC8                            
0000AEC8                            Obj25_Animate:				; XREF: Obj25_Index
0000AEC8 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000AECE 3028 0032                  		move.w	$32(a0),d0
0000AED2 6000 0000                  		bra.w	MarkObjGone
0000AED6                            ; ===========================================================================
0000AED6                            
0000AED6                            Obj25_Collect:				; XREF: Obj25_Index
0000AED6 5428 0024                  		addq.b	#2,$24(a0)
0000AEDA 117C 0000 0020             		move.b	#0,$20(a0)
0000AEE0 317C 0080 0018             		move.w	#$80,$18(a0)
0000AEE6 6100 0000                  		bsr.w	CollectRing
0000AEEA                            
0000AEEA                            Obj25_Sparkle:				; XREF: Obj25_Index
0000AEEA 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000AEF0 6100 0000                  		bsr.w	AnimateSprite
0000AEF4 6000 0000                  		bra.w	DisplaySprite
0000AEF8                            ; ===========================================================================
0000AEF8                            
0000AEF8                            Obj25_Delete:				; XREF: Obj25_Index
0000AEF8 6000 0000                  		bra.w	DeleteObject
0000AEFC                            
0000AEFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AEFC                            
0000AEFC                            
0000AEFC                            CollectRing:				; XREF: Obj25_Collect
0000AEFC 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000AF00 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000AF06 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000AF0A 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000AF10 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000AF12 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000AF18 6700                       		beq.s	loc_9CA4
0000AF1A 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000AF20 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000AF22 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000AF28 6600                       		bne.s	Obj25_PlaySnd
0000AF2A                            
0000AF2A                            loc_9CA4:
0000AF2A 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AF2E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AF32 303C 0088                  		move.w	#$88,d0		; play extra life music
0000AF36                            
0000AF36                            Obj25_PlaySnd:
0000AF36 4EF9 0000 11F6             		jmp	(PlaySound_Special).l
0000AF3C                            ; End of function CollectRing
0000AF3C                            
0000AF3C                            ; ===========================================================================
0000AF3C                            ; ---------------------------------------------------------------------------
0000AF3C                            ; Object 37 - rings flying out of Sonic	when he's hit
0000AF3C                            ; ---------------------------------------------------------------------------
0000AF3C                            
0000AF3C                            Obj37:					; XREF: Obj_Index
0000AF3C 7000                       		moveq	#0,d0
0000AF3E 1028 0024                  		move.b	$24(a0),d0
0000AF42 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000AF46 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000AF4A                            ; ===========================================================================
0000AF4A 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000AF4C 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000AF4E 0000                       		dc.w Obj37_Collect-Obj37_Index
0000AF50 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000AF52 0000                       		dc.w Obj37_Delete-Obj37_Index
0000AF54                            ; ===========================================================================
0000AF54                            
0000AF54                            Obj37_CountRings:			; XREF: Obj37_Index
0000AF54 2248                       		movea.l	a0,a1
0000AF56 7A00                       		moveq	#0,d5
0000AF58 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000AF5C 7020                       		moveq	#32,d0
0000AF5E BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000AF60 6500                       		bcs.s	loc_9CDE	; if not, branch
0000AF62 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000AF64                            
0000AF64                            loc_9CDE:
0000AF64 5345                       		subq.w	#1,d5
0000AF66 383C 0288                  		move.w	#$288,d4
0000AF6A 6000                       		bra.s	Obj37_MakeRings
0000AF6C                            ; ===========================================================================
0000AF6C                            
0000AF6C                            Obj37_Loop:
0000AF6C 6100 0000                  		bsr.w	SingleObjLoad
0000AF70 6600 0000                  		bne.w	Obj37_ResetCounter
0000AF74                            
0000AF74                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000AF74 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000AF78 5429 0024                  		addq.b	#2,$24(a1)
0000AF7C 137C 0008 0016             		move.b	#8,$16(a1)
0000AF82 137C 0008 0017             		move.b	#8,$17(a1)
0000AF88 3368 0008 0008             		move.w	8(a0),8(a1)
0000AF8E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AF94 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000AF9C 337C 26BA 0002             		move.w	#($2000+ringart),2(a1)
0000AFA2 137C 0004 0001             		move.b	#4,1(a1)
0000AFA8 137C 0003 0018             		move.b	#3,$18(a1)
0000AFAE 137C 0047 0020             		move.b	#$47,$20(a1)
0000AFB4 137C 0008 0019             		move.b	#8,$19(a1)
0000AFBA 4A44                       		tst.w	d4
0000AFBC 6B00                       		bmi.s	loc_9D62
0000AFBE 3004                       		move.w	d4,d0
0000AFC0 4EB9 0000 29CC             		jsr	(CalcSine).l
0000AFC6 3404                       		move.w	d4,d2
0000AFC8 E04A                       		lsr.w	#8,d2
0000AFCA E560                       		asl.w	d2,d0
0000AFCC E561                       		asl.w	d2,d1
0000AFCE 3400                       		move.w	d0,d2
0000AFD0 3601                       		move.w	d1,d3
0000AFD2 0604 0010                  		addi.b	#$10,d4
0000AFD6 6400                       		bcc.s	loc_9D62
0000AFD8 0444 0080                  		subi.w	#$80,d4
0000AFDC 6400                       		bcc.s	loc_9D62
0000AFDE 383C 0288                  		move.w	#$288,d4
0000AFE2                            
0000AFE2                            loc_9D62:
0000AFE2 3342 0010                  		move.w	d2,$10(a1)
0000AFE6 3343 0012                  		move.w	d3,$12(a1)
0000AFEA 4442                       		neg.w	d2
0000AFEC 4444                       		neg.w	d4
0000AFEE 51CD FF7C                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000AFF2                            
0000AFF2                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000AFF2 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000AFF8 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000AFFE 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000B004 70FF                       		moveq	#-1,d0			; Move #-1 to d0
0000B006 1140 001F                  		move.b	d0,$1F(a0)	; Move d0 to new timer
0000B00A 11C0 FEC6                  		move.b	d0,($FFFFFEC6).w	; Move d0 to old timer (for animated purposes)		
0000B00E 303C 00C6                  		move.w	#$C6,d0
0000B012 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000B018                            
0000B018                            Obj37_Bounce:				; XREF: Obj37_Index
0000B018 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000B01E 6100 0000                  		bsr.w	SpeedToPos
0000B022 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B028 6B00                       		bmi.s	Obj37_ChkDel
0000B02A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B02E D007                       		add.b	d7,d0
0000B030 0200 0003                  		andi.b	#3,d0
0000B034 6600                       		bne.s	Obj37_ChkDel
0000B036 4EB9 0000 0000             		jsr	ObjHitFloor
0000B03C 4A41                       		tst.w	d1
0000B03E 6A00                       		bpl.s	Obj37_ChkDel
0000B040 D368 000C                  		add.w	d1,$C(a0)
0000B044 3028 0012                  		move.w	$12(a0),d0
0000B048 E440                       		asr.w	#2,d0
0000B04A 9168 0012                  		sub.w	d0,$12(a0)
0000B04E 4468 0012                  		neg.w	$12(a0)
0000B052                            
0000B052                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000B052 5328 001F                  		subq.b	#1,$1F(a0)	; Subtract 1
0000B056 6700 0000                  		beq.w	DeleteObject		; If 0, delete
0000B05A 0C78 FF00 F72C             		cmpi.w	#$FF00,($FFFFF72C).w		; is vertical wrapping enabled?
0000B060 6700 0000                  		beq.w	DisplaySprite			; if so, branch
0000B064 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B068 0640 00E0                  		addi.w	#$E0,d0
0000B06C B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000B070 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000B072 6000 0000                  		bra.w	DisplaySprite
0000B076                            ; ===========================================================================
0000B076                            
0000B076                            Obj37_Collect:				; XREF: Obj37_Index
0000B076 5428 0024                  		addq.b	#2,$24(a0)
0000B07A 117C 0000 0020             		move.b	#0,$20(a0)
0000B080 117C 0001 0018             		move.b	#1,$18(a0)
0000B086 6100 FE74                  		bsr.w	CollectRing
0000B08A                            
0000B08A                            Obj37_Sparkle:				; XREF: Obj37_Index
0000B08A 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000B090 6100 0000                  		bsr.w	AnimateSprite
0000B094 6000 0000                  		bra.w	DisplaySprite
0000B098                            ; ===========================================================================
0000B098                            
0000B098                            Obj37_Delete:				; XREF: Obj37_Index
0000B098 6000 0000                  		bra.w	DeleteObject
0000B09C                            ; ===========================================================================
0000B09C                            ; ---------------------------------------------------------------------------
0000B09C                            ; Object 4B - giant ring for entry to special stage
0000B09C                            ; ---------------------------------------------------------------------------
0000B09C                            
0000B09C                            Obj4B:					; XREF: Obj_Index
0000B09C 7000                       		moveq	#0,d0
0000B09E 1028 0024                  		move.b	$24(a0),d0
0000B0A2 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000B0A6 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000B0AA                            ; ===========================================================================
0000B0AA 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000B0AC 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000B0AE 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000B0B0 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000B0B2                            ; ===========================================================================
0000B0B2                            
0000B0B2                            Obj4B_Main:				; XREF: Obj4B_Index
0000B0B2 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000B0BA 317C 2400 0002             		move.w	#$2400,2(a0)
0000B0C0 0028 0004 0001             		ori.b	#4,1(a0)
0000B0C6 117C 0040 0019             		move.b	#$40,$19(a0)
0000B0CC 4A28 0001                  		tst.b	1(a0)
0000B0D0 6A00                       		bpl.s	Obj4B_Animate
0000B0D2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000B0D8 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000B0DC 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000B0E2 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000B0E4 4EF9 0000 0000             		jmp	(DeleteObject).l
0000B0EA                            
0000B0EA                            ; ===========================================================================
0000B0EA                            
0000B0EA                            Obj4B_Okay:				; XREF: Obj4B_Main
0000B0EA 5428 0024                  		addq.b	#2,$24(a0)
0000B0EE 117C 0002 0018             		move.b	#2,$18(a0)
0000B0F4 117C 0052 0020             		move.b	#$52,$20(a0)
0000B0FA 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000B100                            
0000B100                            Obj4B_Animate:				; XREF: Obj4B_Index
0000B100 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000B106 3028 0008                  		move.w	8(a0),d0
0000B10A 0240 FF80                  		andi.w	#$FF80,d0
0000B10E 3238 F700                  		move.w	($FFFFF700).w,d1
0000B112 0441 0080                  		subi.w	#$80,d1
0000B116 0241 FF80                  		andi.w	#$FF80,d1
0000B11A 9041                       		sub.w	d1,d0
0000B11C 0C40 0280                  		cmpi.w	#$280,d0
0000B120 6300 0000                  		bls.w	DisplaySprite
0000B124 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B128 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000B12C 3440                       		movea.w	d0,a2	; load address into a2
0000B12E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000B132 6000 0000                  		bra.w	DeleteObject	; and delete object
0000B136                            ; ===========================================================================
0000B136                            
0000B136                            Obj4B_Collect:				; XREF: Obj4B_Index
0000B136 5528 0024                  		subq.b	#2,$24(a0)
0000B13A 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B140 11FC 0040 F5D0             		move.b	#$40,(SonimeSST+sonime_facetimer).w
0000B146 117C 0000 0020             		move.b	#0,$20(a0)
0000B14C 6100 0000                  		bsr.w	SingleObjLoad
0000B150 6600 0000                  		bne.w	Obj4B_PlaySnd
0000B154 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000B158 3368 0008 0008             		move.w	8(a0),8(a1)
0000B15E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B164 2348 003C                  		move.l	a0,$3C(a1)
0000B168 3038 D008                  		move.w	($FFFFD008).w,d0
0000B16C B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000B170 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000B172 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000B178                            
0000B178                            Obj4B_PlaySnd:
0000B178 303C 00C3                  		move.w	#$C3,d0
0000B17C 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000B182 6000 FF7C                  		bra.w	Obj4B_Animate
0000B186                            ; ===========================================================================
0000B186                            
0000B186                            Obj4B_Delete:				; XREF: Obj4B_Index
0000B186 6000 0000                  		bra.w	DeleteObject
0000B18A                            ; ===========================================================================
0000B18A                            ; ---------------------------------------------------------------------------
0000B18A                            ; Object 7C - flash effect when	you collect the	giant ring
0000B18A                            ; ---------------------------------------------------------------------------
0000B18A                            
0000B18A                            Obj7C:					; XREF: Obj_Index
0000B18A 7000                       		moveq	#0,d0
0000B18C 1028 0024                  		move.b	$24(a0),d0
0000B190 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000B194 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000B198                            ; ===========================================================================
0000B198 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000B19A 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000B19C 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000B19E                            ; ===========================================================================
0000B19E                            
0000B19E                            Obj7C_Main:				; XREF: Obj7C_Index
0000B19E 5428 0024                  		addq.b	#2,$24(a0)
0000B1A2 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000B1AA 317C 2462 0002             		move.w	#$2462,2(a0)
0000B1B0 0028 0004 0001             		ori.b	#4,1(a0)
0000B1B6 117C 0000 0018             		move.b	#0,$18(a0)
0000B1BC 117C 0020 0019             		move.b	#$20,$19(a0)
0000B1C2 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000B1C8                            
0000B1C8                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000B1C8 6100                       		bsr.s	Obj7C_Collect
0000B1CA 3028 0008                  		move.w	8(a0),d0
0000B1CE 0240 FF80                  		andi.w	#$FF80,d0
0000B1D2 3238 F700                  		move.w	($FFFFF700).w,d1
0000B1D6 0441 0080                  		subi.w	#$80,d1
0000B1DA 0241 FF80                  		andi.w	#$FF80,d1
0000B1DE 9041                       		sub.w	d1,d0
0000B1E0 0C40 0280                  		cmpi.w	#$280,d0
0000B1E4 6300 0000                  		bls.w	DisplaySprite
0000B1E8 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B1EC 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000B1F0 3440                       		movea.w	d0,a2	; load address into a2
0000B1F2 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000B1F6 6000 0000                  		bra.w	DeleteObject	; and delete object
0000B1FA                            
0000B1FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B1FA                            
0000B1FA                            
0000B1FA                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000B1FA 5328 001E                  		subq.b	#1,$1E(a0)
0000B1FE 6A00                       		bpl.s	locret_9F76
0000B200 117C 0001 001E             		move.b	#1,$1E(a0)
0000B206 5228 001A                  		addq.b	#1,$1A(a0)
0000B20A 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000B210 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000B212 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000B218 6600                       		bne.s	locret_9F76	; if not, branch
0000B21A 2268 003C                  		movea.l	$3C(a0),a1
0000B21E 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000B224 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000B22A 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000B230 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000B234 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000B238                            
0000B238                            locret_9F76:
0000B238 4E75                       		rts	
0000B23A                            ; ===========================================================================
0000B23A                            
0000B23A                            Obj7C_End:				; XREF: Obj7C_Collect
0000B23A 5428 0024                  		addq.b	#2,$24(a0)
0000B23E 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000B244 588F                       		addq.l	#4,sp
0000B246 4E75                       		rts	
0000B248                            ; End of function Obj7C_Collect
0000B248                            
0000B248                            ; ===========================================================================
0000B248                            
0000B248                            Obj7C_Delete:				; XREF: Obj7C_Index
0000B248 6000 0000                  		bra.w	DeleteObject
0000B24C                            ; ===========================================================================
0000B24C                            Ani_obj25:
0000B24C                            	include "_anim\obj25.asm"
0000B24C                            ; ---------------------------------------------------------------------------
0000B24C                            ; Animation script - ring
0000B24C                            ; ---------------------------------------------------------------------------
0000B24C 0000                       		dc.w byte_9F8C-Ani_obj25
0000B24E 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000B254                            		even
0000B254                            		even
0000B254                            
0000B254                            ; ---------------------------------------------------------------------------
0000B254                            ; Sprite mappings - rings
0000B254                            ; ---------------------------------------------------------------------------
0000B254                            Map_obj25:
0000B254                            	include "_maps\obj25.asm"
0000B254                            ; ---------------------------------------------------------------------------
0000B254                            ; Sprite mappings - rings
0000B254                            ; ---------------------------------------------------------------------------
0000B254 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000B258 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000B25C 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000B260 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000B264 01                         byte_9FA2:	dc.b 1
0000B265 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000B26A 01                         byte_9FA8:	dc.b 1
0000B26B F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000B270 01                         byte_9FAE:	dc.b 1
0000B271 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000B276 01                         byte_9FB4:	dc.b 1
0000B277 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000B27C 01                         byte_9FBA:	dc.b 1
0000B27D F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000B282 01                         byte_9FC0:	dc.b 1
0000B283 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000B288 01                         byte_9FC6:	dc.b 1
0000B289 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000B28E 01                         byte_9FCC:	dc.b 1
0000B28F F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000B294                            		even
0000B294                            		even
0000B294                            
0000B294                            ; ---------------------------------------------------------------------------
0000B294                            ; Sprite mappings - giant ring
0000B294                            ; ---------------------------------------------------------------------------
0000B294                            Map_obj4B:
0000B294                            	include "_maps\obj4B.asm"
0000B294                            ; ---------------------------------------------------------------------------
0000B294                            ; Sprite mappings - giant ring
0000B294                            ; ---------------------------------------------------------------------------
0000B294 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000B298 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000B29C 0A                         byte_9FDA:	dc.b $A
0000B29D E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000B2A2 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000B2A7 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000B2AC E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000B2B1 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000B2B6 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000B2BB 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000B2C0 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000B2C5 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000B2CA 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000B2CF 08                         byte_A00D:	dc.b 8
0000B2D0 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000B2D5 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000B2DA E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000B2DF F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000B2E4 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000B2E9 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000B2EE 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000B2F3 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000B2F8 04                         byte_A036:	dc.b 4
0000B2F9 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000B2FE E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000B303 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000B308 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000B30D 08                         byte_A04B:	dc.b 8
0000B30E E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000B313 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000B318 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000B31D F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000B322 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000B327 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000B32C 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000B331 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000B336                            		even
0000B336                            		even
0000B336                            
0000B336                            ; ---------------------------------------------------------------------------
0000B336                            ; Sprite mappings - flash effect when you collect the giant ring
0000B336                            ; ---------------------------------------------------------------------------
0000B336                            Map_obj7C:
0000B336                            	include "_maps\obj7C.asm"
0000B336                            ; ---------------------------------------------------------------------------
0000B336                            ; Sprite mappings - flash effect when you collect the giant ring
0000B336                            ; ---------------------------------------------------------------------------
0000B336 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000B33A 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000B33E 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000B342 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000B346 02                         byte_A084:	dc.b 2
0000B347 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000B34C 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000B351 04                         byte_A08F:	dc.b 4
0000B352 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000B357 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000B35C 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000B361 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000B366 04                         byte_A0A4:	dc.b 4
0000B367 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000B36C E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000B371 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000B376 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000B37B 04                         byte_A0B9:	dc.b 4
0000B37C E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000B381 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000B386 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000B38B 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000B390 04                         byte_A0CE:	dc.b 4
0000B391 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000B396 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000B39B 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000B3A0 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000B3A5 04                         byte_A0E3:	dc.b 4
0000B3A6 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000B3AB E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000B3B0 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000B3B5 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000B3BA 02                         byte_A0F8:	dc.b 2
0000B3BB E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000B3C0 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000B3C5 04                         byte_A103:	dc.b 4
0000B3C6 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000B3CB E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000B3D0 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000B3D5 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000B3DA                            		even
0000B3DA                            		even
0000B3DA                            
0000B3DA                            ; ===========================================================================
0000B3DA                            ; ---------------------------------------------------------------------------
0000B3DA                            ; Object 26 - monitors
0000B3DA                            ; ---------------------------------------------------------------------------
0000B3DA                            
0000B3DA                            Obj26:					; XREF: Obj_Index
0000B3DA 7000                       		moveq	#0,d0
0000B3DC 1028 0024                  		move.b	$24(a0),d0
0000B3E0 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000B3E4 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000B3E8                            ; ===========================================================================
0000B3E8 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000B3EA 0000                       		dc.w Obj26_Solid-Obj26_Index
0000B3EC 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000B3EE 0000                       		dc.w Obj26_Animate-Obj26_Index
0000B3F0 0000                       		dc.w Obj26_Display-Obj26_Index
0000B3F2                            ; ===========================================================================
0000B3F2                            
0000B3F2                            Obj26_Main:				; XREF: Obj26_Index
0000B3F2 5428 0024                  		addq.b	#2,$24(a0)
0000B3F6 117C 000E 0016             		move.b	#$E,$16(a0)
0000B3FC 117C 000E 0017             		move.b	#$E,$17(a0)
0000B402 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000B40A 317C 0680 0002             		move.w	#$680,2(a0)
0000B410 117C 0004 0001             		move.b	#4,1(a0)
0000B416 117C 0003 0018             		move.b	#3,$18(a0)
0000B41C 117C 000F 0019             		move.b	#$F,$19(a0)
0000B422 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B426 3440                       		movea.w	d0,a2	; load address into a2
0000B428 0812 0000                  		btst	#0,(a2)	; has monitor been broken?
0000B42C 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000B42E 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000B434 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000B43A 4E75                       		rts	
0000B43C                            ; ===========================================================================
0000B43C                            
0000B43C                            Obj26_NotBroken:			; XREF: Obj26_Main
0000B43C 117C 0046 0020             		move.b	#$46,$20(a0)
0000B442 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000B448                            
0000B448                            Obj26_Solid:				; XREF: Obj26_Index
0000B448 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000B44C 6700                       		beq.s	loc_A1EC	; if not, branch
0000B44E 5500                       		subq.b	#2,d0
0000B450 6600                       		bne.s	Obj26_Fall
0000B452 7200                       		moveq	#0,d1
0000B454 1228 0019                  		move.b	$19(a0),d1
0000B458 0641 000B                  		addi.w	#$B,d1
0000B45C 6100 D260                  		bsr.w	ExitPlatform
0000B460 0829 0003 0022             		btst	#3,$22(a1)
0000B466 6600 0000                  		bne.w	loc_A1BC
0000B46A 4228 0025                  		clr.b	$25(a0)
0000B46E 6000 0000                  		bra.w	Obj26_Animate
0000B472                            ; ===========================================================================
0000B472                            
0000B472                            loc_A1BC:				; XREF: Obj26_Solid
0000B472 363C 0010                  		move.w	#$10,d3
0000B476 3428 0008                  		move.w	8(a0),d2
0000B47A 6100 D7AC                  		bsr.w	MvSonicOnPtfm
0000B47E 6000 0000                  		bra.w	Obj26_Animate
0000B482                            ; ===========================================================================
0000B482                            
0000B482                            Obj26_Fall:				; XREF: Obj26_Solid
0000B482 6100 0000                  		bsr.w	ObjectFall
0000B486 4EB9 0000 0000             		jsr	ObjHitFloor
0000B48C 4A41                       		tst.w	d1
0000B48E 6A00 0000                  		bpl.w	Obj26_Animate
0000B492 D368 000C                  		add.w	d1,$C(a0)
0000B496 4268 0012                  		clr.w	$12(a0)
0000B49A 4228 0025                  		clr.b	$25(a0)
0000B49E 6000 0000                  		bra.w	Obj26_Animate
0000B4A2                            ; ===========================================================================
0000B4A2                            
0000B4A2                            loc_A1EC:				; XREF: Obj26_Solid
0000B4A2 323C 001A                  		move.w	#$1A,d1
0000B4A6 343C 000F                  		move.w	#$F,d2
0000B4AA 6100 0000                  		bsr.w	Obj26_SolidSides
0000B4AE 6700 0000                  		beq.w	loc_A25C
0000B4B2 4A69 0012                  		tst.w	$12(a1)
0000B4B6 6B00                       		bmi.s	loc_A20A
0000B4B8 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000B4BE 6700                       		beq.s	loc_A25C	; if yes, branch
0000B4C0                            
0000B4C0                            loc_A20A:
0000B4C0 4A41                       		tst.w	d1
0000B4C2 6A00                       		bpl.s	loc_A220
0000B4C4 9769 000C                  		sub.w	d3,$C(a1)
0000B4C8 6100 D0E2                  		bsr.w	loc_74AE
0000B4CC 117C 0002 0025             		move.b	#2,$25(a0)
0000B4D2 6000 0000                  		bra.w	Obj26_Animate
0000B4D6                            ; ===========================================================================
0000B4D6                            
0000B4D6                            loc_A220:
0000B4D6 4A40                       		tst.w	d0
0000B4D8 6700 0000                  		beq.w	loc_A246
0000B4DC 6B00                       		bmi.s	loc_A230
0000B4DE 4A69 0010                  		tst.w	$10(a1)
0000B4E2 6B00                       		bmi.s	loc_A246
0000B4E4 6000                       		bra.s	loc_A236
0000B4E6                            ; ===========================================================================
0000B4E6                            
0000B4E6                            loc_A230:
0000B4E6 4A69 0010                  		tst.w	$10(a1)
0000B4EA 6A00                       		bpl.s	loc_A246
0000B4EC                            
0000B4EC                            loc_A236:
0000B4EC 9169 0008                  		sub.w	d0,8(a1)
0000B4F0 337C 0000 0020             		move.w	#0,$20(a1)
0000B4F6 337C 0000 0010             		move.w	#0,$10(a1)
0000B4FC                            
0000B4FC                            loc_A246:
0000B4FC 0829 0001 0022             		btst	#1,$22(a1)
0000B502 6600                       		bne.s	loc_A26A
0000B504 08E9 0005 0022             		bset	#5,$22(a1)
0000B50A 08E8 0005 0022             		bset	#5,$22(a0)
0000B510 6000                       		bra.s	Obj26_Animate
0000B512                            ; ===========================================================================
0000B512                            
0000B512                            loc_A25C:
0000B512 0828 0005 0022             		btst	#5,$22(a0)
0000B518 6700                       		beq.s	Obj26_Animate
0000B51A 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0000B520 6700                       		beq.s	loc_A26A
0000B522 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
0000B528 6700                       		beq.s	loc_A26A
0000B52A 337C 0001 001C             		move.w	#1,$1C(a1)
0000B530                            
0000B530                            loc_A26A:
0000B530 08A8 0005 0022             		bclr	#5,$22(a0)
0000B536 08A9 0005 0022             		bclr	#5,$22(a1)
0000B53C                            
0000B53C                            Obj26_Animate:				; XREF: Obj26_Index
0000B53C 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000B542 6100 0000                  		bsr.w	AnimateSprite
0000B546                            
0000B546                            Obj26_Display:				; XREF: Obj26_Index
0000B546 6000 0000                  		bra.w	MarkObjGone
0000B54A                            ; ===========================================================================
0000B54A                            
0000B54A                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000B54A 5428 0024                  		addq.b	#2,$24(a0)
0000B54E 117C 0000 0020             		move.b	#0,$20(a0)
0000B554 6100 0000                  		bsr.w	SingleObjLoad
0000B558 6600                       		bne.s	Obj26_Explode
0000B55A 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000B55E 3368 0008 0008             		move.w	8(a0),8(a1)
0000B564 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B56A 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000B570                            
0000B570                            Obj26_Explode:
0000B570 6100 0000                  		bsr.w	SingleObjLoad
0000B574 6600                       		bne.s	Obj26_SetBroken
0000B576 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000B57A 5429 0024                  		addq.b	#2,$24(a1)
0000B57E 3368 0008 0008             		move.w	8(a0),8(a1)
0000B584 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B58A                            
0000B58A                            Obj26_SetBroken:
0000B58A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B58E 6700                       		beq.s	@notremembered			; If it's zero, it isn't remembered
0000B590 3440                       		movea.w	d0,a2	; load address into a2
0000B592 08D2 0000                  		bset	#0,(a2)
0000B596                            
0000B596                            	@notremembered:
0000B596 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000B59C 6000 0000                  		bra.w	DisplaySprite
0000B5A0                            ; ===========================================================================
0000B5A0                            ; ---------------------------------------------------------------------------
0000B5A0                            ; Object 2E - contents of monitors
0000B5A0                            ; ---------------------------------------------------------------------------
0000B5A0                            
0000B5A0                            Obj2E:					; XREF: Obj_Index
0000B5A0 7000                       		moveq	#0,d0
0000B5A2 1028 0024                  		move.b	$24(a0),d0
0000B5A6 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000B5AA 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000B5AE 6000 0000                  		bra.w	DisplaySprite
0000B5B2                            ; ===========================================================================
0000B5B2 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000B5B4 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000B5B6 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000B5B8                            ; ===========================================================================
0000B5B8                            
0000B5B8                            Obj2E_Main:				; XREF: Obj2E_Index
0000B5B8 5428 0024                  		addq.b	#2,$24(a0)
0000B5BC 317C 0680 0002             		move.w	#$680,2(a0)
0000B5C2 117C 0024 0001             		move.b	#$24,1(a0)
0000B5C8 117C 0003 0018             		move.b	#3,$18(a0)
0000B5CE 117C 0008 0019             		move.b	#8,$19(a0)
0000B5D4 317C FD00 0012             		move.w	#-$300,$12(a0)
0000B5DA 7000                       		moveq	#0,d0
0000B5DC 1028 001C                  		move.b	$1C(a0),d0
0000B5E0 5400                       		addq.b	#2,d0
0000B5E2 1140 001A                  		move.b	d0,$1A(a0)
0000B5E6 227C 0000 0000             		movea.l	#Map_obj26,a1
0000B5EC D000                       		add.b	d0,d0
0000B5EE D2F1 0000                  		adda.w	(a1,d0.w),a1
0000B5F2 5249                       		addq.w	#1,a1
0000B5F4 2149 0004                  		move.l	a1,4(a0)
0000B5F8                            
0000B5F8                            Obj2E_Move:				; XREF: Obj2E_Index
0000B5F8 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000B5FC 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000B600 6100 0000                  		bsr.w	SpeedToPos
0000B604 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000B60A 4E75                       		rts	
0000B60C                            ; ===========================================================================
0000B60C                            
0000B60C                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000B60C 5428 0024                  		addq.b	#2,$24(a0)
0000B610 317C 001D 001E             		move.w	#29,$1E(a0)
0000B616 1028 001C                  		move.b	$1C(a0),d0
0000B61A 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000B61E 6600                       		bne.s	Obj2E_ChkSonic
0000B620 4E75                       		rts			; Eggman monitor does nothing
0000B622                            ; ===========================================================================
0000B622                            
0000B622                            Obj2E_ChkSonic:
0000B622 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000B626 6600                       		bne.s	Obj2E_ChkShoes
0000B628                            
0000B628                            ExtraLife:
0000B628 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B62E 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000B634 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000B638 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000B63C 303C 0088                  		move.w	#$88,d0
0000B640 4EF9 0000 11F0             		jmp	(PlaySound).l	; play extra life music
0000B646                            ; ===========================================================================
0000B646                            
0000B646                            Obj2E_ChkShoes:
0000B646 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000B64A 6600                       		bne.s	Obj2E_ChkShield
0000B64C 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000B652 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000B658 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000B65E 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000B664 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000B66A 303C 00E2                  		move.w	#$E2,d0
0000B66E 4EF9 0000 11F0             		jmp	(PlaySound).l	; Speed	up the music
0000B674                            ; ===========================================================================
0000B674                            
0000B674                            Obj2E_ChkShield:
0000B674 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000B678 6600                       		bne.s	Obj2E_ChkInvinc
0000B67A 4A38 FE2C                  		tst.b	($FFFFFE2C).w
0000B67E 6600                       		bne.s	@alreadyshield
0000B680 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B686 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000B68C 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000B692 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000B698                            
0000B698                            	@alreadyshield:
0000B698 303C 00AF                  		move.w	#$AF,d0
0000B69C 4EF9 0000 11F0             		jmp	(PlaySound).l	; play shield sound
0000B6A2                            ; ===========================================================================
0000B6A2                            
0000B6A2                            Obj2E_ChkInvinc:
0000B6A2 0C00 0005                  		cmpi.b #5,d0 ; does monitor contain invincibility?
0000B6A6 6600 0000                  		bne.w Obj2E_ChkRings
0000B6AA 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B6B0 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000B6B6 11FC 0001 FE2D             		move.b #1,($FFFFFE2D).w ; Set Invisibility to 1
0000B6BC 31FC 04B0 D032             		move.w #$4B0,($FFFFD032).w ; Set Invisibility timer to 4B0
0000B6C2 11FC 004A D200             		move.b #$4A,($FFFFD200).w ; load stars object ($3801)
0000B6C8 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000B6CE 4A38 F7AA                  		tst.b ($FFFFF7AA).w ; is boss mode on?
0000B6D2 6600                       		bne.s DontPlayMusic ; If so, don't play music
0000B6D4 0C78 000C FE14             		cmpi.w #$C,($FFFFFE14).w ; Check if Sonic has air left
0000B6DA 6300                       		bls.s DontPlayMusic ; If so, don't play music
0000B6DC 303C 0087                  		move.w #$87,d0 ; Load Invisibility music
0000B6E0 4EF9 0000 11F0             		jmp (PlaySound).l
0000B6E6                            
0000B6E6                            DontPlayMusic:
0000B6E6 4E75                       		rts
0000B6E8                            ; ===========================================================================
0000B6E8                            
0000B6E8                            Obj2E_NoMusic:
0000B6E8 4E75                       		rts	
0000B6EA                            ; ===========================================================================
0000B6EA                            
0000B6EA                            Obj2E_ChkRings:
0000B6EA 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000B6EE 6600                       		bne.s	Obj2E_ChkS
0000B6F0 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000B6F6 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000B6FC 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000B702 6500                       		bcs.s	Obj2E_RingSound
0000B704 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000B70A 6700 FF1C                  		beq.w	ExtraLife
0000B70E 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000B714 6500                       		bcs.s	Obj2E_RingSound
0000B716 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000B71C 6700 FF0A                  		beq.w	ExtraLife
0000B720                            
0000B720                            Obj2E_RingSound:
0000B720 303C 00B5                  		move.w	#$B5,d0
0000B724 4EF9 0000 11F0             		jmp	(PlaySound).l	; play ring sound
0000B72A                            ; ===========================================================================
0000B72A                            
0000B72A                            Obj2E_ChkS:
0000B72A 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000B72E 6600                       		bne.s	Obj2E_ChkEnd
0000B730 4E71                       		nop	
0000B732                            
0000B732                            Obj2E_ChkEnd:
0000B732 4E75                       		rts			; 'S' and goggles monitors do nothing
0000B734                            ; ===========================================================================
0000B734                            
0000B734                            Obj2E_Delete:				; XREF: Obj2E_Index
0000B734 5368 001E                  		subq.w	#1,$1E(a0)
0000B738 6B00 0000                  		bmi.w	DeleteObject
0000B73C 4E75                       		rts	
0000B73E                            ; ---------------------------------------------------------------------------
0000B73E                            ; Subroutine to	make the sides of a monitor solid
0000B73E                            ; ---------------------------------------------------------------------------
0000B73E                            
0000B73E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B73E                            
0000B73E                            
0000B73E                            Obj26_SolidSides:			; XREF: loc_A1EC
0000B73E 43F8 D000                  		lea	($FFFFD000).w,a1
0000B742 3029 0008                  		move.w	8(a1),d0
0000B746 9068 0008                  		sub.w	8(a0),d0
0000B74A D041                       		add.w	d1,d0
0000B74C 6B00                       		bmi.s	loc_A4E6
0000B74E 3601                       		move.w	d1,d3
0000B750 D643                       		add.w	d3,d3
0000B752 B043                       		cmp.w	d3,d0
0000B754 6200                       		bhi.s	loc_A4E6
0000B756 1629 0016                  		move.b	$16(a1),d3
0000B75A 4883                       		ext.w	d3
0000B75C D443                       		add.w	d3,d2
0000B75E 3629 000C                  		move.w	$C(a1),d3
0000B762 9668 000C                  		sub.w	$C(a0),d3
0000B766 D642                       		add.w	d2,d3
0000B768 6B00                       		bmi.s	loc_A4E6
0000B76A D442                       		add.w	d2,d2
0000B76C B642                       		cmp.w	d2,d3
0000B76E 6400                       		bcc.s	loc_A4E6
0000B770 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000B774 6B00                       		bmi.s	loc_A4E6
0000B776 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000B77C 6400                       		bcc.s	loc_A4E6
0000B77E 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B782 6600                       		bne.s	loc_A4E6
0000B784 B240                       		cmp.w	d0,d1
0000B786 6400                       		bcc.s	loc_A4DC
0000B788 D241                       		add.w	d1,d1
0000B78A 9041                       		sub.w	d1,d0
0000B78C                            
0000B78C                            loc_A4DC:
0000B78C 0C43 0010                  		cmpi.w	#$10,d3
0000B790 6500                       		bcs.s	loc_A4EA
0000B792                            
0000B792                            loc_A4E2:
0000B792 7201                       		moveq	#1,d1
0000B794 4E75                       		rts	
0000B796                            ; ===========================================================================
0000B796                            
0000B796                            loc_A4E6:
0000B796 7200                       		moveq	#0,d1
0000B798 4E75                       		rts	
0000B79A                            ; ===========================================================================
0000B79A                            
0000B79A                            loc_A4EA:
0000B79A 7200                       		moveq	#0,d1
0000B79C 1228 0019                  		move.b	$19(a0),d1
0000B7A0 5841                       		addq.w	#4,d1
0000B7A2 3401                       		move.w	d1,d2
0000B7A4 D442                       		add.w	d2,d2
0000B7A6 D269 0008                  		add.w	8(a1),d1
0000B7AA 9268 0008                  		sub.w	8(a0),d1
0000B7AE 6BE2                       		bmi.s	loc_A4E2
0000B7B0 B242                       		cmp.w	d2,d1
0000B7B2 64DE                       		bcc.s	loc_A4E2
0000B7B4 72FF                       		moveq	#-1,d1
0000B7B6 4E75                       		rts	
0000B7B8                            ; End of function Obj26_SolidSides
0000B7B8                            
0000B7B8                            ; ===========================================================================
0000B7B8                            Ani_obj26:
0000B7B8                            	include "_anim\obj26.asm"
0000B7B8                            ; ---------------------------------------------------------------------------
0000B7B8                            ; Animation script - monitors
0000B7B8                            ; ---------------------------------------------------------------------------
0000B7B8 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000B7BE 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000B7C4 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000B7CA 0000                       		dc.w byte_A582-Ani_obj26
0000B7CC 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000B7D2 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000B7DE 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000B7EA 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000B7F6 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000B802 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000B80E 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000B81A 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000B826 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000B832 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000B83A                            		even
0000B83A                            		even
0000B83A                            
0000B83A                            ; ---------------------------------------------------------------------------
0000B83A                            ; Sprite mappings - monitors
0000B83A                            ; ---------------------------------------------------------------------------
0000B83A                            Map_obj26:
0000B83A                            	include "_maps\obj26.asm"
0000B83A                            ; --------------------------------------------------------------------------------
0000B83A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B83A                            ; --------------------------------------------------------------------------------
0000B83A                            
0000B83A                            SME_XK1AB:	
0000B83A 0000 0000                  		dc.w SME_XK1AB_18-SME_XK1AB, SME_XK1AB_1E-SME_XK1AB	
0000B83E 0000 0000                  		dc.w SME_XK1AB_29-SME_XK1AB, SME_XK1AB_34-SME_XK1AB	
0000B842 0000 0000                  		dc.w SME_XK1AB_35-SME_XK1AB, SME_XK1AB_40-SME_XK1AB	
0000B846 0000 0000                  		dc.w SME_XK1AB_4B-SME_XK1AB, SME_XK1AB_56-SME_XK1AB	
0000B84A 0000 0000                  		dc.w SME_XK1AB_61-SME_XK1AB, SME_XK1AB_6C-SME_XK1AB	
0000B84E 0000 0000                  		dc.w SME_XK1AB_6D-SME_XK1AB, SME_XK1AB_6E-SME_XK1AB	
0000B852 01                         SME_XK1AB_18:	dc.b 1	
0000B853 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B858 02                         SME_XK1AB_1E:	dc.b 2	
0000B859 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000B85E EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B863 02                         SME_XK1AB_29:	dc.b 2	
0000B864 F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000B869 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B86E 00                         SME_XK1AB_34:	dc.b 0	
0000B86F 02                         SME_XK1AB_35:	dc.b 2	
0000B870 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000B875 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B87A 02                         SME_XK1AB_40:	dc.b 2	
0000B87B F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000B880 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B885 02                         SME_XK1AB_4B:	dc.b 2	
0000B886 F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000B88B EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B890 02                         SME_XK1AB_56:	dc.b 2	
0000B891 F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000B896 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B89B 02                         SME_XK1AB_61:	dc.b 2	
0000B89C F505 0028 F8               		dc.b $F5, 5, 0, $28, $F8	
0000B8A1 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B8A6 00                         SME_XK1AB_6C:	dc.b 0	
0000B8A7 00                         SME_XK1AB_6D:	dc.b 0	
0000B8A8 01                         SME_XK1AB_6E:	dc.b 1	
0000B8A9 FF0D 002C F0               		dc.b $FF, $D, 0, $2C, $F0	
0000B8AE                            		even
0000B8AE                            		even
0000B8AE                            
0000B8AE                            ; ===========================================================================
0000B8AE                            ; ---------------------------------------------------------------------------
0000B8AE                            ; Object 0E - Sonic on the title screen
0000B8AE                            ; ---------------------------------------------------------------------------
0000B8AE                            
0000B8AE                            Obj0E:					; XREF: Obj_Index
0000B8AE 7000                       		moveq	#0,d0
0000B8B0 1028 0024                  		move.b	$24(a0),d0
0000B8B4 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000B8B8 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000B8BC                            ; ===========================================================================
0000B8BC 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000B8BE 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000B8C0 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000B8C2 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000B8C4                            ; ===========================================================================
0000B8C4                            
0000B8C4                            Obj0E_Main:				; XREF: Obj0E_Index
0000B8C4 5428 0024                  		addq.b	#2,$24(a0)
0000B8C8 317C 00F0 0008             		move.w	#$F0,8(a0)
0000B8CE 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000B8D4 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000B8DC 317C 0300 0002             		move.w	#$300,2(a0)
0000B8E2 117C 0001 0018             		move.b	#1,$18(a0)
0000B8E8 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000B8EE 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B8F4 6100 0000                  		bsr.w	AnimateSprite
0000B8F8                            
0000B8F8                            Obj0E_Delay:				; XREF: Obj0E_Index
0000B8F8 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000B8FC 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000B8FE 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000B902 6000 0000                  		bra.w	DisplaySprite
0000B906                            ; ===========================================================================
0000B906                            
0000B906                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000B906 4E75                       		rts	
0000B908                            ; ===========================================================================
0000B908                            
0000B908                            Obj0E_Move:				; XREF: Obj0E_Index
0000B908 5168 000A                  		subq.w	#8,$A(a0)
0000B90C 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000B912 6600                       		bne.s	Obj0E_Display
0000B914 5428 0024                  		addq.b	#2,$24(a0)
0000B918                            
0000B918                            Obj0E_Display:
0000B918 6000 0000                  		bra.w	DisplaySprite
0000B91C                            ; ===========================================================================
0000B91C 4E75                       		rts	
0000B91E                            ; ===========================================================================
0000B91E                            
0000B91E                            Obj0E_Animate:				; XREF: Obj0E_Index
0000B91E 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B924 6100 0000                  		bsr.w	AnimateSprite
0000B928 6000 0000                  		bra.w	DisplaySprite
0000B92C                            ; ===========================================================================
0000B92C 4E75                       		rts	
0000B92E                            ; ===========================================================================
0000B92E                            ; ---------------------------------------------------------------------------
0000B92E                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000B92E                            ; ---------------------------------------------------------------------------
0000B92E                            
0000B92E                            Obj0F:					; XREF: Obj_Index
0000B92E 7000                       		moveq	#0,d0
0000B930 1028 0024                  		move.b	$24(a0),d0
0000B934 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000B938 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000B93C 6000 0000                  		bra.w	DisplaySprite
0000B940                            ; ===========================================================================
0000B940 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000B942 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000B944 0000                       		dc.w locret_A6F8-Obj0F_Index
0000B946                            ; ===========================================================================
0000B946                            
0000B946                            Obj0F_Main:				; XREF: Obj0F_Index
0000B946 5428 0024                  		addq.b	#2,$24(a0)
0000B94A 317C 00D0 0008             		move.w	#$D0,8(a0)
0000B950 317C 0130 000A             		move.w	#$130,$A(a0)
0000B956 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B95E 317C 2200 0002             		move.w	#$2200,2(a0)
0000B964 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B96A 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B96C 5428 0024                  		addq.b	#2,$24(a0)
0000B970 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B976 6600                       		bne.s	locret_A6F8	; if not, branch
0000B978 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B97E 317C 0170 0008             		move.w	#$170,8(a0)
0000B984 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B98A                            
0000B98A                            locret_A6F8:				; XREF: Obj0F_Index
0000B98A 4E75                       		rts	
0000B98C                            ; ===========================================================================
0000B98C                            
0000B98C                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B98C 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B992 6000 0000                  		bra.w	AnimateSprite
0000B996                            ; ===========================================================================
0000B996                            Ani_obj0E:
0000B996                            	include "_anim\obj0E.asm"
0000B996                            ; ---------------------------------------------------------------------------
0000B996                            ; Animation script - Sonic on the title screen
0000B996                            ; ---------------------------------------------------------------------------
0000B996 0000                       		dc.w byte_A706-Ani_obj0E
0000B998 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B9A4                            		even
0000B9A4                            		even
0000B9A4                            
0000B9A4                            Ani_obj0F:
0000B9A4                            	include "_anim\obj0F.asm"
0000B9A4                            ; ---------------------------------------------------------------------------
0000B9A4                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B9A4                            ; ---------------------------------------------------------------------------
0000B9A4 0000                       		dc.w byte_A714-Ani_obj0F
0000B9A6 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B9AA                            		even
0000B9AA                            		even
0000B9AA                            
0000B9AA                            ; ---------------------------------------------------------------------------
0000B9AA                            ; Subroutine to	animate	a sprite using an animation script
0000B9AA                            ; ---------------------------------------------------------------------------
0000B9AA                            
0000B9AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B9AA                            
0000B9AA                            
0000B9AA                            AnimateSprite:
0000B9AA 7000                       		moveq	#0,d0
0000B9AC 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B9B0 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B9B4 6700                       		beq.s	Anim_Run	; if not, branch
0000B9B6 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B9BA 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B9C0 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B9C6                            
0000B9C6                            Anim_Run:
0000B9C6 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B9CA 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B9CC D040                       		add.w	d0,d0
0000B9CE D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B9D2 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B9D6 7200                       		moveq	#0,d1
0000B9D8 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B9DC 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B9E0 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000B9E2                            
0000B9E2                            Anim_Next:
0000B9E2 1200                       		move.b	d0,d1
0000B9E4 0200 001F                  		andi.b	#$1F,d0
0000B9E8 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B9EC 1028 0022                  		move.b	$22(a0),d0
0000B9F0 E719                       		rol.b	#3,d1
0000B9F2 B101                       		eor.b	d0,d1
0000B9F4 0201 0003                  		andi.b	#3,d1
0000B9F8 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B9FE 8328 0001                  		or.b	d1,1(a0)
0000BA02 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000BA06                            
0000BA06                            Anim_Wait:
0000BA06 4E75                       		rts	
0000BA08                            ; ===========================================================================
0000BA08                            
0000BA08                            Anim_End_FF:
0000BA08 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000BA0A 6600                       		bne.s	Anim_End_FE	; if not, branch
0000BA0C 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000BA12 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000BA16 60CA                       		bra.s	Anim_Next
0000BA18                            ; ===========================================================================
0000BA18                            
0000BA18                            Anim_End_FE:
0000BA18 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000BA1A 6600                       		bne.s	Anim_End_FD	; if not, branch
0000BA1C 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000BA20 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000BA24 9200                       		sub.b	d0,d1
0000BA26 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000BA2A 60B6                       		bra.s	Anim_Next
0000BA2C                            ; ===========================================================================
0000BA2C                            
0000BA2C                            Anim_End_FD:
0000BA2C 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000BA2E 6600                       		bne.s	Anim_End_FC	; if not, branch
0000BA30 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000BA36                            
0000BA36                            Anim_End_FC:
0000BA36 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000BA38 6600                       		bne.s	Anim_End_FB	; if not, branch
0000BA3A 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000BA3E                            
0000BA3E                            Anim_End_FB:
0000BA3E 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000BA40 6600                       		bne.s	Anim_End_FA	; if not, branch
0000BA42 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000BA48 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000BA4C                            
0000BA4C                            Anim_End_FA:
0000BA4C 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000BA4E 6600                       		bne.s	Anim_End	; if not, branch
0000BA50 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000BA54                            
0000BA54                            Anim_End:
0000BA54 4E75                       		rts	
0000BA56                            ; End of function AnimateSprite
0000BA56                            
0000BA56                            ; ===========================================================================
0000BA56                            ; ---------------------------------------------------------------------------
0000BA56                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000BA56                            ; ---------------------------------------------------------------------------
0000BA56                            Map_obj0F:
0000BA56                            	include "_maps\obj0F.asm"
0000BA56                            ; ---------------------------------------------------------------------------
0000BA56                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000BA56                            ; ---------------------------------------------------------------------------
0000BA56 0000                       		dc.w byte_A7CD-Map_obj0F
0000BA58 0000                       		dc.w byte_A7CC-Map_obj0F
0000BA5A 0000                       		dc.w byte_A7EB-Map_obj0F
0000BA5C 0000                       		dc.w byte_A882-Map_obj0F
0000BA5E 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000BA5F 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000BA64 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000BA69 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000BA6E 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000BA73 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000BA78 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000BA7D 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000BA7E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA83 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA88 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA8D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA92 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA97 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA9C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BAA1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BAA6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BAAB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BAB0 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BAB5 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BABA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BABF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BAC4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BAC9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BACE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BAD3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BAD8 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BADD D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BAE2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAE7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAEC F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAF1 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAF6 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAFB F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BB00 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BB05 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BB0A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BB0F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BB14 01                         byte_A882:	dc.b 1			; "TM"
0000BB15 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000BB1A                            		even
0000BB1A                            		even
0000BB1A                            
0000BB1A                            ; ---------------------------------------------------------------------------
0000BB1A                            ; Sprite mappings - Sonic on the title screen
0000BB1A                            ; ---------------------------------------------------------------------------
0000BB1A                            Map_obj0E:
0000BB1A                            	include "_maps\obj0E.asm"
0000BB1A                            ; ---------------------------------------------------------------------------
0000BB1A                            ; Sprite mappings - Sonic on the title screen
0000BB1A                            ; ---------------------------------------------------------------------------
0000BB1A 0000                       		dc.w byte_A898-Map_obj0E
0000BB1C 0000                       		dc.w byte_A8CB-Map_obj0E
0000BB1E 0000                       		dc.w byte_A917-Map_obj0E
0000BB20 0000                       		dc.w byte_A96D-Map_obj0E
0000BB22 0000                       		dc.w byte_A9AF-Map_obj0E
0000BB24 0000                       		dc.w byte_A9E7-Map_obj0E
0000BB26 0000                       		dc.w byte_AA47-Map_obj0E
0000BB28 0000                       		dc.w byte_AAB1-Map_obj0E
0000BB2A 0A                         byte_A898:	dc.b $A
0000BB2B 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000BB30 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000BB35 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000BB3A 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000BB3F 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000BB44 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000BB49 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000BB4E 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000BB53 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000BB58 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000BB5D 0F                         byte_A8CB:	dc.b $F
0000BB5E 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000BB63 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000BB68 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000BB6D 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000BB72 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000BB77 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000BB7C 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000BB81 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000BB86 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000BB8B 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000BB90 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000BB95 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000BB9A 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000BB9F 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000BBA4 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000BBA9 11                         byte_A917:	dc.b $11
0000BBAA 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000BBAF 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000BBB4 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000BBB9 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000BBBE 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000BBC3 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000BBC8 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000BBCD 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000BBD2 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000BBD7 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000BBDC 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000BBE1 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000BBE6 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000BBEB 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000BBF0 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000BBF5 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000BBFA 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000BBFF 0D                         byte_A96D:	dc.b $D
0000BC00 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000BC05 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000BC0A 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000BC0F 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000BC14 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000BC19 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000BC1E 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000BC23 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000BC28 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000BC2D 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000BC32 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000BC37 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000BC3C 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000BC41 0B                         byte_A9AF:	dc.b $B
0000BC42 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000BC47 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000BC4C 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000BC51 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000BC56 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000BC5B 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000BC60 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000BC65 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000BC6A 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000BC6F 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000BC74 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000BC79 13                         byte_A9E7:	dc.b $13
0000BC7A 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000BC7F 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000BC84 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000BC89 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000BC8E 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000BC93 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000BC98 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000BC9D 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000BCA2 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000BCA7 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000BCAC 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000BCB1 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000BCB6 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000BCBB 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000BCC0 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000BCC5 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000BCCA 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000BCCF 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000BCD4 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000BCD9 15                         byte_AA47:	dc.b $15
0000BCDA 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000BCDF 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000BCE4 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000BCE9 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000BCEE 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000BCF3 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000BCF8 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000BCFD 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000BD02 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000BD07 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000BD0C 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000BD11 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000BD16 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000BD1B 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000BD20 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000BD25 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000BD2A 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000BD2F 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000BD34 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000BD39 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000BD3E 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000BD43 16                         byte_AAB1:	dc.b $16
0000BD44 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000BD49 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000BD4E 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000BD53 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000BD58 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000BD5D 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000BD62 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000BD67 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000BD6C 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000BD71 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000BD76 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000BD7B 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000BD80 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000BD85 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000BD8A 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000BD8F 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000BD94 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000BD99 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000BD9E 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000BDA3 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000BDA8 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000BDAD 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000BDB2                            		even
0000BDB2                            		even
0000BDB2                            
0000BDB2                            ; ===========================================================================
0000BDB2                            ; ---------------------------------------------------------------------------
0000BDB2                            ; Object 2B - Chopper enemy (GHZ)
0000BDB2                            ; ---------------------------------------------------------------------------
0000BDB2                            
0000BDB2                            Obj2B:					; XREF: Obj_Index
0000BDB2 7000                       		moveq	#0,d0
0000BDB4 1028 0024                  		move.b	$24(a0),d0
0000BDB8 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000BDBC 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000BDC0 6000 0000                  		bra.w	MarkObjGone
0000BDC4                            ; ===========================================================================
0000BDC4 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000BDC6 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000BDC8                            ; ===========================================================================
0000BDC8                            
0000BDC8                            Obj2B_Main:				; XREF: Obj2B_Index
0000BDC8 5428 0024                  		addq.b	#2,$24(a0)
0000BDCC 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000BDD4 317C 047B 0002             		move.w	#$47B,2(a0)
0000BDDA 117C 0004 0001             		move.b	#4,1(a0)
0000BDE0 117C 0004 0018             		move.b	#4,$18(a0)
0000BDE6 117C 0009 0020             		move.b	#9,$20(a0)
0000BDEC 117C 0010 0019             		move.b	#$10,$19(a0)
0000BDF2 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000BDF8 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000BDFE                            
0000BDFE                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000BDFE 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000BE04 6100 FBA4                  		bsr.w	AnimateSprite
0000BE08 6100 0000                  		bsr.w	SpeedToPos
0000BE0C 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000BE12 3028 0030                  		move.w	$30(a0),d0
0000BE16 B068 000C                  		cmp.w	$C(a0),d0
0000BE1A 6400                       		bcc.s	Obj2B_ChgAni
0000BE1C 3140 000C                  		move.w	d0,$C(a0)
0000BE20 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000BE26                            
0000BE26                            Obj2B_ChgAni:
0000BE26 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000BE2C 0440 00C0                  		subi.w	#$C0,d0
0000BE30 B068 000C                  		cmp.w	$C(a0),d0
0000BE34 6400                       		bcc.s	locret_ABB6
0000BE36 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000BE3C 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000BE40 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000BE42 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000BE48                            
0000BE48                            locret_ABB6:
0000BE48 4E75                       		rts	
0000BE4A                            ; ===========================================================================
0000BE4A                            Ani_obj2B:
0000BE4A                            	include "_anim\obj2B.asm"
0000BE4A                            ; ---------------------------------------------------------------------------
0000BE4A                            ; Animation script - Chopper enemy
0000BE4A                            ; ---------------------------------------------------------------------------
0000BE4A 0000                       		dc.w byte_ABBE-Ani_obj2B
0000BE4C 0000                       		dc.w byte_ABC2-Ani_obj2B
0000BE4E 0000                       		dc.w byte_ABC6-Ani_obj2B
0000BE50 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000BE54 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000BE58 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000BE5C 00                         		even
0000BE5C 00                         		even
0000BE5C                            
0000BE5C                            ; ---------------------------------------------------------------------------
0000BE5C                            ; Sprite mappings - Chopper enemy (GHZ)
0000BE5C                            ; ---------------------------------------------------------------------------
0000BE5C                            Map_obj2B:
0000BE5C                            	include "_maps\obj2B.asm"
0000BE5C                            ; ---------------------------------------------------------------------------
0000BE5C                            ; Sprite mappings - Chopper enemy (GHZ)
0000BE5C                            ; ---------------------------------------------------------------------------
0000BE5C 0000                       		dc.w byte_ABCE-Map_obj2B
0000BE5E 0000                       		dc.w byte_ABD4-Map_obj2B
0000BE60 01                         byte_ABCE:	dc.b 1
0000BE61 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000BE66 01                         byte_ABD4:	dc.b 1
0000BE67 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000BE6C                            		even
0000BE6C                            		even
0000BE6C                            
0000BE6C                            ; ===========================================================================
0000BE6C                            ; ---------------------------------------------------------------------------
0000BE6C                            ; Object 2C - Jaws enemy (LZ)
0000BE6C                            ; ---------------------------------------------------------------------------
0000BE6C                            
0000BE6C                            Obj2C:					; XREF: Obj_Index
0000BE6C 7000                       		moveq	#0,d0
0000BE6E 1028 0024                  		move.b	$24(a0),d0
0000BE72 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000BE76 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000BE7A                            ; ===========================================================================
0000BE7A 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000BE7C 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000BE7E                            ; ===========================================================================
0000BE7E                            
0000BE7E                            Obj2C_Main:				; XREF: Obj2C_Index
0000BE7E 5428 0024                  		addq.b	#2,$24(a0)
0000BE82 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000BE8A 317C 2486 0002             		move.w	#$2486,2(a0)
0000BE90 0028 0004 0001             		ori.b	#4,1(a0)
0000BE96 117C 000A 0020             		move.b	#$A,$20(a0)
0000BE9C 117C 0004 0018             		move.b	#4,$18(a0)
0000BEA2 117C 0010 0019             		move.b	#$10,$19(a0)
0000BEA8 7000                       		moveq	#0,d0
0000BEAA 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000BEAE ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000BEB0 5340                       		subq.w	#1,d0
0000BEB2 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000BEB6 3140 0032                  		move.w	d0,$32(a0)
0000BEBA 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000BEC0 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000BEC6 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000BEC8 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000BECC                            
0000BECC                            Obj2C_Turn:				; XREF: Obj2C_Index
0000BECC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000BED0 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000BED2 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000BED8 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000BEDC 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000BEE2 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000BEE8                            
0000BEE8                            Obj2C_Animate:
0000BEE8 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000BEEE 6100 FABA                  		bsr.w	AnimateSprite
0000BEF2 6100 0000                  		bsr.w	SpeedToPos
0000BEF6 6000 0000                  		bra.w	MarkObjGone
0000BEFA                            ; ===========================================================================
0000BEFA                            Ani_obj2C:
0000BEFA                            	include "_anim\obj2C.asm"
0000BEFA                            ; ---------------------------------------------------------------------------
0000BEFA                            ; Animation script - Jaws enemy
0000BEFA                            ; ---------------------------------------------------------------------------
0000BEFA 0000                       		dc.w byte_AC6A-Ani_obj2C
0000BEFC 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000BF02                            		even
0000BF02                            		even
0000BF02                            
0000BF02                            ; ---------------------------------------------------------------------------
0000BF02                            ; Sprite mappings - Jaws enemy (LZ)
0000BF02                            ; ---------------------------------------------------------------------------
0000BF02                            Map_obj2C:
0000BF02                            	include "_maps\obj2C.asm"
0000BF02                            mapjaws:
0000BF02 0000                       mapjaws_0: 	dc.w mapjaws_8-mapjaws
0000BF04 0000                       mapjaws_2: 	dc.w mapjaws_13-mapjaws
0000BF06 0000                       mapjaws_4: 	dc.w mapjaws_1E-mapjaws
0000BF08 0000                       mapjaws_6: 	dc.w mapjaws_29-mapjaws
0000BF0A 02                         mapjaws_8: 	dc.b $2
0000BF0B F40E 0000 F0               	dc.b $F4, $E, $0, $0, $F0
0000BF10 F505 4018 10               	dc.b $F5, $5, $40, $18, $10
0000BF15 02                         mapjaws_13: 	dc.b $2
0000BF16 F40E 000C F0               	dc.b $F4, $E, $0, $C, $F0
0000BF1B F505 401C 10               	dc.b $F5, $5, $40, $1C, $10
0000BF20 02                         mapjaws_1E: 	dc.b $2
0000BF21 F40E 0000 F0               	dc.b $F4, $E, $0, $0, $F0
0000BF26 F505 5018 10               	dc.b $F5, $5, $50, $18, $10
0000BF2B 02                         mapjaws_29: 	dc.b $2
0000BF2C F40E 000C F0               	dc.b $F4, $E, $0, $C, $F0
0000BF31 F505 501C 10               	dc.b $F5, $5, $50, $1C, $10
0000BF36                            	even
0000BF36                            	even
0000BF36                            
0000BF36                            ; ===========================================================================
0000BF36                            ; ---------------------------------------------------------------------------
0000BF36                            ; Object 2D - Burrobot enemy (LZ)
0000BF36                            ; ---------------------------------------------------------------------------
0000BF36                            
0000BF36                            Obj2D:					; XREF: Obj_Index
0000BF36 7000                       		moveq	#0,d0
0000BF38 1028 0024                  		move.b	$24(a0),d0
0000BF3C 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000BF40 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000BF44                            ; ===========================================================================
0000BF44 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000BF46 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000BF48                            ; ===========================================================================
0000BF48                            
0000BF48                            Obj2D_Main:				; XREF: Obj2D_Index
0000BF48 5428 0024                  		addq.b	#2,$24(a0)
0000BF4C 117C 0013 0016             		move.b	#$13,$16(a0)
0000BF52 117C 0008 0017             		move.b	#8,$17(a0)
0000BF58 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000BF60 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000BF66 0028 0004 0001             		ori.b	#4,1(a0)
0000BF6C 117C 0004 0018             		move.b	#4,$18(a0)
0000BF72 117C 0005 0020             		move.b	#5,$20(a0)
0000BF78 117C 000C 0019             		move.b	#$C,$19(a0)
0000BF7E 5028 0025                  		addq.b	#8,$25(a0)	; run "Obj2D_ChkSonic" routine
0000BF82 117C 0004 001C             		move.b	#4,$1C(a0)
0000BF88                            
0000BF88                            Obj2D_Action:				; XREF: Obj2D_Index
0000BF88 7000                       		moveq	#0,d0
0000BF8A 1028 0025                  		move.b	$25(a0),d0
0000BF8E 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000BF92 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000BF96 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000BF9C 6100 FA0C                  		bsr.w	AnimateSprite
0000BFA0 6000 0000                  		bra.w	MarkObjGone
0000BFA4                            ; ===========================================================================
0000BFA4 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000BFA6 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000BFA8 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000BFAA 0000                       		dc.w Obj2D_Jump2-Obj2D_Index2
0000BFAC 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000BFAE                            ; ===========================================================================
0000BFAE                            
0000BFAE                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000BFAE 5368 0030                  		subq.w	#1,$30(a0)
0000BFB2 6A00                       		bpl.s	locret_AD42
0000BFB4 5428 0025                  		addq.b	#2,$25(a0)
0000BFB8 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000BFBE 317C 0080 0010             		move.w	#$80,$10(a0)
0000BFC4 117C 0001 001C             		move.b	#1,$1C(a0)
0000BFCA 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000BFD0 6700                       		beq.s	locret_AD42
0000BFD2 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000BFD6                            
0000BFD6                            locret_AD42:
0000BFD6 4E75                       		rts	
0000BFD8                            ; ===========================================================================
0000BFD8                            
0000BFD8                            Obj2D_Move:				; XREF: Obj2D_Index2
0000BFD8 5368 0030                  		subq.w	#1,$30(a0)
0000BFDC 6B00                       		bmi.s	loc_AD84
0000BFDE 6100 0000                  		bsr.w	SpeedToPos
0000BFE2 0868 0000 0032             		bchg	#0,$32(a0)
0000BFE8 6600                       		bne.s	loc_AD78
0000BFEA 3628 0008                  		move.w	8(a0),d3
0000BFEE 0643 000C                  		addi.w	#$C,d3
0000BFF2 0828 0000 0022             		btst	#0,$22(a0)
0000BFF8 6600                       		bne.s	loc_AD6A
0000BFFA 0443 0018                  		subi.w	#$18,d3
0000BFFE                            
0000BFFE                            loc_AD6A:
0000BFFE 4EB9 0000 0000             		jsr	ObjHitFloor2
0000C004 0C41 000C                  		cmpi.w	#$C,d1
0000C008 6C00                       		bge.s	loc_AD84
0000C00A 4E75                       		rts	
0000C00C                            ; ===========================================================================
0000C00C                            
0000C00C                            loc_AD78:				; XREF: Obj2D_Move
0000C00C 4EB9 0000 0000             		jsr	ObjHitFloor
0000C012 D368 000C                  		add.w	d1,$C(a0)
0000C016 4E75                       		rts	
0000C018                            ; ===========================================================================
0000C018                            
0000C018                            loc_AD84:				; XREF: Obj2D_Move
0000C018 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000C01E 6700                       		beq.s	loc_ADA4
0000C020 5528 0025                  		subq.b	#2,$25(a0)
0000C024 317C 003B 0030             		move.w	#$3B,$30(a0)
0000C02A 317C 0000 0010             		move.w	#0,$10(a0)
0000C030 117C 0000 001C             		move.b	#0,$1C(a0)
0000C036 4E75                       		rts	
0000C038                            ; ===========================================================================
0000C038                            
0000C038                            loc_ADA4:
0000C038 5428 0025                  		addq.b	#2,$25(a0)
0000C03C 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C042 117C 0002 001C             		move.b	#2,$1C(a0)
0000C048 4E75                       		rts	
0000C04A                            ; ===========================================================================
0000C04A                            
0000C04A                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000C04A 6100 0000                  		bsr.w	SpeedToPos
0000C04E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C054 6B00                       		bmi.s	locret_ADF0
0000C056 117C 0003 001C             		move.b	#3,$1C(a0)
0000C05C 4EB9 0000 0000             		jsr	ObjHitFloor
0000C062 4A41                       		tst.w	d1
0000C064 6A00                       		bpl.s	locret_ADF0
0000C066 D368 000C                  		add.w	d1,$C(a0)
0000C06A 317C 0000 0012             		move.w	#0,$12(a0)
0000C070 117C 0001 001C             		move.b	#1,$1C(a0)
0000C076 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000C07C 5528 0025                  		subq.b	#2,$25(a0)
0000C080 6000 0000                  		bra.w	Obj2D_ChkSonic2
0000C084                            ; ===========================================================================
0000C084                            
0000C084                            Obj2D_Jump2:				; XREF: Obj2D_Index2
0000C084 6100 0000                  		bsr.w	SpeedToPos
0000C088 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C08E 5368 0030                  		subq.w	#1,$30(a0)
0000C092 6A00                       		bpl.s	locret_ADF0
0000C094 117C 0002 001C             		move.b	#2,$1C(a0)
0000C09A 5528 0025                  		subq.b	#2,$25(a0)
0000C09E                            
0000C09E                            locret_ADF0:
0000C09E 4E75                       		rts	
0000C0A0                            ; ===========================================================================
0000C0A0                            
0000C0A0                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000C0A0 343C 0060                  		move.w	#$60,d2
0000C0A4 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000C0A8 6400                       		bcc.s	locret_AE20
0000C0AA 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000C0AE 9068 000C                  		sub.w	$C(a0),d0
0000C0B2 6400                       		bcc.s	locret_AE20
0000C0B4 0C40 FF80                  		cmpi.w	#-$80,d0
0000C0B8 6500                       		bcs.s	locret_AE20
0000C0BA 4A78 FE08                  		tst.w	($FFFFFE08).w
0000C0BE 6600                       		bne.s	locret_AE20
0000C0C0 5528 0025                  		subq.b	#2,$25(a0)
0000C0C4 317C 0004 0030             		move.w	#4,$30(a0)
0000C0CA 3141 0010                  		move.w	d1,$10(a0)
0000C0CE 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C0D4                            
0000C0D4                            locret_AE20:
0000C0D4 4E75                       		rts	
0000C0D6                            
0000C0D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C0D6                            
0000C0D6                            
0000C0D6                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000C0D6 323C 0080                  		move.w	#$80,d1
0000C0DA 08E8 0000 0022             		bset	#0,$22(a0)
0000C0E0 3038 D008                  		move.w	($FFFFD008).w,d0
0000C0E4 9068 0008                  		sub.w	8(a0),d0
0000C0E8 6400                       		bcc.s	loc_AE40
0000C0EA 4440                       		neg.w	d0
0000C0EC 4441                       		neg.w	d1
0000C0EE 08A8 0000 0022             		bclr	#0,$22(a0)
0000C0F4                            
0000C0F4                            loc_AE40:
0000C0F4 B042                       		cmp.w	d2,d0
0000C0F6 4E75                       		rts	
0000C0F8                            ; End of function Obj2D_ChkSonic2
0000C0F8                            
0000C0F8                            ; ===========================================================================
0000C0F8                            Ani_obj2D:
0000C0F8                            	include "_anim\obj2D.asm"
0000C0F8                            ; ---------------------------------------------------------------------------
0000C0F8                            ; Animation script - Burrobot enemy
0000C0F8                            ; ---------------------------------------------------------------------------
0000C0F8 0000                       		dc.w byte_AE4C-Ani_obj2D
0000C0FA 0000                       		dc.w byte_AE50-Ani_obj2D
0000C0FC 0000                       		dc.w byte_AE54-Ani_obj2D
0000C0FE 0000                       		dc.w byte_AE58-Ani_obj2D
0000C100 0000                       		dc.w byte_AE542-Ani_obj2D
0000C102 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000C106 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000C10A 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000C10E 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000C111 0307 08FF                  byte_AE542:	dc.b 3,	7, 8, $FF
0000C116 00                         		even
0000C116 00                         		even
0000C116                            
0000C116                            ; ---------------------------------------------------------------------------
0000C116                            ; Sprite mappings - Burrobot enemy (LZ)
0000C116                            ; ---------------------------------------------------------------------------
0000C116                            Map_obj2D:
0000C116                            	include "_maps\obj2D.asm"
0000C116                            burromap:
0000C116 0000                       burromap_0: 	dc.w burromap_12-burromap
0000C118 0000                       burromap_2: 	dc.w burromap_1D-burromap
0000C11A 0000                       burromap_4: 	dc.w burromap_28-burromap
0000C11C 0000                       burromap_6: 	dc.w burromap_33-burromap
0000C11E 0000                       burromap_8: 	dc.w burromap_3E-burromap
0000C120 0000                       burromap_A: 	dc.w burromap_49-burromap
0000C122 0000                       burromap_C: 	dc.w burromap_54-burromap
0000C124 0000                       burromap_E: 	dc.w burromap_5F-burromap
0000C126 0000                       burromap_10: 	dc.w burromap_65-burromap
0000C128 02                         burromap_12: 	dc.b $2
0000C129 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0000C12E 0409 0009 F4               	dc.b $4, $9, $0, $9, $F4
0000C133 02                         burromap_1D: 	dc.b $2
0000C134 EC0A 000F F0               	dc.b $EC, $A, $0, $F, $F0
0000C139 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
0000C13E 02                         burromap_28: 	dc.b $2
0000C13F E80A 001E F4               	dc.b $E8, $A, $0, $1E, $F4
0000C144 000A 0027 F4               	dc.b $0, $A, $0, $27, $F4
0000C149 02                         burromap_33: 	dc.b $2
0000C14A E80A 0030 F4               	dc.b $E8, $A, $0, $30, $F4
0000C14F 000A 0039 F4               	dc.b $0, $A, $0, $39, $F4
0000C154 02                         burromap_3E: 	dc.b $2
0000C155 E80A 000F F0               	dc.b $E8, $A, $0, $F, $F0
0000C15A 000A 0042 F4               	dc.b $0, $A, $0, $42, $F4
0000C15F 02                         burromap_49: 	dc.b $2
0000C160 F406 004B E8               	dc.b $F4, $6, $0, $4B, $E8
0000C165 F40A 0051 F8               	dc.b $F4, $A, $0, $51, $F8
0000C16A 02                         burromap_54: 	dc.b $2
0000C16B EC0A 000F F0               	dc.b $EC, $A, $0, $F, $F0
0000C170 0409 0009 F4               	dc.b $4, $9, $0, $9, $F4
0000C175 01                         burromap_5F: 	dc.b $1
0000C176 E80A 0030 F4               	dc.b $E8, $A, $0, $30, $F4
0000C17B 01                         burromap_65: 	dc.b $1
0000C17C E80A 001E F4               	dc.b $E8, $A, $0, $1E, $F4
0000C182 00                         	even
0000C182 00                         	even
0000C182                            
0000C182                            ; ===========================================================================
0000C182                            ; ---------------------------------------------------------------------------
0000C182                            ; Object 2F - large moving platforms (MZ)
0000C182                            ; ---------------------------------------------------------------------------
0000C182                            
0000C182                            Obj2F:					; XREF: Obj_Index
0000C182 7000                       		moveq	#0,d0
0000C184 1028 0024                  		move.b	$24(a0),d0
0000C188 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000C18C 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000C190                            ; ===========================================================================
0000C190 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000C192 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000C194                            
0000C194 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000C196 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000C198 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000C19A 0140                       		dc.b 1,	$40
0000C19C 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000C19E 0220                       		dc.b 2,	$20
0000C1A0                            ; ===========================================================================
0000C1A0                            
0000C1A0                            Obj2F_Main:				; XREF: Obj2F_Index
0000C1A0 5428 0024                  		addq.b	#2,$24(a0)
0000C1A4 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000C1AC 317C C000 0002             		move.w	#$C000,2(a0)
0000C1B2 117C 0004 0001             		move.b	#4,1(a0)
0000C1B8 117C 0005 0018             		move.b	#5,$18(a0)
0000C1BE 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000C1C4 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C1CA 7000                       		moveq	#0,d0
0000C1CC 1028 0028                  		move.b	$28(a0),d0
0000C1D0 E448                       		lsr.w	#2,d0
0000C1D2 0240 001C                  		andi.w	#$1C,d0
0000C1D6 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000C1DA 3019                       		move.w	(a1)+,d0
0000C1DC 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000C1E0 214A 0030                  		move.l	a2,$30(a0)
0000C1E4 1159 001A                  		move.b	(a1)+,$1A(a0)
0000C1E8 1151 0019                  		move.b	(a1),$19(a0)
0000C1EC 0228 000F 0028             		andi.b	#$F,$28(a0)
0000C1F2 117C 0040 0016             		move.b	#$40,$16(a0)
0000C1F8 08E8 0004 0001             		bset	#4,1(a0)
0000C1FE                            
0000C1FE                            Obj2F_Action:				; XREF: Obj2F_Index
0000C1FE 6100 0000                  		bsr.w	Obj2F_Types
0000C202 4A28 0025                  		tst.b	$25(a0)
0000C206 6700                       		beq.s	Obj2F_Solid
0000C208 7200                       		moveq	#0,d1
0000C20A 1228 0019                  		move.b	$19(a0),d1
0000C20E 0641 000B                  		addi.w	#$B,d1
0000C212 6100 C4AA                  		bsr.w	ExitPlatform
0000C216 0829 0003 0022             		btst	#3,$22(a1)
0000C21C 6600 0000                  		bne.w	Obj2F_Slope
0000C220 4228 0025                  		clr.b	$25(a0)
0000C224 6000                       		bra.s	Obj2F_Display
0000C226                            ; ===========================================================================
0000C226                            
0000C226                            Obj2F_Slope:				; XREF: Obj2F_Action
0000C226 7200                       		moveq	#0,d1
0000C228 1228 0019                  		move.b	$19(a0),d1
0000C22C 0641 000B                  		addi.w	#$B,d1
0000C230 2468 0030                  		movea.l	$30(a0),a2
0000C234 3428 0008                  		move.w	8(a0),d2
0000C238 6100 D45A                  		bsr.w	SlopeObject2
0000C23C 6000                       		bra.s	Obj2F_Display
0000C23E                            ; ===========================================================================
0000C23E                            
0000C23E                            Obj2F_Solid:				; XREF: Obj2F_Action
0000C23E 7200                       		moveq	#0,d1
0000C240 1228 0019                  		move.b	$19(a0),d1
0000C244 0641 000B                  		addi.w	#$B,d1
0000C248 343C 0020                  		move.w	#$20,d2
0000C24C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000C252 6600                       		bne.s	loc_AF8E
0000C254 343C 0030                  		move.w	#$30,d2
0000C258                            
0000C258                            loc_AF8E:
0000C258 2468 0030                  		movea.l	$30(a0),a2
0000C25C 6100 0000                  		bsr.w	SolidObject2F
0000C260                            
0000C260                            Obj2F_Display:				; XREF: Obj2F_Action
0000C260 6100 0000                  		bsr.w	DisplaySprite
0000C264 6000 0000                  		bra.w	Obj2F_ChkDel
0000C268                            
0000C268                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C268                            
0000C268                            
0000C268                            Obj2F_Types:				; XREF: Obj2F_Action
0000C268 7000                       		moveq	#0,d0
0000C26A 1028 0028                  		move.b	$28(a0),d0
0000C26E 0240 0007                  		andi.w	#7,d0
0000C272 D040                       		add.w	d0,d0
0000C274 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000C278 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000C27C                            ; End of function Obj2F_Types
0000C27C                            
0000C27C                            ; ===========================================================================
0000C27C 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000C27E 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000C280 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000C282 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000C284 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000C286 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000C288                            ; ===========================================================================
0000C288                            
0000C288                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000C288 4E75                       		rts			; type 00 platform doesn't move
0000C28A                            ; ===========================================================================
0000C28A                            
0000C28A                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000C28A 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000C28E 323C 0020                  		move.w	#$20,d1
0000C292 6000                       		bra.s	Obj2F_Move
0000C294                            ; ===========================================================================
0000C294                            
0000C294                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000C294 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000C298 323C 0030                  		move.w	#$30,d1
0000C29C 6000                       		bra.s	Obj2F_Move
0000C29E                            ; ===========================================================================
0000C29E                            
0000C29E                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000C29E 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000C2A2 323C 0040                  		move.w	#$40,d1
0000C2A6 6000                       		bra.s	Obj2F_Move
0000C2A8                            ; ===========================================================================
0000C2A8                            
0000C2A8                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000C2A8 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000C2AC 323C 0060                  		move.w	#$60,d1
0000C2B0                            
0000C2B0                            Obj2F_Move:
0000C2B0 0828 0003 0028             		btst	#3,$28(a0)
0000C2B6 6700                       		beq.s	loc_AFF2
0000C2B8 4440                       		neg.w	d0
0000C2BA D041                       		add.w	d1,d0
0000C2BC                            
0000C2BC                            loc_AFF2:
0000C2BC 3228 002C                  		move.w	$2C(a0),d1
0000C2C0 9240                       		sub.w	d0,d1
0000C2C2 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000C2C6 4E75                       		rts	
0000C2C8                            ; ===========================================================================
0000C2C8                            
0000C2C8                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000C2C8 1028 0034                  		move.b	$34(a0),d0
0000C2CC 4A28 0025                  		tst.b	$25(a0)
0000C2D0 6600                       		bne.s	loc_B010
0000C2D2 5500                       		subq.b	#2,d0
0000C2D4 6400                       		bcc.s	loc_B01C
0000C2D6 7000                       		moveq	#0,d0
0000C2D8 6000                       		bra.s	loc_B01C
0000C2DA                            ; ===========================================================================
0000C2DA                            
0000C2DA                            loc_B010:
0000C2DA 5800                       		addq.b	#4,d0
0000C2DC 0C00 0040                  		cmpi.b	#$40,d0
0000C2E0 6500                       		bcs.s	loc_B01C
0000C2E2 103C 0040                  		move.b	#$40,d0
0000C2E6                            
0000C2E6                            loc_B01C:
0000C2E6 1140 0034                  		move.b	d0,$34(a0)
0000C2EA 4EB9 0000 29CC             		jsr	(CalcSine).l
0000C2F0 E848                       		lsr.w	#4,d0
0000C2F2 3200                       		move.w	d0,d1
0000C2F4 D068 002C                  		add.w	$2C(a0),d0
0000C2F8 3140 000C                  		move.w	d0,$C(a0)
0000C2FC 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000C302 6600                       		bne.s	loc_B07A
0000C304 4A28 0035                  		tst.b	$35(a0)
0000C308 6600                       		bne.s	loc_B07A
0000C30A 117C 0001 0035             		move.b	#1,$35(a0)
0000C310 6100 0000                  		bsr.w	SingleObjLoad2
0000C314 6600                       		bne.s	loc_B07A
0000C316 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000C31A 3368 0008 0008             		move.w	8(a0),8(a1)
0000C320 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000C326 5069 002C                  		addq.w	#8,$2C(a1)
0000C32A 5769 002C                  		subq.w	#3,$2C(a1)
0000C32E 0469 0040 0008             		subi.w	#$40,8(a1)
0000C334 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000C33A 2348 0038                  		move.l	a0,$38(a1)
0000C33E 2448                       		movea.l	a0,a2
0000C340 6100                       		bsr.s	sub_B09C
0000C342                            
0000C342                            loc_B07A:
0000C342 7400                       		moveq	#0,d2
0000C344 45E8 0036                  		lea	$36(a0),a2
0000C348 141A                       		move.b	(a2)+,d2
0000C34A 5302                       		subq.b	#1,d2
0000C34C 6500                       		bcs.s	locret_B09A
0000C34E                            
0000C34E                            loc_B086:
0000C34E 7000                       		moveq	#0,d0
0000C350 101A                       		move.b	(a2)+,d0
0000C352 ED48                       		lsl.w	#6,d0
0000C354 0640 D000                  		addi.w	#-$3000,d0
0000C358 3240                       		movea.w	d0,a1
0000C35A 3341 003C                  		move.w	d1,$3C(a1)
0000C35E 51CA FFEE                  		dbf	d2,loc_B086
0000C362                            
0000C362                            locret_B09A:
0000C362 4E75                       		rts	
0000C364                            
0000C364                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C364                            
0000C364                            
0000C364                            sub_B09C:
0000C364 45EA 0036                  		lea	$36(a2),a2
0000C368 7000                       		moveq	#0,d0
0000C36A 1012                       		move.b	(a2),d0
0000C36C 5212                       		addq.b	#1,(a2)
0000C36E 45F2 0001                  		lea	1(a2,d0.w),a2
0000C372 3009                       		move.w	a1,d0
0000C374 0440 D000                  		subi.w	#-$3000,d0
0000C378 EC48                       		lsr.w	#6,d0
0000C37A 0240 007F                  		andi.w	#$7F,d0
0000C37E 1480                       		move.b	d0,(a2)
0000C380 4E75                       		rts	
0000C382                            ; End of function sub_B09C
0000C382                            
0000C382                            ; ===========================================================================
0000C382                            
0000C382                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000C382 4A28 0035                  		tst.b	$35(a0)
0000C386 6700                       		beq.s	loc_B0C6
0000C388 4A28 0001                  		tst.b	1(a0)
0000C38C 6A00                       		bpl.s	Obj2F_DelFlames
0000C38E                            
0000C38E                            loc_B0C6:
0000C38E 3028 002A                  		move.w	$2A(a0),d0
0000C392 0240 FF80                  		andi.w	#$FF80,d0
0000C396 3238 F700                  		move.w	($FFFFF700).w,d1
0000C39A 0441 0080                  		subi.w	#$80,d1
0000C39E 0241 FF80                  		andi.w	#$FF80,d1
0000C3A2 9041                       		sub.w	d1,d0
0000C3A4 0C40 0280                  		cmpi.w	#$280,d0
0000C3A8 6300                       		bls.s	Obj2F_NoDel
0000C3AA 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000C3AE 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000C3B2 3440                       		movea.w	d0,a2	; load address into a2
0000C3B4 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000C3B8 6000 0000                  		bra.w	DeleteObject	; and delete object
0000C3BC                            
0000C3BC                            Obj2F_NoDel:
0000C3BC 4E75                       		rts	
0000C3BE                            ; ===========================================================================
0000C3BE                            
0000C3BE                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000C3BE 7400                       		moveq	#0,d2
0000C3C0                            
0000C3C0                            loc_B0E8:
0000C3C0 45E8 0036                  		lea	$36(a0),a2
0000C3C4 1412                       		move.b	(a2),d2
0000C3C6 421A                       		clr.b	(a2)+
0000C3C8 5302                       		subq.b	#1,d2
0000C3CA 6500                       		bcs.s	locret_B116
0000C3CC                            
0000C3CC                            loc_B0F4:
0000C3CC 7000                       		moveq	#0,d0
0000C3CE 1012                       		move.b	(a2),d0
0000C3D0 421A                       		clr.b	(a2)+
0000C3D2 ED48                       		lsl.w	#6,d0
0000C3D4 0640 D000                  		addi.w	#-$3000,d0
0000C3D8 3240                       		movea.w	d0,a1
0000C3DA 6100 0000                  		bsr.w	DeleteObject2
0000C3DE 51CA FFEC                  		dbf	d2,loc_B0F4
0000C3E2 117C 0000 0035             		move.b	#0,$35(a0)
0000C3E8 117C 0000 0034             		move.b	#0,$34(a0)
0000C3EE                            
0000C3EE                            locret_B116:
0000C3EE 4E75                       		rts	
0000C3F0                            ; ===========================================================================
0000C3F0                            ; ---------------------------------------------------------------------------
0000C3F0                            ; Collision data for large moving platforms (MZ)
0000C3F0                            ; ---------------------------------------------------------------------------
0000C3F0                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000C43C                            		even
0000C43C                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000C468                            		even
0000C468                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000C4B4                            		even
0000C4B4                            ; ===========================================================================
0000C4B4                            ; ---------------------------------------------------------------------------
0000C4B4                            ; Object 35 - fireball that sits on the	floor (MZ)
0000C4B4                            ; (appears when	you walk on sinking platforms)
0000C4B4                            ; ---------------------------------------------------------------------------
0000C4B4                            
0000C4B4                            Obj35:					; XREF: Obj_Index
0000C4B4 7000                       		moveq	#0,d0
0000C4B6 1028 0024                  		move.b	$24(a0),d0
0000C4BA 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000C4BE 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000C4C2                            ; ===========================================================================
0000C4C2 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000C4C4 0000                       		dc.w loc_B238-Obj35_Index
0000C4C6 0000                       		dc.w Obj35_Move-Obj35_Index
0000C4C8                            ; ===========================================================================
0000C4C8                            
0000C4C8                            Obj35_Main:				; XREF: Obj35_Index
0000C4C8 5428 0024                  		addq.b	#2,$24(a0)
0000C4CC 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000C4D4 317C 0345 0002             		move.w	#$345,2(a0)
0000C4DA 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C4E0 117C 0004 0001             		move.b	#4,1(a0)
0000C4E6 117C 0001 0018             		move.b	#1,$18(a0)
0000C4EC 117C 008B 0020             		move.b	#$8B,$20(a0)
0000C4F2 117C 0008 0019             		move.b	#8,$19(a0)
0000C4F8 303C 00C8                  		move.w	#$C8,d0
0000C4FC 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play flame sound
0000C502 4A28 0028                  		tst.b	$28(a0)
0000C506 6700                       		beq.s	loc_B238
0000C508 5428 0024                  		addq.b	#2,$24(a0)
0000C50C 6000 0000                  		bra.w	Obj35_Move
0000C510                            ; ===========================================================================
0000C510                            
0000C510                            loc_B238:				; XREF: Obj35_Index
0000C510 2268 0030                  		movea.l	$30(a0),a1
0000C514 3228 0008                  		move.w	8(a0),d1
0000C518 9268 002A                  		sub.w	$2A(a0),d1
0000C51C 0641 000C                  		addi.w	#$C,d1
0000C520 3001                       		move.w	d1,d0
0000C522 E248                       		lsr.w	#1,d0
0000C524 1031 0000                  		move.b	(a1,d0.w),d0
0000C528 4440                       		neg.w	d0
0000C52A D068 002C                  		add.w	$2C(a0),d0
0000C52E 3400                       		move.w	d0,d2
0000C530 D068 003C                  		add.w	$3C(a0),d0
0000C534 3140 000C                  		move.w	d0,$C(a0)
0000C538 0C41 0084                  		cmpi.w	#$84,d1
0000C53C 6400                       		bcc.s	loc_B2B0
0000C53E 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C546 0C41 0080                  		cmpi.w	#$80,d1
0000C54A 6400                       		bcc.s	loc_B2B0
0000C54C 2028 0008                  		move.l	8(a0),d0
0000C550 0680 0008 0000             		addi.l	#$80000,d0
0000C556 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000C55C 6600                       		bne.s	loc_B2B0
0000C55E 6100 0000                  		bsr.w	SingleObjLoad2
0000C562 6600                       		bne.s	loc_B2B0
0000C564 12BC 0035                  		move.b	#$35,0(a1)
0000C568 3368 0008 0008             		move.w	8(a0),8(a1)
0000C56E 3342 002C                  		move.w	d2,$2C(a1)
0000C572 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000C578 137C 0001 0028             		move.b	#1,$28(a1)
0000C57E 2468 0038                  		movea.l	$38(a0),a2
0000C582 6100 FDE0                  		bsr.w	sub_B09C
0000C586                            
0000C586                            loc_B2B0:
0000C586 6000                       		bra.s	Obj35_Animate
0000C588                            ; ===========================================================================
0000C588                            
0000C588                            Obj35_Move:				; XREF: Obj35_Index
0000C588 3028 002C                  		move.w	$2C(a0),d0
0000C58C D068 003C                  		add.w	$3C(a0),d0
0000C590 3140 000C                  		move.w	d0,$C(a0)
0000C594                            
0000C594                            Obj35_Animate:				; XREF: loc_B238
0000C594 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000C59A 6100 F40E                  		bsr.w	AnimateSprite
0000C59E 6000 0000                  		bra.w	DisplaySprite
0000C5A2                            ; ===========================================================================
0000C5A2                            Ani_obj35:
0000C5A2                            	include "_anim\obj35.asm"
0000C5A2                            ; ---------------------------------------------------------------------------
0000C5A2                            ; Animation script - fireball that sits on the	floor (MZ)
0000C5A2                            ; ---------------------------------------------------------------------------
0000C5A2 0000                       		dc.w byte_B2CE-Ani_obj35
0000C5A4 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000C5AA                            		even
0000C5AA                            		even
0000C5AA                            
0000C5AA                            ; ---------------------------------------------------------------------------
0000C5AA                            ; Sprite mappings - large moving platforms (MZ)
0000C5AA                            ; ---------------------------------------------------------------------------
0000C5AA                            Map_obj2F:
0000C5AA                            	include "_maps\obj2F.asm"
0000C5AA                            ; ---------------------------------------------------------------------------
0000C5AA                            ; Sprite mappings - large moving platforms (MZ)
0000C5AA                            ; ---------------------------------------------------------------------------
0000C5AA 0000                       		dc.w byte_B2DA-Map_obj2F
0000C5AC 0000                       		dc.w byte_B31C-Map_obj2F
0000C5AE 0000                       		dc.w byte_B34F-Map_obj2F
0000C5B0 0D                         byte_B2DA:	dc.b $D
0000C5B1 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000C5B6 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000C5BB 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000C5C0 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000C5C5 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000C5CA F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C5CF D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000C5D4 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000C5D9 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000C5DE F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000C5E3 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000C5E8 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000C5ED F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000C5F2 0A                         byte_B31C:	dc.b $A
0000C5F3 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000C5F8 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000C5FD 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000C602 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000C607 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000C60C F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C611 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000C616 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000C61B C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000C620 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000C625 06                         byte_B34F:	dc.b 6
0000C626 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000C62B F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C630 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000C635 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000C63A F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000C63F 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000C644                            		even
0000C644                            		even
0000C644                            
0000C644                            ; ---------------------------------------------------------------------------
0000C644                            ; Sprite mappings - lava balls (MZ, SLZ)
0000C644                            ; ---------------------------------------------------------------------------
0000C644                            Map_obj14:
0000C644                            	include "_maps\obj14.asm"
0000C644                            ; ---------------------------------------------------------------------------
0000C644                            ; Sprite mappings - lava balls (MZ, SLZ)
0000C644                            ; ---------------------------------------------------------------------------
0000C644 0000                       		dc.w byte_B37A-Map_obj14
0000C646 0000                       		dc.w byte_B380-Map_obj14
0000C648 0000                       		dc.w byte_B386-Map_obj14
0000C64A 0000                       		dc.w byte_B38C-Map_obj14
0000C64C 0000                       		dc.w byte_B392-Map_obj14
0000C64E 0000                       		dc.w byte_B398-Map_obj14
0000C650 01                         byte_B37A:	dc.b 1
0000C651 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000C656 01                         byte_B380:	dc.b 1
0000C657 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000C65C 01                         byte_B386:	dc.b 1
0000C65D F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000C662 01                         byte_B38C:	dc.b 1
0000C663 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000C668 01                         byte_B392:	dc.b 1
0000C669 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000C66E 01                         byte_B398:	dc.b 1
0000C66F F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000C674                            		even
0000C674                            		even
0000C674                            
0000C674                            ; ===========================================================================
0000C674                            ; ---------------------------------------------------------------------------
0000C674                            ; Object 30 - large green glassy blocks	(MZ)
0000C674                            ; ---------------------------------------------------------------------------
0000C674                            
0000C674                            Obj30:					; XREF: Obj_Index
0000C674 7000                       		moveq	#0,d0
0000C676 1028 0024                  		move.b	$24(a0),d0
0000C67A 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000C67E 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000C682 3028 0008                  		move.w	8(a0),d0
0000C686 0240 FF80                  		andi.w	#$FF80,d0
0000C68A 3238 F700                  		move.w	($FFFFF700).w,d1
0000C68E 0441 0080                  		subi.w	#$80,d1
0000C692 0241 FF80                  		andi.w	#$FF80,d1
0000C696 9041                       		sub.w	d1,d0
0000C698 0C40 0280                  		cmpi.w	#$280,d0
0000C69C 6300 0000                  		bls.w	DisplaySprite
0000C6A0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000C6A4 6700                       		beq.s	Obj30_Delete		; if it's zero, don't remember object
0000C6A6 3440                       		movea.w	d0,a2	; load address into a2
0000C6A8 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000C6AC                            
0000C6AC                            Obj30_Delete:
0000C6AC 6000 0000                  		bra.w	DeleteObject
0000C6B0                            ; ===========================================================================
0000C6B0 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000C6B2 0000                       		dc.w Obj30_Block012-Obj30_Index
0000C6B4 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000C6B6 0000                       		dc.w Obj30_Block34-Obj30_Index
0000C6B8 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000C6BA                            
0000C6BA 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000C6BD 0400 01                    		dc.b 4,	0, 1
0000C6C0 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000C6C3 0800 01                    		dc.b 8,	0, 1
0000C6C6                            ; ===========================================================================
0000C6C6                            
0000C6C6                            Obj30_Main:				; XREF: Obj30_Index
0000C6C6 45F9 0000 C6BA             		lea	(Obj30_Vars1).l,a2
0000C6CC 7201                       		moveq	#1,d1
0000C6CE 117C 0048 0016             		move.b	#$48,$16(a0)
0000C6D4 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000C6DA 6500                       		bcs.s	loc_B40C	; if yes, branch
0000C6DC 45F9 0000 C6C0             		lea	(Obj30_Vars2).l,a2
0000C6E2 7201                       		moveq	#1,d1
0000C6E4 117C 0038 0016             		move.b	#$38,$16(a0)
0000C6EA                            
0000C6EA                            loc_B40C:
0000C6EA 2248                       		movea.l	a0,a1
0000C6EC 6000                       		bra.s	Obj30_Load	; load main object
0000C6EE                            ; ===========================================================================
0000C6EE                            
0000C6EE                            Obj30_Loop:
0000C6EE 6100 0000                  		bsr.w	SingleObjLoad2
0000C6F2 6600                       		bne.s	loc_B480
0000C6F4                            
0000C6F4                            Obj30_Load:				; XREF: Obj30_Main
0000C6F4 135A 0024                  		move.b	(a2)+,$24(a1)
0000C6F8 12BC 0030                  		move.b	#$30,0(a1)
0000C6FC 3368 0008 0008             		move.w	8(a0),8(a1)
0000C702 101A                       		move.b	(a2)+,d0
0000C704 4880                       		ext.w	d0
0000C706 D068 000C                  		add.w	$C(a0),d0
0000C70A 3340 000C                  		move.w	d0,$C(a1)
0000C70E 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000C716 337C C38E 0002             		move.w	#$C38E,2(a1)
0000C71C 137C 0004 0001             		move.b	#4,1(a1)
0000C722 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C728 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C72E 137C 0020 0019             		move.b	#$20,$19(a1)
0000C734 137C 0004 0018             		move.b	#4,$18(a1)
0000C73A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C73E 2348 003C                  		move.l	a0,$3C(a1)
0000C742 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000C746                            
0000C746 137C 0010 0019             		move.b	#$10,$19(a1)
0000C74C 137C 0003 0018             		move.b	#3,$18(a1)
0000C752 5029 0028                  		addq.b	#8,$28(a1)
0000C756 0229 000F 0028             		andi.b	#$F,$28(a1)
0000C75C                            
0000C75C                            loc_B480:
0000C75C 317C 0090 0032             		move.w	#$90,$32(a0)
0000C762 08E8 0004 0001             		bset	#4,1(a0)
0000C768                            
0000C768                            Obj30_Block012:				; XREF: Obj30_Index
0000C768 6100 0000                  		bsr.w	Obj30_Types
0000C76C 323C 002B                  		move.w	#$2B,d1
0000C770 343C 0048                  		move.w	#$48,d2
0000C774 363C 0049                  		move.w	#$49,d3
0000C778 3828 0008                  		move.w	8(a0),d4
0000C77C 6000 0000                  		bra.w	SolidObject
0000C780                            ; ===========================================================================
0000C780                            
0000C780                            Obj30_Reflect012:			; XREF: Obj30_Index
0000C780 2268 003C                  		movea.l	$3C(a0),a1
0000C784 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C78A 6000 0000                  		bra.w	Obj30_Types
0000C78E                            ; ===========================================================================
0000C78E                            
0000C78E                            Obj30_Block34:				; XREF: Obj30_Index
0000C78E 6100 0000                  		bsr.w	Obj30_Types
0000C792 323C 002B                  		move.w	#$2B,d1
0000C796 343C 0038                  		move.w	#$38,d2
0000C79A 363C 0039                  		move.w	#$39,d3
0000C79E 3828 0008                  		move.w	8(a0),d4
0000C7A2 6000 0000                  		bra.w	SolidObject
0000C7A6                            ; ===========================================================================
0000C7A6                            
0000C7A6                            Obj30_Reflect34:			; XREF: Obj30_Index
0000C7A6 2268 003C                  		movea.l	$3C(a0),a1
0000C7AA 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C7B0 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000C7B6 6000 0002                  		bra.w	*+4
0000C7BA                            
0000C7BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C7BA                            
0000C7BA                            
0000C7BA                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000C7BA 7000                       		moveq	#0,d0
0000C7BC 1028 0028                  		move.b	$28(a0),d0
0000C7C0 0240 0007                  		andi.w	#7,d0
0000C7C4 D040                       		add.w	d0,d0
0000C7C6 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000C7CA 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000C7CE                            ; End of function Obj30_Types
0000C7CE                            
0000C7CE                            ; ===========================================================================
0000C7CE 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000C7D0 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000C7D2 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000C7D4 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000C7D6 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000C7D8                            ; ===========================================================================
0000C7D8                            
0000C7D8                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000C7D8 4E75                       		rts	
0000C7DA                            ; ===========================================================================
0000C7DA                            
0000C7DA                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000C7DA 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C7DE 323C 0040                  		move.w	#$40,d1
0000C7E2 6000                       		bra.s	loc_B514
0000C7E4                            ; ===========================================================================
0000C7E4                            
0000C7E4                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000C7E4 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C7E8 323C 0040                  		move.w	#$40,d1
0000C7EC 4440                       		neg.w	d0
0000C7EE D041                       		add.w	d1,d0
0000C7F0                            
0000C7F0                            loc_B514:				; XREF: Obj30_Type01
0000C7F0 0828 0003 0028             		btst	#3,$28(a0)
0000C7F6 6700                       		beq.s	loc_B526
0000C7F8 4440                       		neg.w	d0
0000C7FA D041                       		add.w	d1,d0
0000C7FC E208                       		lsr.b	#1,d0
0000C7FE 0640 0020                  		addi.w	#$20,d0
0000C802                            
0000C802                            loc_B526:
0000C802 6000 0000                  		bra.w	loc_B5EE
0000C806                            ; ===========================================================================
0000C806                            
0000C806                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000C806 0828 0003 0028             		btst	#3,$28(a0)
0000C80C 6700                       		beq.s	loc_B53E
0000C80E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C812 0440 0010                  		subi.w	#$10,d0
0000C816 6000 0000                  		bra.w	loc_B5EE
0000C81A                            ; ===========================================================================
0000C81A                            
0000C81A                            loc_B53E:
0000C81A 0828 0003 0022             		btst	#3,$22(a0)
0000C820 6600                       		bne.s	loc_B54E
0000C822 08A8 0000 0034             		bclr	#0,$34(a0)
0000C828 6000                       		bra.s	loc_B582
0000C82A                            ; ===========================================================================
0000C82A                            
0000C82A                            loc_B54E:
0000C82A 4A28 0034                  		tst.b	$34(a0)
0000C82E 6600                       		bne.s	loc_B582
0000C830 117C 0001 0034             		move.b	#1,$34(a0)
0000C836 08E8 0000 0035             		bset	#0,$35(a0)
0000C83C 6700                       		beq.s	loc_B582
0000C83E 08E8 0007 0034             		bset	#7,$34(a0)
0000C844 317C 0010 0036             		move.w	#$10,$36(a0)
0000C84A 117C 000A 0038             		move.b	#$A,$38(a0)
0000C850 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000C856 6600                       		bne.s	loc_B582
0000C858 317C 0040 0036             		move.w	#$40,$36(a0)
0000C85E                            
0000C85E                            loc_B582:
0000C85E 4A28 0034                  		tst.b	$34(a0)
0000C862 6A00                       		bpl.s	loc_B5AA
0000C864 4A28 0038                  		tst.b	$38(a0)
0000C868 6700                       		beq.s	loc_B594
0000C86A 5328 0038                  		subq.b	#1,$38(a0)
0000C86E 6600                       		bne.s	loc_B5AA
0000C870                            
0000C870                            loc_B594:
0000C870 4A68 0032                  		tst.w	$32(a0)
0000C874 6700                       		beq.s	loc_B5A4
0000C876 5368 0032                  		subq.w	#1,$32(a0)
0000C87A 5368 0036                  		subq.w	#1,$36(a0)
0000C87E 6600                       		bne.s	loc_B5AA
0000C880                            
0000C880                            loc_B5A4:
0000C880 08A8 0007 0034             		bclr	#7,$34(a0)
0000C886                            
0000C886                            loc_B5AA:
0000C886 3028 0032                  		move.w	$32(a0),d0
0000C88A 6000                       		bra.s	loc_B5EE
0000C88C                            ; ===========================================================================
0000C88C                            
0000C88C                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000C88C 0828 0003 0028             		btst	#3,$28(a0)
0000C892 6700                       		beq.s	Obj30_ChkSwitch
0000C894 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C898 0440 0010                  		subi.w	#$10,d0
0000C89C 6000                       		bra.s	loc_B5EE
0000C89E                            ; ===========================================================================
0000C89E                            
0000C89E                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000C89E 4A28 0034                  		tst.b	$34(a0)
0000C8A2 6600                       		bne.s	loc_B5E0
0000C8A4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000C8A8 7000                       		moveq	#0,d0
0000C8AA 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000C8AE E848                       		lsr.w	#4,d0		; read only the	first nybble
0000C8B0 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000C8B4 6700                       		beq.s	loc_B5EA	; if not, branch
0000C8B6 117C 0001 0034             		move.b	#1,$34(a0)
0000C8BC                            
0000C8BC                            loc_B5E0:
0000C8BC 4A68 0032                  		tst.w	$32(a0)
0000C8C0 6700                       		beq.s	loc_B5EA
0000C8C2 5568 0032                  		subq.w	#2,$32(a0)
0000C8C6                            
0000C8C6                            loc_B5EA:
0000C8C6 3028 0032                  		move.w	$32(a0),d0
0000C8CA                            
0000C8CA                            loc_B5EE:
0000C8CA 3228 0030                  		move.w	$30(a0),d1
0000C8CE 9240                       		sub.w	d0,d1
0000C8D0 3141 000C                  		move.w	d1,$C(a0)
0000C8D4 4E75                       		rts	
0000C8D6                            ; ===========================================================================
0000C8D6                            ; ---------------------------------------------------------------------------
0000C8D6                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C8D6                            ; ---------------------------------------------------------------------------
0000C8D6                            Map_obj30:
0000C8D6                            	include "_maps\obj30.asm"
0000C8D6                            ; ---------------------------------------------------------------------------
0000C8D6                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C8D6                            ; ---------------------------------------------------------------------------
0000C8D6 0000                       		dc.w byte_B600-Map_obj30
0000C8D8 0000                       		dc.w byte_B63D-Map_obj30
0000C8DA 0000                       		dc.w byte_B648-Map_obj30
0000C8DC 0C                         byte_B600:	dc.b $C
0000C8DD B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000C8E2 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000C8E7 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000C8EC C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000C8F1 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000C8F6 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000C8FB 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000C900 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000C905 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000C90A 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000C90F 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000C914 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000C919 02                         byte_B63D:	dc.b 2
0000C91A 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000C91F 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000C924 0A                         byte_B648:	dc.b $A
0000C925 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000C92A C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000C92F D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000C934 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000C939 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000C93E F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000C943 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000C948 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000C94D 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000C952 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000C958 00                         		even
0000C958 00                         		even
0000C958                            
0000C958                            ; ===========================================================================
0000C958                            ; ---------------------------------------------------------------------------
0000C958                            ; Object 31 - stomping metal blocks on chains (MZ)
0000C958                            ; ---------------------------------------------------------------------------
0000C958                            
0000C958                            Obj31:					; XREF: Obj_Index
0000C958 7000                       		moveq	#0,d0
0000C95A 1028 0024                  		move.b	$24(a0),d0
0000C95E 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000C962 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000C966                            ; ===========================================================================
0000C966 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000C968 0000                       		dc.w loc_B798-Obj31_Index
0000C96A 0000                       		dc.w loc_B7FE-Obj31_Index
0000C96C 0000                       		dc.w Obj31_Display2-Obj31_Index
0000C96E 0000                       		dc.w loc_B7E2-Obj31_Index
0000C970                            
0000C970 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000C972 0100                       		dc.b 1,	0
0000C974                            
0000C974 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000C977 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000C97A 08CC 03                    		dc.b 8,	$CC, 3
0000C97D 06F0 02                    		dc.b 6,	$F0, 2
0000C980                            
0000C980 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000C984 5000 7800                  		dc.w $5000, $7800
0000C988 3800 5800                  		dc.w $3800, $5800
0000C98C B800                       		dc.w $B800
0000C98E                            ; ===========================================================================
0000C98E                            
0000C98E                            Obj31_Main:				; XREF: Obj31_Index
0000C98E 7000                       		moveq	#0,d0
0000C990 1028 0028                  		move.b	$28(a0),d0
0000C994 6A00                       		bpl.s	loc_B6CE
0000C996 0240 007F                  		andi.w	#$7F,d0
0000C99A D040                       		add.w	d0,d0
0000C99C 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000C9A0 115A 003A                  		move.b	(a2)+,$3A(a0)
0000C9A4 101A                       		move.b	(a2)+,d0
0000C9A6 1140 0028                  		move.b	d0,$28(a0)
0000C9AA                            
0000C9AA                            loc_B6CE:
0000C9AA 0200 000F                  		andi.b	#$F,d0
0000C9AE D040                       		add.w	d0,d0
0000C9B0 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000C9B4 4A40                       		tst.w	d0
0000C9B6 6600                       		bne.s	loc_B6E0
0000C9B8 3142 0032                  		move.w	d2,$32(a0)
0000C9BC                            
0000C9BC                            loc_B6E0:
0000C9BC 45F9 0000 C974             		lea	(Obj31_Var).l,a2
0000C9C2 2248                       		movea.l	a0,a1
0000C9C4 7203                       		moveq	#3,d1
0000C9C6 6000                       		bra.s	Obj31_MakeStomper
0000C9C8                            ; ===========================================================================
0000C9C8                            
0000C9C8                            Obj31_Loop:
0000C9C8 6100 0000                  		bsr.w	SingleObjLoad2
0000C9CC 6600 0000                  		bne.w	Obj31_SetSize
0000C9D0                            
0000C9D0                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000C9D0 135A 0024                  		move.b	(a2)+,$24(a1)
0000C9D4 12BC 0031                  		move.b	#$31,0(a1)
0000C9D8 3368 0008 0008             		move.w	8(a0),8(a1)
0000C9DE 101A                       		move.b	(a2)+,d0
0000C9E0 4880                       		ext.w	d0
0000C9E2 D068 000C                  		add.w	$C(a0),d0
0000C9E6 3340 000C                  		move.w	d0,$C(a1)
0000C9EA 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C9F2 337C 0300 0002             		move.w	#$300,2(a1)
0000C9F8 137C 0004 0001             		move.b	#4,1(a1)
0000C9FE 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000CA04 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000CA0A 137C 0010 0019             		move.b	#$10,$19(a1)
0000CA10 3342 0034                  		move.w	d2,$34(a1)
0000CA14 137C 0004 0018             		move.b	#4,$18(a1)
0000CA1A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CA1E 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000CA24 6600                       		bne.s	loc_B76A
0000CA26 5341                       		subq.w	#1,d1
0000CA28 1028 0028                  		move.b	$28(a0),d0
0000CA2C 0240 00F0                  		andi.w	#$F0,d0
0000CA30 0C40 0020                  		cmpi.w	#$20,d0
0000CA34 679A                       		beq.s	Obj31_MakeStomper
0000CA36 137C 0038 0019             		move.b	#$38,$19(a1)
0000CA3C 137C 0090 0020             		move.b	#$90,$20(a1)
0000CA42 5241                       		addq.w	#1,d1
0000CA44                            
0000CA44                            loc_B76A:
0000CA44 2348 003C                  		move.l	a0,$3C(a1)
0000CA48 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000CA4C                            
0000CA4C 137C 0003 0018             		move.b	#3,$18(a1)
0000CA52                            
0000CA52                            Obj31_SetSize:
0000CA52 7000                       		moveq	#0,d0
0000CA54 1028 0028                  		move.b	$28(a0),d0
0000CA58 E648                       		lsr.w	#3,d0
0000CA5A 0200 000E                  		andi.b	#$E,d0
0000CA5E 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000CA62 115A 0019                  		move.b	(a2)+,$19(a0)
0000CA66 115A 001A                  		move.b	(a2)+,$1A(a0)
0000CA6A 6000                       		bra.s	loc_B798
0000CA6C                            ; ===========================================================================
0000CA6C 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000CA6E 3009                       		dc.b $30, 9
0000CA70 100A                       		dc.b $10, $A
0000CA72                            ; ===========================================================================
0000CA72                            
0000CA72                            loc_B798:				; XREF: Obj31_Index
0000CA72 6100 0000                  		bsr.w	Obj31_Types
0000CA76 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000CA7C 7200                       		moveq	#0,d1
0000CA7E 1228 0019                  		move.b	$19(a0),d1
0000CA82 0641 000B                  		addi.w	#$B,d1
0000CA86 343C 000C                  		move.w	#$C,d2
0000CA8A 363C 000D                  		move.w	#$D,d3
0000CA8E 3828 0008                  		move.w	8(a0),d4
0000CA92 6100 0000                  		bsr.w	SolidObject
0000CA96 0828 0003 0022             		btst	#3,$22(a0)
0000CA9C 6700                       		beq.s	Obj31_Display
0000CA9E 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000CAA4 6400                       		bcc.s	Obj31_Display
0000CAA6 2448                       		movea.l	a0,a2
0000CAA8 41F8 D000                  		lea	($FFFFD000).w,a0
0000CAAC 4EB9 0000 0000             		jsr	KillSonic
0000CAB2 204A                       		movea.l	a2,a0
0000CAB4 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0000CABA 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0000CAC0                            
0000CAC0                            Obj31_Display:
0000CAC0 6100 0000                  		bsr.w	DisplaySprite
0000CAC4 6000 0000                  		bra.w	Obj31_ChkDel
0000CAC8                            ; ===========================================================================
0000CAC8                            
0000CAC8                            loc_B7E2:				; XREF: Obj31_Index
0000CAC8 117C 0080 0016             		move.b	#$80,$16(a0)
0000CACE 08E8 0004 0001             		bset	#4,1(a0)
0000CAD4 2268 003C                  		movea.l	$3C(a0),a1
0000CAD8 1029 0032                  		move.b	$32(a1),d0
0000CADC EA08                       		lsr.b	#5,d0
0000CADE 5600                       		addq.b	#3,d0
0000CAE0 1140 001A                  		move.b	d0,$1A(a0)
0000CAE4                            
0000CAE4                            loc_B7FE:				; XREF: Obj31_Index
0000CAE4 2268 003C                  		movea.l	$3C(a0),a1
0000CAE8 7000                       		moveq	#0,d0
0000CAEA 1029 0032                  		move.b	$32(a1),d0
0000CAEE D068 0030                  		add.w	$30(a0),d0
0000CAF2 3140 000C                  		move.w	d0,$C(a0)
0000CAF6                            
0000CAF6                            Obj31_Display2:				; XREF: Obj31_Index
0000CAF6 6100 0000                  		bsr.w	DisplaySprite
0000CAFA                            
0000CAFA                            Obj31_ChkDel:				; XREF: Obj31_Display
0000CAFA 3028 0008                  		move.w	8(a0),d0
0000CAFE 0240 FF80                  		andi.w	#$FF80,d0
0000CB02 3238 F700                  		move.w	($FFFFF700).w,d1
0000CB06 0441 0080                  		subi.w	#$80,d1
0000CB0A 0241 FF80                  		andi.w	#$FF80,d1
0000CB0E 9041                       		sub.w	d1,d0
0000CB10 0C40 0280                  		cmpi.w	#$280,d0
0000CB14 6300                       		bls.s	Obj31_NoDel
0000CB16 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000CB1A 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000CB1E 3640                       		movea.w	d0,a3	; load address into a2
0000CB20 0893 0007                  		bclr	#7,(a3)	; clear respawn table entry, so object can be loaded again
0000CB24 6000 0000                  		bra.w	DeleteObject	; and delete object
0000CB28                            
0000CB28                            Obj31_NoDel:
0000CB28 4E75                       		rts	
0000CB2A                            ; ===========================================================================
0000CB2A                            
0000CB2A                            Obj31_Types:				; XREF: loc_B798
0000CB2A 1028 0028                  		move.b	$28(a0),d0
0000CB2E 0240 000F                  		andi.w	#$F,d0
0000CB32 D040                       		add.w	d0,d0
0000CB34 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000CB38 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000CB3C                            ; ===========================================================================
0000CB3C 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000CB3E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CB40 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CB42 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000CB44 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CB46 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000CB48 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CB4A                            ; ===========================================================================
0000CB4A                            
0000CB4A                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000CB4A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000CB4E 7000                       		moveq	#0,d0
0000CB50 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000CB54 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000CB58 6700                       		beq.s	loc_B8A8	; if not, branch
0000CB5A 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000CB5E 6A00                       		bpl.s	loc_B872
0000CB60 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000CB66 6700                       		beq.s	loc_B8A0
0000CB68                            
0000CB68                            loc_B872:
0000CB68 4A68 0032                  		tst.w	$32(a0)
0000CB6C 6700                       		beq.s	loc_B8A0
0000CB6E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CB72 0200 000F                  		andi.b	#$F,d0
0000CB76 6600                       		bne.s	loc_B892
0000CB78 4A28 0001                  		tst.b	1(a0)
0000CB7C 6A00                       		bpl.s	loc_B892
0000CB7E 303C 00C7                  		move.w	#$C7,d0
0000CB82 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000CB88                            
0000CB88                            loc_B892:
0000CB88 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CB8E 6400                       		bcc.s	Obj31_Restart
0000CB90 317C 0000 0032             		move.w	#0,$32(a0)
0000CB96                            
0000CB96                            loc_B8A0:
0000CB96 317C 0000 0012             		move.w	#0,$12(a0)
0000CB9C 6000                       		bra.s	Obj31_Restart
0000CB9E                            ; ===========================================================================
0000CB9E                            
0000CB9E                            loc_B8A8:				; XREF: Obj31_Type00
0000CB9E 3228 0034                  		move.w	$34(a0),d1
0000CBA2 B268 0032                  		cmp.w	$32(a0),d1
0000CBA6 6700                       		beq.s	Obj31_Restart
0000CBA8 3028 0012                  		move.w	$12(a0),d0
0000CBAC 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000CBB2 D168 0032                  		add.w	d0,$32(a0)
0000CBB6 B268 0032                  		cmp.w	$32(a0),d1
0000CBBA 6200                       		bhi.s	Obj31_Restart
0000CBBC 3141 0032                  		move.w	d1,$32(a0)
0000CBC0 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000CBC6 4A28 0001                  		tst.b	1(a0)
0000CBCA 6A00                       		bpl.s	Obj31_Restart
0000CBCC 303C 00BD                  		move.w	#$BD,d0
0000CBD0 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play stomping sound
0000CBD6                            
0000CBD6                            Obj31_Restart:
0000CBD6 7000                       		moveq	#0,d0
0000CBD8 1028 0032                  		move.b	$32(a0),d0
0000CBDC D068 0030                  		add.w	$30(a0),d0
0000CBE0 3140 000C                  		move.w	d0,$C(a0)
0000CBE4 4E75                       		rts	
0000CBE6                            ; ===========================================================================
0000CBE6                            
0000CBE6                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000CBE6 4A68 0036                  		tst.w	$36(a0)
0000CBEA 6700                       		beq.s	loc_B938
0000CBEC 4A68 0038                  		tst.w	$38(a0)
0000CBF0 6700                       		beq.s	loc_B902
0000CBF2 5368 0038                  		subq.w	#1,$38(a0)
0000CBF6 6000                       		bra.s	loc_B97C
0000CBF8                            ; ===========================================================================
0000CBF8                            
0000CBF8                            loc_B902:
0000CBF8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CBFC 0200 000F                  		andi.b	#$F,d0
0000CC00 6600                       		bne.s	loc_B91C
0000CC02 4A28 0001                  		tst.b	1(a0)
0000CC06 6A00                       		bpl.s	loc_B91C
0000CC08 303C 00C7                  		move.w	#$C7,d0
0000CC0C 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000CC12                            
0000CC12                            loc_B91C:
0000CC12 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CC18 6400                       		bcc.s	loc_B97C
0000CC1A 317C 0000 0032             		move.w	#0,$32(a0)
0000CC20 317C 0000 0012             		move.w	#0,$12(a0)
0000CC26 317C 0000 0036             		move.w	#0,$36(a0)
0000CC2C 6000                       		bra.s	loc_B97C
0000CC2E                            ; ===========================================================================
0000CC2E                            
0000CC2E                            loc_B938:				; XREF: Obj31_Type01
0000CC2E 3228 0034                  		move.w	$34(a0),d1
0000CC32 B268 0032                  		cmp.w	$32(a0),d1
0000CC36 6700                       		beq.s	loc_B97C
0000CC38 3028 0012                  		move.w	$12(a0),d0
0000CC3C 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000CC42 D168 0032                  		add.w	d0,$32(a0)
0000CC46 B268 0032                  		cmp.w	$32(a0),d1
0000CC4A 6200                       		bhi.s	loc_B97C
0000CC4C 3141 0032                  		move.w	d1,$32(a0)
0000CC50 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000CC56 317C 0001 0036             		move.w	#1,$36(a0)
0000CC5C 317C 003C 0038             		move.w	#$3C,$38(a0)
0000CC62 4A28 0001                  		tst.b	1(a0)
0000CC66 6A00                       		bpl.s	loc_B97C
0000CC68 303C 00BD                  		move.w	#$BD,d0
0000CC6C 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play stomping sound
0000CC72                            
0000CC72                            loc_B97C:
0000CC72 6000 FF62                  		bra.w	Obj31_Restart
0000CC76                            ; ===========================================================================
0000CC76                            
0000CC76                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000CC76 3038 D008                  		move.w	($FFFFD008).w,d0
0000CC7A 9068 0008                  		sub.w	8(a0),d0
0000CC7E 6400                       		bcc.s	loc_B98C
0000CC80 4440                       		neg.w	d0
0000CC82                            
0000CC82                            loc_B98C:
0000CC82 0C40 0090                  		cmpi.w	#$90,d0
0000CC86 6400                       		bcc.s	loc_B996
0000CC88 5228 0028                  		addq.b	#1,$28(a0)
0000CC8C                            
0000CC8C                            loc_B996:
0000CC8C 6000 FF48                  		bra.w	Obj31_Restart
0000CC90                            ; ===========================================================================
0000CC90                            ; ---------------------------------------------------------------------------
0000CC90                            ; Object 45 - spiked metal block from beta version (MZ)
0000CC90                            ; ---------------------------------------------------------------------------
0000CC90                            
0000CC90                            Obj45:					; XREF: Obj_Index
0000CC90 7000                       		moveq	#0,d0
0000CC92 1028 0024                  		move.b	$24(a0),d0
0000CC96 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000CC9A 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000CC9E                            ; ===========================================================================
0000CC9E 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000CCA0 0000                       		dc.w Obj45_Solid-Obj45_Index
0000CCA2 0000                       		dc.w loc_BA8E-Obj45_Index
0000CCA4 0000                       		dc.w Obj45_Display-Obj45_Index
0000CCA6 0000                       		dc.w loc_BA7A-Obj45_Index
0000CCA8                            
0000CCA8 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000CCAB 04E4 01                    		dc.b	4, $E4,	  1
0000CCAE 0834 03                    		dc.b	8, $34,	  3
0000CCB1 0628 02                    		dc.b	6, $28,	  2
0000CCB4                            
0000CCB4 3800                       word_B9BE:	dc.w $3800
0000CCB6 A000                       		dc.w -$6000
0000CCB8 5000                       		dc.w $5000
0000CCBA                            ; ===========================================================================
0000CCBA                            
0000CCBA                            Obj45_Main:				; XREF: Obj45_Index
0000CCBA 7000                       		moveq	#0,d0
0000CCBC 1028 0028                  		move.b	$28(a0),d0
0000CCC0 D040                       		add.w	d0,d0
0000CCC2 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000CCC6 45F9 0000 CCA8             		lea	(Obj45_Var).l,a2
0000CCCC 2248                       		movea.l	a0,a1
0000CCCE 7203                       		moveq	#3,d1
0000CCD0 6000                       		bra.s	Obj45_Load
0000CCD2                            ; ===========================================================================
0000CCD2                            
0000CCD2                            Obj45_Loop:
0000CCD2 6100 0000                  		bsr.w	SingleObjLoad2
0000CCD6 6600                       		bne.s	loc_BA52
0000CCD8                            
0000CCD8                            Obj45_Load:				; XREF: Obj45_Main
0000CCD8 135A 0024                  		move.b	(a2)+,$24(a1)
0000CCDC 12BC 0045                  		move.b	#$45,0(a1)
0000CCE0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CCE6 101A                       		move.b	(a2)+,d0
0000CCE8 4880                       		ext.w	d0
0000CCEA D068 0008                  		add.w	8(a0),d0
0000CCEE 3340 0008                  		move.w	d0,8(a1)
0000CCF2 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000CCFA 337C 0300 0002             		move.w	#$300,2(a1)
0000CD00 137C 0004 0001             		move.b	#4,1(a1)
0000CD06 3369 0008 0030             		move.w	8(a1),$30(a1)
0000CD0C 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000CD12 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000CD18 137C 0020 0019             		move.b	#$20,$19(a1)
0000CD1E 3342 0034                  		move.w	d2,$34(a1)
0000CD22 137C 0004 0018             		move.b	#4,$18(a1)
0000CD28 0C12 0001                  		cmpi.b	#1,(a2)
0000CD2C 6600                       		bne.s	loc_BA40
0000CD2E 137C 0091 0020             		move.b	#$91,$20(a1)
0000CD34                            
0000CD34                            loc_BA40:
0000CD34 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CD38 2348 003C                  		move.l	a0,$3C(a1)
0000CD3C 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000CD40                            
0000CD40 137C 0003 0018             		move.b	#3,$18(a1)
0000CD46                            
0000CD46                            loc_BA52:
0000CD46 117C 0010 0019             		move.b	#$10,$19(a0)
0000CD4C                            
0000CD4C                            Obj45_Solid:				; XREF: Obj45_Index
0000CD4C 3F28 0008                  		move.w	8(a0),-(sp)
0000CD50 6100 0000                  		bsr.w	Obj45_Move
0000CD54 323C 0017                  		move.w	#$17,d1
0000CD58 343C 0020                  		move.w	#$20,d2
0000CD5C 363C 0020                  		move.w	#$20,d3
0000CD60 381F                       		move.w	(sp)+,d4
0000CD62 6100 0000                  		bsr.w	SolidObject
0000CD66 6100 0000                  		bsr.w	DisplaySprite
0000CD6A 6000 0000                  		bra.w	Obj45_ChkDel
0000CD6E                            ; ===========================================================================
0000CD6E                            
0000CD6E                            loc_BA7A:				; XREF: Obj45_Index
0000CD6E 2268 003C                  		movea.l	$3C(a0),a1
0000CD72 1029 0032                  		move.b	$32(a1),d0
0000CD76 0600 0010                  		addi.b	#$10,d0
0000CD7A EA08                       		lsr.b	#5,d0
0000CD7C 5600                       		addq.b	#3,d0
0000CD7E 1140 001A                  		move.b	d0,$1A(a0)
0000CD82                            
0000CD82                            loc_BA8E:				; XREF: Obj45_Index
0000CD82 2268 003C                  		movea.l	$3C(a0),a1
0000CD86 7000                       		moveq	#0,d0
0000CD88 1029 0032                  		move.b	$32(a1),d0
0000CD8C 4440                       		neg.w	d0
0000CD8E D068 0030                  		add.w	$30(a0),d0
0000CD92 3140 0008                  		move.w	d0,8(a0)
0000CD96                            
0000CD96                            Obj45_Display:				; XREF: Obj45_Index
0000CD96 6100 0000                  		bsr.w	DisplaySprite
0000CD9A                            
0000CD9A                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000CD9A 3028 003A                  		move.w	$3A(a0),d0
0000CD9E 0240 FF80                  		andi.w	#$FF80,d0
0000CDA2 3238 F700                  		move.w	($FFFFF700).w,d1
0000CDA6 0441 0080                  		subi.w	#$80,d1
0000CDAA 0241 FF80                  		andi.w	#$FF80,d1
0000CDAE 9041                       		sub.w	d1,d0
0000CDB0 0C40 0280                  		cmpi.w	#$280,d0
0000CDB4 6300                       		bls.s	Obj45_NoDel
0000CDB6 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000CDBA 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000CDBE 3440                       		movea.w	d0,a2	; load address into a2
0000CDC0 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000CDC4 6000 0000                  		bra.w	DeleteObject	; and delete object
0000CDC8                            
0000CDC8                            Obj45_NoDel:
0000CDC8 4E75                       		rts	
0000CDCA                            
0000CDCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CDCA                            
0000CDCA                            
0000CDCA                            Obj45_Move:				; XREF: Obj45_Solid
0000CDCA 7000                       		moveq	#0,d0
0000CDCC 1028 0028                  		move.b	$28(a0),d0
0000CDD0 D040                       		add.w	d0,d0
0000CDD2 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000CDD6 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000CDDA                            ; End of function Obj45_Move
0000CDDA                            
0000CDDA                            ; ===========================================================================
0000CDDA 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000CDDC 0000                       		dc.w loc_BADA-off_BAD6
0000CDDE                            ; ===========================================================================
0000CDDE                            
0000CDDE                            loc_BADA:				; XREF: off_BAD6
0000CDDE 4A68 0036                  		tst.w	$36(a0)
0000CDE2 6700                       		beq.s	loc_BB08
0000CDE4 4A68 0038                  		tst.w	$38(a0)
0000CDE8 6700                       		beq.s	loc_BAEC
0000CDEA 5368 0038                  		subq.w	#1,$38(a0)
0000CDEE 6000                       		bra.s	loc_BB3C
0000CDF0                            ; ===========================================================================
0000CDF0                            
0000CDF0                            loc_BAEC:
0000CDF0 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CDF6 6400                       		bcc.s	loc_BB3C
0000CDF8 317C 0000 0032             		move.w	#0,$32(a0)
0000CDFE 317C 0000 0010             		move.w	#0,$10(a0)
0000CE04 317C 0000 0036             		move.w	#0,$36(a0)
0000CE0A 6000                       		bra.s	loc_BB3C
0000CE0C                            ; ===========================================================================
0000CE0C                            
0000CE0C                            loc_BB08:				; XREF: loc_BADA
0000CE0C 3228 0034                  		move.w	$34(a0),d1
0000CE10 B268 0032                  		cmp.w	$32(a0),d1
0000CE14 6700                       		beq.s	loc_BB3C
0000CE16 3028 0010                  		move.w	$10(a0),d0
0000CE1A 0668 0070 0010             		addi.w	#$70,$10(a0)
0000CE20 D168 0032                  		add.w	d0,$32(a0)
0000CE24 B268 0032                  		cmp.w	$32(a0),d1
0000CE28 6200                       		bhi.s	loc_BB3C
0000CE2A 3141 0032                  		move.w	d1,$32(a0)
0000CE2E 317C 0000 0010             		move.w	#0,$10(a0)
0000CE34 317C 0001 0036             		move.w	#1,$36(a0)
0000CE3A 317C 003C 0038             		move.w	#$3C,$38(a0)
0000CE40                            
0000CE40                            loc_BB3C:
0000CE40 7000                       		moveq	#0,d0
0000CE42 1028 0032                  		move.b	$32(a0),d0
0000CE46 4440                       		neg.w	d0
0000CE48 D068 0030                  		add.w	$30(a0),d0
0000CE4C 3140 0008                  		move.w	d0,8(a0)
0000CE50 4E75                       		rts	
0000CE52                            ; ===========================================================================
0000CE52                            ; ---------------------------------------------------------------------------
0000CE52                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000CE52                            ; ---------------------------------------------------------------------------
0000CE52                            Map_obj31:
0000CE52                            	include "_maps\obj31.asm"
0000CE52                            ; ---------------------------------------------------------------------------
0000CE52                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000CE52                            ; ---------------------------------------------------------------------------
0000CE52 0000                       		dc.w byte_BB64-Map_obj31
0000CE54 0000                       		dc.w byte_BB7E-Map_obj31
0000CE56 0000                       		dc.w byte_BB98-Map_obj31
0000CE58 0000                       		dc.w byte_BB9E-Map_obj31
0000CE5A 0000                       		dc.w byte_BBA9-Map_obj31
0000CE5C 0000                       		dc.w byte_BBBE-Map_obj31
0000CE5E 0000                       		dc.w byte_BBDD-Map_obj31
0000CE60 0000                       		dc.w byte_BC06-Map_obj31
0000CE62 0000                       		dc.w byte_BC06-Map_obj31
0000CE64 0000                       		dc.w byte_BC39-Map_obj31
0000CE66 0000                       		dc.w byte_BC53-Map_obj31
0000CE68 05                         byte_BB64:	dc.b 5
0000CE69 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000CE6E F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000CE73 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000CE78 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000CE7D F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000CE82 05                         byte_BB7E:	dc.b 5
0000CE83 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000CE88 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000CE8D F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000CE92 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000CE97 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000CE9C 01                         byte_BB98:	dc.b 1
0000CE9D DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000CEA2 02                         byte_BB9E:	dc.b 2
0000CEA3 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CEA8 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CEAD 04                         byte_BBA9:	dc.b 4
0000CEAE E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CEB3 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CEB8 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CEBD 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CEC2 06                         byte_BBBE:	dc.b 6
0000CEC3 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CEC8 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CECD E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CED2 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CED7 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CEDC 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CEE1 08                         byte_BBDD:	dc.b 8
0000CEE2 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000CEE7 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000CEEC C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CEF1 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CEF6 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CEFB F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CF00 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CF05 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CF0A 0A                         byte_BC06:	dc.b $A
0000CF0B 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000CF10 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000CF15 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000CF1A B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000CF1F C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CF24 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CF29 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CF2E F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CF33 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CF38 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CF3D 05                         byte_BC39:	dc.b 5
0000CF3E F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000CF43 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000CF48 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000CF4D F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000CF52 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000CF57 01                         byte_BC53:	dc.b 1
0000CF58 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000CF5E 00                         		even
0000CF5E 00                         		even
0000CF5E                            
0000CF5E                            ; ---------------------------------------------------------------------------
0000CF5E                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000CF5E                            ; ---------------------------------------------------------------------------
0000CF5E                            Map_obj45:
0000CF5E                            	include "_maps\obj45.asm"
0000CF5E                            ; ---------------------------------------------------------------------------
0000CF5E                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000CF5E                            ; ---------------------------------------------------------------------------
0000CF5E 0000                       		dc.w byte_BC6C-Map_obj45
0000CF60 0000                       		dc.w byte_BC7C-Map_obj45
0000CF62 0000                       		dc.w byte_BC8C-Map_obj45
0000CF64 0000                       		dc.w byte_BC92-Map_obj45
0000CF66 0000                       		dc.w byte_BC9D-Map_obj45
0000CF68 0000                       		dc.w byte_BCB2-Map_obj45
0000CF6A 0000                       		dc.w byte_BCD1-Map_obj45
0000CF6C 0000                       		dc.w byte_BCFA-Map_obj45
0000CF6E 0000                       		dc.w byte_BCFA-Map_obj45
0000CF70 03                         byte_BC6C:	dc.b 3
0000CF71 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000CF76 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000CF7B F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000CF80 03                         byte_BC7C:	dc.b 3
0000CF81 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000CF86 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000CF8B 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000CF90 01                         byte_BC8C:	dc.b 1
0000CF91 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000CF96 02                         byte_BC92:	dc.b 2
0000CF97 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CF9C F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CFA1 04                         byte_BC9D:	dc.b 4
0000CFA2 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CFA7 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CFAC F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CFB1 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CFB6 06                         byte_BCB2:	dc.b 6
0000CFB7 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CFBC F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CFC1 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CFC6 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CFCB F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CFD0 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CFD5 08                         byte_BCD1:	dc.b 8
0000CFD6 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CFDB F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CFE0 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CFE5 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CFEA F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CFEF F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CFF4 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000CFF9 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000CFFE 08                         byte_BCFA:	dc.b 8
0000CFFF F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D004 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D009 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D00E F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D013 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000D018 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D01D F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000D022 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000D027 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000D02C F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000D032 00                         		even
0000D032 00                         		even
0000D032                            
0000D032                            ; ===========================================================================
0000D032                            ; ---------------------------------------------------------------------------
0000D032                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000D032                            ; ---------------------------------------------------------------------------
0000D032                            
0000D032                            Obj32:					; XREF: Obj_Index
0000D032 7000                       		moveq	#0,d0
0000D034 1028 0024                  		move.b	$24(a0),d0
0000D038 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000D03C 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000D040                            ; ===========================================================================
0000D040 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000D042 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000D044                            ; ===========================================================================
0000D044                            
0000D044                            Obj32_Main:				; XREF: Obj32_Index
0000D044 5428 0024                  		addq.b	#2,$24(a0)
0000D048 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000D050 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000D056 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000D05C 6700                       		beq.s	loc_BD60
0000D05E 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000D064                            
0000D064                            loc_BD60:
0000D064 117C 0004 0001             		move.b	#4,1(a0)
0000D06A 117C 0010 0019             		move.b	#$10,$19(a0)
0000D070 117C 0004 0018             		move.b	#4,$18(a0)
0000D076 5668 000C                  		addq.w	#3,$C(a0)
0000D07A                            
0000D07A                            Obj32_Pressed:				; XREF: Obj32_Index
0000D07A 4A28 0001                  		tst.b	1(a0)
0000D07E 6A00                       		bpl.s	Obj32_Display
0000D080 323C 001B                  		move.w	#$1B,d1
0000D084 343C 0005                  		move.w	#5,d2
0000D088 363C 0005                  		move.w	#5,d3
0000D08C 3828 0008                  		move.w	8(a0),d4
0000D090 6100 0000                  		bsr.w	SolidObject
0000D094 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000D09A 1028 0028                  		move.b	$28(a0),d0
0000D09E 0240 000F                  		andi.w	#$F,d0
0000D0A2 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000D0A6 47F3 0000                  		lea	(a3,d0.w),a3
0000D0AA 7600                       		moveq	#0,d3
0000D0AC 0828 0006 0028             		btst	#6,$28(a0)
0000D0B2 6700                       		beq.s	loc_BDB2
0000D0B4 7607                       		moveq	#7,d3
0000D0B6                            
0000D0B6                            loc_BDB2:
0000D0B6 4A28 0028                  		tst.b	$28(a0)
0000D0BA 6A00                       		bpl.s	loc_BDBE
0000D0BC 6100 0000                  		bsr.w	Obj32_MZBlock
0000D0C0 6600                       		bne.s	loc_BDC8
0000D0C2                            
0000D0C2                            loc_BDBE:
0000D0C2 4A28 0025                  		tst.b	$25(a0)
0000D0C6 6600                       		bne.s	loc_BDC8
0000D0C8 0793                       		bclr	d3,(a3)
0000D0CA 6000                       		bra.s	loc_BDDE
0000D0CC                            ; ===========================================================================
0000D0CC                            
0000D0CC                            loc_BDC8:
0000D0CC 4A13                       		tst.b	(a3)
0000D0CE 6600                       		bne.s	loc_BDD6
0000D0D0 303C 00CD                  		move.w	#$CD,d0
0000D0D4 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play switch sound
0000D0DA                            
0000D0DA                            loc_BDD6:
0000D0DA 07D3                       		bset	d3,(a3)
0000D0DC 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000D0E2                            
0000D0E2                            loc_BDDE:
0000D0E2 0828 0005 0028             		btst	#5,$28(a0)
0000D0E8 6700                       		beq.s	Obj32_Display
0000D0EA 5328 001E                  		subq.b	#1,$1E(a0)
0000D0EE 6A00                       		bpl.s	Obj32_Display
0000D0F0 117C 0007 001E             		move.b	#7,$1E(a0)
0000D0F6 0868 0001 001A             		bchg	#1,$1A(a0)
0000D0FC                            
0000D0FC                            Obj32_Display:
0000D0FC 6100 0000                  		bsr.w	DisplaySprite
0000D100 3028 0008                  		move.w	8(a0),d0
0000D104 0240 FF80                  		andi.w	#$FF80,d0
0000D108 3238 F700                  		move.w	($FFFFF700).w,d1
0000D10C 0441 0080                  		subi.w	#$80,d1
0000D110 0241 FF80                  		andi.w	#$FF80,d1
0000D114 9041                       		sub.w	d1,d0
0000D116 0C40 0280                  		cmpi.w	#$280,d0
0000D11A 6300                       		bls.s	Obj32_NoDel
0000D11C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D120 6700                       		beq.s	Obj32_Delete		; if it's zero, don't remember object
0000D122 3440                       		movea.w	d0,a2	; load address into a2
0000D124 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000D128 6000                       		bra.s	Obj32_Delete	; and delete object
0000D12A                            
0000D12A                            Obj32_NoDel:
0000D12A 4E75                       		rts	
0000D12C                            ; ===========================================================================
0000D12C                            
0000D12C                            Obj32_Delete:
0000D12C 6100 0000                  		bsr.w	DeleteObject
0000D130 4E75                       		rts	
0000D132                            
0000D132                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D132                            
0000D132                            
0000D132                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000D132 3F03                       		move.w	d3,-(sp)
0000D134 3428 0008                  		move.w	8(a0),d2
0000D138 3628 000C                  		move.w	$C(a0),d3
0000D13C 0442 0010                  		subi.w	#$10,d2
0000D140 5143                       		subq.w	#8,d3
0000D142 383C 0020                  		move.w	#$20,d4
0000D146 3A3C 0010                  		move.w	#$10,d5
0000D14A 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000D14E 3C3C 005F                  		move.w	#$5F,d6
0000D152                            
0000D152                            Obj32_MZLoop:
0000D152 4A29 0001                  		tst.b	1(a1)
0000D156 6A00                       		bpl.s	loc_BE4E
0000D158 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000D15C 6700                       		beq.s	loc_BE5E	; if yes, branch
0000D15E                            
0000D15E                            loc_BE4E:
0000D15E 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000D162 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000D166                            
0000D166 361F                       		move.w	(sp)+,d3
0000D168 7000                       		moveq	#0,d0
0000D16A                            
0000D16A                            locret_BE5A:
0000D16A 4E75                       		rts	
0000D16C                            ; ===========================================================================
0000D16C 1010                       Obj32_MZData:	dc.b $10, $10
0000D16E                            ; ===========================================================================
0000D16E                            
0000D16E                            loc_BE5E:				; XREF: Obj32_MZBlock
0000D16E 7001                       		moveq	#1,d0
0000D170 0240 003F                  		andi.w	#$3F,d0
0000D174 D040                       		add.w	d0,d0
0000D176 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000D17A 121A                       		move.b	(a2)+,d1
0000D17C 4881                       		ext.w	d1
0000D17E 3029 0008                  		move.w	8(a1),d0
0000D182 9041                       		sub.w	d1,d0
0000D184 9042                       		sub.w	d2,d0
0000D186 6400                       		bcc.s	loc_BE80
0000D188 D241                       		add.w	d1,d1
0000D18A D041                       		add.w	d1,d0
0000D18C 6500                       		bcs.s	loc_BE84
0000D18E 60CE                       		bra.s	loc_BE4E
0000D190                            ; ===========================================================================
0000D190                            
0000D190                            loc_BE80:
0000D190 B044                       		cmp.w	d4,d0
0000D192 62CA                       		bhi.s	loc_BE4E
0000D194                            
0000D194                            loc_BE84:
0000D194 121A                       		move.b	(a2)+,d1
0000D196 4881                       		ext.w	d1
0000D198 3029 000C                  		move.w	$C(a1),d0
0000D19C 9041                       		sub.w	d1,d0
0000D19E 9043                       		sub.w	d3,d0
0000D1A0 6400                       		bcc.s	loc_BE9A
0000D1A2 D241                       		add.w	d1,d1
0000D1A4 D041                       		add.w	d1,d0
0000D1A6 6500                       		bcs.s	loc_BE9E
0000D1A8 60B4                       		bra.s	loc_BE4E
0000D1AA                            ; ===========================================================================
0000D1AA                            
0000D1AA                            loc_BE9A:
0000D1AA B045                       		cmp.w	d5,d0
0000D1AC 62B0                       		bhi.s	loc_BE4E
0000D1AE                            
0000D1AE                            loc_BE9E:
0000D1AE 361F                       		move.w	(sp)+,d3
0000D1B0 7001                       		moveq	#1,d0
0000D1B2 4E75                       		rts	
0000D1B4                            ; End of function Obj32_MZBlock
0000D1B4                            
0000D1B4                            ; ===========================================================================
0000D1B4                            ; ---------------------------------------------------------------------------
0000D1B4                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D1B4                            ; ---------------------------------------------------------------------------
0000D1B4                            Map_obj32:
0000D1B4                            	include "_maps\obj32.asm"
0000D1B4                            ; ---------------------------------------------------------------------------
0000D1B4                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D1B4                            ; ---------------------------------------------------------------------------
0000D1B4 0000                       		dc.w byte_BEAC-Map_obj32
0000D1B6 0000                       		dc.w byte_BEB7-Map_obj32
0000D1B8 0000                       		dc.w byte_BEC2-Map_obj32
0000D1BA 0000                       		dc.w byte_BEB7-Map_obj32
0000D1BC 02                         byte_BEAC:	dc.b 2
0000D1BD F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000D1C2 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000D1C7 02                         byte_BEB7:	dc.b 2
0000D1C8 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000D1CD F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000D1D2 02                         byte_BEC2:	dc.b 2
0000D1D3 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000D1D8 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000D1DD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D1E2                            		even
0000D1E2                            		even
0000D1E2                            
0000D1E2                            ; ===========================================================================
0000D1E2                            ; ---------------------------------------------------------------------------
0000D1E2                            ; Object 33 - pushable blocks (MZ, LZ)
0000D1E2                            ; ---------------------------------------------------------------------------
0000D1E2                            
0000D1E2                            Obj33:					; XREF: Obj_Index
0000D1E2 7000                       		moveq	#0,d0
0000D1E4 1028 0024                  		move.b	$24(a0),d0
0000D1E8 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000D1EC 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000D1F0                            ; ===========================================================================
0000D1F0 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000D1F2 0000                       		dc.w loc_BF6E-Obj33_Index
0000D1F4 0000                       		dc.w loc_C02C-Obj33_Index
0000D1F6                            
0000D1F6 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000D1F8 4001                       		dc.b $40, 1
0000D1FA                            ; ===========================================================================
0000D1FA                            
0000D1FA                            Obj33_Main:				; XREF: Obj33_Index
0000D1FA 5428 0024                  		addq.b	#2,$24(a0)
0000D1FE 117C 000F 0016             		move.b	#$F,$16(a0)
0000D204 117C 000F 0017             		move.b	#$F,$17(a0)
0000D20A 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000D212 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000D218 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000D21E 6600                       		bne.s	loc_BF16
0000D220 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000D226                            
0000D226                            loc_BF16:
0000D226 117C 0004 0001             		move.b	#4,1(a0)
0000D22C 117C 0003 0018             		move.b	#3,$18(a0)
0000D232 3168 0008 0034             		move.w	8(a0),$34(a0)
0000D238 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000D23E 7000                       		moveq	#0,d0
0000D240 1028 0028                  		move.b	$28(a0),d0
0000D244 D040                       		add.w	d0,d0
0000D246 0240 000E                  		andi.w	#$E,d0
0000D24A 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000D24E 115A 0019                  		move.b	(a2)+,$19(a0)
0000D252 115A 001A                  		move.b	(a2)+,$1A(a0)
0000D256 4A28 0028                  		tst.b	$28(a0)
0000D25A 6700                       		beq.s	Obj33_ChkGone
0000D25C 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000D262                            
0000D262                            Obj33_ChkGone:
0000D262 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D266 6700                       		beq.s	loc_BF6E		; if it's zero, don't remember object
0000D268 3440                       		movea.w	d0,a2	; load address into a2
0000D26A 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000D26E 08D2 0000                  		bset	#0,(a2)
0000D272 6600 0000                  		bne.w	DeleteObject
0000D276                            
0000D276                            loc_BF6E:				; XREF: Obj33_Index
0000D276 4A28 0032                  		tst.b	$32(a0)
0000D27A 6600 0000                  		bne.w	loc_C046
0000D27E 7200                       		moveq	#0,d1
0000D280 1228 0019                  		move.b	$19(a0),d1
0000D284 0641 000B                  		addi.w	#$B,d1
0000D288 343C 0010                  		move.w	#$10,d2
0000D28C 363C 0011                  		move.w	#$11,d3
0000D290 3828 0008                  		move.w	8(a0),d4
0000D294 6100 0000                  		bsr.w	loc_C186
0000D298 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000D29E 6600                       		bne.s	loc_BFC6	; if not, branch
0000D2A0 08A8 0007 0028             		bclr	#7,$28(a0)
0000D2A6 3028 0008                  		move.w	8(a0),d0
0000D2AA 0C40 0A20                  		cmpi.w	#$A20,d0
0000D2AE 6500                       		bcs.s	loc_BFC6
0000D2B0 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000D2B4 6400                       		bcc.s	loc_BFC6
0000D2B6 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000D2BA 0440 001C                  		subi.w	#$1C,d0
0000D2BE 3140 000C                  		move.w	d0,$C(a0)
0000D2C2 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000D2C8 08E8 0007 0028             		bset	#7,$28(a0)
0000D2CE                            
0000D2CE                            loc_BFC6:
0000D2CE 3028 0008                  		move.w	8(a0),d0
0000D2D2 0240 FF80                  		andi.w	#$FF80,d0
0000D2D6 3238 F700                  		move.w	($FFFFF700).w,d1
0000D2DA 0441 0080                  		subi.w	#$80,d1
0000D2DE 0241 FF80                  		andi.w	#$FF80,d1
0000D2E2 9041                       		sub.w	d1,d0
0000D2E4 0C40 0280                  		cmpi.w	#$280,d0
0000D2E8 6300 0000                  		bls.w	DisplaySprite
0000D2EC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D2F0 6700                       		beq.s	loc_BFE6	; if it's zero, don't remember object
0000D2F2 3440                       		movea.w	d0,a2	; load address into a2
0000D2F4 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000D2F8                            
0000D2F8                            loc_BFE6:
0000D2F8 3028 0034                  		move.w	$34(a0),d0
0000D2FC 0240 FF80                  		andi.w	#$FF80,d0
0000D300 3238 F700                  		move.w	($FFFFF700).w,d1
0000D304 0441 0080                  		subi.w	#$80,d1
0000D308 0241 FF80                  		andi.w	#$FF80,d1
0000D30C 9041                       		sub.w	d1,d0
0000D30E 0C40 0280                  		cmpi.w	#$280,d0
0000D312 6200                       		bhi.s	loc_C016
0000D314 3168 0034 0008             		move.w	$34(a0),8(a0)
0000D31A 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000D320 117C 0004 0024             		move.b	#4,$24(a0)
0000D326 6000                       		bra.s	loc_C02C
0000D328                            ; ===========================================================================
0000D328                            
0000D328                            loc_C016:
0000D328 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D32C 6700                       		beq.s	loc_C028		; if it's zero, don't remember object
0000D32E 3440                       		movea.w	d0,a2	; load address into a2
0000D330 0892 0000                  		bclr	#0,(a2)
0000D334                            
0000D334                            loc_C028:
0000D334 6000 0000                  		bra.w	DeleteObject
0000D338                            ; ===========================================================================
0000D338                            
0000D338                            loc_C02C:				; XREF: Obj33_Index
0000D338 6100 0000                  		bsr.w	ChkObjOnScreen2
0000D33C 6700                       		beq.s	locret_C044
0000D33E 117C 0002 0024             		move.b	#2,$24(a0)
0000D344 4228 0032                  		clr.b	$32(a0)
0000D348 4268 0010                  		clr.w	$10(a0)
0000D34C 4268 0012                  		clr.w	$12(a0)
0000D350                            
0000D350                            locret_C044:
0000D350 4E75                       		rts	
0000D352                            ; ===========================================================================
0000D352                            
0000D352                            loc_C046:				; XREF: loc_BF6E
0000D352 3F28 0008                  		move.w	8(a0),-(sp)
0000D356 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000D35C 6400                       		bcc.s	loc_C056
0000D35E 6100 0000                  		bsr.w	SpeedToPos
0000D362                            
0000D362                            loc_C056:
0000D362 0828 0001 0022             		btst	#1,$22(a0)
0000D368 6700                       		beq.s	loc_C0A0
0000D36A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D370 4EB9 0000 0000             		jsr	ObjHitFloor
0000D376 4A41                       		tst.w	d1
0000D378 6A00 0000                  		bpl.w	loc_C09E
0000D37C D368 000C                  		add.w	d1,$C(a0)
0000D380 4268 0012                  		clr.w	$12(a0)
0000D384 08A8 0001 0022             		bclr	#1,$22(a0)
0000D38A 3011                       		move.w	(a1),d0
0000D38C 0240 03FF                  		andi.w	#$3FF,d0
0000D390 0C40 016A                  		cmpi.w	#$16A,d0
0000D394 6500                       		bcs.s	loc_C09E
0000D396 3028 0030                  		move.w	$30(a0),d0
0000D39A E640                       		asr.w	#3,d0
0000D39C 3140 0010                  		move.w	d0,$10(a0)
0000D3A0 117C 0001 0032             		move.b	#1,$32(a0)
0000D3A6 4268 000E                  		clr.w	$E(a0)
0000D3AA                            
0000D3AA                            loc_C09E:
0000D3AA 6000                       		bra.s	loc_C0E6
0000D3AC                            ; ===========================================================================
0000D3AC                            
0000D3AC                            loc_C0A0:
0000D3AC 4A68 0010                  		tst.w	$10(a0)
0000D3B0 6700 0000                  		beq.w	loc_C0D6
0000D3B4 6B00                       		bmi.s	loc_C0BC
0000D3B6 7600                       		moveq	#0,d3
0000D3B8 1628 0019                  		move.b	$19(a0),d3
0000D3BC 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D3C2 4A41                       		tst.w	d1		; has block touched a wall?
0000D3C4 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D3C6 6000                       		bra.s	loc_C0E6
0000D3C8                            ; ===========================================================================
0000D3C8                            
0000D3C8                            loc_C0BC:
0000D3C8 7600                       		moveq	#0,d3
0000D3CA 1628 0019                  		move.b	$19(a0),d3
0000D3CE 4643                       		not.w	d3
0000D3D0 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D3D6 4A41                       		tst.w	d1		; has block touched a wall?
0000D3D8 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D3DA 6000                       		bra.s	loc_C0E6
0000D3DC                            ; ===========================================================================
0000D3DC                            
0000D3DC                            Obj33_StopPush:
0000D3DC 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000D3E0 6000                       		bra.s	loc_C0E6
0000D3E2                            ; ===========================================================================
0000D3E2                            
0000D3E2                            loc_C0D6:
0000D3E2 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000D3EA 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000D3F0 6400                       		bcc.s	loc_C104
0000D3F2                            
0000D3F2                            loc_C0E6:
0000D3F2 7200                       		moveq	#0,d1
0000D3F4 1228 0019                  		move.b	$19(a0),d1
0000D3F8 0641 000B                  		addi.w	#$B,d1
0000D3FC 343C 0010                  		move.w	#$10,d2
0000D400 363C 0011                  		move.w	#$11,d3
0000D404 381F                       		move.w	(sp)+,d4
0000D406 6100 0000                  		bsr.w	loc_C186
0000D40A 6100                       		bsr.s	Obj33_ChkLava
0000D40C 6000 FEC0                  		bra.w	loc_BFC6
0000D410                            ; ===========================================================================
0000D410                            
0000D410                            loc_C104:
0000D410 381F                       		move.w	(sp)+,d4
0000D412 43F8 D000                  		lea	($FFFFD000).w,a1
0000D416 08A9 0003 0022             		bclr	#3,$22(a1)
0000D41C 08A8 0003 0022             		bclr	#3,$22(a0)
0000D422 6000 FED4                  		bra.w	loc_BFE6
0000D426                            ; ===========================================================================
0000D426                            
0000D426                            Obj33_ChkLava:
0000D426 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000D42C 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000D42E 343C FFE0                  		move.w	#-$20,d2
0000D432 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000D438 6700                       		beq.s	Obj33_LoadLava
0000D43A 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000D440 6700                       		beq.s	Obj33_LoadLava
0000D442 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000D448 6700                       		beq.s	Obj33_LoadLava
0000D44A 4E75                       		rts	
0000D44C                            ; ===========================================================================
0000D44C                            
0000D44C                            Obj33_ChkLava2:
0000D44C 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000D452 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000D454 343C 0020                  		move.w	#$20,d2
0000D458 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000D45E 6700                       		beq.s	Obj33_LoadLava
0000D460 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000D466 6700                       		beq.s	Obj33_LoadLava
0000D468                            
0000D468                            Obj33_NoLava:
0000D468 4E75                       		rts	
0000D46A                            ; ===========================================================================
0000D46A                            
0000D46A                            Obj33_LoadLava:
0000D46A 6100 0000                  		bsr.w	SingleObjLoad
0000D46E 6600                       		bne.s	locret_C184
0000D470 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000D474 3368 0008 0008             		move.w	8(a0),8(a1)
0000D47A D569 0008                  		add.w	d2,8(a1)
0000D47E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D484 0669 0010 000C             		addi.w	#$10,$C(a1)
0000D48A 2348 003C                  		move.l	a0,$3C(a1)
0000D48E                            
0000D48E                            locret_C184:
0000D48E 4E75                       		rts	
0000D490                            ; ===========================================================================
0000D490                            
0000D490                            loc_C186:				; XREF: loc_BF6E
0000D490 1028 0025                  		move.b	$25(a0),d0
0000D494 6700 0000                  		beq.w	loc_C218
0000D498 5500                       		subq.b	#2,d0
0000D49A 6600                       		bne.s	loc_C1AA
0000D49C 6100 B220                  		bsr.w	ExitPlatform
0000D4A0 0829 0003 0022             		btst	#3,$22(a1)
0000D4A6 6600                       		bne.s	loc_C1A4
0000D4A8 4228 0025                  		clr.b	$25(a0)
0000D4AC 4E75                       		rts	
0000D4AE                            ; ===========================================================================
0000D4AE                            
0000D4AE                            loc_C1A4:
0000D4AE 3404                       		move.w	d4,d2
0000D4B0 6000 B776                  		bra.w	MvSonicOnPtfm
0000D4B4                            ; ===========================================================================
0000D4B4                            
0000D4B4                            loc_C1AA:
0000D4B4 5500                       		subq.b	#2,d0
0000D4B6 6600                       		bne.s	loc_C1F2
0000D4B8 6100 0000                  		bsr.w	SpeedToPos
0000D4BC 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D4C2 4EB9 0000 0000             		jsr	ObjHitFloor
0000D4C8 4A41                       		tst.w	d1
0000D4CA 6A00 0000                  		bpl.w	locret_C1F0
0000D4CE D368 000C                  		add.w	d1,$C(a0)
0000D4D2 4268 0012                  		clr.w	$12(a0)
0000D4D6 4228 0025                  		clr.b	$25(a0)
0000D4DA 3011                       		move.w	(a1),d0
0000D4DC 0240 03FF                  		andi.w	#$3FF,d0
0000D4E0 0C40 016A                  		cmpi.w	#$16A,d0
0000D4E4 6500                       		bcs.s	locret_C1F0
0000D4E6 3028 0030                  		move.w	$30(a0),d0
0000D4EA E640                       		asr.w	#3,d0
0000D4EC 3140 0010                  		move.w	d0,$10(a0)
0000D4F0 117C 0001 0032             		move.b	#1,$32(a0)
0000D4F6 4268 000E                  		clr.w	$E(a0)
0000D4FA                            
0000D4FA                            locret_C1F0:
0000D4FA 4E75                       		rts	
0000D4FC                            ; ===========================================================================
0000D4FC                            
0000D4FC                            loc_C1F2:
0000D4FC 6100 0000                  		bsr.w	SpeedToPos
0000D500 3028 0008                  		move.w	8(a0),d0
0000D504 0240 000C                  		andi.w	#$C,d0
0000D508 6600 0000                  		bne.w	locret_C2E4
0000D50C 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000D512 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000D518 4268 0010                  		clr.w	$10(a0)
0000D51C 5528 0025                  		subq.b	#2,$25(a0)
0000D520 4E75                       		rts	
0000D522                            ; ===========================================================================
0000D522                            
0000D522                            loc_C218:
0000D522 6100 0000                  		bsr.w	loc_FAC8
0000D526 4A44                       		tst.w	d4
0000D528 6700 0000                  		beq.w	locret_C2E4
0000D52C 6B00 0000                  		bmi.w	locret_C2E4
0000D530 4A28 0032                  		tst.b	$32(a0)
0000D534 6700                       		beq.s	loc_C230
0000D536 6000 0000                  		bra.w	locret_C2E4
0000D53A                            ; ===========================================================================
0000D53A                            
0000D53A                            loc_C230:
0000D53A 4A40                       		tst.w	d0
0000D53C 6700 0000                  		beq.w	locret_C2E4
0000D540 6B00                       		bmi.s	loc_C268
0000D542 0829 0000 0022             		btst	#0,$22(a1)
0000D548 6600 0000                  		bne.w	locret_C2E4
0000D54C 3F00                       		move.w	d0,-(sp)
0000D54E 7600                       		moveq	#0,d3
0000D550 1628 0019                  		move.b	$19(a0),d3
0000D554 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D55A 301F                       		move.w	(sp)+,d0
0000D55C 4A41                       		tst.w	d1
0000D55E 6B00 0000                  		bmi.w	locret_C2E4
0000D562 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000D56A 7001                       		moveq	#1,d0
0000D56C 323C 0040                  		move.w	#$40,d1
0000D570 6000                       		bra.s	loc_C294
0000D572                            ; ===========================================================================
0000D572                            
0000D572                            loc_C268:
0000D572 0829 0000 0022             		btst	#0,$22(a1)
0000D578 6700                       		beq.s	locret_C2E4
0000D57A 3F00                       		move.w	d0,-(sp)
0000D57C 7600                       		moveq	#0,d3
0000D57E 1628 0019                  		move.b	$19(a0),d3
0000D582 4643                       		not.w	d3
0000D584 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D58A 301F                       		move.w	(sp)+,d0
0000D58C 4A41                       		tst.w	d1
0000D58E 6B00                       		bmi.s	locret_C2E4
0000D590 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000D598 70FF                       		moveq	#-1,d0
0000D59A 323C FFC0                  		move.w	#-$40,d1
0000D59E                            
0000D59E                            loc_C294:
0000D59E 43F8 D000                  		lea	($FFFFD000).w,a1
0000D5A2 D169 0008                  		add.w	d0,8(a1)
0000D5A6 3341 0020                  		move.w	d1,$20(a1)
0000D5AA 337C 0000 0010             		move.w	#0,$10(a1)
0000D5B0 3F00                       		move.w	d0,-(sp)
0000D5B2 303C 00A7                  		move.w	#$A7,d0
0000D5B6 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play pushing sound
0000D5BC 301F                       		move.w	(sp)+,d0
0000D5BE 4A28 0028                  		tst.b	$28(a0)
0000D5C2 6B00                       		bmi.s	locret_C2E4
0000D5C4 3F00                       		move.w	d0,-(sp)
0000D5C6 4EB9 0000 0000             		jsr	ObjHitFloor
0000D5CC 301F                       		move.w	(sp)+,d0
0000D5CE 0C41 0004                  		cmpi.w	#4,d1
0000D5D2 6F00                       		ble.s	loc_C2E0
0000D5D4 317C 0400 0010             		move.w	#$400,$10(a0)
0000D5DA 4A40                       		tst.w	d0
0000D5DC 6A00                       		bpl.s	loc_C2D8
0000D5DE 4468 0010                  		neg.w	$10(a0)
0000D5E2                            
0000D5E2                            loc_C2D8:
0000D5E2 117C 0006 0025             		move.b	#6,$25(a0)
0000D5E8 6000                       		bra.s	locret_C2E4
0000D5EA                            ; ===========================================================================
0000D5EA                            
0000D5EA                            loc_C2E0:
0000D5EA D368 000C                  		add.w	d1,$C(a0)
0000D5EE                            
0000D5EE                            locret_C2E4:
0000D5EE 4E75                       		rts	
0000D5F0                            ; ===========================================================================
0000D5F0                            ; ---------------------------------------------------------------------------
0000D5F0                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000D5F0                            ; ---------------------------------------------------------------------------
0000D5F0                            Map_obj33:
0000D5F0                            	include "_maps\obj33.asm"
0000D5F0                            ; ---------------------------------------------------------------------------
0000D5F0                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000D5F0                            ; ---------------------------------------------------------------------------
0000D5F0 0000                       		dc.w byte_C2EA-Map_obj33
0000D5F2 0000                       		dc.w byte_C2F0-Map_obj33
0000D5F4 01                         byte_C2EA:	dc.b 1
0000D5F5 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000D5FA 04                         byte_C2F0:	dc.b 4
0000D5FB F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000D600 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000D605 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000D60A F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000D610 00                         		even
0000D610 00                         		even
0000D610                            
0000D610                            ; ===========================================================================
0000D610                            ; ---------------------------------------------------------------------------
0000D610                            ; Object 34 - zone title cards
0000D610                            ; ---------------------------------------------------------------------------
0000D610                            
0000D610                            Obj34:					; XREF: Obj_Index
0000D610 7000                       		moveq	#0,d0
0000D612 1028 0024                  		move.b	$24(a0),d0
0000D616 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000D61A 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000D61E                            ; ===========================================================================
0000D61E 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000D620 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000D622 0000                       		dc.w Obj34_Wait-Obj34_Index
0000D624 0000                       		dc.w Obj34_Wait-Obj34_Index
0000D626                            ; ===========================================================================
0000D626                            
0000D626                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000D626 2248                       		movea.l	a0,a1
0000D628 7000                       		moveq	#0,d0
0000D62A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D62E 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000D634 6600                       		bne.s	Obj34_CheckFZ
0000D636 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000D638                            
0000D638                            Obj34_CheckFZ:
0000D638 3400                       		move.w	d0,d2
0000D63A 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000D640 6600                       		bne.s	Obj34_LoadConfig
0000D642 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000D644 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000D646                            
0000D646                            Obj34_LoadConfig:
0000D646 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000D64C E948                       		lsl.w	#4,d0
0000D64E D6C0                       		adda.w	d0,a3
0000D650 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000D656 7203                       		moveq	#3,d1
0000D658                            
0000D658                            Obj34_Loop:
0000D658 12BC 0034                  		move.b	#$34,0(a1)
0000D65C 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000D660 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000D664 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000D668 335A 000A                  		move.w	(a2)+,$A(a1)
0000D66C 135A 0024                  		move.b	(a2)+,$24(a1)
0000D670 101A                       		move.b	(a2)+,d0
0000D672 6600                       		bne.s	Obj34_ActNumber
0000D674 1002                       		move.b	d2,d0
0000D676                            
0000D676                            Obj34_ActNumber:
0000D676 0C00 0007                  		cmpi.b	#7,d0
0000D67A 6600                       		bne.s	Obj34_MakeSprite
0000D67C D038 FE11                  		add.b	($FFFFFE11).w,d0
0000D680 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000D686 6600                       		bne.s	Obj34_MakeSprite
0000D688 5300                       		subq.b	#1,d0
0000D68A                            
0000D68A                            Obj34_MakeSprite:
0000D68A 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000D68E 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000D696 337C 8580 0002             		move.w	#$8580,2(a1)
0000D69C 137C 0078 0019             		move.b	#$78,$19(a1)
0000D6A2 137C 0000 0001             		move.b	#0,1(a1)
0000D6A8 137C 0000 0018             		move.b	#0,$18(a1)
0000D6AE 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000D6B4 43E9 0040                  		lea	$40(a1),a1	; next object
0000D6B8 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000D6BC                            
0000D6BC                            Obj34_ChkPos:				; XREF: Obj34_Index
0000D6BC 7210                       		moveq	#$10,d1		; set horizontal speed
0000D6BE 3028 0030                  		move.w	$30(a0),d0
0000D6C2 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000D6C6 6700                       		beq.s	loc_C3C8	; if yes, branch
0000D6C8 6C00                       		bge.s	Obj34_Move
0000D6CA 4441                       		neg.w	d1
0000D6CC                            
0000D6CC                            Obj34_Move:
0000D6CC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D6D0                            
0000D6D0                            loc_C3C8:
0000D6D0 3028 0008                  		move.w	8(a0),d0
0000D6D4 6B00                       		bmi.s	locret_C3D8
0000D6D6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D6DA 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000D6DC 6000 0000                  		bra.w	DisplaySprite
0000D6E0                            ; ===========================================================================
0000D6E0                            
0000D6E0                            locret_C3D8:
0000D6E0 4E75                       		rts	
0000D6E2                            ; ===========================================================================
0000D6E2                            
0000D6E2                            Obj34_Wait:				; XREF: Obj34_Index
0000D6E2 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000D6E6 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000D6E8 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000D6EC 6000 0000                  		bra.w	DisplaySprite
0000D6F0                            ; ===========================================================================
0000D6F0                            
0000D6F0                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000D6F0 4A28 0001                  		tst.b	1(a0)
0000D6F4 6A00                       		bpl.s	Obj34_ChangeArt
0000D6F6 7220                       		moveq	#$20,d1
0000D6F8 3028 0032                  		move.w	$32(a0),d0
0000D6FC B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000D700 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000D702 6C00                       		bge.s	Obj34_Move2
0000D704 4441                       		neg.w	d1
0000D706                            
0000D706                            Obj34_Move2:
0000D706 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D70A 3028 0008                  		move.w	8(a0),d0
0000D70E 6B00                       		bmi.s	locret_C412
0000D710 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D714 6400                       		bcc.s	locret_C412	; if yes, branch
0000D716 6000 0000                  		bra.w	DisplaySprite
0000D71A                            ; ===========================================================================
0000D71A                            
0000D71A                            locret_C412:
0000D71A 4E75                       		rts	
0000D71C                            ; ===========================================================================
0000D71C                            
0000D71C                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000D71C 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D722 6600                       		bne.s	Obj34_Delete
0000D724 7002                       		moveq	#2,d0
0000D726 4EB9 0000 1434             		jsr	(LoadPLC).l	; load explosion patterns
0000D72C 7000                       		moveq	#0,d0
0000D72E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D732 0640 0015                  		addi.w	#$15,d0
0000D736 4EB9 0000 1434             		jsr	(LoadPLC).l	; load animal patterns
0000D73C                            
0000D73C                            Obj34_Delete:
0000D73C 6000 0000                  		bra.w	DeleteObject
0000D740                            ; ===========================================================================
0000D740 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000D742 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000D744 00E4                       		dc.w $E4
0000D746 0206                       		dc.b 2,	6
0000D748 00EA                       		dc.w $EA
0000D74A 0207                       		dc.b 2,	7
0000D74C 00E0                       		dc.w $E0
0000D74E 020A                       		dc.b 2,	$A
0000D750                            ; ---------------------------------------------------------------------------
0000D750                            ; Title	card configuration data
0000D750                            ; Format:
0000D750                            ; 4 bytes per item (YYYY XXXX)
0000D750                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000D750                            ; ---------------------------------------------------------------------------
0000D750 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D760 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000D770 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000D780 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000D790 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000D7A0 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000D7B0 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000D7C0                            ; ===========================================================================
0000D7C0                            ; ---------------------------------------------------------------------------
0000D7C0                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000D7C0                            ; ---------------------------------------------------------------------------
0000D7C0                            
0000D7C0                            Obj39:					; XREF: Obj_Index
0000D7C0 7000                       		moveq	#0,d0
0000D7C2 1028 0024                  		move.b	$24(a0),d0
0000D7C6 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000D7CA 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000D7CE                            ; ===========================================================================
0000D7CE 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000D7D0 0000                       		dc.w loc_C50C-Obj39_Index
0000D7D2 0000                       		dc.w Obj39_Wait-Obj39_Index
0000D7D4                            ; ===========================================================================
0000D7D4                            
0000D7D4                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000D7D4 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D7D8 6700                       		beq.s	Obj39_Main	; if yes, branch
0000D7DA 4E75                       		rts	
0000D7DC                            ; ===========================================================================
0000D7DC                            
0000D7DC                            Obj39_Main:
0000D7DC 5428 0024                  		addq.b	#2,$24(a0)
0000D7E0 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000D7E6 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000D7EC 6700                       		beq.s	loc_C4EC	; if not, branch
0000D7EE 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000D7F4                            
0000D7F4                            loc_C4EC:
0000D7F4 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000D7FA 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000D802 317C 855E 0002             		move.w	#$855E,2(a0)
0000D808 117C 0000 0001             		move.b	#0,1(a0)
0000D80E 117C 0000 0018             		move.b	#0,$18(a0)
0000D814                            
0000D814                            loc_C50C:				; XREF: Obj39_Index
0000D814 7210                       		moveq	#$10,d1		; set horizontal speed
0000D816 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000D81C 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000D81E 6500                       		bcs.s	Obj39_Move
0000D820 4441                       		neg.w	d1
0000D822                            
0000D822                            Obj39_Move:
0000D822 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D826 6000 0000                  		bra.w	DisplaySprite
0000D82A                            ; ===========================================================================
0000D82A                            
0000D82A                            Obj39_SetWait:				; XREF: Obj39_Main
0000D82A 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000D830 5428 0024                  		addq.b	#2,$24(a0)
0000D834 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0000D83A 4A38 FE18                  		tst.b	($FFFFFE18).w
0000D83E 6600                       		bne.s	@nocontinues
0000D840 11FC 0009 F5CE             		move.b	#face_meltdown,(SonimeSST+sonime_face).w
0000D846                            
0000D846                            	@nocontinues:
0000D846 4E75                       		rts	
0000D848                            ; ===========================================================================
0000D848                            
0000D848                            Obj39_Wait:				; XREF: Obj39_Index
0000D848 1038 F605                  		move.b	($FFFFF605).w,d0
0000D84C 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000D850 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000D852 0828 0000 001A             		btst	#0,$1A(a0)
0000D858 6600                       		bne.s	Obj39_Display
0000D85A 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000D85E 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000D860 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D864 6000 0000                  		bra.w	DisplaySprite
0000D868                            ; ===========================================================================
0000D868                            
0000D868                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000D868 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000D86C 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000D86E 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000D874 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000D878 6600                       		bne.s	Obj39_Display	; if yes, branch
0000D87A 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set mode to 0 (Sega screen)
0000D880 6000                       		bra.s	Obj39_Display
0000D882                            ; ===========================================================================
0000D882                            
0000D882                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000D882 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D888                            
0000D888                            Obj39_Display:				; XREF: Obj39_ChgMode
0000D888 6000 0000                  		bra.w	DisplaySprite
0000D88C                            ; ===========================================================================
0000D88C                            ; ---------------------------------------------------------------------------
0000D88C                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000D88C                            ; ---------------------------------------------------------------------------
0000D88C                            
0000D88C                            Obj3A:					; XREF: Obj_Index
0000D88C 7000                       		moveq	#0,d0
0000D88E 1028 0024                  		move.b	$24(a0),d0
0000D892 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000D896 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000D89A                            ; ===========================================================================
0000D89A 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000D89C 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000D89E 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D8A0 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000D8A2 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D8A4 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000D8A6 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D8A8 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000D8AA 0000                       		dc.w loc_C766-Obj3A_Index
0000D8AC                            ; ===========================================================================
0000D8AC                            
0000D8AC                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000D8AC 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D8B0 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000D8B2 4E75                       		rts	
0000D8B4                            ; ===========================================================================
0000D8B4                            
0000D8B4                            Obj3A_Main:
0000D8B4 2248                       		movea.l	a0,a1
0000D8B6 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000D8BC 7206                       		moveq	#6,d1
0000D8BE                            
0000D8BE                            Obj3A_Loop:
0000D8BE 12BC 003A                  		move.b	#$3A,0(a1)
0000D8C2 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000D8C6 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000D8CA 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D8CE 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D8D2 135A 0024                  		move.b	(a2)+,$24(a1)
0000D8D6 101A                       		move.b	(a2)+,d0
0000D8D8 0C00 0006                  		cmpi.b	#6,d0
0000D8DC 6600                       		bne.s	loc_C5CA
0000D8DE D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000D8E2                            
0000D8E2                            loc_C5CA:
0000D8E2 1340 001A                  		move.b	d0,$1A(a1)
0000D8E6 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000D8EE 337C 8580 0002             		move.w	#$8580,2(a1)
0000D8F4 137C 0000 0001             		move.b	#0,1(a1)
0000D8FA 43E9 0040                  		lea	$40(a1),a1
0000D8FE 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000D902                            
0000D902                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000D902 7210                       		moveq	#$10,d1		; set horizontal speed
0000D904 3028 0030                  		move.w	$30(a0),d0
0000D908 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D90C 6700                       		beq.s	loc_C61A	; if yes, branch
0000D90E 6C00                       		bge.s	Obj3A_Move
0000D910 4441                       		neg.w	d1
0000D912                            
0000D912                            Obj3A_Move:
0000D912 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D916                            
0000D916                            loc_C5FE:				; XREF: loc_C61A
0000D916 3028 0008                  		move.w	8(a0),d0
0000D91A 6B00                       		bmi.s	locret_C60E
0000D91C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D920 6400                       		bcc.s	locret_C60E	; if yes, branch
0000D922 6000 0000                  		bra.w	DisplaySprite
0000D926                            ; ===========================================================================
0000D926                            
0000D926                            locret_C60E:
0000D926 4E75                       		rts	
0000D928                            ; ===========================================================================
0000D928                            
0000D928                            loc_C610:				; XREF: loc_C61A
0000D928 117C 000E 0024             		move.b	#$E,$24(a0)
0000D92E 6000 0000                  		bra.w	Obj3A_ChkPos2
0000D932                            ; ===========================================================================
0000D932                            
0000D932                            loc_C61A:				; XREF: Obj3A_ChkPos
0000D932 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000D938 67EE                       		beq.s	loc_C610
0000D93A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D940 66D4                       		bne.s	loc_C5FE
0000D942 5428 0024                  		addq.b	#2,$24(a0)
0000D946 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D94C                            
0000D94C                            Obj3A_Wait:				; XREF: Obj3A_Index
0000D94C 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D950 6600                       		bne.s	Obj3A_Display
0000D952 5428 0024                  		addq.b	#2,$24(a0)
0000D956                            
0000D956                            Obj3A_Display:
0000D956 6000 0000                  		bra.w	DisplaySprite
0000D95A                            ; ===========================================================================
0000D95A                            
0000D95A                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000D95A 6100 0000                  		bsr.w	DisplaySprite
0000D95E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000D964 7000                       		moveq	#0,d0
0000D966 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000D96A 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000D96C 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D970 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000D976                            
0000D976                            Obj3A_RingBonus:
0000D976 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D97A 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000D97C 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D980 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D986                            
0000D986                            Obj3A_ChkBonus:
0000D986 4A40                       		tst.w	d0		; is there any bonus?
0000D988 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000D98A 303C 00C5                  		move.w	#$C5,d0
0000D98E 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D994 5428 0024                  		addq.b	#2,$24(a0)
0000D998 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000D99E 6600                       		bne.s	Obj3A_SetDelay
0000D9A0 5828 0024                  		addq.b	#4,$24(a0)
0000D9A4                            
0000D9A4                            Obj3A_SetDelay:
0000D9A4 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D9AA                            
0000D9AA                            locret_C692:
0000D9AA 4E75                       		rts	
0000D9AC                            ; ===========================================================================
0000D9AC                            
0000D9AC                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000D9AC 4EB9 0000 0000             		jsr	AddPoints
0000D9B2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D9B6 0200 0003                  		andi.b	#3,d0
0000D9BA 66EE                       		bne.s	locret_C692
0000D9BC 303C 00CD                  		move.w	#$CD,d0
0000D9C0 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D9C6                            ; ===========================================================================
0000D9C6                            
0000D9C6                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000D9C6 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D9CA 0240 0007                  		andi.w	#7,d0
0000D9CE E748                       		lsl.w	#3,d0
0000D9D0 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000D9D4 0241 0003                  		andi.w	#3,d1
0000D9D8 D241                       		add.w	d1,d1
0000D9DA D041                       		add.w	d1,d0
0000D9DC 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000D9E0 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000D9E4 4A40                       		tst.w	d0
0000D9E6 6600                       		bne.s	Obj3A_ChkSS
0000D9E8 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to level (00)
0000D9EE 6000                       		bra.s	Obj3A_Display2
0000D9F0                            ; ===========================================================================
0000D9F0                            
0000D9F0                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000D9F0 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000D9F4 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000D9F8 6700                       		beq.s	loc_C6EA	; if not, branch
0000D9FA 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000DA00 6000                       		bra.s	Obj3A_Display2
0000DA02                            ; ===========================================================================
0000DA02                            
0000DA02                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000DA02 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000DA08                            
0000DA08                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000DA08 6000 0000                  		bra.w	DisplaySprite
0000DA0C                            ; ===========================================================================
0000DA0C                            ; ---------------------------------------------------------------------------
0000DA0C                            ; Level	order array
0000DA0C                            ; ---------------------------------------------------------------------------
0000DA0C                            LevelOrder:	incbin	misc\lvl_ord.bin
0000DA3C                            		even
0000DA3C                            ; ===========================================================================
0000DA3C                            
0000DA3C                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000DA3C 7220                       		moveq	#$20,d1		; set horizontal speed
0000DA3E 3028 0032                  		move.w	$32(a0),d0
0000DA42 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000DA46 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000DA48 6C00                       		bge.s	Obj3A_Move2
0000DA4A 4441                       		neg.w	d1
0000DA4C                            
0000DA4C                            Obj3A_Move2:
0000DA4C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DA50 3028 0008                  		move.w	8(a0),d0
0000DA54 6B00                       		bmi.s	locret_C748
0000DA56 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DA5A 6400                       		bcc.s	locret_C748	; if yes, branch
0000DA5C 6000 0000                  		bra.w	DisplaySprite
0000DA60                            ; ===========================================================================
0000DA60                            
0000DA60                            locret_C748:
0000DA60 4E75                       		rts	
0000DA62                            ; ===========================================================================
0000DA62                            
0000DA62                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000DA62 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000DA68 6600 0000                  		bne.w	DeleteObject
0000DA6C 5428 0024                  		addq.b	#2,$24(a0)
0000DA70 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000DA74 303C 008D                  		move.w	#$8D,d0
0000DA78 4EF9 0000 11F0             		jmp	(PlaySound).l	; play FZ music
0000DA7E                            ; ===========================================================================
0000DA7E                            
0000DA7E                            loc_C766:				; XREF: Obj3A_Index
0000DA7E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000DA82 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000DA88 6700 0000                  		beq.w	DeleteObject
0000DA8C 4E75                       		rts	
0000DA8E                            ; ===========================================================================
0000DA8E 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000DA94 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000DA96 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000DA9C 0201                       		dc.b 2,	1
0000DA9E 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000DAA4 0206                       		dc.b 2,	6
0000DAA6 0520 0120 00EC             		dc.w $520, $120, $EC
0000DAAC 0202                       		dc.b 2,	2
0000DAAE 0540 0120 00FC             		dc.w $540, $120, $FC
0000DAB4 0203                       		dc.b 2,	3
0000DAB6 0560 0120 010C             		dc.w $560, $120, $10C
0000DABC 0204                       		dc.b 2,	4
0000DABE 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000DAC4 0205                       		dc.b 2,	5
0000DAC6                            ; ===========================================================================
0000DAC6                            ; ---------------------------------------------------------------------------
0000DAC6                            ; Object 7E - special stage results screen
0000DAC6                            ; ---------------------------------------------------------------------------
0000DAC6                            
0000DAC6                            Obj7E:					; XREF: Obj_Index
0000DAC6 7000                       		moveq	#0,d0
0000DAC8 1028 0024                  		move.b	$24(a0),d0
0000DACC 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000DAD0 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000DAD4                            ; ===========================================================================
0000DAD4 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000DAD6 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000DAD8 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000DADA 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000DADC 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000DADE 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000DAE0 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000DAE2 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000DAE4 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000DAE6 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000DAE8 0000                       		dc.w loc_C91A-Obj7E_Index
0000DAEA                            ; ===========================================================================
0000DAEA                            
0000DAEA                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000DAEA 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000DAEE 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000DAF0 4E75                       		rts	
0000DAF2                            ; ===========================================================================
0000DAF2                            
0000DAF2                            Obj7E_Main:
0000DAF2 2248                       		movea.l	a0,a1
0000DAF4 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000DAFA 7203                       		moveq	#3,d1
0000DAFC 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000DB02 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000DB04 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000DB06                            
0000DB06                            Obj7E_Loop:
0000DB06 12BC 007E                  		move.b	#$7E,0(a1)
0000DB0A 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000DB0E 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000DB12 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000DB16 135A 0024                  		move.b	(a2)+,$24(a1)
0000DB1A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000DB1E 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000DB26 337C A580 0002             		move.w	#$A580,2(a1)
0000DB2C 137C 0000 0001             		move.b	#0,1(a1)
0000DB32 43E9 0040                  		lea	$40(a1),a1
0000DB36 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000DB3A                            
0000DB3A 7007                       		moveq	#7,d0
0000DB3C 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000DB40 6700                       		beq.s	loc_C842
0000DB42 7000                       		moveq	#0,d0
0000DB44 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000DB48 6600                       		bne.s	loc_C842	; if not, branch
0000DB4A 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000DB4C 317C 0018 0008             		move.w	#$18,8(a0)
0000DB52 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000DB58                            
0000DB58                            loc_C842:
0000DB58 1140 001A                  		move.b	d0,$1A(a0)
0000DB5C                            
0000DB5C                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000DB5C 7210                       		moveq	#$10,d1		; set horizontal speed
0000DB5E 3028 0030                  		move.w	$30(a0),d0
0000DB62 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000DB66 6700                       		beq.s	loc_C86C	; if yes, branch
0000DB68 6C00                       		bge.s	Obj7E_Move
0000DB6A 4441                       		neg.w	d1
0000DB6C                            
0000DB6C                            Obj7E_Move:
0000DB6C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DB70                            
0000DB70                            loc_C85A:				; XREF: loc_C86C
0000DB70 3028 0008                  		move.w	8(a0),d0
0000DB74 6B00                       		bmi.s	locret_C86A
0000DB76 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DB7A 6400                       		bcc.s	locret_C86A	; if yes, branch
0000DB7C 6000 0000                  		bra.w	DisplaySprite
0000DB80                            ; ===========================================================================
0000DB80                            
0000DB80                            locret_C86A:
0000DB80 4E75                       		rts	
0000DB82                            ; ===========================================================================
0000DB82                            
0000DB82                            loc_C86C:				; XREF: Obj7E_ChkPos
0000DB82 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000DB88 66E6                       		bne.s	loc_C85A
0000DB8A 5428 0024                  		addq.b	#2,$24(a0)
0000DB8E 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000DB94 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000DB9A                            
0000DB9A                            Obj7E_Wait:				; XREF: Obj7E_Index
0000DB9A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000DB9E 6600                       		bne.s	Obj7E_Display
0000DBA0 5428 0024                  		addq.b	#2,$24(a0)
0000DBA4                            
0000DBA4                            Obj7E_Display:
0000DBA4 6000 0000                  		bra.w	DisplaySprite
0000DBA8                            ; ===========================================================================
0000DBA8                            
0000DBA8                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000DBA8 6100 0000                  		bsr.w	DisplaySprite
0000DBAC 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000DBB2 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000DBB6 6700                       		beq.s	loc_C8C4	; if yes, branch
0000DBB8 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000DBBE 700A                       		moveq	#10,d0		; add 10 to score
0000DBC0 4EB9 0000 0000             		jsr	AddPoints
0000DBC6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DBCA 0200 0003                  		andi.b	#3,d0
0000DBCE 6600                       		bne.s	locret_C8EA
0000DBD0 303C 00CD                  		move.w	#$CD,d0
0000DBD4 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000DBDA                            ; ===========================================================================
0000DBDA                            
0000DBDA                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000DBDA 303C 00C5                  		move.w	#$C5,d0
0000DBDE 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000DBE4 5428 0024                  		addq.b	#2,$24(a0)
0000DBE8 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000DBEE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000DBF4 6500                       		bcs.s	locret_C8EA	; if not, branch
0000DBF6 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000DBFC 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000DC00                            
0000DC00                            locret_C8EA:
0000DC00 4E75                       		rts	
0000DC02                            ; ===========================================================================
0000DC02                            
0000DC02                            Obj7E_Exit:				; XREF: Obj7E_Index
0000DC02 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000DC08 6000 0000                  		bra.w	DisplaySprite
0000DC0C                            ; ===========================================================================
0000DC0C                            
0000DC0C                            Obj7E_Continue:				; XREF: Obj7E_Index
0000DC0C 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000DC12 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000DC18 303C 00BF                  		move.w	#$BF,d0
0000DC1C 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play continues music
0000DC22 5428 0024                  		addq.b	#2,$24(a0)
0000DC26 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000DC2C 6000 0000                  		bra.w	DisplaySprite
0000DC30                            ; ===========================================================================
0000DC30                            
0000DC30                            loc_C91A:				; XREF: Obj7E_Index
0000DC30 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DC34 0200 000F                  		andi.b	#$F,d0
0000DC38 6600                       		bne.s	Obj7E_Display2
0000DC3A 0868 0000 001A             		bchg	#0,$1A(a0)
0000DC40                            
0000DC40                            Obj7E_Display2:
0000DC40 6000 0000                  		bra.w	DisplaySprite
0000DC44                            ; ===========================================================================
0000DC44 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000DC4A 0200                       		dc.b 2,	0		; rountine number, frame number
0000DC4C 0320 0120 0118             		dc.w $320, $120, $118
0000DC52 0201                       		dc.b 2,	1
0000DC54 0360 0120 0128             		dc.w $360, $120, $128
0000DC5A 0202                       		dc.b 2,	2
0000DC5C 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000DC62 0203                       		dc.b 2,	3
0000DC64 03A0 0120 0138             		dc.w $3A0, $120, $138
0000DC6A 0206                       		dc.b 2,	6
0000DC6C                            ; ===========================================================================
0000DC6C                            ; ---------------------------------------------------------------------------
0000DC6C                            ; Object 7F - chaos emeralds from the special stage results screen
0000DC6C                            ; ---------------------------------------------------------------------------
0000DC6C                            
0000DC6C                            Obj7F:					; XREF: Obj_Index
0000DC6C 7000                       		moveq	#0,d0
0000DC6E 1028 0024                  		move.b	$24(a0),d0
0000DC72 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000DC76 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000DC7A                            ; ===========================================================================
0000DC7A 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000DC7C 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000DC7E                            
0000DC7E                            ; ---------------------------------------------------------------------------
0000DC7E                            ; X-axis positions for chaos emeralds
0000DC7E                            ; ---------------------------------------------------------------------------
0000DC7E 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000DC8A                            ; ===========================================================================
0000DC8A                            
0000DC8A                            Obj7F_Main:				; XREF: Obj7F_Index
0000DC8A 2248                       		movea.l	a0,a1
0000DC8C 45F9 0000 DC7E             		lea	(Obj7F_PosData).l,a2
0000DC92 7400                       		moveq	#0,d2
0000DC94 7200                       		moveq	#0,d1
0000DC96 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000DC9A 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000DC9C 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000DCA0                            
0000DCA0                            Obj7F_Loop:
0000DCA0 12BC 007F                  		move.b	#$7F,0(a1)
0000DCA4 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000DCA8 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000DCAE 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000DCB2 1633 2000                  		move.b	(a3,d2.w),d3
0000DCB6 1343 001A                  		move.b	d3,$1A(a1)
0000DCBA 1343 001C                  		move.b	d3,$1C(a1)
0000DCBE 5202                       		addq.b	#1,d2
0000DCC0 5429 0024                  		addq.b	#2,$24(a1)
0000DCC4 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000DCCC 337C 8541 0002             		move.w	#$8541,2(a1)
0000DCD2 137C 0000 0001             		move.b	#0,1(a1)
0000DCD8 43E9 0040                  		lea	$40(a1),a1	; next object
0000DCDC 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000DCE0                            
0000DCE0                            Obj7F_Flash:				; XREF: Obj7F_Index
0000DCE0 1028 001A                  		move.b	$1A(a0),d0
0000DCE4 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000DCEA 0C00 0006                  		cmpi.b	#6,d0
0000DCEE 6600                       		bne.s	Obj7F_Display
0000DCF0 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000DCF6                            
0000DCF6                            Obj7F_Display:
0000DCF6 6000 0000                  		bra.w	DisplaySprite
0000DCFA                            ; ===========================================================================
0000DCFA                            ; ---------------------------------------------------------------------------
0000DCFA                            ; Sprite mappings - zone title cards
0000DCFA                            ; ---------------------------------------------------------------------------
0000DCFA 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000DCFC 0000                       		dc.w byte_CA2C-Map_obj34
0000DCFE 0000                       		dc.w byte_CA5A-Map_obj34
0000DD00 0000                       		dc.w byte_CA7A-Map_obj34
0000DD02 0000                       		dc.w byte_CAA8-Map_obj34
0000DD04 0000                       		dc.w byte_CADC-Map_obj34
0000DD06 0000                       		dc.w byte_CB10-Map_obj34
0000DD08 0000                       		dc.w byte_CB26-Map_obj34
0000DD0A 0000                       		dc.w byte_CB31-Map_obj34
0000DD0C 0000                       		dc.w byte_CB3C-Map_obj34
0000DD0E 0000                       		dc.w byte_CB47-Map_obj34
0000DD10 0000                       		dc.w byte_CB8A-Map_obj34
0000DD12 09                         byte_C9FE:	dc.b 9 			; GREEN HILL
0000DD13 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000DD18 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000DD1D F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000DD22 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000DD27 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000DD2C F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000DD31 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000DD36 F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000DD3B F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000DD40 09                         byte_CA2C:	dc.b 9			; LABYRINTH
0000DD41 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000DD46 F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000DD4B F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000DD50 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000DD55 F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000DD5A F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000DD5F F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000DD64 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000DD69 F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000DD6E 06                         byte_CA5A:	dc.b 6			; MARBLE
0000DD6F F805 002A CF               		dc.b $F8, 5, 0,	$2A, $CF
0000DD74 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000DD79 F805 003A F0               		dc.b $F8, 5, 0,	$3A, $F0
0000DD7E F805 0004 00               		dc.b $F8, 5, 0,	4, 0
0000DD83 F805 0026 10               		dc.b $F8, 5, 0,	$26, $10
0000DD88 F805 0010 20               		dc.b $F8, 5, 0,	$10, $20
0000DD8D 00                         		dc.b 0
0000DD8E 09                         byte_CA7A:	dc.b 9			; STAR	LIGHT
0000DD8F F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000DD94 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000DD99 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000DD9E F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000DDA3 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000DDA8 F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000DDAD F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000DDB2 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000DDB7 F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000DDBC 0A                         byte_CAA8:	dc.b $A			; SPRING YARD
0000DDBD F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000DDC2 F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000DDC7 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000DDCC F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000DDD1 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000DDD6 F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000DDDB F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000DDE0 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000DDE5 F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000DDEA F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000DDEF 00                         		dc.b 0
0000DDF0 0A                         byte_CADC:	dc.b $A			; SCRAP BRAIN
0000DDF1 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000DDF6 F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000DDFB F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000DE00 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000DE05 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000DE0A F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000DE0F F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000DE14 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000DE19 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000DE1E F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000DE23 00                         		dc.b 0
0000DE24 04                         byte_CB10:	dc.b 4			; ZONE
0000DE25 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000DE2A F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000DE2F F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000DE34 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DE39 00                         		dc.b 0
0000DE3A 02                         byte_CB26:	dc.b 2			; ACT 1
0000DE3B 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000DE40 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000DE45 02                         byte_CB31:	dc.b 2			; ACT 2
0000DE46 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000DE4B F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000DE50 02                         byte_CB3C:	dc.b 2			; ACT 3
0000DE51 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000DE56 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000DE5B 0D                         byte_CB47:	dc.b $D			; Oval
0000DE5C E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000DE61 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000DE66 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000DE6B F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000DE70 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000DE75 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000DE7A 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000DE7F FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000DE84 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000DE89 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000DE8E FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000DE93 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000DE98 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000DE9D 00                         		dc.b 0
0000DE9E 05                         byte_CB8A:	dc.b 5			; FINAL
0000DE9F F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000DEA4 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000DEA9 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000DEAE F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000DEB3 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000DEB8                            		even
0000DEB8                            ; ---------------------------------------------------------------------------
0000DEB8                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000DEB8                            ; ---------------------------------------------------------------------------
0000DEB8                            Map_obj39:
0000DEB8                            	include "_maps\obj39.asm"
0000DEB8                            ; ---------------------------------------------------------------------------
0000DEB8                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000DEB8                            ; ---------------------------------------------------------------------------
0000DEB8 0000                       		dc.w byte_CBAC-Map_obj39
0000DEBA 0000                       		dc.w byte_CBB7-Map_obj39
0000DEBC 0000                       		dc.w byte_CBC2-Map_obj39
0000DEBE 0000                       		dc.w byte_CBCD-Map_obj39
0000DEC0 02                         byte_CBAC:	dc.b 2
0000DEC1 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000DEC6 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000DECB 02                         byte_CBB7:	dc.b 2
0000DECC F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000DED1 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000DED6 02                         byte_CBC2:	dc.b 2
0000DED7 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000DEDC F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000DEE1 02                         byte_CBCD:	dc.b 2
0000DEE2 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000DEE7 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000DEEC                            		even
0000DEEC                            		even
0000DEEC                            
0000DEEC                            ; ---------------------------------------------------------------------------
0000DEEC                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000DEEC                            ; ---------------------------------------------------------------------------
0000DEEC 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000DEEE 0000                       		dc.w byte_CC13-Map_obj3A
0000DEF0 0000                       		dc.w byte_CC32-Map_obj3A
0000DEF2 0000                       		dc.w byte_CC51-Map_obj3A
0000DEF4 0000                       		dc.w byte_CC75-Map_obj3A
0000DEF6 FF6F                       		dc.w byte_CB47-Map_obj3A
0000DEF8 FF4E                       		dc.w byte_CB26-Map_obj3A
0000DEFA FF59                       		dc.w byte_CB31-Map_obj3A
0000DEFC FF64                       		dc.w byte_CB3C-Map_obj3A
0000DEFE 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000DEFF F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000DF04 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000DF09 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000DF0E F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000DF13 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000DF18 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000DF1D F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000DF22 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000DF27 06                         byte_CC13:	dc.b 6			; PASSED
0000DF28 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000DF2D F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000DF32 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000DF37 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000DF3C F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DF41 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000DF46 06                         byte_CC32:	dc.b 6			; SCORE
0000DF47 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000DF4C F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000DF51 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000DF56 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000DF5B F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000DF60 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000DF65 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000DF66 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000DF6B F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DF70 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DF75 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DF7A FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DF7F F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000DF84 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DF89 07                         byte_CC75:	dc.b 7			; RING BONUS
0000DF8A F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000DF8F F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DF94 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DF99 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DF9E FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DFA3 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000DFA8 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DFAE 00                         		even
0000DFAE                            ; ---------------------------------------------------------------------------
0000DFAE                            ; Sprite mappings - special stage results screen
0000DFAE                            ; ---------------------------------------------------------------------------
0000DFAE 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000DFB0 0000                       		dc.w byte_CCEE-Map_obj7E
0000DFB2 0000                       		dc.w byte_CD0D-Map_obj7E
0000DFB4 FEAD                       		dc.w byte_CB47-Map_obj7E
0000DFB6 0000                       		dc.w byte_CD31-Map_obj7E
0000DFB8 0000                       		dc.w byte_CD46-Map_obj7E
0000DFBA 0000                       		dc.w byte_CD5B-Map_obj7E
0000DFBC 0000                       		dc.w byte_CD6B-Map_obj7E
0000DFBE 0000                       		dc.w byte_CDA8-Map_obj7E
0000DFC0 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000DFC1 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000DFC6 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000DFCB F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000DFD0 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000DFD5 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000DFDA F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000DFDF F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000DFE4 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DFE9 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000DFEE F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000DFF3 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000DFF8 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000DFFD F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000E002 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000E003 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000E008 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000E00D F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000E012 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000E017 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000E01C FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000E021 07                         byte_CD0D:	dc.b 7
0000E022 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000E027 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000E02C F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000E031 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000E036 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000E03B F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000E040 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000E045 04                         byte_CD31:	dc.b 4
0000E046 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E04B F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E050 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E055 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000E05A 04                         byte_CD46:	dc.b 4
0000E05B F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E060 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E065 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E06A F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000E06F 03                         byte_CD5B:	dc.b 3
0000E070 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E075 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E07A F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E07F 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000E080 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000E085 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000E08A F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000E08F F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000E094 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000E099 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000E09E F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000E0A3 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000E0A8 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000E0AD F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000E0B2 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000E0B7 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000E0BC 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000E0BD F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000E0C2 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000E0C7 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000E0CC F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000E0D1 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000E0D6 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000E0DB F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000E0E0 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000E0E5 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000E0EA F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000E0EF F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000E0F4 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000E0F9 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000E0FE F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000E103 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000E108                            		even
0000E108                            ; ---------------------------------------------------------------------------
0000E108                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000E108                            ; ---------------------------------------------------------------------------
0000E108                            Map_obj7F:
0000E108                            	include "_maps\obj7F.asm"
0000E108                            ; ---------------------------------------------------------------------------
0000E108                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000E108                            ; ---------------------------------------------------------------------------
0000E108 0000                       		dc.w byte_CE02-Map_obj7F
0000E10A 0000                       		dc.w byte_CE08-Map_obj7F
0000E10C 0000                       		dc.w byte_CE0E-Map_obj7F
0000E10E 0000                       		dc.w byte_CE14-Map_obj7F
0000E110 0000                       		dc.w byte_CE1A-Map_obj7F
0000E112 0000                       		dc.w byte_CE20-Map_obj7F
0000E114 0000                       		dc.w byte_CE26-Map_obj7F
0000E116 01                         byte_CE02:	dc.b 1
0000E117 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8
0000E11C 01                         byte_CE08:	dc.b 1
0000E11D F805 2000 F8               		dc.b $F8, 5, $20,	0, $F8
0000E122 01                         byte_CE0E:	dc.b 1
0000E123 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000E128 01                         byte_CE14:	dc.b 1
0000E129 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000E12E 01                         byte_CE1A:	dc.b 1
0000E12F F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8
0000E134 01                         byte_CE20:	dc.b 1
0000E135 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8
0000E13A 00                         byte_CE26:	dc.b 0			; Blank frame
0000E13C 00                         		even
0000E13C 00                         		even
0000E13C                            
0000E13C                            ; ===========================================================================
0000E13C                            ; ---------------------------------------------------------------------------
0000E13C                            ; Object 36 - spikes
0000E13C                            ; ---------------------------------------------------------------------------
0000E13C                            
0000E13C                            Obj36:					; XREF: Obj_Index
0000E13C 7000                       		moveq	#0,d0
0000E13E 1028 0024                  		move.b	$24(a0),d0
0000E142 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000E146 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000E14A                            ; ===========================================================================
0000E14A 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000E14C 0000                       		dc.w Obj36_Solid-Obj36_Index
0000E14E                            
0000E14E 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000E150 0110                       		dc.b 1,	$10
0000E152 0204                       		dc.b 2,	4
0000E154 031C                       		dc.b 3,	$1C
0000E156 0440                       		dc.b 4,	$40
0000E158 0510                       		dc.b 5,	$10
0000E15A                            ; ===========================================================================
0000E15A                            
0000E15A                            Obj36_Main:				; XREF: Obj36_Index
0000E15A 5428 0024                  		addq.b	#2,$24(a0)
0000E15E 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000E166 317C 051B 0002             		move.w	#$51B,2(a0)
0000E16C 0028 0004 0001             		ori.b	#4,1(a0)
0000E172 117C 0004 0018             		move.b	#4,$18(a0)
0000E178 1028 0028                  		move.b	$28(a0),d0
0000E17C 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E182 0240 00F0                  		andi.w	#$F0,d0
0000E186 43F9 0000 E14E             		lea	(Obj36_Var).l,a1
0000E18C E648                       		lsr.w	#3,d0
0000E18E D2C0                       		adda.w	d0,a1
0000E190 1159 001A                  		move.b	(a1)+,$1A(a0)
0000E194 1159 0019                  		move.b	(a1)+,$19(a0)
0000E198 3168 0008 0030             		move.w	8(a0),$30(a0)
0000E19E 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000E1A4                            
0000E1A4                            Obj36_Solid:				; XREF: Obj36_Index
0000E1A4 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000E1A8 343C 0004                  		move.w	#4,d2
0000E1AC 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000E1B2 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000E1B4 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000E1BA 6600                       		bne.s	Obj36_Upright	; if not, branch
0000E1BC 343C 0014                  		move.w	#$14,d2
0000E1C0                            
0000E1C0                            ; Spikes types $1x and $5x face	sideways
0000E1C0                            
0000E1C0                            Obj36_SideWays:				; XREF: Obj36_Solid
0000E1C0 323C 001B                  		move.w	#$1B,d1
0000E1C4 3602                       		move.w	d2,d3
0000E1C6 5243                       		addq.w	#1,d3
0000E1C8 3828 0008                  		move.w	8(a0),d4
0000E1CC 6100 0000                  		bsr.w	SolidObject
0000E1D0 0828 0003 0022             		btst	#3,$22(a0)
0000E1D6 6600                       		bne.s	Obj36_Display
0000E1D8 0C44 0001                  		cmpi.w	#1,d4
0000E1DC 6700                       		beq.s	Obj36_Hurt
0000E1DE 6000                       		bra.s	Obj36_Display
0000E1E0                            ; ===========================================================================
0000E1E0                            
0000E1E0                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000E1E0                            
0000E1E0                            Obj36_Upright:				; XREF: Obj36_Solid
0000E1E0 7200                       		moveq	#0,d1
0000E1E2 1228 0019                  		move.b	$19(a0),d1
0000E1E6 0641 000B                  		addi.w	#$B,d1
0000E1EA 343C 0010                  		move.w	#$10,d2
0000E1EE 363C 0011                  		move.w	#$11,d3
0000E1F2 3828 0008                  		move.w	8(a0),d4
0000E1F6 6100 0000                  		bsr.w	SolidObject
0000E1FA 0828 0003 0022             		btst	#3,$22(a0)
0000E200 6600                       		bne.s	Obj36_Hurt
0000E202 4A44                       		tst.w	d4
0000E204 6A00                       		bpl.s	Obj36_Display
0000E206                            
0000E206                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000E206 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000E20A 6600                       		bne.s	Obj36_PreDisplay	; if yes, branch
0000E20C 2F08                       		move.l	a0,-(sp)
0000E20E 2448                       		movea.l	a0,a2
0000E210 41F8 D000                  		lea	($FFFFD000).w,a0
0000E214 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000E21A 6400                       		bcc.s	loc_CF20
0000E21C 2628 000C                  		move.l	$C(a0),d3
0000E220 3028 0012                  		move.w	$12(a0),d0
0000E224 48C0                       		ext.l	d0
0000E226 E180                       		asl.l	#8,d0
0000E228 9680                       		sub.l	d0,d3
0000E22A 2143 000C                  		move.l	d3,$C(a0)
0000E22E 4EB9 0000 0000             		jsr	HurtSonic
0000E234                            
0000E234                            loc_CF20:
0000E234 205F                       		movea.l	(sp)+,a0
0000E236 6000                       		bra.s	Obj36_Display
0000E238                            
0000E238                            Obj36_PreDisplay:
0000E238 0C78 0100 D032             		cmpi.w	#$100,($FFFFD032).w
0000E23E 6E00                       		bgt.s	Obj36_Display
0000E240 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
0000E246 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000E24C                            
0000E24C                            Obj36_Display:
0000E24C 6100 0000                  		bsr.w	DisplaySprite
0000E250 3028 0030                  		move.w	$30(a0),d0
0000E254 0240 FF80                  		andi.w	#$FF80,d0
0000E258 3238 F700                  		move.w	($FFFFF700).w,d1
0000E25C 0441 0080                  		subi.w	#$80,d1
0000E260 0241 FF80                  		andi.w	#$FF80,d1
0000E264 9041                       		sub.w	d1,d0
0000E266 0C40 0280                  		cmpi.w	#$280,d0
0000E26A 6300                       		bls.s	Obj36_NoDel
0000E26C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000E270 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000E274 3440                       		movea.w	d0,a2	; load address into a2
0000E276 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000E27A 6000 0000                  		bra.w	DeleteObject	; and delete object
0000E27E                            
0000E27E                            Obj36_NoDel:
0000E27E 4E75                       		rts	
0000E280                            ; ===========================================================================
0000E280                            
0000E280                            Obj36_Type0x:				; XREF: Obj36_Solid
0000E280 7000                       		moveq	#0,d0
0000E282 1028 0028                  		move.b	$28(a0),d0
0000E286 D040                       		add.w	d0,d0
0000E288 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000E28C 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000E290                            ; ===========================================================================
0000E290 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000E292 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000E294 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000E296                            ; ===========================================================================
0000E296                            
0000E296                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000E296 4E75                       		rts			; don't move the object
0000E298                            ; ===========================================================================
0000E298                            
0000E298                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000E298 6100 0000                  		bsr.w	Obj36_Wait
0000E29C 7000                       		moveq	#0,d0
0000E29E 1028 0034                  		move.b	$34(a0),d0
0000E2A2 D068 0032                  		add.w	$32(a0),d0
0000E2A6 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000E2AA 4E75                       		rts	
0000E2AC                            ; ===========================================================================
0000E2AC                            
0000E2AC                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000E2AC 6100 0000                  		bsr.w	Obj36_Wait
0000E2B0 7000                       		moveq	#0,d0
0000E2B2 1028 0034                  		move.b	$34(a0),d0
0000E2B6 D068 0030                  		add.w	$30(a0),d0
0000E2BA 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000E2BE 4E75                       		rts	
0000E2C0                            ; ===========================================================================
0000E2C0                            
0000E2C0                            Obj36_Wait:
0000E2C0 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000E2C4 6700                       		beq.s	loc_CFA4	; if yes, branch
0000E2C6 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000E2CA 6600                       		bne.s	locret_CFE6
0000E2CC 4A28 0001                  		tst.b	1(a0)
0000E2D0 6A00                       		bpl.s	locret_CFE6
0000E2D2 303C 00B6                  		move.w	#$B6,d0
0000E2D6 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000E2DC 6000                       		bra.s	locret_CFE6
0000E2DE                            ; ===========================================================================
0000E2DE                            
0000E2DE                            loc_CFA4:
0000E2DE 4A68 0036                  		tst.w	$36(a0)
0000E2E2 6700                       		beq.s	loc_CFC6
0000E2E4 0468 0800 0034             		subi.w	#$800,$34(a0)
0000E2EA 6400                       		bcc.s	locret_CFE6
0000E2EC 317C 0000 0034             		move.w	#0,$34(a0)
0000E2F2 317C 0000 0036             		move.w	#0,$36(a0)
0000E2F8 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E2FE 6000                       		bra.s	locret_CFE6
0000E300                            ; ===========================================================================
0000E300                            
0000E300                            loc_CFC6:
0000E300 0668 0800 0034             		addi.w	#$800,$34(a0)
0000E306 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000E30C 6500                       		bcs.s	locret_CFE6
0000E30E 317C 2000 0034             		move.w	#$2000,$34(a0)
0000E314 317C 0001 0036             		move.w	#1,$36(a0)
0000E31A 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E320                            
0000E320                            locret_CFE6:
0000E320 4E75                       		rts	
0000E322                            ; ===========================================================================
0000E322                            ; ---------------------------------------------------------------------------
0000E322                            ; Sprite mappings - spikes
0000E322                            ; ---------------------------------------------------------------------------
0000E322                            Map_obj36:
0000E322                            	include "_maps\obj36.asm"
0000E322                            ; ---------------------------------------------------------------------------
0000E322                            ; Sprite mappings - spikes
0000E322                            ; ---------------------------------------------------------------------------
0000E322 0000                       		dc.w byte_CFF4-Map_obj36
0000E324 0000                       		dc.w byte_D004-Map_obj36
0000E326 0000                       		dc.w byte_D014-Map_obj36
0000E328 0000                       		dc.w byte_D01A-Map_obj36
0000E32A 0000                       		dc.w byte_D02A-Map_obj36
0000E32C 0000                       		dc.w byte_D049-Map_obj36
0000E32E 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000E32F F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000E334 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E339 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000E33E 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000E33F EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000E344 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000E349 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000E34E 01                         byte_D014:	dc.b 1			; 1 spike
0000E34F F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E354 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000E355 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000E35A F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E35F F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000E364 06                         byte_D02A:	dc.b 6			; 6 spikes
0000E365 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000E36A F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000E36F F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000E374 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000E379 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000E37E F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000E383 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000E384 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000E38A 00                         		even
0000E38A 00                         		even
0000E38A                            
0000E38A                            ; ===========================================================================
0000E38A                            ; ---------------------------------------------------------------------------
0000E38A                            ; Object 3B - purple rock (GHZ)
0000E38A                            ; ---------------------------------------------------------------------------
0000E38A                            
0000E38A                            Obj3B:					; XREF: Obj_Index
0000E38A 7000                       		moveq	#0,d0
0000E38C 1028 0024                  		move.b	$24(a0),d0
0000E390 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000E394 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000E398                            ; ===========================================================================
0000E398 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000E39A 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000E39C                            ; ===========================================================================
0000E39C                            
0000E39C                            Obj3B_Main:				; XREF: Obj3B_Index
0000E39C 5428 0024                  		addq.b	#2,$24(a0)
0000E3A0 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000E3A8 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000E3AE 117C 0004 0001             		move.b	#4,1(a0)
0000E3B4 117C 0013 0019             		move.b	#$13,$19(a0)
0000E3BA 117C 0004 0018             		move.b	#4,$18(a0)
0000E3C0                            
0000E3C0                            Obj3B_Solid:				; XREF: Obj3B_Index
0000E3C0 323C 001B                  		move.w	#$1B,d1
0000E3C4 343C 0010                  		move.w	#$10,d2
0000E3C8 363C 0010                  		move.w	#$10,d3
0000E3CC 3828 0008                  		move.w	8(a0),d4
0000E3D0 6100 0000                  		bsr.w	SolidObject
0000E3D4 6100 0000                  		bsr.w	DisplaySprite
0000E3D8 3028 0008                  		move.w	8(a0),d0
0000E3DC 0240 FF80                  		andi.w	#$FF80,d0
0000E3E0 3238 F700                  		move.w	($FFFFF700).w,d1
0000E3E4 0441 0080                  		subi.w	#$80,d1
0000E3E8 0241 FF80                  		andi.w	#$FF80,d1
0000E3EC 9041                       		sub.w	d1,d0
0000E3EE 0C40 0280                  		cmpi.w	#$280,d0
0000E3F2 6300                       		bls.s	Obj3B_NoDel
0000E3F4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000E3F8 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000E3FC 3440                       		movea.w	d0,a2	; load address into a2
0000E3FE 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000E402 6000 0000                  		bra.w	DeleteObject	; and delete object
0000E406                            
0000E406                            Obj3B_NoDel:
0000E406 4E75                       		rts	
0000E408                            ; ===========================================================================
0000E408                            ; ---------------------------------------------------------------------------
0000E408                            ; Object 49 - waterfall	sound effect (GHZ)
0000E408                            ; ---------------------------------------------------------------------------
0000E408                            
0000E408                            Obj49:					; XREF: Obj_Index
0000E408 7000                       		moveq	#0,d0
0000E40A 1028 0024                  		move.b	$24(a0),d0
0000E40E 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000E412 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000E416                            ; ===========================================================================
0000E416 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000E418 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000E41A                            ; ===========================================================================
0000E41A                            
0000E41A                            Obj49_Main:				; XREF: Obj49_Index
0000E41A 5428 0024                  		addq.b	#2,$24(a0)
0000E41E 117C 0004 0001             		move.b	#4,1(a0)
0000E424                            
0000E424                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000E424 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E428 0200 003F                  		andi.b	#$3F,d0
0000E42C 6600                       		bne.s	Obj49_ChkDel
0000E42E 303C 00D0                  		move.w	#$D0,d0
0000E432 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000E438                            
0000E438                            Obj49_ChkDel:
0000E438 3028 0008                  		move.w	8(a0),d0
0000E43C 0240 FF80                  		andi.w	#$FF80,d0
0000E440 3238 F700                  		move.w	($FFFFF700).w,d1
0000E444 0441 0080                  		subi.w	#$80,d1
0000E448 0241 FF80                  		andi.w	#$FF80,d1
0000E44C 9041                       		sub.w	d1,d0
0000E44E 0C40 0280                  		cmpi.w	#$280,d0
0000E452 6300                       		bls.s	Obj49_NoDel
0000E454 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000E458 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000E45C 3440                       		movea.w	d0,a2	; load address into a2
0000E45E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000E462 6000 0000                  		bra.w	DeleteObject	; and delete object
0000E466                            
0000E466                            Obj49_NoDel:
0000E466 4E75                       		rts	
0000E468                            ; ===========================================================================
0000E468                            ; ---------------------------------------------------------------------------
0000E468                            ; Sprite mappings - purple rock	(GHZ)
0000E468                            ; ---------------------------------------------------------------------------
0000E468                            Map_obj3B:
0000E468                            	include "_maps\obj3B.asm"
0000E468                            ; ---------------------------------------------------------------------------
0000E468                            ; Sprite mappings - purple rock	(GHZ)
0000E468                            ; ---------------------------------------------------------------------------
0000E468 0000                       		dc.w byte_D110-Map_obj3B
0000E46A 02                         byte_D110:	dc.b 2
0000E46B F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000E470 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000E476 00                         		even
0000E476 00                         		even
0000E476                            
0000E476                            ; ===========================================================================
0000E476                            ; ---------------------------------------------------------------------------
0000E476                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000E476                            ; ---------------------------------------------------------------------------
0000E476                            
0000E476                            Obj3C:					; XREF: Obj_Index
0000E476 7000                       		moveq	#0,d0
0000E478 1028 0024                  		move.b	$24(a0),d0
0000E47C 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000E480 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000E484 6000 0000                  		bra.w	MarkObjGone
0000E488                            ; ===========================================================================
0000E488 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000E48A 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000E48C 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000E48E                            ; ===========================================================================
0000E48E                            
0000E48E                            Obj3C_Main:				; XREF: Obj3C_Index
0000E48E 5428 0024                  		addq.b	#2,$24(a0)
0000E492 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000E49A 317C 450F 0002             		move.w	#$450F,2(a0)
0000E4A0 117C 0004 0001             		move.b	#4,1(a0)
0000E4A6 117C 0010 0019             		move.b	#$10,$19(a0)
0000E4AC 117C 0004 0018             		move.b	#4,$18(a0)
0000E4B2 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000E4B8                            
0000E4B8                            Obj3C_Solid:				; XREF: Obj3C_Index
0000E4B8 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000E4BE 323C 001B                  		move.w	#$1B,d1
0000E4C2 343C 0020                  		move.w	#$20,d2
0000E4C6 363C 0020                  		move.w	#$20,d3
0000E4CA 3828 0008                  		move.w	8(a0),d4
0000E4CE 6100 0000                  		bsr.w	SolidObject
0000E4D2 0828 0005 0022             		btst	#5,$22(a0)
0000E4D8 6600                       		bne.s	Obj3C_ChkRoll
0000E4DA                            
0000E4DA                            locret_D180:
0000E4DA 4E75                       		rts	
0000E4DC                            ; ===========================================================================
0000E4DC                            
0000E4DC                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000E4DC 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000E4E2 66F6                       		bne.s	locret_D180	; if not, branch
0000E4E4 3028 0030                  		move.w	$30(a0),d0
0000E4E8 6A00                       		bpl.s	Obj3C_ChkSpeed
0000E4EA 4440                       		neg.w	d0
0000E4EC                            
0000E4EC                            Obj3C_ChkSpeed:
0000E4EC 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000E4F0 65E8                       		bcs.s	locret_D180	; if not, branch
0000E4F2 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000E4F8 5869 0008                  		addq.w	#4,8(a1)
0000E4FC 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000E502 3028 0008                  		move.w	8(a0),d0
0000E506 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000E50A 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000E50C 5169 0008                  		subq.w	#8,8(a1)
0000E510 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000E516                            
0000E516                            Obj3C_Smash:
0000E516 3369 0010 0020             		move.w	$10(a1),$20(a1)
0000E51C 08A8 0005 0022             		bclr	#5,$22(a0)
0000E522 08A9 0005 0022             		bclr	#5,$22(a1)
0000E528 7207                       		moveq	#7,d1		; load 8 fragments
0000E52A 343C 0070                  		move.w	#$70,d2
0000E52E 6100                       		bsr.s	SmashObject
0000E530                            
0000E530                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000E530 6100 0000                  		bsr.w	SpeedToPos
0000E534 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000E53A 6100 0000                  		bsr.w	DisplaySprite
0000E53E 4A28 0001                  		tst.b	1(a0)
0000E542 6A00 0000                  		bpl.w	DeleteObject
0000E546 4E75                       		rts	
0000E548                            
0000E548                            ; ---------------------------------------------------------------------------
0000E548                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000E548                            ; ---------------------------------------------------------------------------
0000E548                            
0000E548                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E548                            
0000E548                            
0000E548                            SmashObject:				; XREF: Obj3C_Smash
0000E548 7000                       		moveq	#0,d0
0000E54A 1028 001A                  		move.b	$1A(a0),d0
0000E54E D040                       		add.w	d0,d0
0000E550 2668 0004                  		movea.l	4(a0),a3
0000E554 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000E558 524B                       		addq.w	#1,a3
0000E55A 08E8 0005 0001             		bset	#5,1(a0)
0000E560 1810                       		move.b	0(a0),d4
0000E562 1A28 0001                  		move.b	1(a0),d5
0000E566 2248                       		movea.l	a0,a1
0000E568 6000                       		bra.s	Smash_LoadFrag
0000E56A                            ; ===========================================================================
0000E56A                            
0000E56A                            Smash_Loop:
0000E56A 6100 0000                  		bsr.w	SingleObjLoad
0000E56E 6600                       		bne.s	Smash_PlaySnd
0000E570 5A4B                       		addq.w	#5,a3
0000E572                            
0000E572                            Smash_LoadFrag:				; XREF: SmashObject
0000E572 137C 0004 0024             		move.b	#4,$24(a1)
0000E578 1284                       		move.b	d4,0(a1)
0000E57A 234B 0004                  		move.l	a3,4(a1)
0000E57E 1345 0001                  		move.b	d5,1(a1)
0000E582 3368 0008 0008             		move.w	8(a0),8(a1)
0000E588 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E58E 3368 0002 0002             		move.w	2(a0),2(a1)
0000E594 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000E59A 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000E5A0 335C 0010                  		move.w	(a4)+,$10(a1)
0000E5A4 335C 0012                  		move.w	(a4)+,$12(a1)
0000E5A8 B3C8                       		cmpa.l	a0,a1
0000E5AA 6400                       		bcc.s	loc_D268
0000E5AC 2F08                       		move.l	a0,-(sp)
0000E5AE 2049                       		movea.l	a1,a0
0000E5B0 6100 0000                  		bsr.w	SpeedToPos
0000E5B4 D568 0012                  		add.w	d2,$12(a0)
0000E5B8 205F                       		movea.l	(sp)+,a0
0000E5BA 6100 0000                  		bsr.w	DisplaySprite2
0000E5BE                            
0000E5BE                            loc_D268:
0000E5BE 51C9 FFAA                  		dbf	d1,Smash_Loop
0000E5C2                            
0000E5C2                            Smash_PlaySnd:
0000E5C2 303C 00CB                  		move.w	#$CB,d0
0000E5C6 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play smashing sound
0000E5CC                            ; End of function SmashObject
0000E5CC                            
0000E5CC                            ; ===========================================================================
0000E5CC                            ; Smashed block	fragment speeds
0000E5CC                            ;
0000E5CC 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000E5D0 0600 FF00                  		dc.w $600, $FF00
0000E5D4 0600 0100                  		dc.w $600, $100
0000E5D8 0400 0500                  		dc.w $400, $500
0000E5DC 0600 FA00                  		dc.w $600, $FA00
0000E5E0 0800 FE00                  		dc.w $800, $FE00
0000E5E4 0800 0200                  		dc.w $800, $200
0000E5E8 0600 0600                  		dc.w $600, $600
0000E5EC                            
0000E5EC FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000E5F0 F800 FE00                  		dc.w $F800, $FE00
0000E5F4 F800 0200                  		dc.w $F800, $200
0000E5F8 FA00 0600                  		dc.w $FA00, $600
0000E5FC FC00 FB00                  		dc.w $FC00, $FB00
0000E600 FA00 FF00                  		dc.w $FA00, $FF00
0000E604 FA00 0100                  		dc.w $FA00, $100
0000E608 FC00 0500                  		dc.w $FC00, $500
0000E60C                            ; ---------------------------------------------------------------------------
0000E60C                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000E60C                            ; ---------------------------------------------------------------------------
0000E60C                            Map_obj3C:
0000E60C                            	include "_maps\obj3C.asm"
0000E60C                            ; ---------------------------------------------------------------------------
0000E60C                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000E60C                            ; ---------------------------------------------------------------------------
0000E60C 0000                       		dc.w byte_D2BC-Map_obj3C
0000E60E 0000                       		dc.w byte_D2E5-Map_obj3C
0000E610 0000                       		dc.w byte_D30E-Map_obj3C
0000E612 08                         byte_D2BC:	dc.b 8
0000E613 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000E618 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000E61D 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000E622 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000E627 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000E62C F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000E631 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000E636 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000E63B 08                         byte_D2E5:	dc.b 8
0000E63C E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000E641 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000E646 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000E64B 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000E650 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000E655 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000E65A 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000E65F 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000E664 08                         byte_D30E:	dc.b 8
0000E665 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000E66A F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000E66F 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000E674 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000E679 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000E67E F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000E683 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000E688 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000E68E 00                         		even
0000E68E 00                         		even
0000E68E                            
0000E68E                            ; ---------------------------------------------------------------------------
0000E68E                            ; Object code loading subroutine
0000E68E                            ; ---------------------------------------------------------------------------
0000E68E                            
0000E68E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E68E                            
0000E68E                            
0000E68E                            ObjectsLoad:				; XREF: TitleScreen; et al
0000E68E 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000E692 7E7F                       		moveq	#$7F,d7
0000E694 7000                       		moveq	#0,d0
0000E696 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000E69C 6400                       		bcc.s	loc_D362
0000E69E                            
0000E69E                            loc_D348:
0000E69E 1010                       		move.b	(a0),d0		; load object number from RAM
0000E6A0 6700                       		beq.s	loc_D358
0000E6A2 D040                       		add.w	d0,d0
0000E6A4 D040                       		add.w	d0,d0
0000E6A6 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000E6AA 4E91                       		jsr	(a1)		; run the object's code
0000E6AC 7000                       		moveq	#0,d0
0000E6AE                            
0000E6AE                            loc_D358:
0000E6AE 41E8 0040                  		lea	$40(a0),a0	; next object
0000E6B2 51CF FFEA                  		dbf	d7,loc_D348
0000E6B6 4E75                       		rts
0000E6B8                            ; ===========================================================================
0000E6B8                            
0000E6B8                            loc_D362:
0000E6B8 0C38 000A D024             		cmpi.b	#$A,($FFFFD000+$24).w	; Has Sonic drowned?
0000E6BE 67DE                       		beq.s	loc_D348				; If so, run objects a little longer
0000E6C0 7E1F                       		moveq	#$1F,d7
0000E6C2 61DA                       		bsr.s	loc_D348
0000E6C4 7E5F                       		moveq	#$5F,d7
0000E6C6                            
0000E6C6                            loc_D368:
0000E6C6 7000                       		moveq	#0,d0
0000E6C8 1010                       		move.b	(a0),d0
0000E6CA 6700                       		beq.s	loc_D378
0000E6CC 4A28 0001                  		tst.b	1(a0)
0000E6D0 6A00                       		bpl.s	loc_D378
0000E6D2 6100 0000                  		bsr.w	DisplaySprite
0000E6D6                            
0000E6D6                            loc_D378:
0000E6D6 41E8 0040                  		lea	$40(a0),a0
0000E6DA                            
0000E6DA                            loc_D37C:
0000E6DA 51CF FFEA                  		dbf	d7,loc_D368
0000E6DE 4E75                       		rts
0000E6E0                            ; End of function ObjectsLoad
0000E6E0                            
0000E6E0                            ; ===========================================================================
0000E6E0                            ; ---------------------------------------------------------------------------
0000E6E0                            ; Object pointers
0000E6E0                            ; ---------------------------------------------------------------------------
0000E6E0                            Obj_Index:
0000E6E0                            	include "_inc\Object pointers.asm"
0000E6E0                            ; ---------------------------------------------------------------------------
0000E6E0                            ; Object pointers
0000E6E0                            ; ---------------------------------------------------------------------------
0000E6E0 0000 0000 0000 0000 0000+  	dc.l Obj01, Obj02,	Obj03, ObjectFall
0000E6F0 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000E700 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000E710 0000 0000 0000 B8AE 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000E720 0000 842A 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000E730 0000 8A5C 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000E740 0000 9316 0000 937E 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000E750 0000 9BC4 0000 9EBE 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000E760 0000 0000 0000 AB42 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000E770 0000 AE84 0000 B3DA 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000E780 0000 A77A 0000 9CA6 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000E790 0000 BF36 0000 B5A0 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000E7A0 0000 C958 0000 D032 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000E7B0 0000 C4B4 0000 E13C 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000E7C0 0000 D7C0 0000 D88C 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000E7D0 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000E7E0 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000E7F0 0000 CC90 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000E800 0000 E408 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000E810 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000E820 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000E830 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000E840 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000E850 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000E860 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000E870 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000E880 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000E890 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000E8A0 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000E8B0 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000E8C0 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000E8D0 0000 0000 0000 DAC6 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000E8E0 0000 5154 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000E8F0 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000E900 0000 581A 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E900 0000 581A 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E910                            
0000E910                            ; ---------------------------------------------------------------------------
0000E910                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E910                            ; ---------------------------------------------------------------------------
0000E910                            
0000E910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E910                            
0000E910                            
0000E910                            ObjectFall:
0000E910 3028 0010                  		move.w	$10(a0),d0
0000E914 48C0                       		ext.l	d0
0000E916 E188                       		lsl.l	#8,d0
0000E918 D1A8 0008                  		add.l	d0,8(a0)
0000E91C 3028 0012                  		move.w	$12(a0),d0
0000E920 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000E926 48C0                       		ext.l	d0
0000E928 E188                       		lsl.l	#8,d0
0000E92A D1A8 000C                  		add.l	d0,$C(a0)
0000E92E 4E75                       		rts	
0000E930                            
0000E930                            ; End of function ObjectFall
0000E930                            
0000E930                            ; ---------------------------------------------------------------------------
0000E930                            ; Subroutine translating object	speed to update	object position
0000E930                            ; ---------------------------------------------------------------------------
0000E930                            
0000E930                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E930                            
0000E930                            
0000E930                            SpeedToPos:
0000E930 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000E934 48C0                       		ext.l	d0
0000E936 E188                       		lsl.l	#8,d0		; multiply speed by $100
0000E938 D1A8 0008                  		add.l	d0,8(a0)	; add to x-axis	position
0000E93C 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000E940 48C0                       		ext.l	d0
0000E942 E188                       		lsl.l	#8,d0		; multiply by $100
0000E944 D1A8 000C                  		add.l	d0,$C(a0)	; add to y-axis	position
0000E948 4E75                       		rts	
0000E94A                            
0000E94A                            ; End of function SpeedToPos
0000E94A                            
0000E94A                            ; ---------------------------------------------------------------------------
0000E94A                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E94A                            ; ---------------------------------------------------------------------------
0000E94A                            
0000E94A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E94A                            
0000E94A                            
0000E94A                            DisplaySprite:
0000E94A 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E94E 3028 0018                  		move.w	$18(a0),d0
0000E952 E248                       		lsr.w	#1,d0
0000E954 0240 0380                  		andi.w	#$380,d0
0000E958 D2C0                       		adda.w	d0,a1
0000E95A 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E95E 6400                       		bcc.s	locret_D620
0000E960 5451                       		addq.w	#2,(a1)
0000E962 D2D1                       		adda.w	(a1),a1
0000E964 3288                       		move.w	a0,(a1)
0000E966                            
0000E966                            locret_D620:
0000E966 4E75                       		rts	
0000E968                            ; End of function DisplaySprite
0000E968                            
0000E968                            ; ---------------------------------------------------------------------------
0000E968                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E968                            ; ---------------------------------------------------------------------------
0000E968                            
0000E968                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E968                            
0000E968                            
0000E968                            DisplaySprite2:
0000E968 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E96C 3029 0018                  		move.w	$18(a1),d0
0000E970 E248                       		lsr.w	#1,d0
0000E972 0240 0380                  		andi.w	#$380,d0
0000E976 D4C0                       		adda.w	d0,a2
0000E978 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E97C 6400                       		bcc.s	locret_D63E
0000E97E 5452                       		addq.w	#2,(a2)
0000E980 D4D2                       		adda.w	(a2),a2
0000E982 3489                       		move.w	a1,(a2)
0000E984                            
0000E984                            locret_D63E:
0000E984 4E75                       		rts	
0000E986                            ; End of function DisplaySprite2
0000E986                            
0000E986                            
0000E986                            DisplaySprite3:
0000E986 43F8 AC00                      lea    ($FFFFAC00).w,a1
0000E98A D2C0                           adda.w    d0,a1
0000E98C 0C51 007E                      cmpi.w    #$7E,(a1)
0000E990 6400                           bhs.s    return_16542
0000E992 5451                           addq.w    #2,(a1)
0000E994 D2D1                           adda.w    (a1),a1
0000E996 3288                           move.w    a0,(a1)
0000E998                            
0000E998                            return_16542:
0000E998 4E75                           rts
0000E99A                            ; ---------------------------------------------------------------------------
0000E99A                            ; Subroutine to	delete an object
0000E99A                            ; ---------------------------------------------------------------------------
0000E99A                            
0000E99A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E99A                            
0000E99A                            
0000E99A                            DeleteObject:
0000E99A 2248                       		movea.l	a0,a1
0000E99C                            
0000E99C                            DeleteObject2:
0000E99C 7200                       		moveq	#0,d1
0000E99E 700F                       		moveq	#$F,d0
0000E9A0                            
0000E9A0                            loc_D646:
0000E9A0 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E9A2 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E9A6 4E75                       		rts	
0000E9A8                            ; End of function DeleteObject
0000E9A8                            
0000E9A8                            ; ===========================================================================
0000E9A8 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E9AC 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E9B0 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E9B4 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E9B8                            ; ---------------------------------------------------------------------------
0000E9B8                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E9B8                            ; ---------------------------------------------------------------------------
0000E9B8                            
0000E9B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E9B8                            
0000E9B8                            
0000E9B8                            BuildSprites:                ; XREF: TitleScreen; et al
0000E9B8 45F8 F800                          lea    ($FFFFF800).w,a2 ; set address for sprite table
0000E9BC 4EB9 0000 0000                     jsr		Obj02
0000E9C2 4A38 FFD0                          tst.b    ($FFFFFFD0).w ; this was level_started_flag
0000E9C6 6700                               beq.s    BuildSprites_2
0000E9C8 4EB9 0000 0000                     jsr    loc_40804
0000E9CE                            
0000E9CE                            BuildSprites_2:
0000E9CE 49F8 AC00                          lea    ($FFFFAC00).w,a4
0000E9D2 7E07                               moveq    #7,d7
0000E9D4                            
0000E9D4                            loc_D66A:
0000E9D4 0C47 0005                  		cmpi.w	#$07-$02,d7
0000E9D8 6600                       		bne.s	BuildSpritesCont
0000E9DA 4A38 870D                  		tst.b	(Level_started_flag).w
0000E9DE 6700                       		beq.s	BuildSpritesCont
0000E9E0 48E7 0108                  		movem.l	d7/a4,-(sp)
0000E9E4 6100 0000                  		bsr.w	BuildRings
0000E9E8 4CDF 1080                  		movem.l	(sp)+,d7/a4
0000E9EC                            
0000E9EC                            BuildSpritesCont:
0000E9EC 4A54                       		tst.w	(a4)
0000E9EE 6700 0000                  		beq.w	loc_D72E
0000E9F2 7C02                       		moveq	#2,d6
0000E9F4                            
0000E9F4                            loc_D672:
0000E9F4 3074 6000                          movea.w    (a4,d6.w),a0
0000E9F8 4A10                               tst.b    (a0)
0000E9FA 6700 0000                          beq.w    loc_D726
0000E9FE 08A8 0007 0001                     bclr    #7,1(a0)
0000EA04 1028 0001                          move.b    1(a0),d0
0000EA08 1800                               move.b    d0,d4
0000EA0A 0C10 0001                          cmpi.b    #1,(a0)    ; is this object is Sonic
0000EA0E 6700                               beq.s    @skip    ; if it is, branch
0000EA10 0800 0006                          btst    #6,d0    ; is the multi-draw flag set?
0000EA14 6600 0000                          bne.w   BuildSprites_MultiDraw    ; if it is, branch
0000EA18                               @skip:
0000EA18 0240 000C                  		andi.w	#$C,d0
0000EA1C 6700                       		beq.s	loc_D6DE
0000EA1E 227B 0088                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000EA22 7000                       		moveq	#0,d0
0000EA24 1028 0019                  		move.b	$19(a0),d0
0000EA28 3628 0008                  		move.w	8(a0),d3
0000EA2C 9651                       		sub.w	(a1),d3
0000EA2E 3203                       		move.w	d3,d1
0000EA30 D240                       		add.w	d0,d1
0000EA32 6B00 0000                  		bmi.w	loc_D726
0000EA36 3203                       		move.w	d3,d1
0000EA38 9240                       		sub.w	d0,d1
0000EA3A 0C41 0140                  		cmpi.w	#$140,d1
0000EA3E 6C00                       		bge.s	loc_D726
0000EA40 0643 0080                  		addi.w	#$80,d3
0000EA44 0804 0004                  		btst	#4,d4
0000EA48 6700                       		beq.s	loc_D6E8
0000EA4A 7000                       		moveq	#0,d0
0000EA4C 1028 0016                  		move.b	$16(a0),d0
0000EA50 3428 000C                  		move.w	$C(a0),d2
0000EA54 9469 0004                  		sub.w	4(a1),d2
0000EA58 3202                       		move.w	d2,d1
0000EA5A D240                       		add.w	d0,d1
0000EA5C 6B00                       		bmi.s	loc_D726
0000EA5E 3202                       		move.w	d2,d1
0000EA60 9240                       		sub.w	d0,d1
0000EA62 0C41 00E0                  		cmpi.w	#$E0,d1
0000EA66 6C00                       		bge.s	loc_D726
0000EA68 0642 0080                  		addi.w	#$80,d2
0000EA6C 6000                       		bra.s	loc_D700
0000EA6E                            ; ===========================================================================
0000EA6E                            
0000EA6E                            loc_D6DE:
0000EA6E 3428 000A                  		move.w	$A(a0),d2
0000EA72 3628 0008                  		move.w	8(a0),d3
0000EA76 6000                       		bra.s	loc_D700
0000EA78                            ; ===========================================================================
0000EA78                            
0000EA78                            loc_D6E8:
0000EA78 3428 000C                  		move.w	$C(a0),d2
0000EA7C 9469 0004                  		sub.w	4(a1),d2
0000EA80 0642 0080                  		addi.w	#$80,d2
0000EA84 0C42 0060                  		cmpi.w	#$60,d2
0000EA88 6500                       		bcs.s	loc_D726
0000EA8A 0C42 0180                  		cmpi.w	#$180,d2
0000EA8E 6400                       		bcc.s	loc_D726
0000EA90                            
0000EA90                            loc_D700:
0000EA90 2268 0004                  		movea.l	4(a0),a1
0000EA94 7200                       		moveq	#0,d1
0000EA96 0804 0005                  		btst	#5,d4
0000EA9A 6600                       		bne.s	loc_D71C
0000EA9C 1228 001A                  		move.b	$1A(a0),d1
0000EAA0 D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000EAA2 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000EAA6 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000EAA8 1219                       		move.b	(a1)+,d1
0000EAAA 5301                       		subq.b	#1,d1
0000EAAC 6B00                       		bmi.s	loc_D720
0000EAAE                            
0000EAAE                            loc_D71C:
0000EAAE 4EB9 0000 0000             		jsr	sub_D750
0000EAB4                            
0000EAB4                            loc_D720:
0000EAB4 08E8 0007 0001             		bset	#7,1(a0)
0000EABA                            
0000EABA                            loc_D726:
0000EABA 5446                       		addq.w	#2,d6
0000EABC 5554                       		subq.w	#2,(a4)
0000EABE 6600 FF34                  		bne.w	loc_D672
0000EAC2                            
0000EAC2                            loc_D72E:
0000EAC2 49EC 0080                  		lea	$80(a4),a4
0000EAC6 51CF FF0C                  		dbf	d7,loc_D66A
0000EACA 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000EACE 0C05 0050                  		cmpi.b	#$50,d5
0000EAD2 6700                       		beq.s	loc_D748
0000EAD4 24BC 0000 0000             		move.l	#0,(a2)
0000EADA 4E75                       		rts	
0000EADC                            ; ===========================================================================
0000EADC                            
0000EADC                            loc_D748:
0000EADC 157C 0000 FFFB             		move.b	#0,-5(a2)
0000EAE2 4E75                       		rts	
0000EAE4                            ; End of function BuildSprites
0000EAE4                            
0000EAE4                            BuildSprites_MultiDraw:
0000EAE4 2F0C                       	move.l	a4,-(sp)
0000EAE6 49F8 F700                  	lea	($FFFFF700).w,a4
0000EAEA 3668 0002                  	movea.w	2(a0),a3
0000EAEE 2A68 0004                  	movea.l	4(a0),a5
0000EAF2 7000                       	moveq	#0,d0
0000EAF4                            
0000EAF4                            	; check if object is within X bounds
0000EAF4 1028 000E                  	move.b	mainspr_width(a0),d0	; load pixel width
0000EAF8 3628 0008                  	move.w	8(a0),d3
0000EAFC 9654                       	sub.w	(a4),d3
0000EAFE 3203                       	move.w	d3,d1                            
0000EB00 D240                       	add.w	d0,d1                            ; is the object right edge to the left of the screen? 
0000EB02 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000EB06 3203                       	move.w	d3,d1
0000EB08 9240                       	sub.w	d0,d1
0000EB0A 0C41 0140                  	cmpi.w	#320,d1                          ; is the object left edge to the right of the screen?
0000EB0E 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000EB12 0643 0080                  	addi.w	#128,d3
0000EB16                            
0000EB16                            	; check if object is within Y bounds
0000EB16 0804 0004                  	btst	#4,d4                            ; is the accurate Y check flag set?
0000EB1A 6700                       	beq.s	BuildSpritesMulti_ApproxYCheck
0000EB1C 7000                       	moveq	#0,d0
0000EB1E 1028 0014                  	move.b	mainspr_height(a0),d0	         ; load pixel height
0000EB22 3428 000C                  	move.w	$C(a0),d2
0000EB26 946C 0004                  	sub.w	4(a4),d2
0000EB2A 3202                       	move.w	d2,d1
0000EB2C D240                       	add.w	d0,d1
0000EB2E 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj  ; if the object is above the screen
0000EB32 3202                       	move.w	d2,d1
0000EB34 9240                       	sub.w	d0,d1
0000EB36 0C41 00E0                  	cmpi.w	#224,d1
0000EB3A 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj  ; if the object is below the screen
0000EB3E 0642 0080                  	addi.w	#128,d2
0000EB42 6000                       	bra.s	BuildSpritesMulti_DrawSprite
0000EB44                            BuildSpritesMulti_ApproxYCheck:
0000EB44 3428 000C                  	move.w	$C(a0),d2
0000EB48 946C 0004                  	sub.w	4(a4),d2
0000EB4C 0642 0080                  	addi.w	#128,d2
0000EB50 0242 07FF                  	andi.w	#$7FF,d2
0000EB54 0C42 0060                  	cmpi.w	#-32+128,d2
0000EB58 6500                       	blo.s	BuildSprites_MultiDraw_NextObj
0000EB5A 0C42 0180                  	cmpi.w	#32+128+224,d2
0000EB5E 6400                       	bhs.s	BuildSprites_MultiDraw_NextObj
0000EB60                            BuildSpritesMulti_DrawSprite:
0000EB60 7200                       	moveq	#0,d1
0000EB62 1228 000B                  	move.b	mainspr_mapframe(a0),d1	         ; get current frame
0000EB66 6700                       	beq.s	@noparenttodraw
0000EB68 D241                       	add.w	d1,d1
0000EB6A 224D                       	movea.l	a5,a1                            ; a5 is mappings(a0), copy to a1
0000EB6C D2F1 1000                  	adda.w	(a1,d1.w),a1
0000EB70 7200                       	moveq	#0,d1
0000EB72 1219                       	move.b	(a1)+,d1
0000EB74 5301                       	subq.b	#1,d1                            ; get number of pieces
0000EB76 6B00                       	bmi.s	@noparenttodraw                  ; if there are 0 pieces, branch
0000EB78 3F04                       	move.w	d4,-(sp)
0000EB7A 4EB9 0000 0000             	jsr	ChkDrawSprite	                 ; draw the sprite
0000EB80 381F                       	move.w	(sp)+,d4
0000EB82                            @noparenttodraw:
0000EB82 0028 0080 0001             	ori.b	#$80,1(a0)	         ; set onscreen flag
0000EB88 4DE8 0010                  	lea	sub2_x_pos(a0),a6                ; address of first child sprite info
0000EB8C 7000                       	moveq	#0,d0
0000EB8E 1028 000F                  	move.b	mainspr_childsprites(a0),d0	 ; get child sprite count
0000EB92 5340                       	subq.w	#1,d0		                 ; if there are 0, go to next object
0000EB94 6500                       	bcs.s	BuildSprites_MultiDraw_NextObj
0000EB96                            
0000EB96                            @drawchildloop:
0000EB96 4840                       	swap	d0
0000EB98 361E                       	move.w	(a6)+,d3	                 ; get X pos
0000EB9A 9654                       	sub.w	(a4),d3                          ; subtract the screen's x position
0000EB9C 0643 0080                  	addi.w	#128,d3
0000EBA0 341E                       	move.w	(a6)+,d2	                 ; get Y pos
0000EBA2 946C 0004                  	sub.w	4(a4),d2   ; subtract the screen's y position
0000EBA6 0642 0080                  	addi.w	#128,d2
0000EBAA 0242 07FF                  	andi.w	#$7FF,d2
0000EBAE 524E                       	addq.w	#1,a6
0000EBB0 7200                       	moveq	#0,d1
0000EBB2 121E                       	move.b	(a6)+,d1	                 ; get mapping frame
0000EBB4 D241                       	add.w	d1,d1
0000EBB6 224D                       	movea.l	a5,a1
0000EBB8 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000EBBC 7200                       	moveq	#0,d1
0000EBBE 1219                       	move.b	(a1)+,d1
0000EBC0 5301                       	subq.b	#1,d1                            ; get number of pieces
0000EBC2 6B00                       	bmi.s	@nochildleft                     ; if there are 0 pieces, branch
0000EBC4 3F04                       	move.w	d4,-(sp)
0000EBC6 4EB9 0000 0000             	jsr	ChkDrawSprite
0000EBCC 381F                       	move.w	(sp)+,d4
0000EBCE                            @nochildleft:
0000EBCE 4840                       	swap	d0
0000EBD0 51C8 FFC4                  	dbf	d0,@drawchildloop	         ; repeat for number of child sprites
0000EBD4                            ; loc_16804:
0000EBD4                            BuildSprites_MultiDraw_NextObj:
0000EBD4 285F                       	movea.l	(sp)+,a4
0000EBD6 6000 FEE2                  	bra.w	loc_D726; End of function BuildSprites
0000EBDA                            
0000EBDA                            
0000EBDA                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000EBDA                            
0000EBDA                            ; sub_1680A:
0000EBDA                            ChkDrawSprite:
0000EBDA 0C05 0050                  	cmpi.b	#80,d5		; has the sprite limit been reached?
0000EBDE 6500                       	blo.s	loc_1681C	; if it hasn't, branch
0000EBE0 4E75                       	rts	; otherwise, return
0000EBE2                            
0000EBE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EBE2                            
0000EBE2                            
0000EBE2                            sub_D750:				; XREF: BuildSprites
0000EBE2 3668 0002                  		movea.w	2(a0),a3
0000EBE6                            loc_1681C:
0000EBE6 0804 0000                  		btst	#0,d4
0000EBEA 6600                       		bne.s	loc_D796
0000EBEC 0804 0001                  		btst	#1,d4
0000EBF0 6600 0000                  		bne.w	loc_D7E4
0000EBF4                            ; End of function sub_D750
0000EBF4                            
0000EBF4                            
0000EBF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EBF4                            
0000EBF4                            
0000EBF4                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000EBF4 0C05 0050                  		cmpi.b	#$50,d5
0000EBF8 6700                       		beq.s	locret_D794
0000EBFA                            DrawSprite_Loop:				; XREF: sub_D762; SS_ShowLayout	
0000EBFA 1019                       		move.b	(a1)+,d0
0000EBFC 4880                       		ext.w	d0
0000EBFE D042                       		add.w	d2,d0
0000EC00 34C0                       		move.w	d0,(a2)+
0000EC02 14D9                       		move.b	(a1)+,(a2)+
0000EC04 5205                       		addq.b	#1,d5
0000EC06 14C5                       		move.b	d5,(a2)+
0000EC08 1019                       		move.b	(a1)+,d0
0000EC0A E148                       		lsl.w	#8,d0
0000EC0C 1019                       		move.b	(a1)+,d0
0000EC0E D04B                       		add.w	a3,d0
0000EC10 34C0                       		move.w	d0,(a2)+
0000EC12 1019                       		move.b	(a1)+,d0
0000EC14 4880                       		ext.w	d0
0000EC16 D043                       		add.w	d3,d0
0000EC18 0240 01FF                  		andi.w	#$1FF,d0
0000EC1C 6600                       		bne.s	loc_D78E
0000EC1E 5240                       		addq.w	#1,d0
0000EC20                            
0000EC20                            loc_D78E:
0000EC20 34C0                       		move.w	d0,(a2)+
0000EC22 51C9 FFD0                  		dbf	d1,sub_D762
0000EC26                            
0000EC26                            locret_D794:
0000EC26 4E75                       		rts	
0000EC28                            ; End of function sub_D762
0000EC28                            
0000EC28                            ; ===========================================================================
0000EC28                            
0000EC28                            loc_D796:
0000EC28 0804 0001                  		btst	#1,d4
0000EC2C 6600 0000                  		bne.w	loc_D82A
0000EC30                            
0000EC30                            loc_D79E:
0000EC30 0C05 0050                  		cmpi.b	#$50,d5
0000EC34 6700                       		beq.s	locret_D7E2
0000EC36 1019                       		move.b	(a1)+,d0
0000EC38 4880                       		ext.w	d0
0000EC3A D042                       		add.w	d2,d0
0000EC3C 34C0                       		move.w	d0,(a2)+
0000EC3E 1819                       		move.b	(a1)+,d4
0000EC40 14C4                       		move.b	d4,(a2)+
0000EC42 5205                       		addq.b	#1,d5
0000EC44 14C5                       		move.b	d5,(a2)+
0000EC46 1019                       		move.b	(a1)+,d0
0000EC48 E148                       		lsl.w	#8,d0
0000EC4A 1019                       		move.b	(a1)+,d0
0000EC4C D04B                       		add.w	a3,d0
0000EC4E 0A40 0800                  		eori.w	#$800,d0
0000EC52 34C0                       		move.w	d0,(a2)+
0000EC54 1019                       		move.b	(a1)+,d0
0000EC56 4880                       		ext.w	d0
0000EC58 4440                       		neg.w	d0
0000EC5A D804                       		add.b	d4,d4
0000EC5C 0244 0018                  		andi.w	#$18,d4
0000EC60 5044                       		addq.w	#8,d4
0000EC62 9044                       		sub.w	d4,d0
0000EC64 D043                       		add.w	d3,d0
0000EC66 0240 01FF                  		andi.w	#$1FF,d0
0000EC6A 6600                       		bne.s	loc_D7DC
0000EC6C 5240                       		addq.w	#1,d0
0000EC6E                            
0000EC6E                            loc_D7DC:
0000EC6E 34C0                       		move.w	d0,(a2)+
0000EC70 51C9 FFBE                  		dbf	d1,loc_D79E
0000EC74                            
0000EC74                            locret_D7E2:
0000EC74 4E75                       		rts	
0000EC76                            ; ===========================================================================
0000EC76                            
0000EC76                            loc_D7E4:				; XREF: sub_D750
0000EC76 0C05 0050                  		cmpi.b	#$50,d5
0000EC7A 6700                       		beq.s	locret_D828
0000EC7C 1019                       		move.b	(a1)+,d0
0000EC7E 1811                       		move.b	(a1),d4
0000EC80 4880                       		ext.w	d0
0000EC82 4440                       		neg.w	d0
0000EC84 E70C                       		lsl.b	#3,d4
0000EC86 0244 0018                  		andi.w	#$18,d4
0000EC8A 5044                       		addq.w	#8,d4
0000EC8C 9044                       		sub.w	d4,d0
0000EC8E D042                       		add.w	d2,d0
0000EC90 34C0                       		move.w	d0,(a2)+
0000EC92 14D9                       		move.b	(a1)+,(a2)+
0000EC94 5205                       		addq.b	#1,d5
0000EC96 14C5                       		move.b	d5,(a2)+
0000EC98 1019                       		move.b	(a1)+,d0
0000EC9A E148                       		lsl.w	#8,d0
0000EC9C 1019                       		move.b	(a1)+,d0
0000EC9E D04B                       		add.w	a3,d0
0000ECA0 0A40 1000                  		eori.w	#$1000,d0
0000ECA4 34C0                       		move.w	d0,(a2)+
0000ECA6 1019                       		move.b	(a1)+,d0
0000ECA8 4880                       		ext.w	d0
0000ECAA D043                       		add.w	d3,d0
0000ECAC 0240 01FF                  		andi.w	#$1FF,d0
0000ECB0 6600                       		bne.s	loc_D822
0000ECB2 5240                       		addq.w	#1,d0
0000ECB4                            
0000ECB4                            loc_D822:
0000ECB4 34C0                       		move.w	d0,(a2)+
0000ECB6 51C9 FFBE                  		dbf	d1,loc_D7E4
0000ECBA                            
0000ECBA                            locret_D828:
0000ECBA 4E75                       		rts	
0000ECBC                            ; ===========================================================================
0000ECBC                            
0000ECBC                            loc_D82A:
0000ECBC 0C05 0050                  		cmpi.b	#$50,d5
0000ECC0 6700                       		beq.s	locret_D87C
0000ECC2 1019                       		move.b	(a1)+,d0
0000ECC4 1811                       		move.b	(a1),d4
0000ECC6 4880                       		ext.w	d0
0000ECC8 4440                       		neg.w	d0
0000ECCA E70C                       		lsl.b	#3,d4
0000ECCC 0244 0018                  		andi.w	#$18,d4
0000ECD0 5044                       		addq.w	#8,d4
0000ECD2 9044                       		sub.w	d4,d0
0000ECD4 D042                       		add.w	d2,d0
0000ECD6 34C0                       		move.w	d0,(a2)+
0000ECD8 1819                       		move.b	(a1)+,d4
0000ECDA 14C4                       		move.b	d4,(a2)+
0000ECDC 5205                       		addq.b	#1,d5
0000ECDE 14C5                       		move.b	d5,(a2)+
0000ECE0 1019                       		move.b	(a1)+,d0
0000ECE2 E148                       		lsl.w	#8,d0
0000ECE4 1019                       		move.b	(a1)+,d0
0000ECE6 D04B                       		add.w	a3,d0
0000ECE8 0A40 1800                  		eori.w	#$1800,d0
0000ECEC 34C0                       		move.w	d0,(a2)+
0000ECEE 1019                       		move.b	(a1)+,d0
0000ECF0 4880                       		ext.w	d0
0000ECF2 4440                       		neg.w	d0
0000ECF4 D804                       		add.b	d4,d4
0000ECF6 0244 0018                  		andi.w	#$18,d4
0000ECFA 5044                       		addq.w	#8,d4
0000ECFC 9044                       		sub.w	d4,d0
0000ECFE D043                       		add.w	d3,d0
0000ED00 0240 01FF                  		andi.w	#$1FF,d0
0000ED04 6600                       		bne.s	loc_D876
0000ED06 5240                       		addq.w	#1,d0
0000ED08                            
0000ED08                            loc_D876:
0000ED08 34C0                       		move.w	d0,(a2)+
0000ED0A 51C9 FFB0                  		dbf	d1,loc_D82A
0000ED0E                            
0000ED0E                            locret_D87C:
0000ED0E 4E75                       		rts	
0000ED10                            ; ---------------------------------------------------------------------------
0000ED10                            ; Subroutine to	check if an object is on the screen
0000ED10                            ; ---------------------------------------------------------------------------
0000ED10                            
0000ED10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ED10                            
0000ED10                            
0000ED10                            ChkObjOnScreen:
0000ED10 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000ED14 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000ED18 6B00                       		bmi.s	NotOnScreen
0000ED1A 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000ED1E 6C00                       		bge.s	NotOnScreen	; if not, branch
0000ED20                            
0000ED20 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000ED24 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000ED28 6B00                       		bmi.s	NotOnScreen
0000ED2A 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000ED2E 6C00                       		bge.s	NotOnScreen	; if not, branch
0000ED30                            
0000ED30 7000                       		moveq	#0,d0		; set flag to 0
0000ED32 4E75                       		rts	
0000ED34                            ; ===========================================================================
0000ED34                            
0000ED34                            NotOnScreen:				; XREF: ChkObjOnScreen
0000ED34 7001                       		moveq	#1,d0		; set flag to 1
0000ED36 4E75                       		rts	
0000ED38                            ; End of function ChkObjOnScreen
0000ED38                            
0000ED38                            
0000ED38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ED38                            
0000ED38                            
0000ED38                            ChkObjOnScreen2:
0000ED38 7200                       		moveq	#0,d1
0000ED3A 1228 0019                  		move.b	$19(a0),d1
0000ED3E 3028 0008                  		move.w	8(a0),d0
0000ED42 9078 F700                  		sub.w	($FFFFF700).w,d0
0000ED46 D041                       		add.w	d1,d0
0000ED48 6B00                       		bmi.s	NotOnScreen2
0000ED4A D241                       		add.w	d1,d1
0000ED4C 9041                       		sub.w	d1,d0
0000ED4E 0C40 0140                  		cmpi.w	#320,d0
0000ED52 6C00                       		bge.s	NotOnScreen2
0000ED54                            
0000ED54 3228 000C                  		move.w	$C(a0),d1
0000ED58 9278 F704                  		sub.w	($FFFFF704).w,d1
0000ED5C 6B00                       		bmi.s	NotOnScreen2
0000ED5E 0C41 00E0                  		cmpi.w	#224,d1
0000ED62 6C00                       		bge.s	NotOnScreen2
0000ED64                            
0000ED64 7000                       		moveq	#0,d0
0000ED66 4E75                       		rts	
0000ED68                            ; ===========================================================================
0000ED68                            
0000ED68                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000ED68 7001                       		moveq	#1,d0
0000ED6A 4E75                       		rts	
0000ED6C                            ; End of function ChkObjOnScreen2
0000ED6C                            
0000ED6C                            ; ---------------------------------------------------------------------------
0000ED6C                            ; Subroutine to	load a level's objects
0000ED6C                            ; ---------------------------------------------------------------------------
0000ED6C                            
0000ED6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ED6C                            
0000ED6C                            
0000ED6C                            ; ---------------------------------------------------------------------------
0000ED6C                            ; Objects Manager
0000ED6C                            ; Subroutine to load objects whenever they are close to the screen. Unlike in
0000ED6C                            ; normal s2, in this version every object gets an entry in the respawn table.
0000ED6C                            ; This is necessary to get the additional y-range checks to work.
0000ED6C                            ;
0000ED6C                            ; input variables:
0000ED6C                            ;  -none-
0000ED6C                            ;
0000ED6C                            ; writes:
0000ED6C                            ;  d0, d1, d2
0000ED6C                            ;  d3 = upper boundary to load object
0000ED6C                            ;  d4 = lower boundary to load object
0000ED6C                            ;  d5 = #$FFF, used to filter out object's y position
0000ED6C                            ;  d6 = camera position
0000ED6C                            ;
0000ED6C                            ;  a0 = address in object placement list
0000ED6C                            ;  a3 = address in object respawn table
0000ED6C                            ;  a6 = object loading routine
0000ED6C                            ; ---------------------------------------------------------------------------
0000ED6C                             
0000ED6C                            ; loc_17AA4
0000ED6C                            ObjPosLoad:
0000ED6C 7000                       	moveq	#0,d0
0000ED6E 1038 F76C                  	move.b	($FFFFF76C).w,d0
0000ED72 4EFB 0000                  	jmp	ObjPosLoad_States(pc,d0.w)
0000ED76                             
0000ED76                            ; ============== JUMP TABLE	=============================================
0000ED76                            ObjPosLoad_States:
0000ED76 6000 0000                  	bra.w	ObjPosLoad_Init		; 0
0000ED7A 6000 0000                  	bra.w	ObjPosLoad_Main		; 2
0000ED7E                            ; ============== END JUMP TABLE	=============================================
0000ED7E                             
0000ED7E                            ObjPosLoad_Init:
0000ED7E 5838 F76C                  	addq.b	#4,($FFFFF76C).w
0000ED82                             
0000ED82 41F8 8000                  	lea     (Object_Respawn_Table).w,a0
0000ED86 7000                       	moveq   #0,d0
0000ED88 323C 00BF                  	move.w  #$BF,d1 ; set loop counter
0000ED8C                            OPLBack1:
0000ED8C 20C0                       	move.l  d0,(a0)+
0000ED8E 51C9 FFFC                  	dbf     d1,OPLBack1
0000ED92                             
0000ED92 3038 FE10                  	move.w	($FFFFFE10).w,d0
0000ED96                            ;
0000ED96                            ;	ror.b	#1,d0			; this is from s3k
0000ED96                            ;	lsr.w	#5,d0
0000ED96                            ;	lea	(Off_Objects).l,a0
0000ED96                            ;	movea.l	(a0,d0.w),a0
0000ED96                            ;
0000ED96 ED08                       	lsl.b	#6,d0
0000ED98 E848                       	lsr.w	#4,d0
0000ED9A 41F9 0000 0000             	lea	(ObjPos_Index).l,a0	; load the first pointer in the object layout list pointer index,
0000EDA0 D0F0 0000                  	adda.w	(a0,d0.w),a0		; load the pointer to the current object layout
0000EDA4                             
0000EDA4                            	; initialize each object load address with the first object in the layout
0000EDA4 21C8 F770                  	move.l	a0,($FFFFF770).w
0000EDA8 21C8 F774                  	move.l	a0,($FFFFF774).w
0000EDAC 47F8 8000                  	lea	(Object_Respawn_Table).w,a3
0000EDB0                             
0000EDB0 3C38 F700                  	move.w	($FFFFF700).w,d6
0000EDB4 0446 0080                  	subi.w	#$80,d6	; look one chunk to the left
0000EDB8 6400                       	bcc.s	OPL1	; if the result was negative,
0000EDBA 7C00                       	moveq	#0,d6	; cap at zero
0000EDBC                            	OPL1:	
0000EDBC 0246 FF80                  	andi.w	#$FF80,d6	; limit to increments of $80 (width of a chunk)
0000EDC0                             
0000EDC0 2078 F770                  	movea.l	($FFFFF770).w,a0	; get first object in layout
0000EDC4                             
0000EDC4                            OPLBack2:	; at the beginning of a level this gives respawn table entries to any object that is one chunk
0000EDC4                            	; behind the left edge of the screen that needs to remember its state (Monitors, Badniks, etc.)
0000EDC4 BC50                       	cmp.w	(a0),d6		; is object's x position >= d6?
0000EDC6 6300                       	bls.s	OPL2		; if yes, branch
0000EDC8 5C48                       	addq.w	#6,a0	; next object
0000EDCA 524B                       	addq.w	#1,a3	; respawn index of next object going right
0000EDCC 60F6                       	bra.s	OPLBack2
0000EDCE                            ; ---------------------------------------------------------------------------
0000EDCE                             
0000EDCE                            OPL2:	
0000EDCE 21C8 F770                  	move.l	a0,($FFFFF770).w	; remember rightmost object that has been processed, so far (we still need to look forward)
0000EDD2 31CB F778                  	move.w	a3,($FFFFF778).w	; and its respawn table index
0000EDD6                             
0000EDD6 47F8 8000                  	lea	(Object_Respawn_Table).w,a3	; reset a3
0000EDDA 2078 F774                  	movea.l	($FFFFF774).w,a0	; reset a0
0000EDDE 0446 0080                  	subi.w	#$80,d6		; look even farther left (any object behind this is out of range)
0000EDE2 6500                       	bcs.s	OPL3		; branch, if camera position would be behind level's left boundary
0000EDE4                             
0000EDE4                             OPLBack3:	; count how many objects are behind the screen that are not in range and need to remember their state
0000EDE4 BC50                       	cmp.w	(a0),d6		; is object's x position >= d6?
0000EDE6 6300                       	bls.s	OPL3		; if yes, branch
0000EDE8 5C48                       	addq.w	#6,a0
0000EDEA 524B                       	addq.w	#1,a3	; respawn index of next object going left
0000EDEC 60F6                       	bra.s	OPLBack3	; continue with next object
0000EDEE                            ; ---------------------------------------------------------------------------
0000EDEE                             
0000EDEE                            OPL3:	
0000EDEE 21C8 F774                  	move.l	a0,($FFFFF774).w	; remember current object from the left
0000EDF2 31CB F77C                  	move.w	a3,($FFFFF77C).w	; and its respawn table index
0000EDF6                             
0000EDF6 31FC FFFF FE2A             	move.w	#-1,(Camera_X_Pos_last).w	; make sure ObjPosLoad_GoingForward is run
0000EDFC                             
0000EDFC 3038 F704                  	move.w	($FFFFF704).w,d0
0000EE00 0240 FF80                  	andi.w	#$FF80,d0
0000EE04 31C0 F76E                  	move.w	d0,(Camera_Y_pos_last).w	; make sure the Y check isn't run unnecessarily during initialization
0000EE08                            ; ---------------------------------------------------------------------------
0000EE08                             
0000EE08                            ObjPosLoad_Main:
0000EE08                            	; get coarse camera position
0000EE08                            ;	move.w	($FFFFF704).w,d1
0000EE08                            ;	subi.w	#$80,d1
0000EE08                            ;	andi.w	#$FF80,d1
0000EE08                            ;	move.w	d1,(Camera_Y_pos_coarse).w
0000EE08                             
0000EE08                            ;	move.w	($FFFFF700).w,d1
0000EE08                            ;	subi.w	#$80,d1
0000EE08                            ;	andi.w	#$FF80,d1
0000EE08                            ;	move.w	d1,(Camera_X_pos_coarse).w
0000EE08                             
0000EE08 4A78 F726                  	tst.w	($FFFFF726).w	; does this level y-wrap?
0000EE0C 6A00                       	bpl.s	ObjMan_Main_NoYWrap	; if not, branch
0000EE0E 4DF9 0000 0000             	lea	(ChkLoadObj_YWrap).l,a6	; set object loading routine
0000EE14 3638 F704                  	move.w	($FFFFF704).w,d3
0000EE18 0243 FF80                  	andi.w	#$FF80,d3	; get coarse value
0000EE1C 3803                       	move.w	d3,d4
0000EE1E 0644 0200                  	addi.w	#$200,d4	; set lower boundary
0000EE22 0443 0080                  	subi.w	#$80,d3		; set upper boundary
0000EE26 6A00                       	bpl.s	OPL4		; branch, if upper boundary > 0
0000EE28 0243 07FF                  	andi.w	#$7FF,d3	; wrap value
0000EE2C 6000                       	bra.s	ObjMan_Main_Cont
0000EE2E                            ; ---------------------------------------------------------------------------
0000EE2E                             
0000EE2E                            OPL4:	
0000EE2E 303C 07FF                  	move.w	#$7FF,d0
0000EE32 5240                       	addq.w	#1,d0
0000EE34 B840                       	cmp.w	d0,d4
0000EE36 6300                       	bls.s	OPL5		; branch, if lower boundary < $7FF
0000EE38 0244 07FF                  	andi.w	#$7FF,d4	; wrap value
0000EE3C 6000                       	bra.s	ObjMan_Main_Cont
0000EE3E                            ; ---------------------------------------------------------------------------
0000EE3E                             
0000EE3E                            ObjMan_Main_NoYWrap:
0000EE3E 3638 F704                  	move.w	($FFFFF704).w,d3
0000EE42 0243 FF80                  	andi.w	#$FF80,d3	; get coarse value
0000EE46 3803                       	move.w	d3,d4
0000EE48 0644 0200                  	addi.w	#$200,d4	; set lower boundary
0000EE4C 0443 0080                  	subi.w	#$80,d3		; set upper boundary
0000EE50 6A00                       	bpl.s	OPL5
0000EE52 7600                       	moveq	#0,d3	; no negative values allowed
0000EE54                             
0000EE54                            OPL5:	
0000EE54 4DF9 0000 0000             	lea	(ChkLoadObj).l,a6	; set object loading routine
0000EE5A                             
0000EE5A                            ObjMan_Main_Cont:
0000EE5A 3A3C 0FFF                  	move.w	#$FFF,d5	; this will be used later when we load objects
0000EE5E 3C38 F700                  	move.w	($FFFFF700).w,d6
0000EE62 0246 FF80                  	andi.w	#$FF80,d6
0000EE66 BC78 FE2A                  	cmp.w	(Camera_X_Pos_last).w,d6	; is the X range the same as last time?
0000EE6A 6700 0000                  	beq.w	ObjPosLoad_SameXRange	; if yes, branch
0000EE6E 6C00                       	bge.s	ObjPosLoad_GoingForward	; if new pos is greater than old pos, branch
0000EE70                             
0000EE70                            	; if the player is moving back
0000EE70 31C6 FE2A                  	move.w	d6,(Camera_X_Pos_last).w	; remember current position for next time
0000EE74                             
0000EE74 2078 F774                  	movea.l	($FFFFF774).w,a0	; get current object going left
0000EE78 3678 F77C                  	movea.w	($FFFFF77C).w,a3	; and its respawn table index
0000EE7C                             
0000EE7C 0446 0080                  	subi.w	#$80,d6			; look one chunk to the left
0000EE80 6500                       	bcs.s	ObjMan_GoingBack_Part2	; branch, if camera position would be behind level's left boundary
0000EE82                             
0000EE82 4EB9 0000 0000             	jsr	(SingleObjLoad).l		; find an empty object slot
0000EE88 6600                       	bne.s	ObjMan_GoingBack_Part2		; branch, if there are none
0000EE8A                            OPLBack4:	; load all objects left of the screen that are now in range
0000EE8A BC68 FFFA                  	cmp.w	-6(a0),d6		; is the previous object's X pos less than d6?
0000EE8E 6C00                       	bge.s	ObjMan_GoingBack_Part2	; if it is, branch
0000EE90 5D48                       	subq.w	#6,a0		; get object's address
0000EE92 534B                       	subq.w	#1,a3		; and respawn table index
0000EE94 4E96                       	jsr	(a6)		; load object
0000EE96 6600                       	bne.s	OPL6		; branch, if SST is full
0000EE98 5D48                       	subq.w	#6,a0
0000EE9A 60EE                       	bra.s	OPLBack4	; continue with previous object
0000EE9C                            ; ---------------------------------------------------------------------------
0000EE9C                             
0000EE9C                            OPL6:	
0000EE9C                            	; undo a few things, if the object couldn't load
0000EE9C 5C48                       	addq.w	#6,a0	; go back to last object
0000EE9E 524B                       	addq.w	#1,a3	; since we didn't load the object, undo last change
0000EEA0                             
0000EEA0                            ObjMan_GoingBack_Part2:
0000EEA0 21C8 F774                  	move.l	a0,($FFFFF774).w	; remember current object going left
0000EEA4 31CB F77C                  	move.w	a3,($FFFFF77C).w	; and its respawn table index
0000EEA8 2078 F770                  	movea.l	($FFFFF770).w,a0	; get next object going right
0000EEAC 3678 F778                  	movea.w	($FFFFF778).w,a3	; and its respawn table index
0000EEB0 0646 0300                  	addi.w	#$300,d6	; look two chunks beyond the right edge of the screen
0000EEB4                             
0000EEB4                            OPLBack5:	; subtract number of objects that have been moved out of range (from the right side)
0000EEB4 BC68 FFFA                  	cmp.w	-6(a0),d6	; is the previous object's X pos less than d6?
0000EEB8 6E00                       	bgt.s	OPL7		; if it is, branch
0000EEBA 5D48                       	subq.w	#6,a0		; get object's address
0000EEBC 534B                       	subq.w	#1,a3		; and respawn table index
0000EEBE 60F4                       	bra.s	OPLBack5	; continue with previous object
0000EEC0                            ; ---------------------------------------------------------------------------
0000EEC0                             
0000EEC0                            OPL7:	
0000EEC0 21C8 F770                  	move.l	a0,($FFFFF770).w	; remember next object going right
0000EEC4 31CB F778                  	move.w	a3,($FFFFF778).w	; and its respawn table index
0000EEC8 6000                       	bra.s	ObjPosLoad_SameXRange
0000EECA                            ; ---------------------------------------------------------------------------
0000EECA                             
0000EECA                            ObjPosLoad_GoingForward:
0000EECA 31C6 FE2A                  	move.w	d6,(Camera_X_Pos_last).w
0000EECE                             
0000EECE 2078 F770                  	movea.l	($FFFFF770).w,a0	; get next object from the right
0000EED2 3678 F778                  	movea.w ($FFFFF778).w,a3	; and its respawn table index
0000EED6 0646 0280                  	addi.w	#$280,d6	; look two chunks forward
0000EEDA 4EB9 0000 0000             	jsr	(SingleObjLoad).l		; find an empty object slot
0000EEE0 6600                       	bne.s	ObjMan_GoingForward_Part2	; branch, if there are none
0000EEE2                             
0000EEE2                            OPLBack6:	; load all objects right of the screen that are now in range
0000EEE2 BC50                       	cmp.w	(a0),d6				; is object's x position >= d6?
0000EEE4 6300                       	bls.s	ObjMan_GoingForward_Part2	; if yes, branch
0000EEE6 4E96                       	jsr	(a6)		; load object (and get address of next object)
0000EEE8 524B                       	addq.w	#1,a3		; respawn index of next object to the right
0000EEEA 67F6                       	beq.s	OPLBack6	; continue loading objects, if the SST isn't full
0000EEEC                             
0000EEEC                            ObjMan_GoingForward_Part2:
0000EEEC 21C8 F770                  	move.l	a0,($FFFFF770).w	; remember next object from the right
0000EEF0 31CB F778                  	move.w	a3,($FFFFF778).w	; and its respawn table index
0000EEF4 2078 F774                  	movea.l	($FFFFF774).w,a0	; get current object from the left
0000EEF8 3678 F77C                  	movea.w	($FFFFF77C).w,a3	; and its respawn table index
0000EEFC 0446 0300                  	subi.w	#$300,d6		; look one chunk behind the left edge of the screen
0000EF00 6500                       	bcs.s	ObjMan_GoingForward_End	; branch, if camera position would be behind level's left boundary
0000EF02                             
0000EF02                            OPLBack7:	; subtract number of objects that have been moved out of range (from the left)
0000EF02 BC50                       	cmp.w	(a0),d6			; is object's x position >= d6?
0000EF04 6300                       	bls.s	ObjMan_GoingForward_End	; if yes, branch
0000EF06 5C48                       	addq.w	#6,a0	; next object
0000EF08 524B                       	addq.w	#1,a3	; respawn index of next object to the left
0000EF0A 60F6                       	bra.s	OPLBack7	; continue with next object
0000EF0C                            ; ---------------------------------------------------------------------------
0000EF0C                             
0000EF0C                            ObjMan_GoingForward_End:
0000EF0C 21C8 F774                  	move.l	a0,($FFFFF774).w	; remember current object from the left
0000EF10 31CB F77C                  	move.w	a3,($FFFFF77C).w	; and its respawn table index
0000EF14                             
0000EF14                            ObjPosLoad_SameXRange:
0000EF14 3C38 F704                  	move.w	($FFFFF704).w,d6
0000EF18 0246 FF80                  	andi.w	#$FF80,d6
0000EF1C 3606                       	move.w	d6,d3
0000EF1E BC78 F76E                  	cmp.w	(Camera_Y_pos_last).w,d6	; is the y range the same as last time?
0000EF22 6700 0000                  	beq.w	ObjPosLoad_SameYRange	; if yes, branch
0000EF26 6C00                       	bge.s	ObjPosLoad_GoingDown	; if the player is moving down
0000EF28                             
0000EF28                            	; if the player is moving up
0000EF28 4A78 F72C                  	tst.w	($FFFFF72C).w	; does the level y-wrap?
0000EF2C 6A00                       	bpl.s	ObjMan_GoingUp_NoYWrap	; if not, branch
0000EF2E 4A46                       	tst.w	d6
0000EF30 6600                       	bne.s	ObjMan_GoingUp_YWrap
0000EF32 0C78 0080 F76E             	cmpi.w	#$80,(Camera_Y_pos_last).w
0000EF38 6600                       	bne.s	ObjMan_GoingDown_YWrap
0000EF3A                             
0000EF3A                            ObjMan_GoingUp_YWrap:
0000EF3A 0443 0080                  	subi.w	#$80,d3			; look one chunk up
0000EF3E 6A00                       	bpl.s	ObjPosLoad_YCheck	; go to y check, if camera y position >= $80
0000EF40 0243 07FF                  	andi.w	#$7FF,d3		; else, wrap value
0000EF44 6000                       	bra.s	ObjPosLoad_YCheck
0000EF46                             
0000EF46                            ; ---------------------------------------------------------------------------
0000EF46                             
0000EF46                            ObjMan_GoingUp_NoYWrap:
0000EF46 0443 0080                  	subi.w	#$80,d3				; look one chunk up
0000EF4A 6B00 0000                  	bmi.w	ObjPosLoad_SameYRange	; don't do anything if camera y position is < $80
0000EF4E 6000                       	bra.s	ObjPosLoad_YCheck
0000EF50                            ; ---------------------------------------------------------------------------
0000EF50                             
0000EF50                            ObjPosLoad_GoingDown:
0000EF50 4A78 F72C                  	tst.w	($FFFFF72C).w		; does the level y-wrap?
0000EF54 6A00                       	bpl.s	ObjMan_GoingDown_NoYWrap	; if not, branch
0000EF56 4A78 F76E                  	tst.w	(Camera_Y_pos_last).w
0000EF5A 6600                       	bne.s	ObjMan_GoingDown_YWrap
0000EF5C 0C46 0080                  	cmpi.w	#$80,d6
0000EF60 66D8                       	bne.s	ObjMan_GoingUp_YWrap
0000EF62                             
0000EF62                            ObjMan_GoingDown_YWrap:
0000EF62 0643 0180                  	addi.w	#$180,d3		; look one chunk down
0000EF66 0C43 07FF                  	cmpi.w	#$7FF,d3
0000EF6A 6500                       	bcs.s	ObjPosLoad_YCheck	; go to  check, if camera y position < $7FF
0000EF6C 0243 07FF                  	andi.w	#$7FF,d3		; else, wrap value
0000EF70 6000                       	bra.s	ObjPosLoad_YCheck
0000EF72                            ; ---------------------------------------------------------------------------
0000EF72                             
0000EF72                            ObjMan_GoingDown_NoYWrap:
0000EF72 0643 0180                  	addi.w	#$180,d3			; look one chunk down
0000EF76 0C43 07FF                  	cmpi.w	#$7FF,d3
0000EF7A 6200                       	bhi.s	ObjPosLoad_SameYRange	; don't do anything, if camera is too close to bottom
0000EF7C                             
0000EF7C                            ObjPosLoad_YCheck:
0000EF7C 4EB9 0000 0000             	jsr	(SingleObjLoad).l		; get an empty object slot
0000EF82 6600                       	bne.s	ObjPosLoad_SameYRange	; branch, if there are none
0000EF84 3803                       	move.w	d3,d4
0000EF86 0644 0080                  	addi.w	#$80,d4
0000EF8A 3A3C 0FFF                  	move.w	#$FFF,d5	; this will be used later when we load objects
0000EF8E 2078 F774                  	movea.l	($FFFFF774).w,a0	; get next object going left
0000EF92 3678 F77C                  	movea.w	($FFFFF77C).w,a3	; and its respawn table index
0000EF96 2E38 F770                  	move.l	($FFFFF770).w,d7	; get next object going right
0000EF9A 9E88                       	sub.l	a0,d7	; d7 = number of objects between the left and right boundaries * 6
0000EF9C 6700                       	beq.s	ObjPosLoad_SameYRange	; branch if there are no objects inbetween
0000EF9E 5448                       	addq.w	#2,a0	; align to object's y position
0000EFA0                             
0000EFA0                            OPLBack8:	; check, if current object needs to be loaded
0000EFA0 4A13                       	tst.b	(a3)	; is object already loaded?
0000EFA2 6B00                       	bmi.s	OPL8	; if yes, branch
0000EFA4 3210                       	move.w	(a0),d1
0000EFA6 C245                       	and.w	d5,d1	; get object's y position
0000EFA8 B243                       	cmp.w	d3,d1
0000EFAA 6500                       	bcs.s	OPL8	; branch, if object is out of range from the top
0000EFAC B244                       	cmp.w	d4,d1
0000EFAE 6200                       	bhi.s	OPL8	; branch, if object is out of range from the bottom
0000EFB0 08D3 0007                  	bset	#7,(a3)	; mark object as loaded
0000EFB4                            	; load object
0000EFB4 3368 FFFE 0008             	move.w	-2(a0),8(a1)
0000EFBA 3210                       	move.w	(a0),d1
0000EFBC 3401                       	move.w	d1,d2
0000EFBE C245                       	and.w	d5,d1	; get object's y position
0000EFC0 3341 000C                  	move.w	d1,$C(a1)
0000EFC4 E75A                       	rol.w	#3,d2
0000EFC6 0242 0003                  	andi.w	#3,d2	; get object's render flags and status
0000EFCA 1342 0001                  	move.b	d2,1(a1)
0000EFCE 1342 0022                  	move.b	d2,$22(a1)
0000EFD2 7000                           moveq	#0,d0
0000EFD4 1028 0002                  	move.b	2(a0),d0
0000EFD8 0200 007F                  	andi.b	#$7F,d0
0000EFDC 1280                       	move.b	d0,0(a1)
0000EFDE 1368 0003 0028             	move.b	3(a0),$28(a1)
0000EFE4 334B 0014                  	move.w	a3,respawn_index(a1)
0000EFE8 4EB9 0000 0000             	jsr	(SingleObjLoad).l	; find new object slot
0000EFEE 6600                       	bne.s	ObjPosLoad_SameYRange	; brach, if there are none left
0000EFF0                            OPL8:
0000EFF0 5C48                       	addq.w	#6,a0	; address of next object
0000EFF2 524B                       	addq.w	#1,a3	; and its respawn index
0000EFF4 5D47                       	subq.w	#6,d7	; subtract from size of remaining objects
0000EFF6 66A8                       	bne.s	OPLBack8	; branch, if there are more
0000EFF8                             
0000EFF8                            ObjPosLoad_SameYRange:
0000EFF8 31C6 F76E                  	move.w	d6,(Camera_Y_pos_last).w
0000EFFC 4E75                       	rts		
0000EFFE                            ; ===========================================================================
0000EFFE                            ; ---------------------------------------------------------------------------
0000EFFE                            ; Subroutines to check if an object needs to be loaded,
0000EFFE                            ; with and without y-wrapping enabled.
0000EFFE                            ;
0000EFFE                            ; input variables:
0000EFFE                            ;  d3 = upper boundary to load object
0000EFFE                            ;  d4 = lower boundary to load object
0000EFFE                            ;  d5 = #$FFF, used to filter out object's y position
0000EFFE                            ;
0000EFFE                            ;  a0 = address in object placement list
0000EFFE                            ;  a1 = object
0000EFFE                            ;  a3 = address in object respawn table
0000EFFE                            ;
0000EFFE                            ; writes:
0000EFFE                            ;  d1, d2, d7
0000EFFE                            ; ---------------------------------------------------------------------------
0000EFFE                            ChkLoadObj_YWrap:
0000EFFE 4A13                       	tst.b	(a3)	; is object already loaded?
0000F000 6A00                       	bpl.s	OPL9	; if not, branch
0000F002 5C48                       	addq.w	#6,a0	; address of next object
0000F004 7200                       	moveq	#0,d1	; let the objects manager know that it can keep going
0000F006 4E75                       	rts	
0000F008                            ; ---------------------------------------------------------------------------
0000F008                             
0000F008                            OPL9:	
0000F008 3E18                       	move.w	(a0)+,d7	; x_pos
0000F00A 3218                       	move.w	(a0)+,d1	; there are three things stored in this word
0000F00C 3401                       	move.w	d1,d2	; does this object skip y-Checks?
0000F00E 6B00                       	bmi.s	OPL10	; if yes, branch
0000F010 C245                       	and.w	d5,d1	; y_pos
0000F012 B243                       	cmp.w	d3,d1
0000F014 6400                       	bcc.s	LoadObj_YWrap
0000F016 B244                       	cmp.w	d4,d1
0000F018 6300                       	bls.s	LoadObj_YWrap
0000F01A 5448                       	addq.w	#2,a0	; address of next object
0000F01C 7200                       	moveq	#0,d1	; let the objects manager know that it can keep going
0000F01E 4E75                       	rts	
0000F020                            ; ---------------------------------------------------------------------------
0000F020                             
0000F020                            OPL10:	
0000F020 C245                       	and.w	d5,d1	; y_pos
0000F022                             
0000F022                            LoadObj_YWrap:
0000F022 08D3 0007                  	bset	#7,(a3)	; mark object as loaded
0000F026 3347 0008                  	move.w	d7,8(a1)
0000F02A 3341 000C                  	move.w	d1,$C(a1)
0000F02E E75A                       	rol.w	#3,d2	; adjust bits
0000F030 0242 0003                  	andi.w	#3,d2	; get render flags and status
0000F034 1342 0001                  	move.b	d2,1(a1)
0000F038 1342 0022                  	move.b	d2,$22(a1)
0000F03C 7000                           moveq	#0,d0
0000F03E 1018                       	move.b	(a0)+,d0
0000F040 0200 007F                  	andi.b	#$7F,d0
0000F044 1280                       	move.b	d0,0(a1)
0000F046 1358 0028                  	move.b	(a0)+,$28(a1)
0000F04A 334B 0014                  	move.w	a3,respawn_index(a1)
0000F04E 6000                       	bra.s	SingleObjLoad	; find new object slot
0000F050                             
0000F050                            ;loc_17F36
0000F050                            ChkLoadObj:
0000F050 4A13                       	tst.b	(a3)	; is object already loaded?
0000F052 6A00                       	bpl.s	OPL11	; if not, branch
0000F054 5C48                       	addq.w	#6,a0	; address of next object
0000F056 7200                       	moveq	#0,d1	; let the objects manager know that it can keep going
0000F058 4E75                       	rts
0000F05A                            ; ---------------------------------------------------------------------------
0000F05A                             
0000F05A                            OPL11:	
0000F05A 3E18                       	move.w	(a0)+,d7	; x_pos
0000F05C 3218                       	move.w	(a0)+,d1	; there are three things stored in this word
0000F05E 3401                       	move.w	d1,d2	; does this object skip y-Checks?	;*6
0000F060 6B00                       	bmi.s	OPL13	; if yes, branch
0000F062 C245                       	and.w	d5,d1	; y_pos
0000F064 B243                       	cmp.w	d3,d1
0000F066 6500                       	bcs.s	OPL12	; branch, if object is out of range from the top
0000F068 B244                       	cmp.w	d4,d1
0000F06A 6300                       	bls.s	LoadObj	; branch, if object is in range from the bottom
0000F06C                            OPL12:
0000F06C 5448                       	addq.w	#2,a0	; address of next object
0000F06E 7200                       	moveq	#0,d1
0000F070 4E75                       	rts		
0000F072                            ; ---------------------------------------------------------------------------
0000F072                             
0000F072                            OPL13:	
0000F072 C245                       	and.w	d5,d1	; y_pos
0000F074                             
0000F074                            LoadObj:
0000F074 08D3 0007                  	bset	#7,(a3)	; mark object as loaded
0000F078 3347 0008                  	move.w	d7,8(a1)
0000F07C 3341 000C                  	move.w	d1,$C(a1)
0000F080 E75A                       	rol.w	#3,d2	; adjust bits
0000F082 0242 0003                  	andi.w	#3,d2	; get render flags and status
0000F086 1342 0001                  	move.b	d2,1(a1)
0000F08A 1342 0022                  	move.b	d2,$22(a1)
0000F08E 7000                           moveq	#0,d0
0000F090 1018                           move.b	(a0)+,d0
0000F092 0200 007F                  	andi.b	#$7F,d0
0000F096 1280                       	move.b	d0,0(a1)
0000F098 1358 0028                  	move.b	(a0)+,$28(a1)
0000F09C 334B 0014                  	move.w	a3,respawn_index(a1)
0000F0A0                            	; continue straight to SingleObjLoad
0000F0A0                            ; End of function ChkLoadObj
0000F0A0                            ; ===========================================================================
0000F0A0                            
0000F0A0                            ; ---------------------------------------------------------------------------
0000F0A0                            ; Single object	loading	subroutine
0000F0A0                            ; ---------------------------------------------------------------------------
0000F0A0                            
0000F0A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F0A0                            
0000F0A0                            
0000F0A0                            SingleObjLoad:
0000F0A0 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000F0A4 303C 005F                  		move.w	#$5F,d0
0000F0A8                            
0000F0A8                            loc_DA94:
0000F0A8 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000F0AA 6700                       		beq.s	locret_DAA0	; if yes, branch
0000F0AC 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000F0B0 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000F0B4                            
0000F0B4                            locret_DAA0:
0000F0B4 4E75                       		rts	
0000F0B6                            ; End of function SingleObjLoad
0000F0B6                            
0000F0B6                            
0000F0B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F0B6                            
0000F0B6                            
0000F0B6                            SingleObjLoad2:
0000F0B6 2248                       		movea.l	a0,a1
0000F0B8 303C F000                  		move.w	#-$1000,d0
0000F0BC 9048                       		sub.w	a0,d0
0000F0BE EC48                       		lsr.w	#6,d0
0000F0C0 5340                       		subq.w	#1,d0
0000F0C2 6500                       		bcs.s	locret_DABC
0000F0C4                            
0000F0C4                            loc_DAB0:
0000F0C4 4A11                       		tst.b	(a1)
0000F0C6 6700                       		beq.s	locret_DABC
0000F0C8 43E9 0040                  		lea	$40(a1),a1
0000F0CC 51C8 FFF6                  		dbf	d0,loc_DAB0
0000F0D0                            
0000F0D0                            locret_DABC:
0000F0D0 4E75                       		rts	
0000F0D2                            ; End of function SingleObjLoad2
0000F0D2                            
0000F0D2                            ; ===========================================================================
0000F0D2                            RingsManager:
0000F0D2 7000                       	moveq	#0,d0
0000F0D4 1038 870C                  	move.b	(Rings_manager_routine).w,d0
0000F0D8 303B 0000                  	move.w	RingsManager_States(pc,d0.w),d0
0000F0DC 4EFB 0000                  	jmp	RingsManager_States(pc,d0.w)
0000F0E0                            ; ===========================================================================
0000F0E0                            ; off_16F96:
0000F0E0                            RingsManager_States:
0000F0E0 0000                       	dc.w RingsManager_Init-RingsManager_States
0000F0E2 0000                       	dc.w RingsManager_Main-RingsManager_States
0000F0E4                            ; ===========================================================================
0000F0E4                            ; loc_16F9A:
0000F0E4                            RingsManager_Init:
0000F0E4 5438 870C                  	addq.b	#2,(Rings_manager_routine).w ; => RingsManager_Main
0000F0E8 6100 0000                  	bsr.w	RingsManager_Setup
0000F0EC 2278 8700                  	movea.l	(Ring_start_addr_ROM).w,a1
0000F0F0 45F8 8300                  	lea	(Ring_Positions).w,a2
0000F0F4 3838 F700                  	move.w	($FFFFF700).w,d4
0000F0F8 5144                       	subq.w	#8,d4
0000F0FA 6200                       	bhi.s	loc_16FB6
0000F0FC 7801                       	moveq	#1,d4
0000F0FE 6000                       	bra.s	loc_16FB6
0000F100                            ; ===========================================================================
0000F100                            
0000F100                            loc_16FB2:
0000F100 5849                       	addq.w	#4,a1
0000F102 544A                       	addq.w	#2,a2
0000F104                            
0000F104                            loc_16FB6:
0000F104 B851                       	cmp.w	(a1),d4
0000F106 62F8                       	bhi.s	loc_16FB2
0000F108 21C9 8700                  	move.l	a1,(Ring_start_addr_ROM).w
0000F10C 31CA 8708                  	move.w	a2,(Ring_start_addr_RAM).w
0000F110 0644 0150                  	addi.w	#$150,d4
0000F114 6000                       	bra.s	loc_16FCE
0000F116                            ; ===========================================================================
0000F116                            
0000F116                            loc_16FCA:
0000F116 5849                       	addq.w	#4,a1
0000F118                            
0000F118                            loc_16FCE:
0000F118 B851                       	cmp.w	(a1),d4
0000F11A 62FA                       	bhi.s	loc_16FCA
0000F11C 21C9 8704                  	move.l	a1,(Ring_end_addr_ROM).w
0000F120 4E75                       	rts
0000F122                            ; ===========================================================================
0000F122                            ; loc_16FDE:
0000F122                            RingsManager_Main:
0000F122 45F8 870E                  	lea	(Ring_consumption_table).w,a2
0000F126 321A                       	move.w	(a2)+,d1
0000F128 5341                       	subq.w	#1,d1
0000F12A 6500                       	bcs.s	loc_17014
0000F12C                            
0000F12C                            loc_16FE8:
0000F12C 301A                       	move.w	(a2)+,d0
0000F12E 67FC                       	beq.s	loc_16FE8
0000F130 3240                       	movea.w	d0,a1
0000F132 5311                       	subq.b	#1,(a1)
0000F134 6600                       	bne.s	loc_17010
0000F136 12BC 0006                  	move.b	#6,(a1)
0000F13A 5229 0001                  	addq.b	#1,1(a1)
0000F13E 0C29 0008 0001             	cmpi.b	#8,1(a1)
0000F144 6600                       	bne.s	loc_17010
0000F146 32BC FFFF                  	move.w	#-1,(a1)
0000F14A 357C 0000 FFFE             	move.w	#0,-2(a2)
0000F150 5378 870E                  	subq.w	#1,(Ring_consumption_table).w
0000F154                            
0000F154                            loc_17010:
0000F154 51C9 FFD6                  	dbf	d1,loc_16FE8
0000F158                            
0000F158                            loc_17014:
0000F158 2278 8700                  	movea.l	(Ring_start_addr_ROM).w,a1
0000F15C 3478 8708                  	movea.w	(Ring_start_addr_RAM).w,a2
0000F160 3838 F700                  	move.w	($FFFFF700).w,d4
0000F164 5144                       	subq.w	#8,d4
0000F166 6200                       	bhi.s	loc_17028
0000F168 7801                       	moveq	#1,d4
0000F16A 6000                       	bra.s	loc_17028
0000F16C                            ; ===========================================================================
0000F16C                            
0000F16C                            loc_17024:
0000F16C 5849                       	addq.w	#4,a1
0000F16E 544A                       	addq.w	#2,a2
0000F170                            
0000F170                            loc_17028:
0000F170 B851                       	cmp.w	(a1),d4
0000F172 62F8                       	bhi.s	loc_17024
0000F174 6000                       	bra.s	loc_17032
0000F176                            ; ===========================================================================
0000F176                            
0000F176                            loc_17030:
0000F176 5949                       	subq.w	#4,a1
0000F178 554A                       	subq.w	#2,a2
0000F17A                            
0000F17A                            loc_17032:
0000F17A B869 FFFC                  	cmp.w	-4(a1),d4
0000F17E 63F6                       	bls.s	loc_17030
0000F180 21C9 8700                  	move.l	a1,(Ring_start_addr_ROM).w
0000F184 31CA 8708                  	move.w	a2,(Ring_start_addr_RAM).w
0000F188 2478 8704                  	movea.l	(Ring_end_addr_ROM).w,a2
0000F18C 0644 0150                  	addi.w	#$150,d4
0000F190 6000                       	bra.s	loc_1704A
0000F192                            ; ===========================================================================
0000F192                            
0000F192                            loc_17046:
0000F192 584A                       	addq.w	#4,a2
0000F194                            
0000F194                            loc_1704A:
0000F194 B852                       	cmp.w	(a2),d4
0000F196 62FA                       	bhi.s	loc_17046
0000F198 6000                       	bra.s	loc_17054
0000F19A                            ; ===========================================================================
0000F19A                            
0000F19A                            loc_17052:
0000F19A 594A                       	subq.w	#4,a2
0000F19C                            
0000F19C                            loc_17054:
0000F19C B86A FFFC                  	cmp.w	-4(a2),d4
0000F1A0 63F8                       	bls.s	loc_17052
0000F1A2 21CA 8704                  	move.l	a2,(Ring_end_addr_ROM).w
0000F1A6 4E75                       	rts
0000F1A8                            
0000F1A8                            ; ===========================================================================
0000F1A8                            
0000F1A8                            Touch_Rings:
0000F1A8 2278 8700                  	movea.l	(Ring_start_addr_ROM).w,a1
0000F1AC 2478 8704                  	movea.l	(Ring_end_addr_ROM).w,a2
0000F1B0                            
0000F1B0                            loc_170D0:
0000F1B0 B5C9                       	cmpa.l	a1,a2
0000F1B2 6700 0000                  	beq.w	return_17166
0000F1B6 3878 8708                  	movea.w	(Ring_start_addr_RAM).w,a4
0000F1BA 0C68 005A 0030             	cmpi.w	#$5A,$30(a0)
0000F1C0 6400 0000                  	bcc.w	return_17166
0000F1C4                            	
0000F1C4                            Touch_Rings_NoAttraction:
0000F1C4 3428 0008                  	move.w	8(a0),d2
0000F1C8 3628 000C                  	move.w	$C(a0),d3
0000F1CC 5142                       	subi.w	#8,d2
0000F1CE 7A00                       	moveq	#0,d5
0000F1D0 1A28 0016                  	move.b	$16(a0),d5
0000F1D4 5705                       	subq.b	#3,d5
0000F1D6 9645                       	sub.w	d5,d3
0000F1D8 0C28 004D 0004             	cmpi.b	#$4D,4(a0)
0000F1DE 6600                       	bne.s	RM1
0000F1E0 0643 000C                  	addi.w	#$C,d3
0000F1E4 7A0A                       	moveq	#$A,d5
0000F1E6                            RM1:
0000F1E6 323C 0006                  	move.w	#6,d1
0000F1EA 3C3C 000C                  	move.w	#$C,d6
0000F1EE 383C 0010                  	move.w	#$10,d4
0000F1F2 DA45                       	add.w	d5,d5
0000F1F4                            
0000F1F4                            loc_17112:
0000F1F4 4A54                       	tst.w	(a4)
0000F1F6 6600 0000                  	bne.w	loc_1715C
0000F1FA 3011                       	move.w	(a1),d0
0000F1FC 9041                       	sub.w	d1,d0
0000F1FE 9042                       	sub.w	d2,d0
0000F200 6400                       	bcc.s	loc_1712A
0000F202 D046                       	add.w	d6,d0
0000F204 6500                       	bcs.s	loc_17130
0000F206 6000 0000                  	bra.w	loc_1715C
0000F20A                            ; ===========================================================================
0000F20A                            
0000F20A                            loc_1712A:
0000F20A B044                       	cmp.w	d4,d0
0000F20C 6200 0000                  	bhi.w	loc_1715C
0000F210                            
0000F210                            loc_17130:
0000F210 3029 0002                  	move.w	2(a1),d0
0000F214 9041                       	sub.w	d1,d0
0000F216 9043                       	sub.w	d3,d0
0000F218 6400                       	bcc.s	loc_17142
0000F21A D046                       	add.w	d6,d0
0000F21C 6500                       	bcs.s	loc_17148
0000F21E 6000 0000                  	bra.w	loc_1715C
0000F222                            ; ===========================================================================
0000F222                            
0000F222                            loc_17142:
0000F222 B045                       	cmp.w	d5,d0
0000F224 6200 0000                  	bhi.w	loc_1715C
0000F228                            
0000F228                            loc_17148:
0000F228 38BC 0604                  	move.w	#$604,(a4)
0000F22C 6100                       	bsr.s	loc_17168
0000F22E 47F8 8710                  	lea	(Ring_consumption_table+2).w,a3
0000F232                            
0000F232                            loc_17152:
0000F232 4A5B                       	tst.w	(a3)+
0000F234 66FC                       	bne.s	loc_17152
0000F236 370C                       	move.w	a4,-(a3)
0000F238 5278 870E                  	addq.w	#1,(Ring_consumption_table).w
0000F23C                            
0000F23C                            loc_1715C:
0000F23C 5849                       	addq.w	#4,a1
0000F23E 544C                       	addq.w	#2,a4
0000F240 B5C9                       	cmpa.l	a1,a2
0000F242 6600 FFB0                  	bne.w	loc_17112
0000F246                            
0000F246                            return_17166:
0000F246 4E75                       	rts
0000F248                            ; ===========================================================================
0000F248                            
0000F248                            loc_17168:
0000F248 5378 870A                  	subq.w	#1,(Perfect_rings_left).w
0000F24C 6000 BCAE                  	bra.w	CollectRing
0000F250                            ; ===========================================================================
0000F250                            
0000F250                            BuildRings:
0000F250 2078 8700                  	movea.l	(Ring_start_addr_ROM).w,a0
0000F254 2E38 8704                  	move.l	(Ring_end_addr_ROM).w,d7
0000F258 9E88                       	sub.l	a0,d7
0000F25A 6600                       	bne.s	loc_17186
0000F25C 4E75                       	rts
0000F25E                            ; ===========================================================================
0000F25E                            
0000F25E                            loc_17186:
0000F25E 3878 8708                  	movea.w	(Ring_start_addr_RAM).w,a4
0000F262 47F8 F700                  	lea	($FFFFF700).w,a3
0000F266                            
0000F266                            loc_1718A:
0000F266 4A5C                       	tst.w	(a4)+
0000F268 6B00 0000                  	bmi.w	loc_171EC
0000F26C 3610                       	move.w	(a0),d3
0000F26E 9653                       	sub.w	(a3),d3
0000F270 0643 0080                  	addi.w	#$80,d3
0000F274 3428 0002                  	move.w	2(a0),d2
0000F278 946B 0004                  	sub.w	4(a3),d2
0000F27C 0242 07FF                  	andi.w	#$7FF,d2
0000F280 5042                       	addi.w	#8,d2
0000F282 6B00                       	bmi.s	loc_171EC
0000F284 0C42 00F0                  	cmpi.w	#$F0,d2
0000F288 6C00                       	bge.s	loc_171EC
0000F28A 0642 0078                  	addi.w	#$78,d2
0000F28E 43F9 0000 B254             	lea	(Map_Obj25).l,a1
0000F294 7200                       	moveq	#0,d1
0000F296 122C FFFF                  	move.b	-1(a4),d1
0000F29A 6600                       	bne.s	loc_171C8
0000F29C 1238 FEC3                  	move.b	($FFFFFEC3).w,d1
0000F2A0                            
0000F2A0                            loc_171C8:
0000F2A0 D241                       	add.w	d1,d1
0000F2A2 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000F2A6 7200                       	moveq	#$00,d1
0000F2A8 1219                       	move.b	(a1)+,d1
0000F2AA 5301                       	subq.b	#1,d1
0000F2AC 6B00                       	bmi.s	loc_171EC
0000F2AE 1019                       	move.b	(a1)+,d0
0000F2B0 4880                       	ext.w	d0
0000F2B2 D042                       	add.w	d2,d0
0000F2B4 34C0                       	move.w	d0,(a2)+
0000F2B6 14D9                       	move.b	(a1)+,(a2)+
0000F2B8 5205                       	addq.b	#1,d5
0000F2BA 14C5                       	move.b	d5,(a2)+
0000F2BC 1019                       	move.b	(a1)+,d0
0000F2BE E148                       	lsl.w	#8,d0
0000F2C0 1019                       	move.b	(a1)+,d0
0000F2C2 0640 26BA                  	addi.w	#($2000+ringart),d0
0000F2C6 34C0                       	move.w	d0,(a2)+
0000F2C8 1019                       	move.b	(a1)+,d0
0000F2CA 4880                       	ext.w	d0
0000F2CC D043                       	add.w	d3,d0
0000F2CE 34C0                       	move.w	d0,(a2)+
0000F2D0                            
0000F2D0                            loc_171EC:
0000F2D0 5848                       	addq.w	#4,a0
0000F2D2 5947                       	subq.w	#4,d7
0000F2D4 6600 FF90                  	bne.w	loc_1718A
0000F2D8 4E75                       	rts
0000F2DA                            ; ===========================================================================
0000F2DA                            
0000F2DA                            RingsManager_Setup:
0000F2DA 43F8 8300                  	lea	(Ring_Positions).w,a1
0000F2DE 7000                       	moveq	#0,d0
0000F2E0 323C 00FF                  	move.w	#Rings_Space/4-1,d1
0000F2E4                            
0000F2E4                            loc_172AE:				; CODE XREF: h+33Cj
0000F2E4 22C0                       	move.l	d0,(a1)+
0000F2E6 51C9 FFFC                  	dbf	d1,loc_172AE
0000F2EA                            
0000F2EA                            	; d0 = 0
0000F2EA 43F8 870E                  	lea	(Ring_consumption_table).w,a1
0000F2EE 323C 001F                  	move.w	#$1F,d1
0000F2F2                            RMBack1:
0000F2F2 22C0                       	move.l	d0,(a1)+
0000F2F4 51C9 FFFC                  	dbf	d1,RMBack1
0000F2F8                            
0000F2F8 7A00                       	moveq	#0,d5
0000F2FA 7000                       	moveq	#0,d0
0000F2FC 3038 FE10                  	move.w	($FFFFFE10).w,d0
0000F300 ED08                       	lsl.b	#6,d0
0000F302 E848                       	lsr.w	#4,d0
0000F304 43F9 0000 0000             	lea	(RingPos_Index).l,a1
0000F30A 3031 0000                  	move.w	(a1,d0.w),d0
0000F30E 43F1 0000                  	lea	(a1,d0.w),a1
0000F312 21C9 8700                  	move.l	a1,(Ring_start_addr_ROM).w
0000F316 5849                       	addq.w	#4,a1
0000F318 7A00                       	moveq	#0,d5
0000F31A 303C 01FE                  	move.w	#(Max_Rings-1),d0	
0000F31E                            	
0000F31E                            RMBack2:
0000F31E 4A99                       	tst.l	(a1)+
0000F320 6B00                       	bmi.s	RM2
0000F322 5245                       	addq.w	#1,d5
0000F324 51C8 FFF8                  	dbf	d0,RMBack2
0000F328                            RM2:
0000F328 31C5 870A                  	move.w	d5,(Perfect_rings_left).w
0000F32C 4E75                       	rts
0000F32E                            ; ===========================================================================
0000F32E                            
0000F32E                            ; ===========================================================================
0000F32E                            ; ---------------------------------------------------------------------------
0000F32E                            ; Object 41 - springs
0000F32E                            ; ---------------------------------------------------------------------------
0000F32E                            
0000F32E                            Obj41:					; XREF: Obj_Index
0000F32E 7000                       		moveq	#0,d0
0000F330 1028 0024                  		move.b	$24(a0),d0
0000F334 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000F338 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000F33C 6100 F60C                  		bsr.w	DisplaySprite
0000F340 3028 0008                  		move.w	8(a0),d0
0000F344 0240 FF80                  		andi.w	#$FF80,d0
0000F348 3238 F700                  		move.w	($FFFFF700).w,d1
0000F34C 0441 0080                  		subi.w	#$80,d1
0000F350 0241 FF80                  		andi.w	#$FF80,d1
0000F354 9041                       		sub.w	d1,d0
0000F356 0C40 0280                  		cmpi.w	#$280,d0
0000F35A 6300                       		bls.s	Obj41_NoDel
0000F35C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000F360 6700 F638                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000F364 3440                       		movea.w	d0,a2	; load address into a2
0000F366 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000F36A 6000 F62E                  		bra.w	DeleteObject	; and delete object
0000F36E                            
0000F36E                            Obj41_NoDel:
0000F36E 4E75                       		rts	
0000F370                            ; ===========================================================================
0000F370 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000F372 0000                       		dc.w Obj41_Up-Obj41_Index
0000F374 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000F376 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000F378 0000                       		dc.w Obj41_LR-Obj41_Index
0000F37A 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000F37C 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000F37E 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000F380 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000F382 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000F384                            
0000F384 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000F386 F600                       		dc.w -$A00		; power	of yellow spring
0000F388                            ; ===========================================================================
0000F388                            
0000F388                            Obj41_Main:				; XREF: Obj41_Index
0000F388 5428 0024                  		addq.b	#2,$24(a0)
0000F38C 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000F394 317C 0523 0002             		move.w	#$523,2(a0)
0000F39A 0028 0004 0001             		ori.b	#4,1(a0)
0000F3A0 117C 0010 0019             		move.b	#$10,$19(a0)
0000F3A6 117C 0004 0018             		move.b	#4,$18(a0)
0000F3AC 1028 0028                  		move.b	$28(a0),d0
0000F3B0 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000F3B4 6700                       		beq.s	loc_DB54	; if not, branch
0000F3B6 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000F3BC 117C 0001 001C             		move.b	#1,$1C(a0)
0000F3C2 117C 0003 001A             		move.b	#3,$1A(a0)
0000F3C8 317C 0533 0002             		move.w	#$533,2(a0)
0000F3CE 117C 0008 0019             		move.b	#8,$19(a0)
0000F3D4                            
0000F3D4                            loc_DB54:
0000F3D4 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000F3D8 6700                       		beq.s	loc_DB66	; if not, branch
0000F3DA 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000F3E0 08E8 0001 0022             		bset	#1,$22(a0)
0000F3E6                            
0000F3E6                            loc_DB66:
0000F3E6 0800 0001                  		btst	#1,d0
0000F3EA 6700                       		beq.s	loc_DB72
0000F3EC 08E8 0005 0002             		bset	#5,2(a0)
0000F3F2                            
0000F3F2                            loc_DB72:
0000F3F2 0240 000F                  		andi.w	#$F,d0
0000F3F6 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000F3FC 4E75                       		rts	
0000F3FE                            ; ===========================================================================
0000F3FE                            
0000F3FE                            Obj41_Up:				; XREF: Obj41_Index
0000F3FE 323C 001B                  		move.w	#$1B,d1
0000F402 343C 0008                  		move.w	#8,d2
0000F406 363C 0010                  		move.w	#$10,d3
0000F40A 3828 0008                  		move.w	8(a0),d4
0000F40E 6100 0000                  		bsr.w	SolidObject
0000F412 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000F416 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000F418 4E75                       		rts	
0000F41A                            ; ===========================================================================
0000F41A                            
0000F41A                            Obj41_BounceUp:				; XREF: Obj41_Up
0000F41A 5428 0024                  		addq.b	#2,$24(a0)
0000F41E 5069 000C                  		addq.w	#8,$C(a1)
0000F422 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000F428 08E9 0001 0022             		bset	#1,$22(a1)
0000F42E 08A9 0003 0022             		bclr	#3,$22(a1)
0000F434 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000F43A 137C 0002 0024             		move.b	#2,$24(a1)
0000F440 08A8 0003 0022             		bclr	#3,$22(a0)
0000F446 4228 0025                  		clr.b	$25(a0)
0000F44A 303C 00CC                  		move.w	#$CC,d0
0000F44E 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play spring sound
0000F454                            
0000F454                            Obj41_AniUp:				; XREF: Obj41_Index
0000F454 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F45A 6000 C54E                  		bra.w	AnimateSprite
0000F45E                            ; ===========================================================================
0000F45E                            
0000F45E                            Obj41_ResetUp:				; XREF: Obj41_Index
0000F45E 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F464 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000F468 4E75                       		rts	
0000F46A                            ; ===========================================================================
0000F46A                            
0000F46A                            Obj41_LR:				; XREF: Obj41_Index
0000F46A 323C 0013                  		move.w	#$13,d1
0000F46E 343C 000E                  		move.w	#$E,d2
0000F472 363C 000F                  		move.w	#$F,d3
0000F476 3828 0008                  		move.w	8(a0),d4
0000F47A 6100 0000                  		bsr.w	SolidObject
0000F47E 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F484 6600                       		bne.s	loc_DC0C
0000F486 117C 0008 0024             		move.b	#8,$24(a0)
0000F48C                            
0000F48C                            loc_DC0C:
0000F48C 0828 0005 0022             		btst	#5,$22(a0)
0000F492 6600                       		bne.s	Obj41_BounceLR
0000F494 4E75                       		rts	
0000F496                            ; ===========================================================================
0000F496                            
0000F496                            Obj41_BounceLR:				; XREF: Obj41_LR
0000F496 5428 0024                  		addq.b	#2,$24(a0)
0000F49A 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000F4A0 5069 0008                  		addq.w	#8,8(a1)
0000F4A4 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000F4AA 6600                       		bne.s	loc_DC36	; if yes, branch
0000F4AC 0469 0010 0008             		subi.w	#$10,8(a1)
0000F4B2 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000F4B6                            
0000F4B6                            loc_DC36:
0000F4B6 337C 000F 003E             		move.w	#$F,$3E(a1)
0000F4BC 3369 0010 0020             		move.w	$10(a1),$20(a1)
0000F4C2 0869 0000 0022             		bchg	#0,$22(a1)
0000F4C8 0829 0002 0022             		btst	#2,$22(a1)
0000F4CE 6600                       		bne.s	loc_DC56
0000F4D0 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000F4D6                            
0000F4D6                            loc_DC56:
0000F4D6 08A8 0005 0022             		bclr	#5,$22(a0)
0000F4DC 08A9 0005 0022             		bclr	#5,$22(a1)
0000F4E2 303C 00CC                  		move.w	#$CC,d0
0000F4E6 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play spring sound
0000F4EC                            
0000F4EC                            Obj41_AniLR:				; XREF: Obj41_Index
0000F4EC 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F4F2 6000 C4B6                  		bra.w	AnimateSprite
0000F4F6                            ; ===========================================================================
0000F4F6                            
0000F4F6                            Obj41_ResetLR:				; XREF: Obj41_Index
0000F4F6 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000F4FC 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000F500 4E75                       		rts	
0000F502                            ; ===========================================================================
0000F502                            
0000F502                            Obj41_Dwn:				; XREF: Obj41_Index
0000F502 323C 001B                  		move.w	#$1B,d1
0000F506 343C 0008                  		move.w	#8,d2
0000F50A 363C 0010                  		move.w	#$10,d3
0000F50E 3828 0008                  		move.w	8(a0),d4
0000F512 6100 0000                  		bsr.w	SolidObject
0000F516 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F51C 6600                       		bne.s	loc_DCA4
0000F51E 117C 000E 0024             		move.b	#$E,$24(a0)
0000F524                            
0000F524                            loc_DCA4:
0000F524 4A28 0025                  		tst.b	$25(a0)
0000F528 6600                       		bne.s	locret_DCAE
0000F52A 4A44                       		tst.w	d4
0000F52C 6B00                       		bmi.s	Obj41_BounceDwn
0000F52E                            
0000F52E                            locret_DCAE:
0000F52E 4E75                       		rts	
0000F530                            ; ===========================================================================
0000F530                            
0000F530                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000F530 5428 0024                  		addq.b	#2,$24(a0)
0000F534 5169 000C                  		subq.w	#8,$C(a1)
0000F538 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000F53E 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000F542 08E9 0001 0022             		bset	#1,$22(a1)
0000F548 08A9 0003 0022             		bclr	#3,$22(a1)
0000F54E 137C 0002 0024             		move.b	#2,$24(a1)
0000F554 08A8 0003 0022             		bclr	#3,$22(a0)
0000F55A 4228 0025                  		clr.b	$25(a0)
0000F55E 303C 00CC                  		move.w	#$CC,d0
0000F562 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play spring sound
0000F568                            
0000F568                            Obj41_AniDwn:				; XREF: Obj41_Index
0000F568 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F56E 6000 C43A                  		bra.w	AnimateSprite
0000F572                            ; ===========================================================================
0000F572                            
0000F572                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000F572 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F578 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000F57C 4E75                       		rts	
0000F57E                            ; ===========================================================================
0000F57E                            Ani_obj41:
0000F57E                            	include "_anim\obj41.asm"
0000F57E                            ; ---------------------------------------------------------------------------
0000F57E                            ; Animation script - springs
0000F57E                            ; ---------------------------------------------------------------------------
0000F57E 0000                       		dc.w byte_DD02-Ani_obj41
0000F580 0000                       		dc.w byte_DD0E-Ani_obj41
0000F582 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000F58E 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000F59A                            		even
0000F59A                            		even
0000F59A                            
0000F59A                            ; ---------------------------------------------------------------------------
0000F59A                            ; Sprite mappings - springs
0000F59A                            ; ---------------------------------------------------------------------------
0000F59A                            Map_obj41:
0000F59A                            	include "_maps\obj41.asm"
0000F59A                            ; ---------------------------------------------------------------------------
0000F59A                            ; Sprite mappings - springs
0000F59A                            ; ---------------------------------------------------------------------------
0000F59A 0000                       		dc.w byte_DD26-Map_obj41
0000F59C 0000                       		dc.w byte_DD31-Map_obj41
0000F59E 0000                       		dc.w byte_DD37-Map_obj41
0000F5A0 0000                       		dc.w byte_DD47-Map_obj41
0000F5A2 0000                       		dc.w byte_DD4D-Map_obj41
0000F5A4 0000                       		dc.w byte_DD53-Map_obj41
0000F5A6 02                         byte_DD26:	dc.b 2
0000F5A7 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000F5AC 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000F5B1 01                         byte_DD31:	dc.b 1
0000F5B2 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000F5B7 03                         byte_DD37:	dc.b 3
0000F5B8 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000F5BD F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F5C2 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000F5C7 01                         byte_DD47:	dc.b 1
0000F5C8 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000F5CD 01                         byte_DD4D:	dc.b 1
0000F5CE F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000F5D3 04                         byte_DD53:	dc.b 4
0000F5D4 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000F5D9 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000F5DE F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000F5E3 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000F5E8                            		even
0000F5E8                            		even
0000F5E8                            
0000F5E8                            ; ===========================================================================
0000F5E8                            ; ---------------------------------------------------------------------------
0000F5E8                            ; Object 42 - Newtron enemy (GHZ)
0000F5E8                            ; ---------------------------------------------------------------------------
0000F5E8                            
0000F5E8                            Obj42:					; XREF: Obj_Index
0000F5E8 7000                       		moveq	#0,d0
0000F5EA 1028 0024                  		move.b	$24(a0),d0
0000F5EE 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000F5F2 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000F5F6                            ; ===========================================================================
0000F5F6 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000F5F8 0000                       		dc.w Obj42_Action-Obj42_Index
0000F5FA 0000                       		dc.w Obj42_Delete-Obj42_Index
0000F5FC                            ; ===========================================================================
0000F5FC                            
0000F5FC                            Obj42_Main:				; XREF: Obj42_Index
0000F5FC 5428 0024                  		addq.b	#2,$24(a0)
0000F600 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000F608 317C 049B 0002             		move.w	#$49B,2(a0)
0000F60E 117C 0004 0001             		move.b	#4,1(a0)
0000F614 117C 0004 0018             		move.b	#4,$18(a0)
0000F61A 117C 0014 0019             		move.b	#$14,$19(a0)
0000F620 117C 0010 0016             		move.b	#$10,$16(a0)
0000F626 117C 0008 0017             		move.b	#8,$17(a0)
0000F62C                            
0000F62C                            Obj42_Action:				; XREF: Obj42_Index
0000F62C 7000                       		moveq	#0,d0
0000F62E 1028 0025                  		move.b	$25(a0),d0
0000F632 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000F636 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000F63A 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000F640 6100 C368                  		bsr.w	AnimateSprite
0000F644 6000 0000                  		bra.w	MarkObjGone
0000F648                            ; ===========================================================================
0000F648 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000F64A 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000F64C 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000F64E 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000F650 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000F652                            ; ===========================================================================
0000F652                            
0000F652                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000F652 08E8 0000 0022             		bset	#0,$22(a0)
0000F658 3038 D008                  		move.w	($FFFFD008).w,d0
0000F65C 9068 0008                  		sub.w	8(a0),d0
0000F660 6400                       		bcc.s	loc_DDEA
0000F662 4440                       		neg.w	d0
0000F664 08A8 0000 0022             		bclr	#0,$22(a0)
0000F66A                            
0000F66A                            loc_DDEA:
0000F66A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000F66E 6400                       		bcc.s	locret_DE12	; if not, branch
0000F670 5428 0025                  		addq.b	#2,$25(a0)
0000F674 117C 0001 001C             		move.b	#1,$1C(a0)
0000F67A 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000F67E 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000F680 317C 249B 0002             		move.w	#$249B,2(a0)
0000F686 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000F68C 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000F692                            
0000F692                            locret_DE12:
0000F692 4E75                       		rts	
0000F694                            ; ===========================================================================
0000F694                            
0000F694                            Obj42_Type00:				; XREF: Obj42_Index2
0000F694 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000F69A 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000F69C 08E8 0000 0022             		bset	#0,$22(a0)
0000F6A2 3038 D008                  		move.w	($FFFFD008).w,d0
0000F6A6 9068 0008                  		sub.w	8(a0),d0
0000F6AA 6400                       		bcc.s	locret_DE32
0000F6AC 08A8 0000 0022             		bclr	#0,$22(a0)
0000F6B2                            
0000F6B2                            locret_DE32:
0000F6B2 4E75                       		rts	
0000F6B4                            ; ===========================================================================
0000F6B4                            
0000F6B4                            Obj42_Fall:				; XREF: Obj42_Type00
0000F6B4 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F6BA 6600                       		bne.s	loc_DE42
0000F6BC 117C 000C 0020             		move.b	#$C,$20(a0)
0000F6C2                            
0000F6C2                            loc_DE42:
0000F6C2 6100 F24C                  		bsr.w	ObjectFall
0000F6C6 6100 0000                  		bsr.w	ObjHitFloor
0000F6CA 4A41                       		tst.w	d1		; has newtron hit the floor?
0000F6CC 6A00                       		bpl.s	locret_DE86	; if not, branch
0000F6CE D368 000C                  		add.w	d1,$C(a0)
0000F6D2 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000F6D8 5428 0025                  		addq.b	#2,$25(a0)
0000F6DC 117C 0002 001C             		move.b	#2,$1C(a0)
0000F6E2 0828 0005 0002             		btst	#5,2(a0)
0000F6E8 6700                       		beq.s	Obj42_Move
0000F6EA 5228 001C                  		addq.b	#1,$1C(a0)
0000F6EE                            
0000F6EE                            Obj42_Move:
0000F6EE 117C 000D 0020             		move.b	#$D,$20(a0)
0000F6F4 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000F6FA 0828 0000 0022             		btst	#0,$22(a0)
0000F700 6600                       		bne.s	locret_DE86
0000F702 4468 0010                  		neg.w	$10(a0)
0000F706                            
0000F706                            locret_DE86:
0000F706 4E75                       		rts	
0000F708                            ; ===========================================================================
0000F708                            
0000F708                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000F708 6100 F226                  		bsr.w	SpeedToPos
0000F70C 6100 0000                  		bsr.w	ObjHitFloor
0000F710 0C41 FFF8                  		cmpi.w	#-8,d1
0000F714 6D00                       		blt.s	loc_DEA2
0000F716 0C41 000C                  		cmpi.w	#$C,d1
0000F71A 6C00                       		bge.s	loc_DEA2
0000F71C D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000F720 4E75                       		rts	
0000F722                            ; ===========================================================================
0000F722                            
0000F722                            loc_DEA2:
0000F722 5428 0025                  		addq.b	#2,$25(a0)
0000F726 4E75                       		rts	
0000F728                            ; ===========================================================================
0000F728                            
0000F728                            Obj42_Speed:				; XREF: Obj42_Index2
0000F728 6100 F206                  		bsr.w	SpeedToPos
0000F72C 4E75                       		rts	
0000F72E                            ; ===========================================================================
0000F72E                            
0000F72E                            Obj42_Type01:				; XREF: Obj42_Index2
0000F72E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F734 6600                       		bne.s	Obj42_FireMissile
0000F736 117C 000C 0020             		move.b	#$C,$20(a0)
0000F73C                            
0000F73C                            Obj42_FireMissile:
0000F73C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000F742 6600                       		bne.s	locret_DF14
0000F744 4A28 0032                  		tst.b	$32(a0)
0000F748 6600                       		bne.s	locret_DF14
0000F74A 117C 0001 0032             		move.b	#1,$32(a0)
0000F750 6100 F94E                  		bsr.w	SingleObjLoad
0000F754 6600                       		bne.s	locret_DF14
0000F756 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000F75A 3368 0008 0008             		move.w	8(a0),8(a1)
0000F760 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F766 5169 000C                  		subq.w	#8,$C(a1)
0000F76A 337C 0200 0010             		move.w	#$200,$10(a1)
0000F770 303C 0014                  		move.w	#$14,d0
0000F774 0828 0000 0022             		btst	#0,$22(a0)
0000F77A 6600                       		bne.s	loc_DF04
0000F77C 4440                       		neg.w	d0
0000F77E 4469 0010                  		neg.w	$10(a1)
0000F782                            
0000F782                            loc_DF04:
0000F782 D169 0008                  		add.w	d0,8(a1)
0000F786 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F78C 137C 0001 0028             		move.b	#1,$28(a1)
0000F792                            
0000F792                            locret_DF14:
0000F792 4E75                       		rts	
0000F794                            ; ===========================================================================
0000F794                            
0000F794                            Obj42_Delete:				; XREF: Obj42_Index
0000F794 6000 F204                  		bra.w	DeleteObject
0000F798                            ; ===========================================================================
0000F798                            Ani_obj42:
0000F798                            	include "_anim\obj42.asm"
0000F798                            ; ---------------------------------------------------------------------------
0000F798                            ; Animation script - Newtron enemy
0000F798                            ; ---------------------------------------------------------------------------
0000F798 0000                       		dc.w byte_DF24-Ani_obj42
0000F79A 0000                       		dc.w byte_DF28-Ani_obj42
0000F79C 0000                       		dc.w byte_DF30-Ani_obj42
0000F79E 0000                       		dc.w byte_DF34-Ani_obj42
0000F7A0 0000                       		dc.w byte_DF38-Ani_obj42
0000F7A2 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000F7A6 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000F7AE 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000F7B2 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000F7B6 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000F7C0                            		even
0000F7C0                            		even
0000F7C0                            
0000F7C0                            ; ---------------------------------------------------------------------------
0000F7C0                            ; Sprite mappings - Newtron enemy (GHZ)
0000F7C0                            ; ---------------------------------------------------------------------------
0000F7C0                            Map_obj42:
0000F7C0                            	include "_maps\obj42.asm"
0000F7C0                            ; ---------------------------------------------------------------------------
0000F7C0                            ; Sprite mappings - Newtron enemy (GHZ)
0000F7C0                            ; ---------------------------------------------------------------------------
0000F7C0 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000F7C4 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000F7C8 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000F7CC 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000F7D0 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000F7D4 0000                       		dc.w byte_DFF8-Map_obj42
0000F7D6 03                         byte_DF58:	dc.b 3
0000F7D7 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000F7DC F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000F7E1 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000F7E6 03                         byte_DF68:	dc.b 3
0000F7E7 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000F7EC EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F7F1 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F7F6 03                         byte_DF78:	dc.b 3
0000F7F7 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000F7FC EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F801 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F806 04                         byte_DF88:	dc.b 4
0000F807 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000F80C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F811 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000F816 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000F81B 03                         byte_DF9D:	dc.b 3
0000F81C F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000F821 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000F826 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000F82B 02                         byte_DFAD:	dc.b 2
0000F82C F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F831 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F836 03                         byte_DFB8:	dc.b 3
0000F837 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F83C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F841 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000F846 03                         byte_DFC8:	dc.b 3
0000F847 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F84C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F851 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000F856 03                         byte_DFD8:	dc.b 3
0000F857 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F85C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F861 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000F866 03                         byte_DFE8:	dc.b 3
0000F867 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F86C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F871 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000F876 00                         byte_DFF8:	dc.b 0
0000F878 00                         		even
0000F878 00                         		even
0000F878                            
0000F878                            ; ===========================================================================
0000F878                            ; ---------------------------------------------------------------------------
0000F878                            ; Object 43 - Roller enemy (SYZ)
0000F878                            ; ---------------------------------------------------------------------------
0000F878                            
0000F878                            Obj43:					; XREF: Obj_Index
0000F878 7000                       		moveq	#0,d0
0000F87A 1028 0024                  		move.b	$24(a0),d0
0000F87E 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000F882 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000F886                            ; ===========================================================================
0000F886 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000F888 0000                       		dc.w Obj43_Action-Obj43_Index
0000F88A                            ; ===========================================================================
0000F88A                            
0000F88A                            Obj43_Main:				; XREF: Obj43_Index
0000F88A 117C 000E 0016             		move.b	#$E,$16(a0)
0000F890 117C 0008 0017             		move.b	#8,$17(a0)
0000F896 6100 F078                  		bsr.w	ObjectFall
0000F89A 6100 0000                  		bsr.w	ObjHitFloor
0000F89E 4A41                       		tst.w	d1
0000F8A0 6A00                       		bpl.s	locret_E052
0000F8A2 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000F8A6 317C 0000 0012             		move.w	#0,$12(a0)
0000F8AC 5428 0024                  		addq.b	#2,$24(a0)
0000F8B0 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000F8B8 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000F8BE 117C 0004 0001             		move.b	#4,1(a0)
0000F8C4 117C 0004 0018             		move.b	#4,$18(a0)
0000F8CA 117C 0010 0019             		move.b	#$10,$19(a0)
0000F8D0                            
0000F8D0                            locret_E052:
0000F8D0 4E75                       		rts	
0000F8D2                            ; ===========================================================================
0000F8D2                            
0000F8D2                            Obj43_Action:				; XREF: Obj43_Index
0000F8D2 7000                       		moveq	#0,d0
0000F8D4 1028 0025                  		move.b	$25(a0),d0
0000F8D8 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000F8DC 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000F8E0 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000F8E6 6100 C0C2                  		bsr.w	AnimateSprite
0000F8EA 3028 0008                  		move.w	8(a0),d0
0000F8EE 0240 FF80                  		andi.w	#$FF80,d0
0000F8F2 3238 F700                  		move.w	($FFFFF700).w,d1
0000F8F6 0441 0080                  		subi.w	#$80,d1
0000F8FA 0241 FF80                  		andi.w	#$FF80,d1
0000F8FE 9041                       		sub.w	d1,d0
0000F900 0C40 0280                  		cmpi.w	#$280,d0
0000F904 6E00 0000                  		bgt.w	Obj43_ChkGone
0000F908 6000 F040                  		bra.w	DisplaySprite
0000F90C                            ; ===========================================================================
0000F90C                            
0000F90C                            Obj43_ChkGone:				; XREF: Obj43_Action
0000F90C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000F910 6700                       		beq.s	Obj43_Delete		; if it's zero, don't remember object
0000F912 3440                       		movea.w	d0,a2	; load address into a2
0000F914 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000F918                            
0000F918                            Obj43_Delete:
0000F918 6000 F080                  		bra.w	DeleteObject
0000F91C                            ; ===========================================================================
0000F91C 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000F91E 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000F920 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000F922 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000F924                            ; ===========================================================================
0000F924                            
0000F924                            Obj43_RollChk:				; XREF: Obj43_Index2
0000F924 3038 D008                  		move.w	($FFFFD008).w,d0
0000F928 0440 0100                  		subi.w	#$100,d0
0000F92C 6500                       		bcs.s	loc_E0D2
0000F92E 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000F932 6500                       		bcs.s	loc_E0D2
0000F934 5828 0025                  		addq.b	#4,$25(a0)
0000F938 117C 0002 001C             		move.b	#2,$1C(a0)
0000F93E 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000F944 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000F94A                            
0000F94A                            loc_E0D2:
0000F94A 588F                       		addq.l	#4,sp
0000F94C 4E75                       		rts	
0000F94E                            ; ===========================================================================
0000F94E                            
0000F94E                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000F94E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000F954 6700                       		beq.s	loc_E0F8
0000F956 5368 0030                  		subq.w	#1,$30(a0)
0000F95A 6A00                       		bpl.s	locret_E0F6
0000F95C 117C 0001 001C             		move.b	#1,$1C(a0)
0000F962 317C 0700 0010             		move.w	#$700,$10(a0)
0000F968 117C 008E 0020             		move.b	#$8E,$20(a0)
0000F96E                            
0000F96E                            locret_E0F6:
0000F96E 4E75                       		rts	
0000F970                            ; ===========================================================================
0000F970                            
0000F970                            loc_E0F8:
0000F970 5428 0025                  		addq.b	#2,$25(a0)
0000F974 4E75                       		rts	
0000F976                            ; ===========================================================================
0000F976                            
0000F976                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000F976 6100 0000                  		bsr.w	Obj43_Stop
0000F97A 6100 EFB4                  		bsr.w	SpeedToPos
0000F97E 6100 0000                  		bsr.w	ObjHitFloor
0000F982 0C41 FFF8                  		cmpi.w	#-8,d1
0000F986 6D00                       		blt.s	Obj43_Jump
0000F988 0C41 000C                  		cmpi.w	#$C,d1
0000F98C 6C00                       		bge.s	Obj43_Jump
0000F98E D368 000C                  		add.w	d1,$C(a0)
0000F992 4E75                       		rts	
0000F994                            ; ===========================================================================
0000F994                            
0000F994                            Obj43_Jump:
0000F994 5428 0025                  		addq.b	#2,$25(a0)
0000F998 08E8 0000 0032             		bset	#0,$32(a0)
0000F99E 6700                       		beq.s	locret_E12E
0000F9A0 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000F9A6                            
0000F9A6                            locret_E12E:
0000F9A6 4E75                       		rts	
0000F9A8                            ; ===========================================================================
0000F9A8                            
0000F9A8                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000F9A8 6100 EF66                  		bsr.w	ObjectFall
0000F9AC 4A68 0012                  		tst.w	$12(a0)
0000F9B0 6B00                       		bmi.s	locret_E150
0000F9B2 6100 0000                  		bsr.w	ObjHitFloor
0000F9B6 4A41                       		tst.w	d1
0000F9B8 6A00                       		bpl.s	locret_E150
0000F9BA D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000F9BE 5528 0025                  		subq.b	#2,$25(a0)
0000F9C2 317C 0000 0012             		move.w	#0,$12(a0)
0000F9C8                            
0000F9C8                            locret_E150:
0000F9C8 4E75                       		rts	
0000F9CA                            
0000F9CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9CA                            
0000F9CA                            
0000F9CA                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000F9CA 4A28 0032                  		tst.b	$32(a0)
0000F9CE 6B00                       		bmi.s	locret_E188
0000F9D0 3038 D008                  		move.w	($FFFFD008).w,d0
0000F9D4 0440 0030                  		subi.w	#$30,d0
0000F9D8 9068 0008                  		sub.w	8(a0),d0
0000F9DC 6400                       		bcc.s	locret_E188
0000F9DE 117C 0000 001C             		move.b	#0,$1C(a0)
0000F9E4 117C 000E 0020             		move.b	#$E,$20(a0)
0000F9EA 4268 0010                  		clr.w	$10(a0)
0000F9EE 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000F9F4 117C 0002 0025             		move.b	#2,$25(a0)
0000F9FA 08E8 0007 0032             		bset	#7,$32(a0)
0000FA00                            
0000FA00                            locret_E188:
0000FA00 4E75                       		rts	
0000FA02                            ; End of function Obj43_Stop
0000FA02                            
0000FA02                            ; ===========================================================================
0000FA02                            Ani_obj43:
0000FA02                            	include "_anim\obj43.asm"
0000FA02                            ; ---------------------------------------------------------------------------
0000FA02                            ; Animation script - Roller enemy
0000FA02                            ; ---------------------------------------------------------------------------
0000FA02 0000                       		dc.w byte_E190-Ani_obj43
0000FA04 0000                       		dc.w byte_E196-Ani_obj43
0000FA06 0000                       		dc.w byte_E19C-Ani_obj43
0000FA08 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000FA0E 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000FA14 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000FA1A 00                         		even
0000FA1A 00                         		even
0000FA1A                            
0000FA1A                            ; ---------------------------------------------------------------------------
0000FA1A                            ; Sprite mappings - Roller enemy (SYZ)
0000FA1A                            ; ---------------------------------------------------------------------------
0000FA1A                            Map_obj43:
0000FA1A                            	include "_maps\obj43.asm"
0000FA1A                            ; ---------------------------------------------------------------------------
0000FA1A                            ; Sprite mappings - Roller enemy (SYZ)
0000FA1A                            ; ---------------------------------------------------------------------------
0000FA1A 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000FA1E 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000FA22 0000                       		dc.w byte_E1CE-Map_obj43
0000FA24 02                         byte_E1AC:	dc.b 2
0000FA25 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000FA2A F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000FA2F 02                         byte_E1B7:	dc.b 2
0000FA30 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000FA35 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000FA3A 01                         byte_E1C2:	dc.b 1
0000FA3B F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000FA40 01                         byte_E1C8:	dc.b 1
0000FA41 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000FA46 01                         byte_E1CE:	dc.b 1
0000FA47 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000FA4C                            		even
0000FA4C                            		even
0000FA4C                            
0000FA4C                            ; ===========================================================================
0000FA4C                            ; ---------------------------------------------------------------------------
0000FA4C                            ; Object 44 - walls (GHZ)
0000FA4C                            ; ---------------------------------------------------------------------------
0000FA4C                            
0000FA4C                            Obj44:					; XREF: Obj_Index
0000FA4C 7000                       		moveq	#0,d0
0000FA4E 1028 0024                  		move.b	$24(a0),d0
0000FA52 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000FA56 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000FA5A                            ; ===========================================================================
0000FA5A 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000FA5C 0000                       		dc.w Obj44_Solid-Obj44_Index
0000FA5E 0000                       		dc.w Obj44_Display-Obj44_Index
0000FA60                            ; ===========================================================================
0000FA60                            
0000FA60                            Obj44_Main:				; XREF: Obj44_Index
0000FA60 5428 0024                  		addq.b	#2,$24(a0)
0000FA64 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000FA6C 317C 434C 0002             		move.w	#$434C,2(a0)
0000FA72 0028 0004 0001             		ori.b	#4,1(a0)
0000FA78 117C 0008 0019             		move.b	#8,$19(a0)
0000FA7E 117C 0006 0018             		move.b	#6,$18(a0)
0000FA84 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000FA8A 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000FA90 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000FA92 5428 0024                  		addq.b	#2,$24(a0)
0000FA96 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000FA98                            ; ===========================================================================
0000FA98                            
0000FA98                            Obj44_Solid:				; XREF: Obj44_Index
0000FA98 323C 0013                  		move.w	#$13,d1
0000FA9C 343C 0028                  		move.w	#$28,d2
0000FAA0 6100 A332                  		bsr.w	Obj44_SolidWall
0000FAA4                            
0000FAA4                            Obj44_Display:				; XREF: Obj44_Index
0000FAA4 6100 EEA4                  		bsr.w	DisplaySprite
0000FAA8 3028 0008                  		move.w	8(a0),d0
0000FAAC 0240 FF80                  		andi.w	#$FF80,d0
0000FAB0 3238 F700                  		move.w	($FFFFF700).w,d1
0000FAB4 0441 0080                  		subi.w	#$80,d1
0000FAB8 0241 FF80                  		andi.w	#$FF80,d1
0000FABC 9041                       		sub.w	d1,d0
0000FABE 0C40 0280                  		cmpi.w	#$280,d0
0000FAC2 6300                       		bls.s	Obj44_NoDel
0000FAC4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000FAC8 6700 EED0                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000FACC 3440                       		movea.w	d0,a2	; load address into a2
0000FACE 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000FAD2 6000 EEC6                  		bra.w	DeleteObject	; and delete object
0000FAD6                            
0000FAD6                            Obj44_NoDel:
0000FAD6 4E75                       		rts	
0000FAD8                            ; ===========================================================================
0000FAD8                            ; ---------------------------------------------------------------------------
0000FAD8                            ; Sprite mappings - walls (GHZ)
0000FAD8                            ; ---------------------------------------------------------------------------
0000FAD8                            Map_obj44:
0000FAD8                            	include "_maps\obj44.asm"
0000FAD8                            ; ---------------------------------------------------------------------------
0000FAD8                            ; Sprite mappings - walls (GHZ)
0000FAD8                            ; ---------------------------------------------------------------------------
0000FAD8 0000                       		dc.w byte_E256-Map_obj44
0000FADA 0000                       		dc.w byte_E26B-Map_obj44
0000FADC 0000                       		dc.w byte_E280-Map_obj44
0000FADE 04                         byte_E256:	dc.b 4
0000FADF E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000FAE4 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FAE9 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000FAEE 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000FAF3 04                         byte_E26B:	dc.b 4
0000FAF4 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000FAF9 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FAFE 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000FB03 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000FB08 04                         byte_E280:	dc.b 4
0000FB09 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000FB0E F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000FB13 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000FB18 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000FB1E 00                         		even
0000FB1E 00                         		even
0000FB1E                            
0000FB1E                            ; ===========================================================================
0000FB1E                            ; ---------------------------------------------------------------------------
0000FB1E                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000FB1E                            ; ---------------------------------------------------------------------------
0000FB1E                            
0000FB1E                            Obj13:					; XREF: Obj_Index
0000FB1E 7000                       		moveq	#0,d0
0000FB20 1028 0024                  		move.b	$24(a0),d0
0000FB24 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000FB28 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000FB2C 6000 0000                  		bra.w	Obj14_ChkDel
0000FB30                            ; ===========================================================================
0000FB30 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000FB32 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000FB34                            ; ---------------------------------------------------------------------------
0000FB34                            ;
0000FB34                            ; Lava ball production rates
0000FB34                            ;
0000FB34 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000FB3A                            ; ===========================================================================
0000FB3A                            
0000FB3A                            Obj13_Main:				; XREF: Obj13_Index
0000FB3A 5428 0024                  		addq.b	#2,$24(a0)
0000FB3E 1028 0028                  		move.b	$28(a0),d0
0000FB42 E848                       		lsr.w	#4,d0
0000FB44 0240 000F                  		andi.w	#$F,d0
0000FB48 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000FB4E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000FB54 0228 000F 0028             		andi.b	#$F,$28(a0)
0000FB5A                            
0000FB5A                            Obj13_MakeLava:				; XREF: Obj13_Index
0000FB5A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000FB5E 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000FB60 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000FB66 6100 F1A8                  		bsr.w	ChkObjOnScreen
0000FB6A 6600                       		bne.s	locret_E302
0000FB6C 6100 F532                  		bsr.w	SingleObjLoad
0000FB70 6600                       		bne.s	locret_E302
0000FB72 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000FB76 3368 0008 0008             		move.w	8(a0),8(a1)
0000FB7C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FB82 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FB88                            
0000FB88                            locret_E302:
0000FB88 4E75                       		rts	
0000FB8A                            ; ===========================================================================
0000FB8A                            ; ---------------------------------------------------------------------------
0000FB8A                            ; Object 14 - lava balls (MZ, SLZ)
0000FB8A                            ; ---------------------------------------------------------------------------
0000FB8A                            
0000FB8A                            Obj14:					; XREF: Obj_Index
0000FB8A 7000                       		moveq	#0,d0
0000FB8C 1028 0024                  		move.b	$24(a0),d0
0000FB90 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000FB94 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000FB98 6000 EDB0                  		bra.w	DisplaySprite
0000FB9C                            ; ===========================================================================
0000FB9C 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000FB9E 0000                       		dc.w Obj14_Action-Obj14_Index
0000FBA0 0000                       		dc.w Obj14_Delete-Obj14_Index
0000FBA2                            
0000FBA2 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000FBAC 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000FBB4                            ; ===========================================================================
0000FBB4                            
0000FBB4                            Obj14_Main:				; XREF: Obj14_Index
0000FBB4 5428 0024                  		addq.b	#2,$24(a0)
0000FBB8 117C 0008 0016             		move.b	#8,$16(a0)
0000FBBE 117C 0008 0017             		move.b	#8,$17(a0)
0000FBC4 217C 0000 C644 0004        		move.l	#Map_obj14,4(a0)
0000FBCC 317C 0345 0002             		move.w	#$345,2(a0)
0000FBD2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000FBD8 6600                       		bne.s	loc_E35A
0000FBDA 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000FBE0                            
0000FBE0                            loc_E35A:
0000FBE0 117C 0004 0001             		move.b	#4,1(a0)
0000FBE6 117C 0003 0018             		move.b	#3,$18(a0)
0000FBEC 117C 008B 0020             		move.b	#$8B,$20(a0)
0000FBF2 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FBF8 4A28 0029                  		tst.b	$29(a0)
0000FBFC 6700                       		beq.s	Obj14_SetSpeed
0000FBFE 5428 0018                  		addq.b	#2,$18(a0)
0000FC02                            
0000FC02                            Obj14_SetSpeed:
0000FC02 7000                       		moveq	#0,d0
0000FC04 1028 0028                  		move.b	$28(a0),d0
0000FC08 D040                       		add.w	d0,d0
0000FC0A 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000FC10 117C 0008 0019             		move.b	#8,$19(a0)
0000FC16 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000FC1C 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000FC1E 117C 0010 0019             		move.b	#$10,$19(a0)
0000FC24 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000FC2A 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000FC30 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000FC36                            
0000FC36                            Obj14_PlaySnd:
0000FC36 303C 00AE                  		move.w	#$AE,d0
0000FC3A 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000FC40                            
0000FC40                            Obj14_Action:				; XREF: Obj14_Index
0000FC40 7000                       		moveq	#0,d0
0000FC42 1028 0028                  		move.b	$28(a0),d0
0000FC46 D040                       		add.w	d0,d0
0000FC48 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000FC4C 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000FC50 6100 ECDE                  		bsr.w	SpeedToPos
0000FC54 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000FC5A 6100 BD4E                  		bsr.w	AnimateSprite
0000FC5E                            
0000FC5E                            Obj14_ChkDel:				; XREF: Obj13
0000FC5E 3028 0008                  		move.w	8(a0),d0
0000FC62 0240 FF80                  		andi.w	#$FF80,d0
0000FC66 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC6A 0441 0080                  		subi.w	#$80,d1
0000FC6E 0241 FF80                  		andi.w	#$FF80,d1
0000FC72 9041                       		sub.w	d1,d0
0000FC74 0C40 0280                  		cmpi.w	#$280,d0
0000FC78 6300                       		bls.s	Obj14_NoDel
0000FC7A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000FC7E 6700 ED1A                  		beq.w	DeleteObject	; if it's zero, don't remember object
0000FC82 3440                       		movea.w	d0,a2	; load address into a2
0000FC84 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000FC88 6000 ED10                  		bra.w	DeleteObject	; and delete object
0000FC8C                            
0000FC8C                            Obj14_NoDel:
0000FC8C 4E75                       		rts	
0000FC8E                            ; ===========================================================================
0000FC8E 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FC92 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FC96 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000FC9A 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000FC9E 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000FCA0                            ; ===========================================================================
0000FCA0                            ; lavaball types 00-03 fly up and fall back down
0000FCA0                            
0000FCA0                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000FCA0 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000FCA6 3028 0030                  		move.w	$30(a0),d0
0000FCAA B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000FCAE 6400                       		bcc.s	loc_E41E	; if not, branch
0000FCB0 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000FCB4                            
0000FCB4                            loc_E41E:
0000FCB4 08A8 0001 0022             		bclr	#1,$22(a0)
0000FCBA 4A68 0012                  		tst.w	$12(a0)
0000FCBE 6A00                       		bpl.s	locret_E430
0000FCC0 08E8 0001 0022             		bset	#1,$22(a0)
0000FCC6                            
0000FCC6                            locret_E430:
0000FCC6 4E75                       		rts	
0000FCC8                            ; ===========================================================================
0000FCC8                            ; lavaball type	04 flies up until it hits the ceiling
0000FCC8                            
0000FCC8                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000FCC8 08E8 0001 0022             		bset	#1,$22(a0)
0000FCCE 6100 0000                  		bsr.w	ObjHitCeiling
0000FCD2 4A41                       		tst.w	d1
0000FCD4 6A00                       		bpl.s	locret_E452
0000FCD6 117C 0008 0028             		move.b	#8,$28(a0)
0000FCDC 117C 0001 001C             		move.b	#1,$1C(a0)
0000FCE2 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000FCE8                            
0000FCE8                            locret_E452:
0000FCE8 4E75                       		rts	
0000FCEA                            ; ===========================================================================
0000FCEA                            ; lavaball type	05 falls down until it hits the	floor
0000FCEA                            
0000FCEA                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000FCEA 08A8 0001 0022             		bclr	#1,$22(a0)
0000FCF0 6100 0000                  		bsr.w	ObjHitFloor
0000FCF4 4A41                       		tst.w	d1
0000FCF6 6A00                       		bpl.s	locret_E474
0000FCF8 117C 0008 0028             		move.b	#8,$28(a0)
0000FCFE 117C 0001 001C             		move.b	#1,$1C(a0)
0000FD04 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000FD0A                            
0000FD0A                            locret_E474:
0000FD0A 4E75                       		rts	
0000FD0C                            ; ===========================================================================
0000FD0C                            ; lavaball types 06-07 move sideways
0000FD0C                            
0000FD0C                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000FD0C 08E8 0000 0022             		bset	#0,$22(a0)
0000FD12 76F8                       		moveq	#-8,d3
0000FD14 6100 0000                  		bsr.w	ObjHitWallLeft
0000FD18 4A41                       		tst.w	d1
0000FD1A 6A00                       		bpl.s	locret_E498
0000FD1C 117C 0008 0028             		move.b	#8,$28(a0)
0000FD22 117C 0003 001C             		move.b	#3,$1C(a0)
0000FD28 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000FD2E                            
0000FD2E                            locret_E498:
0000FD2E 4E75                       		rts	
0000FD30                            ; ===========================================================================
0000FD30                            
0000FD30                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000FD30 08A8 0000 0022             		bclr	#0,$22(a0)
0000FD36 7608                       		moveq	#8,d3
0000FD38 6100 0000                  		bsr.w	ObjHitWallRight
0000FD3C 4A41                       		tst.w	d1
0000FD3E 6A00                       		bpl.s	locret_E4BC
0000FD40 117C 0008 0028             		move.b	#8,$28(a0)
0000FD46 117C 0003 001C             		move.b	#3,$1C(a0)
0000FD4C 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000FD52                            
0000FD52                            locret_E4BC:
0000FD52 4E75                       		rts	
0000FD54                            ; ===========================================================================
0000FD54                            
0000FD54                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000FD54 4E75                       		rts	
0000FD56                            ; ===========================================================================
0000FD56                            
0000FD56                            Obj14_Delete:				; XREF: Obj14_Index
0000FD56 6000 EC42                  		bra.w	DeleteObject
0000FD5A                            ; ===========================================================================
0000FD5A                            Ani_obj14:
0000FD5A                            	include "_anim\obj14.asm"
0000FD5A                            ; ---------------------------------------------------------------------------
0000FD5A                            ; Animation script - lava balls
0000FD5A                            ; ---------------------------------------------------------------------------
0000FD5A 0000                       		dc.w byte_E4CC-Ani_obj14
0000FD5C 0000                       		dc.w byte_E4D2-Ani_obj14
0000FD5E 0000                       		dc.w byte_E4D6-Ani_obj14
0000FD60 0000                       		dc.w byte_E4DC-Ani_obj14
0000FD62 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000FD68 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000FD6C 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000FD72 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000FD76                            		even
0000FD76                            		even
0000FD76                            
0000FD76                            ; ===========================================================================
0000FD76                            ; ---------------------------------------------------------------------------
0000FD76                            ; Object 6D - flame thrower (SBZ)
0000FD76                            ; ---------------------------------------------------------------------------
0000FD76                            
0000FD76                            Obj6D:					; XREF: Obj_Index
0000FD76 7000                       		moveq	#0,d0
0000FD78 1028 0024                  		move.b	$24(a0),d0
0000FD7C 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000FD80 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000FD84                            ; ===========================================================================
0000FD84 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000FD86 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000FD88                            ; ===========================================================================
0000FD88                            
0000FD88                            Obj6D_Main:				; XREF: Obj6D_Index
0000FD88 5428 0024                  		addq.b	#2,$24(a0)
0000FD8C 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000FD94 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000FD9A 0028 0004 0001             		ori.b	#4,1(a0)
0000FDA0 117C 0001 0018             		move.b	#1,$18(a0)
0000FDA6 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FDAC 117C 000C 0019             		move.b	#$C,$19(a0)
0000FDB2 1028 0028                  		move.b	$28(a0),d0
0000FDB6 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000FDBA D040                       		add.w	d0,d0		; multiply by 2
0000FDBC 3140 0030                  		move.w	d0,$30(a0)
0000FDC0 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000FDC4 1028 0028                  		move.b	$28(a0),d0
0000FDC8 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000FDCC EB48                       		lsl.w	#5,d0		; multiply by $20
0000FDCE 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000FDD2 117C 000A 0036             		move.b	#$A,$36(a0)
0000FDD8 0828 0001 0022             		btst	#1,$22(a0)
0000FDDE 6700                       		beq.s	Obj6D_Action
0000FDE0 117C 0002 001C             		move.b	#2,$1C(a0)
0000FDE6 117C 0015 0036             		move.b	#$15,$36(a0)
0000FDEC                            
0000FDEC                            Obj6D_Action:				; XREF: Obj6D_Index
0000FDEC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000FDF0 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000FDF2 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000FDF8 0868 0000 001C             		bchg	#0,$1C(a0)
0000FDFE 6700                       		beq.s	loc_E57A
0000FE00 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000FE06 303C 00B3                  		move.w	#$B3,d0
0000FE0A 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play flame sound
0000FE10                            
0000FE10                            loc_E57A:
0000FE10 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000FE16 6100 BB92                  		bsr.w	AnimateSprite
0000FE1A 117C 0000 0020             		move.b	#0,$20(a0)
0000FE20 1028 0036                  		move.b	$36(a0),d0
0000FE24 B028 001A                  		cmp.b	$1A(a0),d0
0000FE28 6600                       		bne.s	Obj6D_ChkDel
0000FE2A 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000FE30                            
0000FE30                            Obj6D_ChkDel:
0000FE30 3028 0008                  		move.w	8(a0),d0
0000FE34 0240 FF80                  		andi.w	#$FF80,d0
0000FE38 3238 F700                  		move.w	($FFFFF700).w,d1
0000FE3C 0441 0080                  		subi.w	#$80,d1
0000FE40 0241 FF80                  		andi.w	#$FF80,d1
0000FE44 9041                       		sub.w	d1,d0
0000FE46 0C40 0280                  		cmpi.w	#$280,d0
0000FE4A 6300 EAFE                  		bls.w	DisplaySprite
0000FE4E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000FE52 6700 EB46                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
0000FE56 3440                       		movea.w	d0,a2	; load address into a2
0000FE58 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
0000FE5C 6000 EB3C                  		bra.w	DeleteObject
0000FE60                            ; ===========================================================================
0000FE60                            Ani_obj6D:
0000FE60                            	include "_anim\obj6D.asm"
0000FE60                            ; ---------------------------------------------------------------------------
0000FE60                            ; Animation script - flamethrower (SBZ)
0000FE60                            ; ---------------------------------------------------------------------------
0000FE60 0000                       		dc.w byte_E5C4-Ani_obj6D
0000FE62 0000                       		dc.w byte_E5D2-Ani_obj6D
0000FE64 0000                       		dc.w byte_E5DC-Ani_obj6D
0000FE66 0000                       		dc.w byte_E5EA-Ani_obj6D
0000FE68 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000FE76 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000FE80 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000FE8E 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000FE98                            		even
0000FE98                            		even
0000FE98                            
0000FE98                            ; ---------------------------------------------------------------------------
0000FE98                            ; Sprite mappings - flame thrower (SBZ)
0000FE98                            ; ---------------------------------------------------------------------------
0000FE98                            Map_obj6D:
0000FE98                            	include "_maps\obj6D.asm"
0000FE98                            ; ---------------------------------------------------------------------------
0000FE98                            ; Sprite mappings - flame thrower (SBZ)
0000FE98                            ; ---------------------------------------------------------------------------
0000FE98 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000FE9C 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000FEA0 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000FEA4 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000FEA8 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000FEAC 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000FEB0 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000FEB4 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000FEB8 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000FEBC 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000FEC0 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000FEC4 01                         byte_E620:	dc.b 1
0000FEC5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FECA 02                         byte_E626:	dc.b 2
0000FECB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FED0 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FED5 02                         byte_E631:	dc.b 2
0000FED6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FEDB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FEE0 03                         byte_E63C:	dc.b 3
0000FEE1 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FEE6 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FEEB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FEF0 03                         byte_E64C:	dc.b 3
0000FEF1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FEF6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FEFB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF00 04                         byte_E65C:	dc.b 4
0000FF01 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FF06 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FF0B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FF10 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF15 04                         byte_E671:	dc.b 4
0000FF16 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000FF1B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FF20 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FF25 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF2A 05                         byte_E686:	dc.b 5
0000FF2B F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000FF30 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FF35 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FF3A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FF3F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF44 05                         byte_E6A0:	dc.b 5
0000FF45 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000FF4A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000FF4F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FF54 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FF59 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF5E 06                         byte_E6BA:	dc.b 6
0000FF5F E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000FF64 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000FF69 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FF6E 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000FF73 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FF78 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF7D 06                         byte_E6D9:	dc.b 6
0000FF7E E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000FF83 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000FF88 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000FF8D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FF92 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FF97 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF9C 01                         byte_E6F8:	dc.b 1
0000FF9D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFA2 02                         byte_E6FE:	dc.b 2
0000FFA3 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFA8 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FFAD 02                         byte_E709:	dc.b 2
0000FFAE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFB3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FFB8 03                         byte_E714:	dc.b 3
0000FFB9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FFBE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFC3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FFC8 03                         byte_E724:	dc.b 3
0000FFC9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FFCE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFD3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FFD8 04                         byte_E734:	dc.b 4
0000FFD9 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FFDE 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FFE3 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFE8 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FFED 04                         byte_E749:	dc.b 4
0000FFEE 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000FFF3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FFF8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFFD 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010002 05                         byte_E75E:	dc.b 5
00010003 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010008 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001000D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010012 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010017 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001001C 05                         byte_E778:	dc.b 5
0001001D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010022 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010027 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001002C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010031 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010036 06                         byte_E792:	dc.b 6
00010037 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0001003C F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010041 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010046 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0001004B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010050 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010055 06                         byte_E7B1:	dc.b 6
00010056 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0001005B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010060 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010065 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001006A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001006F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010074                            		even
00010074                            		even
00010074                            
00010074                            ; ===========================================================================
00010074                            ; ---------------------------------------------------------------------------
00010074                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
00010074                            ; ---------------------------------------------------------------------------
00010074                            
00010074                            Obj46:					; XREF: Obj_Index
00010074 7000                       		moveq	#0,d0
00010076 1028 0024                  		move.b	$24(a0),d0
0001007A 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0001007E 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
00010082                            ; ===========================================================================
00010082 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
00010084 0000                       		dc.w Obj46_Action-Obj46_Index
00010086                            ; ===========================================================================
00010086                            
00010086                            Obj46_Main:				; XREF: Obj46_Index
00010086 5428 0024                  		addq.b	#2,$24(a0)
0001008A 117C 000F 0016             		move.b	#$F,$16(a0)
00010090 117C 000F 0017             		move.b	#$F,$17(a0)
00010096 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0001009E 317C 4000 0002             		move.w	#$4000,2(a0)
000100A4 117C 0004 0001             		move.b	#4,1(a0)
000100AA 117C 0003 0018             		move.b	#3,$18(a0)
000100B0 117C 0010 0019             		move.b	#$10,$19(a0)
000100B6 3168 000C 0030             		move.w	$C(a0),$30(a0)
000100BC 317C 05C0 0032             		move.w	#$5C0,$32(a0)
000100C2                            
000100C2                            Obj46_Action:				; XREF: Obj46_Index
000100C2 4A28 0001                  		tst.b	1(a0)
000100C6 6A00                       		bpl.s	Obj46_ChkDel
000100C8 7000                       		moveq	#0,d0
000100CA 1028 0028                  		move.b	$28(a0),d0	; get object type
000100CE 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
000100D2 D040                       		add.w	d0,d0
000100D4 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
000100D8 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
000100DC 323C 001B                  		move.w	#$1B,d1
000100E0 343C 0010                  		move.w	#$10,d2
000100E4 363C 0011                  		move.w	#$11,d3
000100E8 3828 0008                  		move.w	8(a0),d4
000100EC 6100 0000                  		bsr.w	SolidObject
000100F0                            
000100F0                            Obj46_ChkDel:
000100F0 6100 E858                  		bsr.w	DisplaySprite
000100F4 3028 0008                  		move.w	8(a0),d0
000100F8 0240 FF80                  		andi.w	#$FF80,d0
000100FC 3238 F700                  		move.w	($FFFFF700).w,d1
00010100 0441 0080                  		subi.w	#$80,d1
00010104 0241 FF80                  		andi.w	#$FF80,d1
00010108 9041                       		sub.w	d1,d0
0001010A 0C40 0280                  		cmpi.w	#$280,d0
0001010E 6300                       		bls.s	Obj46_NoDel
00010110 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010114 6700 E884                  		beq.w	DeleteObject		; if it's zero, don't remember object
00010118 3440                       		movea.w	d0,a2	; load address into a2
0001011A 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001011E 6000 E87A                  		bra.w	DeleteObject	; and delete object
00010122                            
00010122                            Obj46_NoDel:
00010122 4E75                       		rts	
00010124                            ; ===========================================================================
00010124 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
00010126 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
00010128 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0001012A 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0001012C 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0001012E                            ; ===========================================================================
0001012E                            
0001012E                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0001012E 4E75                       		rts	
00010130                            ; ===========================================================================
00010130                            
00010130                            Obj46_Type02:				; XREF: Obj46_TypeIndex
00010130 3038 D008                  		move.w	($FFFFD008).w,d0
00010134 9068 0008                  		sub.w	8(a0),d0
00010138 6400                       		bcc.s	loc_E888
0001013A 4440                       		neg.w	d0
0001013C                            
0001013C                            loc_E888:
0001013C 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010140 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
00010142 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
00010148                            
00010148                            Obj46_Type01:				; XREF: Obj46_TypeIndex
00010148 7000                       		moveq	#0,d0
0001014A 1038 FE74                  		move.b	($FFFFFE74).w,d0
0001014E 0828 0003 0028             		btst	#3,$28(a0)
00010154 6700                       		beq.s	loc_E8A8
00010156 4440                       		neg.w	d0
00010158 0640 0010                  		addi.w	#$10,d0
0001015C                            
0001015C                            loc_E8A8:
0001015C 3228 0030                  		move.w	$30(a0),d1
00010160 9240                       		sub.w	d0,d1
00010162 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
00010166 4E75                       		rts	
00010168                            ; ===========================================================================
00010168                            
00010168                            Obj46_Type03:				; XREF: Obj46_TypeIndex
00010168 6100 E7C6                  		bsr.w	SpeedToPos
0001016C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
00010172 6100 0000                  		bsr.w	ObjHitFloor
00010176 4A41                       		tst.w	d1		; has the block	hit the	floor?
00010178 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0001017C D368 000C                  		add.w	d1,$C(a0)
00010180 4268 0012                  		clr.w	$12(a0)		; stop the block falling
00010184 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001018A 117C 0004 0028             		move.b	#4,$28(a0)
00010190 3011                       		move.w	(a1),d0
00010192 0240 03FF                  		andi.w	#$3FF,d0
00010196 0C40 02E8                  		cmpi.w	#$2E8,d0
0001019A 6400                       		bcc.s	locret_E8EE
0001019C 117C 0000 0028             		move.b	#0,$28(a0)
000101A2                            
000101A2                            locret_E8EE:
000101A2 4E75                       		rts	
000101A4                            ; ===========================================================================
000101A4                            
000101A4                            Obj46_Type04:				; XREF: Obj46_TypeIndex
000101A4 7000                       		moveq	#0,d0
000101A6 1038 FE70                  		move.b	($FFFFFE70).w,d0
000101AA E648                       		lsr.w	#3,d0
000101AC 3228 0030                  		move.w	$30(a0),d1
000101B0 9240                       		sub.w	d0,d1
000101B2 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
000101B6 4E75                       		rts	
000101B8                            ; ===========================================================================
000101B8                            ; ---------------------------------------------------------------------------
000101B8                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
000101B8                            ; ---------------------------------------------------------------------------
000101B8                            Map_obj46:
000101B8                            	include "_maps\obj46.asm"
000101B8                            ; ---------------------------------------------------------------------------
000101B8                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
000101B8                            ; ---------------------------------------------------------------------------
000101B8 0000                       		dc.w byte_E906-Map_obj46
000101BA 01                         byte_E906:	dc.b 1
000101BB F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
000101C0                            		even
000101C0                            		even
000101C0                            
000101C0                            ; ===========================================================================
000101C0                            ; ---------------------------------------------------------------------------
000101C0                            ; Object 12 - lamp (SYZ)
000101C0                            ; ---------------------------------------------------------------------------
000101C0                            
000101C0                            Obj12:					; XREF: Obj_Index
000101C0 7000                       		moveq	#0,d0
000101C2 1028 0024                  		move.b	$24(a0),d0
000101C6 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
000101CA 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
000101CE                            ; ===========================================================================
000101CE 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
000101D0 0000                       		dc.w Obj12_Animate-Obj12_Index
000101D2                            ; ===========================================================================
000101D2                            
000101D2                            Obj12_Main:				; XREF: Obj12_Index
000101D2 5428 0024                  		addq.b	#2,$24(a0)
000101D6 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
000101DE 317C 0000 0002             		move.w	#0,2(a0)
000101E4 117C 0004 0001             		move.b	#4,1(a0)
000101EA 117C 0010 0019             		move.b	#$10,$19(a0)
000101F0 117C 0006 0018             		move.b	#6,$18(a0)
000101F6                            
000101F6                            Obj12_Animate:				; XREF: Obj12_Index
000101F6 5328 001E                  		subq.b	#1,$1E(a0)
000101FA 6A00                       		bpl.s	Obj12_ChkDel
000101FC 117C 0007 001E             		move.b	#7,$1E(a0)
00010202 5228 001A                  		addq.b	#1,$1A(a0)
00010206 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0001020C 6500                       		bcs.s	Obj12_ChkDel
0001020E 117C 0000 001A             		move.b	#0,$1A(a0)
00010214                            
00010214                            Obj12_ChkDel:
00010214 3028 0008                  		move.w	8(a0),d0
00010218 0240 FF80                  		andi.w	#$FF80,d0
0001021C 3238 F700                  		move.w	($FFFFF700).w,d1
00010220 0441 0080                  		subi.w	#$80,d1
00010224 0241 FF80                  		andi.w	#$FF80,d1
00010228 9041                       		sub.w	d1,d0
0001022A 0C40 0280                  		cmpi.w	#$280,d0
0001022E 6300 E71A                  		bls.w	DisplaySprite
00010232 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010236 6700 E762                  		beq.w	DeleteObject		; if it's zero, don't remember object
0001023A 3440                       		movea.w	d0,a2	; load address into a2
0001023C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010240 6000 E758                  		bra.w	DeleteObject	; and delete object
00010244                            ; ===========================================================================
00010244                            ; ---------------------------------------------------------------------------
00010244                            ; Sprite mappings - lamp (SYZ)
00010244                            ; ---------------------------------------------------------------------------
00010244                            Map_obj12:
00010244                            	include "_maps\obj12.asm"
00010244                            ; ---------------------------------------------------------------------------
00010244                            ; Sprite mappings - lamp (SYZ)
00010244                            ; ---------------------------------------------------------------------------
00010244 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
00010248 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0001024C 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
00010250 02                         byte_E98E:	dc.b 2
00010251 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
00010256 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0001025B 02                         byte_E999:	dc.b 2
0001025C F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
00010261 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
00010266 02                         byte_E9A4:	dc.b 2
00010267 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0001026C 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
00010271 02                         byte_E9AF:	dc.b 2
00010272 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
00010277 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0001027C 02                         byte_E9BA:	dc.b 2
0001027D F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
00010282 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
00010287 02                         byte_E9C5:	dc.b 2
00010288 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0001028D 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
00010292                            		even
00010292                            		even
00010292                            
00010292                            ; ===========================================================================
00010292                            ; ---------------------------------------------------------------------------
00010292                            ; Object 47 - pinball bumper (SYZ)
00010292                            ; ---------------------------------------------------------------------------
00010292                            
00010292                            Obj47:					; XREF: Obj_Index
00010292 7000                       		moveq	#0,d0
00010294 1028 0024                  		move.b	$24(a0),d0
00010298 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0001029C 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
000102A0                            ; ===========================================================================
000102A0 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
000102A2 0000                       		dc.w Obj47_Hit-Obj47_Index
000102A4                            ; ===========================================================================
000102A4                            
000102A4                            Obj47_Main:				; XREF: Obj47_Index
000102A4 5428 0024                  		addq.b	#2,$24(a0)
000102A8 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
000102B0 317C 0380 0002             		move.w	#$380,2(a0)
000102B6 117C 0004 0001             		move.b	#4,1(a0)
000102BC 117C 0010 0019             		move.b	#$10,$19(a0)
000102C2 117C 0001 0018             		move.b	#1,$18(a0)
000102C8 117C 00D7 0020             		move.b	#$D7,$20(a0)
000102CE                            
000102CE                            Obj47_Hit:				; XREF: Obj47_Index
000102CE 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
000102D2 6700 0000                  		beq.w	Obj47_Display	; if not, branch
000102D6 11FC 0008 F5CE             		move.b	#face_confused,(SonimeSST+sonime_face).w
000102DC 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
000102E2 4228 0021                  		clr.b	$21(a0)
000102E6 43F8 D000                  		lea	($FFFFD000).w,a1
000102EA 3228 0008                  		move.w	8(a0),d1
000102EE 3428 000C                  		move.w	$C(a0),d2
000102F2 9269 0008                  		sub.w	8(a1),d1
000102F6 9469 000C                  		sub.w	$C(a1),d2
000102FA 4EB9 0000 2C94             		jsr	(CalcAngle).l
00010300 4EB9 0000 29CC             		jsr	(CalcSine).l
00010306 C3FC F900                  		muls.w	#-$700,d1
0001030A E081                       		asr.l	#8,d1
0001030C 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
00010310 C1FC F900                  		muls.w	#-$700,d0
00010314 E080                       		asr.l	#8,d0
00010316 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0001031A 08E9 0001 0022             		bset	#1,$22(a1)
00010320 08A9 0004 0022             		bclr	#4,$22(a1)
00010326 08A9 0005 0022             		bclr	#5,$22(a1)
0001032C 4229 003C                  		clr.b	$3C(a1)
00010330 117C 0001 001C             		move.b	#1,$1C(a0)
00010336 303C 00B4                  		move.w	#$B4,d0
0001033A 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play bumper sound
00010340 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010344 6700                       		beq.s	Obj47_Score		; if it's zero, don't remember object
00010346 3440                       		movea.w	d0,a2	; load address into a2
00010348 0C12 008A                  		cmpi.b	#$8A,(a2)	; has bumper been hit $8A times?
0001034C 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0001034E 5212                       		addq.b	#1,(a2)
00010350                            
00010350                            Obj47_Score:
00010350 7001                       		moveq	#1,d0
00010352 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
00010358 6100 ED46                  		bsr.w	SingleObjLoad
0001035C 6600                       		bne.s	Obj47_Display
0001035E 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010362 3368 0008 0008             		move.w	8(a0),8(a1)
00010368 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001036E 137C 0004 001A             		move.b	#4,$1A(a1)
00010374                            
00010374                            Obj47_Display:
00010374 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0001037A 6100 B62E                  		bsr.w	AnimateSprite
0001037E 3028 0008                  		move.w	8(a0),d0
00010382 0240 FF80                  		andi.w	#$FF80,d0
00010386 3238 F700                  		move.w	($FFFFF700).w,d1
0001038A 0441 0080                  		subi.w	#$80,d1
0001038E 0241 FF80                  		andi.w	#$FF80,d1
00010392 9041                       		sub.w	d1,d0
00010394 0C40 0280                  		cmpi.w	#$280,d0
00010398 6200                       		bhi.s	Obj47_ChkHit
0001039A 6000 E5AE                  		bra.w	DisplaySprite
0001039E                            ; ===========================================================================
0001039E                            
0001039E                            Obj47_ChkHit:				; XREF: Obj47_Display
0001039E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000103A2 6700                       		beq.s	Obj47_Delete		; if it's zero, don't remember object
000103A4 3440                       		movea.w	d0,a2	; load address into a2
000103A6 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000103AA                            
000103AA                            Obj47_Delete:
000103AA 6000 E5EE                  		bra.w	DeleteObject
000103AE                            ; ===========================================================================
000103AE                            Ani_obj47:
000103AE                            	include "_anim\obj47.asm"
000103AE                            ; ---------------------------------------------------------------------------
000103AE                            ; Animation script - flamethrower (SBZ)
000103AE                            ; ---------------------------------------------------------------------------
000103AE 0000                       		dc.w byte_EAF4-Ani_obj47
000103B0 0000                       		dc.w byte_EAF8-Ani_obj47
000103B2 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
000103B6 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
000103BE                            		even
000103BE                            		even
000103BE                            
000103BE                            ; ---------------------------------------------------------------------------
000103BE                            ; Sprite mappings - pinball bumper (SYZ)
000103BE                            ; ---------------------------------------------------------------------------
000103BE                            Map_obj47:
000103BE                            	include "_maps\obj47.asm"
000103BE                            ; ---------------------------------------------------------------------------
000103BE                            ; Sprite mappings - pinball bumper (SYZ)
000103BE                            ; ---------------------------------------------------------------------------
000103BE 0000                       		dc.w byte_EB06-Map_obj47
000103C0 0000                       		dc.w byte_EB11-Map_obj47
000103C2 0000                       		dc.w byte_EB1C-Map_obj47
000103C4 02                         byte_EB06:	dc.b 2
000103C5 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
000103CA F007 0800 00               		dc.b $F0, 7, 8,	0, 0
000103CF 02                         byte_EB11:	dc.b 2
000103D0 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
000103D5 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
000103DA 02                         byte_EB1C:	dc.b 2
000103DB F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
000103E0 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
000103E6 00                         		even
000103E6 00                         		even
000103E6                            
000103E6                            ; ===========================================================================
000103E6                            ; ---------------------------------------------------------------------------
000103E6                            ; Object 0D - signpost at the end of a level
000103E6                            ; ---------------------------------------------------------------------------
000103E6                            
000103E6                            Obj0D:					; XREF: Obj_Index
000103E6 7000                       		moveq	#0,d0
000103E8 1028 0024                  		move.b	$24(a0),d0
000103EC 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
000103F0 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
000103F4 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
000103FA 6100 B5AE                  		bsr.w	AnimateSprite
000103FE 6100 E54A                  		bsr.w	DisplaySprite
00010402 3028 0008                  		move.w	8(a0),d0
00010406 0240 FF80                  		andi.w	#$FF80,d0
0001040A 3238 F700                  		move.w	($FFFFF700).w,d1
0001040E 0441 0080                  		subi.w	#$80,d1
00010412 0241 FF80                  		andi.w	#$FF80,d1
00010416 9041                       		sub.w	d1,d0
00010418 0C40 0280                  		cmpi.w	#$280,d0
0001041C 6300                       		bls.s	Obj0D_NoDel
0001041E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010422 6700 E576                  		beq.w	DeleteObject		; if it's zero, don't remember object
00010426 3440                       		movea.w	d0,a2	; load address into a2
00010428 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001042C 6000 E56C                  		bra.w	DeleteObject	; and delete object
00010430                            
00010430                            Obj0D_NoDel:
00010430 4E75                       		rts	
00010432                            ; ===========================================================================
00010432 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
00010434 0000                       		dc.w Obj0D_Touch-Obj0D_Index
00010436 0000                       		dc.w Obj0D_Spin-Obj0D_Index
00010438 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0001043A 0000                       		dc.w locret_ED1A-Obj0D_Index
0001043C                            ; ===========================================================================
0001043C                            
0001043C                            Obj0D_Main:				; XREF: Obj0D_Index
0001043C 5428 0024                  		addq.b	#2,$24(a0)
00010440 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
00010448 317C 0680 0002             		move.w	#$680,2(a0)
0001044E 117C 0004 0001             		move.b	#4,1(a0)
00010454 117C 0018 0019             		move.b	#$18,$19(a0)
0001045A 117C 0004 0018             		move.b	#4,$18(a0)
00010460                            
00010460                            Obj0D_Touch:				; XREF: Obj0D_Index
00010460 3038 D008                  		move.w	($FFFFD008).w,d0
00010464 9068 0008                  		sub.w	8(a0),d0
00010468 6500                       		bcs.s	locret_EBBA
0001046A 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0001046E 6400                       		bcc.s	locret_EBBA	; if not, branch
00010470 303C 00CF                  		move.w	#$CF,d0
00010474 4EB9 0000 11F0             		jsr	(PlaySound).l	; play signpost	sound
0001047A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001047E 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
00010484 5428 0024                  		addq.b	#2,$24(a0)
00010488                            
00010488                            locret_EBBA:
00010488 4E75                       		rts	
0001048A                            ; ===========================================================================
0001048A                            
0001048A                            Obj0D_Spin:				; XREF: Obj0D_Index
0001048A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0001048E 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
00010490 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
00010496 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0001049A 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
000104A0 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
000104A2 5428 0024                  		addq.b	#2,$24(a0)
000104A6                            
000104A6                            Obj0D_Sparkle:
000104A6 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
000104AA 6A00                       		bpl.s	locret_EC42	; if time remains, branch
000104AC 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
000104B2 7000                       		moveq	#0,d0
000104B4 1028 0034                  		move.b	$34(a0),d0
000104B8 5428 0034                  		addq.b	#2,$34(a0)
000104BC 0228 000E 0034             		andi.b	#$E,$34(a0)
000104C2 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
000104C6 6100 EBD8                  		bsr.w	SingleObjLoad
000104CA 6600                       		bne.s	locret_EC42
000104CC 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
000104D0 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
000104D6 101A                       		move.b	(a2)+,d0
000104D8 4880                       		ext.w	d0
000104DA D068 0008                  		add.w	8(a0),d0
000104DE 3340 0008                  		move.w	d0,8(a1)
000104E2 101A                       		move.b	(a2)+,d0
000104E4 4880                       		ext.w	d0
000104E6 D068 000C                  		add.w	$C(a0),d0
000104EA 3340 000C                  		move.w	d0,$C(a1)
000104EE 237C 0000 B254 0004        		move.l	#Map_obj25,4(a1)
000104F6 337C 26BA 0002             		move.w	#($2000+ringart),2(a1)
000104FC 137C 0004 0001             		move.b	#4,1(a1)
00010502 137C 0002 0018             		move.b	#2,$18(a1)
00010508 137C 0008 0019             		move.b	#8,$19(a1)
0001050E                            
0001050E                            locret_EC42:
0001050E 4E75                       		rts	
00010510                            ; ===========================================================================
00010510 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010512 0808                       		dc.b	8,   8
00010514 F000                       		dc.b -$10,   0
00010516 18F8                       		dc.b  $18,  -8
00010518 00F8                       		dc.b	0,  -8
0001051A 1000                       		dc.b  $10,   0
0001051C E808                       		dc.b -$18,   8
0001051E 1810                       		dc.b  $18, $10
00010520                            ; ===========================================================================
00010520                            
00010520                            Obj0D_SonicRun:				; XREF: Obj0D_Index
00010520 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010524 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00010528 0838 0001 D022             		btst	#1,($FFFFD022).w
0001052E 6600                       		bne.s	loc_EC70
00010530 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00010536 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001053C                            
0001053C                            loc_EC70:
0001053C 4A38 D000                  		tst.b	($FFFFD000).w
00010540 6700                       		beq.s	loc_EC86
00010542 3038 D008                  		move.w	($FFFFD008).w,d0
00010546 3238 F72A                  		move.w	($FFFFF72A).w,d1
0001054A 0641 0128                  		addi.w	#$128,d1
0001054E B041                       		cmp.w	d1,d0
00010550 6500                       		bcs.s	locret_ECEE
00010552                            
00010552                            loc_EC86:
00010552 5428 0024                  		addq.b	#2,$24(a0)
00010556                            
00010556                            ; ---------------------------------------------------------------------------
00010556                            ; Subroutine to	set up bonuses at the end of an	act
00010556                            ; ---------------------------------------------------------------------------
00010556                            
00010556                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010556                            
00010556                            
00010556                            GotThroughAct:				; XREF: Obj3E_EndAct
00010556 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0001055A 6600                       		bne.s	locret_ECEE
0001055C 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
00010562 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
00010566 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001056A 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
00010570 2F08                               move.l  a0,-(sp)            ; save object address to stack
00010572 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
0001057C 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
00010582 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
00010588 4EB8 1410                          jsr LoadUncArt          ; load uncompressed art
0001058C 205F                               move.l  (sp)+,a0            ; get object address from stack
0001058E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
00010594 7000                       		moveq	#0,d0
00010596 1038 FE23                  		move.b	($FFFFFE23).w,d0
0001059A C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0001059E 7200                       		moveq	#0,d1
000105A0 1238 FE24                  		move.b	($FFFFFE24).w,d1
000105A4 D041                       		add.w	d1,d0		; add up your time
000105A6 80FC 000F                  		divu.w	#15,d0		; divide by 15
000105AA 7214                       		moveq	#$14,d1
000105AC B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
000105AE 6500                       		bcs.s	loc_ECD0	; if not, branch
000105B0 3001                       		move.w	d1,d0		; use minimum time bonus (0)
000105B2                            
000105B2                            loc_ECD0:
000105B2 D040                       		add.w	d0,d0
000105B4 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
000105BA 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
000105BE C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
000105C2 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
000105C6 303C 008E                  		move.w	#$8E,d0
000105CA 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
000105D0                            
000105D0                            locret_ECEE:
000105D0 4E75                       		rts	
000105D2                            ; End of function GotThroughAct
000105D2                            
000105D2                            ; ===========================================================================
000105D2 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
000105E6 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
000105FC                            ; ===========================================================================
000105FC                            
000105FC                            locret_ED1A:				; XREF: Obj0D_Index
000105FC 4E75                       		rts	
000105FE                            ; ===========================================================================
000105FE                            Ani_obj0D:
000105FE                            	include "_anim\obj0D.asm"
000105FE                            ; ---------------------------------------------------------------------------
000105FE                            ; Animation script - signpost
000105FE                            ; ---------------------------------------------------------------------------
000105FE 0000                       		dc.w byte_ED24-Ani_obj0D
00010600 0000                       		dc.w byte_ED28-Ani_obj0D
00010602 0000                       		dc.w byte_ED2E-Ani_obj0D
00010604 0000                       		dc.w byte_ED34-Ani_obj0D
00010606 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0001060A 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
00010610 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
00010616 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0001061A 00                         		even
0001061A 00                         		even
0001061A                            
0001061A                            ; ---------------------------------------------------------------------------
0001061A                            ; Sprite mappings - signpost
0001061A                            ; ---------------------------------------------------------------------------
0001061A                            Map_obj0D:
0001061A                            	include "_maps\obj0D.asm"
0001061A                            ; ---------------------------------------------------------------------------
0001061A                            ; Sprite mappings - signpost
0001061A                            ; ---------------------------------------------------------------------------
0001061A 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0001061E 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
00010622 0000                       		dc.w byte_ED73-Map_obj0D
00010624 03                         byte_ED42:	dc.b 3
00010625 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0001062A F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0001062F 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00010634 02                         byte_ED52:	dc.b 2
00010635 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0001063A 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0001063F 02                         byte_ED5D:	dc.b 2
00010640 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
00010645 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0001064A 02                         byte_ED68:	dc.b 2
0001064B F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
00010650 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
00010655 03                         byte_ED73:	dc.b 3
00010656 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0001065B F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
00010660 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00010666 00                         		even
00010666 00                         		even
00010666                            
00010666                            ; ===========================================================================
00010666                            ; ---------------------------------------------------------------------------
00010666                            ; Object 4C - lava geyser / lavafall producer (MZ)
00010666                            ; ---------------------------------------------------------------------------
00010666                            
00010666                            Obj4C:					; XREF: Obj_Index
00010666 7000                       		moveq	#0,d0
00010668 1028 0024                  		move.b	$24(a0),d0
0001066C 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
00010670 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
00010674 6000 0000                  		bra.w	Obj4D_ChkDel
00010678                            ; ===========================================================================
00010678 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0001067A 0000                       		dc.w loc_EDCC-Obj4C_Index
0001067C 0000                       		dc.w loc_EE3E-Obj4C_Index
0001067E 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
00010680 0000                       		dc.w Obj4C_Display-Obj4C_Index
00010682 0000                       		dc.w Obj4C_Delete-Obj4C_Index
00010684                            ; ===========================================================================
00010684                            
00010684                            Obj4C_Main:				; XREF: Obj4C_Index
00010684 5428 0024                  		addq.b	#2,$24(a0)
00010688 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
00010690 317C E3A8 0002             		move.w	#$E3A8,2(a0)
00010696 117C 0004 0001             		move.b	#4,1(a0)
0001069C 117C 0001 0018             		move.b	#1,$18(a0)
000106A2 117C 0038 0019             		move.b	#$38,$19(a0)
000106A8 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
000106AE                            
000106AE                            loc_EDCC:				; XREF: Obj4C_Index
000106AE 5368 0032                  		subq.w	#1,$32(a0)
000106B2 6A00                       		bpl.s	locret_EDF0
000106B4 3168 0034 0032             		move.w	$34(a0),$32(a0)
000106BA 3038 D00C                  		move.w	($FFFFD00C).w,d0
000106BE 3228 000C                  		move.w	$C(a0),d1
000106C2 B041                       		cmp.w	d1,d0
000106C4 6400                       		bcc.s	locret_EDF0
000106C6 0441 0170                  		subi.w	#$170,d1
000106CA B041                       		cmp.w	d1,d0
000106CC 6500                       		bcs.s	locret_EDF0
000106CE 5428 0024                  		addq.b	#2,$24(a0)
000106D2                            
000106D2                            locret_EDF0:
000106D2 4E75                       		rts	
000106D4                            ; ===========================================================================
000106D4                            
000106D4                            Obj4C_MakeLava:				; XREF: Obj4C_Index
000106D4 5428 0024                  		addq.b	#2,$24(a0)
000106D8 6100 E9DC                  		bsr.w	SingleObjLoad2
000106DC 6600                       		bne.s	loc_EE18
000106DE 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
000106E2 3368 0008 0008             		move.w	8(a0),8(a1)
000106E8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000106EE 1368 0028 0028             		move.b	$28(a0),$28(a1)
000106F4 2348 003C                  		move.l	a0,$3C(a1)
000106F8                            
000106F8                            loc_EE18:
000106F8 117C 0001 001C             		move.b	#1,$1C(a0)
000106FE 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
00010702 6700                       		beq.s	Obj4C_Type00	; if yes, branch
00010704 117C 0004 001C             		move.b	#4,$1C(a0)
0001070A 6000                       		bra.s	Obj4C_Display
0001070C                            ; ===========================================================================
0001070C                            
0001070C                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0001070C 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
00010710 08E9 0001 0022             		bset	#1,$22(a1)
00010716 337C FA80 0012             		move.w	#-$580,$12(a1)
0001071C 6000                       		bra.s	Obj4C_Display
0001071E                            ; ===========================================================================
0001071E                            
0001071E                            loc_EE3E:				; XREF: Obj4C_Index
0001071E 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
00010722 6700                       		beq.s	Obj4C_Display	; if yes, branch
00010724 5428 0024                  		addq.b	#2,$24(a0)
00010728 4E75                       		rts	
0001072A                            ; ===========================================================================
0001072A                            
0001072A                            Obj4C_Display:				; XREF: Obj4C_Index
0001072A 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00010730 6100 B278                  		bsr.w	AnimateSprite
00010734 6100 E214                  		bsr.w	DisplaySprite
00010738 4E75                       		rts	
0001073A                            ; ===========================================================================
0001073A                            
0001073A                            Obj4C_Delete:				; XREF: Obj4C_Index
0001073A 117C 0000 001C             		move.b	#0,$1C(a0)
00010740 117C 0002 0024             		move.b	#2,$24(a0)
00010746 4A28 0028                  		tst.b	$28(a0)
0001074A 6700 E24E                  		beq.w	DeleteObject
0001074E 4E75                       		rts	
00010750                            ; ===========================================================================
00010750                            ; ---------------------------------------------------------------------------
00010750                            ; Object 4D - lava geyser / lavafall (MZ)
00010750                            ; ---------------------------------------------------------------------------
00010750                            
00010750                            Obj4D:					; XREF: Obj_Index
00010750 7000                       		moveq	#0,d0
00010752 1028 0024                  		move.b	$24(a0),d0
00010756 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0001075A 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0001075E 6000 E1EA                  		bra.w	DisplaySprite
00010762                            ; ===========================================================================
00010762 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
00010764 0000                       		dc.w Obj4D_Action-Obj4D_Index
00010766 0000                       		dc.w loc_EFFC-Obj4D_Index
00010768 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0001076A                            
0001076A FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0001076E                            ; ===========================================================================
0001076E                            
0001076E                            Obj4D_Main:				; XREF: Obj4D_Index
0001076E 5428 0024                  		addq.b	#2,$24(a0)
00010772 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010778 4A28 0028                  		tst.b	$28(a0)
0001077C 6700                       		beq.s	loc_EEA4
0001077E 0468 0250 000C             		subi.w	#$250,$C(a0)
00010784                            
00010784                            loc_EEA4:
00010784 7000                       		moveq	#0,d0
00010786 1028 0028                  		move.b	$28(a0),d0
0001078A D040                       		add.w	d0,d0
0001078C 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
00010792 2248                       		movea.l	a0,a1
00010794 7201                       		moveq	#1,d1
00010796 6100                       		bsr.s	Obj4D_MakeLava
00010798 6000                       		bra.s	loc_EF10
0001079A                            ; ===========================================================================
0001079A                            
0001079A                            Obj4D_Loop:
0001079A 6100 E91A                  		bsr.w	SingleObjLoad2
0001079E 6600                       		bne.s	loc_EF0A
000107A0                            
000107A0                            Obj4D_MakeLava:				; XREF: Obj4D_Main
000107A0 12BC 004D                  		move.b	#$4D,0(a1)
000107A4 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
000107AC 337C 63A8 0002             		move.w	#$63A8,2(a1)
000107B2 137C 0004 0001             		move.b	#4,1(a1)
000107B8 137C 0020 0019             		move.b	#$20,$19(a1)
000107BE 3368 0008 0008             		move.w	8(a0),8(a1)
000107C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000107CA 1368 0028 0028             		move.b	$28(a0),$28(a1)
000107D0 137C 0001 0018             		move.b	#1,$18(a1)
000107D6 137C 0005 001C             		move.b	#5,$1C(a1)
000107DC 4A28 0028                  		tst.b	$28(a0)
000107E0 6700                       		beq.s	loc_EF0A
000107E2 137C 0002 001C             		move.b	#2,$1C(a1)
000107E8                            
000107E8                            loc_EF0A:
000107E8 51C9 FFB0                  		dbf	d1,Obj4D_Loop
000107EC 4E75                       		rts	
000107EE                            ; ===========================================================================
000107EE                            
000107EE                            loc_EF10:				; XREF: Obj4D_Main
000107EE 0669 0060 000C             		addi.w	#$60,$C(a1)
000107F4 3368 0030 0030             		move.w	$30(a0),$30(a1)
000107FA 0669 0060 0030             		addi.w	#$60,$30(a1)
00010800 137C 0093 0020             		move.b	#$93,$20(a1)
00010806 137C 0080 0016             		move.b	#$80,$16(a1)
0001080C 08E9 0004 0001             		bset	#4,1(a1)
00010812 5829 0024                  		addq.b	#4,$24(a1)
00010816 2348 003C                  		move.l	a0,$3C(a1)
0001081A 4A28 0028                  		tst.b	$28(a0)
0001081E 6700                       		beq.s	Obj4D_PlaySnd
00010820 7200                       		moveq	#0,d1
00010822 6100 FF76                  		bsr.w	Obj4D_Loop
00010826 5429 0024                  		addq.b	#2,$24(a1)
0001082A 08E9 0004 0002             		bset	#4,2(a1)
00010830 0669 0100 000C             		addi.w	#$100,$C(a1)
00010836 137C 0000 0018             		move.b	#0,$18(a1)
0001083C 3368 0030 0030             		move.w	$30(a0),$30(a1)
00010842 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00010848 117C 0000 0028             		move.b	#0,$28(a0)
0001084E                            
0001084E                            Obj4D_PlaySnd:
0001084E 303C 00C8                  		move.w	#$C8,d0
00010852 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play flame sound
00010858                            
00010858                            Obj4D_Action:				; XREF: Obj4D_Index
00010858 7000                       		moveq	#0,d0
0001085A 1028 0028                  		move.b	$28(a0),d0
0001085E D040                       		add.w	d0,d0
00010860 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
00010864 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
00010868 6100 E0C6                  		bsr.w	SpeedToPos
0001086C 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00010872 6100 B136                  		bsr.w	AnimateSprite
00010876                            
00010876                            Obj4D_ChkDel:				; XREF: Obj4C
00010876 3028 0008                  		move.w	8(a0),d0
0001087A 0240 FF80                  		andi.w	#$FF80,d0
0001087E 3238 F700                  		move.w	($FFFFF700).w,d1
00010882 0441 0080                  		subi.w	#$80,d1
00010886 0241 FF80                  		andi.w	#$FF80,d1
0001088A 9041                       		sub.w	d1,d0
0001088C 0C40 0280                  		cmpi.w	#$280,d0
00010890 6300                       		bls.s	Obj4D_NoDel
00010892 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010896 6700 E102                  		beq.w	DeleteObject	; if it's zero, don't remember object
0001089A 3440                       		movea.w	d0,a2	; load address into a2
0001089C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000108A0 6000 E0F8                  		bra.w	DeleteObject	; and delete object
000108A4                            
000108A4                            Obj4D_NoDel:
000108A4 4E75                       		rts	
000108A6                            ; ===========================================================================
000108A6 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
000108A8 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
000108AA                            ; ===========================================================================
000108AA                            
000108AA                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
000108AA 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
000108B0 3028 0030                  		move.w	$30(a0),d0
000108B4 B068 000C                  		cmp.w	$C(a0),d0
000108B8 6400                       		bcc.s	locret_EFDA
000108BA 5828 0024                  		addq.b	#4,$24(a0)
000108BE 2268 003C                  		movea.l	$3C(a0),a1
000108C2 137C 0003 001C             		move.b	#3,$1C(a1)
000108C8                            
000108C8                            locret_EFDA:
000108C8 4E75                       		rts	
000108CA                            ; ===========================================================================
000108CA                            
000108CA                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
000108CA 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
000108D0 3028 0030                  		move.w	$30(a0),d0
000108D4 B068 000C                  		cmp.w	$C(a0),d0
000108D8 6400                       		bcc.s	locret_EFFA
000108DA 5828 0024                  		addq.b	#4,$24(a0)
000108DE 2268 003C                  		movea.l	$3C(a0),a1
000108E2 137C 0001 001C             		move.b	#1,$1C(a1)
000108E8                            
000108E8                            locret_EFFA:
000108E8 4E75                       		rts	
000108EA                            ; ===========================================================================
000108EA                            
000108EA                            loc_EFFC:				; XREF: Obj4D_Index
000108EA 2268 003C                  		movea.l	$3C(a0),a1
000108EE 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000108F4 6700 0000                  		beq.w	Obj4D_Delete
000108F8 3029 000C                  		move.w	$C(a1),d0
000108FC 0640 0060                  		addi.w	#$60,d0
00010900 3140 000C                  		move.w	d0,$C(a0)
00010904 9068 0030                  		sub.w	$30(a0),d0
00010908 4440                       		neg.w	d0
0001090A 7208                       		moveq	#8,d1
0001090C 0C40 0040                  		cmpi.w	#$40,d0
00010910 6C00                       		bge.s	loc_F026
00010912 720B                       		moveq	#$B,d1
00010914                            
00010914                            loc_F026:
00010914 0C40 0080                  		cmpi.w	#$80,d0
00010918 6F00                       		ble.s	loc_F02E
0001091A 720E                       		moveq	#$E,d1
0001091C                            
0001091C                            loc_F02E:
0001091C 5328 001E                  		subq.b	#1,$1E(a0)
00010920 6A00                       		bpl.s	loc_F04C
00010922 117C 0007 001E             		move.b	#7,$1E(a0)
00010928 5228 001B                  		addq.b	#1,$1B(a0)
0001092C 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
00010932 6500                       		bcs.s	loc_F04C
00010934 117C 0000 001B             		move.b	#0,$1B(a0)
0001093A                            
0001093A                            loc_F04C:
0001093A 1028 001B                  		move.b	$1B(a0),d0
0001093E D001                       		add.b	d1,d0
00010940 1140 001A                  		move.b	d0,$1A(a0)
00010944 6000 FF30                  		bra.w	Obj4D_ChkDel
00010948                            ; ===========================================================================
00010948                            
00010948                            Obj4D_Delete:				; XREF: Obj4D_Index
00010948 6000 E050                  		bra.w	DeleteObject
0001094C                            ; ===========================================================================
0001094C                            ; ---------------------------------------------------------------------------
0001094C                            ; Object 4E - advancing	wall of	lava (MZ)
0001094C                            ; ---------------------------------------------------------------------------
0001094C                            
0001094C                            Obj4E:					; XREF: Obj_Index
0001094C 7000                       		moveq	#0,d0
0001094E 1028 0024                  		move.b	$24(a0),d0
00010952 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
00010956 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0001095A                            ; ===========================================================================
0001095A 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0001095C 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0001095E 0000                       		dc.w Obj4E_Action-Obj4E_Index
00010960 0000                       		dc.w Obj4E_Move2-Obj4E_Index
00010962 0000                       		dc.w Obj4E_Delete-Obj4E_Index
00010964                            ; ===========================================================================
00010964                            
00010964                            Obj4E_Main:				; XREF: Obj4E_Index
00010964 5828 0024                  		addq.b	#4,$24(a0)
00010968 2248                       		movea.l	a0,a1
0001096A 7201                       		moveq	#1,d1
0001096C 6000                       		bra.s	Obj4E_Main2
0001096E                            ; ===========================================================================
0001096E                            
0001096E                            Obj4E_Loop:
0001096E 6100 E746                  		bsr.w	SingleObjLoad2
00010972 6600                       		bne.s	loc_F0C8
00010974                            
00010974                            Obj4E_Main2:				; XREF: Obj4E_Main
00010974 12BC 004E                  		move.b	#$4E,0(a1)	; load object
00010978 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
00010980 337C 63A8 0002             		move.w	#$63A8,2(a1)
00010986 137C 0004 0001             		move.b	#4,1(a1)
0001098C 137C 0050 0019             		move.b	#$50,$19(a1)
00010992 3368 0008 0008             		move.w	8(a0),8(a1)
00010998 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001099E 137C 0001 0018             		move.b	#1,$18(a1)
000109A4 137C 0000 001C             		move.b	#0,$1C(a1)
000109AA 137C 0094 0020             		move.b	#$94,$20(a1)
000109B0 2348 003C                  		move.l	a0,$3C(a1)
000109B4                            
000109B4                            loc_F0C8:
000109B4 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
000109B8                            
000109B8 5C29 0024                  		addq.b	#6,$24(a1)
000109BC 137C 0004 001A             		move.b	#4,$1A(a1)
000109C2                            
000109C2                            Obj4E_Action:				; XREF: Obj4E_Index
000109C2 3038 D008                  		move.w	($FFFFD008).w,d0
000109C6 9068 0008                  		sub.w	8(a0),d0
000109CA 6400                       		bcc.s	Obj4E_ChkSonic
000109CC 4440                       		neg.w	d0
000109CE                            
000109CE                            Obj4E_ChkSonic:
000109CE 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
000109D2 6400                       		bcc.s	Obj4E_Move	; if not, branch
000109D4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000109D8 9068 000C                  		sub.w	$C(a0),d0
000109DC 6400                       		bcc.s	loc_F0F4
000109DE 4440                       		neg.w	d0
000109E0                            
000109E0                            loc_F0F4:
000109E0 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
000109E4 6400                       		bcc.s	Obj4E_Move	; if not, branch
000109E6 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
000109EC 6000                       		bra.s	Obj4E_Solid
000109EE                            ; ===========================================================================
000109EE                            
000109EE                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
000109EE 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
000109F2 6700                       		beq.s	Obj4E_Solid	; if not, branch
000109F4 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
000109FA 5528 0024                  		subq.b	#2,$24(a0)
000109FE                            
000109FE                            Obj4E_Solid:				; XREF: Obj4E_Index
000109FE 323C 002B                  		move.w	#$2B,d1
00010A02 343C 0018                  		move.w	#$18,d2
00010A06 3602                       		move.w	d2,d3
00010A08 5243                       		addq.w	#1,d3
00010A0A 3828 0008                  		move.w	8(a0),d4
00010A0E 1028 0024                  		move.b	$24(a0),d0
00010A12 3F00                       		move.w	d0,-(sp)
00010A14 6100 0000                  		bsr.w	SolidObject
00010A18 301F                       		move.w	(sp)+,d0
00010A1A 1140 0024                  		move.b	d0,$24(a0)
00010A1E 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
00010A24 6600                       		bne.s	Obj4E_Animate	; if not, branch
00010A26 4268 0010                  		clr.w	$10(a0)		; stop object moving
00010A2A 4228 0036                  		clr.b	$36(a0)
00010A2E                            
00010A2E                            Obj4E_Animate:
00010A2E 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
00010A34 6100 AF74                  		bsr.w	AnimateSprite
00010A38 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00010A3E 6400                       		bcc.s	Obj4E_ChkDel
00010A40 6100 DEEE                  		bsr.w	SpeedToPos
00010A44                            
00010A44                            Obj4E_ChkDel:
00010A44 6100 DF04                  		bsr.w	DisplaySprite
00010A48 4A28 0036                  		tst.b	$36(a0)
00010A4C 6600                       		bne.s	locret_F17E
00010A4E 3028 0008                  		move.w	8(a0),d0
00010A52 0240 FF80                  		andi.w	#$FF80,d0
00010A56 3238 F700                  		move.w	($FFFFF700).w,d1
00010A5A 0441 0080                  		subi.w	#$80,d1
00010A5E 0241 FF80                  		andi.w	#$FF80,d1
00010A62 9041                       		sub.w	d1,d0
00010A64 0C40 0280                  		cmpi.w	#$280,d0
00010A68 6200                       		bhi.s	Obj4E_ChkGone
00010A6A                            
00010A6A                            locret_F17E:
00010A6A 4E75                       		rts	
00010A6C                            ; ===========================================================================
00010A6C                            
00010A6C                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
00010A6C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010A70 3440                       		movea.w	d0,a2	; load address into a2
00010A72 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010A76 117C 0008 0024             		move.b	#8,$24(a0)
00010A7C 4E75                       		rts	
00010A7E                            ; ===========================================================================
00010A7E                            
00010A7E                            Obj4E_Move2:				; XREF: Obj4E_Index
00010A7E 2268 003C                  		movea.l	$3C(a0),a1
00010A82 0C29 0008 0024             		cmpi.b	#8,$24(a1)
00010A88 6700                       		beq.s	Obj4E_Delete
00010A8A 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
00010A90 0468 0080 0008             		subi.w	#$80,8(a0)
00010A96 6000 DEB2                  		bra.w	DisplaySprite
00010A9A                            ; ===========================================================================
00010A9A                            
00010A9A                            Obj4E_Delete:				; XREF: Obj4E_Index
00010A9A 6000 DEFE                  		bra.w	DeleteObject
00010A9E                            ; ===========================================================================
00010A9E                            ; ---------------------------------------------------------------------------
00010A9E                            ; Object 54 - invisible	lava tag (MZ)
00010A9E                            ; ---------------------------------------------------------------------------
00010A9E                            
00010A9E                            Obj54:					; XREF: Obj_Index
00010A9E 7000                       		moveq	#0,d0
00010AA0 1028 0024                  		move.b	$24(a0),d0
00010AA4 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
00010AA8 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
00010AAC                            ; ===========================================================================
00010AAC 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
00010AAE 0000                       		dc.w Obj54_ChkDel-Obj54_Index
00010AB0                            
00010AB0 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
00010AB4                            ; ===========================================================================
00010AB4                            
00010AB4                            Obj54_Main:				; XREF: Obj54_Index
00010AB4 5428 0024                  		addq.b	#2,$24(a0)
00010AB8 7000                       		moveq	#0,d0
00010ABA 1028 0028                  		move.b	$28(a0),d0
00010ABE 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
00010AC4 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
00010ACC 117C 0084 0001             		move.b	#$84,1(a0)
00010AD2                            
00010AD2                            Obj54_ChkDel:				; XREF: Obj54_Index
00010AD2 3028 0008                  		move.w	8(a0),d0
00010AD6 0240 FF80                  		andi.w	#$FF80,d0
00010ADA 3238 F700                  		move.w	($FFFFF700).w,d1
00010ADE 0441 0080                  		subi.w	#$80,d1
00010AE2 0241 FF80                  		andi.w	#$FF80,d1
00010AE6 9041                       		sub.w	d1,d0
00010AE8 6B00 DEB0                  		bmi.w	DeleteObject
00010AEC 0C40 0280                  		cmpi.w	#$280,d0
00010AF0 6300                       		bls.s	Obj54_NoDel
00010AF2                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
00010AF2                            	;	beq.w	DeleteObject		; if it's zero, don't remember object
00010AF2                            	;	movea.w	d0,a2	; load address into a2
00010AF2                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010AF2 6000 DEA6                  		bra.w	DeleteObject	; and delete object
00010AF6                            
00010AF6                            Obj54_NoDel:
00010AF6 4E75                       		rts	
00010AF8                            ; ===========================================================================
00010AF8                            ; ---------------------------------------------------------------------------
00010AF8                            ; Sprite mappings - invisible lava tag (MZ)
00010AF8                            ; ---------------------------------------------------------------------------
00010AF8                            Map_obj54:
00010AF8                            	include "_maps\obj54.asm"
00010AF8                            ; ---------------------------------------------------------------------------
00010AF8                            ; Sprite mappings - invisible lava tag (MZ)
00010AF8                            ; ---------------------------------------------------------------------------
00010AF8 0000                       		dc.w byte_F212-Map_obj54
00010AFA 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
00010AFC 00                         		even
00010AFC 00                         		even
00010AFC                            
00010AFC                            Ani_obj4C:
00010AFC                            	include "_anim\obj4C.asm"
00010AFC                            ; ---------------------------------------------------------------------------
00010AFC                            ; Animation script - geyser of lava (MZ)
00010AFC                            ; ---------------------------------------------------------------------------
00010AFC 0000                       		dc.w byte_F220-Ani_obj4C
00010AFE 0000                       		dc.w byte_F22A-Ani_obj4C
00010B00 0000                       		dc.w byte_F22E-Ani_obj4C
00010B02 0000                       		dc.w byte_F232-Ani_obj4C
00010B04 0000                       		dc.w byte_F23A-Ani_obj4C
00010B06 0000                       		dc.w byte_F23E-Ani_obj4C
00010B08 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
00010B12 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
00010B16 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
00010B1A 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
00010B22 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
00010B26 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
00010B2A                            		even
00010B2A                            		even
00010B2A                            
00010B2A                            Ani_obj4E:
00010B2A                            	include "_anim\obj4E.asm"
00010B2A                            ; ---------------------------------------------------------------------------
00010B2A                            ; Animation script - advancing wall of lava (MZ)
00010B2A                            ; ---------------------------------------------------------------------------
00010B2A 0000                       		dc.w byte_F244-Ani_obj4E
00010B2C 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
00010B32                            		even
00010B32                            		even
00010B32                            
00010B32                            ; ---------------------------------------------------------------------------
00010B32                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010B32                            ; ---------------------------------------------------------------------------
00010B32                            Map_obj4C:
00010B32                            	include "_maps\obj4C.asm"
00010B32                            ; ---------------------------------------------------------------------------
00010B32                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010B32                            ; ---------------------------------------------------------------------------
00010B32 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
00010B36 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
00010B3A 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
00010B3E 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
00010B42 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
00010B46 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
00010B4A 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
00010B4E 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
00010B52 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
00010B56 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
00010B5A 02                         byte_F272:	dc.b 2
00010B5B EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00010B60 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
00010B65 02                         byte_F27D:	dc.b 2
00010B66 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00010B6B EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00010B70 04                         byte_F288:	dc.b 4
00010B71 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010B76 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010B7B F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010B80 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010B85 04                         byte_F29D:	dc.b 4
00010B86 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010B8B F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010B90 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010B95 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010B9A 06                         byte_F2B2:	dc.b 6
00010B9B EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010BA0 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010BA5 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010BAA EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010BAF E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
00010BB4 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00010BB9 06                         byte_F2D1:	dc.b 6
00010BBA EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010BBF F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010BC4 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010BC9 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010BCE E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00010BD3 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00010BD8 02                         byte_F2F0:	dc.b 2
00010BD9 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00010BDE E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00010BE3 02                         byte_F2FB:	dc.b 2
00010BE4 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00010BE9 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00010BEE 0A                         byte_F306:	dc.b $A
00010BEF 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010BF4 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010BF9 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010BFE B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010C03 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010C08 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010C0D F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010C12 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010C17 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010C1C 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010C21 0A                         byte_F339:	dc.b $A
00010C22 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010C27 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010C2C B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010C31 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010C36 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010C3B D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010C40 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010C45 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010C4A 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010C4F 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010C54 0A                         byte_F36C:	dc.b $A
00010C55 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010C5A 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010C5F B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010C64 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010C69 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010C6E D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010C73 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010C78 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010C7D 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010C82 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010C87 06                         byte_F39F:	dc.b 6
00010C88 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010C8D 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010C92 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010C97 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010C9C D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010CA1 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010CA6 06                         byte_F3BE:	dc.b 6
00010CA7 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010CAC 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010CB1 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010CB6 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010CBB D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010CC0 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010CC5 06                         byte_F3DD:	dc.b 6
00010CC6 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010CCB 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010CD0 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010CD5 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010CDA D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010CDF D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010CE4 10                         byte_F3FC:	dc.b $10
00010CE5 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010CEA 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010CEF B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010CF4 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010CF9 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010CFE D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010D03 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010D08 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010D0D 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010D12 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010D17 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00010D1C 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00010D21 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00010D26 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00010D2B 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00010D30 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00010D35 10                         byte_F44D:	dc.b $10
00010D36 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010D3B 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010D40 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010D45 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010D4A D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010D4F D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010D54 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010D59 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010D5E 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010D63 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010D68 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00010D6D 300F 0850 00               		dc.b $30, $F, 8, $50, 0
00010D72 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
00010D77 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00010D7C 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00010D81 700F 0850 00               		dc.b $70, $F, 8, $50, 0
00010D86 10                         byte_F49E:	dc.b $10
00010D87 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010D8C 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010D91 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010D96 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010D9B D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010DA0 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010DA5 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010DAA F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010DAF 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010DB4 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010DB9 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00010DBE 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00010DC3 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00010DC8 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00010DCD 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00010DD2 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00010DD7 06                         byte_F4EF:	dc.b 6
00010DD8 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00010DDD E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00010DE2 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00010DE7 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00010DEC D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00010DF1 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00010DF6 06                         byte_F50E:	dc.b 6
00010DF7 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00010DFC E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00010E01 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00010E06 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00010E0B D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00010E10 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00010E15 00                         byte_F52D:	dc.b 0
00010E16                            		even
00010E16                            		even
00010E16                            
00010E16                            ; ---------------------------------------------------------------------------
00010E16                            ; Sprite mappings - advancing wall of lava (MZ)
00010E16                            ; ---------------------------------------------------------------------------
00010E16                            Map_obj4E:
00010E16                            	include "_maps\obj4E.asm"
00010E16                            ; ---------------------------------------------------------------------------
00010E16                            ; Sprite mappings - advancing wall of lava (MZ)
00010E16                            ; ---------------------------------------------------------------------------
00010E16 0000                       		dc.w byte_F538-Map_obj4E
00010E18 0000                       		dc.w byte_F566-Map_obj4E
00010E1A 0000                       		dc.w byte_F594-Map_obj4E
00010E1C 0000                       		dc.w byte_F5C2-Map_obj4E
00010E1E 0000                       		dc.w byte_F5F0-Map_obj4E
00010E20 09                         byte_F538:	dc.b 9
00010E21 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
00010E26 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010E2B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010E30 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010E35 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010E3A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010E3F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010E44 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010E49 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010E4E 09                         byte_F566:	dc.b 9
00010E4F E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010E54 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
00010E59 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010E5E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010E63 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010E68 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010E6D 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010E72 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010E77 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010E7C 09                         byte_F594:	dc.b 9
00010E7D E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
00010E82 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010E87 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010E8C E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010E91 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010E96 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010E9B 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010EA0 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010EA5 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010EAA 09                         byte_F5C2:	dc.b 9
00010EAB E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010EB0 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
00010EB5 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010EBA E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010EBF 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010EC4 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010EC9 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010ECE E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010ED3 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010ED8 08                         byte_F5F0:	dc.b 8
00010ED9 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00010EDE 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010EE3 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010EE8 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010EED E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010EF2 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010EF7 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010EFC 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010F02 00                         		even
00010F02 00                         		even
00010F02                            
00010F02                            ; ===========================================================================
00010F02                            ; ---------------------------------------------------------------------------
00010F02                            ; Object 40 - Moto Bug enemy (GHZ)
00010F02                            ; ---------------------------------------------------------------------------
00010F02                            
00010F02                            Obj40:					; XREF: Obj_Index
00010F02 7000                       		moveq	#0,d0
00010F04 1028 0024                  		move.b	$24(a0),d0
00010F08 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00010F0C 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00010F10                            ; ===========================================================================
00010F10 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
00010F12 0000                       		dc.w Obj40_Action-Obj40_Index
00010F14 0000                       		dc.w Obj40_Animate-Obj40_Index
00010F16 0000                       		dc.w Obj40_Delete-Obj40_Index
00010F18                            ; ===========================================================================
00010F18                            
00010F18                            Obj40_Main:				; XREF: Obj40_Index
00010F18 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00010F20 317C 04F0 0002             		move.w	#$4F0,2(a0)
00010F26 117C 0004 0001             		move.b	#4,1(a0)
00010F2C 117C 0004 0018             		move.b	#4,$18(a0)
00010F32 117C 0014 0019             		move.b	#$14,$19(a0)
00010F38 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00010F3C 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
00010F3E 117C 000E 0016             		move.b	#$E,$16(a0)
00010F44 117C 0008 0017             		move.b	#8,$17(a0)
00010F4A 117C 000C 0020             		move.b	#$C,$20(a0)
00010F50 6100 D9BE                  		bsr.w	ObjectFall
00010F54 4EB9 0000 0000             		jsr	ObjHitFloor
00010F5A 4A41                       		tst.w	d1
00010F5C 6A00                       		bpl.s	locret_F68A
00010F5E D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010F62 317C 0000 0012             		move.w	#0,$12(a0)
00010F68 5428 0024                  		addq.b	#2,$24(a0)
00010F6C 0868 0000 0022             		bchg	#0,$22(a0)
00010F72                            
00010F72                            locret_F68A:
00010F72 4E75                       		rts	
00010F74                            ; ===========================================================================
00010F74                            
00010F74                            Obj40_SetSmoke:				; XREF: Obj40_Main
00010F74 5828 0024                  		addq.b	#4,$24(a0)
00010F78 6000 0000                  		bra.w	Obj40_Animate
00010F7C                            ; ===========================================================================
00010F7C                            
00010F7C                            Obj40_Action:				; XREF: Obj40_Index
00010F7C 7000                       		moveq	#0,d0
00010F7E 1028 0025                  		move.b	$25(a0),d0
00010F82 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
00010F86 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
00010F8A 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00010F90 6100 AA18                  		bsr.w	AnimateSprite
00010F94                            
00010F94                            ; ---------------------------------------------------------------------------
00010F94                            ; Routine to mark an enemy/monitor/ring	as destroyed
00010F94                            ; ---------------------------------------------------------------------------
00010F94                            
00010F94                            MarkObjGone:
00010F94 3028 0008                  		move.w	8(a0),d0
00010F98 0240 FF80                  		andi.w	#$FF80,d0
00010F9C 3238 F700                  		move.w	($FFFFF700).w,d1
00010FA0 0441 0080                  		subi.w	#$80,d1
00010FA4 0241 FF80                  		andi.w	#$FF80,d1
00010FA8 9041                       		sub.w	d1,d0
00010FAA 0C40 0280                  		cmpi.w	#$280,d0
00010FAE 6200 0000                  		bhi.w	Mark_ChkGone
00010FB2 6000 D996                  		bra.w	DisplaySprite
00010FB6                            ; ===========================================================================
00010FB6                            
00010FB6                            Mark_ChkGone:
00010FB6 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010FBA 6700 D9DE                  		beq.w	DeleteObject	; if it's zero, don't remember object
00010FBE 3440                       		movea.w	d0,a2	; load address into a2
00010FC0 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010FC4                            
00010FC4                            Mark_Delete:
00010FC4 6000 D9D4                  		bra.w	DeleteObject
00010FC8                            
00010FC8                            ; ===========================================================================
00010FC8 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
00010FCA 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
00010FCC                            ; ===========================================================================
00010FCC                            
00010FCC                            Obj40_Move:				; XREF: Obj40_Index2
00010FCC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010FD0 6A00                       		bpl.s	locret_F70A	; if time remains, branch
00010FD2 5428 0025                  		addq.b	#2,$25(a0)
00010FD6 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
00010FDC 117C 0001 001C             		move.b	#1,$1C(a0)
00010FE2 0868 0000 0022             		bchg	#0,$22(a0)
00010FE8 6600                       		bne.s	locret_F70A
00010FEA 4468 0010                  		neg.w	$10(a0)		; change direction
00010FEE                            
00010FEE                            locret_F70A:
00010FEE 4E75                       		rts	
00010FF0                            ; ===========================================================================
00010FF0                            
00010FF0                            Obj40_FixToFloor:			; XREF: Obj40_Index2
00010FF0 6100 D93E                  		bsr.w	SpeedToPos
00010FF4 4EB9 0000 0000             		jsr	ObjHitFloor
00010FFA 0C41 FFF8                  		cmpi.w	#-8,d1
00010FFE 6D00                       		blt.s	Obj40_Pause
00011000 0C41 000C                  		cmpi.w	#$C,d1
00011004 6C00                       		bge.s	Obj40_Pause
00011006 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001100A 5328 0033                  		subq.b	#1,$33(a0)
0001100E 6A00                       		bpl.s	locret_F756
00011010 117C 000F 0033             		move.b	#$F,$33(a0)
00011016 6100 E088                  		bsr.w	SingleObjLoad
0001101A 6600                       		bne.s	locret_F756
0001101C 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
00011020 3368 0008 0008             		move.w	8(a0),8(a1)
00011026 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001102C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011032 137C 0002 001C             		move.b	#2,$1C(a1)
00011038                            
00011038                            locret_F756:
00011038 4E75                       		rts	
0001103A                            ; ===========================================================================
0001103A                            
0001103A                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0001103A 5528 0025                  		subq.b	#2,$25(a0)
0001103E 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00011044 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0001104A 117C 0000 001C             		move.b	#0,$1C(a0)
00011050 4E75                       		rts	
00011052                            ; ===========================================================================
00011052                            
00011052                            Obj40_Animate:				; XREF: Obj40_Index
00011052 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00011058 6100 A950                  		bsr.w	AnimateSprite
0001105C 6000 D8EC                  		bra.w	DisplaySprite
00011060                            ; ===========================================================================
00011060                            
00011060                            Obj40_Delete:				; XREF: Obj40_Index
00011060 6000 D938                  		bra.w	DeleteObject
00011064                            ; ===========================================================================
00011064                            Ani_obj40:
00011064                            	include "_anim\obj40.asm"
00011064                            ; ---------------------------------------------------------------------------
00011064                            ; Animation script - Motobug enemy
00011064                            ; ---------------------------------------------------------------------------
00011064 0000                       		dc.w byte_F788-Ani_obj40
00011066 0000                       		dc.w byte_F78C-Ani_obj40
00011068 0000                       		dc.w byte_F792-Ani_obj40
0001106A 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0001106E 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
00011074 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
00011082                            		even
00011082                            		even
00011082                            
00011082                            ; ---------------------------------------------------------------------------
00011082                            ; Sprite mappings - Moto Bug enemy (GHZ)
00011082                            ; ---------------------------------------------------------------------------
00011082                            Map_obj40:
00011082                            	include "_maps\obj40.asm"
00011082                            ; ---------------------------------------------------------------------------
00011082                            ; Sprite mappings - Moto Bug enemy (GHZ)
00011082                            ; ---------------------------------------------------------------------------
00011082 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
00011086 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
0001108A 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
0001108E 0000                       		dc.w byte_F804-Map_obj40
00011090 04                         byte_F7AE:	dc.b 4
00011091 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
00011096 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
0001109B F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000110A0 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
000110A5 04                         byte_F7C3:	dc.b 4
000110A6 F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
000110AB 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
000110B0 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
000110B5 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
000110BA 05                         byte_F7D8:	dc.b 5
000110BB F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
000110C0 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
000110C5 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000110CA 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
000110CF 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
000110D4 01                         byte_F7F2:	dc.b 1
000110D5 FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
000110DA 01                         byte_F7F8:	dc.b 1
000110DB FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
000110E0 01                         byte_F7FE:	dc.b 1
000110E1 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
000110E6 00                         byte_F804:	dc.b 0
000110E8 00                         		even
000110E8 00                         		even
000110E8                            
000110E8                            ; ===========================================================================
000110E8                            ; ---------------------------------------------------------------------------
000110E8                            ; Object 4F - blank
000110E8                            ; ---------------------------------------------------------------------------
000110E8                            
000110E8                            Obj4F:					; XREF: Obj_Index
000110E8 4E75                       		rts	
000110EA                            
000110EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000110EA                            
000110EA                            
000110EA                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
000110EA 3038 FE04                  		move.w	($FFFFFE04).w,d0
000110EE D047                       		add.w	d7,d0
000110F0 0240 0003                  		andi.w	#3,d0
000110F4 6600                       		bne.s	loc_F836
000110F6 7600                       		moveq	#0,d3
000110F8 1628 0019                  		move.b	$19(a0),d3
000110FC 4A68 0010                  		tst.w	$10(a0)
00011100 6B00                       		bmi.s	loc_F82C
00011102 6100 0000                  		bsr.w	ObjHitWallRight
00011106 4A41                       		tst.w	d1
00011108 6A00                       		bpl.s	loc_F836
0001110A                            
0001110A                            loc_F828:
0001110A 7001                       		moveq	#1,d0
0001110C 4E75                       		rts	
0001110E                            ; ===========================================================================
0001110E                            
0001110E                            loc_F82C:
0001110E 4643                       		not.w	d3
00011110 6100 0000                  		bsr.w	ObjHitWallLeft
00011114 4A41                       		tst.w	d1
00011116 6BF2                       		bmi.s	loc_F828
00011118                            
00011118                            loc_F836:
00011118 7000                       		moveq	#0,d0
0001111A 4E75                       		rts	
0001111C                            ; End of function Obj50_ChkWall
0001111C                            
0001111C                            ; ===========================================================================
0001111C                            ; ---------------------------------------------------------------------------
0001111C                            ; Object 50 - Yadrin enemy (SYZ)
0001111C                            ; ---------------------------------------------------------------------------
0001111C                            
0001111C                            Obj50:					; XREF: Obj_Index
0001111C 7000                       		moveq	#0,d0
0001111E 1028 0024                  		move.b	$24(a0),d0
00011122 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00011126 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0001112A                            ; ===========================================================================
0001112A 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0001112C 0000                       		dc.w Obj50_Action-Obj50_Index
0001112E                            ; ===========================================================================
0001112E                            
0001112E                            Obj50_Main:				; XREF: Obj50_Index
0001112E 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
00011136 317C 247B 0002             		move.w	#$247B,2(a0)
0001113C 117C 0004 0001             		move.b	#4,1(a0)
00011142 117C 0004 0018             		move.b	#4,$18(a0)
00011148 117C 0014 0019             		move.b	#$14,$19(a0)
0001114E 117C 0011 0016             		move.b	#$11,$16(a0)
00011154 117C 0008 0017             		move.b	#8,$17(a0)
0001115A 117C 00CC 0020             		move.b	#$CC,$20(a0)
00011160 6100 D7AE                  		bsr.w	ObjectFall
00011164 6100 0000                  		bsr.w	ObjHitFloor
00011168 4A41                       		tst.w	d1
0001116A 6A00                       		bpl.s	locret_F89E
0001116C D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00011170 317C 0000 0012             		move.w	#0,$12(a0)
00011176 5428 0024                  		addq.b	#2,$24(a0)
0001117A 0868 0000 0022             		bchg	#0,$22(a0)
00011180                            
00011180                            locret_F89E:
00011180 4E75                       		rts	
00011182                            ; ===========================================================================
00011182                            
00011182                            Obj50_Action:				; XREF: Obj50_Index
00011182 7000                       		moveq	#0,d0
00011184 1028 0025                  		move.b	$25(a0),d0
00011188 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0001118C 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
00011190 43F9 0000 0000             		lea	(Ani_obj50).l,a1
00011196 6100 A812                  		bsr.w	AnimateSprite
0001119A 6000 FDF8                  		bra.w	MarkObjGone
0001119E                            ; ===========================================================================
0001119E 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
000111A0 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
000111A2                            ; ===========================================================================
000111A2                            
000111A2                            Obj50_Move:				; XREF: Obj50_Index2
000111A2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000111A6 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
000111A8 5428 0025                  		addq.b	#2,$25(a0)
000111AC 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
000111B2 117C 0001 001C             		move.b	#1,$1C(a0)
000111B8 0868 0000 0022             		bchg	#0,$22(a0)
000111BE 6600                       		bne.s	locret_F8E2
000111C0 4468 0010                  		neg.w	$10(a0)		; change direction
000111C4                            
000111C4                            locret_F8E2:
000111C4 4E75                       		rts	
000111C6                            ; ===========================================================================
000111C6                            
000111C6                            Obj50_FixToFloor:			; XREF: Obj50_Index2
000111C6 6100 D768                  		bsr.w	SpeedToPos
000111CA 6100 0000                  		bsr.w	ObjHitFloor
000111CE 0C41 FFF8                  		cmpi.w	#-8,d1
000111D2 6D00                       		blt.s	Obj50_Pause
000111D4 0C41 000C                  		cmpi.w	#$C,d1
000111D8 6C00                       		bge.s	Obj50_Pause
000111DA D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
000111DE 6100 FF0A                  		bsr.w	Obj50_ChkWall
000111E2 6600                       		bne.s	Obj50_Pause
000111E4 4E75                       		rts	
000111E6                            ; ===========================================================================
000111E6                            
000111E6                            Obj50_Pause:				; XREF: Obj50_FixToFloor
000111E6 5528 0025                  		subq.b	#2,$25(a0)
000111EA 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000111F0 317C 0000 0010             		move.w	#0,$10(a0)
000111F6 117C 0000 001C             		move.b	#0,$1C(a0)
000111FC 4E75                       		rts	
000111FE                            ; ===========================================================================
000111FE                            Ani_obj50:
000111FE                            	include "_anim\obj50.asm"
000111FE                            ; ---------------------------------------------------------------------------
000111FE                            ; Animation script - Yadrin enemy
000111FE                            ; ---------------------------------------------------------------------------
000111FE 0000                       		dc.w byte_F920-Ani_obj50
00011200 0000                       		dc.w byte_F924-Ani_obj50
00011202 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00011206 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00011210                            		even
00011210                            		even
00011210                            
00011210                            ; ---------------------------------------------------------------------------
00011210                            ; Sprite mappings - Yadrin enemy (SYZ)
00011210                            ; ---------------------------------------------------------------------------
00011210                            Map_obj50:
00011210                            	include "_maps\obj50.asm"
00011210                            ; ---------------------------------------------------------------------------
00011210                            ; Sprite mappings - Yadrin enemy (SYZ)
00011210                            ; ---------------------------------------------------------------------------
00011210 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
00011214 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
00011218 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0001121C 05                         byte_F93A:	dc.b 5
0001121D F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00011222 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
00011227 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001122C F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011231 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00011236 05                         byte_F954:	dc.b 5
00011237 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0001123C FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00011241 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011246 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001124B 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00011250 05                         byte_F96E:	dc.b 5
00011251 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
00011256 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0001125B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011260 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011265 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0001126A 05                         byte_F988:	dc.b 5
0001126B F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00011270 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
00011275 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001127A F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001127F 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00011284 05                         byte_F9A2:	dc.b 5
00011285 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0001128A FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0001128F EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011294 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011299 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0001129E 05                         byte_F9BC:	dc.b 5
0001129F F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
000112A4 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
000112A9 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000112AE F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000112B3 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000112B8                            		even
000112B8                            		even
000112B8                            
000112B8                            ; ---------------------------------------------------------------------------
000112B8                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
000112B8                            ;
000112B8                            ; variables:
000112B8                            ; d1 = width
000112B8                            ; d2 = height /	2 (when	jumping)
000112B8                            ; d3 = height /	2 (when	walking)
000112B8                            ; d4 = x-axis position
000112B8                            ; ---------------------------------------------------------------------------
000112B8                            
000112B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000112B8                            
000112B8                            
000112B8                            SolidObject:
000112B8 4A28 0025                  		tst.b	$25(a0)
000112BC 6700 0000                  		beq.w	loc_FAC8
000112C0 3401                       		move.w	d1,d2
000112C2 D442                       		add.w	d2,d2
000112C4 43F8 D000                  		lea	($FFFFD000).w,a1
000112C8 0829 0001 0022             		btst	#1,$22(a1)
000112CE 6600                       		bne.s	loc_F9FE
000112D0 3029 0008                  		move.w	8(a1),d0
000112D4 9068 0008                  		sub.w	8(a0),d0
000112D8 D041                       		add.w	d1,d0
000112DA 6B00                       		bmi.s	loc_F9FE
000112DC B042                       		cmp.w	d2,d0
000112DE 6500                       		bcs.s	loc_FA12
000112E0                            
000112E0                            loc_F9FE:
000112E0 08A9 0003 0022             		bclr	#3,$22(a1)
000112E6 08A8 0003 0022             		bclr	#3,$22(a0)
000112EC 4228 0025                  		clr.b	$25(a0)
000112F0 7800                       		moveq	#0,d4
000112F2 4E75                       		rts	
000112F4                            ; ===========================================================================
000112F4                            
000112F4                            loc_FA12:
000112F4 3404                       		move.w	d4,d2
000112F6 4EB9 0000 8C28             		jsr	(MvSonicOnPtfm).l
000112FC 7800                       		moveq	#0,d4
000112FE 4E75                       		rts	
00011300                            ; ===========================================================================
00011300                            
00011300                            SolidObject71:				; XREF: Obj71_Solid
00011300 4A28 0025                  		tst.b	$25(a0)
00011304 6700 0000                  		beq.w	loc_FAD0
00011308 3401                       		move.w	d1,d2
0001130A D442                       		add.w	d2,d2
0001130C 43F8 D000                  		lea	($FFFFD000).w,a1
00011310 0829 0001 0022             		btst	#1,$22(a1)
00011316 6600                       		bne.s	loc_FA44
00011318 3029 0008                  		move.w	8(a1),d0
0001131C 9068 0008                  		sub.w	8(a0),d0
00011320 D041                       		add.w	d1,d0
00011322 6B00                       		bmi.s	loc_FA44
00011324 B042                       		cmp.w	d2,d0
00011326 6500                       		bcs.s	loc_FA58
00011328                            
00011328                            loc_FA44:
00011328 08A9 0003 0022             		bclr	#3,$22(a1)
0001132E 08A8 0003 0022             		bclr	#3,$22(a0)
00011334 4228 0025                  		clr.b	$25(a0)
00011338 7800                       		moveq	#0,d4
0001133A 4E75                       		rts	
0001133C                            ; ===========================================================================
0001133C                            
0001133C                            loc_FA58:
0001133C 3404                       		move.w	d4,d2
0001133E 4EB9 0000 8C28             		jsr	(MvSonicOnPtfm).l
00011344 7800                       		moveq	#0,d4
00011346 4E75                       		rts	
00011348                            ; ===========================================================================
00011348                            
00011348                            SolidObject2F:				; XREF: Obj2F_Solid
00011348 43F8 D000                  		lea	($FFFFD000).w,a1
0001134C 4A28 0001                  		tst.b	1(a0)
00011350 6A00 0000                  		bpl.w	loc_FB92
00011354 3029 0008                  		move.w	8(a1),d0
00011358 9068 0008                  		sub.w	8(a0),d0
0001135C D041                       		add.w	d1,d0
0001135E 6B00 0000                  		bmi.w	loc_FB92
00011362 3601                       		move.w	d1,d3
00011364 D643                       		add.w	d3,d3
00011366 B043                       		cmp.w	d3,d0
00011368 6200 0000                  		bhi.w	loc_FB92
0001136C 3A00                       		move.w	d0,d5
0001136E 0828 0000 0001             		btst	#0,1(a0)
00011374 6700                       		beq.s	loc_FA94
00011376 4645                       		not.w	d5
00011378 DA43                       		add.w	d3,d5
0001137A                            
0001137A                            loc_FA94:
0001137A E24D                       		lsr.w	#1,d5
0001137C 7600                       		moveq	#0,d3
0001137E 1632 5000                  		move.b	(a2,d5.w),d3
00011382 9612                       		sub.b	(a2),d3
00011384 3A28 000C                  		move.w	$C(a0),d5
00011388 9A43                       		sub.w	d3,d5
0001138A 1629 0016                  		move.b	$16(a1),d3
0001138E 4883                       		ext.w	d3
00011390 D443                       		add.w	d3,d2
00011392 3629 000C                  		move.w	$C(a1),d3
00011396 9645                       		sub.w	d5,d3
00011398 5843                       		addq.w	#4,d3
0001139A D642                       		add.w	d2,d3
0001139C 6B00 0000                  		bmi.w	loc_FB92
000113A0 3802                       		move.w	d2,d4
000113A2 D844                       		add.w	d4,d4
000113A4 B644                       		cmp.w	d4,d3
000113A6 6400 0000                  		bcc.w	loc_FB92
000113AA 6000 0000                  		bra.w	loc_FB0E
000113AE                            ; ===========================================================================
000113AE                            
000113AE                            loc_FAC8:
000113AE 4A28 0001                  		tst.b	1(a0)
000113B2 6A00 0000                  		bpl.w	loc_FB92
000113B6                            
000113B6                            loc_FAD0:
000113B6 43F8 D000                  		lea	($FFFFD000).w,a1
000113BA 3029 0008                  		move.w	8(a1),d0
000113BE 9068 0008                  		sub.w	8(a0),d0
000113C2 D041                       		add.w	d1,d0
000113C4 6B00 0000                  		bmi.w	loc_FB92
000113C8 3601                       		move.w	d1,d3
000113CA D643                       		add.w	d3,d3
000113CC B043                       		cmp.w	d3,d0
000113CE 6200 0000                  		bhi.w	loc_FB92
000113D2 1629 0016                  		move.b	$16(a1),d3
000113D6 4883                       		ext.w	d3
000113D8 D443                       		add.w	d3,d2
000113DA 3629 000C                  		move.w	$C(a1),d3
000113DE 9668 000C                  		sub.w	$C(a0),d3
000113E2 5843                       		addq.w	#4,d3
000113E4 D642                       		add.w	d2,d3
000113E6 6B00 0000                  		bmi.w	loc_FB92
000113EA 3802                       		move.w	d2,d4
000113EC D844                       		add.w	d4,d4
000113EE B644                       		cmp.w	d4,d3
000113F0 6400 0000                  		bcc.w	loc_FB92
000113F4                            
000113F4                            loc_FB0E:
000113F4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000113F8 6B00 0000                  		bmi.w	loc_FB92
000113FC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00011402 6400 0000                  		bcc.w	loc_FB92
00011406 4A78 FE08                  		tst.w	($FFFFFE08).w
0001140A 6600 0000                  		bne.w	loc_FBAC
0001140E 3A00                       		move.w	d0,d5
00011410 B240                       		cmp.w	d0,d1
00011412 6400                       		bcc.s	loc_FB36
00011414 D241                       		add.w	d1,d1
00011416 9041                       		sub.w	d1,d0
00011418 3A00                       		move.w	d0,d5
0001141A 4445                       		neg.w	d5
0001141C                            
0001141C                            loc_FB36:
0001141C 3203                       		move.w	d3,d1
0001141E B443                       		cmp.w	d3,d2
00011420 6400                       		bcc.s	loc_FB44
00011422 5943                       		subq.w	#4,d3
00011424 9644                       		sub.w	d4,d3
00011426 3203                       		move.w	d3,d1
00011428 4441                       		neg.w	d1
0001142A                            
0001142A                            loc_FB44:
0001142A BA41                       		cmp.w	d1,d5
0001142C 6200 0000                  		bhi.w	loc_FBB0
00011430 0C41 0004                  		cmpi.w	#4,d1
00011434 6300                       		bls.s	loc_FB8C
00011436 4A40                       		tst.w	d0
00011438 6700                       		beq.s	loc_FB70
0001143A 6B00                       		bmi.s	loc_FB5E
0001143C 4A69 0010                  		tst.w	$10(a1)
00011440 6B00                       		bmi.s	loc_FB70
00011442 6000                       		bra.s	loc_FB64
00011444                            ; ===========================================================================
00011444                            
00011444                            loc_FB5E:
00011444 4A69 0010                  		tst.w	$10(a1)
00011448 6A00                       		bpl.s	loc_FB70
0001144A                            
0001144A                            loc_FB64:
0001144A 337C 0000 0020             		move.w	#0,$20(a1)	; stop Sonic moving
00011450 337C 0000 0010             		move.w	#0,$10(a1)
00011456                            
00011456                            loc_FB70:
00011456 9169 0008                  		sub.w	d0,8(a1)
0001145A 0829 0001 0022             		btst	#1,$22(a1)
00011460 6600                       		bne.s	loc_FB8C
00011462 08E9 0005 0022             		bset	#5,$22(a1)
00011468 08E8 0005 0022             		bset	#5,$22(a0)
0001146E 7801                       		moveq	#1,d4
00011470 4E75                       		rts	
00011472                            ; ===========================================================================
00011472                            
00011472                            loc_FB8C:
00011472 6100                       		bsr.s	loc_FBA0
00011474 7801                       		moveq	#1,d4
00011476 4E75                       		rts	
00011478                            ; ===========================================================================
00011478                            loc_FB92:
00011478 0828 0005 0022             		btst	#5,$22(a0)
0001147E 6700                       		beq.s	loc_FBAC
00011480 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
00011486 6700                       		beq.s	loc_FBA0
00011488 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
0001148E 6700                       		beq.s	loc_FBA0
00011490 0C29 001A 001C             		cmp.b	#$1A,$1C(a1)	; check if in hurt animation
00011496 6700                       		beq.s	loc_FBA0
00011498 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0001149E                            
0001149E                            loc_FBA0:
0001149E 08A8 0005 0022             		bclr	#5,$22(a0)
000114A4 08A9 0005 0022             		bclr	#5,$22(a1)
000114AA                            
000114AA                            loc_FBAC:
000114AA 7800                       		moveq	#0,d4
000114AC 4E75                       		rts	
000114AE                            ; ===========================================================================
000114AE                            
000114AE                            loc_FBB0:
000114AE 4A43                       		tst.w	d3
000114B0 6B00                       		bmi.s	loc_FBBC
000114B2 0C43 0010                  		cmpi.w	#$10,d3
000114B6 6500                       		bcs.s	loc_FBEE
000114B8 60BE                       		bra.s	loc_FB92
000114BA                            ; ===========================================================================
000114BA                            
000114BA                            loc_FBBC:
000114BA 4A69 0012                  		tst.w	$12(a1)
000114BE 6700                       		beq.s	loc_FBD6
000114C0 6A00                       		bpl.s	loc_FBD2
000114C2 4A43                       		tst.w	d3
000114C4 6A00                       		bpl.s	loc_FBD2
000114C6 9769 000C                  		sub.w	d3,$C(a1)
000114CA 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
000114D0                            
000114D0                            loc_FBD2:
000114D0 78FF                       		moveq	#-1,d4
000114D2 4E75                       		rts	
000114D4                            ; ===========================================================================
000114D4                            
000114D4                            loc_FBD6:
000114D4 0829 0001 0022             		btst	#1,$22(a1)
000114DA 66F4                       		bne.s	loc_FBD2
000114DC 2F08                       		move.l	a0,-(sp)
000114DE 2049                       		movea.l	a1,a0
000114E0 4EB9 0000 0000             		jsr	KillSonic
000114E6 205F                       		movea.l	(sp)+,a0
000114E8 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
000114EE 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
000114F4 78FF                       		moveq	#-1,d4
000114F6 4E75                       		rts	
000114F8                            ; ===========================================================================
000114F8                            
000114F8                            loc_FBEE:
000114F8 5943                       		subq.w	#4,d3
000114FA 7200                       		moveq	#0,d1
000114FC 1228 0019                  		move.b	$19(a0),d1
00011500 3401                       		move.w	d1,d2
00011502 D442                       		add.w	d2,d2
00011504 D269 0008                  		add.w	8(a1),d1
00011508 9268 0008                  		sub.w	8(a0),d1
0001150C 6B00                       		bmi.s	loc_FC28
0001150E B242                       		cmp.w	d2,d1
00011510 6400                       		bcc.s	loc_FC28
00011512 4A69 0012                  		tst.w	$12(a1)
00011516 6B00                       		bmi.s	loc_FC28
00011518 9769 000C                  		sub.w	d3,$C(a1)
0001151C 5369 000C                  		subq.w	#1,$C(a1)
00011520 6100                       		bsr.s	sub_FC2C
00011522 117C 0002 0025             		move.b	#2,$25(a0)
00011528 08E8 0003 0022             		bset	#3,$22(a0)
0001152E 78FF                       		moveq	#-1,d4
00011530 4E75                       		rts	
00011532                            ; ===========================================================================
00011532                            
00011532                            loc_FC28:
00011532 7800                       		moveq	#0,d4
00011534 4E75                       		rts	
00011536                            ; End of function SolidObject
00011536                            
00011536                            
00011536                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011536                            
00011536                            
00011536                            sub_FC2C:				; XREF: SolidObject
00011536 0829 0003 0022             		btst	#3,$22(a1)
0001153C 6700                       		beq.s	loc_FC4E
0001153E 7000                       		moveq	#0,d0
00011540 1029 003D                  		move.b	$3D(a1),d0
00011544 ED48                       		lsl.w	#6,d0
00011546 0680 00FF D000             		addi.l	#$FFD000,d0
0001154C 2440                       		movea.l	d0,a2
0001154E 08AA 0003 0022             		bclr	#3,$22(a2)
00011554 422A 0025                  		clr.b	$25(a2)
00011558                            
00011558                            loc_FC4E:
00011558 3008                       		move.w	a0,d0
0001155A 0440 D000                  		subi.w	#-$3000,d0
0001155E EC48                       		lsr.w	#6,d0
00011560 0240 007F                  		andi.w	#$7F,d0
00011564 1340 003D                  		move.b	d0,$3D(a1)
00011568 137C 0000 0026             		move.b	#0,$26(a1)
0001156E 337C 0000 0012             		move.w	#0,$12(a1)
00011574 3369 0010 0020             		move.w	$10(a1),$20(a1)
0001157A 0829 0001 0022             		btst	#1,$22(a1)
00011580 6700                       		beq.s	loc_FC84
00011582 2F08                       		move.l	a0,-(sp)
00011584 2049                       		movea.l	a1,a0
00011586 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0001158C 205F                       		movea.l	(sp)+,a0
0001158E                            
0001158E                            loc_FC84:
0001158E 08E9 0003 0022             		bset	#3,$22(a1)
00011594 08E8 0003 0022             		bset	#3,$22(a0)
0001159A 4E75                       		rts	
0001159C                            ; End of function sub_FC2C
0001159C                            
0001159C                            ; ===========================================================================
0001159C                            ; ---------------------------------------------------------------------------
0001159C                            ; Object 51 - smashable	green block (MZ)
0001159C                            ; ---------------------------------------------------------------------------
0001159C                            
0001159C                            Obj51:					; XREF: Obj_Index
0001159C 7000                       		moveq	#0,d0
0001159E 1028 0024                  		move.b	$24(a0),d0
000115A2 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
000115A6 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
000115AA 6000 F9E8                  		bra.w	MarkObjGone
000115AE                            ; ===========================================================================
000115AE 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000115B0 0000                       		dc.w Obj51_Solid-Obj51_Index
000115B2 0000                       		dc.w Obj51_Display-Obj51_Index
000115B4                            ; ===========================================================================
000115B4                            
000115B4                            Obj51_Main:				; XREF: Obj51_Index
000115B4 5428 0024                  		addq.b	#2,$24(a0)
000115B8 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000115C0 317C 42B8 0002             		move.w	#$42B8,2(a0)
000115C6 117C 0004 0001             		move.b	#4,1(a0)
000115CC 117C 0010 0019             		move.b	#$10,$19(a0)
000115D2 117C 0004 0018             		move.b	#4,$18(a0)
000115D8 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000115DE                            
000115DE                            Obj51_Solid:				; XREF: Obj51_Index
000115DE 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
000115E4 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
000115EA 323C 001B                  		move.w	#$1B,d1
000115EE 343C 0010                  		move.w	#$10,d2
000115F2 363C 0011                  		move.w	#$11,d3
000115F6 3828 0008                  		move.w	8(a0),d4
000115FA 6100 FCBC                  		bsr.w	SolidObject
000115FE 0828 0003 0022             		btst	#3,$22(a0)
00011604 6600                       		bne.s	Obj51_Smash
00011606                            
00011606                            locret_FCFC:
00011606 4E75                       		rts	
00011608                            ; ===========================================================================
00011608                            
00011608                            Obj51_Smash:				; XREF: Obj51_Solid
00011608 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
0001160E 66F6                       		bne.s	locret_FCFC	; if not, branch
00011610 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00011616 08E9 0002 0022             		bset	#2,$22(a1)
0001161C 137C 000E 0016             		move.b	#$E,$16(a1)
00011622 137C 0007 0017             		move.b	#7,$17(a1)
00011628 137C 0002 001C             		move.b	#2,$1C(a1)
0001162E 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00011634 08E9 0001 0022             		bset	#1,$22(a1)
0001163A 08A9 0003 0022             		bclr	#3,$22(a1)
00011640 137C 0002 0024             		move.b	#2,$24(a1)
00011646 08A8 0003 0022             		bclr	#3,$22(a0)
0001164C 4228 0025                  		clr.b	$25(a0)
00011650 117C 0001 001A             		move.b	#1,$1A(a0)
00011656 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0001165C 7203                       		moveq	#3,d1		; set number of	fragments to 4
0001165E 343C 0038                  		move.w	#$38,d2
00011662 6100 CEE4                  		bsr.w	SmashObject
00011666 6100 DA38                  		bsr.w	SingleObjLoad
0001166A 6600                       		bne.s	Obj51_Display
0001166C 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00011670 3368 0008 0008             		move.w	8(a0),8(a1)
00011676 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001167C 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00011680 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00011684 0C42 0006                  		cmpi.w	#6,d2
00011688 6500                       		bcs.s	Obj51_Bonus
0001168A 7406                       		moveq	#6,d2
0001168C                            
0001168C                            Obj51_Bonus:
0001168C 7000                       		moveq	#0,d0
0001168E 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00011692 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00011698 6500                       		bcs.s	loc_FD98	; if not, branch
0001169A 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0001169E 740A                       		moveq	#10,d2
000116A0                            
000116A0                            loc_FD98:
000116A0 4EB9 0000 0000             		jsr	AddPoints
000116A6 E24A                       		lsr.w	#1,d2
000116A8 1342 001A                  		move.b	d2,$1A(a1)
000116AC                            
000116AC                            Obj51_Display:				; XREF: Obj51_Index
000116AC 6100 D282                  		bsr.w	SpeedToPos
000116B0 0668 0038 0012             		addi.w	#$38,$12(a0)
000116B6 6100 D292                  		bsr.w	DisplaySprite
000116BA 4A28 0001                  		tst.b	1(a0)
000116BE 6A00 D2DA                  		bpl.w	DeleteObject
000116C2 4E75                       		rts	
000116C4                            ; ===========================================================================
000116C4 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000116C8 FF00 FF00                  		dc.w $FF00, $FF00
000116CC 0200 FE00                  		dc.w $200, $FE00
000116D0 0100 FF00                  		dc.w $100, $FF00
000116D4                            
000116D4 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000116DC                            ; ---------------------------------------------------------------------------
000116DC                            ; Sprite mappings - smashable green block (MZ)
000116DC                            ; ---------------------------------------------------------------------------
000116DC                            Map_obj51:
000116DC                            	include "_maps\obj51.asm"
000116DC                            ; ---------------------------------------------------------------------------
000116DC                            ; Sprite mappings - smashable green block (MZ)
000116DC                            ; ---------------------------------------------------------------------------
000116DC 0000                       		dc.w byte_FDD8-Map_obj51
000116DE 0000                       		dc.w byte_FDE3-Map_obj51
000116E0 02                         byte_FDD8:	dc.b 2
000116E1 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
000116E6 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000116EB 04                         byte_FDE3:	dc.b 4
000116EC F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000116F1 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000116F6 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000116FB 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00011700                            		even
00011700                            		even
00011700                            
00011700                            ; ===========================================================================
00011700                            ; ---------------------------------------------------------------------------
00011700                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00011700                            ; ---------------------------------------------------------------------------
00011700                            
00011700                            Obj52:					; XREF: Obj_Index
00011700 7000                       		moveq	#0,d0
00011702 1028 0024                  		move.b	$24(a0),d0
00011706 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0001170A 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0001170E                            ; ===========================================================================
0001170E 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00011710 0000                       		dc.w Obj52_Platform-Obj52_Index
00011712 0000                       		dc.w Obj52_StandOn-Obj52_Index
00011714                            
00011714 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00011716 2001                       		dc.b $20, 1
00011718 2002                       		dc.b $20, 2
0001171A 4003                       		dc.b $40, 3
0001171C 3004                       		dc.b $30, 4
0001171E                            ; ===========================================================================
0001171E                            
0001171E                            Obj52_Main:				; XREF: Obj52_Index
0001171E 5428 0024                  		addq.b	#2,$24(a0)
00011722 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0001172A 317C 42B8 0002             		move.w	#$42B8,2(a0)
00011730 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011736 6600                       		bne.s	loc_FE44
00011738 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00011740 317C 43BC 0002             		move.w	#$43BC,2(a0)
00011746 117C 0007 0016             		move.b	#7,$16(a0)
0001174C                            
0001174C                            loc_FE44:
0001174C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00011752 6600                       		bne.s	loc_FE60
00011754 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0001175A 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00011760 6700                       		beq.s	loc_FE60	; if yes, branch
00011762 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00011768                            
00011768                            loc_FE60:
00011768 117C 0004 0001             		move.b	#4,1(a0)
0001176E 7000                       		moveq	#0,d0
00011770 1028 0028                  		move.b	$28(a0),d0
00011774 E648                       		lsr.w	#3,d0
00011776 0240 001E                  		andi.w	#$1E,d0
0001177A 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0001177E 115A 0019                  		move.b	(a2)+,$19(a0)
00011782 115A 001A                  		move.b	(a2)+,$1A(a0)
00011786 117C 0004 0018             		move.b	#4,$18(a0)
0001178C 3168 0008 0030             		move.w	8(a0),$30(a0)
00011792 3168 000C 0032             		move.w	$C(a0),$32(a0)
00011798 0228 000F 0028             		andi.b	#$F,$28(a0)
0001179E                            
0001179E                            Obj52_Platform:				; XREF: Obj52_Index
0001179E 6100 0000                  		bsr.w	Obj52_Move
000117A2 7200                       		moveq	#0,d1
000117A4 1228 0019                  		move.b	$19(a0),d1
000117A8 4EB9 0000 854A             		jsr	(PlatformObject).l
000117AE 6000                       		bra.s	Obj52_ChkDel
000117B0                            ; ===========================================================================
000117B0                            
000117B0                            Obj52_StandOn:				; XREF: Obj52_Index
000117B0 7200                       		moveq	#0,d1
000117B2 1228 0019                  		move.b	$19(a0),d1
000117B6 4EB9 0000 86BE             		jsr	(ExitPlatform).l
000117BC 3F28 0008                  		move.w	8(a0),-(sp)
000117C0 6100 0000                  		bsr.w	Obj52_Move
000117C4 341F                       		move.w	(sp)+,d2
000117C6 4EB9 0000 8C34             		jsr	(MvSonicOnPtfm2).l
000117CC                            
000117CC                            Obj52_ChkDel:				; XREF: Obj52_Platform
000117CC 3028 0030                  		move.w	$30(a0),d0
000117D0 0240 FF80                  		andi.w	#$FF80,d0
000117D4 3238 F700                  		move.w	($FFFFF700).w,d1
000117D8 0441 0080                  		subi.w	#$80,d1
000117DC 0241 FF80                  		andi.w	#$FF80,d1
000117E0 9041                       		sub.w	d1,d0
000117E2 0C40 0280                  		cmpi.w	#$280,d0
000117E6 6300 D162                  		bls.w	DisplaySprite
000117EA 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000117EE 6700 D1AA                  		beq.w	DeleteObject		; if it's zero, don't remember object
000117F2 3440                       		movea.w	d0,a2	; load address into a2
000117F4 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000117F8 6000 D1A0                  		bra.w	DeleteObject	; and delete object
000117FC                            ; ===========================================================================
000117FC                            
000117FC                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000117FC 7000                       		moveq	#0,d0
000117FE 1028 0028                  		move.b	$28(a0),d0
00011802 0240 000F                  		andi.w	#$F,d0
00011806 D040                       		add.w	d0,d0
00011808 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0001180C 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00011810                            ; ===========================================================================
00011810 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00011814 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00011818 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0001181C 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00011820 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00011824 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00011826                            ; ===========================================================================
00011826                            
00011826                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00011826 4E75                       		rts	
00011828                            ; ===========================================================================
00011828                            
00011828                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00011828 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001182C 323C 0060                  		move.w	#$60,d1
00011830 0828 0000 0022             		btst	#0,$22(a0)
00011836 6700                       		beq.s	loc_FF26
00011838 4440                       		neg.w	d0
0001183A D041                       		add.w	d1,d0
0001183C                            
0001183C                            loc_FF26:
0001183C 3228 0030                  		move.w	$30(a0),d1
00011840 9240                       		sub.w	d0,d1
00011842 3141 0008                  		move.w	d1,8(a0)
00011846 4E75                       		rts	
00011848                            ; ===========================================================================
00011848                            
00011848                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00011848 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
0001184E 6600                       		bne.s	Obj52_02_Wait
00011850 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011854                            
00011854                            Obj52_02_Wait:
00011854 4E75                       		rts	
00011856                            ; ===========================================================================
00011856                            
00011856                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00011856 7600                       		moveq	#0,d3
00011858 1628 0019                  		move.b	$19(a0),d3
0001185C 6100 0000                  		bsr.w	ObjHitWallRight
00011860 4A41                       		tst.w	d1		; has the platform hit a wall?
00011862 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00011864 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00011868 3168 0008 0030             		move.w	8(a0),$30(a0)
0001186E 4E75                       		rts	
00011870                            ; ===========================================================================
00011870                            
00011870                            Obj52_03_End:
00011870 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00011874 4E75                       		rts	
00011876                            ; ===========================================================================
00011876                            
00011876                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00011876 7600                       		moveq	#0,d3
00011878 1628 0019                  		move.b	$19(a0),d3
0001187C 6100 0000                  		bsr.w	ObjHitWallRight
00011880 4A41                       		tst.w	d1		; has the platform hit a wall?
00011882 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00011884 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00011888 3168 0008 0030             		move.w	8(a0),$30(a0)
0001188E 4E75                       		rts	
00011890                            ; ===========================================================================
00011890                            
00011890                            Obj52_05_End:
00011890 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00011894 4E75                       		rts	
00011896                            ; ===========================================================================
00011896                            
00011896                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00011896 6100 D098                  		bsr.w	SpeedToPos
0001189A 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000118A0 6100 0000                  		bsr.w	ObjHitFloor
000118A4 4A41                       		tst.w	d1		; has platform hit the floor?
000118A6 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000118AA D368 000C                  		add.w	d1,$C(a0)
000118AE 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
000118B2 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
000118B6                            
000118B6                            locret_FFA0:
000118B6 4E75                       		rts	
000118B8                            ; ===========================================================================
000118B8                            
000118B8                            Obj52_Type07:				; XREF: Obj52_TypeIndex
000118B8 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
000118BC 6700                       		beq.s	Obj52_07_ChkDel
000118BE 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
000118C2                            
000118C2                            Obj52_07_ChkDel:
000118C2 588F                       		addq.l	#4,sp
000118C4 3028 0030                  		move.w	$30(a0),d0
000118C8 0240 FF80                  		andi.w	#$FF80,d0
000118CC 3238 F700                  		move.w	($FFFFF700).w,d1
000118D0 0441 0080                  		subi.w	#$80,d1
000118D4 0241 FF80                  		andi.w	#$FF80,d1
000118D8 9041                       		sub.w	d1,d0
000118DA 0C40 0280                  		cmpi.w	#$280,d0
000118DE 6200 D0BA                  		bhi.w	DeleteObject
000118E2 4E75                       		rts	
000118E4                            ; ===========================================================================
000118E4                            
000118E4                            Obj52_Type08:				; XREF: Obj52_TypeIndex
000118E4 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000118E8 323C 0080                  		move.w	#$80,d1
000118EC 0828 0000 0022             		btst	#0,$22(a0)
000118F2 6700                       		beq.s	loc_FFE2
000118F4 4440                       		neg.w	d0
000118F6 D041                       		add.w	d1,d0
000118F8                            
000118F8                            loc_FFE2:
000118F8 3228 0032                  		move.w	$32(a0),d1
000118FC 9240                       		sub.w	d0,d1
000118FE 3141 000C                  		move.w	d1,$C(a0)
00011902 4E75                       		rts	
00011904                            ; ===========================================================================
00011904                            
00011904                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00011904 7600                       		moveq	#0,d3
00011906 1628 0019                  		move.b	$19(a0),d3
0001190A D643                       		add.w	d3,d3
0001190C 7208                       		moveq	#8,d1
0001190E 0828 0000 0022             		btst	#0,$22(a0)
00011914 6700                       		beq.s	loc_10004
00011916 4441                       		neg.w	d1
00011918 4443                       		neg.w	d3
0001191A                            
0001191A                            loc_10004:
0001191A 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
0001191E 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00011920 3028 0008                  		move.w	8(a0),d0
00011924 9068 0030                  		sub.w	$30(a0),d0
00011928 B043                       		cmp.w	d3,d0
0001192A 6700                       		beq.s	Obj52_0A_Wait
0001192C D368 0008                  		add.w	d1,8(a0)	; move platform
00011930 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00011936 4E75                       		rts	
00011938                            ; ===========================================================================
00011938                            
00011938                            Obj52_0A_Wait:
00011938 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
0001193C 6600                       		bne.s	locret_1002E	; if time remains, branch
0001193E 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00011944                            
00011944                            locret_1002E:
00011944 4E75                       		rts	
00011946                            ; ===========================================================================
00011946                            
00011946                            Obj52_0A_Back:
00011946 3028 0008                  		move.w	8(a0),d0
0001194A 9068 0030                  		sub.w	$30(a0),d0
0001194E 6700                       		beq.s	Obj52_0A_Reset
00011950 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00011954 4E75                       		rts	
00011956                            ; ===========================================================================
00011956                            
00011956                            Obj52_0A_Reset:
00011956 4268 0036                  		clr.w	$36(a0)
0001195A 5328 0028                  		subq.b	#1,$28(a0)
0001195E 4E75                       		rts	
00011960                            ; ===========================================================================
00011960                            ; ---------------------------------------------------------------------------
00011960                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011960                            ; ---------------------------------------------------------------------------
00011960                            Map_obj52:
00011960                            	include "_maps\obj52mz.asm"
00011960                            ; ---------------------------------------------------------------------------
00011960                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011960                            ; ---------------------------------------------------------------------------
00011960 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00011964 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00011968 0000                       		dc.w byte_1008F-Map_obj52
0001196A 01                         byte_10054:	dc.b 1
0001196B F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011970 02                         byte_1005A:	dc.b 2
00011971 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00011976 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
0001197B 04                         byte_10065:	dc.b 4
0001197C F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00011981 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00011986 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
0001198B 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00011990 04                         byte_1007A:	dc.b 4
00011991 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00011996 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
0001199B F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000119A0 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000119A5 03                         byte_1008F:	dc.b 3
000119A6 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000119AB F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000119B0 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000119B6 00                         		even
000119B6 00                         		even
000119B6                            
000119B6                            ; ---------------------------------------------------------------------------
000119B6                            ; Sprite mappings - moving block (LZ)
000119B6                            ; ---------------------------------------------------------------------------
000119B6                            Map_obj52a:
000119B6                            	include "_maps\obj52lz.asm"
000119B6                            ; ---------------------------------------------------------------------------
000119B6                            ; Sprite mappings - moving block (LZ)
000119B6                            ; ---------------------------------------------------------------------------
000119B6 0000                       		dc.w byte_100A2-Map_obj52a
000119B8 01                         byte_100A2:	dc.b 1
000119B9 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
000119BE                            		even
000119BE                            		even
000119BE                            
000119BE                            ; ===========================================================================
000119BE                            ; ---------------------------------------------------------------------------
000119BE                            ; Object 55 - Basaran enemy (MZ)
000119BE                            ; ---------------------------------------------------------------------------
000119BE                            
000119BE                            Obj55:					; XREF: Obj_Index
000119BE 7000                       		moveq	#0,d0
000119C0 1028 0024                  		move.b	$24(a0),d0
000119C4 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
000119C8 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
000119CC                            ; ===========================================================================
000119CC 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
000119CE 0000                       		dc.w Obj55_Action-Obj55_Index
000119D0                            ; ===========================================================================
000119D0                            
000119D0                            Obj55_Main:				; XREF: Obj55_Index
000119D0 5428 0024                  		addq.b	#2,$24(a0)
000119D4 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
000119DC 317C 84B8 0002             		move.w	#$84B8,2(a0)
000119E2 117C 0004 0001             		move.b	#4,1(a0)
000119E8 117C 000C 0016             		move.b	#$C,$16(a0)
000119EE 117C 0002 0018             		move.b	#2,$18(a0)
000119F4 117C 000B 0020             		move.b	#$B,$20(a0)
000119FA 117C 0010 0019             		move.b	#$10,$19(a0)
00011A00                            
00011A00                            Obj55_Action:				; XREF: Obj55_Index
00011A00 7000                       		moveq	#0,d0
00011A02 1028 0025                  		move.b	$25(a0),d0
00011A06 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00011A0A 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00011A0E 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00011A14 6100 9F94                  		bsr.w	AnimateSprite
00011A18 6000 F57A                  		bra.w	MarkObjGone
00011A1C                            ; ===========================================================================
00011A1C 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00011A1E 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00011A20 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00011A22 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00011A24                            ; ===========================================================================
00011A24                            
00011A24                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00011A24 343C 0080                  		move.w	#$80,d2
00011A28 6100 0000                  		bsr.w	Obj55_ChkSonic
00011A2C 6400                       		bcc.s	Obj55_NoDrop
00011A2E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011A32 3140 0036                  		move.w	d0,$36(a0)
00011A36 9068 000C                  		sub.w	$C(a0),d0
00011A3A 6500                       		bcs.s	Obj55_NoDrop
00011A3C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00011A40 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00011A42 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00011A46 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00011A48 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011A4C D007                       		add.b	d7,d0
00011A4E 0200 0007                  		andi.b	#7,d0
00011A52 6600                       		bne.s	Obj55_NoDrop
00011A54 117C 0001 001C             		move.b	#1,$1C(a0)
00011A5A 5428 0025                  		addq.b	#2,$25(a0)
00011A5E                            
00011A5E                            Obj55_NoDrop:
00011A5E 4E75                       		rts	
00011A60                            ; ===========================================================================
00011A60                            
00011A60                            Obj55_DropFly:				; XREF: Obj55_Index2
00011A60 6100 CECE                  		bsr.w	SpeedToPos
00011A64 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00011A6A 343C 0080                  		move.w	#$80,d2
00011A6E 6100 0000                  		bsr.w	Obj55_ChkSonic
00011A72 3028 0036                  		move.w	$36(a0),d0
00011A76 9068 000C                  		sub.w	$C(a0),d0
00011A7A 6500                       		bcs.s	Obj55_ChkDel
00011A7C 0C40 0010                  		cmpi.w	#$10,d0
00011A80 6400                       		bcc.s	locret_10180
00011A82 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00011A86 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00011A8C 117C 0002 001C             		move.b	#2,$1C(a0)
00011A92 5428 0025                  		addq.b	#2,$25(a0)
00011A96                            
00011A96                            locret_10180:
00011A96 4E75                       		rts	
00011A98                            ; ===========================================================================
00011A98                            
00011A98                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00011A98 4A28 0001                  		tst.b	1(a0)
00011A9C 6A00 CEFC                  		bpl.w	DeleteObject
00011AA0 4E75                       		rts	
00011AA2                            ; ===========================================================================
00011AA2                            
00011AA2                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00011AA2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011AA6 0200 000F                  		andi.b	#$F,d0
00011AAA 6600                       		bne.s	loc_101A0
00011AAC 303C 00C0                  		move.w	#$C0,d0
00011AB0 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play flapping sound
00011AB6                            
00011AB6                            loc_101A0:
00011AB6 6100 CE78                  		bsr.w	SpeedToPos
00011ABA 3038 D008                  		move.w	($FFFFD008).w,d0
00011ABE 9068 0008                  		sub.w	8(a0),d0
00011AC2 6400                       		bcc.s	loc_101B0
00011AC4 4440                       		neg.w	d0
00011AC6                            
00011AC6                            loc_101B0:
00011AC6 0C40 0080                  		cmpi.w	#$80,d0
00011ACA 6500                       		bcs.s	locret_101C6
00011ACC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011AD0 D007                       		add.b	d7,d0
00011AD2 0200 0007                  		andi.b	#7,d0
00011AD6 6600                       		bne.s	locret_101C6
00011AD8 5428 0025                  		addq.b	#2,$25(a0)
00011ADC                            
00011ADC                            locret_101C6:
00011ADC 4E75                       		rts	
00011ADE                            ; ===========================================================================
00011ADE                            
00011ADE                            Obj55_FlyUp:				; XREF: Obj55_Index2
00011ADE 6100 CE50                  		bsr.w	SpeedToPos
00011AE2 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00011AE8 6100 0000                  		bsr.w	ObjHitCeiling
00011AEC 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00011AEE 6A00                       		bpl.s	locret_101F4	; if not, branch
00011AF0 9368 000C                  		sub.w	d1,$C(a0)
00011AF4 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00011AFA 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00011AFE 4268 0012                  		clr.w	$12(a0)
00011B02 4228 001C                  		clr.b	$1C(a0)
00011B06 4228 0025                  		clr.b	$25(a0)
00011B0A                            
00011B0A                            locret_101F4:
00011B0A 4E75                       		rts	
00011B0C                            ; ===========================================================================
00011B0C                            
00011B0C                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00011B0C 323C 0100                  		move.w	#$100,d1
00011B10 08E8 0000 0022             		bset	#0,$22(a0)
00011B16 3038 D008                  		move.w	($FFFFD008).w,d0
00011B1A 9068 0008                  		sub.w	8(a0),d0
00011B1E 6400                       		bcc.s	loc_10214
00011B20 4440                       		neg.w	d0
00011B22 4441                       		neg.w	d1
00011B24 08A8 0000 0022             		bclr	#0,$22(a0)
00011B2A                            
00011B2A                            loc_10214:
00011B2A B042                       		cmp.w	d2,d0
00011B2C 4E75                       		rts	
00011B2E                            ; ===========================================================================
00011B2E 6100 CE00                  		bsr.w	SpeedToPos
00011B32 6100 CE16                  		bsr.w	DisplaySprite
00011B36 4A28 0001                  		tst.b	1(a0)
00011B3A 6A00 CE5E                  		bpl.w	DeleteObject
00011B3E 4E75                       		rts	
00011B40                            ; ===========================================================================
00011B40                            Ani_obj55:
00011B40                            	include "_anim\obj55.asm"
00011B40                            ; ---------------------------------------------------------------------------
00011B40                            ; Animation script - Basaran enemy
00011B40                            ; ---------------------------------------------------------------------------
00011B40 0000                       		dc.w byte_10230-Ani_obj55
00011B42 0000                       		dc.w byte_10234-Ani_obj55
00011B44 0000                       		dc.w byte_10238-Ani_obj55
00011B46 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00011B4A 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00011B4E 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00011B54                            		even
00011B54                            		even
00011B54                            
00011B54                            ; ---------------------------------------------------------------------------
00011B54                            ; Sprite mappings - Basaran enemy (MZ)
00011B54                            ; ---------------------------------------------------------------------------
00011B54                            Map_obj55:
00011B54                            	include "_maps\obj55.asm"
00011B54                            ; ---------------------------------------------------------------------------
00011B54                            ; Sprite mappings - Basaran enemy (MZ)
00011B54                            ; ---------------------------------------------------------------------------
00011B54 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00011B58 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00011B5C 01                         byte_10246:	dc.b 1
00011B5D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00011B62 03                         byte_1024C:	dc.b 3
00011B63 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00011B68 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00011B6D 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00011B72 04                         byte_1025C:	dc.b 4
00011B73 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00011B78 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00011B7D 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00011B82 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00011B87 04                         byte_10271:	dc.b 4
00011B88 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00011B8D 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00011B92 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00011B97 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00011B9C                            		even
00011B9C                            		even
00011B9C                            
00011B9C                            ; ===========================================================================
00011B9C                            ; ---------------------------------------------------------------------------
00011B9C                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00011B9C                            ; ---------------------------------------------------------------------------
00011B9C                            
00011B9C                            Obj56:					; XREF: Obj_Index
00011B9C 7000                       		moveq	#0,d0
00011B9E 1028 0024                  		move.b	$24(a0),d0
00011BA2 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00011BA6 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00011BAA                            ; ===========================================================================
00011BAA 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00011BAC 0000                       		dc.w Obj56_Action-Obj56_Index
00011BAE                            
00011BAE 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00011BB0 2020                       		dc.b  $20, $20
00011BB2 1020                       		dc.b  $10, $20
00011BB4 201A                       		dc.b  $20, $1A
00011BB6 1027                       		dc.b  $10, $27
00011BB8 1010                       		dc.b  $10, $10
00011BBA 0820                       		dc.b	8, $20
00011BBC 4010                       		dc.b  $40, $10
00011BBE                            ; ===========================================================================
00011BBE                            
00011BBE                            Obj56_Main:				; XREF: Obj56_Index
00011BBE 5428 0024                  		addq.b	#2,$24(a0)
00011BC2 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00011BCA 317C 4000 0002             		move.w	#$4000,2(a0)
00011BD0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011BD6 6600                       		bne.s	loc_102C8
00011BD8 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00011BDE                            
00011BDE                            loc_102C8:
00011BDE 117C 0004 0001             		move.b	#4,1(a0)
00011BE4 117C 0003 0018             		move.b	#3,$18(a0)
00011BEA 7000                       		moveq	#0,d0
00011BEC 1028 0028                  		move.b	$28(a0),d0
00011BF0 E648                       		lsr.w	#3,d0
00011BF2 0240 000E                  		andi.w	#$E,d0
00011BF6 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00011BFA 115A 0019                  		move.b	(a2)+,$19(a0)
00011BFE 1152 0016                  		move.b	(a2),$16(a0)
00011C02 E248                       		lsr.w	#1,d0
00011C04 1140 001A                  		move.b	d0,$1A(a0)
00011C08 3168 0008 0034             		move.w	8(a0),$34(a0)
00011C0E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011C14 7000                       		moveq	#0,d0
00011C16 1012                       		move.b	(a2),d0
00011C18 D040                       		add.w	d0,d0
00011C1A 3140 003A                  		move.w	d0,$3A(a0)
00011C1E 7000                       		moveq	#0,d0
00011C20 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011C26 6700                       		beq.s	loc_10332
00011C28 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00011C2C 0240 000F                  		andi.w	#$F,d0
00011C30 5140                       		subq.w	#8,d0
00011C32 6500                       		bcs.s	loc_10332
00011C34 E548                       		lsl.w	#2,d0
00011C36 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00011C3A 45F2 0000                  		lea	(a2,d0.w),a2
00011C3E 4A52                       		tst.w	(a2)
00011C40 6A00                       		bpl.s	loc_10332
00011C42 0868 0000 0022             		bchg	#0,$22(a0)
00011C48                            
00011C48                            loc_10332:
00011C48 1028 0028                  		move.b	$28(a0),d0
00011C4C 6A00                       		bpl.s	Obj56_Action
00011C4E 0200 000F                  		andi.b	#$F,d0
00011C52 1140 003C                  		move.b	d0,$3C(a0)
00011C56 117C 0005 0028             		move.b	#5,$28(a0)
00011C5C 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00011C62 6600                       		bne.s	Obj56_ChkGone
00011C64 117C 000C 0028             		move.b	#$C,$28(a0)
00011C6A 317C 0080 003A             		move.w	#$80,$3A(a0)
00011C70                            
00011C70                            Obj56_ChkGone:
00011C70 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011C74 6700                       		beq.s	Obj56_Action		; if it's zero, don't remember object
00011C76 3440                       		movea.w	d0,a2	; load address into a2
00011C78 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00011C7C 0812 0000                  		btst	#0,(a2)
00011C80 6700                       		beq.s	Obj56_Action
00011C82 5228 0028                  		addq.b	#1,$28(a0)
00011C86 4268 003A                  		clr.w	$3A(a0)
00011C8A                            
00011C8A                            Obj56_Action:				; XREF: Obj56_Index
00011C8A 3F28 0008                  		move.w	8(a0),-(sp)
00011C8E 7000                       		moveq	#0,d0
00011C90 1028 0028                  		move.b	$28(a0),d0	; get object type
00011C94 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00011C98 D040                       		add.w	d0,d0
00011C9A 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00011C9E 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00011CA2 381F                       		move.w	(sp)+,d4
00011CA4 4A28 0001                  		tst.b	1(a0)
00011CA8 6A00                       		bpl.s	Obj56_ChkDel
00011CAA 7200                       		moveq	#0,d1
00011CAC 1228 0019                  		move.b	$19(a0),d1
00011CB0 0641 000B                  		addi.w	#$B,d1
00011CB4 7400                       		moveq	#0,d2
00011CB6 1428 0016                  		move.b	$16(a0),d2
00011CBA 3602                       		move.w	d2,d3
00011CBC 5243                       		addq.w	#1,d3
00011CBE 6100 F5F8                  		bsr.w	SolidObject
00011CC2                            
00011CC2                            Obj56_ChkDel:
00011CC2 3028 0034                  		move.w	$34(a0),d0
00011CC6 0240 FF80                  		andi.w	#$FF80,d0
00011CCA 3238 F700                  		move.w	($FFFFF700).w,d1
00011CCE 0441 0080                  		subi.w	#$80,d1
00011CD2 0241 FF80                  		andi.w	#$FF80,d1
00011CD6 9041                       		sub.w	d1,d0
00011CD8 0C40 0280                  		cmpi.w	#$280,d0
00011CDC 6300 CC6C                  		bls.w	DisplaySprite
00011CE0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011CE4 6700 CCB4                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
00011CE8 3440                       		movea.w	d0,a2	; load address into a2
00011CEA 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
00011CEE 6000 CCAA                  		bra.w	DeleteObject
00011CF2                            ; ===========================================================================
00011CF2 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00011CF6 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00011CFA 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00011CFE 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00011D02 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00011D06 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00011D0A 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00011D0E                            ; ===========================================================================
00011D0E                            
00011D0E                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00011D0E 4E75                       		rts	
00011D10                            ; ===========================================================================
00011D10                            
00011D10                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00011D10 323C 0040                  		move.w	#$40,d1
00011D14 7000                       		moveq	#0,d0
00011D16 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011D1A 6000                       		bra.s	Obj56_Move_LR
00011D1C                            ; ===========================================================================
00011D1C                            
00011D1C                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00011D1C 323C 0080                  		move.w	#$80,d1
00011D20 7000                       		moveq	#0,d0
00011D22 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011D26                            
00011D26                            Obj56_Move_LR:
00011D26 0828 0000 0022             		btst	#0,$22(a0)
00011D2C 6700                       		beq.s	loc_10416
00011D2E 4440                       		neg.w	d0
00011D30 D041                       		add.w	d1,d0
00011D32                            
00011D32                            loc_10416:
00011D32 3228 0034                  		move.w	$34(a0),d1
00011D36 9240                       		sub.w	d0,d1
00011D38 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011D3C 4E75                       		rts	
00011D3E                            ; ===========================================================================
00011D3E                            
00011D3E                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00011D3E 323C 0040                  		move.w	#$40,d1
00011D42 7000                       		moveq	#0,d0
00011D44 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011D48 6000                       		bra.s	Obj56_Move_UD
00011D4A                            ; ===========================================================================
00011D4A                            
00011D4A                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00011D4A 323C 0080                  		move.w	#$80,d1
00011D4E 7000                       		moveq	#0,d0
00011D50 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011D54                            
00011D54                            Obj56_Move_UD:
00011D54 0828 0000 0022             		btst	#0,$22(a0)
00011D5A 6700                       		beq.s	loc_10444
00011D5C 4440                       		neg.w	d0
00011D5E D041                       		add.w	d1,d0
00011D60                            
00011D60                            loc_10444:
00011D60 3228 0030                  		move.w	$30(a0),d1
00011D64 9240                       		sub.w	d0,d1
00011D66 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011D6A 4E75                       		rts	
00011D6C                            ; ===========================================================================
00011D6C                            
00011D6C                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00011D6C 4A28 0038                  		tst.b	$38(a0)
00011D70 6600                       		bne.s	loc_104A4
00011D72 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011D78 6600                       		bne.s	loc_1047A	; if not, branch
00011D7A 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00011D80 6600                       		bne.s	loc_1047A
00011D82 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011D86 3038 D008                  		move.w	($FFFFD008).w,d0
00011D8A B068 0008                  		cmp.w	8(a0),d0
00011D8E 6400                       		bcc.s	loc_1047A
00011D90 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00011D96                            
00011D96                            loc_1047A:
00011D96 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011D9A 7000                       		moveq	#0,d0
00011D9C 1028 003C                  		move.b	$3C(a0),d0
00011DA0 0832 0000 0000             		btst	#0,(a2,d0.w)
00011DA6 6700                       		beq.s	loc_104AE
00011DA8 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011DAE 6600                       		bne.s	loc_1049E	; if not, branch
00011DB0 0C00 0003                  		cmpi.b	#3,d0
00011DB4 6600                       		bne.s	loc_1049E
00011DB6 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011DBA                            
00011DBA                            loc_1049E:
00011DBA 117C 0001 0038             		move.b	#1,$38(a0)
00011DC0                            
00011DC0                            loc_104A4:
00011DC0 4A68 003A                  		tst.w	$3A(a0)
00011DC4 6700                       		beq.s	loc_104C8
00011DC6 5568 003A                  		subq.w	#2,$3A(a0)
00011DCA                            
00011DCA                            loc_104AE:
00011DCA 3028 003A                  		move.w	$3A(a0),d0
00011DCE 0828 0000 0022             		btst	#0,$22(a0)
00011DD4 6700                       		beq.s	loc_104BC
00011DD6 4440                       		neg.w	d0
00011DD8                            
00011DD8                            loc_104BC:
00011DD8 3228 0030                  		move.w	$30(a0),d1
00011DDC D240                       		add.w	d0,d1
00011DDE 3141 000C                  		move.w	d1,$C(a0)
00011DE2 4E75                       		rts	
00011DE4                            ; ===========================================================================
00011DE4                            
00011DE4                            loc_104C8:
00011DE4 5228 0028                  		addq.b	#1,$28(a0)
00011DE8 4228 0038                  		clr.b	$38(a0)
00011DEC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011DF0 67D8                       		beq.s	loc_104AE		; if it's zero, don't remember object
00011DF2 3440                       		movea.w	d0,a2	; load address into a2
00011DF4 08D2 0000                  		bset	#0,(a2)
00011DF8 60D0                       		bra.s	loc_104AE
00011DFA                            ; ===========================================================================
00011DFA                            
00011DFA                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00011DFA 4A28 0038                  		tst.b	$38(a0)
00011DFE 6600                       		bne.s	loc_10500
00011E00 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011E04 7000                       		moveq	#0,d0
00011E06 1028 003C                  		move.b	$3C(a0),d0
00011E0A 4A32 0000                  		tst.b	(a2,d0.w)
00011E0E 6A00                       		bpl.s	loc_10512
00011E10 117C 0001 0038             		move.b	#1,$38(a0)
00011E16                            
00011E16                            loc_10500:
00011E16 7000                       		moveq	#0,d0
00011E18 1028 0016                  		move.b	$16(a0),d0
00011E1C D040                       		add.w	d0,d0
00011E1E B068 003A                  		cmp.w	$3A(a0),d0
00011E22 6700                       		beq.s	loc_1052C
00011E24 5468 003A                  		addq.w	#2,$3A(a0)
00011E28                            
00011E28                            loc_10512:
00011E28 3028 003A                  		move.w	$3A(a0),d0
00011E2C 0828 0000 0022             		btst	#0,$22(a0)
00011E32 6700                       		beq.s	loc_10520
00011E34 4440                       		neg.w	d0
00011E36                            
00011E36                            loc_10520:
00011E36 3228 0030                  		move.w	$30(a0),d1
00011E3A D240                       		add.w	d0,d1
00011E3C 3141 000C                  		move.w	d1,$C(a0)
00011E40 4E75                       		rts	
00011E42                            ; ===========================================================================
00011E42                            
00011E42                            loc_1052C:
00011E42 5328 0028                  		subq.b	#1,$28(a0)
00011E46 4228 0038                  		clr.b	$38(a0)
00011E4A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011E4E 67D8                       		beq.s	loc_10512		; if it's zero, don't remember object
00011E50 3440                       		movea.w	d0,a2	; load address into a2
00011E52 0892 0000                  		bclr	#0,(a2)
00011E56 60D0                       		bra.s	loc_10512
00011E58                            ; ===========================================================================
00011E58                            
00011E58                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00011E58 4A28 0038                  		tst.b	$38(a0)
00011E5C 6600                       		bne.s	loc_1055E
00011E5E 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00011E62 6700                       		beq.s	locret_10578
00011E64 117C 0001 0038             		move.b	#1,$38(a0)
00011E6A 4268 003A                  		clr.w	$3A(a0)
00011E6E                            
00011E6E                            loc_1055E:
00011E6E 5268 0008                  		addq.w	#1,8(a0)
00011E72 3168 0008 0034             		move.w	8(a0),$34(a0)
00011E78 5268 003A                  		addq.w	#1,$3A(a0)
00011E7C 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00011E82 6600                       		bne.s	locret_10578
00011E84 4228 0028                  		clr.b	$28(a0)
00011E88                            
00011E88                            locret_10578:
00011E88 4E75                       		rts	
00011E8A                            ; ===========================================================================
00011E8A                            
00011E8A                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00011E8A 4A28 0038                  		tst.b	$38(a0)
00011E8E 6600                       		bne.s	loc_10598
00011E90 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011E94 7000                       		moveq	#0,d0
00011E96 1028 003C                  		move.b	$3C(a0),d0
00011E9A 0832 0000 0000             		btst	#0,(a2,d0.w)
00011EA0 6700                       		beq.s	loc_105A2
00011EA2 117C 0001 0038             		move.b	#1,$38(a0)
00011EA8                            
00011EA8                            loc_10598:
00011EA8 4A68 003A                  		tst.w	$3A(a0)
00011EAC 6700                       		beq.s	loc_105C0
00011EAE 5568 003A                  		subq.w	#2,$3A(a0)
00011EB2                            
00011EB2                            loc_105A2:
00011EB2 3028 003A                  		move.w	$3A(a0),d0
00011EB6 0828 0000 0022             		btst	#0,$22(a0)
00011EBC 6700                       		beq.s	loc_105B4
00011EBE 4440                       		neg.w	d0
00011EC0 0640 0080                  		addi.w	#$80,d0
00011EC4                            
00011EC4                            loc_105B4:
00011EC4 3228 0034                  		move.w	$34(a0),d1
00011EC8 D240                       		add.w	d0,d1
00011ECA 3141 0008                  		move.w	d1,8(a0)
00011ECE 4E75                       		rts	
00011ED0                            ; ===========================================================================
00011ED0                            
00011ED0                            loc_105C0:
00011ED0 5228 0028                  		addq.b	#1,$28(a0)
00011ED4 4228 0038                  		clr.b	$38(a0)
00011ED8 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011EDC 67D4                       		beq.s	loc_105A2		; if it's zero, don't remember object
00011EDE 3440                       		movea.w	d0,a2	; load address into a2
00011EE0 08D2 0000                  		bset	#0,(a2)
00011EE4 60CC                       		bra.s	loc_105A2
00011EE6                            ; ===========================================================================
00011EE6                            
00011EE6                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00011EE6 4A28 0038                  		tst.b	$38(a0)
00011EEA 6600                       		bne.s	loc_105F8
00011EEC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011EF0 7000                       		moveq	#0,d0
00011EF2 1028 003C                  		move.b	$3C(a0),d0
00011EF6 4A32 0000                  		tst.b	(a2,d0.w)
00011EFA 6A00                       		bpl.s	loc_10606
00011EFC 117C 0001 0038             		move.b	#1,$38(a0)
00011F02                            
00011F02                            loc_105F8:
00011F02 303C 0080                  		move.w	#$80,d0
00011F06 B068 003A                  		cmp.w	$3A(a0),d0
00011F0A 6700                       		beq.s	loc_10624
00011F0C 5468 003A                  		addq.w	#2,$3A(a0)
00011F10                            
00011F10                            loc_10606:
00011F10 3028 003A                  		move.w	$3A(a0),d0
00011F14 0828 0000 0022             		btst	#0,$22(a0)
00011F1A 6700                       		beq.s	loc_10618
00011F1C 4440                       		neg.w	d0
00011F1E 0640 0080                  		addi.w	#$80,d0
00011F22                            
00011F22                            loc_10618:
00011F22 3228 0034                  		move.w	$34(a0),d1
00011F26 D240                       		add.w	d0,d1
00011F28 3141 0008                  		move.w	d1,8(a0)
00011F2C 4E75                       		rts	
00011F2E                            ; ===========================================================================
00011F2E                            
00011F2E                            loc_10624:
00011F2E 5328 0028                  		subq.b	#1,$28(a0)
00011F32 4228 0038                  		clr.b	$38(a0)
00011F36 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011F3A 67D4                       		beq.s	loc_10606		; if it's zero, don't remember object
00011F3C 3440                       		movea.w	d0,a2	; load address into a2
00011F3E 0892 0000                  		bclr	#0,(a2)
00011F42 60CC                       		bra.s	loc_10606
00011F44                            ; ===========================================================================
00011F44                            
00011F44                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00011F44 323C 0010                  		move.w	#$10,d1
00011F48 7000                       		moveq	#0,d0
00011F4A 1038 FE88                  		move.b	($FFFFFE88).w,d0
00011F4E E248                       		lsr.w	#1,d0
00011F50 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00011F54 6000                       		bra.s	Obj56_Move_Sqr
00011F56                            ; ===========================================================================
00011F56                            
00011F56                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00011F56 323C 0030                  		move.w	#$30,d1
00011F5A 7000                       		moveq	#0,d0
00011F5C 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00011F60 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00011F64 6000                       		bra.s	Obj56_Move_Sqr
00011F66                            ; ===========================================================================
00011F66                            
00011F66                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00011F66 323C 0050                  		move.w	#$50,d1
00011F6A 7000                       		moveq	#0,d0
00011F6C 1038 FE90                  		move.b	($FFFFFE90).w,d0
00011F70 3638 FE92                  		move.w	($FFFFFE92).w,d3
00011F74 6000                       		bra.s	Obj56_Move_Sqr
00011F76                            ; ===========================================================================
00011F76                            
00011F76                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00011F76 323C 0070                  		move.w	#$70,d1
00011F7A 7000                       		moveq	#0,d0
00011F7C 1038 FE94                  		move.b	($FFFFFE94).w,d0
00011F80 3638 FE96                  		move.w	($FFFFFE96).w,d3
00011F84                            
00011F84                            Obj56_Move_Sqr:
00011F84 4A43                       		tst.w	d3
00011F86 6600                       		bne.s	loc_1068E
00011F88 5228 0022                  		addq.b	#1,$22(a0)
00011F8C 0228 0003 0022             		andi.b	#3,$22(a0)
00011F92                            
00011F92                            loc_1068E:
00011F92 1428 0022                  		move.b	$22(a0),d2
00011F96 0202 0003                  		andi.b	#3,d2
00011F9A 6600                       		bne.s	loc_106AE
00011F9C 9041                       		sub.w	d1,d0
00011F9E D068 0034                  		add.w	$34(a0),d0
00011FA2 3140 0008                  		move.w	d0,8(a0)
00011FA6 4441                       		neg.w	d1
00011FA8 D268 0030                  		add.w	$30(a0),d1
00011FAC 3141 000C                  		move.w	d1,$C(a0)
00011FB0 4E75                       		rts	
00011FB2                            ; ===========================================================================
00011FB2                            
00011FB2                            loc_106AE:
00011FB2 5302                       		subq.b	#1,d2
00011FB4 6600                       		bne.s	loc_106CC
00011FB6 5341                       		subq.w	#1,d1
00011FB8 9041                       		sub.w	d1,d0
00011FBA 4440                       		neg.w	d0
00011FBC D068 0030                  		add.w	$30(a0),d0
00011FC0 3140 000C                  		move.w	d0,$C(a0)
00011FC4 5241                       		addq.w	#1,d1
00011FC6 D268 0034                  		add.w	$34(a0),d1
00011FCA 3141 0008                  		move.w	d1,8(a0)
00011FCE 4E75                       		rts	
00011FD0                            ; ===========================================================================
00011FD0                            
00011FD0                            loc_106CC:
00011FD0 5302                       		subq.b	#1,d2
00011FD2 6600                       		bne.s	loc_106EA
00011FD4 5341                       		subq.w	#1,d1
00011FD6 9041                       		sub.w	d1,d0
00011FD8 4440                       		neg.w	d0
00011FDA D068 0034                  		add.w	$34(a0),d0
00011FDE 3140 0008                  		move.w	d0,8(a0)
00011FE2 5241                       		addq.w	#1,d1
00011FE4 D268 0030                  		add.w	$30(a0),d1
00011FE8 3141 000C                  		move.w	d1,$C(a0)
00011FEC 4E75                       		rts	
00011FEE                            ; ===========================================================================
00011FEE                            
00011FEE                            loc_106EA:
00011FEE 9041                       		sub.w	d1,d0
00011FF0 D068 0030                  		add.w	$30(a0),d0
00011FF4 3140 000C                  		move.w	d0,$C(a0)
00011FF8 4441                       		neg.w	d1
00011FFA D268 0034                  		add.w	$34(a0),d1
00011FFE 3141 0008                  		move.w	d1,8(a0)
00012002 4E75                       		rts	
00012004                            ; ===========================================================================
00012004                            ; ---------------------------------------------------------------------------
00012004                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00012004                            ; ---------------------------------------------------------------------------
00012004                            Map_obj56:
00012004                            	include "_maps\obj56.asm"
00012004                            ; ---------------------------------------------------------------------------
00012004                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00012004                            ; ---------------------------------------------------------------------------
00012004 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00012008 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
0001200C 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00012010 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00012014 01                         byte_10710:	dc.b 1
00012015 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
0001201A 04                         byte_10716:	dc.b 4
0001201B E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00012020 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00012025 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
0001202A 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
0001202F 02                         byte_1072B:	dc.b 2
00012030 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00012035 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
0001203A 04                         byte_10736:	dc.b 4
0001203B E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00012040 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00012045 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
0001204A 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
0001204F 03                         byte_1074B:	dc.b 3
00012050 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00012055 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
0001205A 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
0001205F 01                         byte_1075B:	dc.b 1
00012060 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00012065 02                         byte_10761:	dc.b 2
00012066 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001206B 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012070 04                         byte_1076C:	dc.b 4
00012071 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00012076 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
0001207B F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012080 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00012086 00                         		even
00012086 00                         		even
00012086                            
00012086                            ; ===========================================================================
00012086                            ; ---------------------------------------------------------------------------
00012086                            ; Object 57 - spiked balls (SYZ, LZ)
00012086                            ; ---------------------------------------------------------------------------
00012086                            
00012086                            Obj57:					; XREF: Obj_Index
00012086 7000                       		moveq	#0,d0
00012088 1028 0024                  		move.b	$24(a0),d0
0001208C 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00012090 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00012094                            ; ===========================================================================
00012094 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00012096 0000                       		dc.w Obj57_Move-Obj57_Index
00012098 0000                       		dc.w Obj57_Display-Obj57_Index
0001209A                            ; ===========================================================================
0001209A                            
0001209A                            Obj57_Main:				; XREF: Obj57_Index
0001209A 5428 0024                  		addq.b	#2,$24(a0)
0001209E 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
000120A6 317C 03BA 0002             		move.w	#$3BA,2(a0)
000120AC 117C 0004 0001             		move.b	#4,1(a0)
000120B2 117C 0004 0018             		move.b	#4,$18(a0)
000120B8 117C 0008 0019             		move.b	#8,$19(a0)
000120BE 3168 0008 003A             		move.w	8(a0),$3A(a0)
000120C4 3168 000C 0038             		move.w	$C(a0),$38(a0)
000120CA 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
000120D0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000120D6 6600                       		bne.s	loc_107E8
000120D8 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
000120DE 317C 0310 0002             		move.w	#$310,2(a0)
000120E4 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
000120EC                            
000120EC                            loc_107E8:
000120EC 1228 0028                  		move.b	$28(a0),d1	; get object type
000120F0 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000120F4 4881                       		ext.w	d1
000120F6 E741                       		asl.w	#3,d1		; multiply by 8
000120F8 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
000120FC 1028 0022                  		move.b	$22(a0),d0
00012100 E418                       		ror.b	#2,d0
00012102 0200 00C0                  		andi.b	#-$40,d0
00012106 1140 0026                  		move.b	d0,$26(a0)
0001210A 45E8 0029                  		lea	$29(a0),a2
0001210E 1228 0028                  		move.b	$28(a0),d1	; get object type
00012112 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00012116 14FC 0000                  		move.b	#0,(a2)+
0001211A 3601                       		move.w	d1,d3
0001211C E94B                       		lsl.w	#4,d3
0001211E 1143 003C                  		move.b	d3,$3C(a0)
00012122 5341                       		subq.w	#1,d1		; set chain length (type-1)
00012124 6500                       		bcs.s	loc_10894
00012126 0828 0003 0028             		btst	#3,$28(a0)
0001212C 6700                       		beq.s	Obj57_MakeChain
0001212E 5341                       		subq.w	#1,d1
00012130 6500                       		bcs.s	loc_10894
00012132                            
00012132                            Obj57_MakeChain:
00012132 6100 CF6C                  		bsr.w	SingleObjLoad
00012136 6600                       		bne.s	loc_10894
00012138 5228 0029                  		addq.b	#1,$29(a0)
0001213C 3A09                       		move.w	a1,d5
0001213E 0445 D000                  		subi.w	#-$3000,d5
00012142 EC4D                       		lsr.w	#6,d5
00012144 0245 007F                  		andi.w	#$7F,d5
00012148 14C5                       		move.b	d5,(a2)+
0001214A 137C 0004 0024             		move.b	#4,$24(a1)
00012150 1290                       		move.b	0(a0),0(a1)
00012152 2368 0004 0004             		move.l	4(a0),4(a1)
00012158 3368 0002 0002             		move.w	2(a0),2(a1)
0001215E 1368 0001 0001             		move.b	1(a0),1(a1)
00012164 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001216A 1368 0019 0019             		move.b	$19(a0),$19(a1)
00012170 1368 0020 0020             		move.b	$20(a0),$20(a1)
00012176 0403 0010                  		subi.b	#$10,d3
0001217A 1343 003C                  		move.b	d3,$3C(a1)
0001217E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00012184 6600                       		bne.s	loc_10890
00012186 4A03                       		tst.b	d3
00012188 6600                       		bne.s	loc_10890
0001218A 137C 0002 001A             		move.b	#2,$1A(a1)
00012190                            
00012190                            loc_10890:
00012190 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00012194                            
00012194                            loc_10894:
00012194 3A08                       		move.w	a0,d5
00012196 0445 D000                  		subi.w	#-$3000,d5
0001219A EC4D                       		lsr.w	#6,d5
0001219C 0245 007F                  		andi.w	#$7F,d5
000121A0 14C5                       		move.b	d5,(a2)+
000121A2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000121A8 6600                       		bne.s	Obj57_Move
000121AA 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
000121B0 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000121B6                            
000121B6                            Obj57_Move:				; XREF: Obj57_Index
000121B6 6100 0000                  		bsr.w	Obj57_MoveSub
000121BA 6000 0000                  		bra.w	Obj57_ChkDel
000121BE                            ; ===========================================================================
000121BE                            
000121BE                            Obj57_MoveSub:				; XREF: Obj57_Move
000121BE 3028 003E                  		move.w	$3E(a0),d0
000121C2 D168 0026                  		add.w	d0,$26(a0)
000121C6 1028 0026                  		move.b	$26(a0),d0
000121CA 4EB9 0000 29CC             		jsr	(CalcSine).l
000121D0 3428 0038                  		move.w	$38(a0),d2
000121D4 3628 003A                  		move.w	$3A(a0),d3
000121D8 45E8 0029                  		lea	$29(a0),a2
000121DC 7C00                       		moveq	#0,d6
000121DE 1C1A                       		move.b	(a2)+,d6
000121E0                            
000121E0                            Obj57_MoveLoop:
000121E0 7800                       		moveq	#0,d4
000121E2 181A                       		move.b	(a2)+,d4
000121E4 ED4C                       		lsl.w	#6,d4
000121E6 0684 00FF D000             		addi.l	#$FFD000,d4
000121EC 2244                       		movea.l	d4,a1
000121EE 7800                       		moveq	#0,d4
000121F0 1829 003C                  		move.b	$3C(a1),d4
000121F4 2A04                       		move.l	d4,d5
000121F6 C9C0                       		muls.w	d0,d4
000121F8 E084                       		asr.l	#8,d4
000121FA CBC1                       		muls.w	d1,d5
000121FC E085                       		asr.l	#8,d5
000121FE D842                       		add.w	d2,d4
00012200 DA43                       		add.w	d3,d5
00012202 3344 000C                  		move.w	d4,$C(a1)
00012206 3345 0008                  		move.w	d5,8(a1)
0001220A 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
0001220E 4E75                       		rts	
00012210                            ; ===========================================================================
00012210                            
00012210                            Obj57_ChkDel:				; XREF: Obj57_Move
00012210 3028 003A                  		move.w	$3A(a0),d0
00012214 0240 FF80                  		andi.w	#$FF80,d0
00012218 3238 F700                  		move.w	($FFFFF700).w,d1
0001221C 0441 0080                  		subi.w	#$80,d1
00012220 0241 FF80                  		andi.w	#$FF80,d1
00012224 9041                       		sub.w	d1,d0
00012226 0C40 0280                  		cmpi.w	#$280,d0
0001222A 6300 C71E                  		bls.w	DisplaySprite
0001222E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012232 6700                       		beq.s	Obj57_Delete	; if it's zero, object was placed in debug mode
00012234 3440                       		movea.w	d0,a2	; load address into a2
00012236 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
0001223A                            ; ===========================================================================
0001223A                            
0001223A                            Obj57_Delete:				; XREF: Obj57_ChkDel
0001223A 7400                       		moveq	#0,d2
0001223C 45E8 0029                  		lea	$29(a0),a2
00012240 141A                       		move.b	(a2)+,d2
00012242                            
00012242                            Obj57_DelLoop:
00012242 7000                       		moveq	#0,d0
00012244 101A                       		move.b	(a2)+,d0
00012246 ED48                       		lsl.w	#6,d0
00012248 0680 00FF D000             		addi.l	#$FFD000,d0
0001224E 2240                       		movea.l	d0,a1
00012250 6100 C74A                  		bsr.w	DeleteObject2
00012254 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00012258                            
00012258 4E75                       		rts	
0001225A                            ; ===========================================================================
0001225A                            
0001225A                            Obj57_Display:				; XREF: Obj57_Index
0001225A 6000 C6EE                  		bra.w	DisplaySprite
0001225E                            ; ===========================================================================
0001225E                            ; ---------------------------------------------------------------------------
0001225E                            ; Sprite mappings - chain of spiked balls (SYZ)
0001225E                            ; ---------------------------------------------------------------------------
0001225E                            Map_obj57:
0001225E                            	include "_maps\obj57syz.asm"
0001225E                            ; ---------------------------------------------------------------------------
0001225E                            ; Sprite mappings - chain of spiked balls (SYZ)
0001225E                            ; ---------------------------------------------------------------------------
0001225E 0000                       		dc.w byte_10958-Map_obj57
00012260 01                         byte_10958:	dc.b 1
00012261 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012266                            		even
00012266                            		even
00012266                            
00012266                            ; ---------------------------------------------------------------------------
00012266                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012266                            ; ---------------------------------------------------------------------------
00012266                            Map_obj57a:
00012266                            	include "_maps\obj57lz.asm"
00012266                            ; ---------------------------------------------------------------------------
00012266                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012266                            ; ---------------------------------------------------------------------------
00012266 0000                       		dc.w byte_10964-Map_obj57a
00012268 0000                       		dc.w byte_1096A-Map_obj57a
0001226A 0000                       		dc.w byte_10970-Map_obj57a
0001226C 01                         byte_10964:	dc.b 1
0001226D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012272 01                         byte_1096A:	dc.b 1
00012273 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00012278 01                         byte_10970:	dc.b 1
00012279 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
0001227E                            		even
0001227E                            		even
0001227E                            
0001227E                            ; ===========================================================================
0001227E                            ; ---------------------------------------------------------------------------
0001227E                            ; Object 58 - giant spiked balls (SYZ)
0001227E                            ; ---------------------------------------------------------------------------
0001227E                            
0001227E                            Obj58:					; XREF: Obj_Index
0001227E 7000                       		moveq	#0,d0
00012280 1028 0024                  		move.b	$24(a0),d0
00012284 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00012288 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
0001228C                            ; ===========================================================================
0001228C 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
0001228E 0000                       		dc.w Obj58_Move-Obj58_Index
00012290                            ; ===========================================================================
00012290                            
00012290                            Obj58_Main:				; XREF: Obj58_Index
00012290 5428 0024                  		addq.b	#2,$24(a0)
00012294 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
0001229C 317C 0396 0002             		move.w	#$396,2(a0)
000122A2 117C 0004 0001             		move.b	#4,1(a0)
000122A8 117C 0004 0018             		move.b	#4,$18(a0)
000122AE 117C 0018 0019             		move.b	#$18,$19(a0)
000122B4 3168 0008 003A             		move.w	8(a0),$3A(a0)
000122BA 3168 000C 0038             		move.w	$C(a0),$38(a0)
000122C0 117C 0086 0020             		move.b	#$86,$20(a0)
000122C6 1228 0028                  		move.b	$28(a0),d1	; get object type
000122CA 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000122CE 4881                       		ext.w	d1
000122D0 E741                       		asl.w	#3,d1		; multiply by 8
000122D2 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
000122D6 1028 0022                  		move.b	$22(a0),d0
000122DA E418                       		ror.b	#2,d0
000122DC 0200 00C0                  		andi.b	#$C0,d0
000122E0 1140 0026                  		move.b	d0,$26(a0)
000122E4 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
000122EA                            
000122EA                            Obj58_Move:				; XREF: Obj58_Index
000122EA 7000                       		moveq	#0,d0
000122EC 1028 0028                  		move.b	$28(a0),d0	; get object type
000122F0 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000122F4 D040                       		add.w	d0,d0
000122F6 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
000122FA 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
000122FE 3028 003A                  		move.w	$3A(a0),d0
00012302 0240 FF80                  		andi.w	#$FF80,d0
00012306 3238 F700                  		move.w	($FFFFF700).w,d1
0001230A 0441 0080                  		subi.w	#$80,d1
0001230E 0241 FF80                  		andi.w	#$FF80,d1
00012312 9041                       		sub.w	d1,d0
00012314 0C40 0280                  		cmpi.w	#$280,d0
00012318 6300 C630                  		bls.w	DisplaySprite
0001231C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012320 6700 C678                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
00012324 3440                       		movea.w	d0,a2	; load address into a2
00012326 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
0001232A 6000 C66E                  		bra.w	DeleteObject
0001232E                            ; ===========================================================================
0001232E 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00012330 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00012332 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00012334 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00012336                            ; ===========================================================================
00012336                            
00012336                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00012336 4E75                       		rts	
00012338                            ; ===========================================================================
00012338                            
00012338                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00012338 323C 0060                  		move.w	#$60,d1
0001233C 7000                       		moveq	#0,d0
0001233E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00012342 0828 0000 0022             		btst	#0,$22(a0)
00012348 6700                       		beq.s	loc_10A38
0001234A 4440                       		neg.w	d0
0001234C D041                       		add.w	d1,d0
0001234E                            
0001234E                            loc_10A38:
0001234E 3228 003A                  		move.w	$3A(a0),d1
00012352 9240                       		sub.w	d0,d1
00012354 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00012358 4E75                       		rts	
0001235A                            ; ===========================================================================
0001235A                            
0001235A                            Obj58_Type02:				; XREF: Obj58_TypeIndex
0001235A 323C 0060                  		move.w	#$60,d1
0001235E 7000                       		moveq	#0,d0
00012360 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00012364 0828 0000 0022             		btst	#0,$22(a0)
0001236A 6700                       		beq.s	loc_10A5C
0001236C 4440                       		neg.w	d0
0001236E 0640 0080                  		addi.w	#$80,d0
00012372                            
00012372                            loc_10A5C:
00012372 3228 0038                  		move.w	$38(a0),d1
00012376 9240                       		sub.w	d0,d1
00012378 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
0001237C 4E75                       		rts	
0001237E                            ; ===========================================================================
0001237E                            
0001237E                            Obj58_Type03:				; XREF: Obj58_TypeIndex
0001237E 3028 003E                  		move.w	$3E(a0),d0
00012382 D168 0026                  		add.w	d0,$26(a0)
00012386 1028 0026                  		move.b	$26(a0),d0
0001238A 4EB9 0000 29CC             		jsr	(CalcSine).l
00012390 3428 0038                  		move.w	$38(a0),d2
00012394 3628 003A                  		move.w	$3A(a0),d3
00012398 7800                       		moveq	#0,d4
0001239A 1828 003C                  		move.b	$3C(a0),d4
0001239E 2A04                       		move.l	d4,d5
000123A0 C9C0                       		muls.w	d0,d4
000123A2 E084                       		asr.l	#8,d4
000123A4 CBC1                       		muls.w	d1,d5
000123A6 E085                       		asr.l	#8,d5
000123A8 D842                       		add.w	d2,d4
000123AA DA43                       		add.w	d3,d5
000123AC 3144 000C                  		move.w	d4,$C(a0)
000123B0 3145 0008                  		move.w	d5,8(a0)
000123B4 4E75                       		rts	
000123B6                            ; ===========================================================================
000123B6                            ; ---------------------------------------------------------------------------
000123B6                            ; Sprite mappings - SBZ	spiked ball on a chain
000123B6                            ; ---------------------------------------------------------------------------
000123B6                            Map_obj15b:
000123B6                            	include "_maps\obj15sbz.asm"
000123B6                            ; ---------------------------------------------------------------------------
000123B6                            ; Sprite mappings - spiked ball on a chain (SBZ)
000123B6                            ; ---------------------------------------------------------------------------
000123B6 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
000123BA 0000                       		dc.w byte_10AC6-Map_obj15b
000123BC 05                         byte_10AA6:	dc.b 5
000123BD E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
000123C2 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
000123C7 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
000123CC F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000123D1 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000123D6 01                         byte_10AC0:	dc.b 1
000123D7 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000123DC 02                         byte_10AC6:	dc.b 2
000123DD F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000123E2 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000123E8 00                         		even
000123E8 00                         		even
000123E8                            
000123E8                            ; ===========================================================================
000123E8                            ; ---------------------------------------------------------------------------
000123E8                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000123E8                            ; ---------------------------------------------------------------------------
000123E8                            
000123E8                            Obj59:					; XREF: Obj_Index
000123E8 7000                       		moveq	#0,d0
000123EA 1028 0024                  		move.b	$24(a0),d0
000123EE 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000123F2 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
000123F6 3028 0032                  		move.w	$32(a0),d0
000123FA 0240 FF80                  		andi.w	#$FF80,d0
000123FE 3238 F700                  		move.w	($FFFFF700).w,d1
00012402 0441 0080                  		subi.w	#$80,d1
00012406 0241 FF80                  		andi.w	#$FF80,d1
0001240A 9041                       		sub.w	d1,d0
0001240C 0C40 0280                  		cmpi.w	#$280,d0
00012410 6300 C538                  		bls.w	DisplaySprite
00012414 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012418 6700 C580                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
0001241C 3440                       		movea.w	d0,a2	; load address into a2
0001241E 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
00012422 6000 C576                  		bra.w	DeleteObject
00012426                            ; ===========================================================================
00012426 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00012428 0000                       		dc.w Obj59_Platform-Obj59_Index
0001242A 0000                       		dc.w Obj59_Action-Obj59_Index
0001242C 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
0001242E                            
0001242E 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00012430                            
00012430 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00012432 2001                       		dc.b $20, 1
00012434 3401                       		dc.b $34, 1
00012436 1003                       		dc.b $10, 3
00012438 2003                       		dc.b $20, 3
0001243A 3403                       		dc.b $34, 3
0001243C 1401                       		dc.b $14, 1
0001243E 2401                       		dc.b $24, 1
00012440 2C01                       		dc.b $2C, 1
00012442 1403                       		dc.b $14, 3
00012444 2403                       		dc.b $24, 3
00012446 2C03                       		dc.b $2C, 3
00012448 2005                       		dc.b $20, 5
0001244A 2007                       		dc.b $20, 7
0001244C 3009                       		dc.b $30, 9
0001244E                            ; ===========================================================================
0001244E                            
0001244E                            Obj59_Main:				; XREF: Obj59_Index
0001244E 5428 0024                  		addq.b	#2,$24(a0)
00012452 7000                       		moveq	#0,d0
00012454 1028 0028                  		move.b	$28(a0),d0
00012458 6A00                       		bpl.s	Obj59_Main2
0001245A 5828 0024                  		addq.b	#4,$24(a0)
0001245E 0240 007F                  		andi.w	#$7F,d0
00012462 C0FC 0006                  		mulu.w	#6,d0
00012466 3140 003C                  		move.w	d0,$3C(a0)
0001246A 3140 003E                  		move.w	d0,$3E(a0)
0001246E 588F                       		addq.l	#4,sp
00012470 4E75                       		rts	
00012472                            ; ===========================================================================
00012472                            
00012472                            Obj59_Main2:
00012472 E648                       		lsr.w	#3,d0
00012474 0240 001E                  		andi.w	#$1E,d0
00012478 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
0001247C 115A 0019                  		move.b	(a2)+,$19(a0)
00012480 115A 001A                  		move.b	(a2)+,$1A(a0)
00012484 7000                       		moveq	#0,d0
00012486 1028 0028                  		move.b	$28(a0),d0
0001248A D040                       		add.w	d0,d0
0001248C 0240 001E                  		andi.w	#$1E,d0
00012490 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00012494 101A                       		move.b	(a2)+,d0
00012496 E548                       		lsl.w	#2,d0
00012498 3140 003C                  		move.w	d0,$3C(a0)
0001249C 115A 0028                  		move.b	(a2)+,$28(a0)
000124A0 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000124A8 317C 4000 0002             		move.w	#$4000,2(a0)
000124AE 117C 0004 0001             		move.b	#4,1(a0)
000124B4 117C 0004 0018             		move.b	#4,$18(a0)
000124BA 3168 0008 0032             		move.w	8(a0),$32(a0)
000124C0 3168 000C 0030             		move.w	$C(a0),$30(a0)
000124C6                            
000124C6                            Obj59_Platform:				; XREF: Obj59_Index
000124C6 7200                       		moveq	#0,d1
000124C8 1228 0019                  		move.b	$19(a0),d1
000124CC 4EB9 0000 854A             		jsr	(PlatformObject).l
000124D2 6000 0000                  		bra.w	Obj59_Types
000124D6                            ; ===========================================================================
000124D6                            
000124D6                            Obj59_Action:				; XREF: Obj59_Index
000124D6 7200                       		moveq	#0,d1
000124D8 1228 0019                  		move.b	$19(a0),d1
000124DC 4EB9 0000 86BE             		jsr	(ExitPlatform).l
000124E2 3F28 0008                  		move.w	8(a0),-(sp)
000124E6 6100 0000                  		bsr.w	Obj59_Types
000124EA 341F                       		move.w	(sp)+,d2
000124EC 4A10                       		tst.b	0(a0)
000124EE 6700                       		beq.s	locret_10BD4
000124F0 4EF9 0000 8C34             		jmp	(MvSonicOnPtfm2).l
000124F6                            ; ===========================================================================
000124F6                            
000124F6                            locret_10BD4:
000124F6 4E75                       		rts	
000124F8                            ; ===========================================================================
000124F8                            
000124F8                            Obj59_Types:
000124F8 7000                       		moveq	#0,d0
000124FA 1028 0028                  		move.b	$28(a0),d0
000124FE 0240 000F                  		andi.w	#$F,d0
00012502 D040                       		add.w	d0,d0
00012504 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00012508 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
0001250C                            ; ===========================================================================
0001250C 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00012510 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00012514 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00012518 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001251C 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00012520                            ; ===========================================================================
00012520                            
00012520                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00012520 4E75                       		rts	
00012522                            ; ===========================================================================
00012522                            
00012522                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00012522 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00012528 6600                       		bne.s	locret_10C0C
0001252A 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001252E                            
0001252E                            locret_10C0C:
0001252E 4E75                       		rts	
00012530                            ; ===========================================================================
00012530                            
00012530                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00012530 6100 0000                  		bsr.w	Obj59_Move
00012534 3028 0034                  		move.w	$34(a0),d0
00012538 4440                       		neg.w	d0
0001253A D068 0030                  		add.w	$30(a0),d0
0001253E 3140 000C                  		move.w	d0,$C(a0)
00012542 4E75                       		rts	
00012544                            ; ===========================================================================
00012544                            
00012544                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00012544 6100 0000                  		bsr.w	Obj59_Move
00012548 3028 0034                  		move.w	$34(a0),d0
0001254C D068 0030                  		add.w	$30(a0),d0
00012550 3140 000C                  		move.w	d0,$C(a0)
00012554 4E75                       		rts	
00012556                            ; ===========================================================================
00012556                            
00012556                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00012556 6100 0000                  		bsr.w	Obj59_Move
0001255A 3028 0034                  		move.w	$34(a0),d0
0001255E E240                       		asr.w	#1,d0
00012560 4440                       		neg.w	d0
00012562 D068 0030                  		add.w	$30(a0),d0
00012566 3140 000C                  		move.w	d0,$C(a0)
0001256A 3028 0034                  		move.w	$34(a0),d0
0001256E D068 0032                  		add.w	$32(a0),d0
00012572 3140 0008                  		move.w	d0,8(a0)
00012576 4E75                       		rts	
00012578                            ; ===========================================================================
00012578                            
00012578                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00012578 6100 0000                  		bsr.w	Obj59_Move
0001257C 3028 0034                  		move.w	$34(a0),d0
00012580 E240                       		asr.w	#1,d0
00012582 D068 0030                  		add.w	$30(a0),d0
00012586 3140 000C                  		move.w	d0,$C(a0)
0001258A 3028 0034                  		move.w	$34(a0),d0
0001258E 4440                       		neg.w	d0
00012590 D068 0032                  		add.w	$32(a0),d0
00012594 3140 0008                  		move.w	d0,8(a0)
00012598 4E75                       		rts	
0001259A                            ; ===========================================================================
0001259A                            
0001259A                            Obj59_Type09:				; XREF: Obj59_TypeIndex
0001259A 6100 0000                  		bsr.w	Obj59_Move
0001259E 3028 0034                  		move.w	$34(a0),d0
000125A2 4440                       		neg.w	d0
000125A4 D068 0030                  		add.w	$30(a0),d0
000125A8 3140 000C                  		move.w	d0,$C(a0)
000125AC 4A28 0028                  		tst.b	$28(a0)
000125B0 6700 0000                  		beq.w	loc_10C94
000125B4 4E75                       		rts	
000125B6                            ; ===========================================================================
000125B6                            
000125B6                            loc_10C94:
000125B6 0828 0003 0022             		btst	#3,$22(a0)
000125BC 6700                       		beq.s	Obj59_Delete
000125BE 08E9 0001 0022             		bset	#1,$22(a1)
000125C4 08A9 0003 0022             		bclr	#3,$22(a1)
000125CA 137C 0002 0024             		move.b	#2,$24(a1)
000125D0                            
000125D0                            Obj59_Delete:
000125D0 6000 C3C8                  		bra.w	DeleteObject
000125D4                            
000125D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000125D4                            
000125D4                            
000125D4                            Obj59_Move:				; XREF: Obj59_Type02; et al
000125D4 3028 0038                  		move.w	$38(a0),d0
000125D8 4A28 003A                  		tst.b	$3A(a0)
000125DC 6600                       		bne.s	loc_10CC8
000125DE 0C40 0800                  		cmpi.w	#$800,d0
000125E2 6400                       		bcc.s	loc_10CD0
000125E4 0640 0010                  		addi.w	#$10,d0
000125E8 6000                       		bra.s	loc_10CD0
000125EA                            ; ===========================================================================
000125EA                            
000125EA                            loc_10CC8:
000125EA 4A40                       		tst.w	d0
000125EC 6700                       		beq.s	loc_10CD0
000125EE 0440 0010                  		subi.w	#$10,d0
000125F2                            
000125F2                            loc_10CD0:
000125F2 3140 0038                  		move.w	d0,$38(a0)
000125F6 48C0                       		ext.l	d0
000125F8 E180                       		asl.l	#8,d0
000125FA D0A8 0034                  		add.l	$34(a0),d0
000125FE 2140 0034                  		move.l	d0,$34(a0)
00012602 4840                       		swap	d0
00012604 3428 003C                  		move.w	$3C(a0),d2
00012608 B042                       		cmp.w	d2,d0
0001260A 6300                       		bls.s	loc_10CF0
0001260C 117C 0001 003A             		move.b	#1,$3A(a0)
00012612                            
00012612                            loc_10CF0:
00012612 D442                       		add.w	d2,d2
00012614 B042                       		cmp.w	d2,d0
00012616 6600                       		bne.s	locret_10CFA
00012618 4228 0028                  		clr.b	$28(a0)
0001261C                            
0001261C                            locret_10CFA:
0001261C 4E75                       		rts	
0001261E                            ; End of function Obj59_Move
0001261E                            
0001261E                            ; ===========================================================================
0001261E                            
0001261E                            Obj59_MakeMulti:			; XREF: Obj59_Index
0001261E 5368 003C                  		subq.w	#1,$3C(a0)
00012622 6600                       		bne.s	Obj59_ChkDel
00012624 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
0001262A 6100 CA74                  		bsr.w	SingleObjLoad
0001262E 6600                       		bne.s	Obj59_ChkDel
00012630 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00012634 3368 0008 0008             		move.w	8(a0),8(a1)
0001263A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012640 137C 000E 0028             		move.b	#$E,$28(a1)
00012646                            
00012646                            Obj59_ChkDel:
00012646 588F                       		addq.l	#4,sp
00012648 3028 0008                  		move.w	8(a0),d0
0001264C 0240 FF80                  		andi.w	#$FF80,d0
00012650 3238 F700                  		move.w	($FFFFF700).w,d1
00012654 0441 0080                  		subi.w	#$80,d1
00012658 0241 FF80                  		andi.w	#$FF80,d1
0001265C 9041                       		sub.w	d1,d0
0001265E 0C40 0280                  		cmpi.w	#$280,d0
00012662 6200 C336                  		bhi.w	DeleteObject
00012666 4E75                       		rts	
00012668                            ; ===========================================================================
00012668                            ; ---------------------------------------------------------------------------
00012668                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00012668                            ; ---------------------------------------------------------------------------
00012668                            Map_obj59:
00012668                            	include "_maps\obj59.asm"
00012668                            ; ---------------------------------------------------------------------------
00012668                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00012668                            ; ---------------------------------------------------------------------------
00012668 0000                       		dc.w byte_10D4A-Map_obj59
0001266A 03                         byte_10D4A:	dc.b 3
0001266B F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00012670 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00012675 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001267A                            		even
0001267A                            		even
0001267A                            
0001267A                            ; ===========================================================================
0001267A                            ; ---------------------------------------------------------------------------
0001267A                            ; Object 5A - platforms	moving in circles (SLZ)
0001267A                            ; ---------------------------------------------------------------------------
0001267A                            
0001267A                            Obj5A:					; XREF: Obj_Index
0001267A 7000                       		moveq	#0,d0
0001267C 1028 0024                  		move.b	$24(a0),d0
00012680 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00012684 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00012688 3028 0032                  		move.w	$32(a0),d0
0001268C 0240 FF80                  		andi.w	#$FF80,d0
00012690 3238 F700                  		move.w	($FFFFF700).w,d1
00012694 0441 0080                  		subi.w	#$80,d1
00012698 0241 FF80                  		andi.w	#$FF80,d1
0001269C 9041                       		sub.w	d1,d0
0001269E 0C40 0280                  		cmpi.w	#$280,d0
000126A2 6300 C2A6                  		bls.w	DisplaySprite
000126A6 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000126AA 6700 C2EE                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
000126AE 3440                       		movea.w	d0,a2	; load address into a2
000126B0 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
000126B4 6000 C2E4                  		bra.w	DeleteObject
000126B8                            ; ===========================================================================
000126B8 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000126BA 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000126BC 0000                       		dc.w Obj5A_Action-Obj5A_Index
000126BE                            ; ===========================================================================
000126BE                            
000126BE                            Obj5A_Main:				; XREF: Obj5A_Index
000126BE 5428 0024                  		addq.b	#2,$24(a0)
000126C2 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000126CA 317C 4000 0002             		move.w	#$4000,2(a0)
000126D0 117C 0004 0001             		move.b	#4,1(a0)
000126D6 117C 0004 0018             		move.b	#4,$18(a0)
000126DC 117C 0018 0019             		move.b	#$18,$19(a0)
000126E2 3168 0008 0032             		move.w	8(a0),$32(a0)
000126E8 3168 000C 0030             		move.w	$C(a0),$30(a0)
000126EE                            
000126EE                            Obj5A_Platform:				; XREF: Obj5A_Index
000126EE 7200                       		moveq	#0,d1
000126F0 1228 0019                  		move.b	$19(a0),d1
000126F4 4EB9 0000 854A             		jsr	(PlatformObject).l
000126FA 6000 0000                  		bra.w	Obj5A_Types
000126FE                            ; ===========================================================================
000126FE                            
000126FE                            Obj5A_Action:				; XREF: Obj5A_Index
000126FE 7200                       		moveq	#0,d1
00012700 1228 0019                  		move.b	$19(a0),d1
00012704 4EB9 0000 86BE             		jsr	(ExitPlatform).l
0001270A 3F28 0008                  		move.w	8(a0),-(sp)
0001270E 6100 0000                  		bsr.w	Obj5A_Types
00012712 341F                       		move.w	(sp)+,d2
00012714 4EF9 0000 8C34             		jmp	(MvSonicOnPtfm2).l
0001271A                            ; ===========================================================================
0001271A                            
0001271A                            Obj5A_Types:
0001271A 7000                       		moveq	#0,d0
0001271C 1028 0028                  		move.b	$28(a0),d0
00012720 0240 000C                  		andi.w	#$C,d0
00012724 E248                       		lsr.w	#1,d0
00012726 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
0001272A 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
0001272E                            ; ===========================================================================
0001272E 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00012730 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00012732                            ; ===========================================================================
00012732                            
00012732                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00012732 1238 FE80                  		move.b	($FFFFFE80).w,d1
00012736 0401 0050                  		subi.b	#$50,d1
0001273A 4881                       		ext.w	d1
0001273C 1438 FE84                  		move.b	($FFFFFE84).w,d2
00012740 0402 0050                  		subi.b	#$50,d2
00012744 4882                       		ext.w	d2
00012746 0828 0000 0028             		btst	#0,$28(a0)
0001274C 6700                       		beq.s	loc_10E24
0001274E 4441                       		neg.w	d1
00012750 4442                       		neg.w	d2
00012752                            
00012752                            loc_10E24:
00012752 0828 0001 0028             		btst	#1,$28(a0)
00012758 6700                       		beq.s	loc_10E30
0001275A 4441                       		neg.w	d1
0001275C C342                       		exg	d1,d2
0001275E                            
0001275E                            loc_10E30:
0001275E D268 0032                  		add.w	$32(a0),d1
00012762 3141 0008                  		move.w	d1,8(a0)
00012766 D468 0030                  		add.w	$30(a0),d2
0001276A 3142 000C                  		move.w	d2,$C(a0)
0001276E 4E75                       		rts	
00012770                            ; ===========================================================================
00012770                            
00012770                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00012770 1238 FE80                  		move.b	($FFFFFE80).w,d1
00012774 0401 0050                  		subi.b	#$50,d1
00012778 4881                       		ext.w	d1
0001277A 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001277E 0402 0050                  		subi.b	#$50,d2
00012782 4882                       		ext.w	d2
00012784 0828 0000 0028             		btst	#0,$28(a0)
0001278A 6700                       		beq.s	loc_10E62
0001278C 4441                       		neg.w	d1
0001278E 4442                       		neg.w	d2
00012790                            
00012790                            loc_10E62:
00012790 0828 0001 0028             		btst	#1,$28(a0)
00012796 6700                       		beq.s	loc_10E6E
00012798 4441                       		neg.w	d1
0001279A C342                       		exg	d1,d2
0001279C                            
0001279C                            loc_10E6E:
0001279C 4441                       		neg.w	d1
0001279E D268 0032                  		add.w	$32(a0),d1
000127A2 3141 0008                  		move.w	d1,8(a0)
000127A6 D468 0030                  		add.w	$30(a0),d2
000127AA 3142 000C                  		move.w	d2,$C(a0)
000127AE 4E75                       		rts	
000127B0                            ; ===========================================================================
000127B0                            ; ---------------------------------------------------------------------------
000127B0                            ; Sprite mappings - platforms that move	in circles (SLZ)
000127B0                            ; ---------------------------------------------------------------------------
000127B0                            Map_obj5A:
000127B0                            	include "_maps\obj5A.asm"
000127B0                            ; ---------------------------------------------------------------------------
000127B0                            ; Sprite mappings - platforms that move	in circles (SLZ)
000127B0                            ; ---------------------------------------------------------------------------
000127B0 0000                       		dc.w byte_10E84-Map_obj5A
000127B2 02                         byte_10E84:	dc.b 2
000127B3 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000127B8 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000127BE 00                         		even
000127BE 00                         		even
000127BE                            
000127BE                            ; ===========================================================================
000127BE                            ; ---------------------------------------------------------------------------
000127BE                            ; Object 5B - blocks that form a staircase (SLZ)
000127BE                            ; ---------------------------------------------------------------------------
000127BE                            
000127BE                            Obj5B:					; XREF: Obj_Index
000127BE 7000                       		moveq	#0,d0
000127C0 1028 0024                  		move.b	$24(a0),d0
000127C4 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000127C8 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000127CC 3028 0030                  		move.w	$30(a0),d0
000127D0 0240 FF80                  		andi.w	#$FF80,d0
000127D4 3238 F700                  		move.w	($FFFFF700).w,d1
000127D8 0441 0080                  		subi.w	#$80,d1
000127DC 0241 FF80                  		andi.w	#$FF80,d1
000127E0 9041                       		sub.w	d1,d0
000127E2 0C40 0280                  		cmpi.w	#$280,d0
000127E6 6300 C162                  		bls.w	DisplaySprite
000127EA 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000127EE 6700 C1AA                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
000127F2 3440                       		movea.w	d0,a2	; load address into a2
000127F4 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
000127F8 6000 C1A0                  		bra.w	DeleteObject
000127FC                            ; ===========================================================================
000127FC 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000127FE 0000                       		dc.w Obj5B_Move-Obj5B_Index
00012800 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00012802                            ; ===========================================================================
00012802                            
00012802                            Obj5B_Main:				; XREF: Obj5B_Index
00012802 5428 0024                  		addq.b	#2,$24(a0)
00012806 7638                       		moveq	#$38,d3
00012808 7801                       		moveq	#1,d4
0001280A 0828 0000 0022             		btst	#0,$22(a0)
00012810 6700                       		beq.s	loc_10EDA
00012812 763B                       		moveq	#$3B,d3
00012814 78FF                       		moveq	#-1,d4
00012816                            
00012816                            loc_10EDA:
00012816 3428 0008                  		move.w	8(a0),d2
0001281A 2248                       		movea.l	a0,a1
0001281C 7203                       		moveq	#3,d1
0001281E 6000                       		bra.s	Obj5B_MakeBlocks
00012820                            ; ===========================================================================
00012820                            
00012820                            Obj5B_Loop:
00012820 6100 C894                  		bsr.w	SingleObjLoad2
00012824 6600 0000                  		bne.w	Obj5B_Move
00012828 137C 0004 0024             		move.b	#4,$24(a1)
0001282E                            
0001282E                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
0001282E 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00012832 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
0001283A 337C 4000 0002             		move.w	#$4000,2(a1)
00012840 137C 0004 0001             		move.b	#4,1(a1)
00012846 137C 0003 0018             		move.b	#3,$18(a1)
0001284C 137C 0010 0019             		move.b	#$10,$19(a1)
00012852 1368 0028 0028             		move.b	$28(a0),$28(a1)
00012858 3342 0008                  		move.w	d2,8(a1)
0001285C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012862 3368 0008 0030             		move.w	8(a0),$30(a1)
00012868 3369 000C 0032             		move.w	$C(a1),$32(a1)
0001286E 0642 0020                  		addi.w	#$20,d2
00012872 1343 0037                  		move.b	d3,$37(a1)
00012876 2348 003C                  		move.l	a0,$3C(a1)
0001287A D604                       		add.b	d4,d3
0001287C 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00012880                            
00012880                            Obj5B_Move:				; XREF: Obj5B_Index
00012880 7000                       		moveq	#0,d0
00012882 1028 0028                  		move.b	$28(a0),d0
00012886 0240 0007                  		andi.w	#7,d0
0001288A D040                       		add.w	d0,d0
0001288C 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00012890 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00012894                            
00012894                            Obj5B_Solid:				; XREF: Obj5B_Index
00012894 2468 003C                  		movea.l	$3C(a0),a2
00012898 7000                       		moveq	#0,d0
0001289A 1028 0037                  		move.b	$37(a0),d0
0001289E 1032 0000                  		move.b	(a2,d0.w),d0
000128A2 D068 0032                  		add.w	$32(a0),d0
000128A6 3140 000C                  		move.w	d0,$C(a0)
000128AA 7200                       		moveq	#0,d1
000128AC 1228 0019                  		move.b	$19(a0),d1
000128B0 0641 000B                  		addi.w	#$B,d1
000128B4 343C 0010                  		move.w	#$10,d2
000128B8 363C 0011                  		move.w	#$11,d3
000128BC 3828 0008                  		move.w	8(a0),d4
000128C0 6100 E9F6                  		bsr.w	SolidObject
000128C4 4A04                       		tst.b	d4
000128C6 6A00                       		bpl.s	loc_10F92
000128C8 1544 0036                  		move.b	d4,$36(a2)
000128CC                            
000128CC                            loc_10F92:
000128CC 0828 0003 0022             		btst	#3,$22(a0)
000128D2 6700                       		beq.s	locret_10FA0
000128D4 157C 0001 0036             		move.b	#1,$36(a2)
000128DA                            
000128DA                            locret_10FA0:
000128DA 4E75                       		rts	
000128DC                            ; ===========================================================================
000128DC 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000128DE 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000128E0 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
000128E2 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000128E4                            ; ===========================================================================
000128E4                            
000128E4                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
000128E4 4A68 0034                  		tst.w	$34(a0)
000128E8 6600                       		bne.s	loc_10FC0
000128EA 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000128F0 6600                       		bne.s	locret_10FBE
000128F2 317C 001E 0034             		move.w	#$1E,$34(a0)
000128F8                            
000128F8                            locret_10FBE:
000128F8 4E75                       		rts	
000128FA                            ; ===========================================================================
000128FA                            
000128FA                            loc_10FC0:
000128FA 5368 0034                  		subq.w	#1,$34(a0)
000128FE 66F8                       		bne.s	locret_10FBE
00012900 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012904 4E75                       		rts	
00012906                            ; ===========================================================================
00012906                            
00012906                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00012906 4A68 0034                  		tst.w	$34(a0)
0001290A 6600                       		bne.s	loc_10FE0
0001290C 4A28 0036                  		tst.b	$36(a0)
00012910 6A00                       		bpl.s	locret_10FDE
00012912 317C 003C 0034             		move.w	#$3C,$34(a0)
00012918                            
00012918                            locret_10FDE:
00012918 4E75                       		rts	
0001291A                            ; ===========================================================================
0001291A                            
0001291A                            loc_10FE0:
0001291A 5368 0034                  		subq.w	#1,$34(a0)
0001291E 6600                       		bne.s	loc_10FEC
00012920 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012924 4E75                       		rts	
00012926                            ; ===========================================================================
00012926                            
00012926                            loc_10FEC:
00012926 43E8 0038                  		lea	$38(a0),a1
0001292A 3028 0034                  		move.w	$34(a0),d0
0001292E E408                       		lsr.b	#2,d0
00012930 0200 0001                  		andi.b	#1,d0
00012934 12C0                       		move.b	d0,(a1)+
00012936 0A00 0001                  		eori.b	#1,d0
0001293A 12C0                       		move.b	d0,(a1)+
0001293C 0A00 0001                  		eori.b	#1,d0
00012940 12C0                       		move.b	d0,(a1)+
00012942 0A00 0001                  		eori.b	#1,d0
00012946 12C0                       		move.b	d0,(a1)+
00012948 4E75                       		rts	
0001294A                            ; ===========================================================================
0001294A                            
0001294A                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
0001294A 43E8 0038                  		lea	$38(a0),a1
0001294E 0C11 0080                  		cmpi.b	#$80,(a1)
00012952 6700                       		beq.s	locret_11038
00012954 5211                       		addq.b	#1,(a1)
00012956 7200                       		moveq	#0,d1
00012958 1219                       		move.b	(a1)+,d1
0001295A 4841                       		swap	d1
0001295C E289                       		lsr.l	#1,d1
0001295E 2401                       		move.l	d1,d2
00012960 E289                       		lsr.l	#1,d1
00012962 2601                       		move.l	d1,d3
00012964 D682                       		add.l	d2,d3
00012966 4841                       		swap	d1
00012968 4842                       		swap	d2
0001296A 4843                       		swap	d3
0001296C 12C3                       		move.b	d3,(a1)+
0001296E 12C2                       		move.b	d2,(a1)+
00012970 12C1                       		move.b	d1,(a1)+
00012972                            
00012972                            locret_11038:
00012972 4E75                       		rts	
00012974 4E75                       		rts	
00012976                            ; ===========================================================================
00012976                            ; ---------------------------------------------------------------------------
00012976                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00012976                            ; ---------------------------------------------------------------------------
00012976                            Map_obj5B:
00012976                            	include "_maps\obj5B.asm"
00012976                            ; ---------------------------------------------------------------------------
00012976                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00012976                            ; ---------------------------------------------------------------------------
00012976 0000                       		dc.w byte_1103E-Map_obj5B
00012978 01                         byte_1103E:	dc.b 1
00012979 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001297E                            		even
0001297E                            		even
0001297E                            
0001297E                            ; ===========================================================================
0001297E                            ; ---------------------------------------------------------------------------
0001297E                            ; Object 5C - metal girders in foreground (SLZ)
0001297E                            ; ---------------------------------------------------------------------------
0001297E                            
0001297E                            Obj5C:					; XREF: Obj_Index
0001297E 7000                       		moveq	#0,d0
00012980 1028 0024                  		move.b	$24(a0),d0
00012984 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00012988 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
0001298C                            ; ===========================================================================
0001298C 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
0001298E 0000                       		dc.w Obj5C_Display-Obj5C_Index
00012990                            ; ===========================================================================
00012990                            
00012990                            Obj5C_Main:				; XREF: Obj5C_Index
00012990 5428 0024                  		addq.b	#2,$24(a0)
00012994 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
0001299C 317C 83CC 0002             		move.w	#$83CC,2(a0)
000129A2 117C 0010 0019             		move.b	#$10,$19(a0)
000129A8                            
000129A8                            Obj5C_Display:				; XREF: Obj5C_Index
000129A8 2238 F700                  		move.l	($FFFFF700).w,d1
000129AC D281                       		add.l	d1,d1
000129AE 4841                       		swap	d1
000129B0 4441                       		neg.w	d1
000129B2 3141 0008                  		move.w	d1,8(a0)
000129B6 2238 F704                  		move.l	($FFFFF704).w,d1
000129BA D281                       		add.l	d1,d1
000129BC 4841                       		swap	d1
000129BE 0241 003F                  		andi.w	#$3F,d1
000129C2 4441                       		neg.w	d1
000129C4 0641 0100                  		addi.w	#$100,d1
000129C8 3141 000A                  		move.w	d1,$A(a0)
000129CC 6000 BF7C                  		bra.w	DisplaySprite
000129D0                            ; ===========================================================================
000129D0                            ; ---------------------------------------------------------------------------
000129D0                            ; Sprite mappings - metal girders in foreground	(SLZ)
000129D0                            ; ---------------------------------------------------------------------------
000129D0                            Map_obj5C:
000129D0                            	include "_maps\obj5C.asm"
000129D0                            ; ---------------------------------------------------------------------------
000129D0                            ; Sprite mappings - metal girders in foreground	(SLZ)
000129D0                            ; ---------------------------------------------------------------------------
000129D0 0000                       		dc.w byte_11098-Map_obj5C
000129D2 09                         byte_11098:	dc.b 9
000129D3 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000129D8 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000129DD C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000129E2 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000129E7 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000129EC 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000129F1 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000129F6 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000129FB 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00012A00                            		even
00012A00                            		even
00012A00                            
00012A00                            ; ===========================================================================
00012A00                            ; ---------------------------------------------------------------------------
00012A00                            ; Object 1B - water surface (LZ)
00012A00                            ; ---------------------------------------------------------------------------
00012A00                            
00012A00                            Obj1B:					; XREF: Obj_Index
00012A00 7000                       		moveq	#0,d0
00012A02 1028 0024                  		move.b	$24(a0),d0
00012A06 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00012A0A 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00012A0E                            ; ===========================================================================
00012A0E 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00012A10 0000                       		dc.w Obj1B_Action-Obj1B_Index
00012A12                            ; ===========================================================================
00012A12                            
00012A12                            Obj1B_Main:				; XREF: Obj1B_Index
00012A12 5428 0024                  		addq.b	#2,$24(a0)
00012A16 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00012A1E 317C C300 0002             		move.w	#$C300,2(a0)
00012A24 117C 0004 0001             		move.b	#4,1(a0)
00012A2A 117C 0080 0019             		move.b	#$80,$19(a0)
00012A30 3168 0008 0030             		move.w	8(a0),$30(a0)
00012A36                            
00012A36                            Obj1B_Action:				; XREF: Obj1B_Index
00012A36 3238 F700                  		move.w	($FFFFF700).w,d1
00012A3A 0241 FFE0                  		andi.w	#$FFE0,d1
00012A3E D268 0030                  		add.w	$30(a0),d1
00012A42 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00012A48 6700                       		beq.s	loc_11114
00012A4A 0641 0020                  		addi.w	#$20,d1
00012A4E                            
00012A4E                            loc_11114:
00012A4E 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00012A52 3238 F646                  		move.w	($FFFFF646).w,d1
00012A56 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00012A5A 4A28 0032                  		tst.b	$32(a0)
00012A5E 6600                       		bne.s	Obj1B_Animate
00012A60 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00012A66 6700                       		beq.s	loc_1114A	; if not, branch
00012A68 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00012A6C 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00012A72 6000                       		bra.s	Obj1B_Display
00012A74                            ; ===========================================================================
00012A74                            
00012A74                            Obj1B_Animate:				; XREF: loc_11114
00012A74 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00012A78 6600                       		bne.s	Obj1B_Display	; if yes, branch
00012A7A 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00012A80 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00012A84                            
00012A84                            loc_1114A:				; XREF: loc_11114
00012A84 5328 001E                  		subq.b	#1,$1E(a0)
00012A88 6A00                       		bpl.s	Obj1B_Display
00012A8A 117C 0007 001E             		move.b	#7,$1E(a0)
00012A90 5228 001A                  		addq.b	#1,$1A(a0)
00012A94 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00012A9A 6500                       		bcs.s	Obj1B_Display
00012A9C 117C 0000 001A             		move.b	#0,$1A(a0)
00012AA2                            
00012AA2                            Obj1B_Display:
00012AA2 6000 BEA6                  		bra.w	DisplaySprite
00012AA6                            ; ===========================================================================
00012AA6                            ; ---------------------------------------------------------------------------
00012AA6                            ; Sprite mappings - water surface (LZ)
00012AA6                            ; ---------------------------------------------------------------------------
00012AA6                            Map_obj1B:
00012AA6                            	include "_maps\obj1B.asm"
00012AA6                            ; ---------------------------------------------------------------------------
00012AA6                            ; Sprite mappings - water surface (LZ)
00012AA6                            ; ---------------------------------------------------------------------------
00012AA6 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00012AAA 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00012AAE 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00012AB2 03                         byte_11178:	dc.b 3
00012AB3 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00012AB8 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012ABD FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012AC2 03                         byte_11188:	dc.b 3
00012AC3 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012AC8 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012ACD FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012AD2 03                         byte_11198:	dc.b 3
00012AD3 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012AD8 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012ADD FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012AE2 06                         byte_111A8:	dc.b 6
00012AE3 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00012AE8 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00012AED FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012AF2 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00012AF7 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012AFC FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00012B01 06                         byte_111C7:	dc.b 6
00012B02 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012B07 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00012B0C FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012B11 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00012B16 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012B1B FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00012B20 06                         byte_111E6:	dc.b 6
00012B21 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012B26 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00012B2B FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012B30 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00012B35 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012B3A FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00012B40 00                         		even
00012B40 00                         		even
00012B40                            
00012B40                            ; ===========================================================================
00012B40                            ; ---------------------------------------------------------------------------
00012B40                            ; Object 0B - pole that	breaks (LZ)
00012B40                            ; ---------------------------------------------------------------------------
00012B40                            
00012B40                            Obj0B:					; XREF: Obj_Index
00012B40 7000                       		moveq	#0,d0
00012B42 1028 0024                  		move.b	$24(a0),d0
00012B46 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00012B4A 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00012B4E                            ; ===========================================================================
00012B4E 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00012B50 0000                       		dc.w Obj0B_Action-Obj0B_Index
00012B52 0000                       		dc.w Obj0B_Display-Obj0B_Index
00012B54                            ; ===========================================================================
00012B54                            
00012B54                            Obj0B_Main:				; XREF: Obj0B_Index
00012B54 5428 0024                  		addq.b	#2,$24(a0)
00012B58 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00012B60 317C 43DE 0002             		move.w	#$43DE,2(a0)
00012B66 117C 0004 0001             		move.b	#4,1(a0)
00012B6C 117C 0008 0019             		move.b	#8,$19(a0)
00012B72 117C 0004 0018             		move.b	#4,$18(a0)
00012B78 117C 00E1 0020             		move.b	#$E1,$20(a0)
00012B7E 7000                       		moveq	#0,d0
00012B80 1028 0028                  		move.b	$28(a0),d0	; get object type
00012B84 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012B88 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00012B8C                            
00012B8C                            Obj0B_Action:				; XREF: Obj0B_Index
00012B8C 4A28 0032                  		tst.b	$32(a0)
00012B90 6700                       		beq.s	Obj0B_Grab
00012B92 4A68 0030                  		tst.w	$30(a0)
00012B96 6700                       		beq.s	Obj0B_MoveUp
00012B98 5368 0030                  		subq.w	#1,$30(a0)
00012B9C 6600                       		bne.s	Obj0B_MoveUp
00012B9E 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00012BA4 6000                       		bra.s	Obj0B_Release
00012BA6                            ; ===========================================================================
00012BA6                            
00012BA6                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00012BA6 43F8 D000                  		lea	($FFFFD000).w,a1
00012BAA 3028 000C                  		move.w	$C(a0),d0
00012BAE 0440 0018                  		subi.w	#$18,d0
00012BB2 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00012BB8 6700                       		beq.s	Obj0B_MoveDown
00012BBA 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00012BBE B069 000C                  		cmp.w	$C(a1),d0
00012BC2 6500                       		bcs.s	Obj0B_MoveDown
00012BC4 3340 000C                  		move.w	d0,$C(a1)
00012BC8                            
00012BC8                            Obj0B_MoveDown:
00012BC8 0640 0024                  		addi.w	#$24,d0
00012BCC 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00012BD2 6700                       		beq.s	Obj0B_LetGo
00012BD4 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00012BD8 B069 000C                  		cmp.w	$C(a1),d0
00012BDC 6400                       		bcc.s	Obj0B_LetGo
00012BDE 3340 000C                  		move.w	d0,$C(a1)
00012BE2                            
00012BE2                            Obj0B_LetGo:
00012BE2 1038 F603                  		move.b	($FFFFF603).w,d0
00012BE6 0240 0070                  		andi.w	#$70,d0
00012BEA 6700                       		beq.s	Obj0B_Display
00012BEC                            
00012BEC                            Obj0B_Release:				; XREF: Obj0B_Action
00012BEC 4228 0020                  		clr.b	$20(a0)
00012BF0 5428 0024                  		addq.b	#2,$24(a0)
00012BF4 4238 F7C8                  		clr.b	($FFFFF7C8).w
00012BF8 4238 F7C9                  		clr.b	($FFFFF7C9).w
00012BFC 4228 0032                  		clr.b	$32(a0)
00012C00 6000                       		bra.s	Obj0B_Display
00012C02                            ; ===========================================================================
00012C02                            
00012C02                            Obj0B_Grab:				; XREF: Obj0B_Action
00012C02 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00012C06 6700                       		beq.s	Obj0B_Display	; if not, branch
00012C08 43F8 D000                  		lea	($FFFFD000).w,a1
00012C0C 3028 0008                  		move.w	8(a0),d0
00012C10 0640 0014                  		addi.w	#$14,d0
00012C14 B069 0008                  		cmp.w	8(a1),d0
00012C18 6400                       		bcc.s	Obj0B_Display
00012C1A 4228 0021                  		clr.b	$21(a0)
00012C1E 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00012C24 6400                       		bcc.s	Obj0B_Display
00012C26 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00012C2A 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00012C2E 3028 0008                  		move.w	8(a0),d0
00012C32 0640 0014                  		addi.w	#$14,d0
00012C36 3340 0008                  		move.w	d0,8(a1)
00012C3A 08A9 0000 0022             		bclr	#0,$22(a1)
00012C40 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00012C46 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00012C4C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012C52 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00012C58                            
00012C58                            Obj0B_Display:				; XREF: Obj0B_Index
00012C58 6000 E33A                  		bra.w	MarkObjGone
00012C5C                            ; ===========================================================================
00012C5C                            ; ---------------------------------------------------------------------------
00012C5C                            ; Sprite mappings - pole that breaks (LZ)
00012C5C                            ; ---------------------------------------------------------------------------
00012C5C                            Map_obj0B:
00012C5C                            	include "_maps\obj0B.asm"
00012C5C                            ; ---------------------------------------------------------------------------
00012C5C                            ; Sprite mappings - pole that breaks (LZ)
00012C5C                            ; ---------------------------------------------------------------------------
00012C5C 0000                       		dc.w byte_11326-Map_obj0B
00012C5E 0000                       		dc.w byte_11331-Map_obj0B
00012C60 02                         byte_11326:	dc.b 2			; normal pole
00012C61 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00012C66 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00012C6B 04                         byte_11331:	dc.b 4			; broken pole
00012C6C E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00012C71 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00012C76 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00012C7B 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00012C80                            		even
00012C80                            		even
00012C80                            
00012C80                            ; ===========================================================================
00012C80                            ; ---------------------------------------------------------------------------
00012C80                            ; Object 0C - flapping door (LZ)
00012C80                            ; ---------------------------------------------------------------------------
00012C80                            
00012C80                            Obj0C:					; XREF: Obj_Index
00012C80 7000                       		moveq	#0,d0
00012C82 1028 0024                  		move.b	$24(a0),d0
00012C86 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00012C8A 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00012C8E                            ; ===========================================================================
00012C8E 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00012C90 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00012C92                            ; ===========================================================================
00012C92                            
00012C92                            Obj0C_Main:				; XREF: Obj0C_Index
00012C92 5428 0024                  		addq.b	#2,$24(a0)
00012C96 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00012C9E 317C 4328 0002             		move.w	#$4328,2(a0)
00012CA4 0028 0004 0001             		ori.b	#4,1(a0)
00012CAA 117C 0028 0019             		move.b	#$28,$19(a0)
00012CB0 7000                       		moveq	#0,d0
00012CB2 1028 0028                  		move.b	$28(a0),d0	; get object type
00012CB6 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012CBA 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00012CBE                            
00012CBE                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00012CBE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012CC2 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00012CC4 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00012CCA 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00012CD0 4A28 0001                  		tst.b	1(a0)
00012CD4 6A00                       		bpl.s	Obj0C_Solid
00012CD6 303C 00BB                  		move.w	#$BB,d0
00012CDA 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play door sound
00012CE0                            
00012CE0                            Obj0C_Solid:
00012CE0 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00012CE6 6100 8CC2                  		bsr.w	AnimateSprite
00012CEA 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00012CEE 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00012CF2 6600                       		bne.s	Obj0C_Display	; if yes, branch
00012CF4 3038 D008                  		move.w	($FFFFD008).w,d0
00012CF8 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00012CFC 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00012CFE 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012D04 323C 0013                  		move.w	#$13,d1
00012D08 343C 0020                  		move.w	#$20,d2
00012D0C 3602                       		move.w	d2,d3
00012D0E 5243                       		addq.w	#1,d3
00012D10 3828 0008                  		move.w	8(a0),d4
00012D14 6100 E5A2                  		bsr.w	SolidObject	; make the door	solid
00012D18                            
00012D18                            Obj0C_Display:
00012D18 6000 E27A                  		bra.w	MarkObjGone
00012D1C                            ; ===========================================================================
00012D1C                            Ani_obj0C:
00012D1C                            	include "_anim\obj0C.asm"
00012D1C                            ; ---------------------------------------------------------------------------
00012D1C                            ; Animation script - flapping door (LZ)
00012D1C                            ; ---------------------------------------------------------------------------
00012D1C 0000                       		dc.w byte_113E6-Ani_obj0C
00012D1E 0000                       		dc.w byte_113EC-Ani_obj0C
00012D20 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00012D26 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00012D2C                            		even
00012D2C                            		even
00012D2C                            
00012D2C                            ; ---------------------------------------------------------------------------
00012D2C                            ; Sprite mappings - flapping door (LZ)
00012D2C                            ; ---------------------------------------------------------------------------
00012D2C                            Map_obj0C:
00012D2C                            	include "_maps\obj0C.asm"
00012D2C                            ; ---------------------------------------------------------------------------
00012D2C                            ; Sprite mappings - flapping door (LZ)
00012D2C                            ; ---------------------------------------------------------------------------
00012D2C 0000                       		dc.w byte_113F8-Map_obj0C
00012D2E 0000                       		dc.w byte_11403-Map_obj0C
00012D30 0000                       		dc.w byte_1140E-Map_obj0C
00012D32 02                         byte_113F8:	dc.b 2
00012D33 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00012D38 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012D3D 02                         byte_11403:	dc.b 2
00012D3E DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00012D43 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00012D48 02                         byte_1140E:	dc.b 2
00012D49 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00012D4E 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00012D54 00                         		even
00012D54 00                         		even
00012D54                            
00012D54                            ; ===========================================================================
00012D54                            ; ---------------------------------------------------------------------------
00012D54                            ; Object 71 - invisible	solid blocks
00012D54                            ; ---------------------------------------------------------------------------
00012D54                            
00012D54                            Obj71:					; XREF: Obj_Index
00012D54 7000                       		moveq	#0,d0
00012D56 1028 0024                  		move.b	$24(a0),d0
00012D5A 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00012D5E 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00012D62                            ; ===========================================================================
00012D62 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00012D64 0000                       		dc.w Obj71_Solid-Obj71_Index
00012D66                            ; ===========================================================================
00012D66                            
00012D66                            Obj71_Main:				; XREF: Obj71_Index
00012D66 5428 0024                  		addq.b	#2,$24(a0)
00012D6A 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00012D72 317C 8680 0002             		move.w	#$8680,2(a0)
00012D78 0028 0004 0001             		ori.b	#4,1(a0)
00012D7E 1028 0028                  		move.b	$28(a0),d0	; get object type
00012D82 1200                       		move.b	d0,d1
00012D84 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00012D88 0640 0010                  		addi.w	#$10,d0
00012D8C E248                       		lsr.w	#1,d0
00012D8E 1140 0019                  		move.b	d0,$19(a0)	; set object width
00012D92 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00012D96 5241                       		addq.w	#1,d1
00012D98 E749                       		lsl.w	#3,d1
00012D9A 1141 0016                  		move.b	d1,$16(a0)	; set object height
00012D9E                            
00012D9E                            Obj71_Solid:				; XREF: Obj71_Index
00012D9E 6100 BF70                  		bsr.w	ChkObjOnScreen
00012DA2 6600                       		bne.s	Obj71_ChkDel
00012DA4 7200                       		moveq	#0,d1
00012DA6 1228 0019                  		move.b	$19(a0),d1
00012DAA 0641 000B                  		addi.w	#$B,d1
00012DAE 7400                       		moveq	#0,d2
00012DB0 1428 0016                  		move.b	$16(a0),d2
00012DB4 3602                       		move.w	d2,d3
00012DB6 5243                       		addq.w	#1,d3
00012DB8 3828 0008                  		move.w	8(a0),d4
00012DBC 6100 E542                  		bsr.w	SolidObject71
00012DC0                            
00012DC0                            Obj71_ChkDel:
00012DC0 3028 0008                  		move.w	8(a0),d0
00012DC4 0240 FF80                  		andi.w	#$FF80,d0
00012DC8 3238 F700                  		move.w	($FFFFF700).w,d1
00012DCC 0441 0080                  		subi.w	#$80,d1
00012DD0 0241 FF80                  		andi.w	#$FF80,d1
00012DD4 9041                       		sub.w	d1,d0
00012DD6 0C40 0280                  		cmpi.w	#$280,d0
00012DDA 6300                       		bls.s	Obj71_NoDel
00012DDC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012DE0 6700                       		beq.s	Obj71_Delete		; if it's zero, don't remember object
00012DE2 3440                       		movea.w	d0,a2	; load address into a2
00012DE4 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00012DE8 6000                       		bra.s	Obj71_Delete	; and delete object
00012DEA                            
00012DEA                            Obj71_NoDel:
00012DEA 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00012DEE 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00012DF0 4EFA BB58                  		jmp	DisplaySprite	; if yes, display the object
00012DF4                            ; ===========================================================================
00012DF4                            
00012DF4                            Obj71_NoDisplay:
00012DF4 4E75                       		rts	
00012DF6                            ; ===========================================================================
00012DF6                            
00012DF6                            Obj71_Delete:
00012DF6 4EFA BBA2                  		jmp	DeleteObject
00012DFA                            ; ===========================================================================
00012DFA                            ; ---------------------------------------------------------------------------
00012DFA                            ; Sprite mappings - invisible solid blocks
00012DFA                            ; ---------------------------------------------------------------------------
00012DFA                            Map_obj71:
00012DFA                            	include "_maps\obj71.asm"
00012DFA                            ; ---------------------------------------------------------------------------
00012DFA                            ; Sprite mappings - invisible solid blocks
00012DFA                            ; ---------------------------------------------------------------------------
00012DFA 0000                       		dc.w byte_114BC-Map_obj71
00012DFC 0000                       		dc.w byte_114D1-Map_obj71
00012DFE 0000                       		dc.w byte_114E6-Map_obj71
00012E00 04                         byte_114BC:	dc.b 4
00012E01 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00012E06 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00012E0B 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00012E10 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00012E15 04                         byte_114D1:	dc.b 4
00012E16 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00012E1B E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00012E20 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00012E25 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00012E2A 04                         byte_114E6:	dc.b 4
00012E2B E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00012E30 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00012E35 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00012E3A 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00012E40 00                         		even
00012E40 00                         		even
00012E40                            
00012E40                            ; ===========================================================================
00012E40                            ; ---------------------------------------------------------------------------
00012E40                            ; Object 5D - fans (SLZ)
00012E40                            ; ---------------------------------------------------------------------------
00012E40                            
00012E40                            Obj5D:					; XREF: Obj_Index
00012E40 7000                       		moveq	#0,d0
00012E42 1028 0024                  		move.b	$24(a0),d0
00012E46 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00012E4A 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00012E4E                            ; ===========================================================================
00012E4E 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00012E50 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00012E52                            ; ===========================================================================
00012E52                            
00012E52                            Obj5D_Main:				; XREF: Obj5D_Index
00012E52 5428 0024                  		addq.b	#2,$24(a0)
00012E56 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00012E5E 317C 43A0 0002             		move.w	#$43A0,2(a0)
00012E64 0028 0004 0001             		ori.b	#4,1(a0)
00012E6A 117C 0010 0019             		move.b	#$10,$19(a0)
00012E70 117C 0004 0018             		move.b	#4,$18(a0)
00012E76                            
00012E76                            Obj5D_Delay:				; XREF: Obj5D_Index
00012E76 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00012E7C 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00012E7E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012E82 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00012E84 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00012E8A 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00012E90 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00012E92 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00012E98                            
00012E98                            Obj5D_Blow:
00012E98 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00012E9C 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00012EA0 43F8 D000                  		lea	($FFFFD000).w,a1
00012EA4 3029 0008                  		move.w	8(a1),d0
00012EA8 9068 0008                  		sub.w	8(a0),d0
00012EAC 0828 0000 0022             		btst	#0,$22(a0)
00012EB2 6600                       		bne.s	Obj5D_ChkSonic
00012EB4 4440                       		neg.w	d0
00012EB6                            
00012EB6                            Obj5D_ChkSonic:
00012EB6 0640 0050                  		addi.w	#$50,d0
00012EBA 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00012EBE 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00012EC0 3229 000C                  		move.w	$C(a1),d1
00012EC4 0641 0060                  		addi.w	#$60,d1
00012EC8 9268 000C                  		sub.w	$C(a0),d1
00012ECC 6500                       		bcs.s	Obj5D_Animate
00012ECE 0C41 0070                  		cmpi.w	#$70,d1
00012ED2 6400                       		bcc.s	Obj5D_Animate
00012ED4 0440 0050                  		subi.w	#$50,d0
00012ED8 6400                       		bcc.s	loc_1159A
00012EDA 4640                       		not.w	d0
00012EDC D040                       		add.w	d0,d0
00012EDE                            
00012EDE                            loc_1159A:
00012EDE 0640 0060                  		addi.w	#$60,d0
00012EE2 0828 0000 0022             		btst	#0,$22(a0)
00012EE8 6600                       		bne.s	loc_115A8
00012EEA 4440                       		neg.w	d0
00012EEC                            
00012EEC                            loc_115A8:
00012EEC 4400                       		neg.b	d0
00012EEE E840                       		asr.w	#4,d0
00012EF0 0828 0000 0028             		btst	#0,$28(a0)
00012EF6 6700                       		beq.s	Obj5D_MoveSonic
00012EF8 4440                       		neg.w	d0
00012EFA                            
00012EFA                            Obj5D_MoveSonic:
00012EFA D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00012EFE                            
00012EFE                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00012EFE 5328 001E                  		subq.b	#1,$1E(a0)
00012F02 6A00                       		bpl.s	Obj5D_ChkDel
00012F04 117C 0000 001E             		move.b	#0,$1E(a0)
00012F0A 5228 001B                  		addq.b	#1,$1B(a0)
00012F0E 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00012F14 6500                       		bcs.s	loc_115D8
00012F16 117C 0000 001B             		move.b	#0,$1B(a0)
00012F1C                            
00012F1C                            loc_115D8:
00012F1C 7000                       		moveq	#0,d0
00012F1E 0828 0000 0028             		btst	#0,$28(a0)
00012F24 6700                       		beq.s	loc_115E4
00012F26 7002                       		moveq	#2,d0
00012F28                            
00012F28                            loc_115E4:
00012F28 D028 001B                  		add.b	$1B(a0),d0
00012F2C 1140 001A                  		move.b	d0,$1A(a0)
00012F30                            
00012F30                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00012F30 6100 BA18                  		bsr.w	DisplaySprite
00012F34 3028 0008                  		move.w	8(a0),d0
00012F38 0240 FF80                  		andi.w	#$FF80,d0
00012F3C 3238 F700                  		move.w	($FFFFF700).w,d1
00012F40 0441 0080                  		subi.w	#$80,d1
00012F44 0241 FF80                  		andi.w	#$FF80,d1
00012F48 9041                       		sub.w	d1,d0
00012F4A 0C40 0280                  		cmpi.w	#$280,d0
00012F4E 6300                       		bls.s	Obj5D_NoDel
00012F50 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012F54 6700 BA44                  		beq.w	DeleteObject		; if it's zero, don't remember object
00012F58 3440                       		movea.w	d0,a2	; load address into a2
00012F5A 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00012F5E 6000 BA3A                  		bra.w	DeleteObject	; and delete object
00012F62                            
00012F62                            Obj5D_NoDel:
00012F62 4E75                       		rts	
00012F64                            ; ===========================================================================
00012F64                            ; ---------------------------------------------------------------------------
00012F64                            ; Sprite mappings - fans (SLZ)
00012F64                            ; ---------------------------------------------------------------------------
00012F64                            Map_obj5D:
00012F64                            	include "_maps\obj5D.asm"
00012F64                            ; ---------------------------------------------------------------------------
00012F64                            ; Sprite mappings - fans (SLZ)
00012F64                            ; ---------------------------------------------------------------------------
00012F64 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00012F68 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00012F6C 0000                       		dc.w byte_1161A-Map_obj5D
00012F6E 02                         byte_1161A:	dc.b 2
00012F6F F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00012F74 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00012F79 02                         byte_11625:	dc.b 2
00012F7A F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00012F7F 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00012F84 02                         byte_11630:	dc.b 2
00012F85 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00012F8A 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00012F90 00                         		even
00012F90 00                         		even
00012F90                            
00012F90                            ; ===========================================================================
00012F90                            ; ---------------------------------------------------------------------------
00012F90                            ; Object 5E - seesaws (SLZ)
00012F90                            ; ---------------------------------------------------------------------------
00012F90                            
00012F90                            Obj5E:					; XREF: Obj_Index
00012F90 7000                       		moveq	#0,d0
00012F92 1028 0024                  		move.b	$24(a0),d0
00012F96 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00012F9A 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00012F9E 3028 0030                  		move.w	$30(a0),d0
00012FA2 0240 FF80                  		andi.w	#$FF80,d0
00012FA6 3238 F700                  		move.w	($FFFFF700).w,d1
00012FAA 0441 0080                  		subi.w	#$80,d1
00012FAE 0241 FF80                  		andi.w	#$FF80,d1
00012FB2 9041                       		sub.w	d1,d0
00012FB4 6B00 B9E4                  		bmi.w	DeleteObject
00012FB8 0C40 0280                  		cmpi.w	#$280,d0
00012FBC 6300 B98C                  		bls.w	DisplaySprite
00012FC0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012FC4 6700 B9D4                  		beq.w	DeleteObject		; if it's zero, don't remember object
00012FC8 3440                       		movea.w	d0,a2	; load address into a2
00012FCA 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00012FCE 6000 B9CA                  		bra.w	DeleteObject	; and delete object		
00012FD2                            ; ===========================================================================
00012FD2 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00012FD4 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00012FD6 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00012FD8 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00012FDA 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00012FDC 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00012FDE                            ; ===========================================================================
00012FDE                            
00012FDE                            Obj5E_Main:				; XREF: Obj5E_Index
00012FDE 5428 0024                  		addq.b	#2,$24(a0)
00012FE2 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00012FEA 317C 0374 0002             		move.w	#$374,2(a0)
00012FF0 0028 0004 0001             		ori.b	#4,1(a0)
00012FF6 117C 0004 0018             		move.b	#4,$18(a0)
00012FFC 117C 0030 0019             		move.b	#$30,$19(a0)
00013002 3168 0008 0030             		move.w	8(a0),$30(a0)
00013008 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
0001300C 6600                       		bne.s	loc_116D2	; if not, branch
0001300E 6100 C0A6                  		bsr.w	SingleObjLoad2
00013012 6600                       		bne.s	loc_116D2
00013014 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00013018 5C29 0024                  		addq.b	#6,$24(a1)
0001301C 3368 0008 0008             		move.w	8(a0),8(a1)
00013022 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013028 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001302E 2348 003C                  		move.l	a0,$3C(a1)
00013032                            
00013032                            loc_116D2:
00013032 0828 0000 0022             		btst	#0,$22(a0)
00013038 6700                       		beq.s	loc_116E0
0001303A 117C 0002 001A             		move.b	#2,$1A(a0)
00013040                            
00013040                            loc_116E0:
00013040 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00013046                            
00013046                            Obj5E_Slope:				; XREF: Obj5E_Index
00013046 1228 003A                  		move.b	$3A(a0),d1
0001304A 6100 0000                  		bsr.w	loc_11766
0001304E 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00013054 0828 0000 001A             		btst	#0,$1A(a0)
0001305A 6700                       		beq.s	loc_11702
0001305C 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00013062                            
00013062                            loc_11702:
00013062 43F8 D000                  		lea	($FFFFD000).w,a1
00013066 3169 0012 0038             		move.w	$12(a1),$38(a0)
0001306C 323C 0030                  		move.w	#$30,d1
00013070 4EB9 0000 861E             		jsr	(SlopeObject).l
00013076 4E75                       		rts	
00013078                            ; ===========================================================================
00013078                            
00013078                            Obj5E_Slope2:				; XREF: Obj5E_Index
00013078 6100 0000                  		bsr.w	loc_1174A
0001307C 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00013082 0828 0000 001A             		btst	#0,$1A(a0)
00013088 6700                       		beq.s	loc_11730
0001308A 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00013090                            
00013090                            loc_11730:
00013090 323C 0030                  		move.w	#$30,d1
00013094 4EB9 0000 86BE             		jsr	(ExitPlatform).l
0001309A 323C 0030                  		move.w	#$30,d1
0001309E 3428 0008                  		move.w	8(a0),d2
000130A2 4EB9 0000 9694             		jsr	SlopeObject2
000130A8 4E75                       		rts	
000130AA                            ; ===========================================================================
000130AA                            
000130AA                            loc_1174A:				; XREF: Obj5E_Slope2
000130AA 7202                       		moveq	#2,d1
000130AC 43F8 D000                  		lea	($FFFFD000).w,a1
000130B0 3028 0008                  		move.w	8(a0),d0
000130B4 9069 0008                  		sub.w	8(a1),d0
000130B8 6400                       		bcc.s	loc_1175E
000130BA 4440                       		neg.w	d0
000130BC 7200                       		moveq	#0,d1
000130BE                            
000130BE                            loc_1175E:
000130BE 0C40 0008                  		cmpi.w	#8,d0
000130C2 6400                       		bcc.s	loc_11766
000130C4 7201                       		moveq	#1,d1
000130C6                            
000130C6                            loc_11766:
000130C6 1028 001A                  		move.b	$1A(a0),d0
000130CA B001                       		cmp.b	d1,d0
000130CC 6700                       		beq.s	locret_11790
000130CE 6400                       		bcc.s	loc_11772
000130D0 5400                       		addq.b	#2,d0
000130D2                            
000130D2                            loc_11772:
000130D2 5300                       		subq.b	#1,d0
000130D4 1140 001A                  		move.b	d0,$1A(a0)
000130D8 1141 003A                  		move.b	d1,$3A(a0)
000130DC 08A8 0000 0001             		bclr	#0,1(a0)
000130E2 0828 0001 001A             		btst	#1,$1A(a0)
000130E8 6700                       		beq.s	locret_11790
000130EA 08E8 0000 0001             		bset	#0,1(a0)
000130F0                            
000130F0                            locret_11790:
000130F0 4E75                       		rts	
000130F2                            ; ===========================================================================
000130F2                            
000130F2                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000130F2 5428 0024                  		addq.b	#2,$24(a0)
000130F6 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
000130FE 317C 04F0 0002             		move.w	#$4F0,2(a0)
00013104 0028 0004 0001             		ori.b	#4,1(a0)
0001310A 117C 0004 0018             		move.b	#4,$18(a0)
00013110 117C 008B 0020             		move.b	#$8B,$20(a0)
00013116 117C 000C 0019             		move.b	#$C,$19(a0)
0001311C 3168 0008 0030             		move.w	8(a0),$30(a0)
00013122 0668 0028 0008             		addi.w	#$28,8(a0)
00013128 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001312E 117C 0001 001A             		move.b	#1,$1A(a0)
00013134 0828 0000 0022             		btst	#0,$22(a0)
0001313A 6700                       		beq.s	Obj5E_MoveSpike
0001313C 0468 0050 0008             		subi.w	#$50,8(a0)
00013142 117C 0002 003A             		move.b	#2,$3A(a0)
00013148                            
00013148                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00013148 2268 003C                  		movea.l	$3C(a0),a1
0001314C 7000                       		moveq	#0,d0
0001314E 1028 003A                  		move.b	$3A(a0),d0
00013152 9029 003A                  		sub.b	$3A(a1),d0
00013156 6700                       		beq.s	loc_1183E
00013158 6400                       		bcc.s	loc_117FC
0001315A 4400                       		neg.b	d0
0001315C                            
0001315C                            loc_117FC:
0001315C 323C F7E8                  		move.w	#-$818,d1
00013160 343C FEEC                  		move.w	#-$114,d2
00013164 0C00 0001                  		cmpi.b	#1,d0
00013168 6700                       		beq.s	loc_11822
0001316A 323C F510                  		move.w	#-$AF0,d1
0001316E 343C FF34                  		move.w	#-$CC,d2
00013172 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013178 6D00                       		blt.s	loc_11822
0001317A 323C F200                  		move.w	#-$E00,d1
0001317E 343C FF60                  		move.w	#-$A0,d2
00013182                            
00013182                            loc_11822:
00013182 3141 0012                  		move.w	d1,$12(a0)
00013186 3142 0010                  		move.w	d2,$10(a0)
0001318A 3028 0008                  		move.w	8(a0),d0
0001318E 9068 0030                  		sub.w	$30(a0),d0
00013192 6400                       		bcc.s	loc_11838
00013194 4468 0010                  		neg.w	$10(a0)
00013198                            
00013198                            loc_11838:
00013198 5428 0024                  		addq.b	#2,$24(a0)
0001319C 6000                       		bra.s	Obj5E_SpikeFall
0001319E                            ; ===========================================================================
0001319E                            
0001319E                            loc_1183E:				; XREF: Obj5E_MoveSpike
0001319E 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000131A4 7000                       		moveq	#0,d0
000131A6 1029 001A                  		move.b	$1A(a1),d0
000131AA 343C 0028                  		move.w	#$28,d2
000131AE 3228 0008                  		move.w	8(a0),d1
000131B2 9268 0030                  		sub.w	$30(a0),d1
000131B6 6400                       		bcc.s	loc_1185C
000131B8 4442                       		neg.w	d2
000131BA 5440                       		addq.w	#2,d0
000131BC                            
000131BC                            loc_1185C:
000131BC D040                       		add.w	d0,d0
000131BE 3228 0034                  		move.w	$34(a0),d1
000131C2 D272 0000                  		add.w	(a2,d0.w),d1
000131C6 3141 000C                  		move.w	d1,$C(a0)
000131CA D468 0030                  		add.w	$30(a0),d2
000131CE 3142 0008                  		move.w	d2,8(a0)
000131D2 4268 000E                  		clr.w	$E(a0)
000131D6 4268 000A                  		clr.w	$A(a0)
000131DA 4E75                       		rts	
000131DC                            ; ===========================================================================
000131DC                            
000131DC                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000131DC 4A68 0012                  		tst.w	$12(a0)
000131E0 6A00                       		bpl.s	loc_1189A
000131E2 6100 B72C                  		bsr.w	ObjectFall
000131E6 3028 0034                  		move.w	$34(a0),d0
000131EA 0440 002F                  		subi.w	#$2F,d0
000131EE B068 000C                  		cmp.w	$C(a0),d0
000131F2 6E00                       		bgt.s	locret_11898
000131F4 6100 B71A                  		bsr.w	ObjectFall
000131F8                            
000131F8                            locret_11898:
000131F8 4E75                       		rts	
000131FA                            ; ===========================================================================
000131FA                            
000131FA                            loc_1189A:				; XREF: Obj5E_SpikeFall
000131FA 6100 B714                  		bsr.w	ObjectFall
000131FE 2268 003C                  		movea.l	$3C(a0),a1
00013202 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00013208 7000                       		moveq	#0,d0
0001320A 1029 001A                  		move.b	$1A(a1),d0
0001320E 3228 0008                  		move.w	8(a0),d1
00013212 9268 0030                  		sub.w	$30(a0),d1
00013216 6400                       		bcc.s	loc_118BA
00013218 5440                       		addq.w	#2,d0
0001321A                            
0001321A                            loc_118BA:
0001321A D040                       		add.w	d0,d0
0001321C 3228 0034                  		move.w	$34(a0),d1
00013220 D272 0000                  		add.w	(a2,d0.w),d1
00013224 B268 000C                  		cmp.w	$C(a0),d1
00013228 6E00                       		bgt.s	locret_11938
0001322A 2268 003C                  		movea.l	$3C(a0),a1
0001322E 7202                       		moveq	#2,d1
00013230 4A68 0010                  		tst.w	$10(a0)
00013234 6B00                       		bmi.s	Obj5E_Spring
00013236 7200                       		moveq	#0,d1
00013238                            
00013238                            Obj5E_Spring:
00013238 1341 003A                  		move.b	d1,$3A(a1)
0001323C 1141 003A                  		move.b	d1,$3A(a0)
00013240 B229 001A                  		cmp.b	$1A(a1),d1
00013244 6700                       		beq.s	loc_1192C
00013246 08A9 0003 0022             		bclr	#3,$22(a1)
0001324C 6700                       		beq.s	loc_1192C
0001324E 4229 0025                  		clr.b	$25(a1)
00013252 137C 0002 0024             		move.b	#2,$24(a1)
00013258 45F8 D000                  		lea	($FFFFD000).w,a2
0001325C 3568 0012 0012             		move.w	$12(a0),$12(a2)
00013262 446A 0012                  		neg.w	$12(a2)
00013266 08EA 0001 0022             		bset	#1,$22(a2)
0001326C 08AA 0003 0022             		bclr	#3,$22(a2)
00013272 422A 003C                  		clr.b	$3C(a2)
00013276 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
0001327C 157C 0002 0024             		move.b	#2,$24(a2)
00013282 303C 00CC                  		move.w	#$CC,d0
00013286 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play spring sound
0001328C                            
0001328C                            loc_1192C:
0001328C 4268 0010                  		clr.w	$10(a0)
00013290 4268 0012                  		clr.w	$12(a0)
00013294 5528 0024                  		subq.b	#2,$24(a0)
00013298                            
00013298                            locret_11938:
00013298 4E75                       		rts	
0001329A                            ; ===========================================================================
0001329A FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000132A4                            
000132A4                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
000132D4                            		even
000132D4                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00013304                            		even
00013304                            ; ---------------------------------------------------------------------------
00013304                            ; Sprite mappings - seesaws (SLZ)
00013304                            ; ---------------------------------------------------------------------------
00013304                            Map_obj5E:
00013304                            	include "_maps\obj5E.asm"
00013304                            ; ---------------------------------------------------------------------------
00013304                            ; Sprite mappings - seesaws (SLZ)
00013304                            ; ---------------------------------------------------------------------------
00013304 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00013308 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001330C 07                         byte_119AC:	dc.b 7
0001330D D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013312 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013317 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
0001331C EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013321 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013326 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
0001332B FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013330 04                         byte_119D0:	dc.b 4
00013331 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00013336 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
0001333B E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013340 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00013346 00                         		even
00013346 00                         		even
00013346                            
00013346                            ; ---------------------------------------------------------------------------
00013346                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013346                            ; ---------------------------------------------------------------------------
00013346                            Map_obj5Ea:
00013346                            	include "_maps\obj5Eballs.asm"
00013346                            ; ---------------------------------------------------------------------------
00013346                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013346                            ; ---------------------------------------------------------------------------
00013346 0000                       		dc.w byte_119EA-Map_obj5Ea
00013348 0000                       		dc.w byte_119F0-Map_obj5Ea
0001334A 01                         byte_119EA:	dc.b 1
0001334B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013350 01                         byte_119F0:	dc.b 1
00013351 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00013356                            		even
00013356                            		even
00013356                            
00013356                            ; ===========================================================================
00013356                            ; ---------------------------------------------------------------------------
00013356                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00013356                            ; ---------------------------------------------------------------------------
00013356                            
00013356                            Obj5F:					; XREF: Obj_Index
00013356 7000                       		moveq	#0,d0
00013358 1028 0024                  		move.b	$24(a0),d0
0001335C 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00013360 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00013364                            ; ===========================================================================
00013364 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00013366 0000                       		dc.w Obj5F_Action-Obj5F_Index
00013368 0000                       		dc.w Obj5F_Display-Obj5F_Index
0001336A 0000                       		dc.w Obj5F_End-Obj5F_Index
0001336C                            ; ===========================================================================
0001336C                            
0001336C                            Obj5F_Main:				; XREF: Obj5F_Index
0001336C 5428 0024                  		addq.b	#2,$24(a0)
00013370 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00013378 317C 0400 0002             		move.w	#$400,2(a0)
0001337E 0028 0004 0001             		ori.b	#4,1(a0)
00013384 117C 0003 0018             		move.b	#3,$18(a0)
0001338A 117C 000C 0019             		move.b	#$C,$19(a0)
00013390 1028 0028                  		move.b	$28(a0),d0
00013394 6700                       		beq.s	loc_11A3C
00013396 1140 0024                  		move.b	d0,$24(a0)
0001339A 4E75                       		rts	
0001339C                            ; ===========================================================================
0001339C                            
0001339C                            loc_11A3C:
0001339C 117C 009A 0020             		move.b	#$9A,$20(a0)
000133A2 0868 0000 0022             		bchg	#0,$22(a0)
000133A8                            
000133A8                            Obj5F_Action:				; XREF: Obj5F_Index
000133A8 7000                       		moveq	#0,d0
000133AA 1028 0025                  		move.b	$25(a0),d0
000133AE 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
000133B2 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
000133B6 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000133BC 6100 85EC                  		bsr.w	AnimateSprite
000133C0 6000 DBD2                  		bra.w	MarkObjGone
000133C4                            ; ===========================================================================
000133C4 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
000133C6 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
000133C8 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
000133CA                            ; ===========================================================================
000133CA                            
000133CA                            Obj5F_Walk:				; XREF: Obj5F_Index2
000133CA 6100 0000                  		bsr.w	Obj5F_ChkSonic
000133CE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000133D2 6A00                       		bpl.s	locret_11A96	; if time remains, branch
000133D4 5428 0025                  		addq.b	#2,$25(a0)
000133D8 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
000133DE 317C 0010 0010             		move.w	#$10,$10(a0)
000133E4 117C 0001 001C             		move.b	#1,$1C(a0)
000133EA 0868 0000 0022             		bchg	#0,$22(a0)
000133F0 6700                       		beq.s	locret_11A96
000133F2 4468 0010                  		neg.w	$10(a0)		; change direction
000133F6                            
000133F6                            locret_11A96:
000133F6 4E75                       		rts	
000133F8                            ; ===========================================================================
000133F8                            
000133F8                            Obj5F_Wait:				; XREF: Obj5F_Index2
000133F8 6100 0000                  		bsr.w	Obj5F_ChkSonic
000133FC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00013400 6B00                       		bmi.s	loc_11AA8
00013402 6100 B52C                  		bsr.w	SpeedToPos
00013406 4E75                       		rts	
00013408                            ; ===========================================================================
00013408                            
00013408                            loc_11AA8:
00013408 5528 0025                  		subq.b	#2,$25(a0)
0001340C 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00013412 4268 0010                  		clr.w	$10(a0)		; stop walking
00013416 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
0001341C 4E75                       		rts	
0001341E                            ; ===========================================================================
0001341E                            
0001341E                            Obj5F_Explode:				; XREF: Obj5F_Index2
0001341E 5368 0030                  		subq.w	#1,$30(a0)
00013422 6A00                       		bpl.s	locret_11AD0
00013424 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00013428 117C 0000 0024             		move.b	#0,$24(a0)
0001342E                            
0001342E                            locret_11AD0:
0001342E 4E75                       		rts	
00013430                            ; ===========================================================================
00013430                            
00013430                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00013430 3038 D008                  		move.w	($FFFFD008).w,d0
00013434 9068 0008                  		sub.w	8(a0),d0
00013438 6400                       		bcc.s	loc_11ADE
0001343A 4440                       		neg.w	d0
0001343C                            
0001343C                            loc_11ADE:
0001343C 0C40 0060                  		cmpi.w	#$60,d0
00013440 6400                       		bcc.s	locret_11B5E
00013442 3038 D00C                  		move.w	($FFFFD00C).w,d0
00013446 9068 000C                  		sub.w	$C(a0),d0
0001344A 6400                       		bcc.s	Obj5F_MakeFuse
0001344C 4440                       		neg.w	d0
0001344E                            
0001344E                            Obj5F_MakeFuse:
0001344E 0C40 0060                  		cmpi.w	#$60,d0
00013452 6400                       		bcc.s	locret_11B5E
00013454 4A78 FE08                  		tst.w	($FFFFFE08).w
00013458 6600                       		bne.s	locret_11B5E
0001345A 117C 0004 0025             		move.b	#4,$25(a0)
00013460 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00013466 4268 0010                  		clr.w	$10(a0)
0001346A 117C 0002 001C             		move.b	#2,$1C(a0)
00013470 6100 BC44                  		bsr.w	SingleObjLoad2
00013474 6600                       		bne.s	locret_11B5E
00013476 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
0001347A 3368 0008 0008             		move.w	8(a0),8(a1)
00013480 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013486 3368 000C 0034             		move.w	$C(a0),$34(a1)
0001348C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00013492 137C 0004 0028             		move.b	#4,$28(a1)
00013498 137C 0003 001C             		move.b	#3,$1C(a1)
0001349E 337C 0010 0012             		move.w	#$10,$12(a1)
000134A4 0828 0001 0022             		btst	#1,$22(a0)
000134AA 6700                       		beq.s	loc_11B54
000134AC 4469 0012                  		neg.w	$12(a1)
000134B0                            
000134B0                            loc_11B54:
000134B0 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
000134B6 2348 003C                  		move.l	a0,$3C(a1)
000134BA                            
000134BA                            locret_11B5E:
000134BA 4E75                       		rts	
000134BC                            ; ===========================================================================
000134BC                            
000134BC                            Obj5F_Display:				; XREF: Obj5F_Index
000134BC 6100                       		bsr.s	loc_11B70
000134BE 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000134C4 6100 84E4                  		bsr.w	AnimateSprite
000134C8 6000 DACA                  		bra.w	MarkObjGone
000134CC                            ; ===========================================================================
000134CC                            
000134CC                            loc_11B70:
000134CC 5368 0030                  		subq.w	#1,$30(a0)
000134D0 6B00                       		bmi.s	loc_11B7C
000134D2 6100 B45C                  		bsr.w	SpeedToPos
000134D6 4E75                       		rts	
000134D8                            ; ===========================================================================
000134D8                            
000134D8                            loc_11B7C:
000134D8 4268 0030                  		clr.w	$30(a0)
000134DC 4228 0024                  		clr.b	$24(a0)
000134E0 3168 0034 000C             		move.w	$34(a0),$C(a0)
000134E6 7203                       		moveq	#3,d1
000134E8 2248                       		movea.l	a0,a1
000134EA 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000134F0 6000                       		bra.s	Obj5F_MakeShrap
000134F2                            ; ===========================================================================
000134F2                            
000134F2                            Obj5F_Loop:
000134F2 6100 BBC2                  		bsr.w	SingleObjLoad2
000134F6 6600                       		bne.s	loc_11BCE
000134F8                            
000134F8                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000134F8 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000134FC 3368 0008 0008             		move.w	8(a0),8(a1)
00013502 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013508 137C 0006 0028             		move.b	#6,$28(a1)
0001350E 137C 0004 001C             		move.b	#4,$1C(a1)
00013514 335A 0010                  		move.w	(a2)+,$10(a1)
00013518 335A 0012                  		move.w	(a2)+,$12(a1)
0001351C 137C 0098 0020             		move.b	#$98,$20(a1)
00013522 08E9 0007 0001             		bset	#7,1(a1)
00013528                            
00013528                            loc_11BCE:
00013528 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
0001352C                            
0001352C 117C 0006 0024             		move.b	#6,$24(a0)
00013532                            
00013532                            Obj5F_End:				; XREF: Obj5F_Index
00013532 6100 B3FC                  		bsr.w	SpeedToPos
00013536 0668 0018 0012             		addi.w	#$18,$12(a0)
0001353C 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00013542 6100 8466                  		bsr.w	AnimateSprite
00013546 4A28 0001                  		tst.b	1(a0)
0001354A 6A00 B44E                  		bpl.w	DeleteObject
0001354E 6000 B3FA                  		bra.w	DisplaySprite
00013552                            ; ===========================================================================
00013552 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00013562                            
00013562                            Ani_obj5F:
00013562                            	include "_anim\obj5F.asm"
00013562                            ; ---------------------------------------------------------------------------
00013562                            ; Animation script - Bomb enemy
00013562                            ; ---------------------------------------------------------------------------
00013562 0000                       		dc.w byte_11C12-Ani_obj5F
00013564 0000                       		dc.w byte_11C16-Ani_obj5F
00013566 0000                       		dc.w byte_11C1C-Ani_obj5F
00013568 0000                       		dc.w byte_11C20-Ani_obj5F
0001356A 0000                       		dc.w byte_11C24-Ani_obj5F
0001356C 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00013570 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00013576 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
0001357A 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
0001357E 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00013582                            		even
00013582                            		even
00013582                            
00013582                            ; ---------------------------------------------------------------------------
00013582                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00013582                            ; ---------------------------------------------------------------------------
00013582                            Map_obj5F:
00013582                            	include "_maps\obj5F.asm"
00013582                            ; ---------------------------------------------------------------------------
00013582                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00013582                            ; ---------------------------------------------------------------------------
00013582 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00013586 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
0001358A 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
0001358E 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00013592 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00013596 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
0001359A 03                         byte_11C40:	dc.b 3
0001359B F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000135A0 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000135A5 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000135AA 03                         byte_11C50:	dc.b 3
000135AB F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000135B0 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000135B5 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000135BA 03                         byte_11C60:	dc.b 3
000135BB F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000135C0 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000135C5 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000135CA 03                         byte_11C70:	dc.b 3
000135CB F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000135D0 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000135D5 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000135DA 03                         byte_11C80:	dc.b 3
000135DB F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000135E0 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000135E5 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000135EA 03                         byte_11C90:	dc.b 3
000135EB F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000135F0 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000135F5 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000135FA 02                         byte_11CA0:	dc.b 2
000135FB F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00013600 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013605 02                         byte_11CAB:	dc.b 2
00013606 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001360B 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013610 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00013611 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00013616 01                         byte_11CBC:	dc.b 1			; fuse
00013617 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
0001361C 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
0001361D FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00013622 01                         byte_11CC8:	dc.b 1			; fireball
00013623 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00013628                            		even
00013628                            		even
00013628                            
00013628                            ; ===========================================================================
00013628                            ; ---------------------------------------------------------------------------
00013628                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00013628                            ; ---------------------------------------------------------------------------
00013628                            
00013628                            Obj60:					; XREF: Obj_Index
00013628 7000                       		moveq	#0,d0
0001362A 1028 0024                  		move.b	$24(a0),d0
0001362E 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00013632 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00013636                            ; ===========================================================================
00013636 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00013638 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
0001363A 0000                       		dc.w Obj60_Display-Obj60_Index
0001363C 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
0001363E 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00013640                            ; ===========================================================================
00013640                            
00013640                            Obj60_Main:				; XREF: Obj60_Index
00013640 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00013648 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
0001364E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00013654 6700                       		beq.s	loc_11D02
00013656 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
0001365C                            
0001365C                            loc_11D02:
0001365C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00013662 6600                       		bne.s	loc_11D10
00013664 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
0001366A                            
0001366A                            loc_11D10:
0001366A 0028 0004 0001             		ori.b	#4,1(a0)
00013670 117C 0004 0018             		move.b	#4,$18(a0)
00013676 117C 000B 0020             		move.b	#$B,$20(a0)
0001367C 117C 000C 0019             		move.b	#$C,$19(a0)
00013682 7400                       		moveq	#0,d2
00013684 45E8 0037                  		lea	$37(a0),a2
00013688 264A                       		movea.l	a2,a3
0001368A 524A                       		addq.w	#1,a2
0001368C 7203                       		moveq	#3,d1
0001368E                            
0001368E                            Obj60_MakeOrbs:
0001368E 6100 BA26                  		bsr.w	SingleObjLoad2
00013692 6600                       		bne.s	loc_11D90
00013694 5213                       		addq.b	#1,(a3)
00013696 3A09                       		move.w	a1,d5
00013698 0445 D000                  		subi.w	#-$3000,d5
0001369C EC4D                       		lsr.w	#6,d5
0001369E 0245 007F                  		andi.w	#$7F,d5
000136A2 14C5                       		move.b	d5,(a2)+
000136A4 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
000136A6 137C 0006 0024             		move.b	#6,$24(a1)
000136AC 2368 0004 0004             		move.l	4(a0),4(a1)
000136B2 3368 0002 0002             		move.w	2(a0),2(a1)
000136B8 0029 0004 0001             		ori.b	#4,1(a1)
000136BE 137C 0004 0018             		move.b	#4,$18(a1)
000136C4 137C 0008 0019             		move.b	#8,$19(a1)
000136CA 137C 0003 001A             		move.b	#3,$1A(a1)
000136D0 137C 0098 0020             		move.b	#$98,$20(a1)
000136D6 1342 0026                  		move.b	d2,$26(a1)
000136DA 0602 0040                  		addi.b	#$40,d2
000136DE 2348 003C                  		move.l	a0,$3C(a1)
000136E2 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000136E6                            
000136E6                            loc_11D90:
000136E6 7001                       		moveq	#1,d0
000136E8 0828 0000 0022             		btst	#0,$22(a0)
000136EE 6700                       		beq.s	Obj60_Move
000136F0 4440                       		neg.w	d0
000136F2                            
000136F2                            Obj60_Move:
000136F2 1140 0036                  		move.b	d0,$36(a0)
000136F6 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000136FC 5428 0024                  		addq.b	#2,$24(a0)
00013700 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00013706 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
0001370C 6700                       		beq.s	locret_11DBC	; if not, branch
0001370E 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00013712                            
00013712                            locret_11DBC:
00013712 4E75                       		rts	
00013714                            ; ===========================================================================
00013714                            
00013714                            Obj60_ChkSonic:				; XREF: Obj60_Index
00013714 3038 D008                  		move.w	($FFFFD008).w,d0
00013718 9068 0008                  		sub.w	8(a0),d0
0001371C 6400                       		bcc.s	loc_11DCA
0001371E 4440                       		neg.w	d0
00013720                            
00013720                            loc_11DCA:
00013720 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00013724 6400                       		bcc.s	Obj60_Animate	; if not, branch
00013726 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001372A 9068 000C                  		sub.w	$C(a0),d0
0001372E 6400                       		bcc.s	loc_11DDC
00013730 4440                       		neg.w	d0
00013732                            
00013732                            loc_11DDC:
00013732 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00013736 6400                       		bcc.s	Obj60_Animate	; if not, branch
00013738 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001373C 6600                       		bne.s	Obj60_Animate	; if yes, branch
0001373E 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00013744                            
00013744                            Obj60_Animate:
00013744 43F9 0000 0000             		lea	(Ani_obj60).l,a1
0001374A 6100 825E                  		bsr.w	AnimateSprite
0001374E 6000 0000                  		bra.w	Obj60_ChkDel
00013752                            ; ===========================================================================
00013752                            
00013752                            Obj60_Display:				; XREF: Obj60_Index
00013752 6100 B1DC                  		bsr.w	SpeedToPos
00013756                            
00013756                            Obj60_ChkDel:				; XREF: Obj60_Animate
00013756 3028 0008                  		move.w	8(a0),d0
0001375A 0240 FF80                  		andi.w	#$FF80,d0
0001375E 3238 F700                  		move.w	($FFFFF700).w,d1
00013762 0441 0080                  		subi.w	#$80,d1
00013766 0241 FF80                  		andi.w	#$FF80,d1
0001376A 9041                       		sub.w	d1,d0
0001376C 0C40 0280                  		cmpi.w	#$280,d0
00013770 6200 0000                  		bhi.w	Obj60_ChkGone
00013774 6000 B1D4                  		bra.w	DisplaySprite
00013778                            ; ===========================================================================
00013778                            
00013778                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00013778 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001377C 6700                       		beq.s	loc_11E34		; if it's zero, don't remember object
0001377E 3440                       		movea.w	d0,a2	; load address into a2
00013780 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00013784                            
00013784                            loc_11E34:
00013784 45E8 0037                  		lea	$37(a0),a2
00013788 7400                       		moveq	#0,d2
0001378A 141A                       		move.b	(a2)+,d2
0001378C 5342                       		subq.w	#1,d2
0001378E 6500                       		bcs.s	Obj60_Delete
00013790                            
00013790                            loc_11E40:
00013790 7000                       		moveq	#0,d0
00013792 101A                       		move.b	(a2)+,d0
00013794 ED48                       		lsl.w	#6,d0
00013796 0680 00FF D000             		addi.l	#$FFD000,d0
0001379C 2240                       		movea.l	d0,a1
0001379E 6100 B1FC                  		bsr.w	DeleteObject2
000137A2 51CA FFEC                  		dbf	d2,loc_11E40
000137A6                            
000137A6                            Obj60_Delete:
000137A6 6000 B1F2                  		bra.w	DeleteObject
000137AA                            ; ===========================================================================
000137AA                            
000137AA                            Obj60_MoveOrb:				; XREF: Obj60_Index
000137AA 2268 003C                  		movea.l	$3C(a0),a1
000137AE 0C11 0060                  		cmpi.b	#$60,0(a1)
000137B2 6600 B1E6                  		bne.w	DeleteObject
000137B6 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000137BC 6600                       		bne.s	Obj60_Circle
000137BE 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000137C4 6600                       		bne.s	Obj60_Circle
000137C6 5428 0024                  		addq.b	#2,$24(a0)
000137CA 5329 0037                  		subq.b	#1,$37(a1)
000137CE 6600                       		bne.s	Obj60_FireOrb
000137D0 5429 0024                  		addq.b	#2,$24(a1)
000137D4                            
000137D4                            Obj60_FireOrb:
000137D4 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000137DA 0829 0000 0022             		btst	#0,$22(a1)
000137E0 6700                       		beq.s	Obj60_Display2
000137E2 4468 0010                  		neg.w	$10(a0)
000137E6                            
000137E6                            Obj60_Display2:
000137E6 6000 B162                  		bra.w	DisplaySprite
000137EA                            ; ===========================================================================
000137EA                            
000137EA                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000137EA 1028 0026                  		move.b	$26(a0),d0
000137EE 4EB9 0000 29CC             		jsr	(CalcSine).l
000137F4 E841                       		asr.w	#4,d1
000137F6 D269 0008                  		add.w	8(a1),d1
000137FA 3141 0008                  		move.w	d1,8(a0)
000137FE E840                       		asr.w	#4,d0
00013800 D069 000C                  		add.w	$C(a1),d0
00013804 3140 000C                  		move.w	d0,$C(a0)
00013808 1029 0036                  		move.b	$36(a1),d0
0001380C D128 0026                  		add.b	d0,$26(a0)
00013810 6000 B138                  		bra.w	DisplaySprite
00013814                            ; ===========================================================================
00013814                            
00013814                            Obj60_ChkDel2:				; XREF: Obj60_Index
00013814 6100 B11A                  		bsr.w	SpeedToPos
00013818 4A28 0001                  		tst.b	1(a0)
0001381C 6A00 B17C                  		bpl.w	DeleteObject
00013820 6000 B128                  		bra.w	DisplaySprite
00013824                            ; ===========================================================================
00013824                            Ani_obj60:
00013824                            	include "_anim\obj60.asm"
00013824                            ; ---------------------------------------------------------------------------
00013824                            ; Animation script - Orbinaut enemy
00013824                            ; ---------------------------------------------------------------------------
00013824 0000                       		dc.w byte_11EDA-Ani_obj60
00013826 0000                       		dc.w byte_11EDE-Ani_obj60
00013828 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
0001382C 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00013832                            		even
00013832                            		even
00013832                            
00013832                            ; ---------------------------------------------------------------------------
00013832                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00013832                            ; ---------------------------------------------------------------------------
00013832                            Map_obj60:
00013832                            	include "_maps\obj60.asm"
00013832                            ; ---------------------------------------------------------------------------
00013832                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00013832                            ; ---------------------------------------------------------------------------
00013832 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00013836 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
0001383A 01                         byte_11EEC:	dc.b 1
0001383B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013840 01                         byte_11EF2:	dc.b 1
00013841 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00013846 01                         byte_11EF8:	dc.b 1
00013847 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001384C 01                         byte_11EFE:	dc.b 1
0001384D F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00013852                            		even
00013852                            		even
00013852                            
00013852                            ; ===========================================================================
00013852                            ; ---------------------------------------------------------------------------
00013852                            ; Object 16 - harpoon (LZ)
00013852                            ; ---------------------------------------------------------------------------
00013852                            
00013852                            Obj16:					; XREF: Obj_Index
00013852 7000                       		moveq	#0,d0
00013854 1028 0024                  		move.b	$24(a0),d0
00013858 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
0001385C 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00013860                            ; ===========================================================================
00013860 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00013862 0000                       		dc.w Obj16_Move-Obj16_Index
00013864 0000                       		dc.w Obj16_Wait-Obj16_Index
00013866                            ; ===========================================================================
00013866                            
00013866                            Obj16_Main:				; XREF: Obj16_Index
00013866 5428 0024                  		addq.b	#2,$24(a0)
0001386A 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00013872 317C 03CC 0002             		move.w	#$3CC,2(a0)
00013878 0028 0004 0001             		ori.b	#4,1(a0)
0001387E 117C 0004 0018             		move.b	#4,$18(a0)
00013884 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0001388A 117C 0014 0019             		move.b	#$14,$19(a0)
00013890 317C 003C 0030             		move.w	#60,$30(a0)
00013896                            
00013896                            Obj16_Move:				; XREF: Obj16_Index
00013896 43F9 0000 0000             		lea	(Ani_obj16).l,a1
0001389C 6100 810C                  		bsr.w	AnimateSprite
000138A0 7000                       		moveq	#0,d0
000138A2 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
000138A6 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
000138AC 6000 D6E6                  		bra.w	MarkObjGone
000138B0                            ; ===========================================================================
000138B0 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
000138B6                            ; ===========================================================================
000138B6                            
000138B6                            Obj16_Wait:				; XREF: Obj16_Index
000138B6 5368 0030                  		subq.w	#1,$30(a0)
000138BA 6A00                       		bpl.s	Obj16_ChkDel
000138BC 317C 003C 0030             		move.w	#60,$30(a0)
000138C2 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000138C6 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000138CC                            
000138CC                            Obj16_ChkDel:
000138CC 6000 D6C6                  		bra.w	MarkObjGone
000138D0                            ; ===========================================================================
000138D0                            Ani_obj16:
000138D0                            	include "_anim\obj16.asm"
000138D0                            ; ---------------------------------------------------------------------------
000138D0                            ; Animation script - harpoon (LZ)
000138D0                            ; ---------------------------------------------------------------------------
000138D0 0000                       		dc.w byte_11F8A-Ani_obj16
000138D2 0000                       		dc.w byte_11F8E-Ani_obj16
000138D4 0000                       		dc.w byte_11F92-Ani_obj16
000138D6 0000                       		dc.w byte_11F96-Ani_obj16
000138D8 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000138DC 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000138E0 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000138E4 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000138E8                            		even
000138E8                            		even
000138E8                            
000138E8                            ; ---------------------------------------------------------------------------
000138E8                            ; Sprite mappings - harpoon (LZ)
000138E8                            ; ---------------------------------------------------------------------------
000138E8                            Map_obj16:
000138E8                            	include "_maps\obj16.asm"
000138E8                            ; ---------------------------------------------------------------------------
000138E8                            ; Sprite mappings - harpoon (LZ)
000138E8                            ; ---------------------------------------------------------------------------
000138E8 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000138EC 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000138F0 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000138F4 01                         byte_11FA6:	dc.b 1
000138F5 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000138FA 01                         byte_11FAC:	dc.b 1
000138FB FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00013900 02                         byte_11FB2:	dc.b 2
00013901 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00013906 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
0001390B 01                         byte_11FBD:	dc.b 1
0001390C F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00013911 01                         byte_11FC3:	dc.b 1
00013912 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00013917 02                         byte_11FC9:	dc.b 2
00013918 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
0001391D F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00013922                            		even
00013922                            		even
00013922                            
00013922                            ; ===========================================================================
00013922                            ; ---------------------------------------------------------------------------
00013922                            ; Object 61 - blocks (LZ)
00013922                            ; ---------------------------------------------------------------------------
00013922                            
00013922                            Obj61:					; XREF: Obj_Index
00013922 7000                       		moveq	#0,d0
00013924 1028 0024                  		move.b	$24(a0),d0
00013928 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
0001392C 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00013930                            ; ===========================================================================
00013930 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00013932 0000                       		dc.w Obj61_Action-Obj61_Index
00013934                            
00013934 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00013936 200C                       		dc.b $20, $C
00013938 1010                       		dc.b $10, $10
0001393A 1010                       		dc.b $10, $10
0001393C                            ; ===========================================================================
0001393C                            
0001393C                            Obj61_Main:				; XREF: Obj61_Index
0001393C 5428 0024                  		addq.b	#2,$24(a0)
00013940 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00013948 317C 43E6 0002             		move.w	#$43E6,2(a0)
0001394E 117C 0004 0001             		move.b	#4,1(a0)
00013954 117C 0003 0018             		move.b	#3,$18(a0)
0001395A 7000                       		moveq	#0,d0
0001395C 1028 0028                  		move.b	$28(a0),d0
00013960 E648                       		lsr.w	#3,d0
00013962 0240 000E                  		andi.w	#$E,d0
00013966 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
0001396A 115A 0019                  		move.b	(a2)+,$19(a0)
0001396E 1152 0016                  		move.b	(a2),$16(a0)
00013972 E248                       		lsr.w	#1,d0
00013974 1140 001A                  		move.b	d0,$1A(a0)
00013978 3168 0008 0034             		move.w	8(a0),$34(a0)
0001397E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00013984 1028 0028                  		move.b	$28(a0),d0
00013988 0200 000F                  		andi.b	#$F,d0
0001398C 6700                       		beq.s	Obj61_Action
0001398E 0C00 0007                  		cmpi.b	#7,d0
00013992 6700                       		beq.s	Obj61_Action
00013994 117C 0001 0038             		move.b	#1,$38(a0)
0001399A                            
0001399A                            Obj61_Action:				; XREF: Obj61_Index
0001399A 3F28 0008                  		move.w	8(a0),-(sp)
0001399E 7000                       		moveq	#0,d0
000139A0 1028 0028                  		move.b	$28(a0),d0
000139A4 0240 000F                  		andi.w	#$F,d0
000139A8 D040                       		add.w	d0,d0
000139AA 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
000139AE 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
000139B2 381F                       		move.w	(sp)+,d4
000139B4 4A28 0001                  		tst.b	1(a0)
000139B8 6A00                       		bpl.s	Obj61_ChkDel
000139BA 7200                       		moveq	#0,d1
000139BC 1228 0019                  		move.b	$19(a0),d1
000139C0 0641 000B                  		addi.w	#$B,d1
000139C4 7400                       		moveq	#0,d2
000139C6 1428 0016                  		move.b	$16(a0),d2
000139CA 3602                       		move.w	d2,d3
000139CC 5243                       		addq.w	#1,d3
000139CE 6100 D8E8                  		bsr.w	SolidObject
000139D2 1144 003F                  		move.b	d4,$3F(a0)
000139D6 6100 0000                  		bsr.w	loc_12180
000139DA                            
000139DA                            Obj61_ChkDel:
000139DA 3028 0034                  		move.w	$34(a0),d0
000139DE 0240 FF80                  		andi.w	#$FF80,d0
000139E2 3238 F700                  		move.w	($FFFFF700).w,d1
000139E6 0441 0080                  		subi.w	#$80,d1
000139EA 0241 FF80                  		andi.w	#$FF80,d1
000139EE 9041                       		sub.w	d1,d0
000139F0 0C40 0280                  		cmpi.w	#$280,d0
000139F4 6300 AF54                  		bls.w	DisplaySprite
000139F8 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000139FC 6700 AF9C                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
00013A00 3440                       		movea.w	d0,a2	; load address into a2
00013A02 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
00013A06 6000 AF92                  		bra.w	DeleteObject
00013A0A                            ; ===========================================================================
00013A0A 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00013A0E 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00013A12 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00013A16 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00013A1A                            ; ===========================================================================
00013A1A                            
00013A1A                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00013A1A 4E75                       		rts	
00013A1C                            ; ===========================================================================
00013A1C                            
00013A1C                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00013A1C 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00013A20 6600                       		bne.s	loc_120D6	; if yes, branch
00013A22 0828 0003 0022             		btst	#3,$22(a0)
00013A28 6700                       		beq.s	locret_120D4
00013A2A 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
00013A30                            
00013A30                            locret_120D4:
00013A30 4E75                       		rts	
00013A32                            ; ===========================================================================
00013A32                            
00013A32                            loc_120D6:
00013A32 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00013A36 66F8                       		bne.s	locret_120D4	; if time remains, branch
00013A38 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00013A3C 4228 0038                  		clr.b	$38(a0)
00013A40 4E75                       		rts	
00013A42                            ; ===========================================================================
00013A42                            
00013A42                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00013A42 6100 AEEC                  		bsr.w	SpeedToPos
00013A46 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00013A4A 6100 0000                  		bsr.w	ObjHitFloor
00013A4E 4A41                       		tst.w	d1
00013A50 6A00 0000                  		bpl.w	locret_12106
00013A54 5241                       		addq.w	#1,d1
00013A56 D368 000C                  		add.w	d1,$C(a0)
00013A5A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00013A5E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013A62                            
00013A62                            locret_12106:
00013A62 4E75                       		rts	
00013A64                            ; ===========================================================================
00013A64                            
00013A64                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00013A64 6100 AECA                  		bsr.w	SpeedToPos
00013A68 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00013A6C 6100 0000                  		bsr.w	ObjHitCeiling
00013A70 4A41                       		tst.w	d1
00013A72 6A00 0000                  		bpl.w	locret_12126
00013A76 9368 000C                  		sub.w	d1,$C(a0)
00013A7A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00013A7E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013A82                            
00013A82                            locret_12126:
00013A82 4E75                       		rts	
00013A84                            ; ===========================================================================
00013A84                            
00013A84                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00013A84 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00013A8A 6600                       		bne.s	locret_12138	; if not, branch
00013A8C 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00013A90 4228 0038                  		clr.b	$38(a0)
00013A94                            
00013A94                            locret_12138:
00013A94 4E75                       		rts	
00013A96                            ; ===========================================================================
00013A96                            
00013A96                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00013A96 3038 F646                  		move.w	($FFFFF646).w,d0
00013A9A 9068 000C                  		sub.w	$C(a0),d0
00013A9E 6700                       		beq.s	locret_1217E
00013AA0 6400                       		bcc.s	loc_12162
00013AA2 0C40 FFFE                  		cmpi.w	#-2,d0
00013AA6 6C00                       		bge.s	loc_1214E
00013AA8 70FE                       		moveq	#-2,d0
00013AAA                            
00013AAA                            loc_1214E:
00013AAA D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00013AAE 6100 0000                  		bsr.w	ObjHitCeiling
00013AB2 4A41                       		tst.w	d1
00013AB4 6A00 0000                  		bpl.w	locret_12160
00013AB8 9368 000C                  		sub.w	d1,$C(a0)
00013ABC                            
00013ABC                            locret_12160:
00013ABC 4E75                       		rts	
00013ABE                            ; ===========================================================================
00013ABE                            
00013ABE                            loc_12162:				; XREF: Obj61_Type07
00013ABE 0C40 0002                  		cmpi.w	#2,d0
00013AC2 6F00                       		ble.s	loc_1216A
00013AC4 7002                       		moveq	#2,d0
00013AC6                            
00013AC6                            loc_1216A:
00013AC6 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00013ACA 6100 0000                  		bsr.w	ObjHitFloor
00013ACE 4A41                       		tst.w	d1
00013AD0 6A00 0000                  		bpl.w	locret_1217E
00013AD4 5241                       		addq.w	#1,d1
00013AD6 D368 000C                  		add.w	d1,$C(a0)
00013ADA                            
00013ADA                            locret_1217E:
00013ADA 4E75                       		rts	
00013ADC                            ; ===========================================================================
00013ADC                            
00013ADC                            loc_12180:				; XREF: Obj61_Action
00013ADC 4A28 0038                  		tst.b	$38(a0)
00013AE0 6700                       		beq.s	locret_121C0
00013AE2 0828 0003 0022             		btst	#3,$22(a0)
00013AE8 6600                       		bne.s	loc_1219A
00013AEA 4A28 003E                  		tst.b	$3E(a0)
00013AEE 6700                       		beq.s	locret_121C0
00013AF0 5928 003E                  		subq.b	#4,$3E(a0)
00013AF4 6000                       		bra.s	loc_121A6
00013AF6                            ; ===========================================================================
00013AF6                            
00013AF6                            loc_1219A:
00013AF6 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00013AFC 6700                       		beq.s	locret_121C0
00013AFE 5828 003E                  		addq.b	#4,$3E(a0)
00013B02                            
00013B02                            loc_121A6:
00013B02 1028 003E                  		move.b	$3E(a0),d0
00013B06 4EB9 0000 29CC             		jsr	(CalcSine).l
00013B0C 323C 0400                  		move.w	#$400,d1
00013B10 C1C1                       		muls.w	d1,d0
00013B12 4840                       		swap	d0
00013B14 D068 0030                  		add.w	$30(a0),d0
00013B18 3140 000C                  		move.w	d0,$C(a0)
00013B1C                            
00013B1C                            locret_121C0:
00013B1C 4E75                       		rts	
00013B1E                            ; ===========================================================================
00013B1E                            ; ---------------------------------------------------------------------------
00013B1E                            ; Sprite mappings - blocks (LZ)
00013B1E                            ; ---------------------------------------------------------------------------
00013B1E                            Map_obj61:
00013B1E                            	include "_maps\obj61.asm"
00013B1E                            ; ---------------------------------------------------------------------------
00013B1E                            ; Sprite mappings - blocks (LZ)
00013B1E                            ; ---------------------------------------------------------------------------
00013B1E 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00013B22 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00013B26 01                         byte_121CA:	dc.b 1
00013B27 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00013B2C 02                         byte_121D0:	dc.b 2
00013B2D F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00013B32 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00013B37 01                         byte_121DB:	dc.b 1
00013B38 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00013B3D 01                         byte_121E1:	dc.b 1
00013B3E F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00013B44 00                         		even
00013B44 00                         		even
00013B44                            
00013B44                            ; ===========================================================================
00013B44                            ; ---------------------------------------------------------------------------
00013B44                            ; Object 62 - gargoyle head (LZ)
00013B44                            ; ---------------------------------------------------------------------------
00013B44                            
00013B44                            Obj62:					; XREF: Obj_Index
00013B44 7000                       		moveq	#0,d0
00013B46 1028 0024                  		move.b	$24(a0),d0
00013B4A 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00013B4E 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00013B52 6000 D440                  		bra.w	MarkObjGone
00013B56                            ; ===========================================================================
00013B56 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00013B58 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00013B5A 0000                       		dc.w Obj62_FireBall-Obj62_Index
00013B5C 0000                       		dc.w Obj62_AniFire-Obj62_Index
00013B5E                            
00013B5E 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00013B66                            ; ===========================================================================
00013B66                            
00013B66                            Obj62_Main:				; XREF: Obj62_Index
00013B66 5428 0024                  		addq.b	#2,$24(a0)
00013B6A 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013B72 317C 42E9 0002             		move.w	#$42E9,2(a0)
00013B78 0028 0004 0001             		ori.b	#4,1(a0)
00013B7E 117C 0003 0018             		move.b	#3,$18(a0)
00013B84 117C 0010 0019             		move.b	#$10,$19(a0)
00013B8A 1028 0028                  		move.b	$28(a0),d0	; get object type
00013B8E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00013B92 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00013B98 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013B9E 0228 000F 0028             		andi.b	#$F,$28(a0)
00013BA4                            
00013BA4                            Obj62_MakeFire:				; XREF: Obj62_Index
00013BA4 5328 001E                  		subq.b	#1,$1E(a0)
00013BA8 6600                       		bne.s	Obj62_NoFire
00013BAA 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013BB0 6100 B15E                  		bsr.w	ChkObjOnScreen
00013BB4 6600                       		bne.s	Obj62_NoFire
00013BB6 6100 B4E8                  		bsr.w	SingleObjLoad
00013BBA 6600                       		bne.s	Obj62_NoFire
00013BBC 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00013BC0 5829 0024                  		addq.b	#4,$24(a1)
00013BC4 3368 0008 0008             		move.w	8(a0),8(a1)
00013BCA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013BD0 1368 0001 0001             		move.b	1(a0),1(a1)
00013BD6 1368 0022 0022             		move.b	$22(a0),$22(a1)
00013BDC                            
00013BDC                            Obj62_NoFire:
00013BDC 4E75                       		rts	
00013BDE                            ; ===========================================================================
00013BDE                            
00013BDE                            Obj62_FireBall:				; XREF: Obj62_Index
00013BDE 5428 0024                  		addq.b	#2,$24(a0)
00013BE2 117C 0008 0016             		move.b	#8,$16(a0)
00013BE8 117C 0008 0017             		move.b	#8,$17(a0)
00013BEE 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013BF6 317C 02E9 0002             		move.w	#$2E9,2(a0)
00013BFC 0028 0004 0001             		ori.b	#4,1(a0)
00013C02 117C 0004 0018             		move.b	#4,$18(a0)
00013C08 117C 0098 0020             		move.b	#$98,$20(a0)
00013C0E 117C 0008 0019             		move.b	#8,$19(a0)
00013C14 117C 0002 001A             		move.b	#2,$1A(a0)
00013C1A 5068 000C                  		addq.w	#8,$C(a0)
00013C1E 317C 0200 0010             		move.w	#$200,$10(a0)
00013C24 0828 0000 0022             		btst	#0,$22(a0)
00013C2A 6600                       		bne.s	Obj62_Sound
00013C2C 4468 0010                  		neg.w	$10(a0)
00013C30                            
00013C30                            Obj62_Sound:
00013C30 303C 00AE                  		move.w	#$AE,d0
00013C34 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play lava ball sound
00013C3A                            
00013C3A                            Obj62_AniFire:				; XREF: Obj62_Index
00013C3A 1038 FE05                  		move.b	($FFFFFE05).w,d0
00013C3E 0200 0007                  		andi.b	#7,d0
00013C42 6600                       		bne.s	Obj62_StopFire
00013C44 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00013C4A                            
00013C4A                            Obj62_StopFire:
00013C4A 6100 ACE4                  		bsr.w	SpeedToPos
00013C4E 0828 0000 0022             		btst	#0,$22(a0)
00013C54 6600                       		bne.s	Obj62_StopFire2
00013C56 76F8                       		moveq	#-8,d3
00013C58 6100 0000                  		bsr.w	ObjHitWallLeft
00013C5C 4A41                       		tst.w	d1
00013C5E 6B00 AD3A                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00013C62 4E75                       		rts	
00013C64                            ; ===========================================================================
00013C64                            
00013C64                            Obj62_StopFire2:
00013C64 7608                       		moveq	#8,d3
00013C66 6100 0000                  		bsr.w	ObjHitWallRight
00013C6A 4A41                       		tst.w	d1
00013C6C 6B00 AD2C                  		bmi.w	DeleteObject
00013C70 4E75                       		rts	
00013C72                            ; ===========================================================================
00013C72                            ; ---------------------------------------------------------------------------
00013C72                            ; Sprite mappings - gargoyle head (LZ)
00013C72                            ; ---------------------------------------------------------------------------
00013C72                            Map_obj62:
00013C72                            	include "_maps\obj62.asm"
00013C72                            ; ---------------------------------------------------------------------------
00013C72                            ; Sprite mappings - gargoyle head (LZ)
00013C72                            ; ---------------------------------------------------------------------------
00013C72 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00013C76 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00013C7A 03                         byte_12320:	dc.b 3
00013C7B F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00013C80 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00013C85 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00013C8A 01                         byte_12330:	dc.b 1
00013C8B FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00013C90 01                         byte_12336:	dc.b 1
00013C91 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00013C96                            		even
00013C96                            		even
00013C96                            
00013C96                            ; ===========================================================================
00013C96                            ; ---------------------------------------------------------------------------
00013C96                            ; Object 63 - platforms	on a conveyor belt (LZ)
00013C96                            ; ---------------------------------------------------------------------------
00013C96                            
00013C96                            Obj63:					; XREF: Obj_Index
00013C96 7000                       		moveq	#0,d0
00013C98 1028 0024                  		move.b	$24(a0),d0
00013C9C 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00013CA0 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00013CA4 3028 0030                  		move.w	$30(a0),d0
00013CA8 0240 FF80                  		andi.w	#$FF80,d0
00013CAC 3238 F700                  		move.w	($FFFFF700).w,d1
00013CB0 0441 0080                  		subi.w	#$80,d1
00013CB4 0241 FF80                  		andi.w	#$FF80,d1
00013CB8 9041                       		sub.w	d1,d0
00013CBA 0C40 0280                  		cmpi.w	#$280,d0
00013CBE 6300                       		bls.s	Obj63_Display
00013CC0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00013CC4 6700                       		beq.s	loc_1236A		; if it's zero, don't remember object
00013CC6 3440                       		movea.w	d0,a2	; load address into a2
00013CC8 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00013CCC 6000                       		bra.s	loc_1236A	; and delete object
00013CCE                            
00013CCE                            Obj63_Display:				; XREF: loc_1236A
00013CCE 6000 AC7A                  		bra.w	DisplaySprite
00013CD2                            ; ===========================================================================
00013CD2                            
00013CD2                            loc_1236A:				; XREF: Obj63
00013CD2 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00013CD8 6600                       		bne.s	loc_12378
00013CDA 0C40 FF80                  		cmpi.w	#-$80,d0
00013CDE 64EE                       		bcc.s	Obj63_Display
00013CE0                            
00013CE0                            loc_12378:
00013CE0 1028 002F                  		move.b	$2F(a0),d0
00013CE4 6A00 ACB4                  		bpl.w	DeleteObject
00013CE8 0240 007F                  		andi.w	#$7F,d0
00013CEC 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013CF0 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00013CF6 6000 ACA2                  		bra.w	DeleteObject
00013CFA                            ; ===========================================================================
00013CFA 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00013CFC 0000                       		dc.w loc_124B2-Obj63_Index
00013CFE 0000                       		dc.w loc_124C2-Obj63_Index
00013D00 0000                       		dc.w loc_124DE-Obj63_Index
00013D02                            ; ===========================================================================
00013D02                            
00013D02                            Obj63_Main:				; XREF: Obj63_Index
00013D02 1028 0028                  		move.b	$28(a0),d0
00013D06 6B00 0000                  		bmi.w	loc_12460
00013D0A 5428 0024                  		addq.b	#2,$24(a0)
00013D0E 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00013D16 317C 43F6 0002             		move.w	#$43F6,2(a0)
00013D1C 0028 0004 0001             		ori.b	#4,1(a0)
00013D22 117C 0010 0019             		move.b	#$10,$19(a0)
00013D28 117C 0004 0018             		move.b	#4,$18(a0)
00013D2E 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00013D34 6600                       		bne.s	loc_123E2
00013D36 5828 0024                  		addq.b	#4,$24(a0)
00013D3A 317C 03F6 0002             		move.w	#$3F6,2(a0)
00013D40 117C 0001 0018             		move.b	#1,$18(a0)
00013D46 6000 0000                  		bra.w	loc_124DE
00013D4A                            ; ===========================================================================
00013D4A                            
00013D4A                            loc_123E2:
00013D4A 117C 0004 001A             		move.b	#4,$1A(a0)
00013D50 7000                       		moveq	#0,d0
00013D52 1028 0028                  		move.b	$28(a0),d0
00013D56 3200                       		move.w	d0,d1
00013D58 E648                       		lsr.w	#3,d0
00013D5A 0240 001E                  		andi.w	#$1E,d0
00013D5E 45FA 0000                  		lea	Obj63_Data(pc),a2
00013D62 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013D66 315A 0038                  		move.w	(a2)+,$38(a0)
00013D6A 315A 0030                  		move.w	(a2)+,$30(a0)
00013D6E 214A 003C                  		move.l	a2,$3C(a0)
00013D72 0241 000F                  		andi.w	#$F,d1
00013D76 E549                       		lsl.w	#2,d1
00013D78 1141 0038                  		move.b	d1,$38(a0)
00013D7C 117C 0004 003A             		move.b	#4,$3A(a0)
00013D82 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013D86 6700                       		beq.s	loc_1244C
00013D88 117C 0001 003B             		move.b	#1,$3B(a0)
00013D8E 4428 003A                  		neg.b	$3A(a0)
00013D92 7200                       		moveq	#0,d1
00013D94 1228 0038                  		move.b	$38(a0),d1
00013D98 D228 003A                  		add.b	$3A(a0),d1
00013D9C B228 0039                  		cmp.b	$39(a0),d1
00013DA0 6500                       		bcs.s	loc_12448
00013DA2 1001                       		move.b	d1,d0
00013DA4 7200                       		moveq	#0,d1
00013DA6 4A00                       		tst.b	d0
00013DA8 6A00                       		bpl.s	loc_12448
00013DAA 1228 0039                  		move.b	$39(a0),d1
00013DAE 5901                       		subq.b	#4,d1
00013DB0                            
00013DB0                            loc_12448:
00013DB0 1141 0038                  		move.b	d1,$38(a0)
00013DB4                            
00013DB4                            loc_1244C:
00013DB4 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00013DBA 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00013DC0 6100 0000                  		bsr.w	Obj63_ChangeDir
00013DC4 6000 0000                  		bra.w	loc_124B2
00013DC8                            ; ===========================================================================
00013DC8                            
00013DC8                            loc_12460:				; XREF: Obj63_Main
00013DC8 1140 002F                  		move.b	d0,$2F(a0)
00013DCC 0240 007F                  		andi.w	#$7F,d0
00013DD0 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013DD4 08F2 0000 0000             		bset	#0,(a2,d0.w)
00013DDA 6600 ABBE                  		bne.w	DeleteObject
00013DDE D040                       		add.w	d0,d0
00013DE0 0240 001E                  		andi.w	#$1E,d0
00013DE4 0640 0070                  		addi.w	#$70,d0
00013DE8 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00013DEE D4F2 0000                  		adda.w	(a2,d0.w),a2
00013DF2 321A                       		move.w	(a2)+,d1
00013DF4 2248                       		movea.l	a0,a1
00013DF6 6000                       		bra.s	Obj63_MakePtfms
00013DF8                            ; ===========================================================================
00013DF8                            
00013DF8                            Obj63_Loop:
00013DF8 6100 B2A6                  		bsr.w	SingleObjLoad
00013DFC 6600                       		bne.s	loc_124AA
00013DFE                            
00013DFE                            Obj63_MakePtfms:			; XREF: loc_12460
00013DFE 12BC 0063                  		move.b	#$63,0(a1)
00013E02 335A 0008                  		move.w	(a2)+,8(a1)
00013E06 335A 000C                  		move.w	(a2)+,$C(a1)
00013E0A 301A                       		move.w	(a2)+,d0
00013E0C 1340 0028                  		move.b	d0,$28(a1)
00013E10                            
00013E10                            loc_124AA:
00013E10 51C9 FFE6                  		dbf	d1,Obj63_Loop
00013E14                            
00013E14 588F                       		addq.l	#4,sp
00013E16 4E75                       		rts	
00013E18                            ; ===========================================================================
00013E18                            
00013E18                            loc_124B2:				; XREF: Obj63_Index
00013E18 7200                       		moveq	#0,d1
00013E1A 1228 0019                  		move.b	$19(a0),d1
00013E1E 4EB9 0000 854A             		jsr	(PlatformObject).l
00013E24 6000 0000                  		bra.w	sub_12502
00013E28                            ; ===========================================================================
00013E28                            
00013E28                            loc_124C2:				; XREF: Obj63_Index
00013E28 7200                       		moveq	#0,d1
00013E2A 1228 0019                  		move.b	$19(a0),d1
00013E2E 4EB9 0000 86BE             		jsr	(ExitPlatform).l
00013E34 3F28 0008                  		move.w	8(a0),-(sp)
00013E38 6100 0000                  		bsr.w	sub_12502
00013E3C 341F                       		move.w	(sp)+,d2
00013E3E 4EF9 0000 8C34             		jmp	(MvSonicOnPtfm2).l
00013E44                            ; ===========================================================================
00013E44                            
00013E44                            loc_124DE:				; XREF: Obj63_Index
00013E44 3038 FE04                  		move.w	($FFFFFE04).w,d0
00013E48 0240 0003                  		andi.w	#3,d0
00013E4C 6600                       		bne.s	loc_124FC
00013E4E 7201                       		moveq	#1,d1
00013E50 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013E54 6700                       		beq.s	loc_124F2
00013E56 4401                       		neg.b	d1
00013E58                            
00013E58                            loc_124F2:
00013E58 D328 001A                  		add.b	d1,$1A(a0)
00013E5C 0228 0003 001A             		andi.b	#3,$1A(a0)
00013E62                            
00013E62                            loc_124FC:
00013E62 588F                       		addq.l	#4,sp
00013E64 6000 D12E                  		bra.w	MarkObjGone
00013E68                            
00013E68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E68                            
00013E68                            
00013E68                            sub_12502:				; XREF: loc_124B2; loc_124C2
00013E68 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00013E6C 6700                       		beq.s	loc_12520
00013E6E 4A28 003B                  		tst.b	$3B(a0)
00013E72 6600                       		bne.s	loc_12520
00013E74 117C 0001 003B             		move.b	#1,$3B(a0)
00013E7A 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00013E80 4428 003A                  		neg.b	$3A(a0)
00013E84 6000                       		bra.s	loc_12534
00013E86                            ; ===========================================================================
00013E86                            
00013E86                            loc_12520:
00013E86 3028 0008                  		move.w	8(a0),d0
00013E8A B068 0034                  		cmp.w	$34(a0),d0
00013E8E 6600                       		bne.s	loc_1256A
00013E90 3028 000C                  		move.w	$C(a0),d0
00013E94 B068 0036                  		cmp.w	$36(a0),d0
00013E98 6600                       		bne.s	loc_1256A
00013E9A                            
00013E9A                            loc_12534:
00013E9A 7200                       		moveq	#0,d1
00013E9C 1228 0038                  		move.b	$38(a0),d1
00013EA0 D228 003A                  		add.b	$3A(a0),d1
00013EA4 B228 0039                  		cmp.b	$39(a0),d1
00013EA8 6500                       		bcs.s	loc_12552
00013EAA 1001                       		move.b	d1,d0
00013EAC 7200                       		moveq	#0,d1
00013EAE 4A00                       		tst.b	d0
00013EB0 6A00                       		bpl.s	loc_12552
00013EB2 1228 0039                  		move.b	$39(a0),d1
00013EB6 5901                       		subq.b	#4,d1
00013EB8                            
00013EB8                            loc_12552:
00013EB8 1141 0038                  		move.b	d1,$38(a0)
00013EBC 2268 003C                  		movea.l	$3C(a0),a1
00013EC0 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00013EC6 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00013ECC 6100 0000                  		bsr.w	Obj63_ChangeDir
00013ED0                            
00013ED0                            loc_1256A:
00013ED0 6100 AA5E                  		bsr.w	SpeedToPos
00013ED4 4E75                       		rts	
00013ED6                            ; End of function sub_12502
00013ED6                            
00013ED6                            
00013ED6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013ED6                            
00013ED6                            
00013ED6                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00013ED6 7000                       		moveq	#0,d0
00013ED8 343C FF00                  		move.w	#-$100,d2
00013EDC 3028 0008                  		move.w	8(a0),d0
00013EE0 9068 0034                  		sub.w	$34(a0),d0
00013EE4 6400                       		bcc.s	loc_12584
00013EE6 4440                       		neg.w	d0
00013EE8 4442                       		neg.w	d2
00013EEA                            
00013EEA                            loc_12584:
00013EEA 7200                       		moveq	#0,d1
00013EEC 363C FF00                  		move.w	#-$100,d3
00013EF0 3228 000C                  		move.w	$C(a0),d1
00013EF4 9268 0036                  		sub.w	$36(a0),d1
00013EF8 6400                       		bcc.s	loc_12598
00013EFA 4441                       		neg.w	d1
00013EFC 4443                       		neg.w	d3
00013EFE                            
00013EFE                            loc_12598:
00013EFE B240                       		cmp.w	d0,d1
00013F00 6500                       		bcs.s	loc_125C2
00013F02 3028 0008                  		move.w	8(a0),d0
00013F06 9068 0034                  		sub.w	$34(a0),d0
00013F0A 6700                       		beq.s	loc_125AE
00013F0C 48C0                       		ext.l	d0
00013F0E E180                       		asl.l	#8,d0
00013F10 81C1                       		divs.w	d1,d0
00013F12 4440                       		neg.w	d0
00013F14                            
00013F14                            loc_125AE:
00013F14 3140 0010                  		move.w	d0,$10(a0)
00013F18 3143 0012                  		move.w	d3,$12(a0)
00013F1C 4840                       		swap	d0
00013F1E 3140 000A                  		move.w	d0,$A(a0)
00013F22 4268 000E                  		clr.w	$E(a0)
00013F26 4E75                       		rts	
00013F28                            ; ===========================================================================
00013F28                            
00013F28                            loc_125C2:				; XREF: Obj63_ChangeDir
00013F28 3228 000C                  		move.w	$C(a0),d1
00013F2C 9268 0036                  		sub.w	$36(a0),d1
00013F30 6700                       		beq.s	loc_125D4
00013F32 48C1                       		ext.l	d1
00013F34 E181                       		asl.l	#8,d1
00013F36 83C0                       		divs.w	d0,d1
00013F38 4441                       		neg.w	d1
00013F3A                            
00013F3A                            loc_125D4:
00013F3A 3141 0012                  		move.w	d1,$12(a0)
00013F3E 3142 0010                  		move.w	d2,$10(a0)
00013F42 4841                       		swap	d1
00013F44 3141 000E                  		move.w	d1,$E(a0)
00013F48 4268 000A                  		clr.w	$A(a0)
00013F4C 4E75                       		rts	
00013F4E                            ; End of function Obj63_ChangeDir
00013F4E                            
00013F4E                            ; ===========================================================================
00013F4E 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00013F50 0000                       		dc.w word_12610-Obj63_Data
00013F52 0000                       		dc.w word_12628-Obj63_Data
00013F54 0000                       		dc.w word_1263C-Obj63_Data
00013F56 0000                       		dc.w word_12650-Obj63_Data
00013F58 0000                       		dc.w word_12668-Obj63_Data
00013F5A 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00013F6A 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00013F76 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00013F86 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00013F8E 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00013FA2 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00013FB6 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00013FCE 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00013FE2                            
00013FE2                            ; ---------------------------------------------------------------------------
00013FE2                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013FE2                            ; ---------------------------------------------------------------------------
00013FE2                            Map_obj63:
00013FE2                            	include "_maps\obj63.asm"
00013FE2                            ; ---------------------------------------------------------------------------
00013FE2                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013FE2                            ; ---------------------------------------------------------------------------
00013FE2 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00013FE6 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00013FEA 0000                       		dc.w byte_1269E-Map_obj63
00013FEC 01                         byte_12686:	dc.b 1
00013FED F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00013FF2 01                         byte_1268C:	dc.b 1
00013FF3 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00013FF8 01                         byte_12692:	dc.b 1
00013FF9 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00013FFE 01                         byte_12698:	dc.b 1
00013FFF F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00014004 01                         byte_1269E:	dc.b 1
00014005 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
0001400A                            		even
0001400A                            		even
0001400A                            
0001400A                            ; ===========================================================================
0001400A                            ; ---------------------------------------------------------------------------
0001400A                            ; Object 64 - bubbles (LZ)
0001400A                            ; ---------------------------------------------------------------------------
0001400A                            
0001400A                            Obj64:					; XREF: Obj_Index
0001400A 7000                       		moveq	#0,d0
0001400C 1028 0024                  		move.b	$24(a0),d0
00014010 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00014014 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00014018                            ; ===========================================================================
00014018 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
0001401A 0000                       		dc.w Obj64_Animate-Obj64_Index
0001401C 0000                       		dc.w Obj64_ChkWater-Obj64_Index
0001401E 0000                       		dc.w Obj64_Display2-Obj64_Index
00014020 0000                       		dc.w Obj64_Delete3-Obj64_Index
00014022 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00014024                            ; ===========================================================================
00014024                            
00014024                            Obj64_Main:				; XREF: Obj64_Index
00014024 5428 0024                  		addq.b	#2,$24(a0)
00014028 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00014030 317C 8348 0002             		move.w	#$8348,2(a0)
00014036 117C 0084 0001             		move.b	#$84,1(a0)
0001403C 117C 0010 0019             		move.b	#$10,$19(a0)
00014042 117C 0001 0018             		move.b	#1,$18(a0)
00014048 1028 0028                  		move.b	$28(a0),d0	; get object type
0001404C 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
0001404E 5028 0024                  		addq.b	#8,$24(a0)
00014052 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00014056 1140 0032                  		move.b	d0,$32(a0)
0001405A 1140 0033                  		move.b	d0,$33(a0)
0001405E 117C 0006 001C             		move.b	#6,$1C(a0)
00014064 6000 0000                  		bra.w	Obj64_BblMaker
00014068                            ; ===========================================================================
00014068                            
00014068                            Obj64_Bubble:				; XREF: Obj64_Main
00014068 1140 001C                  		move.b	d0,$1C(a0)
0001406C 3168 0008 0030             		move.w	8(a0),$30(a0)
00014072 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00014078 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001407E 1140 0026                  		move.b	d0,$26(a0)
00014082                            
00014082                            Obj64_Animate:				; XREF: Obj64_Index
00014082 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00014088 4EB9 0000 B9AA             		jsr	AnimateSprite
0001408E 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00014094 6600                       		bne.s	Obj64_ChkWater
00014096 117C 0001 002E             		move.b	#1,$2E(a0)
0001409C                            
0001409C                            Obj64_ChkWater:				; XREF: Obj64_Index
0001409C 3038 F646                  		move.w	($FFFFF646).w,d0
000140A0 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
000140A4 6400                       		bcc.s	Obj64_Burst	; if yes, branch
000140A6 3038 F60E                  		move.w	(v_pocketbottom).w,d0
000140AA B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
000140AE 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
000140B0 3028 0008                  		move.w	8(a0),d0
000140B4 9078 F610                  		sub.w	(v_pocketx).w,d0
000140B8 0640 0060                  		addi.w	#$60,d0
000140BC 6B00                       		bmi.s	Obj64_Wobble
000140BE 0C40 00C0                  		cmpi.w	#$C0,d0
000140C2 6400                       		bcc.s	Obj64_Wobble
000140C4                            
000140C4                            Obj64_Burst:				; XREF: Obj64_Wobble
000140C4 117C 0006 0024             		move.b	#6,$24(a0)
000140CA 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
000140CE 6000 0000                  		bra.w	Obj64_Display2
000140D2                            ; ===========================================================================
000140D2                            
000140D2                            Obj64_Wobble:				; XREF: Obj64_ChkWater
000140D2 1028 0026                  		move.b	$26(a0),d0
000140D6 5228 0026                  		addq.b	#1,$26(a0)
000140DA 0240 007F                  		andi.w	#$7F,d0
000140DE 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000140E4 1031 0000                  		move.b	(a1,d0.w),d0
000140E8 4880                       		ext.w	d0
000140EA D068 0030                  		add.w	$30(a0),d0
000140EE 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
000140F2 4A28 002E                  		tst.b	$2E(a0)
000140F6 6700                       		beq.s	Obj64_Display
000140F8 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
000140FC 6700                       		beq.s	Obj64_Display	; if not, branch
000140FE                            
000140FE 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00014102 303C 00AD                  		move.w	#$AD,d0
00014106 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
0001410C 43F8 D000                  		lea	($FFFFD000).w,a1
00014110 4269 0010                  		clr.w	$10(a1)
00014114 4269 0012                  		clr.w	$12(a1)
00014118 4269 0020                  		clr.w	$20(a1)
0001411C 137C 0015 001C             		move.b	#$15,$1C(a1)
00014122 337C 0023 003E             		move.w	#$23,$3E(a1)
00014128 137C 0000 003C             		move.b	#0,$3C(a1)
0001412E 08A9 0005 0022             		bclr	#5,$22(a1)
00014134 08A9 0004 0022             		bclr	#4,$22(a1)
0001413A 0829 0002 0022             		btst	#2,$22(a1)
00014140 6700 FF82                  		beq.w	Obj64_Burst
00014144 08A9 0002 0022             		bclr	#2,$22(a1)
0001414A 137C 0013 0016             		move.b	#$13,$16(a1)
00014150 137C 0009 0017             		move.b	#9,$17(a1)
00014156 5B69 000C                  		subq.w	#5,$C(a1)
0001415A 6000 FF68                  		bra.w	Obj64_Burst
0001415E                            ; ===========================================================================
0001415E                            
0001415E                            Obj64_Display:				; XREF: Obj64_Wobble
0001415E 6100 A7D0                  		bsr.w	SpeedToPos
00014162 4A28 0001                  		tst.b	1(a0)
00014166 6A00                       		bpl.s	Obj64_Delete
00014168 4EFA A7E0                  		jmp	DisplaySprite
0001416C                            ; ===========================================================================
0001416C                            
0001416C                            Obj64_Delete:
0001416C 4EFA A82C                  		jmp	DeleteObject
00014170                            ; ===========================================================================
00014170                            
00014170                            Obj64_Display2:				; XREF: Obj64_Index
00014170 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00014176 4EB9 0000 B9AA             		jsr	AnimateSprite
0001417C 4A28 0001                  		tst.b	1(a0)
00014180 6A00                       		bpl.s	Obj64_Delete2
00014182 4EFA A7C6                  		jmp	DisplaySprite
00014186                            ; ===========================================================================
00014186                            
00014186                            Obj64_Delete2:
00014186 4EFA A812                  		jmp	DeleteObject
0001418A                            ; ===========================================================================
0001418A                            
0001418A                            Obj64_Delete3:				; XREF: Obj64_Index
0001418A 6000 A80E                  		bra.w	DeleteObject
0001418E                            ; ===========================================================================
0001418E                            
0001418E                            Obj64_BblMaker:				; XREF: Obj64_Index
0001418E 4A68 0036                  		tst.w	$36(a0)
00014192 6600                       		bne.s	loc_12874
00014194 3038 F646                  		move.w	($FFFFF646).w,d0
00014198 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
0001419C 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
000141A0 3038 F60E                  		move.w	(v_pocketbottom).w,d0
000141A4 B068 000C                  		cmp.w	$C(a0),d0
000141A8 6500                       		bcs.s	Obj64_Cont
000141AA 3028 0008                  		move.w	8(a0),d0
000141AE 9078 F610                  		sub.w	(v_pocketx).w,d0
000141B2 0640 0060                  		addi.w	#$60,d0
000141B6 6B00                       		bmi.s	Obj64_Cont
000141B8 0C40 00C0                  		cmpi.w	#$C0,d0
000141BC 6400                       		bcc.s	Obj64_Cont
000141BE 6000 0000                  		bra.w	Obj64_ChkDel
000141C2                            
000141C2                            Obj64_Cont:
000141C2 4A28 0001                  		tst.b	1(a0)
000141C6 6A00 0000                  		bpl.w	Obj64_ChkDel
000141CA 5368 0038                  		subq.w	#1,$38(a0)
000141CE 6A00 0000                  		bpl.w	loc_12914
000141D2 317C 0001 0036             		move.w	#1,$36(a0)
000141D8                            
000141D8                            loc_1283A:
000141D8 4EB9 0000 29A6             		jsr	(RandomNumber).l
000141DE 3200                       		move.w	d0,d1
000141E0 0240 0007                  		andi.w	#7,d0
000141E4 0C40 0006                  		cmpi.w	#6,d0
000141E8 64EE                       		bcc.s	loc_1283A
000141EA                            
000141EA 1140 0034                  		move.b	d0,$34(a0)
000141EE 0241 000C                  		andi.w	#$C,d1
000141F2 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
000141F8 D2C1                       		adda.w	d1,a1
000141FA 2149 003C                  		move.l	a1,$3C(a0)
000141FE 5328 0032                  		subq.b	#1,$32(a0)
00014202 6A00                       		bpl.s	loc_12872
00014204 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001420A 08E8 0007 0036             		bset	#7,$36(a0)
00014210                            
00014210                            loc_12872:
00014210 6000                       		bra.s	loc_1287C
00014212                            ; ===========================================================================
00014212                            
00014212                            loc_12874:				; XREF: Obj64_BblMaker
00014212 5368 0038                  		subq.w	#1,$38(a0)
00014216 6A00 0000                  		bpl.w	loc_12914
0001421A                            
0001421A                            loc_1287C:
0001421A 4EB9 0000 29A6             		jsr	(RandomNumber).l
00014220 0240 001F                  		andi.w	#$1F,d0
00014224 3140 0038                  		move.w	d0,$38(a0)
00014228 6100 AE76                  		bsr.w	SingleObjLoad
0001422C 6600                       		bne.s	loc_128F8
0001422E 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00014232 3368 0008 0008             		move.w	8(a0),8(a1)
00014238 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001423E 0240 000F                  		andi.w	#$F,d0
00014242 5140                       		subq.w	#8,d0
00014244 D169 0008                  		add.w	d0,8(a1)
00014248 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001424E 7000                       		moveq	#0,d0
00014250 1028 0034                  		move.b	$34(a0),d0
00014254 2468 003C                  		movea.l	$3C(a0),a2
00014258 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
0001425E 0828 0007 0036             		btst	#7,$36(a0)
00014264 6700                       		beq.s	loc_128F8
00014266 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001426C 0240 0003                  		andi.w	#3,d0
00014270 6600                       		bne.s	loc_128E4
00014272 08E8 0006 0036             		bset	#6,$36(a0)
00014278 6600                       		bne.s	loc_128F8
0001427A 137C 0002 0028             		move.b	#2,$28(a1)
00014280                            
00014280                            loc_128E4:
00014280 4A28 0034                  		tst.b	$34(a0)
00014284 6600                       		bne.s	loc_128F8
00014286 08E8 0006 0036             		bset	#6,$36(a0)
0001428C 6600                       		bne.s	loc_128F8
0001428E 137C 0002 0028             		move.b	#2,$28(a1)
00014294                            
00014294                            loc_128F8:
00014294 5328 0034                  		subq.b	#1,$34(a0)
00014298 6A00                       		bpl.s	loc_12914
0001429A 4EB9 0000 29A6             		jsr	(RandomNumber).l
000142A0 0240 007F                  		andi.w	#$7F,d0
000142A4 0640 0080                  		addi.w	#$80,d0
000142A8 D168 0038                  		add.w	d0,$38(a0)
000142AC 4268 0036                  		clr.w	$36(a0)
000142B0                            
000142B0                            loc_12914:
000142B0 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000142B6 4EB9 0000 B9AA             		jsr	AnimateSprite
000142BC                            
000142BC                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
000142BC 3028 0008                  		move.w	8(a0),d0
000142C0 0240 FF80                  		andi.w	#$FF80,d0
000142C4 3238 F700                  		move.w	($FFFFF700).w,d1
000142C8 0441 0080                  		subi.w	#$80,d1
000142CC 0241 FF80                  		andi.w	#$FF80,d1
000142D0 9041                       		sub.w	d1,d0
000142D2 0C40 0280                  		cmpi.w	#$280,d0
000142D6 6300                       		bls.s	Obj64_NoDel
000142D8 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000142DC 6700 A6BC                  		beq.w	DeleteObject		; if it's zero, don't remember object
000142E0 3440                       		movea.w	d0,a2	; load address into a2
000142E2 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000142E6 6000 A6B2                  		bra.w	DeleteObject	; and delete object
000142EA                            
000142EA                            Obj64_NoDel:	
000142EA 3038 F646                  		move.w	($FFFFF646).w,d0
000142EE B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
000142F2 6400                       		bcc.s	Obj64_UW	; if not, branch
000142F4 3038 F60E                  		move.w	(v_pocketbottom).w,d0
000142F8 B068 000C                  		cmp.w	$C(a0),d0
000142FC 6500 A64C                  		bcs.w	DisplaySprite
00014300 3028 0008                  		move.w	8(a0),d0
00014304 9078 F610                  		sub.w	(v_pocketx).w,d0
00014308 0640 0060                  		addi.w	#$60,d0
0001430C 6B00 A63C                  		bmi.w	DisplaySprite
00014310 0C40 00C0                  		cmpi.w	#$C0,d0
00014314 6400 A634                  		bcc.w	DisplaySprite
00014318                            
00014318                            Obj64_UW:
00014318 4E75                       		rts	
0001431A                            ; ===========================================================================
0001431A                            ; bubble production sequence
0001431A                            
0001431A                            ; 0 = small bubble, 1 =	large bubble
0001431A                            
0001431A 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
0001432C                            
0001432C                            ; ===========================================================================
0001432C                            
0001432C                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
0001432C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00014330 6B00                       		bmi.s	loc_12998
00014332 43F8 D000                  		lea	($FFFFD000).w,a1
00014336 3029 0008                  		move.w	8(a1),d0
0001433A 3228 0008                  		move.w	8(a0),d1
0001433E 0441 0010                  		subi.w	#$10,d1
00014342 B240                       		cmp.w	d0,d1
00014344 6400                       		bcc.s	loc_12998
00014346 0641 0020                  		addi.w	#$20,d1
0001434A B240                       		cmp.w	d0,d1
0001434C 6500                       		bcs.s	loc_12998
0001434E 3029 000C                  		move.w	$C(a1),d0
00014352 3228 000C                  		move.w	$C(a0),d1
00014356 B240                       		cmp.w	d0,d1
00014358 6400                       		bcc.s	loc_12998
0001435A 0641 0010                  		addi.w	#$10,d1
0001435E B240                       		cmp.w	d0,d1
00014360 6500                       		bcs.s	loc_12998
00014362 7001                       		moveq	#1,d0
00014364 4E75                       		rts	
00014366                            ; ===========================================================================
00014366                            
00014366                            loc_12998:
00014366 7000                       		moveq	#0,d0
00014368 4E75                       		rts	
0001436A                            ; ===========================================================================
0001436A                            Ani_obj64:
0001436A                            	include "_anim\obj64.asm"
0001436A                            ; ---------------------------------------------------------------------------
0001436A                            ; Animation script - bubbles (LZ)
0001436A                            ; ---------------------------------------------------------------------------
0001436A 0000                       		dc.w byte_129AA-Ani_obj64
0001436C 0000                       		dc.w byte_129B0-Ani_obj64
0001436E 0000                       		dc.w byte_129B6-Ani_obj64
00014370 0000                       		dc.w byte_129BE-Ani_obj64
00014372 0000                       		dc.w byte_129BE-Ani_obj64
00014374 0000                       		dc.w byte_129C0-Ani_obj64
00014376 0000                       		dc.w byte_129C6-Ani_obj64
00014378 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
0001437E 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00014384 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
0001438C 04FC                       byte_129BE:	dc.b 4,	$FC
0001438E 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00014394 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
0001439A 00                         		even
0001439A 00                         		even
0001439A                            
0001439A                            ; ---------------------------------------------------------------------------
0001439A                            ; Sprite mappings - bubbles (LZ)
0001439A                            ; ---------------------------------------------------------------------------
0001439A                            Map_obj64:
0001439A                            	include "_maps\obj64.asm"
0001439A                            bubmap:
0001439A 0000                       bubmap_0: 	dc.w bubmap_2E-bubmap
0001439C 0000                       bubmap_2: 	dc.w bubmap_34-bubmap
0001439E 0000                       bubmap_4: 	dc.w bubmap_3A-bubmap
000143A0 0000                       bubmap_6: 	dc.w bubmap_40-bubmap
000143A2 0000                       bubmap_8: 	dc.w bubmap_46-bubmap
000143A4 0000                       bubmap_A: 	dc.w bubmap_4C-bubmap
000143A6 0000                       bubmap_C: 	dc.w bubmap_52-bubmap
000143A8 0000                       bubmap_E: 	dc.w bubmap_58-bubmap
000143AA 0000                       bubmap_10: 	dc.w bubmap_6D-bubmap
000143AC 0000                       bubmap_12: 	dc.w bubmap_82-bubmap
000143AE 0000                       bubmap_14: 	dc.w bubmap_88-bubmap
000143B0 0000                       bubmap_16: 	dc.w bubmap_8E-bubmap
000143B2 0000                       bubmap_18: 	dc.w bubmap_94-bubmap
000143B4 0000                       bubmap_1A: 	dc.w bubmap_9A-bubmap
000143B6 0000                       bubmap_1C: 	dc.w bubmap_A0-bubmap
000143B8 0000                       bubmap_1E: 	dc.w bubmap_A6-bubmap
000143BA 0000                       bubmap_20: 	dc.w bubmap_AC-bubmap
000143BC 0000                       bubmap_22: 	dc.w bubmap_B2-bubmap
000143BE 0000                       bubmap_24: 	dc.w bubmap_B8-bubmap
000143C0 0000                       bubmap_26: 	dc.w bubmap_BE-bubmap
000143C2 0000                       bubmap_28: 	dc.w bubmap_C4-bubmap
000143C4 0000                       bubmap_2A: 	dc.w bubmap_CA-bubmap
000143C6 0000                       bubmap_2C: 	dc.w bubmap_D0-bubmap
000143C8 01                         bubmap_2E: 	dc.b $1
000143C9 FC00 6000 FC               	dc.b $FC, $0, $60, $0, $FC
000143CE 01                         bubmap_34: 	dc.b $1
000143CF FC00 6001 FC               	dc.b $FC, $0, $60, $1, $FC
000143D4 01                         bubmap_3A: 	dc.b $1
000143D5 FC00 6002 FC               	dc.b $FC, $0, $60, $2, $FC
000143DA 01                         bubmap_40: 	dc.b $1
000143DB F805 6003 F8               	dc.b $F8, $5, $60, $3, $F8
000143E0 01                         bubmap_46: 	dc.b $1
000143E1 F805 6007 F8               	dc.b $F8, $5, $60, $7, $F8
000143E6 01                         bubmap_4C: 	dc.b $1
000143E7 F40A 600B F4               	dc.b $F4, $A, $60, $B, $F4
000143EC 01                         bubmap_52: 	dc.b $1
000143ED F00F 6014 F0               	dc.b $F0, $F, $60, $14, $F0
000143F2 04                         bubmap_58: 	dc.b $4
000143F3 F005 6024 F0               	dc.b $F0, $5, $60, $24, $F0
000143F8 F005 6824 00               	dc.b $F0, $5, $68, $24, $0
000143FD 0005 7024 F0               	dc.b $0, $5, $70, $24, $F0
00014402 0005 7824 00               	dc.b $0, $5, $78, $24, $0
00014407 04                         bubmap_6D: 	dc.b $4
00014408 F005 6028 F0               	dc.b $F0, $5, $60, $28, $F0
0001440D F005 6828 00               	dc.b $F0, $5, $68, $28, $0
00014412 0005 7028 F0               	dc.b $0, $5, $70, $28, $F0
00014417 0005 7828 00               	dc.b $0, $5, $78, $28, $0
0001441C 01                         bubmap_82: 	dc.b $1
0001441D F406 002C F8               	dc.b $F4, $6, $0, $2C, $F8
00014422 01                         bubmap_88: 	dc.b $1
00014423 F406 0032 F8               	dc.b $F4, $6, $0, $32, $F8
00014428 01                         bubmap_8E: 	dc.b $1
00014429 F406 0038 F8               	dc.b $F4, $6, $0, $38, $F8
0001442E 01                         bubmap_94: 	dc.b $1
0001442F F406 003E F8               	dc.b $F4, $6, $0, $3E, $F8
00014434 01                         bubmap_9A: 	dc.b $1
00014435 F406 2044 F8               	dc.b $F4, $6, $20, $44, $F8
0001443A 01                         bubmap_A0: 	dc.b $1
0001443B F406 204A F8               	dc.b $F4, $6, $20, $4A, $F8
00014440 01                         bubmap_A6: 	dc.b $1
00014441 F406 2050 F8               	dc.b $F4, $6, $20, $50, $F8
00014446 01                         bubmap_AC: 	dc.b $1
00014447 F406 2056 F8               	dc.b $F4, $6, $20, $56, $F8
0001444C 01                         bubmap_B2: 	dc.b $1
0001444D F406 205C F8               	dc.b $F4, $6, $20, $5C, $F8
00014452 01                         bubmap_B8: 	dc.b $1
00014453 F406 2062 F8               	dc.b $F4, $6, $20, $62, $F8
00014458 01                         bubmap_BE: 	dc.b $1
00014459 F805 6068 F8               	dc.b $F8, $5, $60, $68, $F8
0001445E 01                         bubmap_C4: 	dc.b $1
0001445F F805 606C F8               	dc.b $F8, $5, $60, $6C, $F8
00014464 01                         bubmap_CA: 	dc.b $1
00014465 F805 6070 F8               	dc.b $F8, $5, $60, $70, $F8
0001446A 00                         bubmap_D0: 	dc.b $0
0001446C 00                         	even
0001446C 00                         	even
0001446C                            
0001446C                            ; ===========================================================================
0001446C                            ; ---------------------------------------------------------------------------
0001446C                            ; Object 65 - waterfalls (LZ)
0001446C                            ; ---------------------------------------------------------------------------
0001446C                            
0001446C                            Obj65:					; XREF: Obj_Index
0001446C 7000                       		moveq	#0,d0
0001446E 1028 0024                  		move.b	$24(a0),d0
00014472 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00014476 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
0001447A                            ; ===========================================================================
0001447A 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
0001447C 0000                       		dc.w Obj65_Animate-Obj65_Index
0001447E 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00014480 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00014482 0000                       		dc.w loc_12B36-Obj65_Index
00014484                            ; ===========================================================================
00014484                            
00014484                            Obj65_Main:				; XREF: Obj65_Index
00014484 5828 0024                  		addq.b	#4,$24(a0)
00014488 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00014490 317C 4259 0002             		move.w	#$4259,2(a0)
00014496 0028 0004 0001             		ori.b	#4,1(a0)
0001449C 117C 0018 0019             		move.b	#$18,$19(a0)
000144A2 117C 0001 0018             		move.b	#1,$18(a0)
000144A8 1028 0028                  		move.b	$28(a0),d0	; get object type
000144AC 6A00                       		bpl.s	loc_12AE6
000144AE 08E8 0007 0002             		bset	#7,2(a0)
000144B4                            
000144B4                            loc_12AE6:
000144B4 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
000144B8 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000144BC 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000144C0 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000144C2 4228 0018                  		clr.b	$18(a0)
000144C6 5528 0024                  		subq.b	#2,$24(a0)
000144CA 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
000144D0 6700                       		beq.s	loc_12B0A	; if not, branch
000144D2 117C 0006 0024             		move.b	#6,$24(a0)
000144D8                            
000144D8                            loc_12B0A:
000144D8 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
000144DE 6700                       		beq.s	Obj65_Animate	; if not, branch
000144E0 117C 0008 0024             		move.b	#8,$24(a0)
000144E6                            
000144E6                            Obj65_Animate:				; XREF: Obj65_Index
000144E6 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000144EC 4EB9 0000 B9AA             		jsr	AnimateSprite
000144F2                            
000144F2                            Obj65_ChkDel:				; XREF: Obj65_Index
000144F2 6000 CAA0                  		bra.w	MarkObjGone
000144F6                            ; ===========================================================================
000144F6                            
000144F6                            Obj65_FixHeight:			; XREF: Obj65_Index
000144F6 3038 F646                  		move.w	($FFFFF646).w,d0
000144FA 0440 0010                  		subi.w	#$10,d0
000144FE 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00014502 60E2                       		bra.s	Obj65_Animate
00014504                            ; ===========================================================================
00014504                            
00014504                            loc_12B36:				; XREF: Obj65_Index
00014504 08A8 0007 0002             		bclr	#7,2(a0)
0001450A 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00014510 6600                       		bne.s	Obj65_Animate2
00014512 08E8 0007 0002             		bset	#7,2(a0)
00014518                            
00014518                            Obj65_Animate2:
00014518 60CC                       		bra.s	Obj65_Animate
0001451A                            ; ===========================================================================
0001451A                            Ani_obj65:
0001451A                            	include "_anim\obj65.asm"
0001451A                            ; ---------------------------------------------------------------------------
0001451A                            ; Animation script - waterfall (LZ)
0001451A                            ; ---------------------------------------------------------------------------
0001451A 0000                       		dc.w byte_12B4E-Ani_obj65
0001451C 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00014522 00                         		even
00014522 00                         		even
00014522                            
00014522                            ; ---------------------------------------------------------------------------
00014522                            ; Sprite mappings - waterfalls (LZ)
00014522                            ; ---------------------------------------------------------------------------
00014522                            Map_obj65:
00014522                            	include "_maps\obj65.asm"
00014522                            ; ---------------------------------------------------------------------------
00014522                            ; Sprite mappings - waterfalls (LZ)
00014522                            ; ---------------------------------------------------------------------------
00014522 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00014526 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
0001452A 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
0001452E 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00014532 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00014536 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
0001453A 01                         byte_12B6C:	dc.b 1
0001453B F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014540 02                         byte_12B72:	dc.b 2
00014541 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014546 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
0001454B 02                         byte_12B7D:	dc.b 2
0001454C F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014551 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014556 01                         byte_12B88:	dc.b 1
00014557 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
0001455C 02                         byte_12B8E:	dc.b 2
0001455D F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014562 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014567 01                         byte_12B99:	dc.b 1
00014568 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
0001456D 01                         byte_12B9F:	dc.b 1
0001456E F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014573 01                         byte_12BA5:	dc.b 1
00014574 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014579 02                         byte_12BAB:	dc.b 2
0001457A F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
0001457F 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014584 02                         byte_12BB6:	dc.b 2
00014585 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
0001458A F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
0001458F 02                         byte_12BC1:	dc.b 2
00014590 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014595 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
0001459A 02                         byte_12BCC:	dc.b 2
0001459B F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
000145A0 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
000145A6 00                         		even
000145A6 00                         		even
000145A6                            
000145A6                            ; ===========================================================================
000145A6                            ; ---------------------------------------------------------------------------
000145A6                            ; Object 01 - Sonic
000145A6                            ; ---------------------------------------------------------------------------
000145A6                            
000145A6                            Obj01:					; XREF: Obj_Index
000145A6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000145AA 6700                       		beq.s	Obj01_Normal	; if not, branch
000145AC 4EF9 0000 0000             		jmp	DebugMode
000145B2                            ; ===========================================================================
000145B2                            
000145B2                            Obj01_Normal:
000145B2 7000                       		moveq	#0,d0
000145B4 1028 0024                  		move.b	$24(a0),d0
000145B8 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000145BC 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
000145C0                            ; ===========================================================================
000145C0 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
000145C2 0000                       		dc.w Obj01_Control-Obj01_Index
000145C4 0000                       		dc.w Obj01_Hurt-Obj01_Index
000145C6 0000                       		dc.w Obj01_Death-Obj01_Index
000145C8 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
000145CA 0000                       		dc.w Sonic_Drowned-Obj01_Index
000145CC                            ;===========================================================================
000145CC                            
000145CC                            Obj01_Main:				; XREF: Obj01_Index
000145CC 5428 0024                  		addq.b	#2,$24(a0)
000145D0 117C 0013 0016             		move.b	#$13,$16(a0)
000145D6 117C 0009 0017             		move.b	#9,$17(a0)
000145DC 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000145E4 317C 0780 0002             		move.w	#$780,2(a0)
000145EA 117C 0002 0018             		move.b	#2,$18(a0)
000145F0 117C 0018 0019             		move.b	#$18,$19(a0)
000145F6 117C 0004 0001             		move.b	#4,1(a0)
000145FC 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00014602 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00014608 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
0001460E                            
0001460E                            Obj01_Control:				; XREF: Obj01_Index
0001460E 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00014612 6700                       		beq.s	loc_12C58	; if not, branch
00014614 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
0001461A 6700                       		beq.s	loc_12C58	; if not, branch
0001461C 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00014622 4238 F7CC                  		clr.b	($FFFFF7CC).w
00014626 4E75                       		rts	
00014628                            ; ===========================================================================
00014628                            
00014628                            loc_12C58:
00014628 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
0001462C 6600                       		bne.s	loc_12C64	; if yes, branch
0001462E 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00014634                            
00014634                            loc_12C64:
00014634 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
0001463A 6600                       		bne.s	loc_12C7E	; if yes, branch
0001463C 7000                       		moveq	#0,d0
0001463E 1028 0022                  		move.b	$22(a0),d0
00014642 0240 0006                  		andi.w	#6,d0
00014646 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
0001464A 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
0001464E                            
0001464E                            loc_12C7E:
0001464E 6100                       		bsr.s	Sonic_Display
00014650 6100 0000                  		bsr.w	Sonic_RecordPos
00014654 6100 0000                  		bsr.w	Sonic_Water
00014658 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
0001465E 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00014664 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014668 6700                       		beq.s	loc_12CA6
0001466A 4A28 001C                  		tst.b	$1C(a0)
0001466E 6600                       		bne.s	loc_12CA6
00014670 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00014676                            
00014676                            loc_12CA6:
00014676 6100 0000                  		bsr.w	Sonic_Animate
0001467A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001467E 6B00                       		bmi.s	loc_12CB6
00014680 4EB9 0000 0000             		jsr	TouchResponse
00014686                            
00014686                            loc_12CB6:
00014686 6100 0000                  		bsr.w	Sonic_Loops
0001468A 6100 0000                  		bsr.w	LoadSonicDynPLC
0001468E 4E75                       		rts	
00014690                            ; ===========================================================================
00014690 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00014692 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00014694 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00014696 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00014698                            ; ---------------------------------------------------------------------------
00014698                            ; Music	to play	after invincibility wears off
00014698                            ; ---------------------------------------------------------------------------
00014698                            MusicList2:	incbin	misc\muslist2.bin
0001469E                            		even
0001469E                            ; ===========================================================================
0001469E                            
0001469E                            Sonic_Display:				; XREF: loc_12C7E
0001469E 3028 0030                  		move.w	$30(a0),d0
000146A2 6700                       		beq.s	Obj01_Display
000146A4 5368 0030                  		subq.w	#1,$30(a0)
000146A8 E648                       		lsr.w	#3,d0
000146AA 6400                       		bcc.s	Obj01_ChkInvin
000146AC                            
000146AC                            Obj01_Display:
000146AC 4EBA A29C                  		jsr	DisplaySprite
000146B0                            
000146B0                            Obj01_ChkInvin:
000146B0 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000146B4 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
000146B6 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
000146BA 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
000146BC 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
000146C0 6600                       		bne.s	Obj01_ChkShoes
000146C2 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000146C6 6600                       		bne.s	Obj01_RmvInvin
000146C8 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000146CE 6500                       		bcs.s	Obj01_RmvInvin
000146D0 7000                       		moveq	#0,d0
000146D2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000146D6 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ3
000146DC 6600                       		bne.s	Obj01_PlayMusic
000146DE 7005                       		moveq	#5,d0		; play SBZ music
000146E0                            
000146E0                            Obj01_PlayMusic:
000146E0 43F9 0001 4698             		lea	(MusicList2).l,a1
000146E6 1031 0000                  		move.b	(a1,d0.w),d0
000146EA 4EB9 0000 11F0             		jsr	(PlaySound).l	; play normal music
000146F0                            
000146F0                            Obj01_RmvInvin:
000146F0 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
000146F6                            
000146F6                            Obj01_ChkShoes:
000146F6 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
000146FA 6700                       		beq.s	Obj01_ExitChk	; if not, branch
000146FC 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00014700 6700                       		beq.s	Obj01_ExitChk
00014702 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00014706 6600                       		bne.s	Obj01_ExitChk
00014708 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001470E 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00014714 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001471A 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00014720 303C 00E3                  		move.w	#$E3,d0
00014724 4EF9 0000 11F0             		jmp	(PlaySound).l	; run music at normal speed
0001472A                            ; ===========================================================================
0001472A                            
0001472A                            Obj01_ExitChk:
0001472A 4E75                       		rts	
0001472C                            
0001472C                            ; ---------------------------------------------------------------------------
0001472C                            ; Subroutine to	record Sonic's previous positions for invincibility stars
0001472C                            ; ---------------------------------------------------------------------------
0001472C                            
0001472C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001472C                            
0001472C                            
0001472C                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
0001472C 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014730 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014734 43F1 0000                  		lea	(a1,d0.w),a1
00014738 32E8 0008                  		move.w	8(a0),(a1)+
0001473C 32E8 000C                  		move.w	$C(a0),(a1)+
00014740 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00014744 4E75                       		rts	
00014746                            ; End of function Sonic_RecordPos
00014746                            
00014746                            ; ---------------------------------------------------------------------------
00014746                            ; Subroutine for Sonic when he's underwater
00014746                            ; ---------------------------------------------------------------------------
00014746                            
00014746                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014746                            
00014746                            
00014746                            Sonic_Water:				; XREF: loc_12C7E
00014746 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0001474C 6700                       		beq.s	Obj01_InWater	; if yes, branch
0001474E                            
0001474E                            locret_12D80:
0001474E 4E75                       		rts	
00014750                            ; ===========================================================================
00014750                            
00014750                            Obj01_InWater:
00014750 3038 F646                  		move.w	($FFFFF646).w,d0
00014754 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00014758 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
0001475A 4A38 F612                  		tst.b	(f_insidepocket).w
0001475E 6600                       		bne.s	Obj01_OutWater
00014760 08E8 0006 0022             		bset	#6,$22(a0)
00014766 66E6                       		bne.s	locret_12D80
00014768 6100 0000                  		bsr.w	ResumeMusic
0001476C 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00014772 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00014778 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
0001477E 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00014784 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
0001478A E0E8 0010                  		asr	$10(a0)
0001478E E0E8 0012                  		asr	$12(a0)
00014792 E0E8 0012                  		asr	$12(a0)
00014796 67B6                       		beq.s	locret_12D80
00014798 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001479E 303C 00AA                  		move.w	#$AA,d0
000147A2 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play splash sound
000147A8                            ; ===========================================================================
000147A8                            
000147A8                            Obj01_OutWater:
000147A8 08A8 0006 0022             		bclr	#6,$22(a0)
000147AE 679E                       		beq.s	locret_12D80
000147B0 6100 0000                  		bsr.w	ResumeMusic
000147B4 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000147BA 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000147C0 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000147C6 E1E8 0012                  		asl	$12(a0)
000147CA 6700 FF82                  		beq.w	locret_12D80
000147CE 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000147D4 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
000147DA 6E00                       		bgt.s	loc_12E0E
000147DC 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
000147E2                            
000147E2                            loc_12E0E:
000147E2 303C 00AA                  		move.w	#$AA,d0
000147E6 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play splash sound
000147EC                            ; End of function Sonic_Water
000147EC                            
000147EC                            ; ===========================================================================
000147EC                            ; ---------------------------------------------------------------------------
000147EC                            ; Modes	for controlling	Sonic
000147EC                            ; ---------------------------------------------------------------------------
000147EC                            
000147EC                            Obj01_MdNormal:				; XREF: Obj01_Modes
000147EC 6100 0000                  		bsr.w	Sonic_Jump
000147F0 6100 0000                  		bsr.w	Sonic_SlopeResist
000147F4 6100 0000                  		bsr.w	Sonic_Move
000147F8 6100 0000                  		bsr.w	Sonic_Roll
000147FC 6100 0000                  		bsr.w	Sonic_LevelBound
00014800 4EBA A12E                  		jsr	SpeedToPos
00014804 6100 0000                  		bsr.w	Sonic_AnglePos
00014808 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001480C 4E75                       		rts	
0001480E                            ; ===========================================================================
0001480E                            
0001480E                            Obj01_MdJump:				; XREF: Obj01_Modes
0001480E 6100 0000                  		bsr.w	Sonic_JumpHeight
00014812 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00014816 6100 0000                  		bsr.w	Sonic_LevelBound
0001481A 4EBA A0F4                  		jsr	ObjectFall
0001481E 0828 0006 0022             		btst	#6,$22(a0)
00014824 6700                       		beq.s	loc_12E5C
00014826 0468 0028 0012             		subi.w	#$28,$12(a0)
0001482C                            
0001482C                            loc_12E5C:
0001482C 6100 0000                  		bsr.w	Sonic_JumpAngle
00014830 6100 0000                  		bsr.w	Sonic_Floor
00014834 0C38 0030 F5E2             		cmpi.b	#$30,(SonimeSST+sonime_airtimer).w
0001483A 6600                       		bne.s	@addtimer
0001483C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00014842 6300                       		bls.s	@done
00014844 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w
0001484A 6700                       		beq.s	@done
0001484C 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00014852 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
00014858 6000                       		bra.s	@done
0001485A                            
0001485A                            
0001485A                            	@addtimer:
0001485A 5238 F5E2                  		addi.b	#1,(SonimeSST+sonime_airtimer).w
0001485E 4A38 D012                  		tst.b	($FFFFD012).w
00014862 6A00                       		bpl.s	@done
00014864 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
00014868                            
00014868                            	@done:
00014868 4E75                       		rts	
0001486A                            ; ===========================================================================
0001486A                            
0001486A                            Obj01_MdRoll:				; XREF: Obj01_Modes
0001486A 6100 0000                  		bsr.w	Sonic_Jump
0001486E 6100 0000                  		bsr.w	Sonic_RollRepel
00014872 6100 0000                  		bsr.w	Sonic_RollSpeed
00014876 6100 0000                  		bsr.w	Sonic_LevelBound
0001487A 4EBA A0B4                  		jsr	SpeedToPos
0001487E 6100 0000                  		bsr.w	Sonic_AnglePos
00014882 6100 0000                  		bsr.w	Sonic_SlopeRepel
00014886 4E75                       		rts	
00014888                            ; ===========================================================================
00014888                            
00014888                            Obj01_MdJump2:				; XREF: Obj01_Modes
00014888 6100 0000                  		bsr.w	Sonic_JumpHeight
0001488C 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00014890 6100 0000                  		bsr.w	Sonic_LevelBound
00014894 4EBA A07A                  		jsr	ObjectFall
00014898 0828 0006 0022             		btst	#6,$22(a0)
0001489E 6700                       		beq.s	loc_12EA6
000148A0 0468 0028 0012             		subi.w	#$28,$12(a0)
000148A6                            
000148A6                            loc_12EA6:
000148A6 6100 0000                  		bsr.w	Sonic_JumpAngle
000148AA 6100 0000                  		bsr.w	Sonic_Floor
000148AE 0C38 0040 F5E2             		cmpi.b	#$40,(SonimeSST+sonime_airtimer).w
000148B4 6600                       		bne.s	@addtimer
000148B6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000148BC 6300                       		bls.s	@done
000148BE 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w
000148C4 6700                       		beq.s	@done
000148C6 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
000148CC 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
000148D2 6000                       		bra.s	@done
000148D4                            
000148D4                            
000148D4                            	@addtimer:
000148D4 5238 F5E2                  		addi.b	#1,(SonimeSST+sonime_airtimer).w
000148D8 4A38 D012                  		tst.b	($FFFFD012).w
000148DC 6A00                       		bpl.s	@done
000148DE 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
000148E2                            
000148E2                            	@done:
000148E2 4E75                       		rts	
000148E4                            ; ---------------------------------------------------------------------------
000148E4                            ; Subroutine to	make Sonic walk/run
000148E4                            ; ---------------------------------------------------------------------------
000148E4                            
000148E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000148E4                            
000148E4                            
000148E4                            Sonic_Move:				; XREF: Obj01_MdNormal
000148E4 3C38 F760                  		move.w	($FFFFF760).w,d6
000148E8 3A38 F762                  		move.w	($FFFFF762).w,d5
000148EC 3838 F764                  		move.w	($FFFFF764).w,d4
000148F0 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000148F4 6600 0000                  		bne.w	loc_12FEE
000148F8 4A68 003E                  		tst.w	$3E(a0)
000148FC 6600 0000                  		bne.w	Obj01_ResetScr
00014900 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014906 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00014908 6100 0000                  		bsr.w	Sonic_MoveLeft
0001490C                            
0001490C                            Obj01_NotLeft:
0001490C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014912 6700                       		beq.s	Obj01_NotRight	; if not, branch
00014914 6100 0000                  		bsr.w	Sonic_MoveRight
00014918                            
00014918                            Obj01_NotRight:
00014918 1028 0026                  		move.b	$26(a0),d0
0001491C 0600 0020                  		addi.b	#$20,d0
00014920 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00014924 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00014928 4A68 0020                  		tst.w	$20(a0)		; is Sonic moving?
0001492C 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00014930 08A8 0005 0022             		bclr	#5,$22(a0)
00014936 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001493C 0828 0003 0022             		btst	#3,$22(a0)
00014942 6700                       		beq.s	Sonic_Balance
00014944 7000                       		moveq	#0,d0
00014946 1028 003D                  		move.b	$3D(a0),d0
0001494A ED48                       		lsl.w	#6,d0
0001494C 43F8 D000                  		lea	($FFFFD000).w,a1
00014950 43F1 0000                  		lea	(a1,d0.w),a1
00014954 4A29 0022                  		tst.b	$22(a1)
00014958 6B00                       		bmi.s	Sonic_LookUp
0001495A 7200                       		moveq	#0,d1
0001495C 1229 0019                  		move.b	$19(a1),d1
00014960 3401                       		move.w	d1,d2
00014962 D442                       		add.w	d2,d2
00014964 5942                       		subq.w	#4,d2
00014966 D268 0008                  		add.w	8(a0),d1
0001496A 9269 0008                  		sub.w	8(a1),d1
0001496E 0C41 0004                  		cmpi.w	#4,d1
00014972 6D00                       		blt.s	loc_12F6A
00014974 B242                       		cmp.w	d2,d1
00014976 6C00                       		bge.s	loc_12F5A
00014978 6000                       		bra.s	Sonic_LookUp
0001497A                            ; ===========================================================================
0001497A                            
0001497A                            Sonic_Balance:
0001497A 4EB9 0000 0000             		jsr	ObjHitFloor
00014980 0C41 000C                  		cmpi.w	#$C,d1
00014984 6D00                       		blt.s	Sonic_LookUp
00014986 0C28 0003 0036             		cmpi.b	#3,$36(a0)
0001498C 6600                       		bne.s	loc_12F62
0001498E                            
0001498E                            loc_12F5A:
0001498E 08A8 0000 0022             		bclr	#0,$22(a0)
00014994 6000                       		bra.s	loc_12F70
00014996                            ; ===========================================================================
00014996                            
00014996                            loc_12F62:
00014996 0C28 0003 0037             		cmpi.b	#3,$37(a0)
0001499C 6600                       		bne.s	Sonic_LookUp
0001499E                            
0001499E                            loc_12F6A:
0001499E 08E8 0000 0022             		bset	#0,$22(a0)
000149A4                            
000149A4                            loc_12F70:
000149A4 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
000149AA 6000                       		bra.s	Obj01_ResetScr
000149AC                            ; ===========================================================================
000149AC                            
000149AC                            Sonic_LookUp:
000149AC 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000149B2 6700                       		beq.s	Sonic_Duck	; if not, branch
000149B4 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000149BA 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000149C0 6700                       		beq.s	loc_12FC2
000149C2 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000149C6 6000                       		bra.s	loc_12FC2
000149C8                            ; ===========================================================================
000149C8                            
000149C8                            Sonic_Duck:
000149C8 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000149CE 6700                       		beq.s	Obj01_ResetScr	; if not, branch
000149D0 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000149D6 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000149DC 6700                       		beq.s	loc_12FC2
000149DE 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000149E2 6000                       		bra.s	loc_12FC2
000149E4                            ; ===========================================================================
000149E4                            
000149E4                            Obj01_ResetScr:
000149E4 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000149EA 6700                       		beq.s	loc_12FC2	; if yes, branch
000149EC 6400                       		bcc.s	loc_12FBE
000149EE 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000149F2                            
000149F2                            loc_12FBE:
000149F2 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000149F6                            
000149F6                            loc_12FC2:
000149F6 1038 F602                  		move.b	($FFFFF602).w,d0
000149FA 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
000149FE 6600                       		bne.s	loc_12FEE	; if yes, branch
00014A00 3028 0020                  		move.w	$20(a0),d0
00014A04 6700                       		beq.s	loc_12FEE
00014A06 6B00                       		bmi.s	loc_12FE2
00014A08 9045                       		sub.w	d5,d0
00014A0A 6400                       		bcc.s	loc_12FDC
00014A0C 303C 0000                  		move.w	#0,d0
00014A10                            
00014A10                            loc_12FDC:
00014A10 3140 0020                  		move.w	d0,$20(a0)
00014A14 6000                       		bra.s	loc_12FEE
00014A16                            ; ===========================================================================
00014A16                            
00014A16                            loc_12FE2:
00014A16 D045                       		add.w	d5,d0
00014A18 6400                       		bcc.s	loc_12FEA
00014A1A 303C 0000                  		move.w	#0,d0
00014A1E                            
00014A1E                            loc_12FEA:
00014A1E 3140 0020                  		move.w	d0,$20(a0)
00014A22                            
00014A22                            loc_12FEE:
00014A22 1028 0026                  		move.b	$26(a0),d0
00014A26 4EB9 0000 29CC             		jsr	(CalcSine).l
00014A2C C3E8 0020                  		muls.w	$20(a0),d1
00014A30 E081                       		asr.l	#8,d1
00014A32 3141 0010                  		move.w	d1,$10(a0)
00014A36 C1E8 0020                  		muls.w	$20(a0),d0
00014A3A E080                       		asr.l	#8,d0
00014A3C 3140 0012                  		move.w	d0,$12(a0)
00014A40                            
00014A40                            loc_1300C:
00014A40 1028 0026                  		move.b	$26(a0),d0
00014A44 0600 0040                  		addi.b	#$40,d0
00014A48 6B00                       		bmi.s	locret_1307C
00014A4A 123C 0040                  		move.b	#$40,d1
00014A4E 4A68 0020                  		tst.w	$20(a0)
00014A52 6700                       		beq.s	locret_1307C
00014A54 6B00                       		bmi.s	loc_13024
00014A56 4441                       		neg.w	d1
00014A58                            
00014A58                            loc_13024:
00014A58 1028 0026                  		move.b	$26(a0),d0
00014A5C D001                       		add.b	d1,d0
00014A5E 3F00                       		move.w	d0,-(sp)
00014A60 6100 0000                  		bsr.w	Sonic_WalkSpeed
00014A64 301F                       		move.w	(sp)+,d0
00014A66 4A41                       		tst.w	d1
00014A68 6A00                       		bpl.s	locret_1307C
00014A6A E141                       		asl.w	#8,d1
00014A6C 0600 0020                  		addi.b	#$20,d0
00014A70 0200 00C0                  		andi.b	#$C0,d0
00014A74 6700                       		beq.s	loc_13078
00014A76 0C00 0040                  		cmpi.b	#$40,d0
00014A7A 6700                       		beq.s	loc_13066
00014A7C 0C00 0080                  		cmpi.b	#$80,d0
00014A80 6700                       		beq.s	loc_13060
00014A82 D368 0010                  		add.w	d1,$10(a0)
00014A86 08E8 0005 0022             		bset	#5,$22(a0)
00014A8C 317C 0000 0020             		move.w	#0,$20(a0)
00014A92 4E75                       		rts	
00014A94                            ; ===========================================================================
00014A94                            
00014A94                            loc_13060:
00014A94 9368 0012                  		sub.w	d1,$12(a0)
00014A98 4E75                       		rts	
00014A9A                            ; ===========================================================================
00014A9A                            
00014A9A                            loc_13066:
00014A9A 9368 0010                  		sub.w	d1,$10(a0)
00014A9E 08E8 0005 0022             		bset	#5,$22(a0)
00014AA4 317C 0000 0020             		move.w	#0,$20(a0)
00014AAA 4E75                       		rts	
00014AAC                            ; ===========================================================================
00014AAC                            
00014AAC                            loc_13078:
00014AAC D368 0012                  		add.w	d1,$12(a0)
00014AB0                            
00014AB0                            locret_1307C:
00014AB0 4E75                       		rts	
00014AB2                            ; End of function Sonic_Move
00014AB2                            
00014AB2                            
00014AB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014AB2                            
00014AB2                            
00014AB2                            Sonic_MoveLeft:				; XREF: Sonic_Move
00014AB2 3028 0020                  		move.w	$20(a0),d0
00014AB6 6700                       		beq.s	loc_13086
00014AB8 6A00                       		bpl.s	loc_130B2
00014ABA                            
00014ABA                            loc_13086:
00014ABA 08E8 0000 0022             		bset	#0,$22(a0)
00014AC0 6600                       		bne.s	loc_1309A
00014AC2 08A8 0005 0022             		bclr	#5,$22(a0)
00014AC8 117C 0001 001D             		move.b	#1,$1D(a0)
00014ACE                            
00014ACE                            loc_1309A:
00014ACE 9045                       		sub.w	d5,d0
00014AD0 3206                       		move.w	d6,d1
00014AD2 4441                       		neg.w	d1
00014AD4 B041                       		cmp.w	d1,d0
00014AD6 6E00                       		bgt.s	loc_130A6
00014AD8 3001                       		move.w	d1,d0
00014ADA                            
00014ADA                            loc_130A6:
00014ADA 3140 0020                  		move.w	d0,$20(a0)
00014ADE 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00014AE4 4E75                       		rts	
00014AE6                            ; ===========================================================================
00014AE6                            
00014AE6                            loc_130B2:				; XREF: Sonic_MoveLeft
00014AE6 9044                       		sub.w	d4,d0
00014AE8 6400                       		bcc.s	loc_130BA
00014AEA 303C FF80                  		move.w	#-$80,d0
00014AEE                            
00014AEE                            loc_130BA:
00014AEE 3140 0020                  		move.w	d0,$20(a0)
00014AF2 1028 0026                  		move.b	$26(a0),d0
00014AF6 0600 0020                  		addi.b	#$20,d0
00014AFA 0200 00C0                  		andi.b	#$C0,d0
00014AFE 6600                       		bne.s	locret_130E8
00014B00 0C40 0400                  		cmpi.w	#$400,d0
00014B04 6D00                       		blt.s	locret_130E8
00014B06 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00014B0C 08A8 0000 0022             		bclr	#0,$22(a0)
00014B12 303C 00A4                  		move.w	#$A4,d0
00014B16 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play stopping sound
00014B1C                            
00014B1C                            locret_130E8:
00014B1C 4E75                       		rts	
00014B1E                            ; End of function Sonic_MoveLeft
00014B1E                            
00014B1E                            
00014B1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B1E                            
00014B1E                            
00014B1E                            Sonic_MoveRight:			; XREF: Sonic_Move
00014B1E 3028 0020                  		move.w	$20(a0),d0
00014B22 6B00                       		bmi.s	loc_13118
00014B24 08A8 0000 0022             		bclr	#0,$22(a0)
00014B2A 6700                       		beq.s	loc_13104
00014B2C 08A8 0005 0022             		bclr	#5,$22(a0)
00014B32 117C 0001 001D             		move.b	#1,$1D(a0)
00014B38                            
00014B38                            loc_13104:
00014B38 D045                       		add.w	d5,d0
00014B3A B046                       		cmp.w	d6,d0
00014B3C 6D00                       		blt.s	loc_1310C
00014B3E 3006                       		move.w	d6,d0
00014B40                            
00014B40                            loc_1310C:
00014B40 3140 0020                  		move.w	d0,$20(a0)
00014B44 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00014B4A 4E75                       		rts	
00014B4C                            ; ===========================================================================
00014B4C                            
00014B4C                            loc_13118:				; XREF: Sonic_MoveRight
00014B4C D044                       		add.w	d4,d0
00014B4E 6400                       		bcc.s	loc_13120
00014B50 303C 0080                  		move.w	#$80,d0
00014B54                            
00014B54                            loc_13120:
00014B54 3140 0020                  		move.w	d0,$20(a0)
00014B58 1028 0026                  		move.b	$26(a0),d0
00014B5C 0600 0020                  		addi.b	#$20,d0
00014B60 0200 00C0                  		andi.b	#$C0,d0
00014B64 6600                       		bne.s	locret_1314E
00014B66 0C40 FC00                  		cmpi.w	#-$400,d0
00014B6A 6E00                       		bgt.s	locret_1314E
00014B6C 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00014B72 08E8 0000 0022             		bset	#0,$22(a0)
00014B78 303C 00A4                  		move.w	#$A4,d0
00014B7C 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play stopping sound
00014B82                            
00014B82                            locret_1314E:
00014B82 4E75                       		rts	
00014B84                            ; End of function Sonic_MoveRight
00014B84                            
00014B84                            ; ---------------------------------------------------------------------------
00014B84                            ; Subroutine to	change Sonic's speed as he rolls
00014B84                            ; ---------------------------------------------------------------------------
00014B84                            
00014B84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B84                            
00014B84                            
00014B84                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00014B84 3C38 F760                  		move.w	($FFFFF760).w,d6
00014B88 E346                       		asl.w	#1,d6
00014B8A 3A38 F762                  		move.w	($FFFFF762).w,d5
00014B8E E245                       		asr.w	#1,d5
00014B90 3838 F764                  		move.w	($FFFFF764).w,d4
00014B94 E444                       		asr.w	#2,d4
00014B96 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014B9A 6600 0000                  		bne.w	loc_131CC
00014B9E 4A68 003E                  		tst.w	$3E(a0)
00014BA2 6600                       		bne.s	loc_13188
00014BA4 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014BAA 6700                       		beq.s	loc_1317C	; if not, branch
00014BAC 6100 0000                  		bsr.w	Sonic_RollLeft
00014BB0                            
00014BB0                            loc_1317C:
00014BB0 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014BB6 6700                       		beq.s	loc_13188	; if not, branch
00014BB8 6100 0000                  		bsr.w	Sonic_RollRight
00014BBC                            
00014BBC                            loc_13188:
00014BBC 3028 0020                  		move.w	$20(a0),d0
00014BC0 6700                       		beq.s	loc_131AA
00014BC2 6B00                       		bmi.s	loc_1319E
00014BC4 9045                       		sub.w	d5,d0
00014BC6 6400                       		bcc.s	loc_13198
00014BC8 303C 0000                  		move.w	#0,d0
00014BCC                            
00014BCC                            loc_13198:
00014BCC 3140 0020                  		move.w	d0,$20(a0)
00014BD0 6000                       		bra.s	loc_131AA
00014BD2                            ; ===========================================================================
00014BD2                            
00014BD2                            loc_1319E:				; XREF: Sonic_RollSpeed
00014BD2 D045                       		add.w	d5,d0
00014BD4 6400                       		bcc.s	loc_131A6
00014BD6 303C 0000                  		move.w	#0,d0
00014BDA                            
00014BDA                            loc_131A6:
00014BDA 3140 0020                  		move.w	d0,$20(a0)
00014BDE                            
00014BDE                            loc_131AA:
00014BDE 4A68 0020                  		tst.w	$20(a0)		; is Sonic moving?
00014BE2 6600                       		bne.s	loc_131CC	; if yes, branch
00014BE4                            
00014BE4                            	@NoReset:
00014BE4 08A8 0002 0022             		bclr	#2,$22(a0)
00014BEA 117C 0013 0016             		move.b	#$13,$16(a0)
00014BF0 117C 0009 0017             		move.b	#9,$17(a0)
00014BF6 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00014BFC 5B68 000C                  		subq.w	#5,$C(a0)
00014C00                            
00014C00                            loc_131CC:
00014C00 1028 0026                  		move.b	$26(a0),d0
00014C04 4EB9 0000 29CC             		jsr	(CalcSine).l
00014C0A C1E8 0020                  		muls.w	$20(a0),d0
00014C0E E080                       		asr.l	#8,d0
00014C10 3140 0012                  		move.w	d0,$12(a0)
00014C14 C3E8 0020                  		muls.w	$20(a0),d1
00014C18 E081                       		asr.l	#8,d1
00014C1A 0C41 1000                  		cmpi.w	#$1000,d1
00014C1E 6F00                       		ble.s	loc_131F0
00014C20 323C 1000                  		move.w	#$1000,d1
00014C24                            
00014C24                            loc_131F0:
00014C24 0C41 F000                  		cmpi.w	#-$1000,d1
00014C28 6C00                       		bge.s	loc_131FA
00014C2A 323C F000                  		move.w	#-$1000,d1
00014C2E                            
00014C2E                            loc_131FA:
00014C2E 3141 0010                  		move.w	d1,$10(a0)
00014C32 6000 FE0C                  		bra.w	loc_1300C
00014C36                            ; End of function Sonic_RollSpeed
00014C36                            
00014C36                            
00014C36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C36                            
00014C36                            
00014C36                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00014C36 3028 0020                  		move.w	$20(a0),d0
00014C3A 6700                       		beq.s	loc_1320A
00014C3C 6A00                       		bpl.s	loc_13218
00014C3E                            
00014C3E                            loc_1320A:
00014C3E 08E8 0000 0022             		bset	#0,$22(a0)
00014C44 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014C4A 4E75                       		rts	
00014C4C                            ; ===========================================================================
00014C4C                            
00014C4C                            loc_13218:
00014C4C 9044                       		sub.w	d4,d0
00014C4E 6400                       		bcc.s	loc_13220
00014C50 303C FF80                  		move.w	#-$80,d0
00014C54                            
00014C54                            loc_13220:
00014C54 3140 0020                  		move.w	d0,$20(a0)
00014C58 4E75                       		rts	
00014C5A                            ; End of function Sonic_RollLeft
00014C5A                            
00014C5A                            
00014C5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C5A                            
00014C5A                            
00014C5A                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00014C5A 3028 0020                  		move.w	$20(a0),d0
00014C5E 6B00                       		bmi.s	loc_1323A
00014C60 08A8 0000 0022             		bclr	#0,$22(a0)
00014C66 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014C6C 4E75                       		rts	
00014C6E                            ; ===========================================================================
00014C6E                            
00014C6E                            loc_1323A:
00014C6E D044                       		add.w	d4,d0
00014C70 6400                       		bcc.s	loc_13242
00014C72 303C 0080                  		move.w	#$80,d0
00014C76                            
00014C76                            loc_13242:
00014C76 3140 0020                  		move.w	d0,$20(a0)
00014C7A 4E75                       		rts	
00014C7C                            ; End of function Sonic_RollRight
00014C7C                            
00014C7C                            ; ---------------------------------------------------------------------------
00014C7C                            ; Subroutine to	change Sonic's direction while jumping
00014C7C                            ; ---------------------------------------------------------------------------
00014C7C                            
00014C7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C7C                            
00014C7C                            
00014C7C                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014C7C 3C38 F760                  		move.w	($FFFFF760).w,d6
00014C80 3A38 F762                  		move.w	($FFFFF762).w,d5
00014C84 E345                       		asl.w	#1,d5
00014C86 0828 0004 0022             		btst	#4,$22(a0)
00014C8C 6600                       		bne.s	Obj01_ResetScr2
00014C8E 3028 0010                  		move.w	$10(a0),d0
00014C92 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014C98 6700                       		beq.s	loc_13278	; if not, branch
00014C9A 08E8 0000 0022             		bset	#0,$22(a0)
00014CA0 9045                       		sub.w	d5,d0
00014CA2 3206                       		move.w	d6,d1
00014CA4 4441                       		neg.w	d1
00014CA6 B041                       		cmp.w	d1,d0
00014CA8 6E00                       		bgt.s	loc_13278
00014CAA 3001                       		move.w	d1,d0
00014CAC                            
00014CAC                            loc_13278:
00014CAC 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014CB2 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00014CB4 08A8 0000 0022             		bclr	#0,$22(a0)
00014CBA D045                       		add.w	d5,d0
00014CBC B046                       		cmp.w	d6,d0
00014CBE 6D00                       		blt.s	Obj01_JumpMove
00014CC0 3006                       		move.w	d6,d0
00014CC2                            
00014CC2                            Obj01_JumpMove:
00014CC2 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00014CC6                            
00014CC6                            Obj01_ResetScr2:
00014CC6 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00014CCC 6700                       		beq.s	loc_132A4	; if yes, branch
00014CCE 6400                       		bcc.s	loc_132A0
00014CD0 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00014CD4                            
00014CD4                            loc_132A0:
00014CD4 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014CD8                            
00014CD8                            loc_132A4:
00014CD8 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00014CDE 6500                       		bcs.s	locret_132D2	; if yes, branch
00014CE0 3028 0010                  		move.w	$10(a0),d0
00014CE4 3200                       		move.w	d0,d1
00014CE6 EA41                       		asr.w	#5,d1
00014CE8 6700                       		beq.s	locret_132D2
00014CEA 6B00                       		bmi.s	loc_132C6
00014CEC 9041                       		sub.w	d1,d0
00014CEE 6400                       		bcc.s	loc_132C0
00014CF0 303C 0000                  		move.w	#0,d0
00014CF4                            
00014CF4                            loc_132C0:
00014CF4 3140 0010                  		move.w	d0,$10(a0)
00014CF8 4E75                       		rts	
00014CFA                            ; ===========================================================================
00014CFA                            
00014CFA                            loc_132C6:
00014CFA 9041                       		sub.w	d1,d0
00014CFC 6500                       		bcs.s	loc_132CE
00014CFE 303C 0000                  		move.w	#0,d0
00014D02                            
00014D02                            loc_132CE:
00014D02 3140 0010                  		move.w	d0,$10(a0)
00014D06                            
00014D06                            locret_132D2:
00014D06 4E75                       		rts	
00014D08                            ; End of function Sonic_ChgJumpDir
00014D08                            
00014D08                            ; ===========================================================================
00014D08                            ; ---------------------------------------------------------------------------
00014D08                            ; Unused subroutine to squash Sonic
00014D08                            ; ---------------------------------------------------------------------------
00014D08 1028 0026                  		move.b	$26(a0),d0
00014D0C 0600 0020                  		addi.b	#$20,d0
00014D10 0200 00C0                  		andi.b	#$C0,d0
00014D14 6600                       		bne.s	locret_13302
00014D16 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014D1A 4A41                       		tst.w	d1
00014D1C 6A00                       		bpl.s	locret_13302
00014D1E 317C 0000 0020             		move.w	#0,$20(a0)	; stop Sonic moving
00014D24 317C 0000 0010             		move.w	#0,$10(a0)
00014D2A 317C 0000 0012             		move.w	#0,$12(a0)
00014D30 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00014D36                            
00014D36                            locret_13302:
00014D36 4E75                       		rts	
00014D38                            ; ---------------------------------------------------------------------------
00014D38                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00014D38                            ; ---------------------------------------------------------------------------
00014D38                            
00014D38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D38                            
00014D38                            
00014D38                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00014D38 2228 0008                  		move.l	8(a0),d1
00014D3C 3028 0010                  		move.w	$10(a0),d0
00014D40 48C0                       		ext.l	d0
00014D42 E180                       		asl.l	#8,d0
00014D44 D280                       		add.l	d0,d1
00014D46 4841                       		swap	d1
00014D48 3038 F728                  		move.w	($FFFFF728).w,d0
00014D4C 0640 0010                  		addi.w	#$10,d0
00014D50 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014D52 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00014D54 3038 F72A                  		move.w	($FFFFF72A).w,d0
00014D58 0640 0128                  		addi.w	#$128,d0
00014D5C 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00014D60 6600                       		bne.s	loc_13332
00014D62 0640 0040                  		addi.w	#$40,d0
00014D66                            
00014D66                            loc_13332:
00014D66 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014D68 6300                       		bls.s	Boundary_Sides	; if yes, branch
00014D6A                            
00014D6A                            loc_13336:
00014D6A 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014D6E 0640 00E0                  		addi.w	#$E0,d0
00014D72 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00014D76 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00014D78 4E75                       		rts	
00014D7A                            ; ===========================================================================
00014D7A                            
00014D7A                            Boundary_Bottom:
00014D7A 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00014D80 6600                       		bne.s	JMPKillSonic	; if not, kill Sonic
00014D82 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00014D88 6500                       		bcs.s	JMPKillSonic
00014D8A 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00014D8E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014D94 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00014D9A 4E75                       		rts	
00014D9C                            ; ===========================================================================
00014D9C                            
00014D9C                            Boundary_Sides:
00014D9C 3140 0008                  		move.w	d0,8(a0)
00014DA0 317C 0000 000A             		move.w	#0,$A(a0)
00014DA6 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00014DAC 317C 0000 0020             		move.w	#0,$20(a0)
00014DB2 60B6                       		bra.s	loc_13336
00014DB4                            
00014DB4                            JMPKillSonic:
00014DB4 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
00014DBA 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
00014DC0 4EF9 0000 0000             		jmp	KillSonic
00014DC6                            ; End of function Sonic_LevelBound
00014DC6                            
00014DC6                            ; ---------------------------------------------------------------------------
00014DC6                            ; Subroutine allowing Sonic to roll when he's moving
00014DC6                            ; ---------------------------------------------------------------------------
00014DC6                            
00014DC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DC6                            
00014DC6                            
00014DC6                            Sonic_Roll:				; XREF: Obj01_MdNormal
00014DC6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014DCA 6600                       		bne.s	Obj01_NoRoll
00014DCC 3028 0020                  		move.w	$20(a0),d0
00014DD0 6A00                       		bpl.s	loc_13392
00014DD2 4440                       		neg.w	d0
00014DD4                            
00014DD4                            loc_13392:
00014DD4 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00014DD8 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00014DDA 1038 F602                  		move.b	($FFFFF602).w,d0
00014DDE 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00014DE2 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00014DE4 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00014DEA 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00014DEC                            
00014DEC                            Obj01_NoRoll:
00014DEC 4E75                       		rts	
00014DEE                            ; ===========================================================================
00014DEE                            
00014DEE                            Obj01_ChkRoll:
00014DEE 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00014DF4 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00014DF6 4E75                       		rts	
00014DF8                            ; ===========================================================================
00014DF8                            
00014DF8                            Obj01_DoRoll:
00014DF8 08E8 0002 0022             		bset	#2,$22(a0)
00014DFE 117C 000E 0016             		move.b	#$E,$16(a0)
00014E04 117C 0007 0017             		move.b	#7,$17(a0)
00014E0A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014E10 5A68 000C                  		addq.w	#5,$C(a0)
00014E14 303C 00BE                  		move.w	#$BE,d0
00014E18 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play rolling sound
00014E1E 4A68 0020                  		tst.w	$20(a0)
00014E22 6600                       		bne.s	locret_133E8
00014E24 317C 0200 0020             		move.w	#$200,$20(a0)
00014E2A                            
00014E2A                            locret_133E8:
00014E2A 4E75                       		rts	
00014E2C                            ; End of function Sonic_Roll
00014E2C                            
00014E2C                            ; ---------------------------------------------------------------------------
00014E2C                            ; Subroutine allowing Sonic to jump
00014E2C                            ; ---------------------------------------------------------------------------
00014E2C                            
00014E2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E2C                            
00014E2C                            
00014E2C                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014E2C 1038 F603                  		move.b	($FFFFF603).w,d0
00014E30 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00014E34 6700 0000                  		beq.w	locret_1348E	; if not, branch
00014E38 31FC 6000 F5D8             		move.w	#$6000,(SonimeSST+sonime_waittimer).w
00014E3E 0C38 000B F5CE             		cmpi.b	#face_impatient,(SonimeSST+sonime_face).w
00014E44 6600                       		bne.s	@notfrustrated
00014E46 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00014E4C                            
00014E4C                            	@notfrustrated:
00014E4C 7000                       		moveq	#0,d0
00014E4E 1028 0026                  		move.b	$26(a0),d0
00014E52 0600 0080                  		addi.b	#$80,d0
00014E56 6100 0000                  		bsr.w	sub_14D48
00014E5A 0C41 0006                  		cmpi.w	#6,d1
00014E5E 6D00 0000                  		blt.w	locret_1348E
00014E62 343C 0680                  		move.w	#$680,d2
00014E66 0828 0006 0022             		btst	#6,$22(a0)
00014E6C 6700                       		beq.s	loc_1341C
00014E6E 343C 0380                  		move.w	#$380,d2
00014E72                            
00014E72                            loc_1341C:
00014E72 7000                       		moveq	#0,d0
00014E74 1028 0026                  		move.b	$26(a0),d0
00014E78 0400 0040                  		subi.b	#$40,d0
00014E7C 4EB9 0000 29CC             		jsr	(CalcSine).l
00014E82 C3C2                       		muls.w	d2,d1
00014E84 E081                       		asr.l	#8,d1
00014E86 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00014E8A C1C2                       		muls.w	d2,d0
00014E8C E080                       		asr.l	#8,d0
00014E8E D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00014E92 08E8 0001 0022             		bset	#1,$22(a0)
00014E98 08A8 0005 0022             		bclr	#5,$22(a0)
00014E9E 588F                       		addq.l	#4,sp
00014EA0 117C 0001 003C             		move.b	#1,$3C(a0)
00014EA6 4228 0038                  		clr.b	$38(a0)
00014EAA 303C 00A0                  		move.w	#$A0,d0
00014EAE 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play jumping sound
00014EB4 117C 0013 0016             		move.b	#$13,$16(a0)
00014EBA 117C 0009 0017             		move.b	#9,$17(a0)
00014EC0 0828 0002 0022             		btst	#2,$22(a0)
00014EC6 6600                       		bne.s	loc_13490
00014EC8 117C 000E 0016             		move.b	#$E,$16(a0)
00014ECE 117C 0007 0017             		move.b	#7,$17(a0)
00014ED4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00014EDA 08E8 0002 0022             		bset	#2,$22(a0)
00014EE0 5A68 000C                  		addq.w	#5,$C(a0)
00014EE4                            
00014EE4                            locret_1348E:
00014EE4 4E75                       		rts	
00014EE6                            ; ===========================================================================
00014EE6                            
00014EE6                            loc_13490:
00014EE6 08E8 0004 0022             		bset	#4,$22(a0)
00014EEC 4E75                       		rts	
00014EEE                            ; End of function Sonic_Jump
00014EEE                            
00014EEE                            
00014EEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EEE                            
00014EEE                            
00014EEE                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014EEE 4A28 003C                  		tst.b	$3C(a0)
00014EF2 6700                       		beq.s	loc_134C4
00014EF4 323C FC00                  		move.w	#-$400,d1
00014EF8 0828 0006 0022             		btst	#6,$22(a0)
00014EFE 6700                       		beq.s	loc_134AE
00014F00 323C FE00                  		move.w	#-$200,d1
00014F04                            
00014F04                            loc_134AE:
00014F04 B268 0012                  		cmp.w	$12(a0),d1
00014F08 6F00                       		ble.s	locret_134C2
00014F0A 1038 F602                  		move.b	($FFFFF602).w,d0
00014F0E 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00014F12 6600                       		bne.s	locret_134C2	; if yes, branch
00014F14 3141 0012                  		move.w	d1,$12(a0)
00014F18                            
00014F18                            locret_134C2:
00014F18 4E75                       		rts	
00014F1A                            ; ===========================================================================
00014F1A                            
00014F1A                            loc_134C4:
00014F1A 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00014F20 6C00                       		bge.s	locret_134D2
00014F22 317C F040 0012             		move.w	#-$FC0,$12(a0)
00014F28                            
00014F28                            locret_134D2:
00014F28 4E75                       		rts	
00014F2A                            ; End of function Sonic_JumpHeight
00014F2A                            
00014F2A                            ; ---------------------------------------------------------------------------
00014F2A                            ; Subroutine to	slow Sonic walking up a	slope
00014F2A                            ; ---------------------------------------------------------------------------
00014F2A                            
00014F2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F2A                            
00014F2A                            
00014F2A                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00014F2A 1028 0026                  		move.b	$26(a0),d0
00014F2E 0600 0060                  		addi.b	#$60,d0
00014F32 0C00 00C0                  		cmpi.b	#$C0,d0
00014F36 6400                       		bcc.s	locret_13508
00014F38 1028 0026                  		move.b	$26(a0),d0
00014F3C 4EB9 0000 29CC             		jsr	(CalcSine).l
00014F42 C1FC 0020                  		muls.w	#$20,d0
00014F46 E080                       		asr.l	#8,d0
00014F48 4A68 0020                  		tst.w	$20(a0)
00014F4C 6700                       		beq.s	locret_13508
00014F4E 6B00                       		bmi.s	loc_13504
00014F50 4A40                       		tst.w	d0
00014F52 6700                       		beq.s	locret_13502
00014F54 D168 0020                  		add.w	d0,$20(a0)	; change Sonic's inertia
00014F58                            
00014F58                            locret_13502:
00014F58 4E75                       		rts	
00014F5A                            ; ===========================================================================
00014F5A                            
00014F5A                            loc_13504:
00014F5A D168 0020                  		add.w	d0,$20(a0)
00014F5E                            
00014F5E                            locret_13508:
00014F5E 4E75                       		rts	
00014F60                            ; End of function Sonic_SlopeResist
00014F60                            
00014F60                            ; ---------------------------------------------------------------------------
00014F60                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00014F60                            ; ---------------------------------------------------------------------------
00014F60                            
00014F60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F60                            
00014F60                            
00014F60                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00014F60 1028 0026                  		move.b	$26(a0),d0
00014F64 0600 0060                  		addi.b	#$60,d0
00014F68 0C00 00C0                  		cmpi.b	#-$40,d0
00014F6C 6400                       		bcc.s	locret_13544
00014F6E 1028 0026                  		move.b	$26(a0),d0
00014F72 4EB9 0000 29CC             		jsr	(CalcSine).l
00014F78 C1FC 0050                  		muls.w	#$50,d0
00014F7C E080                       		asr.l	#8,d0
00014F7E 4A68 0020                  		tst.w	$20(a0)
00014F82 6B00                       		bmi.s	loc_1353A
00014F84 4A40                       		tst.w	d0
00014F86 6A00                       		bpl.s	loc_13534
00014F88 E480                       		asr.l	#2,d0
00014F8A                            
00014F8A                            loc_13534:
00014F8A D168 0020                  		add.w	d0,$20(a0)
00014F8E 4E75                       		rts	
00014F90                            ; ===========================================================================
00014F90                            
00014F90                            loc_1353A:
00014F90 4A40                       		tst.w	d0
00014F92 6B00                       		bmi.s	loc_13540
00014F94 E480                       		asr.l	#2,d0
00014F96                            
00014F96                            loc_13540:
00014F96 D168 0020                  		add.w	d0,$20(a0)
00014F9A                            
00014F9A                            locret_13544:
00014F9A 4E75                       		rts	
00014F9C                            ; End of function Sonic_RollRepel
00014F9C                            
00014F9C                            ; ---------------------------------------------------------------------------
00014F9C                            ; Subroutine to	push Sonic down	a slope
00014F9C                            ; ---------------------------------------------------------------------------
00014F9C                            
00014F9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F9C                            
00014F9C                            
00014F9C                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00014F9C 4E71                       		nop	
00014F9E 4A28 0038                  		tst.b	$38(a0)
00014FA2 6600                       		bne.s	locret_13580
00014FA4 4A68 003E                  		tst.w	$3E(a0)
00014FA8 6600                       		bne.s	loc_13582
00014FAA 1028 0026                  		move.b	$26(a0),d0
00014FAE 0600 0020                  		addi.b	#$20,d0
00014FB2 0200 00C0                  		andi.b	#$C0,d0
00014FB6 6700                       		beq.s	locret_13580
00014FB8 3028 0020                  		move.w	$20(a0),d0
00014FBC 6A00                       		bpl.s	loc_1356A
00014FBE 4440                       		neg.w	d0
00014FC0                            
00014FC0                            loc_1356A:
00014FC0 0C40 0280                  		cmpi.w	#$280,d0
00014FC4 6400                       		bcc.s	locret_13580
00014FC6 4268 0020                  		clr.w	$20(a0)
00014FCA 08E8 0001 0022             		bset	#1,$22(a0)
00014FD0 317C 001E 003E             		move.w	#$1E,$3E(a0)
00014FD6                            
00014FD6                            locret_13580:
00014FD6 4E75                       		rts	
00014FD8                            ; ===========================================================================
00014FD8                            
00014FD8                            loc_13582:
00014FD8 5368 003E                  		subq.w	#1,$3E(a0)
00014FDC 4E75                       		rts	
00014FDE                            ; End of function Sonic_SlopeRepel
00014FDE                            
00014FDE                            ; ---------------------------------------------------------------------------
00014FDE                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00014FDE                            ; ---------------------------------------------------------------------------
00014FDE                            
00014FDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FDE                            
00014FDE                            
00014FDE                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014FDE 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014FE2 6700                       		beq.s	locret_135A2	; if already 0,	branch
00014FE4 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00014FE6                            
00014FE6 5400                       		addq.b	#2,d0		; increase angle
00014FE8 6400                       		bcc.s	loc_13596
00014FEA 7000                       		moveq	#0,d0
00014FEC                            
00014FEC                            loc_13596:
00014FEC 6000                       		bra.s	loc_1359E
00014FEE                            ; ===========================================================================
00014FEE                            
00014FEE                            loc_13598:
00014FEE 5500                       		subq.b	#2,d0		; decrease angle
00014FF0 6400                       		bcc.s	loc_1359E
00014FF2 7000                       		moveq	#0,d0
00014FF4                            
00014FF4                            loc_1359E:
00014FF4 1140 0026                  		move.b	d0,$26(a0)
00014FF8                            
00014FF8                            locret_135A2:
00014FF8 4E75                       		rts	
00014FFA                            ; End of function Sonic_JumpAngle
00014FFA                            
00014FFA                            ; ---------------------------------------------------------------------------
00014FFA                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00014FFA                            ; ---------------------------------------------------------------------------
00014FFA                            
00014FFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FFA                            
00014FFA                            
00014FFA                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00014FFA 3228 0010                  		move.w	$10(a0),d1
00014FFE 3428 0012                  		move.w	$12(a0),d2
00015002 4EB9 0000 2C94             		jsr	(CalcAngle).l
00015008 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
0001500C 0400 0020                  		subi.b	#$20,d0
00015010 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00015014 0200 00C0                  		andi.b	#$C0,d0
00015018 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
0001501C 0C00 0040                  		cmpi.b	#$40,d0
00015020 6700 0000                  		beq.w	loc_13680
00015024 0C00 0080                  		cmpi.b	#$80,d0
00015028 6700 0000                  		beq.w	loc_136E2
0001502C 0C00 00C0                  		cmpi.b	#-$40,d0
00015030 6700 0000                  		beq.w	loc_1373E
00015034 6100 0000                  		bsr.w	Sonic_HitWall
00015038 4A41                       		tst.w	d1
0001503A 6A00                       		bpl.s	loc_135F0
0001503C 9368 0008                  		sub.w	d1,8(a0)
00015040 317C 0000 0010             		move.w	#0,$10(a0)
00015046                            
00015046                            loc_135F0:
00015046 6100 0000                  		bsr.w	sub_14EB4
0001504A 4A41                       		tst.w	d1
0001504C 6A00                       		bpl.s	loc_13602
0001504E D368 0008                  		add.w	d1,8(a0)
00015052 317C 0000 0010             		move.w	#0,$10(a0)
00015058                            
00015058                            loc_13602:
00015058 6100 0000                  		bsr.w	Sonic_HitFloor
0001505C 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00015060 4A41                       		tst.w	d1
00015062 6A00                       		bpl.s	locret_1367E
00015064 1428 0012                  		move.b	$12(a0),d2
00015068 5002                       		addq.b	#8,d2
0001506A 4402                       		neg.b	d2
0001506C B202                       		cmp.b	d2,d1
0001506E 6C00                       		bge.s	loc_1361E
00015070 B002                       		cmp.b	d2,d0
00015072 6D00                       		blt.s	locret_1367E
00015074                            
00015074                            loc_1361E:
00015074 D368 000C                  		add.w	d1,$C(a0)
00015078 1143 0026                  		move.b	d3,$26(a0)
0001507C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015080 117C 0000 001C             		move.b	#0,$1C(a0)
00015086 1003                       		move.b	d3,d0
00015088 0600 0020                  		addi.b	#$20,d0
0001508C 0200 0040                  		andi.b	#$40,d0
00015090 6600                       		bne.s	loc_1365C
00015092 1003                       		move.b	d3,d0
00015094 0600 0010                  		addi.b	#$10,d0
00015098 0200 0020                  		andi.b	#$20,d0
0001509C 6700                       		beq.s	loc_1364E
0001509E E0E8 0012                  		asr	$12(a0)
000150A2 6000                       		bra.s	loc_13670
000150A4                            ; ===========================================================================
000150A4                            
000150A4                            loc_1364E:
000150A4 317C 0000 0012             		move.w	#0,$12(a0)
000150AA 3168 0010 0020             		move.w	$10(a0),$20(a0)
000150B0 4E75                       		rts	
000150B2                            ; ===========================================================================
000150B2                            
000150B2                            loc_1365C:
000150B2 317C 0000 0010             		move.w	#0,$10(a0)
000150B8 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
000150BE 6F00                       		ble.s	loc_13670
000150C0 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
000150C6                            
000150C6                            loc_13670:
000150C6 3168 0012 0020             		move.w	$12(a0),$20(a0)
000150CC 4A03                       		tst.b	d3
000150CE 6A00                       		bpl.s	locret_1367E
000150D0 4468 0020                  		neg.w	$20(a0)
000150D4                            
000150D4                            locret_1367E:
000150D4 4E75                       		rts	
000150D6                            ; ===========================================================================
000150D6                            
000150D6                            loc_13680:
000150D6 6100 0000                  		bsr.w	Sonic_HitWall
000150DA 4A41                       		tst.w	d1
000150DC 6A00                       		bpl.s	loc_1369A
000150DE 9368 0008                  		sub.w	d1,8(a0)
000150E2 317C 0000 0010             		move.w	#0,$10(a0)
000150E8 3168 0012 0020             		move.w	$12(a0),$20(a0)
000150EE 4E75                       		rts	
000150F0                            ; ===========================================================================
000150F0                            
000150F0                            loc_1369A:
000150F0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000150F4 4A41                       		tst.w	d1
000150F6 6A00                       		bpl.s	loc_136B4
000150F8 9368 000C                  		sub.w	d1,$C(a0)
000150FC 4A68 0012                  		tst.w	$12(a0)
00015100 6A00                       		bpl.s	locret_136B2
00015102 317C 0000 0012             		move.w	#0,$12(a0)
00015108                            
00015108                            locret_136B2:
00015108 4E75                       		rts	
0001510A                            ; ===========================================================================
0001510A                            
0001510A                            loc_136B4:
0001510A 4A68 0012                  		tst.w	$12(a0)
0001510E 6B00                       		bmi.s	locret_136E0
00015110 6100 0000                  		bsr.w	Sonic_HitFloor
00015114 4A41                       		tst.w	d1
00015116 6A00                       		bpl.s	locret_136E0
00015118 D368 000C                  		add.w	d1,$C(a0)
0001511C 1143 0026                  		move.b	d3,$26(a0)
00015120 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015124 117C 0000 001C             		move.b	#0,$1C(a0)
0001512A 317C 0000 0012             		move.w	#0,$12(a0)
00015130 3168 0010 0020             		move.w	$10(a0),$20(a0)
00015136                            
00015136                            locret_136E0:
00015136 4E75                       		rts	
00015138                            ; ===========================================================================
00015138                            
00015138                            loc_136E2:
00015138 6100 0000                  		bsr.w	Sonic_HitWall
0001513C 4A41                       		tst.w	d1
0001513E 6A00                       		bpl.s	loc_136F4
00015140 9368 0008                  		sub.w	d1,8(a0)
00015144 317C 0000 0010             		move.w	#0,$10(a0)
0001514A                            
0001514A                            loc_136F4:
0001514A 6100 0000                  		bsr.w	sub_14EB4
0001514E 4A41                       		tst.w	d1
00015150 6A00                       		bpl.s	loc_13706
00015152 D368 0008                  		add.w	d1,8(a0)
00015156 317C 0000 0010             		move.w	#0,$10(a0)
0001515C                            
0001515C                            loc_13706:
0001515C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015160 4A41                       		tst.w	d1
00015162 6A00                       		bpl.s	locret_1373C
00015164 9368 000C                  		sub.w	d1,$C(a0)
00015168 1003                       		move.b	d3,d0
0001516A 0600 0020                  		addi.b	#$20,d0
0001516E 0200 0040                  		andi.b	#$40,d0
00015172 6600                       		bne.s	loc_13726
00015174 317C 0000 0012             		move.w	#0,$12(a0)
0001517A 4E75                       		rts	
0001517C                            ; ===========================================================================
0001517C                            
0001517C                            loc_13726:
0001517C 1143 0026                  		move.b	d3,$26(a0)
00015180 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015184 3168 0012 0020             		move.w	$12(a0),$20(a0)
0001518A 4A03                       		tst.b	d3
0001518C 6A00                       		bpl.s	locret_1373C
0001518E 4468 0020                  		neg.w	$20(a0)
00015192                            
00015192                            locret_1373C:
00015192 4E75                       		rts	
00015194                            ; ===========================================================================
00015194                            
00015194                            loc_1373E:
00015194 6100 0000                  		bsr.w	sub_14EB4
00015198 4A41                       		tst.w	d1
0001519A 6A00                       		bpl.s	loc_13758
0001519C D368 0008                  		add.w	d1,8(a0)
000151A0 317C 0000 0010             		move.w	#0,$10(a0)
000151A6 3168 0012 0020             		move.w	$12(a0),$20(a0)
000151AC 4E75                       		rts	
000151AE                            ; ===========================================================================
000151AE                            
000151AE                            loc_13758:
000151AE 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000151B2 4A41                       		tst.w	d1
000151B4 6A00                       		bpl.s	loc_13772
000151B6 9368 000C                  		sub.w	d1,$C(a0)
000151BA 4A68 0012                  		tst.w	$12(a0)
000151BE 6A00                       		bpl.s	locret_13770
000151C0 317C 0000 0012             		move.w	#0,$12(a0)
000151C6                            
000151C6                            locret_13770:
000151C6 4E75                       		rts	
000151C8                            ; ===========================================================================
000151C8                            
000151C8                            loc_13772:
000151C8 4A68 0012                  		tst.w	$12(a0)
000151CC 6B00                       		bmi.s	locret_1379E
000151CE 6100 0000                  		bsr.w	Sonic_HitFloor
000151D2 4A41                       		tst.w	d1
000151D4 6A00                       		bpl.s	locret_1379E
000151D6 D368 000C                  		add.w	d1,$C(a0)
000151DA 1143 0026                  		move.b	d3,$26(a0)
000151DE 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000151E2 117C 0000 001C             		move.b	#0,$1C(a0)
000151E8 317C 0000 0012             		move.w	#0,$12(a0)
000151EE 3168 0010 0020             		move.w	$10(a0),$20(a0)
000151F4                            
000151F4                            locret_1379E:
000151F4 4E75                       		rts	
000151F6                            ; End of function Sonic_Floor
000151F6                            
000151F6                            ; ---------------------------------------------------------------------------
000151F6                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000151F6                            ; ---------------------------------------------------------------------------
000151F6                            
000151F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151F6                            
000151F6                            
000151F6                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
000151F6 0828 0004 0022             		btst	#4,$22(a0)
000151FC 6700                       		beq.s	loc_137AE
000151FE 4E71                       		nop	
00015200 4E71                       		nop	
00015202 4E71                       		nop	
00015204                            
00015204                            loc_137AE:
00015204 08A8 0005 0022             		bclr	#5,$22(a0)
0001520A 08A8 0001 0022             		bclr	#1,$22(a0)
00015210 08A8 0004 0022             		bclr	#4,$22(a0)
00015216 0828 0002 0022             		btst	#2,$22(a0)
0001521C 6700                       		beq.s	loc_137E4
0001521E 08A8 0002 0022             		bclr	#2,$22(a0)
00015224 117C 0013 0016             		move.b	#$13,$16(a0)
0001522A 117C 0009 0017             		move.b	#9,$17(a0)
00015230 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00015236 5B68 000C                  		subq.w	#5,$C(a0)
0001523A                            
0001523A                            loc_137E4:
0001523A 117C 0000 003C             		move.b	#0,$3C(a0)
00015240 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00015246 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001524A                            
0001524A                            	@NoReset:
0001524A 4E75                       		rts	
0001524C                            ; End of function Sonic_ResetOnFloor
0001524C                            
0001524C                            ; ===========================================================================
0001524C                            ; ---------------------------------------------------------------------------
0001524C                            ; Sonic	when he	gets hurt
0001524C                            ; ---------------------------------------------------------------------------
0001524C                            
0001524C                            Obj01_Hurt:				; XREF: Obj01_Index
0001524C 4EBA 96E2                  		jsr	SpeedToPos
00015250 0668 0030 0012             		addi.w	#$30,$12(a0)
00015256 0828 0006 0022             		btst	#6,$22(a0)
0001525C 6700                       		beq.s	loc_1380C
0001525E 0468 0020 0012             		subi.w	#$20,$12(a0)
00015264                            
00015264                            loc_1380C:
00015264 6100 0000                  		bsr.w	Sonic_HurtStop
00015268 6100 FACE                  		bsr.w	Sonic_LevelBound
0001526C 6100 F4BE                  		bsr.w	Sonic_RecordPos
00015270 6100 0000                  		bsr.w	Sonic_Animate
00015274 6100 0000                  		bsr.w	LoadSonicDynPLC
00015278 4EFA 96D0                  		jmp	DisplaySprite
0001527C                            
0001527C                            ; ---------------------------------------------------------------------------
0001527C                            ; Subroutine to	stop Sonic falling after he's been hurt
0001527C                            ; ---------------------------------------------------------------------------
0001527C                            
0001527C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001527C                            
0001527C                            
0001527C                            Sonic_HurtStop:				; XREF: Obj01_Hurt
0001527C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00015280 0640 00E0                  		addi.w	#$E0,d0
00015284 B068 000C                  		cmp.w	$C(a0),d0
00015288 6500 FB2A                  		bcs.w	JMPKillSonic
0001528C 6100 FD6C                  		bsr.w	Sonic_Floor
00015290 0828 0001 0022             		btst	#1,$22(a0)
00015296 6600                       		bne.s	locret_13860
00015298 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
0001529E 7000                       		moveq	#0,d0
000152A0 3140 0012                  		move.w	d0,$12(a0)
000152A4 3140 0010                  		move.w	d0,$10(a0)
000152A8 3140 0020                  		move.w	d0,$20(a0)
000152AC 117C 0000 001C             		move.b	#0,$1C(a0)
000152B2 5528 0024                  		subq.b	#2,$24(a0)
000152B6 317C 0078 0030             		move.w	#$78,$30(a0)
000152BC                            
000152BC                            locret_13860:
000152BC 4E75                       		rts	
000152BE                            ; End of function Sonic_HurtStop
000152BE                            
000152BE                            ; ===========================================================================
000152BE                            ; ---------------------------------------------------------------------------
000152BE                            ; Sonic	when he	dies
000152BE                            ; ---------------------------------------------------------------------------
000152BE                            
000152BE                            Obj01_Death:				; XREF: Obj01_Index
000152BE 6100 0000                  		bsr.w	GameOver
000152C2 4EBA 964C                  		jsr	ObjectFall
000152C6 6100 F464                  		bsr.w	Sonic_RecordPos
000152CA 6100 0000                  		bsr.w	Sonic_Animate
000152CE 6100 0000                  		bsr.w	LoadSonicDynPLC
000152D2 4EFA 9676                  		jmp	DisplaySprite
000152D6                            
000152D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152D6                            
000152D6                            
000152D6                            GameOver:				; XREF: Obj01_Death
000152D6 3038 F72E                  		move.w	($FFFFF72E).w,d0
000152DA 0640 0100                  		addi.w	#$100,d0
000152DE B068 000C                  		cmp.w	$C(a0),d0
000152E2 6400 0000                  		bcc.w	locret_13900
000152E6 317C FFC8 0012             		move.w	#-$38,$12(a0)
000152EC 5428 0024                  		addq.b	#2,$24(a0)
000152F0 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000152F4 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
000152F8 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
000152FC 6600                       		bne.s	loc_138D4
000152FE 317C 0000 003A             		move.w	#0,$3A(a0)
00015304 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
0001530A 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00015310 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00015316 4238 FE1A                  		clr.b	($FFFFFE1A).w
0001531A                            
0001531A                            loc_138C2:
0001531A 303C 008F                  		move.w	#$8F,d0
0001531E 4EB9 0000 11F0             		jsr	(PlaySound).l	; play game over music
00015324 7003                       		moveq	#3,d0
00015326 4EF9 0000 1434             		jmp	(LoadPLC).l	; load game over patterns
0001532C                            ; ===========================================================================
0001532C                            
0001532C                            loc_138D4:
0001532C 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00015332 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00015336 6700                       		beq.s	locret_13900	; if not, branch
00015338 317C 0000 003A             		move.w	#0,$3A(a0)
0001533E 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00015344 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001534A 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00015350 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00015356 60C2                       		bra.s	loc_138C2
00015358                            ; ===========================================================================
00015358                            
00015358                            locret_13900:
00015358 4E75                       		rts	
0001535A                            ; End of function GameOver
0001535A                            
0001535A                            ; ===========================================================================
0001535A                            ; ---------------------------------------------------------------------------
0001535A                            ; Sonic	when the level is restarted
0001535A                            ; ---------------------------------------------------------------------------
0001535A                            
0001535A                            Obj01_ResetLevel:			; XREF: Obj01_Index
0001535A 4A68 003A                  		tst.w	$3A(a0)
0001535E 6700                       		beq.s	locret_13914
00015360 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00015364 6600                       		bne.s	locret_13914
00015366 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001536C 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00015372                            
00015372                            locret_13914:
00015372 4E75                       		rts	
00015374                            
00015374                            ; ---------------------------------------------------------------------------
00015374                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00015374                            ; ---------------------------------------------------------------------------
00015374                            
00015374                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015374                            
00015374                            
00015374                            Sonic_Loops:				; XREF: Obj01_Control
00015374 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
0001537A 6700                       		beq.s	loc_13926	; if yes, branch
0001537C 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00015380 6600 0000                  		bne.w	locret_139C2	; if not, branch
00015384                            
00015384                            loc_13926:
00015384 3028 000C                  		move.w	$C(a0),d0
00015388 E248                       		lsr.w	#1,d0
0001538A 0240 0380                  		andi.w	#$380,d0
0001538E 1228 0008                  		move.b	8(a0),d1
00015392 0241 007F                  		andi.w	#$7F,d1
00015396 D041                       		add.w	d1,d0
00015398 43F8 A400                  		lea	($FFFFA400).w,a1
0001539C 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
000153A0 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
000153A4 6700 FA48                  		beq.w	Obj01_ChkRoll
000153A8 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
000153AC 6700 FA40                  		beq.w	Obj01_ChkRoll
000153B0 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
000153B4 6700                       		beq.s	loc_13976
000153B6 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
000153BA 6700                       		beq.s	loc_13966
000153BC 08A8 0006 0001             		bclr	#6,1(a0)
000153C2 4E75                       		rts	
000153C4                            ; ===========================================================================
000153C4                            
000153C4                            loc_13966:
000153C4 0828 0001 0022             		btst	#1,$22(a0)
000153CA 6700                       		beq.s	loc_13976
000153CC 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000153D2 4E75                       		rts	
000153D4                            ; ===========================================================================
000153D4                            
000153D4                            loc_13976:
000153D4 3428 0008                  		move.w	8(a0),d2
000153D8 0C02 002C                  		cmpi.b	#$2C,d2
000153DC 6400                       		bcc.s	loc_13988
000153DE 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000153E4 4E75                       		rts	
000153E6                            ; ===========================================================================
000153E6                            
000153E6                            loc_13988:
000153E6 0C02 00E0                  		cmpi.b	#-$20,d2
000153EA 6500                       		bcs.s	loc_13996
000153EC 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000153F2 4E75                       		rts	
000153F4                            ; ===========================================================================
000153F4                            
000153F4                            loc_13996:
000153F4 0828 0006 0001             		btst	#6,1(a0)
000153FA 6600                       		bne.s	loc_139B2
000153FC 1228 0026                  		move.b	$26(a0),d1
00015400 6700                       		beq.s	locret_139C2
00015402 0C01 0080                  		cmpi.b	#-$80,d1
00015406 6200                       		bhi.s	locret_139C2
00015408 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001540E 4E75                       		rts	
00015410                            ; ===========================================================================
00015410                            
00015410                            loc_139B2:
00015410 1228 0026                  		move.b	$26(a0),d1
00015414 0C01 0080                  		cmpi.b	#-$80,d1
00015418 6300                       		bls.s	locret_139C2
0001541A 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00015420                            
00015420                            locret_139C2:
00015420 4E75                       		rts	
00015422                            ; End of function Sonic_Loops
00015422                            
00015422                            ; ---------------------------------------------------------------------------
00015422                            ; Sonic when he's drowning
00015422                            ; ---------------------------------------------------------------------------
00015422                             
00015422                            ; ||||||||||||||| S	U B	R O	U T	I N	E |||||||||||||||||||||||||||||||||||||||
00015422                             
00015422                             
00015422                            Sonic_Drowned:
00015422 6100 950C                  		bsr.w   SpeedToPos		; Make Sonic able to move
00015426 0668 0010 0012             		addi.w  #$10,$12(a0)	; Apply gravity
0001542C 6100 F2FE                  		bsr.w   Sonic_RecordPos	; Record position
00015430 6100                       		bsr.s   Sonic_Animate	; Animate Sonic
00015432 6100 0000                  		bsr.w   LoadSonicDynPLC	; Load Sonic's DPLCs
00015436 6000 9512                  		bra.w   DisplaySprite	; And finally, display Sonic
0001543A                            
0001543A                            ; ---------------------------------------------------------------------------
0001543A                            ; Subroutine to	animate	Sonic's sprites
0001543A                            ; ---------------------------------------------------------------------------
0001543A                            
0001543A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001543A                            
0001543A                            
0001543A                            Sonic_Animate:				; XREF: Obj01_Control; et al
0001543A 43F9 0000 0000             		lea	(SonicAniData).l,a1
00015440 7000                       		moveq	#0,d0
00015442 1028 001C                  		move.b	$1C(a0),d0
00015446 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0001544A 6700                       		beq.s	SAnim_Do	; if not, branch
0001544C 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00015450 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00015456 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0001545C                            
0001545C                            SAnim_Do:
0001545C D040                       		add.w	d0,d0
0001545E D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00015462 1011                       		move.b	(a1),d0
00015464 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00015466 1228 0022                  		move.b	$22(a0),d1
0001546A 0201 0001                  		andi.b	#1,d1
0001546E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00015474 8328 0001                  		or.b	d1,1(a0)
00015478 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0001547C 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
0001547E 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00015482                            
00015482                            SAnim_Do2:
00015482 7200                       		moveq	#0,d1
00015484 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00015488 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0001548C 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
0001548E                            
0001548E                            SAnim_Next:
0001548E 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00015492 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00015496                            
00015496                            SAnim_Delay:
00015496 4E75                       		rts	
00015498                            ; ===========================================================================
00015498                            
00015498                            SAnim_End_FF:
00015498 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0001549A 6600                       		bne.s	SAnim_End_FE	; if not, branch
0001549C 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
000154A2 1029 0001                  		move.b	1(a1),d0	; read sprite number
000154A6 60E6                       		bra.s	SAnim_Next
000154A8                            ; ===========================================================================
000154A8                            
000154A8                            SAnim_End_FE:
000154A8 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000154AA 6600                       		bne.s	SAnim_End_FD	; if not, branch
000154AC 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000154B0 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
000154B4 9200                       		sub.b	d0,d1
000154B6 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000154BA 60D2                       		bra.s	SAnim_Next
000154BC                            ; ===========================================================================
000154BC                            
000154BC                            SAnim_End_FD:
000154BC 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000154BE 6600                       		bne.s	SAnim_End	; if not, branch
000154C0 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000154C6                            
000154C6                            SAnim_End:
000154C6 4E75                       		rts	
000154C8                            ; ===========================================================================
000154C8                            
000154C8                            SAnim_WalkRun:				; XREF: SAnim_Do
000154C8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000154CC 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
000154CE 5200                       		addq.b	#1,d0		; is animation walking/running?
000154D0 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
000154D4 7200                       		moveq	#0,d1
000154D6 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
000154DA 1428 0022                  		move.b	$22(a0),d2
000154DE 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
000154E2 6600                       		bne.s	loc_13A70	; if yes, branch
000154E4 4600                       		not.b	d0		; reverse angle
000154E6                            
000154E6                            loc_13A70:
000154E6 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
000154EA 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
000154EC 7203                       		moveq	#3,d1
000154EE                            
000154EE                            loc_13A78:
000154EE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000154F4 B302                       		eor.b	d1,d2
000154F6 8528 0001                  		or.b	d2,1(a0)
000154FA 0828 0005 0022             		btst	#5,$22(a0)
00015500 6600 0000                  		bne.w	SAnim_Push
00015504 E808                       		lsr.b	#4,d0		; divide angle by $10
00015506 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
0001550A 3428 0020                  		move.w	$20(a0),d2	; get Sonic's speed
0001550E 6A00                       		bpl.s	loc_13A9C
00015510 4442                       		neg.w	d2
00015512                            
00015512                            loc_13A9C:
00015512 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00015518 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
0001551C 6400                       		bcc.s	loc_13AB4	; if yes, branch
0001551E 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00015524 1200                       		move.b	d0,d1
00015526 E209                       		lsr.b	#1,d1
00015528 D001                       		add.b	d1,d0
0001552A                            
0001552A                            loc_13AB4:
0001552A D000                       		add.b	d0,d0
0001552C 1600                       		move.b	d0,d3
0001552E 4442                       		neg.w	d2
00015530 0642 0800                  		addi.w	#$800,d2
00015534 6A00                       		bpl.s	loc_13AC2
00015536 7400                       		moveq	#0,d2
00015538                            
00015538                            loc_13AC2:
00015538 E04A                       		lsr.w	#8,d2
0001553A 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001553E 6100 FF42                  		bsr.w	SAnim_Do2
00015542 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00015546 4E75                       		rts	
00015548                            ; ===========================================================================
00015548                            
00015548                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00015548 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
0001554A 6600                       		bne.s	SAnim_Push	; if not, branch
0001554C 3428 0020                  		move.w	$20(a0),d2	; get Sonic's speed
00015550 6A00                       		bpl.s	loc_13ADE
00015552 4442                       		neg.w	d2
00015554                            
00015554                            loc_13ADE:
00015554 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
0001555A 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
0001555E 6400                       		bcc.s	loc_13AF0	; if yes, branch
00015560 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00015566                            
00015566                            loc_13AF0:
00015566 4442                       		neg.w	d2
00015568 0642 0400                  		addi.w	#$400,d2
0001556C 6A00                       		bpl.s	loc_13AFA
0001556E 7400                       		moveq	#0,d2
00015570                            
00015570                            loc_13AFA:
00015570 E04A                       		lsr.w	#8,d2
00015572 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00015576 1228 0022                  		move.b	$22(a0),d1
0001557A 0201 0001                  		andi.b	#1,d1
0001557E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00015584 8328 0001                  		or.b	d1,1(a0)
00015588 6000 FEF8                  		bra.w	SAnim_Do2
0001558C                            ; ===========================================================================
0001558C                            
0001558C                            SAnim_Push:				; XREF: SAnim_RollJump
0001558C 3428 0020                  		move.w	$20(a0),d2	; get Sonic's speed
00015590 6B00                       		bmi.s	loc_13B1E
00015592 4442                       		neg.w	d2
00015594                            
00015594                            loc_13B1E:
00015594 0642 0800                  		addi.w	#$800,d2
00015598 6A00                       		bpl.s	loc_13B26
0001559A 7400                       		moveq	#0,d2
0001559C                            
0001559C                            loc_13B26:
0001559C EC4A                       		lsr.w	#6,d2
0001559E 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000155A2 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000155A8 1228 0022                  		move.b	$22(a0),d1
000155AC 0201 0001                  		andi.b	#1,d1
000155B0 0228 00FC 0001             		andi.b	#$FC,1(a0)
000155B6 8328 0001                  		or.b	d1,1(a0)
000155BA 6000 FEC6                  		bra.w	SAnim_Do2
000155BE                            ; End of function Sonic_Animate
000155BE                            
000155BE                            ; ===========================================================================
000155BE                            SonicAniData:
000155BE                            	include "_anim\Sonic.asm"
000155BE                            ; ---------------------------------------------------------------------------
000155BE                            ; Animation script - Sonic
000155BE                            ; ---------------------------------------------------------------------------
000155BE 0000                       		dc.w SonAni_Walk-SonicAniData
000155C0 0000                       		dc.w SonAni_Run-SonicAniData
000155C2 0000                       		dc.w SonAni_Roll-SonicAniData
000155C4 0000                       		dc.w SonAni_Roll2-SonicAniData
000155C6 0000                       		dc.w SonAni_Push-SonicAniData
000155C8 0000                       		dc.w SonAni_Wait-SonicAniData
000155CA 0000                       		dc.w SonAni_Balance-SonicAniData
000155CC 0000                       		dc.w SonAni_LookUp-SonicAniData
000155CE 0000                       		dc.w SonAni_Duck-SonicAniData
000155D0 0000                       		dc.w SonAni_Warp1-SonicAniData
000155D2 0000                       		dc.w SonAni_Warp2-SonicAniData
000155D4 0000                       		dc.w SonAni_Warp3-SonicAniData
000155D6 0000                       		dc.w SonAni_Warp4-SonicAniData
000155D8 0000                       		dc.w SonAni_Stop-SonicAniData
000155DA 0000                       		dc.w SonAni_Float1-SonicAniData
000155DC 0000                       		dc.w SonAni_Float2-SonicAniData
000155DE 0000                       		dc.w SonAni_Spring-SonicAniData
000155E0 0000                       		dc.w SonAni_LZHang-SonicAniData
000155E2 0000                       		dc.w SonAni_Leap1-SonicAniData
000155E4 0000                       		dc.w SonAni_Leap2-SonicAniData
000155E6 0000                       		dc.w SonAni_Surf-SonicAniData
000155E8 0000                       		dc.w SonAni_Bubble-SonicAniData
000155EA 0000                       		dc.w SonAni_Death1-SonicAniData
000155EC 0000                       		dc.w SonAni_Drown-SonicAniData
000155EE 0000                       		dc.w SonAni_Death2-SonicAniData
000155F0 0000                       		dc.w SonAni_Shrink-SonicAniData
000155F2 0000                       		dc.w SonAni_Hurt-SonicAniData
000155F4 0000                       		dc.w SonAni_LZSlide-SonicAniData
000155F6 0000                       		dc.w SonAni_Blank-SonicAniData
000155F8 0000                       		dc.w SonAni_Float3-SonicAniData
000155FA 0000                       		dc.w SonAni_Float4-SonicAniData
000155FC FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
00015604 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
0001560C FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00015614 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
0001561C FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00015624 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
0001563A 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
0001563E 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00015642 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00015646 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
0001564A 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
0001564E 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00015652 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00015656 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
0001565A 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
0001565E 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00015666 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
0001566A 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
0001566E 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00015674 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
0001567A 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
0001567E 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00015686 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
0001568A 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
0001568E 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00015692 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
0001569C 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
000156A0 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
000156A4 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
000156A8 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
000156B0 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
000156B4                            		even
000156B4                            		even
000156B4                            
000156B4                            ; ---------------------------------------------------------------------------
000156B4                            ; Sonic	pattern	loading	subroutine
000156B4                            ; ---------------------------------------------------------------------------
000156B4                            
000156B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156B4                            
000156B4                            
000156B4                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
000156B4 7000                       		moveq	#0,d0
000156B6 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000156BA B038 F766                  		cmp.b	($FFFFF766).w,d0
000156BE 6700 0000                  		beq.w	locret_13C96
000156C2 11C0 F766                  		move.b	d0,($FFFFF766).w
000156C6 45F9 0000 0000             		lea	(SonicDynPLC).l,a2	
000156CC D040                       		add.w	d0,d0
000156CE D4F2 0000                  		adda.w	(a2,d0.w),a2
000156D2 7A00                       		moveq	#0,d5
000156D4 1A1A                       		move.b	(a2)+,d5
000156D6 5345                       		subq.w	#1,d5
000156D8 6B00                       		bmi.s	locret_13C96
000156DA 383C F000                  		move.w	#$F000,d4
000156DE 2C3C 0000 0000             		move.l	#Art_Sonic,d6
000156E4                            
000156E4                            SPLC_ReadEntry:
000156E4 7200                       		moveq	#0,d1
000156E6 121A                       		move.b	(a2)+,d1
000156E8 E149                       		lsl.w	#8,d1
000156EA 121A                       		move.b	(a2)+,d1
000156EC 3601                       		move.w	d1,d3
000156EE E04B                       		lsr.w	#8,d3
000156F0 0243 00F0                  		andi.w	#$F0,d3
000156F4 0643 0010                  		addi.w	#$10,d3
000156F8 0241 0FFF                  		andi.w	#$FFF,d1
000156FC EB89                       		lsl.l	#5,d1
000156FE D286                       		add.l	d6,d1
00015700 3404                       		move.w	d4,d2
00015702 D843                       		add.w	d3,d4
00015704 D843                       		add.w	d3,d4
00015706 4EB9 0000 4A92             		jsr	(QueueDMATransfer).l
0001570C 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00015710                             
00015710                            locret_13C96:
00015710 4E75                       		rts	
00015712                            ; End of function LoadSonicDynPLC
00015712                            
00015712                            ; ===========================================================================
00015712                            ; ---------------------------------------------------------------------------
00015712                            ; Object 02 - Sonime
00015712                            ; ---------------------------------------------------------------------------
00015712                            
00015712                            Obj02:
00015712 7000                       		moveq	#0,d0
00015714 41F8 F5C0                  		lea	(SonimeSST).w,a0
00015718 1028 0004                  		move.b	sonime_routine(a0),d0
0001571C 323B 0000                  		move.w	Obj02_Index(pc,d0.w),d1
00015720 4EFB 1000                  		jmp	Obj02_Index(pc,d1.w)
00015724                            ; ===========================================================================
00015724 0000                       Obj02_Index:	dc.w Obj02_Init-Obj02_Index
00015726 0000                       		dc.w Obj02_MoveIn-Obj02_Index
00015728 0000                       		dc.w Obj02_Animate-Obj02_Index
0001572A                            ; ===========================================================================
0001572A                            
0001572A                            Obj02_Init:				; XREF: Obj0A_Index
0001572A 5428 0004                  		addq.b	#2,sonime_routine(a0)
0001572E 223C 0000 0000             		move.l #Art_Sonime_Torso,d1
00015734 343C F400                  		move.w #(torsoart*$20),d2
00015738 363C 00C0                  		move.w #$C0,d3
0001573C 4EB9 0000 4A92             		jsr (QueueDMATransfer).l
00015742 223C 0000 0000             		move.l #Art_Sonime_Head,d1
00015748 343C F580                  		move.w #(headart*$20),d2
0001574C 363C 0140                  		move.w #$140,d3
00015750 4EB9 0000 4A92             		jsr (QueueDMATransfer).l
00015756 223C 0000 0000             		move.l #Art_Sonime_Hair,d1
0001575C 343C F300                  		move.w #(hairart*$20),d2
00015760 363C 0080                  		move.w #$80,d3
00015764 4EB9 0000 4A92             		jsr (QueueDMATransfer).l
0001576A 117C 0030 0017             		move.b	#$30,sonime_movein(a0)
00015770 31FC 0200 F5E0             		move.w	#$200,(SonimeSST+sonime_pausetimer).w
00015776                            
00015776                            Obj02_MoveIn:
00015776 5528 0017                  		subq.b	#2,sonime_movein(a0)
0001577A 1028 0017                  		move.b	sonime_movein(a0),d0
0001577E 1140 0002                  		move.b	d0,sonime_headx(a0)
00015782 1140 0016                  		move.b	d0,sonime_torsox(a0)
00015786 1140 0009                  		move.b	d0,sonime_hairx(a0)
0001578A 4A00                       		tst.b	d0
0001578C 6600 0000                  		bne.w	Obj02_Display
00015790 5428 0004                  		addq.b	#2,sonime_routine(a0)
00015794                            
00015794                            Obj02_Animate:
00015794 5350                       		subi.w	#1,sonime_headtimer(a0)
00015796 6A00 0000                  		bpl.w	Obj02_Face
0001579A 4EB8 29A6                  		jsr	RandomNumber
0001579E 0240 003F                  		andi.w	#$3F,d0
000157A2 0640 0080                  		addi.w	#$80,d0
000157A6 3080                       		move.w	d0,sonime_headtimer(a0)
000157A8 4EB8 29A6                  		jsr	RandomNumber
000157AC 0240 0006                  		andi.w	#6,d0
000157B0 303B 0000                  		move.w	Obj02_HeadIndex(pc,d0.w),d0
000157B4 4EFB 0000                  		jmp	Obj02_HeadIndex(pc,d0.w)
000157B8                            
000157B8                            ; ===========================================================================
000157B8 0000                       Obj02_HeadIndex:	dc.w Obj02_Up-Obj02_HeadIndex
000157BA 0000                       		dc.w Obj02_Down-Obj02_HeadIndex
000157BC 0000                       		dc.w Obj02_Left-Obj02_HeadIndex
000157BE 0000                       		dc.w Obj02_Right-Obj02_HeadIndex
000157C0                            ; ===========================================================================
000157C0                            
000157C0                            Obj02_Up:
000157C0 4A28 0003                  		tst.b	sonime_heady(a0)
000157C4 6D00                       		blt.s	Obj02_Down
000157C6 5328 0003                  		subi.b	#1,sonime_heady(a0)
000157CA 6000                       		bra.s	Obj02_Face
000157CC                            
000157CC                            Obj02_Down:
000157CC 4A28 0003                  		tst.b	sonime_heady(a0)
000157D0 6EEE                       		bgt.s	Obj02_Up
000157D2 5228 0003                  		addi.b	#1,sonime_heady(a0)
000157D6 6000                       		bra.s	Obj02_Face
000157D8                            
000157D8                            Obj02_Left:
000157D8 4A28 0002                  		tst.b	sonime_headx(a0)
000157DC 6D00                       		blt.s	Obj02_Right
000157DE 5328 0002                  		subi.b	#1,sonime_headx(a0)
000157E2 6000                       		bra.s	Obj02_Face
000157E4                            
000157E4                            Obj02_Right:
000157E4 4A28 0002                  		tst.b	sonime_headx(a0)
000157E8 6EEE                       		bgt.s	Obj02_Left
000157EA 5228 0002                  		addi.b	#1,sonime_headx(a0)
000157EE                            
000157EE                            Obj02_Face:
000157EE 4A38 FE12                  		tst.b	($FFFFFE12).w
000157F2 6700 0000                  		beq.w	@NoWait
000157F6 0C28 0001 000E             		cmpi.b	#face_blink,sonime_face(a0)
000157FC 6700                       		beq.s	@UnBlink
000157FE 5368 0010                  		subi.w	#1,sonime_facetimer(a0)
00015802 6A00 0000                  		bpl.w	@NoWait
00015806 317C 0003 0010             		move.w	#3,sonime_facetimer(a0)
0001580C 117C 0001 000E             		move.b	#face_blink,sonime_face(a0)
00015812 6000 0000                  		bra.w	@NoWait
00015816                            
00015816                            	@UnBlink:
00015816 5368 0010                  		subi.w	#1,sonime_facetimer(a0)
0001581A 6A00 0000                  		bpl.w	@NoWait
0001581E 117C 0004 000E             		move.b	#face_neutralr,sonime_face(a0)
00015824 4EB8 29A6                  		jsr	RandomNumber
00015828 0240 003F                  		andi.w	#$3F,d0
0001582C 0640 00B0                  		addi.w	#$B0,d0
00015830 3140 0010                  		move.w	d0,sonime_facetimer(a0)
00015834 4EB8 29A6                  		jsr	RandomNumber
00015838 0200 000F                  		andi.b	#$F,d0
0001583C 4A00                       		tst.b	d0
0001583E 6700                       		beq.s	@NoBlink
00015840 117C 0003 000E             		move.b	#face_neutralm,sonime_face(a0)
00015846 0C00 0001                  		cmpi.b	#1,d0
0001584A 6700                       		beq.s	@NoBlink
0001584C 117C 0002 000E             		move.b	#face_neutrallm,sonime_face(a0)
00015852 0C00 0002                  		cmpi.b	#2,d0
00015856 6700                       		beq.s	@NoBlink
00015858 117C 0000 000E             		move.b	#face_neutrall,sonime_face(a0)
0001585E                            
0001585E                            	@NoBlink:
0001585E 0C38 0005 D01C             		cmpi.b	#5,($FFFFD01C).w
00015864 6600                       		bne.s	@NoWait
00015866 0C38 000F D01B             		cmpi.b	#$F,($FFFFD01B).w
0001586C 6500                       		bcs.s	@NoWait
0001586E 117C 000B 000E             		move.b	#face_impatient,sonime_face(a0)
00015874 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeImpatient		
000158DA                            
000158DA                            	@NoWait:
000158DA 0C78 0800 D010             		cmpi.w	#$800,($FFFFD010).w
000158E0 6D00                       		blt.s	@TooSlow
000158E2 117C 0007 000E             		move.b	#face_happy,sonime_face(a0)
000158E8 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeSpeed
0001594E                            
0001594E                            	@TooSlow:
0001594E 0C78 F800 D010             		cmpi.w	#-$800,($FFFFD010).w
00015954 6E00                       		bgt.s	@TooSlow2
00015956 117C 0007 000E             		move.b	#face_happy,sonime_face(a0)
0001595C                            
0001595C                            	@TooSlow2:
0001595C 7800                       		moveq	#0,d4
0001595E 1828 000E                  		move.b	sonime_face(a0),d4
00015962 B828 000F                  		cmp.b	sonime_faceold(a0),d4
00015966 6700                       		beq.s	Obj02_Ear
00015968 1144 000F                  		move.b	d4,sonime_faceold(a0)
0001596C ED4C                       		lsl.w	#6,d4
0001596E 3A04                       		move.w	d4,d5
00015970 DA45                       		add.w	d5,d5
00015972 D845                       		add.w	d5,d4
00015974 223C 0000 0000             		move.l #Art_Sonime_Faces,d1
0001597A D244                       		add.w	d4,d1
0001597C 343C F5C0                  		move.w #(headart*$20+$40),d2
00015980 363C 0020                  		move.w #$20,d3
00015984 4EB9 0000 4A92             		jsr (QueueDMATransfer).l
0001598A 223C 0000 0000             		move.l #(Art_Sonime_Faces+$40),d1
00015990 D244                       		add.w	d4,d1
00015992 343C F640                  		move.w #(headart*$20+$C0),d2
00015996 363C 0020                  		move.w #$20,d3
0001599A 4EB9 0000 4A92             		jsr (QueueDMATransfer).l
000159A0 223C 0000 0000             		move.l #(Art_Sonime_Faces+$80),d1
000159A6 D244                       		add.w	d4,d1
000159A8 343C F6C0                  		move.w #(headart*$20+$140),d2
000159AC 363C 0020                  		move.w #$20,d3
000159B0 4EB9 0000 4A92             		jsr (QueueDMATransfer).l
000159B6                            
000159B6                            Obj02_Ear:
000159B6 4A28 0012                  		tst.b	sonime_ear(a0)
000159BA 6600                       		bne.s	@UnTwitch
000159BC 5368 0014                  		subi.w	#1,sonime_eartimer(a0)
000159C0 6A00                       		bpl.s	@NoTwitch
000159C2 317C 000F 0014             		move.w	#$F,sonime_eartimer(a0)
000159C8 4EB8 29A6                  		jsr	RandomNumber
000159CC 0200 0001                  		andi.b	#1,d0
000159D0 5200                       		addq.b	#1,d0
000159D2 1140 0012                  		move.b	d0,sonime_ear(a0)
000159D6 6000                       		bra.s	@NoTwitch
000159D8                            
000159D8                            	@UnTwitch:
000159D8 5368 0014                  		subi.w	#1,sonime_eartimer(a0)
000159DC 6A00                       		bpl.s	@NoTwitch
000159DE 117C 0000 0012             		move.b	#0,sonime_ear(a0)
000159E4 4EB8 29A6                  		jsr	RandomNumber
000159E8 0240 007F                  		andi.w	#$7F,d0
000159EC 0640 0100                  		addi.w	#$100,d0
000159F0 3140 0014                  		move.w	d0,sonime_eartimer(a0)
000159F4                            
000159F4                            	@NoTwitch:
000159F4 7800                       		moveq	#0,d4
000159F6 1828 0012                  		move.b	sonime_ear(a0),d4
000159FA B828 0013                  		cmp.b	sonime_earold(a0),d4
000159FE 6700                       		beq.s	Obj02_Display
00015A00 1144 0013                  		move.b	d4,sonime_earold(a0)
00015A04 EB0C                       		lsl.b	#5,d4
00015A06 0204 0020                  		andi.b	#$20,d4
00015A0A 223C 0000 0000             		move.l #Art_Sonime_LeftEar,d1
00015A10 D284                       		add.l	d4,d1
00015A12 343C F580                  		move.w #(headart*$20),d2
00015A16 363C 0010                  		move.w #$10,d3
00015A1A 4EB9 0000 4A92             		jsr (QueueDMATransfer).l
00015A20 7800                       		moveq	#0,d4
00015A22 1828 0012                  		move.b	sonime_ear(a0),d4
00015A26 EB0C                       		lsl.b	#5,d4
00015A28 0204 0040                  		andi.b	#$40,d4
00015A2C 223C 0000 0000             		move.l #Art_Sonime_RightEar,d1
00015A32 D284                       		add.l	d4,d1
00015A34 343C F680                  		move.w #(headart*$20+$100),d2
00015A38 363C 0020                  		move.w #$20,d3
00015A3C 4EB9 0000 4A92             		jsr (QueueDMATransfer).l
00015A42                            
00015A42                            Obj02_Display:
00015A42 7200                       		moveq	#0,d1
00015A44 7400                       		moveq	#0,d2
00015A46 7600                       		moveq	#0,d3
00015A48 7800                       		moveq	#0,d4
00015A4A 7A00                       		moveq	#0,d5
00015A4C 1628 0002                  		move.b	sonime_headx(a0),d3	; set X pos
00015A50 1428 0003                  		move.b	sonime_heady(a0),d2	; set Y pos
00015A54 4883                       		ext.w	d3
00015A56 4882                       		ext.w	d2
00015A58 0643 01A0                  		addi.w	#$1A0,d3
00015A5C 0642 0140                  		addi.w	#$140,d2
00015A60 43F9 0000 0000             		lea	(Map_sonime_head).l,a1
00015A66 367C 87AC                  		movea.w	#($8000+headart),a3	; set art tile and flags
00015A6A D241                       		add.w	d1,d1
00015A6C D2F1 1000                  		adda.w	(a1,d1.w),a1
00015A70 1219                       		move.b	(a1)+,d1
00015A72 5301                       		subq.b	#1,d1
00015A74 6B00                       		bmi.s	@nextspr
00015A76 6100 9182                  		bsr.w	DrawSprite_Loop
00015A7A                            
00015A7A                            	@nextspr:
00015A7A 7200                       		moveq	#0,d1
00015A7C 7600                       		moveq	#0,d3
00015A7E 1628 0016                  		move.b	sonime_torsox(a0),d3
00015A82 0643 01A0                  		add.w	#$1A0,d3	; set X pos
00015A86 343C 0154                  		move.w	#$154,d2	; set Y pos
00015A8A 43F9 0000 0000             		lea	(Map_sonime_torso).l,a1
00015A90 367C 87A0                  		movea.w	#($8000+torsoart),a3	; set art tile and flags
00015A94 D241                       		add.w	d1,d1
00015A96 D2F1 1000                  		adda.w	(a1,d1.w),a1
00015A9A 1219                       		move.b	(a1)+,d1
00015A9C 5301                       		subq.b	#1,d1
00015A9E 6B00                       		bmi.s	@nextspr2
00015AA0 6100 9158                  		bsr.w	DrawSprite_Loop
00015AA4                            
00015AA4                            	@nextspr2:
00015AA4 7200                       		moveq	#0,d1
00015AA6 7400                       		moveq	#0,d2
00015AA8 7600                       		moveq	#0,d3
00015AAA 1628 0009                  		move.b	sonime_hairx(a0),d3	; set X pos
00015AAE 1428 000D                  		move.b	sonime_hairy(a0),d2	; set Y pos
00015AB2 4883                       		ext.w	d3
00015AB4 4882                       		ext.w	d2
00015AB6 0643 01A0                  		addi.w	#$1A0,d3
00015ABA 0642 0153                  		addi.w	#$153,d2
00015ABE 1168 0007 0009             		move.b	sonime_headx3(a0),sonime_hairx(a0)
00015AC4 1168 000B 000D             		move.b	sonime_heady3(a0),sonime_hairy(a0)
00015ACA 1168 0006 0007             		move.b	sonime_headx2(a0),sonime_headx3(a0)
00015AD0 1168 000A 000B             		move.b	sonime_heady2(a0),sonime_heady3(a0)
00015AD6 1168 0002 0006             		move.b	sonime_headx(a0),sonime_headx2(a0)
00015ADC 1168 0003 000A             		move.b	sonime_heady(a0),sonime_heady2(a0)
00015AE2 43F9 0000 0000             		lea	(Map_sonime_hair).l,a1
00015AE8 367C 8798                  		movea.w	#($8000+hairart),a3	; set art tile and flags
00015AEC D241                       		add.w	d1,d1
00015AEE D2F1 1000                  		adda.w	(a1,d1.w),a1
00015AF2 1219                       		move.b	(a1)+,d1
00015AF4 5301                       		subq.b	#1,d1
00015AF6 6B00                       		bmi.s	Obj02_Done
00015AF8 6100 9100                  		bsr.w	DrawSprite_Loop
00015AFC                            
00015AFC                            Obj02_Done:		
00015AFC 4E75                       		rts	
00015AFE                            
00015AFE                            ; ---------------------------------------------------------------------------
00015AFE                            ; Sprite mappings - sonime
00015AFE                            ; ---------------------------------------------------------------------------
00015AFE                            Map_sonime_torso:
00015AFE                            	include "_maps\sonime_torso.asm"
00015AFE                            ; ================================================================================
00015AFE                            ; Sprite Mappings - generated by Flex 2 Fri Dec 18 2020 22:06:55 GMT-0500 (Eastern Standard Time)
00015AFE                            ; ================================================================================
00015AFE                            
00015AFE                            DATAUI6DX8OCWY:
00015AFE 0000                       	dc.w DATAUI6DX8OCWY_0-DATAUI6DX8OCWY
00015B00 01                         DATAUI6DX8OCWY_0: dc.b $1
00015B01 F40E 0000 F0               	dc.b $F4, $E, $0, $0, $F0
00015B06                            	even
00015B06                            	even
00015B06                            
00015B06                            Map_sonime_head:
00015B06                            	include "_maps\sonime_head.asm"
00015B06                            ; ================================================================================
00015B06                            ; Sprite Mappings - generated by Flex 2 Fri Dec 18 2020 22:05:21 GMT-0500 (Eastern Standard Time)
00015B06                            ; ================================================================================
00015B06                            
00015B06                            DATAYDZD849MEMA:
00015B06 0000                       	dc.w DATAYDZD849MEMA_0-DATAYDZD849MEMA
00015B08 03                         DATAYDZD849MEMA_0: dc.b $3
00015B09 E80F 0000 F0               	dc.b $E8, $F, $0, $0, $F0
00015B0E 0808 0010 F0               	dc.b $8, $8, $0, $10, $F0
00015B13 1000 0013 00               	dc.b $10, $0, $0, $13, $0
00015B18                            	even
00015B18                            	even
00015B18                            
00015B18                            Map_sonime_hair:
00015B18                            	include "_maps\sonime_hair.asm"
00015B18                            ; ================================================================================
00015B18                            ; Sprite Mappings - generated by Flex 2 Sun Dec 20 2020 17:48:20 GMT-0500 (Eastern Standard Time)
00015B18                            ; ================================================================================
00015B18                            
00015B18                            DATAQZ9CZ11E8T:
00015B18 0000                       	dc.w DATAQZ9CZ11E8T_0-DATAQZ9CZ11E8T
00015B1A 03                         DATAQZ9CZ11E8T_0: dc.b $3
00015B1B F40C 0000 F0               	dc.b $F4, $C, $0, $0, $F0
00015B20 FC01 0004 F0               	dc.b $FC, $1, $0, $4, $F0
00015B25 FC01 0006 08               	dc.b $FC, $1, $0, $6, $8
00015B2A                            	even
00015B2A                            	even
00015B2A                            
00015B2A                            ; ===========================================================================
00015B2A                            ; ---------------------------------------------------------------------------
00015B2A                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00015B2A                            ; ---------------------------------------------------------------------------
00015B2A                            
00015B2A                            Obj0A:					; XREF: Obj_Index
00015B2A 7000                       		moveq	#0,d0
00015B2C 1028 0024                  		move.b	$24(a0),d0
00015B30 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00015B34 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00015B38                            ; ===========================================================================
00015B38 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00015B3C 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00015B40 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00015B44 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00015B48 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00015B4A                            ; ===========================================================================
00015B4A                            
00015B4A                            Obj0A_Main:				; XREF: Obj0A_Index
00015B4A 5428 0024                  		addq.b	#2,$24(a0)
00015B4E 217C 0001 439A 0004        		move.l	#Map_obj64,4(a0)
00015B56 317C 8348 0002             		move.w	#$8348,2(a0)
00015B5C 117C 0084 0001             		move.b	#$84,1(a0)
00015B62 117C 0010 0019             		move.b	#$10,$19(a0)
00015B68 117C 0001 0018             		move.b	#1,$18(a0)
00015B6E 1028 0028                  		move.b	$28(a0),d0
00015B72 6A00                       		bpl.s	loc_13D00
00015B74 5028 0024                  		addq.b	#8,$24(a0)
00015B78 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00015B80 317C 0440 0002             		move.w	#$440,2(a0)
00015B86 0240 007F                  		andi.w	#$7F,d0
00015B8A 1140 0033                  		move.b	d0,$33(a0)
00015B8E 6000 0000                  		bra.w	Obj0A_Countdown
00015B92                            ; ===========================================================================
00015B92                            
00015B92                            loc_13D00:
00015B92 1140 001C                  		move.b	d0,$1C(a0)
00015B96 3168 0008 0030             		move.w	8(a0),$30(a0)
00015B9C 317C FF78 0012             		move.w	#-$88,$12(a0)
00015BA2                            
00015BA2                            Obj0A_Animate:				; XREF: Obj0A_Index
00015BA2 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015BA8 4EB9 0000 B9AA             		jsr	AnimateSprite
00015BAE                            
00015BAE                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00015BAE 3038 F646                  		move.w	($FFFFF646).w,d0
00015BB2 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00015BB6 6400                       		bcc.s	Obj0A_ChkDel	; if not, branch
00015BB8 3038 F60E                  		move.w	(v_pocketbottom).w,d0
00015BBC B068 000C                  		cmp.w	$C(a0),d0
00015BC0 6500                       		bcs.s	Obj0A_Wobble
00015BC2 3028 0008                  		move.w	8(a0),d0
00015BC6 9078 F610                  		sub.w	(v_pocketx).w,d0
00015BCA 0640 0060                  		addi.w	#$60,d0
00015BCE 6B00                       		bmi.s	Obj0A_Wobble
00015BD0 0C40 00C0                  		cmpi.w	#$C0,d0
00015BD4 6400                       		bcc.s	Obj0A_Wobble
00015BD6                            
00015BD6                            Obj0A_ChkDel:
00015BD6 117C 0006 0024             		move.b	#6,$24(a0)
00015BDC 5E28 001C                  		addq.b	#7,$1C(a0)
00015BE0 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00015BE6 6700                       		beq.s	Obj0A_Display
00015BE8 6000                       		bra.s	Obj0A_Display
00015BEA                            ; ===========================================================================
00015BEA                            
00015BEA                            Obj0A_Wobble:
00015BEA 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00015BEE 6700                       		beq.s	loc_13D44
00015BF0 5868 0030                  		addq.w	#4,$30(a0)
00015BF4                            
00015BF4                            loc_13D44:
00015BF4 1028 0026                  		move.b	$26(a0),d0
00015BF8 5228 0026                  		addq.b	#1,$26(a0)
00015BFC 0240 007F                  		andi.w	#$7F,d0
00015C00 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00015C06 1031 0000                  		move.b	(a1,d0.w),d0
00015C0A 4880                       		ext.w	d0
00015C0C D068 0030                  		add.w	$30(a0),d0
00015C10 3140 0008                  		move.w	d0,8(a0)
00015C14 6100                       		bsr.s	Obj0A_ShowNumber
00015C16 4EBA 8D18                  		jsr	SpeedToPos
00015C1A 4A28 0001                  		tst.b	1(a0)
00015C1E 6A00                       		bpl.s	Obj0A_Delete
00015C20 4EFA 8D28                  		jmp	DisplaySprite
00015C24                            ; ===========================================================================
00015C24                            
00015C24                            Obj0A_Delete:
00015C24 4EFA 8D74                  		jmp	DeleteObject
00015C28                            ; ===========================================================================
00015C28                            
00015C28                            Obj0A_Display:				; XREF: Obj0A_Index
00015C28 6100                       		bsr.s	Obj0A_ShowNumber
00015C2A 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015C30 4EB9 0000 B9AA             		jsr	AnimateSprite
00015C36 4EFA 8D12                  		jmp	DisplaySprite
00015C3A                            ; ===========================================================================
00015C3A                            
00015C3A                            Obj0A_Delete2:				; XREF: Obj0A_Index
00015C3A 4EFA 8D5E                  		jmp	DeleteObject
00015C3E                            ; ===========================================================================
00015C3E                            
00015C3E                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00015C3E 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00015C44 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00015C46 5368 0038                  		subq.w	#1,$38(a0)
00015C4A 6600                       		bne.s	Obj0A_Display2
00015C4C 117C 000E 0024             		move.b	#$E,$24(a0)
00015C52 5E28 001C                  		addq.b	#7,$1C(a0)
00015C56 60D0                       		bra.s	Obj0A_Display
00015C58                            ; ===========================================================================
00015C58                            
00015C58                            Obj0A_Display2:
00015C58 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015C5E 4EB9 0000 B9AA             		jsr	AnimateSprite
00015C64 4A28 0001                  		tst.b	1(a0)
00015C68 6A00                       		bpl.s	Obj0A_Delete3
00015C6A 4EFA 8CDE                  		jmp	DisplaySprite
00015C6E                            ; ===========================================================================
00015C6E                            
00015C6E                            Obj0A_Delete3:
00015C6E 4EFA 8D2A                  		jmp	DeleteObject
00015C72                            ; ===========================================================================
00015C72                            
00015C72                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00015C72 4A68 0038                  		tst.w	$38(a0)
00015C76 6700                       		beq.s	locret_13E1A
00015C78 5368 0038                  		subq.w	#1,$38(a0)
00015C7C 6600                       		bne.s	locret_13E1A
00015C7E 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00015C84 6400                       		bcc.s	locret_13E1A
00015C86 317C 000F 0038             		move.w	#$F,$38(a0)
00015C8C 4268 0012                  		clr.w	$12(a0)
00015C90 117C 0080 0001             		move.b	#$80,1(a0)
00015C96 3028 0008                  		move.w	8(a0),d0
00015C9A 9078 F700                  		sub.w	($FFFFF700).w,d0
00015C9E 0640 0080                  		addi.w	#$80,d0
00015CA2 3140 0008                  		move.w	d0,8(a0)
00015CA6 3028 000C                  		move.w	$C(a0),d0
00015CAA 9078 F704                  		sub.w	($FFFFF704).w,d0
00015CAE 0640 0080                  		addi.w	#$80,d0
00015CB2 3140 000A                  		move.w	d0,$A(a0)
00015CB6 117C 000C 0024             		move.b	#$C,$24(a0)
00015CBC                            
00015CBC                            locret_13E1A:
00015CBC 4E75                       		rts	
00015CBE                            ; ===========================================================================
00015CBE                            Obj0A_WobbleData:
00015CBE 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00015CCF 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00015CE0 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00015CF1 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00015D01 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00015D0E FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015D1B FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015D28 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015D35 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00015D3E 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00015D4F 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00015D60 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00015D71 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00015D81 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00015D8E FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015D9B FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015DA8 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015DB5 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00015DBE                            ;===========================================================================
00015DBE                            
00015DBE                            Obj0A_Countdown:			; XREF: Obj0A_Index
00015DBE 4A68 002C                  		tst.w	$2C(a0)
00015DC2 6600 0000                  		bne.w	loc_13F86
00015DC6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00015DCC 6400 0000                  		bcc.w	locret_1408C
00015DD0 0838 0006 D022             		btst	#6,($FFFFD022).w
00015DD6 6700 0000                  		beq.w	locret_1408C
00015DDA 5368 0038                  		subq.w	#1,$38(a0)
00015DDE 6A00 0000                  		bpl.w	loc_13FAC
00015DE2 317C 003B 0038             		move.w	#59,$38(a0)
00015DE8 317C 0001 0036             		move.w	#1,$36(a0)
00015DEE 4EB9 0000 29A6             		jsr	(RandomNumber).l
00015DF4 0240 0001                  		andi.w	#1,d0
00015DF8 1140 0034                  		move.b	d0,$34(a0)
00015DFC 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00015E00 0C40 0019                  		cmpi.w	#$19,d0
00015E04 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00015E06 0C40 0014                  		cmpi.w	#$14,d0
00015E0A 6700                       		beq.s	Obj0A_WarnSound
00015E0C 0C40 000F                  		cmpi.w	#$F,d0
00015E10 6700                       		beq.s	Obj0A_WarnSound
00015E12 0C40 000C                  		cmpi.w	#$C,d0
00015E16 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00015E18 6600                       		bne.s	loc_13F02
00015E1A 303C 0092                  		move.w	#$92,d0
00015E1E 4EB9 0000 11F0             		jsr	(PlaySound).l	; play countdown music
00015E24                            
00015E24                            loc_13F02:
00015E24 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00015E2A 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00015E30 5328 0032                  		subq.b	#1,$32(a0)
00015E34 6A00                       		bpl.s	Obj0A_ReduceAir
00015E36 1168 0033 0032             		move.b	$33(a0),$32(a0)
00015E3C 08E8 0007 0036             		bset	#7,$36(a0)
00015E42 6000                       		bra.s	Obj0A_ReduceAir
00015E44                            ; ===========================================================================
00015E44                            
00015E44                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00015E44 303C 00C2                  		move.w	#$C2,d0
00015E48 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00015E4E                            
00015E4E                            Obj0A_ReduceAir:
00015E4E 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00015E52 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00015E56 6100 0000                  		bsr.w	ResumeMusic
00015E5A 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00015E60 303C 00B2                  		move.w	#$B2,d0
00015E64 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play drowning sound
00015E6A 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
00015E70 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
00015E76 117C 000A 0034             		move.b	#$A,$34(a0)
00015E7C 317C 0001 0036             		move.w	#1,$36(a0)
00015E82 317C 0078 002C             		move.w	#$78,$2C(a0)
00015E88 2F08                       		move.l	a0,-(sp)
00015E8A 41F8 D000                  		lea	($FFFFD000).w,a0
00015E8E 6100 F366                  		bsr.w	Sonic_ResetOnFloor
00015E92 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00015E98 08E8 0001 0022             		bset	#1,$22(a0)
00015E9E 08E8 0007 0002             		bset	#7,2(a0)
00015EA4 317C 0000 0012             		move.w	#0,$12(a0)
00015EAA 317C 0000 0010             		move.w	#0,$10(a0)
00015EB0 317C 0000 0020             		move.w	#0,$20(a0)
00015EB6 117C 000A 0024             		move.b	#$A,$24(a0)		; Force the character to drown		
00015EBC 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00015EC2 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w	; Stop the timer immediately		
00015EC8 205F                       		movea.l	(sp)+,a0
00015ECA 4E75                       		rts	
00015ECC                            ; ===========================================================================
00015ECC                            
00015ECC                            loc_13F86:
00015ECC 5368 002C                  		subq.w	#1,$2C(a0)
00015ED0 6600                       		bne.s	loc_13FAC	; Make it jump straight to this location
00015ED2 11FC 0006 D024             		move.b	#6,($FFFFD000+$24).w
00015ED8 4E75                       		rts
00015EDA                            ; ===========================================================================
00015EDA                            
00015EDA                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00015EDA 6000                       		bra.s	Obj0A_MakeItem
00015EDC                            ; ===========================================================================
00015EDC                            
00015EDC                            loc_13FAC:
00015EDC 4A68 0036                  		tst.w	$36(a0)
00015EE0 6700 0000                  		beq.w	locret_1408C
00015EE4 5368 003A                  		subq.w	#1,$3A(a0)
00015EE8 6A00 0000                  		bpl.w	locret_1408C
00015EEC                            
00015EEC                            Obj0A_MakeItem:
00015EEC 4EB9 0000 29A6             		jsr	(RandomNumber).l
00015EF2 0240 000F                  		andi.w	#$F,d0
00015EF6 3140 003A                  		move.w	d0,$3A(a0)
00015EFA 4EBA 91A4                  		jsr	SingleObjLoad
00015EFE 6600 0000                  		bne.w	locret_1408C
00015F02 12BC 000A                  		move.b	#$A,0(a1)	; load object
00015F06 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00015F0C 7006                       		moveq	#6,d0
00015F0E 0838 0000 D022             		btst	#0,($FFFFD022).w
00015F14 6700                       		beq.s	loc_13FF2
00015F16 4440                       		neg.w	d0
00015F18 137C 0040 0026             		move.b	#$40,$26(a1)
00015F1E                            
00015F1E                            loc_13FF2:
00015F1E D169 0008                  		add.w	d0,8(a1)
00015F22 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00015F28 137C 0006 0028             		move.b	#6,$28(a1)
00015F2E 4A68 002C                  		tst.w	$2C(a0)
00015F32 6700 0000                  		beq.w	loc_1403E
00015F36 0268 0007 003A             		andi.w	#7,$3A(a0)
00015F3C 0668 0000 003A             		addi.w	#0,$3A(a0)
00015F42 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015F46 0440 000C                  		subi.w	#$C,d0
00015F4A 3340 000C                  		move.w	d0,$C(a1)
00015F4E 4EB9 0000 29A6             		jsr	(RandomNumber).l
00015F54 1340 0026                  		move.b	d0,$26(a1)
00015F58 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015F5C 0200 0003                  		andi.b	#3,d0
00015F60 6600                       		bne.s	loc_14082
00015F62 137C 000E 0028             		move.b	#$E,$28(a1)
00015F68 6000                       		bra.s	loc_14082
00015F6A                            ; ===========================================================================
00015F6A                            
00015F6A                            loc_1403E:
00015F6A 0828 0007 0036             		btst	#7,$36(a0)
00015F70 6700                       		beq.s	loc_14082
00015F72 3438 FE14                  		move.w	($FFFFFE14).w,d2
00015F76 E24A                       		lsr.w	#1,d2
00015F78 4EB9 0000 29A6             		jsr	(RandomNumber).l
00015F7E 0240 0003                  		andi.w	#3,d0
00015F82 6600                       		bne.s	loc_1406A
00015F84 08E8 0006 0036             		bset	#6,$36(a0)
00015F8A 6600                       		bne.s	loc_14082
00015F8C 1342 0028                  		move.b	d2,$28(a1)
00015F90 337C 001C 0038             		move.w	#$1C,$38(a1)
00015F96                            
00015F96                            loc_1406A:
00015F96 4A28 0034                  		tst.b	$34(a0)
00015F9A 6600                       		bne.s	loc_14082
00015F9C 08E8 0006 0036             		bset	#6,$36(a0)
00015FA2 6600                       		bne.s	loc_14082
00015FA4 1342 0028                  		move.b	d2,$28(a1)
00015FA8 337C 001C 0038             		move.w	#$1C,$38(a1)
00015FAE                            
00015FAE                            loc_14082:
00015FAE 5328 0034                  		subq.b	#1,$34(a0)
00015FB2 6A00                       		bpl.s	locret_1408C
00015FB4 4268 0036                  		clr.w	$36(a0)
00015FB8                            
00015FB8                            locret_1408C:
00015FB8 4E75                       		rts	
00015FBA                            
00015FBA                            ; ---------------------------------------------------------------------------
00015FBA                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00015FBA                            ; ---------------------------------------------------------------------------
00015FBA                            
00015FBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FBA                            
00015FBA                            
00015FBA                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00015FBA 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00015FC0 6200                       		bhi.s	loc_140AC
00015FC2 303C 0082                  		move.w	#$82,d0		; play LZ music
00015FC6 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	0103 (SBZ3)
00015FCC 6600                       		bne.s	loc_140A6
00015FCE 303C 0086                  		move.w	#$86,d0		; play SBZ music
00015FD2                            
00015FD2                            loc_140A6:
00015FD2 4EB9 0000 11F0             		jsr	(PlaySound).l
00015FD8 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00015FDE 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00015FE4                            
00015FE4                            loc_140AC:
00015FE4 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00015FEA 4238 D372                  		clr.b	($FFFFD372).w
00015FEE 4E75                       		rts	
00015FF0                            ; End of function ResumeMusic
00015FF0                            
00015FF0                            ; ===========================================================================
00015FF0                            Ani_obj0A:
00015FF0                            	include "_anim\obj0A.asm"
00015FF0                            ; ---------------------------------------------------------------------------
00015FF0                            ; Animation script - countdown numbers and bubbles (LZ)
00015FF0                            ; ---------------------------------------------------------------------------
00015FF0 0000                       		dc.w byte_140D6-Ani_obj0A
00015FF2 0000                       		dc.w byte_140E0-Ani_obj0A
00015FF4 0000                       		dc.w byte_140EA-Ani_obj0A
00015FF6 0000                       		dc.w byte_140F4-Ani_obj0A
00015FF8 0000                       		dc.w byte_140FE-Ani_obj0A
00015FFA 0000                       		dc.w byte_14108-Ani_obj0A
00015FFC 0000                       		dc.w byte_14112-Ani_obj0A
00015FFE 0000                       		dc.w byte_14118-Ani_obj0A
00016000 0000                       		dc.w byte_14120-Ani_obj0A
00016002 0000                       		dc.w byte_14128-Ani_obj0A
00016004 0000                       		dc.w byte_14130-Ani_obj0A
00016006 0000                       		dc.w byte_14138-Ani_obj0A
00016008 0000                       		dc.w byte_14140-Ani_obj0A
0001600A 0000                       		dc.w byte_14148-Ani_obj0A
0001600C 0000                       		dc.w byte_1414A-Ani_obj0A
0001600E 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00016018 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00016022 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
0001602C 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00016036 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00016040 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
0001604A 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00016050 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00016058 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00016060 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00016068 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00016070 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00016078 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00016080 0EFC                       byte_14148:	dc.b $E, $FC
00016082 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00016088                            		even
00016088                            		even
00016088                            
00016088                            ; ---------------------------------------------------------------------------
00016088                            ; Sprite mappings - drowning countdown numbers (LZ)
00016088                            ; ---------------------------------------------------------------------------
00016088                            Map_obj0A:
00016088                            	include "_maps\obj0A.asm"
00016088                            ; ---------------------------------------------------------------------------
00016088                            ; Sprite mappings - drowning countdown numbers (LZ)
00016088                            ; ---------------------------------------------------------------------------
00016088 0000                       		dc.w byte_14152-Map_obj0A
0001608A 01                         byte_14152:	dc.b 1
0001608B E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00016090                            		even
00016090                            		even
00016090                            
00016090                            ; ===========================================================================
00016090                            ; ---------------------------------------------------------------------------
00016090                            ; Object 38 - shield
00016090                            ; ---------------------------------------------------------------------------
00016090                            
00016090                            Obj38: ; XREF: Obj_Index
00016090 223C 0000 0000             		move.l #UnC_Shield,d1 ; Call for Regular Shield Art
00016096 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
0001609A                            ; In this case, VRAM = $541*20
0001609A 363C 0200                  		move.w #$200,d3
0001609E 4EB9 0000 4A92             		jsr (QueueDMATransfer).l
000160A4                            ; ---------------------------------------------------------------------------
000160A4                            
000160A4                            ShieldObj_Main:
000160A4 7000                       		moveq #0,d0
000160A6 1028 0024                  		move.b $24(a0),d0
000160AA 323B 0000                  		move.w Shield_Index(pc,d0.w),d1
000160AE 4EFB 1000                  		jmp Shield_Index(pc,d1.w)
000160B2                            ; ===========================================================================
000160B2                            Shield_Index:
000160B2 0000                       		dc.w Shield_Init-Shield_Index
000160B4 0000                       		dc.w ShieldChecks-Shield_Index
000160B6                            ; ===========================================================================
000160B6                            
000160B6                            Shield_Init:
000160B6 5428 0024                  		addq.b #2,$24(a0)
000160BA 217C 0000 0000 0004        		move.l #Map_Obj38, $0004(A0) ; Load Shield Map into place
000160C2 117C 0004 0001             		move.b #4,1(a0)
000160C8 117C 0001 0018             		move.b #1,$18(a0)
000160CE 117C 0018 0019             		move.b #$18,$19(a0)
000160D4 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
000160DA 0838 0007 D002             		btst #7,($FFFFD002).w
000160E0 6700                       		beq.s ShieldChecks
000160E2 08E8 0007 0002             		bset #7,2(a0)
000160E8                            ; ---------------------------------------------------------------------------
000160E8                            
000160E8                            ShieldChecks:
000160E8 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
000160EC 6600                       		bne.s SonicHasShield ; If so, branch to do nothing
000160EE 4A38 FE2C                  		tst.b ($FFFFFE2C).w ; Test if Sonic got invisibility
000160F2 6700                       		beq.s jmp_DeleteObj38 ; If so, delete object temporarily
000160F4                            
000160F4                            ShieldProperties:
000160F4 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
000160FA 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016100 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016106 43F9 0000 0000             		lea (Ani_obj38).l, a1 ; Load Animation Scripts into a1
0001610C 4EB9 0000 B9AA             		jsr AnimateSprite
00016112 4EFA 8836                  		jmp DisplaySprite
00016116                            
00016116                            SonicHasShield:
00016116 4E75                       		rts
00016118                            
00016118                            jmp_DeleteObj38: ; loc_12648:
00016118 4EFA 8880                  		jmp DeleteObject 
0001611C                            
0001611C                            ; ---------------------------------------------------------------------------
0001611C                            ; Object 4A - New Invincibility Object (ported from Sonic 2)
0001611C                            ; ---------------------------------------------------------------------------
0001611C                            
0001611C                            Obj4A: ; XREF: Obj_Index
0001611C 7000                       		moveq	#0,d0
0001611E 1028 0000                  		move.b	InvStars_routine(a0),d0
00016122 323B 0000                  		move.w	InvStars_Index(pc,d0.w),d1
00016126 4EFB 1000                  		jmp	InvStars_Index(pc,d1.w)
0001612A                            ; ===========================================================================
0001612A                            
0001612A 0000                       InvStars_Index:	dc.w Obj4A_Init-InvStars_Index
0001612C 0000                       		dc.w Obj4A_Main-InvStars_Index
0001612E 0000                       		dc.w Obj4A_SubObject-InvStars_Index
00016130                            ; ===========================================================================
00016130                            
00016130                            off_1D992:
00016130 0000 0000                  		dc.l Ani_InvStars2 ; animation script
00016134 000B                       		dc.w $B ; speed index,sub3 anim
00016136 0000 0000                  		dc.l Ani_InvStars3
0001613A 160D                       		dc.w $160D
0001613C 0000 0000                  		dc.l Ani_InvStars4
00016140 2C0D                       		dc.w $2C0D
00016142                            ; ===========================================================================	
00016142                            
00016142 =0000000A                  InvStars_routine: equ $A ; the same as obRoutine in other objects
00016142 =00000030                  InvStars_AniScript: equ $30 ; animation script used by sub-objects(in main object it's clear and unused) (4 bytes)
00016142 =00000034                  InvStars_SpeedIndex: equ $34  ; (2 bytes)
00016142 =00000036                  InvStars_PrevPosIndex: equ $36 ; clear and unused in main object
00016142                            
00016142                            
00016142                            Obj4A_Init:
00016142 223C 0000 0000             		move.l	#ArtUnc_InvStars,d1
00016148 343C A820                  		move.w	#$A820,d2
0001614C 363C 0200                  		move.w	#$200,d3
00016150 4EB9 0000 4A92             		jsr	(QueueDMATransfer).l
00016156 7400                       		moveq	#0,d2
00016158 45FA FFD0                  		lea	off_1D992-6(pc),a2
0001615C 43D0                       		lea	(a0),a1
0001615E 7203                       		moveq	#3,d1
00016160                            LoadStarsObject:	
00016160 1290                       		move.b	(a0),(a1) ; load obj35
00016162 137C 0004 000A             		move.b	#4,InvStars_routine(a1)		; => @SubObject
00016168 237C 0000 0000 0004        		move.l	#Map_InvStars,$4(a1)
00016170 337C 0541 0002             		move.w	#$541,$2(a1)
00016176 137C 0044 0001             		move.b  #%001000100,1(a1)
0001617C 137C 0010 000E             		move.b	#$10,mainspr_width(a1)
00016182 137C 0002 000F             		move.b	#2,mainspr_childsprites(a1)
00016188 1342 0036                  		move.b	d2,InvStars_PrevPosIndex(a1)
0001618C 5242                       		addq.w	#1,d2
0001618E 235A 0030                  		move.l	(a2)+,InvStars_AniScript(a1)
00016192 335A 0034                  		move.w	(a2)+,InvStars_SpeedIndex(a1)
00016196 43E9 0040                  		lea	$40(a1),a1 ; a1=object
0001619A 51C9 FFC4                  		dbf	d1,LoadStarsObject
0001619E                            
0001619E 117C 0002 000A             		move.b	#2,InvStars_routine(a0)		; => @MainObject
000161A4 117C 0004 0034             		move.b	#4,InvStars_SpeedIndex(a0)
000161AA                            
000161AA                            Obj4A_Main:
000161AA 43F8 D000                  		lea ($FFFFD000).w,a1 ; a1=character
000161AE 4A38 FE2D                  		tst.b   ($FFFFFE2D).w
000161B2 6700 87E6                  		beq.w	DeleteObject
000161B6 3029 0008                  		move.w	8(a1),d0
000161BA 3140 0008                  		move.w	d0,8(a0)
000161BE 3229 000C                  		move.w	$C(a1),d1
000161C2 3141 000C                  		move.w	d1,$C(a0)
000161C6 45E8 0010                  		lea	sub2_x_pos(a0),a2
000161CA 47F9 0000 0000             		lea	Ani_InvStars1,a3
000161D0 7A00                       		moveq	#0,d5
000161D2                            
000161D2                            Obj4A_GetFrame:
000161D2 3428 0038                  		move.w	$38(a0),d2
000161D6 1A33 2000                  		move.b	(a3,d2.w),d5
000161DA 6A00                       		bpl.s	Obj4A_SetFrameandPos
000161DC 4268 0038                  		clr.w	$38(a0)
000161E0 60F0                       		bra.s	Obj4A_GetFrame
000161E2                            ; ===========================================================================
000161E2                            
000161E2                            Obj4A_SetFrameandPos:
000161E2 5268 0038                  		addq.w	#1,$38(a0)
000161E6 4DF9 0000 0000             		lea	InvStars_Speeds,a6
000161EC 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
000161F0 4EB9 0000 0000             		jsr	Obj4A_Display2
000161F6 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
000161F8 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
000161FA 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
000161FC 0646 0020                  		addi.w	#$20,d6
00016200 4EB9 0000 0000             		jsr	Obj4A_Display2
00016206 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
00016208 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
0001620A 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
0001620C 7012                       		moveq	#$12,d0
0001620E 0829 0000 0022             		btst	#0,$22(a1)
00016214 6700                       		beq.s	Obj4A_Display
00016216 4440                       		neg.w	d0
00016218                            
00016218                            Obj4A_Display:
00016218 D128 0034                  		add.b	d0,InvStars_SpeedIndex(a0)
0001621C 303C 0080                  		move.w	#(1*$80),d0
00016220 6000 8764                  		bra.w	DisplaySprite3
00016224                            ; ===========================================================================
00016224                            
00016224                            Obj4A_SubObject:
00016224 43F8 D000                  		lea ($FFFFD000).w,a1 ; a1=character
00016228 4A38 FE2D                  		tst.b   ($FFFFFE2D).w
0001622C 6700 876C                  		beq.w	DeleteObject
00016230 4BF8 F7A8                  		lea	($FFFFF7A8).w,a5
00016234 4DF8 CB00                  		lea	($FFFFCB00).w,a6
00016238                            	
00016238                            @getPosition_sub:
00016238 1228 0036                  		move.b	InvStars_PrevPosIndex(a0),d1
0001623C E509                       		lsl.b	#2,d1
0001623E 3401                       		move.w	d1,d2
00016240 D241                       		add.w	d1,d1
00016242 D242                       		add.w	d2,d1 
00016244 3015                       		move.w	(a5),d0
00016246 9001                       		sub.b	d1,d0
00016248 45F6 0000                  		lea	(a6,d0.w),a2
0001624C 301A                       		move.w	(a2)+,d0
0001624E 321A                       		move.w	(a2)+,d1
00016250 3140 0008                  		move.w	d0,8(a0)
00016254 3141 000C                  		move.w	d1,$C(a0)
00016258 45E8 0010                  		lea	sub2_x_pos(a0),a2
0001625C 2668 0030                  		movea.l	InvStars_AniScript(a0),a3
00016260                            
00016260                            Obj4A_GetSubFrame:
00016260 3428 0038                  		move.w	$38(a0),d2
00016264 1A33 2000                  		move.b	(a3,d2.w),d5
00016268 6A00                       		bpl.s	Obj4A_SetSubFrameandPos
0001626A 4268 0038                  		clr.w	$38(a0)
0001626E 60F0                       		bra.s	Obj4A_GetSubFrame
00016270                            ; ===========================================================================
00016270                            
00016270                            Obj4A_SetSubFrameandPos:
00016270 4845                       		swap	d5
00016272 D428 0035                  		add.b	$35(a0),d2
00016276 1A33 2000                  		move.b	(a3,d2.w),d5
0001627A 5268 0038                  		addq.w	#1,$38(a0)
0001627E 4DFA 0000                  		lea	InvStars_Speeds(pc),a6
00016282 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
00016286 6100                       		bsr.s	Obj4A_Display2
00016288 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
0001628A 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
0001628C 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
0001628E 0646 0020                  		addi.w	#$20,d6
00016292 4845                       		swap	d5
00016294 6100                       		bsr.s	Obj4A_Display2
00016296 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
00016298 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
0001629A 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
0001629C 7002                       		moveq	#2,d0
0001629E 0829 0000 0022             		btst	#0,$22(a1)
000162A4 6700                       		beq.s	loc_1DB20
000162A6 4440                       		neg.w	d0
000162A8                            
000162A8                            loc_1DB20:
000162A8 D128 0034                  		add.b    d0,InvStars_SpeedIndex(a0)
000162AC 303C 0080                  		move.w    #(1*$80),d0
000162B0 6000 86D4                  		bra.w    DisplaySprite3
000162B4                            ; ===========================================================================
000162B4                            Obj4A_Display2:
000162B4 0246 003E                  		andi.w	#$3E,d6 ; limit to 6 bits and clear first bit
000162B8 1436 6000                  		move.b	(a6,d6.w),d2 ; move x-move speed to d2
000162BC 1636 6001                  		move.b	1(a6,d6.w),d3 ; move y-move speed to d3
000162C0 4882                       		ext.w	d2
000162C2 4883                       		ext.w	d3
000162C4 D440                       		add.w	d0,d2 ; add object x position to x-move speed
000162C6 D641                       		add.w	d1,d3 ; add object y position to y-move speed
000162C8 4E75                       		rts
000162CA                            
000162CA                            InvStars_Speeds: ; x-move speed,	y-move speed	
000162CA 0F00 0F03 0E06 0D08 0B0B+  		dc.w   $F00,  $F03,  $E06,  $D08,  $B0B,  $80D,  $60E,  $30F,   $10, $FC0F, $F90E, $F70D, $F40B, $F208, $F106, $F003
000162EA F000 F0FC F1F9 F2F7 F4F4+  		dc.w  $F000, $F0FC, $F1F9, $F2F7, $F4F4, $F7F2, $F9F1, $FCF0, $FFF0,  $3F0,  $6F1,  $8F2,  $BF4,  $DF7,  $EF9,  $FFC
0001630A                            
0001630A                            ; ---------------------------------------------------------------------------
0001630A                            ; Animation script - invincibility stars
0001630A                            ; ---------------------------------------------------------------------------
0001630A                            
0001630A                            ; The animation script differs from the animate_sprite subroutine
0001630A                            ; Every positive byte - mapping
0001630A                            ; Every negative byte - loop flag 
0001630A                            
0001630A 0805 0706 0607 0508 0607+  Ani_InvStars1:	dc.b   8,  5,  7,  6,  6,  7,  5,  8,  6,  7,  7,  6,$FF
00016318 00                         	even
00016318 0807 0605 0403 0405 0607+  Ani_InvStars2:	dc.b   8,  7,  6,  5,  4,  3,  4,  5,  6,  7,$FF
00016323 0304 0506 0708 0706 0504   		dc.b   3,  4,  5,  6,  7,  8,  7,  6,  5,  4
0001632E 00                         	even
0001632E 0807 0605 0403 0203 0405+  Ani_InvStars3:	dc.b   8,  7,  6,  5,  4,  3,  2,  3,  4,  5,  6,  7,$FF
0001633B 0203 0405 0607 0807 0605+  		dc.b   2,  3,  4,  5,  6,  7,  8,  7,  6,  5,  4,  3
00016348 00                         	even
00016348 0706 0504 0302 0102 0304+  Ani_InvStars4:	dc.b   7,  6,  5,  4,  3,  2,  1,  2,  3,  4,  5,  6,$FF
00016355 0102 0304 0506 0706 0504+  		dc.b   1,  2,  3,  4,  5,  6,  7,  6,  5,  4,  3,  2
00016362 00                         	even		
00016362                            
00016362                            
00016362                            Map_InvStars:
00016362                            	include "_maps\obj4A.asm"
00016362                            ; ================================================================================
00016362                            ; Sprite Mappings - generated by Flex 2 Wed Aug 11 2021 18:32:48 GMT+0100 (British Summer Time)
00016362                            ; ================================================================================
00016362                            
00016362                            DATAZEB5V6JRJ3H:
00016362 0000 0000                  	dc.w DATAZEB5V6JRJ3H_0-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_1-DATAZEB5V6JRJ3H
00016366 0000 0000                  	dc.w DATAZEB5V6JRJ3H_2-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_3-DATAZEB5V6JRJ3H
0001636A 0000 0000                  	dc.w DATAZEB5V6JRJ3H_4-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_5-DATAZEB5V6JRJ3H
0001636E 0000 0000                  	dc.w DATAZEB5V6JRJ3H_6-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_7-DATAZEB5V6JRJ3H
00016372 0000                       	dc.w DATAZEB5V6JRJ3H_8-DATAZEB5V6JRJ3H
00016374 01                         DATAZEB5V6JRJ3H_0: dc.b $1
00016375 EF0F 0000 F0               	dc.b $EF, $F, $0, $0, $F0
0001637A 01                         DATAZEB5V6JRJ3H_1: dc.b $1
0001637B F800 0000 FC               	dc.b $F8, $0, $0, $0, $FC
00016380 01                         DATAZEB5V6JRJ3H_2: dc.b $1
00016381 F800 0001 FC               	dc.b $F8, $0, $0, $1, $FC
00016386 01                         DATAZEB5V6JRJ3H_3: dc.b $1
00016387 F801 0002 FC               	dc.b $F8, $1, $0, $2, $FC
0001638C 01                         DATAZEB5V6JRJ3H_4: dc.b $1
0001638D F801 0004 FC               	dc.b $F8, $1, $0, $4, $FC
00016392 01                         DATAZEB5V6JRJ3H_5: dc.b $1
00016393 F801 0006 FC               	dc.b $F8, $1, $0, $6, $FC
00016398 01                         DATAZEB5V6JRJ3H_6: dc.b $1
00016399 F805 0008 F8               	dc.b $F8, $5, $0, $8, $F8
0001639E 01                         DATAZEB5V6JRJ3H_7: dc.b $1
0001639F F805 000C F8               	dc.b $F8, $5, $0, $C, $F8
000163A4 01                         DATAZEB5V6JRJ3H_8: dc.b $1
000163A5 F00F 0010 F0               	dc.b $F0, $F, $0, $10, $F0
000163AA                            	even
000163AA                            	even
000163AA                            ; ===========================================================================
000163AA                            ; ---------------------------------------------------------------------------
000163AA                            ; Object 08 - water splash (LZ)
000163AA                            ; ---------------------------------------------------------------------------
000163AA                            
000163AA                            Obj08:					; XREF: Obj_Index
000163AA 7000                       		moveq	#0,d0
000163AC 1028 0024                  		move.b	$24(a0),d0
000163B0 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
000163B4 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
000163B8                            ; ===========================================================================
000163B8 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
000163BA 0000                       		dc.w Obj08_Display-Obj08_Index
000163BC 0000                       		dc.w Obj08_Delete-Obj08_Index
000163BE                            ; ===========================================================================
000163BE                            
000163BE                            Obj08_Main:				; XREF: Obj08_Index
000163BE 5428 0024                  		addq.b	#2,$24(a0)
000163C2 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
000163CA 0028 0004 0001             		ori.b	#4,1(a0)
000163D0 117C 0001 0018             		move.b	#1,$18(a0)
000163D6 117C 0010 0019             		move.b	#$10,$19(a0)
000163DC 317C 4259 0002             		move.w	#$4259,2(a0)
000163E2 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
000163E8                            
000163E8                            Obj08_Display:				; XREF: Obj08_Index
000163E8 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
000163EE 4A38 F64E                  		tst.b	($FFFFF64E).w
000163F2 6700                       		beq.s	Obj08_Animate
000163F4 3178 F60E 000C             		move.w	(v_pocketbottom).w,$C(a0) ; copy y-position from water height
000163FA                            
000163FA                            Obj08_Animate:
000163FA 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00016400 4EB9 0000 B9AA             		jsr	AnimateSprite
00016406 4EFA 8542                  		jmp	DisplaySprite
0001640A                            ; ===========================================================================
0001640A                            
0001640A                            Obj08_Delete:				; XREF: Obj08_Index
0001640A 4EFA 858E                  		jmp	DeleteObject	; delete when animation	is complete
0001640E                            ; ===========================================================================
0001640E                            Ani_obj38:
0001640E                            	include "_anim\obj38.asm"
0001640E                            ; ---------------------------------------------------------------------------
0001640E                            ; Animation script - shield and invincibility stars
0001640E                            ; ---------------------------------------------------------------------------
0001640E 0000                       		dc.w byte_14356-Ani_obj38
00016410 0000                       		dc.w byte_1435E-Ani_obj38
00016412 0000                       		dc.w byte_14364-Ani_obj38
00016414 0000                       		dc.w byte_1437E-Ani_obj38
00016416 0000                       		dc.w byte_14398-Ani_obj38
00016418 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00016420 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00016426 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00016437 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00016440 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00016451 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
0001645A 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
0001646B 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00016474                            		even
00016474                            		even
00016474                            
00016474                            ; ---------------------------------------------------------------------------
00016474                            ; Sprite mappings - shield and invincibility stars
00016474                            ; ---------------------------------------------------------------------------
00016474                            Map_obj38:
00016474                            	include "_maps\obj38.asm"
00016474                            ; ---------------------------------------------------------------------------
00016474                            ; Sprite mappings - shield and invincibility stars
00016474                            ; ---------------------------------------------------------------------------
00016474 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00016478 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
0001647C 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00016480 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00016484 04                         byte_143C2:	dc.b 4
00016485 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0001648A E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
0001648F 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00016494 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00016499 04                         byte_143D7:	dc.b 4
0001649A E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
0001649F E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
000164A4 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
000164A9 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
000164AE 04                         byte_143EC:	dc.b 4
000164AF E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000164B4 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000164B9 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000164BE 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000164C3 04                         byte_14401:	dc.b 4
000164C4 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000164C9 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000164CE 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000164D3 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000164D8 04                         byte_14416:	dc.b 4
000164D9 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000164DE E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000164E3 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000164E8 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000164ED 04                         byte_1442B:	dc.b 4
000164EE E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000164F3 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000164F8 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000164FD 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00016502 04                         byte_14440:	dc.b 4
00016503 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00016508 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
0001650D 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00016512 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00016518 00                         		even
00016518 00                         		even
00016518                            
00016518                            ; ---------------------------------------------------------------------------
00016518                            ; Sprite mappings - special stage entry	from beta
00016518                            ; ---------------------------------------------------------------------------
00016518                            
00016518                            Ani_obj08:
00016518                            	include "_anim\obj08.asm"
00016518                            ; ---------------------------------------------------------------------------
00016518                            ; Animation script - water splash (LZ)
00016518                            ; ---------------------------------------------------------------------------
00016518 0000                       		dc.w byte_145C6-Ani_obj08
0001651A 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00016520                            		even
00016520                            		even
00016520                            
00016520                            ; ---------------------------------------------------------------------------
00016520                            ; Sprite mappings - water splash (LZ)
00016520                            ; ---------------------------------------------------------------------------
00016520                            Map_obj08:
00016520                            	include "_maps\obj08.asm"
00016520                            ; ---------------------------------------------------------------------------
00016520                            ; Sprite mappings - water splash (LZ)
00016520                            ; ---------------------------------------------------------------------------
00016520 0000                       		dc.w byte_145D2-Map_obj08
00016522 0000                       		dc.w byte_145DD-Map_obj08
00016524 0000                       		dc.w byte_145E8-Map_obj08
00016526 02                         byte_145D2:	dc.b 2
00016527 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
0001652C FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00016531 02                         byte_145DD:	dc.b 2
00016532 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00016537 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
0001653C 01                         byte_145E8:	dc.b 1
0001653D E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00016542                            		even
00016542                            		even
00016542                            
00016542                            ; ---------------------------------------------------------------------------
00016542                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00016542                            ; ---------------------------------------------------------------------------
00016542                            
00016542                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016542                            
00016542                            
00016542                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00016542 0828 0003 0022             		btst	#3,$22(a0)
00016548 6700                       		beq.s	loc_14602
0001654A 7000                       		moveq	#0,d0
0001654C 11C0 F768                  		move.b	d0,($FFFFF768).w
00016550 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016554 4E75                       		rts	
00016556                            ; ===========================================================================
00016556                            
00016556                            loc_14602:
00016556 7003                       		moveq	#3,d0
00016558 11C0 F768                  		move.b	d0,($FFFFF768).w
0001655C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016560 1028 0026                  		move.b	$26(a0),d0
00016564 0600 0020                  		addi.b	#$20,d0
00016568 6A00                       		bpl.s	loc_14624
0001656A 1028 0026                  		move.b	$26(a0),d0
0001656E 6A00                       		bpl.s	loc_1461E
00016570 5300                       		subq.b	#1,d0
00016572                            
00016572                            loc_1461E:
00016572 0600 0020                  		addi.b	#$20,d0
00016576 6000                       		bra.s	loc_14630
00016578                            ; ===========================================================================
00016578                            
00016578                            loc_14624:
00016578 1028 0026                  		move.b	$26(a0),d0
0001657C 6A00                       		bpl.s	loc_1462C
0001657E 5200                       		addq.b	#1,d0
00016580                            
00016580                            loc_1462C:
00016580 0600 001F                  		addi.b	#$1F,d0
00016584                            
00016584                            loc_14630:
00016584 0200 00C0                  		andi.b	#$C0,d0
00016588 0C00 0040                  		cmpi.b	#$40,d0
0001658C 6700 0000                  		beq.w	Sonic_WalkVertL
00016590 0C00 0080                  		cmpi.b	#$80,d0
00016594 6700 0000                  		beq.w	Sonic_WalkCeiling
00016598 0C00 00C0                  		cmpi.b	#$C0,d0
0001659C 6700 0000                  		beq.w	Sonic_WalkVertR
000165A0 3428 000C                  		move.w	$C(a0),d2
000165A4 3628 0008                  		move.w	8(a0),d3
000165A8 7000                       		moveq	#0,d0
000165AA 1028 0016                  		move.b	$16(a0),d0
000165AE 4880                       		ext.w	d0
000165B0 D440                       		add.w	d0,d2
000165B2 1028 0017                  		move.b	$17(a0),d0
000165B6 4880                       		ext.w	d0
000165B8 D640                       		add.w	d0,d3
000165BA 49F8 F768                  		lea	($FFFFF768).w,a4
000165BE 367C 0010                  		movea.w	#$10,a3
000165C2 3C3C 0000                  		move.w	#0,d6
000165C6 7A0D                       		moveq	#$D,d5
000165C8 6100 0000                  		bsr.w	FindFloor
000165CC 3F01                       		move.w	d1,-(sp)
000165CE 3428 000C                  		move.w	$C(a0),d2
000165D2 3628 0008                  		move.w	8(a0),d3
000165D6 7000                       		moveq	#0,d0
000165D8 1028 0016                  		move.b	$16(a0),d0
000165DC 4880                       		ext.w	d0
000165DE D440                       		add.w	d0,d2
000165E0 1028 0017                  		move.b	$17(a0),d0
000165E4 4880                       		ext.w	d0
000165E6 4440                       		neg.w	d0
000165E8 D640                       		add.w	d0,d3
000165EA 49F8 F76A                  		lea	($FFFFF76A).w,a4
000165EE 367C 0010                  		movea.w	#$10,a3
000165F2 3C3C 0000                  		move.w	#0,d6
000165F6 7A0D                       		moveq	#$D,d5
000165F8 6100 0000                  		bsr.w	FindFloor
000165FC 301F                       		move.w	(sp)+,d0
000165FE 6100 0000                  		bsr.w	Sonic_Angle
00016602 4A41                       		tst.w	d1
00016604 6700                       		beq.s	locret_146BE
00016606 6A00                       		bpl.s	loc_146C0
00016608 0C41 FFF2                  		cmpi.w	#-$E,d1
0001660C 6D00                       		blt.s	locret_146E6
0001660E D368 000C                  		add.w	d1,$C(a0)
00016612                            
00016612                            locret_146BE:
00016612 4E75                       		rts	
00016614                            ; ===========================================================================
00016614                            
00016614                            loc_146C0:
00016614 0C41 000E                  		cmpi.w	#$E,d1
00016618 6E00                       		bgt.s	loc_146CC
0001661A                            
0001661A                            loc_146C6:
0001661A D368 000C                  		add.w	d1,$C(a0)
0001661E 4E75                       		rts	
00016620                            ; ===========================================================================
00016620                            
00016620                            loc_146CC:
00016620 4A28 0038                  		tst.b	$38(a0)
00016624 66F4                       		bne.s	loc_146C6
00016626 08E8 0001 0022             		bset	#1,$22(a0)
0001662C 08A8 0005 0022             		bclr	#5,$22(a0)
00016632 117C 0001 001D             		move.b	#1,$1D(a0)
00016638 4E75                       		rts	
0001663A                            ; ===========================================================================
0001663A                            
0001663A                            locret_146E6:
0001663A 4E75                       		rts	
0001663C                            ; End of function Sonic_AnglePos
0001663C                            
0001663C                            ; ===========================================================================
0001663C 2428 0008                  		move.l	8(a0),d2
00016640 3028 0010                  		move.w	$10(a0),d0
00016644 48C0                       		ext.l	d0
00016646 E180                       		asl.l	#8,d0
00016648 9480                       		sub.l	d0,d2
0001664A 2142 0008                  		move.l	d2,8(a0)
0001664E 303C 0038                  		move.w	#$38,d0
00016652 48C0                       		ext.l	d0
00016654 E180                       		asl.l	#8,d0
00016656 9680                       		sub.l	d0,d3
00016658 2143 000C                  		move.l	d3,$C(a0)
0001665C 4E75                       		rts	
0001665E                            ; ===========================================================================
0001665E                            
0001665E                            locret_1470A:
0001665E 4E75                       		rts	
00016660                            ; ===========================================================================
00016660 2628 000C                  		move.l	$C(a0),d3
00016664 3028 0012                  		move.w	$12(a0),d0
00016668 0440 0038                  		subi.w	#$38,d0
0001666C 3140 0012                  		move.w	d0,$12(a0)
00016670 48C0                       		ext.l	d0
00016672 E180                       		asl.l	#8,d0
00016674 9680                       		sub.l	d0,d3
00016676 2143 000C                  		move.l	d3,$C(a0)
0001667A 4E75                       		rts	
0001667C 4E75                       		rts	
0001667E                            ; ===========================================================================
0001667E 2428 0008                  		move.l	8(a0),d2
00016682 2628 000C                  		move.l	$C(a0),d3
00016686 3028 0010                  		move.w	$10(a0),d0
0001668A 48C0                       		ext.l	d0
0001668C E180                       		asl.l	#8,d0
0001668E 9480                       		sub.l	d0,d2
00016690 3028 0012                  		move.w	$12(a0),d0
00016694 48C0                       		ext.l	d0
00016696 E180                       		asl.l	#8,d0
00016698 9680                       		sub.l	d0,d3
0001669A 2142 0008                  		move.l	d2,8(a0)
0001669E 2143 000C                  		move.l	d3,$C(a0)
000166A2 4E75                       		rts	
000166A4                            
000166A4                            ; ---------------------------------------------------------------------------
000166A4                            ; Subroutine to	change Sonic's angle as he walks along the floor
000166A4                            ; ---------------------------------------------------------------------------
000166A4                            
000166A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166A4                            
000166A4                            
000166A4                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
000166A4 1438 F76A                  		move.b	($FFFFF76A).w,d2
000166A8 B240                       		cmp.w	d0,d1
000166AA 6F00                       		ble.s	loc_1475E
000166AC 1438 F768                  		move.b	($FFFFF768).w,d2
000166B0 3200                       		move.w	d0,d1
000166B2                            
000166B2                            loc_1475E:
000166B2 0802 0000                  		btst	#0,d2
000166B6 6600                       		bne.s	loc_1476A
000166B8 1142 0026                  		move.b	d2,$26(a0)
000166BC 4E75                       		rts	
000166BE                            ; ===========================================================================
000166BE                            
000166BE                            loc_1476A:
000166BE 1428 0026                  		move.b	$26(a0),d2
000166C2 0602 0020                  		addi.b	#$20,d2
000166C6 0202 00C0                  		andi.b	#$C0,d2
000166CA 1142 0026                  		move.b	d2,$26(a0)
000166CE 4E75                       		rts	
000166D0                            ; End of function Sonic_Angle
000166D0                            
000166D0                            ; ---------------------------------------------------------------------------
000166D0                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000166D0                            ; ---------------------------------------------------------------------------
000166D0                            
000166D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166D0                            
000166D0                            
000166D0                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
000166D0 3428 000C                  		move.w	$C(a0),d2
000166D4 3628 0008                  		move.w	8(a0),d3
000166D8 7000                       		moveq	#0,d0
000166DA 1028 0017                  		move.b	$17(a0),d0
000166DE 4880                       		ext.w	d0
000166E0 4440                       		neg.w	d0
000166E2 D440                       		add.w	d0,d2
000166E4 1028 0016                  		move.b	$16(a0),d0
000166E8 4880                       		ext.w	d0
000166EA D640                       		add.w	d0,d3
000166EC 49F8 F768                  		lea	($FFFFF768).w,a4
000166F0 367C 0010                  		movea.w	#$10,a3
000166F4 3C3C 0000                  		move.w	#0,d6
000166F8 7A0D                       		moveq	#$D,d5
000166FA 6100 0000                  		bsr.w	FindWall
000166FE 3F01                       		move.w	d1,-(sp)
00016700 3428 000C                  		move.w	$C(a0),d2
00016704 3628 0008                  		move.w	8(a0),d3
00016708 7000                       		moveq	#0,d0
0001670A 1028 0017                  		move.b	$17(a0),d0
0001670E 4880                       		ext.w	d0
00016710 D440                       		add.w	d0,d2
00016712 1028 0016                  		move.b	$16(a0),d0
00016716 4880                       		ext.w	d0
00016718 D640                       		add.w	d0,d3
0001671A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001671E 367C 0010                  		movea.w	#$10,a3
00016722 3C3C 0000                  		move.w	#0,d6
00016726 7A0D                       		moveq	#$D,d5
00016728 6100 0000                  		bsr.w	FindWall
0001672C 301F                       		move.w	(sp)+,d0
0001672E 6100 FF74                  		bsr.w	Sonic_Angle
00016732 4A41                       		tst.w	d1
00016734 6700                       		beq.s	locret_147F0
00016736 6A00                       		bpl.s	loc_147F2
00016738 0C41 FFF2                  		cmpi.w	#-$E,d1
0001673C 6D00 FF20                  		blt.w	locret_1470A
00016740 D368 0008                  		add.w	d1,8(a0)
00016744                            
00016744                            locret_147F0:
00016744 4E75                       		rts	
00016746                            ; ===========================================================================
00016746                            
00016746                            loc_147F2:
00016746 0C41 000E                  		cmpi.w	#$E,d1
0001674A 6E00                       		bgt.s	loc_147FE
0001674C                            
0001674C                            loc_147F8:
0001674C D368 0008                  		add.w	d1,8(a0)
00016750 4E75                       		rts	
00016752                            ; ===========================================================================
00016752                            
00016752                            loc_147FE:
00016752 4A28 0038                  		tst.b	$38(a0)
00016756 66F4                       		bne.s	loc_147F8
00016758 08E8 0001 0022             		bset	#1,$22(a0)
0001675E 08A8 0005 0022             		bclr	#5,$22(a0)
00016764 117C 0001 001D             		move.b	#1,$1D(a0)
0001676A 4E75                       		rts	
0001676C                            ; End of function Sonic_WalkVertR
0001676C                            
0001676C                            ; ---------------------------------------------------------------------------
0001676C                            ; Subroutine allowing Sonic to walk upside-down
0001676C                            ; ---------------------------------------------------------------------------
0001676C                            
0001676C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001676C                            
0001676C                            
0001676C                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
0001676C 3428 000C                  		move.w	$C(a0),d2
00016770 3628 0008                  		move.w	8(a0),d3
00016774 7000                       		moveq	#0,d0
00016776 1028 0016                  		move.b	$16(a0),d0
0001677A 4880                       		ext.w	d0
0001677C 9440                       		sub.w	d0,d2
0001677E 0A42 000F                  		eori.w	#$F,d2
00016782 1028 0017                  		move.b	$17(a0),d0
00016786 4880                       		ext.w	d0
00016788 D640                       		add.w	d0,d3
0001678A 49F8 F768                  		lea	($FFFFF768).w,a4
0001678E 367C FFF0                  		movea.w	#-$10,a3
00016792 3C3C 1000                  		move.w	#$1000,d6
00016796 7A0D                       		moveq	#$D,d5
00016798 6100 0000                  		bsr.w	FindFloor
0001679C 3F01                       		move.w	d1,-(sp)
0001679E 3428 000C                  		move.w	$C(a0),d2
000167A2 3628 0008                  		move.w	8(a0),d3
000167A6 7000                       		moveq	#0,d0
000167A8 1028 0016                  		move.b	$16(a0),d0
000167AC 4880                       		ext.w	d0
000167AE 9440                       		sub.w	d0,d2
000167B0 0A42 000F                  		eori.w	#$F,d2
000167B4 1028 0017                  		move.b	$17(a0),d0
000167B8 4880                       		ext.w	d0
000167BA 9640                       		sub.w	d0,d3
000167BC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000167C0 367C FFF0                  		movea.w	#-$10,a3
000167C4 3C3C 1000                  		move.w	#$1000,d6
000167C8 7A0D                       		moveq	#$D,d5
000167CA 6100 0000                  		bsr.w	FindFloor
000167CE 301F                       		move.w	(sp)+,d0
000167D0 6100 FED2                  		bsr.w	Sonic_Angle
000167D4 4A41                       		tst.w	d1
000167D6 6700                       		beq.s	locret_14892
000167D8 6A00                       		bpl.s	loc_14894
000167DA 0C41 FFF2                  		cmpi.w	#-$E,d1
000167DE 6D00 FE5A                  		blt.w	locret_146E6
000167E2 9368 000C                  		sub.w	d1,$C(a0)
000167E6                            
000167E6                            locret_14892:
000167E6 4E75                       		rts	
000167E8                            ; ===========================================================================
000167E8                            
000167E8                            loc_14894:
000167E8 0C41 000E                  		cmpi.w	#$E,d1
000167EC 6E00                       		bgt.s	loc_148A0
000167EE                            
000167EE                            loc_1489A:
000167EE 9368 000C                  		sub.w	d1,$C(a0)
000167F2 4E75                       		rts	
000167F4                            ; ===========================================================================
000167F4                            
000167F4                            loc_148A0:
000167F4 4A28 0038                  		tst.b	$38(a0)
000167F8 66F4                       		bne.s	loc_1489A
000167FA 08E8 0001 0022             		bset	#1,$22(a0)
00016800 08A8 0005 0022             		bclr	#5,$22(a0)
00016806 117C 0001 001D             		move.b	#1,$1D(a0)
0001680C 4E75                       		rts	
0001680E                            ; End of function Sonic_WalkCeiling
0001680E                            
0001680E                            ; ---------------------------------------------------------------------------
0001680E                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
0001680E                            ; ---------------------------------------------------------------------------
0001680E                            
0001680E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001680E                            
0001680E                            
0001680E                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
0001680E 3428 000C                  		move.w	$C(a0),d2
00016812 3628 0008                  		move.w	8(a0),d3
00016816 7000                       		moveq	#0,d0
00016818 1028 0017                  		move.b	$17(a0),d0
0001681C 4880                       		ext.w	d0
0001681E 9440                       		sub.w	d0,d2
00016820 1028 0016                  		move.b	$16(a0),d0
00016824 4880                       		ext.w	d0
00016826 9640                       		sub.w	d0,d3
00016828 0A43 000F                  		eori.w	#$F,d3
0001682C 49F8 F768                  		lea	($FFFFF768).w,a4
00016830 367C FFF0                  		movea.w	#-$10,a3
00016834 3C3C 0800                  		move.w	#$800,d6
00016838 7A0D                       		moveq	#$D,d5
0001683A 6100 0000                  		bsr.w	FindWall
0001683E 3F01                       		move.w	d1,-(sp)
00016840 3428 000C                  		move.w	$C(a0),d2
00016844 3628 0008                  		move.w	8(a0),d3
00016848 7000                       		moveq	#0,d0
0001684A 1028 0017                  		move.b	$17(a0),d0
0001684E 4880                       		ext.w	d0
00016850 D440                       		add.w	d0,d2
00016852 1028 0016                  		move.b	$16(a0),d0
00016856 4880                       		ext.w	d0
00016858 9640                       		sub.w	d0,d3
0001685A 0A43 000F                  		eori.w	#$F,d3
0001685E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016862 367C FFF0                  		movea.w	#-$10,a3
00016866 3C3C 0800                  		move.w	#$800,d6
0001686A 7A0D                       		moveq	#$D,d5
0001686C 6100 0000                  		bsr.w	FindWall
00016870 301F                       		move.w	(sp)+,d0
00016872 6100 FE30                  		bsr.w	Sonic_Angle
00016876 4A41                       		tst.w	d1
00016878 6700                       		beq.s	locret_14934
0001687A 6A00                       		bpl.s	loc_14936
0001687C 0C41 FFF2                  		cmpi.w	#-$E,d1
00016880 6D00 FDDC                  		blt.w	locret_1470A
00016884 9368 0008                  		sub.w	d1,8(a0)
00016888                            
00016888                            locret_14934:
00016888 4E75                       		rts	
0001688A                            ; ===========================================================================
0001688A                            
0001688A                            loc_14936:
0001688A 0C41 000E                  		cmpi.w	#$E,d1
0001688E 6E00                       		bgt.s	loc_14942
00016890                            
00016890                            loc_1493C:
00016890 9368 0008                  		sub.w	d1,8(a0)
00016894 4E75                       		rts	
00016896                            ; ===========================================================================
00016896                            
00016896                            loc_14942:
00016896 4A28 0038                  		tst.b	$38(a0)
0001689A 66F4                       		bne.s	loc_1493C
0001689C 08E8 0001 0022             		bset	#1,$22(a0)
000168A2 08A8 0005 0022             		bclr	#5,$22(a0)
000168A8 117C 0001 001D             		move.b	#1,$1D(a0)
000168AE 4E75                       		rts	
000168B0                            ; End of function Sonic_WalkVertL
000168B0                            
000168B0                            ; ---------------------------------------------------------------------------
000168B0                            ; Subroutine to	find which tile	the object is standing on
000168B0                            ; ---------------------------------------------------------------------------
000168B0                            
000168B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000168B0                            
000168B0                            
000168B0                            Floor_ChkTile_LocateBlock:
000168B0 43F8 A400                  		lea	($FFFFA400).w,a1
000168B4 1231 0000                  		move.b	(a1,d0.w),d1
000168B8 6700                       		beq.s	Floor_ChkTile_EmptyChunk	; if the chunk ID is 0 (empty chunk), branch
000168BA 6B00                       		bmi.s	loc_1499A
000168BC 5301                       		subq.b	#1,d1		; the empty chunk is not included in the chunk mappings, subtract 1 to read the correct data
000168BE 4881                       		ext.w	d1
000168C0 EE59                       		ror.w	#7,d1
000168C2 3002                       		move.w	d2,d0
000168C4 D040                       		add.w	d0,d0
000168C6 0240 01E0                  		andi.w	#$1E0,d0
000168CA D240                       		add.w	d0,d1
000168CC 3003                       		move.w	d3,d0
000168CE E648                       		lsr.w	#3,d0
000168D0 0240 001E                  		andi.w	#$1E,d0
000168D4 D240                       		add.w	d0,d1
000168D6 4E75                       		rts	
000168D8                            ; ---------------------------------------------------------------------------
000168D8                            
000168D8                            loc_1499A:
000168D8 0241 007F                  		andi.w	#$7F,d1
000168DC 0828 0006 0001             		btst	#6,1(a0)
000168E2 6700                       		beq.s	loc_149B2
000168E4 5241                       		addq.w	#1,d1
000168E6 0C41 0029                  		cmpi.w	#$29,d1
000168EA 6600                       		bne.s	loc_149B2
000168EC 323C 0051                  		move.w	#$51,d1
000168F0                            
000168F0                            loc_149B2:
000168F0 5301                       		subq.b	#1,d1
000168F2 EE59                       		ror.w	#7,d1
000168F4 3002                       		move.w	d2,d0
000168F6 D040                       		add.w	d0,d0
000168F8 0240 01E0                  		andi.w	#$1E0,d0
000168FC D240                       		add.w	d0,d1
000168FE 3003                       		move.w	d3,d0
00016900 E648                       		lsr.w	#3,d0
00016902 0240 001E                  		andi.w	#$1E,d0
00016906 D240                       		add.w	d0,d1
00016908 4E75                       		rts	
0001690A                            ; ---------------------------------------------------------------------------
0001690A                            
0001690A                            Floor_ChkTile_EmptyChunk:
0001690A 43F8 FF00                  		lea	($FFFFFF00).w,a1	; override a1
0001690E 584F                       		addq.w	#4,sp			; pop a stack frame to avoid adding the address of the chunk mappings to a1
00016910 4E75                       		rts	
00016912                            
00016912                            ; ---------------------------------------------------------------------------
00016912                            ; Subroutine to	find which tile	the object is standing on
00016912                            ; ---------------------------------------------------------------------------
00016912                            
00016912                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016912                            
00016912                            
00016912                            Floor_ChkTile:				; XREF: FindFloor; et al
00016912 3002                       		move.w	d2,d0
00016914 E248                       		lsr.w	#1,d0
00016916 0240 0380                  		andi.w	#$380,d0
0001691A 3203                       		move.w	d3,d1
0001691C E049                       		lsr.w	#8,d1
0001691E 0241 007F                  		andi.w	#$7F,d1
00016922 D041                       		add.w	d1,d0
00016924 4A38 FE10                  		tst.b	($FFFFFE10).w	; are we in Green Hill Zone?
00016928 6700                       		beq.s	@ghz		; if yes, branch		
0001692A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w	
00016930 6700                       		beq.s	@lz		
00016932 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w	
00016938 6700                       		beq.s	@mz		
0001693A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w	
00016940 6700                       		beq.s	@slz		
00016942 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w	
00016948 6700                       		beq.s	@syz		
0001694A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w	
00016950 6700                       		beq.s	@sbz				
00016952 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
00016958 6700                       		beq.s	@ghz		; if yes, branch
0001695A 72FF                       		moveq	#-1,d1
0001695C 6100 FF52                  		bsr.w	Floor_ChkTile_LocateBlock
00016960 2241                       		movea.l	d1,a1
00016962 4E75                       		rts	
00016964                            ; ---------------------------------------------------------------------------
00016964                            
00016964                            @ghz:
00016964 7200                       		moveq	#0,d1
00016966 6100 FF48                  		bsr.w	Floor_ChkTile_LocateBlock
0001696A 0681 0000 0000             		add.l	#Blk256_GHZ,d1
00016970 2241                       		movea.l	d1,a1
00016972 4E75                       		rts	
00016974                            
00016974                            @lz:
00016974 7200                       		moveq	#0,d1
00016976 6100 FF38                  		bsr.w	Floor_ChkTile_LocateBlock
0001697A 0681 0000 0000             		add.l	#Blk256_LZ,d1
00016980 2241                       		movea.l	d1,a1
00016982 4E75                       		rts	
00016984                            
00016984                            @mz:
00016984 7200                       		moveq	#0,d1
00016986 6100 FF28                  		bsr.w	Floor_ChkTile_LocateBlock
0001698A 0681 0000 0000             		add.l	#Blk256_MZ,d1
00016990 2241                       		movea.l	d1,a1
00016992 4E75                       		rts	
00016994                            
00016994                            @slz:
00016994 7200                       		moveq	#0,d1
00016996 6100 FF18                  		bsr.w	Floor_ChkTile_LocateBlock
0001699A 0681 0000 0000             		add.l	#Blk256_SLZ,d1
000169A0 2241                       		movea.l	d1,a1
000169A2 4E75                       		rts	
000169A4                            
000169A4                            @syz:
000169A4 7200                       		moveq	#0,d1
000169A6 6100 FF08                  		bsr.w	Floor_ChkTile_LocateBlock
000169AA 0681 0000 0000             		add.l	#Blk256_SYZ,d1
000169B0 2241                       		movea.l	d1,a1
000169B2 4E75                       		rts	
000169B4                            
000169B4                            @sbz:
000169B4 7200                       		moveq	#0,d1
000169B6 6100 FEF8                  		bsr.w	Floor_ChkTile_LocateBlock
000169BA 0681 0000 0000             		add.l	#Blk256_SBZ,d1
000169C0 2241                       		movea.l	d1,a1
000169C2 4E75                       		rts			
000169C4                            ; End of function Floor_ChkTile
000169C4                            
000169C4                            
000169C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000169C4                            
000169C4                            
000169C4                            FindFloor:				; XREF: Sonic_AnglePos; et al
000169C4 6100 FF4C                  		bsr.w	Floor_ChkTile
000169C8 3011                       		move.w	(a1),d0
000169CA 3800                       		move.w	d0,d4
000169CC 0240 07FF                  		andi.w	#$7FF,d0
000169D0 6700                       		beq.s	loc_149DE
000169D2 0B04                       		btst	d5,d4
000169D4 6600                       		bne.s	loc_149EC
000169D6                            
000169D6                            loc_149DE:
000169D6 D44B                       		add.w	a3,d2
000169D8 6100 0000                  		bsr.w	FindFloor2
000169DC 944B                       		sub.w	a3,d2
000169DE 0641 0010                  		addi.w	#$10,d1
000169E2 4E75                       		rts	
000169E4                            ; ===========================================================================
000169E4                            
000169E4                            loc_149EC:
000169E4 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
000169E8 1032 0000                  		move.b	(a2,d0.w),d0
000169EC 0240 00FF                  		andi.w	#$FF,d0
000169F0 67E4                       		beq.s	loc_149DE
000169F2 45F9 0000 0000             		lea	(AngleMap).l,a2
000169F8 18B2 0000                  		move.b	(a2,d0.w),(a4)
000169FC E948                       		lsl.w	#4,d0
000169FE 3203                       		move.w	d3,d1
00016A00 0804 000B                  		btst	#$B,d4
00016A04 6700                       		beq.s	loc_14A12
00016A06 4641                       		not.w	d1
00016A08 4414                       		neg.b	(a4)
00016A0A                            
00016A0A                            loc_14A12:
00016A0A 0804 000C                  		btst	#$C,d4
00016A0E 6700                       		beq.s	loc_14A22
00016A10 0614 0040                  		addi.b	#$40,(a4)
00016A14 4414                       		neg.b	(a4)
00016A16 0414 0040                  		subi.b	#$40,(a4)
00016A1A                            
00016A1A                            loc_14A22:
00016A1A 0241 000F                  		andi.w	#$F,d1
00016A1E D240                       		add.w	d0,d1
00016A20 45F9 0000 0000             		lea	(CollArray1).l,a2
00016A26 1032 1000                  		move.b	(a2,d1.w),d0
00016A2A 4880                       		ext.w	d0
00016A2C BD44                       		eor.w	d6,d4
00016A2E 0804 000C                  		btst	#$C,d4
00016A32 6700                       		beq.s	loc_14A3E
00016A34 4440                       		neg.w	d0
00016A36                            
00016A36                            loc_14A3E:
00016A36 4A40                       		tst.w	d0
00016A38 679C                       		beq.s	loc_149DE
00016A3A 6B00                       		bmi.s	loc_14A5A
00016A3C 0C00 0010                  		cmpi.b	#$10,d0
00016A40 6700                       		beq.s	loc_14A66
00016A42 3202                       		move.w	d2,d1
00016A44 0241 000F                  		andi.w	#$F,d1
00016A48 D041                       		add.w	d1,d0
00016A4A 323C 000F                  		move.w	#$F,d1
00016A4E 9240                       		sub.w	d0,d1
00016A50 4E75                       		rts	
00016A52                            ; ===========================================================================
00016A52                            
00016A52                            loc_14A5A:
00016A52 3202                       		move.w	d2,d1
00016A54 0241 000F                  		andi.w	#$F,d1
00016A58 D041                       		add.w	d1,d0
00016A5A 6A00 FF7A                  		bpl.w	loc_149DE
00016A5E                            
00016A5E                            loc_14A66:
00016A5E 944B                       		sub.w	a3,d2
00016A60 6100 0000                  		bsr.w	FindFloor2
00016A64 D44B                       		add.w	a3,d2
00016A66 0441 0010                  		subi.w	#$10,d1
00016A6A 4E75                       		rts	
00016A6C                            ; End of function FindFloor
00016A6C                            
00016A6C                            
00016A6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A6C                            
00016A6C                            
00016A6C                            FindFloor2:				; XREF: FindFloor
00016A6C 6100 FEA4                  		bsr.w	Floor_ChkTile
00016A70 3011                       		move.w	(a1),d0
00016A72 3800                       		move.w	d0,d4
00016A74 0240 07FF                  		andi.w	#$7FF,d0
00016A78 6700                       		beq.s	loc_14A86
00016A7A 0B04                       		btst	d5,d4
00016A7C 6600                       		bne.s	loc_14A94
00016A7E                            
00016A7E                            loc_14A86:
00016A7E 323C 000F                  		move.w	#$F,d1
00016A82 3002                       		move.w	d2,d0
00016A84 0240 000F                  		andi.w	#$F,d0
00016A88 9240                       		sub.w	d0,d1
00016A8A 4E75                       		rts	
00016A8C                            ; ===========================================================================
00016A8C                            
00016A8C                            loc_14A94:
00016A8C 2478 F796                  		movea.l	($FFFFF796).w,a2
00016A90 1032 0000                  		move.b	(a2,d0.w),d0
00016A94 0240 00FF                  		andi.w	#$FF,d0
00016A98 67E4                       		beq.s	loc_14A86
00016A9A 45F9 0000 0000             		lea	(AngleMap).l,a2
00016AA0 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016AA4 E948                       		lsl.w	#4,d0
00016AA6 3203                       		move.w	d3,d1
00016AA8 0804 000B                  		btst	#$B,d4
00016AAC 6700                       		beq.s	loc_14ABA
00016AAE 4641                       		not.w	d1
00016AB0 4414                       		neg.b	(a4)
00016AB2                            
00016AB2                            loc_14ABA:
00016AB2 0804 000C                  		btst	#$C,d4
00016AB6 6700                       		beq.s	loc_14ACA
00016AB8 0614 0040                  		addi.b	#$40,(a4)
00016ABC 4414                       		neg.b	(a4)
00016ABE 0414 0040                  		subi.b	#$40,(a4)
00016AC2                            
00016AC2                            loc_14ACA:
00016AC2 0241 000F                  		andi.w	#$F,d1
00016AC6 D240                       		add.w	d0,d1
00016AC8 45F9 0000 0000             		lea	(CollArray1).l,a2
00016ACE 1032 1000                  		move.b	(a2,d1.w),d0
00016AD2 4880                       		ext.w	d0
00016AD4 BD44                       		eor.w	d6,d4
00016AD6 0804 000C                  		btst	#$C,d4
00016ADA 6700                       		beq.s	loc_14AE6
00016ADC 4440                       		neg.w	d0
00016ADE                            
00016ADE                            loc_14AE6:
00016ADE 4A40                       		tst.w	d0
00016AE0 679C                       		beq.s	loc_14A86
00016AE2 6B00                       		bmi.s	loc_14AFC
00016AE4 3202                       		move.w	d2,d1
00016AE6 0241 000F                  		andi.w	#$F,d1
00016AEA D041                       		add.w	d1,d0
00016AEC 323C 000F                  		move.w	#$F,d1
00016AF0 9240                       		sub.w	d0,d1
00016AF2 4E75                       		rts	
00016AF4                            ; ===========================================================================
00016AF4                            
00016AF4                            loc_14AFC:
00016AF4 3202                       		move.w	d2,d1
00016AF6 0241 000F                  		andi.w	#$F,d1
00016AFA D041                       		add.w	d1,d0
00016AFC 6A00 FF80                  		bpl.w	loc_14A86
00016B00 4641                       		not.w	d1
00016B02 4E75                       		rts	
00016B04                            ; End of function FindFloor2
00016B04                            
00016B04                            
00016B04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016B04                            
00016B04                            
00016B04                            FindWall:				; XREF: Sonic_WalkVertR; et al
00016B04 6100 FE0C                  		bsr.w	Floor_ChkTile
00016B08 3011                       		move.w	(a1),d0
00016B0A 3800                       		move.w	d0,d4
00016B0C 0240 07FF                  		andi.w	#$7FF,d0
00016B10 6700                       		beq.s	loc_14B1E
00016B12 0B04                       		btst	d5,d4
00016B14 6600                       		bne.s	loc_14B2C
00016B16                            
00016B16                            loc_14B1E:
00016B16 D64B                       		add.w	a3,d3
00016B18 6100 0000                  		bsr.w	FindWall2
00016B1C 964B                       		sub.w	a3,d3
00016B1E 0641 0010                  		addi.w	#$10,d1
00016B22 4E75                       		rts	
00016B24                            ; ===========================================================================
00016B24                            
00016B24                            loc_14B2C:
00016B24 2478 F796                  		movea.l	($FFFFF796).w,a2
00016B28 1032 0000                  		move.b	(a2,d0.w),d0
00016B2C 0240 00FF                  		andi.w	#$FF,d0
00016B30 67E4                       		beq.s	loc_14B1E
00016B32 45F9 0000 0000             		lea	(AngleMap).l,a2
00016B38 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016B3C E948                       		lsl.w	#4,d0
00016B3E 3202                       		move.w	d2,d1
00016B40 0804 000C                  		btst	#$C,d4
00016B44 6700                       		beq.s	loc_14B5A
00016B46 4641                       		not.w	d1
00016B48 0614 0040                  		addi.b	#$40,(a4)
00016B4C 4414                       		neg.b	(a4)
00016B4E 0414 0040                  		subi.b	#$40,(a4)
00016B52                            
00016B52                            loc_14B5A:
00016B52 0804 000B                  		btst	#$B,d4
00016B56 6700                       		beq.s	loc_14B62
00016B58 4414                       		neg.b	(a4)
00016B5A                            
00016B5A                            loc_14B62:
00016B5A 0241 000F                  		andi.w	#$F,d1
00016B5E D240                       		add.w	d0,d1
00016B60 45F9 0000 0000             		lea	(CollArray2).l,a2
00016B66 1032 1000                  		move.b	(a2,d1.w),d0
00016B6A 4880                       		ext.w	d0
00016B6C BD44                       		eor.w	d6,d4
00016B6E 0804 000B                  		btst	#$B,d4
00016B72 6700                       		beq.s	loc_14B7E
00016B74 4440                       		neg.w	d0
00016B76                            
00016B76                            loc_14B7E:
00016B76 4A40                       		tst.w	d0
00016B78 679C                       		beq.s	loc_14B1E
00016B7A 6B00                       		bmi.s	loc_14B9A
00016B7C 0C00 0010                  		cmpi.b	#$10,d0
00016B80 6700                       		beq.s	loc_14BA6
00016B82 3203                       		move.w	d3,d1
00016B84 0241 000F                  		andi.w	#$F,d1
00016B88 D041                       		add.w	d1,d0
00016B8A 323C 000F                  		move.w	#$F,d1
00016B8E 9240                       		sub.w	d0,d1
00016B90 4E75                       		rts	
00016B92                            ; ===========================================================================
00016B92                            
00016B92                            loc_14B9A:
00016B92 3203                       		move.w	d3,d1
00016B94 0241 000F                  		andi.w	#$F,d1
00016B98 D041                       		add.w	d1,d0
00016B9A 6A00 FF7A                  		bpl.w	loc_14B1E
00016B9E                            
00016B9E                            loc_14BA6:
00016B9E 964B                       		sub.w	a3,d3
00016BA0 6100 0000                  		bsr.w	FindWall2
00016BA4 D64B                       		add.w	a3,d3
00016BA6 0441 0010                  		subi.w	#$10,d1
00016BAA 4E75                       		rts	
00016BAC                            ; End of function FindWall
00016BAC                            
00016BAC                            
00016BAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016BAC                            
00016BAC                            
00016BAC                            FindWall2:				; XREF: FindWall
00016BAC 6100 FD64                  		bsr.w	Floor_ChkTile
00016BB0 3011                       		move.w	(a1),d0
00016BB2 3800                       		move.w	d0,d4
00016BB4 0240 07FF                  		andi.w	#$7FF,d0
00016BB8 6700                       		beq.s	loc_14BC6
00016BBA 0B04                       		btst	d5,d4
00016BBC 6600                       		bne.s	loc_14BD4
00016BBE                            
00016BBE                            loc_14BC6:
00016BBE 323C 000F                  		move.w	#$F,d1
00016BC2 3003                       		move.w	d3,d0
00016BC4 0240 000F                  		andi.w	#$F,d0
00016BC8 9240                       		sub.w	d0,d1
00016BCA 4E75                       		rts	
00016BCC                            ; ===========================================================================
00016BCC                            
00016BCC                            loc_14BD4:
00016BCC 2478 F796                  		movea.l	($FFFFF796).w,a2
00016BD0 1032 0000                  		move.b	(a2,d0.w),d0
00016BD4 0240 00FF                  		andi.w	#$FF,d0
00016BD8 67E4                       		beq.s	loc_14BC6
00016BDA 45F9 0000 0000             		lea	(AngleMap).l,a2
00016BE0 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016BE4 E948                       		lsl.w	#4,d0
00016BE6 3202                       		move.w	d2,d1
00016BE8 0804 000C                  		btst	#$C,d4
00016BEC 6700                       		beq.s	loc_14C02
00016BEE 4641                       		not.w	d1
00016BF0 0614 0040                  		addi.b	#$40,(a4)
00016BF4 4414                       		neg.b	(a4)
00016BF6 0414 0040                  		subi.b	#$40,(a4)
00016BFA                            
00016BFA                            loc_14C02:
00016BFA 0804 000B                  		btst	#$B,d4
00016BFE 6700                       		beq.s	loc_14C0A
00016C00 4414                       		neg.b	(a4)
00016C02                            
00016C02                            loc_14C0A:
00016C02 0241 000F                  		andi.w	#$F,d1
00016C06 D240                       		add.w	d0,d1
00016C08 45F9 0000 0000             		lea	(CollArray2).l,a2
00016C0E 1032 1000                  		move.b	(a2,d1.w),d0
00016C12 4880                       		ext.w	d0
00016C14 BD44                       		eor.w	d6,d4
00016C16 0804 000B                  		btst	#$B,d4
00016C1A 6700                       		beq.s	loc_14C26
00016C1C 4440                       		neg.w	d0
00016C1E                            
00016C1E                            loc_14C26:
00016C1E 4A40                       		tst.w	d0
00016C20 679C                       		beq.s	loc_14BC6
00016C22 6B00                       		bmi.s	loc_14C3C
00016C24 3203                       		move.w	d3,d1
00016C26 0241 000F                  		andi.w	#$F,d1
00016C2A D041                       		add.w	d1,d0
00016C2C 323C 000F                  		move.w	#$F,d1
00016C30 9240                       		sub.w	d0,d1
00016C32 4E75                       		rts	
00016C34                            ; ===========================================================================
00016C34                            
00016C34                            loc_14C3C:
00016C34 3203                       		move.w	d3,d1
00016C36 0241 000F                  		andi.w	#$F,d1
00016C3A D041                       		add.w	d1,d0
00016C3C 6A00 FF80                  		bpl.w	loc_14BC6
00016C40 4641                       		not.w	d1
00016C42 4E75                       		rts	
00016C44                            ; End of function FindWall2
00016C44                            
00016C44                            ; ---------------------------------------------------------------------------
00016C44                            ; Unused floor/wall subroutine - logs something	to do with collision
00016C44                            ; ---------------------------------------------------------------------------
00016C44                            
00016C44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C44                            
00016C44                            
00016C44                            FloorLog_Unk:				; XREF: Level
00016C44 4E75                       		rts	
00016C46                            
00016C46 43F9 0000 0000             		lea	(CollArray1).l,a1
00016C4C 45F9 0000 0000             		lea	(CollArray1).l,a2
00016C52 363C 00FF                  		move.w	#$FF,d3
00016C56                            
00016C56                            loc_14C5E:
00016C56 7A10                       		moveq	#$10,d5
00016C58 343C 000F                  		move.w	#$F,d2
00016C5C                            
00016C5C                            loc_14C64:
00016C5C 7800                       		moveq	#0,d4
00016C5E 323C 000F                  		move.w	#$F,d1
00016C62                            
00016C62                            loc_14C6A:
00016C62 3019                       		move.w	(a1)+,d0
00016C64 EAA8                       		lsr.l	d5,d0
00016C66 D944                       		addx.w	d4,d4
00016C68 51C9 FFF8                  		dbf	d1,loc_14C6A
00016C6C                            
00016C6C 34C4                       		move.w	d4,(a2)+
00016C6E 92FC 0020                  		suba.w	#$20,a1
00016C72 5345                       		subq.w	#1,d5
00016C74 51CA FFE6                  		dbf	d2,loc_14C64
00016C78                            
00016C78 D2FC 0020                  		adda.w	#$20,a1
00016C7C 51CB FFD8                  		dbf	d3,loc_14C5E
00016C80                            
00016C80 43F9 0000 0000             		lea	(CollArray1).l,a1
00016C86 45F9 0000 0000             		lea	(CollArray2).l,a2
00016C8C 6100                       		bsr.s	FloorLog_Unk2
00016C8E 43F9 0000 0000             		lea	(CollArray1).l,a1
00016C94 45F9 0000 0000             		lea	(CollArray1).l,a2
00016C9A                            
00016C9A                            ; End of function FloorLog_Unk
00016C9A                            
00016C9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C9A                            
00016C9A                            
00016C9A                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00016C9A 363C 0FFF                  		move.w	#$FFF,d3
00016C9E                            
00016C9E                            loc_14CA6:
00016C9E 7400                       		moveq	#0,d2
00016CA0 323C 000F                  		move.w	#$F,d1
00016CA4 3019                       		move.w	(a1)+,d0
00016CA6 6700                       		beq.s	loc_14CD4
00016CA8 6B00                       		bmi.s	loc_14CBE
00016CAA                            
00016CAA                            loc_14CB2:
00016CAA E248                       		lsr.w	#1,d0
00016CAC 6400                       		bcc.s	loc_14CB8
00016CAE 5202                       		addq.b	#1,d2
00016CB0                            
00016CB0                            loc_14CB8:
00016CB0 51C9 FFF8                  		dbf	d1,loc_14CB2
00016CB4                            
00016CB4 6000                       		bra.s	loc_14CD6
00016CB6                            ; ===========================================================================
00016CB6                            
00016CB6                            loc_14CBE:
00016CB6 0C40 FFFF                  		cmpi.w	#-1,d0
00016CBA 6700                       		beq.s	loc_14CD0
00016CBC                            
00016CBC                            loc_14CC4:
00016CBC E348                       		lsl.w	#1,d0
00016CBE 6400                       		bcc.s	loc_14CCA
00016CC0 5302                       		subq.b	#1,d2
00016CC2                            
00016CC2                            loc_14CCA:
00016CC2 51C9 FFF8                  		dbf	d1,loc_14CC4
00016CC6                            
00016CC6 6000                       		bra.s	loc_14CD6
00016CC8                            ; ===========================================================================
00016CC8                            
00016CC8                            loc_14CD0:
00016CC8 303C 0010                  		move.w	#$10,d0
00016CCC                            
00016CCC                            loc_14CD4:
00016CCC 3400                       		move.w	d0,d2
00016CCE                            
00016CCE                            loc_14CD6:
00016CCE 14C2                       		move.b	d2,(a2)+
00016CD0 51CB FFCC                  		dbf	d3,loc_14CA6
00016CD4                            
00016CD4 4E75                       		rts	
00016CD6                            
00016CD6                            ; End of function FloorLog_Unk2
00016CD6                            
00016CD6                            
00016CD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016CD6                            
00016CD6                            
00016CD6                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00016CD6 2628 0008                  		move.l	8(a0),d3
00016CDA 2428 000C                  		move.l	$C(a0),d2
00016CDE 3228 0010                  		move.w	$10(a0),d1
00016CE2 48C1                       		ext.l	d1
00016CE4 E181                       		asl.l	#8,d1
00016CE6 D681                       		add.l	d1,d3
00016CE8 3228 0012                  		move.w	$12(a0),d1
00016CEC 48C1                       		ext.l	d1
00016CEE E181                       		asl.l	#8,d1
00016CF0 D481                       		add.l	d1,d2
00016CF2 4842                       		swap	d2
00016CF4 4843                       		swap	d3
00016CF6 11C0 F768                  		move.b	d0,($FFFFF768).w
00016CFA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016CFE 1200                       		move.b	d0,d1
00016D00 0600 0020                  		addi.b	#$20,d0
00016D04 6A00                       		bpl.s	loc_14D1A
00016D06 1001                       		move.b	d1,d0
00016D08 6A00                       		bpl.s	loc_14D14
00016D0A 5300                       		subq.b	#1,d0
00016D0C                            
00016D0C                            loc_14D14:
00016D0C 0600 0020                  		addi.b	#$20,d0
00016D10 6000                       		bra.s	loc_14D24
00016D12                            ; ===========================================================================
00016D12                            
00016D12                            loc_14D1A:
00016D12 1001                       		move.b	d1,d0
00016D14 6A00                       		bpl.s	loc_14D20
00016D16 5200                       		addq.b	#1,d0
00016D18                            
00016D18                            loc_14D20:
00016D18 0600 001F                  		addi.b	#$1F,d0
00016D1C                            
00016D1C                            loc_14D24:
00016D1C 0200 00C0                  		andi.b	#$C0,d0
00016D20 6700 0000                  		beq.w	loc_14DF0
00016D24 0C00 0080                  		cmpi.b	#$80,d0
00016D28 6700 0000                  		beq.w	loc_14F7C
00016D2C 0201 0038                  		andi.b	#$38,d1
00016D30 6600                       		bne.s	loc_14D3C
00016D32 5042                       		addq.w	#8,d2
00016D34                            
00016D34                            loc_14D3C:
00016D34 0C00 0040                  		cmpi.b	#$40,d0
00016D38 6700 0000                  		beq.w	loc_1504A
00016D3C 6000 0000                  		bra.w	loc_14EBC
00016D40                            
00016D40                            ; End of function Sonic_WalkSpeed
00016D40                            
00016D40                            
00016D40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016D40                            
00016D40                            
00016D40                            sub_14D48:				; XREF: Sonic_Jump
00016D40 11C0 F768                  		move.b	d0,($FFFFF768).w
00016D44 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016D48 0600 0020                  		addi.b	#$20,d0
00016D4C 0200 00C0                  		andi.b	#$C0,d0
00016D50 0C00 0040                  		cmpi.b	#$40,d0
00016D54 6700 0000                  		beq.w	loc_14FD6
00016D58 0C00 0080                  		cmpi.b	#$80,d0
00016D5C 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00016D60 0C00 00C0                  		cmpi.b	#$C0,d0
00016D64 6700 0000                  		beq.w	sub_14E50
00016D68                            
00016D68                            ; End of function sub_14D48
00016D68                            
00016D68                            ; ---------------------------------------------------------------------------
00016D68                            ; Subroutine to	make Sonic land	on the floor after jumping
00016D68                            ; ---------------------------------------------------------------------------
00016D68                            
00016D68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016D68                            
00016D68                            
00016D68                            Sonic_HitFloor:				; XREF: Sonic_Floor
00016D68 3428 000C                  		move.w	$C(a0),d2
00016D6C 3628 0008                  		move.w	8(a0),d3
00016D70 7000                       		moveq	#0,d0
00016D72 1028 0016                  		move.b	$16(a0),d0
00016D76 4880                       		ext.w	d0
00016D78 D440                       		add.w	d0,d2
00016D7A 1028 0017                  		move.b	$17(a0),d0
00016D7E 4880                       		ext.w	d0
00016D80 D640                       		add.w	d0,d3
00016D82 49F8 F768                  		lea	($FFFFF768).w,a4
00016D86 367C 0010                  		movea.w	#$10,a3
00016D8A 3C3C 0000                  		move.w	#0,d6
00016D8E 7A0D                       		moveq	#$D,d5
00016D90 6100 FC32                  		bsr.w	FindFloor
00016D94 3F01                       		move.w	d1,-(sp)
00016D96 3428 000C                  		move.w	$C(a0),d2
00016D9A 3628 0008                  		move.w	8(a0),d3
00016D9E 7000                       		moveq	#0,d0
00016DA0 1028 0016                  		move.b	$16(a0),d0
00016DA4 4880                       		ext.w	d0
00016DA6 D440                       		add.w	d0,d2
00016DA8 1028 0017                  		move.b	$17(a0),d0
00016DAC 4880                       		ext.w	d0
00016DAE 9640                       		sub.w	d0,d3
00016DB0 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016DB4 367C 0010                  		movea.w	#$10,a3
00016DB8 3C3C 0000                  		move.w	#0,d6
00016DBC 7A0D                       		moveq	#$D,d5
00016DBE 6100 FC04                  		bsr.w	FindFloor
00016DC2 301F                       		move.w	(sp)+,d0
00016DC4 143C 0000                  		move.b	#0,d2
00016DC8                            
00016DC8                            loc_14DD0:
00016DC8 1638 F76A                  		move.b	($FFFFF76A).w,d3
00016DCC B240                       		cmp.w	d0,d1
00016DCE 6F00                       		ble.s	loc_14DDE
00016DD0 1638 F768                  		move.b	($FFFFF768).w,d3
00016DD4 C141                       		exg	d0,d1
00016DD6                            
00016DD6                            loc_14DDE:
00016DD6 0803 0000                  		btst	#0,d3
00016DDA 6700                       		beq.s	locret_14DE6
00016DDC 1602                       		move.b	d2,d3
00016DDE                            
00016DDE                            locret_14DE6:
00016DDE 4E75                       		rts	
00016DE0                            
00016DE0                            ; End of function Sonic_HitFloor
00016DE0                            
00016DE0                            ; ===========================================================================
00016DE0 3428 000C                  		move.w	$C(a0),d2
00016DE4 3628 0008                  		move.w	8(a0),d3
00016DE8                            
00016DE8                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00016DE8 0642 000A                  		addi.w	#$A,d2
00016DEC 49F8 F768                  		lea	($FFFFF768).w,a4
00016DF0 367C 0010                  		movea.w	#$10,a3
00016DF4 3C3C 0000                  		move.w	#0,d6
00016DF8 7A0E                       		moveq	#$E,d5
00016DFA 6100 FBC8                  		bsr.w	FindFloor
00016DFE 143C 0000                  		move.b	#0,d2
00016E02                            
00016E02                            loc_14E0A:				; XREF: sub_14EB4
00016E02 1638 F768                  		move.b	($FFFFF768).w,d3
00016E06 0803 0000                  		btst	#0,d3
00016E0A 6700                       		beq.s	locret_14E16
00016E0C 1602                       		move.b	d2,d3
00016E0E                            
00016E0E                            locret_14E16:
00016E0E 4E75                       		rts	
00016E10                            
00016E10                            ; ---------------------------------------------------------------------------
00016E10                            ; Subroutine allowing objects to interact with the floor
00016E10                            ; ---------------------------------------------------------------------------
00016E10                            
00016E10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E10                            
00016E10                            
00016E10                            ObjHitFloor:
00016E10 3628 0008                  		move.w	8(a0),d3
00016E14                            
00016E14                            ; End of function ObjHitFloor
00016E14                            
00016E14                            
00016E14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E14                            
00016E14                            
00016E14                            ObjHitFloor2:
00016E14 3428 000C                  		move.w	$C(a0),d2
00016E18 7000                       		moveq	#0,d0
00016E1A 1028 0016                  		move.b	$16(a0),d0
00016E1E 4880                       		ext.w	d0
00016E20 D440                       		add.w	d0,d2
00016E22 49F8 F768                  		lea	($FFFFF768).w,a4
00016E26 18BC 0000                  		move.b	#0,(a4)
00016E2A 367C 0010                  		movea.w	#$10,a3
00016E2E 3C3C 0000                  		move.w	#0,d6
00016E32 7A0D                       		moveq	#$D,d5
00016E34 6100 FB8E                  		bsr.w	FindFloor
00016E38 1638 F768                  		move.b	($FFFFF768).w,d3
00016E3C 0803 0000                  		btst	#0,d3
00016E40 6700                       		beq.s	locret_14E4E
00016E42 163C 0000                  		move.b	#0,d3
00016E46                            
00016E46                            locret_14E4E:
00016E46 4E75                       		rts	
00016E48                            ; End of function ObjHitFloor2
00016E48                            
00016E48                            
00016E48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E48                            
00016E48                            
00016E48                            sub_14E50:				; XREF: sub_14D48
00016E48 3428 000C                  		move.w	$C(a0),d2
00016E4C 3628 0008                  		move.w	8(a0),d3
00016E50 7000                       		moveq	#0,d0
00016E52 1028 0017                  		move.b	$17(a0),d0
00016E56 4880                       		ext.w	d0
00016E58 9440                       		sub.w	d0,d2
00016E5A 1028 0016                  		move.b	$16(a0),d0
00016E5E 4880                       		ext.w	d0
00016E60 D640                       		add.w	d0,d3
00016E62 49F8 F768                  		lea	($FFFFF768).w,a4
00016E66 367C 0010                  		movea.w	#$10,a3
00016E6A 3C3C 0000                  		move.w	#0,d6
00016E6E 7A0E                       		moveq	#$E,d5
00016E70 6100 FC92                  		bsr.w	FindWall
00016E74 3F01                       		move.w	d1,-(sp)
00016E76 3428 000C                  		move.w	$C(a0),d2
00016E7A 3628 0008                  		move.w	8(a0),d3
00016E7E 7000                       		moveq	#0,d0
00016E80 1028 0017                  		move.b	$17(a0),d0
00016E84 4880                       		ext.w	d0
00016E86 D440                       		add.w	d0,d2
00016E88 1028 0016                  		move.b	$16(a0),d0
00016E8C 4880                       		ext.w	d0
00016E8E D640                       		add.w	d0,d3
00016E90 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016E94 367C 0010                  		movea.w	#$10,a3
00016E98 3C3C 0000                  		move.w	#0,d6
00016E9C 7A0E                       		moveq	#$E,d5
00016E9E 6100 FC64                  		bsr.w	FindWall
00016EA2 301F                       		move.w	(sp)+,d0
00016EA4 143C 00C0                  		move.b	#-$40,d2
00016EA8 6000 FF1E                  		bra.w	loc_14DD0
00016EAC                            
00016EAC                            ; End of function sub_14E50
00016EAC                            
00016EAC                            
00016EAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016EAC                            
00016EAC                            
00016EAC                            sub_14EB4:				; XREF: Sonic_Floor
00016EAC 3428 000C                  		move.w	$C(a0),d2
00016EB0 3628 0008                  		move.w	8(a0),d3
00016EB4                            
00016EB4                            loc_14EBC:
00016EB4 0643 000A                  		addi.w	#$A,d3
00016EB8 49F8 F768                  		lea	($FFFFF768).w,a4
00016EBC 367C 0010                  		movea.w	#$10,a3
00016EC0 3C3C 0000                  		move.w	#0,d6
00016EC4 7A0E                       		moveq	#$E,d5
00016EC6 6100 FC3C                  		bsr.w	FindWall
00016ECA 143C 00C0                  		move.b	#-$40,d2
00016ECE 6000 FF32                  		bra.w	loc_14E0A
00016ED2                            
00016ED2                            ; End of function sub_14EB4
00016ED2                            
00016ED2                            ; ---------------------------------------------------------------------------
00016ED2                            ; Subroutine to	detect when an object hits a wall to its right
00016ED2                            ; ---------------------------------------------------------------------------
00016ED2                            
00016ED2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016ED2                            
00016ED2                            
00016ED2                            ObjHitWallRight:
00016ED2 D668 0008                  		add.w	8(a0),d3
00016ED6 3428 000C                  		move.w	$C(a0),d2
00016EDA 49F8 F768                  		lea	($FFFFF768).w,a4
00016EDE 18BC 0000                  		move.b	#0,(a4)
00016EE2 367C 0010                  		movea.w	#$10,a3
00016EE6 3C3C 0000                  		move.w	#0,d6
00016EEA 7A0E                       		moveq	#$E,d5
00016EEC 6100 FC16                  		bsr.w	FindWall
00016EF0 1638 F768                  		move.b	($FFFFF768).w,d3
00016EF4 0803 0000                  		btst	#0,d3
00016EF8 6700                       		beq.s	locret_14F06
00016EFA 163C 00C0                  		move.b	#-$40,d3
00016EFE                            
00016EFE                            locret_14F06:
00016EFE 4E75                       		rts	
00016F00                            
00016F00                            ; End of function ObjHitWallRight
00016F00                            
00016F00                            ; ---------------------------------------------------------------------------
00016F00                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00016F00                            ; touches them
00016F00                            ; ---------------------------------------------------------------------------
00016F00                            
00016F00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F00                            
00016F00                            
00016F00                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00016F00 3428 000C                  		move.w	$C(a0),d2
00016F04 3628 0008                  		move.w	8(a0),d3
00016F08 7000                       		moveq	#0,d0
00016F0A 1028 0016                  		move.b	$16(a0),d0
00016F0E 4880                       		ext.w	d0
00016F10 9440                       		sub.w	d0,d2
00016F12 0A42 000F                  		eori.w	#$F,d2
00016F16 1028 0017                  		move.b	$17(a0),d0
00016F1A 4880                       		ext.w	d0
00016F1C D640                       		add.w	d0,d3
00016F1E 49F8 F768                  		lea	($FFFFF768).w,a4
00016F22 367C FFF0                  		movea.w	#-$10,a3
00016F26 3C3C 1000                  		move.w	#$1000,d6
00016F2A 7A0E                       		moveq	#$E,d5
00016F2C 6100 FA96                  		bsr.w	FindFloor
00016F30 3F01                       		move.w	d1,-(sp)
00016F32 3428 000C                  		move.w	$C(a0),d2
00016F36 3628 0008                  		move.w	8(a0),d3
00016F3A 7000                       		moveq	#0,d0
00016F3C 1028 0016                  		move.b	$16(a0),d0
00016F40 4880                       		ext.w	d0
00016F42 9440                       		sub.w	d0,d2
00016F44 0A42 000F                  		eori.w	#$F,d2
00016F48 1028 0017                  		move.b	$17(a0),d0
00016F4C 4880                       		ext.w	d0
00016F4E 9640                       		sub.w	d0,d3
00016F50 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016F54 367C FFF0                  		movea.w	#-$10,a3
00016F58 3C3C 1000                  		move.w	#$1000,d6
00016F5C 7A0E                       		moveq	#$E,d5
00016F5E 6100 FA64                  		bsr.w	FindFloor
00016F62 301F                       		move.w	(sp)+,d0
00016F64 143C 0080                  		move.b	#-$80,d2
00016F68 6000 FE5E                  		bra.w	loc_14DD0
00016F6C                            ; End of function Sonic_DontRunOnWalls
00016F6C                            
00016F6C                            ; ===========================================================================
00016F6C 3428 000C                  		move.w	$C(a0),d2
00016F70 3628 0008                  		move.w	8(a0),d3
00016F74                            
00016F74                            loc_14F7C:
00016F74 0442 000A                  		subi.w	#$A,d2
00016F78 0A42 000F                  		eori.w	#$F,d2
00016F7C 49F8 F768                  		lea	($FFFFF768).w,a4
00016F80 367C FFF0                  		movea.w	#-$10,a3
00016F84 3C3C 1000                  		move.w	#$1000,d6
00016F88 7A0E                       		moveq	#$E,d5
00016F8A 6100 FA38                  		bsr.w	FindFloor
00016F8E 143C 0080                  		move.b	#-$80,d2
00016F92 6000 FE6E                  		bra.w	loc_14E0A
00016F96                            
00016F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F96                            
00016F96                            
00016F96                            ObjHitCeiling:
00016F96 3428 000C                  		move.w	$C(a0),d2
00016F9A 3628 0008                  		move.w	8(a0),d3
00016F9E 7000                       		moveq	#0,d0
00016FA0 1028 0016                  		move.b	$16(a0),d0
00016FA4 4880                       		ext.w	d0
00016FA6 9440                       		sub.w	d0,d2
00016FA8 0A42 000F                  		eori.w	#$F,d2
00016FAC 49F8 F768                  		lea	($FFFFF768).w,a4
00016FB0 367C FFF0                  		movea.w	#-$10,a3
00016FB4 3C3C 1000                  		move.w	#$1000,d6
00016FB8 7A0E                       		moveq	#$E,d5
00016FBA 6100 FA08                  		bsr.w	FindFloor
00016FBE 1638 F768                  		move.b	($FFFFF768).w,d3
00016FC2 0803 0000                  		btst	#0,d3
00016FC6 6700                       		beq.s	locret_14FD4
00016FC8 163C 0080                  		move.b	#-$80,d3
00016FCC                            
00016FCC                            locret_14FD4:
00016FCC 4E75                       		rts	
00016FCE                            ; End of function ObjHitCeiling
00016FCE                            
00016FCE                            ; ===========================================================================
00016FCE                            
00016FCE                            loc_14FD6:				; XREF: sub_14D48
00016FCE 3428 000C                  		move.w	$C(a0),d2
00016FD2 3628 0008                  		move.w	8(a0),d3
00016FD6 7000                       		moveq	#0,d0
00016FD8 1028 0017                  		move.b	$17(a0),d0
00016FDC 4880                       		ext.w	d0
00016FDE 9440                       		sub.w	d0,d2
00016FE0 1028 0016                  		move.b	$16(a0),d0
00016FE4 4880                       		ext.w	d0
00016FE6 9640                       		sub.w	d0,d3
00016FE8 0A43 000F                  		eori.w	#$F,d3
00016FEC 49F8 F768                  		lea	($FFFFF768).w,a4
00016FF0 367C FFF0                  		movea.w	#-$10,a3
00016FF4 3C3C 0800                  		move.w	#$800,d6
00016FF8 7A0E                       		moveq	#$E,d5
00016FFA 6100 FB08                  		bsr.w	FindWall
00016FFE 3F01                       		move.w	d1,-(sp)
00017000 3428 000C                  		move.w	$C(a0),d2
00017004 3628 0008                  		move.w	8(a0),d3
00017008 7000                       		moveq	#0,d0
0001700A 1028 0017                  		move.b	$17(a0),d0
0001700E 4880                       		ext.w	d0
00017010 D440                       		add.w	d0,d2
00017012 1028 0016                  		move.b	$16(a0),d0
00017016 4880                       		ext.w	d0
00017018 9640                       		sub.w	d0,d3
0001701A 0A43 000F                  		eori.w	#$F,d3
0001701E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017022 367C FFF0                  		movea.w	#-$10,a3
00017026 3C3C 0800                  		move.w	#$800,d6
0001702A 7A0E                       		moveq	#$E,d5
0001702C 6100 FAD6                  		bsr.w	FindWall
00017030 301F                       		move.w	(sp)+,d0
00017032 143C 0040                  		move.b	#$40,d2
00017036 6000 FD90                  		bra.w	loc_14DD0
0001703A                            
0001703A                            ; ---------------------------------------------------------------------------
0001703A                            ; Subroutine to	stop Sonic when	he jumps at a wall
0001703A                            ; ---------------------------------------------------------------------------
0001703A                            
0001703A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001703A                            
0001703A                            
0001703A                            Sonic_HitWall:				; XREF: Sonic_Floor
0001703A 3428 000C                  		move.w	$C(a0),d2
0001703E 3628 0008                  		move.w	8(a0),d3
00017042                            
00017042                            loc_1504A:
00017042 0443 000A                  		subi.w	#$A,d3
00017046 0A43 000F                  		eori.w	#$F,d3
0001704A 49F8 F768                  		lea	($FFFFF768).w,a4
0001704E 367C FFF0                  		movea.w	#-$10,a3
00017052 3C3C 0800                  		move.w	#$800,d6
00017056 7A0E                       		moveq	#$E,d5
00017058 6100 FAAA                  		bsr.w	FindWall
0001705C 143C 0040                  		move.b	#$40,d2
00017060 6000 FDA0                  		bra.w	loc_14E0A
00017064                            ; End of function Sonic_HitWall
00017064                            
00017064                            ; ---------------------------------------------------------------------------
00017064                            ; Subroutine to	detect when an object hits a wall to its left
00017064                            ; ---------------------------------------------------------------------------
00017064                            
00017064                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017064                            
00017064                            
00017064                            ObjHitWallLeft:
00017064 D668 0008                  		add.w	8(a0),d3
00017068 3428 000C                  		move.w	$C(a0),d2
0001706C 49F8 F768                  		lea	($FFFFF768).w,a4
00017070 18BC 0000                  		move.b	#0,(a4)
00017074 367C FFF0                  		movea.w	#-$10,a3
00017078 3C3C 0800                  		move.w	#$800,d6
0001707C 7A0E                       		moveq	#$E,d5
0001707E 6100 FA84                  		bsr.w	FindWall
00017082 1638 F768                  		move.b	($FFFFF768).w,d3
00017086 0803 0000                  		btst	#0,d3
0001708A 6700                       		beq.s	locret_15098
0001708C 163C 0040                  		move.b	#$40,d3
00017090                            
00017090                            locret_15098:
00017090 4E75                       		rts	
00017092                            ; End of function ObjHitWallLeft
00017092                            
00017092                            ; ===========================================================================
00017092                            ; ---------------------------------------------------------------------------
00017092                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00017092                            ; ---------------------------------------------------------------------------
00017092                            
00017092                            Obj66:					; XREF: Obj_Index
00017092 7000                       		moveq	#0,d0
00017094 1028 0024                  		move.b	$24(a0),d0
00017098 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
0001709C 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
000170A0                            ; ===========================================================================
000170A0 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
000170A2 0000                       		dc.w Obj66_Action-Obj66_Index
000170A4 0000                       		dc.w Obj66_Display-Obj66_Index
000170A6 0000                       		dc.w Obj66_Release-Obj66_Index
000170A8                            ; ===========================================================================
000170A8                            
000170A8                            Obj66_Main:				; XREF: Obj66_Index
000170A8 5428 0024                  		addq.b	#2,$24(a0)
000170AC 323C 0001                  		move.w	#1,d1
000170B0 2248                       		movea.l	a0,a1
000170B2 6000                       		bra.s	Obj66_MakeItem
000170B4                            ; ===========================================================================
000170B4                            
000170B4                            Obj66_Loop:
000170B4 4EB9 0000 F0A0             		jsr	SingleObjLoad
000170BA 6600                       		bne.s	loc_150FE
000170BC 12BC 0066                  		move.b	#$66,0(a1)
000170C0 5829 0024                  		addq.b	#4,$24(a1)
000170C4 3368 0008 0008             		move.w	8(a0),8(a1)
000170CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000170D0 137C 0003 0018             		move.b	#3,$18(a1)
000170D6 137C 0010 001A             		move.b	#$10,$1A(a1)
000170DC                            
000170DC                            Obj66_MakeItem:				; XREF: Obj66_Main
000170DC 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
000170E4 337C 4348 0002             		move.w	#$4348,2(a1)
000170EA 0029 0004 0001             		ori.b	#4,1(a1)
000170F0 137C 0038 0019             		move.b	#$38,$19(a1)
000170F6                            
000170F6                            loc_150FE:
000170F6 51C9 FFBC                  		dbf	d1,Obj66_Loop
000170FA                            
000170FA 117C 0030 0019             		move.b	#$30,$19(a0)
00017100 117C 0004 0018             		move.b	#4,$18(a0)
00017106 317C 003C 0030             		move.w	#$3C,$30(a0)
0001710C 117C 0001 0034             		move.b	#1,$34(a0)
00017112 1168 0028 0038             		move.b	$28(a0),$38(a0)
00017118                            
00017118                            Obj66_Action:				; XREF: Obj66_Index
00017118 6100 0000                  		bsr.w	Obj66_ChkSwitch
0001711C 4A28 0001                  		tst.b	1(a0)
00017120 6A00 0000                  		bpl.w	Obj66_Display
00017124 323C 0030                  		move.w	#$30,d1
00017128 3401                       		move.w	d1,d2
0001712A 3602                       		move.w	d2,d3
0001712C 5243                       		addq.w	#1,d3
0001712E 3828 0008                  		move.w	8(a0),d4
00017132 6100 A184                  		bsr.w	SolidObject
00017136 0828 0005 0022             		btst	#5,$22(a0)
0001713C 6700 0000                  		beq.w	Obj66_Display
00017140 43F8 D000                  		lea	($FFFFD000).w,a1
00017144 720E                       		moveq	#$E,d1
00017146 3029 0008                  		move.w	8(a1),d0
0001714A B068 0008                  		cmp.w	8(a0),d0
0001714E 6500                       		bcs.s	Obj66_GrabSonic
00017150 7207                       		moveq	#7,d1
00017152                            
00017152                            Obj66_GrabSonic:
00017152 B228 001A                  		cmp.b	$1A(a0),d1
00017156 6600                       		bne.s	Obj66_Display
00017158 1141 0032                  		move.b	d1,$32(a0)
0001715C 5828 0024                  		addq.b	#4,$24(a0)
00017160 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00017166 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
0001716C 337C 0800 0020             		move.w	#$800,$20(a1)
00017172 337C 0000 0010             		move.w	#0,$10(a1)
00017178 337C 0000 0012             		move.w	#0,$12(a1)
0001717E 08A8 0005 0022             		bclr	#5,$22(a0)
00017184 08A9 0005 0022             		bclr	#5,$22(a1)
0001718A 08E9 0001 0022             		bset	#1,$22(a1)
00017190 3429 0008                  		move.w	8(a1),d2
00017194 3629 000C                  		move.w	$C(a1),d3
00017198 6100 0000                  		bsr.w	Obj66_ChgPos
0001719C D569 0008                  		add.w	d2,8(a1)
000171A0 D769 000C                  		add.w	d3,$C(a1)
000171A4 E0E9 0008                  		asr	8(a1)
000171A8 E0E9 000C                  		asr	$C(a1)
000171AC                            
000171AC                            Obj66_Display:				; XREF: Obj66_Index
000171AC 6000 9DE6                  		bra.w	MarkObjGone
000171B0                            ; ===========================================================================
000171B0                            
000171B0                            Obj66_Release:				; XREF: Obj66_Index
000171B0 1028 001A                  		move.b	$1A(a0),d0
000171B4 0C00 0004                  		cmpi.b	#4,d0
000171B8 6700                       		beq.s	loc_151C8
000171BA 0C00 0007                  		cmpi.b	#7,d0
000171BE 6600                       		bne.s	loc_151F8
000171C0                            
000171C0                            loc_151C8:
000171C0 B028 0032                  		cmp.b	$32(a0),d0
000171C4 6700                       		beq.s	loc_151F8
000171C6 43F8 D000                  		lea	($FFFFD000).w,a1
000171CA 337C 0000 0010             		move.w	#0,$10(a1)
000171D0 337C 0800 0012             		move.w	#$800,$12(a1)
000171D6 0C00 0004                  		cmpi.b	#4,d0
000171DA 6700                       		beq.s	loc_151F0
000171DC 337C 0800 0010             		move.w	#$800,$10(a1)
000171E2 337C 0800 0012             		move.w	#$800,$12(a1)
000171E8                            
000171E8                            loc_151F0:
000171E8 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
000171EC 5928 0024                  		subq.b	#4,$24(a0)
000171F0                            
000171F0                            loc_151F8:
000171F0 6100                       		bsr.s	Obj66_ChkSwitch
000171F2 6100                       		bsr.s	Obj66_ChgPos
000171F4 6000 9D9E                  		bra.w	MarkObjGone
000171F8                            
000171F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000171F8                            
000171F8                            
000171F8                            Obj66_ChkSwitch:			; XREF: Obj66_Action
000171F8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000171FC 7000                       		moveq	#0,d0
000171FE 1028 0038                  		move.b	$38(a0),d0
00017202 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00017208 6700                       		beq.s	loc_15224	; if not, branch
0001720A 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
0001720E 6600                       		bne.s	Obj66_Animate	; if yes, branch
00017210 4428 0034                  		neg.b	$34(a0)
00017214 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
0001721A 6000                       		bra.s	Obj66_Animate
0001721C                            ; ===========================================================================
0001721C                            
0001721C                            loc_15224:
0001721C 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00017220                            
00017220                            Obj66_Animate:
00017220 5328 001E                  		subq.b	#1,$1E(a0)
00017224 6A00                       		bpl.s	locret_15246
00017226 117C 0007 001E             		move.b	#7,$1E(a0)
0001722C 1228 0034                  		move.b	$34(a0),d1
00017230 1028 001A                  		move.b	$1A(a0),d0
00017234 D001                       		add.b	d1,d0
00017236 0200 000F                  		andi.b	#$F,d0
0001723A 1140 001A                  		move.b	d0,$1A(a0)
0001723E                            
0001723E                            locret_15246:
0001723E 4E75                       		rts	
00017240                            ; End of function Obj66_ChkSwitch
00017240                            
00017240                            
00017240                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017240                            
00017240                            
00017240                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00017240 43F8 D000                  		lea	($FFFFD000).w,a1
00017244 7000                       		moveq	#0,d0
00017246 1028 001A                  		move.b	$1A(a0),d0
0001724A D040                       		add.w	d0,d0
0001724C 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00017250 101A                       		move.b	(a2)+,d0
00017252 4880                       		ext.w	d0
00017254 D068 0008                  		add.w	8(a0),d0
00017258 3340 0008                  		move.w	d0,8(a1)
0001725C 101A                       		move.b	(a2)+,d0
0001725E 4880                       		ext.w	d0
00017260 D068 000C                  		add.w	$C(a0),d0
00017264 3340 000C                  		move.w	d0,$C(a1)
00017268 4E75                       		rts	
0001726A                            ; End of function Obj66_ChgPos
0001726A                            
0001726A                            ; ===========================================================================
0001726A E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
0001726E E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00017272 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00017276 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
0001727A 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
0001727E 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00017282 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00017286 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
0001728A                            ; ---------------------------------------------------------------------------
0001728A                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001728A                            ; ---------------------------------------------------------------------------
0001728A                            Map_obj66:
0001728A                            	include "_maps\obj66.asm"
0001728A                            ; ---------------------------------------------------------------------------
0001728A                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001728A                            ; ---------------------------------------------------------------------------
0001728A 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
0001728E 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00017292 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00017296 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
0001729A 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
0001729E 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
000172A2 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
000172A6 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
000172AA 0000                       		dc.w byte_154A4-Map_obj66
000172AC 06                         byte_152B4:	dc.b 6
000172AD E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000172B2 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000172B7 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000172BC E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000172C1 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000172C6 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000172CB 06                         byte_152D3:	dc.b 6
000172CC F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000172D1 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000172D6 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000172DB F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000172E0 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000172E5 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000172EA 06                         byte_152F2:	dc.b 6
000172EB 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000172F0 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000172F5 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000172FA 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000172FF 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00017304 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00017309 06                         byte_15311:	dc.b 6
0001730A 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
0001730F 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00017314 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00017319 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
0001731E 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00017323 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00017328 06                         byte_15330:	dc.b 6
00017329 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
0001732E 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00017333 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00017338 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
0001733D 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00017342 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00017347 06                         byte_1534F:	dc.b 6
00017348 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
0001734D 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00017352 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00017357 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
0001735C 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00017361 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00017366 06                         byte_1536E:	dc.b 6
00017367 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
0001736C 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00017371 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00017376 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
0001737B 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00017380 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00017385 06                         byte_1538D:	dc.b 6
00017386 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
0001738B F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00017390 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00017395 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
0001739A 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
0001739F 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000173A4 06                         byte_153AC:	dc.b 6
000173A5 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000173AA 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000173AF E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000173B4 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000173B9 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000173BE 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000173C3 06                         byte_153CB:	dc.b 6
000173C4 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000173C9 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000173CE DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000173D3 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000173D8 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000173DD F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000173E2 06                         byte_153EA:	dc.b 6
000173E3 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000173E8 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000173ED D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000173F2 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000173F7 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000173FC E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00017401 06                         byte_15409:	dc.b 6
00017402 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00017407 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
0001740C CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00017411 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00017416 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
0001741B E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00017420 06                         byte_15428:	dc.b 6
00017421 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00017426 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
0001742B C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00017430 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00017435 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
0001743A E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
0001743F 06                         byte_15447:	dc.b 6
00017440 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00017445 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
0001744A CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
0001744F CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00017454 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00017459 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
0001745E 06                         byte_15466:	dc.b 6
0001745F E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00017464 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00017469 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
0001746E D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00017473 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00017478 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
0001747D 06                         byte_15485:	dc.b 6
0001747E E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00017483 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00017488 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
0001748D DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00017492 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00017497 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
0001749C 0C                         byte_154A4:	dc.b $C
0001749D C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000174A2 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
000174A7 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
000174AC C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
000174B1 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
000174B6 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
000174BB 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
000174C0 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
000174C5 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
000174CA 280D 1809 00               		dc.b $28, $D, $18, 9, 0
000174CF 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
000174D4 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
000174DA 00                         		even
000174DA 00                         		even
000174DA                            
000174DA                            ; ===========================================================================
000174DA                            ; ---------------------------------------------------------------------------
000174DA                            ; Object 67 - disc that	you run	around (SBZ)
000174DA                            ; ---------------------------------------------------------------------------
000174DA                            
000174DA                            Obj67:					; XREF: Obj_Index
000174DA 7000                       		moveq	#0,d0
000174DC 1028 0024                  		move.b	$24(a0),d0
000174E0 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
000174E4 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
000174E8                            ; ===========================================================================
000174E8 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
000174EA 0000                       		dc.w Obj67_Action-Obj67_Index
000174EC                            ; ===========================================================================
000174EC                            
000174EC                            Obj67_Main:				; XREF: Obj67_Index
000174EC 5428 0024                  		addq.b	#2,$24(a0)
000174F0 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
000174F8 317C C344 0002             		move.w	#$C344,2(a0)
000174FE 117C 0004 0001             		move.b	#4,1(a0)
00017504 117C 0004 0018             		move.b	#4,$18(a0)
0001750A 117C 0008 0019             		move.b	#8,$19(a0)
00017510 3168 0008 0032             		move.w	8(a0),$32(a0)
00017516 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001751C 117C 0018 0034             		move.b	#$18,$34(a0)
00017522 117C 0048 0038             		move.b	#$48,$38(a0)
00017528 1228 0028                  		move.b	$28(a0),d1	; get object type
0001752C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00017530 6700                       		beq.s	loc_15546
00017532 117C 0010 0034             		move.b	#$10,$34(a0)
00017538 117C 0038 0038             		move.b	#$38,$38(a0)
0001753E                            
0001753E                            loc_15546:
0001753E 1228 0028                  		move.b	$28(a0),d1	; get object type
00017542 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00017546 4881                       		ext.w	d1
00017548 E741                       		asl.w	#3,d1
0001754A 3141 0036                  		move.w	d1,$36(a0)
0001754E 1028 0022                  		move.b	$22(a0),d0
00017552 E418                       		ror.b	#2,d0
00017554 0200 00C0                  		andi.b	#-$40,d0
00017558 1140 0026                  		move.b	d0,$26(a0)
0001755C                            
0001755C                            Obj67_Action:				; XREF: Obj67_Index
0001755C 6100 0000                  		bsr.w	Obj67_MoveSonic
00017560 6100 0000                  		bsr.w	Obj67_MoveSpot
00017564 6000 0000                  		bra.w	Obj67_ChkDel
00017568                            ; ===========================================================================
00017568                            
00017568                            Obj67_MoveSonic:			; XREF: Obj67_Action
00017568 7400                       		moveq	#0,d2
0001756A 1428 0038                  		move.b	$38(a0),d2
0001756E 3602                       		move.w	d2,d3
00017570 D643                       		add.w	d3,d3
00017572 43F8 D000                  		lea	($FFFFD000).w,a1
00017576 3029 0008                  		move.w	8(a1),d0
0001757A 9068 0032                  		sub.w	$32(a0),d0
0001757E D042                       		add.w	d2,d0
00017580 B043                       		cmp.w	d3,d0
00017582 6400                       		bcc.s	loc_155A8
00017584 3229 000C                  		move.w	$C(a1),d1
00017588 9268 0030                  		sub.w	$30(a0),d1
0001758C D242                       		add.w	d2,d1
0001758E B243                       		cmp.w	d3,d1
00017590 6400                       		bcc.s	loc_155A8
00017592 0829 0001 0022             		btst	#1,$22(a1)
00017598 6700                       		beq.s	loc_155B8
0001759A 4228 003A                  		clr.b	$3A(a0)
0001759E 4E75                       		rts	
000175A0                            ; ===========================================================================
000175A0                            
000175A0                            loc_155A8:
000175A0 4A28 003A                  		tst.b	$3A(a0)
000175A4 6700                       		beq.s	locret_155B6
000175A6 4229 0038                  		clr.b	$38(a1)
000175AA 4228 003A                  		clr.b	$3A(a0)
000175AE                            
000175AE                            locret_155B6:
000175AE 4E75                       		rts	
000175B0                            ; ===========================================================================
000175B0                            
000175B0                            loc_155B8:
000175B0 4A28 003A                  		tst.b	$3A(a0)
000175B4 6600                       		bne.s	loc_155E2
000175B6 117C 0001 003A             		move.b	#1,$3A(a0)
000175BC 0829 0002 0022             		btst	#2,$22(a1)
000175C2 6600                       		bne.s	loc_155D0
000175C4 4229 001C                  		clr.b	$1C(a1)
000175C8                            
000175C8                            loc_155D0:
000175C8 08A9 0005 0022             		bclr	#5,$22(a1)
000175CE 137C 0001 001D             		move.b	#1,$1D(a1)
000175D4 137C 0001 0038             		move.b	#1,$38(a1)
000175DA                            
000175DA                            loc_155E2:
000175DA 3029 0020                  		move.w	$20(a1),d0
000175DE 4A68 0036                  		tst.w	$36(a0)
000175E2 6A00                       		bpl.s	loc_15608
000175E4 0C40 FC00                  		cmpi.w	#-$400,d0
000175E8 6F00                       		ble.s	loc_155FA
000175EA 337C FC00 0020             		move.w	#-$400,$20(a1)
000175F0 4E75                       		rts	
000175F2                            ; ===========================================================================
000175F2                            
000175F2                            loc_155FA:
000175F2 0C40 F100                  		cmpi.w	#-$F00,d0
000175F6 6C00                       		bge.s	locret_15606
000175F8 337C F100 0020             		move.w	#-$F00,$20(a1)
000175FE                            
000175FE                            locret_15606:
000175FE 4E75                       		rts	
00017600                            ; ===========================================================================
00017600                            
00017600                            loc_15608:
00017600 0C40 0400                  		cmpi.w	#$400,d0
00017604 6C00                       		bge.s	loc_15616
00017606 337C 0400 0020             		move.w	#$400,$20(a1)
0001760C 4E75                       		rts	
0001760E                            ; ===========================================================================
0001760E                            
0001760E                            loc_15616:
0001760E 0C40 0F00                  		cmpi.w	#$F00,d0
00017612 6F00                       		ble.s	locret_15622
00017614 337C 0F00 0020             		move.w	#$F00,$20(a1)
0001761A                            
0001761A                            locret_15622:
0001761A 4E75                       		rts	
0001761C                            ; ===========================================================================
0001761C                            
0001761C                            Obj67_MoveSpot:				; XREF: Obj67_Action
0001761C 3028 0036                  		move.w	$36(a0),d0
00017620 D168 0026                  		add.w	d0,$26(a0)
00017624 1028 0026                  		move.b	$26(a0),d0
00017628 4EB9 0000 29CC             		jsr	(CalcSine).l
0001762E 3428 0030                  		move.w	$30(a0),d2
00017632 3628 0032                  		move.w	$32(a0),d3
00017636 7800                       		moveq	#0,d4
00017638 1828 0034                  		move.b	$34(a0),d4
0001763C E14C                       		lsl.w	#8,d4
0001763E 2A04                       		move.l	d4,d5
00017640 C9C0                       		muls.w	d0,d4
00017642 4844                       		swap	d4
00017644 CBC1                       		muls.w	d1,d5
00017646 4845                       		swap	d5
00017648 D842                       		add.w	d2,d4
0001764A DA43                       		add.w	d3,d5
0001764C 3144 000C                  		move.w	d4,$C(a0)
00017650 3145 0008                  		move.w	d5,8(a0)
00017654 4E75                       		rts	
00017656                            ; ===========================================================================
00017656                            
00017656                            Obj67_ChkDel:				; XREF: Obj67_Action
00017656 3028 0032                  		move.w	$32(a0),d0
0001765A 0240 FF80                  		andi.w	#-$80,d0
0001765E 3238 F700                  		move.w	($FFFFF700).w,d1
00017662 0441 0080                  		subi.w	#$80,d1
00017666 0241 FF80                  		andi.w	#-$80,d1
0001766A 9041                       		sub.w	d1,d0
0001766C 0C40 0280                  		cmpi.w	#$280,d0
00017670 6200                       		bhi.s	Obj67_Delete
00017672 4EF9 0000 E94A             		jmp	DisplaySprite
00017678                            ; ===========================================================================
00017678                            
00017678                            Obj67_Delete:
00017678 4EF9 0000 E99A             		jmp	DeleteObject
0001767E                            ; ===========================================================================
0001767E                            ; ---------------------------------------------------------------------------
0001767E                            ; Sprite mappings - disc that you run around (SBZ)
0001767E                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001767E                            ; part of the level tiles.)
0001767E                            ; ---------------------------------------------------------------------------
0001767E                            Map_obj67:
0001767E                            	include "_maps\obj67.asm"
0001767E                            ; ---------------------------------------------------------------------------
0001767E                            ; Sprite mappings - disc that you run around (SBZ)
0001767E                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001767E                            ; part of the level tiles.)
0001767E                            ; ---------------------------------------------------------------------------
0001767E 0000                       		dc.w byte_15688-Map_obj67
00017680 01                         byte_15688:	dc.b 1
00017681 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00017686                            		even
00017686                            		even
00017686                            
00017686                            ; ===========================================================================
00017686                            ; ---------------------------------------------------------------------------
00017686                            ; Object 68 - conveyor belts (SBZ)
00017686                            ; ---------------------------------------------------------------------------
00017686                            
00017686                            Obj68:					; XREF: Obj_Index
00017686 7000                       		moveq	#0,d0
00017688 1028 0024                  		move.b	$24(a0),d0
0001768C 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00017690 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00017694                            ; ===========================================================================
00017694 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00017696 0000                       		dc.w Obj68_Action-Obj68_Index
00017698                            ; ===========================================================================
00017698                            
00017698                            Obj68_Main:				; XREF: Obj68_Index
00017698 5428 0024                  		addq.b	#2,$24(a0)
0001769C 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
000176A2 1228 0028                  		move.b	$28(a0),d1	; get object type
000176A6 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000176AA 6700                       		beq.s	loc_156BA	; if zero, branch
000176AC 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
000176B2                            
000176B2                            loc_156BA:
000176B2 1228 0028                  		move.b	$28(a0),d1	; get object type
000176B6 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000176BA 4881                       		ext.w	d1
000176BC E841                       		asr.w	#4,d1
000176BE 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
000176C2                            
000176C2                            Obj68_Action:				; XREF: Obj68_Index
000176C2 6100                       		bsr.s	Obj68_MoveSonic
000176C4 3028 0008                  		move.w	8(a0),d0
000176C8 0240 FF80                  		andi.w	#$FF80,d0
000176CC 3238 F700                  		move.w	($FFFFF700).w,d1
000176D0 0441 0080                  		subi.w	#$80,d1
000176D4 0241 FF80                  		andi.w	#$FF80,d1
000176D8 9041                       		sub.w	d1,d0
000176DA 0C40 0280                  		cmpi.w	#$280,d0
000176DE 6300                       		bls.s	Obj68_NoDel
000176E0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000176E4 6700                       		beq.s	Obj68_Delete		; if it's zero, don't remember object
000176E6 3440                       		movea.w	d0,a2	; load address into a2
000176E8 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000176EC 6000                       		bra.s	Obj68_Delete	; and delete object
000176EE                            
000176EE                            Obj68_NoDel:
000176EE 4E75                       		rts	
000176F0                            ; ===========================================================================
000176F0                            
000176F0                            Obj68_Delete:
000176F0 4EF9 0000 E99A             		jmp	DeleteObject
000176F6                            ; ===========================================================================
000176F6                            
000176F6                            Obj68_MoveSonic:			; XREF: Obj68_Action
000176F6 7400                       		moveq	#0,d2
000176F8 1428 0038                  		move.b	$38(a0),d2
000176FC 3602                       		move.w	d2,d3
000176FE D643                       		add.w	d3,d3
00017700 43F8 D000                  		lea	($FFFFD000).w,a1
00017704 3029 0008                  		move.w	8(a1),d0
00017708 9068 0008                  		sub.w	8(a0),d0
0001770C D042                       		add.w	d2,d0
0001770E B043                       		cmp.w	d3,d0
00017710 6400                       		bcc.s	locret_1572E
00017712 3229 000C                  		move.w	$C(a1),d1
00017716 9268 000C                  		sub.w	$C(a0),d1
0001771A 0641 0030                  		addi.w	#$30,d1
0001771E 0C41 0030                  		cmpi.w	#$30,d1
00017722 6400                       		bcc.s	locret_1572E
00017724 0829 0001 0022             		btst	#1,$22(a1)
0001772A 6600                       		bne.s	locret_1572E
0001772C 3028 0036                  		move.w	$36(a0),d0
00017730 D169 0008                  		add.w	d0,8(a1)
00017734                            
00017734                            locret_1572E:
00017734 4E75                       		rts	
00017736                            
00017736                            ; ===========================================================================
00017736                            ; ---------------------------------------------------------------------------
00017736                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00017736                            ; ---------------------------------------------------------------------------
00017736                            
00017736                            Obj69:					; XREF: Obj_Index
00017736 7000                       		moveq	#0,d0
00017738 1028 0024                  		move.b	$24(a0),d0
0001773C 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00017740 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00017744                            ; ===========================================================================
00017744 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00017746 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00017748 0000                       		dc.w Obj69_Spinner-Obj69_Index
0001774A                            ; ===========================================================================
0001774A                            
0001774A                            Obj69_Main:				; XREF: Obj69_Index
0001774A 5428 0024                  		addq.b	#2,$24(a0)
0001774E 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00017756 317C 4492 0002             		move.w	#$4492,2(a0)
0001775C 0028 0004 0001             		ori.b	#4,1(a0)
00017762 117C 0080 0019             		move.b	#$80,$19(a0)
00017768 7000                       		moveq	#0,d0
0001776A 1028 0028                  		move.b	$28(a0),d0
0001776E 0240 000F                  		andi.w	#$F,d0
00017772 C0FC 003C                  		mulu.w	#$3C,d0
00017776 3140 0032                  		move.w	d0,$32(a0)
0001777A 4A28 0028                  		tst.b	$28(a0)
0001777E 6A00                       		bpl.s	Obj69_Trapdoor
00017780 5428 0024                  		addq.b	#2,$24(a0)
00017784 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
0001778C 317C 04DF 0002             		move.w	#$4DF,2(a0)
00017792 117C 0010 0019             		move.b	#$10,$19(a0)
00017798 117C 0002 001C             		move.b	#2,$1C(a0)
0001779E 7000                       		moveq	#0,d0
000177A0 1028 0028                  		move.b	$28(a0),d0	; get object type
000177A4 3200                       		move.w	d0,d1
000177A6 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000177AA C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000177AE 3140 0030                  		move.w	d0,$30(a0)	; set time delay
000177B2 3140 0032                  		move.w	d0,$32(a0)
000177B6 0241 0070                  		andi.w	#$70,d1
000177BA 0641 0010                  		addi.w	#$10,d1
000177BE E549                       		lsl.w	#2,d1
000177C0 5341                       		subq.w	#1,d1
000177C2 3141 0036                  		move.w	d1,$36(a0)
000177C6 6000                       		bra.s	Obj69_Spinner
000177C8                            ; ===========================================================================
000177C8                            
000177C8                            Obj69_Trapdoor:				; XREF: Obj69_Index
000177C8 5368 0030                  		subq.w	#1,$30(a0)
000177CC 6A00                       		bpl.s	Obj69_Animate
000177CE 3168 0032 0030             		move.w	$32(a0),$30(a0)
000177D4 0868 0000 001C             		bchg	#0,$1C(a0)
000177DA 4A28 0001                  		tst.b	1(a0)
000177DE 6A00                       		bpl.s	Obj69_Animate
000177E0 303C 00BB                  		move.w	#$BB,d0
000177E4 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play door sound
000177EA                            
000177EA                            Obj69_Animate:
000177EA 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000177F0 4EB9 0000 B9AA             		jsr	AnimateSprite
000177F6 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
000177FA 6600                       		bne.s	Obj69_NotSolid	; if not, branch
000177FC 323C 004B                  		move.w	#$4B,d1
00017800 343C 000C                  		move.w	#$C,d2
00017804 3602                       		move.w	d2,d3
00017806 5243                       		addq.w	#1,d3
00017808 3828 0008                  		move.w	8(a0),d4
0001780C 6100 9AAA                  		bsr.w	SolidObject
00017810 6000 9782                  		bra.w	MarkObjGone
00017814                            ; ===========================================================================
00017814                            
00017814                            Obj69_NotSolid:
00017814 0828 0003 0022             		btst	#3,$22(a0)
0001781A 6700                       		beq.s	Obj69_Display
0001781C 43F8 D000                  		lea	($FFFFD000).w,a1
00017820 08A9 0003 0022             		bclr	#3,$22(a1)
00017826 08A8 0003 0022             		bclr	#3,$22(a0)
0001782C 4228 0025                  		clr.b	$25(a0)
00017830                            
00017830                            Obj69_Display:
00017830 6000 9762                  		bra.w	MarkObjGone
00017834                            ; ===========================================================================
00017834                            
00017834                            Obj69_Spinner:				; XREF: Obj69_Index
00017834 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017838 C068 0036                  		and.w	$36(a0),d0
0001783C 6600                       		bne.s	Obj69_Delay
0001783E 117C 0001 0034             		move.b	#1,$34(a0)
00017844                            
00017844                            Obj69_Delay:
00017844 4A28 0034                  		tst.b	$34(a0)
00017848 6700                       		beq.s	Obj69_Animate2
0001784A 5368 0030                  		subq.w	#1,$30(a0)
0001784E 6A00                       		bpl.s	Obj69_Animate2
00017850 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017856 4228 0034                  		clr.b	$34(a0)
0001785A 0868 0000 001C             		bchg	#0,$1C(a0)
00017860                            
00017860                            Obj69_Animate2:
00017860 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00017866 4EB9 0000 B9AA             		jsr	AnimateSprite
0001786C 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00017870 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00017872 323C 001B                  		move.w	#$1B,d1
00017876 343C 0007                  		move.w	#7,d2
0001787A 3602                       		move.w	d2,d3
0001787C 5243                       		addq.w	#1,d3
0001787E 3828 0008                  		move.w	8(a0),d4
00017882 6100 9A34                  		bsr.w	SolidObject
00017886 6000 970C                  		bra.w	MarkObjGone
0001788A                            ; ===========================================================================
0001788A                            
0001788A                            Obj69_NotSolid2:
0001788A 0828 0003 0022             		btst	#3,$22(a0)
00017890 6700                       		beq.s	Obj69_Display2
00017892 43F8 D000                  		lea	($FFFFD000).w,a1
00017896 08A9 0003 0022             		bclr	#3,$22(a1)
0001789C 08A8 0003 0022             		bclr	#3,$22(a0)
000178A2 4228 0025                  		clr.b	$25(a0)
000178A6                            
000178A6                            Obj69_Display2:
000178A6 6000 96EC                  		bra.w	MarkObjGone
000178AA                            ; ===========================================================================
000178AA                            Ani_obj69:
000178AA                            	include "_anim\obj69.asm"
000178AA                            ; ---------------------------------------------------------------------------
000178AA                            ; Animation script - trapdoor (SBZ)
000178AA                            ; ---------------------------------------------------------------------------
000178AA 0000                       		dc.w byte_158AC-Ani_obj69
000178AC 0000                       		dc.w byte_158B2-Ani_obj69
000178AE 0000                       		dc.w byte_158B8-Ani_obj69
000178B0 0000                       		dc.w byte_158CC-Ani_obj69
000178B2 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
000178B8 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000178BE 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000178CB 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000178D2 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000178DF 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000178E6                            		even
000178E6                            		even
000178E6                            
000178E6                            ; ---------------------------------------------------------------------------
000178E6                            ; Sprite mappings - trapdoor (SBZ)
000178E6                            ; ---------------------------------------------------------------------------
000178E6                            Map_obj69:
000178E6                            	include "_maps\obj69.asm"
000178E6                            ; ---------------------------------------------------------------------------
000178E6                            ; Sprite mappings - trapdoor (SBZ)
000178E6                            ; ---------------------------------------------------------------------------
000178E6 0000                       		dc.w byte_158E6-Map_obj69
000178E8 0000                       		dc.w byte_158FB-Map_obj69
000178EA 0000                       		dc.w byte_15924-Map_obj69
000178EC 04                         byte_158E6:	dc.b 4
000178ED F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000178F2 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000178F7 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000178FC F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00017901 08                         byte_158FB:	dc.b 8
00017902 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00017907 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
0001790C 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00017911 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00017916 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
0001791B 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00017920 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00017925 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
0001792A 04                         byte_15924:	dc.b 4
0001792B 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00017930 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00017935 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
0001793A 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00017940 00                         		even
00017940 00                         		even
00017940                            
00017940                            ; ---------------------------------------------------------------------------
00017940                            ; Sprite mappings - spinning platforms (SBZ)
00017940                            ; ---------------------------------------------------------------------------
00017940                            Map_obj69a:
00017940                            	include "_maps\obj69a.asm"
00017940                            ; ---------------------------------------------------------------------------
00017940                            ; Sprite mappings - spinning platforms (SBZ)
00017940                            ; ---------------------------------------------------------------------------
00017940 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00017944 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00017948 0000                       		dc.w byte_15970-Map_obj69a
0001794A 02                         byte_15944:	dc.b 2
0001794B F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00017950 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00017955 02                         byte_1594F:	dc.b 2
00017956 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
0001795B 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00017960 02                         byte_1595A:	dc.b 2
00017961 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00017966 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
0001796B 02                         byte_15965:	dc.b 2
0001796C F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00017971 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00017976 02                         byte_15970:	dc.b 2
00017977 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
0001797C 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00017982 00                         		even
00017982 00                         		even
00017982                            
00017982                            ; ===========================================================================
00017982                            ; ---------------------------------------------------------------------------
00017982                            ; Object 6A - ground saws and pizza cutters (SBZ)
00017982                            ; ---------------------------------------------------------------------------
00017982                            
00017982                            Obj6A:					; XREF: Obj_Index
00017982 7000                       		moveq	#0,d0
00017984 1028 0024                  		move.b	$24(a0),d0
00017988 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
0001798C 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00017990                            ; ===========================================================================
00017990 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00017992 0000                       		dc.w Obj6A_Action-Obj6A_Index
00017994                            ; ===========================================================================
00017994                            
00017994                            Obj6A_Main:				; XREF: Obj6A_Index
00017994 5428 0024                  		addq.b	#2,$24(a0)
00017998 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
000179A0 317C 43B5 0002             		move.w	#$43B5,2(a0)
000179A6 117C 0004 0001             		move.b	#4,1(a0)
000179AC 117C 0004 0018             		move.b	#4,$18(a0)
000179B2 117C 0020 0019             		move.b	#$20,$19(a0)
000179B8 3168 0008 003A             		move.w	8(a0),$3A(a0)
000179BE 3168 000C 0038             		move.w	$C(a0),$38(a0)
000179C4 0C28 0003 0028             		cmpi.b	#3,$28(a0)
000179CA 6400                       		bcc.s	Obj6A_Action
000179CC 117C 00A2 0020             		move.b	#$A2,$20(a0)
000179D2                            
000179D2                            Obj6A_Action:				; XREF: Obj6A_Index
000179D2 7000                       		moveq	#0,d0
000179D4 1028 0028                  		move.b	$28(a0),d0
000179D8 0240 0007                  		andi.w	#7,d0
000179DC D040                       		add.w	d0,d0
000179DE 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
000179E2 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
000179E6 3028 003A                  		move.w	$3A(a0),d0
000179EA 0240 FF80                  		andi.w	#$FF80,d0
000179EE 3238 F700                  		move.w	($FFFFF700).w,d1
000179F2 0441 0080                  		subi.w	#$80,d1
000179F6 0241 FF80                  		andi.w	#$FF80,d1
000179FA 9041                       		sub.w	d1,d0
000179FC 0C40 0280                  		cmpi.w	#$280,d0
00017A00 6300                       		bls.s	Obj6A_NoDel
00017A02                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
00017A02                            	;	beq.s	Obj6A_Delete		; if it's zero, don't remember object
00017A02                            	;	movea.w	d0,a2	; load address into a2
00017A02                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017A02 6000                       		bra.s	Obj6A_Delete	; and delete object
00017A04                            
00017A04                            Obj6A_NoDel:
00017A04 4EF9 0000 E94A             		jmp	DisplaySprite
00017A0A                            ; ===========================================================================
00017A0A                            
00017A0A                            Obj6A_Delete:
00017A0A 4EF9 0000 E99A             		jmp	DeleteObject
00017A10                            ; ===========================================================================
00017A10 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00017A14 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00017A18 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00017A1A                            ; ===========================================================================
00017A1A                            
00017A1A                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00017A1A 4E75                       		rts	
00017A1C                            ; ===========================================================================
00017A1C                            
00017A1C                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00017A1C 323C 0060                  		move.w	#$60,d1
00017A20 7000                       		moveq	#0,d0
00017A22 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00017A26 0828 0000 0022             		btst	#0,$22(a0)
00017A2C 6700                       		beq.s	Obj6A_Animate01
00017A2E 4440                       		neg.w	d0
00017A30 D041                       		add.w	d1,d0
00017A32                            
00017A32                            Obj6A_Animate01:
00017A32 3228 003A                  		move.w	$3A(a0),d1
00017A36 9240                       		sub.w	d0,d1
00017A38 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00017A3C 5328 001E                  		subq.b	#1,$1E(a0)
00017A40 6A00                       		bpl.s	loc_15A46
00017A42 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00017A48 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00017A4E                            
00017A4E                            loc_15A46:
00017A4E 4A28 0001                  		tst.b	1(a0)
00017A52 6A00                       		bpl.s	locret_15A60
00017A54 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017A58 0240 000F                  		andi.w	#$F,d0
00017A5C 6600                       		bne.s	locret_15A60
00017A5E 303C 00B0                  		move.w	#$B0,d0
00017A62 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play saw sound
00017A68                            
00017A68                            locret_15A60:
00017A68 4E75                       		rts	
00017A6A                            ; ===========================================================================
00017A6A                            
00017A6A                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00017A6A 323C 0030                  		move.w	#$30,d1
00017A6E 7000                       		moveq	#0,d0
00017A70 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017A74 0828 0000 0022             		btst	#0,$22(a0)
00017A7A 6700                       		beq.s	Obj6A_Animate02
00017A7C 4440                       		neg.w	d0
00017A7E 0640 0080                  		addi.w	#$80,d0
00017A82                            
00017A82                            Obj6A_Animate02:
00017A82 3228 0038                  		move.w	$38(a0),d1
00017A86 9240                       		sub.w	d0,d1
00017A88 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00017A8C 5328 001E                  		subq.b	#1,$1E(a0)
00017A90 6A00                       		bpl.s	loc_15A96
00017A92 117C 0002 001E             		move.b	#2,$1E(a0)
00017A98 0868 0000 001A             		bchg	#0,$1A(a0)
00017A9E                            
00017A9E                            loc_15A96:
00017A9E 4A28 0001                  		tst.b	1(a0)
00017AA2 6A00                       		bpl.s	locret_15AB0
00017AA4 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017AA8 0C00 0018                  		cmpi.b	#$18,d0
00017AAC 6600                       		bne.s	locret_15AB0
00017AAE 303C 00B0                  		move.w	#$B0,d0
00017AB2 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play saw sound
00017AB8                            
00017AB8                            locret_15AB0:
00017AB8 4E75                       		rts	
00017ABA                            ; ===========================================================================
00017ABA                            
00017ABA                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00017ABA 4A28 003D                  		tst.b	$3D(a0)
00017ABE 6600                       		bne.s	Obj6A_Animate03
00017AC0 3038 D008                  		move.w	($FFFFD008).w,d0
00017AC4 0440 00C0                  		subi.w	#$C0,d0
00017AC8 6500                       		bcs.s	loc_15B02
00017ACA 9068 0008                  		sub.w	8(a0),d0
00017ACE 6500                       		bcs.s	loc_15B02
00017AD0 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017AD4 0440 0080                  		subi.w	#$80,d0
00017AD8 B068 000C                  		cmp.w	$C(a0),d0
00017ADC 6400                       		bcc.s	locret_15B04
00017ADE 0640 0100                  		addi.w	#$100,d0
00017AE2 B068 000C                  		cmp.w	$C(a0),d0
00017AE6 6500                       		bcs.s	locret_15B04
00017AE8 117C 0001 003D             		move.b	#1,$3D(a0)
00017AEE 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00017AF4 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017AFA 117C 0002 001A             		move.b	#2,$1A(a0)
00017B00 303C 00B0                  		move.w	#$B0,d0
00017B04 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play saw sound
00017B0A                            
00017B0A                            loc_15B02:
00017B0A 588F                       		addq.l	#4,sp
00017B0C                            
00017B0C                            locret_15B04:
00017B0C 4E75                       		rts	
00017B0E                            ; ===========================================================================
00017B0E                            
00017B0E                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00017B0E 4EB9 0000 E930             		jsr	SpeedToPos
00017B14 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017B1A 5328 001E                  		subq.b	#1,$1E(a0)
00017B1E 6A00                       		bpl.s	locret_15B24
00017B20 117C 0002 001E             		move.b	#2,$1E(a0)
00017B26 0868 0000 001A             		bchg	#0,$1A(a0)
00017B2C                            
00017B2C                            locret_15B24:
00017B2C 4E75                       		rts	
00017B2E                            ; ===========================================================================
00017B2E                            
00017B2E                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00017B2E 4A28 003D                  		tst.b	$3D(a0)
00017B32 6600                       		bne.s	Obj6A_Animate04
00017B34 3038 D008                  		move.w	($FFFFD008).w,d0
00017B38 0640 00E0                  		addi.w	#$E0,d0
00017B3C 9068 0008                  		sub.w	8(a0),d0
00017B40 6400                       		bcc.s	loc_15B74
00017B42 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017B46 0440 0080                  		subi.w	#$80,d0
00017B4A B068 000C                  		cmp.w	$C(a0),d0
00017B4E 6400                       		bcc.s	locret_15B76
00017B50 0640 0100                  		addi.w	#$100,d0
00017B54 B068 000C                  		cmp.w	$C(a0),d0
00017B58 6500                       		bcs.s	locret_15B76
00017B5A 117C 0001 003D             		move.b	#1,$3D(a0)
00017B60 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00017B66 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017B6C 117C 0002 001A             		move.b	#2,$1A(a0)
00017B72 303C 00B0                  		move.w	#$B0,d0
00017B76 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play saw sound
00017B7C                            
00017B7C                            loc_15B74:
00017B7C 588F                       		addq.l	#4,sp
00017B7E                            
00017B7E                            locret_15B76:
00017B7E 4E75                       		rts	
00017B80                            ; ===========================================================================
00017B80                            
00017B80                            Obj6A_Animate04:
00017B80 4EB9 0000 E930             		jsr	SpeedToPos
00017B86 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017B8C 5328 001E                  		subq.b	#1,$1E(a0)
00017B90 6A00                       		bpl.s	locret_15B96
00017B92 117C 0002 001E             		move.b	#2,$1E(a0)
00017B98 0868 0000 001A             		bchg	#0,$1A(a0)
00017B9E                            
00017B9E                            locret_15B96:
00017B9E 4E75                       		rts	
00017BA0                            ; ===========================================================================
00017BA0                            ; ---------------------------------------------------------------------------
00017BA0                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017BA0                            ; ---------------------------------------------------------------------------
00017BA0                            Map_obj6A:
00017BA0                            	include "_maps\obj6A.asm"
00017BA0                            ; ---------------------------------------------------------------------------
00017BA0                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017BA0                            ; ---------------------------------------------------------------------------
00017BA0 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00017BA4 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00017BA8 07                         byte_15BA0:	dc.b 7
00017BA9 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017BAE D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017BB3 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017BB8 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017BBD E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017BC2 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017BC7 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017BCC 07                         byte_15BC4:	dc.b 7
00017BCD C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017BD2 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017BD7 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017BDC E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00017BE1 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00017BE6 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00017BEB 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00017BF0 04                         byte_15BE8:	dc.b 4
00017BF1 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017BF6 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017BFB 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017C00 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017C05 04                         byte_15BFD:	dc.b 4
00017C06 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00017C0B E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00017C10 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00017C15 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00017C1A                            		even
00017C1A                            		even
00017C1A                            
00017C1A                            ; ===========================================================================
00017C1A                            ; ---------------------------------------------------------------------------
00017C1A                            ; Object 6B - stomper (SBZ)
00017C1A                            ; ---------------------------------------------------------------------------
00017C1A                            
00017C1A                            Obj6B:					; XREF: Obj_Index
00017C1A 7000                       		moveq	#0,d0
00017C1C 1028 0024                  		move.b	$24(a0),d0
00017C20 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00017C24 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00017C28                            ; ===========================================================================
00017C28 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00017C2A 0000                       		dc.w Obj6B_Action-Obj6B_Index
00017C2C                            
00017C2C 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00017C30 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00017C34 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00017C38 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00017C3C 8040 0005                  		dc.b  $80, $40,	  0,   5
00017C40                            ; ===========================================================================
00017C40                            
00017C40                            Obj6B_Main:				; XREF: Obj6B_Index
00017C40 5428 0024                  		addq.b	#2,$24(a0)
00017C44 7000                       		moveq	#0,d0
00017C46 1028 0028                  		move.b	$28(a0),d0
00017C4A E448                       		lsr.w	#2,d0
00017C4C 0240 001C                  		andi.w	#$1C,d0
00017C50 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00017C54 115B 0019                  		move.b	(a3)+,$19(a0)
00017C58 115B 0016                  		move.b	(a3)+,$16(a0)
00017C5C E448                       		lsr.w	#2,d0
00017C5E 1140 001A                  		move.b	d0,$1A(a0)
00017C62 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00017C6A 317C 22C0 0002             		move.w	#$22C0,2(a0)
00017C70 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00017C76 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00017C78 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00017C7E 6700                       		beq.s	Obj6B_SBZ3
00017C80                            
00017C80                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00017C80 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017C84 6700                       		beq.s	Obj6B_Delete		; if it's zero, don't remember object
00017C86 3440                       		movea.w	d0,a2	; load address into a2
00017C88 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017C8C                            
00017C8C                            Obj6B_Delete:
00017C8C 4EF9 0000 E99A             		jmp	DeleteObject
00017C92                            ; ===========================================================================
00017C92                            
00017C92                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00017C92 317C 41F0 0002             		move.w	#$41F0,2(a0)
00017C98 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00017C9E 6600                       		bne.s	Obj6B_SBZ12
00017CA0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017CA4 6700                       		beq.s	Obj6B_SBZ12		; if it's zero, don't remember object
00017CA6 3440                       		movea.w	d0,a2	; load address into a2
00017CA8 0812 0000                  		btst	#0,(a2)
00017CAC 6700                       		beq.s	Obj6B_SBZ12
00017CAE 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017CB2 60CC                       		bra.s	Obj6B_ChkGone
00017CB4                            ; ===========================================================================
00017CB4                            
00017CB4                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00017CB4 0028 0004 0001             		ori.b	#4,1(a0)
00017CBA 117C 0004 0018             		move.b	#4,$18(a0)
00017CC0 3168 0008 0034             		move.w	8(a0),$34(a0)
00017CC6 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017CCC 7000                       		moveq	#0,d0
00017CCE 101B                       		move.b	(a3)+,d0
00017CD0 3140 003C                  		move.w	d0,$3C(a0)
00017CD4 7000                       		moveq	#0,d0
00017CD6 1028 0028                  		move.b	$28(a0),d0
00017CDA 6A00                       		bpl.s	Obj6B_Action
00017CDC 0200 000F                  		andi.b	#$F,d0
00017CE0 1140 003E                  		move.b	d0,$3E(a0)
00017CE4 1153 0028                  		move.b	(a3),$28(a0)
00017CE8 0C13 0005                  		cmpi.b	#5,(a3)
00017CEC 6600                       		bne.s	Obj6B_ChkGone2
00017CEE 08E8 0004 0001             		bset	#4,1(a0)
00017CF4                            
00017CF4                            Obj6B_ChkGone2:
00017CF4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017CF8 6700                       		beq.s	Obj6B_Action		; if it's zero, don't remember object
00017CFA 3440                       		movea.w	d0,a2	; load address into a2
00017CFC 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017D00                            
00017D00                            Obj6B_Action:				; XREF: Obj6B_Index
00017D00 3F28 0008                  		move.w	8(a0),-(sp)
00017D04 7000                       		moveq	#0,d0
00017D06 1028 0028                  		move.b	$28(a0),d0
00017D0A 0240 000F                  		andi.w	#$F,d0
00017D0E D040                       		add.w	d0,d0
00017D10 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00017D14 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00017D18 381F                       		move.w	(sp)+,d4
00017D1A 4A28 0001                  		tst.b	1(a0)
00017D1E 6A00                       		bpl.s	Obj6B_ChkDel
00017D20 7200                       		moveq	#0,d1
00017D22 1228 0019                  		move.b	$19(a0),d1
00017D26 0641 000B                  		addi.w	#$B,d1
00017D2A 7400                       		moveq	#0,d2
00017D2C 1428 0016                  		move.b	$16(a0),d2
00017D30 3602                       		move.w	d2,d3
00017D32 5243                       		addq.w	#1,d3
00017D34 6100 9582                  		bsr.w	SolidObject
00017D38                            
00017D38                            Obj6B_ChkDel:
00017D38 3028 0034                  		move.w	$34(a0),d0
00017D3C 0240 FF80                  		andi.w	#$FF80,d0
00017D40 3238 F700                  		move.w	($FFFFF700).w,d1
00017D44 0441 0080                  		subi.w	#$80,d1
00017D48 0241 FF80                  		andi.w	#$FF80,d1
00017D4C 9041                       		sub.w	d1,d0
00017D4E 0C40 0280                  		cmpi.w	#$280,d0
00017D52 6200                       		bhi.s	loc_15D64
00017D54 4EF9 0000 E94A             		jmp	DisplaySprite
00017D5A                            ; ===========================================================================
00017D5A                            
00017D5A                            loc_15D64:
00017D5A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017D60 6600                       		bne.s	Obj6B_Delete2
00017D62 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017D66 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017D6A 6700                       		beq.s	Obj6B_Delete2		; if it's zero, don't remember object
00017D6C 3440                       		movea.w	d0,a2	; load address into a2
00017D6E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017D72                            
00017D72                            Obj6B_Delete2:
00017D72 4EF9 0000 E99A             		jmp	DeleteObject
00017D78                            ; ===========================================================================
00017D78 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00017D7C 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00017D80 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00017D84                            ; ===========================================================================
00017D84                            
00017D84                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00017D84 4E75                       		rts	
00017D86                            ; ===========================================================================
00017D86                            
00017D86                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00017D86 4A28 0038                  		tst.b	$38(a0)
00017D8A 6600                       		bne.s	loc_15DB4
00017D8C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017D90 7000                       		moveq	#0,d0
00017D92 1028 003E                  		move.b	$3E(a0),d0
00017D96 0832 0000 0000             		btst	#0,(a2,d0.w)
00017D9C 6700                       		beq.s	loc_15DC2
00017D9E 117C 0001 0038             		move.b	#1,$38(a0)
00017DA4                            
00017DA4                            loc_15DB4:
00017DA4 3028 003C                  		move.w	$3C(a0),d0
00017DA8 B068 003A                  		cmp.w	$3A(a0),d0
00017DAC 6700                       		beq.s	loc_15DE0
00017DAE 5468 003A                  		addq.w	#2,$3A(a0)
00017DB2                            
00017DB2                            loc_15DC2:
00017DB2 3028 003A                  		move.w	$3A(a0),d0
00017DB6 0828 0000 0022             		btst	#0,$22(a0)
00017DBC 6700                       		beq.s	loc_15DD4
00017DBE 4440                       		neg.w	d0
00017DC0 0640 0080                  		addi.w	#$80,d0
00017DC4                            
00017DC4                            loc_15DD4:
00017DC4 3228 0034                  		move.w	$34(a0),d1
00017DC8 9240                       		sub.w	d0,d1
00017DCA 3141 0008                  		move.w	d1,8(a0)
00017DCE 4E75                       		rts	
00017DD0                            ; ===========================================================================
00017DD0                            
00017DD0                            loc_15DE0:
00017DD0 5228 0028                  		addq.b	#1,$28(a0)
00017DD4 317C 00B4 0036             		move.w	#$B4,$36(a0)
00017DDA 4228 0038                  		clr.b	$38(a0)
00017DDE 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017DE2 67CE                       		beq.s	loc_15DC2		; if it's zero, don't remember object
00017DE4 3440                       		movea.w	d0,a2	; load address into a2
00017DE6 08D2 0000                  		bset	#0,(a2)
00017DEA 60C6                       		bra.s	loc_15DC2
00017DEC                            ; ===========================================================================
00017DEC                            
00017DEC                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00017DEC 4A28 0038                  		tst.b	$38(a0)
00017DF0 6600                       		bne.s	loc_15E14
00017DF2 5368 0036                  		subq.w	#1,$36(a0)
00017DF6 6600                       		bne.s	loc_15E1E
00017DF8 117C 0001 0038             		move.b	#1,$38(a0)
00017DFE                            
00017DFE                            loc_15E14:
00017DFE 4A68 003A                  		tst.w	$3A(a0)
00017E02 6700                       		beq.s	loc_15E3C
00017E04 5568 003A                  		subq.w	#2,$3A(a0)
00017E08                            
00017E08                            loc_15E1E:
00017E08 3028 003A                  		move.w	$3A(a0),d0
00017E0C 0828 0000 0022             		btst	#0,$22(a0)
00017E12 6700                       		beq.s	loc_15E30
00017E14 4440                       		neg.w	d0
00017E16 0640 0080                  		addi.w	#$80,d0
00017E1A                            
00017E1A                            loc_15E30:
00017E1A 3228 0034                  		move.w	$34(a0),d1
00017E1E 9240                       		sub.w	d0,d1
00017E20 3141 0008                  		move.w	d1,8(a0)
00017E24 4E75                       		rts	
00017E26                            ; ===========================================================================
00017E26                            
00017E26                            loc_15E3C:
00017E26 5328 0028                  		subq.b	#1,$28(a0)
00017E2A 4228 0038                  		clr.b	$38(a0)
00017E2E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017E32 67D4                       		beq.s	loc_15E1E		; if it's zero, don't remember object
00017E34 3440                       		movea.w	d0,a2	; load address into a2
00017E36 0892 0000                  		bclr	#0,(a2)
00017E3A 60CC                       		bra.s	loc_15E1E
00017E3C                            ; ===========================================================================
00017E3C                            
00017E3C                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00017E3C 4A28 0038                  		tst.b	$38(a0)
00017E40 6600                       		bne.s	loc_15E7C
00017E42 4A68 003A                  		tst.w	$3A(a0)
00017E46 6700                       		beq.s	loc_15E6A
00017E48 5368 003A                  		subq.w	#1,$3A(a0)
00017E4C 6000                       		bra.s	loc_15E8E
00017E4E                            ; ===========================================================================
00017E4E                            
00017E4E                            loc_15E6A:
00017E4E 5368 0036                  		subq.w	#1,$36(a0)
00017E52 6A00                       		bpl.s	loc_15E8E
00017E54 317C 003C 0036             		move.w	#$3C,$36(a0)
00017E5A 117C 0001 0038             		move.b	#1,$38(a0)
00017E60                            
00017E60                            loc_15E7C:
00017E60 5068 003A                  		addq.w	#8,$3A(a0)
00017E64 3028 003A                  		move.w	$3A(a0),d0
00017E68 B068 003C                  		cmp.w	$3C(a0),d0
00017E6C 6600                       		bne.s	loc_15E8E
00017E6E 4228 0038                  		clr.b	$38(a0)
00017E72                            
00017E72                            loc_15E8E:
00017E72 3028 003A                  		move.w	$3A(a0),d0
00017E76 0828 0000 0022             		btst	#0,$22(a0)
00017E7C 6700                       		beq.s	loc_15EA0
00017E7E 4440                       		neg.w	d0
00017E80 0640 0038                  		addi.w	#$38,d0
00017E84                            
00017E84                            loc_15EA0:
00017E84 3228 0030                  		move.w	$30(a0),d1
00017E88 D240                       		add.w	d0,d1
00017E8A 3141 000C                  		move.w	d1,$C(a0)
00017E8E 4E75                       		rts	
00017E90                            ; ===========================================================================
00017E90                            
00017E90                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00017E90 4A28 0038                  		tst.b	$38(a0)
00017E94 6600                       		bne.s	loc_15ED0
00017E96 4A68 003A                  		tst.w	$3A(a0)
00017E9A 6700                       		beq.s	loc_15EBE
00017E9C 5168 003A                  		subq.w	#8,$3A(a0)
00017EA0 6000                       		bra.s	loc_15EF0
00017EA2                            ; ===========================================================================
00017EA2                            
00017EA2                            loc_15EBE:
00017EA2 5368 0036                  		subq.w	#1,$36(a0)
00017EA6 6A00                       		bpl.s	loc_15EF0
00017EA8 317C 003C 0036             		move.w	#$3C,$36(a0)
00017EAE 117C 0001 0038             		move.b	#1,$38(a0)
00017EB4                            
00017EB4                            loc_15ED0:
00017EB4 3028 003A                  		move.w	$3A(a0),d0
00017EB8 B068 003C                  		cmp.w	$3C(a0),d0
00017EBC 6700                       		beq.s	loc_15EE0
00017EBE 5068 003A                  		addq.w	#8,$3A(a0)
00017EC2 6000                       		bra.s	loc_15EF0
00017EC4                            ; ===========================================================================
00017EC4                            
00017EC4                            loc_15EE0:
00017EC4 5368 0036                  		subq.w	#1,$36(a0)
00017EC8 6A00                       		bpl.s	loc_15EF0
00017ECA 317C 003C 0036             		move.w	#$3C,$36(a0)
00017ED0 4228 0038                  		clr.b	$38(a0)
00017ED4                            
00017ED4                            loc_15EF0:
00017ED4 3028 003A                  		move.w	$3A(a0),d0
00017ED8 0828 0000 0022             		btst	#0,$22(a0)
00017EDE 6700                       		beq.s	loc_15F02
00017EE0 4440                       		neg.w	d0
00017EE2 0640 0038                  		addi.w	#$38,d0
00017EE6                            
00017EE6                            loc_15F02:
00017EE6 3228 0030                  		move.w	$30(a0),d1
00017EEA D240                       		add.w	d0,d1
00017EEC 3141 000C                  		move.w	d1,$C(a0)
00017EF0 4E75                       		rts	
00017EF2                            ; ===========================================================================
00017EF2                            
00017EF2                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00017EF2 4A28 0038                  		tst.b	$38(a0)
00017EF6 6600                       		bne.s	loc_15F3E
00017EF8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017EFC 7000                       		moveq	#0,d0
00017EFE 1028 003E                  		move.b	$3E(a0),d0
00017F02 0832 0000 0000             		btst	#0,(a2,d0.w)
00017F08 6700                       		beq.s	locret_15F5C
00017F0A 117C 0001 0038             		move.b	#1,$38(a0)
00017F10 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017F14 6700                       		beq.s	loc_15F3E		; if it's zero, don't remember object
00017F16 3440                       		movea.w	d0,a2	; load address into a2
00017F18 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017F1C                            
00017F1C                            loc_15F3E:
00017F1C 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00017F24 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00017F2C 3168 0008 0034             		move.w	8(a0),$34(a0)
00017F32 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00017F38 6700                       		beq.s	loc_15F5E
00017F3A                            
00017F3A                            locret_15F5C:
00017F3A 4E75                       		rts	
00017F3C                            ; ===========================================================================
00017F3C                            
00017F3C                            loc_15F5E:
00017F3C 4228 0028                  		clr.b	$28(a0)
00017F40 4228 0038                  		clr.b	$38(a0)
00017F44 4E75                       		rts	
00017F46                            ; ===========================================================================
00017F46                            ; ---------------------------------------------------------------------------
00017F46                            ; Sprite mappings - stomper and	platforms (SBZ)
00017F46                            ; ---------------------------------------------------------------------------
00017F46                            Map_obj6B:
00017F46                            	include "_maps\obj6B.asm"
00017F46                            ; ---------------------------------------------------------------------------
00017F46                            ; Sprite mappings - stomper and	platforms (SBZ)
00017F46                            ; ---------------------------------------------------------------------------
00017F46 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00017F4A 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00017F4E 0000                       		dc.w byte_15FB0-Map_obj6B
00017F50 04                         byte_15F72:	dc.b 4
00017F51 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00017F56 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00017F5B F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00017F60 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00017F65 08                         byte_15F87:	dc.b 8
00017F66 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00017F6B E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00017F70 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00017F75 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00017F7A 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00017F7F 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00017F84 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00017F89 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00017F8E 0E                         byte_15FB0:	dc.b $E
00017F8F C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00017F94 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00017F99 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00017F9E C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00017FA3 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00017FA8 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00017FAD C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00017FB2 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00017FB7 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00017FBC E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00017FC1 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00017FC6 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00017FCB 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00017FD0 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00017FD6 00                         		even
00017FD6 00                         		even
00017FD6                            
00017FD6                            ; ===========================================================================
00017FD6                            ; ---------------------------------------------------------------------------
00017FD6                            ; Object 6C - vanishing	platforms (SBZ)
00017FD6                            ; ---------------------------------------------------------------------------
00017FD6                            
00017FD6                            Obj6C:					; XREF: Obj_Index
00017FD6 7000                       		moveq	#0,d0
00017FD8 1028 0024                  		move.b	$24(a0),d0
00017FDC 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00017FE0 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00017FE4                            ; ===========================================================================
00017FE4 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00017FE6 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00017FE8 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00017FEA 0000                       		dc.w loc_16068-Obj6C_Index
00017FEC                            ; ===========================================================================
00017FEC                            
00017FEC                            Obj6C_Main:				; XREF: Obj6C_Index
00017FEC 5C28 0024                  		addq.b	#6,$24(a0)
00017FF0 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00017FF8 317C 44C3 0002             		move.w	#$44C3,2(a0)
00017FFE 0028 0004 0001             		ori.b	#4,1(a0)
00018004 117C 0010 0019             		move.b	#$10,$19(a0)
0001800A 117C 0004 0018             		move.b	#4,$18(a0)
00018010 7000                       		moveq	#0,d0
00018012 1028 0028                  		move.b	$28(a0),d0	; get object type
00018016 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001801A 5240                       		addq.w	#1,d0		; add 1
0001801C EF48                       		lsl.w	#7,d0		; multiply by $80
0001801E 3200                       		move.w	d0,d1
00018020 5340                       		subq.w	#1,d0
00018022 3140 0030                  		move.w	d0,$30(a0)
00018026 3140 0032                  		move.w	d0,$32(a0)
0001802A 7000                       		moveq	#0,d0
0001802C 1028 0028                  		move.b	$28(a0),d0	; get object type
00018030 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00018034 0641 0080                  		addi.w	#$80,d1
00018038 C0C1                       		mulu.w	d1,d0
0001803A E088                       		lsr.l	#8,d0
0001803C 3140 0036                  		move.w	d0,$36(a0)
00018040 5341                       		subq.w	#1,d1
00018042 3141 0038                  		move.w	d1,$38(a0)
00018046                            
00018046                            loc_16068:				; XREF: Obj6C_Index
00018046 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001804A 9068 0036                  		sub.w	$36(a0),d0
0001804E C068 0038                  		and.w	$38(a0),d0
00018052 6600                       		bne.s	Obj6C_Animate
00018054 5928 0024                  		subq.b	#4,$24(a0)
00018058 6000                       		bra.s	Obj6C_Vanish
0001805A                            ; ===========================================================================
0001805A                            
0001805A                            Obj6C_Animate:
0001805A 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00018060 4EB9 0000 B9AA             		jsr	AnimateSprite
00018066 6000 8F2C                  		bra.w	MarkObjGone
0001806A                            ; ===========================================================================
0001806A                            
0001806A                            Obj6C_Vanish:				; XREF: Obj6C_Index
0001806A 5368 0030                  		subq.w	#1,$30(a0)
0001806E 6A00                       		bpl.s	loc_160AA
00018070 317C 007F 0030             		move.w	#127,$30(a0)
00018076 4A28 001C                  		tst.b	$1C(a0)
0001807A 6700                       		beq.s	loc_160A4
0001807C 3168 0032 0030             		move.w	$32(a0),$30(a0)
00018082                            
00018082                            loc_160A4:
00018082 0868 0000 001C             		bchg	#0,$1C(a0)
00018088                            
00018088                            loc_160AA:
00018088 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001808E 4EB9 0000 B9AA             		jsr	AnimateSprite
00018094 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
0001809A 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
0001809C 0C28 0002 0024             		cmpi.b	#2,$24(a0)
000180A2 6600                       		bne.s	loc_160D6
000180A4 7200                       		moveq	#0,d1
000180A6 1228 0019                  		move.b	$19(a0),d1
000180AA 4EB9 0000 854A             		jsr	(PlatformObject).l
000180B0 6000 8EE2                  		bra.w	MarkObjGone
000180B4                            ; ===========================================================================
000180B4                            
000180B4                            loc_160D6:
000180B4 7200                       		moveq	#0,d1
000180B6 1228 0019                  		move.b	$19(a0),d1
000180BA 4EB9 0000 86BE             		jsr	(ExitPlatform).l
000180C0 3428 0008                  		move.w	8(a0),d2
000180C4 4EB9 0000 8C34             		jsr	(MvSonicOnPtfm2).l
000180CA 6000 8EC8                  		bra.w	MarkObjGone
000180CE                            ; ===========================================================================
000180CE                            
000180CE                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
000180CE 0828 0003 0022             		btst	#3,$22(a0)
000180D4 6700                       		beq.s	Obj6C_Display
000180D6 43F8 D000                  		lea	($FFFFD000).w,a1
000180DA 08A9 0003 0022             		bclr	#3,$22(a1)
000180E0 08A8 0003 0022             		bclr	#3,$22(a0)
000180E6 117C 0002 0024             		move.b	#2,$24(a0)
000180EC 4228 0025                  		clr.b	$25(a0)
000180F0                            
000180F0                            Obj6C_Display:
000180F0 6000 8EA2                  		bra.w	MarkObjGone
000180F4                            ; ===========================================================================
000180F4                            Ani_obj6C:
000180F4                            	include "_anim\obj6C.asm"
000180F4                            ; ---------------------------------------------------------------------------
000180F4                            ; Animation script - vanishing platforms (SBZ)
000180F4                            ; ---------------------------------------------------------------------------
000180F4 0000                       		dc.w byte_1611A-Ani_obj6C
000180F6 0000                       		dc.w byte_16122-Ani_obj6C
000180F8 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00018100 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00018108                            		even
00018108                            		even
00018108                            
00018108                            ; ---------------------------------------------------------------------------
00018108                            ; Sprite mappings - vanishing platforms	(SBZ)
00018108                            ; ---------------------------------------------------------------------------
00018108                            Map_obj6C:
00018108                            	include "_maps\obj6C.asm"
00018108                            ; ---------------------------------------------------------------------------
00018108                            ; Sprite mappings - vanishing platforms	(SBZ)
00018108                            ; ---------------------------------------------------------------------------
00018108 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
0001810C 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00018110 01                         byte_16132:	dc.b 1
00018111 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00018116 01                         byte_16138:	dc.b 1
00018117 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
0001811C 01                         byte_1613E:	dc.b 1
0001811D F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00018122 00                         byte_16144:	dc.b 0
00018124 00                         		even
00018124 00                         		even
00018124                            
00018124                            ; ===========================================================================
00018124                            ; ---------------------------------------------------------------------------
00018124                            ; Object 6E - electrocution orbs (SBZ)
00018124                            ; ---------------------------------------------------------------------------
00018124                            
00018124                            Obj6E:					; XREF: Obj_Index
00018124 7000                       		moveq	#0,d0
00018126 1028 0024                  		move.b	$24(a0),d0
0001812A 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
0001812E 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00018132                            ; ===========================================================================
00018132 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00018134 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00018136                            ; ===========================================================================
00018136                            
00018136                            Obj6E_Main:				; XREF: Obj6E_Index
00018136 5428 0024                  		addq.b	#2,$24(a0)
0001813A 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00018142 317C 047E 0002             		move.w	#$47E,2(a0)
00018148 0028 0004 0001             		ori.b	#4,1(a0)
0001814E 117C 0028 0019             		move.b	#$28,$19(a0)
00018154 7000                       		moveq	#0,d0
00018156 1028 0028                  		move.b	$28(a0),d0	; read object type
0001815A E948                       		lsl.w	#4,d0		; multiply by $10
0001815C 5340                       		subq.w	#1,d0
0001815E 3140 0034                  		move.w	d0,$34(a0)
00018162                            
00018162                            Obj6E_Shock:				; XREF: Obj6E_Index
00018162 3038 FE04                  		move.w	($FFFFFE04).w,d0
00018166 C068 0034                  		and.w	$34(a0),d0
0001816A 6600                       		bne.s	Obj6E_Animate
0001816C 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00018172 4A28 0001                  		tst.b	1(a0)
00018176 6A00                       		bpl.s	Obj6E_Animate
00018178 303C 00B1                  		move.w	#$B1,d0
0001817C 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play electricity sound
00018182                            
00018182                            Obj6E_Animate:
00018182 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00018188 4EB9 0000 B9AA             		jsr	AnimateSprite
0001818E 117C 0000 0020             		move.b	#0,$20(a0)
00018194 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
0001819A 6600                       		bne.s	Obj6E_Display	; if not, branch
0001819C 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
000181A2                            
000181A2                            Obj6E_Display:
000181A2 6000 8DF0                  		bra.w	MarkObjGone
000181A6                            ; ===========================================================================
000181A6                            Ani_obj6E:
000181A6                            	include "_anim\obj6E.asm"
000181A6                            ; ---------------------------------------------------------------------------
000181A6                            ; Animation script - electrocution orbs (SBZ)
000181A6                            ; ---------------------------------------------------------------------------
000181A6 0000                       		dc.w byte_161CC-Ani_obj6E
000181A8 0000                       		dc.w byte_161D0-Ani_obj6E
000181AA 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
000181AE 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
000181BE                            		even
000181BE                            		even
000181BE                            
000181BE                            ; ---------------------------------------------------------------------------
000181BE                            ; Sprite mappings - electrocution orbs (SBZ)
000181BE                            ; ---------------------------------------------------------------------------
000181BE                            Map_obj6E:
000181BE                            	include "_maps\obj6E.asm"
000181BE                            ; ---------------------------------------------------------------------------
000181BE                            ; Sprite mappings - electrocution orbs (SBZ)
000181BE                            ; ---------------------------------------------------------------------------
000181BE 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
000181C2 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
000181C6 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
000181CA 02                         byte_161EC:	dc.b 2
000181CB F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000181D0 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000181D5 03                         byte_161F7:	dc.b 3
000181D6 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000181DB F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000181E0 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000181E5 05                         byte_16207:	dc.b 5
000181E6 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000181EB F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000181F0 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000181F5 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
000181FA F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
000181FF 04                         byte_16221:	dc.b 4
00018200 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018205 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001820A F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
0001820F F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00018214 06                         byte_16236:	dc.b 6
00018215 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001821A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001821F F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
00018224 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00018229 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
0001822E F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00018233 04                         byte_16255:	dc.b 4
00018234 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018239 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001823E F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00018243 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00018248                            		even
00018248                            		even
00018248                            
00018248                            ; ===========================================================================
00018248                            ; ---------------------------------------------------------------------------
00018248                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00018248                            ; ---------------------------------------------------------------------------
00018248                            
00018248                            Obj6F:					; XREF: Obj_Index
00018248 7000                       		moveq	#0,d0
0001824A 1028 0024                  		move.b	$24(a0),d0
0001824E 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00018252 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00018256 3028 0030                  		move.w	$30(a0),d0
0001825A 0240 FF80                  		andi.w	#$FF80,d0
0001825E 3238 F700                  		move.w	($FFFFF700).w,d1
00018262 0441 0080                  		subi.w	#$80,d1
00018266 0241 FF80                  		andi.w	#$FF80,d1
0001826A 9041                       		sub.w	d1,d0
0001826C 0C40 0280                  		cmpi.w	#$280,d0
00018270 6300                       		bls.s	Obj6F_Display
00018272                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
00018272                            	;	beq.s	loc_1629A		; if it's zero, don't remember object
00018272                            	;	movea.w	d0,a2	; load address into a2
00018272                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00018272 6000                       		bra.s	loc_1629A	; and delete object
00018274                            
00018274                            Obj6F_Display:
00018274 4EF9 0000 E94A             		jmp	DisplaySprite
0001827A                            ; ===========================================================================
0001827A                            
0001827A                            loc_1629A:
0001827A 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00018280 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00018282 0C40 FF80                  		cmpi.w	#-$80,d0
00018286 64EC                       		bcc.s	Obj6F_Display
00018288                            
00018288                            Obj6F_Act1or2:
00018288 1028 002F                  		move.b	$2F(a0),d0
0001828C 6A00                       		bpl.s	Obj6F_Delete
0001828E 0240 007F                  		andi.w	#$7F,d0
00018292 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00018296 08B2 0000 0000             		bclr	#0,(a2,d0.w)
0001829C                            
0001829C                            Obj6F_Delete:
0001829C 4EF9 0000 E99A             		jmp	DeleteObject
000182A2                            ; ===========================================================================
000182A2 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
000182A4 0000                       		dc.w loc_163D8-Obj6F_Index
000182A6                            ; ===========================================================================
000182A6                            
000182A6                            Obj6F_Main:				; XREF: Obj6F_Index
000182A6 1028 0028                  		move.b	$28(a0),d0
000182AA 6B00 0000                  		bmi.w	loc_16380
000182AE 5428 0024                  		addq.b	#2,$24(a0)
000182B2 217C 0001 7940 0004        		move.l	#Map_obj69a,4(a0)
000182BA 317C 04DF 0002             		move.w	#$4DF,2(a0)
000182C0 117C 0010 0019             		move.b	#$10,$19(a0)
000182C6 0028 0004 0001             		ori.b	#4,1(a0)
000182CC 117C 0004 0018             		move.b	#4,$18(a0)
000182D2 7000                       		moveq	#0,d0
000182D4 1028 0028                  		move.b	$28(a0),d0
000182D8 3200                       		move.w	d0,d1
000182DA E648                       		lsr.w	#3,d0
000182DC 0240 001E                  		andi.w	#$1E,d0
000182E0 45FA 0000                  		lea	off_164A6(pc),a2
000182E4 D4F2 0000                  		adda.w	(a2,d0.w),a2
000182E8 315A 0038                  		move.w	(a2)+,$38(a0)
000182EC 315A 0030                  		move.w	(a2)+,$30(a0)
000182F0 214A 003C                  		move.l	a2,$3C(a0)
000182F4 0241 000F                  		andi.w	#$F,d1
000182F8 E549                       		lsl.w	#2,d1
000182FA 1141 0038                  		move.b	d1,$38(a0)
000182FE 117C 0004 003A             		move.b	#4,$3A(a0)
00018304 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00018308 6700                       		beq.s	loc_16356
0001830A 117C 0001 003B             		move.b	#1,$3B(a0)
00018310 4428 003A                  		neg.b	$3A(a0)
00018314 7200                       		moveq	#0,d1
00018316 1228 0038                  		move.b	$38(a0),d1
0001831A D228 003A                  		add.b	$3A(a0),d1
0001831E B228 0039                  		cmp.b	$39(a0),d1
00018322 6500                       		bcs.s	loc_16352
00018324 1001                       		move.b	d1,d0
00018326 7200                       		moveq	#0,d1
00018328 4A00                       		tst.b	d0
0001832A 6A00                       		bpl.s	loc_16352
0001832C 1228 0039                  		move.b	$39(a0),d1
00018330 5901                       		subq.b	#4,d1
00018332                            
00018332                            loc_16352:
00018332 1141 0038                  		move.b	d1,$38(a0)
00018336                            
00018336                            loc_16356:
00018336 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001833C 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00018342 4A41                       		tst.w	d1
00018344 6600                       		bne.s	loc_1636C
00018346 117C 0001 001C             		move.b	#1,$1C(a0)
0001834C                            
0001834C                            loc_1636C:
0001834C 0C41 0008                  		cmpi.w	#8,d1
00018350 6600                       		bne.s	loc_16378
00018352 117C 0000 001C             		move.b	#0,$1C(a0)
00018358                            
00018358                            loc_16378:
00018358 6100 BB7C                  		bsr.w	Obj63_ChangeDir
0001835C 6000 0000                  		bra.w	loc_163D8
00018360                            ; ===========================================================================
00018360                            
00018360                            loc_16380:				; XREF: Obj6F_Main
00018360 1140 002F                  		move.b	d0,$2F(a0)
00018364 0240 007F                  		andi.w	#$7F,d0
00018368 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001836C 08F2 0000 0000             		bset	#0,(a2,d0.w)
00018372 6700                       		beq.s	loc_1639A
00018374 4EF9 0000 E99A             		jmp	DeleteObject
0001837A                            ; ===========================================================================
0001837A                            
0001837A                            loc_1639A:
0001837A D040                       		add.w	d0,d0
0001837C 0240 001E                  		andi.w	#$1E,d0
00018380 0640 0080                  		addi.w	#$80,d0
00018384 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
0001838A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001838E 321A                       		move.w	(a2)+,d1
00018390 2248                       		movea.l	a0,a1
00018392 6000                       		bra.s	Obj6F_LoadPform
00018394                            ; ===========================================================================
00018394                            
00018394                            Obj6F_Loop:
00018394 4EB9 0000 F0A0             		jsr	SingleObjLoad
0001839A 6600                       		bne.s	loc_163D0
0001839C                            
0001839C                            Obj6F_LoadPform:			; XREF: loc_1639A
0001839C 12BC 006F                  		move.b	#$6F,0(a1)
000183A0 335A 0008                  		move.w	(a2)+,8(a1)
000183A4 335A 000C                  		move.w	(a2)+,$C(a1)
000183A8 301A                       		move.w	(a2)+,d0
000183AA 1340 0028                  		move.b	d0,$28(a1)
000183AE                            
000183AE                            loc_163D0:
000183AE 51C9 FFE4                  		dbf	d1,Obj6F_Loop
000183B2                            
000183B2 588F                       		addq.l	#4,sp
000183B4 4E75                       		rts	
000183B6                            ; ===========================================================================
000183B6                            
000183B6                            loc_163D8:				; XREF: Obj6F_Index
000183B6 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
000183BC 4EB9 0000 B9AA             		jsr	AnimateSprite
000183C2 4A28 001A                  		tst.b	$1A(a0)
000183C6 6600                       		bne.s	loc_16404
000183C8 3F28 0008                  		move.w	8(a0),-(sp)
000183CC 6100 0000                  		bsr.w	loc_16424
000183D0 323C 001B                  		move.w	#$1B,d1
000183D4 343C 0007                  		move.w	#7,d2
000183D8 3602                       		move.w	d2,d3
000183DA 5243                       		addq.w	#1,d3
000183DC 381F                       		move.w	(sp)+,d4
000183DE 6000 8ED8                  		bra.w	SolidObject
000183E2                            ; ===========================================================================
000183E2                            
000183E2                            loc_16404:
000183E2 0828 0003 0022             		btst	#3,$22(a0)
000183E8 6700                       		beq.s	loc_16420
000183EA 43F8 D000                  		lea	($FFFFD000).w,a1
000183EE 08A9 0003 0022             		bclr	#3,$22(a1)
000183F4 08A8 0003 0022             		bclr	#3,$22(a0)
000183FA 4228 0025                  		clr.b	$25(a0)
000183FE                            
000183FE                            loc_16420:
000183FE 6000 0002                  		bra.w	*+4
00018402                            
00018402                            loc_16424:
00018402 3028 0008                  		move.w	8(a0),d0
00018406 B068 0034                  		cmp.w	$34(a0),d0
0001840A 6600                       		bne.s	loc_16484
0001840C 3028 000C                  		move.w	$C(a0),d0
00018410 B068 0036                  		cmp.w	$36(a0),d0
00018414 6600                       		bne.s	loc_16484
00018416 7200                       		moveq	#0,d1
00018418 1228 0038                  		move.b	$38(a0),d1
0001841C D228 003A                  		add.b	$3A(a0),d1
00018420 B228 0039                  		cmp.b	$39(a0),d1
00018424 6500                       		bcs.s	loc_16456
00018426 1001                       		move.b	d1,d0
00018428 7200                       		moveq	#0,d1
0001842A 4A00                       		tst.b	d0
0001842C 6A00                       		bpl.s	loc_16456
0001842E 1228 0039                  		move.b	$39(a0),d1
00018432 5901                       		subq.b	#4,d1
00018434                            
00018434                            loc_16456:
00018434 1141 0038                  		move.b	d1,$38(a0)
00018438 2268 003C                  		movea.l	$3C(a0),a1
0001843C 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00018442 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00018448 4A41                       		tst.w	d1
0001844A 6600                       		bne.s	loc_16474
0001844C 117C 0001 001C             		move.b	#1,$1C(a0)
00018452                            
00018452                            loc_16474:
00018452 0C41 0008                  		cmpi.w	#8,d1
00018456 6600                       		bne.s	loc_16480
00018458 117C 0000 001C             		move.b	#0,$1C(a0)
0001845E                            
0001845E                            loc_16480:
0001845E 6100 BA76                  		bsr.w	Obj63_ChangeDir
00018462                            
00018462                            loc_16484:
00018462 4EF9 0000 E930             		jmp	SpeedToPos
00018468                            ; ===========================================================================
00018468                            Ani_obj6F:
00018468                            	include "_anim\obj6F.asm"
00018468                            ; ---------------------------------------------------------------------------
00018468                            ; Animation script - platform on conveyor belt (SBZ)
00018468                            ; ---------------------------------------------------------------------------
00018468 0000                       		dc.w byte_1648E-Ani_obj6F
0001846A 0000                       		dc.w byte_164A2-Ani_obj6F
0001846C 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00018479 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00018480 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00018484 00                         		even
00018484 00                         		even
00018484                            
00018484 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
0001848A 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00018490 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
000184A4 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
000184B8 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
000184CC 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
000184E0 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
000184F4 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00018508                            ; ===========================================================================
00018508                            ; ---------------------------------------------------------------------------
00018508                            ; Object 70 - large girder block (SBZ)
00018508                            ; ---------------------------------------------------------------------------
00018508                            
00018508                            Obj70:					; XREF: Obj_Index
00018508 7000                       		moveq	#0,d0
0001850A 1028 0024                  		move.b	$24(a0),d0
0001850E 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00018512 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00018516                            ; ===========================================================================
00018516 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00018518 0000                       		dc.w Obj70_Action-Obj70_Index
0001851A                            ; ===========================================================================
0001851A                            
0001851A                            Obj70_Main:				; XREF: Obj70_Index
0001851A 5428 0024                  		addq.b	#2,$24(a0)
0001851E 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00018526 317C 42F0 0002             		move.w	#$42F0,2(a0)
0001852C 0028 0004 0001             		ori.b	#4,1(a0)
00018532 117C 0004 0018             		move.b	#4,$18(a0)
00018538 117C 0060 0019             		move.b	#$60,$19(a0)
0001853E 117C 0018 0016             		move.b	#$18,$16(a0)
00018544 3168 0008 0032             		move.w	8(a0),$32(a0)
0001854A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00018550 6100 0000                  		bsr.w	Obj70_Move2
00018554                            
00018554                            Obj70_Action:				; XREF: Obj70_Index
00018554 3F28 0008                  		move.w	8(a0),-(sp)
00018558 4A68 003A                  		tst.w	$3A(a0)
0001855C 6700                       		beq.s	Obj70_Move
0001855E 5368 003A                  		subq.w	#1,$3A(a0)
00018562 6600                       		bne.s	Obj70_Solid
00018564                            
00018564                            Obj70_Move:
00018564 4EB9 0000 E930             		jsr	SpeedToPos
0001856A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
0001856E 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00018570 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00018574                            
00018574                            Obj70_Solid:
00018574 381F                       		move.w	(sp)+,d4
00018576 4A28 0001                  		tst.b	1(a0)
0001857A 6A00                       		bpl.s	Obj70_ChkDel
0001857C 7200                       		moveq	#0,d1
0001857E 1228 0019                  		move.b	$19(a0),d1
00018582 0641 000B                  		addi.w	#$B,d1
00018586 7400                       		moveq	#0,d2
00018588 1428 0016                  		move.b	$16(a0),d2
0001858C 3602                       		move.w	d2,d3
0001858E 5243                       		addq.w	#1,d3
00018590 6100 8D26                  		bsr.w	SolidObject
00018594                            
00018594                            Obj70_ChkDel:
00018594 3028 0032                  		move.w	$32(a0),d0
00018598 0240 FF80                  		andi.w	#$FF80,d0
0001859C 3238 F700                  		move.w	($FFFFF700).w,d1
000185A0 0441 0080                  		subi.w	#$80,d1
000185A4 0241 FF80                  		andi.w	#$FF80,d1
000185A8 9041                       		sub.w	d1,d0
000185AA 0C40 0280                  		cmpi.w	#$280,d0
000185AE 6300                       		bls.s	Obj70_NoDel
000185B0                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
000185B0                            	;	beq.s	Obj70_Delete		; if it's zero, don't remember object
000185B0                            	;	movea.w	d0,a2	; load address into a2
000185B0                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000185B0 6000                       		bra.s	Obj70_Delete	; and delete object
000185B2                            
000185B2                            Obj70_NoDel:
000185B2 4EF9 0000 E94A             		jmp	DisplaySprite
000185B8                            ; ===========================================================================
000185B8                            
000185B8                            Obj70_Delete:
000185B8 4EF9 0000 E99A             		jmp	DeleteObject
000185BE                            ; ===========================================================================
000185BE                            
000185BE                            Obj70_Move2:				; XREF: Obj70_Main
000185BE 1028 0038                  		move.b	$38(a0),d0
000185C2 0240 0018                  		andi.w	#$18,d0
000185C6 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
000185CC 43F1 0000                  		lea	(a1,d0.w),a1
000185D0 3159 0010                  		move.w	(a1)+,$10(a0)
000185D4 3159 0012                  		move.w	(a1)+,$12(a0)
000185D8 3159 0034                  		move.w	(a1)+,$34(a0)
000185DC 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
000185E0 317C 0007 003A             		move.w	#7,$3A(a0)
000185E6 4E75                       		rts	
000185E8                            ; ===========================================================================
000185E8 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
000185F0 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
000185F8 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00018600 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00018608                            ; ---------------------------------------------------------------------------
00018608                            ; Sprite mappings - large girder block (SBZ)
00018608                            ; ---------------------------------------------------------------------------
00018608                            Map_obj70:
00018608                            	include "_maps\obj70.asm"
00018608                            ; ---------------------------------------------------------------------------
00018608                            ; Sprite mappings - large girder block (SBZ)
00018608                            ; ---------------------------------------------------------------------------
00018608 0000                       		dc.w byte_1662A-Map_obj70
0001860A 0C                         byte_1662A:	dc.b $C
0001860B E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00018610 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00018615 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
0001861A 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001861F E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00018624 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00018629 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001862E 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00018633 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00018638 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
0001863D E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00018642 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00018648 00                         		even
00018648 00                         		even
00018648                            
00018648                            ; ===========================================================================
00018648                            ; ---------------------------------------------------------------------------
00018648                            ; Object 72 - teleporter (SBZ)
00018648                            ; ---------------------------------------------------------------------------
00018648                            
00018648                            Obj72:					; XREF: Obj_Index
00018648 7000                       		moveq	#0,d0
0001864A 1028 0024                  		move.b	$24(a0),d0
0001864E 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00018652 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00018656 3028 0008                  		move.w	8(a0),d0
0001865A 0240 FF80                  		andi.w	#$FF80,d0
0001865E 3238 F700                  		move.w	($FFFFF700).w,d1
00018662 0441 0080                  		subi.w	#$80,d1
00018666 0241 FF80                  		andi.w	#$FF80,d1
0001866A 9041                       		sub.w	d1,d0
0001866C 0C40 0280                  		cmpi.w	#$280,d0
00018670 6300                       		bls.s	Obj72_NoDel
00018672 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018676 6700                       		beq.s	Obj72_Delete	; if it's zero, don't remember object
00018678 3440                       		movea.w	d0,a2	; load address into a2
0001867A 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001867E 6000                       		bra.s	Obj72_Delete	; and delete object
00018680                            
00018680                            Obj72_NoDel:
00018680 4E75                       		rts	
00018682                            ; ===========================================================================
00018682                            
00018682                            Obj72_Delete:
00018682 4EF9 0000 E99A             		jmp	DeleteObject
00018688                            ; ===========================================================================
00018688 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
0001868A 0000                       		dc.w loc_166C8-Obj72_Index
0001868C 0000                       		dc.w loc_1675E-Obj72_Index
0001868E 0000                       		dc.w loc_16798-Obj72_Index
00018690                            ; ===========================================================================
00018690                            
00018690                            Obj72_Main:				; XREF: Obj72_Index
00018690 5428 0024                  		addq.b	#2,$24(a0)
00018694 1028 0028                  		move.b	$28(a0),d0
00018698 D040                       		add.w	d0,d0
0001869A 0240 001E                  		andi.w	#$1E,d0
0001869E 45FA 0000                  		lea	Obj72_Data(pc),a2
000186A2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000186A6 315A 003A                  		move.w	(a2)+,$3A(a0)
000186AA 214A 003C                  		move.l	a2,$3C(a0)
000186AE 315A 0036                  		move.w	(a2)+,$36(a0)
000186B2 315A 0038                  		move.w	(a2)+,$38(a0)
000186B6                            
000186B6                            loc_166C8:				; XREF: Obj72_Index
000186B6 43F8 D000                  		lea	($FFFFD000).w,a1
000186BA 3029 0008                  		move.w	8(a1),d0
000186BE 9068 0008                  		sub.w	8(a0),d0
000186C2 0828 0000 0022             		btst	#0,$22(a0)
000186C8 6700                       		beq.s	loc_166E0
000186CA 0640 000F                  		addi.w	#$F,d0
000186CE                            
000186CE                            loc_166E0:
000186CE 0C40 0010                  		cmpi.w	#$10,d0
000186D2 6400                       		bcc.s	locret_1675C
000186D4 3229 000C                  		move.w	$C(a1),d1
000186D8 9268 000C                  		sub.w	$C(a0),d1
000186DC 0641 0020                  		addi.w	#$20,d1
000186E0 0C41 0040                  		cmpi.w	#$40,d1
000186E4 6400                       		bcc.s	locret_1675C
000186E6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000186EA 6600                       		bne.s	locret_1675C
000186EC 0C28 0007 0028             		cmpi.b	#7,$28(a0)
000186F2 6600                       		bne.s	loc_1670E
000186F4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
000186FA 6500                       		bcs.s	locret_1675C
000186FC                            
000186FC                            loc_1670E:
000186FC 5428 0024                  		addq.b	#2,$24(a0)
00018700 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00018706 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
0001870C 337C 0800 0020             		move.w	#$800,$20(a1)
00018712 337C 0000 0010             		move.w	#0,$10(a1)
00018718 337C 0000 0012             		move.w	#0,$12(a1)
0001871E 08A8 0005 0022             		bclr	#5,$22(a0)
00018724 08A9 0005 0022             		bclr	#5,$22(a1)
0001872A 08E9 0001 0022             		bset	#1,$22(a1)
00018730 3368 0008 0008             		move.w	8(a0),8(a1)
00018736 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001873C 4228 0032                  		clr.b	$32(a0)
00018740 303C 00BE                  		move.w	#$BE,d0
00018744 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
0001874A                            
0001874A                            locret_1675C:
0001874A 4E75                       		rts	
0001874C                            ; ===========================================================================
0001874C                            
0001874C                            loc_1675E:				; XREF: Obj72_Index
0001874C 43F8 D000                  		lea	($FFFFD000).w,a1
00018750 1028 0032                  		move.b	$32(a0),d0
00018754 5428 0032                  		addq.b	#2,$32(a0)
00018758 4EB9 0000 29CC             		jsr	(CalcSine).l
0001875E EA40                       		asr.w	#5,d0
00018760 3428 000C                  		move.w	$C(a0),d2
00018764 9440                       		sub.w	d0,d2
00018766 3342 000C                  		move.w	d2,$C(a1)
0001876A 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00018770 6600                       		bne.s	locret_16796
00018772 6100 0000                  		bsr.w	sub_1681C
00018776 5428 0024                  		addq.b	#2,$24(a0)
0001877A 303C 00BC                  		move.w	#$BC,d0
0001877E 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play teleport sound
00018784                            
00018784                            locret_16796:
00018784 4E75                       		rts	
00018786                            ; ===========================================================================
00018786                            
00018786                            loc_16798:				; XREF: Obj72_Index
00018786 588F                       		addq.l	#4,sp
00018788 43F8 D000                  		lea	($FFFFD000).w,a1
0001878C 5328 002E                  		subq.b	#1,$2E(a0)
00018790 6A00                       		bpl.s	loc_167DA
00018792 3368 0036 0008             		move.w	$36(a0),8(a1)
00018798 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001879E 7200                       		moveq	#0,d1
000187A0 1228 003A                  		move.b	$3A(a0),d1
000187A4 5801                       		addq.b	#4,d1
000187A6 B228 003B                  		cmp.b	$3B(a0),d1
000187AA 6500                       		bcs.s	loc_167C2
000187AC 7200                       		moveq	#0,d1
000187AE 6000                       		bra.s	loc_16800
000187B0                            ; ===========================================================================
000187B0                            
000187B0                            loc_167C2:
000187B0 1141 003A                  		move.b	d1,$3A(a0)
000187B4 2468 003C                  		movea.l	$3C(a0),a2
000187B8 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000187BE 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000187C4 6000 0000                  		bra.w	sub_1681C
000187C8                            ; ===========================================================================
000187C8                            
000187C8                            loc_167DA:
000187C8 2429 0008                  		move.l	8(a1),d2
000187CC 2629 000C                  		move.l	$C(a1),d3
000187D0 3029 0010                  		move.w	$10(a1),d0
000187D4 48C0                       		ext.l	d0
000187D6 E180                       		asl.l	#8,d0
000187D8 D480                       		add.l	d0,d2
000187DA 3029 0012                  		move.w	$12(a1),d0
000187DE 48C0                       		ext.l	d0
000187E0 E180                       		asl.l	#8,d0
000187E2 D680                       		add.l	d0,d3
000187E4 2342 0008                  		move.l	d2,8(a1)
000187E8 2343 000C                  		move.l	d3,$C(a1)
000187EC 4E75                       		rts	
000187EE                            ; ===========================================================================
000187EE                            
000187EE                            loc_16800:
000187EE 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
000187F4 4228 0024                  		clr.b	$24(a0)
000187F8 4238 F7C8                  		clr.b	($FFFFF7C8).w
000187FC 337C 0000 0010             		move.w	#0,$10(a1)
00018802 337C 0200 0012             		move.w	#$200,$12(a1)
00018808 4E75                       		rts	
0001880A                            
0001880A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001880A                            
0001880A                            
0001880A                            sub_1681C:
0001880A 7000                       		moveq	#0,d0
0001880C 343C 1000                  		move.w	#$1000,d2
00018810 3028 0036                  		move.w	$36(a0),d0
00018814 9069 0008                  		sub.w	8(a1),d0
00018818 6C00                       		bge.s	loc_16830
0001881A 4440                       		neg.w	d0
0001881C 4442                       		neg.w	d2
0001881E                            
0001881E                            loc_16830:
0001881E 7200                       		moveq	#0,d1
00018820 363C 1000                  		move.w	#$1000,d3
00018824 3228 0038                  		move.w	$38(a0),d1
00018828 9269 000C                  		sub.w	$C(a1),d1
0001882C 6C00                       		bge.s	loc_16844
0001882E 4441                       		neg.w	d1
00018830 4443                       		neg.w	d3
00018832                            
00018832                            loc_16844:
00018832 B240                       		cmp.w	d0,d1
00018834 6500                       		bcs.s	loc_1687A
00018836 7200                       		moveq	#0,d1
00018838 3228 0038                  		move.w	$38(a0),d1
0001883C 9269 000C                  		sub.w	$C(a1),d1
00018840 4841                       		swap	d1
00018842 83C3                       		divs.w	d3,d1
00018844 7000                       		moveq	#0,d0
00018846 3028 0036                  		move.w	$36(a0),d0
0001884A 9069 0008                  		sub.w	8(a1),d0
0001884E 6700                       		beq.s	loc_16866
00018850 4840                       		swap	d0
00018852 81C1                       		divs.w	d1,d0
00018854                            
00018854                            loc_16866:
00018854 3340 0010                  		move.w	d0,$10(a1)
00018858 3343 0012                  		move.w	d3,$12(a1)
0001885C 4A41                       		tst.w	d1
0001885E 6A00                       		bpl.s	loc_16874
00018860 4441                       		neg.w	d1
00018862                            
00018862                            loc_16874:
00018862 3141 002E                  		move.w	d1,$2E(a0)
00018866 4E75                       		rts	
00018868                            ; ===========================================================================
00018868                            
00018868                            loc_1687A:
00018868 7000                       		moveq	#0,d0
0001886A 3028 0036                  		move.w	$36(a0),d0
0001886E 9069 0008                  		sub.w	8(a1),d0
00018872 4840                       		swap	d0
00018874 81C2                       		divs.w	d2,d0
00018876 7200                       		moveq	#0,d1
00018878 3228 0038                  		move.w	$38(a0),d1
0001887C 9269 000C                  		sub.w	$C(a1),d1
00018880 6700                       		beq.s	loc_16898
00018882 4841                       		swap	d1
00018884 83C0                       		divs.w	d0,d1
00018886                            
00018886                            loc_16898:
00018886 3341 0012                  		move.w	d1,$12(a1)
0001888A 3342 0010                  		move.w	d2,$10(a1)
0001888E 4A40                       		tst.w	d0
00018890 6A00                       		bpl.s	loc_168A6
00018892 4440                       		neg.w	d0
00018894                            
00018894                            loc_168A6:
00018894 3140 002E                  		move.w	d0,$2E(a0)
00018898 4E75                       		rts	
0001889A                            ; End of function sub_1681C
0001889A                            
0001889A                            ; ===========================================================================
0001889A 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
000188A0 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
000188A6 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
000188AA 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
000188B0 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
000188B6 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
000188BC 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000188C2 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000188C8 0884 0298 0894             		dc.w $884, $298, $894
000188CE 0270 0894 0190             		dc.w $270, $894, $190
000188D4 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
000188DA 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
000188E0 1184 0498 1158             		dc.w $1184, $498, $1158
000188E6 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000188EC 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
000188F2 04E8 0F94 0590             		dc.w $4E8, $F94, $590
000188F8 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
000188FE 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00018904 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001890A FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00018910 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00018916 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001891C 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00018922                            ; ===========================================================================
00018922                            ; ---------------------------------------------------------------------------
00018922                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00018922                            ; ---------------------------------------------------------------------------
00018922                            
00018922                            Obj78:					; XREF: Obj_Index
00018922 7000                       		moveq	#0,d0
00018924 1028 0024                  		move.b	$24(a0),d0
00018928 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
0001892C 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00018930                            ; ===========================================================================
00018930 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00018932 0000                       		dc.w Obj78_Action-Obj78_Index
00018934 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00018936 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00018938 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001893A 0000                       		dc.w Obj78_Delete-Obj78_Index
0001893C 0000                       		dc.w loc_16CC0-Obj78_Index
0001893E                            ; ===========================================================================
0001893E                            
0001893E                            locret_16950:
0001893E 4E75                       		rts	
00018940                            ; ===========================================================================
00018940                            
00018940                            Obj78_Main:				; XREF: Obj78_Index
00018940 117C 0007 0016             		move.b	#7,$16(a0)
00018946 117C 0008 0017             		move.b	#8,$17(a0)
0001894C 4EB9 0000 E910             		jsr	ObjectFall
00018952 4EBA E4BC                  		jsr	ObjHitFloor
00018956 4A41                       		tst.w	d1
00018958 6AE4                       		bpl.s	locret_16950
0001895A D368 000C                  		add.w	d1,$C(a0)
0001895E 4268 0012                  		clr.w	$12(a0)
00018962 5428 0024                  		addq.b	#2,$24(a0)
00018966 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
0001896E 317C 22B0 0002             		move.w	#$22B0,2(a0)
00018974 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
0001897A 6700                       		beq.s	loc_16996
0001897C 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00018982                            
00018982                            loc_16996:
00018982 0228 0003 0001             		andi.b	#3,1(a0)
00018988 0028 0004 0001             		ori.b	#4,1(a0)
0001898E 1168 0001 0022             		move.b	1(a0),$22(a0)
00018994 117C 0004 0018             		move.b	#4,$18(a0)
0001899A 117C 0008 0019             		move.b	#8,$19(a0)
000189A0 117C 000B 0020             		move.b	#$B,$20(a0)
000189A6 3428 0008                  		move.w	8(a0),d2
000189AA 7A0C                       		moveq	#$C,d5
000189AC 0828 0000 0022             		btst	#0,$22(a0)
000189B2 6700                       		beq.s	loc_169CA
000189B4 4445                       		neg.w	d5
000189B6                            
000189B6                            loc_169CA:
000189B6 1C3C 0004                  		move.b	#4,d6
000189BA 7600                       		moveq	#0,d3
000189BC 7804                       		moveq	#4,d4
000189BE 2448                       		movea.l	a0,a2
000189C0 7202                       		moveq	#2,d1
000189C2                            
000189C2                            Obj78_LoadBody:
000189C2 4EB9 0000 F0B6             		jsr	SingleObjLoad2
000189C8 6600                       		bne.s	Obj78_QuitLoad
000189CA 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
000189CE 1346 0024                  		move.b	d6,$24(a1)
000189D2 5406                       		addq.b	#2,d6
000189D4 2368 0004 0004             		move.l	4(a0),4(a1)
000189DA 3368 0002 0002             		move.w	2(a0),2(a1)
000189E0 137C 0005 0018             		move.b	#5,$18(a1)
000189E6 137C 0008 0019             		move.b	#8,$19(a1)
000189EC 137C 00CB 0020             		move.b	#$CB,$20(a1)
000189F2 D445                       		add.w	d5,d2
000189F4 3342 0008                  		move.w	d2,8(a1)
000189F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000189FE 1368 0022 0022             		move.b	$22(a0),$22(a1)
00018A04 1368 0022 0001             		move.b	$22(a0),1(a1)
00018A0A 137C 0008 001A             		move.b	#8,$1A(a1)
00018A10 234A 003C                  		move.l	a2,$3C(a1)
00018A14 1344 003C                  		move.b	d4,$3C(a1)
00018A18 5804                       		addq.b	#4,d4
00018A1A 2449                       		movea.l	a1,a2
00018A1C                            
00018A1C                            Obj78_QuitLoad:
00018A1C 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00018A20                            
00018A20 117C 0007 002A             		move.b	#7,$2A(a0)
00018A26 4228 003C                  		clr.b	$3C(a0)
00018A2A                            
00018A2A                            Obj78_Action:				; XREF: Obj78_Index
00018A2A 4A28 0022                  		tst.b	$22(a0)
00018A2E 6B00 0000                  		bmi.w	loc_16C96
00018A32 7000                       		moveq	#0,d0
00018A34 1028 0025                  		move.b	$25(a0),d0
00018A38 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00018A3C 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00018A40 1228 002B                  		move.b	$2B(a0),d1
00018A44 6A00                       		bpl.s	Obj78_Display
00018A46 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018A4C 1028 0026                  		move.b	$26(a0),d0
00018A50 0240 007F                  		andi.w	#$7F,d0
00018A54 5828 0026                  		addq.b	#4,$26(a0)
00018A58 1031 0000                  		move.b	(a1,d0.w),d0
00018A5C 6A00                       		bpl.s	Obj78_AniHead
00018A5E 08A8 0007 002B             		bclr	#7,$2B(a0)
00018A64 6000                       		bra.s	Obj78_Display
00018A66                            ; ===========================================================================
00018A66                            
00018A66                            Obj78_AniHead:
00018A66 0201 0010                  		andi.b	#$10,d1
00018A6A D001                       		add.b	d1,d0
00018A6C 1140 001A                  		move.b	d0,$1A(a0)
00018A70                            
00018A70                            Obj78_Display:
00018A70 3028 0008                  		move.w	8(a0),d0
00018A74 0240 FF80                  		andi.w	#$FF80,d0
00018A78 3238 F700                  		move.w	($FFFFF700).w,d1
00018A7C 0441 0080                  		subi.w	#$80,d1
00018A80 0241 FF80                  		andi.w	#$FF80,d1
00018A84 9041                       		sub.w	d1,d0
00018A86 0C40 0280                  		cmpi.w	#$280,d0
00018A8A 6200 0000                  		bhi.w	Obj78_ChkGone
00018A8E 4EF9 0000 E94A             		jmp	DisplaySprite
00018A94                            ; ===========================================================================
00018A94                            
00018A94                            Obj78_ChkGone:
00018A94 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018A98 6700                       		beq.s	loc_16ABC		; if it's zero, don't remember object
00018A9A 3440                       		movea.w	d0,a2	; load address into a2
00018A9C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00018AA0                            
00018AA0                            loc_16ABC:
00018AA0 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00018AA6 4E75                       		rts	
00018AA8                            ; ===========================================================================
00018AA8                            
00018AA8                            Obj78_Delete:				; XREF: Obj78_Index
00018AA8 4EF9 0000 E99A             		jmp	DeleteObject
00018AAE                            ; ===========================================================================
00018AAE 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00018AB0 0000                       		dc.w loc_16B02-Obj78_Index2
00018AB2                            ; ===========================================================================
00018AB2                            
00018AB2                            Obj78_Move:				; XREF: Obj78_Index2
00018AB2 5328 002A                  		subq.b	#1,$2A(a0)
00018AB6 6B00                       		bmi.s	Obj78_Move2
00018AB8 4E75                       		rts	
00018ABA                            ; ===========================================================================
00018ABA                            
00018ABA                            Obj78_Move2:
00018ABA 5428 0025                  		addq.b	#2,$25(a0)
00018ABE 117C 0010 002A             		move.b	#$10,$2A(a0)
00018AC4 317C FF40 0010             		move.w	#-$C0,$10(a0)
00018ACA 317C 0040 001C             		move.w	#$40,$1C(a0)
00018AD0 0868 0004 002B             		bchg	#4,$2B(a0)
00018AD6 6600                       		bne.s	loc_16AFC
00018AD8 4268 0010                  		clr.w	$10(a0)
00018ADC 4468 001C                  		neg.w	$1C(a0)
00018AE0                            
00018AE0                            loc_16AFC:
00018AE0 08E8 0007 002B             		bset	#7,$2B(a0)
00018AE6                            
00018AE6                            loc_16B02:				; XREF: Obj78_Index2
00018AE6 5328 002A                  		subq.b	#1,$2A(a0)
00018AEA 6B00                       		bmi.s	loc_16B5E
00018AEC 2F28 0008                  		move.l	8(a0),-(sp)
00018AF0 2428 0008                  		move.l	8(a0),d2
00018AF4 3028 0010                  		move.w	$10(a0),d0
00018AF8 0828 0000 0022             		btst	#0,$22(a0)
00018AFE 6700                       		beq.s	loc_16B1E
00018B00 4440                       		neg.w	d0
00018B02                            
00018B02                            loc_16B1E:
00018B02 48C0                       		ext.l	d0
00018B04 E180                       		asl.l	#8,d0
00018B06 D480                       		add.l	d0,d2
00018B08 2142 0008                  		move.l	d2,8(a0)
00018B0C 4EBA E302                  		jsr	ObjHitFloor
00018B10 241F                       		move.l	(sp)+,d2
00018B12 0C41 FFF8                  		cmpi.w	#-8,d1
00018B16 6D00                       		blt.s	loc_16B70
00018B18 0C41 000C                  		cmpi.w	#$C,d1
00018B1C 6C00                       		bge.s	loc_16B70
00018B1E D368 000C                  		add.w	d1,$C(a0)
00018B22 4842                       		swap	d2
00018B24 B468 0008                  		cmp.w	8(a0),d2
00018B28 6700                       		beq.s	locret_16B5C
00018B2A 7000                       		moveq	#0,d0
00018B2C 1028 003C                  		move.b	$3C(a0),d0
00018B30 5228 003C                  		addq.b	#1,$3C(a0)
00018B34 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018B3A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018B3E                            
00018B3E                            locret_16B5C:
00018B3E 4E75                       		rts	
00018B40                            ; ===========================================================================
00018B40                            
00018B40                            loc_16B5E:
00018B40 5528 0025                  		subq.b	#2,$25(a0)
00018B44 117C 0007 002A             		move.b	#7,$2A(a0)
00018B4A 317C 0000 0010             		move.w	#0,$10(a0)
00018B50 4E75                       		rts	
00018B52                            ; ===========================================================================
00018B52                            
00018B52                            loc_16B70:
00018B52 2142 0008                  		move.l	d2,8(a0)
00018B56 0868 0000 0022             		bchg	#0,$22(a0)
00018B5C 1168 0022 0001             		move.b	$22(a0),1(a0)
00018B62 7000                       		moveq	#0,d0
00018B64 1028 003C                  		move.b	$3C(a0),d0
00018B68 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00018B6E 5228 003C                  		addq.b	#1,$3C(a0)
00018B72 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018B78 4E75                       		rts	
00018B7A                            ; ===========================================================================
00018B7A                            
00018B7A                            Obj78_BodySeg2:				; XREF: Obj78_Index
00018B7A 2268 003C                  		movea.l	$3C(a0),a1
00018B7E 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018B84 6A00                       		bpl.s	Obj78_BodySeg1
00018B86 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018B8C 1028 0026                  		move.b	$26(a0),d0
00018B90 0240 007F                  		andi.w	#$7F,d0
00018B94 5828 0026                  		addq.b	#4,$26(a0)
00018B98 4A31 0004                  		tst.b	4(a1,d0.w)
00018B9C 6A00                       		bpl.s	Obj78_AniBody
00018B9E 5828 0026                  		addq.b	#4,$26(a0)
00018BA2                            
00018BA2                            Obj78_AniBody:
00018BA2 1031 0000                  		move.b	(a1,d0.w),d0
00018BA6 5000                       		addq.b	#8,d0
00018BA8 1140 001A                  		move.b	d0,$1A(a0)
00018BAC                            
00018BAC                            Obj78_BodySeg1:				; XREF: Obj78_Index
00018BAC 2268 003C                  		movea.l	$3C(a0),a1
00018BB0 4A28 0022                  		tst.b	$22(a0)
00018BB4 6B00 0000                  		bmi.w	loc_16C90
00018BB8 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018BBE 1169 0025 0025             		move.b	$25(a1),$25(a0)
00018BC4 6700 0000                  		beq.w	loc_16C64
00018BC8 3169 001C 001C             		move.w	$1C(a1),$1C(a0)
00018BCE 3029 0010                  		move.w	$10(a1),d0
00018BD2 D069 001C                  		add.w	$1C(a1),d0
00018BD6 3140 0010                  		move.w	d0,$10(a0)
00018BDA 2428 0008                  		move.l	8(a0),d2
00018BDE 2602                       		move.l	d2,d3
00018BE0 3028 0010                  		move.w	$10(a0),d0
00018BE4 0828 0000 0022             		btst	#0,$22(a0)
00018BEA 6700                       		beq.s	loc_16C0C
00018BEC 4440                       		neg.w	d0
00018BEE                            
00018BEE                            loc_16C0C:
00018BEE 48C0                       		ext.l	d0
00018BF0 E180                       		asl.l	#8,d0
00018BF2 D480                       		add.l	d0,d2
00018BF4 2142 0008                  		move.l	d2,8(a0)
00018BF8 4843                       		swap	d3
00018BFA B668 0008                  		cmp.w	8(a0),d3
00018BFE 6700                       		beq.s	loc_16C64
00018C00 7000                       		moveq	#0,d0
00018C02 1028 003C                  		move.b	$3C(a0),d0
00018C06 1231 002C                  		move.b	$2C(a1,d0.w),d1
00018C0A 0C01 0080                  		cmpi.b	#-$80,d1
00018C0E 6600                       		bne.s	loc_16C50
00018C10 4843                       		swap	d3
00018C12 2143 0008                  		move.l	d3,8(a0)
00018C16 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018C1A 0868 0000 0022             		bchg	#0,$22(a0)
00018C20 1168 0022 0001             		move.b	$22(a0),1(a0)
00018C26 5228 003C                  		addq.b	#1,$3C(a0)
00018C2A 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018C30 6000                       		bra.s	loc_16C64
00018C32                            ; ===========================================================================
00018C32                            
00018C32                            loc_16C50:
00018C32 4881                       		ext.w	d1
00018C34 D368 000C                  		add.w	d1,$C(a0)
00018C38 5228 003C                  		addq.b	#1,$3C(a0)
00018C3C 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018C42 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018C46                            
00018C46                            loc_16C64:
00018C46 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00018C4C 6700                       		beq.s	loc_16C90
00018C4E 0C11 0027                  		cmpi.b	#$27,0(a1)
00018C52 6700                       		beq.s	loc_16C7C
00018C54 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00018C5A 6600                       		bne.s	loc_16C82
00018C5C                            
00018C5C                            loc_16C7C:
00018C5C 4229 0020                  		clr.b	$20(a1)	; immediately remove all touch response values when destroying the head to avoid taking damage
00018C60 117C 000A 0024             		move.b	#$A,$24(a0)
00018C66                            
00018C66                            loc_16C82:
00018C66 4EF9 0000 E94A             		jmp	DisplaySprite
00018C6C                            
00018C6C                            ; ===========================================================================
00018C6C FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00018C74                            ; ===========================================================================
00018C74                            
00018C74                            loc_16C90:
00018C74 08E9 0007 0022             		bset	#7,$22(a1)
00018C7A                            
00018C7A                            loc_16C96:
00018C7A 7000                       		moveq	#0,d0
00018C7C 1028 0024                  		move.b	$24(a0),d0
00018C80 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00018C84 0828 0000 0022             		btst	#0,$22(a0)
00018C8A 6700                       		beq.s	loc_16CAA
00018C8C 4440                       		neg.w	d0
00018C8E                            
00018C8E                            loc_16CAA:
00018C8E 3140 0010                  		move.w	d0,$10(a0)
00018C92 317C FC00 0012             		move.w	#-$400,$12(a0)
00018C98 117C 000C 0024             		move.b	#$C,$24(a0)
00018C9E 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00018CA4                            
00018CA4                            loc_16CC0:				; XREF: Obj78_Index
00018CA4 4EB9 0000 E910             		jsr	ObjectFall
00018CAA 4A68 0012                  		tst.w	$12(a0)
00018CAE 6B00                       		bmi.s	loc_16CE0
00018CB0 4EBA E15E                  		jsr	ObjHitFloor
00018CB4 4A41                       		tst.w	d1
00018CB6 6A00                       		bpl.s	loc_16CE0
00018CB8 D368 000C                  		add.w	d1,$C(a0)
00018CBC 317C FC00 0012             		move.w	#-$400,$12(a0)
00018CC2                            
00018CC2                            loc_16CE0:
00018CC2 4A28 0001                  		tst.b	1(a0)
00018CC6 6A00 FDCC                  		bpl.w	Obj78_ChkGone
00018CCA 4EF9 0000 E94A             		jmp	DisplaySprite
00018CD0                            ; ===========================================================================
00018CD0                            Ani_obj78:
00018CD0                            	include "_anim\obj78.asm"
00018CD0                            ; ---------------------------------------------------------------------------
00018CD0                            ; Animation script - Caterkiller enemy (uses non-standard format)
00018CD0                            ; ---------------------------------------------------------------------------
00018CD0 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00018CE0 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00018CF0 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00018D00 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00018D10 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00018D20 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00018D30 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00018D40 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00018D50                            	even
00018D50                            	even
00018D50                            
00018D50                            ; ---------------------------------------------------------------------------
00018D50                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018D50                            ; ---------------------------------------------------------------------------
00018D50                            Map_obj78:
00018D50                            	include "_maps\obj78.asm"
00018D50                            ; ---------------------------------------------------------------------------
00018D50                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018D50                            ; ---------------------------------------------------------------------------
00018D50 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00018D54 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00018D58 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00018D5C 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00018D60 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00018D64 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00018D68 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00018D6C 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00018D70 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00018D74 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00018D78 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00018D7C 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00018D80 01                         byte_16D9E:	dc.b 1
00018D81 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00018D86 01                         byte_16DA4:	dc.b 1
00018D87 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00018D8C 01                         byte_16DAA:	dc.b 1
00018D8D F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00018D92 01                         byte_16DB0:	dc.b 1
00018D93 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00018D98 01                         byte_16DB6:	dc.b 1
00018D99 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00018D9E 01                         byte_16DBC:	dc.b 1
00018D9F ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00018DA4 01                         byte_16DC2:	dc.b 1
00018DA5 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00018DAA 01                         byte_16DC8:	dc.b 1
00018DAB EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00018DB0 01                         byte_16DCE:	dc.b 1
00018DB1 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00018DB6 01                         byte_16DD4:	dc.b 1
00018DB7 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00018DBC 01                         byte_16DDA:	dc.b 1
00018DBD F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00018DC2 01                         byte_16DE0:	dc.b 1
00018DC3 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00018DC8 01                         byte_16DE6:	dc.b 1
00018DC9 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00018DCE 01                         byte_16DEC:	dc.b 1
00018DCF F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00018DD4 01                         byte_16DF2:	dc.b 1
00018DD5 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00018DDA 01                         byte_16DF8:	dc.b 1
00018DDB F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00018DE0 01                         byte_16DFE:	dc.b 1
00018DE1 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00018DE6 01                         byte_16E04:	dc.b 1
00018DE7 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00018DEC 01                         byte_16E0A:	dc.b 1
00018DED F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00018DF2 01                         byte_16E10:	dc.b 1
00018DF3 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00018DF8 01                         byte_16E16:	dc.b 1
00018DF9 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00018DFE 01                         byte_16E1C:	dc.b 1
00018DFF ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00018E04 01                         byte_16E22:	dc.b 1
00018E05 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00018E0A 01                         byte_16E28:	dc.b 1
00018E0B EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00018E10                            		even
00018E10                            		even
00018E10                            
00018E10                            ; ===========================================================================
00018E10                            ; ---------------------------------------------------------------------------
00018E10                            ; Object 79 - lamppost
00018E10                            ; ---------------------------------------------------------------------------
00018E10                            
00018E10                            Obj79:					; XREF: Obj_Index
00018E10 7000                       		moveq	#0,d0
00018E12 1028 0024                  		move.b	$24(a0),d0
00018E16 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00018E1A 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00018E1E 4EFA 8174                  		jmp	MarkObjGone
00018E22                            ; ===========================================================================
00018E22 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00018E24 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00018E26 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00018E28 0000                       		dc.w Obj79_Twirl-Obj79_Index
00018E2A                            ; ===========================================================================
00018E2A                            
00018E2A                            Obj79_Main:				; XREF: Obj79_Index
00018E2A 5428 0024                  		addq.b	#2,$24(a0)
00018E2E 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00018E36 317C 0571 0002             		move.w	#lamppostart,2(a0)
00018E3C 117C 0004 0001             		move.b	#4,1(a0)
00018E42 117C 0008 0019             		move.b	#8,$19(a0)
00018E48 117C 0005 0018             		move.b	#5,$18(a0)
00018E4E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018E52 3440                       		movea.w	d0,a2	; load address into a2
00018E54 0812 0000                  		btst	#0,(a2)
00018E58 6600                       		bne.s	Obj79_RedLamp
00018E5A 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018E5E 0201 007F                  		andi.b	#$7F,d1
00018E62 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00018E66 0202 007F                  		andi.b	#$7F,d2
00018E6A B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00018E6C 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00018E6E                            
00018E6E                            Obj79_RedLamp:
00018E6E 08D2 0000                  		bset	#0,(a2)
00018E72 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00018E78 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00018E7E 4E75                       		rts	
00018E80                            ; ===========================================================================
00018E80                            
00018E80                            Obj79_BlueLamp:				; XREF: Obj79_Index
00018E80 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00018E84 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00018E88 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018E8C 6B00 0000                  		bmi.w	locret_16F90
00018E90 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018E94 0201 007F                  		andi.b	#$7F,d1
00018E98 1428 0028                  		move.b	$28(a0),d2
00018E9C 0202 007F                  		andi.b	#$7F,d2
00018EA0 B202                       		cmp.b	d2,d1
00018EA2 6500                       		bcs.s	Obj79_HitLamp
00018EA4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018EA8 3440                       		movea.w	d0,a2	; load address into a2
00018EAA 08D2 0000                  		bset	#0,(a2)
00018EAE 117C 0004 0024             		move.b	#4,$24(a0)
00018EB4 117C 0003 001A             		move.b	#3,$1A(a0)
00018EBA 6000 0000                  		bra.w	locret_16F90
00018EBE                            ; ===========================================================================
00018EBE                            
00018EBE                            Obj79_HitLamp:
00018EBE 3038 D008                  		move.w	($FFFFD008).w,d0
00018EC2 9068 0008                  		sub.w	8(a0),d0
00018EC6 5040                       		addq.w	#8,d0
00018EC8 0C40 0010                  		cmpi.w	#$10,d0
00018ECC 6400 0000                  		bcc.w	locret_16F90
00018ED0 3038 D00C                  		move.w	($FFFFD00C).w,d0
00018ED4 9068 000C                  		sub.w	$C(a0),d0
00018ED8 0640 0040                  		addi.w	#$40,d0
00018EDC 0C40 0068                  		cmpi.w	#$68,d0
00018EE0 6400                       		bcc.s	locret_16F90
00018EE2 303C 00A1                  		move.w	#$A1,d0
00018EE6 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play lamppost sound
00018EEC 5428 0024                  		addq.b	#2,$24(a0)
00018EF0 4EB9 0000 F0A0             		jsr	SingleObjLoad
00018EF6 6600                       		bne.s	loc_16F76
00018EF8 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00018EFC 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00018F02 3368 0008 0030             		move.w	8(a0),$30(a1)
00018F08 3368 000C 0032             		move.w	$C(a0),$32(a1)
00018F0E 0469 0018 0032             		subi.w	#$18,$32(a1)
00018F14 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00018F1C 337C 0571 0002             		move.w	#lamppostart,2(a1)
00018F22 137C 0004 0001             		move.b	#4,1(a1)
00018F28 137C 0008 0019             		move.b	#8,$19(a1)
00018F2E 137C 0004 0018             		move.b	#4,$18(a1)
00018F34 137C 0002 001A             		move.b	#2,$1A(a1)
00018F3A 337C 0020 0036             		move.w	#$20,$36(a1)
00018F40                            
00018F40                            loc_16F76:
00018F40 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00018F46 6100 0000                  		bsr.w	Obj79_StoreInfo
00018F4A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018F4E 3440                       		movea.w	d0,a2	; load address into a2
00018F50 08D2 0000                  		bset	#0,(a2)
00018F54                            
00018F54                            locret_16F90:
00018F54 4E75                       		rts	
00018F56                            ; ===========================================================================
00018F56                            
00018F56                            Obj79_AfterHit:				; XREF: Obj79_Index
00018F56 4E75                       		rts	
00018F58                            ; ===========================================================================
00018F58                            
00018F58                            Obj79_Twirl:				; XREF: Obj79_Index
00018F58 5368 0036                  		subq.w	#1,$36(a0)
00018F5C 6A00                       		bpl.s	loc_16FA0
00018F5E 117C 0004 0024             		move.b	#4,$24(a0)
00018F64                            
00018F64                            loc_16FA0:
00018F64 1028 0026                  		move.b	$26(a0),d0
00018F68 0428 0010 0026             		subi.b	#$10,$26(a0)
00018F6E 0400 0040                  		subi.b	#$40,d0
00018F72 4EB9 0000 29CC             		jsr	(CalcSine).l
00018F78 C3FC 0C00                  		muls.w	#$C00,d1
00018F7C 4841                       		swap	d1
00018F7E D268 0030                  		add.w	$30(a0),d1
00018F82 3141 0008                  		move.w	d1,8(a0)
00018F86 C1FC 0C00                  		muls.w	#$C00,d0
00018F8A 4840                       		swap	d0
00018F8C D068 0032                  		add.w	$32(a0),d0
00018F90 3140 000C                  		move.w	d0,$C(a0)
00018F94 4E75                       		rts	
00018F96                            ; ===========================================================================
00018F96                            ; ---------------------------------------------------------------------------
00018F96                            ; Subroutine to	store information when you hit a lamppost
00018F96                            ; ---------------------------------------------------------------------------
00018F96                            
00018F96                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00018F96 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00018F9C 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00018FA2 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00018FA8 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00018FAE 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00018FB4 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00018FBA 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00018FC0 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00018FC6 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00018FCC 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00018FD2 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00018FD8 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00018FDE 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00018FE4 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00018FEA 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00018FF0 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00018FF6 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00018FFC 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00019002 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00019008 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
0001900E 4E75                       		rts	
00019010                            
00019010                            ; ---------------------------------------------------------------------------
00019010                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00019010                            ; ---------------------------------------------------------------------------
00019010                            
00019010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019010                            
00019010                            
00019010                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00019010 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00019016 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
0001901C 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00019022 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00019028 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
0001902E 4278 FE20                  		clr.w	($FFFFFE20).w
00019032 4238 FE1B                  		clr.b	($FFFFFE1B).w
00019036 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
0001903C 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00019042 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00019046 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
0001904C 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00019052 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00019058 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
0001905E 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00019064 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
0001906A 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00019070 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00019076 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
0001907C 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00019082 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00019088 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
0001908E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00019094 6600                       		bne.s	loc_170E4
00019096 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
0001909C 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000190A2 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000190A8                            
000190A8                            loc_170E4:
000190A8 4A38 FE30                  		tst.b	($FFFFFE30).w
000190AC 6A00                       		bpl.s	locret_170F6
000190AE 3038 FE32                  		move.w	($FFFFFE32).w,d0
000190B2 0440 00A0                  		subi.w	#$A0,d0
000190B6 31C0 F728                  		move.w	d0,($FFFFF728).w
000190BA                            
000190BA                            locret_170F6:
000190BA 4E75                       		rts	
000190BC                            ; End of function Obj79_LoadInfo
000190BC                            
000190BC                            ; ===========================================================================
000190BC                            ; ---------------------------------------------------------------------------
000190BC                            ; Sprite mappings - lamppost
000190BC                            ; ---------------------------------------------------------------------------
000190BC                            Map_obj79:
000190BC                            	include "_maps\obj79.asm"
000190BC                            ; ---------------------------------------------------------------------------
000190BC                            ; Sprite mappings - lamppost
000190BC                            ; ---------------------------------------------------------------------------
000190BC 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
000190C0 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
000190C4 06                         byte_17100:	dc.b 6
000190C5 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000190CA E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000190CF F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000190D4 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000190D9 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
000190DE D401 0806 00               		dc.b $D4, 1, 8,	6, 0
000190E3 04                         byte_1711F:	dc.b 4
000190E4 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000190E9 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000190EE F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000190F3 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000190F8 02                         byte_17134:	dc.b 2
000190F9 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
000190FE F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00019103 06                         byte_1713F:	dc.b 6
00019104 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00019109 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001910E F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00019113 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00019118 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
0001911D D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00019122                            		even
00019122                            		even
00019122                            
00019122                            ; ===========================================================================
00019122                            ; ---------------------------------------------------------------------------
00019122                            ; Object 7D - hidden points at the end of a level
00019122                            ; ---------------------------------------------------------------------------
00019122                            
00019122                            Obj7D:					; XREF: Obj_Index
00019122 7000                       		moveq	#0,d0
00019124 1028 0024                  		move.b	$24(a0),d0
00019128 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
0001912C 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00019130                            ; ===========================================================================
00019130 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00019132 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00019134                            ; ===========================================================================
00019134                            
00019134                            Obj7D_Main:				; XREF: Obj7D_Index
00019134 7410                       		moveq	#$10,d2
00019136 3602                       		move.w	d2,d3
00019138 D643                       		add.w	d3,d3
0001913A 43F8 D000                  		lea	($FFFFD000).w,a1
0001913E 3029 0008                  		move.w	8(a1),d0
00019142 9068 0008                  		sub.w	8(a0),d0
00019146 D042                       		add.w	d2,d0
00019148 B043                       		cmp.w	d3,d0
0001914A 6400                       		bcc.s	Obj7D_ChkDel
0001914C 3229 000C                  		move.w	$C(a1),d1
00019150 9268 000C                  		sub.w	$C(a0),d1
00019154 D242                       		add.w	d2,d1
00019156 B243                       		cmp.w	d3,d1
00019158 6400                       		bcc.s	Obj7D_ChkDel
0001915A 4A78 FE08                  		tst.w	($FFFFFE08).w
0001915E 6600                       		bne.s	Obj7D_ChkDel
00019160 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00019164 6600                       		bne.s	Obj7D_ChkDel
00019166 5428 0024                  		addq.b	#2,$24(a0)
0001916A 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00019172 317C 84B6 0002             		move.w	#$84B6,2(a0)
00019178 0028 0004 0001             		ori.b	#4,1(a0)
0001917E 117C 0000 0018             		move.b	#0,$18(a0)
00019184 117C 0010 0019             		move.b	#$10,$19(a0)
0001918A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00019190 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00019196 303C 00C9                  		move.w	#$C9,d0
0001919A 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play bonus sound
000191A0 7000                       		moveq	#0,d0
000191A2 1028 0028                  		move.b	$28(a0),d0
000191A6 D040                       		add.w	d0,d0
000191A8 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
000191AC 4EB9 0000 0000             		jsr	AddPoints
000191B2                            
000191B2                            Obj7D_ChkDel:
000191B2 3028 0008                  		move.w	8(a0),d0
000191B6 0240 FF80                  		andi.w	#$FF80,d0
000191BA 3238 F700                  		move.w	($FFFFF700).w,d1
000191BE 0441 0080                  		subi.w	#$80,d1
000191C2 0241 FF80                  		andi.w	#$FF80,d1
000191C6 9041                       		sub.w	d1,d0
000191C8 0C40 0280                  		cmpi.w	#$280,d0
000191CC 6300                       		bls.s	Obj7D_NoDel
000191CE 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000191D2 6700                       		beq.s	Obj7D_Delete		; if it's zero, don't remember object
000191D4 3440                       		movea.w	d0,a2	; load address into a2
000191D6 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000191DA 6000                       		bra.s	Obj7D_Delete	; and delete object
000191DC                            
000191DC                            Obj7D_NoDel:
000191DC 4E75                       		rts	
000191DE                            ; ===========================================================================
000191DE                            
000191DE                            Obj7D_Delete:
000191DE 4EF9 0000 E99A             		jmp	DeleteObject
000191E4                            ; ===========================================================================
000191E4 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
000191E6 03E8                       		dc.w 1000		; earn 1000*10 points for revealing 10000 object
000191E8 0064                       		dc.w 100		; earn 100*10 points for revealing 1000 object
000191EA 000A                       		dc.w 10			; earn 10*10 points for revealing 100 object
000191EC                            ; ===========================================================================
000191EC                            
000191EC                            Obj7D_DelayDel:				; XREF: Obj7D_Index
000191EC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
000191F0 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
000191F2 3028 0008                  		move.w	8(a0),d0
000191F6 0240 FF80                  		andi.w	#-$80,d0
000191FA 3238 F700                  		move.w	($FFFFF700).w,d1
000191FE 0441 0080                  		subi.w	#$80,d1
00019202 0241 FF80                  		andi.w	#-$80,d1
00019206 9041                       		sub.w	d1,d0
00019208 0C40 0280                  		cmpi.w	#$280,d0
0001920C 6200                       		bhi.s	Obj7D_Delete2
0001920E 4EF9 0000 E94A             		jmp	DisplaySprite
00019214                            ; ===========================================================================
00019214                            
00019214                            Obj7D_Delete2:
00019214 4EF9 0000 E99A             		jmp	DeleteObject
0001921A                            ; ===========================================================================
0001921A                            ; ---------------------------------------------------------------------------
0001921A                            ; Sprite mappings - hidden points at the end of	a level
0001921A                            ; ---------------------------------------------------------------------------
0001921A                            Map_obj7D:
0001921A                            	include "_maps\obj7D.asm"
0001921A                            ; ---------------------------------------------------------------------------
0001921A                            ; Sprite mappings - hidden points at the end of	a level
0001921A                            ; ---------------------------------------------------------------------------
0001921A 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
0001921E 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00019222 00                         byte_17250:	dc.b 0
00019223 01                         byte_17251:	dc.b 1
00019224 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00019229 01                         byte_17257:	dc.b 1
0001922A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001922F 01                         byte_1725D:	dc.b 1
00019230 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00019236 00                         		even
00019236 00                         		even
00019236                            
00019236                            ; ===========================================================================
00019236                            ; ---------------------------------------------------------------------------
00019236                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00019236                            ; ---------------------------------------------------------------------------
00019236                            
00019236                            Obj8A:					; XREF: Obj_Index
00019236 7000                       		moveq	#0,d0
00019238 1028 0024                  		move.b	$24(a0),d0
0001923C 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00019240 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00019244                            ; ===========================================================================
00019244 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00019246 0000                       		dc.w Obj8A_Display-Obj8A_Index
00019248                            ; ===========================================================================
00019248                            
00019248                            Obj8A_Main:				; XREF: Obj8A_Index
00019248 5428 0024                  		addq.b	#2,$24(a0)
0001924C 317C 0120 0008             		move.w	#$120,8(a0)
00019252 317C 00F0 000A             		move.w	#$F0,$A(a0)
00019258 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00019260 317C 25A0 0002             		move.w	#$25A0,2(a0)
00019266 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
0001926A 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
0001926E 117C 0000 0001             		move.b	#0,1(a0)
00019274 117C 0000 0018             		move.b	#0,$18(a0)
0001927A 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00019280 6600                       		bne.s	Obj8A_Display	; if not, branch
00019282 317C 20A6 0002             		move.w	#$20A6,2(a0)
00019288 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
0001928E 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00019292 6700                       		beq.s	Obj8A_Display	; if not, branch
00019294 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
0001929A 6600                       		bne.s	Obj8A_Display	; if not, branch
0001929C 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
000192A2 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
000192A8 4EF9 0000 E99A             		jmp	DeleteObject
000192AE                            ; ===========================================================================
000192AE                            
000192AE                            Obj8A_Display:				; XREF: Obj8A_Index
000192AE 4EF9 0000 E94A             		jmp	DisplaySprite
000192B4                            ; ===========================================================================
000192B4                            ; ---------------------------------------------------------------------------
000192B4                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000192B4                            ; ---------------------------------------------------------------------------
000192B4                            Map_obj8A:
000192B4                            	include "_maps\obj8A.asm"
000192B4                            ; ---------------------------------------------------------------------------
000192B4                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000192B4                            ; ---------------------------------------------------------------------------
000192B4 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
000192B8 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
000192BC 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
000192C0 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
000192C4 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
000192C8 0000                       		dc.w byte_176A9-Map_obj8A
000192CA 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
000192CB F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
000192D0 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
000192D5 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
000192DA F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
000192DF F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
000192E4 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
000192E9 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
000192EE F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
000192F3 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
000192F8 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
000192FD F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
00019302 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
00019307 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001930C F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
00019311 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
00019312 D805 0000 80               		dc.b $D8, 5, 0,	0, $80
00019317 D805 0004 90               		dc.b $D8, 5, 0,	4, $90
0001931C D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
00019321 D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
00019326 D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
0001932B D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
00019330 D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
00019335 D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
0001933A 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
0001933F 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
00019344 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
00019349 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
0001934E 0805 0016 08               		dc.b 8,	5, 0, $16, 8
00019353 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
00019358 0805 0004 30               		dc.b 8,	5, 0, 4, $30
0001935D 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
00019362 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
00019363 D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
00019368 D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
0001936D D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
00019372 D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
00019377 D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
0001937C D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
00019381 D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
00019386 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
0001938B 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
00019390 0805 0036 08               		dc.b 8,	5, 0, $36, 8
00019395 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
00019396 D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
0001939B D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
000193A0 D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
000193A5 D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
000193AA D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
000193AF D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
000193B4 D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
000193B9 D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
000193BE D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
000193C3 D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
000193C8 D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
000193CD D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
000193D2 D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
000193D7 D805 0000 58               		dc.b $D8, 5, 0,	0, $58
000193DC D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
000193E1 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
000193E6 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
000193EB 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
000193F0 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
000193F5 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
000193FA 0805 0016 00               		dc.b 8,	5, 0, $16, 0
000193FF 0805 0004 10               		dc.b 8,	5, 0, 4, $10
00019404 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
00019409 0805 0042 30               		dc.b 8,	5, 0, $42, $30
0001940E 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
0001940F D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
00019414 D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
00019419 D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
0001941E D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
00019423 D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
00019428 D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
0001942D 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
00019432 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
00019437 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
0001943C 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
00019441 0005 0004 24               		dc.b 0,	5, 0, 4, $24
00019446 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
0001944B 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
00019450 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
00019455 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
0001945A 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
0001945F 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
00019464 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
00019469 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
0001946E 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
00019473 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
00019474 D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
00019479 D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
0001947E D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
00019483 D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
00019488 D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
0001948D D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
00019492 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00019497 D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
0001949C D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
000194A1 D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
000194A6 D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
000194AB D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
000194B0 0809 0008 88               		dc.b 8,	9, 0, 8, $88
000194B5 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
000194BA 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
000194BF 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
000194C4 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
000194C9 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
000194CE 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
000194D3 0805 0004 08               		dc.b 8,	5, 0, 4, 8
000194D8 0805 0058 18               		dc.b 8,	5, 0, $58, $18
000194DD 0805 0004 28               		dc.b 8,	5, 0, 4, $28
000194E2 0809 0008 38               		dc.b 8,	9, 0, 8, $38
000194E7 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
000194EC 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
000194F1 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
000194F6 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
000194F7 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
000194FC D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
00019501 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
00019506 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001950B D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
00019510 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
00019515 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001951A D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001951F D005 0000 28               		dc.b $D0, 5, 0,	0, $28
00019524 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
00019529 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001952E D009 0008 58               		dc.b $D0, 9, 0,	8, $58
00019533 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00019538 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001953D 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
00019542 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
00019547 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001954C 0005 0004 14               		dc.b 0,	5, 0, 4, $14
00019551 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
00019556 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001955B 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
00019560 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
00019565 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001956A 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
0001956B D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
00019570 D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
00019575 D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
0001957A D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
0001957F D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
00019584 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00019589 D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
0001958E D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
00019593 D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
00019598 D805 0004 18               		dc.b $D8, 5, 0,	4, $18
0001959D D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
000195A2 D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
000195A7 D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
000195AC 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
000195B1 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
000195B6 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
000195BB 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
000195C0 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
000195C5 0009 0008 00               		dc.b 0,	9, 0, 8, 0
000195CA 0001 0046 14               		dc.b 0,	1, 0, $46, $14
000195CF 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
000195D4 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
000195D9 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
000195DE 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
000195E3 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
000195E8 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
000195ED 0001 0046 74               		dc.b 0,	1, 0, $46, $74
000195F2 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
000195F7 2005 0004 08               		dc.b $20, 5, 0,	4, 8
000195FC 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
00019601 2005 0004 28               		dc.b $20, 5, 0,	4, $28
00019606 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
00019607 F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
0001960C F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
00019611 F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
00019616 F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
0001961B F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
00019620 F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
00019625 F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
0001962A F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
0001962F F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
00019634 F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
00019639 F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
0001963E F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
00019643 F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
00019648 F805 0000 60               		dc.b $F8, 5, 0,	0, $60
0001964D F805 0004 70               		dc.b $F8, 5, 0,	4, $70
00019652 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
00019653 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
00019658 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001965D 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
00019662 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
00019667 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001966C 3005 0004 18               		dc.b $30, 5, 0,	4, $18
00019671 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
00019676 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001967B 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
0001967C E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
00019681 E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
00019686 E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
0001968B E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
00019690 E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
00019695 E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
0001969A E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
0001969F E805 0004 24               		dc.b $E8, 5, 0,	4, $24
000196A4 E809 0008 34               		dc.b $E8, 9, 0,	8, $34
000196A9 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
000196AE 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
000196B3 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
000196B8 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
000196BD 0005 000E 00               		dc.b 0,	5, 0, $E, 0
000196C2 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
000196C7 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
000196CC 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
000196D2 00                         		even
000196D2 00                         		even
000196D2                            
000196D2                            ; ===========================================================================
000196D2                            ; ---------------------------------------------------------------------------
000196D2                            ; Object 3D - Eggman (GHZ)
000196D2                            ; ---------------------------------------------------------------------------
000196D2                            
000196D2                            Obj3D:					; XREF: Obj_Index
000196D2 7000                       		moveq	#0,d0
000196D4 1028 0024                  		move.b	$24(a0),d0
000196D8 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
000196DC 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
000196E0                            ; ===========================================================================
000196E0 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
000196E2 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
000196E4 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
000196E6 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
000196E8                            
000196E8 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
000196EA 0401                       		dc.b 4,	1
000196EC 0607                       		dc.b 6,	7
000196EE                            ; ===========================================================================
000196EE                            
000196EE                            Obj3D_Main:				; XREF: Obj3D_Index
000196EE 45F9 0001 96E8             		lea	(Obj3D_ObjData).l,a2
000196F4 2248                       		movea.l	a0,a1
000196F6 7202                       		moveq	#2,d1
000196F8 6000                       		bra.s	Obj3D_LoadBoss
000196FA                            ; ===========================================================================
000196FA                            
000196FA                            Obj3D_Loop:
000196FA 4EB9 0000 F0B6             		jsr	SingleObjLoad2
00019700 6600                       		bne.s	loc_17772
00019702                            
00019702                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00019702 135A 0024                  		move.b	(a2)+,$24(a1)
00019706 12BC 003D                  		move.b	#$3D,0(a1)
0001970A 3368 0008 0008             		move.w	8(a0),8(a1)
00019710 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019716 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
0001971E 337C 0400 0002             		move.w	#$400,2(a1)
00019724 137C 0004 0001             		move.b	#4,1(a1)
0001972A 137C 0020 0019             		move.b	#$20,$19(a1)
00019730 137C 0003 0018             		move.b	#3,$18(a1)
00019736 135A 001C                  		move.b	(a2)+,$1C(a1)
0001973A 2348 0034                  		move.l	a0,$34(a1)
0001973E 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00019742                            
00019742                            loc_17772:
00019742 3168 0008 0030             		move.w	8(a0),$30(a0)
00019748 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001974E 117C 000F 0020             		move.b	#$F,$20(a0)
00019754 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001975A                            
0001975A                            Obj3D_ShipMain:				; XREF: Obj3D_Index
0001975A 7000                       		moveq	#0,d0
0001975C 1028 0025                  		move.b	$25(a0),d0
00019760 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00019764 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00019768 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001976E 4EB9 0000 B9AA             		jsr	AnimateSprite
00019774 1028 0022                  		move.b	$22(a0),d0
00019778 0200 0003                  		andi.b	#3,d0
0001977C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019782 8128 0001                  		or.b	d0,1(a0)
00019786 4EF9 0000 E94A             		jmp	DisplaySprite
0001978C                            ; ===========================================================================
0001978C 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
0001978E 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00019790 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00019792 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00019794 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00019796 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00019798 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
0001979A                            ; ===========================================================================
0001979A                            
0001979A                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
0001979A 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
000197A0 6100 0000                  		bsr.w	BossMove
000197A4 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000197AA 6600                       		bne.s	loc_177E6
000197AC 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000197B2 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000197B6                            
000197B6                            loc_177E6:
000197B6 1028 003F                  		move.b	$3F(a0),d0
000197BA 4EB9 0000 29CC             		jsr	(CalcSine).l
000197C0 EC40                       		asr.w	#6,d0
000197C2 D068 0038                  		add.w	$38(a0),d0
000197C6 3140 000C                  		move.w	d0,$C(a0)
000197CA 3168 0030 0008             		move.w	$30(a0),8(a0)
000197D0 5428 003F                  		addq.b	#2,$3F(a0)
000197D4 0C28 0008 0025             		cmpi.b	#8,$25(a0)
000197DA 6400                       		bcc.s	locret_1784A
000197DC 4A28 0022                  		tst.b	$22(a0)
000197E0 6B00                       		bmi.s	loc_1784C
000197E2 4A28 0020                  		tst.b	$20(a0)
000197E6 6600                       		bne.s	locret_1784A
000197E8 4A28 003E                  		tst.b	$3E(a0)
000197EC 6600                       		bne.s	Obj3D_ShipFlash
000197EE 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
000197F4 303C 00AC                  		move.w	#$AC,d0
000197F8 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play boss damage sound
000197FE                            
000197FE                            Obj3D_ShipFlash:
000197FE 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00019802 7000                       		moveq	#0,d0		; move 0 (black) to d0
00019804 4A51                       		tst.w	(a1)
00019806 6600                       		bne.s	loc_1783C
00019808 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
0001980C                            
0001980C                            loc_1783C:
0001980C 3280                       		move.w	d0,(a1)		; load colour stored in	d0
0001980E 5328 003E                  		subq.b	#1,$3E(a0)
00019812 6600                       		bne.s	locret_1784A
00019814 117C 000F 0020             		move.b	#$F,$20(a0)
0001981A                            
0001981A                            locret_1784A:
0001981A 4E75                       		rts	
0001981C                            ; ===========================================================================
0001981C                            
0001981C                            loc_1784C:				; XREF: loc_177E6
0001981C 7064                       		moveq	#100,d0
0001981E 6100 0000                  		bsr.w	AddPoints
00019822 117C 0008 0025             		move.b	#8,$25(a0)
00019828 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001982E 4E75                       		rts	
00019830                            
00019830                            ; ---------------------------------------------------------------------------
00019830                            ; Defeated boss	subroutine
00019830                            ; ---------------------------------------------------------------------------
00019830                            
00019830                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019830                            
00019830                            
00019830                            BossDefeated:
00019830 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00019836 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001983C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00019840 0200 0007                  		andi.b	#7,d0
00019844 6600                       		bne.s	locret_178A2
00019846 4EB9 0000 F0A0             		jsr	SingleObjLoad
0001984C 6600                       		bne.s	locret_178A2
0001984E 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00019852 3368 0008 0008             		move.w	8(a0),8(a1)
00019858 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001985E 4EB9 0000 29A6             		jsr	(RandomNumber).l
00019864 3200                       		move.w	d0,d1
00019866 7200                       		moveq	#0,d1
00019868 1200                       		move.b	d0,d1
0001986A E409                       		lsr.b	#2,d1
0001986C 0441 0020                  		subi.w	#$20,d1
00019870 D369 0008                  		add.w	d1,8(a1)
00019874 E048                       		lsr.w	#8,d0
00019876 E608                       		lsr.b	#3,d0
00019878 D169 000C                  		add.w	d0,$C(a1)
0001987C                            
0001987C                            locret_178A2:
0001987C 4E75                       		rts	
0001987E                            ; End of function BossDefeated
0001987E                            
0001987E                            ; ---------------------------------------------------------------------------
0001987E                            ; Subroutine to	move a boss
0001987E                            ; ---------------------------------------------------------------------------
0001987E                            
0001987E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001987E                            
0001987E                            
0001987E                            BossMove:
0001987E 2428 0030                  		move.l	$30(a0),d2
00019882 2628 0038                  		move.l	$38(a0),d3
00019886 3028 0010                  		move.w	$10(a0),d0
0001988A 48C0                       		ext.l	d0
0001988C E180                       		asl.l	#8,d0
0001988E D480                       		add.l	d0,d2
00019890 3028 0012                  		move.w	$12(a0),d0
00019894 48C0                       		ext.l	d0
00019896 E180                       		asl.l	#8,d0
00019898 D680                       		add.l	d0,d3
0001989A 2142 0030                  		move.l	d2,$30(a0)
0001989E 2143 0038                  		move.l	d3,$38(a0)
000198A2 4E75                       		rts	
000198A4                            ; End of function BossMove
000198A4                            
000198A4                            ; ===========================================================================
000198A4                            
000198A4                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
000198A4 317C FF00 0010             		move.w	#-$100,$10(a0)
000198AA 317C FFC0 0012             		move.w	#-$40,$12(a0)
000198B0 6100 FFCC                  		bsr.w	BossMove
000198B4 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000198BA 6600                       		bne.s	loc_17916
000198BC 317C 0000 0010             		move.w	#0,$10(a0)
000198C2 317C 0000 0012             		move.w	#0,$12(a0)
000198C8 5428 0025                  		addq.b	#2,$25(a0)
000198CC 4EB9 0000 F0B6             		jsr	SingleObjLoad2
000198D2 6600                       		bne.s	loc_17910
000198D4 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
000198D8 3368 0030 0008             		move.w	$30(a0),8(a1)
000198DE 3368 0038 000C             		move.w	$38(a0),$C(a1)
000198E4 2348 0034                  		move.l	a0,$34(a1)
000198E8                            
000198E8                            loc_17910:
000198E8 317C 0077 003C             		move.w	#$77,$3C(a0)
000198EE                            
000198EE                            loc_17916:
000198EE 6000 FEC6                  		bra.w	loc_177E6
000198F2                            ; ===========================================================================
000198F2                            
000198F2                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
000198F2 5368 003C                  		subq.w	#1,$3C(a0)
000198F6 6A00                       		bpl.s	Obj3D_Reverse
000198F8 5428 0025                  		addq.b	#2,$25(a0)
000198FC 317C 003F 003C             		move.w	#$3F,$3C(a0)
00019902 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00019908 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001990E 6600                       		bne.s	Obj3D_Reverse
00019910 317C 007F 003C             		move.w	#$7F,$3C(a0)
00019916 317C 0040 0010             		move.w	#$40,$10(a0)
0001991C                            
0001991C                            Obj3D_Reverse:
0001991C 0828 0000 0022             		btst	#0,$22(a0)
00019922 6600                       		bne.s	loc_17950
00019924 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00019928                            
00019928                            loc_17950:
00019928 6000 FE8C                  		bra.w	loc_177E6
0001992C                            ; ===========================================================================
0001992C                            
0001992C                            loc_17954:				; XREF: Obj3D_ShipIndex
0001992C 5368 003C                  		subq.w	#1,$3C(a0)
00019930 6B00                       		bmi.s	loc_17960
00019932 6100 FF4A                  		bsr.w	BossMove
00019936 6000                       		bra.s	loc_17976
00019938                            ; ===========================================================================
00019938                            
00019938                            loc_17960:
00019938 0868 0000 0022             		bchg	#0,$22(a0)
0001993E 317C 003F 003C             		move.w	#$3F,$3C(a0)
00019944 5528 0025                  		subq.b	#2,$25(a0)
00019948 317C 0000 0010             		move.w	#0,$10(a0)
0001994E                            
0001994E                            loc_17976:
0001994E 6000 FE66                  		bra.w	loc_177E6
00019952                            ; ===========================================================================
00019952                            
00019952                            loc_1797A:				; XREF: Obj3D_ShipIndex
00019952 5368 003C                  		subq.w	#1,$3C(a0)
00019956 6B00                       		bmi.s	loc_17984
00019958 6000 FED6                  		bra.w	BossDefeated
0001995C                            ; ===========================================================================
0001995C                            
0001995C                            loc_17984:
0001995C 08E8 0000 0022             		bset	#0,$22(a0)
00019962 08A8 0007 0022             		bclr	#7,$22(a0)
00019968 4268 0010                  		clr.w	$10(a0)
0001996C 5428 0025                  		addq.b	#2,$25(a0)
00019970 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00019976 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001997A 6600                       		bne.s	locret_179AA
0001997C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019982                            
00019982                            locret_179AA:
00019982 4E75                       		rts	
00019984                            ; ===========================================================================
00019984                            
00019984                            loc_179AC:				; XREF: Obj3D_ShipIndex
00019984 5268 003C                  		addq.w	#1,$3C(a0)
00019988 6700                       		beq.s	loc_179BC
0001998A 6A00                       		bpl.s	loc_179C2
0001998C 0668 0018 0012             		addi.w	#$18,$12(a0)
00019992 6000                       		bra.s	loc_179EE
00019994                            ; ===========================================================================
00019994                            
00019994                            loc_179BC:
00019994 4268 0012                  		clr.w	$12(a0)
00019998 6000                       		bra.s	loc_179EE
0001999A                            ; ===========================================================================
0001999A                            
0001999A                            loc_179C2:
0001999A 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000199A0 6500                       		bcs.s	loc_179DA
000199A2 6700                       		beq.s	loc_179E0
000199A4 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
000199AA 6500                       		bcs.s	loc_179EE
000199AC 5428 0025                  		addq.b	#2,$25(a0)
000199B0 6000                       		bra.s	loc_179EE
000199B2                            ; ===========================================================================
000199B2                            
000199B2                            loc_179DA:
000199B2 5168 0012                  		subq.w	#8,$12(a0)
000199B6 6000                       		bra.s	loc_179EE
000199B8                            ; ===========================================================================
000199B8                            
000199B8                            loc_179E0:
000199B8 4268 0012                  		clr.w	$12(a0)
000199BC 303C 0081                  		move.w	#$81,d0
000199C0 4EB9 0000 11F0             		jsr	(PlaySound).l	; play GHZ music
000199C6                            
000199C6                            loc_179EE:
000199C6 6100 FEB6                  		bsr.w	BossMove
000199CA 6000 FDEA                  		bra.w	loc_177E6
000199CE                            ; ===========================================================================
000199CE                            
000199CE                            loc_179F6:				; XREF: Obj3D_ShipIndex
000199CE 317C 0400 0010             		move.w	#$400,$10(a0)
000199D4 317C FFC0 0012             		move.w	#-$40,$12(a0)
000199DA 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
000199E0 6700                       		beq.s	loc_17A10
000199E2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000199E6 6000                       		bra.s	loc_17A16
000199E8                            ; ===========================================================================
000199E8                            
000199E8                            loc_17A10:
000199E8 4A28 0001                  		tst.b	1(a0)
000199EC 6A00                       		bpl.s	Obj3D_ShipDel
000199EE                            
000199EE                            loc_17A16:
000199EE 6100 FE8E                  		bsr.w	BossMove
000199F2 6000 FDC2                  		bra.w	loc_177E6
000199F6                            ; ===========================================================================
000199F6                            
000199F6                            Obj3D_ShipDel:
000199F6 4EF9 0000 E99A             		jmp	DeleteObject
000199FC                            ; ===========================================================================
000199FC                            
000199FC                            Obj3D_FaceMain:				; XREF: Obj3D_Index
000199FC 7000                       		moveq	#0,d0
000199FE 7201                       		moveq	#1,d1
00019A00 2268 0034                  		movea.l	$34(a0),a1
00019A04 1029 0025                  		move.b	$25(a1),d0
00019A08 5900                       		subq.b	#4,d0
00019A0A 6600                       		bne.s	loc_17A3E
00019A0C 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00019A12 6600                       		bne.s	loc_17A46
00019A14 7204                       		moveq	#4,d1
00019A16                            
00019A16                            loc_17A3E:
00019A16 5D00                       		subq.b	#6,d0
00019A18 6B00                       		bmi.s	loc_17A46
00019A1A 720A                       		moveq	#$A,d1
00019A1C 6000                       		bra.s	loc_17A5A
00019A1E                            ; ===========================================================================
00019A1E                            
00019A1E                            loc_17A46:
00019A1E 4A29 0020                  		tst.b	$20(a1)
00019A22 6600                       		bne.s	loc_17A50
00019A24 7205                       		moveq	#5,d1
00019A26 6000                       		bra.s	loc_17A5A
00019A28                            ; ===========================================================================
00019A28                            
00019A28                            loc_17A50:
00019A28 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019A2E 6500                       		bcs.s	loc_17A5A
00019A30 7204                       		moveq	#4,d1
00019A32                            
00019A32                            loc_17A5A:
00019A32 1141 001C                  		move.b	d1,$1C(a0)
00019A36 5500                       		subq.b	#2,d0
00019A38 6600                       		bne.s	Obj3D_FaceDisp
00019A3A 117C 0006 001C             		move.b	#6,$1C(a0)
00019A40 4A28 0001                  		tst.b	1(a0)
00019A44 6A00                       		bpl.s	Obj3D_FaceDel
00019A46                            
00019A46                            Obj3D_FaceDisp:
00019A46 6000                       		bra.s	Obj3D_Display
00019A48                            ; ===========================================================================
00019A48                            
00019A48                            Obj3D_FaceDel:
00019A48 4EF9 0000 E99A             		jmp	DeleteObject
00019A4E                            ; ===========================================================================
00019A4E                            
00019A4E                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00019A4E 117C 0007 001C             		move.b	#7,$1C(a0)
00019A54 2268 0034                  		movea.l	$34(a0),a1
00019A58 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00019A5E 6600                       		bne.s	loc_17A96
00019A60 117C 000B 001C             		move.b	#$B,$1C(a0)
00019A66 4A28 0001                  		tst.b	1(a0)
00019A6A 6A00                       		bpl.s	Obj3D_FlameDel
00019A6C 6000                       		bra.s	Obj3D_FlameDisp
00019A6E                            ; ===========================================================================
00019A6E                            
00019A6E                            loc_17A96:
00019A6E 3029 0010                  		move.w	$10(a1),d0
00019A72 6700                       		beq.s	Obj3D_FlameDisp
00019A74 117C 0008 001C             		move.b	#8,$1C(a0)
00019A7A                            
00019A7A                            Obj3D_FlameDisp:
00019A7A 6000                       		bra.s	Obj3D_Display
00019A7C                            ; ===========================================================================
00019A7C                            
00019A7C                            Obj3D_FlameDel:
00019A7C 4EF9 0000 E99A             		jmp	DeleteObject
00019A82                            ; ===========================================================================
00019A82                            
00019A82                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00019A82 2268 0034                  		movea.l	$34(a0),a1
00019A86 3169 0008 0008             		move.w	8(a1),8(a0)
00019A8C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019A92 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019A98 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00019A9E 4EB9 0000 B9AA             		jsr	AnimateSprite
00019AA4 1028 0022                  		move.b	$22(a0),d0
00019AA8 0200 0003                  		andi.b	#3,d0
00019AAC 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019AB2 8128 0001                  		or.b	d0,1(a0)
00019AB6 4EF9 0000 E94A             		jmp	DisplaySprite
00019ABC                            ; ===========================================================================
00019ABC                            ; ---------------------------------------------------------------------------
00019ABC                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00019ABC                            ; ---------------------------------------------------------------------------
00019ABC                            
00019ABC                            Obj48:					; XREF: Obj_Index
00019ABC 7000                       		moveq	#0,d0
00019ABE 1028 0024                  		move.b	$24(a0),d0
00019AC2 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00019AC6 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00019ACA                            ; ===========================================================================
00019ACA 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00019ACC 0000                       		dc.w Obj48_Base-Obj48_Index
00019ACE 0000                       		dc.w Obj48_Display2-Obj48_Index
00019AD0 0000                       		dc.w loc_17C68-Obj48_Index
00019AD2 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00019AD4                            ; ===========================================================================
00019AD4                            
00019AD4                            Obj48_Main:				; XREF: Obj48_Index
00019AD4 5428 0024                  		addq.b	#2,$24(a0)
00019AD8 317C 4080 0026             		move.w	#$4080,$26(a0)
00019ADE 317C FE00 003E             		move.w	#-$200,$3E(a0)
00019AE4 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00019AEC 317C 046C 0002             		move.w	#$46C,2(a0)
00019AF2 45E8 0028                  		lea	$28(a0),a2
00019AF6 14FC 0000                  		move.b	#0,(a2)+
00019AFA 7205                       		moveq	#5,d1
00019AFC 2248                       		movea.l	a0,a1
00019AFE 6000                       		bra.s	loc_17B60
00019B00                            ; ===========================================================================
00019B00                            
00019B00                            Obj48_MakeLinks:
00019B00 4EB9 0000 F0B6             		jsr	SingleObjLoad2
00019B06 6600                       		bne.s	Obj48_MakeBall
00019B08 3368 0008 0008             		move.w	8(a0),8(a1)
00019B0E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019B14 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00019B18 137C 0006 0024             		move.b	#6,$24(a1)
00019B1E 237C 0000 8DA0 0004        		move.l	#Map_obj15,4(a1)
00019B26 337C 0380 0002             		move.w	#$380,2(a1)
00019B2C 137C 0001 001A             		move.b	#1,$1A(a1)
00019B32 5228 0028                  		addq.b	#1,$28(a0)
00019B36                            
00019B36                            loc_17B60:				; XREF: Obj48_Main
00019B36 3A09                       		move.w	a1,d5
00019B38 0445 D000                  		subi.w	#$D000,d5
00019B3C EC4D                       		lsr.w	#6,d5
00019B3E 0245 007F                  		andi.w	#$7F,d5
00019B42 14C5                       		move.b	d5,(a2)+
00019B44 137C 0004 0001             		move.b	#4,1(a1)
00019B4A 137C 0008 0019             		move.b	#8,$19(a1)
00019B50 137C 0006 0018             		move.b	#6,$18(a1)
00019B56 2368 0034 0034             		move.l	$34(a0),$34(a1)
00019B5C 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00019B60                            
00019B60                            Obj48_MakeBall:
00019B60 137C 0008 0024             		move.b	#8,$24(a1)
00019B66 237C 0000 9318 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00019B6E 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00019B74 137C 0001 001A             		move.b	#1,$1A(a1)
00019B7A 137C 0005 0018             		move.b	#5,$18(a1)
00019B80 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00019B86 4E75                       		rts	
00019B88                            ; ===========================================================================
00019B88                            
00019B88 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00019B8E                            
00019B8E                            ; ===========================================================================
00019B8E                            
00019B8E                            Obj48_Base:				; XREF: Obj48_Index
00019B8E 47F9 0001 9B88             		lea	(Obj48_PosData).l,a3
00019B94 45E8 0028                  		lea	$28(a0),a2
00019B98 7C00                       		moveq	#0,d6
00019B9A 1C1A                       		move.b	(a2)+,d6
00019B9C                            
00019B9C                            loc_17BC6:
00019B9C 7800                       		moveq	#0,d4
00019B9E 181A                       		move.b	(a2)+,d4
00019BA0 ED4C                       		lsl.w	#6,d4
00019BA2 0684 00FF D000             		addi.l	#$FFD000,d4
00019BA8 2244                       		movea.l	d4,a1
00019BAA 101B                       		move.b	(a3)+,d0
00019BAC B029 003C                  		cmp.b	$3C(a1),d0
00019BB0 6700                       		beq.s	loc_17BE0
00019BB2 5229 003C                  		addq.b	#1,$3C(a1)
00019BB6                            
00019BB6                            loc_17BE0:
00019BB6 51CE FFE4                  		dbf	d6,loc_17BC6
00019BBA                            
00019BBA B029 003C                  		cmp.b	$3C(a1),d0
00019BBE 6600                       		bne.s	loc_17BFA
00019BC0 2268 0034                  		movea.l	$34(a0),a1
00019BC4 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00019BCA 6600                       		bne.s	loc_17BFA
00019BCC 5428 0024                  		addq.b	#2,$24(a0)
00019BD0                            
00019BD0                            loc_17BFA:
00019BD0 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00019BD6 6700                       		beq.s	Obj48_Display
00019BD8 5268 0032                  		addq.w	#1,$32(a0)
00019BDC                            
00019BDC                            Obj48_Display:
00019BDC 6100 0000                  		bsr.w	sub_17C2A
00019BE0 1028 0026                  		move.b	$26(a0),d0
00019BE4 4EB9 0000 8D06             		jsr	(Obj15_Move2).l
00019BEA 4EF9 0000 E94A             		jmp	DisplaySprite
00019BF0                            ; ===========================================================================
00019BF0                            
00019BF0                            Obj48_Display2:				; XREF: Obj48_Index
00019BF0 6100 0000                  		bsr.w	sub_17C2A
00019BF4 4EB9 0000 8CC6             		jsr	(Obj48_Move).l
00019BFA 4EF9 0000 E94A             		jmp	DisplaySprite
00019C00                            
00019C00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019C00                            
00019C00                            
00019C00                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00019C00 2268 0034                  		movea.l	$34(a0),a1
00019C04 0628 0020 001B             		addi.b	#$20,$1B(a0)
00019C0A 6400                       		bcc.s	loc_17C3C
00019C0C 0868 0000 001A             		bchg	#0,$1A(a0)
00019C12                            
00019C12                            loc_17C3C:
00019C12 3169 0008 003A             		move.w	8(a1),$3A(a0)
00019C18 3029 000C                  		move.w	$C(a1),d0
00019C1C D068 0032                  		add.w	$32(a0),d0
00019C20 3140 0038                  		move.w	d0,$38(a0)
00019C24 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019C2A 4A29 0022                  		tst.b	$22(a1)
00019C2E 6A00                       		bpl.s	locret_17C66
00019C30 10BC 003F                  		move.b	#$3F,0(a0)
00019C34 117C 0000 0024             		move.b	#0,$24(a0)
00019C3A                            
00019C3A                            locret_17C66:
00019C3A 4E75                       		rts	
00019C3C                            ; End of function sub_17C2A
00019C3C                            
00019C3C                            ; ===========================================================================
00019C3C                            
00019C3C                            loc_17C68:				; XREF: Obj48_Index
00019C3C 2268 0034                  		movea.l	$34(a0),a1
00019C40 4A29 0022                  		tst.b	$22(a1)
00019C44 6A00                       		bpl.s	Obj48_Display3
00019C46 10BC 003F                  		move.b	#$3F,0(a0)
00019C4A 117C 0000 0024             		move.b	#0,$24(a0)
00019C50                            
00019C50                            Obj48_Display3:
00019C50 4EF9 0000 E94A             		jmp	DisplaySprite
00019C56                            ; ===========================================================================
00019C56                            
00019C56                            Obj48_ChkVanish:			; XREF: Obj48_Index
00019C56 7000                       		moveq	#0,d0
00019C58 4A28 001A                  		tst.b	$1A(a0)
00019C5C 6600                       		bne.s	Obj48_Vanish
00019C5E 5200                       		addq.b	#1,d0
00019C60                            
00019C60                            Obj48_Vanish:
00019C60 1140 001A                  		move.b	d0,$1A(a0)
00019C64 2268 0034                  		movea.l	$34(a0),a1
00019C68 4A29 0022                  		tst.b	$22(a1)
00019C6C 6A00                       		bpl.s	Obj48_Display4
00019C6E 117C 0000 0020             		move.b	#0,$20(a0)
00019C74 6100 FBBA                  		bsr.w	BossDefeated
00019C78 5328 003C                  		subq.b	#1,$3C(a0)
00019C7C 6A00                       		bpl.s	Obj48_Display4
00019C7E 10BC 003F                  		move.b	#$3F,(a0)
00019C82 117C 0000 0024             		move.b	#0,$24(a0)
00019C88                            
00019C88                            Obj48_Display4:
00019C88 4EF9 0000 E94A             		jmp	DisplaySprite
00019C8E                            ; ===========================================================================
00019C8E                            Ani_Eggman:
00019C8E                            	include "_anim\Eggman.asm"
00019C8E                            ; ---------------------------------------------------------------------------
00019C8E                            ; Animation script - Eggman (bosses)
00019C8E                            ; ---------------------------------------------------------------------------
00019C8E 0000                       		dc.w byte_17CD4-Ani_Eggman
00019C90 0000                       		dc.w byte_17CD8-Ani_Eggman
00019C92 0000                       		dc.w byte_17CDC-Ani_Eggman
00019C94 0000                       		dc.w byte_17CE0-Ani_Eggman
00019C96 0000                       		dc.w byte_17CE4-Ani_Eggman
00019C98 0000                       		dc.w byte_17CE8-Ani_Eggman
00019C9A 0000                       		dc.w byte_17CEC-Ani_Eggman
00019C9C 0000                       		dc.w byte_17CF0-Ani_Eggman
00019C9E 0000                       		dc.w byte_17CF4-Ani_Eggman
00019CA0 0000                       		dc.w byte_17CF8-Ani_Eggman
00019CA2 0000                       		dc.w byte_17CFC-Ani_Eggman
00019CA4 0000                       		dc.w byte_17D00-Ani_Eggman
00019CA6 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00019CAA 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00019CAE 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00019CB2 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00019CB6 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00019CBA 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00019CBE 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00019CC2 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00019CC6 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00019CCA 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00019CCE 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00019CD2 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00019CDE                            		even
00019CDE                            		even
00019CDE                            
00019CDE                            ; ---------------------------------------------------------------------------
00019CDE                            ; Sprite mappings - Eggman (boss levels)
00019CDE                            ; ---------------------------------------------------------------------------
00019CDE                            Map_Eggman:
00019CDE                            	include "_maps\Eggman.asm"
00019CDE                            ; ---------------------------------------------------------------------------
00019CDE                            ; Sprite mappings - Eggman (boss levels)
00019CDE                            ; ---------------------------------------------------------------------------
00019CDE 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00019CE2 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00019CE6 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
00019CEA 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
00019CEE 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
00019CF2 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
00019CF6 0000                       		dc.w byte_17DC8-Map_Eggman
00019CF8 06                         byte_17D26:	dc.b 6
00019CF9 EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
00019CFE EC01 000E 14               		dc.b $EC, 1, 0,	$E, $14
00019D03 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
00019D08 FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
00019D0D 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00019D12 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00019D17 02                         byte_17D45:	dc.b 2
00019D18 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019D1D EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00019D22 02                         byte_17D50:	dc.b 2
00019D23 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019D28 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019D2D 03                         byte_17D5B:	dc.b 3
00019D2E E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
00019D33 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00019D38 EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00019D3D 03                         byte_17D6B:	dc.b 3
00019D3E E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
00019D43 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00019D48 EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00019D4D 03                         byte_17D7B:	dc.b 3
00019D4E E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019D53 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019D58 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019D5D 03                         byte_17D8B:	dc.b 3
00019D5E E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
00019D63 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019D68 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019D6D 04                         byte_17D9B:	dc.b 4
00019D6E E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
00019D73 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019D78 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019D7D EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019D82 01                         byte_17DB0:	dc.b 1
00019D83 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00019D88 01                         byte_17DB6:	dc.b 1
00019D89 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00019D8E 00                         byte_17DBC:	dc.b 0
00019D8F 02                         byte_17DBD:	dc.b 2
00019D90 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00019D95 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
00019D9A 02                         byte_17DC8:	dc.b 2
00019D9B F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00019DA0 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00019DA6 00                         		even
00019DA6 00                         		even
00019DA6                            
00019DA6                            ; ---------------------------------------------------------------------------
00019DA6                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019DA6                            ; ---------------------------------------------------------------------------
00019DA6                            Map_BossItems:
00019DA6                            	include "_maps\Boss items.asm"
00019DA6                            ; ---------------------------------------------------------------------------
00019DA6                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019DA6                            ; ---------------------------------------------------------------------------
00019DA6 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00019DAA 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00019DAE 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00019DB2 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00019DB6 01                         byte_17DE4:	dc.b 1
00019DB7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019DBC 02                         byte_17DEA:	dc.b 2
00019DBD FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00019DC2 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019DC7 00                         		dc.b 0
00019DC8 01                         byte_17DF6:	dc.b 1
00019DC9 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00019DCE 01                         byte_17DFC:	dc.b 1
00019DCF 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00019DD4 01                         byte_17E02:	dc.b 1
00019DD5 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00019DDA 04                         byte_17E08:	dc.b 4
00019DDB F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00019DE0 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00019DE5 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00019DEA 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00019DEF 00                         		dc.b 0
00019DF0 02                         byte_17E1E:	dc.b 2
00019DF1 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00019DF6 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00019DFB 00                         		dc.b 0
00019DFC 02                         byte_17E2A:	dc.b 2
00019DFD 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00019E02 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00019E08 00                         		even
00019E08 00                         		even
00019E08                            
00019E08                            ; ===========================================================================
00019E08                            ; ---------------------------------------------------------------------------
00019E08                            ; Object 77 - Eggman (LZ)
00019E08                            ; ---------------------------------------------------------------------------
00019E08                            
00019E08                            Obj77:					; XREF: Obj_Index
00019E08 7000                       		moveq	#0,d0
00019E0A 1028 0024                  		move.b	$24(a0),d0
00019E0E 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00019E12 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00019E16                            ; ===========================================================================
00019E16 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00019E18 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00019E1A 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00019E1C 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00019E1E                            
00019E1E 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00019E20 0401                       		dc.b 4,	1
00019E22 0607                       		dc.b 6,	7
00019E24                            ; ===========================================================================
00019E24                            
00019E24                            Obj77_Main:				; XREF: Obj77_Index
00019E24 317C 1E10 0008             		move.w	#$1E10,8(a0)
00019E2A 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00019E30 3168 0008 0030             		move.w	8(a0),$30(a0)
00019E36 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019E3C 117C 000F 0020             		move.b	#$F,$20(a0)
00019E42 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019E48 117C 0004 0018             		move.b	#4,$18(a0)
00019E4E 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00019E52 2248                       		movea.l	a0,a1
00019E54 7202                       		moveq	#2,d1
00019E56 6000                       		bra.s	Obj77_LoadBoss
00019E58                            ; ===========================================================================
00019E58                            
00019E58                            Obj77_Loop:
00019E58 4EB9 0000 F0B6             		jsr	SingleObjLoad2
00019E5E 6600                       		bne.s	Obj77_ShipMain
00019E60 12BC 0077                  		move.b	#$77,0(a1)
00019E64 3368 0008 0008             		move.w	8(a0),8(a1)
00019E6A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019E70                            
00019E70                            Obj77_LoadBoss:				; XREF: Obj77_Main
00019E70 08A8 0000 0022             		bclr	#0,$22(a0)
00019E76 4229 0025                  		clr.b	$25(a1)
00019E7A 135A 0024                  		move.b	(a2)+,$24(a1)
00019E7E 135A 001C                  		move.b	(a2)+,$1C(a1)
00019E82 1368 0018 0018             		move.b	$18(a0),$18(a1)
00019E88 237C 0001 9CDE 0004        		move.l	#Map_Eggman,4(a1)
00019E90 337C 0400 0002             		move.w	#$400,2(a1)
00019E96 137C 0004 0001             		move.b	#4,1(a1)
00019E9C 137C 0020 0019             		move.b	#$20,$19(a1)
00019EA2 2348 0034                  		move.l	a0,$34(a1)
00019EA6 51C9 FFB0                  		dbf	d1,Obj77_Loop
00019EAA                            
00019EAA                            Obj77_ShipMain:
00019EAA 43F8 D000                  		lea	($FFFFD000).w,a1
00019EAE 7000                       		moveq	#0,d0
00019EB0 1028 0025                  		move.b	$25(a0),d0
00019EB4 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00019EB8 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
00019EBC 43F9 0001 9C8E             		lea	(Ani_Eggman).l,a1
00019EC2 4EB9 0000 B9AA             		jsr	AnimateSprite
00019EC8 7003                       		moveq	#3,d0
00019ECA C028 0022                  		and.b	$22(a0),d0
00019ECE 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019ED4 8128 0001                  		or.b	d0,1(a0)
00019ED8 4EF9 0000 E94A             		jmp	DisplaySprite
00019EDE                            ; ===========================================================================
00019EDE 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00019EE2 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00019EE6 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00019EEA 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
00019EEE                            ; ===========================================================================
00019EEE                            
00019EEE                            loc_17F1E:				; XREF: Obj77_ShipIndex
00019EEE 3029 0008                  		move.w	8(a1),d0
00019EF2 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00019EF6 6500                       		bcs.s	loc_17F38
00019EF8 317C FE80 0012             		move.w	#-$180,$12(a0)
00019EFE 317C 0060 0010             		move.w	#$60,$10(a0)
00019F04 5428 0025                  		addq.b	#2,$25(a0)
00019F08                            
00019F08                            loc_17F38:
00019F08 6100 F974                  		bsr.w	BossMove
00019F0C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019F12 3168 0030 0008             		move.w	$30(a0),8(a0)
00019F18                            
00019F18                            loc_17F48:
00019F18 4A28 003D                  		tst.b	$3D(a0)
00019F1C 6600                       		bne.s	loc_17F8E
00019F1E 4A28 0022                  		tst.b	$22(a0)
00019F22 6B00                       		bmi.s	loc_17F92
00019F24 4A28 0020                  		tst.b	$20(a0)
00019F28 6600                       		bne.s	locret_17F8C
00019F2A 4A28 003E                  		tst.b	$3E(a0)
00019F2E 6600                       		bne.s	loc_17F70
00019F30 117C 0020 003E             		move.b	#$20,$3E(a0)
00019F36 303C 00AC                  		move.w	#$AC,d0
00019F3A 4EB9 0000 11F6             		jsr	(PlaySound_Special).l
00019F40                            
00019F40                            loc_17F70:
00019F40 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019F44 7000                       		moveq	#0,d0
00019F46 4A51                       		tst.w	(a1)
00019F48 6600                       		bne.s	loc_17F7E
00019F4A 303C 0EEE                  		move.w	#$EEE,d0
00019F4E                            
00019F4E                            loc_17F7E:
00019F4E 3280                       		move.w	d0,(a1)
00019F50 5328 003E                  		subq.b	#1,$3E(a0)
00019F54 6600                       		bne.s	locret_17F8C
00019F56 117C 000F 0020             		move.b	#$F,$20(a0)
00019F5C                            
00019F5C                            locret_17F8C:
00019F5C 4E75                       		rts	
00019F5E                            ; ===========================================================================
00019F5E                            
00019F5E                            loc_17F8E:				; XREF: loc_17F48
00019F5E 6000 F8D0                  		bra.w	BossDefeated
00019F62                            ; ===========================================================================
00019F62                            
00019F62                            loc_17F92:				; XREF: loc_17F48
00019F62 7064                       		moveq	#100,d0
00019F64 6100 0000                  		bsr.w	AddPoints
00019F68 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019F6E 4E75                       		rts	
00019F70                            ; ===========================================================================
00019F70                            
00019F70                            loc_17FA0:				; XREF: Obj77_ShipIndex
00019F70 70FE                       		moveq	#-2,d0
00019F72 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00019F78 6500                       		bcs.s	loc_17FB6
00019F7A 317C 1E48 0030             		move.w	#$1E48,$30(a0)
00019F80 4268 0010                  		clr.w	$10(a0)
00019F84 5240                       		addq.w	#1,d0
00019F86                            
00019F86                            loc_17FB6:
00019F86 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
00019F8C 6E00                       		bgt.s	loc_17FCA
00019F8E 317C 0500 0038             		move.w	#$500,$38(a0)
00019F94 4268 0012                  		clr.w	$12(a0)
00019F98 5240                       		addq.w	#1,d0
00019F9A                            
00019F9A                            loc_17FCA:
00019F9A 6600                       		bne.s	loc_17FDC
00019F9C 317C 0140 0010             		move.w	#$140,$10(a0)
00019FA2 317C FE00 0012             		move.w	#-$200,$12(a0)
00019FA8 5428 0025                  		addq.b	#2,$25(a0)
00019FAC                            
00019FAC                            loc_17FDC:
00019FAC 6000 FF5A                  		bra.w	loc_17F38
00019FB0                            ; ===========================================================================
00019FB0                            
00019FB0                            loc_17FE0:				; XREF: Obj77_ShipIndex
00019FB0 70FE                       		moveq	#-2,d0
00019FB2 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
00019FB8 6500                       		bcs.s	loc_17FF6
00019FBA 317C 1E70 0030             		move.w	#$1E70,$30(a0)
00019FC0 4268 0010                  		clr.w	$10(a0)
00019FC4 5240                       		addq.w	#1,d0
00019FC6                            
00019FC6                            loc_17FF6:
00019FC6 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
00019FCC 6E00                       		bgt.s	loc_1800A
00019FCE 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00019FD4 4268 0012                  		clr.w	$12(a0)
00019FD8 5240                       		addq.w	#1,d0
00019FDA                            
00019FDA                            loc_1800A:
00019FDA 6600                       		bne.s	loc_1801A
00019FDC 317C FE80 0012             		move.w	#-$180,$12(a0)
00019FE2 5428 0025                  		addq.b	#2,$25(a0)
00019FE6 4228 003F                  		clr.b	$3F(a0)
00019FEA                            
00019FEA                            loc_1801A:
00019FEA 6000 FF1C                  		bra.w	loc_17F38
00019FEE                            ; ===========================================================================
00019FEE                            
00019FEE                            loc_1801E:				; XREF: Obj77_ShipIndex
00019FEE 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
00019FF4 6E00                       		bgt.s	loc_1804E
00019FF6 317C 0100 0038             		move.w	#$100,$38(a0)
00019FFC 317C 0140 0010             		move.w	#$140,$10(a0)
0001A002 317C FF80 0012             		move.w	#-$80,$12(a0)
0001A008 4A28 003D                  		tst.b	$3D(a0)
0001A00C 6700                       		beq.s	loc_18046
0001A00E E1E8 0010                  		asl	$10(a0)
0001A012 E1E8 0012                  		asl	$12(a0)
0001A016                            
0001A016                            loc_18046:
0001A016 5428 0025                  		addq.b	#2,$25(a0)
0001A01A 6000 FEEC                  		bra.w	loc_17F38
0001A01E                            ; ===========================================================================
0001A01E                            
0001A01E                            loc_1804E:
0001A01E 08E8 0000 0022             		bset	#0,$22(a0)
0001A024 5428 003F                  		addq.b	#2,$3F(a0)
0001A028 1028 003F                  		move.b	$3F(a0),d0
0001A02C 4EB9 0000 29CC             		jsr	(CalcSine).l
0001A032 4A41                       		tst.w	d1
0001A034 6A00                       		bpl.s	loc_1806C
0001A036 08A8 0000 0022             		bclr	#0,$22(a0)
0001A03C                            
0001A03C                            loc_1806C:
0001A03C E840                       		asr.w	#4,d0
0001A03E 4840                       		swap	d0
0001A040 4240                       		clr.w	d0
0001A042 D0A8 0030                  		add.l	$30(a0),d0
0001A046 4840                       		swap	d0
0001A048 3140 0008                  		move.w	d0,8(a0)
0001A04C 3028 0012                  		move.w	$12(a0),d0
0001A050 3238 D00C                  		move.w	($FFFFD00C).w,d1
0001A054 9268 000C                  		sub.w	$C(a0),d1
0001A058 6500                       		bcs.s	loc_180A2
0001A05A 0441 0048                  		subi.w	#$48,d1
0001A05E 6500                       		bcs.s	loc_180A2
0001A060 E240                       		asr.w	#1,d0
0001A062 0441 0028                  		subi.w	#$28,d1
0001A066 6500                       		bcs.s	loc_180A2
0001A068 E240                       		asr.w	#1,d0
0001A06A 0441 0028                  		subi.w	#$28,d1
0001A06E 6500                       		bcs.s	loc_180A2
0001A070 7000                       		moveq	#0,d0
0001A072                            
0001A072                            loc_180A2:
0001A072 48C0                       		ext.l	d0
0001A074 E180                       		asl.l	#8,d0
0001A076 4A28 003D                  		tst.b	$3D(a0)
0001A07A 6700                       		beq.s	loc_180AE
0001A07C D080                       		add.l	d0,d0
0001A07E                            
0001A07E                            loc_180AE:
0001A07E D1A8 0038                  		add.l	d0,$38(a0)
0001A082 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A088 6000 FE8E                  		bra.w	loc_17F48
0001A08C                            ; ===========================================================================
0001A08C                            
0001A08C                            loc_180BC:				; XREF: Obj77_ShipIndex
0001A08C 70FE                       		moveq	#-2,d0
0001A08E 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001A094 6500                       		bcs.s	loc_180D2
0001A096 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001A09C 4268 0010                  		clr.w	$10(a0)
0001A0A0 5240                       		addq.w	#1,d0
0001A0A2                            
0001A0A2                            loc_180D2:
0001A0A2 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001A0A8 6E00                       		bgt.s	loc_180E6
0001A0AA 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001A0B0 4268 0012                  		clr.w	$12(a0)
0001A0B4 5240                       		addq.w	#1,d0
0001A0B6                            
0001A0B6                            loc_180E6:
0001A0B6 6600                       		bne.s	loc_180F2
0001A0B8 5428 0025                  		addq.b	#2,$25(a0)
0001A0BC 08A8 0000 0022             		bclr	#0,$22(a0)
0001A0C2                            
0001A0C2                            loc_180F2:
0001A0C2 6000 FE44                  		bra.w	loc_17F38
0001A0C6                            ; ===========================================================================
0001A0C6                            
0001A0C6                            loc_180F6:				; XREF: Obj77_ShipIndex
0001A0C6 4A28 003D                  		tst.b	$3D(a0)
0001A0CA 6600                       		bne.s	loc_18112
0001A0CC 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
0001A0D2 6D00                       		blt.s	loc_18126
0001A0D4 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
0001A0DA 6E00                       		bgt.s	loc_18126
0001A0DC 117C 0032 003C             		move.b	#$32,$3C(a0)
0001A0E2                            
0001A0E2                            loc_18112:
0001A0E2 303C 0082                  		move.w	#$82,d0
0001A0E6 4EB9 0000 11F0             		jsr	(PlaySound).l	; play LZ music
0001A0EC 08E8 0000 0022             		bset	#0,$22(a0)
0001A0F2 5428 0025                  		addq.b	#2,$25(a0)
0001A0F6                            
0001A0F6                            loc_18126:
0001A0F6 6000 FE10                  		bra.w	loc_17F38
0001A0FA                            ; ===========================================================================
0001A0FA                            
0001A0FA                            loc_1812A:				; XREF: Obj77_ShipIndex
0001A0FA 4A28 003D                  		tst.b	$3D(a0)
0001A0FE 6600                       		bne.s	loc_18136
0001A100 5328 003C                  		subq.b	#1,$3C(a0)
0001A104 6600                       		bne.s	loc_1814E
0001A106                            
0001A106                            loc_18136:
0001A106 4228 003C                  		clr.b	$3C(a0)
0001A10A 317C 0400 0010             		move.w	#$400,$10(a0)
0001A110 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A116 4228 003D                  		clr.b	$3D(a0)
0001A11A 5428 0025                  		addq.b	#2,$25(a0)
0001A11E                            
0001A11E                            loc_1814E:
0001A11E 6000 FDE8                  		bra.w	loc_17F38
0001A122                            ; ===========================================================================
0001A122                            
0001A122                            loc_18152:				; XREF: Obj77_ShipIndex
0001A122 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
0001A128 6400                       		bcc.s	loc_18160
0001A12A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A12E 6000                       		bra.s	loc_18166
0001A130                            ; ===========================================================================
0001A130                            
0001A130                            loc_18160:
0001A130 4A28 0001                  		tst.b	1(a0)
0001A134 6A00                       		bpl.s	Obj77_ShipDel
0001A136                            
0001A136                            loc_18166:
0001A136 6000 FDD0                  		bra.w	loc_17F38
0001A13A                            ; ===========================================================================
0001A13A                            
0001A13A                            Obj77_ShipDel:
0001A13A 4EF9 0000 E99A             		jmp	DeleteObject
0001A140                            ; ===========================================================================
0001A140                            
0001A140                            Obj77_FaceMain:				; XREF: Obj77_Index
0001A140 2268 0034                  		movea.l	$34(a0),a1
0001A144 1011                       		move.b	(a1),d0
0001A146 B010                       		cmp.b	(a0),d0
0001A148 6600                       		bne.s	Obj77_FaceDel
0001A14A 7000                       		moveq	#0,d0
0001A14C 1029 0025                  		move.b	$25(a1),d0
0001A150 7201                       		moveq	#1,d1
0001A152 4A28 003D                  		tst.b	$3D(a0)
0001A156 6700                       		beq.s	loc_1818C
0001A158 720A                       		moveq	#$A,d1
0001A15A 6000                       		bra.s	loc_181A0
0001A15C                            ; ===========================================================================
0001A15C                            
0001A15C                            loc_1818C:
0001A15C 4A29 0020                  		tst.b	$20(a1)
0001A160 6600                       		bne.s	loc_18196
0001A162 7205                       		moveq	#5,d1
0001A164 6000                       		bra.s	loc_181A0
0001A166                            ; ===========================================================================
0001A166                            
0001A166                            loc_18196:
0001A166 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A16C 6500                       		bcs.s	loc_181A0
0001A16E 7204                       		moveq	#4,d1
0001A170                            
0001A170                            loc_181A0:
0001A170 1141 001C                  		move.b	d1,$1C(a0)
0001A174 0C00 000E                  		cmpi.b	#$E,d0
0001A178 6600                       		bne.s	loc_181B6
0001A17A 117C 0006 001C             		move.b	#6,$1C(a0)
0001A180 4A28 0001                  		tst.b	1(a0)
0001A184 6A00                       		bpl.s	Obj77_FaceDel
0001A186                            
0001A186                            loc_181B6:
0001A186 6000                       		bra.s	Obj77_Display
0001A188                            ; ===========================================================================
0001A188                            
0001A188                            Obj77_FaceDel:
0001A188 4EF9 0000 E99A             		jmp	DeleteObject
0001A18E                            ; ===========================================================================
0001A18E                            
0001A18E                            Obj77_FlameMain:			; XREF: Obj77_Index
0001A18E 117C 0007 001C             		move.b	#7,$1C(a0)
0001A194 2268 0034                  		movea.l	$34(a0),a1
0001A198 1011                       		move.b	(a1),d0
0001A19A B010                       		cmp.b	(a0),d0
0001A19C 6600                       		bne.s	Obj77_FlameDel
0001A19E 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
0001A1A4 6600                       		bne.s	loc_181F0
0001A1A6 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A1AC 4A28 0001                  		tst.b	1(a0)
0001A1B0 6A00                       		bpl.s	Obj77_FlameDel
0001A1B2 6000                       		bra.s	loc_181F0
0001A1B4                            ; ===========================================================================
0001A1B4 4A69 0010                  		tst.w	$10(a1)
0001A1B8 6700                       		beq.s	loc_181F0
0001A1BA 117C 0008 001C             		move.b	#8,$1C(a0)
0001A1C0                            
0001A1C0                            loc_181F0:
0001A1C0 6000                       		bra.s	Obj77_Display
0001A1C2                            ; ===========================================================================
0001A1C2                            
0001A1C2                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
0001A1C2 4EF9 0000 E99A             		jmp	DeleteObject
0001A1C8                            ; ===========================================================================
0001A1C8                            
0001A1C8                            Obj77_Display:
0001A1C8 43F9 0001 9C8E             		lea	(Ani_Eggman).l,a1
0001A1CE 4EB9 0000 B9AA             		jsr	AnimateSprite
0001A1D4 2268 0034                  		movea.l	$34(a0),a1
0001A1D8 3169 0008 0008             		move.w	8(a1),8(a0)
0001A1DE 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A1E4 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A1EA 7003                       		moveq	#3,d0
0001A1EC C028 0022                  		and.b	$22(a0),d0
0001A1F0 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A1F6 8128 0001                  		or.b	d0,1(a0)
0001A1FA 4EF9 0000 E94A             		jmp	DisplaySprite
0001A200                            ; ===========================================================================
0001A200                            ; ---------------------------------------------------------------------------
0001A200                            ; Object 73 - Eggman (MZ)
0001A200                            ; ---------------------------------------------------------------------------
0001A200                            
0001A200                            Obj73:					; XREF: Obj_Index
0001A200 7000                       		moveq	#0,d0
0001A202 1028 0024                  		move.b	$24(a0),d0
0001A206 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001A20A 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001A20E                            ; ===========================================================================
0001A20E 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001A210 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001A212 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001A214 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001A216 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001A218                            
0001A218 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A21B 0401 04                    		dc.b 4,	1, 4
0001A21E 0607 04                    		dc.b 6,	7, 4
0001A221 0800 03                    		dc.b 8,	0, 3
0001A224                            ; ===========================================================================
0001A224                            
0001A224                            Obj73_Main:				; XREF: Obj73_Index
0001A224 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A22A 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A230 117C 000F 0020             		move.b	#$F,$20(a0)
0001A236 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A23C 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001A240 2248                       		movea.l	a0,a1
0001A242 7203                       		moveq	#3,d1
0001A244 6000                       		bra.s	Obj73_LoadBoss
0001A246                            ; ===========================================================================
0001A246                            
0001A246                            Obj73_Loop:
0001A246 4EB9 0000 F0B6             		jsr	SingleObjLoad2
0001A24C 6600                       		bne.s	Obj73_ShipMain
0001A24E 12BC 0073                  		move.b	#$73,0(a1)
0001A252 3368 0008 0008             		move.w	8(a0),8(a1)
0001A258 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A25E                            
0001A25E                            Obj73_LoadBoss:				; XREF: Obj73_Main
0001A25E 08A8 0000 0022             		bclr	#0,$22(a0)
0001A264 4229 0025                  		clr.b	$25(a1)
0001A268 135A 0024                  		move.b	(a2)+,$24(a1)
0001A26C 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A270 135A 0018                  		move.b	(a2)+,$18(a1)
0001A274 237C 0001 9CDE 0004        		move.l	#Map_Eggman,4(a1)
0001A27C 337C 0400 0002             		move.w	#$400,2(a1)
0001A282 137C 0004 0001             		move.b	#4,1(a1)
0001A288 137C 0020 0019             		move.b	#$20,$19(a1)
0001A28E 2348 0034                  		move.l	a0,$34(a1)
0001A292 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001A296                            
0001A296                            Obj73_ShipMain:
0001A296 7000                       		moveq	#0,d0
0001A298 1028 0025                  		move.b	$25(a0),d0
0001A29C 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001A2A0 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001A2A4 43F9 0001 9C8E             		lea	(Ani_Eggman).l,a1
0001A2AA 4EB9 0000 B9AA             		jsr	AnimateSprite
0001A2B0 7003                       		moveq	#3,d0
0001A2B2 C028 0022                  		and.b	$22(a0),d0
0001A2B6 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A2BC 8128 0001                  		or.b	d0,1(a0)
0001A2C0 4EF9 0000 E94A             		jmp	DisplaySprite
0001A2C6                            ; ===========================================================================
0001A2C6 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001A2C8 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001A2CA 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001A2CC 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001A2CE 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001A2D0                            ; ===========================================================================
0001A2D0                            
0001A2D0                            loc_18302:				; XREF: Obj73_ShipIndex
0001A2D0 1028 003F                  		move.b	$3F(a0),d0
0001A2D4 5428 003F                  		addq.b	#2,$3F(a0)
0001A2D8 4EB9 0000 29CC             		jsr	(CalcSine).l
0001A2DE E440                       		asr.w	#2,d0
0001A2E0 3140 0012                  		move.w	d0,$12(a0)
0001A2E4 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A2EA 6100 F592                  		bsr.w	BossMove
0001A2EE 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A2F4 6600                       		bne.s	loc_18334
0001A2F6 5428 0025                  		addq.b	#2,$25(a0)
0001A2FA 4228 0028                  		clr.b	$28(a0)
0001A2FE 42A8 0010                  		clr.l	$10(a0)
0001A302                            
0001A302                            loc_18334:
0001A302 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001A308 1140 0034                  		move.b	d0,$34(a0)
0001A30C                            
0001A30C                            loc_1833E:
0001A30C 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A312 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A318 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0001A31E 6400                       		bcc.s	locret_18390
0001A320 4A28 0022                  		tst.b	$22(a0)
0001A324 6B00                       		bmi.s	loc_18392
0001A326 4A28 0020                  		tst.b	$20(a0)
0001A32A 6600                       		bne.s	locret_18390
0001A32C 4A28 003E                  		tst.b	$3E(a0)
0001A330 6600                       		bne.s	loc_18374
0001A332 117C 0028 003E             		move.b	#$28,$3E(a0)
0001A338 303C 00AC                  		move.w	#$AC,d0
0001A33C 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A342                            
0001A342                            loc_18374:
0001A342 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A346 7000                       		moveq	#0,d0
0001A348 4A51                       		tst.w	(a1)
0001A34A 6600                       		bne.s	loc_18382
0001A34C 303C 0EEE                  		move.w	#$EEE,d0
0001A350                            
0001A350                            loc_18382:
0001A350 3280                       		move.w	d0,(a1)
0001A352 5328 003E                  		subq.b	#1,$3E(a0)
0001A356 6600                       		bne.s	locret_18390
0001A358 117C 000F 0020             		move.b	#$F,$20(a0)
0001A35E                            
0001A35E                            locret_18390:
0001A35E 4E75                       		rts	
0001A360                            ; ===========================================================================
0001A360                            
0001A360                            loc_18392:				; XREF: loc_1833E
0001A360 7064                       		moveq	#100,d0
0001A362 6100 0000                  		bsr.w	AddPoints
0001A366 117C 0004 0025             		move.b	#4,$25(a0)
0001A36C 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001A372 4268 0010                  		clr.w	$10(a0)
0001A376 4E75                       		rts	
0001A378                            ; ===========================================================================
0001A378                            
0001A378                            loc_183AA:				; XREF: Obj73_ShipIndex
0001A378 7000                       		moveq	#0,d0
0001A37A 1028 0028                  		move.b	$28(a0),d0
0001A37E 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001A382 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001A386 0228 0006 0028             		andi.b	#6,$28(a0)
0001A38C 6000 FF7E                  		bra.w	loc_1833E
0001A390                            ; ===========================================================================
0001A390 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001A392 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A394 0000                       		dc.w loc_183CA-off_183C2
0001A396 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A398                            ; ===========================================================================
0001A398                            
0001A398                            loc_183CA:				; XREF: off_183C2
0001A398 4A68 0010                  		tst.w	$10(a0)
0001A39C 6600                       		bne.s	loc_183FE
0001A39E 7040                       		moveq	#$40,d0
0001A3A0 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A3A6 6700                       		beq.s	loc_183E6
0001A3A8 6500                       		bcs.s	loc_183DE
0001A3AA 4440                       		neg.w	d0
0001A3AC                            
0001A3AC                            loc_183DE:
0001A3AC 3140 0012                  		move.w	d0,$12(a0)
0001A3B0 6000 F4CC                  		bra.w	BossMove
0001A3B4                            ; ===========================================================================
0001A3B4                            
0001A3B4                            loc_183E6:
0001A3B4 317C 0200 0010             		move.w	#$200,$10(a0)
0001A3BA 317C 0100 0012             		move.w	#$100,$12(a0)
0001A3C0 0828 0000 0022             		btst	#0,$22(a0)
0001A3C6 6600                       		bne.s	loc_183FE
0001A3C8 4468 0010                  		neg.w	$10(a0)
0001A3CC                            
0001A3CC                            loc_183FE:
0001A3CC 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001A3D2 6400                       		bcc.s	Obj73_MakeLava
0001A3D4 6100 F4A8                  		bsr.w	BossMove
0001A3D8 5968 0012                  		subq.w	#4,$12(a0)
0001A3DC                            
0001A3DC                            Obj73_MakeLava:
0001A3DC 5328 0034                  		subq.b	#1,$34(a0)
0001A3E0 6400                       		bcc.s	loc_1845C
0001A3E2 4EB9 0000 F0A0             		jsr	SingleObjLoad
0001A3E8 6600                       		bne.s	loc_1844A
0001A3EA 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0001A3EE 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
0001A3F4 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001A3FA 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001A400 80FC 0050                  		divu.w	#$50,d0
0001A404 4840                       		swap	d0
0001A406 0640 1878                  		addi.w	#$1878,d0
0001A40A 3340 0008                  		move.w	d0,8(a1)
0001A40E EE09                       		lsr.b	#7,d1
0001A410 337C 00FF 0028             		move.w	#$FF,$28(a1)
0001A416                            
0001A416                            loc_1844A:
0001A416 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001A41C 0200 001F                  		andi.b	#$1F,d0
0001A420 0600 0040                  		addi.b	#$40,d0
0001A424 1140 0034                  		move.b	d0,$34(a0)
0001A428                            
0001A428                            loc_1845C:
0001A428 0828 0000 0022             		btst	#0,$22(a0)
0001A42E 6700                       		beq.s	loc_18474
0001A430 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A436 6D00                       		blt.s	locret_1849C
0001A438 317C 1910 0030             		move.w	#$1910,$30(a0)
0001A43E 6000                       		bra.s	loc_18482
0001A440                            ; ===========================================================================
0001A440                            
0001A440                            loc_18474:
0001A440 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001A446 6E00                       		bgt.s	locret_1849C
0001A448 317C 1830 0030             		move.w	#$1830,$30(a0)
0001A44E                            
0001A44E                            loc_18482:
0001A44E 4268 0010                  		clr.w	$10(a0)
0001A452 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A458 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A45E 6400                       		bcc.s	loc_18498
0001A460 4468 0012                  		neg.w	$12(a0)
0001A464                            
0001A464                            loc_18498:
0001A464 5428 0028                  		addq.b	#2,$28(a0)
0001A468                            
0001A468                            locret_1849C:
0001A468 4E75                       		rts	
0001A46A                            ; ===========================================================================
0001A46A                            
0001A46A                            Obj73_MakeLava2:			; XREF: off_183C2
0001A46A 6100 F412                  		bsr.w	BossMove
0001A46E 3028 0038                  		move.w	$38(a0),d0
0001A472 0440 022C                  		subi.w	#$22C,d0
0001A476 6E00                       		bgt.s	locret_184F4
0001A478 303C 022C                  		move.w	#$22C,d0
0001A47C 4A68 0012                  		tst.w	$12(a0)
0001A480 6700                       		beq.s	loc_184EA
0001A482 4268 0012                  		clr.w	$12(a0)
0001A486 317C 0050 003C             		move.w	#$50,$3C(a0)
0001A48C 0868 0000 0022             		bchg	#0,$22(a0)
0001A492 4EB9 0000 F0A0             		jsr	SingleObjLoad
0001A498 6600                       		bne.s	loc_184EA
0001A49A 3368 0030 0008             		move.w	$30(a0),8(a1)
0001A4A0 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001A4A6 0669 0018 000C             		addi.w	#$18,$C(a1)
0001A4AC 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001A4B0 137C 0001 0028             		move.b	#1,$28(a1)
0001A4B6                            
0001A4B6                            loc_184EA:
0001A4B6 5368 003C                  		subq.w	#1,$3C(a0)
0001A4BA 6600                       		bne.s	locret_184F4
0001A4BC 5428 0028                  		addq.b	#2,$28(a0)
0001A4C0                            
0001A4C0                            locret_184F4:
0001A4C0 4E75                       		rts	
0001A4C2                            ; ===========================================================================
0001A4C2                            
0001A4C2                            loc_184F6:				; XREF: Obj73_ShipIndex
0001A4C2 5368 003C                  		subq.w	#1,$3C(a0)
0001A4C6 6B00                       		bmi.s	loc_18500
0001A4C8 6000 F366                  		bra.w	BossDefeated
0001A4CC                            ; ===========================================================================
0001A4CC                            
0001A4CC                            loc_18500:
0001A4CC 08E8 0000 0022             		bset	#0,$22(a0)
0001A4D2 08A8 0007 0022             		bclr	#7,$22(a0)
0001A4D8 4268 0010                  		clr.w	$10(a0)
0001A4DC 5428 0025                  		addq.b	#2,$25(a0)
0001A4E0 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001A4E6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A4EA 6600                       		bne.s	locret_1852A
0001A4EC 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A4F2 4268 0012                  		clr.w	$12(a0)
0001A4F6                            
0001A4F6                            locret_1852A:
0001A4F6 4E75                       		rts	
0001A4F8                            ; ===========================================================================
0001A4F8                            
0001A4F8                            loc_1852C:				; XREF: Obj73_ShipIndex
0001A4F8 5268 003C                  		addq.w	#1,$3C(a0)
0001A4FC 6700                       		beq.s	loc_18544
0001A4FE 6A00                       		bpl.s	loc_1854E
0001A500 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001A506 6400                       		bcc.s	loc_18544
0001A508 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A50E 6000                       		bra.s	loc_1857A
0001A510                            ; ===========================================================================
0001A510                            
0001A510                            loc_18544:
0001A510 4268 0012                  		clr.w	$12(a0)
0001A514 4268 003C                  		clr.w	$3C(a0)
0001A518 6000                       		bra.s	loc_1857A
0001A51A                            ; ===========================================================================
0001A51A                            
0001A51A                            loc_1854E:
0001A51A 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001A520 6500                       		bcs.s	loc_18566
0001A522 6700                       		beq.s	loc_1856C
0001A524 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001A52A 6500                       		bcs.s	loc_1857A
0001A52C 5428 0025                  		addq.b	#2,$25(a0)
0001A530 6000                       		bra.s	loc_1857A
0001A532                            ; ===========================================================================
0001A532                            
0001A532                            loc_18566:
0001A532 5168 0012                  		subq.w	#8,$12(a0)
0001A536 6000                       		bra.s	loc_1857A
0001A538                            ; ===========================================================================
0001A538                            
0001A538                            loc_1856C:
0001A538 4268 0012                  		clr.w	$12(a0)
0001A53C 303C 0083                  		move.w	#$83,d0
0001A540 4EB9 0000 11F0             		jsr	(PlaySound).l	; play MZ music
0001A546                            
0001A546                            loc_1857A:
0001A546 6100 F336                  		bsr.w	BossMove
0001A54A 6000 FDC0                  		bra.w	loc_1833E
0001A54E                            ; ===========================================================================
0001A54E                            
0001A54E                            loc_18582:				; XREF: Obj73_ShipIndex
0001A54E 317C 0500 0010             		move.w	#$500,$10(a0)
0001A554 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A55A 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
0001A560 6400                       		bcc.s	loc_1859C
0001A562 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A566 6000                       		bra.s	loc_185A2
0001A568                            ; ===========================================================================
0001A568                            
0001A568                            loc_1859C:
0001A568 4A28 0001                  		tst.b	1(a0)
0001A56C 6A00                       		bpl.s	Obj73_ShipDel
0001A56E                            
0001A56E                            loc_185A2:
0001A56E 6100 F30E                  		bsr.w	BossMove
0001A572 6000 FD98                  		bra.w	loc_1833E
0001A576                            ; ===========================================================================
0001A576                            
0001A576                            Obj73_ShipDel:
0001A576 4EF9 0000 E99A             		jmp	DeleteObject
0001A57C                            ; ===========================================================================
0001A57C                            
0001A57C                            Obj73_FaceMain:				; XREF: Obj73_Index
0001A57C 7000                       		moveq	#0,d0
0001A57E 7201                       		moveq	#1,d1
0001A580 2268 0034                  		movea.l	$34(a0),a1
0001A584 1029 0025                  		move.b	$25(a1),d0
0001A588 5540                       		subq.w	#2,d0
0001A58A 6600                       		bne.s	loc_185D2
0001A58C 0829 0001 0028             		btst	#1,$28(a1)
0001A592 6700                       		beq.s	loc_185DA
0001A594 4A69 0012                  		tst.w	$12(a1)
0001A598 6600                       		bne.s	loc_185DA
0001A59A 7204                       		moveq	#4,d1
0001A59C 6000                       		bra.s	loc_185EE
0001A59E                            ; ===========================================================================
0001A59E                            
0001A59E                            loc_185D2:
0001A59E 5500                       		subq.b	#2,d0
0001A5A0 6B00                       		bmi.s	loc_185DA
0001A5A2 720A                       		moveq	#$A,d1
0001A5A4 6000                       		bra.s	loc_185EE
0001A5A6                            ; ===========================================================================
0001A5A6                            
0001A5A6                            loc_185DA:
0001A5A6 4A29 0020                  		tst.b	$20(a1)
0001A5AA 6600                       		bne.s	loc_185E4
0001A5AC 7205                       		moveq	#5,d1
0001A5AE 6000                       		bra.s	loc_185EE
0001A5B0                            ; ===========================================================================
0001A5B0                            
0001A5B0                            loc_185E4:
0001A5B0 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A5B6 6500                       		bcs.s	loc_185EE
0001A5B8 7204                       		moveq	#4,d1
0001A5BA                            
0001A5BA                            loc_185EE:
0001A5BA 1141 001C                  		move.b	d1,$1C(a0)
0001A5BE 5900                       		subq.b	#4,d0
0001A5C0 6600                       		bne.s	loc_18602
0001A5C2 117C 0006 001C             		move.b	#6,$1C(a0)
0001A5C8 4A28 0001                  		tst.b	1(a0)
0001A5CC 6A00                       		bpl.s	Obj73_FaceDel
0001A5CE                            
0001A5CE                            loc_18602:
0001A5CE 6000                       		bra.s	Obj73_Display
0001A5D0                            ; ===========================================================================
0001A5D0                            
0001A5D0                            Obj73_FaceDel:
0001A5D0 4EF9 0000 E99A             		jmp	DeleteObject
0001A5D6                            ; ===========================================================================
0001A5D6                            
0001A5D6                            Obj73_FlameMain:			; XREF: Obj73_Index
0001A5D6 117C 0007 001C             		move.b	#7,$1C(a0)
0001A5DC 2268 0034                  		movea.l	$34(a0),a1
0001A5E0 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A5E6 6D00                       		blt.s	loc_1862A
0001A5E8 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A5EE 4A28 0001                  		tst.b	1(a0)
0001A5F2 6A00                       		bpl.s	Obj73_FlameDel
0001A5F4 6000                       		bra.s	loc_18636
0001A5F6                            ; ===========================================================================
0001A5F6                            
0001A5F6                            loc_1862A:
0001A5F6 4A69 0010                  		tst.w	$10(a1)
0001A5FA 6700                       		beq.s	loc_18636
0001A5FC 117C 0008 001C             		move.b	#8,$1C(a0)
0001A602                            
0001A602                            loc_18636:
0001A602 6000                       		bra.s	Obj73_Display
0001A604                            ; ===========================================================================
0001A604                            
0001A604                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
0001A604 4EF9 0000 E99A             		jmp	DeleteObject
0001A60A                            ; ===========================================================================
0001A60A                            
0001A60A                            Obj73_Display:
0001A60A 43F9 0001 9C8E             		lea	(Ani_Eggman).l,a1
0001A610 4EB9 0000 B9AA             		jsr	AnimateSprite
0001A616                            
0001A616                            loc_1864A:
0001A616 2268 0034                  		movea.l	$34(a0),a1
0001A61A 3169 0008 0008             		move.w	8(a1),8(a0)
0001A620 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A626 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A62C 7003                       		moveq	#3,d0
0001A62E C028 0022                  		and.b	$22(a0),d0
0001A632 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A638 8128 0001                  		or.b	d0,1(a0)
0001A63C 4EF9 0000 E94A             		jmp	DisplaySprite
0001A642                            ; ===========================================================================
0001A642                            
0001A642                            Obj73_TubeMain:				; XREF: Obj73_Index
0001A642 2268 0034                  		movea.l	$34(a0),a1
0001A646 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A64C 6600                       		bne.s	loc_18688
0001A64E 4A28 0001                  		tst.b	1(a0)
0001A652 6A00                       		bpl.s	Obj73_TubeDel
0001A654                            
0001A654                            loc_18688:
0001A654 217C 0001 9DA6 0004        		move.l	#Map_BossItems,4(a0)
0001A65C 317C 246C 0002             		move.w	#$246C,2(a0)
0001A662 117C 0004 001A             		move.b	#4,$1A(a0)
0001A668 60AC                       		bra.s	loc_1864A
0001A66A                            ; ===========================================================================
0001A66A                            
0001A66A                            Obj73_TubeDel:
0001A66A 4EF9 0000 E99A             		jmp	DeleteObject
0001A670                            ; ===========================================================================
0001A670                            ; ---------------------------------------------------------------------------
0001A670                            ; Object 74 - lava that	Eggman drops (MZ)
0001A670                            ; ---------------------------------------------------------------------------
0001A670                            
0001A670                            Obj74:					; XREF: Obj_Index
0001A670 7000                       		moveq	#0,d0
0001A672 1028 0024                  		move.b	$24(a0),d0
0001A676 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001A67A 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001A67E 4EF9 0000 E94A             		jmp	DisplaySprite
0001A684                            ; ===========================================================================
0001A684 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001A686 0000                       		dc.w Obj74_Action-Obj74_Index
0001A688 0000                       		dc.w loc_18886-Obj74_Index
0001A68A 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001A68C                            ; ===========================================================================
0001A68C                            
0001A68C                            Obj74_Main:				; XREF: Obj74_Index
0001A68C 117C 0008 0016             		move.b	#8,$16(a0)
0001A692 117C 0008 0017             		move.b	#8,$17(a0)
0001A698 217C 0000 C644 0004        		move.l	#Map_obj14,4(a0)
0001A6A0 317C 0345 0002             		move.w	#$345,2(a0)
0001A6A6 117C 0004 0001             		move.b	#4,1(a0)
0001A6AC 117C 0005 0018             		move.b	#5,$18(a0)
0001A6B2 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A6B8 117C 0008 0019             		move.b	#8,$19(a0)
0001A6BE 5428 0024                  		addq.b	#2,$24(a0)
0001A6C2 4A28 0028                  		tst.b	$28(a0)
0001A6C6 6600                       		bne.s	loc_1870A
0001A6C8 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A6CE 5428 0024                  		addq.b	#2,$24(a0)
0001A6D2 6000 0000                  		bra.w	loc_18886
0001A6D6                            ; ===========================================================================
0001A6D6                            
0001A6D6                            loc_1870A:
0001A6D6 117C 001E 0029             		move.b	#$1E,$29(a0)
0001A6DC 303C 00AE                  		move.w	#$AE,d0
0001A6E0 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play lava sound
0001A6E6                            
0001A6E6                            Obj74_Action:				; XREF: Obj74_Index
0001A6E6 7000                       		moveq	#0,d0
0001A6E8 1028 0025                  		move.b	$25(a0),d0
0001A6EC 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001A6F0 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001A6F4 4EB9 0000 E930             		jsr	SpeedToPos
0001A6FA 43F9 0000 FD5A             		lea	(Ani_obj14).l,a1
0001A700 4EB9 0000 B9AA             		jsr	AnimateSprite
0001A706 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001A70C 6200                       		bhi.s	Obj74_Delete
0001A70E 4E75                       		rts	
0001A710                            ; ===========================================================================
0001A710                            
0001A710                            Obj74_Delete:
0001A710 4EF9 0000 E99A             		jmp	DeleteObject
0001A716                            ; ===========================================================================
0001A716 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001A718 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001A71A 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001A71C 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001A71E                            ; ===========================================================================
0001A71E                            
0001A71E                            Obj74_Drop:				; XREF: Obj74_Index2
0001A71E 08E8 0001 0022             		bset	#1,$22(a0)
0001A724 5328 0029                  		subq.b	#1,$29(a0)
0001A728 6A00                       		bpl.s	locret_18780
0001A72A 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A730 4228 0028                  		clr.b	$28(a0)
0001A734 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A73A 08A8 0001 0022             		bclr	#1,$22(a0)
0001A740 6100 C6CE                  		bsr.w	ObjHitFloor
0001A744 4A41                       		tst.w	d1
0001A746 6A00                       		bpl.s	locret_18780
0001A748 5428 0025                  		addq.b	#2,$25(a0)
0001A74C                            
0001A74C                            locret_18780:
0001A74C 4E75                       		rts	
0001A74E                            ; ===========================================================================
0001A74E                            
0001A74E                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001A74E 5568 000C                  		subq.w	#2,$C(a0)
0001A752 08E8 0007 0002             		bset	#7,2(a0)
0001A758 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001A75E 4268 0012                  		clr.w	$12(a0)
0001A762 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A768 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A76E 117C 0003 0029             		move.b	#3,$29(a0)
0001A774 4EB9 0000 F0B6             		jsr	SingleObjLoad2
0001A77A 6600                       		bne.s	loc_187CA
0001A77C 47D1                       		lea	(a1),a3
0001A77E 45D0                       		lea	(a0),a2
0001A780 7003                       		moveq	#3,d0
0001A782                            
0001A782                            Obj74_Loop:
0001A782 26DA                       		move.l	(a2)+,(a3)+
0001A784 26DA                       		move.l	(a2)+,(a3)+
0001A786 26DA                       		move.l	(a2)+,(a3)+
0001A788 26DA                       		move.l	(a2)+,(a3)+
0001A78A 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001A78E                            
0001A78E 4469 0010                  		neg.w	$10(a1)
0001A792 5429 0025                  		addq.b	#2,$25(a1)
0001A796                            
0001A796                            loc_187CA:
0001A796 5428 0025                  		addq.b	#2,$25(a0)
0001A79A 4E75                       		rts	
0001A79C                            
0001A79C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A79C                            
0001A79C                            
0001A79C                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001A79C 4EB9 0000 F0B6             		jsr	SingleObjLoad2
0001A7A2 6600                       		bne.s	locret_187EE
0001A7A4 3368 0008 0008             		move.w	8(a0),8(a1)
0001A7AA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A7B0 12BC 0074                  		move.b	#$74,(a1)
0001A7B4 337C 0067 0028             		move.w	#$67,$28(a1)
0001A7BA                            
0001A7BA                            locret_187EE:
0001A7BA 4E75                       		rts	
0001A7BC                            ; End of function Obj74_Duplicate2
0001A7BC                            
0001A7BC                            ; ===========================================================================
0001A7BC                            
0001A7BC                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001A7BC 6100 C652                  		bsr.w	ObjHitFloor
0001A7C0 4A41                       		tst.w	d1
0001A7C2 6A00                       		bpl.s	loc_18826
0001A7C4 3028 0008                  		move.w	8(a0),d0
0001A7C8 0C40 1940                  		cmpi.w	#$1940,d0
0001A7CC 6E00                       		bgt.s	loc_1882C
0001A7CE 3228 0030                  		move.w	$30(a0),d1
0001A7D2 B240                       		cmp.w	d0,d1
0001A7D4 6700                       		beq.s	loc_1881E
0001A7D6 0240 0010                  		andi.w	#$10,d0
0001A7DA 0241 0010                  		andi.w	#$10,d1
0001A7DE B240                       		cmp.w	d0,d1
0001A7E0 6700                       		beq.s	loc_1881E
0001A7E2 61B8                       		bsr.s	Obj74_Duplicate2
0001A7E4 3168 0008 0032             		move.w	8(a0),$32(a0)
0001A7EA                            
0001A7EA                            loc_1881E:
0001A7EA 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A7F0 4E75                       		rts	
0001A7F2                            ; ===========================================================================
0001A7F2                            
0001A7F2                            loc_18826:
0001A7F2 5428 0025                  		addq.b	#2,$25(a0)
0001A7F6 4E75                       		rts	
0001A7F8                            ; ===========================================================================
0001A7F8                            
0001A7F8                            loc_1882C:
0001A7F8 5428 0024                  		addq.b	#2,$24(a0)
0001A7FC 4E75                       		rts	
0001A7FE                            ; ===========================================================================
0001A7FE                            
0001A7FE                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001A7FE 08A8 0001 0022             		bclr	#1,$22(a0)
0001A804 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001A80A 3028 0008                  		move.w	8(a0),d0
0001A80E 9068 0032                  		sub.w	$32(a0),d0
0001A812 6A00                       		bpl.s	loc_1884A
0001A814 4440                       		neg.w	d0
0001A816                            
0001A816                            loc_1884A:
0001A816 0C40 0012                  		cmpi.w	#$12,d0
0001A81A 6600                       		bne.s	loc_18856
0001A81C 08A8 0007 0002             		bclr	#7,2(a0)
0001A822                            
0001A822                            loc_18856:
0001A822 6100 C5EC                  		bsr.w	ObjHitFloor
0001A826 4A41                       		tst.w	d1
0001A828 6A00                       		bpl.s	locret_1887E
0001A82A 5328 0029                  		subq.b	#1,$29(a0)
0001A82E 6700                       		beq.s	Obj74_Delete2
0001A830 4268 0012                  		clr.w	$12(a0)
0001A834 3168 0032 0008             		move.w	$32(a0),8(a0)
0001A83A 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A840 08E8 0007 0002             		bset	#7,2(a0)
0001A846 5528 0025                  		subq.b	#2,$25(a0)
0001A84A                            
0001A84A                            locret_1887E:
0001A84A 4E75                       		rts	
0001A84C                            ; ===========================================================================
0001A84C                            
0001A84C                            Obj74_Delete2:
0001A84C 4EF9 0000 E99A             		jmp	DeleteObject
0001A852                            ; ===========================================================================
0001A852                            
0001A852                            loc_18886:				; XREF: Obj74_Index
0001A852 08E8 0007 0002             		bset	#7,2(a0)
0001A858 5328 0029                  		subq.b	#1,$29(a0)
0001A85C 6600                       		bne.s	Obj74_Animate
0001A85E 117C 0001 001C             		move.b	#1,$1C(a0)
0001A864 5968 000C                  		subq.w	#4,$C(a0)
0001A868 4228 0020                  		clr.b	$20(a0)
0001A86C                            
0001A86C                            Obj74_Animate:
0001A86C 43F9 0000 FD5A             		lea	(Ani_obj14).l,a1
0001A872 4EF9 0000 B9AA             		jmp	AnimateSprite
0001A878                            ; ===========================================================================
0001A878                            
0001A878                            Obj74_Delete3:				; XREF: Obj74_Index
0001A878 4EF9 0000 E99A             		jmp	DeleteObject
0001A87E                            ; ===========================================================================
0001A87E                            
0001A87E                            Obj7A_Delete:
0001A87E 4EF9 0000 E99A             		jmp	DeleteObject
0001A884                            ; ===========================================================================
0001A884                            ; ---------------------------------------------------------------------------
0001A884                            ; Object 7A - Eggman (SLZ)
0001A884                            ; ---------------------------------------------------------------------------
0001A884                            
0001A884                            Obj7A:					; XREF: Obj_Index
0001A884 7000                       		moveq	#0,d0
0001A886 1028 0024                  		move.b	$24(a0),d0
0001A88A 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001A88E 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001A892                            ; ===========================================================================
0001A892 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001A894 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001A896 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001A898 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001A89A 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001A89C                            
0001A89C 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A89F 0401 04                    		dc.b 4,	1, 4
0001A8A2 0607 04                    		dc.b 6,	7, 4
0001A8A5 0800 03                    		dc.b 8,	0, 3
0001A8A8                            ; ===========================================================================
0001A8A8                            
0001A8A8                            Obj7A_Main:				; XREF: Obj7A_Index
0001A8A8 317C 2188 0008             		move.w	#$2188,8(a0)
0001A8AE 317C 0228 000C             		move.w	#$228,$C(a0)
0001A8B4 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A8BA 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A8C0 117C 000F 0020             		move.b	#$F,$20(a0)
0001A8C6 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A8CC 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001A8D0 2248                       		movea.l	a0,a1
0001A8D2 7203                       		moveq	#3,d1
0001A8D4 6000                       		bra.s	Obj7A_LoadBoss
0001A8D6                            ; ===========================================================================
0001A8D6                            
0001A8D6                            Obj7A_Loop:
0001A8D6 4EB9 0000 F0B6             		jsr	SingleObjLoad2
0001A8DC 6600                       		bne.s	loc_1895C
0001A8DE 12BC 007A                  		move.b	#$7A,0(a1)
0001A8E2 3368 0008 0008             		move.w	8(a0),8(a1)
0001A8E8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A8EE                            
0001A8EE                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001A8EE 08A8 0000 0022             		bclr	#0,$22(a0)
0001A8F4 4229 0025                  		clr.b	$25(a1)
0001A8F8 135A 0024                  		move.b	(a2)+,$24(a1)
0001A8FC 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A900 135A 0018                  		move.b	(a2)+,$18(a1)
0001A904 237C 0001 9CDE 0004        		move.l	#Map_Eggman,4(a1)
0001A90C 337C 0400 0002             		move.w	#$400,2(a1)
0001A912 137C 0004 0001             		move.b	#4,1(a1)
0001A918 137C 0020 0019             		move.b	#$20,$19(a1)
0001A91E 2348 0034                  		move.l	a0,$34(a1)
0001A922 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001A926                            
0001A926                            loc_1895C:
0001A926 43F8 D040                  		lea	($FFFFD040).w,a1
0001A92A 45E8 002A                  		lea	$2A(a0),a2
0001A92E 705E                       		moveq	#$5E,d0
0001A930 723E                       		moveq	#$3E,d1
0001A932                            
0001A932                            loc_18968:
0001A932 B011                       		cmp.b	(a1),d0
0001A934 6600                       		bne.s	loc_18974
0001A936 4A29 0028                  		tst.b	$28(a1)
0001A93A 6700                       		beq.s	loc_18974
0001A93C 34C9                       		move.w	a1,(a2)+
0001A93E                            
0001A93E                            loc_18974:
0001A93E D2FC 0040                  		adda.w	#$40,a1
0001A942 51C9 FFEE                  		dbf	d1,loc_18968
0001A946                            
0001A946                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001A946 7000                       		moveq	#0,d0
0001A948 1028 0025                  		move.b	$25(a0),d0
0001A94C 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001A950 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001A954 43F9 0001 9C8E             		lea	(Ani_Eggman).l,a1
0001A95A 4EB9 0000 B9AA             		jsr	AnimateSprite
0001A960 7003                       		moveq	#3,d0
0001A962 C028 0022                  		and.b	$22(a0),d0
0001A966 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A96C 8128 0001                  		or.b	d0,1(a0)
0001A970 4EF9 0000 E94A             		jmp	DisplaySprite
0001A976                            ; ===========================================================================
0001A976 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001A978 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001A97A 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001A97C 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001A97E 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001A980 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001A982                            ; ===========================================================================
0001A982                            
0001A982                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001A982 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A988 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001A98E 6400                       		bcc.s	loc_189CA
0001A990 5428 0025                  		addq.b	#2,$25(a0)
0001A994                            
0001A994                            loc_189CA:
0001A994 6100 EEE8                  		bsr.w	BossMove
0001A998 1028 003F                  		move.b	$3F(a0),d0
0001A99C 5428 003F                  		addq.b	#2,$3F(a0)
0001A9A0 4EB9 0000 29CC             		jsr	(CalcSine).l
0001A9A6 EC40                       		asr.w	#6,d0
0001A9A8 D068 0038                  		add.w	$38(a0),d0
0001A9AC 3140 000C                  		move.w	d0,$C(a0)
0001A9B0 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A9B6 6000                       		bra.s	loc_189FE
0001A9B8                            ; ===========================================================================
0001A9B8                            
0001A9B8                            loc_189EE:
0001A9B8 6100 EEC4                  		bsr.w	BossMove
0001A9BC 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A9C2 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A9C8                            
0001A9C8                            loc_189FE:
0001A9C8 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001A9CE 6400                       		bcc.s	locret_18A44
0001A9D0 4A28 0022                  		tst.b	$22(a0)
0001A9D4 6B00                       		bmi.s	loc_18A46
0001A9D6 4A28 0020                  		tst.b	$20(a0)
0001A9DA 6600                       		bne.s	locret_18A44
0001A9DC 4A28 003E                  		tst.b	$3E(a0)
0001A9E0 6600                       		bne.s	loc_18A28
0001A9E2 117C 0020 003E             		move.b	#$20,$3E(a0)
0001A9E8 303C 00AC                  		move.w	#$AC,d0
0001A9EC 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A9F2                            
0001A9F2                            loc_18A28:
0001A9F2 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A9F6 7000                       		moveq	#0,d0
0001A9F8 4A51                       		tst.w	(a1)
0001A9FA 6600                       		bne.s	loc_18A36
0001A9FC 303C 0EEE                  		move.w	#$EEE,d0
0001AA00                            
0001AA00                            loc_18A36:
0001AA00 3280                       		move.w	d0,(a1)
0001AA02 5328 003E                  		subq.b	#1,$3E(a0)
0001AA06 6600                       		bne.s	locret_18A44
0001AA08 117C 000F 0020             		move.b	#$F,$20(a0)
0001AA0E                            
0001AA0E                            locret_18A44:
0001AA0E 4E75                       		rts	
0001AA10                            ; ===========================================================================
0001AA10                            
0001AA10                            loc_18A46:
0001AA10 7064                       		moveq	#100,d0
0001AA12 6100 0000                  		bsr.w	AddPoints
0001AA16 117C 0006 0025             		move.b	#6,$25(a0)
0001AA1C 117C 0078 003C             		move.b	#$78,$3C(a0)
0001AA22 4268 0010                  		clr.w	$10(a0)
0001AA26 4E75                       		rts	
0001AA28                            ; ===========================================================================
0001AA28                            
0001AA28                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001AA28 3028 0030                  		move.w	$30(a0),d0
0001AA2C 317C 0200 0010             		move.w	#$200,$10(a0)
0001AA32 0828 0000 0022             		btst	#0,$22(a0)
0001AA38 6600                       		bne.s	loc_18A7C
0001AA3A 4468 0010                  		neg.w	$10(a0)
0001AA3E 0C40 2008                  		cmpi.w	#$2008,d0
0001AA42 6E00                       		bgt.s	loc_18A88
0001AA44 6000                       		bra.s	loc_18A82
0001AA46                            ; ===========================================================================
0001AA46                            
0001AA46                            loc_18A7C:
0001AA46 0C40 2138                  		cmpi.w	#$2138,d0
0001AA4A 6D00                       		blt.s	loc_18A88
0001AA4C                            
0001AA4C                            loc_18A82:
0001AA4C 0868 0000 0022             		bchg	#0,$22(a0)
0001AA52                            
0001AA52                            loc_18A88:
0001AA52 3028 0008                  		move.w	8(a0),d0
0001AA56 72FF                       		moveq	#-1,d1
0001AA58 7402                       		moveq	#2,d2
0001AA5A 45E8 002A                  		lea	$2A(a0),a2
0001AA5E 7828                       		moveq	#$28,d4
0001AA60 4A68 0010                  		tst.w	$10(a0)
0001AA64 6A00                       		bpl.s	loc_18A9E
0001AA66 4444                       		neg.w	d4
0001AA68                            
0001AA68                            loc_18A9E:
0001AA68 321A                       		move.w	(a2)+,d1
0001AA6A 2641                       		movea.l	d1,a3
0001AA6C 082B 0003 0022             		btst	#3,$22(a3)
0001AA72 6600                       		bne.s	loc_18AB4
0001AA74 362B 0008                  		move.w	8(a3),d3
0001AA78 D644                       		add.w	d4,d3
0001AA7A 9640                       		sub.w	d0,d3
0001AA7C 6700                       		beq.s	loc_18AC0
0001AA7E                            
0001AA7E                            loc_18AB4:
0001AA7E 51CA FFE8                  		dbf	d2,loc_18A9E
0001AA82                            
0001AA82 1142 0028                  		move.b	d2,$28(a0)
0001AA86 6000 FF0C                  		bra.w	loc_189CA
0001AA8A                            ; ===========================================================================
0001AA8A                            
0001AA8A                            loc_18AC0:
0001AA8A 1142 0028                  		move.b	d2,$28(a0)
0001AA8E 5428 0025                  		addq.b	#2,$25(a0)
0001AA92 117C 0028 003C             		move.b	#$28,$3C(a0)
0001AA98 6000 FEFA                  		bra.w	loc_189CA
0001AA9C                            ; ===========================================================================
0001AA9C                            
0001AA9C                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001AA9C 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001AAA2 6600                       		bne.s	loc_18B36
0001AAA4 70FF                       		moveq	#-1,d0
0001AAA6 1028 0028                  		move.b	$28(a0),d0
0001AAAA 4880                       		ext.w	d0
0001AAAC 6B00                       		bmi.s	loc_18B40
0001AAAE 5540                       		subq.w	#2,d0
0001AAB0 4440                       		neg.w	d0
0001AAB2 D040                       		add.w	d0,d0
0001AAB4 43E8 002A                  		lea	$2A(a0),a1
0001AAB8 3031 0000                  		move.w	(a1,d0.w),d0
0001AABC 2440                       		movea.l	d0,a2
0001AABE 43F8 D040                  		lea	($FFFFD040).w,a1
0001AAC2 723E                       		moveq	#$3E,d1
0001AAC4                            
0001AAC4                            loc_18AFA:
0001AAC4 B0A9 003C                  		cmp.l	$3C(a1),d0
0001AAC8 6700                       		beq.s	loc_18B40
0001AACA D2FC 0040                  		adda.w	#$40,a1
0001AACE 51C9 FFF4                  		dbf	d1,loc_18AFA
0001AAD2                            
0001AAD2 2F08                       		move.l	a0,-(sp)
0001AAD4 41D2                       		lea	(a2),a0
0001AAD6 4EB9 0000 F0B6             		jsr	SingleObjLoad2
0001AADC 205F                       		movea.l	(sp)+,a0
0001AADE 6600                       		bne.s	loc_18B40
0001AAE0 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001AAE4 3368 0008 0008             		move.w	8(a0),8(a1)
0001AAEA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AAF0 0669 0020 000C             		addi.w	#$20,$C(a1)
0001AAF6 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001AAFC 234A 003C                  		move.l	a2,$3C(a1)
0001AB00                            
0001AB00                            loc_18B36:
0001AB00 5328 003C                  		subq.b	#1,$3C(a0)
0001AB04 6700                       		beq.s	loc_18B40
0001AB06 6000 FEC0                  		bra.w	loc_189FE
0001AB0A                            ; ===========================================================================
0001AB0A                            
0001AB0A                            loc_18B40:
0001AB0A 5528 0025                  		subq.b	#2,$25(a0)
0001AB0E 6000 FE84                  		bra.w	loc_189CA
0001AB12                            ; ===========================================================================
0001AB12                            
0001AB12                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001AB12 5328 003C                  		subq.b	#1,$3C(a0)
0001AB16 6B00                       		bmi.s	loc_18B52
0001AB18 6000 ED16                  		bra.w	BossDefeated
0001AB1C                            ; ===========================================================================
0001AB1C                            
0001AB1C                            loc_18B52:
0001AB1C 5428 0025                  		addq.b	#2,$25(a0)
0001AB20 4268 0012                  		clr.w	$12(a0)
0001AB24 08E8 0000 0022             		bset	#0,$22(a0)
0001AB2A 08A8 0007 0022             		bclr	#7,$22(a0)
0001AB30 4268 0010                  		clr.w	$10(a0)
0001AB34 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001AB3A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001AB3E 6600                       		bne.s	loc_18B7C
0001AB40 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001AB46                            
0001AB46                            loc_18B7C:
0001AB46 6000 FE80                  		bra.w	loc_189FE
0001AB4A                            ; ===========================================================================
0001AB4A                            
0001AB4A                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001AB4A 5228 003C                  		addq.b	#1,$3C(a0)
0001AB4E 6700                       		beq.s	loc_18B90
0001AB50 6A00                       		bpl.s	loc_18B96
0001AB52 0668 0018 0012             		addi.w	#$18,$12(a0)
0001AB58 6000                       		bra.s	loc_18BC2
0001AB5A                            ; ===========================================================================
0001AB5A                            
0001AB5A                            loc_18B90:
0001AB5A 4268 0012                  		clr.w	$12(a0)
0001AB5E 6000                       		bra.s	loc_18BC2
0001AB60                            ; ===========================================================================
0001AB60                            
0001AB60                            loc_18B96:
0001AB60 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001AB66 6500                       		bcs.s	loc_18BAE
0001AB68 6700                       		beq.s	loc_18BB4
0001AB6A 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001AB70 6500                       		bcs.s	loc_18BC2
0001AB72 5428 0025                  		addq.b	#2,$25(a0)
0001AB76 6000                       		bra.s	loc_18BC2
0001AB78                            ; ===========================================================================
0001AB78                            
0001AB78                            loc_18BAE:
0001AB78 5168 0012                  		subq.w	#8,$12(a0)
0001AB7C 6000                       		bra.s	loc_18BC2
0001AB7E                            ; ===========================================================================
0001AB7E                            
0001AB7E                            loc_18BB4:
0001AB7E 4268 0012                  		clr.w	$12(a0)
0001AB82 303C 0084                  		move.w	#$84,d0
0001AB86 4EB9 0000 11F0             		jsr	(PlaySound).l	; play SLZ music
0001AB8C                            
0001AB8C                            loc_18BC2:
0001AB8C 6000 FE2A                  		bra.w	loc_189EE
0001AB90                            ; ===========================================================================
0001AB90                            
0001AB90                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001AB90 317C 0400 0010             		move.w	#$400,$10(a0)
0001AB96 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AB9C 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001ABA2 6400                       		bcc.s	loc_18BE0
0001ABA4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001ABA8 6000                       		bra.s	loc_18BE8
0001ABAA                            ; ===========================================================================
0001ABAA                            
0001ABAA                            loc_18BE0:
0001ABAA 4A28 0001                  		tst.b	1(a0)
0001ABAE 6A00 FCCE                  		bpl.w	Obj7A_Delete
0001ABB2                            
0001ABB2                            loc_18BE8:
0001ABB2 6100 ECCA                  		bsr.w	BossMove
0001ABB6 6000 FDDC                  		bra.w	loc_189CA
0001ABBA                            ; ===========================================================================
0001ABBA                            
0001ABBA                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001ABBA 7000                       		moveq	#0,d0
0001ABBC 7201                       		moveq	#1,d1
0001ABBE 2268 0034                  		movea.l	$34(a0),a1
0001ABC2 1029 0025                  		move.b	$25(a1),d0
0001ABC6 0C00 0006                  		cmpi.b	#6,d0
0001ABCA 6B00                       		bmi.s	loc_18C06
0001ABCC 720A                       		moveq	#$A,d1
0001ABCE 6000                       		bra.s	loc_18C1A
0001ABD0                            ; ===========================================================================
0001ABD0                            
0001ABD0                            loc_18C06:
0001ABD0 4A29 0020                  		tst.b	$20(a1)
0001ABD4 6600                       		bne.s	loc_18C10
0001ABD6 7205                       		moveq	#5,d1
0001ABD8 6000                       		bra.s	loc_18C1A
0001ABDA                            ; ===========================================================================
0001ABDA                            
0001ABDA                            loc_18C10:
0001ABDA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001ABE0 6500                       		bcs.s	loc_18C1A
0001ABE2 7204                       		moveq	#4,d1
0001ABE4                            
0001ABE4                            loc_18C1A:
0001ABE4 1141 001C                  		move.b	d1,$1C(a0)
0001ABE8 0C00 000A                  		cmpi.b	#$A,d0
0001ABEC 6600                       		bne.s	loc_18C32
0001ABEE 117C 0006 001C             		move.b	#6,$1C(a0)
0001ABF4 4A28 0001                  		tst.b	1(a0)
0001ABF8 6A00 FC84                  		bpl.w	Obj7A_Delete
0001ABFC                            
0001ABFC                            loc_18C32:
0001ABFC 6000                       		bra.s	loc_18C6C
0001ABFE                            ; ===========================================================================
0001ABFE                            
0001ABFE                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001ABFE 117C 0008 001C             		move.b	#8,$1C(a0)
0001AC04 2268 0034                  		movea.l	$34(a0),a1
0001AC08 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AC0E 6600                       		bne.s	loc_18C56
0001AC10 4A28 0001                  		tst.b	1(a0)
0001AC14 6A00 FC68                  		bpl.w	Obj7A_Delete
0001AC18 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AC1E 6000                       		bra.s	loc_18C6C
0001AC20                            ; ===========================================================================
0001AC20                            
0001AC20                            loc_18C56:
0001AC20 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001AC26 6E00                       		bgt.s	loc_18C6C
0001AC28 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001AC2E 6D00                       		blt.s	loc_18C6C
0001AC30 117C 0007 001C             		move.b	#7,$1C(a0)
0001AC36                            
0001AC36                            loc_18C6C:
0001AC36 43F9 0001 9C8E             		lea	(Ani_Eggman).l,a1
0001AC3C 4EB9 0000 B9AA             		jsr	AnimateSprite
0001AC42                            
0001AC42                            loc_18C78:
0001AC42 2268 0034                  		movea.l	$34(a0),a1
0001AC46 3169 0008 0008             		move.w	8(a1),8(a0)
0001AC4C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AC52 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AC58 7003                       		moveq	#3,d0
0001AC5A C028 0022                  		and.b	$22(a0),d0
0001AC5E 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AC64 8128 0001                  		or.b	d0,1(a0)
0001AC68 4EF9 0000 E94A             		jmp	DisplaySprite
0001AC6E                            ; ===========================================================================
0001AC6E                            
0001AC6E                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001AC6E 2268 0034                  		movea.l	$34(a0),a1
0001AC72 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AC78 6600                       		bne.s	loc_18CB8
0001AC7A 4A28 0001                  		tst.b	1(a0)
0001AC7E 6A00 FBFE                  		bpl.w	Obj7A_Delete
0001AC82                            
0001AC82                            loc_18CB8:
0001AC82 217C 0001 9DA6 0004        		move.l	#Map_BossItems,4(a0)
0001AC8A 317C 246C 0002             		move.w	#$246C,2(a0)
0001AC90 117C 0003 001A             		move.b	#3,$1A(a0)
0001AC96 60AA                       		bra.s	loc_18C78
0001AC98                            ; ===========================================================================
0001AC98                            ; ---------------------------------------------------------------------------
0001AC98                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001AC98                            ; ---------------------------------------------------------------------------
0001AC98                            
0001AC98                            Obj7B:					; XREF: Obj_Index
0001AC98 7000                       		moveq	#0,d0
0001AC9A 1028 0024                  		move.b	$24(a0),d0
0001AC9E 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001ACA2 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001ACA6 3028 0030                  		move.w	$30(a0),d0
0001ACAA 0240 FF80                  		andi.w	#$FF80,d0
0001ACAE 3238 F700                  		move.w	($FFFFF700).w,d1
0001ACB2 0441 0080                  		subi.w	#$80,d1
0001ACB6 0241 FF80                  		andi.w	#$FF80,d1
0001ACBA 9041                       		sub.w	d1,d0
0001ACBC 6B00 FBC0                  		bmi.w	Obj7A_Delete
0001ACC0 0C40 0280                  		cmpi.w	#$280,d0
0001ACC4 6300                       		bls.s	Obj7B_NoDel
0001ACC6                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
0001ACC6                            	;	beq.s	Obj7B_Delete		; if it's zero, don't remember object
0001ACC6                            	;	movea.w	d0,a2	; load address into a2
0001ACC6                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001ACC6                            
0001ACC6                            Obj7B_Delete:
0001ACC6 4EF9 0000 E99A             		jmp	DeleteObject	; and delete object
0001ACCC                            
0001ACCC                            Obj7B_NoDel:
0001ACCC 4EF9 0000 E94A             		jmp	DisplaySprite
0001ACD2                            ; ===========================================================================
0001ACD2 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001ACD4 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001ACD6 0000                       		dc.w loc_18DC6-Obj7B_Index
0001ACD8 0000                       		dc.w loc_18EAA-Obj7B_Index
0001ACDA 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001ACDC 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001ACDE                            ; ===========================================================================
0001ACDE                            
0001ACDE                            Obj7B_Main:				; XREF: Obj7B_Index
0001ACDE 217C 0001 3346 0004        		move.l	#Map_obj5Ea,4(a0)
0001ACE6 317C 0518 0002             		move.w	#$518,2(a0)
0001ACEC 117C 0001 001A             		move.b	#1,$1A(a0)
0001ACF2 0028 0004 0001             		ori.b	#4,1(a0)
0001ACF8 117C 0004 0018             		move.b	#4,$18(a0)
0001ACFE 117C 008B 0020             		move.b	#$8B,$20(a0)
0001AD04 117C 000C 0019             		move.b	#$C,$19(a0)
0001AD0A 2268 003C                  		movea.l	$3C(a0),a1
0001AD0E 3169 0008 0030             		move.w	8(a1),$30(a0)
0001AD14 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001AD1A 08E8 0000 0022             		bset	#0,$22(a0)
0001AD20 3028 0008                  		move.w	8(a0),d0
0001AD24 B069 0008                  		cmp.w	8(a1),d0
0001AD28 6E00                       		bgt.s	loc_18D68
0001AD2A 08A8 0000 0022             		bclr	#0,$22(a0)
0001AD30 117C 0002 003A             		move.b	#2,$3A(a0)
0001AD36                            
0001AD36                            loc_18D68:
0001AD36 5428 0024                  		addq.b	#2,$24(a0)
0001AD3A                            
0001AD3A                            Obj7B_Fall:				; XREF: Obj7B_Index
0001AD3A 4EB9 0000 E910             		jsr	ObjectFall
0001AD40 2268 003C                  		movea.l	$3C(a0),a1
0001AD44 45F9 0000 0000             		lea	(word_19018).l,a2
0001AD4A 7000                       		moveq	#0,d0
0001AD4C 1029 001A                  		move.b	$1A(a1),d0
0001AD50 3228 0008                  		move.w	8(a0),d1
0001AD54 9268 0030                  		sub.w	$30(a0),d1
0001AD58 6400                       		bcc.s	loc_18D8E
0001AD5A 5440                       		addq.w	#2,d0
0001AD5C                            
0001AD5C                            loc_18D8E:
0001AD5C D040                       		add.w	d0,d0
0001AD5E 3228 0034                  		move.w	$34(a0),d1
0001AD62 D272 0000                  		add.w	(a2,d0.w),d1
0001AD66 B268 000C                  		cmp.w	$C(a0),d1
0001AD6A 6E00                       		bgt.s	locret_18DC4
0001AD6C 2268 003C                  		movea.l	$3C(a0),a1
0001AD70 7202                       		moveq	#2,d1
0001AD72 0828 0000 0022             		btst	#0,$22(a0)
0001AD78 6700                       		beq.s	loc_18DAE
0001AD7A 7200                       		moveq	#0,d1
0001AD7C                            
0001AD7C                            loc_18DAE:
0001AD7C 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001AD82 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001AD88 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001AD8E 6000 0000                  		bra.w	loc_18FA2
0001AD92                            ; ===========================================================================
0001AD92                            
0001AD92                            locret_18DC4:
0001AD92 4E75                       		rts	
0001AD94                            ; ===========================================================================
0001AD94                            
0001AD94                            loc_18DC6:				; XREF: Obj7B_Index
0001AD94 2268 003C                  		movea.l	$3C(a0),a1
0001AD98 7000                       		moveq	#0,d0
0001AD9A 1028 003A                  		move.b	$3A(a0),d0
0001AD9E 9029 003A                  		sub.b	$3A(a1),d0
0001ADA2 6700                       		beq.s	loc_18E2A
0001ADA4 6400                       		bcc.s	loc_18DDA
0001ADA6 4400                       		neg.b	d0
0001ADA8                            
0001ADA8                            loc_18DDA:
0001ADA8 323C F7E8                  		move.w	#-$818,d1
0001ADAC 343C FEEC                  		move.w	#-$114,d2
0001ADB0 0C00 0001                  		cmpi.b	#1,d0
0001ADB4 6700                       		beq.s	loc_18E00
0001ADB6 323C F6A0                  		move.w	#-$960,d1
0001ADBA 343C FF0C                  		move.w	#-$F4,d2
0001ADBE 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001ADC4 6D00                       		blt.s	loc_18E00
0001ADC6 323C F5E0                  		move.w	#-$A20,d1
0001ADCA 343C FF80                  		move.w	#-$80,d2
0001ADCE                            
0001ADCE                            loc_18E00:
0001ADCE 3141 0012                  		move.w	d1,$12(a0)
0001ADD2 3142 0010                  		move.w	d2,$10(a0)
0001ADD6 3028 0008                  		move.w	8(a0),d0
0001ADDA 9068 0030                  		sub.w	$30(a0),d0
0001ADDE 6400                       		bcc.s	loc_18E16
0001ADE0 4468 0010                  		neg.w	$10(a0)
0001ADE4                            
0001ADE4                            loc_18E16:
0001ADE4 117C 0001 001A             		move.b	#1,$1A(a0)
0001ADEA 317C 0020 0028             		move.w	#$20,$28(a0)
0001ADF0 5428 0024                  		addq.b	#2,$24(a0)
0001ADF4 6000 0000                  		bra.w	loc_18EAA
0001ADF8                            ; ===========================================================================
0001ADF8                            
0001ADF8                            loc_18E2A:				; XREF: loc_18DC6
0001ADF8 45F9 0000 0000             		lea	(word_19018).l,a2
0001ADFE 7000                       		moveq	#0,d0
0001AE00 1029 001A                  		move.b	$1A(a1),d0
0001AE04 343C 0028                  		move.w	#$28,d2
0001AE08 3228 0008                  		move.w	8(a0),d1
0001AE0C 9268 0030                  		sub.w	$30(a0),d1
0001AE10 6400                       		bcc.s	loc_18E48
0001AE12 4442                       		neg.w	d2
0001AE14 5440                       		addq.w	#2,d0
0001AE16                            
0001AE16                            loc_18E48:
0001AE16 D040                       		add.w	d0,d0
0001AE18 3228 0034                  		move.w	$34(a0),d1
0001AE1C D272 0000                  		add.w	(a2,d0.w),d1
0001AE20 3141 000C                  		move.w	d1,$C(a0)
0001AE24 D468 0030                  		add.w	$30(a0),d2
0001AE28 3142 0008                  		move.w	d2,8(a0)
0001AE2C 4268 000E                  		clr.w	$E(a0)
0001AE30 4268 000A                  		clr.w	$A(a0)
0001AE34 5368 0028                  		subq.w	#1,$28(a0)
0001AE38 6600                       		bne.s	loc_18E7A
0001AE3A 317C 0020 0028             		move.w	#$20,$28(a0)
0001AE40 117C 0008 0024             		move.b	#8,$24(a0)
0001AE46 4E75                       		rts	
0001AE48                            ; ===========================================================================
0001AE48                            
0001AE48                            loc_18E7A:
0001AE48 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001AE4E 6600                       		bne.s	loc_18E88
0001AE50 117C 0005 001F             		move.b	#5,$1F(a0)
0001AE56                            
0001AE56                            loc_18E88:
0001AE56 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001AE5C 6600                       		bne.s	loc_18E96
0001AE5E 117C 0002 001F             		move.b	#2,$1F(a0)
0001AE64                            
0001AE64                            loc_18E96:
0001AE64 5328 001E                  		subq.b	#1,$1E(a0)
0001AE68 6E00                       		bgt.s	locret_18EA8
0001AE6A 0868 0000 001A             		bchg	#0,$1A(a0)
0001AE70 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001AE76                            
0001AE76                            locret_18EA8:
0001AE76 4E75                       		rts	
0001AE78                            ; ===========================================================================
0001AE78                            
0001AE78                            loc_18EAA:				; XREF: Obj7B_Index
0001AE78 43F8 D040                  		lea	($FFFFD040).w,a1
0001AE7C 707A                       		moveq	#$7A,d0
0001AE7E 7240                       		moveq	#$40,d1
0001AE80 743E                       		moveq	#$3E,d2
0001AE82                            
0001AE82                            loc_18EB4:
0001AE82 B011                       		cmp.b	(a1),d0
0001AE84 6700                       		beq.s	loc_18EC0
0001AE86 D2C1                       		adda.w	d1,a1
0001AE88 51CA FFF8                  		dbf	d2,loc_18EB4
0001AE8C                            
0001AE8C 6000                       		bra.s	loc_18F38
0001AE8E                            ; ===========================================================================
0001AE8E                            
0001AE8E                            loc_18EC0:
0001AE8E 3029 0008                  		move.w	8(a1),d0
0001AE92 3229 000C                  		move.w	$C(a1),d1
0001AE96 3428 0008                  		move.w	8(a0),d2
0001AE9A 3628 000C                  		move.w	$C(a0),d3
0001AE9E 45FA 0000                  		lea	byte_19022(pc),a2
0001AEA2 47FA 0000                  		lea	byte_19026(pc),a3
0001AEA6 181A                       		move.b	(a2)+,d4
0001AEA8 4884                       		ext.w	d4
0001AEAA D044                       		add.w	d4,d0
0001AEAC 181B                       		move.b	(a3)+,d4
0001AEAE 4884                       		ext.w	d4
0001AEB0 D444                       		add.w	d4,d2
0001AEB2 B440                       		cmp.w	d0,d2
0001AEB4 6500                       		bcs.s	loc_18F38
0001AEB6 181A                       		move.b	(a2)+,d4
0001AEB8 4884                       		ext.w	d4
0001AEBA D044                       		add.w	d4,d0
0001AEBC 181B                       		move.b	(a3)+,d4
0001AEBE 4884                       		ext.w	d4
0001AEC0 D444                       		add.w	d4,d2
0001AEC2 B042                       		cmp.w	d2,d0
0001AEC4 6500                       		bcs.s	loc_18F38
0001AEC6 181A                       		move.b	(a2)+,d4
0001AEC8 4884                       		ext.w	d4
0001AECA D244                       		add.w	d4,d1
0001AECC 181B                       		move.b	(a3)+,d4
0001AECE 4884                       		ext.w	d4
0001AED0 D644                       		add.w	d4,d3
0001AED2 B641                       		cmp.w	d1,d3
0001AED4 6500                       		bcs.s	loc_18F38
0001AED6 181A                       		move.b	(a2)+,d4
0001AED8 4884                       		ext.w	d4
0001AEDA D244                       		add.w	d4,d1
0001AEDC 181B                       		move.b	(a3)+,d4
0001AEDE 4884                       		ext.w	d4
0001AEE0 D644                       		add.w	d4,d3
0001AEE2 B243                       		cmp.w	d3,d1
0001AEE4 6500                       		bcs.s	loc_18F38
0001AEE6 5428 0024                  		addq.b	#2,$24(a0)
0001AEEA 4268 0028                  		clr.w	$28(a0)
0001AEEE 4229 0020                  		clr.b	$20(a1)
0001AEF2 5329 0021                  		subq.b	#1,$21(a1)
0001AEF6 6600                       		bne.s	loc_18F38
0001AEF8 08E9 0007 0022             		bset	#7,$22(a1)
0001AEFE 4268 0010                  		clr.w	$10(a0)
0001AF02 4268 0012                  		clr.w	$12(a0)
0001AF06                            
0001AF06                            loc_18F38:
0001AF06 4A68 0012                  		tst.w	$12(a0)
0001AF0A 6A00                       		bpl.s	loc_18F5C
0001AF0C 4EB9 0000 E910             		jsr	ObjectFall
0001AF12 3028 0034                  		move.w	$34(a0),d0
0001AF16 0440 002F                  		subi.w	#$2F,d0
0001AF1A B068 000C                  		cmp.w	$C(a0),d0
0001AF1E 6E00                       		bgt.s	loc_18F58
0001AF20 4EB9 0000 E910             		jsr	ObjectFall
0001AF26                            
0001AF26                            loc_18F58:
0001AF26 6000 FF20                  		bra.w	loc_18E7A
0001AF2A                            ; ===========================================================================
0001AF2A                            
0001AF2A                            loc_18F5C:
0001AF2A 4EB9 0000 E910             		jsr	ObjectFall
0001AF30 2268 003C                  		movea.l	$3C(a0),a1
0001AF34 45F9 0000 0000             		lea	(word_19018).l,a2
0001AF3A 7000                       		moveq	#0,d0
0001AF3C 1029 001A                  		move.b	$1A(a1),d0
0001AF40 3228 0008                  		move.w	8(a0),d1
0001AF44 9268 0030                  		sub.w	$30(a0),d1
0001AF48 6400                       		bcc.s	loc_18F7E
0001AF4A 5440                       		addq.w	#2,d0
0001AF4C                            
0001AF4C                            loc_18F7E:
0001AF4C D040                       		add.w	d0,d0
0001AF4E 3228 0034                  		move.w	$34(a0),d1
0001AF52 D272 0000                  		add.w	(a2,d0.w),d1
0001AF56 B268 000C                  		cmp.w	$C(a0),d1
0001AF5A 6ECA                       		bgt.s	loc_18F58
0001AF5C 2268 003C                  		movea.l	$3C(a0),a1
0001AF60 7202                       		moveq	#2,d1
0001AF62 4A68 0010                  		tst.w	$10(a0)
0001AF66 6B00                       		bmi.s	loc_18F9C
0001AF68 7200                       		moveq	#0,d1
0001AF6A                            
0001AF6A                            loc_18F9C:
0001AF6A 317C 0000 0028             		move.w	#0,$28(a0)
0001AF70                            
0001AF70                            loc_18FA2:
0001AF70 1341 003A                  		move.b	d1,$3A(a1)
0001AF74 1141 003A                  		move.b	d1,$3A(a0)
0001AF78 B229 001A                  		cmp.b	$1A(a1),d1
0001AF7C 6700                       		beq.s	loc_19008
0001AF7E 08A9 0003 0022             		bclr	#3,$22(a1)
0001AF84 6700                       		beq.s	loc_19008
0001AF86 4229 0025                  		clr.b	$25(a1)
0001AF8A 137C 0002 0024             		move.b	#2,$24(a1)
0001AF90 45F8 D000                  		lea	($FFFFD000).w,a2
0001AF94 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001AF9A 446A 0012                  		neg.w	$12(a2)
0001AF9E 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001AFA4 6600                       		bne.s	loc_18FDC
0001AFA6 E0EA 0012                  		asr	$12(a2)
0001AFAA                            
0001AFAA                            loc_18FDC:
0001AFAA 08EA 0001 0022             		bset	#1,$22(a2)
0001AFB0 08AA 0003 0022             		bclr	#3,$22(a2)
0001AFB6 422A 003C                  		clr.b	$3C(a2)
0001AFBA 2F08                       		move.l	a0,-(sp)
0001AFBC 41D2                       		lea	(a2),a0
0001AFBE 4EBA 9E2E                  		jsr	Obj01_ChkRoll
0001AFC2 205F                       		movea.l	(sp)+,a0
0001AFC4 157C 0002 0024             		move.b	#2,$24(a2)
0001AFCA 303C 00CC                  		move.w	#$CC,d0
0001AFCE 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001AFD4                            
0001AFD4                            loc_19008:
0001AFD4 4268 0010                  		clr.w	$10(a0)
0001AFD8 4268 0012                  		clr.w	$12(a0)
0001AFDC 5428 0024                  		addq.b	#2,$24(a0)
0001AFE0 6000 FE66                  		bra.w	loc_18E7A
0001AFE4                            ; ===========================================================================
0001AFE4 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001AFEE                            		even
0001AFEE E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001AFF2                            		even
0001AFF2 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001AFF6                            		even
0001AFF6                            ; ===========================================================================
0001AFF6                            
0001AFF6                            Obj7B_Explode:				; XREF: Obj7B_Index
0001AFF6 10BC 003F                  		move.b	#$3F,(a0)
0001AFFA 4228 0024                  		clr.b	$24(a0)
0001AFFE 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001B004 6700                       		beq.s	Obj7B_MakeFrag
0001B006 4E75                       		rts	
0001B008                            ; ===========================================================================
0001B008                            
0001B008                            Obj7B_MakeFrag:
0001B008 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001B00E 7203                       		moveq	#3,d1
0001B010 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001B014                            
0001B014                            Obj7B_Loop:
0001B014 4EB9 0000 F0A0             		jsr	SingleObjLoad
0001B01A 6600                       		bne.s	loc_1909A
0001B01C 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001B020 137C 000A 0024             		move.b	#$A,$24(a1)
0001B026 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001B02E 137C 0003 0018             		move.b	#3,$18(a1)
0001B034 337C 0518 0002             		move.w	#$518,2(a1)
0001B03A 3368 0008 0008             		move.w	8(a0),8(a1)
0001B040 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B046 335A 0010                  		move.w	(a2)+,$10(a1)
0001B04A 335A 0012                  		move.w	(a2)+,$12(a1)
0001B04E 137C 0098 0020             		move.b	#$98,$20(a1)
0001B054 0029 0004 0001             		ori.b	#4,1(a1)
0001B05A 08E9 0007 0001             		bset	#7,1(a1)
0001B060 137C 000C 0019             		move.b	#$C,$19(a1)
0001B066                            
0001B066                            loc_1909A:
0001B066 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001B06A                            
0001B06A 4E75                       		rts	
0001B06C                            ; ===========================================================================
0001B06C FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001B070 FF60 FDC0                  		dc.w $FF60, $FDC0
0001B074 0100 FCC0                  		dc.w $100, $FCC0
0001B078 00A0 FDC0                  		dc.w $A0, $FDC0
0001B07C                            ; ===========================================================================
0001B07C                            
0001B07C                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001B07C 4EB9 0000 E930             		jsr	SpeedToPos
0001B082 3168 0008 0030             		move.w	8(a0),$30(a0)
0001B088 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001B08E 0668 0018 0012             		addi.w	#$18,$12(a0)
0001B094 7004                       		moveq	#4,d0
0001B096 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001B09A E448                       		lsr.w	#2,d0
0001B09C 1140 001A                  		move.b	d0,$1A(a0)
0001B0A0 4A28 0001                  		tst.b	1(a0)
0001B0A4 6A00 F7D8                  		bpl.w	Obj7A_Delete
0001B0A8 4E75                       		rts	
0001B0AA                            ; ===========================================================================
0001B0AA                            ; ---------------------------------------------------------------------------
0001B0AA                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001B0AA                            ; ---------------------------------------------------------------------------
0001B0AA                            Map_obj7B:
0001B0AA                            	include "_maps\obj7B.asm"
0001B0AA                            ; ---------------------------------------------------------------------------
0001B0AA                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001B0AA                            ; ---------------------------------------------------------------------------
0001B0AA 0000                       		dc.w byte_190E2-Map_obj7B
0001B0AC 0000                       		dc.w byte_190E8-Map_obj7B
0001B0AE 01                         byte_190E2:	dc.b 1
0001B0AF FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001B0B4 01                         byte_190E8:	dc.b 1
0001B0B5 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001B0BA                            		even
0001B0BA                            		even
0001B0BA                            
0001B0BA                            ; ===========================================================================
0001B0BA                            ; ---------------------------------------------------------------------------
0001B0BA                            ; Object 75 - Eggman (SYZ)
0001B0BA                            ; ---------------------------------------------------------------------------
0001B0BA                            
0001B0BA                            Obj75:					; XREF: Obj_Index
0001B0BA 7000                       		moveq	#0,d0
0001B0BC 1028 0024                  		move.b	$24(a0),d0
0001B0C0 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001B0C4 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001B0C8                            ; ===========================================================================
0001B0C8 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001B0CA 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001B0CC 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001B0CE 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001B0D0 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001B0D2                            
0001B0D2 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001B0D5 0401 05                    		dc.b 4,	1, 5
0001B0D8 0607 05                    		dc.b 6,	7, 5
0001B0DB 0800 05                    		dc.b 8,	0, 5
0001B0DE                            ; ===========================================================================
0001B0DE                            
0001B0DE                            Obj75_Main:				; XREF: Obj75_Index
0001B0DE 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001B0E4 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001B0EA 3168 0008 0030             		move.w	8(a0),$30(a0)
0001B0F0 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B0F6 117C 000F 0020             		move.b	#$F,$20(a0)
0001B0FC 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001B102 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001B106 2248                       		movea.l	a0,a1
0001B108 7203                       		moveq	#3,d1
0001B10A 6000                       		bra.s	Obj75_LoadBoss
0001B10C                            ; ===========================================================================
0001B10C                            
0001B10C                            Obj75_Loop:
0001B10C 4EB9 0000 F0B6             		jsr	SingleObjLoad2
0001B112 6600                       		bne.s	Obj75_ShipMain
0001B114 12BC 0075                  		move.b	#$75,(a1)
0001B118 3368 0008 0008             		move.w	8(a0),8(a1)
0001B11E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B124                            
0001B124                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001B124 08A8 0000 0022             		bclr	#0,$22(a0)
0001B12A 4229 0025                  		clr.b	$25(a1)
0001B12E 135A 0024                  		move.b	(a2)+,$24(a1)
0001B132 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B136 135A 0018                  		move.b	(a2)+,$18(a1)
0001B13A 237C 0001 9CDE 0004        		move.l	#Map_Eggman,4(a1)
0001B142 337C 0400 0002             		move.w	#$400,2(a1)
0001B148 137C 0004 0001             		move.b	#4,1(a1)
0001B14E 137C 0020 0019             		move.b	#$20,$19(a1)
0001B154 2348 0034                  		move.l	a0,$34(a1)
0001B158 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001B15C                            
0001B15C                            Obj75_ShipMain:				; XREF: Obj75_Index
0001B15C 7000                       		moveq	#0,d0
0001B15E 1028 0025                  		move.b	$25(a0),d0
0001B162 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001B166 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001B16A 43F9 0001 9C8E             		lea	(Ani_Eggman).l,a1
0001B170 4EB9 0000 B9AA             		jsr	AnimateSprite
0001B176 7003                       		moveq	#3,d0
0001B178 C028 0022                  		and.b	$22(a0),d0
0001B17C 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B182 8128 0001                  		or.b	d0,1(a0)
0001B186 4EF9 0000 E94A             		jmp	DisplaySprite
0001B18C                            ; ===========================================================================
0001B18C 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001B190 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001B194 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001B198                            ; ===========================================================================
0001B198                            
0001B198                            loc_191CC:				; XREF: Obj75_ShipIndex
0001B198 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B19E 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001B1A4 6400                       		bcc.s	loc_191DE
0001B1A6 5428 0025                  		addq.b	#2,$25(a0)
0001B1AA                            
0001B1AA                            loc_191DE:
0001B1AA 1028 003F                  		move.b	$3F(a0),d0
0001B1AE 5428 003F                  		addq.b	#2,$3F(a0)
0001B1B2 4EB9 0000 29CC             		jsr	(CalcSine).l
0001B1B8 E440                       		asr.w	#2,d0
0001B1BA 3140 0012                  		move.w	d0,$12(a0)
0001B1BE                            
0001B1BE                            loc_191F2:
0001B1BE 6100 E6BE                  		bsr.w	BossMove
0001B1C2 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001B1C8 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B1CE                            
0001B1CE                            loc_19202:
0001B1CE 3028 0008                  		move.w	8(a0),d0
0001B1D2 0440 2C00                  		subi.w	#$2C00,d0
0001B1D6 EA48                       		lsr.w	#5,d0
0001B1D8 1140 0034                  		move.b	d0,$34(a0)
0001B1DC 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001B1E2 6400                       		bcc.s	locret_19256
0001B1E4 4A28 0022                  		tst.b	$22(a0)
0001B1E8 6B00                       		bmi.s	loc_19258
0001B1EA 4A28 0020                  		tst.b	$20(a0)
0001B1EE 6600                       		bne.s	locret_19256
0001B1F0 4A28 003E                  		tst.b	$3E(a0)
0001B1F4 6600                       		bne.s	loc_1923A
0001B1F6 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B1FC 303C 00AC                  		move.w	#$AC,d0
0001B200 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B206                            
0001B206                            loc_1923A:
0001B206 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001B20A 7000                       		moveq	#0,d0
0001B20C 4A51                       		tst.w	(a1)
0001B20E 6600                       		bne.s	loc_19248
0001B210 303C 0EEE                  		move.w	#$EEE,d0
0001B214                            
0001B214                            loc_19248:
0001B214 3280                       		move.w	d0,(a1)
0001B216 5328 003E                  		subq.b	#1,$3E(a0)
0001B21A 6600                       		bne.s	locret_19256
0001B21C 117C 000F 0020             		move.b	#$F,$20(a0)
0001B222                            
0001B222                            locret_19256:
0001B222 4E75                       		rts	
0001B224                            ; ===========================================================================
0001B224                            
0001B224                            loc_19258:				; XREF: loc_19202
0001B224 7064                       		moveq	#100,d0
0001B226 6100 0000                  		bsr.w	AddPoints
0001B22A 117C 0006 0025             		move.b	#6,$25(a0)
0001B230 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B236 4268 0010                  		clr.w	$10(a0)
0001B23A 4E75                       		rts	
0001B23C                            ; ===========================================================================
0001B23C                            
0001B23C                            loc_19270:				; XREF: Obj75_ShipIndex
0001B23C 3028 0030                  		move.w	$30(a0),d0
0001B240 317C 0140 0010             		move.w	#$140,$10(a0)
0001B246 0828 0000 0022             		btst	#0,$22(a0)
0001B24C 6600                       		bne.s	loc_1928E
0001B24E 4468 0010                  		neg.w	$10(a0)
0001B252 0C40 2C08                  		cmpi.w	#$2C08,d0
0001B256 6E00                       		bgt.s	loc_1929E
0001B258 6000                       		bra.s	loc_19294
0001B25A                            ; ===========================================================================
0001B25A                            
0001B25A                            loc_1928E:
0001B25A 0C40 2D38                  		cmpi.w	#$2D38,d0
0001B25E 6D00                       		blt.s	loc_1929E
0001B260                            
0001B260                            loc_19294:
0001B260 0868 0000 0022             		bchg	#0,$22(a0)
0001B266 4228 003D                  		clr.b	$3D(a0)
0001B26A                            
0001B26A                            loc_1929E:
0001B26A 0440 2C10                  		subi.w	#$2C10,d0
0001B26E 0240 001F                  		andi.w	#$1F,d0
0001B272 0440 001F                  		subi.w	#$1F,d0
0001B276 6A00                       		bpl.s	loc_192AE
0001B278 4440                       		neg.w	d0
0001B27A                            
0001B27A                            loc_192AE:
0001B27A 5340                       		subq.w	#1,d0
0001B27C 6E00                       		bgt.s	loc_192E8
0001B27E 4A28 003D                  		tst.b	$3D(a0)
0001B282 6600                       		bne.s	loc_192E8
0001B284 3238 D008                  		move.w	($FFFFD008).w,d1
0001B288 0441 2C00                  		subi.w	#$2C00,d1
0001B28C EA41                       		asr.w	#5,d1
0001B28E B228 0034                  		cmp.b	$34(a0),d1
0001B292 6600                       		bne.s	loc_192E8
0001B294 7000                       		moveq	#0,d0
0001B296 1028 0034                  		move.b	$34(a0),d0
0001B29A EB40                       		asl.w	#5,d0
0001B29C 0640 2C10                  		addi.w	#$2C10,d0
0001B2A0 3140 0030                  		move.w	d0,$30(a0)
0001B2A4 6100 0000                  		bsr.w	Obj75_FindBlocks
0001B2A8 5428 0025                  		addq.b	#2,$25(a0)
0001B2AC 4268 0028                  		clr.w	$28(a0)
0001B2B0 4268 0010                  		clr.w	$10(a0)
0001B2B4                            
0001B2B4                            loc_192E8:
0001B2B4 6000 FEF4                  		bra.w	loc_191DE
0001B2B8                            ; ===========================================================================
0001B2B8                            
0001B2B8                            loc_192EC:				; XREF: Obj75_ShipIndex
0001B2B8 7000                       		moveq	#0,d0
0001B2BA 1028 0028                  		move.b	$28(a0),d0
0001B2BE 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001B2C2 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001B2C6                            ; ===========================================================================
0001B2C6 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001B2C8 0000                       		dc.w loc_19348-off_192FA
0001B2CA 0000                       		dc.w loc_1938E-off_192FA
0001B2CC 0000                       		dc.w loc_193D0-off_192FA
0001B2CE                            ; ===========================================================================
0001B2CE                            
0001B2CE                            loc_19302:				; XREF: off_192FA
0001B2CE 317C 0180 0012             		move.w	#$180,$12(a0)
0001B2D4 3028 0038                  		move.w	$38(a0),d0
0001B2D8 0C40 0556                  		cmpi.w	#$556,d0
0001B2DC 6500                       		bcs.s	loc_19344
0001B2DE 317C 0556 0038             		move.w	#$556,$38(a0)
0001B2E4 4268 003C                  		clr.w	$3C(a0)
0001B2E8 70FF                       		moveq	#-1,d0
0001B2EA 3028 0036                  		move.w	$36(a0),d0
0001B2EE 6700                       		beq.s	loc_1933C
0001B2F0 2240                       		movea.l	d0,a1
0001B2F2 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B2F8 117C 00FF 0029             		move.b	#-1,$29(a0)
0001B2FE 2348 0034                  		move.l	a0,$34(a1)
0001B302 317C 0032 003C             		move.w	#$32,$3C(a0)
0001B308                            
0001B308                            loc_1933C:
0001B308 4268 0012                  		clr.w	$12(a0)
0001B30C 5428 0028                  		addq.b	#2,$28(a0)
0001B310                            
0001B310                            loc_19344:
0001B310 6000 FEAC                  		bra.w	loc_191F2
0001B314                            ; ===========================================================================
0001B314                            
0001B314                            loc_19348:				; XREF: off_192FA
0001B314 5368 003C                  		subq.w	#1,$3C(a0)
0001B318 6A00                       		bpl.s	loc_19366
0001B31A 5428 0028                  		addq.b	#2,$28(a0)
0001B31E 317C F800 0012             		move.w	#-$800,$12(a0)
0001B324 4A68 0036                  		tst.w	$36(a0)
0001B328 6600                       		bne.s	loc_19362
0001B32A E0E8 0012                  		asr	$12(a0)
0001B32E                            
0001B32E                            loc_19362:
0001B32E 7000                       		moveq	#0,d0
0001B330 6000                       		bra.s	loc_1937C
0001B332                            ; ===========================================================================
0001B332                            
0001B332                            loc_19366:
0001B332 7000                       		moveq	#0,d0
0001B334 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001B33A 6E00                       		bgt.s	loc_1937C
0001B33C 7002                       		moveq	#2,d0
0001B33E 0828 0001 003D             		btst	#1,$3D(a0)
0001B344 6700                       		beq.s	loc_1937C
0001B346 4440                       		neg.w	d0
0001B348                            
0001B348                            loc_1937C:
0001B348 D068 0038                  		add.w	$38(a0),d0
0001B34C 3140 000C                  		move.w	d0,$C(a0)
0001B350 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B356 6000 FE76                  		bra.w	loc_19202
0001B35A                            ; ===========================================================================
0001B35A                            
0001B35A                            loc_1938E:				; XREF: off_192FA
0001B35A 303C 04DA                  		move.w	#$4DA,d0
0001B35E 4A68 0036                  		tst.w	$36(a0)
0001B362 6700                       		beq.s	loc_1939C
0001B364 0440 0018                  		subi.w	#$18,d0
0001B368                            
0001B368                            loc_1939C:
0001B368 B068 0038                  		cmp.w	$38(a0),d0
0001B36C 6D00                       		blt.s	loc_193BE
0001B36E 317C 0008 003C             		move.w	#8,$3C(a0)
0001B374 4A68 0036                  		tst.w	$36(a0)
0001B378 6700                       		beq.s	loc_193B4
0001B37A 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001B380                            
0001B380                            loc_193B4:
0001B380 5428 0028                  		addq.b	#2,$28(a0)
0001B384 4268 0012                  		clr.w	$12(a0)
0001B388 6000                       		bra.s	loc_193CC
0001B38A                            ; ===========================================================================
0001B38A                            
0001B38A                            loc_193BE:
0001B38A 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001B390 6C00                       		bge.s	loc_193CC
0001B392 0668 000C 0012             		addi.w	#$C,$12(a0)
0001B398                            
0001B398                            loc_193CC:
0001B398 6000 FE24                  		bra.w	loc_191F2
0001B39C                            ; ===========================================================================
0001B39C                            
0001B39C                            loc_193D0:				; XREF: off_192FA
0001B39C 5368 003C                  		subq.w	#1,$3C(a0)
0001B3A0 6E00                       		bgt.s	loc_19406
0001B3A2 6B00                       		bmi.s	loc_193EE
0001B3A4 70FF                       		moveq	#-1,d0
0001B3A6 3028 0036                  		move.w	$36(a0),d0
0001B3AA 6700                       		beq.s	loc_193E8
0001B3AC 2240                       		movea.l	d0,a1
0001B3AE 137C 000A 0029             		move.b	#$A,$29(a1)
0001B3B4                            
0001B3B4                            loc_193E8:
0001B3B4 4268 0036                  		clr.w	$36(a0)
0001B3B8 6000                       		bra.s	loc_19406
0001B3BA                            ; ===========================================================================
0001B3BA                            
0001B3BA                            loc_193EE:
0001B3BA 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001B3C0 6600                       		bne.s	loc_19406
0001B3C2 4228 0029                  		clr.b	$29(a0)
0001B3C6 5528 0025                  		subq.b	#2,$25(a0)
0001B3CA 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001B3D0 6000                       		bra.s	loc_19446
0001B3D2                            ; ===========================================================================
0001B3D2                            
0001B3D2                            loc_19406:
0001B3D2 7001                       		moveq	#1,d0
0001B3D4 4A68 0036                  		tst.w	$36(a0)
0001B3D8 6700                       		beq.s	loc_19410
0001B3DA 7002                       		moveq	#2,d0
0001B3DC                            
0001B3DC                            loc_19410:
0001B3DC 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001B3E2 6700                       		beq.s	loc_19424
0001B3E4 6D00                       		blt.s	loc_1941C
0001B3E6 4440                       		neg.w	d0
0001B3E8                            
0001B3E8                            loc_1941C:
0001B3E8 4A68 0036                  		tst.w	$36(a0)
0001B3EC D168 0038                  		add.w	d0,$38(a0)
0001B3F0                            
0001B3F0                            loc_19424:
0001B3F0 7000                       		moveq	#0,d0
0001B3F2 4A68 0036                  		tst.w	$36(a0)
0001B3F6 6700                       		beq.s	loc_19438
0001B3F8 7002                       		moveq	#2,d0
0001B3FA 0828 0000 003D             		btst	#0,$3D(a0)
0001B400 6700                       		beq.s	loc_19438
0001B402 4440                       		neg.w	d0
0001B404                            
0001B404                            loc_19438:
0001B404 D068 0038                  		add.w	$38(a0),d0
0001B408 3140 000C                  		move.w	d0,$C(a0)
0001B40C 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B412                            
0001B412                            loc_19446:
0001B412 6000 FDBA                  		bra.w	loc_19202
0001B416                            
0001B416                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B416                            
0001B416                            
0001B416                            Obj75_FindBlocks:			; XREF: loc_192AE
0001B416 4268 0036                  		clr.w	$36(a0)
0001B41A 43F8 D040                  		lea	($FFFFD040).w,a1
0001B41E 703E                       		moveq	#$3E,d0
0001B420 7276                       		moveq	#$76,d1
0001B422 1428 0034                  		move.b	$34(a0),d2
0001B426                            
0001B426                            Obj75_FindLoop:
0001B426 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001B428 6600                       		bne.s	loc_1946A	; if not, branch
0001B42A B429 0028                  		cmp.b	$28(a1),d2
0001B42E 6600                       		bne.s	loc_1946A
0001B430 3149 0036                  		move.w	a1,$36(a0)
0001B434 6000                       		bra.s	locret_19472
0001B436                            ; ===========================================================================
0001B436                            
0001B436                            loc_1946A:
0001B436 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001B43A 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001B43E                            
0001B43E                            locret_19472:
0001B43E 4E75                       		rts	
0001B440                            ; End of function Obj75_FindBlocks
0001B440                            
0001B440                            ; ===========================================================================
0001B440                            
0001B440                            loc_19474:				; XREF: Obj75_ShipIndex
0001B440 5368 003C                  		subq.w	#1,$3C(a0)
0001B444 6B00                       		bmi.s	loc_1947E
0001B446 6000 E3E8                  		bra.w	BossDefeated
0001B44A                            ; ===========================================================================
0001B44A                            
0001B44A                            loc_1947E:
0001B44A 5428 0025                  		addq.b	#2,$25(a0)
0001B44E 4268 0012                  		clr.w	$12(a0)
0001B452 08E8 0000 0022             		bset	#0,$22(a0)
0001B458 08A8 0007 0022             		bclr	#7,$22(a0)
0001B45E 4268 0010                  		clr.w	$10(a0)
0001B462 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001B468 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001B46C 6600                       		bne.s	loc_194A8
0001B46E 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001B474                            
0001B474                            loc_194A8:
0001B474 6000 FD58                  		bra.w	loc_19202
0001B478                            ; ===========================================================================
0001B478                            
0001B478                            loc_194AC:				; XREF: Obj75_ShipIndex
0001B478 5268 003C                  		addq.w	#1,$3C(a0)
0001B47C 6700                       		beq.s	loc_194BC
0001B47E 6A00                       		bpl.s	loc_194C2
0001B480 0668 0018 0012             		addi.w	#$18,$12(a0)
0001B486 6000                       		bra.s	loc_194EE
0001B488                            ; ===========================================================================
0001B488                            
0001B488                            loc_194BC:
0001B488 4268 0012                  		clr.w	$12(a0)
0001B48C 6000                       		bra.s	loc_194EE
0001B48E                            ; ===========================================================================
0001B48E                            
0001B48E                            loc_194C2:
0001B48E 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001B494 6500                       		bcs.s	loc_194DA
0001B496 6700                       		beq.s	loc_194E0
0001B498 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001B49E 6500                       		bcs.s	loc_194EE
0001B4A0 5428 0025                  		addq.b	#2,$25(a0)
0001B4A4 6000                       		bra.s	loc_194EE
0001B4A6                            ; ===========================================================================
0001B4A6                            
0001B4A6                            loc_194DA:
0001B4A6 5168 0012                  		subq.w	#8,$12(a0)
0001B4AA 6000                       		bra.s	loc_194EE
0001B4AC                            ; ===========================================================================
0001B4AC                            
0001B4AC                            loc_194E0:
0001B4AC 4268 0012                  		clr.w	$12(a0)
0001B4B0 303C 0085                  		move.w	#$85,d0
0001B4B4 4EB9 0000 11F0             		jsr	(PlaySound).l	; play SYZ music
0001B4BA                            
0001B4BA                            loc_194EE:
0001B4BA 6000 FD02                  		bra.w	loc_191F2
0001B4BE                            ; ===========================================================================
0001B4BE                            
0001B4BE                            loc_194F2:				; XREF: Obj75_ShipIndex
0001B4BE 317C 0400 0010             		move.w	#$400,$10(a0)
0001B4C4 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001B4CA 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001B4D0 6400                       		bcc.s	loc_1950C
0001B4D2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001B4D6 6000                       		bra.s	loc_19512
0001B4D8                            ; ===========================================================================
0001B4D8                            
0001B4D8                            loc_1950C:
0001B4D8 4A28 0001                  		tst.b	1(a0)
0001B4DC 6A00                       		bpl.s	Obj75_ShipDelete
0001B4DE                            
0001B4DE                            loc_19512:
0001B4DE 6100 E39E                  		bsr.w	BossMove
0001B4E2 6000 FCC6                  		bra.w	loc_191DE
0001B4E6                            ; ===========================================================================
0001B4E6                            
0001B4E6                            Obj75_ShipDelete:
0001B4E6 4EF9 0000 E99A             		jmp	DeleteObject
0001B4EC                            ; ===========================================================================
0001B4EC                            
0001B4EC                            Obj75_FaceMain:				; XREF: Obj75_Index
0001B4EC 7201                       		moveq	#1,d1
0001B4EE 2268 0034                  		movea.l	$34(a0),a1
0001B4F2 7000                       		moveq	#0,d0
0001B4F4 1029 0025                  		move.b	$25(a1),d0
0001B4F8 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001B4FC 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001B500 1141 001C                  		move.b	d1,$1C(a0)
0001B504 1010                       		move.b	(a0),d0
0001B506 B011                       		cmp.b	(a1),d0
0001B508 6600                       		bne.s	Obj75_FaceDelete
0001B50A 6000                       		bra.s	loc_195BE
0001B50C                            ; ===========================================================================
0001B50C                            
0001B50C                            Obj75_FaceDelete:
0001B50C 4EF9 0000 E99A             		jmp	DeleteObject
0001B512                            ; ===========================================================================
0001B512 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001B516 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001B51A 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001B51E                            ; ===========================================================================
0001B51E                            
0001B51E                            loc_19552:				; XREF: off_19546
0001B51E 720A                       		moveq	#$A,d1
0001B520 4E75                       		rts	
0001B522                            ; ===========================================================================
0001B522                            
0001B522                            loc_19556:				; XREF: off_19546
0001B522 7206                       		moveq	#6,d1
0001B524 4E75                       		rts	
0001B526                            ; ===========================================================================
0001B526                            
0001B526                            loc_1955A:				; XREF: off_19546
0001B526 7000                       		moveq	#0,d0
0001B528 1029 0028                  		move.b	$28(a1),d0
0001B52C 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001B530 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001B534                            ; ===========================================================================
0001B534 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001B538 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001B53C                            ; ===========================================================================
0001B53C                            
0001B53C                            loc_19570:				; XREF: off_19568
0001B53C 6000                       		bra.s	loc_19574
0001B53E                            ; ===========================================================================
0001B53E                            
0001B53E                            loc_19572:				; XREF: off_19568
0001B53E 7206                       		moveq	#6,d1
0001B540                            
0001B540                            loc_19574:				; XREF: off_19546
0001B540 4A29 0020                  		tst.b	$20(a1)
0001B544 6600                       		bne.s	loc_1957E
0001B546 7205                       		moveq	#5,d1
0001B548 4E75                       		rts	
0001B54A                            ; ===========================================================================
0001B54A                            
0001B54A                            loc_1957E:
0001B54A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001B550 6500                       		bcs.s	locret_19588
0001B552 7204                       		moveq	#4,d1
0001B554                            
0001B554                            locret_19588:
0001B554 4E75                       		rts	
0001B556                            ; ===========================================================================
0001B556                            
0001B556                            Obj75_FlameMain:			; XREF: Obj75_Index
0001B556 117C 0007 001C             		move.b	#7,$1C(a0)
0001B55C 2268 0034                  		movea.l	$34(a0),a1
0001B560 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B566 6600                       		bne.s	loc_195AA
0001B568 117C 000B 001C             		move.b	#$B,$1C(a0)
0001B56E 4A28 0001                  		tst.b	1(a0)
0001B572 6A00                       		bpl.s	Obj75_FlameDelete
0001B574 6000                       		bra.s	loc_195B6
0001B576                            ; ===========================================================================
0001B576                            
0001B576                            loc_195AA:
0001B576 4A69 0010                  		tst.w	$10(a1)
0001B57A 6700                       		beq.s	loc_195B6
0001B57C 117C 0008 001C             		move.b	#8,$1C(a0)
0001B582                            
0001B582                            loc_195B6:
0001B582 6000                       		bra.s	loc_195BE
0001B584                            ; ===========================================================================
0001B584                            
0001B584                            Obj75_FlameDelete:
0001B584 4EF9 0000 E99A             		jmp	DeleteObject
0001B58A                            ; ===========================================================================
0001B58A                            
0001B58A                            loc_195BE:
0001B58A 43F9 0001 9C8E             		lea	(Ani_Eggman).l,a1
0001B590 4EB9 0000 B9AA             		jsr	AnimateSprite
0001B596 2268 0034                  		movea.l	$34(a0),a1
0001B59A 3169 0008 0008             		move.w	8(a1),8(a0)
0001B5A0 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B5A6                            
0001B5A6                            loc_195DA:
0001B5A6 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001B5AC 7003                       		moveq	#3,d0
0001B5AE C028 0022                  		and.b	$22(a0),d0
0001B5B2 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B5B8 8128 0001                  		or.b	d0,1(a0)
0001B5BC 4EF9 0000 E94A             		jmp	DisplaySprite
0001B5C2                            ; ===========================================================================
0001B5C2                            
0001B5C2                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001B5C2 217C 0001 9DA6 0004        		move.l	#Map_BossItems,4(a0)
0001B5CA 317C 246C 0002             		move.w	#$246C,2(a0)
0001B5D0 117C 0005 001A             		move.b	#5,$1A(a0)
0001B5D6 2268 0034                  		movea.l	$34(a0),a1
0001B5DA 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B5E0 6600                       		bne.s	loc_1961C
0001B5E2 4A28 0001                  		tst.b	1(a0)
0001B5E6 6A00                       		bpl.s	Obj75_SpikeDelete
0001B5E8                            
0001B5E8                            loc_1961C:
0001B5E8 3169 0008 0008             		move.w	8(a1),8(a0)
0001B5EE 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B5F4 3028 003C                  		move.w	$3C(a0),d0
0001B5F8 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001B5FE 6600                       		bne.s	loc_19652
0001B600 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001B606 6700                       		beq.s	loc_1964C
0001B608 4A29 0028                  		tst.b	$28(a1)
0001B60C 6600                       		bne.s	loc_19658
0001B60E 0C40 0094                  		cmpi.w	#$94,d0
0001B612 6C00                       		bge.s	loc_19658
0001B614 5E40                       		addq.w	#7,d0
0001B616 6000                       		bra.s	loc_19658
0001B618                            ; ===========================================================================
0001B618                            
0001B618                            loc_1964C:
0001B618 4A69 003C                  		tst.w	$3C(a1)
0001B61C 6A00                       		bpl.s	loc_19658
0001B61E                            
0001B61E                            loc_19652:
0001B61E 4A40                       		tst.w	d0
0001B620 6F00                       		ble.s	loc_19658
0001B622 5B40                       		subq.w	#5,d0
0001B624                            
0001B624                            loc_19658:
0001B624 3140 003C                  		move.w	d0,$3C(a0)
0001B628 E440                       		asr.w	#2,d0
0001B62A D168 000C                  		add.w	d0,$C(a0)
0001B62E 117C 0008 0019             		move.b	#8,$19(a0)
0001B634 117C 000C 0016             		move.b	#$C,$16(a0)
0001B63A 4228 0020                  		clr.b	$20(a0)
0001B63E 2268 0034                  		movea.l	$34(a0),a1
0001B642 4A29 0020                  		tst.b	$20(a1)
0001B646 6700                       		beq.s	loc_19688
0001B648 4A29 0029                  		tst.b	$29(a1)
0001B64C 6600                       		bne.s	loc_19688
0001B64E 117C 0084 0020             		move.b	#$84,$20(a0)
0001B654                            
0001B654                            loc_19688:
0001B654 6000 FF50                  		bra.w	loc_195DA
0001B658                            ; ===========================================================================
0001B658                            
0001B658                            Obj75_SpikeDelete:
0001B658 4EF9 0000 E99A             		jmp	DeleteObject
0001B65E                            ; ===========================================================================
0001B65E                            ; ---------------------------------------------------------------------------
0001B65E                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001B65E                            ; ---------------------------------------------------------------------------
0001B65E                            
0001B65E                            Obj76:					; XREF: Obj_Index
0001B65E 7000                       		moveq	#0,d0
0001B660 1028 0024                  		move.b	$24(a0),d0
0001B664 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001B668 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001B66C                            ; ===========================================================================
0001B66C 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001B66E 0000                       		dc.w Obj76_Action-Obj76_Index
0001B670 0000                       		dc.w loc_19762-Obj76_Index
0001B672                            ; ===========================================================================
0001B672                            
0001B672                            Obj76_Main:				; XREF: Obj76_Index
0001B672 7800                       		moveq	#0,d4
0001B674 3A3C 2C10                  		move.w	#$2C10,d5
0001B678 7C09                       		moveq	#9,d6
0001B67A 43D0                       		lea	(a0),a1
0001B67C 6000                       		bra.s	Obj76_MakeBlock
0001B67E                            ; ===========================================================================
0001B67E                            
0001B67E                            Obj76_Loop:
0001B67E 4EB9 0000 F0A0             		jsr	SingleObjLoad
0001B684 6600                       		bne.s	Obj76_ExitLoop
0001B686                            
0001B686                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001B686 12BC 0076                  		move.b	#$76,(a1)
0001B68A 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001B692 337C 4000 0002             		move.w	#$4000,2(a1)
0001B698 137C 0004 0001             		move.b	#4,1(a1)
0001B69E 137C 0010 0019             		move.b	#$10,$19(a1)
0001B6A4 137C 0010 0016             		move.b	#$10,$16(a1)
0001B6AA 137C 0003 0018             		move.b	#3,$18(a1)
0001B6B0 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001B6B4 337C 0582 000C             		move.w	#$582,$C(a1)
0001B6BA 3344 0028                  		move.w	d4,$28(a1)
0001B6BE 0644 0101                  		addi.w	#$101,d4
0001B6C2 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001B6C6 5429 0024                  		addq.b	#2,$24(a1)
0001B6CA 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001B6CE                            
0001B6CE                            Obj76_ExitLoop:
0001B6CE 4E75                       		rts	
0001B6D0                            ; ===========================================================================
0001B6D0                            
0001B6D0                            Obj76_Action:				; XREF: Obj76_Index
0001B6D0 1028 0029                  		move.b	$29(a0),d0
0001B6D4 B028 0028                  		cmp.b	$28(a0),d0
0001B6D8 6700                       		beq.s	Obj76_Solid
0001B6DA 4A00                       		tst.b	d0
0001B6DC 6B00                       		bmi.s	loc_19718
0001B6DE                            
0001B6DE                            loc_19712:
0001B6DE 6100 0000                  		bsr.w	Obj76_Break
0001B6E2 6000                       		bra.s	Obj76_Display
0001B6E4                            ; ===========================================================================
0001B6E4                            
0001B6E4                            loc_19718:
0001B6E4 2268 0034                  		movea.l	$34(a0),a1
0001B6E8 4A29 0021                  		tst.b	$21(a1)
0001B6EC 67F0                       		beq.s	loc_19712
0001B6EE 3169 0008 0008             		move.w	8(a1),8(a0)
0001B6F4 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B6FA 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001B700 B2C8                       		cmpa.w	a0,a1
0001B702 6500                       		bcs.s	Obj76_Display
0001B704 3029 0012                  		move.w	$12(a1),d0
0001B708 48C0                       		ext.l	d0
0001B70A E080                       		asr.l	#8,d0
0001B70C D168 000C                  		add.w	d0,$C(a0)
0001B710 6000                       		bra.s	Obj76_Display
0001B712                            ; ===========================================================================
0001B712                            
0001B712                            Obj76_Solid:				; XREF: Obj76_Action
0001B712 323C 001B                  		move.w	#$1B,d1
0001B716 343C 0010                  		move.w	#$10,d2
0001B71A 363C 0011                  		move.w	#$11,d3
0001B71E 3828 0008                  		move.w	8(a0),d4
0001B722 4EB9 0001 12B8             		jsr	SolidObject
0001B728                            
0001B728                            Obj76_Display:				; XREF: Obj76_Action
0001B728 4EF9 0000 E94A             		jmp	DisplaySprite
0001B72E                            ; ===========================================================================
0001B72E                            
0001B72E                            loc_19762:				; XREF: Obj76_Index
0001B72E 4A28 0001                  		tst.b	1(a0)
0001B732 6A00                       		bpl.s	Obj76_Delete
0001B734 4EB9 0000 E910             		jsr	ObjectFall
0001B73A 4EF9 0000 E94A             		jmp	DisplaySprite
0001B740                            ; ===========================================================================
0001B740                            
0001B740                            Obj76_Delete:
0001B740 4EF9 0000 E99A             		jmp	DeleteObject
0001B746                            
0001B746                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B746                            
0001B746                            
0001B746                            Obj76_Break:				; XREF: Obj76_Action
0001B746 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001B74A 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001B74E 7801                       		moveq	#1,d4
0001B750 7203                       		moveq	#3,d1
0001B752 7438                       		moveq	#$38,d2
0001B754 5428 0024                  		addq.b	#2,$24(a0)
0001B758 117C 0008 0019             		move.b	#8,$19(a0)
0001B75E 117C 0008 0016             		move.b	#8,$16(a0)
0001B764 43D0                       		lea	(a0),a1
0001B766 6000                       		bra.s	Obj76_MakeFrag
0001B768                            ; ===========================================================================
0001B768                            
0001B768                            Obj76_LoopFrag:
0001B768 4EB9 0000 F0B6             		jsr	SingleObjLoad2
0001B76E 6600                       		bne.s	loc_197D4
0001B770                            
0001B770                            Obj76_MakeFrag:
0001B770 45D0                       		lea	(a0),a2
0001B772 47D1                       		lea	(a1),a3
0001B774 7603                       		moveq	#3,d3
0001B776                            
0001B776                            loc_197AA:
0001B776 26DA                       		move.l	(a2)+,(a3)+
0001B778 26DA                       		move.l	(a2)+,(a3)+
0001B77A 26DA                       		move.l	(a2)+,(a3)+
0001B77C 26DA                       		move.l	(a2)+,(a3)+
0001B77E 51CB FFF6                  		dbf	d3,loc_197AA
0001B782                            
0001B782 335C 0010                  		move.w	(a4)+,$10(a1)
0001B786 335C 0012                  		move.w	(a4)+,$12(a1)
0001B78A 361D                       		move.w	(a5)+,d3
0001B78C D769 0008                  		add.w	d3,8(a1)
0001B790 361D                       		move.w	(a5)+,d3
0001B792 D769 000C                  		add.w	d3,$C(a1)
0001B796 1344 001A                  		move.b	d4,$1A(a1)
0001B79A 5244                       		addq.w	#1,d4
0001B79C 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001B7A0                            
0001B7A0                            loc_197D4:
0001B7A0 303C 00CB                  		move.w	#$CB,d0
0001B7A4 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play smashing sound
0001B7AA                            ; End of function Obj76_Break
0001B7AA                            
0001B7AA                            ; ===========================================================================
0001B7AA FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001B7AE 0180 FE00                  		dc.w $180, $FE00
0001B7B2 FF00 FF00                  		dc.w $FF00, $FF00
0001B7B6 0100 FF00                  		dc.w $100, $FF00
0001B7BA FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001B7BE 0010 0000                  		dc.w $10, 0
0001B7C2 0000 0010                  		dc.w 0,	$10
0001B7C6 0010 0010                  		dc.w $10, $10
0001B7CA                            ; ---------------------------------------------------------------------------
0001B7CA                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001B7CA                            ; ---------------------------------------------------------------------------
0001B7CA                            Map_obj76:
0001B7CA                            	include "_maps\obj76.asm"
0001B7CA                            ; ---------------------------------------------------------------------------
0001B7CA                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001B7CA                            ; ---------------------------------------------------------------------------
0001B7CA 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001B7CE 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001B7D2 0000                       		dc.w byte_19826-Map_obj76
0001B7D4 02                         byte_19808:	dc.b 2
0001B7D5 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001B7DA 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001B7DF 00                         		dc.b 0
0001B7E0 01                         byte_19814:	dc.b 1
0001B7E1 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001B7E6 01                         byte_1981A:	dc.b 1
0001B7E7 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001B7EC 01                         byte_19820:	dc.b 1
0001B7ED F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001B7F2 01                         byte_19826:	dc.b 1
0001B7F3 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001B7F8                            		even
0001B7F8                            		even
0001B7F8                            
0001B7F8                            ; ===========================================================================
0001B7F8                            
0001B7F8                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001B7F8 4EF9 0000 E99A             		jmp	DeleteObject
0001B7FE                            ; ===========================================================================
0001B7FE                            ; ---------------------------------------------------------------------------
0001B7FE                            ; Object 82 - Eggman (SBZ2)
0001B7FE                            ; ---------------------------------------------------------------------------
0001B7FE                            
0001B7FE                            Obj82:					; XREF: Obj_Index
0001B7FE 7000                       		moveq	#0,d0
0001B800 1028 0024                  		move.b	$24(a0),d0
0001B804 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001B808 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001B80C                            ; ===========================================================================
0001B80C 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001B80E 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001B810 0000                       		dc.w Obj82_Switch-Obj82_Index
0001B812                            
0001B812 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001B815 0400 03                    		dc.b 4,	0, 3
0001B818                            ; ===========================================================================
0001B818                            
0001B818                            Obj82_Main:				; XREF: Obj82_Index
0001B818 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001B81C 317C 2160 0008             		move.w	#$2160,8(a0)
0001B822 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001B828 117C 000F 0020             		move.b	#$F,$20(a0)
0001B82E 117C 0010 0021             		move.b	#$10,$21(a0)
0001B834 08A8 0000 0022             		bclr	#0,$22(a0)
0001B83A 4228 0025                  		clr.b	$25(a0)
0001B83E 115A 0024                  		move.b	(a2)+,$24(a0)
0001B842 115A 001C                  		move.b	(a2)+,$1C(a0)
0001B846 115A 0018                  		move.b	(a2)+,$18(a0)
0001B84A 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001B852 317C 0400 0002             		move.w	#$400,2(a0)
0001B858 117C 0004 0001             		move.b	#4,1(a0)
0001B85E 08E8 0007 0001             		bset	#7,1(a0)
0001B864 117C 0020 0019             		move.b	#$20,$19(a0)
0001B86A 4EB9 0000 F0B6             		jsr	SingleObjLoad2
0001B870 6600                       		bne.s	Obj82_Eggman
0001B872 2348 0034                  		move.l	a0,$34(a1)
0001B876 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001B87A 337C 2130 0008             		move.w	#$2130,8(a1)
0001B880 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001B886 4228 0025                  		clr.b	$25(a0)
0001B88A 135A 0024                  		move.b	(a2)+,$24(a1)
0001B88E 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B892 135A 0018                  		move.b	(a2)+,$18(a1)
0001B896 237C 0000 D1B4 0004        		move.l	#Map_obj32,4(a1)
0001B89E 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001B8A4 137C 0004 0001             		move.b	#4,1(a1)
0001B8AA 08E9 0007 0001             		bset	#7,1(a1)
0001B8B0 137C 0010 0019             		move.b	#$10,$19(a1)
0001B8B6 137C 0000 001A             		move.b	#0,$1A(a1)
0001B8BC                            
0001B8BC                            Obj82_Eggman:				; XREF: Obj82_Index
0001B8BC 7000                       		moveq	#0,d0
0001B8BE 1028 0025                  		move.b	$25(a0),d0
0001B8C2 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001B8C6 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001B8CA 43FA 0000                  		lea	Ani_obj82(pc),a1
0001B8CE 4EB9 0000 B9AA             		jsr	AnimateSprite
0001B8D4 4EF9 0000 E94A             		jmp	DisplaySprite
0001B8DA                            ; ===========================================================================
0001B8DA 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001B8DC 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001B8DE 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001B8E0 0000                       		dc.w loc_19934-Obj82_EggIndex
0001B8E2                            ; ===========================================================================
0001B8E2                            
0001B8E2                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001B8E2 3028 0008                  		move.w	8(a0),d0
0001B8E6 9078 D008                  		sub.w	($FFFFD008).w,d0
0001B8EA 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001B8EE 6400                       		bcc.s	loc_19934	; if not, branch
0001B8F0 5428 0025                  		addq.b	#2,$25(a0)
0001B8F4 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001B8FA 117C 0001 001C             		move.b	#1,$1C(a0)
0001B900                            
0001B900                            loc_19934:				; XREF: Obj82_EggIndex
0001B900 4EF9 0000 E930             		jmp	SpeedToPos
0001B906                            ; ===========================================================================
0001B906                            
0001B906                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001B906 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001B90A 6600                       		bne.s	loc_19954	; if time remains, branch
0001B90C 5428 0025                  		addq.b	#2,$25(a0)
0001B910 117C 0002 001C             		move.b	#2,$1C(a0)
0001B916 5868 000C                  		addq.w	#4,$C(a0)
0001B91A 317C 000F 003C             		move.w	#15,$3C(a0)
0001B920                            
0001B920                            loc_19954:
0001B920 60DE                       		bra.s	loc_19934
0001B922                            ; ===========================================================================
0001B922                            
0001B922                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001B922 5368 003C                  		subq.w	#1,$3C(a0)
0001B926 6E00                       		bgt.s	loc_199D0
0001B928 6600                       		bne.s	loc_1996A
0001B92A 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001B930 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001B936                            
0001B936                            loc_1996A:
0001B936 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001B93C 6E00                       		bgt.s	loc_19976
0001B93E 4268 0010                  		clr.w	$10(a0)
0001B942                            
0001B942                            loc_19976:
0001B942 0668 0024 0012             		addi.w	#$24,$12(a0)
0001B948 4A68 0012                  		tst.w	$12(a0)
0001B94C 6B00                       		bmi.s	Obj82_FindBlocks
0001B94E 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001B954 6500                       		bcs.s	Obj82_FindBlocks
0001B956 317C 5357 0028             		move.w	#$5357,$28(a0)
0001B95C 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001B962 6500                       		bcs.s	Obj82_FindBlocks
0001B964 317C 059B 000C             		move.w	#$59B,$C(a0)
0001B96A 4268 0012                  		clr.w	$12(a0)
0001B96E                            
0001B96E                            Obj82_FindBlocks:
0001B96E 3028 0010                  		move.w	$10(a0),d0
0001B972 8068 0012                  		or.w	$12(a0),d0
0001B976 6600                       		bne.s	loc_199D0
0001B978 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001B97C 703E                       		moveq	#$3E,d0
0001B97E 7240                       		moveq	#$40,d1
0001B980                            
0001B980                            Obj82_FindLoop:	
0001B980 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001B982 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001B986 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001B98A                            
0001B98A 6600                       		bne.s	loc_199D0
0001B98C 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001B992 5428 0025                  		addq.b	#2,$25(a0)
0001B996 117C 0001 001C             		move.b	#1,$1C(a0)
0001B99C                            
0001B99C                            loc_199D0:
0001B99C 6000 FF62                  		bra.w	loc_19934
0001B9A0                            ; ===========================================================================
0001B9A0                            
0001B9A0                            Obj82_Switch:				; XREF: Obj82_Index
0001B9A0 7000                       		moveq	#0,d0
0001B9A2 1028 0025                  		move.b	$25(a0),d0
0001B9A6 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001B9AA 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001B9AE                            ; ===========================================================================
0001B9AE 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001B9B0 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001B9B2                            ; ===========================================================================
0001B9B2                            
0001B9B2                            loc_199E6:				; XREF: Obj82_SwIndex
0001B9B2 2268 0034                  		movea.l	$34(a0),a1
0001B9B6 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001B9BC 6600                       		bne.s	Obj82_SwDisplay
0001B9BE 117C 0001 001A             		move.b	#1,$1A(a0)
0001B9C4 5428 0025                  		addq.b	#2,$25(a0)
0001B9C8                            
0001B9C8                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001B9C8 4EF9 0000 E94A             		jmp	DisplaySprite
0001B9CE                            ; ===========================================================================
0001B9CE                            Ani_obj82:
0001B9CE                            	include "_anim\obj82.asm"
0001B9CE                            ; ---------------------------------------------------------------------------
0001B9CE                            ; Animation script - Eggman (SBZ2)
0001B9CE                            ; ---------------------------------------------------------------------------
0001B9CE 0000                       		dc.w byte_19A10-Ani_obj82
0001B9D0 0000                       		dc.w byte_19A14-Ani_obj82
0001B9D2 0000                       		dc.w byte_19A18-Ani_obj82
0001B9D4 0000                       		dc.w byte_19A20-Ani_obj82
0001B9D6 0000                       		dc.w byte_19A24-Ani_obj82
0001B9D8 0000                       		dc.w byte_19A2A-Ani_obj82
0001B9DA 0000                       		dc.w byte_19A30-Ani_obj82
0001B9DC 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001B9E0 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001B9E4 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001B9EC 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001B9F0 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001B9F6 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001B9FC 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001BA00                            		even
0001BA00                            		even
0001BA00                            
0001BA00                            ; ---------------------------------------------------------------------------
0001BA00                            ; Sprite mappings - Eggman (SBZ2)
0001BA00                            ; ---------------------------------------------------------------------------
0001BA00                            Map_obj82:
0001BA00                            	include "_maps\obj82.asm"
0001BA00                            ; ---------------------------------------------------------------------------
0001BA00                            ; Sprite mappings - Eggman (SBZ2)
0001BA00                            ; ---------------------------------------------------------------------------
0001BA00 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0001BA04 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
0001BA08 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
0001BA0C 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001BA10 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0001BA14 0000                       		dc.w byte_19B4F-Map_obj82
0001BA16 03                         byte_19A4A:	dc.b 3
0001BA17 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001BA1C E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BA21 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BA26 04                         byte_19A5A:	dc.b 4
0001BA27 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001BA2C E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BA31 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BA36 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001BA3B 00                         		dc.b 0
0001BA3C 04                         byte_19A70:	dc.b 4
0001BA3D E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001BA42 E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001BA47 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001BA4C FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001BA51 00                         		dc.b 0
0001BA52 04                         byte_19A86:	dc.b 4
0001BA53 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001BA58 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001BA5D 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001BA62 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001BA67 00                         		dc.b 0
0001BA68 04                         byte_19A9C:	dc.b 4
0001BA69 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BA6E F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001BA73 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001BA78 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BA7D 00                         		dc.b 0
0001BA7E 04                         byte_19AB2:	dc.b 4
0001BA7F E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BA84 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BA89 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BA8E 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BA93 00                         		dc.b 0
0001BA94 07                         byte_19AC8:	dc.b 7
0001BA95 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BA9A E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BA9F 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001BAA4 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001BAA9 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BAAE F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001BAB3 F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001BAB8 05                         byte_19AEC:	dc.b 5
0001BAB9 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BABE F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001BAC3 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001BAC8 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001BACD E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BAD2 06                         byte_19B06:	dc.b 6
0001BAD3 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001BAD8 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001BADD 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001BAE2 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001BAE7 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001BAEC E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001BAF1 00                         		dc.b 0
0001BAF2 08                         byte_19B26:	dc.b 8
0001BAF3 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BAF8 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BAFD E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BB02 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BB07 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001BB0C F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001BB11 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001BB16 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001BB1B 03                         byte_19B4F:	dc.b 3
0001BB1C EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
0001BB21 F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001BB26 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001BB2C 00                         		even
0001BB2C 00                         		even
0001BB2C                            
0001BB2C                            ; ===========================================================================
0001BB2C                            ; ---------------------------------------------------------------------------
0001BB2C                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001BB2C                            ; ---------------------------------------------------------------------------
0001BB2C                            
0001BB2C                            Obj83:					; XREF: Obj_Index
0001BB2C 7000                       		moveq	#0,d0
0001BB2E 1028 0024                  		move.b	$24(a0),d0
0001BB32 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001BB36 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001BB3A                            ; ===========================================================================
0001BB3A 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001BB3C 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001BB3E 0000                       		dc.w loc_19C36-Obj83_Index
0001BB40 0000                       		dc.w loc_19C62-Obj83_Index
0001BB42 0000                       		dc.w loc_19C72-Obj83_Index
0001BB44 0000                       		dc.w loc_19C80-Obj83_Index
0001BB46                            ; ===========================================================================
0001BB46                            
0001BB46                            Obj83_Main:				; XREF: Obj83_Index
0001BB46 317C 2080 0008             		move.w	#$2080,8(a0)
0001BB4C 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001BB52 117C 0080 0019             		move.b	#$80,$19(a0)
0001BB58 117C 0010 0016             		move.b	#$10,$16(a0)
0001BB5E 117C 0004 0001             		move.b	#4,1(a0)
0001BB64 08E8 0007 0001             		bset	#7,1(a0)
0001BB6A 7800                       		moveq	#0,d4
0001BB6C 3A3C 2010                  		move.w	#$2010,d5
0001BB70 7C07                       		moveq	#7,d6
0001BB72 45E8 0030                  		lea	$30(a0),a2
0001BB76                            
0001BB76                            Obj83_MakeBlock:
0001BB76 4EB9 0000 F0A0             		jsr	SingleObjLoad
0001BB7C 6600                       		bne.s	Obj83_ExitMake
0001BB7E 34C9                       		move.w	a1,(a2)+
0001BB80 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001BB84 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001BB8C 337C 4518 0002             		move.w	#$4518,2(a1)
0001BB92 137C 0004 0001             		move.b	#4,1(a1)
0001BB98 137C 0010 0019             		move.b	#$10,$19(a1)
0001BB9E 137C 0010 0016             		move.b	#$10,$16(a1)
0001BBA4 137C 0003 0018             		move.b	#3,$18(a1)
0001BBAA 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001BBAE 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001BBB4 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001BBB8 137C 0008 0024             		move.b	#8,$24(a1)
0001BBBE 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001BBC2                            
0001BBC2                            Obj83_ExitMake:
0001BBC2 5428 0024                  		addq.b	#2,$24(a0)
0001BBC6 4E75                       		rts	
0001BBC8                            ; ===========================================================================
0001BBC8                            
0001BBC8                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001BBC8 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001BBCE 6600                       		bne.s	Obj83_Solid	; if not, branch
0001BBD0 4228 001A                  		clr.b	$1A(a0)
0001BBD4 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001BBD8                            
0001BBD8                            Obj83_Solid:
0001BBD8 7000                       		moveq	#0,d0
0001BBDA 1028 001A                  		move.b	$1A(a0),d0
0001BBDE 4400                       		neg.b	d0
0001BBE0 4880                       		ext.w	d0
0001BBE2 5040                       		addq.w	#8,d0
0001BBE4 E940                       		asl.w	#4,d0
0001BBE6 383C 2100                  		move.w	#$2100,d4
0001BBEA 9840                       		sub.w	d0,d4
0001BBEC 1140 0019                  		move.b	d0,$19(a0)
0001BBF0 3144 0008                  		move.w	d4,8(a0)
0001BBF4 720B                       		moveq	#$B,d1
0001BBF6 D240                       		add.w	d0,d1
0001BBF8 7410                       		moveq	#$10,d2
0001BBFA 7611                       		moveq	#$11,d3
0001BBFC 4EF9 0001 12B8             		jmp	SolidObject
0001BC02                            ; ===========================================================================
0001BC02                            
0001BC02                            loc_19C36:				; XREF: Obj83_Index
0001BC02 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001BC08 6400                       		bcc.s	Obj83_Solid2
0001BC0A 70FF                       		moveq	#-1,d0
0001BC0C 1028 001A                  		move.b	$1A(a0),d0
0001BC10 4880                       		ext.w	d0
0001BC12 D040                       		add.w	d0,d0
0001BC14 3030 0030                  		move.w	$30(a0,d0.w),d0
0001BC18 2240                       		movea.l	d0,a1
0001BC1A 337C 474F 0028             		move.w	#$474F,$28(a1)
0001BC20 5228 001A                  		addq.b	#1,$1A(a0)
0001BC24 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001BC2A 6700                       		beq.s	loc_19C62
0001BC2C                            
0001BC2C                            Obj83_Solid2:
0001BC2C 60AA                       		bra.s	Obj83_Solid
0001BC2E                            ; ===========================================================================
0001BC2E                            
0001BC2E                            loc_19C62:				; XREF: Obj83_Index
0001BC2E 08A8 0003 0022             		bclr	#3,$22(a0)
0001BC34 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001BC3A 6000 FBBC                  		bra.w	loc_1982C
0001BC3E                            ; ===========================================================================
0001BC3E                            
0001BC3E                            loc_19C72:				; XREF: Obj83_Index
0001BC3E 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001BC44 6700                       		beq.s	Obj83_Break	; if yes, branch
0001BC46 4EF9 0000 E94A             		jmp	DisplaySprite
0001BC4C                            ; ===========================================================================
0001BC4C                            
0001BC4C                            loc_19C80:				; XREF: Obj83_Index
0001BC4C 4A28 0001                  		tst.b	1(a0)
0001BC50 6A00 FBA6                  		bpl.w	loc_1982C
0001BC54 4EB9 0000 E910             		jsr	ObjectFall
0001BC5A 4EF9 0000 E94A             		jmp	DisplaySprite
0001BC60                            ; ===========================================================================
0001BC60                            
0001BC60                            Obj83_Break:				; XREF: loc_19C72
0001BC60 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001BC64 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001BC68 7801                       		moveq	#1,d4
0001BC6A 7203                       		moveq	#3,d1
0001BC6C 7438                       		moveq	#$38,d2
0001BC6E 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001BC74 31FC 0200 F5D0             		move.w	#$200,(SonimeSST+sonime_facetimer).w
0001BC7A 5428 0024                  		addq.b	#2,$24(a0)
0001BC7E 117C 0008 0019             		move.b	#8,$19(a0)
0001BC84 117C 0008 0016             		move.b	#8,$16(a0)
0001BC8A 43D0                       		lea	(a0),a1
0001BC8C 6000                       		bra.s	Obj83_MakeFrag
0001BC8E                            ; ===========================================================================
0001BC8E                            
0001BC8E                            Obj83_LoopFrag:
0001BC8E 4EB9 0000 F0B6             		jsr	SingleObjLoad2
0001BC94 6600                       		bne.s	Obj83_BreakSnd
0001BC96                            
0001BC96                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001BC96 45D0                       		lea	(a0),a2
0001BC98 47D1                       		lea	(a1),a3
0001BC9A 7603                       		moveq	#3,d3
0001BC9C                            
0001BC9C                            loc_19CC4:
0001BC9C 26DA                       		move.l	(a2)+,(a3)+
0001BC9E 26DA                       		move.l	(a2)+,(a3)+
0001BCA0 26DA                       		move.l	(a2)+,(a3)+
0001BCA2 26DA                       		move.l	(a2)+,(a3)+
0001BCA4 51CB FFF6                  		dbf	d3,loc_19CC4
0001BCA8                            
0001BCA8 335C 0012                  		move.w	(a4)+,$12(a1)
0001BCAC 361D                       		move.w	(a5)+,d3
0001BCAE D769 0008                  		add.w	d3,8(a1)
0001BCB2 361D                       		move.w	(a5)+,d3
0001BCB4 D769 000C                  		add.w	d3,$C(a1)
0001BCB8 1344 001A                  		move.b	d4,$1A(a1)
0001BCBC 5244                       		addq.w	#1,d4
0001BCBE 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001BCC2                            
0001BCC2                            Obj83_BreakSnd:
0001BCC2 303C 00CB                  		move.w	#$CB,d0
0001BCC6 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play smashing sound
0001BCCC 4EF9 0000 E94A             		jmp	DisplaySprite
0001BCD2                            ; ===========================================================================
0001BCD2 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001BCD6 0120 00C0                  		dc.w $120, $C0
0001BCDA FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001BCDE 0010 0000                  		dc.w $10, 0
0001BCE2 0000 0010                  		dc.w 0,	$10
0001BCE6 0010 0010                  		dc.w $10, $10
0001BCEA                            ; ---------------------------------------------------------------------------
0001BCEA                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001BCEA                            ; ---------------------------------------------------------------------------
0001BCEA                            Map_obj83:
0001BCEA                            	include "_maps\obj83.asm"
0001BCEA                            ; ---------------------------------------------------------------------------
0001BCEA                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001BCEA                            ; ---------------------------------------------------------------------------
0001BCEA 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001BCEE 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001BCF2 0000                       		dc.w byte_19D46-Map_obj83
0001BCF4 01                         byte_19D1C:	dc.b 1
0001BCF5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001BCFA 02                         byte_19D22:	dc.b 2
0001BCFB F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001BD00 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001BD05 00                         		dc.b 0
0001BD06 02                         byte_19D2E:	dc.b 2
0001BD07 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001BD0C F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001BD11 00                         		dc.b 0
0001BD12 02                         byte_19D3A:	dc.b 2
0001BD13 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001BD18 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001BD1D 00                         		dc.b 0
0001BD1E 02                         byte_19D46:	dc.b 2
0001BD1F F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001BD24 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001BD2A 00                         		even
0001BD2A 00                         		even
0001BD2A                            
0001BD2A                            ; ===========================================================================
0001BD2A                            ; ---------------------------------------------------------------------------
0001BD2A                            ; Object 85 - Eggman (FZ)
0001BD2A                            ; ---------------------------------------------------------------------------
0001BD2A                            
0001BD2A                            Obj85_Delete:
0001BD2A 4EF9 0000 E99A             		jmp	DeleteObject
0001BD30                            ; ===========================================================================
0001BD30                            
0001BD30                            Obj85:					; XREF: Obj_Index
0001BD30 7000                       		moveq	#0,d0
0001BD32 1028 0024                  		move.b	$24(a0),d0
0001BD36 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001BD3A 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001BD3E                            ; ===========================================================================
0001BD3E 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001BD40 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001BD42 0000                       		dc.w loc_1A38E-Obj85_Index
0001BD44 0000                       		dc.w loc_1A346-Obj85_Index
0001BD46 0000                       		dc.w loc_1A2C6-Obj85_Index
0001BD48 0000                       		dc.w loc_1A3AC-Obj85_Index
0001BD4A 0000                       		dc.w loc_1A264-Obj85_Index
0001BD4C                            
0001BD4C 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001BD52 0001 BA00                  		dc.l Map_obj82		; mappings pointer
0001BD56 25B0 0590 0300             		dc.w $25B0, $590, $300
0001BD5C 0000 0000                  		dc.l Map_obj84
0001BD60 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001BD66 0000 0000                  		dc.l Map_FZBoss
0001BD6A 26E0 0596 0470             		dc.w $26E0, $596, $470
0001BD70 0001 BA00                  		dc.l Map_obj82
0001BD74 26E0 0596 0400             		dc.w $26E0, $596, $400
0001BD7A 0001 9CDE                  		dc.l Map_Eggman
0001BD7E 26E0 0596 0400             		dc.w $26E0, $596, $400
0001BD84 0001 9CDE                  		dc.l Map_Eggman
0001BD88                            
0001BD88 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001BD8D 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001BD92 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001BD97 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001BD9C 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001BDA1 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001BDA6                            ; ===========================================================================
0001BDA6                            
0001BDA6                            Obj85_Main:				; XREF: Obj85_Index
0001BDA6 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001BDAA 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001BDAE 2248                       		movea.l	a0,a1
0001BDB0 7205                       		moveq	#5,d1
0001BDB2 6000                       		bra.s	Obj85_LoadBoss
0001BDB4                            ; ===========================================================================
0001BDB4                            
0001BDB4                            Obj85_Loop:
0001BDB4 4EB9 0000 F0B6             		jsr	SingleObjLoad2
0001BDBA 6600                       		bne.s	loc_19E20
0001BDBC                            
0001BDBC                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001BDBC 12BC 0085                  		move.b	#$85,(a1)
0001BDC0 335A 0008                  		move.w	(a2)+,8(a1)
0001BDC4 335A 000C                  		move.w	(a2)+,$C(a1)
0001BDC8 335A 0002                  		move.w	(a2)+,2(a1)
0001BDCC 235A 0004                  		move.l	(a2)+,4(a1)
0001BDD0 135B 0024                  		move.b	(a3)+,$24(a1)
0001BDD4 135B 001C                  		move.b	(a3)+,$1C(a1)
0001BDD8 135B 0018                  		move.b	(a3)+,$18(a1)
0001BDDC 135B 0017                  		move.b	(a3)+,$17(a1)
0001BDE0 135B 0016                  		move.b	(a3)+,$16(a1)
0001BDE4 137C 0004 0001             		move.b	#4,1(a1)
0001BDEA 08E8 0007 0001             		bset	#7,1(a0)
0001BDF0 2348 0034                  		move.l	a0,$34(a1)
0001BDF4 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001BDF8                            
0001BDF8                            loc_19E20:
0001BDF8 45E8 0036                  		lea	$36(a0),a2
0001BDFC 4EB9 0000 F0A0             		jsr	SingleObjLoad
0001BE02 6600                       		bne.s	loc_19E5A
0001BE04 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001BE08 3489                       		move.w	a1,(a2)
0001BE0A 2348 0034                  		move.l	a0,$34(a1)
0001BE0E 45E8 0038                  		lea	$38(a0),a2
0001BE12 7400                       		moveq	#0,d2
0001BE14 7203                       		moveq	#3,d1
0001BE16                            
0001BE16                            loc_19E3E:
0001BE16 4EB9 0000 F0B6             		jsr	SingleObjLoad2
0001BE1C 6600                       		bne.s	loc_19E5A
0001BE1E 34C9                       		move.w	a1,(a2)+
0001BE20 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001BE24 2348 0034                  		move.l	a0,$34(a1)
0001BE28 1342 0028                  		move.b	d2,$28(a1)
0001BE2C 5442                       		addq.w	#2,d2
0001BE2E 51C9 FFE6                  		dbf	d1,loc_19E3E
0001BE32                            
0001BE32                            loc_19E5A:
0001BE32 317C 0000 0034             		move.w	#0,$34(a0)
0001BE38 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001BE3E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001BE44                            
0001BE44                            Obj85_Eggman:				; XREF: Obj85_Index
0001BE44 7000                       		moveq	#0,d0
0001BE46 1028 0034                  		move.b	$34(a0),d0
0001BE4A 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001BE4E 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001BE52 4EF9 0000 E94A             		jmp	DisplaySprite
0001BE58                            ; ===========================================================================
0001BE58 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001BE5C 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001BE60 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001BE64 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001BE68                            ; ===========================================================================
0001BE68                            
0001BE68                            loc_19E90:				; XREF: off_19E80
0001BE68 4AB8 F680                  		tst.l	($FFFFF680).w
0001BE6C 6600                       		bne.s	loc_19EA2
0001BE6E 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001BE74 6500                       		bcs.s	loc_19EA2
0001BE76 5428 0034                  		addq.b	#2,$34(a0)
0001BE7A                            
0001BE7A                            loc_19EA2:
0001BE7A 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001BE7E 4E75                       		rts	
0001BE80                            ; ===========================================================================
0001BE80                            
0001BE80                            loc_19EA8:				; XREF: off_19E80
0001BE80 4A68 0030                  		tst.w	$30(a0)
0001BE84 6A00                       		bpl.s	loc_19F10
0001BE86 4268 0030                  		clr.w	$30(a0)
0001BE8A 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001BE90 0240 000C                  		andi.w	#$C,d0
0001BE94 3200                       		move.w	d0,d1
0001BE96 5441                       		addq.w	#2,d1
0001BE98 4A80                       		tst.l	d0
0001BE9A 6A00                       		bpl.s	loc_19EC6
0001BE9C C141                       		exg	d1,d0
0001BE9E                            
0001BE9E                            loc_19EC6:
0001BE9E 43FA 0000                  		lea	word_19FD6(pc),a1
0001BEA2 3031 0000                  		move.w	(a1,d0.w),d0
0001BEA6 3231 1000                  		move.w	(a1,d1.w),d1
0001BEAA 3140 0030                  		move.w	d0,$30(a0)
0001BEAE 74FF                       		moveq	#-1,d2
0001BEB0 3430 0038                  		move.w	$38(a0,d0.w),d2
0001BEB4 2242                       		movea.l	d2,a1
0001BEB6 137C 00FF 0029             		move.b	#-1,$29(a1)
0001BEBC 337C FFFF 0030             		move.w	#-1,$30(a1)
0001BEC2 3430 1038                  		move.w	$38(a0,d1.w),d2
0001BEC6 2242                       		movea.l	d2,a1
0001BEC8 137C 0001 0029             		move.b	#1,$29(a1)
0001BECE 337C 0000 0030             		move.w	#0,$30(a1)
0001BED4 317C 0001 0032             		move.w	#1,$32(a0)
0001BEDA 4228 0035                  		clr.b	$35(a0)
0001BEDE 303C 00B7                  		move.w	#$B7,d0
0001BEE2 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001BEE8                            
0001BEE8                            loc_19F10:
0001BEE8 4A68 0032                  		tst.w	$32(a0)
0001BEEC 6B00 0000                  		bmi.w	loc_19FA6
0001BEF0 08A8 0000 0022             		bclr	#0,$22(a0)
0001BEF6 3038 D008                  		move.w	($FFFFD008).w,d0
0001BEFA 9068 0008                  		sub.w	8(a0),d0
0001BEFE 6500                       		bcs.s	loc_19F2E
0001BF00 08E8 0000 0022             		bset	#0,$22(a0)
0001BF06                            
0001BF06                            loc_19F2E:
0001BF06 323C 002B                  		move.w	#$2B,d1
0001BF0A 343C 0014                  		move.w	#$14,d2
0001BF0E 363C 0014                  		move.w	#$14,d3
0001BF12 3828 0008                  		move.w	8(a0),d4
0001BF16 4EB9 0001 12B8             		jsr	SolidObject
0001BF1C 4A44                       		tst.w	d4
0001BF1E 6E00                       		bgt.s	loc_19F50
0001BF20                            
0001BF20                            loc_19F48:
0001BF20 4A28 0035                  		tst.b	$35(a0)
0001BF24 6600                       		bne.s	loc_19F88
0001BF26 6000                       		bra.s	loc_19F96
0001BF28                            ; ===========================================================================
0001BF28                            
0001BF28                            loc_19F50:
0001BF28 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001BF2C 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001BF32 66EC                       		bne.s	loc_19F48
0001BF34 303C 0300                  		move.w	#$300,d0
0001BF38 0828 0000 0022             		btst	#0,$22(a0)
0001BF3E 6600                       		bne.s	loc_19F6A
0001BF40 4440                       		neg.w	d0
0001BF42                            
0001BF42                            loc_19F6A:
0001BF42 31C0 D010                  		move.w	d0,($FFFFD010).w
0001BF46 4A28 0035                  		tst.b	$35(a0)
0001BF4A 6600                       		bne.s	loc_19F88
0001BF4C 4A28 0021                  		tst.b	$21(a0)	;has the boss been defeated?
0001BF50 6700                       		beq.s	loc_19F9C	;if so, don't let it be hit again.		
0001BF52 5328 0021                  		subq.b	#1,$21(a0)
0001BF56 117C 00FF 0035             		move.b	#255,$35(a0)
0001BF5C 303C 00AC                  		move.w	#$AC,d0
0001BF60 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001BF66                            
0001BF66                            loc_19F88:
0001BF66 5328 0035                  		subq.b	#1,$35(a0)
0001BF6A 6700                       		beq.s	loc_19F96
0001BF6C 117C 0003 001C             		move.b	#3,$1C(a0)
0001BF72 6000                       		bra.s	loc_19F9C
0001BF74                            ; ===========================================================================
0001BF74                            
0001BF74                            loc_19F96:
0001BF74 117C 0001 001C             		move.b	#1,$1C(a0)
0001BF7A                            
0001BF7A                            loc_19F9C:
0001BF7A 43FA FA52                  		lea	Ani_obj82(pc),a1
0001BF7E 4EF9 0000 B9AA             		jmp	AnimateSprite
0001BF84                            ; ===========================================================================
0001BF84                            
0001BF84                            loc_19FA6:
0001BF84 4A28 0021                  		tst.b	$21(a0)
0001BF88 6700                       		beq.s	loc_19FBC
0001BF8A 5428 0034                  		addq.b	#2,$34(a0)
0001BF8E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001BF94 4268 0032                  		clr.w	$32(a0)
0001BF98 4E75                       		rts	
0001BF9A                            ; ===========================================================================
0001BF9A                            
0001BF9A                            loc_19FBC:
0001BF9A 117C 0006 0034             		move.b	#6,$34(a0)
0001BFA0 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001BFA6 317C 053C 000C             		move.w	#$53C,$C(a0)
0001BFAC 117C 0014 0016             		move.b	#$14,$16(a0)
0001BFB2 4E75                       		rts	
0001BFB4                            ; ===========================================================================
0001BFB4 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001BFC4                            ; ===========================================================================
0001BFC4                            
0001BFC4                            loc_19FE6:				; XREF: off_19E80
0001BFC4 70FF                       		moveq	#-1,d0
0001BFC6 3028 0036                  		move.w	$36(a0),d0
0001BFCA 2240                       		movea.l	d0,a1
0001BFCC 4A68 0030                  		tst.w	$30(a0)
0001BFD0 6A00                       		bpl.s	loc_1A000
0001BFD2 4268 0030                  		clr.w	$30(a0)
0001BFD6 137C 00FF 0029             		move.b	#-1,$29(a1)
0001BFDC 6100                       		bsr.s	loc_1A020
0001BFDE                            
0001BFDE                            loc_1A000:
0001BFDE 700F                       		moveq	#$F,d0
0001BFE0 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001BFE4 6600                       		bne.s	loc_1A00A
0001BFE6 6100                       		bsr.s	loc_1A020
0001BFE8                            
0001BFE8                            loc_1A00A:
0001BFE8 4A68 0032                  		tst.w	$32(a0)
0001BFEC 6700                       		beq.s	locret_1A01E
0001BFEE 5528 0034                  		subq.b	#2,$34(a0)
0001BFF2 317C FFFF 0030             		move.w	#-1,$30(a0)
0001BFF8 4268 0032                  		clr.w	$32(a0)
0001BFFC                            
0001BFFC                            locret_1A01E:
0001BFFC 4E75                       		rts	
0001BFFE                            ; ===========================================================================
0001BFFE                            
0001BFFE                            loc_1A020:
0001BFFE 303C 00B1                  		move.w	#$B1,d0
0001C002 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play electricity sound
0001C008                            ; ===========================================================================
0001C008                            
0001C008                            loc_1A02A:				; XREF: off_19E80
0001C008 117C 0030 0017             		move.b	#$30,$17(a0)
0001C00E 08E8 0000 0022             		bset	#0,$22(a0)
0001C014 4EB9 0000 E930             		jsr	SpeedToPos
0001C01A 117C 0006 001A             		move.b	#6,$1A(a0)
0001C020 0668 0010 0012             		addi.w	#$10,$12(a0)
0001C026 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001C02C 6500                       		bcs.s	loc_1A070
0001C02E 317C 059C 000C             		move.w	#$59C,$C(a0)
0001C034 5428 0034                  		addq.b	#2,$34(a0)
0001C038 117C 0020 0017             		move.b	#$20,$17(a0)
0001C03E 317C 0100 0010             		move.w	#$100,$10(a0)
0001C044 317C FF00 0012             		move.w	#-$100,$12(a0)
0001C04A 5438 F742                  		addq.b	#2,($FFFFF742).w
0001C04E                            
0001C04E                            loc_1A070:
0001C04E 6000 0000                  		bra.w	loc_1A166
0001C052                            ; ===========================================================================
0001C052                            
0001C052                            loc_1A074:				; XREF: off_19E80
0001C052 08E8 0000 0022             		bset	#0,$22(a0)
0001C058 117C 0004 001C             		move.b	#4,$1C(a0)
0001C05E 4EB9 0000 E930             		jsr	SpeedToPos
0001C064 0668 0010 0012             		addi.w	#$10,$12(a0)
0001C06A 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001C070 6500                       		bcs.s	loc_1A09A
0001C072 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001C078                            
0001C078                            loc_1A09A:
0001C078 317C 0400 0010             		move.w	#$400,$10(a0)
0001C07E 3028 0008                  		move.w	8(a0),d0
0001C082 9078 D008                  		sub.w	($FFFFD008).w,d0
0001C086 6A00                       		bpl.s	loc_1A0B4
0001C088 317C 0500 0010             		move.w	#$500,$10(a0)
0001C08E 6000 0000                  		bra.w	loc_1A0F2
0001C092                            ; ===========================================================================
0001C092                            
0001C092                            loc_1A0B4:
0001C092 0440 0070                  		subi.w	#$70,d0
0001C096 6500                       		bcs.s	loc_1A0F2
0001C098 0468 0100 0010             		subi.w	#$100,$10(a0)
0001C09E 5140                       		subq.w	#8,d0
0001C0A0 6500                       		bcs.s	loc_1A0F2
0001C0A2 0468 0100 0010             		subi.w	#$100,$10(a0)
0001C0A8 5140                       		subq.w	#8,d0
0001C0AA 6500                       		bcs.s	loc_1A0F2
0001C0AC 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C0B2 5140                       		subq.w	#8,d0
0001C0B4 6500                       		bcs.s	loc_1A0F2
0001C0B6 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C0BC 5140                       		subq.w	#8,d0
0001C0BE 6500                       		bcs.s	loc_1A0F2
0001C0C0 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C0C6 0440 0038                  		subi.w	#$38,d0
0001C0CA 6500                       		bcs.s	loc_1A0F2
0001C0CC 4268 0010                  		clr.w	$10(a0)
0001C0D0                            
0001C0D0                            loc_1A0F2:
0001C0D0 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001C0D6 6500                       		bcs.s	loc_1A110
0001C0D8 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001C0DE 317C 0240 0010             		move.w	#$240,$10(a0)
0001C0E4 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001C0EA 5428 0034                  		addq.b	#2,$34(a0)
0001C0EE                            
0001C0EE                            loc_1A110:
0001C0EE 6000                       		bra.s	loc_1A15C
0001C0F0                            ; ===========================================================================
0001C0F0                            
0001C0F0                            loc_1A112:				; XREF: off_19E80
0001C0F0 4EB9 0000 E930             		jsr	SpeedToPos
0001C0F6 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001C0FC 6500                       		bcs.s	loc_1A124
0001C0FE 4268 0010                  		clr.w	$10(a0)
0001C102                            
0001C102                            loc_1A124:
0001C102 0668 0034 0012             		addi.w	#$34,$12(a0)
0001C108 4A68 0012                  		tst.w	$12(a0)
0001C10C 6B00                       		bmi.s	loc_1A142
0001C10E 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001C114 6500                       		bcs.s	loc_1A142
0001C116 317C 0592 000C             		move.w	#$592,$C(a0)
0001C11C 4268 0012                  		clr.w	$12(a0)
0001C120                            
0001C120                            loc_1A142:
0001C120 3028 0010                  		move.w	$10(a0),d0
0001C124 8068 0012                  		or.w	$12(a0),d0
0001C128 6600                       		bne.s	loc_1A15C
0001C12A 5428 0034                  		addq.b	#2,$34(a0)
0001C12E 317C FE80 0012             		move.w	#-$180,$12(a0)
0001C134 117C 0001 0021             		move.b	#1,$21(a0)
0001C13A                            
0001C13A                            loc_1A15C:
0001C13A 43FA F892                  		lea	Ani_obj82(pc),a1
0001C13E 4EB9 0000 B9AA             		jsr	AnimateSprite
0001C144                            
0001C144                            loc_1A166:
0001C144 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001C14A 6C00                       		bge.s	loc_1A172
0001C14C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001C150                            
0001C150                            loc_1A172:
0001C150 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001C156 6C00                       		bge.s	locret_1A190
0001C158 323C 001B                  		move.w	#$1B,d1
0001C15C 343C 0070                  		move.w	#$70,d2
0001C160 363C 0071                  		move.w	#$71,d3
0001C164 3828 0008                  		move.w	8(a0),d4
0001C168 4EF9 0001 12B8             		jmp	SolidObject
0001C16E                            ; ===========================================================================
0001C16E                            
0001C16E                            locret_1A190:
0001C16E 4E75                       		rts	
0001C170                            ; ===========================================================================
0001C170                            
0001C170                            loc_1A192:				; XREF: off_19E80
0001C170 217C 0001 9CDE 0004        		move.l	#Map_Eggman,4(a0)
0001C178 317C 0400 0002             		move.w	#$400,2(a0)
0001C17E 117C 0000 001C             		move.b	#0,$1C(a0)
0001C184 08E8 0000 0022             		bset	#0,$22(a0)
0001C18A 4EB9 0000 E930             		jsr	SpeedToPos
0001C190 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001C196 6400                       		bcc.s	loc_1A1D0
0001C198 317C 0180 0010             		move.w	#$180,$10(a0)
0001C19E 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001C1A4 117C 000F 0020             		move.b	#$F,$20(a0)
0001C1AA 5428 0034                  		addq.b	#2,$34(a0)
0001C1AE                            
0001C1AE                            loc_1A1D0:
0001C1AE 6000 FF8A                  		bra.w	loc_1A15C
0001C1B2                            ; ===========================================================================
0001C1B2                            
0001C1B2                            loc_1A1D4:				; XREF: off_19E80
0001C1B2 08E8 0000 0022             		bset	#0,$22(a0)
0001C1B8 4EB9 0000 E930             		jsr	SpeedToPos
0001C1BE 4A68 0030                  		tst.w	$30(a0)
0001C1C2 6600                       		bne.s	loc_1A1FC
0001C1C4 4A28 0020                  		tst.b	$20(a0)
0001C1C8 6600                       		bne.s	loc_1A216
0001C1CA 317C 001E 0030             		move.w	#$1E,$30(a0)
0001C1D0 303C 00AC                  		move.w	#$AC,d0
0001C1D4 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001C1DA                            
0001C1DA                            loc_1A1FC:
0001C1DA 5368 0030                  		subq.w	#1,$30(a0)
0001C1DE 6600                       		bne.s	loc_1A216
0001C1E0 4A28 0022                  		tst.b	$22(a0)
0001C1E4 6A00                       		bpl.s	loc_1A210
0001C1E6 317C 0060 0012             		move.w	#$60,$12(a0)
0001C1EC 6000                       		bra.s	loc_1A216
0001C1EE                            ; ===========================================================================
0001C1EE                            
0001C1EE                            loc_1A210:
0001C1EE 117C 000F 0020             		move.b	#$F,$20(a0)
0001C1F4                            
0001C1F4                            loc_1A216:
0001C1F4 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001C1FA 6D00                       		blt.s	loc_1A23A
0001C1FC 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001C202 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001C208 4278 D020                  		clr.w	($FFFFD020).w
0001C20C 4A68 0012                  		tst.w	$12(a0)
0001C210 6A00                       		bpl.s	loc_1A248
0001C212 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001C218                            
0001C218                            loc_1A23A:
0001C218 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001C21E 6D00                       		blt.s	loc_1A248
0001C220 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001C226                            
0001C226                            loc_1A248:
0001C226 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001C22C 6500                       		bcs.s	loc_1A260
0001C22E 4A28 0001                  		tst.b	1(a0)
0001C232 6B00                       		bmi.s	loc_1A260
0001C234 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001C23A 6000 FAEE                  		bra.w	Obj85_Delete
0001C23E                            ; ===========================================================================
0001C23E                            
0001C23E                            loc_1A260:
0001C23E 6000 FEFA                  		bra.w	loc_1A15C
0001C242                            ; ===========================================================================
0001C242                            
0001C242                            loc_1A264:				; XREF: Obj85_Index
0001C242 2268 0034                  		movea.l	$34(a0),a1
0001C246 1011                       		move.b	(a1),d0
0001C248 B010                       		cmp.b	(a0),d0
0001C24A 6600 FADE                  		bne.w	Obj85_Delete
0001C24E 117C 0007 001C             		move.b	#7,$1C(a0)
0001C254 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C25A 6C00                       		bge.s	loc_1A280
0001C25C 6000                       		bra.s	loc_1A2A6
0001C25E                            ; ===========================================================================
0001C25E                            
0001C25E                            loc_1A280:
0001C25E 4A69 0010                  		tst.w	$10(a1)
0001C262 6700                       		beq.s	loc_1A28C
0001C264 117C 000B 001C             		move.b	#$B,$1C(a0)
0001C26A                            
0001C26A                            loc_1A28C:
0001C26A 43FA DA22                  		lea	Ani_Eggman(pc),a1
0001C26E 4EB9 0000 B9AA             		jsr	AnimateSprite
0001C274                            
0001C274                            loc_1A296:
0001C274 2268 0034                  		movea.l	$34(a0),a1
0001C278 3169 0008 0008             		move.w	8(a1),8(a0)
0001C27E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C284                            
0001C284                            loc_1A2A6:
0001C284 2268 0034                  		movea.l	$34(a0),a1
0001C288 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001C28E 7003                       		moveq	#3,d0
0001C290 C028 0022                  		and.b	$22(a0),d0
0001C294 0228 00FC 0001             		andi.b	#-4,1(a0)
0001C29A 8128 0001                  		or.b	d0,1(a0)
0001C29E 4EF9 0000 E94A             		jmp	DisplaySprite
0001C2A4                            ; ===========================================================================
0001C2A4                            
0001C2A4                            loc_1A2C6:				; XREF: Obj85_Index
0001C2A4 2268 0034                  		movea.l	$34(a0),a1
0001C2A8 1011                       		move.b	(a1),d0
0001C2AA B010                       		cmp.b	(a0),d0
0001C2AC 6600 FA7C                  		bne.w	Obj85_Delete
0001C2B0 0CA9 0001 9CDE 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C2B8 6700                       		beq.s	loc_1A2E4
0001C2BA 117C 000A 001A             		move.b	#$A,$1A(a0)
0001C2C0 60C2                       		bra.s	loc_1A2A6
0001C2C2                            ; ===========================================================================
0001C2C2                            
0001C2C2                            loc_1A2E4:
0001C2C2 117C 0001 001C             		move.b	#1,$1C(a0)
0001C2C8 4A29 0021                  		tst.b	$21(a1)
0001C2CC 6F00                       		ble.s	loc_1A312
0001C2CE 117C 0006 001C             		move.b	#6,$1C(a0)
0001C2D4 217C 0001 9CDE 0004        		move.l	#Map_Eggman,4(a0)
0001C2DC 317C 0400 0002             		move.w	#$400,2(a0)
0001C2E2 43FA D9AA                  		lea	Ani_Eggman(pc),a1
0001C2E6 4EB9 0000 B9AA             		jsr	AnimateSprite
0001C2EC 6000 FF86                  		bra.w	loc_1A296
0001C2F0                            ; ===========================================================================
0001C2F0                            
0001C2F0                            loc_1A312:
0001C2F0 4A28 0001                  		tst.b	1(a0)
0001C2F4 6A00 FA34                  		bpl.w	Obj85_Delete
0001C2F8 6100 D536                  		bsr.w	BossDefeated
0001C2FC 117C 0002 0018             		move.b	#2,$18(a0)
0001C302 117C 0000 001C             		move.b	#0,$1C(a0)
0001C308 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001C310 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001C316 43FA 0000                  		lea	Ani_obj85(pc),a1
0001C31A 4EB9 0000 B9AA             		jsr	AnimateSprite
0001C320 6000 FF52                  		bra.w	loc_1A296
0001C324                            ; ===========================================================================
0001C324                            
0001C324                            loc_1A346:				; XREF: Obj85_Index
0001C324 08E8 0000 0022             		bset	#0,$22(a0)
0001C32A 2268 0034                  		movea.l	$34(a0),a1
0001C32E 0CA9 0001 9CDE 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C336 6700                       		beq.s	loc_1A35E
0001C338 6000 FF4A                  		bra.w	loc_1A2A6
0001C33C                            ; ===========================================================================
0001C33C                            
0001C33C                            loc_1A35E:
0001C33C 3169 0008 0008             		move.w	8(a1),8(a0)
0001C342 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C348 4A28 001E                  		tst.b	$1E(a0)
0001C34C 6600                       		bne.s	loc_1A376
0001C34E 117C 0014 001E             		move.b	#$14,$1E(a0)
0001C354                            
0001C354                            loc_1A376:
0001C354 5328 001E                  		subq.b	#1,$1E(a0)
0001C358 6E00                       		bgt.s	loc_1A38A
0001C35A 5228 001A                  		addq.b	#1,$1A(a0)
0001C35E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001C364 6E00 F9C4                  		bgt.w	Obj85_Delete
0001C368                            
0001C368                            loc_1A38A:
0001C368 6000 FF0A                  		bra.w	loc_1A296
0001C36C                            ; ===========================================================================
0001C36C                            
0001C36C                            loc_1A38E:				; XREF: Obj85_Index
0001C36C 117C 000B 001A             		move.b	#$B,$1A(a0)
0001C372 3038 D008                  		move.w	($FFFFD008).w,d0
0001C376 9068 0008                  		sub.w	8(a0),d0
0001C37A 6500                       		bcs.s	loc_1A3A6
0001C37C 4A28 0001                  		tst.b	1(a0)
0001C380 6A00 F9A8                  		bpl.w	Obj85_Delete
0001C384                            
0001C384                            loc_1A3A6:
0001C384 4EF9 0000 E94A             		jmp	DisplaySprite
0001C38A                            ; ===========================================================================
0001C38A                            
0001C38A                            loc_1A3AC:				; XREF: Obj85_Index
0001C38A 117C 0000 001A             		move.b	#0,$1A(a0)
0001C390 08E8 0000 0022             		bset	#0,$22(a0)
0001C396 2268 0034                  		movea.l	$34(a0),a1
0001C39A 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C3A0 6600                       		bne.s	loc_1A3D0
0001C3A2 0CA9 0001 9CDE 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C3AA 6700 F97E                  		beq.w	Obj85_Delete
0001C3AE                            
0001C3AE                            loc_1A3D0:
0001C3AE 6000 FED4                  		bra.w	loc_1A2A6
0001C3B2                            ; ===========================================================================
0001C3B2                            Ani_obj85:
0001C3B2                            	include "_anim\obj85.asm"
0001C3B2                            ; ---------------------------------------------------------------------------
0001C3B2                            ; Animation script - Eggman (FZ)
0001C3B2                            ; ---------------------------------------------------------------------------
0001C3B2 0000                       		dc.w byte_1A3D6-Ani_obj85
0001C3B4 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001C3B8                            		even
0001C3B8                            		even
0001C3B8                            
0001C3B8                            Map_Eggman2:
0001C3B8                            	include "_maps\Eggman2.asm"
0001C3B8                            ; ---------------------------------------------------------------------------
0001C3B8                            ; Sprite mappings - Eggman (FZ)
0001C3B8                            ; ---------------------------------------------------------------------------
0001C3B8 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001C3BA 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001C3BC 06                         byte_1A3DE:	dc.b 6
0001C3BD E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001C3C2 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001C3C7 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C3CC FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C3D1 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C3D6 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C3DB 06                         byte_1A3FD:	dc.b 6
0001C3DC E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001C3E1 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001C3E6 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C3EB FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C3F0 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C3F5 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C3FA                            		even
0001C3FA                            		even
0001C3FA                            
0001C3FA                            Map_FZBoss:
0001C3FA                            	include "_maps\FZ boss.asm"
0001C3FA                            ; ---------------------------------------------------------------------------
0001C3FA                            ; Sprite mappings - boss (FZ)
0001C3FA                            ; ---------------------------------------------------------------------------
0001C3FA 0000                       		dc.w byte_1A422-Map_FZBoss
0001C3FC 0000                       		dc.w byte_1A42D-Map_FZBoss
0001C3FE 0000                       		dc.w byte_1A43D-Map_FZBoss
0001C400 02                         byte_1A422:	dc.b 2
0001C401 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001C406 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001C40B 03                         byte_1A42D:	dc.b 3
0001C40C 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001C411 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001C416 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001C41B 02                         byte_1A43D:	dc.b 2
0001C41C 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001C421 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001C426                            		even
0001C426                            		even
0001C426                            
0001C426                            ; ===========================================================================
0001C426                            
0001C426                            Obj84_Delete:
0001C426 4EF9 0000 E99A             		jmp	DeleteObject
0001C42C                            ; ===========================================================================
0001C42C                            ; ---------------------------------------------------------------------------
0001C42C                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001C42C                            ; ---------------------------------------------------------------------------
0001C42C                            
0001C42C                            Obj84:					; XREF: Obj_Index
0001C42C 7000                       		moveq	#0,d0
0001C42E 1028 0024                  		move.b	$24(a0),d0
0001C432 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001C436 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001C43A                            ; ===========================================================================
0001C43A 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001C43C 0000                       		dc.w loc_1A4CE-Obj84_Index
0001C43E 0000                       		dc.w loc_1A57E-Obj84_Index
0001C440                            
0001C440 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001C444 2550 0620                  		dc.w $2550, $620
0001C448 2490 04C0                  		dc.w $2490, $4C0
0001C44C 2510 04C0                  		dc.w $2510, $4C0
0001C450                            ; ===========================================================================
0001C450                            
0001C450                            Obj84_Main:				; XREF: Obj84_Index
0001C450 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001C454 7000                       		moveq	#0,d0
0001C456 1028 0028                  		move.b	$28(a0),d0
0001C45A D040                       		add.w	d0,d0
0001C45C D2C0                       		adda.w	d0,a1
0001C45E 117C 0004 0001             		move.b	#4,1(a0)
0001C464 08E8 0007 0001             		bset	#7,1(a0)
0001C46A 08E8 0004 0001             		bset	#4,1(a0)
0001C470 317C 0300 0002             		move.w	#$300,2(a0)
0001C476 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001C47E 3159 0008                  		move.w	(a1)+,8(a0)
0001C482 3151 000C                  		move.w	(a1),$C(a0)
0001C486 3159 0038                  		move.w	(a1)+,$38(a0)
0001C48A 117C 0020 0016             		move.b	#$20,$16(a0)
0001C490 117C 0060 0017             		move.b	#$60,$17(a0)
0001C496 117C 0020 0019             		move.b	#$20,$19(a0)
0001C49C 117C 0060 0016             		move.b	#$60,$16(a0)
0001C4A2 117C 0003 0018             		move.b	#3,$18(a0)
0001C4A8 5428 0024                  		addq.b	#2,$24(a0)
0001C4AC                            
0001C4AC                            loc_1A4CE:				; XREF: Obj84_Index
0001C4AC 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C4B2 6F00                       		ble.s	loc_1A4DC
0001C4B4 08E8 0001 0001             		bset	#1,1(a0)
0001C4BA                            
0001C4BA                            loc_1A4DC:
0001C4BA 42A8 003C                  		clr.l	$3C(a0)
0001C4BE 4A28 0029                  		tst.b	$29(a0)
0001C4C2 6700                       		beq.s	loc_1A4EA
0001C4C4 5428 0024                  		addq.b	#2,$24(a0)
0001C4C8                            
0001C4C8                            loc_1A4EA:
0001C4C8 2028 003C                  		move.l	$3C(a0),d0
0001C4CC 2228 0038                  		move.l	$38(a0),d1
0001C4D0 D280                       		add.l	d0,d1
0001C4D2 4841                       		swap	d1
0001C4D4 3141 000C                  		move.w	d1,$C(a0)
0001C4D8 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001C4DE 6600                       		bne.s	loc_1A524
0001C4E0 4A68 0030                  		tst.w	$30(a0)
0001C4E4 6A00                       		bpl.s	loc_1A524
0001C4E6 70F6                       		moveq	#-$A,d0
0001C4E8 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C4EE 6F00                       		ble.s	loc_1A514
0001C4F0 700E                       		moveq	#$E,d0
0001C4F2                            
0001C4F2                            loc_1A514:
0001C4F2 D240                       		add.w	d0,d1
0001C4F4 2268 0034                  		movea.l	$34(a0),a1
0001C4F8 3341 000C                  		move.w	d1,$C(a1)
0001C4FC 3368 0008 0008             		move.w	8(a0),8(a1)
0001C502                            
0001C502                            loc_1A524:
0001C502 323C 002B                  		move.w	#$2B,d1
0001C506 343C 0060                  		move.w	#$60,d2
0001C50A 363C 0061                  		move.w	#$61,d3
0001C50E 3828 0008                  		move.w	8(a0),d4
0001C512 4EB9 0001 12B8             		jsr	SolidObject
0001C518 7000                       		moveq	#0,d0
0001C51A 3228 003C                  		move.w	$3C(a0),d1
0001C51E 6A00                       		bpl.s	loc_1A550
0001C520 4441                       		neg.w	d1
0001C522 5141                       		subq.w	#8,d1
0001C524 6500                       		bcs.s	loc_1A55C
0001C526 5200                       		addq.b	#1,d0
0001C528 E841                       		asr.w	#4,d1
0001C52A D041                       		add.w	d1,d0
0001C52C 6000                       		bra.s	loc_1A55C
0001C52E                            ; ===========================================================================
0001C52E                            
0001C52E                            loc_1A550:
0001C52E 0441 0027                  		subi.w	#$27,d1
0001C532 6500                       		bcs.s	loc_1A55C
0001C534 5200                       		addq.b	#1,d0
0001C536 E841                       		asr.w	#4,d1
0001C538 D041                       		add.w	d1,d0
0001C53A                            
0001C53A                            loc_1A55C:
0001C53A 1140 001A                  		move.b	d0,$1A(a0)
0001C53E 3038 D008                  		move.w	($FFFFD008).w,d0
0001C542 9068 0008                  		sub.w	8(a0),d0
0001C546 6B00                       		bmi.s	loc_1A578
0001C548 0440 0140                  		subi.w	#$140,d0
0001C54C 6B00                       		bmi.s	loc_1A578
0001C54E 4A28 0001                  		tst.b	1(a0)
0001C552 6A00 FED2                  		bpl.w	Obj84_Delete
0001C556                            
0001C556                            loc_1A578:
0001C556 4EF9 0000 E94A             		jmp	DisplaySprite
0001C55C                            ; ===========================================================================
0001C55C                            
0001C55C                            loc_1A57E:				; XREF: Obj84_Index
0001C55C 7000                       		moveq	#0,d0
0001C55E 1028 0028                  		move.b	$28(a0),d0
0001C562 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001C566 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001C56A 6000 FF5C                  		bra.w	loc_1A4EA
0001C56E                            ; ===========================================================================
0001C56E 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001C570 0000                       		dc.w loc_1A598-off_1A590
0001C572 0000                       		dc.w loc_1A604-off_1A590
0001C574 0000                       		dc.w loc_1A604-off_1A590
0001C576                            ; ===========================================================================
0001C576                            
0001C576                            loc_1A598:				; XREF: off_1A590
0001C576 4A28 0029                  		tst.b	$29(a0)
0001C57A 6600                       		bne.s	loc_1A5D4
0001C57C 2268 0034                  		movea.l	$34(a0),a1
0001C580 4A29 0021                  		tst.b	$21(a1)
0001C584 6600                       		bne.s	loc_1A5B4
0001C586 6100 D2A8                  		bsr.w	BossDefeated
0001C58A 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001C592                            
0001C592                            loc_1A5B4:
0001C592 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001C59A 6400                       		bcc.s	locret_1A602
0001C59C 42A8 003C                  		clr.l	$3C(a0)
0001C5A0 2268 0034                  		movea.l	$34(a0),a1
0001C5A4 5369 0032                  		subq.w	#1,$32(a1)
0001C5A8 4269 0030                  		clr.w	$30(a1)
0001C5AC 5528 0024                  		subq.b	#2,$24(a0)
0001C5B0 4E75                       		rts	
0001C5B2                            ; ===========================================================================
0001C5B2                            
0001C5B2                            loc_1A5D4:
0001C5B2 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001C5B8 6C00                       		bge.s	loc_1A5E4
0001C5BA 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001C5C2                            
0001C5C2                            loc_1A5E4:
0001C5C2 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001C5CA 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001C5D0 6E00                       		bgt.s	locret_1A602
0001C5D2 4268 003E                  		clr.w	$3E(a0)
0001C5D6 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001C5DC 4228 0029                  		clr.b	$29(a0)
0001C5E0                            
0001C5E0                            locret_1A602:
0001C5E0 4E75                       		rts	
0001C5E2                            ; ===========================================================================
0001C5E2                            
0001C5E2                            loc_1A604:				; XREF: off_1A590
0001C5E2 08E8 0001 0001             		bset	#1,1(a0)
0001C5E8 4A28 0029                  		tst.b	$29(a0)
0001C5EC 6600                       		bne.s	loc_1A646
0001C5EE 2268 0034                  		movea.l	$34(a0),a1
0001C5F2 4A29 0021                  		tst.b	$21(a1)
0001C5F6 6600                       		bne.s	loc_1A626
0001C5F8 6100 D236                  		bsr.w	BossDefeated
0001C5FC 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001C604                            
0001C604                            loc_1A626:
0001C604 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001C60C 6400                       		bcc.s	locret_1A674
0001C60E 42A8 003C                  		clr.l	$3C(a0)
0001C612 2268 0034                  		movea.l	$34(a0),a1
0001C616 5369 0032                  		subq.w	#1,$32(a1)
0001C61A 4269 0030                  		clr.w	$30(a1)
0001C61E 5528 0024                  		subq.b	#2,$24(a0)
0001C622 4E75                       		rts	
0001C624                            ; ===========================================================================
0001C624                            
0001C624                            loc_1A646:
0001C624 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001C62A 6D00                       		blt.s	loc_1A656
0001C62C 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001C634                            
0001C634                            loc_1A656:
0001C634 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001C63C 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001C642 6D00                       		blt.s	locret_1A674
0001C644 4268 003E                  		clr.w	$3E(a0)
0001C648 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001C64E 4228 0029                  		clr.b	$29(a0)
0001C652                            
0001C652                            locret_1A674:
0001C652 4E75                       		rts	
0001C654                            ; ===========================================================================
0001C654                            ; ---------------------------------------------------------------------------
0001C654                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C654                            ; ---------------------------------------------------------------------------
0001C654                            Map_obj84:
0001C654                            	include "_maps\obj84.asm"
0001C654                            ; ---------------------------------------------------------------------------
0001C654                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C654                            ; ---------------------------------------------------------------------------
0001C654 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001C658 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001C65C 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001C660 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C664 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C668 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001C66C 06                         byte_1A68E:	dc.b 6
0001C66D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C672 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C677 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C67C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C681 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C686 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C68B 08                         byte_1A6AD:	dc.b 8
0001C68C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C691 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C696 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C69B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C6A0 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C6A5 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C6AA D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C6AF D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C6B4 0A                         byte_1A6D6:	dc.b $A
0001C6B5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C6BA A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C6BF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C6C4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C6C9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C6CE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C6D3 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C6D8 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C6DD F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C6E2 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C6E7 0C                         byte_1A709:	dc.b $C
0001C6E8 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C6ED A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C6F2 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C6F7 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C6FC B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C701 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C706 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C70B D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C710 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C715 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C71A 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C71F 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C724 0D                         byte_1A746:	dc.b $D
0001C725 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C72A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C72F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C734 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C739 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C73E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C743 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C748 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C74D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C752 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C757 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C75C 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C761 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C766 0E                         byte_1A788:	dc.b $E
0001C767 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C76C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C771 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C776 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C77B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C780 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C785 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C78A D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C78F F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C794 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C799 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C79E 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C7A3 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C7A8 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001C7AD 02                         byte_1A7CF:	dc.b 2
0001C7AE F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001C7B3 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001C7B8                            		even
0001C7B8                            		even
0001C7B8                            
0001C7B8                            ; ===========================================================================
0001C7B8                            ; ---------------------------------------------------------------------------
0001C7B8                            ; Object 86 - energy balls (FZ)
0001C7B8                            ; ---------------------------------------------------------------------------
0001C7B8                            
0001C7B8                            Obj86:					; XREF: Obj_Index
0001C7B8 7000                       		moveq	#0,d0
0001C7BA 1028 0024                  		move.b	$24(a0),d0
0001C7BE 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001C7C2 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001C7C6                            ; ===========================================================================
0001C7C6 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001C7C8 0000                       		dc.w Obj86_Generator-Obj86_Index
0001C7CA 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001C7CC 0000                       		dc.w loc_1A962-Obj86_Index
0001C7CE 0000                       		dc.w loc_1A982-Obj86_Index
0001C7D0                            ; ===========================================================================
0001C7D0                            
0001C7D0                            Obj86_Main:				; XREF: Obj86_Index
0001C7D0 317C 2588 0008             		move.w	#$2588,8(a0)
0001C7D6 317C 053C 000C             		move.w	#$53C,$C(a0)
0001C7DC 317C 0300 0002             		move.w	#$300,2(a0)
0001C7E2 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001C7EA 117C 0000 001C             		move.b	#0,$1C(a0)
0001C7F0 117C 0003 0018             		move.b	#3,$18(a0)
0001C7F6 117C 0008 0017             		move.b	#8,$17(a0)
0001C7FC 117C 0008 0016             		move.b	#8,$16(a0)
0001C802 117C 0004 0001             		move.b	#4,1(a0)
0001C808 08E8 0007 0001             		bset	#7,1(a0)
0001C80E 5428 0024                  		addq.b	#2,$24(a0)
0001C812                            
0001C812                            Obj86_Generator:			; XREF: Obj86_Index
0001C812 2268 0034                  		movea.l	$34(a0),a1
0001C816 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001C81C 6600                       		bne.s	loc_1A850
0001C81E 10BC 003F                  		move.b	#$3F,(a0)
0001C822 117C 0000 0024             		move.b	#0,$24(a0)
0001C828 4EF9 0000 E94A             		jmp	DisplaySprite
0001C82E                            ; ===========================================================================
0001C82E                            
0001C82E                            loc_1A850:
0001C82E 117C 0000 001C             		move.b	#0,$1C(a0)
0001C834 4A28 0029                  		tst.b	$29(a0)
0001C838 6700                       		beq.s	loc_1A86C
0001C83A 5428 0024                  		addq.b	#2,$24(a0)
0001C83E 117C 0001 001C             		move.b	#1,$1C(a0)
0001C844 117C 003E 0028             		move.b	#$3E,$28(a0)
0001C84A                            
0001C84A                            loc_1A86C:
0001C84A 323C 0013                  		move.w	#$13,d1
0001C84E 343C 0008                  		move.w	#8,d2
0001C852 363C 0011                  		move.w	#$11,d3
0001C856 3828 0008                  		move.w	8(a0),d4
0001C85A 4EB9 0001 12B8             		jsr	SolidObject
0001C860 3038 D008                  		move.w	($FFFFD008).w,d0
0001C864 9068 0008                  		sub.w	8(a0),d0
0001C868 6B00                       		bmi.s	loc_1A89A
0001C86A 0440 0140                  		subi.w	#$140,d0
0001C86E 6B00                       		bmi.s	loc_1A89A
0001C870 4A28 0001                  		tst.b	1(a0)
0001C874 6A00 FBB0                  		bpl.w	Obj84_Delete
0001C878                            
0001C878                            loc_1A89A:
0001C878 43FA 0000                  		lea	Ani_obj86(pc),a1
0001C87C 4EB9 0000 B9AA             		jsr	AnimateSprite
0001C882 4EF9 0000 E94A             		jmp	DisplaySprite
0001C888                            ; ===========================================================================
0001C888                            
0001C888                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001C888 4A28 0029                  		tst.b	$29(a0)
0001C88C 6700 0000                  		beq.w	loc_1A954
0001C890 4228 0029                  		clr.b	$29(a0)
0001C894 D068 0030                  		add.w	$30(a0),d0
0001C898 0240 001E                  		andi.w	#$1E,d0
0001C89C D4C0                       		adda.w	d0,a2
0001C89E 5868 0030                  		addq.w	#4,$30(a0)
0001C8A2 4268 0032                  		clr.w	$32(a0)
0001C8A6 7403                       		moveq	#3,d2
0001C8A8                            
0001C8A8                            Obj86_Loop:
0001C8A8 4EB9 0000 F0B6             		jsr	SingleObjLoad2
0001C8AE 6600 0000                  		bne.w	loc_1A954
0001C8B2 12BC 0086                  		move.b	#$86,(a1)
0001C8B6 3368 0008 0008             		move.w	8(a0),8(a1)
0001C8BC 337C 053C 000C             		move.w	#$53C,$C(a1)
0001C8C2 137C 0008 0024             		move.b	#8,$24(a1)
0001C8C8 337C 2300 0002             		move.w	#$2300,2(a1)
0001C8CE 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001C8D6 137C 000C 0016             		move.b	#$C,$16(a1)
0001C8DC 137C 000C 0017             		move.b	#$C,$17(a1)
0001C8E2 137C 0000 0020             		move.b	#0,$20(a1)
0001C8E8 137C 0003 0018             		move.b	#3,$18(a1)
0001C8EE 337C 003E 0028             		move.w	#$3E,$28(a1)
0001C8F4 137C 0004 0001             		move.b	#4,1(a1)
0001C8FA 08E9 0007 0001             		bset	#7,1(a1)
0001C900 2348 0034                  		move.l	a0,$34(a1)
0001C904 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001C90A 3228 0032                  		move.w	$32(a0),d1
0001C90E C3FC FFB1                  		muls.w	#-$4F,d1
0001C912 0641 2578                  		addi.w	#$2578,d1
0001C916 0240 001F                  		andi.w	#$1F,d0
0001C91A 0440 0010                  		subi.w	#$10,d0
0001C91E D041                       		add.w	d1,d0
0001C920 3340 0030                  		move.w	d0,$30(a1)
0001C924 5268 0032                  		addq.w	#1,$32(a0)
0001C928 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001C92E 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001C932                            
0001C932                            loc_1A954:
0001C932 4A68 0032                  		tst.w	$32(a0)
0001C936 6600                       		bne.s	loc_1A95E
0001C938 5428 0024                  		addq.b	#2,$24(a0)
0001C93C                            
0001C93C                            loc_1A95E:
0001C93C 6000 FF0C                  		bra.w	loc_1A86C
0001C940                            ; ===========================================================================
0001C940                            
0001C940                            loc_1A962:				; XREF: Obj86_Index
0001C940 117C 0002 001C             		move.b	#2,$1C(a0)
0001C946 4A68 0038                  		tst.w	$38(a0)
0001C94A 6600                       		bne.s	loc_1A97E
0001C94C 117C 0002 0024             		move.b	#2,$24(a0)
0001C952 2268 0034                  		movea.l	$34(a0),a1
0001C956 337C FFFF 0032             		move.w	#-1,$32(a1)
0001C95C                            
0001C95C                            loc_1A97E:
0001C95C 6000 FEEC                  		bra.w	loc_1A86C
0001C960                            ; ===========================================================================
0001C960                            
0001C960                            loc_1A982:				; XREF: Obj86_Index
0001C960 7000                       		moveq	#0,d0
0001C962 1028 0025                  		move.b	$25(a0),d0
0001C966 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001C96A 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001C96E 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001C972 4EB9 0000 B9AA             		jsr	AnimateSprite
0001C978 4EF9 0000 E94A             		jmp	DisplaySprite
0001C97E                            ; ===========================================================================
0001C97E 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001C980 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001C982 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001C984                            ; ===========================================================================
0001C984                            
0001C984                            loc_1A9A6:				; XREF: Obj86_Index2
0001C984 3028 0030                  		move.w	$30(a0),d0
0001C988 9068 0008                  		sub.w	8(a0),d0
0001C98C E940                       		asl.w	#4,d0
0001C98E 3140 0010                  		move.w	d0,$10(a0)
0001C992 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001C998 5428 0025                  		addq.b	#2,$25(a0)
0001C99C 4E75                       		rts	
0001C99E                            ; ===========================================================================
0001C99E                            
0001C99E                            loc_1A9C0:				; XREF: Obj86_Index2
0001C99E 4A68 0010                  		tst.w	$10(a0)
0001C9A2 6700                       		beq.s	loc_1A9E6
0001C9A4 4EB9 0000 E930             		jsr	SpeedToPos
0001C9AA 3028 0008                  		move.w	8(a0),d0
0001C9AE 9068 0030                  		sub.w	$30(a0),d0
0001C9B2 6400                       		bcc.s	loc_1A9E6
0001C9B4 4268 0010                  		clr.w	$10(a0)
0001C9B8 D168 0008                  		add.w	d0,8(a0)
0001C9BC 2268 0034                  		movea.l	$34(a0),a1
0001C9C0 5369 0032                  		subq.w	#1,$32(a1)
0001C9C4                            
0001C9C4                            loc_1A9E6:
0001C9C4 117C 0000 001C             		move.b	#0,$1C(a0)
0001C9CA 5368 0028                  		subq.w	#1,$28(a0)
0001C9CE 6600                       		bne.s	locret_1AA1C
0001C9D0 5428 0025                  		addq.b	#2,$25(a0)
0001C9D4 117C 0001 001C             		move.b	#1,$1C(a0)
0001C9DA 117C 009A 0020             		move.b	#$9A,$20(a0)
0001C9E0 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001C9E6 7000                       		moveq	#0,d0
0001C9E8 3038 D008                  		move.w	($FFFFD008).w,d0
0001C9EC 9068 0008                  		sub.w	8(a0),d0
0001C9F0 3140 0010                  		move.w	d0,$10(a0)
0001C9F4 317C 0140 0012             		move.w	#$140,$12(a0)
0001C9FA                            
0001C9FA                            locret_1AA1C:
0001C9FA 4E75                       		rts	
0001C9FC                            ; ===========================================================================
0001C9FC                            
0001C9FC                            loc_1AA1E:				; XREF: Obj86_Index2
0001C9FC 4EB9 0000 E930             		jsr	SpeedToPos
0001CA02 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001CA08 6400                       		bcc.s	loc_1AA34
0001CA0A 5368 0028                  		subq.w	#1,$28(a0)
0001CA0E 6700                       		beq.s	loc_1AA34
0001CA10 4E75                       		rts	
0001CA12                            ; ===========================================================================
0001CA12                            
0001CA12                            loc_1AA34:
0001CA12 2268 0034                  		movea.l	$34(a0),a1
0001CA16 5369 0038                  		subq.w	#1,$38(a1)
0001CA1A 6000 FA0A                  		bra.w	Obj84_Delete
0001CA1E                            ; ===========================================================================
0001CA1E                            Ani_obj86:
0001CA1E                            	include "_anim\obj86.asm"
0001CA1E                            ; ---------------------------------------------------------------------------
0001CA1E                            ; Animation script - energy ball launcher (FZ)
0001CA1E                            ; ---------------------------------------------------------------------------
0001CA1E 0000                       		dc.w byte_1AA46-Ani_obj86
0001CA20 0000                       		dc.w byte_1AA4A-Ani_obj86
0001CA22 0000                       		dc.w byte_1AA50-Ani_obj86
0001CA24 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001CA28 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001CA2E 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001CA34                            		even
0001CA34                            		even
0001CA34                            
0001CA34                            ; ---------------------------------------------------------------------------
0001CA34                            ; Sprite mappings - energy ball	launcher (FZ)
0001CA34                            ; ---------------------------------------------------------------------------
0001CA34                            Map_obj86:
0001CA34                            	include "_maps\obj86.asm"
0001CA34                            ; ---------------------------------------------------------------------------
0001CA34                            ; Sprite mappings - energy ball	launcher (FZ)
0001CA34                            ; ---------------------------------------------------------------------------
0001CA34 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001CA38 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001CA3C 01                         byte_1AA5E:	dc.b 1
0001CA3D F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001CA42 01                         byte_1AA64:	dc.b 1
0001CA43 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001CA48 01                         byte_1AA6A:	dc.b 1
0001CA49 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001CA4E 01                         byte_1AA70:	dc.b 1
0001CA4F F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001CA54                            		even
0001CA54                            		even
0001CA54                            
0001CA54                            Ani_obj86a:
0001CA54                            	include "_anim\obj86a.asm"
0001CA54                            ; ---------------------------------------------------------------------------
0001CA54                            ; Animation script - energy balls (FZ)
0001CA54                            ; ---------------------------------------------------------------------------
0001CA54 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001CA56 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001CA58 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001CA67 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001CA76 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001CA7A 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001CA84                            		even
0001CA84                            		even
0001CA84                            
0001CA84                            ; ---------------------------------------------------------------------------
0001CA84                            ; Sprite mappings - energy balls (FZ)
0001CA84                            ; ---------------------------------------------------------------------------
0001CA84                            Map_obj86a:
0001CA84                            	include "_maps\obj86a.asm"
0001CA84                            ; ---------------------------------------------------------------------------
0001CA84                            ; Sprite mappings - energy balls (FZ)
0001CA84                            ; ---------------------------------------------------------------------------
0001CA84 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001CA88 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001CA8C 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001CA90 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001CA94 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001CA98 0000                       		dc.w byte_1AB20-Map_obj86a
0001CA9A 02                         byte_1AABC:	dc.b 2
0001CA9B F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001CAA0 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001CAA5 02                         byte_1AAC7:	dc.b 2
0001CAA6 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001CAAB F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001CAB0 02                         byte_1AAD2:	dc.b 2
0001CAB1 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001CAB6 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001CABB 02                         byte_1AADD:	dc.b 2
0001CABC F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001CAC1 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001CAC6 02                         byte_1AAE8:	dc.b 2
0001CAC7 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001CACC 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001CAD1 02                         byte_1AAF3:	dc.b 2
0001CAD2 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001CAD7 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001CADC 01                         byte_1AAFE:	dc.b 1
0001CADD F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001CAE2 01                         byte_1AB04:	dc.b 1
0001CAE3 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001CAE8 02                         byte_1AB0A:	dc.b 2
0001CAE9 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001CAEE 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001CAF3 02                         byte_1AB15:	dc.b 2
0001CAF4 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001CAF9 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001CAFE 00                         byte_1AB20:	dc.b 0
0001CB00 00                         		even
0001CB00 00                         		even
0001CB00                            
0001CB00                            ; ===========================================================================
0001CB00                            ; ---------------------------------------------------------------------------
0001CB00                            ; Object 3E - prison capsule
0001CB00                            ; ---------------------------------------------------------------------------
0001CB00                            
0001CB00                            Obj3E:					; XREF: Obj_Index
0001CB00 7000                       		moveq	#0,d0
0001CB02 1028 0024                  		move.b	$24(a0),d0
0001CB06 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001CB0A 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001CB0E 3028 0008                  		move.w	8(a0),d0
0001CB12 0240 FF80                  		andi.w	#$FF80,d0
0001CB16 3238 F700                  		move.w	($FFFFF700).w,d1
0001CB1A 0441 0080                  		subi.w	#$80,d1
0001CB1E 0241 FF80                  		andi.w	#$FF80,d1
0001CB22 9041                       		sub.w	d1,d0
0001CB24 0C40 0280                  		cmpi.w	#$280,d0
0001CB28 6300                       		bls.s	Obj3E_NoDel
0001CB2A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001CB2E 6700                       		beq.s	Obj3E_Delete		; if it's zero, don't remember object
0001CB30 3440                       		movea.w	d0,a2	; load address into a2
0001CB32 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001CB36 6000                       		bra.s	Obj3E_Delete	; and delete object
0001CB38                            
0001CB38                            Obj3E_NoDel:
0001CB38 4EF9 0000 E94A             		jmp	DisplaySprite
0001CB3E                            ; ===========================================================================
0001CB3E                            
0001CB3E                            Obj3E_Delete:
0001CB3E 4EF9 0000 E99A             		jmp	DeleteObject
0001CB44                            ; ===========================================================================
0001CB44 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001CB46 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001CB48 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001CB4A 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CB4C 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CB4E 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CB50 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001CB52 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001CB54                            
0001CB54 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001CB58 040C 0501                  		dc.b 4,	$C, 5, 1
0001CB5C 0610 0403                  		dc.b 6,	$10, 4,	3
0001CB60 0810 0305                  		dc.b 8,	$10, 3,	5
0001CB64                            ; ===========================================================================
0001CB64                            
0001CB64                            Obj3E_Main:				; XREF: Obj3E_Index
0001CB64 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001CB6C 317C 049D 0002             		move.w	#$49D,2(a0)
0001CB72 117C 0004 0001             		move.b	#4,1(a0)
0001CB78 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001CB7E 7000                       		moveq	#0,d0
0001CB80 1028 0028                  		move.b	$28(a0),d0
0001CB84 E548                       		lsl.w	#2,d0
0001CB86 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001CB8A 1159 0024                  		move.b	(a1)+,$24(a0)
0001CB8E 1159 0019                  		move.b	(a1)+,$19(a0)
0001CB92 1159 0018                  		move.b	(a1)+,$18(a0)
0001CB96 1159 001A                  		move.b	(a1)+,$1A(a0)
0001CB9A 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001CB9E 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001CBA0 117C 0006 0020             		move.b	#6,$20(a0)
0001CBA6 117C 0008 0021             		move.b	#8,$21(a0)
0001CBAC                            
0001CBAC                            Obj3E_Not02:
0001CBAC 4E75                       		rts	
0001CBAE                            ; ===========================================================================
0001CBAE                            
0001CBAE                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001CBAE 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001CBB4 6700                       		beq.s	Obj3E_ChkOpened
0001CBB6 323C 002B                  		move.w	#$2B,d1
0001CBBA 343C 0018                  		move.w	#$18,d2
0001CBBE 363C 0018                  		move.w	#$18,d3
0001CBC2 3828 0008                  		move.w	8(a0),d4
0001CBC6 4EF9 0001 12B8             		jmp	SolidObject
0001CBCC                            ; ===========================================================================
0001CBCC                            
0001CBCC                            Obj3E_ChkOpened:
0001CBCC 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001CBD0 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001CBD2 4228 0025                  		clr.b	$25(a0)
0001CBD6 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001CBDC 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001CBE2                            
0001CBE2                            Obj3E_DoOpen:
0001CBE2 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001CBE8 4E75                       		rts	
0001CBEA                            ; ===========================================================================
0001CBEA                            
0001CBEA                            Obj3E_Switched:				; XREF: Obj3E_Index
0001CBEA 323C 0017                  		move.w	#$17,d1
0001CBEE 343C 0008                  		move.w	#8,d2
0001CBF2 363C 0008                  		move.w	#8,d3
0001CBF6 3828 0008                  		move.w	8(a0),d4
0001CBFA 4EB9 0001 12B8             		jsr	SolidObject
0001CC00 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001CC06 4EB9 0000 B9AA             		jsr	AnimateSprite
0001CC0C 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001CC12 4A28 0025                  		tst.b	$25(a0)
0001CC16 6700                       		beq.s	locret_1AC60
0001CC18 5068 000C                  		addq.w	#8,$C(a0)
0001CC1C 117C 000A 0024             		move.b	#$A,$24(a0)
0001CC22 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001CC28 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001CC2C 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001CC30 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001CC36 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001CC3C 4228 0025                  		clr.b	$25(a0)
0001CC40 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001CC46 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001CC4C                            
0001CC4C                            locret_1AC60:
0001CC4C 4E75                       		rts	
0001CC4E                            ; ===========================================================================
0001CC4E                            
0001CC4E                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001CC4E 7007                       		moveq	#7,d0
0001CC50 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001CC54 6600                       		bne.s	loc_1ACA0
0001CC56 4EB9 0000 F0A0             		jsr	SingleObjLoad
0001CC5C 6600                       		bne.s	loc_1ACA0
0001CC5E 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001CC62 3368 0008 0008             		move.w	8(a0),8(a1)
0001CC68 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CC6E 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001CC74 7200                       		moveq	#0,d1
0001CC76 1200                       		move.b	d0,d1
0001CC78 E409                       		lsr.b	#2,d1
0001CC7A 0441 0020                  		subi.w	#$20,d1
0001CC7E D369 0008                  		add.w	d1,8(a1)
0001CC82 E048                       		lsr.w	#8,d0
0001CC84 E608                       		lsr.b	#3,d0
0001CC86 D169 000C                  		add.w	d0,$C(a1)
0001CC8A                            
0001CC8A                            loc_1ACA0:
0001CC8A 5368 001E                  		subq.w	#1,$1E(a0)
0001CC8E 6700                       		beq.s	Obj3E_MakeAnimal
0001CC90 4E75                       		rts	
0001CC92                            ; ===========================================================================
0001CC92                            
0001CC92                            Obj3E_MakeAnimal:
0001CC92 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001CC98 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001CC9E 117C 0006 001A             		move.b	#6,$1A(a0)
0001CCA4 317C 0096 001E             		move.w	#$96,$1E(a0)
0001CCAA 0668 0020 000C             		addi.w	#$20,$C(a0)
0001CCB0 7C07                       		moveq	#7,d6
0001CCB2 3A3C 009A                  		move.w	#$9A,d5
0001CCB6 78E4                       		moveq	#-$1C,d4
0001CCB8                            
0001CCB8                            Obj3E_Loop:
0001CCB8 4EB9 0000 F0A0             		jsr	SingleObjLoad
0001CCBE 6600                       		bne.s	locret_1ACF8
0001CCC0 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001CCC4 3368 0008 0008             		move.w	8(a0),8(a1)
0001CCCA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CCD0 D969 0008                  		add.w	d4,8(a1)
0001CCD4 5E44                       		addq.w	#7,d4
0001CCD6 3345 0036                  		move.w	d5,$36(a1)
0001CCDA 5145                       		subq.w	#8,d5
0001CCDC 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001CCE0                            
0001CCE0                            locret_1ACF8:
0001CCE0 4E75                       		rts	
0001CCE2                            ; ===========================================================================
0001CCE2                            
0001CCE2                            Obj3E_Animals:				; XREF: Obj3E_Index
0001CCE2 7007                       		moveq	#7,d0
0001CCE4 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001CCE8 6600                       		bne.s	loc_1AD38
0001CCEA 4EB9 0000 F0A0             		jsr	SingleObjLoad
0001CCF0 6600                       		bne.s	loc_1AD38
0001CCF2 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001CCF6 3368 0008 0008             		move.w	8(a0),8(a1)
0001CCFC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CD02 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001CD08 0240 001F                  		andi.w	#$1F,d0
0001CD0C 5D40                       		subq.w	#6,d0
0001CD0E 4A41                       		tst.w	d1
0001CD10 6A00                       		bpl.s	loc_1AD2E
0001CD12 4440                       		neg.w	d0
0001CD14                            
0001CD14                            loc_1AD2E:
0001CD14 D169 0008                  		add.w	d0,8(a1)
0001CD18 337C 000C 0036             		move.w	#$C,$36(a1)
0001CD1E                            
0001CD1E                            loc_1AD38:
0001CD1E 5368 001E                  		subq.w	#1,$1E(a0)
0001CD22 6600                       		bne.s	locret_1AD48
0001CD24 5428 0024                  		addq.b	#2,$24(a0)
0001CD28 317C 00B4 001E             		move.w	#180,$1E(a0)
0001CD2E                            
0001CD2E                            locret_1AD48:
0001CD2E 4E75                       		rts	
0001CD30                            ; ===========================================================================
0001CD30                            
0001CD30                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001CD30 703E                       		moveq	#$3E,d0
0001CD32 7228                       		moveq	#$28,d1
0001CD34 7440                       		moveq	#$40,d2
0001CD36 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001CD3A                            
0001CD3A                            Obj3E_FindObj28:
0001CD3A B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001CD3C 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001CD3E D2C2                       		adda.w	d2,a1		; next object RAM
0001CD40 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001CD44                            
0001CD44 4EB9 0001 0556             		jsr	GotThroughAct
0001CD4A 4EF9 0000 E99A             		jmp	DeleteObject
0001CD50                            ; ===========================================================================
0001CD50                            
0001CD50                            Obj3E_Obj28Found:
0001CD50 4E75                       		rts	
0001CD52                            ; ===========================================================================
0001CD52                            Ani_obj3E:
0001CD52                            	include "_anim\obj3E.asm"
0001CD52                            ; ---------------------------------------------------------------------------
0001CD52                            ; Animation script - prison capsule
0001CD52                            ; ---------------------------------------------------------------------------
0001CD52 0000                       		dc.w byte_1AD70-Ani_obj3E
0001CD54 0000                       		dc.w byte_1AD70-Ani_obj3E
0001CD56 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001CD5A                            		even
0001CD5A                            		even
0001CD5A                            
0001CD5A                            ; ---------------------------------------------------------------------------
0001CD5A                            ; Sprite mappings - prison capsule
0001CD5A                            ; ---------------------------------------------------------------------------
0001CD5A                            Map_obj3E:
0001CD5A                            	include "_maps\obj3E.asm"
0001CD5A                            ; ---------------------------------------------------------------------------
0001CD5A                            ; Sprite mappings - prison capsule
0001CD5A                            ; ---------------------------------------------------------------------------
0001CD5A 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001CD5E 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001CD62 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001CD66 0000                       		dc.w byte_1ADE2-Map_obj3E
0001CD68 07                         byte_1AD82:	dc.b 7
0001CD69 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001CD6E E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001CD73 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001CD78 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001CD7D F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001CD82 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001CD87 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001CD8C 01                         byte_1ADA6:	dc.b 1
0001CD8D F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001CD92 06                         byte_1ADAC:	dc.b 6
0001CD93 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001CD98 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001CD9D 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001CDA2 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001CDA7 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001CDAC 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001CDB1 01                         byte_1ADCB:	dc.b 1
0001CDB2 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001CDB7 02                         byte_1ADD1:	dc.b 2
0001CDB8 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001CDBD 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001CDC2 01                         byte_1ADDC:	dc.b 1
0001CDC3 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001CDC8 00                         byte_1ADE2:	dc.b 0
0001CDCA 00                         		even
0001CDCA 00                         		even
0001CDCA                            
0001CDCA                            ; ---------------------------------------------------------------------------
0001CDCA                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001CDCA                            ; ---------------------------------------------------------------------------
0001CDCA                            
0001CDCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CDCA                            
0001CDCA                            
0001CDCA                            TouchResponse:				; XREF: Obj01
0001CDCA 4E71                       		nop	
0001CDCC 4EB9 0000 F1A8             		jsr	(Touch_Rings).l
0001CDD2 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001CDD6 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001CDDA 5142                       		subq.w	#8,d2
0001CDDC 7A00                       		moveq	#0,d5
0001CDDE 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001CDE2 5705                       		subq.b	#3,d5
0001CDE4 9645                       		sub.w	d5,d3
0001CDE6 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001CDEC 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001CDEE 0643 000C                  		addi.w	#$C,d3
0001CDF2 7A0A                       		moveq	#$A,d5
0001CDF4                            
0001CDF4                            Touch_NoDuck:
0001CDF4 383C 0010                  		move.w	#$10,d4
0001CDF8 DA45                       		add.w	d5,d5
0001CDFA 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001CDFE 3C3C 005F                  		move.w	#$5F,d6
0001CE02                            
0001CE02                            Touch_Loop:
0001CE02 4A29 0001                  		tst.b	1(a1)
0001CE06 6A00                       		bpl.s	Touch_NextObj
0001CE08 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001CE0C 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001CE0E                            
0001CE0E                            Touch_NextObj:
0001CE0E 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001CE12 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001CE16                            
0001CE16 7000                       		moveq	#0,d0
0001CE18 4E75                       		rts	
0001CE1A                            ; ===========================================================================
0001CE1A 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001CE1C 0C14                       		dc.b   $C, $14
0001CE1E 140C                       		dc.b  $14,  $C
0001CE20 0410                       		dc.b	4, $10
0001CE22 0C12                       		dc.b   $C, $12
0001CE24 1010                       		dc.b  $10, $10
0001CE26 0606                       		dc.b	6,   6
0001CE28 180C                       		dc.b  $18,  $C
0001CE2A 0C10                       		dc.b   $C, $10
0001CE2C 100C                       		dc.b  $10,  $C
0001CE2E 0808                       		dc.b	8,   8
0001CE30 1410                       		dc.b  $14, $10
0001CE32 1408                       		dc.b  $14,   8
0001CE34 0E0E                       		dc.b   $E,  $E
0001CE36 1818                       		dc.b  $18, $18
0001CE38 2810                       		dc.b  $28, $10
0001CE3A 1018                       		dc.b  $10, $18
0001CE3C 0810                       		dc.b	8, $10
0001CE3E 2070                       		dc.b  $20, $70
0001CE40 4020                       		dc.b  $40, $20
0001CE42 8020                       		dc.b  $80, $20
0001CE44 2020                       		dc.b  $20, $20
0001CE46 0808                       		dc.b	8,   8
0001CE48 0404                       		dc.b	4,   4
0001CE4A 2008                       		dc.b  $20,   8
0001CE4C 0C0C                       		dc.b   $C,  $C
0001CE4E 0804                       		dc.b	8,   4
0001CE50 1804                       		dc.b  $18,   4
0001CE52 2804                       		dc.b  $28,   4
0001CE54 0408                       		dc.b	4,   8
0001CE56 0418                       		dc.b	4, $18
0001CE58 0428                       		dc.b	4, $28
0001CE5A 0420                       		dc.b	4, $20
0001CE5C 1818                       		dc.b  $18, $18
0001CE5E 0C18                       		dc.b   $C, $18
0001CE60 4808                       		dc.b  $48,   8
0001CE62                            ; ===========================================================================
0001CE62                            
0001CE62                            Touch_Height:				; XREF: TouchResponse
0001CE62 0240 003F                  		andi.w	#$3F,d0
0001CE66 D040                       		add.w	d0,d0
0001CE68 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001CE6C 7200                       		moveq	#0,d1
0001CE6E 121A                       		move.b	(a2)+,d1
0001CE70 3029 0008                  		move.w	8(a1),d0
0001CE74 9041                       		sub.w	d1,d0
0001CE76 9042                       		sub.w	d2,d0
0001CE78 6400                       		bcc.s	loc_1AE98
0001CE7A D241                       		add.w	d1,d1
0001CE7C D041                       		add.w	d1,d0
0001CE7E 6500                       		bcs.s	Touch_Width
0001CE80 6000 FF8C                  		bra.w	Touch_NextObj
0001CE84                            ; ===========================================================================
0001CE84                            
0001CE84                            loc_1AE98:
0001CE84 B044                       		cmp.w	d4,d0
0001CE86 6200 FF86                  		bhi.w	Touch_NextObj
0001CE8A                            
0001CE8A                            Touch_Width:
0001CE8A 7200                       		moveq	#0,d1
0001CE8C 121A                       		move.b	(a2)+,d1
0001CE8E 3029 000C                  		move.w	$C(a1),d0
0001CE92 9041                       		sub.w	d1,d0
0001CE94 9043                       		sub.w	d3,d0
0001CE96 6400                       		bcc.s	loc_1AEB6
0001CE98 D241                       		add.w	d1,d1
0001CE9A D240                       		add.w	d0,d1
0001CE9C 6500                       		bcs.s	Touch_ChkValue
0001CE9E 6000 FF6E                  		bra.w	Touch_NextObj
0001CEA2                            ; ===========================================================================
0001CEA2                            
0001CEA2                            loc_1AEB6:
0001CEA2 B045                       		cmp.w	d5,d0
0001CEA4 6200 FF68                  		bhi.w	Touch_NextObj
0001CEA8                            
0001CEA8                            Touch_ChkValue:
0001CEA8 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001CEAC 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001CEB0 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001CEB4 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001CEB8 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001CEBC 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001CEBE 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001CEC2                            
0001CEC2                            ; touch	response is $40-$7F
0001CEC2                            
0001CEC2 1029 0020                  		move.b	$20(a1),d0
0001CEC6 0200 003F                  		andi.b	#$3F,d0
0001CECA 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001CECE 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001CED0 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001CED6 6400 0000                  		bcc.w	locret_1AEF2
0001CEDA 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001CEDE                            
0001CEDE                            locret_1AEF2:
0001CEDE 4E75                       		rts	
0001CEE0                            ; ===========================================================================
0001CEE0                            
0001CEE0                            Touch_Monitor:
0001CEE0 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001CEE4 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001CEE6 3028 000C                  		move.w	$C(a0),d0
0001CEEA 0440 0010                  		subi.w	#$10,d0
0001CEEE B069 000C                  		cmp.w	$C(a1),d0
0001CEF2 6500 0000                  		bcs.w	locret_1AF2E
0001CEF6 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001CEFA 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001CEFE 337C FE80 0012             		move.w	#-$180,$12(a1)
0001CF04 4A29 0025                  		tst.b	$25(a1)
0001CF08 6600 0000                  		bne.w	locret_1AF2E
0001CF0C 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001CF10 4E75                       		rts	
0001CF12                            ; ===========================================================================
0001CF12                            
0001CF12                            loc_1AF1E:
0001CF12 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001CF18 6600 0000                  		bne.w	locret_1AF2E
0001CF1C 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001CF20 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001CF24 0C68 0400 0010             		cmpi.w	#$400,$10(a0)
0001CF2A 6E00                       		bgt.s	@happy
0001CF2C 0C68 FC00 0010             		cmpi.w	#-$400,$10(a0)
0001CF32 6D00                       		blt.s	@happy
0001CF34 0C68 0800 0012             		cmpi.w	#$800,$12(a0)
0001CF3A 6E00                       		bgt.s	@happy
0001CF3C 0C68 F800 0012             		cmpi.w	#-$800,$12(a0)
0001CF42 6C00                       		bge.s	locret_1AF2E
0001CF44                            
0001CF44                            	@happy:
0001CF44 0828 0001 0022             		btst	#1,$22(a0)
0001CF4A 6700                       		beq.s	locret_1AF2E
0001CF4C 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001CF52 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001CF58 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeHappy2
0001CFBE                            
0001CFBE                            locret_1AF2E:
0001CFBE 4E75                       		rts	
0001CFC0                            ; ===========================================================================
0001CFC0                            
0001CFC0                            Touch_Enemy:				; XREF: Touch_ChkValue
0001CFC0 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001CFC4 6600                       		bne.s	loc_1AF40	; if yes, branch
0001CFC6 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001CFCC 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001CFD0                            
0001CFD0                            loc_1AF40:
0001CFD0 4A29 0021                  		tst.b	$21(a1)
0001CFD4 6700                       		beq.s	Touch_KillEnemy
0001CFD6 4468 0010                  		neg.w	$10(a0)
0001CFDA 4468 0012                  		neg.w	$12(a0)
0001CFDE 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001CFE2 E0E8 0010                  		asr	$10(a0)
0001CFE6 E0E8 0012                  		asr	$12(a0)
0001CFEA 137C 0000 0020             		move.b	#0,$20(a1)
0001CFF0 5329 0021                  		subq.b	#1,$21(a1)
0001CFF4 6600                       		bne.s	locret_1AF68
0001CFF6 08E9 0007 0022             		bset	#7,$22(a1)
0001CFFC                            
0001CFFC                            locret_1AF68:
0001CFFC 4E75                       		rts	
0001CFFE                            ; ===========================================================================
0001CFFE                            
0001CFFE                            Touch_KillEnemy:
0001CFFE 0C68 0400 0010             		cmpi.w	#$400,$10(a0)
0001D004 6E00                       		bgt.s	@happy
0001D006 0C68 FC00 0010             		cmpi.w	#-$400,$10(a0)
0001D00C 6D00                       		blt.s	@happy
0001D00E 0C68 0800 0012             		cmpi.w	#$800,$12(a0)
0001D014 6E00                       		bgt.s	@happy
0001D016 0C68 F800 0012             		cmpi.w	#-$800,$12(a0)
0001D01C 6C00                       		bge.s	@nothappy
0001D01E                            
0001D01E                            	@happy:
0001D01E 0828 0001 0022             		btst	#1,$22(a0)
0001D024 6700                       		beq.s	@nothappy
0001D026 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001D02C 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001D032                            
0001D032                            	@nothappy:
0001D032 08E9 0007 0022             		bset	#7,$22(a1)
0001D038 7000                       		moveq	#0,d0
0001D03A 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001D03E 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001D042 0C40 0006                  		cmpi.w	#6,d0
0001D046 6500                       		bcs.s	loc_1AF82
0001D048 7006                       		moveq	#6,d0
0001D04A                            
0001D04A                            loc_1AF82:
0001D04A 3340 003E                  		move.w	d0,$3E(a1)
0001D04E 4A40                       		tst.w	d0
0001D050 6700                       		beq.s	@nocombo
0001D052 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001D058 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001D05E                            
0001D05E                            	@nocombo:
0001D05E 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001D062 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001D068 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001D06A 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001D06E 337C 000A 003E             		move.w	#$A,$3E(a1)
0001D074                            
0001D074                            loc_1AF9C:
0001D074 6100 0000                  		bsr.w	AddPoints
0001D078 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001D07C 137C 0000 0024             		move.b	#0,$24(a1)
0001D082 4A68 0012                  		tst.w	$12(a0)
0001D086 6B00                       		bmi.s	loc_1AFC2
0001D088 3028 000C                  		move.w	$C(a0),d0
0001D08C B069 000C                  		cmp.w	$C(a1),d0
0001D090 6400                       		bcc.s	loc_1AFCA
0001D092 4468 0012                  		neg.w	$12(a0)
0001D096 4E75                       		rts	
0001D098                            ; ===========================================================================
0001D098                            
0001D098                            loc_1AFC2:
0001D098 0668 0100 0012             		addi.w	#$100,$12(a0)
0001D09E 4E75                       		rts	
0001D0A0                            ; ===========================================================================
0001D0A0                            
0001D0A0                            loc_1AFCA:
0001D0A0 0468 0100 0012             		subi.w	#$100,$12(a0)
0001D0A6 4E75                       		rts	
0001D0A8                            ; ===========================================================================
0001D0A8 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001D0B0                            ; ===========================================================================
0001D0B0                            
0001D0B0                            loc_1AFDA:				; XREF: Touch_CatKiller
0001D0B0 08E9 0007 0022             		bset	#7,$22(a1)
0001D0B6                            
0001D0B6                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001D0B6 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001D0BA 6700                       		beq.s	Touch_Hurt	; if not, branch
0001D0BC                            
0001D0BC                            loc_1AFE6:				; XREF: Touch_Hurt
0001D0BC 0C78 0100 D032             		cmpi.w	#$100,($FFFFD032).w
0001D0C2 6E00                       		bgt.s	locret_1AFE6
0001D0C4                            
0001D0C4                            loc2_1AFE6:				; XREF: Touch_Hurt
0001D0C4 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
0001D0CA 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001D0D0                            
0001D0D0                            locret_1AFE6:
0001D0D0 70FF                       		moveq	#-1,d0
0001D0D2 4E75                       		rts	
0001D0D4                            ; ===========================================================================
0001D0D4                            
0001D0D4                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001D0D4 4E71                       		nop	
0001D0D6 4A68 0030                  		tst.w	$30(a0)
0001D0DA 66E8                       		bne.s	loc2_1AFE6
0001D0DC 2449                       		movea.l	a1,a2
0001D0DE                            
0001D0DE                            ; End of function TouchResponse
0001D0DE                            ; continue straight to HurtSonic
0001D0DE                            
0001D0DE                            ; ---------------------------------------------------------------------------
0001D0DE                            ; Hurting Sonic	subroutine
0001D0DE                            ; ---------------------------------------------------------------------------
0001D0DE                            
0001D0DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0DE                            
0001D0DE                            
0001D0DE                            HurtSonic:
0001D0DE 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
0001D0E4 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0001D0EA 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeHurt
0001D150 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001D154 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001D156 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001D15A 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001D15E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0001D164 6500                       		bcs.s	@notbad
0001D166 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001D16C                            
0001D16C                            	@notbad:
0001D16C 4EB9 0000 F0A0             		jsr	SingleObjLoad
0001D172 6600                       		bne.s	Hurt_Shield
0001D174 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001D178 3368 0008 0008             		move.w	8(a0),8(a1)
0001D17E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D184                            
0001D184                            Hurt_Shield:
0001D184 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001D18A 117C 0004 0024             		move.b	#4,$24(a0)
0001D190 6100 8064                  		bsr.w	Sonic_ResetOnFloor
0001D194 08E8 0001 0022             		bset	#1,$22(a0)
0001D19A 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001D1A0 317C FE00 0010             		move.w	#-$200,$10(a0)
0001D1A6 0828 0006 0022             		btst	#6,$22(a0)
0001D1AC 6700                       		beq.s	Hurt_Reverse
0001D1AE 317C FE00 0012             		move.w	#-$200,$12(a0)
0001D1B4 317C FF00 0010             		move.w	#-$100,$10(a0)
0001D1BA                            
0001D1BA                            Hurt_Reverse:
0001D1BA 3028 0008                  		move.w	8(a0),d0
0001D1BE B06A 0008                  		cmp.w	8(a2),d0
0001D1C2 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001D1C4 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001D1C8                            
0001D1C8                            Hurt_ChkSpikes:
0001D1C8 317C 0000 0020             		move.w	#0,$20(a0)
0001D1CE 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001D1D4 317C 0078 0030             		move.w	#$78,$30(a0)
0001D1DA 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001D1DE 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001D1E2 6600                       		bne.s	Hurt_Sound	; if not, branch
0001D1E4 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001D1E8 6600                       		bne.s	Hurt_Sound	; if not, branch
0001D1EA 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001D1EE                            
0001D1EE                            Hurt_Sound:
0001D1EE 4EB9 0000 11F6             		jsr	(PlaySound_Special).l
0001D1F4 70FF                       		moveq	#-1,d0
0001D1F6 4E75                       		rts	
0001D1F8                            ; ===========================================================================
0001D1F8                            
0001D1F8                            Hurt_NoRings:
0001D1F8 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001D1FC 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001D200 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeDies
0001D266                            ; End of function HurtSonic
0001D266                            
0001D266                            ; ---------------------------------------------------------------------------
0001D266                            ; Subroutine to	kill Sonic
0001D266                            ; ---------------------------------------------------------------------------
0001D266                            
0001D266                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D266                            
0001D266                            
0001D266                            KillSonic:
0001D266 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001D26A 6600 0000                  		bne.w	Kill_NoDeath	; if yes, branch
0001D26E 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001D274 117C 0006 0024             		move.b	#6,$24(a0)
0001D27A 4EB9 0001 51F6             		jsr	(Sonic_ResetOnFloor).l
0001D280 08E8 0001 0022             		bset	#1,$22(a0)
0001D286 317C F900 0012             		move.w	#-$700,$12(a0)
0001D28C 317C 0000 0010             		move.w	#0,$10(a0)
0001D292 317C 0000 0020             		move.w	#0,$20(a0)
0001D298 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001D29E 117C 0018 001C             		move.b	#$18,$1C(a0)
0001D2A4 08E8 0007 0002             		bset	#7,2(a0)
0001D2AA 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001D2AE 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeFrustrated		
0001D314 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001D318 6600                       		bne.s	Kill_Sound
0001D31A 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001D31E 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeSpikey
0001D384                            
0001D384                            Kill_Sound:
0001D384 4EB9 0000 11F6             		jsr	(PlaySound_Special).l
0001D38A                            
0001D38A                            Kill_NoDeath:
0001D38A 70FF                       		moveq	#-1,d0
0001D38C 4E75                       		rts	
0001D38E                            ; End of function KillSonic
0001D38E                            
0001D38E                            
0001D38E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D38E                            
0001D38E                            
0001D38E                            Touch_Special:				; XREF: Touch_ChkValue
0001D38E 1229 0020                  		move.b	$20(a1),d1
0001D392 0201 003F                  		andi.b	#$3F,d1
0001D396 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001D39A 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001D39C 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001D3A0 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001D3A2 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001D3A6 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001D3A8 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001D3AC 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001D3AE 4E75                       		rts	
0001D3B0                            ; ===========================================================================
0001D3B0                            
0001D3B0                            Touch_CatKiller:			; XREF: Touch_Special
0001D3B0 6000 FCFE                  		bra.w	loc_1AFDA
0001D3B4                            ; ===========================================================================
0001D3B4                            
0001D3B4                            Touch_Yadrin:				; XREF: Touch_Special
0001D3B4 9A40                       		sub.w	d0,d5
0001D3B6 0C45 0008                  		cmpi.w	#8,d5
0001D3BA 6400                       		bcc.s	loc_1B144
0001D3BC 3029 0008                  		move.w	8(a1),d0
0001D3C0 5940                       		subq.w	#4,d0
0001D3C2 0829 0000 0022             		btst	#0,$22(a1)
0001D3C8 6700                       		beq.s	loc_1B130
0001D3CA 0440 0010                  		subi.w	#$10,d0
0001D3CE                            
0001D3CE                            loc_1B130:
0001D3CE 9042                       		sub.w	d2,d0
0001D3D0 6400                       		bcc.s	loc_1B13C
0001D3D2 0640 0018                  		addi.w	#$18,d0
0001D3D6 6500                       		bcs.s	loc_1B140
0001D3D8 6000                       		bra.s	loc_1B144
0001D3DA                            ; ===========================================================================
0001D3DA                            
0001D3DA                            loc_1B13C:
0001D3DA B044                       		cmp.w	d4,d0
0001D3DC 6200                       		bhi.s	loc_1B144
0001D3DE                            
0001D3DE                            loc_1B140:
0001D3DE 6000 FCD6                  		bra.w	Touch_ChkHurt
0001D3E2                            ; ===========================================================================
0001D3E2                            
0001D3E2                            loc_1B144:
0001D3E2 6000 FBDC                  		bra.w	Touch_Enemy
0001D3E6                            ; ===========================================================================
0001D3E6                            
0001D3E6                            Touch_D7orE1:				; XREF: Touch_Special
0001D3E6 5229 0021                  		addq.b	#1,$21(a1)
0001D3EA 4E75                       		rts	
0001D3EC                            ; End of function Touch_Special
0001D3EC                            
0001D3EC                            ; ---------------------------------------------------------------------------
0001D3EC                            ; Subroutine to	show the special stage layout
0001D3EC                            ; ---------------------------------------------------------------------------
0001D3EC                            
0001D3EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D3EC                            
0001D3EC                            
0001D3EC                            SS_ShowLayout:				; XREF: SpecialStage
0001D3EC 4A78 F63A                  		tst.w	($FFFFF63A).w
0001D3F0 6600                       		bne.s	@noanimate
0001D3F2 6100 0000                  		bsr.w	SS_AniWallsRings
0001D3F6 6100 0000                  		bsr.w	SS_AniItems
0001D3FA                            
0001D3FA                            	@noanimate:
0001D3FA 3F05                       		move.w	d5,-(sp)
0001D3FC 43F8 8000                  		lea	($FFFF8000).w,a1
0001D400 1038 F780                  		move.b	($FFFFF780).w,d0
0001D404 0200 00FC                  		andi.b	#$FC,d0
0001D408 4EB9 0000 29CC             		jsr	(CalcSine).l
0001D40E 3800                       		move.w	d0,d4
0001D410 3A01                       		move.w	d1,d5
0001D412 C9FC 0018                  		muls.w	#$18,d4
0001D416 CBFC 0018                  		muls.w	#$18,d5
0001D41A 7400                       		moveq	#0,d2
0001D41C 3438 F700                  		move.w	($FFFFF700).w,d2
0001D420 84FC 0018                  		divu.w	#$18,d2
0001D424 4842                       		swap	d2
0001D426 4442                       		neg.w	d2
0001D428 0642 FF4C                  		addi.w	#-$B4,d2
0001D42C 7600                       		moveq	#0,d3
0001D42E 3638 F704                  		move.w	($FFFFF704).w,d3
0001D432 86FC 0018                  		divu.w	#$18,d3
0001D436 4843                       		swap	d3
0001D438 4443                       		neg.w	d3
0001D43A 0643 FF4C                  		addi.w	#-$B4,d3
0001D43E 3E3C 000F                  		move.w	#$F,d7
0001D442                            
0001D442                            loc_1B19E:
0001D442 48A7 E000                  		movem.w	d0-d2,-(sp)
0001D446 48A7 C000                  		movem.w	d0-d1,-(sp)
0001D44A 4440                       		neg.w	d0
0001D44C C3C2                       		muls.w	d2,d1
0001D44E C1C3                       		muls.w	d3,d0
0001D450 2C00                       		move.l	d0,d6
0001D452 DC81                       		add.l	d1,d6
0001D454 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001D458 C1C2                       		muls.w	d2,d0
0001D45A C3C3                       		muls.w	d3,d1
0001D45C D280                       		add.l	d0,d1
0001D45E 2406                       		move.l	d6,d2
0001D460 3C3C 000F                  		move.w	#$F,d6
0001D464                            
0001D464                            loc_1B1C0:
0001D464 2002                       		move.l	d2,d0
0001D466 E080                       		asr.l	#8,d0
0001D468 32C0                       		move.w	d0,(a1)+
0001D46A 2001                       		move.l	d1,d0
0001D46C E080                       		asr.l	#8,d0
0001D46E 32C0                       		move.w	d0,(a1)+
0001D470 D485                       		add.l	d5,d2
0001D472 D284                       		add.l	d4,d1
0001D474 51CE FFEE                  		dbf	d6,loc_1B1C0
0001D478                            
0001D478 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001D47C 0643 0018                  		addi.w	#$18,d3
0001D480 51CF FFC0                  		dbf	d7,loc_1B19E
0001D484                            
0001D484 3A1F                       		move.w	(sp)+,d5
0001D486 41F9 00FF 0000             		lea	($FF0000).l,a0
0001D48C 7000                       		moveq	#0,d0
0001D48E 3038 F704                  		move.w	($FFFFF704).w,d0
0001D492 80FC 0018                  		divu.w	#$18,d0
0001D496 C0FC 0080                  		mulu.w	#$80,d0
0001D49A D1C0                       		adda.l	d0,a0
0001D49C 7000                       		moveq	#0,d0
0001D49E 3038 F700                  		move.w	($FFFFF700).w,d0
0001D4A2 80FC 0018                  		divu.w	#$18,d0
0001D4A6 D0C0                       		adda.w	d0,a0
0001D4A8 49F8 8000                  		lea	($FFFF8000).w,a4
0001D4AC 3E3C 000F                  		move.w	#$F,d7
0001D4B0                            
0001D4B0                            loc_1B20C:
0001D4B0 3C3C 000F                  		move.w	#$F,d6
0001D4B4                            
0001D4B4                            loc_1B210:
0001D4B4 7000                       		moveq	#0,d0
0001D4B6 1018                       		move.b	(a0)+,d0
0001D4B8 6700                       		beq.s	loc_1B268
0001D4BA 0C00 004E                  		cmpi.b	#$4E,d0
0001D4BE 6200                       		bhi.s	loc_1B268
0001D4C0 3614                       		move.w	(a4),d3
0001D4C2 0643 0120                  		addi.w	#$120,d3
0001D4C6 0C43 0070                  		cmpi.w	#$70,d3
0001D4CA 6500                       		bcs.s	loc_1B268
0001D4CC 0C43 01D0                  		cmpi.w	#$1D0,d3
0001D4D0 6400                       		bcc.s	loc_1B268
0001D4D2 342C 0002                  		move.w	2(a4),d2
0001D4D6 0642 00F0                  		addi.w	#$F0,d2
0001D4DA 0C42 0070                  		cmpi.w	#$70,d2
0001D4DE 6500                       		bcs.s	loc_1B268
0001D4E0 0C42 0170                  		cmpi.w	#$170,d2
0001D4E4 6400                       		bcc.s	loc_1B268
0001D4E6 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001D4EC E748                       		lsl.w	#3,d0
0001D4EE 4BF5 0000                  		lea	(a5,d0.w),a5
0001D4F2 225D                       		movea.l	(a5)+,a1
0001D4F4 321D                       		move.w	(a5)+,d1
0001D4F6 D241                       		add.w	d1,d1
0001D4F8 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001D4FC 365D                       		movea.w	(a5)+,a3
0001D4FE 7200                       		moveq	#0,d1
0001D500 1219                       		move.b	(a1)+,d1
0001D502 5301                       		subq.b	#1,d1
0001D504 6B00                       		bmi.s	loc_1B268
0001D506 4EB9 0000 EBF4             		jsr	sub_D762
0001D50C                            
0001D50C                            loc_1B268:
0001D50C 584C                       		addq.w	#4,a4
0001D50E 51CE FFA4                  		dbf	d6,loc_1B210
0001D512                            
0001D512 41E8 0070                  		lea	$70(a0),a0
0001D516 51CF FF98                  		dbf	d7,loc_1B20C
0001D51A                            
0001D51A 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001D51E 0C05 0050                  		cmpi.b	#$50,d5
0001D522 6700                       		beq.s	loc_1B288
0001D524 24BC 0000 0000             		move.l	#0,(a2)
0001D52A 4E75                       		rts	
0001D52C                            ; ===========================================================================
0001D52C                            
0001D52C                            loc_1B288:
0001D52C 157C 0000 FFFB             		move.b	#0,-5(a2)
0001D532 4E75                       		rts	
0001D534                            ; End of function SS_ShowLayout
0001D534                            
0001D534                            ; ---------------------------------------------------------------------------
0001D534                            ; Subroutine to	animate	walls and rings	in the special stage
0001D534                            ; ---------------------------------------------------------------------------
0001D534                            
0001D534                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D534                            
0001D534                            
0001D534                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001D534 43F9 00FF 4005             		lea	($FF4005).l,a1
0001D53A 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001D53E 6A00                       		bpl.s	loc_1B2C8
0001D540 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001D546 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001D54A 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001D550                            
0001D550                            loc_1B2C8:
0001D550 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001D556 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001D55A 6A00                       		bpl.s	loc_1B2E4
0001D55C 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001D562 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001D566 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001D56C                            
0001D56C                            loc_1B2E4:
0001D56C 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001D570 1340 0138                  		move.b	d0,$138(a1)
0001D574 1340 0160                  		move.b	d0,$160(a1)
0001D578 1340 0148                  		move.b	d0,$148(a1)
0001D57C 1340 0150                  		move.b	d0,$150(a1)
0001D580 1340 01D8                  		move.b	d0,$1D8(a1)
0001D584 1340 01E0                  		move.b	d0,$1E0(a1)
0001D588 1340 01E8                  		move.b	d0,$1E8(a1)
0001D58C 1340 01F0                  		move.b	d0,$1F0(a1)
0001D590 1340 01F8                  		move.b	d0,$1F8(a1)
0001D594 1340 0200                  		move.b	d0,$200(a1)
0001D598 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001D59C 6A00                       		bpl.s	loc_1B326
0001D59E 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001D5A4 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001D5A8 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001D5AE                            
0001D5AE                            loc_1B326:
0001D5AE 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001D5B2 1340 0168                  		move.b	d0,$168(a1)
0001D5B6 1340 0170                  		move.b	d0,$170(a1)
0001D5BA 1340 0178                  		move.b	d0,$178(a1)
0001D5BE 1340 0180                  		move.b	d0,$180(a1)
0001D5C2 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001D5C6 6A00                       		bpl.s	loc_1B350
0001D5C8 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001D5CE 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001D5D2 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001D5D8                            
0001D5D8                            loc_1B350:
0001D5D8 43F9 00FF 4016             		lea	($FF4016).l,a1
0001D5DE 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001D5E4 7000                       		moveq	#0,d0
0001D5E6 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001D5EA D040                       		add.w	d0,d0
0001D5EC 41F0 0000                  		lea	(a0,d0.w),a0
0001D5F0 3290                       		move.w	(a0),(a1)
0001D5F2 3368 0002 0008             		move.w	2(a0),8(a1)
0001D5F8 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D5FE 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D604 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D60A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D610 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D616 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D61C D0FC 0020                  		adda.w	#$20,a0
0001D620 D2FC 0048                  		adda.w	#$48,a1
0001D624 3290                       		move.w	(a0),(a1)
0001D626 3368 0002 0008             		move.w	2(a0),8(a1)
0001D62C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D632 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D638 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D63E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D644 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D64A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D650 D0FC 0020                  		adda.w	#$20,a0
0001D654 D2FC 0048                  		adda.w	#$48,a1
0001D658 3290                       		move.w	(a0),(a1)
0001D65A 3368 0002 0008             		move.w	2(a0),8(a1)
0001D660 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D666 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D66C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D672 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D678 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D67E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D684 D0FC 0020                  		adda.w	#$20,a0
0001D688 D2FC 0048                  		adda.w	#$48,a1
0001D68C 3290                       		move.w	(a0),(a1)
0001D68E 3368 0002 0008             		move.w	2(a0),8(a1)
0001D694 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D69A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D6A0 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D6A6 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D6AC 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D6B2 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D6B8 D0FC 0020                  		adda.w	#$20,a0
0001D6BC D2FC 0048                  		adda.w	#$48,a1
0001D6C0 4E75                       		rts	
0001D6C2                            ; End of function SS_AniWallsRings
0001D6C2                            
0001D6C2                            SS_LoadWalls:
0001D6C2 7000                       		moveq	#0,d0
0001D6C4 1038 F780                  		move.b	($FFFFF780).w,d0	; get the Special Stage angle
0001D6C8 E408                       		lsr.b	#2,d0			; modify so it can be used as a frame ID
0001D6CA 0240 000F                  		andi.w	#$F,d0
0001D6CE B038 FFF9                  		cmp.b	(v_ssangleprev).w,d0	; does the modified angle match the recorded value?
0001D6D2 6700                       		beq.s	@return			; if so, branch
0001D6D4                            
0001D6D4 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D6DA 43F9 0000 0000             		lea	(Art_SSWalls).l,a1	; load wall art
0001D6E0 3200                       		move.w	d0,d1
0001D6E2 E149                       		lsl.w	#8,d1
0001D6E4 D241                       		add.w	d1,d1
0001D6E6 D2C1                       		add.w	d1,a1
0001D6E8                            
0001D6F2                            
0001D6F2 323C 000F                  		move.w	#$F,d1			; number of 8x8 tiles
0001D6F6 4EB9 0000 0000             		jsr	LoadTiles
0001D6FC 11C0 FFF9                  		move.b	d0,(v_ssangleprev).w	; record the modified angle for comparison
0001D700                            
0001D700                            	@return:
0001D700 4E75                       		rts
0001D702                            
0001D702                            ; ===========================================================================
0001D702 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001D712 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001D722 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001D732 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001D742 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001D752 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001D762 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001D772 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001D782                            ; ---------------------------------------------------------------------------
0001D782                            ; Subroutine to	remove items when you collect them in the special stage
0001D782                            ; ---------------------------------------------------------------------------
0001D782                            
0001D782                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D782                            
0001D782                            
0001D782                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001D782 45F9 00FF 4400             		lea	($FF4400).l,a2
0001D788 303C 001F                  		move.w	#$1F,d0
0001D78C                            
0001D78C                            loc_1B4C4:
0001D78C 4A12                       		tst.b	(a2)
0001D78E 6700                       		beq.s	locret_1B4CE
0001D790 504A                       		addq.w	#8,a2
0001D792 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001D796                            
0001D796                            locret_1B4CE:
0001D796 4E75                       		rts	
0001D798                            ; End of function SS_RemoveCollectedItem
0001D798                            
0001D798                            ; ---------------------------------------------------------------------------
0001D798                            ; Subroutine to	animate	special	stage items when you touch them
0001D798                            ; ---------------------------------------------------------------------------
0001D798                            
0001D798                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D798                            
0001D798                            
0001D798                            SS_AniItems:				; XREF: SS_ShowLayout
0001D798 41F9 00FF 4400             		lea	($FF4400).l,a0
0001D79E 3E3C 001F                  		move.w	#$1F,d7
0001D7A2                            
0001D7A2                            loc_1B4DA:
0001D7A2 7000                       		moveq	#0,d0
0001D7A4 1010                       		move.b	(a0),d0
0001D7A6 6700                       		beq.s	loc_1B4E8
0001D7A8 E548                       		lsl.w	#2,d0
0001D7AA 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001D7AE 4E91                       		jsr	(a1)
0001D7B0                            
0001D7B0                            loc_1B4E8:
0001D7B0 5048                       		addq.w	#8,a0
0001D7B2                            
0001D7B2                            loc_1B4EA:
0001D7B2 51CF FFEE                  		dbf	d7,loc_1B4DA
0001D7B6                            
0001D7B6 4E75                       		rts	
0001D7B8                            ; End of function SS_AniItems
0001D7B8                            
0001D7B8                            ; ===========================================================================
0001D7B8 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001D7BC 0000 0000                  		dc.l SS_AniBumper
0001D7C0 0000 0000                  		dc.l SS_Ani1Up
0001D7C4 0000 0000                  		dc.l SS_AniReverse
0001D7C8 0000 0000                  		dc.l SS_AniEmeraldSparks
0001D7CC 0000 0000                  		dc.l SS_AniGlassBlock
0001D7D0                            ; ===========================================================================
0001D7D0                            
0001D7D0                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001D7D0 5328 0002                  		subq.b	#1,2(a0)
0001D7D4 6A00                       		bpl.s	locret_1B530
0001D7D6 117C 0005 0002             		move.b	#5,2(a0)
0001D7DC 7000                       		moveq	#0,d0
0001D7DE 1028 0003                  		move.b	3(a0),d0
0001D7E2 5228 0003                  		addq.b	#1,3(a0)
0001D7E6 2268 0004                  		movea.l	4(a0),a1
0001D7EA 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001D7EE 1280                       		move.b	d0,(a1)
0001D7F0 6600                       		bne.s	locret_1B530
0001D7F2 4290                       		clr.l	(a0)
0001D7F4 42A8 0004                  		clr.l	4(a0)
0001D7F8                            
0001D7F8                            locret_1B530:
0001D7F8 4E75                       		rts	
0001D7FA                            ; ===========================================================================
0001D7FA 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001D800                            ; ===========================================================================
0001D800                            
0001D800                            SS_AniBumper:				; XREF: SS_AniIndex
0001D800 5328 0002                  		subq.b	#1,2(a0)
0001D804 6A00                       		bpl.s	locret_1B566
0001D806 117C 0007 0002             		move.b	#7,2(a0)
0001D80C 7000                       		moveq	#0,d0
0001D80E 1028 0003                  		move.b	3(a0),d0
0001D812 5228 0003                  		addq.b	#1,3(a0)
0001D816 2268 0004                  		movea.l	4(a0),a1
0001D81A 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001D81E 6600                       		bne.s	loc_1B564
0001D820 4290                       		clr.l	(a0)
0001D822 42A8 0004                  		clr.l	4(a0)
0001D826 12BC 0025                  		move.b	#$25,(a1)
0001D82A 4E75                       		rts	
0001D82C                            ; ===========================================================================
0001D82C                            
0001D82C                            loc_1B564:
0001D82C 1280                       		move.b	d0,(a1)
0001D82E                            
0001D82E                            locret_1B566:
0001D82E 4E75                       		rts	
0001D830                            ; ===========================================================================
0001D830 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001D836                            ; ===========================================================================
0001D836                            
0001D836                            SS_Ani1Up:				; XREF: SS_AniIndex
0001D836 5328 0002                  		subq.b	#1,2(a0)
0001D83A 6A00                       		bpl.s	locret_1B596
0001D83C 117C 0005 0002             		move.b	#5,2(a0)
0001D842 7000                       		moveq	#0,d0
0001D844 1028 0003                  		move.b	3(a0),d0
0001D848 5228 0003                  		addq.b	#1,3(a0)
0001D84C 2268 0004                  		movea.l	4(a0),a1
0001D850 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001D854 1280                       		move.b	d0,(a1)
0001D856 6600                       		bne.s	locret_1B596
0001D858 4290                       		clr.l	(a0)
0001D85A 42A8 0004                  		clr.l	4(a0)
0001D85E                            
0001D85E                            locret_1B596:
0001D85E 4E75                       		rts	
0001D860                            ; ===========================================================================
0001D860 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001D866                            ; ===========================================================================
0001D866                            
0001D866                            SS_AniReverse:				; XREF: SS_AniIndex
0001D866 5328 0002                  		subq.b	#1,2(a0)
0001D86A 6A00                       		bpl.s	locret_1B5CC
0001D86C 117C 0007 0002             		move.b	#7,2(a0)
0001D872 7000                       		moveq	#0,d0
0001D874 1028 0003                  		move.b	3(a0),d0
0001D878 5228 0003                  		addq.b	#1,3(a0)
0001D87C 2268 0004                  		movea.l	4(a0),a1
0001D880 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001D884 6600                       		bne.s	loc_1B5CA
0001D886 4290                       		clr.l	(a0)
0001D888 42A8 0004                  		clr.l	4(a0)
0001D88C 12BC 002B                  		move.b	#$2B,(a1)
0001D890 4E75                       		rts	
0001D892                            ; ===========================================================================
0001D892                            
0001D892                            loc_1B5CA:
0001D892 1280                       		move.b	d0,(a1)
0001D894                            
0001D894                            locret_1B5CC:
0001D894 4E75                       		rts	
0001D896                            ; ===========================================================================
0001D896 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001D89C                            ; ===========================================================================
0001D89C                            
0001D89C                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001D89C 5328 0002                  		subq.b	#1,2(a0)
0001D8A0 6A00                       		bpl.s	locret_1B60C
0001D8A2 117C 0005 0002             		move.b	#5,2(a0)
0001D8A8 7000                       		moveq	#0,d0
0001D8AA 1028 0003                  		move.b	3(a0),d0
0001D8AE 5228 0003                  		addq.b	#1,3(a0)
0001D8B2 2268 0004                  		movea.l	4(a0),a1
0001D8B6 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001D8BA 1280                       		move.b	d0,(a1)
0001D8BC 6600                       		bne.s	locret_1B60C
0001D8BE 4290                       		clr.l	(a0)
0001D8C0 42A8 0004                  		clr.l	4(a0)
0001D8C4 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001D8CA 303C 00A8                  		move.w	#$A8,d0
0001D8CE 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001D8D4                            
0001D8D4                            locret_1B60C:
0001D8D4 4E75                       		rts	
0001D8D6                            ; ===========================================================================
0001D8D6 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001D8DC                            ; ===========================================================================
0001D8DC                            
0001D8DC                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001D8DC 5328 0002                  		subq.b	#1,2(a0)
0001D8E0 6A00                       		bpl.s	locret_1B640
0001D8E2 117C 0001 0002             		move.b	#1,2(a0)
0001D8E8 7000                       		moveq	#0,d0
0001D8EA 1028 0003                  		move.b	3(a0),d0
0001D8EE 5228 0003                  		addq.b	#1,3(a0)
0001D8F2 2268 0004                  		movea.l	4(a0),a1
0001D8F6 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001D8FA 1280                       		move.b	d0,(a1)
0001D8FC 6600                       		bne.s	locret_1B640
0001D8FE 12A8 0004                  		move.b	4(a0),(a1)
0001D902 4290                       		clr.l	(a0)
0001D904 42A8 0004                  		clr.l	4(a0)
0001D908                            
0001D908                            locret_1B640:
0001D908 4E75                       		rts	
0001D90A                            ; ===========================================================================
0001D90A 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001D914                            ; ---------------------------------------------------------------------------
0001D914                            ; Special stage	layout pointers
0001D914                            ; ---------------------------------------------------------------------------
0001D914                            SS_LayoutIndex:
0001D914                            	include "_inc\Special stage layout pointers.asm"
0001D914                            ; ---------------------------------------------------------------------------
0001D914                            ; Special stage	layout pointers
0001D914                            ; ---------------------------------------------------------------------------
0001D914 0000 0000                  	dc.l SS_1
0001D918 0000 0000                  	dc.l SS_2
0001D91C 0000 0000                  	dc.l SS_3
0001D920 0000 0000                  	dc.l SS_4
0001D924 0000 0000                  	dc.l SS_5
0001D928 0000 0000                  	dc.l SS_6
0001D92C                            	even
0001D92C                            	even
0001D92C                            
0001D92C                            ; ---------------------------------------------------------------------------
0001D92C                            ; Special stage	start locations
0001D92C                            ; ---------------------------------------------------------------------------
0001D92C                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001D944                            		even
0001D944                            
0001D944                            ; ---------------------------------------------------------------------------
0001D944                            ; Subroutine to	load special stage layout
0001D944                            ; ---------------------------------------------------------------------------
0001D944                            
0001D944                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D944                            
0001D944                            
0001D944                            SS_Load:				; XREF: SpecialStage
0001D944 7000                       		moveq	#0,d0
0001D946 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001D94A 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001D94E 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001D954 6500                       		bcs.s	SS_ChkEmldNum
0001D956 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001D95C                            
0001D95C                            SS_ChkEmldNum:
0001D95C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001D962 6700                       		beq.s	SS_LoadData	; if yes, branch
0001D964 7200                       		moveq	#0,d1
0001D966 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001D96A 5301                       		subq.b	#1,d1
0001D96C 6500                       		bcs.s	SS_LoadData
0001D96E 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001D972                            
0001D972                            SS_ChkEmldLoop:	
0001D972 B033 1000                  		cmp.b	(a3,d1.w),d0
0001D976 6600                       		bne.s	SS_ChkEmldRepeat
0001D978 60CA                       		bra.s	SS_Load
0001D97A                            ; ===========================================================================
0001D97A                            
0001D97A                            SS_ChkEmldRepeat:
0001D97A 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001D97E                            
0001D97E                            SS_LoadData:
0001D97E E548                       		lsl.w	#2,d0
0001D980 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001D984 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001D988 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001D98C 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001D990 43F9 00FF 4000             		lea	($FF4000).l,a1
0001D996 303C 0000                  		move.w	#0,d0
0001D99A 4EB9 0000 15D2             		jsr	(EniDec).l
0001D9A0 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D9A6 303C 0FFF                  		move.w	#$FFF,d0
0001D9AA                            
0001D9AA                            SS_ClrRAM3:
0001D9AA 4299                       		clr.l	(a1)+
0001D9AC 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001D9B0                            
0001D9B0 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D9B6 41F9 00FF 4000             		lea	($FF4000).l,a0
0001D9BC 723F                       		moveq	#$3F,d1
0001D9BE                            
0001D9BE                            loc_1B6F6:
0001D9BE 743F                       		moveq	#$3F,d2
0001D9C0                            
0001D9C0                            loc_1B6F8:
0001D9C0 12D8                       		move.b	(a0)+,(a1)+
0001D9C2 51CA FFFC                  		dbf	d2,loc_1B6F8
0001D9C6                            
0001D9C6 43E9 0040                  		lea	$40(a1),a1
0001D9CA 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001D9CE                            
0001D9CE 43F9 00FF 4008             		lea	($FF4008).l,a1
0001D9D4 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001D9DA 724D                       		moveq	#$4D,d1
0001D9DC                            
0001D9DC                            loc_1B714:
0001D9DC 22D8                       		move.l	(a0)+,(a1)+
0001D9DE 32FC 0000                  		move.w	#0,(a1)+
0001D9E2 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001D9E8 32D8                       		move.w	(a0)+,(a1)+
0001D9EA 51C9 FFF0                  		dbf	d1,loc_1B714
0001D9EE                            
0001D9EE 43F9 00FF 4400             		lea	($FF4400).l,a1
0001D9F4 323C 003F                  		move.w	#$3F,d1
0001D9F8                            
0001D9F8                            loc_1B730:
0001D9F8                            
0001D9F8 4299                       		clr.l	(a1)+
0001D9FA 51C9 FFFC                  		dbf	d1,loc_1B730
0001D9FE                            
0001D9FE 4E75                       		rts	
0001DA00                            ; End of function SS_Load
0001DA00                            
0001DA00                            ; ===========================================================================
0001DA00                            ; ---------------------------------------------------------------------------
0001DA00                            ; Special stage	mappings and VRAM pointers
0001DA00                            ; ---------------------------------------------------------------------------
0001DA00                            SS_MapIndex:
0001DA00                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001DA00                            ; ---------------------------------------------------------------------------
0001DA00                            ; Special stage	mappings and VRAM pointers
0001DA00                            ; ---------------------------------------------------------------------------
0001DA00 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001DA04 0142                       	dc.w $142		; VRAM setting
0001DA06 0000 0000                  	dc.l Map_SSWalls
0001DA0A 0142                       	dc.w $142
0001DA0C 0000 0000                  	dc.l Map_SSWalls
0001DA10 0142                       	dc.w $142
0001DA12 0000 0000                  	dc.l Map_SSWalls
0001DA16 0142                       	dc.w $142
0001DA18 0000 0000                  	dc.l Map_SSWalls
0001DA1C 0142                       	dc.w $142
0001DA1E 0000 0000                  	dc.l Map_SSWalls
0001DA22 0142                       	dc.w $142
0001DA24 0000 0000                  	dc.l Map_SSWalls
0001DA28 0142                       	dc.w $142
0001DA2A 0000 0000                  	dc.l Map_SSWalls
0001DA2E 0142                       	dc.w $142
0001DA30 0000 0000                  	dc.l Map_SSWalls
0001DA34 0142                       	dc.w $142
0001DA36 0000 0000                  	dc.l Map_SSWalls
0001DA3A 2142                       	dc.w $2142
0001DA3C 0000 0000                  	dc.l Map_SSWalls
0001DA40 2142                       	dc.w $2142
0001DA42 0000 0000                  	dc.l Map_SSWalls
0001DA46 2142                       	dc.w $2142
0001DA48 0000 0000                  	dc.l Map_SSWalls
0001DA4C 2142                       	dc.w $2142
0001DA4E 0000 0000                  	dc.l Map_SSWalls
0001DA52 2142                       	dc.w $2142
0001DA54 0000 0000                  	dc.l Map_SSWalls
0001DA58 2142                       	dc.w $2142
0001DA5A 0000 0000                  	dc.l Map_SSWalls
0001DA5E 2142                       	dc.w $2142
0001DA60 0000 0000                  	dc.l Map_SSWalls
0001DA64 2142                       	dc.w $2142
0001DA66 0000 0000                  	dc.l Map_SSWalls
0001DA6A 2142                       	dc.w $2142
0001DA6C 0000 0000                  	dc.l Map_SSWalls
0001DA70 4142                       	dc.w $4142
0001DA72 0000 0000                  	dc.l Map_SSWalls
0001DA76 4142                       	dc.w $4142
0001DA78 0000 0000                  	dc.l Map_SSWalls
0001DA7C 4142                       	dc.w $4142
0001DA7E 0000 0000                  	dc.l Map_SSWalls
0001DA82 4142                       	dc.w $4142
0001DA84 0000 0000                  	dc.l Map_SSWalls
0001DA88 4142                       	dc.w $4142
0001DA8A 0000 0000                  	dc.l Map_SSWalls
0001DA8E 4142                       	dc.w $4142
0001DA90 0000 0000                  	dc.l Map_SSWalls
0001DA94 4142                       	dc.w $4142
0001DA96 0000 0000                  	dc.l Map_SSWalls
0001DA9A 4142                       	dc.w $4142
0001DA9C 0000 0000                  	dc.l Map_SSWalls
0001DAA0 4142                       	dc.w $4142
0001DAA2 0000 0000                  	dc.l Map_SSWalls
0001DAA6 6142                       	dc.w $6142
0001DAA8 0000 0000                  	dc.l Map_SSWalls
0001DAAC 6142                       	dc.w $6142
0001DAAE 0000 0000                  	dc.l Map_SSWalls
0001DAB2 6142                       	dc.w $6142
0001DAB4 0000 0000                  	dc.l Map_SSWalls
0001DAB8 6142                       	dc.w $6142
0001DABA 0000 0000                  	dc.l Map_SSWalls
0001DABE 6142                       	dc.w $6142
0001DAC0 0000 0000                  	dc.l Map_SSWalls
0001DAC4 6142                       	dc.w $6142
0001DAC6 0000 0000                  	dc.l Map_SSWalls
0001DACA 6142                       	dc.w $6142
0001DACC 0000 0000                  	dc.l Map_SSWalls
0001DAD0 6142                       	dc.w $6142
0001DAD2 0000 0000                  	dc.l Map_SSWalls
0001DAD6 6142                       	dc.w $6142
0001DAD8 0001 03BE                  	dc.l Map_obj47
0001DADC 023B                       	dc.w $23B
0001DADE 0000 0000                  	dc.l Map_SS_R
0001DAE2 0570                       	dc.w $570
0001DAE4 0000 0000                  	dc.l Map_SS_R
0001DAE8 0251                       	dc.w $251
0001DAEA 0000 0000                  	dc.l Map_SS_R
0001DAEE 0370                       	dc.w $370
0001DAF0 0000 0000                  	dc.l Map_SS_Up
0001DAF4 0263                       	dc.w $263
0001DAF6 0000 0000                  	dc.l Map_SS_Down
0001DAFA 0263                       	dc.w $263
0001DAFC 0000 0000                  	dc.l Map_SS_R
0001DB00 22F0                       	dc.w $22F0
0001DB02 0000 0000                  	dc.l Map_SS_Glass
0001DB06 0470                       	dc.w $470
0001DB08 0000 0000                  	dc.l Map_SS_Glass
0001DB0C 05F0                       	dc.w $5F0
0001DB0E 0000 0000                  	dc.l Map_SS_Glass
0001DB12 65F0                       	dc.w $65F0
0001DB14 0000 0000                  	dc.l Map_SS_Glass
0001DB18 25F0                       	dc.w $25F0
0001DB1A 0000 0000                  	dc.l Map_SS_Glass
0001DB1E 45F0                       	dc.w $45F0
0001DB20 0000 0000                  	dc.l Map_SS_R
0001DB24 02F0                       	dc.w $2F0
0001DB26 0101 03BE                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001DB2A 023B                       	dc.w $23B
0001DB2C 0201 03BE                  	dc.l Map_obj47+$2000000
0001DB30 023B                       	dc.w $23B
0001DB32 0000 0000                  	dc.l Map_SS_R
0001DB36 0797                       	dc.w $797
0001DB38 0000 0000                  	dc.l Map_SS_R
0001DB3C 07A0                       	dc.w $7A0
0001DB3E 0000 0000                  	dc.l Map_SS_R
0001DB42 07A9                       	dc.w $7A9
0001DB44 0000 0000                  	dc.l Map_SS_R
0001DB48 0797                       	dc.w $797
0001DB4A 0000 0000                  	dc.l Map_SS_R
0001DB4E 07A0                       	dc.w $7A0
0001DB50 0000 0000                  	dc.l Map_SS_R
0001DB54 07A9                       	dc.w $7A9
0001DB56 0000 B254                  	dc.l Map_obj25
0001DB5A 222D                       	dc.w $2000+ssringart
0001DB5C 0000 0000                  	dc.l Map_SS_Chaos3
0001DB60 0770                       	dc.w $770
0001DB62 0000 0000                  	dc.l Map_SS_Chaos3
0001DB66 2770                       	dc.w $2770
0001DB68 0000 0000                  	dc.l Map_SS_Chaos3
0001DB6C 4770                       	dc.w $4770
0001DB6E 0000 0000                  	dc.l Map_SS_Chaos3
0001DB72 6770                       	dc.w $6770
0001DB74 0000 0000                  	dc.l Map_SS_Chaos1
0001DB78 0770                       	dc.w $770
0001DB7A 0000 0000                  	dc.l Map_SS_Chaos2
0001DB7E 0770                       	dc.w $770
0001DB80 0000 0000                  	dc.l Map_SS_R
0001DB84 04F0                       	dc.w $4F0
0001DB86 0400 B254                  	dc.l Map_obj25+$4000000
0001DB8A 222D                       	dc.w $2000+ssringart
0001DB8C 0500 B254                  	dc.l Map_obj25+$5000000
0001DB90 222D                       	dc.w $2000+ssringart
0001DB92 0600 B254                  	dc.l Map_obj25+$6000000
0001DB96 222D                       	dc.w $2000+ssringart
0001DB98 0700 B254                  	dc.l Map_obj25+$7000000
0001DB9C 222D                       	dc.w $2000+ssringart
0001DB9E 0000 0000                  	dc.l Map_SS_Glass
0001DBA2 23F0                       	dc.w $23F0
0001DBA4 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001DBA8 23F0                       	dc.w $23F0
0001DBAA 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001DBAE 23F0                       	dc.w $23F0
0001DBB0 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001DBB4 23F0                       	dc.w $23F0
0001DBB6 0000 0000                  	dc.l Map_SS_R+$2000000
0001DBBA 04F0                       	dc.w $4F0
0001DBBC 0000 0000                  	dc.l Map_SS_Glass
0001DBC0 05F0                       	dc.w $5F0
0001DBC2 0000 0000                  	dc.l Map_SS_Glass
0001DBC6 65F0                       	dc.w $65F0
0001DBC8 0000 0000                  	dc.l Map_SS_Glass
0001DBCC 25F0                       	dc.w $25F0
0001DBCE 0000 0000                  	dc.l Map_SS_Glass
0001DBD2 45F0                       	dc.w $45F0
0001DBD2 45F0                       	dc.w $45F0
0001DBD4                            
0001DBD4                            ; ---------------------------------------------------------------------------
0001DBD4                            ; Sprite mappings - special stage "R" block
0001DBD4                            ; ---------------------------------------------------------------------------
0001DBD4                            Map_SS_R:
0001DBD4                            	include "_maps\SSRblock.asm"
0001DBD4                            ; ---------------------------------------------------------------------------
0001DBD4                            ; Sprite mappings - special stage "R" block
0001DBD4                            ; ---------------------------------------------------------------------------
0001DBD4 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001DBD8 0000                       		dc.w byte_1B91E-Map_SS_R
0001DBDA 01                         byte_1B912:	dc.b 1
0001DBDB F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001DBE0 01                         byte_1B918:	dc.b 1
0001DBE1 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001DBE6 00                         byte_1B91E:	dc.b 0
0001DBE8 00                         		even
0001DBE8 00                         		even
0001DBE8                            
0001DBE8                            ; ---------------------------------------------------------------------------
0001DBE8                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001DBE8                            ; ---------------------------------------------------------------------------
0001DBE8                            Map_SS_Glass:
0001DBE8                            	include "_maps\SSglassblock.asm"
0001DBE8                            ; ---------------------------------------------------------------------------
0001DBE8                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001DBE8                            ; ---------------------------------------------------------------------------
0001DBE8 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001DBEC 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001DBF0 01                         byte_1B928:	dc.b 1
0001DBF1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001DBF6 01                         byte_1B92E:	dc.b 1
0001DBF7 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001DBFC 01                         byte_1B934:	dc.b 1
0001DBFD F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001DC02 01                         byte_1B93A:	dc.b 1
0001DC03 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001DC08                            		even
0001DC08                            		even
0001DC08                            
0001DC08                            ; ---------------------------------------------------------------------------
0001DC08                            ; Sprite mappings - special stage "UP" block
0001DC08                            ; ---------------------------------------------------------------------------
0001DC08                            Map_SS_Up:
0001DC08                            	include "_maps\SSUPblock.asm"
0001DC08                            ; ---------------------------------------------------------------------------
0001DC08                            ; Sprite mappings - special stage "UP" block
0001DC08                            ; ---------------------------------------------------------------------------
0001DC08 0000                       		dc.w byte_1B944-Map_SS_Up
0001DC0A 0000                       		dc.w byte_1B94A-Map_SS_Up
0001DC0C 01                         byte_1B944:	dc.b 1
0001DC0D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001DC12 01                         byte_1B94A:	dc.b 1
0001DC13 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001DC18                            		even
0001DC18                            		even
0001DC18                            
0001DC18                            ; ---------------------------------------------------------------------------
0001DC18                            ; Sprite mappings - special stage "DOWN" block
0001DC18                            ; ---------------------------------------------------------------------------
0001DC18                            Map_SS_Down:
0001DC18                            	include "_maps\SSDOWNblock.asm"
0001DC18                            ; ---------------------------------------------------------------------------
0001DC18                            ; Sprite mappings - special stage "DOWN" block
0001DC18                            ; ---------------------------------------------------------------------------
0001DC18 0000                       		dc.w byte_1B954-Map_SS_Down
0001DC1A 0000                       		dc.w byte_1B95A-Map_SS_Down
0001DC1C 01                         byte_1B954:	dc.b 1
0001DC1D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001DC22 01                         byte_1B95A:	dc.b 1
0001DC23 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001DC28                            		even
0001DC28                            		even
0001DC28                            
0001DC28                            ; ---------------------------------------------------------------------------
0001DC28                            ; Sprite mappings - special stage chaos	emeralds
0001DC28                            ; ---------------------------------------------------------------------------
0001DC28 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001DC2A 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001DC2C 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001DC2E 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001DC30 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001DC32 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001DC34 01                         byte_1B96C:	dc.b 1
0001DC35 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001DC3A 01                         byte_1B972:	dc.b 1
0001DC3B F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001DC40 01                         byte_1B978:	dc.b 1
0001DC41 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001DC46 01                         byte_1B97E:	dc.b 1
0001DC47 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001DC4C                            		even
0001DC4C                            ; ===========================================================================
0001DC4C                            ; ---------------------------------------------------------------------------
0001DC4C                            ; Object 09 - Sonic (special stage)
0001DC4C                            ; ---------------------------------------------------------------------------
0001DC4C                            
0001DC4C                            Obj09:					; XREF: Obj_Index
0001DC4C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001DC50 6700                       		beq.s	Obj09_Normal	; if not, branch
0001DC52 6100 0000                  		bsr.w	SS_FixCamera
0001DC56 6000 0000                  		bra.w	DebugMode
0001DC5A                            ; ===========================================================================
0001DC5A                            
0001DC5A                            Obj09_Normal:
0001DC5A 7000                       		moveq	#0,d0
0001DC5C 1028 0024                  		move.b	$24(a0),d0
0001DC60 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001DC64 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001DC68                            ; ===========================================================================
0001DC68 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001DC6A 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001DC6C 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001DC6E 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001DC70                            ; ===========================================================================
0001DC70                            
0001DC70                            Obj09_Main:				; XREF: Obj09_Index
0001DC70 5428 0024                  		addq.b	#2,$24(a0)
0001DC74 117C 000E 0016             		move.b	#$E,$16(a0)
0001DC7A 117C 0007 0017             		move.b	#7,$17(a0)
0001DC80 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001DC88 317C 0780 0002             		move.w	#$780,2(a0)
0001DC8E 117C 0004 0001             		move.b	#4,1(a0)
0001DC94 117C 0000 0018             		move.b	#0,$18(a0)
0001DC9A 117C 0002 001C             		move.b	#2,$1C(a0)
0001DCA0 08E8 0002 0022             		bset	#2,$22(a0)
0001DCA6 08E8 0001 0022             		bset	#1,$22(a0)
0001DCAC                            
0001DCAC                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001DCAC 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001DCB0 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001DCB2 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DCB8 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001DCBA 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001DCC0                            
0001DCC0                            Obj09_NoDebug:
0001DCC0 117C 0000 0030             		move.b	#0,$30(a0)
0001DCC6 7000                       		moveq	#0,d0
0001DCC8 1028 0022                  		move.b	$22(a0),d0
0001DCCC 0240 0002                  		andi.w	#2,d0
0001DCD0 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001DCD4 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001DCD8 4EB9 0001 56B4             		jsr	LoadSonicDynPLC
0001DCDE 4EF9 0000 E94A             		jmp	DisplaySprite
0001DCE4                            ; ===========================================================================
0001DCE4 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001DCE6 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001DCE8                            ; ===========================================================================
0001DCE8                            
0001DCE8                            Obj09_OnWall:				; XREF: Obj09_Modes
0001DCE8 6100 0000                  		bsr.w	Obj09_Jump
0001DCEC 6100 0000                  		bsr.w	Obj09_Move
0001DCF0 6100 0000                  		bsr.w	Obj09_Fall
0001DCF4 6000                       		bra.s	Obj09_Display
0001DCF6                            ; ===========================================================================
0001DCF6                            
0001DCF6                            Obj09_InAir:				; XREF: Obj09_Modes
0001DCF6 6100 0000                  		bsr.w	nullsub_2
0001DCFA 6100 0000                  		bsr.w	Obj09_Move
0001DCFE 6100 0000                  		bsr.w	Obj09_Fall
0001DD02                            
0001DD02                            Obj09_Display:				; XREF: Obj09_OnWall
0001DD02 6100 0000                  		bsr.w	Obj09_ChkItems
0001DD06 6100 0000                  		bsr.w	Obj09_ChkItems2
0001DD0A 4EB9 0000 E930             		jsr	SpeedToPos
0001DD10 6100 0000                  		bsr.w	SS_FixCamera
0001DD14 3038 F780                  		move.w	($FFFFF780).w,d0
0001DD18 D078 F782                  		add.w	($FFFFF782).w,d0
0001DD1C 31C0 F780                  		move.w	d0,($FFFFF780).w
0001DD20 4EB9 0001 543A             		jsr	Sonic_Animate
0001DD26 4E75                       		rts	
0001DD28                            
0001DD28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD28                            
0001DD28                            
0001DD28                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001DD28 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001DD2E 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001DD30 6100 0000                  		bsr.w	Obj09_MoveLeft
0001DD34                            
0001DD34                            Obj09_ChkRight:
0001DD34 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001DD3A 6700                       		beq.s	loc_1BA78	; if not, branch
0001DD3C 6100 0000                  		bsr.w	Obj09_MoveRight
0001DD40                            
0001DD40                            loc_1BA78:
0001DD40 1038 F602                  		move.b	($FFFFF602).w,d0
0001DD44 0200 000C                  		andi.b	#$C,d0
0001DD48 6600                       		bne.s	loc_1BAA8
0001DD4A 3028 0020                  		move.w	$20(a0),d0
0001DD4E 6700                       		beq.s	loc_1BAA8
0001DD50 6B00                       		bmi.s	loc_1BA9A
0001DD52 0440 000C                  		subi.w	#$C,d0
0001DD56 6400                       		bcc.s	loc_1BA94
0001DD58 303C 0000                  		move.w	#0,d0
0001DD5C                            
0001DD5C                            loc_1BA94:
0001DD5C 3140 0020                  		move.w	d0,$20(a0)
0001DD60 6000                       		bra.s	loc_1BAA8
0001DD62                            ; ===========================================================================
0001DD62                            
0001DD62                            loc_1BA9A:
0001DD62 0640 000C                  		addi.w	#$C,d0
0001DD66 6400                       		bcc.s	loc_1BAA4
0001DD68 303C 0000                  		move.w	#0,d0
0001DD6C                            
0001DD6C                            loc_1BAA4:
0001DD6C 3140 0020                  		move.w	d0,$20(a0)
0001DD70                            
0001DD70                            loc_1BAA8:
0001DD70 1038 F780                  		move.b	($FFFFF780).w,d0
0001DD74 0600 0020                  		addi.b	#$20,d0
0001DD78 0200 00C0                  		andi.b	#$C0,d0
0001DD7C 4400                       		neg.b	d0
0001DD7E 4EB9 0000 29CC             		jsr	(CalcSine).l
0001DD84 C3E8 0020                  		muls.w	$20(a0),d1
0001DD88 D3A8 0008                  		add.l	d1,8(a0)
0001DD8C C1E8 0020                  		muls.w	$20(a0),d0
0001DD90 D1A8 000C                  		add.l	d0,$C(a0)
0001DD94 48E7 C000                  		movem.l	d0-d1,-(sp)
0001DD98 2428 000C                  		move.l	$C(a0),d2
0001DD9C 2628 0008                  		move.l	8(a0),d3
0001DDA0 6100 0000                  		bsr.w	sub_1BCE8
0001DDA4 6700                       		beq.s	loc_1BAF2
0001DDA6 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001DDAA 93A8 0008                  		sub.l	d1,8(a0)
0001DDAE 91A8 000C                  		sub.l	d0,$C(a0)
0001DDB2 317C 0000 0020             		move.w	#0,$20(a0)
0001DDB8 4E75                       		rts	
0001DDBA                            ; ===========================================================================
0001DDBA                            
0001DDBA                            loc_1BAF2:
0001DDBA 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001DDBE 4E75                       		rts	
0001DDC0                            ; End of function Obj09_Move
0001DDC0                            
0001DDC0                            
0001DDC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DDC0                            
0001DDC0                            
0001DDC0                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001DDC0 08E8 0000 0022             		bset	#0,$22(a0)
0001DDC6 3028 0020                  		move.w	$20(a0),d0
0001DDCA 6700                       		beq.s	loc_1BB06
0001DDCC 6A00                       		bpl.s	loc_1BB1A
0001DDCE                            
0001DDCE                            loc_1BB06:
0001DDCE 0440 000C                  		subi.w	#$C,d0
0001DDD2 0C40 F800                  		cmpi.w	#-$800,d0
0001DDD6 6E00                       		bgt.s	loc_1BB14
0001DDD8 303C F800                  		move.w	#-$800,d0
0001DDDC                            
0001DDDC                            loc_1BB14:
0001DDDC 3140 0020                  		move.w	d0,$20(a0)
0001DDE0 4E75                       		rts	
0001DDE2                            ; ===========================================================================
0001DDE2                            
0001DDE2                            loc_1BB1A:
0001DDE2 0440 0040                  		subi.w	#$40,d0
0001DDE6 6400                       		bcc.s	loc_1BB22
0001DDE8 4E71                       		nop	
0001DDEA                            
0001DDEA                            loc_1BB22:
0001DDEA 3140 0020                  		move.w	d0,$20(a0)
0001DDEE 4E75                       		rts	
0001DDF0                            ; End of function Obj09_MoveLeft
0001DDF0                            
0001DDF0                            
0001DDF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DDF0                            
0001DDF0                            
0001DDF0                            Obj09_MoveRight:			; XREF: Obj09_Move
0001DDF0 08A8 0000 0022             		bclr	#0,$22(a0)
0001DDF6 3028 0020                  		move.w	$20(a0),d0
0001DDFA 6B00                       		bmi.s	loc_1BB48
0001DDFC 0640 000C                  		addi.w	#$C,d0
0001DE00 0C40 0800                  		cmpi.w	#$800,d0
0001DE04 6D00                       		blt.s	loc_1BB42
0001DE06 303C 0800                  		move.w	#$800,d0
0001DE0A                            
0001DE0A                            loc_1BB42:
0001DE0A 3140 0020                  		move.w	d0,$20(a0)
0001DE0E 6000                       		bra.s	locret_1BB54
0001DE10                            ; ===========================================================================
0001DE10                            
0001DE10                            loc_1BB48:
0001DE10 0640 0040                  		addi.w	#$40,d0
0001DE14 6400                       		bcc.s	loc_1BB50
0001DE16 4E71                       		nop	
0001DE18                            
0001DE18                            loc_1BB50:
0001DE18 3140 0020                  		move.w	d0,$20(a0)
0001DE1C                            
0001DE1C                            locret_1BB54:
0001DE1C 4E75                       		rts	
0001DE1E                            ; End of function Obj09_MoveRight
0001DE1E                            
0001DE1E                            
0001DE1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE1E                            
0001DE1E                            
0001DE1E                            Obj09_Jump:				; XREF: Obj09_OnWall
0001DE1E 1038 F603                  		move.b	($FFFFF603).w,d0
0001DE22 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001DE26 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001DE28 1038 F780                  		move.b	($FFFFF780).w,d0
0001DE2C 0200 00FC                  		andi.b	#$FC,d0
0001DE30 4400                       		neg.b	d0
0001DE32 0400 0040                  		subi.b	#$40,d0
0001DE36 4EB9 0000 29CC             		jsr	(CalcSine).l
0001DE3C C3FC 0680                  		muls.w	#$680,d1
0001DE40 E081                       		asr.l	#8,d1
0001DE42 3141 0010                  		move.w	d1,$10(a0)
0001DE46 C1FC 0680                  		muls.w	#$680,d0
0001DE4A E080                       		asr.l	#8,d0
0001DE4C 3140 0012                  		move.w	d0,$12(a0)
0001DE50 08E8 0001 0022             		bset	#1,$22(a0)
0001DE56 303C 00A0                  		move.w	#$A0,d0
0001DE5A 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play jumping sound
0001DE60                            
0001DE60                            Obj09_NoJump:
0001DE60 4E75                       		rts	
0001DE62                            ; End of function Obj09_Jump
0001DE62                            
0001DE62                            
0001DE62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE62                            
0001DE62                            
0001DE62                            nullsub_2:				; XREF: Obj09_InAir
0001DE62 4E75                       		rts	
0001DE64                            ; End of function nullsub_2
0001DE64                            
0001DE64                            ; ===========================================================================
0001DE64                            ; ---------------------------------------------------------------------------
0001DE64                            ; unused subroutine to limit Sonic's upward vertical speed
0001DE64                            ; ---------------------------------------------------------------------------
0001DE64 323C FC00                  		move.w	#-$400,d1
0001DE68 B268 0012                  		cmp.w	$12(a0),d1
0001DE6C 6F00                       		ble.s	locret_1BBB4
0001DE6E 1038 F602                  		move.b	($FFFFF602).w,d0
0001DE72 0200 0070                  		andi.b	#$70,d0
0001DE76 6600                       		bne.s	locret_1BBB4
0001DE78 3141 0012                  		move.w	d1,$12(a0)
0001DE7C                            
0001DE7C                            locret_1BBB4:
0001DE7C 4E75                       		rts	
0001DE7E                            ; ---------------------------------------------------------------------------
0001DE7E                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001DE7E                            ; ---------------------------------------------------------------------------
0001DE7E                            
0001DE7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE7E                            
0001DE7E                            
0001DE7E                            SS_FixCamera:				; XREF: Obj09
0001DE7E 3428 000C                  		move.w	$C(a0),d2
0001DE82 3628 0008                  		move.w	8(a0),d3
0001DE86 3038 F700                  		move.w	($FFFFF700).w,d0
0001DE8A 0443 00A0                  		subi.w	#$A0,d3
0001DE8E 6500                       		bcs.s	loc_1BBCE
0001DE90 9043                       		sub.w	d3,d0
0001DE92 9178 F700                  		sub.w	d0,($FFFFF700).w
0001DE96                            
0001DE96                            loc_1BBCE:
0001DE96 3038 F704                  		move.w	($FFFFF704).w,d0
0001DE9A 0442 0070                  		subi.w	#$70,d2
0001DE9E 6500                       		bcs.s	locret_1BBDE
0001DEA0 9042                       		sub.w	d2,d0
0001DEA2 9178 F704                  		sub.w	d0,($FFFFF704).w
0001DEA6                            
0001DEA6                            locret_1BBDE:
0001DEA6 4E75                       		rts	
0001DEA8                            ; End of function SS_FixCamera
0001DEA8                            
0001DEA8                            ; ===========================================================================
0001DEA8                            
0001DEA8                            Obj09_ExitStage:			; XREF: Obj09_Index
0001DEA8 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001DEAE 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001DEB4 6600                       		bne.s	loc_1BBF4
0001DEB6 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001DEBC                            
0001DEBC                            loc_1BBF4:
0001DEBC 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001DEC2 6D00                       		blt.s	loc_1BC12
0001DEC4 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001DECA 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001DED0 5428 0024                  		addq.b	#2,$24(a0)
0001DED4 317C 003C 0038             		move.w	#$3C,$38(a0)
0001DEDA                            
0001DEDA                            loc_1BC12:
0001DEDA 3038 F780                  		move.w	($FFFFF780).w,d0
0001DEDE D078 F782                  		add.w	($FFFFF782).w,d0
0001DEE2 31C0 F780                  		move.w	d0,($FFFFF780).w
0001DEE6 4EB9 0001 543A             		jsr	Sonic_Animate
0001DEEC 4EB9 0001 56B4             		jsr	LoadSonicDynPLC
0001DEF2 6100 FF8A                  		bsr.w	SS_FixCamera
0001DEF6 4EF9 0000 E94A             		jmp	DisplaySprite
0001DEFC                            ; ===========================================================================
0001DEFC                            
0001DEFC                            Obj09_Exit2:				; XREF: Obj09_Index
0001DEFC 5368 0038                  		subq.w	#1,$38(a0)
0001DF00 6600                       		bne.s	loc_1BC40
0001DF02 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001DF08                            
0001DF08                            loc_1BC40:
0001DF08 4EB9 0001 543A             		jsr	Sonic_Animate
0001DF0E 4EB9 0001 56B4             		jsr	LoadSonicDynPLC
0001DF14 6100 FF68                  		bsr.w	SS_FixCamera
0001DF18 4EF9 0000 E94A             		jmp	DisplaySprite
0001DF1E                            
0001DF1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DF1E                            
0001DF1E                            
0001DF1E                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001DF1E 2428 000C                  		move.l	$C(a0),d2
0001DF22 2628 0008                  		move.l	8(a0),d3
0001DF26 1038 F780                  		move.b	($FFFFF780).w,d0
0001DF2A 0200 00FC                  		andi.b	#$FC,d0
0001DF2E 4EB9 0000 29CC             		jsr	(CalcSine).l
0001DF34 3828 0010                  		move.w	$10(a0),d4
0001DF38 48C4                       		ext.l	d4
0001DF3A E184                       		asl.l	#8,d4
0001DF3C C1FC 002A                  		muls.w	#$2A,d0
0001DF40 D084                       		add.l	d4,d0
0001DF42 3828 0012                  		move.w	$12(a0),d4
0001DF46 48C4                       		ext.l	d4
0001DF48 E184                       		asl.l	#8,d4
0001DF4A C3FC 002A                  		muls.w	#$2A,d1
0001DF4E D284                       		add.l	d4,d1
0001DF50 D680                       		add.l	d0,d3
0001DF52 6100 0000                  		bsr.w	sub_1BCE8
0001DF56 6700                       		beq.s	loc_1BCB0
0001DF58 9680                       		sub.l	d0,d3
0001DF5A 7000                       		moveq	#0,d0
0001DF5C 3140 0010                  		move.w	d0,$10(a0)
0001DF60 08A8 0001 0022             		bclr	#1,$22(a0)
0001DF66 D481                       		add.l	d1,d2
0001DF68 6100 0000                  		bsr.w	sub_1BCE8
0001DF6C 6700                       		beq.s	loc_1BCC6
0001DF6E 9481                       		sub.l	d1,d2
0001DF70 7200                       		moveq	#0,d1
0001DF72 3141 0012                  		move.w	d1,$12(a0)
0001DF76 4E75                       		rts	
0001DF78                            ; ===========================================================================
0001DF78                            
0001DF78                            loc_1BCB0:
0001DF78 D481                       		add.l	d1,d2
0001DF7A 6100 0000                  		bsr.w	sub_1BCE8
0001DF7E 6700                       		beq.s	loc_1BCD4
0001DF80 9481                       		sub.l	d1,d2
0001DF82 7200                       		moveq	#0,d1
0001DF84 3141 0012                  		move.w	d1,$12(a0)
0001DF88 08A8 0001 0022             		bclr	#1,$22(a0)
0001DF8E                            
0001DF8E                            loc_1BCC6:
0001DF8E E080                       		asr.l	#8,d0
0001DF90 E081                       		asr.l	#8,d1
0001DF92 3140 0010                  		move.w	d0,$10(a0)
0001DF96 3141 0012                  		move.w	d1,$12(a0)
0001DF9A 4E75                       		rts	
0001DF9C                            ; ===========================================================================
0001DF9C                            
0001DF9C                            loc_1BCD4:
0001DF9C E080                       		asr.l	#8,d0
0001DF9E E081                       		asr.l	#8,d1
0001DFA0 3140 0010                  		move.w	d0,$10(a0)
0001DFA4 3141 0012                  		move.w	d1,$12(a0)
0001DFA8 08E8 0001 0022             		bset	#1,$22(a0)
0001DFAE 4E75                       		rts	
0001DFB0                            ; End of function Obj09_Fall
0001DFB0                            
0001DFB0                            
0001DFB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DFB0                            
0001DFB0                            
0001DFB0                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001DFB0 43F9 00FF 0000             		lea	($FF0000).l,a1
0001DFB6 7800                       		moveq	#0,d4
0001DFB8 4842                       		swap	d2
0001DFBA 3802                       		move.w	d2,d4
0001DFBC 4842                       		swap	d2
0001DFBE 0644 0044                  		addi.w	#$44,d4
0001DFC2 88FC 0018                  		divu.w	#$18,d4
0001DFC6 C8FC 0080                  		mulu.w	#$80,d4
0001DFCA D3C4                       		adda.l	d4,a1
0001DFCC 7800                       		moveq	#0,d4
0001DFCE 4843                       		swap	d3
0001DFD0 3803                       		move.w	d3,d4
0001DFD2 4843                       		swap	d3
0001DFD4 0644 0014                  		addi.w	#$14,d4
0001DFD8 88FC 0018                  		divu.w	#$18,d4
0001DFDC D2C4                       		adda.w	d4,a1
0001DFDE 7A00                       		moveq	#0,d5
0001DFE0 1819                       		move.b	(a1)+,d4
0001DFE2 6100                       		bsr.s	sub_1BD30
0001DFE4 1819                       		move.b	(a1)+,d4
0001DFE6 6100                       		bsr.s	sub_1BD30
0001DFE8 D2FC 007E                  		adda.w	#$7E,a1
0001DFEC 1819                       		move.b	(a1)+,d4
0001DFEE 6100                       		bsr.s	sub_1BD30
0001DFF0 1819                       		move.b	(a1)+,d4
0001DFF2 6100                       		bsr.s	sub_1BD30
0001DFF4 4A05                       		tst.b	d5
0001DFF6 4E75                       		rts	
0001DFF8                            ; End of function sub_1BCE8
0001DFF8                            
0001DFF8                            
0001DFF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DFF8                            
0001DFF8                            
0001DFF8                            sub_1BD30:				; XREF: sub_1BCE8
0001DFF8 6700                       		beq.s	locret_1BD44
0001DFFA 0C04 0028                  		cmpi.b	#$28,d4
0001DFFE 6700                       		beq.s	locret_1BD44
0001E000 0C04 003A                  		cmpi.b	#$3A,d4
0001E004 6500                       		bcs.s	loc_1BD46
0001E006 0C04 004B                  		cmpi.b	#$4B,d4
0001E00A 6400                       		bcc.s	loc_1BD46
0001E00C                            
0001E00C                            locret_1BD44:
0001E00C 4E75                       		rts	
0001E00E                            ; ===========================================================================
0001E00E                            
0001E00E                            loc_1BD46:
0001E00E 1144 0030                  		move.b	d4,$30(a0)
0001E012 2149 0032                  		move.l	a1,$32(a0)
0001E016 7AFF                       		moveq	#-1,d5
0001E018 4E75                       		rts	
0001E01A                            ; End of function sub_1BD30
0001E01A                            
0001E01A                            
0001E01A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E01A                            
0001E01A                            
0001E01A                            Obj09_ChkItems:				; XREF: Obj09_Display
0001E01A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001E020 7800                       		moveq	#0,d4
0001E022 3828 000C                  		move.w	$C(a0),d4
0001E026 0644 0050                  		addi.w	#$50,d4
0001E02A 88FC 0018                  		divu.w	#$18,d4
0001E02E C8FC 0080                  		mulu.w	#$80,d4
0001E032 D3C4                       		adda.l	d4,a1
0001E034 7800                       		moveq	#0,d4
0001E036 3828 0008                  		move.w	8(a0),d4
0001E03A 0644 0020                  		addi.w	#$20,d4
0001E03E 88FC 0018                  		divu.w	#$18,d4
0001E042 D2C4                       		adda.w	d4,a1
0001E044 1811                       		move.b	(a1),d4
0001E046 6600                       		bne.s	Obj09_ChkCont
0001E048 4A28 003A                  		tst.b	$3A(a0)
0001E04C 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001E050 7800                       		moveq	#0,d4
0001E052 4E75                       		rts	
0001E054                            ; ===========================================================================
0001E054                            
0001E054                            Obj09_ChkCont:
0001E054 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001E058 6600                       		bne.s	Obj09_Chk1Up
0001E05A 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001E05E 6600                       		bne.s	Obj09_GetCont
0001E060 14BC 0001                  		move.b	#1,(a2)
0001E064 2549 0004                  		move.l	a1,4(a2)
0001E068                            
0001E068                            Obj09_GetCont:
0001E068 4EB9 0000 AEFC             		jsr	CollectRing
0001E06E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001E074 6500                       		bcs.s	Obj09_NoCont
0001E076 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001E07C 6600                       		bne.s	Obj09_NoCont
0001E07E 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001E084 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001E08A 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001E08E 303C 00BF                  		move.w	#$BF,d0
0001E092 4EB9 0000 11F0             		jsr	(PlaySound).l	; play extra continue sound
0001E098                            
0001E098                            Obj09_NoCont:
0001E098 7800                       		moveq	#0,d4
0001E09A 4E75                       		rts	
0001E09C                            ; ===========================================================================
0001E09C                            
0001E09C                            Obj09_Chk1Up:
0001E09C 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001E0A0 6600                       		bne.s	Obj09_ChkEmer
0001E0A2 6100 F6DE                  		bsr.w	SS_RemoveCollectedItem
0001E0A6 6600                       		bne.s	Obj09_Get1Up
0001E0A8 14BC 0003                  		move.b	#3,(a2)
0001E0AC 2549 0004                  		move.l	a1,4(a2)
0001E0B0                            
0001E0B0                            Obj09_Get1Up:
0001E0B0 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001E0B4 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001E0B8 303C 0088                  		move.w	#$88,d0
0001E0BC 4EB9 0000 11F0             		jsr	(PlaySound).l	; play extra life music
0001E0C2 7800                       		moveq	#0,d4
0001E0C4 4E75                       		rts	
0001E0C6                            ; ===========================================================================
0001E0C6                            
0001E0C6                            Obj09_ChkEmer:
0001E0C6 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001E0CA 6500                       		bcs.s	Obj09_ChkGhost
0001E0CC 0C04 0040                  		cmpi.b	#$40,d4
0001E0D0 6200                       		bhi.s	Obj09_ChkGhost
0001E0D2 6100 F6AE                  		bsr.w	SS_RemoveCollectedItem
0001E0D6 6600                       		bne.s	Obj09_GetEmer
0001E0D8 14BC 0005                  		move.b	#5,(a2)
0001E0DC 2549 0004                  		move.l	a1,4(a2)
0001E0E0                            
0001E0E0                            Obj09_GetEmer:
0001E0E0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001E0E6 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001E0E8 0404 003B                  		subi.b	#$3B,d4
0001E0EC 7000                       		moveq	#0,d0
0001E0EE 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001E0F2 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001E0F6 1584 0000                  		move.b	d4,(a2,d0.w)
0001E0FA 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001E0FE 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001E104 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001E10A                            
0001E10A                            Obj09_NoEmer:
0001E10A 303C 0093                  		move.w	#$93,d0
0001E10E 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play emerald music
0001E114 7800                       		moveq	#0,d4
0001E116 4E75                       		rts	
0001E118                            ; ===========================================================================
0001E118                            
0001E118                            Obj09_ChkGhost:
0001E118 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001E11C 6600                       		bne.s	Obj09_ChkGhostTag
0001E11E 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001E124                            
0001E124                            Obj09_ChkGhostTag:
0001E124 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001E128 6600                       		bne.s	Obj09_NoGhost
0001E12A 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001E130 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001E132 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001E138                            
0001E138                            Obj09_NoGhost:
0001E138 78FF                       		moveq	#-1,d4
0001E13A 4E75                       		rts	
0001E13C                            ; ===========================================================================
0001E13C                            
0001E13C                            Obj09_MakeGhostSolid:
0001E13C 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001E142 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001E144 43F9 00FF 1020             		lea	($FF1020).l,a1
0001E14A 723F                       		moveq	#$3F,d1
0001E14C                            
0001E14C                            Obj09_GhostLoop2:
0001E14C 743F                       		moveq	#$3F,d2
0001E14E                            
0001E14E                            Obj09_GhostLoop:
0001E14E 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001E152 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001E154 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001E158                            
0001E158                            Obj09_NoReplace:
0001E158 5249                       		addq.w	#1,a1
0001E15A 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001E15E 43E9 0040                  		lea	$40(a1),a1
0001E162 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001E166                            
0001E166                            Obj09_GhostNotSolid:
0001E166 4228 003A                  		clr.b	$3A(a0)
0001E16A 7800                       		moveq	#0,d4
0001E16C 4E75                       		rts	
0001E16E                            ; End of function Obj09_ChkItems
0001E16E                            
0001E16E                            
0001E16E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E16E                            
0001E16E                            
0001E16E                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001E16E 1028 0030                  		move.b	$30(a0),d0
0001E172 6600                       		bne.s	Obj09_ChkBumper
0001E174 5328 0036                  		subq.b	#1,$36(a0)
0001E178 6A00                       		bpl.s	loc_1BEA0
0001E17A 117C 0000 0036             		move.b	#0,$36(a0)
0001E180                            
0001E180                            loc_1BEA0:
0001E180 5328 0037                  		subq.b	#1,$37(a0)
0001E184 6A00                       		bpl.s	locret_1BEAC
0001E186 117C 0000 0037             		move.b	#0,$37(a0)
0001E18C                            
0001E18C                            locret_1BEAC:
0001E18C 4E75                       		rts	
0001E18E                            ; ===========================================================================
0001E18E                            
0001E18E                            Obj09_ChkBumper:
0001E18E 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001E192 6600                       		bne.s	Obj09_GOAL	
0001E194 11FC 0008 F5CE             		move.b	#face_confused,(SonimeSST+sonime_face).w
0001E19A 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0001E1A0 2228 0032                  		move.l	$32(a0),d1
0001E1A4 0481 00FF 0001             		subi.l	#$FF0001,d1
0001E1AA 3401                       		move.w	d1,d2
0001E1AC 0241 007F                  		andi.w	#$7F,d1
0001E1B0 C2FC 0018                  		mulu.w	#$18,d1
0001E1B4 0441 0014                  		subi.w	#$14,d1
0001E1B8 EE4A                       		lsr.w	#7,d2
0001E1BA 0242 007F                  		andi.w	#$7F,d2
0001E1BE C4FC 0018                  		mulu.w	#$18,d2
0001E1C2 0442 0044                  		subi.w	#$44,d2
0001E1C6 9268 0008                  		sub.w	8(a0),d1
0001E1CA 9468 000C                  		sub.w	$C(a0),d2
0001E1CE 4EB9 0000 2C94             		jsr	(CalcAngle).l
0001E1D4 4EB9 0000 29CC             		jsr	(CalcSine).l
0001E1DA C3FC F900                  		muls.w	#-$700,d1
0001E1DE E081                       		asr.l	#8,d1
0001E1E0 3141 0010                  		move.w	d1,$10(a0)
0001E1E4 C1FC F900                  		muls.w	#-$700,d0
0001E1E8 E080                       		asr.l	#8,d0
0001E1EA 3140 0012                  		move.w	d0,$12(a0)
0001E1EE 08E8 0001 0022             		bset	#1,$22(a0)
0001E1F4 6100 F58C                  		bsr.w	SS_RemoveCollectedItem
0001E1F8 6600                       		bne.s	Obj09_BumpSnd
0001E1FA 14BC 0002                  		move.b	#2,(a2)
0001E1FE 2028 0032                  		move.l	$32(a0),d0
0001E202 5380                       		subq.l	#1,d0
0001E204 2540 0004                  		move.l	d0,4(a2)
0001E208                            
0001E208                            Obj09_BumpSnd:
0001E208 303C 00B4                  		move.w	#$B4,d0
0001E20C 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play bumper sound
0001E212                            ; ===========================================================================
0001E212                            
0001E212                            Obj09_GOAL:
0001E212 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001E216 6600                       		bne.s	Obj09_UPblock
0001E218 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001E21C 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
0001E222 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001E228 303C 00A8                  		move.w	#$A8,d0		; change item
0001E22C 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001E232 4E75                       		rts	
0001E234                            ; ===========================================================================
0001E234                            
0001E234                            Obj09_UPblock:
0001E234 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001E238 6600                       		bne.s	Obj09_DOWNblock
0001E23A 4A28 0036                  		tst.b	$36(a0)
0001E23E 6600 0000                  		bne.w	Obj09_NoGlass
0001E242 117C 001E 0036             		move.b	#$1E,$36(a0)
0001E248 0838 0006 F783             		btst	#6,($FFFFF783).w
0001E24E 6700                       		beq.s	Obj09_UPsnd
0001E250 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001E254 2268 0032                  		movea.l	$32(a0),a1
0001E258 5389                       		subq.l	#1,a1
0001E25A 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001E25E                            
0001E25E                            Obj09_UPsnd:
0001E25E 303C 00A9                  		move.w	#$A9,d0
0001E262 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play up/down sound
0001E268                            ; ===========================================================================
0001E268                            
0001E268                            Obj09_DOWNblock:
0001E268 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001E26C 6600                       		bne.s	Obj09_Rblock
0001E26E 4A28 0036                  		tst.b	$36(a0)
0001E272 6600 0000                  		bne.w	Obj09_NoGlass
0001E276 117C 001E 0036             		move.b	#$1E,$36(a0)
0001E27C 0838 0006 F783             		btst	#6,($FFFFF783).w
0001E282 6600                       		bne.s	Obj09_DOWNsnd
0001E284 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001E288 2268 0032                  		movea.l	$32(a0),a1
0001E28C 5389                       		subq.l	#1,a1
0001E28E 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001E292                            
0001E292                            Obj09_DOWNsnd:
0001E292 303C 00A9                  		move.w	#$A9,d0
0001E296 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play up/down sound
0001E29C                            ; ===========================================================================
0001E29C                            
0001E29C                            Obj09_Rblock:
0001E29C 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001E2A0 6600                       		bne.s	Obj09_ChkGlass
0001E2A2 4A28 0037                  		tst.b	$37(a0)
0001E2A6 6600 0000                  		bne.w	Obj09_NoGlass
0001E2AA 117C 001E 0037             		move.b	#$1E,$37(a0)
0001E2B0 6100 F4D0                  		bsr.w	SS_RemoveCollectedItem
0001E2B4 6600                       		bne.s	Obj09_RevStage
0001E2B6 14BC 0004                  		move.b	#4,(a2)
0001E2BA 2028 0032                  		move.l	$32(a0),d0
0001E2BE 5380                       		subq.l	#1,d0
0001E2C0 2540 0004                  		move.l	d0,4(a2)
0001E2C4                            
0001E2C4                            Obj09_RevStage:
0001E2C4 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001E2C8 303C 00A9                  		move.w	#$A9,d0
0001E2CC 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play sound
0001E2D2                            ; ===========================================================================
0001E2D2                            
0001E2D2                            Obj09_ChkGlass:
0001E2D2 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001E2D6 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001E2D8 0C00 002E                  		cmpi.b	#$2E,d0
0001E2DC 6700                       		beq.s	Obj09_Glass
0001E2DE 0C00 002F                  		cmpi.b	#$2F,d0
0001E2E2 6700                       		beq.s	Obj09_Glass
0001E2E4 0C00 0030                  		cmpi.b	#$30,d0
0001E2E8 6600 0000                  		bne.w	Obj09_NoGlass	; if not, branch
0001E2EC                            
0001E2EC                            Obj09_Glass:
0001E2EC 0C38 0007 F5CE             		cmpi.b	#face_happy,(SonimeSST+sonime_face).w
0001E2F2 6700                       		beq.s	@happy
0001E2F4 11FC 000B F5CE             		move.b	#face_impatient,(SonimeSST+sonime_face).w
0001E2FA 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0001E300 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeImpatient		
0001E366                            
0001E366                            	@happy:
0001E366 6100 F41A                  		bsr.w	SS_RemoveCollectedItem
0001E36A 6600                       		bne.s	Obj09_GlassSnd
0001E36C 14BC 0006                  		move.b	#6,(a2)
0001E370 2268 0032                  		movea.l	$32(a0),a1
0001E374 5389                       		subq.l	#1,a1
0001E376 2549 0004                  		move.l	a1,4(a2)
0001E37A 1011                       		move.b	(a1),d0
0001E37C 5200                       		addq.b	#1,d0		; change glass type when touched
0001E37E 0C00 0030                  		cmpi.b	#$30,d0
0001E382 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001E384 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001E386                            
0001E386                            Obj09_GlassUpdate:
0001E386 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001E38A                            
0001E38A                            Obj09_GlassSnd:
0001E38A 303C 00BA                  		move.w	#$BA,d0
0001E38E 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play glass block sound
0001E394                            ; ===========================================================================
0001E394                            
0001E394                            Obj09_NoGlass:
0001E394 4E75                       		rts	
0001E396                            ; End of function Obj09_ChkItems2
0001E396                            
0001E396                            ; ===========================================================================
0001E396                            ; ---------------------------------------------------------------------------
0001E396                            ; Object 10 - blank
0001E396                            ; ---------------------------------------------------------------------------
0001E396                            
0001E396                            Obj10:					; XREF: Obj_Index
0001E396 4E75                       		rts	
0001E398                            ; ---------------------------------------------------------------------------
0001E398                            ; Subroutine to	animate	level graphics
0001E398                            ; ---------------------------------------------------------------------------
0001E398                            
0001E398                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E398                            
0001E398                            
0001E398                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001E398 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001E39C 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001E39E 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E3A4 6100 0000                  		bsr.w	AniArt_GiantRing
0001E3A8 7000                       		moveq	#0,d0
0001E3AA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001E3AE D040                       		add.w	d0,d0
0001E3B0 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001E3B4 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001E3B8                            ; ===========================================================================
0001E3B8                            
0001E3B8                            AniArt_Pause:
0001E3B8 4E75                       		rts	
0001E3BA                            ; End of function AniArt_Load
0001E3BA                            
0001E3BA                            ; ===========================================================================
0001E3BA 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001E3BE 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001E3C2 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001E3C6 0000                       		dc.w AniArt_Ending-AniArt_Index
0001E3C8                            ; ===========================================================================
0001E3C8                            ; ---------------------------------------------------------------------------
0001E3C8                            ; Animated pattern routine - Green Hill
0001E3C8                            ; ---------------------------------------------------------------------------
0001E3C8                            
0001E3C8                            AniArt_GHZ:				; XREF: AniArt_Index
0001E3C8 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E3CC 6A00                       		bpl.s	loc_1C08A
0001E3CE 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001E3D4 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001E3DA 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E3DE 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E3E2 0240 0001                  		andi.w	#1,d0
0001E3E6 6700                       		beq.s	loc_1C078
0001E3E8 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001E3EC                            
0001E3EC                            loc_1C078:
0001E3EC 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001E3F6 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001E3FA 6000 0000                  		bra.w	LoadTiles
0001E3FE                            ; ===========================================================================
0001E3FE                            
0001E3FE                            loc_1C08A:
0001E3FE 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E402 6A00                       		bpl.s	loc_1C0C0
0001E404 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001E40A 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001E410 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E414 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E418 0240 0001                  		andi.w	#1,d0
0001E41C 6700                       		beq.s	loc_1C0AE
0001E41E 43E9 0200                  		lea	$200(a1),a1
0001E422                            
0001E422                            loc_1C0AE:
0001E422 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001E42C 323C 000F                  		move.w	#$F,d1
0001E430 6000 0000                  		bra.w	LoadTiles
0001E434                            ; ===========================================================================
0001E434                            
0001E434                            loc_1C0C0:
0001E434 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E438 6A00                       		bpl.s	locret_1C10C
0001E43A 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E440 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001E444 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001E448 0240 0003                  		andi.w	#3,d0
0001E44C 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001E450 0800 0000                  		btst	#0,d0
0001E454 6600                       		bne.s	loc_1C0E8
0001E456 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001E45C                            
0001E45C                            loc_1C0E8:
0001E45C EF48                       		lsl.w	#7,d0
0001E45E 3200                       		move.w	d0,d1
0001E460 D040                       		add.w	d0,d0
0001E462 D041                       		add.w	d1,d0
0001E464 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001E46E 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001E474 43F1 0000                  		lea	(a1,d0.w),a1
0001E478 323C 000B                  		move.w	#$B,d1
0001E47C 6100 0000                  		bsr.w	LoadTiles
0001E480                            
0001E480                            locret_1C10C:
0001E480 4E75                       		rts	
0001E482                            ; ===========================================================================
0001E482 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001E486                            ; ===========================================================================
0001E486                            ; ---------------------------------------------------------------------------
0001E486                            ; Animated pattern routine - Marble
0001E486                            ; ---------------------------------------------------------------------------
0001E486                            
0001E486                            AniArt_MZ:				; XREF: AniArt_Index
0001E486 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E48A 6A00                       		bpl.s	loc_1C150
0001E48C 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001E492 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001E498 7000                       		moveq	#0,d0
0001E49A 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E49E 5200                       		addq.b	#1,d0
0001E4A0 0C00 0003                  		cmpi.b	#3,d0
0001E4A4 6600                       		bne.s	loc_1C134
0001E4A6 7000                       		moveq	#0,d0
0001E4A8                            
0001E4A8                            loc_1C134:
0001E4A8 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001E4AC C0FC 0100                  		mulu.w	#$100,d0
0001E4B0 D2C0                       		adda.w	d0,a1
0001E4B2 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001E4BC 323C 0007                  		move.w	#7,d1
0001E4C0 6100 0000                  		bsr.w	LoadTiles
0001E4C4                            
0001E4C4                            loc_1C150:
0001E4C4 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E4C8 6A00                       		bpl.s	loc_1C1AE
0001E4CA 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001E4D0 7000                       		moveq	#0,d0
0001E4D2 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E4D6 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001E4DC EE58                       		ror.w	#7,d0
0001E4DE D8C0                       		adda.w	d0,a4
0001E4E0 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001E4EA 7600                       		moveq	#0,d3
0001E4EC 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001E4F0 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E4F4 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001E4F8 343C 0003                  		move.w	#3,d2
0001E4FC                            
0001E4FC                            loc_1C188:
0001E4FC 3003                       		move.w	d3,d0
0001E4FE D040                       		add.w	d0,d0
0001E500 0240 001E                  		andi.w	#$1E,d0
0001E504 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001E50A 3033 0000                  		move.w	(a3,d0.w),d0
0001E50E 47F3 0000                  		lea	(a3,d0.w),a3
0001E512 224C                       		movea.l	a4,a1
0001E514 323C 001F                  		move.w	#$1F,d1
0001E518 4E93                       		jsr	(a3)
0001E51A 5843                       		addq.w	#4,d3
0001E51C 51CA FFDE                  		dbf	d2,loc_1C188
0001E520 4E75                       		rts	
0001E522                            ; ===========================================================================
0001E522                            
0001E522                            loc_1C1AE:
0001E522 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E526 6A00 0000                  		bpl.w	locret_1C1EA
0001E52A 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E530 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001E536 7000                       		moveq	#0,d0
0001E538 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001E53C 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001E540 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001E546 C0FC 00C0                  		mulu.w	#$C0,d0
0001E54A D2C0                       		adda.w	d0,a1
0001E54C 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001E556 323C 0005                  		move.w	#5,d1
0001E55A 6000 0000                  		bra.w	LoadTiles
0001E55E                            ; ===========================================================================
0001E55E                            
0001E55E                            locret_1C1EA:
0001E55E 4E75                       		rts	
0001E560                            ; ===========================================================================
0001E560                            ; ---------------------------------------------------------------------------
0001E560                            ; Animated pattern routine - Scrap Brain
0001E560                            ; ---------------------------------------------------------------------------
0001E560                            
0001E560                            AniArt_SBZ:				; XREF: AniArt_Index
0001E560 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001E564 6700                       		beq.s	loc_1C1F8
0001E566 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001E56A 6000                       		bra.s	loc_1C250
0001E56C                            ; ===========================================================================
0001E56C                            
0001E56C                            loc_1C1F8:
0001E56C 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E570 6A00                       		bpl.s	loc_1C250
0001E572 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001E578 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001E57E 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001E588 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E58C 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E590 0240 0007                  		andi.w	#7,d0
0001E594 6700                       		beq.s	loc_1C234
0001E596 5340                       		subq.w	#1,d0
0001E598 C0FC 0180                  		mulu.w	#$180,d0
0001E59C 43F1 0000                  		lea	(a1,d0.w),a1
0001E5A0 323C 000B                  		move.w	#$B,d1
0001E5A4 6000 0000                  		bra.w	LoadTiles
0001E5A8                            ; ===========================================================================
0001E5A8                            
0001E5A8                            loc_1C234:
0001E5A8 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001E5AE                            
0001E5AE                            loc_1C23A:
0001E5AE 323C 0005                  		move.w	#5,d1
0001E5B2 6100 0000                  		bsr.w	LoadTiles
0001E5B6 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001E5BC 323C 0005                  		move.w	#5,d1
0001E5C0 6000 0000                  		bra.w	LoadTiles
0001E5C4                            ; ===========================================================================
0001E5C4                            
0001E5C4                            loc_1C250:
0001E5C4 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001E5C8 6700                       		beq.s	loc_1C25C
0001E5CA 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E5CE 6000                       		bra.s	locret_1C2A0
0001E5D0                            ; ===========================================================================
0001E5D0                            
0001E5D0                            loc_1C25C:
0001E5D0 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E5D4 6A00                       		bpl.s	locret_1C2A0
0001E5D6 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001E5DC 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001E5E2 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001E5EC 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E5F0 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E5F4 0240 0007                  		andi.w	#7,d0
0001E5F8 6700                       		beq.s	loc_1C298
0001E5FA 5340                       		subq.w	#1,d0
0001E5FC C0FC 0180                  		mulu.w	#$180,d0
0001E600 43F1 0000                  		lea	(a1,d0.w),a1
0001E604 323C 000B                  		move.w	#$B,d1
0001E608 6000 0000                  		bra.w	LoadTiles
0001E60C                            ; ===========================================================================
0001E60C                            
0001E60C                            loc_1C298:
0001E60C 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001E612 609A                       		bra.s	loc_1C23A
0001E614                            ; ===========================================================================
0001E614                            
0001E614                            locret_1C2A0:
0001E614 4E75                       		rts	
0001E616                            ; ===========================================================================
0001E616                            ; ---------------------------------------------------------------------------
0001E616                            ; Animated pattern routine - ending sequence
0001E616                            ; ---------------------------------------------------------------------------
0001E616                            
0001E616                            AniArt_Ending:				; XREF: AniArt_Index
0001E616 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E61A 6A00                       		bpl.s	loc_1C2F4
0001E61C 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001E622 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001E628 45F8 9400                  		lea	($FFFF9400).w,a2
0001E62C 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E630 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E634 0240 0001                  		andi.w	#1,d0
0001E638 6700                       		beq.s	loc_1C2CE
0001E63A 43E9 0200                  		lea	$200(a1),a1
0001E63E 45EA 0200                  		lea	$200(a2),a2
0001E642                            
0001E642                            loc_1C2CE:
0001E642 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001E64C 323C 000F                  		move.w	#$F,d1
0001E650 6100 0000                  		bsr.w	LoadTiles
0001E654 224A                       		movea.l	a2,a1
0001E656 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001E660 323C 000F                  		move.w	#$F,d1
0001E664 6000 0000                  		bra.w	LoadTiles
0001E668                            ; ===========================================================================
0001E668                            
0001E668                            loc_1C2F4:
0001E668 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E66C 6A00                       		bpl.s	loc_1C33C
0001E66E 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E674 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001E678 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001E67C 0240 0007                  		andi.w	#7,d0
0001E680 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001E684 EF48                       		lsl.w	#7,d0
0001E686 3200                       		move.w	d0,d1
0001E688 D040                       		add.w	d0,d0
0001E68A D041                       		add.w	d1,d0
0001E68C 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001E696 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001E69C 43F1 0000                  		lea	(a1,d0.w),a1
0001E6A0 323C 000B                  		move.w	#$B,d1
0001E6A4 6000 0000                  		bra.w	LoadTiles
0001E6A8                            ; ===========================================================================
0001E6A8 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001E6B0                            ; ===========================================================================
0001E6B0                            
0001E6B0                            loc_1C33C:
0001E6B0 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001E6B4 6A00                       		bpl.s	loc_1C37A
0001E6B6 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001E6BC 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001E6C0 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001E6C4 0240 0003                  		andi.w	#3,d0
0001E6C8 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001E6CC E148                       		lsl.w	#8,d0
0001E6CE D040                       		add.w	d0,d0
0001E6D0 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001E6DA 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001E6DE 43F1 0000                  		lea	(a1,d0.w),a1
0001E6E2 323C 000F                  		move.w	#$F,d1
0001E6E6 6000 0000                  		bra.w	LoadTiles
0001E6EA                            ; ===========================================================================
0001E6EA 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001E6EE                            ; ===========================================================================
0001E6EE                            
0001E6EE                            loc_1C37A:
0001E6EE 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001E6F2 6A00                       		bpl.s	locret_1C3B4
0001E6F4 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001E6FA 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001E6FE 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001E702 0240 0003                  		andi.w	#3,d0
0001E706 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001E70A E148                       		lsl.w	#8,d0
0001E70C D040                       		add.w	d0,d0
0001E70E 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001E718 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001E71C 43F1 0000                  		lea	(a1,d0.w),a1
0001E720 323C 000F                  		move.w	#$F,d1
0001E724 6000 0000                  		bra.w	LoadTiles
0001E728                            ; ===========================================================================
0001E728                            
0001E728                            locret_1C3B4:
0001E728 4E75                       		rts	
0001E72A                            ; ===========================================================================
0001E72A                            
0001E72A                            AniArt_none:				; XREF: AniArt_Index
0001E72A 4E75                       		rts	
0001E72C                            
0001E72C                            ; ---------------------------------------------------------------------------
0001E72C                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001E72C                            ; ---------------------------------------------------------------------------
0001E72C                            
0001E72C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E72C                            
0001E72C                            
0001E72C                            LoadTiles:
0001E72C 2C99                       		move.l	(a1)+,(a6)
0001E72E 2C99                       		move.l	(a1)+,(a6)
0001E730 2C99                       		move.l	(a1)+,(a6)
0001E732 2C99                       		move.l	(a1)+,(a6)
0001E734 2C99                       		move.l	(a1)+,(a6)
0001E736 2C99                       		move.l	(a1)+,(a6)
0001E738 2C99                       		move.l	(a1)+,(a6)
0001E73A 2C99                       		move.l	(a1)+,(a6)
0001E73C 51C9 FFEE                  		dbf	d1,LoadTiles
0001E740 4E75                       		rts	
0001E742                            ; End of function LoadTiles
0001E742                            
0001E742                            ; ===========================================================================
0001E742                            ; ---------------------------------------------------------------------------
0001E742                            ; Animated pattern routine - more Marble Zone
0001E742                            ; ---------------------------------------------------------------------------
0001E742 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001E746 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001E74A 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001E74E 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001E752 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001E756 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001E75A 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001E75E 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001E762                            ; ===========================================================================
0001E762                            
0001E762                            loc_1C3EE:				; XREF: AniArt_MZextra
0001E762 2C91                       		move.l	(a1),(a6)
0001E764 43E9 0010                  		lea	$10(a1),a1
0001E768 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001E76C 4E75                       		rts	
0001E76E                            ; ===========================================================================
0001E76E                            
0001E76E                            loc_1C3FA:				; XREF: AniArt_MZextra
0001E76E 2029 0002                  		move.l	2(a1),d0
0001E772 1029 0001                  		move.b	1(a1),d0
0001E776 E098                       		ror.l	#8,d0
0001E778 2C80                       		move.l	d0,(a6)
0001E77A 43E9 0010                  		lea	$10(a1),a1
0001E77E 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001E782 4E75                       		rts	
0001E784                            ; ===========================================================================
0001E784                            
0001E784                            loc_1C410:				; XREF: AniArt_MZextra
0001E784 2CA9 0002                  		move.l	2(a1),(a6)
0001E788 43E9 0010                  		lea	$10(a1),a1
0001E78C 51C9 FFF6                  		dbf	d1,loc_1C410
0001E790 4E75                       		rts	
0001E792                            ; ===========================================================================
0001E792                            
0001E792                            loc_1C41E:				; XREF: AniArt_MZextra
0001E792 2029 0004                  		move.l	4(a1),d0
0001E796 1029 0003                  		move.b	3(a1),d0
0001E79A E098                       		ror.l	#8,d0
0001E79C 2C80                       		move.l	d0,(a6)
0001E79E 43E9 0010                  		lea	$10(a1),a1
0001E7A2 51C9 FFEE                  		dbf	d1,loc_1C41E
0001E7A6 4E75                       		rts	
0001E7A8                            ; ===========================================================================
0001E7A8                            
0001E7A8                            loc_1C434:				; XREF: AniArt_MZextra
0001E7A8 2CA9 0004                  		move.l	4(a1),(a6)
0001E7AC 43E9 0010                  		lea	$10(a1),a1
0001E7B0 51C9 FFF6                  		dbf	d1,loc_1C434
0001E7B4 4E75                       		rts	
0001E7B6                            ; ===========================================================================
0001E7B6                            
0001E7B6                            loc_1C442:				; XREF: AniArt_MZextra
0001E7B6 2029 0006                  		move.l	6(a1),d0
0001E7BA 1029 0005                  		move.b	5(a1),d0
0001E7BE E098                       		ror.l	#8,d0
0001E7C0 2C80                       		move.l	d0,(a6)
0001E7C2 43E9 0010                  		lea	$10(a1),a1
0001E7C6 51C9 FFEE                  		dbf	d1,loc_1C442
0001E7CA 4E75                       		rts	
0001E7CC                            ; ===========================================================================
0001E7CC                            
0001E7CC                            loc_1C458:				; XREF: AniArt_MZextra
0001E7CC 2CA9 0006                  		move.l	6(a1),(a6)
0001E7D0 43E9 0010                  		lea	$10(a1),a1
0001E7D4 51C9 FFF6                  		dbf	d1,loc_1C458
0001E7D8 4E75                       		rts	
0001E7DA                            ; ===========================================================================
0001E7DA                            
0001E7DA                            loc_1C466:				; XREF: AniArt_MZextra
0001E7DA 2029 0008                  		move.l	8(a1),d0
0001E7DE 1029 0007                  		move.b	7(a1),d0
0001E7E2 E098                       		ror.l	#8,d0
0001E7E4 2C80                       		move.l	d0,(a6)
0001E7E6 43E9 0010                  		lea	$10(a1),a1
0001E7EA 51C9 FFEE                  		dbf	d1,loc_1C466
0001E7EE 4E75                       		rts	
0001E7F0                            ; ===========================================================================
0001E7F0                            
0001E7F0                            loc_1C47C:				; XREF: AniArt_MZextra
0001E7F0 2CA9 0008                  		move.l	8(a1),(a6)
0001E7F4 43E9 0010                  		lea	$10(a1),a1
0001E7F8 51C9 FFF6                  		dbf	d1,loc_1C47C
0001E7FC 4E75                       		rts	
0001E7FE                            ; ===========================================================================
0001E7FE                            
0001E7FE                            loc_1C48A:				; XREF: AniArt_MZextra
0001E7FE 2029 000A                  		move.l	$A(a1),d0
0001E802 1029 0009                  		move.b	9(a1),d0
0001E806 E098                       		ror.l	#8,d0
0001E808 2C80                       		move.l	d0,(a6)
0001E80A 43E9 0010                  		lea	$10(a1),a1
0001E80E 51C9 FFEE                  		dbf	d1,loc_1C48A
0001E812 4E75                       		rts	
0001E814                            ; ===========================================================================
0001E814                            
0001E814                            loc_1C4A0:				; XREF: AniArt_MZextra
0001E814 2CA9 000A                  		move.l	$A(a1),(a6)
0001E818 43E9 0010                  		lea	$10(a1),a1
0001E81C 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001E820 4E75                       		rts	
0001E822                            ; ===========================================================================
0001E822                            
0001E822                            loc_1C4AE:				; XREF: AniArt_MZextra
0001E822 2029 000C                  		move.l	$C(a1),d0
0001E826 1029 000B                  		move.b	$B(a1),d0
0001E82A E098                       		ror.l	#8,d0
0001E82C 2C80                       		move.l	d0,(a6)
0001E82E 43E9 0010                  		lea	$10(a1),a1
0001E832 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001E836 4E75                       		rts	
0001E838                            ; ===========================================================================
0001E838                            
0001E838                            loc_1C4C4:				; XREF: AniArt_MZextra
0001E838 2CA9 000C                  		move.l	$C(a1),(a6)
0001E83C 43E9 0010                  		lea	$10(a1),a1
0001E840 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001E844 4E75                       		rts	
0001E846                            ; ===========================================================================
0001E846                            
0001E846                            loc_1C4D2:				; XREF: AniArt_MZextra
0001E846 2029 000C                  		move.l	$C(a1),d0
0001E84A E198                       		rol.l	#8,d0
0001E84C 1011                       		move.b	0(a1),d0
0001E84E 2C80                       		move.l	d0,(a6)
0001E850 43E9 0010                  		lea	$10(a1),a1
0001E854 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001E858 4E75                       		rts	
0001E85A                            ; ===========================================================================
0001E85A                            
0001E85A                            loc_1C4E8:				; XREF: AniArt_MZextra
0001E85A 3CA9 000E                  		move.w	$E(a1),(a6)
0001E85E 3C91                       		move.w	0(a1),(a6)
0001E860 43E9 0010                  		lea	$10(a1),a1
0001E864 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001E868 4E75                       		rts	
0001E86A                            ; ===========================================================================
0001E86A                            
0001E86A                            loc_1C4FA:				; XREF: AniArt_MZextra
0001E86A 2011                       		move.l	0(a1),d0
0001E86C 1029 000F                  		move.b	$F(a1),d0
0001E870 E098                       		ror.l	#8,d0
0001E872 2C80                       		move.l	d0,(a6)
0001E874 43E9 0010                  		lea	$10(a1),a1
0001E878 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001E87C 4E75                       		rts	
0001E87E                            
0001E87E                            ; ---------------------------------------------------------------------------
0001E87E                            ; Animated pattern routine - giant ring
0001E87E                            ; ---------------------------------------------------------------------------
0001E87E                            
0001E87E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E87E                            
0001E87E                            
0001E87E                            AniArt_GiantRing:			; XREF: AniArt_Load
0001E87E 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001E882 6600                       		bne.s	loc_1C518
0001E884 4E75                       		rts	
0001E886                            ; ===========================================================================
0001E886                            
0001E886                            loc_1C518:
0001E886 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001E88C 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001E892 7000                       		moveq	#0,d0
0001E894 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001E898 43F1 0000                  		lea	(a1,d0.w),a1
0001E89C 0640 8000                  		addi.w	#$8000,d0
0001E8A0 E588                       		lsl.l	#2,d0
0001E8A2 E448                       		lsr.w	#2,d0
0001E8A4 0040 4000                  		ori.w	#$4000,d0
0001E8A8 4840                       		swap	d0
0001E8AA 2D40 0004                  		move.l	d0,4(a6)
0001E8AE 323C 000D                  		move.w	#$D,d1
0001E8B2 6000 FE78                  		bra.w	LoadTiles
0001E8B6                            ; End of function AniArt_GiantRing
0001E8B6                            
0001E8B6                            ; ===========================================================================
0001E8B6                            Obj21:                    ; XREF: Obj_Index
0001E8B6 4E75                               rts
0001E8B8                            ; ===========================================================================
0001E8B8                            ; ---------------------------------------------------------------------------
0001E8B8                            ; HUD Object code - SCORE, TIME, RINGS
0001E8B8                            ; ---------------------------------------------------------------------------
0001E8B8                            loc_40804:
0001E8B8 4A78 FE20                      tst.w    ($FFFFFE20).w
0001E8BC 6700                           beq.s    loc_40820
0001E8BE 7200                           moveq    #0,d1
0001E8C0 0838 0003 FE05                 btst    #3,($FFFFFE05).w
0001E8C6 6600                           bne.s    BranchTo_loc_40836
0001E8C8 0C38 0009 FE23                 cmpi.b    #9,($FFFFFE23).w
0001E8CE 6600                           bne.s    BranchTo_loc_40836
0001E8D0 5441                           addq.w    #2,d1
0001E8D2                            
0001E8D2                            BranchTo_loc_40836
0001E8D2 6000                           bra.s    loc_40836
0001E8D4                            ; ===========================================================================
0001E8D4                            
0001E8D4                            loc_40820:
0001E8D4 7200                           moveq    #0,d1
0001E8D6 0838 0003 FE05                 btst    #3,($FFFFFE05).w
0001E8DC 6600                           bne.s    loc_40836
0001E8DE 5241                           addq.w    #1,d1
0001E8E0 0C38 0009 FE23                 cmpi.b    #9,($FFFFFE23).w
0001E8E6 6600                           bne.s    loc_40836
0001E8E8 5441                           addq.w    #2,d1
0001E8EA                            
0001E8EA                            loc_40836:
0001E8EA 363C 0090                      move.w    #$90,d3
0001E8EE 343C 0108                      move.w    #$108,d2
0001E8F2 43F9 0000 0000                 lea    (Map_Obj21).l,a1
0001E8F8 367C 06CA                      movea.w    #$6CA,a3
0001E8FC D241                           add.w    d1,d1
0001E8FE D2F1 1000                      adda.w    (a1,d1.w),a1
0001E902 7200                           moveq    #0,d1
0001E904 1219                           move.b    (a1)+,d1
0001E906 5301                           subq.b    #1,d1
0001E908 6B00                           bmi.s    return_40858
0001E90A 4EB9 0000 EBF4                 jsr    sub_D762
0001E910                            
0001E910                            return_40858:
0001E910 4E75                           rts
0001E912                            ; End of function h
0001E912                            ; ===========================================================================
0001E912                            ; ---------------------------------------------------------------------------
0001E912                            ; Sprite mappings - SCORE, TIME, RINGS
0001E912                            ; ---------------------------------------------------------------------------
0001E912                            Map_obj21:
0001E912                            	include "_maps\obj21.asm"
0001E912                            ; ---------------------------------------------------------------------------
0001E912                            ; Sprite mappings - SCORE, TIME, RINGS
0001E912                            ; ---------------------------------------------------------------------------
0001E912 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001E916 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001E91A 0A                         byte_1C5BC:	dc.b $A
0001E91B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001E920 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001E925 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001E92A 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001E92F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001E934 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001E939 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001E93E A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001E943 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001E948 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001E94D 00                         		dc.b 0
0001E94E 0A                         byte_1C5F0:	dc.b $A
0001E94F 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001E954 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001E959 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001E95E 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001E963 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001E968 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001E96D A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001E972 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001E977 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001E97C 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001E981 00                         		dc.b 0
0001E982 0A                         byte_1C624:	dc.b $A
0001E983 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001E988 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001E98D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001E992 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001E997 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001E99C A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001E9A1 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001E9A6 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001E9AB 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001E9B0 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001E9B5 00                         		dc.b 0
0001E9B6 0A                         byte_1C658:	dc.b $A
0001E9B7 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001E9BC 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001E9C1 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001E9C6 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001E9CB 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001E9D0 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001E9D5 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001E9DA A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001E9DF 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001E9E4 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001E9EA 00                         		even
0001E9EA 00                         		even
0001E9EA                            
0001E9EA                            ; ---------------------------------------------------------------------------
0001E9EA                            ; Add points subroutine
0001E9EA                            ; ---------------------------------------------------------------------------
0001E9EA                            
0001E9EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E9EA                            
0001E9EA                            
0001E9EA                            AddPoints:                      ; ...
0001E9EA 11FC 0001 FE1F                     move.b    #1,($FFFFFE1F).w
0001E9F0 47F8 FE26                          lea    ($FFFFFE26).w,a3
0001E9F4 D193                               add.l    d0,(a3)
0001E9F6 223C 000F 423F                     move.l    #999999,d1
0001E9FC B293                               cmp.l    (a3),d1
0001E9FE 6200                               bhi.s    loc_1C6AC
0001EA00 2681                               move.l    d1,(a3)
0001EA02                            
0001EA02                            loc_1C6AC:                      ; ...
0001EA02 2013                               move.l    (a3),d0
0001EA04 B0B8 FFC0                          cmp.l    ($FFFFFFC0).w,d0
0001EA08 6500                               blo.s    locret_1C6B6
0001EA0A 06B8 0000 1388 FFC0                add.l    #$1388,($FFFFFFC0).w
0001EA12 4EF9 0000 B628                     jmp        ExtraLife
0001EA18                            
0001EA18                            locret_1C6B6:
0001EA18 4E75                       		rts
0001EA1A                            ; End of function AddPoints
0001EA1A                            
0001EA1A                            ; ---------------------------------------------------------------------------
0001EA1A                            ; Subroutine to	update the HUD
0001EA1A                            ; ---------------------------------------------------------------------------
0001EA1A                            
0001EA1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA1A                            
0001EA1A                            
0001EA1A                            HudUpdate:
0001EA1A 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001EA1E 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001EA22 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001EA26 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001EA28 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001EA2C 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001EA32 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001EA36 6100 0000                  		bsr.w	Hud_Score
0001EA3A                            
0001EA3A                            Hud_ChkRings:
0001EA3A 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001EA3E 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001EA40 6A00                       		bpl.s	loc_1C6E4
0001EA42 6100 0000                  		bsr.w	Hud_LoadZero
0001EA46                            
0001EA46                            loc_1C6E4:
0001EA46 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001EA4A 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001EA50 7200                       		moveq	#0,d1
0001EA52 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001EA56 6100 0000                  		bsr.w	Hud_Rings
0001EA5A                            
0001EA5A                            Hud_ChkTime:
0001EA5A 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001EA5E 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001EA60 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001EA64 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001EA66 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001EA6A 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001EA70 6700                       		beq.s	TimeOver	; if yes, branch
0001EA72 5221                       		addq.b	#1,-(a1)
0001EA74 0C11 003C                  		cmpi.b	#60,(a1)
0001EA78 6500                       		bcs.s	Hud_ChkLives
0001EA7A 12BC 0000                  		move.b	#0,(a1)
0001EA7E 5221                       		addq.b	#1,-(a1)
0001EA80 0C11 003C                  		cmpi.b	#60,(a1)
0001EA84 6500                       		bcs.s	loc_1C734
0001EA86 12BC 0000                  		move.b	#0,(a1)
0001EA8A 5221                       		addq.b	#1,-(a1)
0001EA8C 0C11 0009                  		cmpi.b	#9,(a1)
0001EA90 6500                       		bcs.s	loc_1C734
0001EA92 12BC 0009                  		move.b	#9,(a1)
0001EA96                            
0001EA96                            loc_1C734:
0001EA96 203C 5E40 0003             		move.l	#$5E400003,d0
0001EA9C 7200                       		moveq	#0,d1
0001EA9E 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001EAA2 6100 0000                  		bsr.w	Hud_Mins
0001EAA6 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001EAAC 7200                       		moveq	#0,d1
0001EAAE 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001EAB2 6100 0000                  		bsr.w	Hud_Secs
0001EAB6                            
0001EAB6                            Hud_ChkLives:
0001EAB6 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001EABA 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001EABC 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001EAC0 6100 0000                  		bsr.w	Hud_Lives
0001EAC4                            
0001EAC4                            Hud_ChkBonus:
0001EAC4 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001EAC8 6700                       		beq.s	Hud_End		; if not, branch
0001EACA 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001EACE 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001EAD8 7200                       		moveq	#0,d1
0001EADA 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001EADE 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EAE2 7200                       		moveq	#0,d1
0001EAE4 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001EAE8 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EAEC                            
0001EAEC                            Hud_End:
0001EAEC 4E75                       		rts	
0001EAEE                            ; ===========================================================================
0001EAEE                            
0001EAEE                            TimeOver:				; XREF: Hud_ChkTime
0001EAEE 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001EAF2 41F8 D000                  		lea	($FFFFD000).w,a0
0001EAF6 2448                       		movea.l	a0,a2
0001EAF8 6100 E76C                  		bsr.w	KillSonic
0001EAFC 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001EB02 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0001EB08 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001EB0E 4E75                       		rts	
0001EB10                            ; ===========================================================================
0001EB10                            
0001EB10                            HudDebug:				; XREF: HudUpdate
0001EB10 6100 0000                  		bsr.w	HudDb_XY
0001EB14 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001EB18 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001EB1A 6A00                       		bpl.s	HudDb_Rings
0001EB1C 6100 0000                  		bsr.w	Hud_LoadZero
0001EB20                            
0001EB20                            HudDb_Rings:
0001EB20 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001EB24 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001EB2A 7200                       		moveq	#0,d1
0001EB2C 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001EB30 6100 0000                  		bsr.w	Hud_Rings
0001EB34                            
0001EB34                            HudDb_ObjCount:
0001EB34 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001EB3A 7200                       		moveq	#0,d1
0001EB3C 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001EB40 6100 0000                  		bsr.w	Hud_Secs
0001EB44 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001EB48 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001EB4A 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001EB4E 6100 0000                  		bsr.w	Hud_Lives
0001EB52                            
0001EB52                            HudDb_ChkBonus:
0001EB52 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001EB56 6700                       		beq.s	HudDb_End	; if not, branch
0001EB58 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001EB5C 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001EB66 7200                       		moveq	#0,d1
0001EB68 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001EB6C 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EB70 7200                       		moveq	#0,d1
0001EB72 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001EB76 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EB7A                            
0001EB7A                            HudDb_End:
0001EB7A 4E75                       		rts	
0001EB7C                            ; End of function HudUpdate
0001EB7C                            
0001EB7C                            ; ---------------------------------------------------------------------------
0001EB7C                            ; Subroutine to	load "0" on the	HUD
0001EB7C                            ; ---------------------------------------------------------------------------
0001EB7C                            
0001EB7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB7C                            
0001EB7C                            
0001EB7C                            Hud_LoadZero:				; XREF: HudUpdate
0001EB7C 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001EB86 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001EB8A 343C 0002                  		move.w	#2,d2
0001EB8E 6000                       		bra.s	loc_1C83E
0001EB90                            ; End of function Hud_LoadZero
0001EB90                            
0001EB90                            ; ---------------------------------------------------------------------------
0001EB90                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001EB90                            ; ---------------------------------------------------------------------------
0001EB90                            
0001EB90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB90                            
0001EB90                            
0001EB90                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001EB90 4DF9 00C0 0000             		lea	($C00000).l,a6
0001EB96 6100 0000                  		bsr.w	Hud_Lives
0001EB9A 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001EBA4 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001EBA8 343C 000E                  		move.w	#$E,d2
0001EBAC                            
0001EBAC                            loc_1C83E:				; XREF: Hud_LoadZero
0001EBAC 43FA 0000                  		lea	Art_Hud(pc),a1
0001EBB0                            
0001EBB0                            loc_1C842:
0001EBB0 323C 000F                  		move.w	#$F,d1
0001EBB4 101A                       		move.b	(a2)+,d0
0001EBB6 6B00                       		bmi.s	loc_1C85E
0001EBB8 4880                       		ext.w	d0
0001EBBA EB48                       		lsl.w	#5,d0
0001EBBC 47F1 0000                  		lea	(a1,d0.w),a3
0001EBC0                            
0001EBC0                            loc_1C852:
0001EBC0 2C9B                       		move.l	(a3)+,(a6)
0001EBC2 51C9 FFFC                  		dbf	d1,loc_1C852
0001EBC6                            
0001EBC6                            loc_1C858:
0001EBC6 51CA FFE8                  		dbf	d2,loc_1C842
0001EBCA                            
0001EBCA 4E75                       		rts	
0001EBCC                            ; ===========================================================================
0001EBCC                            
0001EBCC                            loc_1C85E:
0001EBCC 2CBC 0000 0000             		move.l	#0,(a6)
0001EBD2 51C9 FFF8                  		dbf	d1,loc_1C85E
0001EBD6                            
0001EBD6 60EE                       		bra.s	loc_1C858
0001EBD8                            ; End of function Hud_Base
0001EBD8                            
0001EBD8                            ; ===========================================================================
0001EBD8 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001EBE4 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001EBE8                            ; ---------------------------------------------------------------------------
0001EBE8                            ; Subroutine to	load debug mode	numbers	patterns
0001EBE8                            ; ---------------------------------------------------------------------------
0001EBE8                            
0001EBE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EBE8                            
0001EBE8                            
0001EBE8                            HudDb_XY:				; XREF: HudDebug
0001EBE8 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001EBF2 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001EBF6 4841                       		swap	d1
0001EBF8 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001EBFC 6100                       		bsr.s	HudDb_XY2
0001EBFE 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001EC02 4841                       		swap	d1
0001EC04 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001EC08                            ; End of function HudDb_XY
0001EC08                            
0001EC08                            
0001EC08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC08                            
0001EC08                            
0001EC08                            HudDb_XY2:
0001EC08 7C07                       		moveq	#7,d6
0001EC0A 43F9 0000 0550             		lea	(Art_Text).l,a1
0001EC10                            
0001EC10                            HudDb_XYLoop:
0001EC10 E959                       		rol.w	#4,d1
0001EC12 3401                       		move.w	d1,d2
0001EC14 0242 000F                  		andi.w	#$F,d2
0001EC18 0C42 000A                  		cmpi.w	#$A,d2
0001EC1C 6500                       		bcs.s	loc_1C8B2
0001EC1E 5E42                       		addq.w	#7,d2
0001EC20                            
0001EC20                            loc_1C8B2:
0001EC20 EB4A                       		lsl.w	#5,d2
0001EC22 47F1 2000                  		lea	(a1,d2.w),a3
0001EC26 2C9B                       		move.l	(a3)+,(a6)
0001EC28 2C9B                       		move.l	(a3)+,(a6)
0001EC2A 2C9B                       		move.l	(a3)+,(a6)
0001EC2C 2C9B                       		move.l	(a3)+,(a6)
0001EC2E 2C9B                       		move.l	(a3)+,(a6)
0001EC30 2C9B                       		move.l	(a3)+,(a6)
0001EC32 2C9B                       		move.l	(a3)+,(a6)
0001EC34 2C9B                       		move.l	(a3)+,(a6)
0001EC36 4841                       		swap	d1
0001EC38 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001EC3C                            
0001EC3C 4E75                       		rts	
0001EC3E                            ; End of function HudDb_XY2
0001EC3E                            
0001EC3E                            ; ---------------------------------------------------------------------------
0001EC3E                            ; Subroutine to	load rings numbers patterns
0001EC3E                            ; ---------------------------------------------------------------------------
0001EC3E                            
0001EC3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC3E                            
0001EC3E                            
0001EC3E                            Hud_Rings:				; XREF: HudUpdate
0001EC3E 45F9 0000 0000             		lea	(Hud_100).l,a2
0001EC44 7C02                       		moveq	#2,d6
0001EC46 6000                       		bra.s	Hud_LoadArt
0001EC48                            ; End of function Hud_Rings
0001EC48                            
0001EC48                            ; ---------------------------------------------------------------------------
0001EC48                            ; Subroutine to	load score numbers patterns
0001EC48                            ; ---------------------------------------------------------------------------
0001EC48                            
0001EC48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC48                            
0001EC48                            
0001EC48                            Hud_Score:				; XREF: HudUpdate
0001EC48 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001EC4E 7C05                       		moveq	#5,d6
0001EC50                            
0001EC50                            Hud_LoadArt:
0001EC50 7800                       		moveq	#0,d4
0001EC52 43FA 0000                  		lea	Art_Hud(pc),a1
0001EC56                            
0001EC56                            Hud_ScoreLoop:
0001EC56 7400                       		moveq	#0,d2
0001EC58 261A                       		move.l	(a2)+,d3
0001EC5A                            
0001EC5A                            loc_1C8EC:
0001EC5A 9283                       		sub.l	d3,d1
0001EC5C 6500                       		bcs.s	loc_1C8F4
0001EC5E 5242                       		addq.w	#1,d2
0001EC60 60F8                       		bra.s	loc_1C8EC
0001EC62                            ; ===========================================================================
0001EC62                            
0001EC62                            loc_1C8F4:
0001EC62 D283                       		add.l	d3,d1
0001EC64 4A42                       		tst.w	d2
0001EC66 6700                       		beq.s	loc_1C8FE
0001EC68 383C 0001                  		move.w	#1,d4
0001EC6C                            
0001EC6C                            loc_1C8FE:
0001EC6C 4A44                       		tst.w	d4
0001EC6E 6700                       		beq.s	loc_1C92C
0001EC70 ED4A                       		lsl.w	#6,d2
0001EC72 2D40 0004                  		move.l	d0,4(a6)
0001EC76 47F1 2000                  		lea	(a1,d2.w),a3
0001EC7A 2C9B                       		move.l	(a3)+,(a6)
0001EC7C 2C9B                       		move.l	(a3)+,(a6)
0001EC7E 2C9B                       		move.l	(a3)+,(a6)
0001EC80 2C9B                       		move.l	(a3)+,(a6)
0001EC82 2C9B                       		move.l	(a3)+,(a6)
0001EC84 2C9B                       		move.l	(a3)+,(a6)
0001EC86 2C9B                       		move.l	(a3)+,(a6)
0001EC88 2C9B                       		move.l	(a3)+,(a6)
0001EC8A 2C9B                       		move.l	(a3)+,(a6)
0001EC8C 2C9B                       		move.l	(a3)+,(a6)
0001EC8E 2C9B                       		move.l	(a3)+,(a6)
0001EC90 2C9B                       		move.l	(a3)+,(a6)
0001EC92 2C9B                       		move.l	(a3)+,(a6)
0001EC94 2C9B                       		move.l	(a3)+,(a6)
0001EC96 2C9B                       		move.l	(a3)+,(a6)
0001EC98 2C9B                       		move.l	(a3)+,(a6)
0001EC9A                            
0001EC9A                            loc_1C92C:
0001EC9A 0680 0040 0000             		addi.l	#$400000,d0
0001ECA0 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001ECA4                            
0001ECA4 4E75                       		rts	
0001ECA6                            ; End of function Hud_Score
0001ECA6                            
0001ECA6                            ; ---------------------------------------------------------------------------
0001ECA6                            ; Subroutine to	load countdown numbers on the continue screen
0001ECA6                            ; ---------------------------------------------------------------------------
0001ECA6                            
0001ECA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ECA6                            
0001ECA6                            
0001ECA6                            ContScrCounter:				; XREF: ContinueScreen
0001ECA6 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001ECB0 4DF9 00C0 0000             		lea	($C00000).l,a6
0001ECB6 45F9 0000 0000             		lea	(Hud_10).l,a2
0001ECBC 7C01                       		moveq	#1,d6
0001ECBE 7800                       		moveq	#0,d4
0001ECC0 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001ECC4                            
0001ECC4                            ContScr_Loop:
0001ECC4 7400                       		moveq	#0,d2
0001ECC6 261A                       		move.l	(a2)+,d3
0001ECC8                            
0001ECC8                            loc_1C95A:
0001ECC8 9283                       		sub.l	d3,d1
0001ECCA 6500                       		bcs.s	loc_1C962
0001ECCC 5242                       		addq.w	#1,d2
0001ECCE 60F8                       		bra.s	loc_1C95A
0001ECD0                            ; ===========================================================================
0001ECD0                            
0001ECD0                            loc_1C962:
0001ECD0 D283                       		add.l	d3,d1
0001ECD2 ED4A                       		lsl.w	#6,d2
0001ECD4 47F1 2000                  		lea	(a1,d2.w),a3
0001ECD8 2C9B                       		move.l	(a3)+,(a6)
0001ECDA 2C9B                       		move.l	(a3)+,(a6)
0001ECDC 2C9B                       		move.l	(a3)+,(a6)
0001ECDE 2C9B                       		move.l	(a3)+,(a6)
0001ECE0 2C9B                       		move.l	(a3)+,(a6)
0001ECE2 2C9B                       		move.l	(a3)+,(a6)
0001ECE4 2C9B                       		move.l	(a3)+,(a6)
0001ECE6 2C9B                       		move.l	(a3)+,(a6)
0001ECE8 2C9B                       		move.l	(a3)+,(a6)
0001ECEA 2C9B                       		move.l	(a3)+,(a6)
0001ECEC 2C9B                       		move.l	(a3)+,(a6)
0001ECEE 2C9B                       		move.l	(a3)+,(a6)
0001ECF0 2C9B                       		move.l	(a3)+,(a6)
0001ECF2 2C9B                       		move.l	(a3)+,(a6)
0001ECF4 2C9B                       		move.l	(a3)+,(a6)
0001ECF6 2C9B                       		move.l	(a3)+,(a6)
0001ECF8 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001ECFC                            
0001ECFC 4E75                       		rts	
0001ECFE                            ; End of function ContScrCounter
0001ECFE                            
0001ECFE                            ; ===========================================================================
0001ECFE                            ; ---------------------------------------------------------------------------
0001ECFE                            ; HUD counter sizes
0001ECFE                            ; ---------------------------------------------------------------------------
0001ECFE 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001ED02 0000 2710                  Hud_10000:	dc.l 10000
0001ED06 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001ED0A 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001ED0E 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001ED12 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001ED16                            
0001ED16                            ; ---------------------------------------------------------------------------
0001ED16                            ; Subroutine to	load time numbers patterns
0001ED16                            ; ---------------------------------------------------------------------------
0001ED16                            
0001ED16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ED16                            
0001ED16                            
0001ED16                            Hud_Mins:				; XREF: Hud_ChkTime
0001ED16 45F9 0001 ED12             		lea	(Hud_1).l,a2
0001ED1C 7C00                       		moveq	#0,d6
0001ED1E 6000                       		bra.s	loc_1C9BA
0001ED20                            ; End of function Hud_Mins
0001ED20                            
0001ED20                            
0001ED20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ED20                            
0001ED20                            
0001ED20                            Hud_Secs:				; XREF: Hud_ChkTime
0001ED20 45F9 0001 ED0E             		lea	(Hud_10).l,a2
0001ED26 7C01                       		moveq	#1,d6
0001ED28                            
0001ED28                            loc_1C9BA:
0001ED28 7800                       		moveq	#0,d4
0001ED2A 43FA 0000                  		lea	Art_Hud(pc),a1
0001ED2E                            
0001ED2E                            Hud_TimeLoop:
0001ED2E 7400                       		moveq	#0,d2
0001ED30 261A                       		move.l	(a2)+,d3
0001ED32                            
0001ED32                            loc_1C9C4:
0001ED32 9283                       		sub.l	d3,d1
0001ED34 6500                       		bcs.s	loc_1C9CC
0001ED36 5242                       		addq.w	#1,d2
0001ED38 60F8                       		bra.s	loc_1C9C4
0001ED3A                            ; ===========================================================================
0001ED3A                            
0001ED3A                            loc_1C9CC:
0001ED3A D283                       		add.l	d3,d1
0001ED3C 4A42                       		tst.w	d2
0001ED3E 6700                       		beq.s	loc_1C9D6
0001ED40 383C 0001                  		move.w	#1,d4
0001ED44                            
0001ED44                            loc_1C9D6:
0001ED44 ED4A                       		lsl.w	#6,d2
0001ED46 2D40 0004                  		move.l	d0,4(a6)
0001ED4A 47F1 2000                  		lea	(a1,d2.w),a3
0001ED4E 2C9B                       		move.l	(a3)+,(a6)
0001ED50 2C9B                       		move.l	(a3)+,(a6)
0001ED52 2C9B                       		move.l	(a3)+,(a6)
0001ED54 2C9B                       		move.l	(a3)+,(a6)
0001ED56 2C9B                       		move.l	(a3)+,(a6)
0001ED58 2C9B                       		move.l	(a3)+,(a6)
0001ED5A 2C9B                       		move.l	(a3)+,(a6)
0001ED5C 2C9B                       		move.l	(a3)+,(a6)
0001ED5E 2C9B                       		move.l	(a3)+,(a6)
0001ED60 2C9B                       		move.l	(a3)+,(a6)
0001ED62 2C9B                       		move.l	(a3)+,(a6)
0001ED64 2C9B                       		move.l	(a3)+,(a6)
0001ED66 2C9B                       		move.l	(a3)+,(a6)
0001ED68 2C9B                       		move.l	(a3)+,(a6)
0001ED6A 2C9B                       		move.l	(a3)+,(a6)
0001ED6C 2C9B                       		move.l	(a3)+,(a6)
0001ED6E 0680 0040 0000             		addi.l	#$400000,d0
0001ED74 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001ED78                            
0001ED78 4E75                       		rts	
0001ED7A                            ; End of function Hud_Secs
0001ED7A                            
0001ED7A                            ; ---------------------------------------------------------------------------
0001ED7A                            ; Subroutine to	load time/ring bonus numbers patterns
0001ED7A                            ; ---------------------------------------------------------------------------
0001ED7A                            
0001ED7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ED7A                            
0001ED7A                            
0001ED7A                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001ED7A 45F9 0001 ED06             		lea	(Hud_1000).l,a2
0001ED80 7C03                       		moveq	#3,d6
0001ED82 7800                       		moveq	#0,d4
0001ED84 43FA 0000                  		lea	Art_Hud(pc),a1
0001ED88                            
0001ED88                            Hud_BonusLoop:
0001ED88 7400                       		moveq	#0,d2
0001ED8A 261A                       		move.l	(a2)+,d3
0001ED8C                            
0001ED8C                            loc_1CA1E:
0001ED8C 9283                       		sub.l	d3,d1
0001ED8E 6500                       		bcs.s	loc_1CA26
0001ED90 5242                       		addq.w	#1,d2
0001ED92 60F8                       		bra.s	loc_1CA1E
0001ED94                            ; ===========================================================================
0001ED94                            
0001ED94                            loc_1CA26:
0001ED94 D283                       		add.l	d3,d1
0001ED96 4A42                       		tst.w	d2
0001ED98 6700                       		beq.s	loc_1CA30
0001ED9A 383C 0001                  		move.w	#1,d4
0001ED9E                            
0001ED9E                            loc_1CA30:
0001ED9E 4A44                       		tst.w	d4
0001EDA0 6700                       		beq.s	Hud_ClrBonus
0001EDA2 ED4A                       		lsl.w	#6,d2
0001EDA4 47F1 2000                  		lea	(a1,d2.w),a3
0001EDA8 2C9B                       		move.l	(a3)+,(a6)
0001EDAA 2C9B                       		move.l	(a3)+,(a6)
0001EDAC 2C9B                       		move.l	(a3)+,(a6)
0001EDAE 2C9B                       		move.l	(a3)+,(a6)
0001EDB0 2C9B                       		move.l	(a3)+,(a6)
0001EDB2 2C9B                       		move.l	(a3)+,(a6)
0001EDB4 2C9B                       		move.l	(a3)+,(a6)
0001EDB6 2C9B                       		move.l	(a3)+,(a6)
0001EDB8 2C9B                       		move.l	(a3)+,(a6)
0001EDBA 2C9B                       		move.l	(a3)+,(a6)
0001EDBC 2C9B                       		move.l	(a3)+,(a6)
0001EDBE 2C9B                       		move.l	(a3)+,(a6)
0001EDC0 2C9B                       		move.l	(a3)+,(a6)
0001EDC2 2C9B                       		move.l	(a3)+,(a6)
0001EDC4 2C9B                       		move.l	(a3)+,(a6)
0001EDC6 2C9B                       		move.l	(a3)+,(a6)
0001EDC8                            
0001EDC8                            loc_1CA5A:
0001EDC8 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001EDCC                            
0001EDCC 4E75                       		rts	
0001EDCE                            ; ===========================================================================
0001EDCE                            
0001EDCE                            Hud_ClrBonus:
0001EDCE 7A0F                       		moveq	#$F,d5
0001EDD0                            
0001EDD0                            Hud_ClrBonusLoop:
0001EDD0 2CBC 0000 0000             		move.l	#0,(a6)
0001EDD6 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001EDDA                            
0001EDDA 60EC                       		bra.s	loc_1CA5A
0001EDDC                            ; End of function Hud_TimeRingBonus
0001EDDC                            
0001EDDC                            ; ---------------------------------------------------------------------------
0001EDDC                            ; Subroutine to	load uncompressed lives	counter	patterns
0001EDDC                            ; ---------------------------------------------------------------------------
0001EDDC                            
0001EDDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EDDC                            
0001EDDC                            
0001EDDC                            Hud_Lives:				; XREF: Hud_ChkLives
0001EDDC 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001EDE2 7200                       		moveq	#0,d1
0001EDE4 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001EDE8 45F9 0001 ED0E             		lea	(Hud_10).l,a2
0001EDEE 7C01                       		moveq	#1,d6
0001EDF0 7800                       		moveq	#0,d4
0001EDF2 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001EDF6                            
0001EDF6                            Hud_LivesLoop:
0001EDF6 2D40 0004                  		move.l	d0,4(a6)
0001EDFA 7400                       		moveq	#0,d2
0001EDFC 261A                       		move.l	(a2)+,d3
0001EDFE                            
0001EDFE                            loc_1CA90:
0001EDFE 9283                       		sub.l	d3,d1
0001EE00 6500                       		bcs.s	loc_1CA98
0001EE02 5242                       		addq.w	#1,d2
0001EE04 60F8                       		bra.s	loc_1CA90
0001EE06                            ; ===========================================================================
0001EE06                            
0001EE06                            loc_1CA98:
0001EE06 D283                       		add.l	d3,d1
0001EE08 4A42                       		tst.w	d2
0001EE0A 6700                       		beq.s	loc_1CAA2
0001EE0C 383C 0001                  		move.w	#1,d4
0001EE10                            
0001EE10                            loc_1CAA2:
0001EE10 4A44                       		tst.w	d4
0001EE12 6700                       		beq.s	Hud_ClrLives
0001EE14                            
0001EE14                            loc_1CAA6:
0001EE14 EB4A                       		lsl.w	#5,d2
0001EE16 47F1 2000                  		lea	(a1,d2.w),a3
0001EE1A 2C9B                       		move.l	(a3)+,(a6)
0001EE1C 2C9B                       		move.l	(a3)+,(a6)
0001EE1E 2C9B                       		move.l	(a3)+,(a6)
0001EE20 2C9B                       		move.l	(a3)+,(a6)
0001EE22 2C9B                       		move.l	(a3)+,(a6)
0001EE24 2C9B                       		move.l	(a3)+,(a6)
0001EE26 2C9B                       		move.l	(a3)+,(a6)
0001EE28 2C9B                       		move.l	(a3)+,(a6)
0001EE2A                            
0001EE2A                            loc_1CABC:
0001EE2A 0680 0040 0000             		addi.l	#$400000,d0
0001EE30 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001EE34                            
0001EE34 4E75                       		rts	
0001EE36                            ; ===========================================================================
0001EE36                            
0001EE36                            Hud_ClrLives:
0001EE36 4A46                       		tst.w	d6
0001EE38 67DA                       		beq.s	loc_1CAA6
0001EE3A 7A07                       		moveq	#7,d5
0001EE3C                            
0001EE3C                            Hud_ClrLivesLoop:
0001EE3C 2CBC 0000 0000             		move.l	#0,(a6)
0001EE42 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001EE46 60E2                       		bra.s	loc_1CABC
0001EE48                            ; End of function Hud_Lives
0001EE48                            
0001EE48                            ; ===========================================================================
0001EE48                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001F148                            		even
0001F148                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001F288                            		even
0001F288                            ; ===========================================================================
0001F288                            ; ---------------------------------------------------------------------------
0001F288                            ; When debug mode is currently in use
0001F288                            ; ---------------------------------------------------------------------------
0001F288                            
0001F288                            DebugMode:				; XREF: Obj01; Obj09
0001F288 7000                       		moveq	#0,d0
0001F28A 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001F28E 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001F292 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001F296                            ; ===========================================================================
0001F296 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001F298 0000                       		dc.w Debug_Skip-Debug_Index
0001F29A                            ; ===========================================================================
0001F29A                            
0001F29A                            Debug_Main:				; XREF: Debug_Index
0001F29A 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001F29E 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001F2A4 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001F2AA 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001F2B0 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001F2B6 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001F2BC 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001F2C2 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001F2C8 117C 0000 001A             		move.b	#0,$1A(a0)
0001F2CE 117C 0000 001C             		move.b	#0,$1C(a0)
0001F2D4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001F2DA 6600                       		bne.s	Debug_Zone	; if not, branch
0001F2DC 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001F2E2 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001F2E8 7006                       		moveq	#6,d0		; use 6th debug	item list
0001F2EA 6000                       		bra.s	Debug_UseList
0001F2EC                            ; ===========================================================================
0001F2EC                            
0001F2EC                            Debug_Zone:
0001F2EC 7000                       		moveq	#0,d0
0001F2EE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001F2F2                            
0001F2F2                            Debug_UseList:
0001F2F2 45F9 0000 0000             		lea	(DebugList).l,a2
0001F2F8 D040                       		add.w	d0,d0
0001F2FA D4F2 0000                  		adda.w	(a2,d0.w),a2
0001F2FE 3C1A                       		move.w	(a2)+,d6
0001F300 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001F304 6200                       		bhi.s	loc_1CF9E
0001F306 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001F30C                            
0001F30C                            loc_1CF9E:
0001F30C 6100 0000                  		bsr.w	Debug_ShowItem
0001F310 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001F316 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001F31C                            
0001F31C                            Debug_Skip:				; XREF: Debug_Index
0001F31C 7006                       		moveq	#6,d0
0001F31E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001F324 6700                       		beq.s	loc_1CFBE
0001F326 7000                       		moveq	#0,d0
0001F328 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001F32C                            
0001F32C                            loc_1CFBE:
0001F32C 45F9 0000 0000             		lea	(DebugList).l,a2
0001F332 D040                       		add.w	d0,d0
0001F334 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001F338 3C1A                       		move.w	(a2)+,d6
0001F33A 6100 0000                  		bsr.w	Debug_Control
0001F33E 4EF9 0000 E94A             		jmp	DisplaySprite
0001F344                            
0001F344                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F344                            
0001F344                            
0001F344                            Debug_Control:
0001F344 7800                       		moveq	#0,d4
0001F346 323C 0001                  		move.w	#1,d1
0001F34A 1838 F605                  		move.b	($FFFFF605).w,d4
0001F34E 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001F352 6600                       		bne.s	loc_1D018	; if yes, branch
0001F354 1038 F604                  		move.b	($FFFFF604).w,d0
0001F358 0240 000F                  		andi.w	#$F,d0
0001F35C 6600                       		bne.s	loc_1D000
0001F35E 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001F364 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001F36A 6000 0000                  		bra.w	Debug_BackItem
0001F36E                            ; ===========================================================================
0001F36E                            
0001F36E                            loc_1D000:
0001F36E 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001F372 6600                       		bne.s	loc_1D01C
0001F374 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001F37A 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001F37E 6600                       		bne.s	loc_1D018
0001F380 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001F386                            
0001F386                            loc_1D018:
0001F386 1838 F604                  		move.b	($FFFFF604).w,d4
0001F38A                            
0001F38A                            loc_1D01C:
0001F38A 7200                       		moveq	#0,d1
0001F38C 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001F390 5241                       		addq.w	#1,d1
0001F392 4841                       		swap	d1
0001F394 E881                       		asr.l	#4,d1
0001F396 2428 000C                  		move.l	$C(a0),d2
0001F39A 2628 0008                  		move.l	8(a0),d3
0001F39E 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001F3A2 6700                       		beq.s	loc_1D03C	; if not, branch
0001F3A4 9481                       		sub.l	d1,d2
0001F3A6 6400                       		bcc.s	loc_1D03C
0001F3A8 7400                       		moveq	#0,d2
0001F3AA                            
0001F3AA                            loc_1D03C:
0001F3AA 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001F3AE 6700                       		beq.s	loc_1D052	; if not, branch
0001F3B0 D481                       		add.l	d1,d2
0001F3B2 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001F3B8 6500                       		bcs.s	loc_1D052
0001F3BA 243C 07FF 0000             		move.l	#$7FF0000,d2
0001F3C0                            
0001F3C0                            loc_1D052:
0001F3C0 0804 0002                  		btst	#2,d4
0001F3C4 6700                       		beq.s	loc_1D05E
0001F3C6 9681                       		sub.l	d1,d3
0001F3C8 6400                       		bcc.s	loc_1D05E
0001F3CA 7600                       		moveq	#0,d3
0001F3CC                            
0001F3CC                            loc_1D05E:
0001F3CC 0804 0003                  		btst	#3,d4
0001F3D0 6700                       		beq.s	loc_1D066
0001F3D2 D681                       		add.l	d1,d3
0001F3D4                            
0001F3D4                            loc_1D066:
0001F3D4 2142 000C                  		move.l	d2,$C(a0)
0001F3D8 2143 0008                  		move.l	d3,8(a0)
0001F3DC                            
0001F3DC                            Debug_BackItem:
0001F3DC 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001F3E2 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001F3E4 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001F3EA 6700                       		beq.s	Debug_NextItem	; if not, branch
0001F3EC 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001F3F0 6400                       		bcc.s	Debug_NoLoop
0001F3F2 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001F3F6 6000                       		bra.s	Debug_NoLoop
0001F3F8                            ; ===========================================================================
0001F3F8                            
0001F3F8                            Debug_NextItem:
0001F3F8 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001F3FE 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001F400 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001F404 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001F408 6200                       		bhi.s	Debug_NoLoop
0001F40A 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001F410                            
0001F410                            Debug_NoLoop:
0001F410 6000 0000                  		bra.w	Debug_ShowItem
0001F414                            ; ===========================================================================
0001F414                            
0001F414                            Debug_MakeItem:
0001F414 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001F41A 6700                       		beq.s	Debug_Exit	; if not, branch
0001F41C 4EB9 0000 F0A0             		jsr	SingleObjLoad
0001F422 6600                       		bne.s	Debug_Exit
0001F424 3368 0008 0008             		move.w	8(a0),8(a1)
0001F42A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001F430 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001F434 1368 0001 0001             		move.b	1(a0),1(a1)
0001F43A 1368 0001 0022             		move.b	1(a0),$22(a1)
0001F440 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001F446 7000                       		moveq	#0,d0
0001F448 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001F44C E748                       		lsl.w	#3,d0
0001F44E 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001F454 4E75                       		rts	
0001F456                            ; ===========================================================================
0001F456                            
0001F456                            Debug_Exit:
0001F456 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001F45C 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001F45E 7000                       		moveq	#0,d0
0001F460 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001F464 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001F46C 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001F472 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001F476 3140 000A                  		move.w	d0,$A(a0)
0001F47A 3140 000E                  		move.w	d0,$E(a0)
0001F47E 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001F484 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001F48A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001F490 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001F492 4278 F780                  		clr.w	($FFFFF780).w
0001F496 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001F49C 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001F4A4 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001F4AA 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001F4B0 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001F4B6 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001F4BC                            
0001F4BC                            Debug_DoNothing:
0001F4BC 4E75                       		rts	
0001F4BE                            ; End of function Debug_Control
0001F4BE                            
0001F4BE                            
0001F4BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F4BE                            
0001F4BE                            
0001F4BE                            Debug_ShowItem:				; XREF: Debug_Main
0001F4BE 7000                       		moveq	#0,d0
0001F4C0 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001F4C4 E748                       		lsl.w	#3,d0
0001F4C6 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001F4CC 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001F4D2 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001F4D8 4E75                       		rts	
0001F4DA                            ; End of function Debug_ShowItem
0001F4DA                            
0001F4DA                            ; ===========================================================================
0001F4DA                            ; ---------------------------------------------------------------------------
0001F4DA                            ; Debug	list pointers
0001F4DA                            ; ---------------------------------------------------------------------------
0001F4DA                            DebugList:
0001F4DA                            	include "_inc\Debug list pointers.asm"
0001F4DA                            ; ---------------------------------------------------------------------------
0001F4DA                            ; Debug	list pointers
0001F4DA                            ; ---------------------------------------------------------------------------
0001F4DA 0000                       	dc.w Debug_GHZ-DebugList
0001F4DC 0000                       	dc.w Debug_LZ-DebugList
0001F4DE 0000                       	dc.w Debug_MZ-DebugList
0001F4E0 0000                       	dc.w Debug_SLZ-DebugList
0001F4E2 0000                       	dc.w Debug_SYZ-DebugList
0001F4E4 0000                       	dc.w Debug_SBZ-DebugList
0001F4E6 0000                       	dc.w Debug_Ending-DebugList
0001F4E6 0000                       	dc.w Debug_Ending-DebugList
0001F4E8                            
0001F4E8                            ; ---------------------------------------------------------------------------
0001F4E8                            ; Debug	list - Green Hill
0001F4E8                            ; ---------------------------------------------------------------------------
0001F4E8                            Debug_GHZ:
0001F4E8                            	include "_inc\Debug list - GHZ.asm"
0001F4E8                            ; ---------------------------------------------------------------------------
0001F4E8                            ; Debug	list - Green Hill
0001F4E8                            ; ---------------------------------------------------------------------------
0001F4E8 0010                       	dc.w $10			; number of items in list
0001F4EA 2500 B254                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001F4EE 0000 26BA                  	dc.w 0, ringart+$2000		; subtype, frame, VRAM setting (2 bytes)
0001F4F2 2600 B83A                  	dc.l Map_obj26+$26000000
0001F4F6 0000 0680                  	dc.b 0,	0, 6, $80
0001F4FA 1F00 AAB4                  	dc.l Map_obj1F+$1F000000
0001F4FE 0000 0400                  	dc.b 0,	0, 4, 0
0001F502 2200 AD94                  	dc.l Map_obj22+$22000000
0001F506 0000 0444                  	dc.b 0,	0, 4, $44
0001F50A 2B00 BE5C                  	dc.l Map_obj2B+$2B000000
0001F50E 0000 047B                  	dc.b 0,	0, 4, $7B
0001F512 3600 E322                  	dc.l Map_obj36+$36000000
0001F516 0000 051B                  	dc.b 0,	0, 5, $1B
0001F51A 1800 92AA                  	dc.l Map_obj18+$18000000
0001F51E 0000 4000                  	dc.b 0,	0, $40,	0
0001F522 3B00 E468                  	dc.l Map_obj3B+$3B000000
0001F526 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001F52A 4001 1082                  	dc.l Map_obj40+$40000000
0001F52E 0000 04F0                  	dc.b 0,	0, 4, $F0
0001F532 4100 F59A                  	dc.l Map_obj41+$41000000
0001F536 0000 0523                  	dc.b 0,	0, 5, $23
0001F53A 4200 F7C0                  	dc.l Map_obj42+$42000000
0001F53E 0000 249B                  	dc.b 0,	0, $24,	$9B
0001F542 4400 FAD8                  	dc.l Map_obj44+$44000000
0001F546 0000 434C                  	dc.b 0,	0, $43,	$4C
0001F54A 1900 9318                  	dc.l Map_obj48+$19000000
0001F54E 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001F552 7901 90BC                  	dc.l Map_obj79+$79000000
0001F556 0100 0571                  	dc.w $100, lamppostart
0001F55A 4B00 B294                  	dc.l Map_obj4B+$4B000000
0001F55E 0000 222D                  	dc.w 0, ssringart+$2000
0001F562 7D01 921A                  	dc.l Map_obj7D+$7D000000
0001F566 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001F56A                            	even
0001F56A                            	even
0001F56A                            
0001F56A                            ; ---------------------------------------------------------------------------
0001F56A                            ; Debug	list - Labyrinth
0001F56A                            ; ---------------------------------------------------------------------------
0001F56A                            Debug_LZ:
0001F56A                            	include "_inc\Debug list - LZ.asm"
0001F56A                            ; ---------------------------------------------------------------------------
0001F56A                            ; Debug	list - Labyrinth
0001F56A                            ; ---------------------------------------------------------------------------
0001F56A 0019                       	dc.w $19
0001F56C 2500 B254                  	dc.l Map_obj25+$25000000
0001F570 0000 26BA                  	dc.w 0, ringart+$2000
0001F574 2600 B83A                  	dc.l Map_obj26+$26000000
0001F578 0000 0680                  	dc.b 0,	0, 6, $80
0001F57C 4100 F59A                  	dc.l Map_obj41+$41000000
0001F580 0000 0523                  	dc.b 0,	0, 5, $23
0001F584 2C00 BF02                  	dc.l Map_obj2C+$2C000000
0001F588 0800 2486                  	dc.b 8,	0, $24,	$86
0001F58C 2D00 C116                  	dc.l Map_obj2D+$2D000000
0001F590 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001F594 1601 38E8                  	dc.l Map_obj16+$16000000
0001F598 0000 03CC                  	dc.b 0,	0, 3, $CC
0001F59C 1601 38E8                  	dc.l Map_obj16+$16000000
0001F5A0 0203 03CC                  	dc.b 2,	3, 3, $CC
0001F5A4 3300 D5F0                  	dc.l Map_obj33+$33000000
0001F5A8 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001F5AC 3200 D1B4                  	dc.l Map_obj32+$32000000
0001F5B0 0000 0513                  	dc.b 0,	0, 5, $13
0001F5B4 3600 E322                  	dc.l Map_obj36+$36000000
0001F5B8 0000 051B                  	dc.b 0,	0, 5, $1B
0001F5BC 5201 19B6                  	dc.l Map_obj52a+$52000000
0001F5C0 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001F5C4 6101 3B1E                  	dc.l Map_obj61+$61000000
0001F5C8 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001F5CC 6101 3B1E                  	dc.l Map_obj61+$61000000
0001F5D0 1301 43E6                  	dc.b $13, 1, $43, $E6
0001F5D4 6101 3B1E                  	dc.l Map_obj61+$61000000
0001F5D8 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001F5DC 6201 3C72                  	dc.l Map_obj62+$62000000
0001F5E0 0000 443E                  	dc.b 0,	0, $44,	$3E
0001F5E4 6101 3B1E                  	dc.l Map_obj61+$61000000
0001F5E8 2702 43E6                  	dc.b $27, 2, $43, $E6
0001F5EC 6101 3B1E                  	dc.l Map_obj61+$61000000
0001F5F0 3003 43E6                  	dc.b $30, 3, $43, $E6
0001F5F4 6301 3FE2                  	dc.l Map_obj63+$63000000
0001F5F8 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001F5FC 6001 3832                  	dc.l Map_obj60+$60000000
0001F600 0000 0467                  	dc.b 0,	0, 4, $67
0001F604 6401 439A                  	dc.l Map_obj64+$64000000
0001F608 8413 8348                  	dc.b $84, $13, $83, $48
0001F60C 6501 4522                  	dc.l Map_obj65+$65000000
0001F610 0202 C259                  	dc.b 2,	2, $C2,	$59
0001F614 6501 4522                  	dc.l Map_obj65+$65000000
0001F618 0909 C259                  	dc.b 9,	9, $C2,	$59
0001F61C 0B01 2C5C                  	dc.l Map_obj0B+$B000000
0001F620 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001F624 0C01 2D2C                  	dc.l Map_obj0C+$C000000
0001F628 0200 4328                  	dc.b 2,	0, $43,	$28
0001F62C 7901 90BC                  	dc.l Map_obj79+$79000000
0001F630 0100 0571                  	dc.w $100, lamppostart
0001F634                            	even
0001F634                            	even
0001F634                            
0001F634                            ; ---------------------------------------------------------------------------
0001F634                            ; Debug	list - Marble
0001F634                            ; ---------------------------------------------------------------------------
0001F634                            Debug_MZ:
0001F634                            	include "_inc\Debug list - MZ.asm"
0001F634                            ; ---------------------------------------------------------------------------
0001F634                            ; Debug	list - Marble
0001F634                            ; ---------------------------------------------------------------------------
0001F634 0012                       	dc.w $12
0001F636 2500 B254                  	dc.l Map_obj25+$25000000
0001F63A 0000 26BA                  	dc.w 0, ringart+$2000
0001F63E 2600 B83A                  	dc.l Map_obj26+$26000000
0001F642 0000 0680                  	dc.b 0,	0, 6, $80
0001F646 2200 AD94                  	dc.l Map_obj22+$22000000
0001F64A 0000 0444                  	dc.b 0,	0, 4, $44
0001F64E 3600 E322                  	dc.l Map_obj36+$36000000
0001F652 0000 051B                  	dc.b 0,	0, 5, $1B
0001F656 4100 F59A                  	dc.l Map_obj41+$41000000
0001F65A 0000 0523                  	dc.b 0,	0, 5, $23
0001F65E 1300 C644                  	dc.l Map_obj14+$13000000
0001F662 0000 0345                  	dc.b 0,	0, 3, $45
0001F666 4601 01B8                  	dc.l Map_obj46+$46000000
0001F66A 0000 4000                  	dc.b 0,	0, $40,	0
0001F66E 4C01 0B32                  	dc.l Map_obj4C+$4C000000
0001F672 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001F676 4E01 0E16                  	dc.l Map_obj4E+$4E000000
0001F67A 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001F67E 3300 D5F0                  	dc.l Map_obj33+$33000000
0001F682 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001F686 5001 1210                  	dc.l Map_obj50+$50000000
0001F68A 0000 247B                  	dc.b 0,	0, $24,	$7B
0001F68E 5101 16DC                  	dc.l Map_obj51+$51000000
0001F692 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001F696 5201 1960                  	dc.l Map_obj52+$52000000
0001F69A 0000 02B8                  	dc.b 0,	0, 2, $B8
0001F69E 5300 98B0                  	dc.l Map_obj53+$53000000
0001F6A2 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001F6A6 5401 0AF8                  	dc.l Map_obj54+$54000000
0001F6AA 0000 8680                  	dc.b 0,	0, $86,	$80
0001F6AE 5501 1B54                  	dc.l Map_obj55+$55000000
0001F6B2 0000 04B8                  	dc.b 0,	0, 4, $B8
0001F6B6 7801 8D50                  	dc.l Map_obj78+$78000000
0001F6BA 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001F6BE 7901 90BC                  	dc.l Map_obj79+$79000000
0001F6C2 0100 0571                  	dc.w $100, lamppostart
0001F6C6                            	even
0001F6C6                            	even
0001F6C6                            
0001F6C6                            ; ---------------------------------------------------------------------------
0001F6C6                            ; Debug	list - Star Light
0001F6C6                            ; ---------------------------------------------------------------------------
0001F6C6                            Debug_SLZ:
0001F6C6                            	include "_inc\Debug list - SLZ.asm"
0001F6C6                            ; ---------------------------------------------------------------------------
0001F6C6                            ; Debug	list - Star Light
0001F6C6                            ; ---------------------------------------------------------------------------
0001F6C6 000F                       	dc.w $F
0001F6C8 2500 B254                  	dc.l Map_obj25+$25000000
0001F6CC 0000 26BA                  	dc.w 0, ringart+$2000
0001F6D0 2600 B83A                  	dc.l Map_obj26+$26000000
0001F6D4 0000 0680                  	dc.b 0,	0, 6, $80
0001F6D8 5901 2668                  	dc.l Map_obj59+$59000000
0001F6DC 0000 4000                  	dc.b 0,	0, $40,	0
0001F6E0 5300 98B0                  	dc.l Map_obj53+$53000000
0001F6E4 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001F6E8 1800 9308                  	dc.l Map_obj18b+$18000000
0001F6EC 0000 4000                  	dc.b 0,	0, $40,	0
0001F6F0 5A01 27B0                  	dc.l Map_obj5A+$5A000000
0001F6F4 0000 4000                  	dc.b 0,	0, $40,	0
0001F6F8 5B01 2976                  	dc.l Map_obj5B+$5B000000
0001F6FC 0000 4000                  	dc.b 0,	0, $40,	0
0001F700 5D01 2F64                  	dc.l Map_obj5D+$5D000000
0001F704 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001F708 5E01 3304                  	dc.l Map_obj5E+$5E000000
0001F70C 0000 0374                  	dc.b 0,	0, 3, $74
0001F710 4100 F59A                  	dc.l Map_obj41+$41000000
0001F714 0000 0523                  	dc.b 0,	0, 5, $23
0001F718 1300 C644                  	dc.l Map_obj14+$13000000
0001F71C 0000 0480                  	dc.b 0,	0, 4, $80
0001F720 1C00 99F6                  	dc.l Map_obj1C+$1C000000
0001F724 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001F728 5F01 3582                  	dc.l Map_obj5F+$5F000000
0001F72C 0000 0400                  	dc.b 0,	0, 4, 0
0001F730 6001 3832                  	dc.l Map_obj60+$60000000
0001F734 0000 2429                  	dc.b 0,	0, $24,	$29
0001F738 7901 90BC                  	dc.l Map_obj79+$79000000
0001F73C 0100 0571                  	dc.w $100, lamppostart
0001F740                            	even
0001F740                            	even
0001F740                            
0001F740                            ; ---------------------------------------------------------------------------
0001F740                            ; Debug	list - Spring Yard
0001F740                            ; ---------------------------------------------------------------------------
0001F740                            Debug_SYZ:
0001F740                            	include "_inc\Debug list - SYZ.asm"
0001F740                            ; ---------------------------------------------------------------------------
0001F740                            ; Debug	list - Spring Yard
0001F740                            ; ---------------------------------------------------------------------------
0001F740 000F                       	dc.w $F
0001F742 2500 B254                  	dc.l Map_obj25+$25000000
0001F746 0000 26BA                  	dc.w 0, ringart+$2000
0001F74A 2600 B83A                  	dc.l Map_obj26+$26000000
0001F74E 0000 0680                  	dc.b 0,	0, 6, $80
0001F752 3600 E322                  	dc.l Map_obj36+$36000000
0001F756 0000 051B                  	dc.b 0,	0, 5, $1B
0001F75A 4100 F59A                  	dc.l Map_obj41+$41000000
0001F75E 0000 0523                  	dc.b 0,	0, 5, $23
0001F762 4300 FA1A                  	dc.l Map_obj43+$43000000
0001F766 0000 04B8                  	dc.b 0,	0, 4, $B8
0001F76A 1201 0244                  	dc.l Map_obj12+$12000000
0001F76E 0000 0000                  	dc.b 0,	0, 0, 0
0001F772 4701 03BE                  	dc.l Map_obj47+$47000000
0001F776 0000 0380                  	dc.b 0,	0, 3, $80
0001F77A 1F00 AAB4                  	dc.l Map_obj1F+$1F000000
0001F77E 0000 0400                  	dc.b 0,	0, 4, 0
0001F782 2200 AD94                  	dc.l Map_obj22+$22000000
0001F786 0000 0444                  	dc.b 0,	0, 4, $44
0001F78A 5001 1210                  	dc.l Map_obj50+$50000000
0001F78E 0000 247B                  	dc.b 0,	0, $24,	$7B
0001F792 1800 92F6                  	dc.l Map_obj18a+$18000000
0001F796 0000 4000                  	dc.b 0,	0, $40,	0
0001F79A 5601 2004                  	dc.l Map_obj56+$56000000
0001F79E 0000 4000                  	dc.b 0,	0, $40,	0
0001F7A2 3200 D1B4                  	dc.l Map_obj32+$32000000
0001F7A6 0000 0513                  	dc.b 0,	0, 5, $13
0001F7AA 7801 8D50                  	dc.l Map_obj78+$78000000
0001F7AE 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001F7B2 7901 90BC                  	dc.l Map_obj79+$79000000
0001F7B6 0100 0571                  	dc.w $100, lamppostart
0001F7BA                            	even
0001F7BA                            	even
0001F7BA                            
0001F7BA                            ; ---------------------------------------------------------------------------
0001F7BA                            ; Debug	list - Scrap Brain
0001F7BA                            ; ---------------------------------------------------------------------------
0001F7BA                            Debug_SBZ:
0001F7BA                            	include "_inc\Debug list - SBZ.asm"
0001F7BA                            ; ---------------------------------------------------------------------------
0001F7BA                            ; Debug	list - Scrap Brain
0001F7BA                            ; ---------------------------------------------------------------------------
0001F7BA 001D                       	dc.w $1D
0001F7BC 2500 B254                  	dc.l Map_obj25+$25000000
0001F7C0 0000 26BA                  	dc.w 0, ringart+$2000
0001F7C4 2600 B83A                  	dc.l Map_obj26+$26000000
0001F7C8 0000 0680                  	dc.b 0,	0, 6, $80
0001F7CC 5F01 3582                  	dc.l Map_obj5F+$5F000000
0001F7D0 0000 0400                  	dc.b 0,	0, 4, 0
0001F7D4 6001 3832                  	dc.l Map_obj60+$60000000
0001F7D8 0000 0429                  	dc.b 0,	0, 4, $29
0001F7DC 7801 8D50                  	dc.l Map_obj78+$78000000
0001F7E0 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001F7E4 1501 23B6                  	dc.l Map_obj15b+$15000000
0001F7E8 0702 4391                  	dc.b 7,	2, $43,	$91
0001F7EC 6701 767E                  	dc.l Map_obj67+$67000000
0001F7F0 E000 C344                  	dc.b $E0, 0, $C3, $44
0001F7F4 5201 1960                  	dc.l Map_obj52+$52000000
0001F7F8 2802 22C0                  	dc.b $28, 2, $22, $C0
0001F7FC 3200 D1B4                  	dc.l Map_obj32+$32000000
0001F800 0000 0513                  	dc.b 0,	0, 5, $13
0001F804 6901 78E6                  	dc.l Map_obj69+$69000000
0001F808 0300 4492                  	dc.b 3,	0, $44,	$92
0001F80C 6901 7940                  	dc.l Map_obj69a+$69000000
0001F810 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001F814 6A01 7BA0                  	dc.l Map_obj6A+$6A000000
0001F818 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001F81C 5300 98B0                  	dc.l Map_obj53+$53000000
0001F820 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001F824 5201 1960                  	dc.l Map_obj52+$52000000
0001F828 3903 4460                  	dc.b $39, 3, $44, $60
0001F82C 6B01 7F46                  	dc.l Map_obj6B+$6B000000
0001F830 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001F834 2A00 9D5E                  	dc.l Map_obj2A+$2A000000
0001F838 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001F83C 6B01 7F46                  	dc.l Map_obj6B+$6B000000
0001F840 1301 22C0                  	dc.b $13, 1, $22, $C0
0001F844 6A01 7BA0                  	dc.l Map_obj6A+$6A000000
0001F848 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001F84C 6B01 7F46                  	dc.l Map_obj6B+$6B000000
0001F850 2401 22C0                  	dc.b $24, 1, $22, $C0
0001F854 6A01 7BA0                  	dc.l Map_obj6A+$6A000000
0001F858 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001F85C 6B01 7F46                  	dc.l Map_obj6B+$6B000000
0001F860 3401 22C0                  	dc.b $34, 1, $22, $C0
0001F864 6C01 8108                  	dc.l Map_obj6C+$6C000000
0001F868 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001F86C 6D00 FE98                  	dc.l Map_obj6D+$6D000000
0001F870 6400 83D9                  	dc.b $64, 0, $83, $D9
0001F874 6D00 FE98                  	dc.l Map_obj6D+$6D000000
0001F878 640B 83D9                  	dc.b $64, $B, $83, $D9
0001F87C 6E01 81BE                  	dc.l Map_obj6E+$6E000000
0001F880 0400 047E                  	dc.b 4,	0, 4, $7E
0001F884 7001 8608                  	dc.l Map_obj70+$70000000
0001F888 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001F88C 7101 2DFA                  	dc.l Map_obj71+$71000000
0001F890 1100 8680                  	dc.b $11, 0, $86, $80
0001F894 1E00 A1CC                  	dc.l Map_obj1E+$1E000000
0001F898 0400 2302                  	dc.b 4,	0, $23,	2
0001F89C 7901 90BC                  	dc.l Map_obj79+$79000000
0001F8A0 0100 0571                  	dc.w $100, lamppostart
0001F8A4                            	even
0001F8A4                            	even
0001F8A4                            
0001F8A4                            ; ---------------------------------------------------------------------------
0001F8A4                            ; Debug	list - ending sequence / special stage
0001F8A4                            ; ---------------------------------------------------------------------------
0001F8A4                            Debug_Ending:
0001F8A4                            	include "_inc\Debug list - Ending and SS.asm"
0001F8A4                            ; ---------------------------------------------------------------------------
0001F8A4                            ; Debug	list - ending sequence / special stage
0001F8A4                            ; ---------------------------------------------------------------------------
0001F8A4 000D                       	dc.w $D
0001F8A6 2500 B254                  	dc.l Map_obj25+$25000000
0001F8AA 0000 26BA                  	dc.w 0, ringart+$2000
0001F8AE 4701 03BE                  	dc.l Map_obj47+$47000000
0001F8B2 0000 0380                  	dc.b 0,	0, 3, $80
0001F8B6 2800 A7E6                  	dc.l Map_obj28a+$28000000
0001F8BA 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001F8BE 2800 A7E6                  	dc.l Map_obj28a+$28000000
0001F8C2 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001F8C6 2800 A7E6                  	dc.l Map_obj28a+$28000000
0001F8CA 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001F8CE 2800 A7CE                  	dc.l Map_obj28+$28000000
0001F8D2 0D00 0553                  	dc.b $D, 0, 5, $53
0001F8D6 2800 A7CE                  	dc.l Map_obj28+$28000000
0001F8DA 0E00 0553                  	dc.b $E, 0, 5, $53
0001F8DE 2800 A7CE                  	dc.l Map_obj28+$28000000
0001F8E2 0F00 0573                  	dc.b $F, 0, 5, $73
0001F8E6 2800 A7CE                  	dc.l Map_obj28+$28000000
0001F8EA 1000 0573                  	dc.b $10, 0, 5,	$73
0001F8EE 2800 A7E6                  	dc.l Map_obj28a+$28000000
0001F8F2 1100 0585                  	dc.b $11, 0, 5,	$85
0001F8F6 2800 A7FE                  	dc.l Map_obj28b+$28000000
0001F8FA 1200 0593                  	dc.b $12, 0, 5,	$93
0001F8FE 2800 A7E6                  	dc.l Map_obj28a+$28000000
0001F902 1300 0565                  	dc.b $13, 0, 5,	$65
0001F906 2800 A7FE                  	dc.l Map_obj28b+$28000000
0001F90A 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001F90E                            	even
0001F90E                            	even
0001F90E                            
0001F90E                            ; ---------------------------------------------------------------------------
0001F90E                            ; Main level load blocks
0001F90E                            ; ---------------------------------------------------------------------------
0001F90E                            MainLoadBlocks:
0001F90E                            	include "_inc\Main level load blocks.asm"
0001F90E                            ; ---------------------------------------------------------------------------
0001F90E                            ; Main level load blocks
0001F90E                            ;
0001F90E                            ; ===FORMAT===
0001F90E                            ; level	patterns + (1st	PLC num	* 10^6)
0001F90E                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001F90E                            ; 256x256 mappings
0001F90E                            ; blank, music (unused), pal index (unused), pal index
0001F90E                            ; ---------------------------------------------------------------------------
0001F90E 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001F912 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001F916 0000 0000                  	dc.l Blk256_GHZ
0001F91A 0081 0404                  	dc.b 0,	$81, 4,	4
0001F91E 0000 0000                  	dc.l Nem_LZ+$6000000
0001F922 0000 0000                  	dc.l Blk16_LZ+$7000000
0001F926 0000 0000                  	dc.l Blk256_LZ
0001F92A 0082 0505                  	dc.b 0,	$82, 5,	5
0001F92E 0000 0000                  	dc.l Nem_MZ+$8000000
0001F932 0000 0000                  	dc.l Blk16_MZ+$9000000
0001F936 0000 0000                  	dc.l Blk256_MZ
0001F93A 0083 0606                  	dc.b 0,	$83, 6,	6
0001F93E 0000 0000                  	dc.l Nem_SLZ+$A000000
0001F942 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001F946 0000 0000                  	dc.l Blk256_SLZ
0001F94A 0084 0707                  	dc.b 0,	$84, 7,	7
0001F94E 0000 0000                  	dc.l Nem_SYZ+$C000000
0001F952 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001F956 0000 0000                  	dc.l Blk256_SYZ
0001F95A 0085 0808                  	dc.b 0,	$85, 8,	8
0001F95E 0000 0000                  	dc.l Nem_SBZ+$E000000
0001F962 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001F966 0000 0000                  	dc.l Blk256_SBZ
0001F96A 0086 0909                  	dc.b 0,	$86, 9,	9
0001F96E 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001F972 0000 0000                  	dc.l Blk16_GHZ
0001F976 0000 0000                  	dc.l Blk256_GHZ
0001F97A 0086 1313                  	dc.b 0,	$86, $13, $13
0001F97E                            	even
0001F97E                            	even
0001F97E                            
0001F97E                            ; ---------------------------------------------------------------------------
0001F97E                            ; Pattern load cues
0001F97E                            ; ---------------------------------------------------------------------------
0001F97E                            ArtLoadCues:
0001F97E                            	include "_inc\Pattern load cues.asm"
0001F97E                            ; ---------------------------------------------------------------------------
0001F97E                            ; Pattern load cues - index
0001F97E                            ; ---------------------------------------------------------------------------
0001F97E 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001F982 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001F986 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001F98A 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001F98E 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001F992 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001F996 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001F99A 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001F99E 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001F9A2 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001F9A6 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001F9AA 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001F9AE 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001F9B2 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001F9B6 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001F9BA 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001F9BE                            ; ---------------------------------------------------------------------------
0001F9BE                            ; Pattern load cues - standard block 1
0001F9BE                            ; ---------------------------------------------------------------------------
0001F9BE 0002                       PLC_Main:	dc.w 2
0001F9C0 0000 0000                  		dc.l Nem_Hud		; HUD
0001F9C4 D940                       		dc.w $D940
0001F9C6 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001F9CA FA80                       		dc.w $FA80
0001F9CC 0000 0000                  		dc.l Nem_Ring		; rings
0001F9D0 D740                       		dc.w ringart*$20
0001F9D2                            ; ---------------------------------------------------------------------------
0001F9D2                            ; Pattern load cues - standard block 2
0001F9D2                            ; ---------------------------------------------------------------------------
0001F9D2 0002                       PLC_Main2:	dc.w 2
0001F9D4 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001F9D8 AE20                       		dc.w lamppostart*$20
0001F9DA 0000 0000                  		dc.l Nem_Points		; points from enemy
0001F9DE AD00                       		dc.w pointsart*$20
0001F9E0 0000 0000                  		dc.l Nem_Monitors	; monitors
0001F9E4 D000                       		dc.w $D000
0001F9E6                            ; ---------------------------------------------------------------------------
0001F9E6                            ; Pattern load cues - explosion
0001F9E6                            ; ---------------------------------------------------------------------------
0001F9E6 0000                       PLC_Explode:	dc.w 0
0001F9E8 0000 0000                  		dc.l Nem_Explode	; explosion
0001F9EC B400                       		dc.w $B400
0001F9EE                            ; ---------------------------------------------------------------------------
0001F9EE                            ; Pattern load cues - game/time	over
0001F9EE                            ; ---------------------------------------------------------------------------
0001F9EE 0000                       PLC_GameOver:	dc.w 0
0001F9F0 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001F9F4 ABC0                       		dc.w $ABC0
0001F9F6                            ; ---------------------------------------------------------------------------
0001F9F6                            ; Pattern load cues - Green Hill
0001F9F6                            ; ---------------------------------------------------------------------------
0001F9F6 0009                       PLC_GHZ:	dc.w $9
0001F9F8 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001F9FC 6B00                       		dc.w $6B00
0001F9FE 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001FA02 7A00                       		dc.w $7A00
0001FA04 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001FA08 8000                       		dc.w $8000
0001FA0A 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FA0E 8880                       		dc.w $8880
0001FA10 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001FA14 8F60                       		dc.w $8F60
0001FA16 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001FA1A 9360                       		dc.w $9360
0001FA1C 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001FA20 9E00                       		dc.w $9E00
0001FA22 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FA26 A360                       		dc.w $A360
0001FA28 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FA2C A460                       		dc.w $A460
0001FA2E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FA32 A660                       		dc.w $A660
0001FA34 0005                       PLC_GHZ2:	dc.w 5
0001FA36 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001FA3A 7000                       		dc.w $7000
0001FA3C 0000 0000                  		dc.l Nem_Bridge		; bridge
0001FA40 71C0                       		dc.w $71C0
0001FA42 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001FA46 7300                       		dc.w $7300
0001FA48 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001FA4C 7540                       		dc.w $7540
0001FA4E 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001FA52 A1E0                       		dc.w $A1E0
0001FA54 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001FA58 6980                       		dc.w $6980
0001FA5A                            ; ---------------------------------------------------------------------------
0001FA5A                            ; Pattern load cues - Labyrinth
0001FA5A                            ; ---------------------------------------------------------------------------
0001FA5A 000A                       PLC_LZ:		dc.w $A
0001FA5C 0000 0000                  		dc.l Nem_LzBlock1	; block
0001FA60 3C00                       		dc.w $3C00
0001FA62 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001FA66 3E00                       		dc.w $3E00
0001FA68 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001FA6C 4B20                       		dc.w $4B20
0001FA6E 0000 0000                  		dc.l Nem_Water		; water	surface
0001FA72 6000                       		dc.w $6000
0001FA74 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001FA78 6200                       		dc.w $6200
0001FA7A 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001FA7E 6500                       		dc.w $6500
0001FA80 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001FA84 6900                       		dc.w $6900
0001FA86 0000 0000                  		dc.l Nem_LzBlock3	; block
0001FA8A 7780                       		dc.w $7780
0001FA8C 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001FA90 7880                       		dc.w $7880
0001FA92 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001FA96 7980                       		dc.w $7980
0001FA98 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001FA9C 94C0                       		dc.w $94C0
0001FA9E 000C                       PLC_LZ2:	dc.w $C
0001FAA0 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001FAA4 7BC0                       		dc.w $7BC0
0001FAA6 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001FAAA 7CC0                       		dc.w $7CC0
0001FAAC 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001FAB0 7EC0                       		dc.w $7EC0
0001FAB2 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001FAB6 5D20                       		dc.w $5D20
0001FAB8 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001FABC 8800                       		dc.w $8800
0001FABE 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001FAC2 89E0                       		dc.w $89E0
0001FAC4 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FAC8 8CE0                       		dc.w $8CE0
0001FACA 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001FACE 90C0                       		dc.w $90C0
0001FAD0 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FAD4 A1E0                       		dc.w $A1E0
0001FAD6 0000 0000                  		dc.l Nem_Cork		; cork block
0001FADA A000                       		dc.w $A000
0001FADC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FAE0 A360                       		dc.w $A360
0001FAE2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FAE6 A460                       		dc.w $A460
0001FAE8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FAEC A660                       		dc.w $A660
0001FAEE                            ; ---------------------------------------------------------------------------
0001FAEE                            ; Pattern load cues - Marble
0001FAEE                            ; ---------------------------------------------------------------------------
0001FAEE 0008                       PLC_MZ:		dc.w 8
0001FAF0 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001FAF4 6000                       		dc.w $6000
0001FAF6 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001FAFA 68A0                       		dc.w $68A0
0001FAFC 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001FB00 7000                       		dc.w $7000
0001FB02 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001FB06 71C0                       		dc.w $71C0
0001FB08 0000 0000                  		dc.l Nem_Lava		; lava
0001FB0C 7500                       		dc.w $7500
0001FB0E 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FB12 8880                       		dc.w $8880
0001FB14 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001FB18 8F60                       		dc.w $8F60
0001FB1A 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001FB1E 9700                       		dc.w $9700
0001FB20 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FB24 9FE0                       		dc.w $9FE0
0001FB26 0004                       PLC_MZ2:	dc.w 4
0001FB28 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001FB2C A260                       		dc.w $A260
0001FB2E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FB32 A360                       		dc.w $A360
0001FB34 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FB38 A460                       		dc.w $A460
0001FB3A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FB3E A660                       		dc.w $A660
0001FB40 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001FB44 5700                       		dc.w $5700
0001FB46                            ; ---------------------------------------------------------------------------
0001FB46                            ; Pattern load cues - Star Light
0001FB46                            ; ---------------------------------------------------------------------------
0001FB46 0007                       PLC_SLZ:	dc.w 7
0001FB48 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001FB4C 8000                       		dc.w $8000
0001FB4E 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FB52 8520                       		dc.w $8520
0001FB54 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001FB58 9000                       		dc.w $9000
0001FB5A 0000 0000                  		dc.l Nem_SlzBlock	; block
0001FB5E 9C00                       		dc.w $9C00
0001FB60 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001FB64 A260                       		dc.w $A260
0001FB66 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FB6A A360                       		dc.w $A360
0001FB6C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FB70 A460                       		dc.w $A460
0001FB72 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FB76 A660                       		dc.w $A660
0001FB78 0005                       PLC_SLZ2:	dc.w 5
0001FB7A 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001FB7E 6E80                       		dc.w $6E80
0001FB80 0000 0000                  		dc.l Nem_Fan		; fan
0001FB84 7400                       		dc.w $7400
0001FB86 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001FB8A 7980                       		dc.w $7980
0001FB8C 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001FB90 7B80                       		dc.w $7B80
0001FB92 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001FB96 9B00                       		dc.w $9B00
0001FB98 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001FB9C 9E00                       		dc.w $9E00
0001FB9E                            ; ---------------------------------------------------------------------------
0001FB9E                            ; Pattern load cues - Spring Yard
0001FB9E                            ; ---------------------------------------------------------------------------
0001FB9E 0003                       PLC_SYZ:	dc.w 3
0001FBA0 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001FBA4 8000                       		dc.w $8000
0001FBA6 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FBAA 8880                       		dc.w $8880
0001FBAC 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001FBB0 8F60                       		dc.w $8F60
0001FBB2 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001FBB6 9700                       		dc.w $9700
0001FBB8 0006                       PLC_SYZ2:	dc.w 6
0001FBBA 0000 0000                  		dc.l Nem_Bumper		; bumper
0001FBBE 7000                       		dc.w $7000
0001FBC0 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001FBC4 72C0                       		dc.w $72C0
0001FBC6 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001FBCA 7740                       		dc.w $7740
0001FBCC 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FBD0 A1E0                       		dc.w $A1E0
0001FBD2 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FBD6 A360                       		dc.w $A360
0001FBD8 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FBDC A460                       		dc.w $A460
0001FBDE 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FBE2 A660                       		dc.w $A660
0001FBE4                            ; ---------------------------------------------------------------------------
0001FBE4                            ; Pattern load cues - Scrap Brain
0001FBE4                            ; ---------------------------------------------------------------------------
0001FBE4 000A                       PLC_SBZ:	dc.w $A
0001FBE6 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001FBEA 5800                       		dc.w $5800
0001FBEC 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001FBF0 5D00                       		dc.w $5D00
0001FBF2 0000 0000                  		dc.l Nem_Girder		; girder
0001FBF6 5E00                       		dc.w $5E00
0001FBF8 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001FBFC 6040                       		dc.w $6040
0001FBFE 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001FC02 6880                       		dc.w $6880
0001FC04 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001FC08 6900                       		dc.w $6900
0001FC0A 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001FC0E 7220                       		dc.w $7220
0001FC10 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001FC14 76A0                       		dc.w $76A0
0001FC16 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001FC1A 7B20                       		dc.w $7B20
0001FC1C 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001FC20 7EA0                       		dc.w $7EA0
0001FC22 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001FC26 9860                       		dc.w $9860
0001FC28 000C                       PLC_SBZ2:	dc.w $C
0001FC2A 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FC2E 5600                       		dc.w $5600
0001FC30 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001FC34 8000                       		dc.w $8000
0001FC36 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FC3A 8520                       		dc.w $8520
0001FC3C 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001FC40 8C00                       		dc.w $8C00
0001FC42 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001FC46 8DE0                       		dc.w $8DE0
0001FC48 0000 0000                  		dc.l Nem_Electric	; electric orb
0001FC4C 8FC0                       		dc.w $8FC0
0001FC4E 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001FC52 9240                       		dc.w $9240
0001FC54 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001FC58 7F20                       		dc.w $7F20
0001FC5A 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001FC5E 9BE0                       		dc.w $9BE0
0001FC60 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FC64 A1E0                       		dc.w $A1E0
0001FC66 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FC6A A360                       		dc.w $A360
0001FC6C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FC70 A460                       		dc.w $A460
0001FC72 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FC76 A660                       		dc.w $A660
0001FC78                            ; ---------------------------------------------------------------------------
0001FC78                            ; Pattern load cues - title card
0001FC78                            ; ---------------------------------------------------------------------------
0001FC78 0000                       PLC_TitleCard:	dc.w 0
0001FC7A 0000 0000                  		dc.l Nem_TitleCard
0001FC7E B000                       		dc.w $B000
0001FC80                            ; ---------------------------------------------------------------------------
0001FC80                            ; Pattern load cues - act 3 boss
0001FC80                            ; ---------------------------------------------------------------------------
0001FC80 0005                       PLC_Boss:	dc.w 5
0001FC82 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001FC86 8000                       		dc.w $8000
0001FC88 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001FC8C 8D80                       		dc.w $8D80
0001FC8E 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001FC92 93A0                       		dc.w $93A0
0001FC94 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001FC98 A300                       		dc.w $A300
0001FC9A 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001FC9E A300                       		dc.w $A300
0001FCA0 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001FCA4 A540                       		dc.w $A540
0001FCA6                            ; ---------------------------------------------------------------------------
0001FCA6                            ; Pattern load cues - act 1/2 signpost
0001FCA6                            ; ---------------------------------------------------------------------------
0001FCA6 0002                       PLC_Signpost:	dc.w 2
0001FCA8 0000 0000                  		dc.l Nem_SignPost	; signpost
0001FCAC D000                       		dc.w $D000
0001FCAE 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001FCB2 96C0                       		dc.w $96C0
0001FCB4 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001FCB8 8C40                       		dc.w $8C40
0001FCBA                            ; ---------------------------------------------------------------------------
0001FCBA                            ; Pattern load cues - beta special stage warp effect
0001FCBA                            ; ---------------------------------------------------------------------------
0001FCBA 0000                       PLC_Warp:	dc.w 0
0001FCBC 0000 0000                  		dc.l Nem_Warp
0001FCC0 A820                       		dc.w $A820
0001FCC2                            ; ---------------------------------------------------------------------------
0001FCC2                            ; Pattern load cues - special stage
0001FCC2                            ; ---------------------------------------------------------------------------
0001FCC2 000C                       PLC_SpeStage:	dc.w $C
0001FCC4 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001FCC8 0000                       		dc.w 0
0001FCCA 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001FCCE 0A20                       		dc.w $A20
0001FCD0 0000 0000                  		dc.l Nem_Bumper		; bumper
0001FCD4 4760                       		dc.w $4760
0001FCD6 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001FCDA 4A20                       		dc.w $4A20
0001FCDC 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001FCE0 4C60                       		dc.w $4C60
0001FCE2 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001FCE6 5E00                       		dc.w $5E00
0001FCE8 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001FCEC 6E00                       		dc.w $6E00
0001FCEE 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001FCF2 7E00                       		dc.w $7E00
0001FCF4 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001FCF8 8E00                       		dc.w $8E00
0001FCFA 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001FCFE 9E00                       		dc.w $9E00
0001FD00 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001FD04 BE00                       		dc.w $BE00
0001FD06 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001FD0A EE00                       		dc.w $EE00
0001FD0C 0000 0000                  		dc.l Nem_Ring		; rings
0001FD10 45A0                       		dc.w ssringart*$20
0001FD12                            ; ---------------------------------------------------------------------------
0001FD12                            ; Pattern load cues - GHZ animals
0001FD12                            ; ---------------------------------------------------------------------------
0001FD12 0001                       PLC_GHZAnimals:	dc.w 1
0001FD14 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FD18 B000                       		dc.w $B000
0001FD1A 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FD1E B240                       		dc.w $B240
0001FD20                            ; ---------------------------------------------------------------------------
0001FD20                            ; Pattern load cues - LZ animals
0001FD20                            ; ---------------------------------------------------------------------------
0001FD20 0001                       PLC_LZAnimals:	dc.w 1
0001FD22 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001FD26 B000                       		dc.w $B000
0001FD28 0000 0000                  		dc.l Nem_Seal		; seal
0001FD2C B240                       		dc.w $B240
0001FD2E                            ; ---------------------------------------------------------------------------
0001FD2E                            ; Pattern load cues - MZ animals
0001FD2E                            ; ---------------------------------------------------------------------------
0001FD2E 0001                       PLC_MZAnimals:	dc.w 1
0001FD30 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001FD34 B000                       		dc.w $B000
0001FD36 0000 0000                  		dc.l Nem_Seal		; seal
0001FD3A B240                       		dc.w $B240
0001FD3C                            ; ---------------------------------------------------------------------------
0001FD3C                            ; Pattern load cues - SLZ animals
0001FD3C                            ; ---------------------------------------------------------------------------
0001FD3C 0001                       PLC_SLZAnimals:	dc.w 1
0001FD3E 0000 0000                  		dc.l Nem_Pig		; pig
0001FD42 B000                       		dc.w $B000
0001FD44 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FD48 B240                       		dc.w $B240
0001FD4A                            ; ---------------------------------------------------------------------------
0001FD4A                            ; Pattern load cues - SYZ animals
0001FD4A                            ; ---------------------------------------------------------------------------
0001FD4A 0001                       PLC_SYZAnimals:	dc.w 1
0001FD4C 0000 0000                  		dc.l Nem_Pig		; pig
0001FD50 B000                       		dc.w $B000
0001FD52 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FD56 B240                       		dc.w $B240
0001FD58                            ; ---------------------------------------------------------------------------
0001FD58                            ; Pattern load cues - SBZ animals
0001FD58                            ; ---------------------------------------------------------------------------
0001FD58 0001                       PLC_SBZAnimals:	dc.w 1
0001FD5A 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FD5E B000                       		dc.w $B000
0001FD60 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FD64 B240                       		dc.w $B240
0001FD66                            ; ---------------------------------------------------------------------------
0001FD66                            ; Pattern load cues - special stage results screen
0001FD66                            ; ---------------------------------------------------------------------------
0001FD66 0001                       PLC_SpeStResult:dc.w 1
0001FD68 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001FD6C A820                       		dc.w $A820
0001FD6E 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001FD72 AA20                       		dc.w $AA20
0001FD74                            ; ---------------------------------------------------------------------------
0001FD74                            ; Pattern load cues - ending sequence
0001FD74                            ; ---------------------------------------------------------------------------
0001FD74 000C                       PLC_Ending:	dc.w $C
0001FD76 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001FD7A 6B00                       		dc.w $6B00
0001FD7C 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001FD80 7400                       		dc.w $7400
0001FD82 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001FD86 78A0                       		dc.w $78A0
0001FD88 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001FD8C 7C20                       		dc.w $7C20
0001FD8E 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001FD92 A480                       		dc.w $A480
0001FD94 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FD98 AA60                       		dc.w $AA60
0001FD9A 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FD9E ACA0                       		dc.w $ACA0
0001FDA0 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001FDA4 AE60                       		dc.w $AE60
0001FDA6 0000 0000                  		dc.l Nem_Seal		; seal
0001FDAA B0A0                       		dc.w $B0A0
0001FDAC 0000 0000                  		dc.l Nem_Pig		; pig
0001FDB0 B260                       		dc.w $B260
0001FDB2 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FDB6 B4A0                       		dc.w $B4A0
0001FDB8 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001FDBC B660                       		dc.w $B660
0001FDBE 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001FDC2 B8A0                       		dc.w $B8A0
0001FDC4                            ; ---------------------------------------------------------------------------
0001FDC4                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001FDC4                            ; ---------------------------------------------------------------------------
0001FDC4 0002                       PLC_TryAgain:	dc.w 2
0001FDC6 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001FDCA 78A0                       		dc.w $78A0
0001FDCC 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001FDD0 7C20                       		dc.w $7C20
0001FDD2 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001FDD6 B400                       		dc.w $B400
0001FDD8                            ; ---------------------------------------------------------------------------
0001FDD8                            ; Pattern load cues - Eggman on SBZ 2
0001FDD8                            ; ---------------------------------------------------------------------------
0001FDD8 0002                       PLC_EggmanSBZ2:	dc.w 2
0001FDDA 0000 0000                  		dc.l Nem_SbzBlock	; block
0001FDDE A300                       		dc.w $A300
0001FDE0 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001FDE4 8000                       		dc.w $8000
0001FDE6 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FDEA 9400                       		dc.w $9400
0001FDEC                            ; ---------------------------------------------------------------------------
0001FDEC                            ; Pattern load cues - final boss
0001FDEC                            ; ---------------------------------------------------------------------------
0001FDEC 0004                       PLC_FZBoss:	dc.w 4
0001FDEE 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001FDF2 7400                       		dc.w $7400
0001FDF4 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001FDF8 6000                       		dc.w $6000
0001FDFA 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001FDFE 8000                       		dc.w $8000
0001FE00 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001FE04 8E00                       		dc.w $8E00
0001FE06 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001FE0A A540                       		dc.w $A540
0001FE0C                            		even
0001FE0C                            		even
0001FE0C                            
0001FE0C                            		incbin	misc\padding.bin
0001FEFA                            		even
0001FEFA                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0002035C                            		even
0002035C                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
00020454                            		even
00020454                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0002054E                            		even
0002054E                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0002151A                            		even
0002151A                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00022EC4 00                         		even
00022EC4                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00022F06                            		even
00022F06                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00022FC4                            		even
00022FC4                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
0002346C                            		even
0002346C                            ; ---------------------------------------------------------------------------
0002346C                            ; Sprite mappings - Sonic
0002346C                            ; ---------------------------------------------------------------------------
0002346C                            Map_Sonic:
0002346C                            	include "_maps\Sonic.asm"
0002346C                            ; ---------------------------------------------------------------------------
0002346C                            ; Sprite mappings - Sonic
0002346C                            ; ---------------------------------------------------------------------------
0002346C 0000 0000                  		dc.w byte_21292-Map_Sonic, byte_21293-Map_Sonic
00023470 0000 0000                  		dc.w byte_212A8-Map_Sonic, byte_212B8-Map_Sonic
00023474 0000 0000                  		dc.w byte_212C8-Map_Sonic, byte_212D8-Map_Sonic
00023478 0000 0000                  		dc.w byte_212E8-Map_Sonic, byte_212FD-Map_Sonic
0002347C 0000 0000                  		dc.w byte_21308-Map_Sonic, byte_21313-Map_Sonic
00023480 0000 0000                  		dc.w byte_21328-Map_Sonic, byte_21333-Map_Sonic
00023484 0000 0000                  		dc.w byte_21343-Map_Sonic, byte_2135D-Map_Sonic
00023488 0000 0000                  		dc.w byte_2137C-Map_Sonic, byte_21391-Map_Sonic
0002348C 0000 0000                  		dc.w byte_213AB-Map_Sonic, byte_213C0-Map_Sonic
00023490 0000 0000                  		dc.w byte_213DA-Map_Sonic, byte_213EF-Map_Sonic
00023494 0000 0000                  		dc.w byte_213FA-Map_Sonic, byte_21405-Map_Sonic
00023498 0000 0000                  		dc.w byte_2141A-Map_Sonic, byte_21425-Map_Sonic
0002349C 0000 0000                  		dc.w byte_21435-Map_Sonic, byte_21454-Map_Sonic
000234A0 0000 0000                  		dc.w byte_21473-Map_Sonic, byte_21488-Map_Sonic
000234A4 0000 0000                  		dc.w byte_214A2-Map_Sonic, byte_214B7-Map_Sonic
000234A8 0000 0000                  		dc.w byte_214D1-Map_Sonic, byte_214DC-Map_Sonic
000234AC 0000 0000                  		dc.w byte_214E7-Map_Sonic, byte_214F2-Map_Sonic
000234B0 0000 0000                  		dc.w byte_214FD-Map_Sonic, byte_21512-Map_Sonic
000234B4 0000 0000                  		dc.w byte_21522-Map_Sonic, byte_21537-Map_Sonic
000234B8 0000 0000                  		dc.w byte_21547-Map_Sonic, byte_21552-Map_Sonic
000234BC 0000 0000                  		dc.w byte_2155D-Map_Sonic, byte_21568-Map_Sonic
000234C0 0000 0000                  		dc.w byte_21573-Map_Sonic, byte_21588-Map_Sonic
000234C4 0000 0000                  		dc.w byte_21593-Map_Sonic, byte_215A8-Map_Sonic
000234C8 0000 0000                  		dc.w byte_215B3-Map_Sonic, byte_215B9-Map_Sonic
000234CC 0000 0000                  		dc.w byte_215BF-Map_Sonic, byte_215C5-Map_Sonic
000234D0 0000 0000                  		dc.w byte_215CB-Map_Sonic, byte_215D1-Map_Sonic
000234D4 0000 0000                  		dc.w byte_215DC-Map_Sonic, byte_215E2-Map_Sonic
000234D8 0000 0000                  		dc.w byte_215ED-Map_Sonic, byte_215F3-Map_Sonic
000234DC 0000 0000                  		dc.w byte_215FE-Map_Sonic, byte_21613-Map_Sonic
000234E0 0000 0000                  		dc.w byte_21628-Map_Sonic, byte_21638-Map_Sonic
000234E4 0000 0000                  		dc.w byte_21648-Map_Sonic, byte_21658-Map_Sonic
000234E8 0000 0000                  		dc.w byte_21663-Map_Sonic, byte_21673-Map_Sonic
000234EC 0000 0000                  		dc.w byte_21683-Map_Sonic, byte_21693-Map_Sonic
000234F0 0000 0000                  		dc.w byte_216A8-Map_Sonic, byte_216BD-Map_Sonic
000234F4 0000 0000                  		dc.w byte_216D7-Map_Sonic, byte_216F1-Map_Sonic
000234F8 0000 0000                  		dc.w byte_216FC-Map_Sonic, byte_2170C-Map_Sonic
000234FC 0000 0000                  		dc.w byte_21717-Map_Sonic, byte_21727-Map_Sonic
00023500 0000 0000                  		dc.w byte_21732-Map_Sonic, byte_21742-Map_Sonic
00023504 0000 0000                  		dc.w byte_21752-Map_Sonic, byte_2176C-Map_Sonic
00023508 0000 0000                  		dc.w byte_21786-Map_Sonic, byte_21791-Map_Sonic
0002350C 0000 0000                  		dc.w byte_217A1-Map_Sonic, byte_217A7-Map_Sonic
00023510 0000 0000                  		dc.w byte_217AD-Map_Sonic, byte_217B3-Map_Sonic
00023514 0000 0000                  		dc.w byte_217C3-Map_Sonic, byte_217D3-Map_Sonic
00023518 0000 0000                  		dc.w byte_217E3-Map_Sonic, byte_217F3-Map_Sonic
0002351C 00                         byte_21292:	dc.b 0
0002351D 04                         byte_21293:	dc.b 4			; standing
0002351E EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00023523 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0
00023528 0408 000B F0               		dc.b 4,	8, 0, $B, $F0
0002352D 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8
00023532 03                         byte_212A8:	dc.b 3			; waiting 1
00023533 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00023538 FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
0002353D 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00023542 03                         byte_212B8:	dc.b 3			; waiting 2
00023543 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00023548 FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
0002354D 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00023552 03                         byte_212C8:	dc.b 3			; waiting 3
00023553 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00023558 FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
0002355D 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00023562 03                         byte_212D8:	dc.b 3			; looking up
00023563 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
00023568 0408 0009 F0               		dc.b 4,	8, 0, 9, $F0
0002356D 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00023572 04                         byte_212E8:	dc.b 4			; walking 1-1
00023573 EB0D 0000 EC               		dc.b $EB, $D, 0, 0, $EC
00023578 FB09 0008 EC               		dc.b $FB, 9, 0,	8, $EC
0002357D FB06 000E 04               		dc.b $FB, 6, 0,	$E, 4
00023582 0B04 0014 EC               		dc.b $B, 4, 0, $14, $EC
00023587 02                         byte_212FD:	dc.b 2			; walking 1-2
00023588 EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED
0002358D FC0E 0008 F5               		dc.b $FC, $E, 0, 8, $F5
00023592 02                         byte_21308:	dc.b 2			; walking 1-3
00023593 ED09 0000 F3               		dc.b $ED, 9, 0,	0, $F3
00023598 FD0A 0006 F3               		dc.b $FD, $A, 0, 6, $F3
0002359D 04                         byte_21313:	dc.b 4			; walking 1-4
0002359E EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
000235A3 FB09 0006 EC               		dc.b $FB, 9, 0,	6, $EC
000235A8 FB06 000C 04               		dc.b $FB, 6, 0,	$C, 4
000235AD 0B04 0012 EC               		dc.b $B, 4, 0, $12, $EC
000235B2 02                         byte_21328:	dc.b 2			; walking 1-5
000235B3 EC09 0000 F3               		dc.b $EC, 9, 0,	0, $F3
000235B8 FC0E 0006 EB               		dc.b $FC, $E, 0, 6, $EB
000235BD 03                         byte_21333:	dc.b 3			; walking 1-6
000235BE ED0D 0000 EC               		dc.b $ED, $D, 0, 0, $EC
000235C3 FD0C 0008 F4               		dc.b $FD, $C, 0, 8, $F4
000235C8 0509 000C F4               		dc.b 5,	9, 0, $C, $F4
000235CD 05                         byte_21343:	dc.b 5			; walking 2-1
000235CE EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
000235D3 EB06 0006 03               		dc.b $EB, 6, 0,	6, 3
000235D8 FB08 000C EB               		dc.b $FB, 8, 0,	$C, $EB
000235DD 0309 000F F3               		dc.b 3,	9, 0, $F, $F3
000235E2 1300 0015 FB               		dc.b $13, 0, 0,	$15, $FB
000235E7 06                         byte_2135D:	dc.b 6			; walking 2-2
000235E8 EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
000235ED EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
000235F2 FC0C 0008 EC               		dc.b $FC, $C, 0, 8, $EC
000235F7 0409 000C F4               		dc.b 4,	9, 0, $C, $F4
000235FC FC05 0012 0C               		dc.b $FC, 5, 0,	$12, $C
00023601 F400 0016 14               		dc.b $F4, 0, 0,	$16, $14
00023606 04                         byte_2137C:	dc.b 4			; walking 2-3
00023607 ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
0002360C ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
00023611 FD0D 0008 F5               		dc.b $FD, $D, 0, 8, $F5
00023616 0D08 0010 FD               		dc.b $D, 8, 0, $10, $FD
0002361B 05                         byte_21391:	dc.b 5			; walking 2-4
0002361C EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
00023621 EB05 0006 03               		dc.b $EB, 5, 0,	6, 3
00023626 FB0D 000A F3               		dc.b $FB, $D, 0, $A, $F3
0002362B 0B08 0012 F3               		dc.b $B, 8, 0, $12, $F3
00023630 1304 0015 FB               		dc.b $13, 4, 0,	$15, $FB
00023635 04                         byte_213AB:	dc.b 4			; walking 2-5
00023636 EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
0002363B EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
00023640 FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4
00023645 0C08 0010 FC               		dc.b $C, 8, 0, $10, $FC
0002364A 05                         byte_213C0:	dc.b 5			; walking 2-6
0002364B ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
00023650 ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
00023655 FD00 0008 ED               		dc.b $FD, 0, 0,	8, $ED
0002365A FD0D 0009 F5               		dc.b $FD, $D, 0, 9, $F5
0002365F 0D08 0011 FD               		dc.b $D, 8, 0, $11, $FD
00023664 04                         byte_213DA:	dc.b 4			; walking 3-1
00023665 F407 0000 EB               		dc.b $F4, 7, 0,	0, $EB
0002366A EC09 0008 FB               		dc.b $EC, 9, 0,	8, $FB
0002366F FC04 000E FB               		dc.b $FC, 4, 0,	$E, $FB
00023674 0409 0010 FB               		dc.b 4,	9, 0, $10, $FB
00023679 02                         byte_213EF:	dc.b 2			; walking 3-2
0002367A F407 0000 EC               		dc.b $F4, 7, 0,	0, $EC
0002367F EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC
00023684 02                         byte_213FA:	dc.b 2			; walking 3-3
00023685 F406 0000 ED               		dc.b $F4, 6, 0,	0, $ED
0002368A F40A 0006 FD               		dc.b $F4, $A, 0, 6, $FD
0002368F 04                         byte_21405:	dc.b 4			; walking 3-4
00023690 F406 0000 EB               		dc.b $F4, 6, 0,	0, $EB
00023695 EC09 0006 FB               		dc.b $EC, 9, 0,	6, $FB
0002369A FC04 000C FB               		dc.b $FC, 4, 0,	$C, $FB
0002369F 0409 000E FB               		dc.b 4,	9, 0, $E, $FB
000236A4 02                         byte_2141A:	dc.b 2			; walking 3-5
000236A5 F406 0000 EC               		dc.b $F4, 6, 0,	0, $EC
000236AA F40B 0006 FC               		dc.b $F4, $B, 0, 6, $FC
000236AF 03                         byte_21425:	dc.b 3			; walking 3-6
000236B0 F407 0000 ED               		dc.b $F4, 7, 0,	0, $ED
000236B5 EC00 0008 FD               		dc.b $EC, 0, 0,	8, $FD
000236BA F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD
000236BF 06                         byte_21435:	dc.b 6			; walking 4-1
000236C0 FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
000236C5 ED04 0006 F3               		dc.b $ED, 4, 0,	6, $F3
000236CA F504 0008 EB               		dc.b $F5, 4, 0,	8, $EB
000236CF F50A 000A FB               		dc.b $F5, $A, 0, $A, $FB
000236D4 0D00 0013 FB               		dc.b $D, 0, 0, $13, $FB
000236D9 FD00 0014 13               		dc.b $FD, 0, 0,	$14, $13
000236DE 06                         byte_21454:	dc.b 6			; walking 4-2
000236DF FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
000236E4 E408 0006 F4               		dc.b $E4, 8, 0,	6, $F4
000236E9 EC04 0009 FC               		dc.b $EC, 4, 0,	9, $FC
000236EE F404 000B EC               		dc.b $F4, 4, 0,	$B, $EC
000236F3 F40A 000D FC               		dc.b $F4, $A, 0, $D, $FC
000236F8 0C00 0016 FC               		dc.b $C, 0, 0, $16, $FC
000236FD 04                         byte_21473:	dc.b 4			; walking 4-3
000236FE FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
00023703 F304 0006 ED               		dc.b $F3, 4, 0,	6, $ED
00023708 EB0A 0008 FD               		dc.b $EB, $A, 0, 8, $FD
0002370D 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
00023712 05                         byte_21488:	dc.b 5			; walking 4-4
00023713 FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
00023718 ED08 0006 F3               		dc.b $ED, 8, 0,	6, $F3
0002371D F504 0009 EB               		dc.b $F5, 4, 0,	9, $EB
00023722 F50D 000B FB               		dc.b $F5, $D, 0, $B, $FB
00023727 0508 0013 FB               		dc.b 5,	8, 0, $13, $FB
0002372C 04                         byte_214A2:	dc.b 4			; walking 4-5
0002372D FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
00023732 F404 0006 EC               		dc.b $F4, 4, 0,	6, $EC
00023737 EC0A 0008 FC               		dc.b $EC, $A, 0, 8, $FC
0002373C 0404 0011 FC               		dc.b 4,	4, 0, $11, $FC
00023741 05                         byte_214B7:	dc.b 5			; walking 4-6
00023742 FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
00023747 EB0A 0006 FD               		dc.b $EB, $A, 0, 6, $FD
0002374C F304 000F ED               		dc.b $F3, 4, 0,	$F, $ED
00023751 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
00023756 0B00 0013 FD               		dc.b $B, 0, 0, $13, $FD
0002375B 02                         byte_214D1:	dc.b 2			; running 1-1
0002375C EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00023761 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00023766 02                         byte_214DC:	dc.b 2			; running 1-2
00023767 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
0002376C FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00023771 02                         byte_214E7:	dc.b 2			; running 1-3
00023772 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00023777 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
0002377C 02                         byte_214F2:	dc.b 2			; running 1-4
0002377D EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00023782 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00023787 04                         byte_214FD:	dc.b 4			; running 2-1
00023788 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
0002378D EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00023792 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00023797 FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
0002379C 03                         byte_21512:	dc.b 3			; running 2-2
0002379D EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
000237A2 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
000237A7 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
000237AC 04                         byte_21522:	dc.b 4			; running 2-3
000237AD EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
000237B2 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
000237B7 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
000237BC FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
000237C1 03                         byte_21537:	dc.b 3			; running 2-4
000237C2 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
000237C7 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
000237CC FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
000237D1 02                         byte_21547:	dc.b 2			; running 3-1
000237D2 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
000237D7 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
000237DC 02                         byte_21552:	dc.b 2			; running 3-2
000237DD F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
000237E2 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
000237E7 02                         byte_2155D:	dc.b 2			; running 3-3
000237E8 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
000237ED F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
000237F2 02                         byte_21568:	dc.b 2			; running 3-4
000237F3 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
000237F8 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
000237FD 04                         byte_21573:	dc.b 4			; running 4-1
000237FE FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
00023803 F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
00023808 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
0002380D 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
00023812 02                         byte_21588:	dc.b 2			; running 4-2
00023813 F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
00023818 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
0002381D 04                         byte_21593:	dc.b 4			; running 4-3
0002381E FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
00023823 F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
00023828 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
0002382D 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
00023832 02                         byte_215A8:	dc.b 2			; running 4-4
00023833 F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
00023838 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
0002383D 01                         byte_215B3:	dc.b 1			; rolling 1
0002383E F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023843 01                         byte_215B9:	dc.b 1			; rolling 2
00023844 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023849 01                         byte_215BF:	dc.b 1			; rolling 3
0002384A F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002384F 01                         byte_215C5:	dc.b 1			; rolling 4
00023850 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023855 01                         byte_215CB:	dc.b 1			; rolling 5
00023856 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002385B 02                         byte_215D1:	dc.b 2			; warped 1 (unused)
0002385C F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC
00023861 F402 000C 0C               		dc.b $F4, 2, 0,	$C, $C
00023866 01                         byte_215DC:	dc.b 1			; warped 2 (unused)
00023867 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002386C 02                         byte_215E2:	dc.b 2			; warped 3 (unused)
0002386D EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4
00023872 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4
00023877 01                         byte_215ED:	dc.b 1			; warped 4 (unused)
00023878 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002387D 02                         byte_215F3:	dc.b 2			; stopping 1
0002387E ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
00023883 FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0
00023888 04                         byte_215FE:	dc.b 4			; stopping 2
00023889 ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
0002388E FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0
00023893 0D04 000E 00               		dc.b $D, 4, 0, $E, 0
00023898 0500 0010 E8               		dc.b 5,	0, 0, $10, $E8
0002389D 04                         byte_21613:	dc.b 4			; ducking
0002389E F404 0000 FC               		dc.b $F4, 4, 0,	0, $FC
000238A3 FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4
000238A8 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4
000238AD 0400 000D EC               		dc.b 4,	0, 0, $D, $EC
000238B2 03                         byte_21628:	dc.b 3			; balancing 1
000238B3 EC08 0800 E8               		dc.b $EC, 8, 8,	0, $E8
000238B8 F402 0803 00               		dc.b $F4, 2, 8,	3, 0
000238BD F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0
000238C2 03                         byte_21638:	dc.b 3			; balancing 2
000238C3 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8
000238C8 040D 080C E0               		dc.b 4,	$D, 8, $C, $E0
000238CD 0C00 1814 00               		dc.b $C, 0, $18, $14, 0
000238D2 03                         byte_21648:	dc.b 3			; spinning 1 (LZ)
000238D3 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
000238D8 FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
000238DD 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
000238E2 02                         byte_21658:	dc.b 2			; spinning 2 (LZ)
000238E3 F40A 0000 E8               		dc.b $F4, $A, 0, 0, $E8
000238E8 F40A 0800 00               		dc.b $F4, $A, 8, 0, 0
000238ED 03                         byte_21663:	dc.b 3			; spinning 3 (LZ)
000238EE F40D 0000 E4               		dc.b $F4, $D, 0, 0, $E4
000238F3 FC00 0008 04               		dc.b $FC, 0, 0,	8, 4
000238F8 040C 0009 EC               		dc.b 4,	$C, 0, 9, $EC
000238FD 03                         byte_21673:	dc.b 3			; spinning 4 (LZ)
000238FE F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
00023903 FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
00023908 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
0002390D 03                         byte_21683:	dc.b 3			; bouncing
0002390E E80B 0000 F0               		dc.b $E8, $B, 0, 0, $F0
00023913 0804 000C F8               		dc.b 8,	4, 0, $C, $F8
00023918 1000 000E F8               		dc.b $10, 0, 0,	$E, $F8
0002391D 04                         byte_21693:	dc.b 4			; hanging 1 (LZ)
0002391E F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
00023923 0005 000C 08               		dc.b 0,	5, 0, $C, 8
00023928 F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
0002392D F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
00023932 04                         byte_216A8:	dc.b 4			; hanging 2 (LZ)
00023933 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
00023938 0005 000C 08               		dc.b 0,	5, 0, $C, 8
0002393D F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
00023942 F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
00023947 05                         byte_216BD:	dc.b 5			; celebration leap 1 (unused)
00023948 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
0002394D F001 0009 0C               		dc.b $F0, 1, 0,	9, $C
00023952 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
00023957 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
0002395C 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
00023961 05                         byte_216D7:	dc.b 5			; celebration leap 2 (unused)
00023962 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
00023967 E801 0009 0C               		dc.b $E8, 1, 0,	9, $C
0002396C 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
00023971 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
00023976 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
0002397B 02                         byte_216F1:	dc.b 2			; pushing 1
0002397C ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
00023981 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
00023986 03                         byte_216FC:	dc.b 3			; pushing 2
00023987 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
0002398C 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
00023991 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
00023996 02                         byte_2170C:	dc.b 2			; pushing 3
00023997 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
0002399C 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
000239A1 03                         byte_21717:	dc.b 3			; pushing 4
000239A2 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
000239A7 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
000239AC 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
000239B1 02                         byte_21727:	dc.b 2			; surfing or sliding (unused)
000239B2 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
000239B7 FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0
000239BC 03                         byte_21732:	dc.b 3			; collecting bubble (unused)
000239BD EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
000239C2 0405 0009 F8               		dc.b 4,	5, 0, 9, $F8
000239C7 E400 000D F8               		dc.b $E4, 0, 0,	$D, $F8
000239CC 03                         byte_21742:	dc.b 3			; death	1
000239CD E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
000239D2 E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
000239D7 F80B 000A F4               		dc.b $F8, $B, 0, $A, $F4
000239DC 05                         byte_21752:	dc.b 5			; drowning
000239DD E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
000239E2 E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
000239E7 F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
000239EC 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
000239F1 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
000239F6 05                         byte_2176C:	dc.b 5			; death	2
000239F7 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
000239FC E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
00023A01 F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
00023A06 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
00023A0B 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
00023A10 02                         byte_21786:	dc.b 2			; shrinking 1 (unused)
00023A11 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00023A16 F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0
00023A1B 03                         byte_21791:	dc.b 3			; shrinking 2 (unused)
00023A1C EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00023A21 F40E 0003 F0               		dc.b $F4, $E, 0, 3, $F0
00023A26 0C08 000F F8               		dc.b $C, 8, 0, $F, $F8
00023A2B 01                         byte_217A1:	dc.b 1			; shrinking 3 (unused)
00023A2C F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4
00023A31 01                         byte_217A7:	dc.b 1			; shrinking 4 (unused)
00023A32 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00023A37 01                         byte_217AD:	dc.b 1			; shrinking 5 (unused)
00023A38 F801 0000 FC               		dc.b $F8, 1, 0,	0, $FC
00023A3D 03                         byte_217B3:	dc.b 3			; injury
00023A3E F40D 0800 E4               		dc.b $F4, $D, 8, 0, $E4
00023A43 FC05 0808 04               		dc.b $FC, 5, 8,	8, 4
00023A48 0408 080C EC               		dc.b 4,	8, 8, $C, $EC
00023A4D 03                         byte_217C3:	dc.b 3			; spinning 5 (LZ)
00023A4E F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC
00023A53 FC00 0808 F4               		dc.b $FC, 0, 8,	8, $F4
00023A58 040C 0809 F4               		dc.b 4,	$C, 8, 9, $F4
00023A5D 03                         byte_217D3:	dc.b 3			; spinning 6 (LZ)
00023A5E F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC
00023A63 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00023A68 080C 000E F4               		dc.b 8,	$C, 0, $E, $F4
00023A6D 03                         byte_217E3:	dc.b 3			; collecting bubble (LZ)
00023A6E EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
00023A73 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC
00023A78 0301 0012 0C               		dc.b 3,	1, 0, $12, $C
00023A7D 02                         byte_217F3:	dc.b 2			; water	slide (LZ)
00023A7E F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC
00023A83 F802 0010 0C               		dc.b $F8, 2, 0,	$10, $C
00023A88                            		even
00023A88                            		even
00023A88                            
00023A88                            ; ---------------------------------------------------------------------------
00023A88                            ; Uncompressed graphics	loading	array for Sonic
00023A88                            ; ---------------------------------------------------------------------------
00023A88                            SonicDynPLC:
00023A88                            	include "_inc\Sonic dynamic pattern load cues.asm"
00023A88                            ; ---------------------------------------------------------------------------
00023A88                            ; Uncompressed graphics	loading	array for Sonic
00023A88                            ; ---------------------------------------------------------------------------
00023A88 0000                       		dc.w SonPLC_Blank-SonicDynPLC
00023A8A 0000                       		dc.w SonPLC_Stand-SonicDynPLC
00023A8C 0000                       		dc.w SonPLC_Wait1-SonicDynPLC
00023A8E 0000                       		dc.w SonPLC_Wait2-SonicDynPLC
00023A90 0000                       		dc.w SonPLC_Wait3-SonicDynPLC
00023A92 0000                       		dc.w SonPLC_LookUp-SonicDynPLC
00023A94 0000                       		dc.w SonPLC_Walk11-SonicDynPLC
00023A96 0000                       		dc.w SonPLC_Walk12-SonicDynPLC
00023A98 0000                       		dc.w SonPLC_Walk13-SonicDynPLC
00023A9A 0000                       		dc.w SonPLC_Walk14-SonicDynPLC
00023A9C 0000                       		dc.w SonPLC_Walk15-SonicDynPLC
00023A9E 0000                       		dc.w SonPLC_Walk16-SonicDynPLC
00023AA0 0000                       		dc.w SonPLC_Walk21-SonicDynPLC
00023AA2 0000                       		dc.w SonPLC_Walk22-SonicDynPLC
00023AA4 0000                       		dc.w SonPLC_Walk23-SonicDynPLC
00023AA6 0000                       		dc.w SonPLC_Walk24-SonicDynPLC
00023AA8 0000                       		dc.w SonPLC_Walk25-SonicDynPLC
00023AAA 0000                       		dc.w SonPLC_Walk26-SonicDynPLC
00023AAC 0000                       		dc.w SonPLC_Walk31-SonicDynPLC
00023AAE 0000                       		dc.w SonPLC_Walk32-SonicDynPLC
00023AB0 0000                       		dc.w SonPLC_Walk33-SonicDynPLC
00023AB2 0000                       		dc.w SonPLC_Walk34-SonicDynPLC
00023AB4 0000                       		dc.w SonPLC_Walk35-SonicDynPLC
00023AB6 0000                       		dc.w SonPLC_Walk36-SonicDynPLC
00023AB8 0000                       		dc.w SonPLC_Walk41-SonicDynPLC
00023ABA 0000                       		dc.w SonPLC_Walk42-SonicDynPLC
00023ABC 0000                       		dc.w SonPLC_Walk43-SonicDynPLC
00023ABE 0000                       		dc.w SonPLC_Walk44-SonicDynPLC
00023AC0 0000                       		dc.w SonPLC_Walk45-SonicDynPLC
00023AC2 0000                       		dc.w SonPLC_Walk46-SonicDynPLC
00023AC4 0000                       		dc.w SonPLC_Run11-SonicDynPLC
00023AC6 0000                       		dc.w SonPLC_Run12-SonicDynPLC
00023AC8 0000                       		dc.w SonPLC_Run13-SonicDynPLC
00023ACA 0000                       		dc.w SonPLC_Run14-SonicDynPLC
00023ACC 0000                       		dc.w SonPLC_Run21-SonicDynPLC
00023ACE 0000                       		dc.w SonPLC_Run22-SonicDynPLC
00023AD0 0000                       		dc.w SonPLC_Run23-SonicDynPLC
00023AD2 0000                       		dc.w SonPLC_Run24-SonicDynPLC
00023AD4 0000                       		dc.w SonPLC_Run31-SonicDynPLC
00023AD6 0000                       		dc.w SonPLC_Run32-SonicDynPLC
00023AD8 0000                       		dc.w SonPLC_Run33-SonicDynPLC
00023ADA 0000                       		dc.w SonPLC_Run34-SonicDynPLC
00023ADC 0000                       		dc.w SonPLC_Run41-SonicDynPLC
00023ADE 0000                       		dc.w SonPLC_Run42-SonicDynPLC
00023AE0 0000                       		dc.w SonPLC_Run43-SonicDynPLC
00023AE2 0000                       		dc.w SonPLC_Run44-SonicDynPLC
00023AE4 0000                       		dc.w SonPLC_Roll1-SonicDynPLC
00023AE6 0000                       		dc.w SonPLC_Roll2-SonicDynPLC
00023AE8 0000                       		dc.w SonPLC_Roll3-SonicDynPLC
00023AEA 0000                       		dc.w SonPLC_Roll4-SonicDynPLC
00023AEC 0000                       		dc.w SonPLC_Roll5-SonicDynPLC
00023AEE 0000                       		dc.w SonPLC_Warp1-SonicDynPLC
00023AF0 0000                       		dc.w SonPLC_Warp2-SonicDynPLC
00023AF2 0000                       		dc.w SonPLC_Warp3-SonicDynPLC
00023AF4 0000                       		dc.w SonPLC_Warp4-SonicDynPLC
00023AF6 0000                       		dc.w SonPLC_Stop1-SonicDynPLC
00023AF8 0000                       		dc.w SonPLC_Stop2-SonicDynPLC
00023AFA 0000                       		dc.w SonPLC_Duck-SonicDynPLC
00023AFC 0000                       		dc.w SonPLC_Balance1-SonicDynPLC
00023AFE 0000                       		dc.w SonPLC_Balance2-SonicDynPLC
00023B00 0000                       		dc.w SonPLC_Float1-SonicDynPLC
00023B02 0000                       		dc.w SonPLC_Float2-SonicDynPLC
00023B04 0000                       		dc.w SonPLC_Float3-SonicDynPLC
00023B06 0000                       		dc.w SonPLC_Float4-SonicDynPLC
00023B08 0000                       		dc.w SonPLC_Spring-SonicDynPLC
00023B0A 0000                       		dc.w SonPLC_Hang1-SonicDynPLC
00023B0C 0000                       		dc.w SonPLC_Hang2-SonicDynPLC
00023B0E 0000                       		dc.w SonPLC_Leap1-SonicDynPLC
00023B10 0000                       		dc.w SonPLC_Leap2-SonicDynPLC
00023B12 0000                       		dc.w SonPLC_Push1-SonicDynPLC
00023B14 0000                       		dc.w SonPLC_Push2-SonicDynPLC
00023B16 0000                       		dc.w SonPLC_Push3-SonicDynPLC
00023B18 0000                       		dc.w SonPLC_Push4-SonicDynPLC
00023B1A 0000                       		dc.w SonPLC_Slide-SonicDynPLC
00023B1C 0000                       		dc.w SonPLC_BblUnk-SonicDynPLC
00023B1E 0000                       		dc.w SonPLC_Death1-SonicDynPLC
00023B20 0000                       		dc.w SonPLC_Drown-SonicDynPLC
00023B22 0000                       		dc.w SonPLC_Burnt-SonicDynPLC
00023B24 0000                       		dc.w SonPLC_Shrink1-SonicDynPLC
00023B26 0000                       		dc.w SonPLC_Shrink2-SonicDynPLC
00023B28 0000                       		dc.w SonPLC_Shrink3-SonicDynPLC
00023B2A 0000                       		dc.w SonPLC_Shrink4-SonicDynPLC
00023B2C 0000                       		dc.w SonPLC_Shrink5-SonicDynPLC
00023B2E 0000                       		dc.w SonPLC_Float1-SonicDynPLC
00023B30 0000                       		dc.w SonPLC_Float3-SonicDynPLC
00023B32 0000                       		dc.w SonPLC_Injury1-SonicDynPLC
00023B34 0000                       		dc.w SonPLC_Bubble-SonicDynPLC
00023B36 0000                       		dc.w SonPLC_Injury2-SonicDynPLC
00023B38 00                         SonPLC_Blank:	dc.b 0
00023B39 0420 0070 0320 0B20 0E     SonPLC_Stand:	dc.b 4,	$20, 0,	$70, 3,	$20, $B, $20, $E
00023B42 0350 1150 1720 1D          SonPLC_Wait1:	dc.b 3,	$50, $11, $50, $17, $20, $1D
00023B49 0350 2050 1720 1D          SonPLC_Wait2:	dc.b 3,	$50, $20, $50, $17, $20, $1D
00023B50 0350 2050 1720 26          SonPLC_Wait3:	dc.b 3,	$50, $20, $50, $17, $20, $26
00023B57 0380 2920 0B20 0E          SonPLC_LookUp:	dc.b 3,	$80, $29, $20, $B, $20,	$E
00023B5E 0470 3250 3A50 4010 46     SonPLC_Walk11:	dc.b 4,	$70, $32, $50, $3A, $50, $40, $10, $46
00023B67 0270 32B0 48               SonPLC_Walk12:	dc.b 2,	$70, $32, $B0, $48
00023B6C 0250 5480 5A               SonPLC_Walk13:	dc.b 2,	$50, $54, $80, $5A
00023B71 0450 5450 6350 6910 6F     SonPLC_Walk14:	dc.b 4,	$50, $54, $50, $63, $50, $69, $10, $6F
00023B7A 0250 54B0 71               SonPLC_Walk15:	dc.b 2,	$50, $54, $B0, $71
00023B7F 0370 3230 7D50 81          SonPLC_Walk16:	dc.b 3,	$70, $32, $30, $7D, $50, $81
00023B86 0550 8750 8D20 9350 9600+  SonPLC_Walk21:	dc.b 5,	$50, $87, $50, $8D, $20, $93, $50, $96,	0, $9C
00023B91 0650 8710 9D30 9F50 A330+  SonPLC_Walk22:	dc.b 6,	$50, $87, $10, $9D, $30, $9F, $50, $A3,	$30, $A9, 0, $AD
00023B9E 0450 AE10 B470 B620 BE     SonPLC_Walk23:	dc.b 4,	$50, $AE, $10, $B4, $70, $B6, $20, $BE
00023BA7 0550 C130 C770 CB20 D310+  SonPLC_Walk24:	dc.b 5,	$50, $C1, $30, $C7, $70, $CB, $20, $D3,	$10, $D6
00023BB2 0450 C110 D870 DA20 E2     SonPLC_Walk25:	dc.b 4,	$50, $C1, $10, $D8, $70, $DA, $20, $E2
00023BBB 0550 8710 9D00 9370 E520+  SonPLC_Walk26:	dc.b 5,	$50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED
00023BC6 0470 F050 F810 FE51 00     SonPLC_Walk31:	dc.b 4,	$70, $F0, $50, $F8, $10, $FE, $51, 0
00023BCF 0270 F0B1 06               SonPLC_Walk32:	dc.b 2,	$70, $F0, $B1, 6
00023BD4 0251 1281 18               SonPLC_Walk33:	dc.b 2,	$51, $12, $81, $18
00023BD9 0451 1251 2111 2751 29     SonPLC_Walk34:	dc.b 4,	$51, $12, $51, $21, $11, $27, $51, $29
00023BE2 0251 12B1 2F               SonPLC_Walk35:	dc.b 2,	$51, $12, $B1, $2F
00023BE7 0370 F001 0681 3B          SonPLC_Walk36:	dc.b 3,	$70, $F0, 1, 6,	$81, $3B
00023BEE 0651 4411 4A11 4C81 4E01+  SonPLC_Walk41:	dc.b 6,	$51, $44, $11, $4A, $11, $4C, $81, $4E,	1, $57,	1, $58
00023BFB 0651 4421 5911 5C11 5E81+  SonPLC_Walk42:	dc.b 6,	$51, $44, $21, $59, $11, $5C, $11, $5E,	$81, $60, 1, $57
00023C08 0451 6911 6F81 7111 7A     SonPLC_Walk43:	dc.b 4,	$51, $69, $11, $6F, $81, $71, $11, $7A
00023C11 0551 7C21 8211 8571 8721+  SonPLC_Walk44:	dc.b 5,	$51, $7C, $21, $82, $11, $85, $71, $87,	$21, $8F
00023C1C 0451 7C11 9281 9411 9D     SonPLC_Walk45:	dc.b 4,	$51, $7C, $11, $92, $81, $94, $11, $9D
00023C25 0551 4481 9F11 5E11 A801+  SonPLC_Walk46:	dc.b 5,	$51, $44, $81, $9F, $11, $5E, $11, $A8,	1, $57
00023C30 0251 AAB1 B0               SonPLC_Run11:	dc.b 2,	$51, $AA, $B1, $B0
00023C35 0250 54B1 BC               SonPLC_Run12:	dc.b 2,	$50, $54, $B1, $BC
00023C3A 0251 AAB1 C8               SonPLC_Run13:	dc.b 2,	$51, $AA, $B1, $C8
00023C3F 0250 54B1 D4               SonPLC_Run14:	dc.b 2,	$50, $54, $B1, $D4
00023C44 0451 E011 E6B1 E801 F4     SonPLC_Run21:	dc.b 4,	$51, $E0, $11, $E6, $B1, $E8, 1, $F4
00023C4D 0351 F511 FBB1 FD          SonPLC_Run22:	dc.b 3,	$51, $F5, $11, $FB, $B1, $FD
00023C54 0451 E012 09B2 0B01 F4     SonPLC_Run23:	dc.b 4,	$51, $E0, $12, 9, $B2, $B, 1, $F4
00023C5D 0351 F511 FBB2 17          SonPLC_Run24:	dc.b 3,	$51, $F5, $11, $FB, $B2, $17
00023C64 0252 23B2 29               SonPLC_Run31:	dc.b 2,	$52, $23, $B2, $29
00023C69 0251 12B2 35               SonPLC_Run32:	dc.b 2,	$51, $12, $B2, $35
00023C6E 0252 23B2 41               SonPLC_Run33:	dc.b 2,	$52, $23, $B2, $41
00023C73 0251 12B2 4D               SonPLC_Run34:	dc.b 2,	$51, $12, $B2, $4D
00023C78 0452 5912 5FB2 6102 6D     SonPLC_Run41:	dc.b 4,	$52, $59, $12, $5F, $B2, $61, 2, $6D
00023C81 0272 6EB2 76               SonPLC_Run42:	dc.b 2,	$72, $6E, $B2, $76
00023C86 0452 5912 82B2 8402 6D     SonPLC_Run43:	dc.b 4,	$52, $59, $12, $82, $B2, $84, 2, $6D
00023C8F 0272 6EB2 90               SonPLC_Run44:	dc.b 2,	$72, $6E, $B2, $90
00023C94 01F2 9C                    SonPLC_Roll1:	dc.b 1,	$F2, $9C
00023C97 01F2 AC                    SonPLC_Roll2:	dc.b 1,	$F2, $AC
00023C9A 01F2 BC                    SonPLC_Roll3:	dc.b 1,	$F2, $BC
00023C9D 01F2 CC                    SonPLC_Roll4:	dc.b 1,	$F2, $CC
00023CA0 01F2 DC                    SonPLC_Roll5:	dc.b 1,	$F2, $DC
00023CA3 02B2 EC22 F8               SonPLC_Warp1:	dc.b 2,	$B2, $EC, $22, $F8
00023CA8 01F2 FB                    SonPLC_Warp2:	dc.b 1,	$F2, $FB
00023CAB 02B3 0B23 17               SonPLC_Warp3:	dc.b 2,	$B3, $B, $23, $17
00023CB0 01F3 1A                    SonPLC_Warp4:	dc.b 1,	$F3, $1A
00023CB3 0253 2AB3 30               SonPLC_Stop1:	dc.b 2,	$53, $2A, $B3, $30
00023CB8 0453 3C73 4213 4A03 4C     SonPLC_Stop2:	dc.b 4,	$53, $3C, $73, $42, $13, $4A, 3, $4C
00023CC1 0413 4D73 4F23 5703 5A     SonPLC_Duck:	dc.b 4,	$13, $4D, $73, $4F, $23, $57, 3, $5A
00023CCA 0323 5B23 5EF3 61          SonPLC_Balance1:dc.b 3,	$23, $5B, $23, $5E, $F3, $61
00023CD1 03B3 7173 7D00 71          SonPLC_Balance2:dc.b 3,	$B3, $71, $73, $7D, 0, $71
00023CD8 0373 8533 8D23 91          SonPLC_Float1:	dc.b 3,	$73, $85, $33, $8D, $23, $91
00023CDF 0183 94                    SonPLC_Float2:	dc.b 1,	$83, $94
00023CE2 0373 9D03 A533 A6          SonPLC_Float3:	dc.b 3,	$73, $9D, 3, $A5, $33, $A6
00023CE9 0373 AA33 B223 B6          SonPLC_Float4:	dc.b 3,	$73, $AA, $33, $B2, $23, $B6
00023CF0 03B3 B913 C503 C7          SonPLC_Spring:	dc.b 3,	$B3, $B9, $13, $C5, 3, $C7
00023CF7 04B3 C833 D403 D803 D9     SonPLC_Hang1:	dc.b 4,	$B3, $C8, $33, $D4, 3, $D8, 3, $D9
00023D00 04B3 DA33 E603 EA03 EB     SonPLC_Hang2:	dc.b 4,	$B3, $DA, $33, $E6, 3, $EA, 3, $EB
00023D09 0583 EC13 F553 F713 FD03+  SonPLC_Leap1:	dc.b 5,	$83, $EC, $13, $F5, $53, $F7, $13, $FD,	3, $FF
00023D14 0584 0014 0953 F713 FD03+  SonPLC_Leap2:	dc.b 5,	$84, 0,	$14, 9,	$53, $F7, $13, $FD, 3, $FF
00023D1F 0284 0B74 14               SonPLC_Push1:	dc.b 2,	$84, $B, $74, $14
00023D24 0384 1C24 2514 28          SonPLC_Push2:	dc.b 3,	$84, $1C, $24, $25, $14, $28
00023D2B 0284 2A74 33               SonPLC_Push3:	dc.b 2,	$84, $2A, $74, $33
00023D30 0384 1C24 3B14 3E          SonPLC_Push4:	dc.b 3,	$84, $1C, $24, $3B, $14, $3E
00023D37 0254 40B4 46               SonPLC_Slide:	dc.b 2,	$54, $40, $B4, $46
00023D3C 0384 5234 5B04 5F          SonPLC_BblUnk:	dc.b 3,	$84, $52, $34, $5B, 4, $5F
00023D43 0374 6014 68B4 6A          SonPLC_Death1:	dc.b 3,	$74, $60, $14, $68, $B4, $6A
00023D4A 0574 7614 7E54 8034 8604+  SonPLC_Drown:	dc.b 5,	$74, $76, $14, $7E, $54, $80, $34, $86,	4, $8A
00023D55 0574 8B14 7E54 9334 8604+  SonPLC_Burnt:	dc.b 5,	$74, $8B, $14, $7E, $54, $93, $34, $86,	4, $8A
00023D60 0224 99F4 9C               SonPLC_Shrink1:	dc.b 2,	$24, $99, $F4, $9C
00023D65 0324 ACB4 AF24 BB          SonPLC_Shrink2:	dc.b 3,	$24, $AC, $B4, $AF, $24, $BB
00023D6C 01B4 BE                    SonPLC_Shrink3:	dc.b 1,	$B4, $BE
00023D6F 0154 CA                    SonPLC_Shrink4:	dc.b 1,	$54, $CA
00023D72 0114 D0                    SonPLC_Shrink5:	dc.b 1,	$14, $D0
00023D75 03B4 D214 DE34 E0          SonPLC_Injury1:	dc.b 3,	$B4, $D2, $14, $DE, $34, $E0
00023D7C 0354 E4B4 EA10 6D          SonPLC_Bubble:	dc.b 3,	$54, $E4, $B4, $EA, $10, $6D
00023D83 02F4 F625 06               SonPLC_Injury2:	dc.b 2,	$F4, $F6, $25, 6
00023D88                            		even
00023D88                            		even
00023D88                            
00023D88                            ; ---------------------------------------------------------------------------
00023D88                            ; Uncompressed graphics	- Sonic
00023D88                            ; ---------------------------------------------------------------------------
00023D88                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002DEA8                            		even
0002DEA8                            
0002DEA8                            ; ---------------------------------------------------------------------------
0002DEA8                            ; Uncompressed graphics	- Sonime
0002DEA8                            ; ---------------------------------------------------------------------------
0002DEA8                            Art_Sonime_Torso:	incbin	artunc\sonime_torso.bin
0002E028                            		even
0002E028                            Art_Sonime_Head:	incbin	artunc\sonime_head.bin
0002E2A8                            		even
0002E2A8                            Art_Sonime_Hair:	incbin	artunc\sonime_hair.bin
0002E3A8                            		even
0002E3A8                            Art_Sonime_Faces:	incbin	artunc\sonime_faces.bin
0002ECA8                            		even
0002ECA8                            Art_Sonime_LeftEar:	incbin	artunc\sonime_leftear.bin
0002ECE8                            		even
0002ECE8                            Art_Sonime_RightEar:	incbin	artunc\sonime_rightear.bin
0002ED68                            		even
0002ED68                            
0002ED68                            ; ---------------------------------------------------------------------------
0002ED68                            ; Compressed graphics - various
0002ED68                            ; ---------------------------------------------------------------------------
0002ED68                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002EE6C                            		even
0002EE6C                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002EEA6                            		even
0002EEA6                            UnC_Shield:	incbin	artunc\shield.bin	; shield
0002F206                            		even
0002F206                            ArtUnc_InvStars:	incbin	artunc\invstars.bin	; invincibility stars
0002F606                            		even
0002F606                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002F710                            		even
0002F710                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002F762                            		even
0002F762                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002F9AA                            		even
0002F9AA                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002FB30                            		even
0002FB30                            ; ---------------------------------------------------------------------------
0002FB30                            ; Sprite mappings - walls of the special stage
0002FB30                            ; ---------------------------------------------------------------------------
0002FB30                            Map_SSWalls:
0002FB30                            	include "_maps\SSwalls.asm"
0002FB30                            ; ---------------------------------------------------------------------------
0002FB30                            ; Sprite mappings - walls of the special stage
0002FB30                            ; ---------------------------------------------------------------------------
0002FB30 0000                       Map_SSWalls2:	dc.w byte_2C584-Map_SSWalls2
0002FB32 01                         byte_2C584:	dc.b 1
0002FB33 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002FB38                            		even
0002FB38                            		even
0002FB38                            ; ---------------------------------------------------------------------------
0002FB38                            ; Compressed graphics - special stage
0002FB38                            ; ---------------------------------------------------------------------------
0002FB38                            Art_SSWalls:	incbin	artunc\sswalls.bin	; special stage walls
00031B38                            		even
00031B38                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00031C6C                            		even
00031C6C                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
000328FC                            		even
000328FC                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00032BFC                            		even
00032BFC                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
000330F0                            		even
000330F0                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
000331DE                            		even
000331DE                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
000332AE                            		even
000332AE                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
000333A4                            		even
000333A4                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00033402                            		even
00033402                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00033494                            		even
00033494                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00033556                            		even
00033556                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00033624                            		even
00033624                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
000336F0                            		even
000336F0                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
000337B8                            		even
000337B8                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00033882                            		even
00033882                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00033952                            		even
00033952                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00033B46                            		even
00033B46                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00033CAE                            		even
00033CAE                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00033D5E                            		even
00033D5E                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00033E38                            		even
00033E38                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00033EBC                            		even
00033EBC                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0003403A                            		even
0003403A                            ; ---------------------------------------------------------------------------
0003403A                            ; Compressed graphics - GHZ stuff
0003403A                            ; ---------------------------------------------------------------------------
0003403A                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00034084                            		even
00034084                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
0003419E                            		even
0003419E                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
0003428A                            		even
0003428A                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
000342D2                            		even
000342D2                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00034470                            		even
00034470                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
000344EC                            		even
000344EC                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00034700                            		even
00034700                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0003482C                            		even
0003482C                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
0003495A                            		even
0003495A                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
000349F8                            		even
000349F8                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00034A58                            		even
00034A58                            ; ---------------------------------------------------------------------------
00034A58                            ; Compressed graphics - LZ stuff
00034A58                            ; ---------------------------------------------------------------------------
00034A58                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00034B7C                            		even
00034B7C                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00035370                            		even
00035370                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
000354F0                            		even
000354F0                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
0003565A                            		even
0003565A                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00035C44 00                         		even
00035C44                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00035CFA                            		even
00035CFA                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00035D9C                            		even
00035D9C                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00035EF8                            		even
00035EF8                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00035F5C                            		even
00035F5C                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
000360AE                            		even
000360AE                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00036590                            		even
00036590                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00036700                            		even
00036700                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
000369B8                            		even
000369B8                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00036AF0                            		even
00036AF0                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00036C1A                            		even
00036C1A                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00036D2A                            		even
00036D2A                            ; ---------------------------------------------------------------------------
00036D2A                            ; Compressed graphics - MZ stuff
00036D2A                            ; ---------------------------------------------------------------------------
00036D2A                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00036FB8                            		even
00036FB8                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00037076                            		even
00037076                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
0003712E                            		even
0003712E                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00037182                            		even
00037182                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00037460                            		even
00037460                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00037D76                            		even
00037D76                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00037EDA                            		even
00037EDA                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00037F62                            		even
00037F62                            ; ---------------------------------------------------------------------------
00037F62                            ; Compressed graphics - SLZ stuff
00037F62                            ; ---------------------------------------------------------------------------
00037F62                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0003819E                            		even
0003819E                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
000382E4                            		even
000382E4                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00038528                            		even
00038528                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
0003858A                            		even
0003858A                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
0003866C                            		even
0003866C                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
0003884E                            		even
0003884E                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
0003895A                            		even
0003895A                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
000389FE                            		even
000389FE                            ; ---------------------------------------------------------------------------
000389FE                            ; Compressed graphics - SYZ stuff
000389FE                            ; ---------------------------------------------------------------------------
000389FE                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00038B68                            		even
00038B68                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00038BCA                            		even
00038BCA                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00038CAC                            		even
00038CAC                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00038F3A                            		even
00038F3A                            ; ---------------------------------------------------------------------------
00038F3A                            ; Compressed graphics - SBZ stuff
00038F3A                            ; ---------------------------------------------------------------------------
00038F3A                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00038F8E                            		even
00038F8E                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
0003922A                            		even
0003922A                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
0003942E                            		even
0003942E                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
000395CC                            		even
000395CC                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
000398FC                            		even
000398FC                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00039ADA                            		even
00039ADA                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00039B32                            		even
00039B32                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00039CB2                            		even
00039CB2                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
00039DB0                            		even
00039DB0                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
00039F3C                            		even
00039F3C                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
00039F8C                            		even
00039F8C                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
00039FE4                            		even
00039FE4                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003A0E0                            		even
0003A0E0                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003A1F6                            		even
0003A1F6                            ; ---------------------------------------------------------------------------
0003A1F6                            ; Compressed graphics - enemies
0003A1F6                            ; ---------------------------------------------------------------------------
0003A1F6                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003A5B6                            		even
0003A5B6                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003AAA4                            		even
0003AAA4                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003AE4A                            		even
0003AE4A                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003B032                            		even
0003B032                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B71C                            		even
0003B71C                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003B984                            		even
0003B984                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003BC00 00                         		even
0003BC00                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003C124                            		even
0003C124                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003C3AE                            		even
0003C3AE                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003C9CC                            		even
0003C9CC                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003CDB4                            		even
0003CDB4                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003D0B0                            		even
0003D0B0                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003D2F8                            		even
0003D2F8                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D590                            		even
0003D590                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D76E                            		even
0003D76E                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003D8FC                            		even
0003D8FC                            ; ---------------------------------------------------------------------------
0003D8FC                            ; Compressed graphics - various
0003D8FC                            ; ---------------------------------------------------------------------------
0003D8FC                            Nem_TitleCard:      incbin  artnem\ttlcards.bin ; title cards
0003E8FC                            Nem_TitleCard_End:  even
0003E8FC                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003E9F2                            		even
0003E9F2                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003EAF8                            		even
0003EAF8                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003EBEC                            		even
0003EBEC                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003EF9E 00                         		even
0003EF9E                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003F604                            		even
0003F604                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003F6B4                            		even
0003F6B4                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003F846                            		even
0003F846                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003F948                            		even
0003F948                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003FA24                            		even
0003FA24                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003FEA0                            		even
0003FEA0                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003FF60                            		even
0003FF60                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
000400D4                            		even
000400D4                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
000403D6                            		even
000403D6                            ; ---------------------------------------------------------------------------
000403D6                            ; Compressed graphics - continue screen
000403D6                            ; ---------------------------------------------------------------------------
000403D6                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
00040686                            		even
00040686                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
000408C0                            		even
000408C0                            ; ---------------------------------------------------------------------------
000408C0                            ; Compressed graphics - animals
000408C0                            ; ---------------------------------------------------------------------------
000408C0                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00040A18                            		even
00040A18                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
00040B74                            		even
00040B74                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00040CF0                            		even
00040CF0                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00040E0C                            		even
00040E0C                            Nem_Pig:	incbin	artnem\pig.bin		; pig
00040F42                            		even
00040F42                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0004107C                            		even
0004107C                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
000411D8                            		even
000411D8                            ; ---------------------------------------------------------------------------
000411D8                            ; Compressed graphics - primary patterns and block mappings
000411D8                            ; ---------------------------------------------------------------------------
000411D8                            Blk16_GHZ:	incbin	map16\ghz.bin
00041AEC                            		even
00041AEC                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
0004314C                            		even
0004314C                            Nem_GHZ_2nd:	incbin	artkos\8x8ghz.kos	; GHZ secondary patterns
000456D2                            		even
000456D2                            Blk256_GHZ:	incbin	map256_u\ghz.bin
0004FAD2                            		even
0004FAD2                            Blk16_LZ:	incbin	map16\lz.bin
0004FED6                            		even
0004FED6                            Nem_LZ:		incbin	artkos\8x8lz.kos	; LZ primary patterns
00051A46                            		even
00051A46                            Blk256_LZ:	incbin	map256_u\lz.bin
0005BA46                            		even
0005BA46                            Blk16_MZ:	incbin	map16\mz.bin
0005C250                            		even
0005C250                            Nem_MZ:		incbin	artkos\8x8mz.kos	; MZ primary patterns
0005E20A                            		even
0005E20A                            Blk256_MZ:	incbin	map256_u\mz.bin
0006860A                            		even
0006860A                            Blk16_SLZ:	incbin	map16\slz.bin
00068DEE                            		even
00068DEE                            Nem_SLZ:	incbin	artkos\8x8slz.kos	; SLZ primary patterns
0006B4E8                            		even
0006B4E8                            Blk256_SLZ:	incbin	map256_u\slz.bin
000758E8                            		even
000758E8                            Blk16_SYZ:	incbin	map16\syz.bin
00076196                            		even
00076196                            Nem_SYZ:	incbin	artkos\8x8syz.kos	; SYZ primary patterns
0007880A                            		even
0007880A                            Blk256_SYZ:	incbin	map256_u\syz.bin
00082C0A                            		even
00082C0A                            Blk16_SBZ:	incbin	map16\sbz.bin
000839CA                            		even
000839CA                            Nem_SBZ:	incbin	artkos\8x8sbz.kos	; SBZ primary patterns
00085BF8                            		even
00085BF8                            Blk256_SBZ:	incbin	map256_u\sbz.bin
0008FFF8                            		even
0008FFF8                            ; ---------------------------------------------------------------------------
0008FFF8                            ; Compressed graphics - bosses and ending sequence
0008FFF8                            ; ---------------------------------------------------------------------------
0008FFF8                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0009085C                            		even
0009085C                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00090B46                            		even
00090B46                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
000913CA                            		even
000913CA                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00091BF6                            		even
00091BF6                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0009235E                            		even
0009235E                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
000928DE                            		even
000928DE                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
000929FE                            		even
000929FE                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00092BFC                            		even
00092BFC                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00093DDA                            		even
00093DDA                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0009471E                            		even
0009471E                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00094AF4                            		even
00094AF4                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00095084                            		even
00095084                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0009530C                            		even
0009530C                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0009590A                            		even
0009590A                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00095B92                            		even
00095B92                            		incbin	misc\padding2.bin
00095C96                            		even
00095C96                            ; ---------------------------------------------------------------------------
00095C96                            ; Collision data
00095C96                            ; ---------------------------------------------------------------------------
00095C96                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00095D96                            		even
00095D96                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00096D96                            		even
00096D96                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00097D96                            		even
00097D96                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00097F4E 00                         		even
00097F4E                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00098034                            		even
00098034                            Col_MZ:		incbin	collide\mz.bin		; MZ index
000981C4                            		even
000981C4                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
000983B8                            		even
000983B8                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
000985AC                            		even
000985AC                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00098804                            		even
00098804                            ; ---------------------------------------------------------------------------
00098804                            ; Special layouts
00098804                            ; ---------------------------------------------------------------------------
00098804                            SS_1:		incbin	sslayout\1.bin
00098A7E                            		even
00098A7E                            SS_2:		incbin	sslayout\2.bin
00098E90                            		even
00098E90                            SS_3:		incbin	sslayout\3.bin
000991EC                            		even
000991EC                            SS_4:		incbin	sslayout\4.bin
000996C6                            		even
000996C6                            SS_5:		incbin	sslayout\5.bin
00099B98                            		even
00099B98                            SS_6:		incbin	sslayout\6.bin
00099EA8                            		even
00099EA8                            ; ---------------------------------------------------------------------------
00099EA8                            ; Animated uncompressed graphics
00099EA8                            ; ---------------------------------------------------------------------------
00099EA8                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0009A0A8                            		even
0009A0A8                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0009A4A8                            		even
0009A4A8                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0009A928                            		even
0009A928                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0009AC28                            		even
0009AC28                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0009B228                            		even
0009B228                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0009B528                            		even
0009B528                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0009BFA8                            		even
0009BFA8                            
0009BFA8                            ; ---------------------------------------------------------------------------
0009BFA8                            ; Level	layout index
0009BFA8                            ; ---------------------------------------------------------------------------
0009BFA8 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0009BFAE 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0009BFB4 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0009BFBA 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0009BFC0 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0009BFC6 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0009BFCC 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0009BFD2 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0009BFD8 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0009BFDE 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0009BFE4 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0009BFEA 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0009BFF0 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0009BFF6 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0009BFFC 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0009C002 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0009C008 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0009C00E 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0009C014 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0009C01A 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0009C020 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0009C026 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0009C02C 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0009C032 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0009C038 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0009C03E 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0009C044 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0009C04A 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0009C050                            
0009C050                            Level_GHZ1:	incbin	levels\ghz1.bin
0009C142                            		even
0009C142 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0009C146                            Level_GHZ2:	incbin	levels\ghz2.bin
0009C20E                            		even
0009C20E 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0009C212                            Level_GHZ3:	incbin	levels\ghz3.bin
0009C334                            		even
0009C334                            Level_GHZbg:	incbin	levels\ghzbg.bin
0009C356                            		even
0009C356 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0009C35A 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0009C35E                            
0009C35E                            Level_LZ1:	incbin	levels\lz1.bin
0009C460                            		even
0009C460                            Level_LZbg:	incbin	levels\lzbg.bin
0009C562                            		even
0009C562 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0009C566                            Level_LZ2:	incbin	levels\lz2.bin
0009C600                            		even
0009C600 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0009C604                            Level_LZ3:	incbin	levels\lz3.bin
0009C71E                            		even
0009C71E 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0009C722                            Level_SBZ3:	incbin	levels\sbz3.bin
0009C7DC                            		even
0009C7DC 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0009C7E0                            
0009C7E0                            Level_MZ1:	incbin	levels\mz1.bin
0009C87E                            		even
0009C87E                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0009C8F8                            		even
0009C8F8                            Level_MZ2:	incbin	levels\mz2.bin
0009C99C                            		even
0009C99C                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0009CA2E                            		even
0009CA2E 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0009CA32                            Level_MZ3:	incbin	levels\mz3.bin
0009CB14                            		even
0009CB14                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0009CBB8                            		even
0009CBB8 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0009CBBC 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0009CBC0                            
0009CBC0                            Level_SLZ1:	incbin	levels\slz1.bin
0009CCD2                            		even
0009CCD2                            Level_SLZbg:	incbin	levels\slzbg.bin
0009CD4C                            		even
0009CD4C                            Level_SLZ2:	incbin	levels\slz2.bin
0009CE3C                            		even
0009CE3C                            Level_SLZ3:	incbin	levels\slz3.bin
0009CF56                            		even
0009CF56 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0009CF5A                            
0009CF5A                            Level_SYZ1:	incbin	levels\syz1.bin
0009D016                            		even
0009D016                            Level_SYZbg:	incbin	levels\syzbg.bin
0009D050                            		even
0009D050 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0009D054                            Level_SYZ2:	incbin	levels\syz2.bin
0009D158                            		even
0009D158 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0009D15C                            Level_SYZ3:	incbin	levels\syz3.bin
0009D2B6                            		even
0009D2B6 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0009D2BA 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0009D2BE                            
0009D2BE                            Level_SBZ1:	incbin	levels\sbz1.bin
0009D3E0                            		even
0009D3E0                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0009D41E                            		even
0009D41E                            Level_SBZ2:	incbin	levels\sbz2.bin
0009D560                            		even
0009D560                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0009D6CA                            		even
0009D6CA 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0009D6CE 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0009D6D2                            Level_End:	incbin	levels\ending.bin
0009D702 00                         		even
0009D702 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0009D706                            
0009D706                            ; ---------------------------------------------------------------------------
0009D706                            ; Animated uncompressed giant ring graphics
0009D706                            ; ---------------------------------------------------------------------------
0009D706                            Art_BigRing:	incbin	artunc\bigring.bin
0009E346                            		even
0009E346                            
0009E346                            		incbin	misc\padding3.bin
0009E3E2                            		even
0009E3E2                            
0009E3E2                            ; ---------------------------------------------------------------------------
0009E3E2                            ; Sprite locations index
0009E3E2                            ; ---------------------------------------------------------------------------
0009E3E2 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E3E6 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E3EA 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E3EE 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E3F2 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E3F6 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E3FA 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E3FE 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E402 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E406 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E40A 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E40E 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E412 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E416 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E41A 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E41E 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E422 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E426 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E42A 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E42E 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E432 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E436 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E43A 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E43E 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E442 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E446 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E44A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E44E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E452 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0009E456 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0009E45A 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0009E45E 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0009E462 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0009E466 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0009E46A 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0009E46E 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0009E472 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0009E478                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0009E796                            		even
0009E796                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0009EB98                            		even
0009EB98                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0009F096                            		even
0009F096                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0009F47A                            		even
0009F47A                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0009F732                            		even
0009F732                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0009FD3E                            		even
0009FD3E                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000A01A6                            		even
000A01A6                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000A01D8                            		even
000A01D8                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
000A020A                            		even
000A020A                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
000A023C                            		even
000A023C                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
000A026E                            		even
000A026E                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000A02B8                            		even
000A02B8                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
000A02F6                            		even
000A02F6                            ObjPos_MZ1:	incbin	objpos\mz1.bin
000A0590                            		even
000A0590                            ObjPos_MZ2:	incbin	objpos\mz2.bin
000A09B0                            		even
000A09B0                            ObjPos_MZ3:	incbin	objpos\mz3.bin
000A0E6C                            		even
000A0E6C                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
000A1268                            		even
000A1268                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
000A154A                            		even
000A154A                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
000A19A6                            		even
000A19A6                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000A1D36                            		even
000A1D36                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
000A210E                            		even
000A210E                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
000A2600                            		even
000A2600                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
000A2C30                            		even
000A2C30                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
000A31AC                            		even
000A31AC                            ObjPos_FZ:	incbin	objpos\fz.bin
000A31BE                            		even
000A31BE                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
000A31F0                            		even
000A31F0                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
000A3222                            		even
000A3222                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
000A3254                            		even
000A3254                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
000A3286                            		even
000A3286                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
000A32B8                            		even
000A32B8                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
000A32F0                            		even
000A32F0                            ObjPos_End:	incbin	objpos\ending.bin
000A344C                            		even
000A344C FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000A3452                            ; ---------------------------------------------------------------------------
000A3452                            ; Sprite locations index
000A3452                            ; ---------------------------------------------------------------------------
000A3452 0000 0000                  RingPos_Index:	dc.w Rings_GHZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3456 0000 0000                  		dc.w Rings_GHZ2-RingPos_Index, Rings_Null-RingPos_Index
000A345A 0000 0000                  		dc.w Rings_GHZ3-RingPos_Index, Rings_Null-RingPos_Index
000A345E 0000 0000                  		dc.w Rings_GHZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3462 0000 0000                  		dc.w Rings_LZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3466 0000 0000                  		dc.w Rings_LZ2-RingPos_Index, Rings_Null-RingPos_Index
000A346A 0000 0000                  		dc.w Rings_LZ3-RingPos_Index, Rings_Null-RingPos_Index
000A346E 0000 0000                  		dc.w Rings_SBZ3-RingPos_Index, Rings_Null-RingPos_Index
000A3472 0000 0000                  		dc.w Rings_MZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3476 0000 0000                  		dc.w Rings_MZ2-RingPos_Index, Rings_Null-RingPos_Index
000A347A 0000 0000                  		dc.w Rings_MZ3-RingPos_Index, Rings_Null-RingPos_Index
000A347E 0000 0000                  		dc.w Rings_MZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3482 0000 0000                  		dc.w Rings_SLZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3486 0000 0000                  		dc.w Rings_SLZ2-RingPos_Index, Rings_Null-RingPos_Index
000A348A 0000 0000                  		dc.w Rings_SLZ3-RingPos_Index, Rings_Null-RingPos_Index
000A348E 0000 0000                  		dc.w Rings_SLZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3492 0000 0000                  		dc.w Rings_SYZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3496 0000 0000                  		dc.w Rings_SYZ2-RingPos_Index, Rings_Null-RingPos_Index
000A349A 0000 0000                  		dc.w Rings_SYZ3-RingPos_Index, Rings_Null-RingPos_Index
000A349E 0000 0000                  		dc.w Rings_SYZ1-RingPos_Index, Rings_Null-RingPos_Index
000A34A2 0000 0000                  		dc.w Rings_SBZ1-RingPos_Index, Rings_Null-RingPos_Index
000A34A6 0000 0000                  		dc.w Rings_SBZ2-RingPos_Index, Rings_Null-RingPos_Index
000A34AA 0000 0000                  		dc.w Rings_FZ-RingPos_Index, Rings_Null-RingPos_Index
000A34AE 0000 0000                  		dc.w Rings_SBZ1-RingPos_Index, Rings_Null-RingPos_Index
000A34B2 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A34B6 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A34BA 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A34BE 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A34C2                            Rings_GHZ1:	incbin	rings\ghz1_INDIVIDUAL.bin
000A3734                            		even
000A3734                            Rings_GHZ2:	incbin	rings\ghz2_INDIVIDUAL.bin
000A3926                            		even
000A3926                            Rings_GHZ3:	incbin	rings\ghz3_INDIVIDUAL.bin
000A3B18                            		even
000A3B18                            Rings_LZ1:	incbin	rings\lz1_INDIVIDUAL.bin
000A3C32                            		even
000A3C32                            Rings_LZ2:	incbin	rings\lz2_INDIVIDUAL.bin
000A3D1C                            		even
000A3D1C                            Rings_LZ3:	incbin	rings\lz3_INDIVIDUAL.bin
000A3D92                            		even
000A3D92                            Rings_SBZ3:	incbin	rings\sbz3_INDIVIDUAL.bin
000A3F48                            		even
000A3F48                            Rings_MZ1:	incbin	rings\mz1_INDIVIDUAL.bin
000A4046                            		even
000A4046                            Rings_MZ2:	incbin	rings\mz2_INDIVIDUAL.bin
000A4128                            		even
000A4128                            Rings_MZ3:	incbin	rings\mz3_INDIVIDUAL.bin
000A424E                            		even
000A424E                            Rings_SLZ1:	incbin	rings\slz1_INDIVIDUAL.bin
000A4490                            		even
000A4490                            Rings_SLZ2:	incbin	rings\slz2_INDIVIDUAL.bin
000A4762                            		even
000A4762                            Rings_SLZ3:	incbin	rings\slz3_INDIVIDUAL.bin
000A4A34                            		even
000A4A34                            Rings_SYZ1:	incbin	rings\syz1_INDIVIDUAL.bin
000A4CAE                            		even
000A4CAE                            Rings_SYZ2:	incbin	rings\syz2_INDIVIDUAL.bin
000A502C                            		even
000A502C                            Rings_SYZ3:	incbin	rings\syz3_INDIVIDUAL.bin
000A52BE                            		even
000A52BE                            Rings_SBZ1:	incbin	rings\sbz1_INDIVIDUAL.bin
000A55D8                            		even
000A55D8                            Rings_SBZ2:	incbin	rings\sbz2_INDIVIDUAL.bin
000A5842                            		even
000A5842                            Rings_FZ:	incbin	rings\fz_INDIVIDUAL.bin
000A5848                            		even
000A5848                            Rings_End:	incbin	rings\ending_INDIVIDUAL.bin
000A584E                            		even
000A584E FFFF 0000                  Rings_Null:	dc.b $FF, $FF, 0, 0
000A5852                            ; ---------------------------------------------------------------------------
000A5852                            ; ---------------------------------------------------------------------------
000A5852                            		incbin	misc\padding4.bin
000A5E7C                            		even
000A5E7C 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
000A5E80 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
000A5E84 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
000A5E88 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
000A5E8C 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
000A5E90 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
000A5E94                            ; ---------------------------------------------------------------------------
000A5E94                            ; PSG instruments used in music
000A5E94                            ; ---------------------------------------------------------------------------
000A5E94 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
000A5EA0 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
000A5EAC 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000A5EB8                            PSG1:		incbin	sound\psg1.bin
000A5ECF                            PSG2:		incbin	sound\psg2.bin
000A5ED6                            PSG3:		incbin	sound\psg3.bin
000A5EE7                            PSG4:		incbin	sound\psg4.bin
000A5EF2                            PSG6:		incbin	sound\psg6.bin
000A5F01                            PSG5:		incbin	sound\psg5.bin
000A5F2B                            PSG7:		incbin	sound\psg7.bin
000A5F47                            PSG8:		incbin	sound\psg8.bin
000A5F6F                            PSG9:		incbin	sound\psg9.bin
000A5F80                            
000A5F80 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
000A5F88                            ; ---------------------------------------------------------------------------
000A5F88                            ; Music	Pointers
000A5F88                            ; ---------------------------------------------------------------------------
000A5F88 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
000A5F90 0000 0000 0000 0000        		dc.l Music83, Music84
000A5F98 0000 0000 0000 0000        		dc.l Music85, Music86
000A5FA0 0000 0000 0000 0000        		dc.l Music87, Music88
000A5FA8 0000 0000 0000 0000        		dc.l Music89, Music8A
000A5FB0 0000 0000 0000 0000        		dc.l Music8B, Music8C
000A5FB8 0000 0000 0000 0000        		dc.l Music8D, Music8E
000A5FC0 0000 0000 0000 0000        		dc.l Music8F, Music90
000A5FC8 0000 0000 0000 0000        		dc.l Music91, Music92
000A5FD0 0000 0000                  		dc.l Music93
000A5FD4                            ; ---------------------------------------------------------------------------
000A5FD4                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
000A5FD4                            ; ---------------------------------------------------------------------------
000A5FD4 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
000A5FE4 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
000A5FF4 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
000A6004 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
000A6014 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
000A6024 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
000A6034 9090 9090                  		dc.b $90, $90, $90, $90
000A6038                            
000A6038                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6038                            
000A6038                            sub_71B4C:	
000A6038 4DF9 00FF F000             		lea	($FFF000).l,a6
000A603E                            
000A603E 41F9 00A0 0C68             		lea	($A00000+YM_Buffer).l,a0		; CHG: load buffer ID address
000A6044 33FC 0100 00A1 1100 0839+  		StopZ80						; CHG: request Z80 stop on
000A6056 1010                       		move.b	(a0),d0					; CHG: load buffer ID
000A6058 33FC 0000 00A1 1100        		StartZ80					; CHG: request Z80 stop off
000A6060 B02E 0010                  		cmp.b	$10(a6),d0				; CHG: has the 68k recently written to this buffer?
000A6064 6600                       		bne.s	SD_ValidList				; CHG: if not, branch
000A6066 4E75                       		rts						; CHG: return (cannot write to YM cue until Z80 is finished with it)
000A6068                            
000A6068                            SD_ValidList:
000A6068 2D7C 00A0 1000 0010        		move.l	#$A00000+YM_Buffer1,$10(a6)		; set the cue address to buffer 1
000A6070 4A00                       		tst.b	d0					; is the Z80 accessing buffer 1?
000A6072 6600                       		bne.s	SD_WriteBuffer1				; if not, branch
000A6074 2D7C 00A0 1400 0010        		move.l	#$A00000+YM_Buffer2,$10(a6)		; set the cue address to buffer 2
000A607C                            
000A607C                            SD_WriteBuffer1:
000A607C 1D40 0010                  		move.b	d0,$10(a6)				; set buffer ID the 68k is writing to
000A6080 422E 000E                  		clr.b	$E(a6)
000A6084 4A2E 0003                  		tst.b	3(a6)		; is music paused?
000A6088 6600 0000                  		bne.w	loc_71E50	; if yes, branch
000A608C 532E 0001                  		subq.b	#1,1(a6)
000A6090 6600                       		bne.s	loc_71B9E
000A6092 4EBA 0000                  		jsr	sub_7260C(pc)
000A6096                            
000A6096                            loc_71B9E:
000A6096 102E 0004                  		move.b	4(a6),d0
000A609A 6700                       		beq.s	loc_71BA8
000A609C 4EBA 0000                  		jsr	sub_72504(pc)
000A60A0                            
000A60A0                            loc_71BA8:
000A60A0 4A2E 0024                  		tst.b	$24(a6)
000A60A4 6700                       		beq.s	loc_71BB2
000A60A6 4EBA 0000                  		jsr	sub_7267C(pc)
000A60AA                            
000A60AA                            loc_71BB2:
000A60AA 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
000A60AE 6700                       		beq.s	loc_71BBC	; if not, branch
000A60B0 4EBA 0000                  		jsr	Sound_Play(pc)
000A60B4                            
000A60B4                            loc_71BBC:
000A60B4 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000A60BA 6700                       		beq.s	loc_71BC8
000A60BC 4EBA 0000                  		jsr	Sound_ChkValue(pc)
000A60C0                            
000A60C0                            loc_71BC8:
000A60C0 4BEE 0010                  		lea	$40-$30(a6),a5			; MJ: making correction for flow below
000A60C4 7E01                       		moveq	#2-1,d7				; MJ: set number of PCM channels to run
000A60C6 1D7C 007F 0008             		move.b	#$80-1,$08(a6)			; MJ: reset as PCM channel
000A60CC                            
000A60CC                            SD_NextPCM:
000A60CC 522E 0008                  		addq.b	#$01,$08(a6)			; MJ: advance PCM channel ID
000A60D0 4BED 0030                  		lea	$30(a5),a5			; MJ: advance to next channel
000A60D4 4A15                       		tst.b	(a5)
000A60D6 6A00                       		bpl.s	loc_71BD4
000A60D8 4EBA 0000                  		jsr	sub_71C4E(pc)
000A60DC                            
000A60DC                            loc_71BD4:
000A60DC 51CF FFEE                  		dbf	d7,SD_NextPCM			; MJ: repeat for number of PCM channels available
000A60E0 422E 0008                  		clr.b	8(a6)
000A60E4 7E05                       		moveq	#5,d7
000A60E6                            
000A60E6                            loc_71BDA:
000A60E6 DAFC 0030                  		adda.w	#$30,a5
000A60EA 4A15                       		tst.b	(a5)
000A60EC 6A00                       		bpl.s	loc_71BE6
000A60EE 4EBA 0000                  		jsr	sub_71CCA(pc)
000A60F2                            
000A60F2                            loc_71BE6:
000A60F2 51CF FFF2                  		dbf	d7,loc_71BDA
000A60F6                            
000A60F6 7E02                       		moveq	#2,d7
000A60F8                            
000A60F8                            loc_71BEC:
000A60F8 DAFC 0030                  		adda.w	#$30,a5
000A60FC 4A15                       		tst.b	(a5)
000A60FE 6A00                       		bpl.s	loc_71BF8
000A6100 4EBA 0000                  		jsr	sub_72850(pc)
000A6104                            
000A6104                            loc_71BF8:
000A6104 51CF FFF2                  		dbf	d7,loc_71BEC
000A6108                            
000A6108 1D7C 0080 000E             		move.b	#$80,$E(a6)
000A610E 7E02                       		moveq	#2,d7
000A6110                            
000A6110                            loc_71C04:
000A6110 DAFC 0030                  		adda.w	#$30,a5
000A6114 4A15                       		tst.b	(a5)
000A6116 6A00                       		bpl.s	loc_71C10
000A6118 4EBA 0000                  		jsr	sub_71CCA(pc)
000A611C                            
000A611C                            loc_71C10:
000A611C 51CF FFF2                  		dbf	d7,loc_71C04
000A6120                            
000A6120 7E02                       		moveq	#2,d7
000A6122                            
000A6122                            loc_71C16:
000A6122 DAFC 0030                  		adda.w	#$30,a5
000A6126 4A15                       		tst.b	(a5)
000A6128 6A00                       		bpl.s	loc_71C22
000A612A 4EBA 0000                  		jsr	sub_72850(pc)
000A612E                            
000A612E                            loc_71C22:
000A612E 51CF FFF2                  		dbf	d7,loc_71C16
000A6132 1D7C 0040 000E             		move.b	#$40,$E(a6)
000A6138 DAFC 0030                  		adda.w	#$30,a5
000A613C 4A15                       		tst.b	(a5)
000A613E 6A00                       		bpl.s	loc_71C38
000A6140 4EBA 0000                  		jsr	sub_71CCA(pc)
000A6144                            
000A6144                            loc_71C38:
000A6144 DAFC 0030                  		adda.w	#$30,a5
000A6148 4A15                       		tst.b	(a5)
000A614A 6A00                       		bpl.s	loc_71C44
000A614C 4EBA 0000                  		jsr	sub_72850(pc)
000A6150                            
000A6150                            loc_71C44:
000A6150 4E75                       		rts	
000A6152                            
000A6152                            ; End of function sub_71B4C
000A6152                            
000A6152                            
000A6152                            ; ===========================================================================
000A6152                            ; ---------------------------------------------------------------------------
000A6152                            ; Subroutine to run an FM channel ; EXTRA - ON/OFF
000A6152                            ; ---------------------------------------------------------------------------
000A6152                            
000A6152                            SDAC_CheckMute:
000A6152 102D 0021                  	move.b	$21(a5),d0
000A6156 B02D 0022                  	cmp.b	$22(a5),d0
000A615A 6700                       	beq.s	S71C4E_NoCHG
000A615C 4A00                       	tst.b	d0
000A615E 6A00                       	bpl.s	S71C4E_NoMute
000A6160                            
000A6160 70DA                       		moveq	#%11011010|$FFFFFF00,d0			; prepare "JP Z" instruction
000A6162 49F9 0000 0000             		lea	(StopSample).l,a4		; MUTE
000A6168 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1		; load PCM 2 slot address
000A616E 41F9 00A0 0651             		lea	($A00000+PCM2_NewRET).l,a0		; ''
000A6174 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A617A 6600                       		bne.s	SDAC_CM_NotePCM2				; if not, branch for PCM 2 writing
000A617C 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1		; load PCM 1 slot address
000A6182 41F9 00A0 064E             		lea	($A00000+PCM1_NewRET).l,a0		; ''
000A6188                            
000A6188                            SDAC_CM_NotePCM2:
000A6188 33FC 0100 00A1 1100 0839+  		StopZ80
000A619A 12DC                       		move.b	(a4)+,(a1)+				; set address of sample
000A619C 12DC                       		move.b	(a4)+,(a1)+				; ''
000A619E 12DC                       		move.b	(a4)+,(a1)+				; ''
000A61A0 12DC                       		move.b	(a4)+,(a1)+				; set address of reverse sample
000A61A2 12DC                       		move.b	(a4)+,(a1)+				; ''
000A61A4 12DC                       		move.b	(a4)+,(a1)+				; ''
000A61A6 12DC                       		move.b	(a4)+,(a1)+				; set address of next sample
000A61A8 12DC                       		move.b	(a4)+,(a1)+				; ''
000A61AA 12DC                       		move.b	(a4)+,(a1)+				; ''
000A61AC 12DC                       		move.b	(a4)+,(a1)+				; set address of next reverse sample
000A61AE 12DC                       		move.b	(a4)+,(a1)+				; ''
000A61B0 12DC                       		move.b	(a4)+,(a1)+				; ''
000A61B2 1080                       		move.b	d0,(a0)					; change "JP NC" to "JP C"
000A61B4 33FC 0000 00A1 1100        		StartZ80
000A61BC                            
000A61BC                            ;	jsr	sub_726FE(pc)
000A61BC                            ;	move.b	$0A(a5),d1
000A61BC                            ;	andi.b	#%00111111,d1
000A61BC                            ;	move.b	#$B4,d0
000A61BC                            ;	jsr	loc_72716
000A61BC 08D5 0006                  	bset.b	#$06,(a5)
000A61C0 1B6D 0021 0022             	move.b	$21(a5),$22(a5)
000A61C6                            
000A61C6                            S71C4E_NoCHG:
000A61C6 4E75                       	rts
000A61C8                            
000A61C8                            S71C4E_NoMute:
000A61C8 1B40 0022                  	move.b	d0,$22(a5)
000A61CC                            ;	move.b	$0B(a5),d0
000A61CC                            ;	jsr	SFM_UpdateVoice(pc)
000A61CC                            ;	move.b	$0A(a5),d1
000A61CC                            ;	move.b	#$B4,d0
000A61CC                            ;	jsr	loc_72716
000A61CC 08D5 0006                  	bset.b	#$06,(a5)
000A61D0 4E75                       	rts
000A61D2                            
000A61D2                            ; ===========================================================================
000A61D2                            ; ---------------------------------------------------------------------------
000A61D2                            ; Subroutine to run a DAC channel ; CHG: The entire routine...
000A61D2                            ; ---------------------------------------------------------------------------
000A61D2                            
000A61D2                            sub_71C4E:
000A61D2 6100 FF7E                  	bsr.w	SDAC_CheckMute			; EXTRA - ON/OFF
000A61D6                            
000A61D6                            	; Volume is being done first, as it'll update with a single
000A61D6                            	; frame delay, the PCM playback is a frame behind, as is the
000A61D6                            	; pitch control, but the volume change happens immediately,
000A61D6                            	; thus, a delay is needed.
000A61D6                            
000A61D6                            	; *VOLUME DELAY WAS HERE*
000A61D6                            
000A61D6                            		; And now back to the normal DAC
000A61D6                            		; SMPS routine
000A61D6                            
000A61D6 532D 000E                  		subq.b	#$01,$0E(a5)				; decrease note timer
000A61DA 6600 0000                  		bne.w	SDAC_HoldNote				; if still running, branch
000A61DE 0895 0004                  		bclr.b	#$04,(a5)				; disable softkey
000A61E2 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A61E6 286D 0004                  		movea.l	$04(a5),a4				; load tracker address
000A61EA 6000                       		bra.s	SDAC_ReadTracker			; continue into loop
000A61EC                            
000A61EC                            SDAC_ReadFlag:
000A61EC 4EBA 0000                  		jsr	sub_72A5A(pc)				; run flags subroutine
000A61F0                            
000A61F0                            SDAC_ReadTracker:
000A61F0 7A00                       		moveq	#$00,d5					; clear d5
000A61F2 1A1C                       		move.b	(a4)+,d5				; load byte from SMPS track
000A61F4 6A00 0000                  		bpl.w	SDAC_Timer				; if it's a timer, branch
000A61F8 0C05 00E0                  		cmpi.b	#$E0,d5					; is it a flag?
000A61FC 64EE                       		bcc.s	SDAC_ReadFlag				; if so, branch
000A61FE 1B45 0020                  	move.b	d5,$20(a5)			; EXTRA
000A6202                            
000A6202                            	SDAC_Update:				; EXTRA
000A6202 08D5 0001                  		bset.b	#$01,(a5)				; set channel as resting
000A6206 0405 0080                  		subi.b	#$80,d5					; minus starting note
000A620A 6700                       		beq.s	SDAC_NoFrequency			; if it's mute, branch
000A620C 5515                       		subq.b	#$02,(a5)				; set channel as NOT resting
000A620E DA2D 0008                  		add.b	$08(a5),d5				; add pitch to it
000A6212 DA2E 0014                  	add.b	$14(a6),d5			; EXTRA
000A6216 DA45                       		add.w	d5,d5					; multiply by size of word
000A6218 3B7B 5000 0010             		move.w	(FrequenciesPCM-2)(pc,d5.w),$10(a5)	; save frequency to use
000A621E                            
000A621E                            SDAC_NoFrequency:
000A621E                            
000A621E 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A6222 6600 0000                  	bne.w	SDAC_Frequency			; EXTRA
000A6226 1A1C                       		move.b	(a4)+,d5				; load next note
000A6228 6A00 0000                  		bpl.w	SDAC_Timer				; if it's a timer, branch
000A622C 534C                       		subq.w	#$01,a4					; move back (it's not a timer after all)
000A622E 1B6D 000F 000E             		move.b	$0F(a5),$0E(a5)				; reset timer
000A6234 6000 0000                  		bra.w	SDAC_PlayNote				; continue
000A6238                            
000A6238                            ; ---------------------------------------------------------------------------
000A6238                            ; Note to PCM frequency conversion table
000A6238                            ; ---------------------------------------------------------------------------
000A6238                            ; The octave numbers below assume the samples are playing a default pitch/note
000A6238                            ; of C3 (A5)
000A6238                            ; ---------------------------------------------------------------------------
000A6238                            
000A6238                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000A6238                            
000A6238 0010 0011 0012 0013 0014+  FrequenciesPCM:	dc.w	$0010,$0011,$0012,$0013,$0014,$0015,$0017,$0018,$0019,$001B,$001D,$001E   ; Octave 0 - (81 - 8C)
000A6250 0020 0022 0024 0026 0028+  		dc.w	$0020,$0022,$0024,$0026,$0028,$002B,$002D,$0030,$0033,$0036,$0039,$003C   ; Octave 1 - (8D - 98)
000A6268 0040 0044 0048 004C 0051+  		dc.w	$0040,$0044,$0048,$004C,$0051,$0055,$005B,$0060,$0066,$006C,$0072,$0079   ; Octave 2 - (99 - A4)
000A6280 0080 0088 0090 0098 00A1+  		dc.w	$0080,$0088,$0090,$0098,$00A1,$00AB,$00B5,$00C0,$00CB,$00D7,$00E4,$00F2   ; Octave 3 - (A5 - B0)
000A6298 0100 010F 011F 0130 0143+  		dc.w	$0100,$010F,$011F,$0130,$0143,$0156,$016A,$0180,$0196,$01AF,$01C8,$01E3   ; Octave 4 - (B1 - BC)
000A62B0 0200 021E 023F 0261 0285+  		dc.w	$0200,$021E,$023F,$0261,$0285,$02AB,$02D4,$02FF,$032D,$035D,$0390,$03C7   ; Octave 5 - (BD - C8)
000A62C8 0400 043D 047D 04C2 050A+  		dc.w	$0400,$043D,$047D,$04C2,$050A,$0557,$05A8,$05FE,$0659,$06BA,$0721,$078D   ; Octave 6 - (C9 - D4)
000A62E0 0800 087A 08FB 0983 0A14+  		dc.w	$0800,$087A,$08FB,$0983,$0A14,$0AAE,$0B50,$0BFD,$0CB3,$0D74,$0E41,$0F1A   ; Octave 7 - (D5 - DF)
000A62F8                            
000A62F8                            ; ---------------------------------------------------------------------------
000A62F8                            ; Writing the sample to Dual PCM
000A62F8                            ; ---------------------------------------------------------------------------
000A62F8                            
000A62F8                            SDAC_Timer:
000A62F8 4EBA 0000                  		jsr	sub_71D40(pc)				; correct timer
000A62FC                            
000A62FC                            SDAC_PlayNote:
000A62FC 2B4C 0004                  		move.l	a4,$04(a5)				; update tracker address
000A6300                            
000A6300                            	SDAC_MuteNote:
000A6300 49F9 0000 0000             		lea	(StopSample).l,a4			; load "stop sample" address
000A6306 4A2D 0022                  	tst.b	$22(a5)
000A630A 6B00                       	bmi.s	SDAC_Rest
000A630C 1015                       		move.b	(a5),d0					; load flags
000A630E 0800 0004                  		btst	#$04,d0					; is soft key set?
000A6312 6600                       		bne.s	SDAC_SoftKey				; if so, branch
000A6314 E610                       		roxr.b	#$03,d0					; rotate around
000A6316 6500 0000                  		bcs.w	SDAC_Return				; if the channel is being interrupted (bit 2), branch
000A631A 6B00                       		bmi.s	SDAC_Rest				; if the rest bit was set, branch
000A631C 7000                       		moveq	#$00,d0					; clear d0
000A631E 102D 000B                  		move.b	$0B(a5),d0				; load sample ID
000A6322 D040                       		add.w	d0,d0					; multiply by 4 (long-word size)
000A6324 D040                       		add.w	d0,d0					; ''
000A6326 49F9 0000 0000             		lea	(SampleList).l,a4			; load sample list
000A632C 2874 0000                  		move.l	(a4,d0.w),a4				; load correct sample z80 pointer address
000A6330                            
000A6330                            SDAC_Rest:
000A6330 70DA                       		moveq	#%11011010|$FFFFFF00,d0			; prepare "JP Z" instruction
000A6332 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1		; load PCM 2 slot address
000A6338 41F9 00A0 0651             		lea	($A00000+PCM2_NewRET).l,a0		; ''
000A633E 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A6344 6600                       		bne.s	SDAC_NotePCM2				; if not, branch for PCM 2 writing
000A6346 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1		; load PCM 1 slot address
000A634C 41F9 00A0 064E             		lea	($A00000+PCM1_NewRET).l,a0		; ''
000A6352                            
000A6352                            SDAC_NotePCM2:
000A6352 33FC 0100 00A1 1100 0839+  		StopZ80
000A6364 12DC                       		move.b	(a4)+,(a1)+				; set address of sample
000A6366 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6368 12DC                       		move.b	(a4)+,(a1)+				; ''
000A636A 12DC                       		move.b	(a4)+,(a1)+				; set address of reverse sample
000A636C 12DC                       		move.b	(a4)+,(a1)+				; ''
000A636E 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6370 12DC                       		move.b	(a4)+,(a1)+				; set address of next sample
000A6372 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6374 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6376 12DC                       		move.b	(a4)+,(a1)+				; set address of next reverse sample
000A6378 12DC                       		move.b	(a4)+,(a1)+				; ''
000A637A 12DC                       		move.b	(a4)+,(a1)+				; ''
000A637C 1080                       		move.b	d0,(a0)					; change "JP NC" to "JP C"
000A637E 33FC 0000 00A1 1100        		StartZ80
000A6386                            
000A6386                            SDAC_SoftKey:
000A6386                            
000A6386                            	SDAC_Frequency:
000A6386                            
000A6386 102D 0009                  		move.b	$09(a5),d0				; load current volume
000A638A 7200                       	moveq	#$00,d1				; EXTRA
000A638C 122E 0016                  	move.b	$16(a6),d1			; EXTRA
000A6390                            ;	lea	(FOP_VolumeList).l,a0		; EXTRA
000A6390                            ;	move.b	(a0,d1.w),d1			; EXTRA
000A6390 D201                       	add.b	d1,d1
000A6392 D001                       	add.b	d1,d0
000A6394                            
000A6394 1200                       		move.b	d0,d1					; copy volume to d1
000A6396 6A00                       		bpl.s	SDAC_ValidVolume			; if it is between 00 and 80, branch
000A6398 7080                       		moveq	#$FFFFFF80,d0				; set volume to mute (81 - FF is out of bounds)
000A639A                            
000A639A                            SDAC_ValidVolume:
000A639A B02D 000C                  		cmp.b	$0C(a5),d0				; has the volume changed?
000A639E 6700                       		beq.s	SDAC_NoVolume				; if not, branch (don't bother)
000A63A0 1B40 000C                  		move.b	d0,$0C(a5)				; update volume
000A63A4 72D2                       		moveq	#($FFFFFF00|%11010010),d1		; prepare Z80 "JP NC" instruction
000A63A6 43F9 00A0 0634             		lea	($A00000+PCM_ChangeVolume).l,a1		; load volume change instruction address
000A63AC 41F9 00A0 0647             		lea	($A00000+PCM2_Volume+1).l,a0		; load PCM 2 volume address
000A63B2 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A63B8 6600                       		bne.s	SDAC_VolumePCM2				; if not, branch for PCM 2 writing
000A63BA 41F9 00A0 0642             		lea	($A00000+PCM1_Volume+1).l,a0		; load PCM 1 volume address
000A63C0                            
000A63C0                            SDAC_VolumePCM2:
000A63C0 33FC 0100 00A1 1100 0839+  		StopZ80
000A63D2 1080                       		move.b	d0,(a0)					; change PCM volume
000A63D4 1281                       		move.b	d1,(a1)					; change "JP C" to "JP NC"
000A63D6 33FC 0000 00A1 1100        		StartZ80
000A63DE                            
000A63DE                            SDAC_NoVolume:
000A63DE                            
000A63DE 3C2D 0010                  		move.w	$10(a5),d6				; load frequency
000A63E2 0815 0003                  		btst	#$03,(a5)				; is modulation turned on?
000A63E6 6700                       		beq.s	SDAC_WriteFrequency			; if not, branch
000A63E8 286D 0014                  		movea.l	$14(a5),a4				; load modulation address
000A63EC 43ED 0018                  		lea	$18(a5),a1				; load modulation settings RAM
000A63F0 0815 0004                  		btst.b	#$04,(a5)				; is soft key set?
000A63F4 6600                       		bne.s	SDAC_NoResetModulation			; if so, branch
000A63F6 12DC                       		move.b	(a4)+,(a1)+				; reset settings...
000A63F8 12DC                       		move.b	(a4)+,(a1)+				; ''
000A63FA 12DC                       		move.b	(a4)+,(a1)+				; ''
000A63FC 101C                       		move.b	(a4)+,d0				; ''
000A63FE E208                       		lsr.b	#$01,d0					; ''
000A6400 12C0                       		move.b	d0,(a1)+				; ''
000A6402 4259                       		clr.w	(a1)+					; clear modulation frequency
000A6404                            
000A6404                            SDAC_NoResetModulation:
000A6404 DC6D 001C                  		add.w	$1C(a5),d6				; add modulation pitch
000A6408 6000                       		bra.s	SDAC_WriteFrequency			; continue
000A640A                            
000A640A                            ; ---------------------------------------------------------------------------
000A640A                            ; Holding a note...
000A640A                            ; ---------------------------------------------------------------------------
000A640A                            
000A640A                            SDAC_HoldNote:
000A640A 1015                       		move.b	(a5),d0					; load flags
000A640C 0200 0003                  		andi.b	#%00000011,d0				; is the channel being interrupted by an SFX, or is resting?
000A6410 6600 0000                  		bne.w	SDAC_Return				; if so, branch
000A6414                            
000A6414 0815 0006                  	btst.b	#$06,(a5)			; EXTRA
000A6418 6700                       	beq.s	SDAC_NoUpdate			; EXTRA
000A641A 7A00                       	moveq	#$00,d5				; EXTRA
000A641C 1A2D 0020                  	move.b	$20(a5),d5			; EXTRA
000A6420 6000 FDE0                  	bra.w	SDAC_Update			; EXTRA
000A6424                            
000A6424                            	SDAC_NoUpdate:				; EXTRA
000A6424 4EBA 0000                  		jsr	sub_71D9E(pc)				; check for release
000A6428 4EBA 0000                  		jsr	sub_71DC6(pc)				; run modulation and get right frequency to d6
000A642C                            
000A642C                            	; d6 = frequency
000A642C                            
000A642C                            SDAC_WriteFrequency:
000A642C 102D 001E                  		move.b	$1E(a5),d0				; load detune
000A6430 4880                       		ext.w	d0					; sign extend to word
000A6432 D046                       		add.w	d6,d0					; add to frequency (move it up or down subtly)
000A6434 0815 0005                  		btst.b	#$05,(a5)				; is the reverse flag set?
000A6438 6700                       		beq.s	SDAC_NoReverse				; if not, branch
000A643A 4440                       		neg.w	d0					; reverse
000A643C                            	;	subi.w	#$0100*2,d0				; move back to Dual PCM's neutral
000A643C                            
000A643C                            SDAC_NoReverse:
000A643C                            	;	move.w	d0,d3					; copy to d3
000A643C                            	;	smi	d2					; set extend byte if value is negative
000A643C                            	;	addi.w	#$0100,d3				; convert to true neutral (for overflow)
000A643C                            	;	muls.w	#Z80E_Read,d3				; multiply by number of reads the Z80 performs (read 18 vs playback 10)
000A643C                            	;	move.b	d3,d5					; load fraction to d5
000A643C                            	;	asr.l	#$08,d3					; divide by 100
000A643C                            	;	move.w	d3,-(sp)				; get upper byte of overflow value
000A643C                            	;	move.b	(sp),d4					; ''
000A643C                            	;	move.w	d0,(sp)					; get upper byte of pitch/frequency
000A643C                            	;	move.b	(sp),d1					; ''
000A643C                            	;	addq.w	#$02,sp					; move stack forwards (would've done via increment and back...
000A643C                            								; ...index, but interrupts could be a problem).
000A643C                            	; d0 = XXXX.DD
000A643C                            	; d1 = XXQQ.XX
000A643C                            	; d2 = QQXX.XX
000A643C                            	; d3 = XXVV.XX
000A643C                            	; d4 = VVXX.XX
000A643C                            	; d5 = XXXX.OO
000A643C                            
000A643C 74D2                       		moveq	#$FFFFFF00|%11010010,d2
000A643E 1200                       		move.b	d0,d1
000A6440 E048                       		lsr.w	#$08,d0
000A6442 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A6448 6600                       		bne.s	SDAC_FrequePCM2				; if not, branch for PCM 2 writing
000A644A 33FC 0100 00A1 1100 0839+  		StopZ80
000A645C                            	;	move.b	d0,($A00000+PCM1_RateDiv+1)		; write pitch main dividend
000A645C                            	;	move.b	d1,($A00000+PCM1_RateQuo+1)		; write pitch quotient low
000A645C                            	;	move.b	d2,($A00000+PCM1_RateQuo+2)		; write pitch quotient high
000A645C                            	;	move.b	d3,($A00000+PCM1_Overflow+1)		; write low overflow
000A645C                            	;	move.b	d4,($A00000+PCM1_Overflow+2)		; write high overflow
000A645C                            	;	move.b	d5,($A00000+PCM1_OverDiv+1)		; write dividend overflow
000A645C                            	;	move.b	#%11010010,($A00000+PCM_ChangePitch)	; change "JP C" to "JP NC"
000A645C                            
000A645C 13C0 00A0 05DD             		move.b	d0,($A00000+PCM1_PitchHigh+1)
000A6462 13C1 00A0 05E8             		move.b	d1,($A00000+PCM1_PitchLow+1)
000A6468 13C2 00A0 05D2             		move.b	d2,($A00000+PCM1_ChangePitch)		; change "JP C" to "JP NC"
000A646E 33FC 0000 00A1 1100        		StartZ80
000A6476                            
000A6476                            SDAC_Return:
000A6476 4E75                       		rts						; return
000A6478                            
000A6478                            SDAC_FrequePCM2:
000A6478 33FC 0100 00A1 1100 0839+  		StopZ80
000A648A                            	;	move.b	d0,($A00000+PCM2_RateDiv+1)		; write pitch main dividend
000A648A                            	;	move.b	d1,($A00000+PCM2_RateQuo+1)		; write pitch quotient low
000A648A                            	;	move.b	d2,($A00000+PCM2_RateQuo+2)		; write pitch quotient high
000A648A                            	;	move.b	d3,($A00000+PCM2_Overflow+1)		; write low overflow
000A648A                            	;	move.b	d4,($A00000+PCM2_Overflow+2)		; write high overflow
000A648A                            	;	move.b	d5,($A00000+PCM2_OverDiv+1)		; write dividend overflow
000A648A                            	;	move.b	#%11010010,($A00000+PCM_ChangePitch)	; change "JP C" to "JP NC"
000A648A                            
000A648A 13C0 00A0 060E             		move.b	d0,($A00000+PCM2_PitchHigh+1)
000A6490 13C1 00A0 0619             		move.b	d1,($A00000+PCM2_PitchLow+1)
000A6496 13C2 00A0 0603             		move.b	d2,($A00000+PCM2_ChangePitch)		; change "JP C" to "JP NC"
000A649C 33FC 0000 00A1 1100        		StartZ80
000A64A4 4E75                       		rts						; return
000A64A6                            
000A64A6                            ; ===========================================================================
000A64A6                            ; ---------------------------------------------------------------------------
000A64A6                            ; Subroutine to run an FM channel ; EXTRA - ON/OFF
000A64A6                            ; ---------------------------------------------------------------------------
000A64A6                            
000A64A6                            SFM_CheckMute:
000A64A6 4A2E 000E                  	tst.b	$0E(a6)
000A64AA 6600                       	bne.s	S71CCA_NoCHG
000A64AC 102D 0021                  	move.b	$21(a5),d0
000A64B0 B02D 0022                  	cmp.b	$22(a5),d0
000A64B4 6700                       	beq.s	S71CCA_NoCHG
000A64B6 4A00                       	tst.b	d0
000A64B8 6A00                       	bpl.s	S71CCA_NoMute
000A64BA 4EBA 0000                  	jsr	sub_726FE(pc)
000A64BE 122D 000A                  	move.b	$0A(a5),d1
000A64C2 0201 003F                  	andi.b	#%00111111,d1
000A64C6 103C 00B4                  	move.b	#$B4,d0
000A64CA 4EB9 0000 0000             	jsr	loc_72716
000A64D0 08D5 0006                  	bset.b	#$06,(a5)
000A64D4 1B6D 0021 0022             	move.b	$21(a5),$22(a5)
000A64DA                            
000A64DA                            S71CCA_NoCHG:
000A64DA 4E75                       	rts
000A64DC                            
000A64DC                            S71CCA_NoMute:
000A64DC 1B40 0022                  	move.b	d0,$22(a5)
000A64E0 102D 000B                  	move.b	$0B(a5),d0
000A64E4 4EBA 0000                  	jsr	SFM_UpdateVoice(pc)
000A64E8                            ;	jsr	loc_726E2(pc)
000A64E8 122D 000A                  	move.b	$0A(a5),d1
000A64EC 103C 00B4                  	move.b	#$B4,d0
000A64F0 4EB9 0000 0000             	jsr	loc_72716
000A64F6 08D5 0006                  	bset.b	#$06,(a5)
000A64FA 4E75                       	rts
000A64FC                            
000A64FC                            ; ===========================================================================
000A64FC                            ; ---------------------------------------------------------------------------
000A64FC                            ; Subroutine to run an FM channel
000A64FC                            ; ---------------------------------------------------------------------------
000A64FC                            
000A64FC                            sub_71CCA:				; XREF: sub_71B4C
000A64FC 61A8                       	bsr.s	SFM_CheckMute			; EXTRA - ON/OFF
000A64FE                            
000A64FE 532D 000E                  		subq.b	#1,$E(a5)
000A6502 6600                       		bne.s	loc_71CE0
000A6504 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A6508 0895 0004                  		bclr	#4,(a5)
000A650C 4EBA 0000                  		jsr	sub_71CEC(pc)
000A6510 4EBA 0000                  		jsr	sub_71E18(pc)
000A6514 6000 0000                  		bra.w	loc_726E2
000A6518                            ; ===========================================================================
000A6518                            
000A6518                            loc_71CE0:
000A6518 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A651C 6700                       	beq.s	SFM_NoUpdate			; EXTRA
000A651E 4EB9 0000 0000             	jsr	sub_72CB4			; EXTRA
000A6524 7A00                       	moveq	#$00,d5				; EXTRA
000A6526 1A2D 0020                  	move.b	$20(a5),d5			; EXTRA
000A652A 0405 0080                  	subi.b	#$80,d5				; EXTRA
000A652E 6700                       	beq.s	SFM_NoUpdate			; EXTRA
000A6530 4EB9 0000 0000             	jsr	SFM_UpdateFreque		; EXTRA
000A6536 6000 0000                  	bra.w	loc_71E24			; EXTRA
000A653A                            
000A653A                            	SFM_NoUpdate:				; EXTRA
000A653A 4EBA 0000                  		jsr	sub_71D9E(pc)
000A653E 4EBA 0000                  		jsr	sub_71DC6(pc)
000A6542 6000 0000                  		bra.w	loc_71E24
000A6546                            ; End of function sub_71CCA
000A6546                            
000A6546                            
000A6546                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6546                            
000A6546                            
000A6546                            sub_71CEC:				; XREF: sub_71CCA
000A6546 286D 0004                  		movea.l	4(a5),a4
000A654A 0895 0001                  		bclr	#1,(a5)
000A654E                            
000A654E                            loc_71CF4:
000A654E 7A00                       		moveq	#0,d5
000A6550 1A1C                       		move.b	(a4)+,d5
000A6552 0C05 00E0                  		cmpi.b	#-$20,d5
000A6556 6500                       		bcs.s	loc_71D04
000A6558 4EBA 0000                  		jsr	sub_72A5A(pc)
000A655C 60F0                       		bra.s	loc_71CF4
000A655E                            ; ===========================================================================
000A655E                            
000A655E                            loc_71D04:
000A655E 4EBA 0000                  		jsr	sub_726FE(pc)
000A6562 4A05                       		tst.b	d5
000A6564 6A00                       		bpl.s	loc_71D1A
000A6566 1B45 0020                  	move.b	d5,$20(a5)			; EXTRA
000A656A 4EBA 0000                  		jsr	sub_71D22(pc)
000A656E 1A1C                       		move.b	(a4)+,d5
000A6570 6A00                       		bpl.s	loc_71D1A
000A6572 534C                       		subq.w	#1,a4
000A6574 6000 0000                  		bra.w	sub_71D60
000A6578                            ; ===========================================================================
000A6578                            
000A6578                            loc_71D1A:
000A6578 4EBA 0000                  		jsr	sub_71D40(pc)
000A657C 6000 0000                  		bra.w	sub_71D60
000A6580                            ; End of function sub_71CEC
000A6580                            
000A6580                            
000A6580                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6580                            
000A6580                            
000A6580                            sub_71D22:				; XREF: sub_71CEC
000A6580 0405 0080                  		subi.b	#$80,d5
000A6584 6700                       		beq.s	loc_71D58
000A6586                            
000A6586                            	SFM_UpdateFreque:			; EXTRA
000A6586 DA2D 0008                  		add.b	8(a5),d5
000A658A DA2E 0014                  	add.b	$14(a6),d5			; EXTRA
000A658E 0245 007F                  		andi.w	#$7F,d5
000A6592 E34D                       		lsl.w	#1,d5
000A6594 41FA 0000                  		lea	word_72790(pc),a0
000A6598 3C30 5000                  		move.w	(a0,d5.w),d6
000A659C 3B46 0010                  		move.w	d6,$10(a5)
000A65A0 4E75                       		rts	
000A65A2                            ; End of function sub_71D22
000A65A2                            
000A65A2                            
000A65A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A65A2                            
000A65A2                            
000A65A2                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000A65A2 1005                       		move.b	d5,d0
000A65A4 122D 0002                  		move.b	2(a5),d1
000A65A8                            
000A65A8                            loc_71D46:
000A65A8 5301                       		subq.b	#1,d1
000A65AA 6700                       		beq.s	loc_71D4E
000A65AC D005                       		add.b	d5,d0
000A65AE 60F8                       		bra.s	loc_71D46
000A65B0                            ; ===========================================================================
000A65B0                            
000A65B0                            loc_71D4E:
000A65B0 1B40 000F                  		move.b	d0,$F(a5)
000A65B4 1B40 000E                  		move.b	d0,$E(a5)
000A65B8 4E75                       		rts	
000A65BA                            ; End of function sub_71D40
000A65BA                            
000A65BA                            ; ===========================================================================
000A65BA                            
000A65BA                            loc_71D58:				; XREF: sub_71D22
000A65BA 08D5 0001                  		bset	#1,(a5)
000A65BE 426D 0010                  		clr.w	$10(a5)
000A65C2                            
000A65C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A65C2                            
000A65C2                            
000A65C2                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
000A65C2 2B4C 0004                  		move.l	a4,4(a5)
000A65C6 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000A65CC 0815 0004                  		btst	#4,(a5)
000A65D0 6600                       		bne.s	locret_71D9C
000A65D2 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
000A65D8 422D 000C                  		clr.b	$C(a5)
000A65DC 0815 0003                  		btst	#3,(a5)
000A65E0 6700                       		beq.s	locret_71D9C
000A65E2 206D 0014                  		movea.l	$14(a5),a0
000A65E6 1B58 0018                  		move.b	(a0)+,$18(a5)
000A65EA 1B58 0019                  		move.b	(a0)+,$19(a5)
000A65EE 1B58 001A                  		move.b	(a0)+,$1A(a5)
000A65F2 1018                       		move.b	(a0)+,d0
000A65F4 E208                       		lsr.b	#1,d0
000A65F6 1B40 001B                  		move.b	d0,$1B(a5)
000A65FA 426D 001C                  		clr.w	$1C(a5)
000A65FE                            
000A65FE                            locret_71D9C:
000A65FE 4E75                       		rts	
000A6600                            ; End of function sub_71D60
000A6600                            
000A6600                            
000A6600                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6600                            
000A6600                            
000A6600                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000A6600 4A2D 0012                  		tst.b	$12(a5)
000A6604 6700                       		beq.s	locret_71DC4
000A6606 532D 0012                  		subq.b	#1,$12(a5)
000A660A 6600                       		bne.s	locret_71DC4
000A660C 4A2E 0008                  		tst.b	$08(a6)						; CHG: is this a PCM channel?
000A6610 6B00                       		bmi.s	SDCR_StopPCM					; if so, branch (skipping rest flag setting)
000A6612 08D5 0001                  		bset	#1,(a5)
000A6616 4A2D 0001                  		tst.b	1(a5)
000A661A 6B00 0000                  		bmi.w	loc_71DBE
000A661E 4EBA 0000                  		jsr	sub_726FE(pc)
000A6622 584F                       		addq.w	#4,sp
000A6624 4E75                       		rts	
000A6626                            ; ===========================================================================
000A6626                            
000A6626                            loc_71DBE:
000A6626 4EBA 0000                  		jsr	sub_729A0(pc)
000A662A 584F                       		addq.w	#4,sp
000A662C                            
000A662C                            locret_71DC4:
000A662C 4E75                       		rts	
000A662E                            ; End of function sub_71D9E
000A662E                            
000A662E                            SDCR_StopPCM:
000A662E 33FC 0100 00A1 1100 0839+  		StopZ80
000A6640 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A6646 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A664C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A664E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6650 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6652 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6654 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6656 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6658 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A665A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A665C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A665E 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6660 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6662 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6664 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A666C 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A6672 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 2 slot address
000A6678 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A667A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A667C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A667E 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6680 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6682 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6684 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6686 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6688 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A668A 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A668C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A668E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6690 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A6698 33FC 0000 00A1 1100        		StartZ80
000A66A0 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A66A2 4E75                       		rts							; CHG: return
000A66A4                            
000A66A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A66A4                            
000A66A4                            
000A66A4                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
000A66A4 0815 0003                  		btst	#3,(a5)
000A66A8 6700                       		beq.s	locret_71E16
000A66AA 4A2D 0018                  		tst.b	$18(a5)
000A66AE 6700                       		beq.s	loc_71DDA
000A66B0 532D 0018                  		subq.b	#1,$18(a5)
000A66B4 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A66B6 4E75                       		rts	
000A66B8                            ; ===========================================================================
000A66B8                            
000A66B8                            loc_71DDA:
000A66B8 532D 0019                  		subq.b	#1,$19(a5)
000A66BC 6700                       		beq.s	loc_71DE2
000A66BE 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A66C0 4E75                       		rts	
000A66C2                            ; ===========================================================================
000A66C2                            
000A66C2                            loc_71DE2:
000A66C2 206D 0014                  		movea.l	$14(a5),a0
000A66C6 1B68 0001 0019             		move.b	1(a0),$19(a5)
000A66CC 4A2D 001B                  		tst.b	$1B(a5)
000A66D0 6600                       		bne.s	loc_71DFE
000A66D2 1B68 0003 001B             		move.b	3(a0),$1B(a5)
000A66D8 442D 001A                  		neg.b	$1A(a5)
000A66DC 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A66DE 4E75                       		rts	
000A66E0                            ; ===========================================================================
000A66E0                            
000A66E0                            loc_71DFE:
000A66E0 532D 001B                  		subq.b	#1,$1B(a5)
000A66E4 1C2D 001A                  		move.b	$1A(a5),d6
000A66E8 4886                       		ext.w	d6
000A66EA DC6D 001C                  		add.w	$1C(a5),d6
000A66EE 3B46 001C                  		move.w	d6,$1C(a5)
000A66F2 DC6D 0010                  		add.w	$10(a5),d6
000A66F6 4E75                       		rts							; CHG: return (don't skip)
000A66F8                            
000A66F8                            locret_71E16:
000A66F8 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A66FA 4E75                       		rts	
000A66FC                            ; End of function sub_71DC6
000A66FC                            
000A66FC                            
000A66FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A66FC                            
000A66FC                            
000A66FC                            sub_71E18:				; XREF: sub_71CCA
000A66FC 0815 0001                  		btst	#1,(a5)
000A6700 6600                       		bne.s	locret_71E48
000A6702 3C2D 0010                  		move.w	$10(a5),d6
000A6706 6700                       		beq.s	loc_71E4A
000A6708                            
000A6708                            loc_71E24:				; XREF: sub_71CCA
000A6708 102D 001E                  		move.b	$1E(a5),d0
000A670C 4880                       		ext.w	d0
000A670E DC40                       		add.w	d0,d6
000A6710 0815 0002                  		btst	#2,(a5)
000A6714 6600                       		bne.s	locret_71E48
000A6716 4A2E 000E                  	tst.b	$0E(a6)
000A671A 6600                       	bne.s	locret_71E48_2
000A671C 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6720 6600                       	bne.s	locret_71E48
000A6722                            
000A6722                            	locret_71E48_2:
000A6722 3206                       		move.w	d6,d1
000A6724 E049                       		lsr.w	#8,d1
000A6726 103C 00A4                  		move.b	#-$5C,d0
000A672A 4EBA 0000                  		jsr	sub_72722(pc)
000A672E 1206                       		move.b	d6,d1
000A6730 103C 00A0                  		move.b	#-$60,d0
000A6734 4EBA 0000                  		jsr	sub_72722(pc)
000A6738                            
000A6738                            locret_71E48:
000A6738 4E75                       		rts	
000A673A                            ; ===========================================================================
000A673A                            
000A673A                            loc_71E4A:
000A673A 08D5 0001                  		bset	#1,(a5)
000A673E 4E75                       		rts	
000A6740                            ; End of function sub_71E18
000A6740                            
000A6740                            ; ===========================================================================
000A6740                            
000A6740                            loc_71E50:				; XREF: sub_71B4C
000A6740 6B00                       		bmi.s	loc_71E94
000A6742 0C2E 0002 0003             		cmpi.b	#2,3(a6)
000A6748 6700 0000                  		beq.w	loc_71EFE
000A674C 1D7C 0002 0003             		move.b	#2,3(a6)
000A6752 7602                       		moveq	#2,d3
000A6754 103C 00B4                  		move.b	#-$4C,d0
000A6758 7200                       		moveq	#0,d1
000A675A                            
000A675A                            loc_71E6A:
000A675A 4EBA 0000                  		jsr	sub_7272E(pc)
000A675E 4EBA 0000                  		jsr	sub_72764(pc)
000A6762 5200                       		addq.b	#1,d0
000A6764 51CB FFF4                  		dbf	d3,loc_71E6A
000A6768                            
000A6768 7602                       		moveq	#2,d3
000A676A 7028                       		moveq	#$28,d0
000A676C                            
000A676C                            loc_71E7C:
000A676C 1203                       		move.b	d3,d1
000A676E 4EBA 0000                  		jsr	sub_7272E(pc)
000A6772 5801                       		addq.b	#4,d1
000A6774 4EBA 0000                  		jsr	sub_7272E(pc)
000A6778 51CB FFF2                  		dbf	d3,loc_71E7C
000A677C                            
000A677C 4EBA 0000                  		jsr	sub_729B6(pc)
000A6780 6000 F9CE                  		bra.w	loc_71C44
000A6784                            ; ===========================================================================
000A6784                            
000A6784                            loc_71E94:				; XREF: loc_71E50
000A6784 422E 0003                  		clr.b	3(a6)
000A6788 7630                       		moveq	#$30,d3
000A678A 4BEE 0040                  		lea	$40(a6),a5
000A678E 7807                       		moveq	#7,d4					; MJ: number of YM2612 based channels
000A6790                            
000A6790                            loc_71EA0:
000A6790 0815 0007                  		btst	#7,(a5)
000A6794 6700                       		beq.s	loc_71EB8
000A6796 0815 0002                  		btst	#2,(a5)
000A679A 6600                       		bne.s	loc_71EB8
000A679C 4A2E 000E                  	tst.b	$0E(a6)
000A67A0 6600                       	bne.s	loc_71EB8_2
000A67A2 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A67A6 6600                       	bne.s	loc_71EB8
000A67A8                            
000A67A8                            	loc_71EB8_2:
000A67A8 103C 00B4                  		move.b	#-$4C,d0
000A67AC 122D 000A                  		move.b	$A(a5),d1
000A67B0 4EBA 0000                  		jsr	sub_72722(pc)
000A67B4                            
000A67B4                            loc_71EB8:
000A67B4 DAC3                       		adda.w	d3,a5
000A67B6 51CC FFD8                  		dbf	d4,loc_71EA0
000A67BA                            
000A67BA 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000A67BE 7802                       		moveq	#2,d4
000A67C0                            
000A67C0                            loc_71EC4:
000A67C0 0815 0007                  		btst	#7,(a5)
000A67C4 6700                       		beq.s	loc_71EDC
000A67C6 0815 0002                  		btst	#2,(a5)
000A67CA 6600                       		bne.s	loc_71EDC
000A67CC 4A2E 000E                  	tst.b	$0E(a6)
000A67D0 6600                       	bne.s	loc_71EDC_2
000A67D2 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A67D6 6600                       	bne.s	loc_71EDC
000A67D8                            
000A67D8                            	loc_71EDC_2:
000A67D8 103C 00B4                  		move.b	#-$4C,d0
000A67DC 122D 000A                  		move.b	$A(a5),d1
000A67E0 4EBA 0000                  		jsr	sub_72722(pc)
000A67E4                            
000A67E4                            loc_71EDC:
000A67E4 DAC3                       		adda.w	d3,a5
000A67E6 51CC FFD8                  		dbf	d4,loc_71EC4
000A67EA                            
000A67EA 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A67EE 0815 0007                  		btst	#7,(a5)
000A67F2 6700                       		beq.s	loc_71EFE
000A67F4 0815 0002                  		btst	#2,(a5)
000A67F8 6600                       		bne.s	loc_71EFE
000A67FA 4A2E 000E                  	tst.b	$0E(a6)
000A67FE 6600                       	bne.s	loc_71EFE_2
000A6800 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6804 6600                       	bne.s	loc_71EFE
000A6806                            
000A6806                            	loc_71EFE_2:
000A6806 103C 00B4                  		move.b	#-$4C,d0
000A680A 122D 000A                  		move.b	$A(a5),d1
000A680E 4EBA 0000                  		jsr	sub_72722(pc)
000A6812                            
000A6812                            loc_71EFE:
000A6812 6000 F93C                  		bra.w	loc_71C44
000A6816                            
000A6816                            ; ---------------------------------------------------------------------------
000A6816                            ; Subroutine to	play a sound or	music track
000A6816                            ; ---------------------------------------------------------------------------
000A6816                            
000A6816                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6816                            
000A6816                            
000A6816                            Sound_Play:				; XREF: sub_71B4C
000A6816 2079 000A 5E7C             		movea.l	(Go_SoundTypes).l,a0
000A681C 43EE 000A                  		lea	$A(a6),a1	; load music track number
000A6820 1616                       		move.b	0(a6),d3
000A6822 7802                       		moveq	#2,d4
000A6824                            
000A6824                            loc_71F12:
000A6824 1011                       		move.b	(a1),d0		; move track number to d0
000A6826 1200                       		move.b	d0,d1
000A6828 4219                       		clr.b	(a1)+
000A682A 0400 0081                  		subi.b	#$81,d0
000A682E 6500                       		bcs.s	loc_71F3E
000A6830 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000A6836 6700                       		beq.s	loc_71F2C
000A6838 1D41 000A                  		move.b	d1,$A(a6)
000A683C 6000                       		bra.s	loc_71F3E
000A683E                            ; ===========================================================================
000A683E                            
000A683E                            loc_71F2C:
000A683E 0240 007F                  		andi.w	#$7F,d0
000A6842 1430 0000                  		move.b	(a0,d0.w),d2
000A6846 B403                       		cmp.b	d3,d2
000A6848 6500                       		bcs.s	loc_71F3E
000A684A 1602                       		move.b	d2,d3
000A684C 1D41 0009                  		move.b	d1,9(a6)	; set music flag
000A6850                            
000A6850                            loc_71F3E:
000A6850 51CC FFD2                  		dbf	d4,loc_71F12
000A6854                            
000A6854 4A03                       		tst.b	d3
000A6856 6B00                       		bmi.s	locret_71F4A
000A6858 1C83                       		move.b	d3,0(a6)
000A685A                            
000A685A                            locret_71F4A:
000A685A 4E75                       		rts	
000A685C                            ; End of function Sound_Play
000A685C                            
000A685C                            
000A685C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A685C                            
000A685C                            
000A685C                            Sound_ChkValue:				; XREF: sub_71B4C
000A685C 7E00                       		moveq	#0,d7
000A685E 1E2E 0009                  		move.b	9(a6),d7
000A6862 6700 0000                  		beq.w	Sound_E4
000A6866 6A00                       		bpl.s	locret_71F8C
000A6868 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
000A686E 0C07 009F                  		cmpi.b	#$9F,d7
000A6872 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
000A6876 0C07 00A0                  		cmpi.b	#$A0,d7
000A687A 6500 0000                  		bcs.w	locret_71F8C
000A687E 0C07 00CF                  		cmpi.b	#$CF,d7
000A6882 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
000A6886 0C07 00D0                  		cmpi.b	#$D0,d7
000A688A 6500 0000                  		bcs.w	locret_71F8C
000A688E 0C07 00E0                  		cmpi.b	#$E0,d7
000A6892 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
000A6896 0C07 00E4                  		cmpi.b	#$E4,d7
000A689A 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
000A689C                            
000A689C                            locret_71F8C:
000A689C 4E75                       		rts	
000A689E                            ; ===========================================================================
000A689E                            
000A689E                            Sound_E0toE4:				; XREF: Sound_ChkValue
000A689E 0407 00E0                  		subi.b	#$E0,d7
000A68A2 E54F                       		lsl.w	#2,d7
000A68A4 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000A68A8                            ; ===========================================================================
000A68A8                            
000A68A8                            Sound_ExIndex:
000A68A8 6000 0000                  		bra.w	Sound_E0
000A68AC                            ; ===========================================================================
000A68AC 6000 0000                  		bra.w	Sound_E1
000A68B0                            ; ===========================================================================
000A68B0 6000 0000                  		bra.w	Sound_E2
000A68B4                            ; ===========================================================================
000A68B4 6000 0000                  		bra.w	Sound_E3
000A68B8                            ; ===========================================================================
000A68B8 6000 0000                  		bra.w	Sound_E4
000A68BC                            ; ===========================================================================
000A68BC                            ; ---------------------------------------------------------------------------
000A68BC                            ; Play "Say-gaa" PCM sound
000A68BC                            ; ---------------------------------------------------------------------------
000A68BC                            
000A68BC                            Sound_E1:
000A68BC 33FC 0100 00A1 1100 0839+  		StopZ80						; MJ: request Z80 stop "ON"
000A68CE 45F9 0000 0000             		lea	(SegaPCM).l,a2				; MJ: load sample address
000A68D4 47F9 00A0 4000             		lea	($A04000).l,a3				; MJ: load YM2612 port
000A68DA 16FC 002A                  		move.b	#$2A,(a3)+				; MJ: set YM2612 address to the PCM data port
000A68DE 283C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM)-$01,d4		; MJ: prepare size
000A68E4 3604                       		move.w	d4,d3					; MJ: get lower word size
000A68E6 4844                       		swap	d4					; MJ: get upper word size
000A68E8                            
000A68E8                            PlayPCM_Loop:
000A68E8 169A                       		move.b	(a2)+,(a3)				; MJ: save sample data to port
000A68EA 702B                       		moveq	#$2B,d0					; MJ: set delay time
000A68EC 51C8 FFFE                  		dbf	d0,*					; MJ: delay...
000A68F0 51CB FFF6                  		dbf	d3,PlayPCM_Loop				; MJ: repeat til done
000A68F4 51CC FFF2                  		dbf	d4,PlayPCM_Loop				; MJ: ''
000A68F8 16BC 0080                  		move.b	#$80,(a3)				; MJ: save mute data to port
000A68FC 584F                       		addq.w	#$04,sp					; MJ: skip return address
000A68FE 534B                       		subq.w	#$01,a3					; MJ: move back to address port
000A6900 4A13                       		tst.b	(a3)					; MJ: is the YM2612 busy?
000A6902 6BFC                       		bmi.s	*-$02					; MJ: if so, branch and recheck
000A6904 16BC 002A                  		move.b	#$2A,(a3)				; MJ: write address (set it back to DAC port for the Z80)
000A6908 33FC 0000 00A1 1100        		StartZ80					; MJ: request Z80 stop "OFF"
000A6910 4E75                       		rts						; MJ: return
000A6912                            
000A6912                            ; ===========================================================================
000A6912                            ; ---------------------------------------------------------------------------
000A6912                            ; Play music track $81-$9F
000A6912                            ; ---------------------------------------------------------------------------
000A6912                            
000A6912                            Sound_81to9F:
000A6912 33FC 0100 00A1 1100 0839+  		StopZ80
000A6924 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A692A 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A6930 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6932 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6934 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6936 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6938 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A693A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A693C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A693E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6940 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6942 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6944 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6946 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6948 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A6950 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A6956 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 2 slot address
000A695C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A695E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6960 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6962 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6964 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6966 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6968 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A696A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A696C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A696E 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6970 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6972 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6974 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A697C 33FC 0000 00A1 1100        		StartZ80
000A6984                            
000A6984 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
000A6988 6600                       		bne.s	loc_72024	; if not, branch
000A698A 4A2E 0027                  		tst.b	$27(a6)
000A698E 6600 0000                  		bne.w	loc_721B6
000A6992 4BEE 0040                  		lea	$40(a6),a5
000A6996 700A                       		moveq	#10,d0					; MJ: number of channels in total
000A6998                            
000A6998                            loc_71FE6:
000A6998 0895 0002                  		bclr	#2,(a5)
000A699C DAFC 0030                  		adda.w	#$30,a5
000A69A0 51C8 FFF6                  		dbf	d0,loc_71FE6
000A69A4                            
000A69A4 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000A69A8 7005                       		moveq	#5,d0
000A69AA                            
000A69AA                            loc_71FF8:
000A69AA 0895 0007                  		bclr	#7,(a5)
000A69AE DAFC 0030                  		adda.w	#$30,a5
000A69B2 51C8 FFF6                  		dbf	d0,loc_71FF8
000A69B6 4216                       		clr.b	0(a6)
000A69B8 204E                       		movea.l	a6,a0
000A69BA 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
000A69BE 303C 0087                  		move.w	#$87,d0
000A69C2                            
000A69C2                            loc_72012:
000A69C2 22D8                       		move.l	(a0)+,(a1)+
000A69C4 51C8 FFFC                  		dbf	d0,loc_72012
000A69C8                            
000A69C8 1D7C 0080 0027             		move.b	#$80,$27(a6)
000A69CE 4216                       		clr.b	0(a6)
000A69D0 6000                       		bra.s	loc_7202C
000A69D2                            ; ===========================================================================
000A69D2                            
000A69D2                            loc_72024:
000A69D2 422E 0027                  		clr.b	$27(a6)
000A69D6 422E 0026                  		clr.b	$26(a6)
000A69DA                            
000A69DA                            loc_7202C:
000A69DA 4EBA 0000                  		jsr	sub_725CA(pc)
000A69DE                            
000A69DE 2879 000A 5E8C             		movea.l	(off_719A0).l,a4
000A69E4 0407 0081                  		subi.b	#$81,d7
000A69E8 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000A69EE 2879 000A 5E84             		movea.l	(Go_MusicIndex).l,a4
000A69F4 E54F                       		lsl.w	#2,d7
000A69F6 2874 7000                  		movea.l	(a4,d7.w),a4
000A69FA 7000                       		moveq	#0,d0
000A69FC 3014                       		move.w	(a4),d0
000A69FE D08C                       		add.l	a4,d0
000A6A00 2D40 0018                  		move.l	d0,$18(a6)
000A6A04 102C 0005                  		move.b	5(a4),d0
000A6A08 1D40 0028                  		move.b	d0,$28(a6)
000A6A0C 4A2E 002A                  		tst.b	$2A(a6)
000A6A10 6700                       		beq.s	loc_72068
000A6A12 102E 0029                  		move.b	$29(a6),d0
000A6A16                            
000A6A16                            loc_72068:
000A6A16 1D40 0002                  		move.b	d0,2(a6)
000A6A1A 1D40 0001                  		move.b	d0,1(a6)
000A6A1E 7200                       		moveq	#0,d1
000A6A20 264C                       		movea.l	a4,a3
000A6A22 5C4C                       		addq.w	#6,a4
000A6A24 7E00                       		moveq	#0,d7
000A6A26 1E2B 0002                  		move.b	2(a3),d7
000A6A2A 6700 0000                  		beq.w	loc_72114
000A6A2E 5307                       		subq.b	#1,d7
000A6A30 123C 00C0                  		move.b	#-$40,d1
000A6A34 182B 0004                  		move.b	4(a3),d4
000A6A38 7C30                       		moveq	#$30,d6
000A6A3A 1A3C 0001                  		move.b	#1,d5
000A6A3E 43EE 0040                  		lea	$40(a6),a1
000A6A42 45FA 0000                  		lea	byte_721BA(pc),a2
000A6A46                            
000A6A46                            loc_72098:
000A6A46 08D1 0007                  		bset	#7,(a1)
000A6A4A 135A 0001                  		move.b	(a2)+,1(a1)
000A6A4E 1344 0002                  		move.b	d4,2(a1)
000A6A52 1346 000D                  		move.b	d6,$D(a1)
000A6A56 1341 000A                  		move.b	d1,$A(a1)
000A6A5A 1345 000E                  		move.b	d5,$E(a1)
000A6A5E 7000                       		moveq	#0,d0
000A6A60 3340 0010                  		move.w	d0,$10(a1)				; MJ: clear FM's frequency (ensures no frequency writing)
000A6A64 137C 0080 000C             		move.b	#$80,$0C(a1)				; MJ: set last frame's volume to something impossible (volume is from C0 - 40)
000A6A6A 301C                       		move.w	(a4)+,d0
000A6A6C D08B                       		add.l	a3,d0
000A6A6E 2340 0004                  		move.l	d0,4(a1)
000A6A72 335C 0008                  		move.w	(a4)+,8(a1)
000A6A76 D2C6                       		adda.w	d6,a1
000A6A78 51CF FFCC                  		dbf	d7,loc_72098
000A6A7C 702B                       		moveq	#$2B,d0					; MJ: set YM2612 address to DAC/FM6 switch
000A6A7E 123C 0080                  		move.b	#%10000000,d1				; MJ: set to turn DAC on
000A6A82 0C2B 0008 0002             		cmpi.b	#8,2(a3)				; MJ: changed to 8 (8 = 6FM channels, no DAC)
000A6A88 6600                       		bne.s	loc_720D8
000A6A8A                            	;	moveq	#$2B,d0					; MJ: removed...
000A6A8A 7200                       		moveq	#0,d1
000A6A8C 4EBA 0000                  		jsr	sub_7272E(pc)
000A6A90 6000 0000                  		bra.w	loc_72114
000A6A94                            ; ===========================================================================
000A6A94                            
000A6A94                            loc_720D8:
000A6A94 4EBA 0000                  		jsr	sub_7272E(pc)				; MJ: added... (turn DAC on)
000A6A98                            
000A6A98                            	; --- Key off FM 6 ---
000A6A98                            
000A6A98 7028                       		moveq	#$28,d0
000A6A9A 7206                       		moveq	#6,d1
000A6A9C 4EBA 0000                  		jsr	sub_7272E(pc)
000A6AA0                            
000A6AA0                            	; --- Sets FM 6 to mute ---
000A6AA0                            
000A6AA0 103C 0042                  		move.b	#$42,d0
000A6AA4 727F                       		moveq	#$7F,d1
000A6AA6 4EBA 0000                  		jsr	sub_72764(pc)
000A6AAA 103C 004A                  		move.b	#$4A,d0
000A6AAE 727F                       		moveq	#$7F,d1
000A6AB0 4EBA 0000                  		jsr	sub_72764(pc)
000A6AB4 103C 0046                  		move.b	#$46,d0
000A6AB8 727F                       		moveq	#$7F,d1
000A6ABA 4EBA 0000                  		jsr	sub_72764(pc)
000A6ABE 103C 004E                  		move.b	#$4E,d0
000A6AC2 727F                       		moveq	#$7F,d1
000A6AC4 4EBA 0000                  		jsr	sub_72764(pc)
000A6AC8 103C 00B6                  		move.b	#-$4A,d0
000A6ACC 123C 00C0                  		move.b	#-$40,d1
000A6AD0 4EBA 0000                  		jsr	sub_72764(pc)
000A6AD4                            
000A6AD4                            loc_72114:
000A6AD4 7A02                       		moveq	#$02,d5					; EXT: set PSG to delay for 1 extra frame (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
000A6AD6 7E00                       		moveq	#0,d7
000A6AD8 1E2B 0003                  		move.b	3(a3),d7
000A6ADC 6700                       		beq.s	loc_72154
000A6ADE 5307                       		subq.b	#1,d7
000A6AE0 43EE 01C0                  		lea	$1C0(a6),a1				; MJ: new BGM/SFX location
000A6AE4 45FA 0000                  		lea	byte_721C2(pc),a2
000A6AE8                            
000A6AE8                            loc_72126:
000A6AE8 08D1 0007                  		bset	#7,(a1)
000A6AEC 135A 0001                  		move.b	(a2)+,1(a1)
000A6AF0 1344 0002                  		move.b	d4,2(a1)
000A6AF4 1346 000D                  		move.b	d6,$D(a1)
000A6AF8 1345 000E                  		move.b	d5,$E(a1)
000A6AFC 337C FFFF 0010             		move.w	#$FFFF,$10(a1)				; MJ: clear PSG's frequency (ensures no frequency writing)
000A6B02 137C 0001 0012             		move.b	#$01,$12(a1)				; MJ: set key release rate to 1
000A6B08 7000                       		moveq	#0,d0
000A6B0A 301C                       		move.w	(a4)+,d0
000A6B0C D08B                       		add.l	a3,d0
000A6B0E 2340 0004                  		move.l	d0,4(a1)
000A6B12 335C 0008                  		move.w	(a4)+,8(a1)
000A6B16 101C                       		move.b	(a4)+,d0
000A6B18 135C 000B                  		move.b	(a4)+,$B(a1)
000A6B1C D2C6                       		adda.w	d6,a1
000A6B1E 51CF FFC8                  		dbf	d7,loc_72126
000A6B22                            
000A6B22                            loc_72154:
000A6B22 43EE 0250                  		lea	$250(a6),a1				; MJ: new SFX location
000A6B26 7E05                       		moveq	#5,d7
000A6B28                            
000A6B28                            loc_7215A:
000A6B28 4A11                       		tst.b	(a1)
000A6B2A 6A00 0000                  		bpl.w	loc_7217C
000A6B2E 7000                       		moveq	#0,d0
000A6B30 1029 0001                  		move.b	1(a1),d0
000A6B34 6B00                       		bmi.s	loc_7216E
000A6B36 5500                       		subq.b	#2,d0
000A6B38 E508                       		lsl.b	#2,d0
000A6B3A 6000                       		bra.s	loc_72170
000A6B3C                            ; ===========================================================================
000A6B3C                            
000A6B3C                            loc_7216E:
000A6B3C E608                       		lsr.b	#3,d0
000A6B3E                            
000A6B3E                            loc_72170:
000A6B3E 41FA 0000                  		lea	dword_722CC(pc),a0
000A6B42 2070 0000                  		movea.l	(a0,d0.w),a0
000A6B46 08D0 0002                  		bset	#2,(a0)
000A6B4A                            
000A6B4A                            loc_7217C:
000A6B4A D2C6                       		adda.w	d6,a1
000A6B4C 51CF FFDA                  		dbf	d7,loc_7215A
000A6B50                            
000A6B50 4A6E 0370                  		tst.w	$370(a6)				; MJ: new SFX location
000A6B54 6A00                       		bpl.s	loc_7218E
000A6B56 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
000A6B5C                            
000A6B5C                            loc_7218E:
000A6B5C 4A6E 03A0                  		tst.w	$3A0(a6)				; MJ: new SFX location
000A6B60 6A00                       		bpl.s	loc_7219A
000A6B62 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
000A6B68                            
000A6B68                            
000A6B68                            loc_7219A:
000A6B68 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
000A6B6C 7805                       		moveq	#5,d4
000A6B6E                            
000A6B6E                            loc_721A0:
000A6B6E 4EBA 0000                  		jsr	sub_726FE(pc)
000A6B72 DAC6                       		adda.w	d6,a5
000A6B74 51CC FFF8                  		dbf	d4,loc_721A0
000A6B78 7802                       		moveq	#2,d4
000A6B7A                            
000A6B7A                            loc_721AC:
000A6B7A 4EBA 0000                  		jsr	sub_729A0(pc)
000A6B7E DAC6                       		adda.w	d6,a5
000A6B80 51CC FFF8                  		dbf	d4,loc_721AC
000A6B84                            
000A6B84                            loc_721B6:
000A6B84 584F                       		addq.w	#4,sp
000A6B86 4E75                       		rts	
000A6B88                            ; ===========================================================================
000A6B88 0606 0001 0204 0506 00     byte_721BA:	dc.b 6,	6, 0, 1, 2, 4, 5, 6, 0			; MJ: extra 6 (for PCM 2)
000A6B92 00                         		even
000A6B92 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
000A6B96                            		even
000A6B96                            ; ===========================================================================
000A6B96                            ; ---------------------------------------------------------------------------
000A6B96                            ; Play normal sound effect
000A6B96                            ; ---------------------------------------------------------------------------
000A6B96                            
000A6B96                            Sound_A0toCF:				; XREF: Sound_ChkValue
000A6B96 4A2E 0027                  		tst.b	$27(a6)
000A6B9A 6600 0000                  		bne.w	loc_722C6
000A6B9E 4A2E 0004                  		tst.b	4(a6)
000A6BA2 6600 0000                  		bne.w	loc_722C6
000A6BA6 4A2E 0024                  		tst.b	$24(a6)
000A6BAA 6600 0000                  		bne.w	loc_722C6
000A6BAE 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000A6BB2 6600                       		bne.s	Sound_notB5	; if not, branch
000A6BB4 4A2E 002B                  		tst.b	$2B(a6)
000A6BB8 6600                       		bne.s	loc_721EE
000A6BBA 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000A6BBE                            
000A6BBE                            loc_721EE:
000A6BBE 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000A6BC4                            
000A6BC4                            Sound_notB5:
000A6BC4 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000A6BC8 6600                       		bne.s	Sound_notA7	; if not, branch
000A6BCA 4A2E 002C                  		tst.b	$2C(a6)
000A6BCE 6600 0000                  		bne.w	locret_722C4
000A6BD2 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000A6BD8                            
000A6BD8                            Sound_notA7:
000A6BD8 2079 000A 5E88             		movea.l	(Go_SoundIndex).l,a0
000A6BDE 0407 00A0                  		subi.b	#$A0,d7
000A6BE2 E54F                       		lsl.w	#2,d7
000A6BE4 2670 7000                  		movea.l	(a0,d7.w),a3
000A6BE8 224B                       		movea.l	a3,a1
000A6BEA 7200                       		moveq	#0,d1
000A6BEC 3219                       		move.w	(a1)+,d1
000A6BEE D28B                       		add.l	a3,d1
000A6BF0 1A19                       		move.b	(a1)+,d5
000A6BF2 1E19                       		move.b	(a1)+,d7
000A6BF4 5307                       		subq.b	#1,d7
000A6BF6 7C30                       		moveq	#$30,d6
000A6BF8                            
000A6BF8                            loc_72228:
000A6BF8 7600                       		moveq	#0,d3
000A6BFA 1629 0001                  		move.b	1(a1),d3
000A6BFE 7403                       		moveq	#$03,d2					; EXT: set PSG to delay for 2 extra frames (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
000A6C00 1803                       		move.b	d3,d4
000A6C02 6B00                       		bmi.s	loc_72244
000A6C04 143C 0001                  		move.b	#$01,d2					; EXT: set DAC/FM to delay for 0 frames like normal (these have an auto delay of 1 frame in the Z80)
000A6C08 5543                       		subq.w	#2,d3
000A6C0A E54B                       		lsl.w	#2,d3
000A6C0C 4BFA 0000                  		lea	dword_722CC(pc),a5
000A6C10 2A75 3000                  		movea.l	(a5,d3.w),a5
000A6C14 08D5 0002                  		bset	#2,(a5)
000A6C18 6000                       		bra.s	loc_7226E
000A6C1A                            ; ===========================================================================
000A6C1A                            
000A6C1A                            loc_72244:
000A6C1A E64B                       		lsr.w	#3,d3
000A6C1C 4BFA 0000                  		lea	dword_722CC(pc),a5
000A6C20 2A75 3000                  		movea.l	(a5,d3.w),a5
000A6C24 08D5 0002                  		bset	#2,(a5)
000A6C28 0C04 00C0                  		cmpi.b	#$C0,d4
000A6C2C 6600                       		bne.s	loc_7226E
000A6C2E 1004                       		move.b	d4,d0
000A6C30 0000 001F                  		ori.b	#$1F,d0
000A6C34 13C0 00C0 0011             		move.b	d0,($C00011).l
000A6C3A 0840 0005                  		bchg	#5,d0
000A6C3E 13C0 00C0 0011             		move.b	d0,($C00011).l
000A6C44                            
000A6C44                            loc_7226E:
000A6C44 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
000A6C48 244D                       		movea.l	a5,a2
000A6C4A 700B                       		moveq	#$B,d0
000A6C4C                            
000A6C4C                            loc_72276:
000A6C4C 429A                       		clr.l	(a2)+
000A6C4E 51C8 FFFC                  		dbf	d0,loc_72276
000A6C52                            
000A6C52 3A99                       		move.w	(a1)+,(a5)
000A6C54 1B45 0002                  		move.b	d5,2(a5)
000A6C58 7000                       		moveq	#0,d0
000A6C5A 3019                       		move.w	(a1)+,d0
000A6C5C D08B                       		add.l	a3,d0
000A6C5E 2B40 0004                  		move.l	d0,4(a5)
000A6C62 3B59 0008                  		move.w	(a1)+,8(a5)
000A6C66 1B42 000E                  		move.b	d2,$E(a5)				; EXT: moving d2 contents (1 for FM/4 for PSG)
000A6C6A 1B46 000D                  		move.b	d6,$D(a5)
000A6C6E 3B7C FFFF 0010             		move.w	#$FFFF,$10(a5)				; CHG: clear PSG's frequency (ensures no frequency writing)
000A6C74 4A04                       		tst.b	d4
000A6C76 6B00                       		bmi.s	loc_722A8
000A6C78 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000A6C7E 2B41 0020                  		move.l	d1,$20(a5)
000A6C82                            
000A6C82                            loc_722A8:
000A6C82 51CF FF74                  		dbf	d7,loc_72228
000A6C86                            
000A6C86 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000A6C8A 6A00                       		bpl.s	loc_722B8
000A6C8C 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
000A6C92                            
000A6C92                            loc_722B8:
000A6C92 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
000A6C96 6A00                       		bpl.s	locret_722C4
000A6C98 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
000A6C9E                            
000A6C9E                            locret_722C4:
000A6C9E 4E75                       		rts	
000A6CA0                            ; ===========================================================================
000A6CA0                            
000A6CA0                            loc_722C6:
000A6CA0 4216                       		clr.b	0(a6)
000A6CA2 4E75                       		rts	
000A6CA4                            ; ===========================================================================
000A6CA4 00FF F100                  dword_722CC:	dc.l $FFF0D0+$30				; MJ: new locations (see all +$30)
000A6CA8 0000 0000                  		dc.l 0
000A6CAC 00FF F130                  		dc.l $FFF100+$30
000A6CB0 00FF F160                  		dc.l $FFF130+$30
000A6CB4 00FF F1C0                  		dc.l $FFF190+$30
000A6CB8 00FF F1F0                  		dc.l $FFF1C0+$30
000A6CBC 00FF F220                  		dc.l $FFF1F0+$30
000A6CC0 00FF F220                  		dc.l $FFF1F0+$30
000A6CC4 00FF F250                  dword_722EC:	dc.l $FFF220+$30
000A6CC8 0000 0000                  		dc.l 0
000A6CCC 00FF F280                  		dc.l $FFF250+$30
000A6CD0 00FF F2B0                  		dc.l $FFF280+$30
000A6CD4 00FF F2E0                  		dc.l $FFF2B0+$30
000A6CD8 00FF F310                  		dc.l $FFF2E0+$30
000A6CDC 00FF F340                  		dc.l $FFF310+$30
000A6CE0 00FF F340                  		dc.l $FFF310+$30
000A6CE4                            ; ===========================================================================
000A6CE4                            ; ---------------------------------------------------------------------------
000A6CE4                            ; Play GHZ waterfall sound
000A6CE4                            ; ---------------------------------------------------------------------------
000A6CE4                            
000A6CE4                            Sound_D0toDF:				; XREF: Sound_ChkValue
000A6CE4 4A2E 0027                  		tst.b	$27(a6)
000A6CE8 6600 0000                  		bne.w	locret_723C6
000A6CEC 4A2E 0004                  		tst.b	4(a6)
000A6CF0 6600 0000                  		bne.w	locret_723C6
000A6CF4 4A2E 0024                  		tst.b	$24(a6)
000A6CF8 6600 0000                  		bne.w	locret_723C6
000A6CFC 2079 000A 5E80             		movea.l	(Go_SoundD0).l,a0
000A6D02 0407 00D0                  		subi.b	#$D0,d7
000A6D06 E54F                       		lsl.w	#2,d7
000A6D08 2670 7000                  		movea.l	(a0,d7.w),a3
000A6D0C 224B                       		movea.l	a3,a1
000A6D0E 7000                       		moveq	#0,d0
000A6D10 3019                       		move.w	(a1)+,d0
000A6D12 D08B                       		add.l	a3,d0
000A6D14 2D40 0020                  		move.l	d0,$20(a6)
000A6D18 1A19                       		move.b	(a1)+,d5
000A6D1A 1E19                       		move.b	(a1)+,d7
000A6D1C 5307                       		subq.b	#1,d7
000A6D1E 7C30                       		moveq	#$30,d6
000A6D20                            
000A6D20                            loc_72348:
000A6D20 1829 0001                  		move.b	1(a1),d4
000A6D24 6B00                       		bmi.s	loc_7235A
000A6D26 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
000A6D2C 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A6D30 6000                       		bra.s	loc_72364
000A6D32                            ; ===========================================================================
000A6D32                            
000A6D32                            loc_7235A:
000A6D32 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
000A6D38 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
000A6D3C                            
000A6D3C                            loc_72364:
000A6D3C 244D                       		movea.l	a5,a2
000A6D3E 700B                       		moveq	#$B,d0
000A6D40                            
000A6D40                            loc_72368:
000A6D40 429A                       		clr.l	(a2)+
000A6D42 51C8 FFFC                  		dbf	d0,loc_72368
000A6D46                            
000A6D46 3A99                       		move.w	(a1)+,(a5)
000A6D48 1B45 0002                  		move.b	d5,2(a5)
000A6D4C 7000                       		moveq	#0,d0
000A6D4E 3019                       		move.w	(a1)+,d0
000A6D50 D08B                       		add.l	a3,d0
000A6D52 2B40 0004                  		move.l	d0,4(a5)
000A6D56 3B59 0008                  		move.w	(a1)+,8(a5)
000A6D5A 1B7C 0001 000E             		move.b	#1,$E(a5)
000A6D60 1B46 000D                  		move.b	d6,$D(a5)
000A6D64 4A04                       		tst.b	d4
000A6D66 6B00                       		bmi.s	loc_72396
000A6D68 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000A6D6E                            
000A6D6E                            loc_72396:
000A6D6E 51CF FFB0                  		dbf	d7,loc_72348
000A6D72                            
000A6D72 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000A6D76 6A00                       		bpl.s	loc_723A6
000A6D78 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
000A6D7E                            
000A6D7E                            loc_723A6:
000A6D7E 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
000A6D82 6A00                       		bpl.s	locret_723C6
000A6D84 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
000A6D8A 0004 001F                  		ori.b	#$1F,d4
000A6D8E 13C4 00C0 0011             		move.b	d4,($C00011).l
000A6D94 0844 0005                  		bchg	#5,d4
000A6D98 13C4 00C0 0011             		move.b	d4,($C00011).l
000A6D9E                            
000A6D9E                            locret_723C6:
000A6D9E 4E75                       		rts	
000A6DA0                            ; End of function Sound_ChkValue
000A6DA0                            
000A6DA0                            ; ===========================================================================
000A6DA0 00FF F130                  		dc.l $FFF100+$30				; MJ: new channel locations (see +$30)
000A6DA4 00FF F220                  		dc.l $FFF1F0+$30
000A6DA8 00FF F280                  		dc.l $FFF250+$30
000A6DAC 00FF F340                  		dc.l $FFF310+$30
000A6DB0 00FF F370                  		dc.l $FFF340+$30
000A6DB4 00FF F3A0                  		dc.l $FFF370+$30
000A6DB8                            
000A6DB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6DB8                            
000A6DB8                            
000A6DB8                            Snd_FadeOut1:				; XREF: Sound_E0
000A6DB8 4216                       		clr.b	0(a6)
000A6DBA 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000A6DBE 7E05                       		moveq	#5,d7
000A6DC0                            
000A6DC0                            loc_723EA:
000A6DC0 4A15                       		tst.b	(a5)
000A6DC2 6A00 0000                  		bpl.w	loc_72472
000A6DC6 0895 0007                  		bclr	#7,(a5)
000A6DCA 7600                       		moveq	#0,d3
000A6DCC 162D 0001                  		move.b	1(a5),d3
000A6DD0 6B00                       		bmi.s	loc_7243C
000A6DD2 4EBA 0000                  		jsr	sub_726FE(pc)
000A6DD6 0C03 0004                  		cmpi.b	#4,d3
000A6DDA 6600                       		bne.s	loc_72416
000A6DDC 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
000A6DE0 6A00                       		bpl.s	loc_72416
000A6DE2 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A6DE6 226E 0020                  		movea.l	$20(a6),a1
000A6DEA 6000                       		bra.s	loc_72428
000A6DEC                            ; ===========================================================================
000A6DEC                            
000A6DEC                            loc_72416:
000A6DEC 5503                       		subq.b	#2,d3
000A6DEE E50B                       		lsl.b	#2,d3
000A6DF0 41FA FEB2                  		lea	dword_722CC(pc),a0
000A6DF4 264D                       		movea.l	a5,a3
000A6DF6 2A70 3000                  		movea.l	(a0,d3.w),a5
000A6DFA 226E 0018                  		movea.l	$18(a6),a1
000A6DFE                            
000A6DFE                            loc_72428:
000A6DFE 0895 0002                  		bclr	#2,(a5)
000A6E02 08D5 0001                  		bset	#1,(a5)
000A6E06 102D 000B                  		move.b	$B(a5),d0
000A6E0A 4EBA 0000                  		jsr	sub_72C4E(pc)
000A6E0E 2A4B                       		movea.l	a3,a5
000A6E10 6000                       		bra.s	loc_72472
000A6E12                            ; ===========================================================================
000A6E12                            
000A6E12                            loc_7243C:
000A6E12 4EBA 0000                  		jsr	sub_729A0(pc)
000A6E16 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
000A6E1A 0C03 00E0                  		cmpi.b	#$E0,d3
000A6E1E 6700                       		beq.s	loc_7245A
000A6E20 0C03 00C0                  		cmpi.b	#$C0,d3
000A6E24 6700                       		beq.s	loc_7245A
000A6E26 E60B                       		lsr.b	#3,d3
000A6E28 41FA FE7A                  		lea	dword_722CC(pc),a0
000A6E2C 2070 3000                  		movea.l	(a0,d3.w),a0
000A6E30                            
000A6E30                            loc_7245A:
000A6E30 0890 0002                  		bclr	#2,(a0)
000A6E34 08D0 0001                  		bset	#1,(a0)
000A6E38 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000A6E3E 6600                       		bne.s	loc_72472
000A6E40 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000A6E48                            
000A6E48                            loc_72472:
000A6E48 DAFC 0030                  		adda.w	#$30,a5
000A6E4C 51CF FF72                  		dbf	d7,loc_723EA
000A6E50                            
000A6E50 4E75                       		rts	
000A6E52                            ; End of function Snd_FadeOut1
000A6E52                            
000A6E52                            
000A6E52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6E52                            
000A6E52                            
000A6E52                            Snd_FadeOut2:				; XREF: Sound_E0
000A6E52 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A6E56 4A15                       		tst.b	(a5)
000A6E58 6A00                       		bpl.s	loc_724AE
000A6E5A 0895 0007                  		bclr	#7,(a5)
000A6E5E 0815 0002                  		btst	#2,(a5)
000A6E62 6600                       		bne.s	loc_724AE
000A6E64 4A2E 000E                  	tst.b	$0E(a6)
000A6E68 6600                       	bne.s	loc_724AE_2
000A6E6A 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6E6E 6600                       	bne.s	loc_724AE
000A6E70                            
000A6E70                            	loc_724AE_2:
000A6E70 4EBA 0000                  		jsr	loc_7270A(pc)
000A6E74 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
000A6E78 0895 0002                  		bclr	#2,(a5)
000A6E7C 08D5 0001                  		bset	#1,(a5)
000A6E80 4A15                       		tst.b	(a5)
000A6E82 6A00                       		bpl.s	loc_724AE
000A6E84 226E 0018                  		movea.l	$18(a6),a1
000A6E88 102D 000B                  		move.b	$B(a5),d0
000A6E8C 4EBA 0000                  		jsr	sub_72C4E(pc)
000A6E90                            
000A6E90                            loc_724AE:
000A6E90 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
000A6E94 4A15                       		tst.b	(a5)
000A6E96 6A00                       		bpl.s	locret_724E4
000A6E98 0895 0007                  		bclr	#7,(a5)
000A6E9C 0815 0002                  		btst	#2,(a5)
000A6EA0 6600                       		bne.s	locret_724E4
000A6EA2 4A2E 000E                  	tst.b	$0E(a6)
000A6EA6 6600                       	bne.s	locret_724E4_2
000A6EA8 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6EAC 6600                       	bne.s	locret_724E4
000A6EAE                            
000A6EAE                            	locret_724E4_2:
000A6EAE 4EBA 0000                  		jsr	loc_729A6(pc)
000A6EB2 4BEE 0220                  		lea	$220(a6),a5				; MJ: new BGM location
000A6EB6 0895 0002                  		bclr	#2,(a5)
000A6EBA 08D5 0001                  		bset	#1,(a5)
000A6EBE 4A15                       		tst.b	(a5)
000A6EC0 6A00                       		bpl.s	locret_724E4
000A6EC2 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000A6EC8 6600                       		bne.s	locret_724E4
000A6ECA 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000A6ED2                            
000A6ED2                            locret_724E4:
000A6ED2 4E75                       		rts	
000A6ED4                            ; End of function Snd_FadeOut2
000A6ED4                            
000A6ED4                            ; ===========================================================================
000A6ED4                            ; ---------------------------------------------------------------------------
000A6ED4                            ; Fade out music
000A6ED4                            ; ---------------------------------------------------------------------------
000A6ED4                            
000A6ED4                            Sound_E0:				; XREF: Sound_ExIndex
000A6ED4 4EBA FEE2                  		jsr	Snd_FadeOut1(pc)
000A6ED8 4EBA FF78                  		jsr	Snd_FadeOut2(pc)
000A6EDC 1D7C 0003 0006             		move.b	#3,6(a6)
000A6EE2 1D7C 0028 0004             		move.b	#$28,4(a6)
000A6EE8                            	;	clr.b	$40(a6)
000A6EE8                            	;	clr.b	$70(a6)					; MJ: stop PCM 2 as well
000A6EE8 422E 002A                  		clr.b	$2A(a6)
000A6EEC 4E75                       		rts	
000A6EEE                            
000A6EEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6EEE                            
000A6EEE                            
000A6EEE                            sub_72504:				; XREF: sub_71B4C
000A6EEE 102E 0006                  		move.b	6(a6),d0
000A6EF2 6700                       		beq.s	loc_72510
000A6EF4 532E 0006                  		subq.b	#1,6(a6)
000A6EF8 4E75                       		rts	
000A6EFA                            ; ===========================================================================
000A6EFA                            
000A6EFA                            loc_72510:
000A6EFA 532E 0004                  		subq.b	#1,4(a6)
000A6EFE 6700 0000                  		beq.w	Sound_E4
000A6F02 1D7C 0003 0006             		move.b	#3,6(a6)
000A6F08                            
000A6F08                            
000A6F08 43F9 00A0 0634             		lea	($A00000+PCM_ChangeVolume).l,a1		; CHG: load volume change instruction address
000A6F0E 7C00                       		moveq	#$00,d6					; CHG: clear d6
000A6F10 1C2E 0004                  		move.b	$04(a6),d6				; CHG: load fade counter
000A6F14 72D2                       		moveq	#($FFFFFF00|%11010010),d1		; prepare Z80 "JP NC" instruction
000A6F16 4BEE 0040                  		lea	$40(a6),a5				; CHG: load PCM 1 address
000A6F1A 41F9 00A0 0642             		lea	($A00000+PCM1_Volume+1).l,a0		; CHG: load PCM 1 volume address
000A6F20 6100                       		bsr.s	FadeOut_PCM				; CHG: do PCM 1
000A6F22 41F9 00A0 0647             		lea	($A00000+PCM2_Volume+1).l,a0		; CHG: load PCM 2 volume address
000A6F28 6100                       		bsr.s	FadeOut_PCM				; CHG: do PCM 2
000A6F2A 6000 0000                  		bra.w	FadeOut_FM				; CHG: continue to FM fade out
000A6F2E                            
000A6F2E                            FadeOut_PCM:
000A6F2E 4A15                       		tst.b	(a5)					; CHG: is the channel running?
000A6F30 6A00                       		bpl.s	FOP_NotRunning				; CHG: if not, branch
000A6F32 7000                       		moveq	#$00,d0					; CHG: clear d0
000A6F34 102D 0009                  		move.b	$09(a5),d0				; CHG: load volume
000A6F38 6A00                       		bpl.s	FOP_NoMute				; CHG: if the channel is not mute (not from 80 - FF), branch
000A6F3A 7080                       		moveq	#$FFFFFF80,d0				; CHG: force volume 80 (mute)
000A6F3C 0895 0007                  		bclr	#$07,(a5)				; CHG: stop PCM channel
000A6F40 6000                       		bra.s	FOP_Mute				; CHG: continue to mute the channel
000A6F42                            
000A6F42                            FOP_NoMute:
000A6F42                            	;	add.b	FOP_FadeList(pc,d0.w),d0		; CHG: reduce the volume
000A6F42 5400                       	addq.b	#$02,d0					; reduce the volume
000A6F44                            
000A6F44                            FOP_Mute:
000A6F44 1B40 0009                  		move.b	d0,$09(a5)				; CHG: update
000A6F48 B02D 000C                  		cmp.b	$0C(a5),d0				; CHG: has the volume changed?
000A6F4C 6700                       		beq.s	FOP_NotRunning				; CHG: if not, branch
000A6F4E 1B40 000C                  		move.b	d0,$0C(a5)				; CHG: update volume
000A6F52 142E 0004                  	move.b	$04(a6),d2				; CHG: load fade timer
000A6F56 0202 0003                  	andi.b	#$03,d2					; CHG: has it been four frames?
000A6F5A 6600                       	bne.s	FOP_NotRunning				; CHG: if not, branch (temp until Z80 volume struggling is fixed)
000A6F5C 33FC 0100 00A1 1100 0839+  		StopZ80
000A6F6E 1080                       		move.b	d0,(a0)					; change PCM volume
000A6F70 1281                       		move.b	d1,(a1)					; change "JP C" to "JP NC"
000A6F72 33FC 0000 00A1 1100        		StartZ80
000A6F7A                            
000A6F7A                            FOP_NotRunning:
000A6F7A 4BED 0030                  		lea	$30(a5),a5				; CHG: advance to next channel
000A6F7E 4E75                       		rts						; CHG: return
000A6F80                            
000A6F80                            ;FOP_FadeList:	dc.b	$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
000A6F80                            ;		dc.b	$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
000A6F80                            ;		dc.b	$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08
000A6F80                            ;		dc.b	$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08
000A6F80                            ;		dc.b	$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
000A6F80                            ;		dc.b	$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
000A6F80                            ;		dc.b	$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000A6F80                            ;		dc.b	$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
000A6F80                            
000A6F80                            ;FOP_VolumeList:	dc.b	$00,$0C,$18,$20,$28,$30,$34,$38,$3C,$40,$44,$48,$4C,$50,$56,$5A
000A6F80                            ;		dc.b	$60,$63,$66,$69,$6B,$6D,$6F,$70,$71,$72,$73,$74,$75,$76,$76,$77
000A6F80                            ;		dc.b	$77,$78,$78,$79,$79,$79,$7A,$7A,$7A,$7B,$7B,$7B,$7C,$7C,$7C,$7C
000A6F80                            ;		dc.b	$7D,$7D,$7D,$7D,$7D,$7D,$7D,$7D,$7E,$7E,$7E,$7E,$7E,$7E,$7E,$7E
000A6F80                            ;		dc.b	$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
000A6F80                            ;		dc.b	$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
000A6F80                            ;		dc.b	$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000A6F80                            ;		dc.b	$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000A6F80                            
000A6F80                            ; ===========================================================================
000A6F80                            
000A6F80                            FadeOut_FM:
000A6F80 7E05                       		moveq	#5,d7
000A6F82                            
000A6F82                            loc_72524:
000A6F82 4A15                       		tst.b	(a5)
000A6F84 6A00                       		bpl.s	loc_72538
000A6F86 522D 0009                  		addq.b	#1,9(a5)
000A6F8A 6A00                       		bpl.s	loc_72534
000A6F8C 0895 0007                  		bclr	#7,(a5)
000A6F90 6000                       		bra.s	loc_72538
000A6F92                            ; ===========================================================================
000A6F92                            
000A6F92                            loc_72534:
000A6F92 4EBA 0000                  		jsr	sub_72CB4(pc)
000A6F96                            
000A6F96                            loc_72538:
000A6F96 DAFC 0030                  		adda.w	#$30,a5
000A6F9A 51CF FFE6                  		dbf	d7,loc_72524
000A6F9E                            
000A6F9E 7E02                       		moveq	#2,d7
000A6FA0                            
000A6FA0                            loc_72542:
000A6FA0 4A15                       		tst.b	(a5)
000A6FA2 6A00                       		bpl.s	loc_72560
000A6FA4 522D 0009                  		addq.b	#1,9(a5)
000A6FA8 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
000A6FAE 6500                       		bcs.s	loc_72558
000A6FB0 0895 0007                  		bclr	#7,(a5)
000A6FB4 6000                       		bra.s	loc_72560
000A6FB6                            ; ===========================================================================
000A6FB6                            
000A6FB6                            loc_72558:
000A6FB6 1C2D 0009                  		move.b	9(a5),d6
000A6FBA DC2E 0016                  	add.b	$16(a6),d6			; EXTRA
000A6FBE 4EBA 0000                  		jsr	sub_7296A(pc)
000A6FC2                            
000A6FC2                            loc_72560:
000A6FC2 DAFC 0030                  		adda.w	#$30,a5
000A6FC6 51CF FFD8                  		dbf	d7,loc_72542
000A6FCA                            
000A6FCA 4E75                       		rts	
000A6FCC                            ; End of function sub_72504
000A6FCC                            
000A6FCC                            
000A6FCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6FCC                            
000A6FCC                            
000A6FCC                            sub_7256A:				; XREF: Sound_E4; sub_725CA
000A6FCC 7602                       		moveq	#2,d3
000A6FCE 7028                       		moveq	#$28,d0
000A6FD0                            
000A6FD0                            loc_7256E:
000A6FD0 1203                       		move.b	d3,d1
000A6FD2 4EBA 0000                  		jsr	sub_7272E(pc)
000A6FD6 5801                       		addq.b	#4,d1
000A6FD8 4EBA 0000                  		jsr	sub_7272E(pc)
000A6FDC 51CB FFF2                  		dbf	d3,loc_7256E
000A6FE0                            
000A6FE0 7040                       		moveq	#$40,d0
000A6FE2 727F                       		moveq	#$7F,d1
000A6FE4 7802                       		moveq	#2,d4
000A6FE6                            
000A6FE6                            loc_72584:
000A6FE6 7603                       		moveq	#3,d3
000A6FE8                            
000A6FE8                            loc_72586:
000A6FE8 4EBA 0000                  		jsr	sub_7272E(pc)
000A6FEC 4EBA 0000                  		jsr	sub_72764(pc)
000A6FF0 5840                       		addq.w	#4,d0
000A6FF2 51CB FFF4                  		dbf	d3,loc_72586
000A6FF6                            
000A6FF6 0400 000F                  		subi.b	#$F,d0
000A6FFA 51CC FFEA                  		dbf	d4,loc_72584
000A6FFE                            
000A6FFE 4E75                       		rts	
000A7000                            ; End of function sub_7256A
000A7000                            
000A7000                            ; ===========================================================================
000A7000                            ; ---------------------------------------------------------------------------
000A7000                            ; Stop music
000A7000                            ; ---------------------------------------------------------------------------
000A7000                            
000A7000                            Sound_E4:
000A7000 33FC 0100 00A1 1100 0839+  		StopZ80
000A7012 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A7018 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A701E 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7020 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7022 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7024 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7026 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7028 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A702A 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A702C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A702E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7030 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7032 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7034 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7036 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A703E 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A7044 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 2 slot address
000A704A 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A704C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A704E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7050 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7052 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7054 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7056 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7058 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A705A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A705C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A705E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7060 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7062 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A706A 33FC 0000 00A1 1100        		StartZ80
000A7072                            
000A7072 702B                       		moveq	#$2B,d0
000A7074 123C 0080                  		move.b	#$80,d1
000A7078 4EBA 0000                  		jsr	sub_7272E(pc)
000A707C 7027                       		moveq	#$27,d0
000A707E 7200                       		moveq	#0,d1
000A7080 4EBA 0000                  		jsr	sub_7272E(pc)
000A7084 204E                       		movea.l	a6,a0
000A7086 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
000A708A 2F2E 0014                  	move.l	$14(a6),-(sp)			; EXTRA
000A708E 303C 00EF                  		move.w	#$EF,d0						; MJ: new size of data to clear
000A7092                            
000A7092                            loc_725B6:
000A7092 4298                       		clr.l	(a0)+
000A7094 51C8 FFFC                  		dbf	d0,loc_725B6
000A7098                            
000A7098 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
000A709C 2D5F 0014                  	move.l	(sp)+,$14(a6)			; EXTRA
000A70A0 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
000A70A6 4EBA FF24                  		jsr	sub_7256A(pc)
000A70AA 6000 0000                  		bra.w	sub_729B6
000A70AE                            
000A70AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A70AE                            
000A70AE                            
000A70AE                            sub_725CA:				; XREF: Sound_ChkValue
000A70AE 204E                       		movea.l	a6,a0
000A70B0 1216                       		move.b	0(a6),d1
000A70B2 142E 0027                  		move.b	$27(a6),d2
000A70B6 162E 002A                  		move.b	$2A(a6),d3
000A70BA 182E 0026                  		move.b	$26(a6),d4
000A70BE 3A2E 000A                  		move.w	$A(a6),d5
000A70C2 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
000A70C6 2F2E 0014                  	move.l	$14(a6),-(sp)			; EXTRA
000A70CA 303C 0093                  		move.w	#$93,d0						; MJ: new size
000A70CE                            
000A70CE                            loc_725E4:
000A70CE 4298                       		clr.l	(a0)+
000A70D0 51C8 FFFC                  		dbf	d0,loc_725E4
000A70D4                            
000A70D4 1C81                       		move.b	d1,0(a6)
000A70D6 1D42 0027                  		move.b	d2,$27(a6)
000A70DA 1D43 002A                  		move.b	d3,$2A(a6)
000A70DE 1D44 0026                  		move.b	d4,$26(a6)
000A70E2 3D45 000A                  		move.w	d5,$A(a6)
000A70E6 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
000A70EA 2D5F 0014                  	move.l	(sp)+,$14(a6)			; EXTRA
000A70EE 1D7C 0080 0009             		move.b	#$80,9(a6)
000A70F4 4EBA FED6                  		jsr	sub_7256A(pc)
000A70F8 6000 0000                  		bra.w	sub_729B6
000A70FC                            ; End of function sub_725CA
000A70FC                            
000A70FC                            
000A70FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A70FC                            
000A70FC                            
000A70FC                            sub_7260C:				; XREF: sub_71B4C
000A70FC                            	;	move.b	2(a6),1(a6)
000A70FC 102E 0015                  	move.b	$15(a6),d0			; EXTRA
000A7100 6A00                       	bpl.s	STempo_CheckMax			; EXTRA
000A7102 D02E 0002                  	add.b	$02(a6),d0			; EXTRA
000A7106 0C00 0002                  	cmpi.b	#$02,d0				; EXTRA
000A710A 6A00                       	bpl.s	STempo_Valid			; EXTRA
000A710C 7002                       	moveq	#$02,d0				; EXTRA
000A710E 6000                       	bra.s	STempo_Valid			; EXTRA
000A7110                            
000A7110                            STempo_CheckMax:
000A7110 D02E 0002                  	add.b	$02(a6),d0			; EXTRA
000A7114                            
000A7114                            STempo_Valid:
000A7114 1D40 0001                  	move.b	d0,$01(a6)			; EXTRA
000A7118                            
000A7118 41EE 004E                  		lea	$4E(a6),a0
000A711C 7030                       		moveq	#$30,d0
000A711E 720A                       		moveq	#10,d1						; MJ: new number of channels
000A7120                            
000A7120                            loc_7261A:
000A7120 5210                       		addq.b	#1,(a0)
000A7122 D0C0                       		adda.w	d0,a0
000A7124 51C9 FFFA                  		dbf	d1,loc_7261A
000A7128                            
000A7128 4E75                       		rts	
000A712A                            ; End of function sub_7260C
000A712A                            
000A712A                            ; ===========================================================================
000A712A                            ; ---------------------------------------------------------------------------
000A712A                            ; Speed	up music
000A712A                            ; ---------------------------------------------------------------------------
000A712A                            
000A712A                            Sound_E2:				; XREF: Sound_ExIndex
000A712A 4A2E 0027                  		tst.b	$27(a6)
000A712E 6600                       		bne.s	loc_7263E
000A7130 1D6E 0029 0002             		move.b	$29(a6),2(a6)
000A7136 1D6E 0029 0001             		move.b	$29(a6),1(a6)
000A713C 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000A7142 4E75                       		rts	
000A7144                            ; ===========================================================================
000A7144                            
000A7144                            loc_7263E:
000A7144 1D6E 03F9 03D2             		move.b	$3F9(a6),$3D2(a6)			; MJ: new location
000A714A 1D6E 03F9 03D1             		move.b	$3F9(a6),$3D1(a6)			; MJ: new location
000A7150 1D7C 0080 03FA             		move.b	#$80,$3FA(a6)
000A7156 4E75                       		rts	
000A7158                            ; ===========================================================================
000A7158                            ; ---------------------------------------------------------------------------
000A7158                            ; Change music back to normal speed
000A7158                            ; ---------------------------------------------------------------------------
000A7158                            
000A7158                            Sound_E3:				; XREF: Sound_ExIndex
000A7158 4A2E 0027                  		tst.b	$27(a6)
000A715C 6600                       		bne.s	loc_7266A
000A715E 1D6E 0028 0002             		move.b	$28(a6),2(a6)
000A7164 1D6E 0028 0001             		move.b	$28(a6),1(a6)
000A716A 422E 002A                  		clr.b	$2A(a6)
000A716E 4E75                       		rts	
000A7170                            ; ===========================================================================
000A7170                            
000A7170                            loc_7266A:
000A7170 1D6E 03F8 03D2             		move.b	$3F8(a6),$3D2(a6)
000A7176 1D6E 03F8 03D1             		move.b	$3F8(a6),$3D1(a6)
000A717C 422E 03FA                  		clr.b	$3FA(a6)
000A7180 4E75                       		rts	
000A7182                            
000A7182                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7182                            
000A7182                            
000A7182                            sub_7267C:				; XREF: sub_71B4C
000A7182 4A2E 0025                  		tst.b	$25(a6)
000A7186 6700                       		beq.s	loc_72688
000A7188 532E 0025                  		subq.b	#1,$25(a6)
000A718C 4E75                       		rts	
000A718E                            ; ===========================================================================
000A718E                            
000A718E                            loc_72688:
000A718E 4A2E 0026                  		tst.b	$26(a6)
000A7192 6700                       		beq.s	loc_726D6
000A7194 532E 0026                  		subq.b	#1,$26(a6)
000A7198 1D7C 0002 0025             		move.b	#2,$25(a6)
000A719E                            
000A719E 4BEE 0040                  		lea	$40(a6),a5				; CHG: load starting from PCM channels
000A71A2 7E01                       		moveq	#$02-1,d7				; CHG: set number of PCM channels to alter
000A71A4                            
000A71A4                            FadeIn_NextPCM:
000A71A4 4A15                       		tst.b	(a5)					; CHG: is this channel running?
000A71A6 6A00                       		bpl.s	FadeIn_NoPCM				; CHG: if not, branch
000A71A8 572D 0009                  		subq.b	#$03,$09(a5)				; CHG: increase volume
000A71AC                            
000A71AC                            FadeIn_NoPCM:
000A71AC 4BED 0030                  		lea	$30(a5),a5				; CHG: advance to next channel
000A71B0 51CF FFF2                  		dbf	d7,FadeIn_NextPCM			; CHG: repeat for all channels
000A71B4                            
000A71B4                            	;	lea	$A0(a6),a5				; MJ: new SFX location
000A71B4                            
000A71B4 7E05                       		moveq	#5,d7
000A71B6                            
000A71B6                            loc_7269E:
000A71B6 4A15                       		tst.b	(a5)
000A71B8 6A00                       		bpl.s	loc_726AA
000A71BA 532D 0009                  		subq.b	#1,9(a5)
000A71BE 4EBA 0000                  		jsr	sub_72CB4(pc)
000A71C2                            
000A71C2                            loc_726AA:
000A71C2 DAFC 0030                  		adda.w	#$30,a5
000A71C6 51CF FFEE                  		dbf	d7,loc_7269E
000A71CA 7E02                       		moveq	#2,d7
000A71CC                            
000A71CC                            loc_726B4:
000A71CC 4A15                       		tst.b	(a5)
000A71CE 6A00                       		bpl.s	loc_726CC
000A71D0 532D 0009                  		subq.b	#1,9(a5)
000A71D4 1C2D 0009                  		move.b	9(a5),d6
000A71D8 0C06 0010                  		cmpi.b	#$10,d6
000A71DC 6500                       		bcs.s	loc_726C8
000A71DE 7C0F                       		moveq	#$F,d6
000A71E0                            
000A71E0                            loc_726C8:
000A71E0 4EBA 0000                  		jsr	sub_7296A(pc)
000A71E4                            
000A71E4                            loc_726CC:
000A71E4 DAFC 0030                  		adda.w	#$30,a5
000A71E8 51CF FFE2                  		dbf	d7,loc_726B4
000A71EC 4E75                       		rts	
000A71EE                            ; ===========================================================================
000A71EE                            
000A71EE                            loc_726D6:
000A71EE                            	;	bclr	#2,$40(a6)
000A71EE                            	;	bclr	#2,$70(a6)				; MJ: do PCM 2 as well...
000A71EE 422E 0024                  		clr.b	$24(a6)
000A71F2 4E75                       		rts	
000A71F4                            ; End of function sub_7267C
000A71F4                            
000A71F4                            ; ===========================================================================
000A71F4                            
000A71F4                            loc_726E2:				; XREF: sub_71CCA
000A71F4 0815 0001                  		btst	#1,(a5)
000A71F8 6600                       		bne.s	locret_726FC
000A71FA 0815 0002                  		btst	#2,(a5)
000A71FE 6600                       		bne.s	locret_726FC
000A7200 4A2E 000E                  	tst.b	$0E(a6)
000A7204 6600                       	bne.s	locret_726FC_2
000A7206 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A720A 6600                       	bne.s	locret_726FC
000A720C                            
000A720C                            	locret_726FC_2:
000A720C 7028                       		moveq	#$28,d0
000A720E 122D 0001                  		move.b	1(a5),d1
000A7212 0001 00F0                  		ori.b	#-$10,d1
000A7216 6000 0000                  		bra.w	sub_7272E
000A721A                            ; ===========================================================================
000A721A                            
000A721A                            locret_726FC:
000A721A 4E75                       		rts	
000A721C                            
000A721C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A721C                            
000A721C                            
000A721C                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000A721C 0815 0004                  		btst	#4,(a5)
000A7220 6600                       		bne.s	locret_72714
000A7222 0815 0002                  		btst	#2,(a5)
000A7226 6600                       		bne.s	locret_72714
000A7228 4A2E 000E                  	tst.b	$0E(a6)
000A722C 6600                       	bne.s	loc_7270A
000A722E 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7232 6600                       	bne.s	locret_72714
000A7234                            
000A7234                            loc_7270A:				; XREF: Snd_FadeOut2
000A7234 7028                       		moveq	#$28,d0
000A7236 122D 0001                  		move.b	1(a5),d1
000A723A 6000 0000                  		bra.w	sub_7272E
000A723E                            ; ===========================================================================
000A723E                            
000A723E                            locret_72714:
000A723E 4E75                       		rts	
000A7240                            ; End of function sub_726FE
000A7240                            
000A7240                            ; ===========================================================================
000A7240                            
000A7240                            loc_72716:				; XREF: sub_72A5A
000A7240 0815 0002                  		btst	#2,(a5)
000A7244 6600                       		bne.s	locret_72720
000A7246 4A2E 000E                  	tst.b	$0E(a6)
000A724A 6600                       	bne.s	sub_72722
000A724C 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7250 6600                       	bne.s	locret_72720
000A7252 6000 0000                  		bra.w	sub_72722
000A7256                            ; ===========================================================================
000A7256                            
000A7256                            locret_72720:
000A7256 4E75                       		rts	
000A7258                            
000A7258                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7258                            
000A7258                            
000A7258                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000A7258 082D 0002 0001             		btst	#2,1(a5)
000A725E 6600                       		bne.s	loc_7275A
000A7260 D02D 0001                  		add.b	1(a5),d0
000A7264                            ; End of function sub_72722
000A7264                            
000A7264                            
000A7264                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7264                            
000A7264                            sub_7272E:
000A7264 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
000A7268 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
000A726C 143C 0000                  		move.b	#$00,d2					; EXT: prepare d2 for YM2612 port address ($4000 - $4001)
000A7270 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
000A7282 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
000A7284 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
000A7286 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
000A7288 50D0                       		st.b	(a0)					; EXT: set end of list marker
000A728A 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
000A7292 2D48 0010                  		move.l	a0,$10(a6)				; EXT: store cue address
000A7296 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
000A729A 4E75                       		rts						; EXT: return
000A729C                            
000A729C                            ; ===========================================================================
000A729C                            
000A729C                            loc_7275A:				; XREF: sub_72722
000A729C 142D 0001                  		move.b	1(a5),d2
000A72A0 0882 0002                  		bclr	#2,d2
000A72A4 D002                       		add.b	d2,d0
000A72A6                            
000A72A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A72A6                            
000A72A6                            
000A72A6                            sub_72764:
000A72A6 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
000A72AA 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
000A72AE 143C 0002                  		move.b	#$02,d2					; EXT: prepare d2 for YM2612 port address ($4002 - $4003)
000A72B2 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
000A72C4 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
000A72C6 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
000A72C8 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
000A72CA 50D0                       		st.b	(a0)					; EXT: set end of list marker
000A72CC 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
000A72D4 2D48 0010                  		move.l	a0,$10(a6)				; EXT: store cue address
000A72D8 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
000A72DC 4E75                       		rts						; EXT: return
000A72DE                            
000A72DE                            ; ===========================================================================
000A72DE 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
000A72F0 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
000A7302 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
000A7312 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
000A7322 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000A7332 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000A7342 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000A7352 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000A7362 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000A7372 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
000A7382 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
000A7392 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
000A739E                            
000A739E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A739E                            
000A739E                            
000A739E                            ; ===========================================================================
000A739E                            ; ---------------------------------------------------------------------------
000A739E                            ; Subroutine to run an FM channel ; EXTRA - ON/OFF
000A739E                            ; ---------------------------------------------------------------------------
000A739E                            
000A739E                            SPSG_CheckMute:
000A739E 4A2E 000E                  	tst.b	$0E(a6)
000A73A2 6600                       	bne.s	S72850_NoCHG
000A73A4 102D 0021                  	move.b	$21(a5),d0
000A73A8 B02D 0022                  	cmp.b	$22(a5),d0
000A73AC 6700                       	beq.s	S72850_NoCHG
000A73AE 4A00                       	tst.b	d0
000A73B0 6A00                       	bpl.s	S72850_NoMute
000A73B2 08D5 0006                  	bset.b	#$06,(a5)
000A73B6 1B6D 0021 0022             	move.b	$21(a5),$22(a5)
000A73BC 4EB9 0000 0000             	jsr	SPSG_UpdateTone
000A73C2                            
000A73C2                            S72850_NoCHG:
000A73C2 4E75                       	rts
000A73C4                            
000A73C4                            S72850_NoMute:
000A73C4 1B40 0022                  	move.b	d0,$22(a5)
000A73C8 08D5 0006                  	bset.b	#$06,(a5)
000A73CC 4EB9 0000 0000             	jsr	loc_7292E
000A73D2 4E75                       	rts
000A73D4                            
000A73D4                            ; ===========================================================================
000A73D4                            ; ---------------------------------------------------------------------------
000A73D4                            ; Subroutine to run a PSG channel
000A73D4                            ; ---------------------------------------------------------------------------
000A73D4                            
000A73D4                            sub_72850:				; XREF: sub_71B4C
000A73D4 61C8                       	bsr.s	SPSG_CheckMute			; EXTRA - ON/OFF
000A73D6 532D 000E                  		subq.b	#1,$E(a5)
000A73DA 6600                       		bne.s	loc_72866
000A73DC 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A73E0 0895 0004                  		bclr	#4,(a5)
000A73E4 4EBA 0000                  		jsr	sub_72878(pc)
000A73E8 4EBA 0000                  		jsr	sub_728DC(pc)
000A73EC 6000 0000                  		bra.w	loc_7292E
000A73F0                            ; ===========================================================================
000A73F0                            
000A73F0                            loc_72866:
000A73F0 0815 0006                  	btst.b	#$06,(a5)			; EXTRA
000A73F4 6700                       	beq.s	SPSG_NoUpdate			; EXTRA
000A73F6 7A00                       	moveq	#$00,d5				; EXTRA
000A73F8 1A2D 0020                  	move.b	$20(a5),d5			; EXTRA
000A73FC 0405 0081                  	subi.b	#$81,d5				; EXTRA
000A7400 6500                       	bcs.s	SPSG_NoUpdate			; EXTRA
000A7402 4EB9 0000 0000             	jsr	SPSG_UpdateFreque		; EXTRA
000A7408 3C2D 0010                  	move.w	$10(a5),d6			; EXTRA
000A740C 6000 0000                  	bra.w	SPSG_Update			; EXTRA
000A7410                            
000A7410                            	SPSG_NoUpdate:				; EXTRA
000A7410 4EBA F1EE                  		jsr	sub_71D9E(pc)
000A7414 4EBA 0000                  		jsr	sub_72926(pc)
000A7418 4EBA F28A                  		jsr	sub_71DC6(pc)
000A741C                            
000A741C                            	SPSG_Update:				; EXTRA
000A741C 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A7420 4EBA 0000                  		jsr	sub_728E2(pc)
000A7424 4E75                       		rts	
000A7426                            ; End of function sub_72850
000A7426                            
000A7426                            
000A7426                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7426                            
000A7426                            
000A7426                            sub_72878:				; XREF: sub_72850
000A7426 0895 0001                  		bclr	#1,(a5)
000A742A 286D 0004                  		movea.l	4(a5),a4
000A742E                            
000A742E                            loc_72880:
000A742E 7A00                       		moveq	#0,d5
000A7430 1A1C                       		move.b	(a4)+,d5
000A7432 0C05 00E0                  		cmpi.b	#$E0,d5
000A7436 6500                       		bcs.s	loc_72890
000A7438 4EBA 0000                  		jsr	sub_72A5A(pc)
000A743C 60F0                       		bra.s	loc_72880
000A743E                            ; ===========================================================================
000A743E                            
000A743E                            loc_72890:
000A743E 4A05                       		tst.b	d5
000A7440 6A00                       		bpl.s	loc_728A4
000A7442 1B45 0020                  	move.b	d5,$20(a5)			; EXTRA
000A7446 4EBA 0000                  		jsr	sub_728AC(pc)
000A744A 1A1C                       		move.b	(a4)+,d5
000A744C 4A05                       		tst.b	d5
000A744E 6A00                       		bpl.s	loc_728A4
000A7450 534C                       		subq.w	#1,a4
000A7452 6000 F16E                  		bra.w	sub_71D60
000A7456                            ; ===========================================================================
000A7456                            
000A7456                            loc_728A4:
000A7456 4EBA F14A                  		jsr	sub_71D40(pc)
000A745A 6000 F166                  		bra.w	sub_71D60
000A745E                            ; End of function sub_72878
000A745E                            
000A745E                            
000A745E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A745E                            
000A745E                            
000A745E                            sub_728AC:				; XREF: sub_72878
000A745E 0405 0081                  		subi.b	#$81,d5
000A7462 6500                       		bcs.s	loc_728CA
000A7464                            
000A7464                            	SPSG_UpdateFreque:			; EXTRA
000A7464 DA2D 0008                  		add.b	8(a5),d5
000A7468 DA2E 0014                  	add.b	$14(a6),d5			; EXTRA
000A746C 0245 007F                  		andi.w	#$7F,d5
000A7470 E34D                       		lsl.w	#1,d5
000A7472 41FA 0000                  		lea	word_729CE(pc),a0
000A7476 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
000A747C 0815 0006                  	btst.b	#$06,(a5)			; EXTRA
000A7480 669A                       	bne.s	SPSG_Update			; EXTRA
000A7482 6000 F13E                  		bra.w	sub_71D60
000A7486                            ; ===========================================================================
000A7486                            
000A7486                            loc_728CA:
000A7486 08D5 0001                  		bset	#1,(a5)
000A748A 3B7C FFFF 0010             		move.w	#-1,$10(a5)
000A7490 4EBA F130                  		jsr	sub_71D60(pc)
000A7494 6000 0000                  		bra.w	sub_729A0
000A7498                            ; End of function sub_728AC
000A7498                            
000A7498                            
000A7498                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7498                            
000A7498                            
000A7498                            sub_728DC:				; XREF: sub_72850
000A7498 3C2D 0010                  		move.w	$10(a5),d6
000A749C 6B00                       		bmi.s	loc_72920
000A749E                            ; End of function sub_728DC
000A749E                            
000A749E                            
000A749E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A749E                            
000A749E                            
000A749E                            sub_728E2:				; XREF: sub_72850
000A749E 102D 001E                  		move.b	$1E(a5),d0
000A74A2 4880                       		ext.w	d0
000A74A4 DC40                       		add.w	d0,d6
000A74A6 0815 0002                  		btst	#2,(a5)
000A74AA 6600                       		bne.s	locret_7291E
000A74AC 4A2E 000E                  	tst.b	$0E(a6)
000A74B0 6600                       	bne.s	locret_7291E_2
000A74B2 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A74B6 6600                       	bne.s	locret_7291E
000A74B8                            
000A74B8                            	locret_7291E_2:
000A74B8 0815 0001                  		btst	#1,(a5)
000A74BC 6600                       		bne.s	locret_7291E
000A74BE 102D 0001                  		move.b	1(a5),d0
000A74C2 0C00 00E0                  		cmpi.b	#$E0,d0
000A74C6 6600                       		bne.s	loc_72904
000A74C8 103C 00C0                  		move.b	#$C0,d0
000A74CC                            
000A74CC                            loc_72904:
000A74CC 3206                       		move.w	d6,d1
000A74CE 0201 000F                  		andi.b	#$F,d1
000A74D2 8001                       		or.b	d1,d0
000A74D4 E84E                       		lsr.w	#4,d6
000A74D6 0206 003F                  		andi.b	#$3F,d6
000A74DA 13C0 00C0 0011             		move.b	d0,($C00011).l
000A74E0 13C6 00C0 0011             		move.b	d6,($C00011).l
000A74E6                            
000A74E6                            locret_7291E:
000A74E6 4E75                       		rts	
000A74E8                            ; End of function sub_728E2
000A74E8                            
000A74E8                            ; ===========================================================================
000A74E8                            
000A74E8                            loc_72920:				; XREF: sub_728DC
000A74E8 08D5 0001                  		bset	#1,(a5)
000A74EC 4E75                       		rts	
000A74EE                            
000A74EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A74EE                            
000A74EE                            
000A74EE                            sub_72926:				; XREF: sub_72850
000A74EE 4A2D 000B                  		tst.b	$B(a5)
000A74F2 6700 0000                  		beq.w	locret_7298A
000A74F6                            
000A74F6                            loc_7292E:				; XREF: sub_72850
000A74F6                            	;	move.b	9(a5),d6
000A74F6 1C2E 0016                  	move.b	$16(a6),d6			; EXTRA
000A74FA E406                       	asr.b	#$02,d6				; EXTRA
000A74FC DC2D 0009                  	add.b	$09(a5),d6			; EXTRA
000A7500 7000                       		moveq	#0,d0
000A7502 102D 000B                  		move.b	$B(a5),d0
000A7506 6700                       		beq.s	sub_7296A
000A7508 2079 000A 5E90             		movea.l	(Go_PSGIndex).l,a0
000A750E 5340                       		subq.w	#1,d0
000A7510 E548                       		lsl.w	#2,d0
000A7512 2070 0000                  		movea.l	(a0,d0.w),a0
000A7516 102D 000C                  		move.b	$C(a5),d0
000A751A 1030 0000                  		move.b	(a0,d0.w),d0
000A751E 522D 000C                  		addq.b	#1,$C(a5)
000A7522 0800 0007                  		btst	#7,d0
000A7526 6700                       		beq.s	loc_72960
000A7528 0C00 0080                  		cmpi.b	#$80,d0
000A752C 6700                       		beq.s	loc_7299A
000A752E                            
000A752E                            loc_72960:
000A752E DC40                       		add.w	d0,d6
000A7530 0C06 0010                  		cmpi.b	#$10,d6
000A7534 6500                       		bcs.s	sub_7296A
000A7536 7C0F                       		moveq	#$F,d6
000A7538                            ; End of function sub_72926
000A7538                            
000A7538                            
000A7538                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7538                            
000A7538                            
000A7538                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
000A7538 0815 0001                  		btst	#1,(a5)
000A753C 6600                       		bne.s	locret_7298A
000A753E                            
000A753E                            	SPSG_UpdateTone:
000A753E 0815 0002                  		btst	#2,(a5)
000A7542 6600                       		bne.s	locret_7298A
000A7544 4A2E 000E                  	tst.b	$0E(a6)
000A7548 6600                       	bne.s	locret_7298A_2
000A754A 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A754E 6700                       	beq.s	locret_7298A_2
000A7550 1C2D 0001                  	move.b	$01(a5),d6
000A7554 0606 0010                  	addi.b	#$10,d6
000A7558 0006 000F                  	ori.b	#$0F,d6
000A755C 13C6 00C0 0011             	move.b	d6,($C00011).l
000A7562 4E75                       	rts
000A7564                            
000A7564                            	locret_7298A_2:
000A7564 0815 0004                  		btst	#4,(a5)
000A7568 6600                       		bne.s	loc_7298C
000A756A                            
000A756A                            loc_7297C:
000A756A 8C2D 0001                  		or.b	1(a5),d6
000A756E 0606 0010                  		addi.b	#$10,d6
000A7572 13C6 00C0 0011             		move.b	d6,($C00011).l
000A7578                            
000A7578                            locret_7298A:
000A7578 4E75                       		rts	
000A757A                            ; ===========================================================================
000A757A                            
000A757A                            loc_7298C:
000A757A 4A2D 0013                  		tst.b	$13(a5)
000A757E 67EA                       		beq.s	loc_7297C
000A7580 4A2D 0012                  		tst.b	$12(a5)
000A7584 66E4                       		bne.s	loc_7297C
000A7586 4E75                       		rts	
000A7588                            ; End of function sub_7296A
000A7588                            
000A7588                            ; ===========================================================================
000A7588                            
000A7588                            loc_7299A:				; XREF: sub_72926
000A7588 532D 000C                  		subq.b	#1,$C(a5)
000A758C 4E75                       		rts	
000A758E                            
000A758E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A758E                            
000A758E                            
000A758E                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
000A758E 0815 0002                  		btst	#2,(a5)
000A7592 6600                       		bne.s	locret_729B4
000A7594 4A2E 000E                  	tst.b	$0E(a6)
000A7598 6600                       	bne.s	loc_729A6
000A759A 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A759E 6600                       	bne.s	locret_729B4
000A75A0                            
000A75A0                            loc_729A6:				; XREF: Snd_FadeOut2
000A75A0 102D 0001                  		move.b	1(a5),d0
000A75A4 0000 001F                  		ori.b	#$1F,d0
000A75A8 13C0 00C0 0011             		move.b	d0,($C00011).l
000A75AE                            
000A75AE                            locret_729B4:
000A75AE 4E75                       		rts	
000A75B0                            ; End of function sub_729A0
000A75B0                            
000A75B0                            
000A75B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A75B0                            
000A75B0                            
000A75B0                            sub_729B6:				; XREF: loc_71E7C
000A75B0 41F9 00C0 0011             		lea	($C00011).l,a0
000A75B6 10BC 009F                  		move.b	#$9F,(a0)
000A75BA 10BC 00BF                  		move.b	#$BF,(a0)
000A75BE 10BC 00DF                  		move.b	#$DF,(a0)
000A75C2 10BC 00FF                  		move.b	#$FF,(a0)
000A75C6 4E75                       		rts	
000A75C8                            ; End of function sub_729B6
000A75C8                            
000A75C8                            ; ===========================================================================
000A75C8 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
000A75DA 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000A75EC 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000A7600 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000A7614 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
000A7628 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
000A763C 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
000A7650 0011 0000                  		dc.w $11, 0
000A7654                            
000A7654                            	; PSG can overflow here by accident (SYZ does when it plays low notes
000A7654                            	; but the pitch of the channel is low, and wraps to high).
000A7654                            
000A7654                            	; The flag pointers have been altered slightly, causing the frequencies
000A7654                            	; to be different, even though it's wrong in the first place, this
000A7654                            	; table will ensure it's put back the original way (not correct, just
000A7654                            	; original).
000A7654                            
000A7654 0445 00E0 E54D 4EFB 5002+  		dc.w	$0445,$00E0,$E54D,$4EFB,$5002,$6000,$0066,$6000	; CHG: end of table
000A7664 0082 6000 0084 6000 0086+  		dc.w	$0082,$6000,$0084,$6000,$0086,$6000,$009E,$6000
000A7674 0124 6000 0126 6000 012C+  		dc.w	$0124,$6000,$0126,$6000,$012C,$6000,$012E,$6000
000A7684 0134 6000 0138 6000 013E+  		dc.w	$0134,$6000,$0138,$6000,$013E,$6000,$0150,$6000
000A7694 0154 6000 0156 6000 0184+  		dc.w	$0154,$6000,$0156,$6000,$0184,$6000,$028A,$6000
000A76A4 02A8 6000 02AA 6000 0354+  		dc.w	$02A8,$6000,$02AA,$6000,$0354,$6000,$036A,$6000
000A76B4 036C 6000 036E 6000 0376+  		dc.w	$036C,$6000,$036E,$6000,$0376,$6000,$038C,$6000
000A76C4 039A 121C                  		dc.w	$039A,$121C
000A76C8                            
000A76C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A76C8                            
000A76C8                            
000A76C8                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000A76C8 0445 00E0                  		subi.w	#$E0,d5
000A76CC E54D                       		lsl.w	#2,d5
000A76CE 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
000A76D2                            ; End of function sub_72A5A
000A76D2                            
000A76D2                            ; ===========================================================================
000A76D2                            
000A76D2                            loc_72A64:
000A76D2 6000 0000                  		bra.w	loc_72ACC			; E0
000A76D6                            ; ===========================================================================
000A76D6 6000 0000                  		bra.w	loc_72AEC			; E1
000A76DA                            ; ===========================================================================
000A76DA 6000 0000                  		bra.w	loc_72AF2			; E2
000A76DE                            ; ===========================================================================
000A76DE 6000 0000                  		bra.w	loc_72AF8			; E3
000A76E2                            ; ===========================================================================
000A76E2 6000 0000                  		bra.w	loc_72B14			; E4
000A76E6                            ; ===========================================================================
000A76E6 6000 0000                  		bra.w	loc_72B9E			; E5
000A76EA                            ; ===========================================================================
000A76EA 6000 0000                  		bra.w	loc_72BA4			; E6
000A76EE                            ; ===========================================================================
000A76EE 6000 0000                  		bra.w	loc_72BAE			; E7
000A76F2                            ; ===========================================================================
000A76F2 6000 0000                  		bra.w	loc_72BB4			; E8
000A76F6                            ; ===========================================================================
000A76F6 6000 0000                  		bra.w	loc_72BBE			; E9
000A76FA                            ; ===========================================================================
000A76FA 6000 0000                  		bra.w	loc_72BC6			; EA
000A76FE                            ; ===========================================================================
000A76FE 6000 0000                  		bra.w	loc_72BD0			; EB
000A7702                            ; ===========================================================================
000A7702 6000 0000                  		bra.w	loc_72BE6			; EC
000A7706                            ; ===========================================================================
000A7706 6000 0000                  		bra.w	loc_72BEE			; ED
000A770A                            ; ===========================================================================
000A770A 6000 0000                  		bra.w	loc_72BF4			; EE
000A770E                            ; ===========================================================================
000A770E 6000 0000                  		bra.w	loc_72C26			; EF
000A7712                            ; ===========================================================================
000A7712 6000 0000                  		bra.w	loc_72D30			; F0
000A7716                            ; ===========================================================================
000A7716 6000 0000                  		bra.w	loc_72D52			; F1
000A771A                            ; ===========================================================================
000A771A 6000 0000                  		bra.w	loc_72D58			; F2
000A771E                            ; ===========================================================================
000A771E 6000 0000                  		bra.w	loc_72E06			; F3
000A7722                            ; ===========================================================================
000A7722 6000 0000                  		bra.w	loc_72E20			; F4
000A7726                            ; ===========================================================================
000A7726 6000 0000                  		bra.w	loc_72E26			; F5
000A772A                            ; ===========================================================================
000A772A 6000 0000                  		bra.w	loc_72E2C			; F6
000A772E                            ; ===========================================================================
000A772E 6000 0000                  		bra.w	loc_72E38			; F7
000A7732                            ; ===========================================================================
000A7732 6000 0000                  		bra.w	loc_72E52			; F8
000A7736                            ; ===========================================================================
000A7736 6000 0000                  		bra.w	loc_72E64			; F9
000A773A                            ; ===========================================================================
000A773A                            ; ---------------------------------------------------------------------------
000A773A                            ; Flag FA - Reverse flag
000A773A                            ; ---------------------------------------------------------------------------
000A773A                            
000A773A                            FlagFA:
000A773A 0855 0005                  		bchg.b	#$05,(a5)			; CHG: change reverse flag
000A773E 4E75                       		rts					; CHG: return
000A7740                            
000A7740                            ; ===========================================================================
000A7740                            
000A7740                            loc_72ACC:				; XREF: loc_72A64
000A7740 121C                       		move.b	(a4)+,d1
000A7742 4A2D 0001                  		tst.b	1(a5)
000A7746 6B00                       		bmi.s	locret_72AEA
000A7748 102D 000A                  		move.b	$A(a5),d0
000A774C 0200 0037                  		andi.b	#$37,d0
000A7750 8200                       		or.b	d0,d1
000A7752 1B41 000A                  		move.b	d1,$A(a5)
000A7756 103C 00B4                  		move.b	#$B4,d0
000A775A 6000 FAE4                  		bra.w	loc_72716
000A775E                            ; ===========================================================================
000A775E                            
000A775E                            locret_72AEA:
000A775E 4E75                       		rts	
000A7760                            ; ===========================================================================
000A7760                            
000A7760                            loc_72AEC:				; XREF: loc_72A64
000A7760 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000A7764 4E75                       		rts	
000A7766                            ; ===========================================================================
000A7766                            
000A7766                            loc_72AF2:				; XREF: loc_72A64
000A7766 1D5C 0007                  		move.b	(a4)+,7(a6)
000A776A 4E75                       		rts	
000A776C                            ; ===========================================================================
000A776C                            
000A776C                            loc_72AF8:				; XREF: loc_72A64
000A776C 7000                       		moveq	#0,d0
000A776E 102D 000D                  		move.b	$D(a5),d0
000A7772 2875 0000                  		movea.l	(a5,d0.w),a4
000A7776 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000A777E 544C                       		addq.w	#2,a4
000A7780 5800                       		addq.b	#4,d0
000A7782 1B40 000D                  		move.b	d0,$D(a5)
000A7786 4E75                       		rts	
000A7788                            ; ===========================================================================
000A7788                            
000A7788                            loc_72B14:				; XREF: loc_72A64
000A7788 204E                       		movea.l	a6,a0
000A778A 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
000A778E 236E 0010 0010             	move.l	$10(a6),$10(a1)				; CHG: copy buffer address across
000A7794 303C 0093                  		move.w	#$93,d0					; MJ: new size to store
000A7798                            
000A7798                            loc_72B1E:
000A7798 20D9                       		move.l	(a1)+,(a0)+
000A779A 51C8 FFFC                  		dbf	d0,loc_72B1E
000A779E                            
000A779E                            	;	bset	#2,$40(a6)
000A779E                            	;	bset	#2,$70(a6)				; MJ: enable PCM 2
000A779E 264D                       		movea.l	a5,a3
000A77A0 1C3C 0028                  		move.b	#$28,d6
000A77A4 9C2E 0026                  		sub.b	$26(a6),d6
000A77A8 1A06                       	move.b	d6,d5
000A77AA DA05                       	add.b	d5,d5
000A77AC DA06                       	add.b	d6,d5
000A77AE                            
000A77AE 7E01                       		moveq	#$02-1,d7				; CHG: set number of PCM channels to do
000A77B0 4BEE 0040                  		lea	$40(a6),a5				; CHG: start from PCM 1
000A77B4                            
000A77B4                            FE4_NextPCM:
000A77B4 0815 0007                  		btst	#$07,(a5)				; CHG: is the channel running?
000A77B8 6700                       		beq.s	FE4_NoPCM				; CHG: if not, branch
000A77BA                            	;	bset	#$01,(a5)				; CHG: set the channel as resting
000A77BA DB2D 0009                  		add.b	d5,$09(a5)				; CHG: reduce its volume
000A77BE                            
000A77BE                            FE4_NoPCM:
000A77BE 4BED 0030                  		lea	$30(a5),a5				; CHG: advance to next channel
000A77C2 51CF FFF0                  		dbf	d7,FE4_NextPCM				; CHG: repeat for all channels
000A77C6                            
000A77C6 7E05                       		moveq	#5,d7
000A77C8                            	;	lea	$A0(a6),a5				; MJ: new FM location
000A77C8                            
000A77C8                            loc_72B3A:
000A77C8 0815 0007                  		btst	#7,(a5)
000A77CC 6700                       		beq.s	loc_72B5C
000A77CE 08D5 0001                  		bset	#1,(a5)
000A77D2 DD2D 0009                  		add.b	d6,9(a5)
000A77D6 0815 0002                  		btst	#2,(a5)
000A77DA 6600                       		bne.s	loc_72B5C
000A77DC 4A2E 000E                  	tst.b	$0E(a6)
000A77E0 6600                       	bne.s	locret_72B5C_2
000A77E2 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A77E6 6600                       	bne.s	loc_72B5C
000A77E8                            
000A77E8                            	locret_72B5C_2:
000A77E8 7000                       		moveq	#0,d0
000A77EA 102D 000B                  		move.b	$B(a5),d0
000A77EE 226E 0018                  		movea.l	$18(a6),a1
000A77F2 4EBA 0000                  		jsr	sub_72C4E(pc)
000A77F6                            
000A77F6                            loc_72B5C:
000A77F6 DAFC 0030                  		adda.w	#$30,a5
000A77FA 51CF FFCC                  		dbf	d7,loc_72B3A
000A77FE                            
000A77FE 7E02                       		moveq	#2,d7
000A7800                            
000A7800                            loc_72B66:
000A7800 0815 0007                  		btst	#7,(a5)
000A7804 6700                       		beq.s	loc_72B78
000A7806 08D5 0001                  		bset	#1,(a5)
000A780A 4EBA FD82                  		jsr	sub_729A0(pc)
000A780E DD2D 0009                  		add.b	d6,9(a5)
000A7812                            
000A7812                            loc_72B78:
000A7812 DAFC 0030                  		adda.w	#$30,a5
000A7816 51CF FFE8                  		dbf	d7,loc_72B66
000A781A 2A4B                       		movea.l	a3,a5
000A781C 1D7C 0080 0024             		move.b	#$80,$24(a6)
000A7822 1D7C 0028 0026             		move.b	#$28,$26(a6)
000A7828 422E 0027                  		clr.b	$27(a6)
000A782C 504F                       		addq.w	#8,sp
000A782E 4E75                       		rts	
000A7830                            ; ===========================================================================
000A7830                            
000A7830                            loc_72B9E:				; XREF: loc_72A64
000A7830 1B5C 0002                  		move.b	(a4)+,2(a5)
000A7834 4E75                       		rts	
000A7836                            ; ===========================================================================
000A7836                            
000A7836                            loc_72BA4:				; XREF: loc_72A64
000A7836 101C                       		move.b	(a4)+,d0
000A7838 D12D 0009                  		add.b	d0,9(a5)
000A783C 6000 0000                  		bra.w	sub_72CB4
000A7840                            ; ===========================================================================
000A7840                            
000A7840                            loc_72BAE:				; XREF: loc_72A64
000A7840 08D5 0004                  		bset	#4,(a5)
000A7844 4E75                       		rts	
000A7846                            ; ===========================================================================
000A7846                            
000A7846                            loc_72BB4:				; XREF: loc_72A64
000A7846 1B54 0012                  		move.b	(a4),$12(a5)
000A784A 1B5C 0013                  		move.b	(a4)+,$13(a5)
000A784E 4E75                       		rts	
000A7850                            ; ===========================================================================
000A7850                            
000A7850                            loc_72BBE:				; XREF: loc_72A64
000A7850 101C                       		move.b	(a4)+,d0
000A7852 D12D 0008                  		add.b	d0,8(a5)
000A7856 4E75                       		rts	
000A7858                            ; ===========================================================================
000A7858                            
000A7858                            loc_72BC6:				; XREF: loc_72A64
000A7858 1D54 0002                  		move.b	(a4),2(a6)
000A785C 1D5C 0001                  		move.b	(a4)+,1(a6)
000A7860 4E75                       		rts	
000A7862                            ; ===========================================================================
000A7862                            
000A7862                            loc_72BD0:				; XREF: loc_72A64
000A7862 41EE 0040                  		lea	$40(a6),a0
000A7866 101C                       		move.b	(a4)+,d0
000A7868 7230                       		moveq	#$30,d1
000A786A 740A                       		moveq	#10,d2				; MJ: extra channel
000A786C                            
000A786C                            loc_72BDA:
000A786C 1140 0002                  		move.b	d0,2(a0)
000A7870 D0C1                       		adda.w	d1,a0
000A7872 51CA FFF8                  		dbf	d2,loc_72BDA
000A7876                            
000A7876 4E75                       		rts	
000A7878                            ; ===========================================================================
000A7878                            
000A7878                            loc_72BE6:				; XREF: loc_72A64
000A7878 101C                       		move.b	(a4)+,d0
000A787A D12D 0009                  		add.b	d0,9(a5)
000A787E 4E75                       		rts	
000A7880                            ; ===========================================================================
000A7880                            
000A7880                            loc_72BEE:				; XREF: loc_72A64
000A7880 422E 002C                  		clr.b	$2C(a6)
000A7884 4E75                       		rts	
000A7886                            ; ===========================================================================
000A7886                            
000A7886                            loc_72BF4:				; XREF: loc_72A64
000A7886 0895 0007                  		bclr	#7,(a5)
000A788A 0895 0004                  		bclr	#4,(a5)
000A788E 4EBA F98C                  		jsr	sub_726FE(pc)
000A7892 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000A7896 6B00                       		bmi.s	loc_72C22
000A7898 264D                       		movea.l	a5,a3
000A789A 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
000A789E 226E 0018                  		movea.l	$18(a6),a1
000A78A2 0895 0002                  		bclr	#2,(a5)
000A78A6 08D5 0001                  		bset	#1,(a5)
000A78AA 102D 000B                  		move.b	$B(a5),d0
000A78AE 4EBA 0000                  		jsr	sub_72C4E(pc)
000A78B2 2A4B                       		movea.l	a3,a5
000A78B4                            
000A78B4                            loc_72C22:
000A78B4 504F                       		addq.w	#8,sp
000A78B6 4E75                       		rts	
000A78B8                            ; ===========================================================================
000A78B8                            
000A78B8                            loc_72C26:				; XREF: loc_72A64
000A78B8 7000                       		moveq	#0,d0
000A78BA 101C                       		move.b	(a4)+,d0
000A78BC 1B40 000B                  		move.b	d0,$B(a5)
000A78C0                            
000A78C0                            SFM_UpdateVoice:
000A78C0 0815 0002                  		btst	#2,(a5)
000A78C4 6600 0000                  		bne.w	locret_72CAA
000A78C8 4A2E 000E                  	tst.b	$0E(a6)
000A78CC 6600                       	bne.s	locret_72CAA_2
000A78CE 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A78D2 6600                       	bne.s	locret_72CAA
000A78D4                            
000A78D4                            	locret_72CAA_2:
000A78D4                            
000A78D4 226E 0018                  		movea.l	$18(a6),a1
000A78D8 4A2E 000E                  		tst.b	$E(a6)
000A78DC 6700                       		beq.s	sub_72C4E
000A78DE 226D 0020                  		movea.l	$20(a5),a1	; ERROR HERE...
000A78E2 4A2E 000E                  		tst.b	$E(a6)
000A78E6 6B00                       		bmi.s	sub_72C4E
000A78E8 226E 0020                  		movea.l	$20(a6),a1
000A78EC                            
000A78EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A78EC                            
000A78EC                            
000A78EC                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
000A78EC 5340                       		subq.w	#1,d0
000A78EE 6B00                       		bmi.s	loc_72C5C
000A78F0 323C 0019                  		move.w	#$19,d1
000A78F4                            
000A78F4                            loc_72C56:
000A78F4 D2C1                       		adda.w	d1,a1
000A78F6 51C8 FFFC                  		dbf	d0,loc_72C56
000A78FA                            
000A78FA                            loc_72C5C:
000A78FA 1219                       		move.b	(a1)+,d1
000A78FC 1B41 001F                  		move.b	d1,$1F(a5)
000A7900 1801                       		move.b	d1,d4
000A7902 103C 00B0                  		move.b	#$B0,d0
000A7906 4EBA F950                  		jsr	sub_72722(pc)
000A790A 45FA 0000                  		lea	byte_72D18(pc),a2
000A790E 7613                       		moveq	#$13,d3
000A7910                            
000A7910                            loc_72C72:
000A7910 101A                       		move.b	(a2)+,d0
000A7912 1219                       		move.b	(a1)+,d1
000A7914 4EBA F942                  		jsr	sub_72722(pc)
000A7918 51CB FFF6                  		dbf	d3,loc_72C72
000A791C 7A03                       		moveq	#3,d5
000A791E 0244 0007                  		andi.w	#7,d4
000A7922 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
000A7926 162D 0009                  		move.b	9(a5),d3
000A792A D62E 0016                  	add.b	$16(a6),d3			; EXTRA
000A792E                            
000A792E                            loc_72C8C:
000A792E 101A                       		move.b	(a2)+,d0
000A7930 1219                       		move.b	(a1)+,d1
000A7932 E20C                       		lsr.b	#1,d4
000A7934 6400                       		bcc.s	loc_72C96
000A7936 D203                       		add.b	d3,d1
000A7938                            
000A7938                            loc_72C96:
000A7938 4EBA F91E                  		jsr	sub_72722(pc)
000A793C 51CD FFF0                  		dbf	d5,loc_72C8C
000A7940 103C 00B4                  		move.b	#$B4,d0
000A7944 122D 000A                  		move.b	$A(a5),d1
000A7948 4EBA F90E                  		jsr	sub_72722(pc)
000A794C                            
000A794C                            locret_72CAA:
000A794C 4E75                       		rts	
000A794E                            ; End of function sub_72C4E
000A794E                            
000A794E                            ; ===========================================================================
000A794E 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000A7956                            
000A7956                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7956                            
000A7956                            
000A7956                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
000A7956 0815 0002                  		btst	#2,(a5)
000A795A 6600                       		bne.s	locret_72D16
000A795C                            
000A795C 4A2E 000E                  	tst.b	$0E(a6)
000A7960 6600                       	bne.s	locret_72D16_2
000A7962 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7966 6600                       	bne.s	locret_72D16
000A7968                            
000A7968                            	locret_72D16_2:
000A7968 7000                       		moveq	#0,d0
000A796A 102D 000B                  		move.b	$B(a5),d0
000A796E 226E 0018                  		movea.l	$18(a6),a1
000A7972 4A2E 000E                  		tst.b	$E(a6)
000A7976 6700                       		beq.s	loc_72CD8
000A7978 226D 0020                  		movea.l	$20(a5),a1
000A797C 4A2E 000E                  		tst.b	$E(a6)
000A7980 6B00                       		bmi.s	loc_72CD8
000A7982 226E 0020                  		movea.l	$20(a6),a1
000A7986                            
000A7986                            loc_72CD8:
000A7986 5340                       		subq.w	#1,d0
000A7988 6B00                       		bmi.s	loc_72CE6
000A798A 323C 0019                  		move.w	#$19,d1
000A798E                            
000A798E                            loc_72CE0:
000A798E D2C1                       		adda.w	d1,a1
000A7990 51C8 FFFC                  		dbf	d0,loc_72CE0
000A7994                            
000A7994                            loc_72CE6:
000A7994 D2FC 0015                  		adda.w	#$15,a1
000A7998 45FA 0000                  		lea	byte_72D2C(pc),a2
000A799C 102D 001F                  		move.b	$1F(a5),d0
000A79A0 0240 0007                  		andi.w	#7,d0
000A79A4 183B 00A8                  		move.b	byte_72CAC(pc,d0.w),d4
000A79A8 162D 0009                  		move.b	9(a5),d3
000A79AC D62E 0016                  	add.b	$16(a6),d3			; EXTRA
000A79B0 6B00                       		bmi.s	locret_72D16
000A79B2 7A03                       		moveq	#3,d5
000A79B4                            
000A79B4                            loc_72D02:
000A79B4 101A                       		move.b	(a2)+,d0
000A79B6 1219                       		move.b	(a1)+,d1
000A79B8 E20C                       		lsr.b	#1,d4
000A79BA 6400                       		bcc.s	loc_72D12
000A79BC D203                       		add.b	d3,d1
000A79BE 6500                       		bcs.s	loc_72D12
000A79C0 4EBA F896                  		jsr	sub_72722(pc)
000A79C4                            
000A79C4                            loc_72D12:
000A79C4 51CD FFEE                  		dbf	d5,loc_72D02
000A79C8                            
000A79C8                            locret_72D16:
000A79C8 4E75                       		rts	
000A79CA                            ; End of function sub_72CB4
000A79CA                            
000A79CA                            ; ===========================================================================
000A79CA 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
000A79D4 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
000A79DE 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
000A79E2                            ; ===========================================================================
000A79E2                            
000A79E2                            loc_72D30:				; XREF: loc_72A64
000A79E2 08D5 0003                  		bset	#3,(a5)
000A79E6 2B4C 0014                  		move.l	a4,$14(a5)
000A79EA 1B5C 0018                  		move.b	(a4)+,$18(a5)
000A79EE 1B5C 0019                  		move.b	(a4)+,$19(a5)
000A79F2 1B5C 001A                  		move.b	(a4)+,$1A(a5)
000A79F6 101C                       		move.b	(a4)+,d0
000A79F8 E208                       		lsr.b	#1,d0
000A79FA 1B40 001B                  		move.b	d0,$1B(a5)
000A79FE 426D 001C                  		clr.w	$1C(a5)
000A7A02 4E75                       		rts	
000A7A04                            ; ===========================================================================
000A7A04                            
000A7A04                            loc_72D52:				; XREF: loc_72A64
000A7A04 08D5 0003                  		bset	#3,(a5)
000A7A08 206D 0014                  		movea.l	$14(a5),a0				; CHG: load modulation address
000A7A0C 43ED 0018                  		lea	$18(a5),a1				; CHG: load modulation settings RAM
000A7A10 12D8                       		move.b	(a0)+,(a1)+				; CHG: reset settings...
000A7A12 12D8                       		move.b	(a0)+,(a1)+				; CHG: ''
000A7A14 12D8                       		move.b	(a0)+,(a1)+				; CHG: ''
000A7A16 1018                       		move.b	(a0)+,d0				; CHG: ''
000A7A18 E208                       		lsr.b	#$01,d0					; CHG: ''
000A7A1A 12C0                       		move.b	d0,(a1)+				; CHG: ''
000A7A1C 4259                       		clr.w	(a1)+					; CHG: clear modulation frequency
000A7A1E 4E75                       		rts	
000A7A20                            ; ===========================================================================
000A7A20                            
000A7A20                            loc_72D58:				; XREF: loc_72A64
000A7A20 0895 0007                  		bclr	#7,(a5)
000A7A24 0895 0004                  		bclr	#4,(a5)
000A7A28 4A2D 0001                  		tst.b	1(a5)
000A7A2C 6B00                       		bmi.s	loc_72D74
000A7A2E 4A2E 0008                  		tst.b	8(a6)
000A7A32 6B00 0000                  		bmi.w	SF2_MutePCM				; CHG: for PCM, branch to a differen mute routine
000A7A36 4EBA F7E4                  		jsr	sub_726FE(pc)
000A7A3A 6000                       		bra.s	loc_72D78
000A7A3C                            ; ===========================================================================
000A7A3C                            
000A7A3C                            loc_72D74:
000A7A3C 4EBA FB50                  		jsr	sub_729A0(pc)
000A7A40                            
000A7A40                            loc_72D78:
000A7A40 4A2E 000E                  		tst.b	$E(a6)
000A7A44 6A00 0000                  		bpl.w	loc_72E02
000A7A48 4216                       		clr.b	0(a6)
000A7A4A 7000                       		moveq	#0,d0
000A7A4C 102D 0001                  		move.b	1(a5),d0
000A7A50 6B00                       		bmi.s	loc_72DCC
000A7A52 41FA F250                  		lea	dword_722CC(pc),a0
000A7A56 264D                       		movea.l	a5,a3
000A7A58 0C00 0004                  		cmpi.b	#4,d0
000A7A5C 6600                       		bne.s	loc_72DA8
000A7A5E 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
000A7A62 6A00                       		bpl.s	loc_72DA8
000A7A64 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A7A68 226E 0020                  		movea.l	$20(a6),a1
000A7A6C 6000                       		bra.s	loc_72DB8
000A7A6E                            ; ===========================================================================
000A7A6E                            
000A7A6E                            loc_72DA8:
000A7A6E 5500                       		subq.b	#2,d0
000A7A70 E508                       		lsl.b	#2,d0
000A7A72 2A70 0000                  		movea.l	(a0,d0.w),a5
000A7A76 4A15                       		tst.b	(a5)
000A7A78 6A00                       		bpl.s	loc_72DC8
000A7A7A 226E 0018                  		movea.l	$18(a6),a1
000A7A7E                            
000A7A7E                            loc_72DB8:
000A7A7E 0895 0002                  		bclr	#2,(a5)
000A7A82 08D5 0001                  		bset	#1,(a5)
000A7A86 102D 000B                  		move.b	$B(a5),d0
000A7A8A 4EBA FE60                  		jsr	sub_72C4E(pc)
000A7A8E                            
000A7A8E                            loc_72DC8:
000A7A8E 2A4B                       		movea.l	a3,a5
000A7A90 6000                       		bra.s	loc_72E02
000A7A92                            ; ===========================================================================
000A7A92                            
000A7A92                            loc_72DCC:
000A7A92 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
000A7A96 4A10                       		tst.b	(a0)
000A7A98 6A00                       		bpl.s	loc_72DE0
000A7A9A 0C00 00E0                  		cmpi.b	#$E0,d0
000A7A9E 6700                       		beq.s	loc_72DEA
000A7AA0 0C00 00C0                  		cmpi.b	#$C0,d0
000A7AA4 6700                       		beq.s	loc_72DEA
000A7AA6                            
000A7AA6                            loc_72DE0:
000A7AA6 41FA F1FC                  		lea	dword_722CC(pc),a0
000A7AAA E608                       		lsr.b	#3,d0
000A7AAC 2070 0000                  		movea.l	(a0,d0.w),a0
000A7AB0                            
000A7AB0                            loc_72DEA:
000A7AB0 0890 0002                  		bclr	#2,(a0)
000A7AB4 08D0 0001                  		bset	#1,(a0)
000A7AB8 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000A7ABE 6600                       		bne.s	loc_72E02
000A7AC0 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000A7AC8                            
000A7AC8                            loc_72E02:
000A7AC8 504F                       		addq.w	#$04*2,sp					; CHG: skip return addresses (returns back outside of the sound driver)
000A7ACA 4E75                       		rts	
000A7ACC                            
000A7ACC                            SF2_MutePCM:
000A7ACC 584F                       		addq.w	#4,sp						; CHG: go back, but not out of sound driver
000A7ACE 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)					; CHG: is this PCM 1?
000A7AD4 6600                       		bne.s	SF2_MutePCM2					; CHG: if not, branch to mute PCM 2
000A7AD6 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A7ADC 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A7AE2 33FC 0100 00A1 1100 0839+  		StopZ80
000A7AF4 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7AF6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7AF8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7AFA 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7AFC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7AFE 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B00 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7B02 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B04 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B06 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7B08 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B0A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B0C 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A7B14 33FC 0000 00A1 1100        		StartZ80
000A7B1C 4E75                       		rts							; CHG: return
000A7B1E                            
000A7B1E                            SF2_MutePCM2:
000A7B1E 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A7B24 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 1 slot address
000A7B2A 33FC 0100 00A1 1100 0839+  		StopZ80
000A7B3C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7B3E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B40 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B42 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7B44 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B46 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B48 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7B4A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B4C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B4E 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7B50 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B52 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7B54 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A7B5C 33FC 0000 00A1 1100        		StartZ80
000A7B64 4E75                       		rts							; CHG: return
000A7B66                            
000A7B66                            ; ===========================================================================
000A7B66                            
000A7B66                            loc_72E06:				; XREF: loc_72A64
000A7B66 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000A7B6C 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000A7B70 0815 0002                  		btst	#2,(a5)
000A7B74 6600                       		bne.s	locret_72E1E 
000A7B76 4A2E 000E                  	tst.b	$0E(a6)
000A7B7A 6600                       	bne.s	locret_72E1E_2
000A7B7C 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7B80 6600                       	bne.s	locret_72E1E 
000A7B82                            
000A7B82                            	locret_72E1E_2:
000A7B82 102C FFFF                  		move.b	-1(a4),d0				; MJ: reload F3 setting to d0
000A7B86 13C0 00C0 0011             		move.b	d0,($C00011).l				; MJ: save F3 setting (should be EX (PSG 4) related)
000A7B8C 0200 0003                  		andi.b	#%00000011,d0				; MJ: get only frequency mode bits
000A7B90 0C00 0003                  		cmpi.b	#%00000011,d0				; MJ: has it been set to use PSG 3's frequency?
000A7B94 6600                       		bne.s	locret_72E1E				; MJ: if not, branch
000A7B96 13FC 00DF 00C0 0011        		move.b	#%11011111,($C00011).l			; MJ: mute PSG 3's volume
000A7B9E                            
000A7B9E                            locret_72E1E:
000A7B9E 4E75                       		rts	
000A7BA0                            ; ===========================================================================
000A7BA0                            
000A7BA0                            loc_72E20:				; XREF: loc_72A64
000A7BA0 0895 0003                  		bclr	#3,(a5)
000A7BA4 4E75                       		rts	
000A7BA6                            ; ===========================================================================
000A7BA6                            
000A7BA6                            loc_72E26:				; XREF: loc_72A64
000A7BA6 1B5C 000B                  		move.b	(a4)+,$B(a5)
000A7BAA 4E75                       		rts	
000A7BAC                            ; ===========================================================================
000A7BAC                            
000A7BAC                            loc_72E2C:				; XREF: loc_72A64
000A7BAC 101C                       		move.b	(a4)+,d0
000A7BAE E148                       		lsl.w	#8,d0
000A7BB0 101C                       		move.b	(a4)+,d0
000A7BB2 D8C0                       		adda.w	d0,a4
000A7BB4 534C                       		subq.w	#1,a4
000A7BB6 4E75                       		rts	
000A7BB8                            ; ===========================================================================
000A7BB8                            
000A7BB8                            loc_72E38:				; XREF: loc_72A64
000A7BB8 7000                       		moveq	#0,d0
000A7BBA 101C                       		move.b	(a4)+,d0
000A7BBC 121C                       		move.b	(a4)+,d1
000A7BBE 4A35 0024                  		tst.b	$24(a5,d0.w)
000A7BC2 6600                       		bne.s	loc_72E48
000A7BC4 1B81 0024                  		move.b	d1,$24(a5,d0.w)
000A7BC8                            
000A7BC8                            loc_72E48:
000A7BC8 5335 0024                  		subq.b	#1,$24(a5,d0.w)
000A7BCC 66DE                       		bne.s	loc_72E2C
000A7BCE 544C                       		addq.w	#2,a4
000A7BD0 4E75                       		rts	
000A7BD2                            ; ===========================================================================
000A7BD2                            
000A7BD2                            loc_72E52:				; XREF: loc_72A64
000A7BD2 7000                       		moveq	#0,d0
000A7BD4 102D 000D                  		move.b	$D(a5),d0
000A7BD8 5900                       		subq.b	#4,d0
000A7BDA 2B8C 0000                  		move.l	a4,(a5,d0.w)
000A7BDE 1B40 000D                  		move.b	d0,$D(a5)
000A7BE2 60C8                       		bra.s	loc_72E2C
000A7BE4                            ; ===========================================================================
000A7BE4                            
000A7BE4                            loc_72E64:				; XREF: loc_72A64
000A7BE4 103C 0088                  		move.b	#$88,d0
000A7BE8 123C 000F                  		move.b	#$F,d1
000A7BEC 4EBA F676                  		jsr	sub_7272E(pc)
000A7BF0 103C 008C                  		move.b	#$8C,d0
000A7BF4 123C 000F                  		move.b	#$F,d1
000A7BF8 6000 F66A                  		bra.w	sub_7272E
000A7BFC                            ; ===========================================================================
000A7BFC                            Music81:	incbin	sound\music81.bin
000A83DA 00                         		even
000A83DA                            Music82:	incbin	sound\music82.bin
000A8908 00                         		even
000A8908                            Music83:	incbin	sound\music83.bin
000A8D82 00                         		even
000A8D82                            Music84:	incbin	sound\music84.bin
000A9200 00                         		even
000A9200                            Music85:	incbin	sound\music85.bin
000A9758 00                         		even
000A9758                            Music86:	incbin	sound\music86.bin
000A9E8C                            		even
000A9E8C                            Music87:	incbin	sound\music87.bin
000AA132 00                         		even
000AA132                            Music88:	incbin	sound\music88.bin
000AA23E 00                         		even
000AA23E                            Music89:	incbin	sound\music89.bin
000AA572 00                         		even
000AA572                            Music8A:	incbin	sound\music8A.bin
000AA78A                            		even
000AA78A                            Music8B:	incbin	sound\music8B.bin
000AAAB6                            		even
000AAAB6                            Music8C:	incbin	sound\music8C.bin
000AAD74 00                         		even
000AAD74                            Music8D:	incbin	sound\music8D.bin
000AB016                            		even
000AB016                            Music8E:	incbin	sound\music8E.bin
000AB1AC 00                         		even
000AB1AC                            Music8F:	incbin	sound\music8F.bin
000AB30E 00                         		even
000AB30E                            Music90:	incbin	sound\music90.bin
000AB48E 00                         		even
000AB48E                            Music91:	incbin	sound\music91.bin
000ACAB6 00                         		even
000ACAB6                            Music92:	incbin	sound\music92.bin
000ACBFE 00                         		even
000ACBFE                            Music93:	incbin	sound\music93.bin
000ACCD6 00                         		even
000ACCD6                            ; ---------------------------------------------------------------------------
000ACCD6                            ; Sound	effect pointers
000ACCD6                            ; ---------------------------------------------------------------------------
000ACCD6 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000ACCE2 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000ACCEE 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000ACCFA 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000ACD06 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000ACD12 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000ACD1E 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000ACD2A 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000ACD36 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000ACD42 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000ACD4E 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000ACD5A 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000ACD66 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000ACD72 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000ACD7E 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000ACD8A 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000ACD96 0000 0000                  SoundD0Index:	dc.l SoundD0
000ACD9A                            SoundA0:	incbin	sound\soundA0.bin
000ACDB0                            		even
000ACDB0                            SoundA1:	incbin	sound\soundA1.bin
000ACDDA                            		even
000ACDDA                            SoundA2:	incbin	sound\soundA2.bin
000ACDFA                            		even
000ACDFA                            SoundA3:	incbin	sound\soundA3.bin
000ACE2C                            		even
000ACE2C                            SoundA4:	incbin	sound\soundA4.bin
000ACE62                            		even
000ACE62                            SoundA5:	incbin	sound\soundA5.bin
000ACE8E                            		even
000ACE8E                            SoundA6:	incbin	sound\soundA6.bin
000ACEBE                            		even
000ACEBE                            SoundA7:	incbin	sound\soundA7.bin
000ACEEE                            		even
000ACEEE                            SoundA8:	incbin	sound\soundA8.bin
000ACF22                            		even
000ACF22                            SoundA9:	incbin	sound\soundA9.bin
000ACF34                            		even
000ACF34                            SoundAA:	incbin	sound\soundAA.bin
000ACF76                            		even
000ACF76                            SoundAB:	incbin	sound\soundAB.bin
000ACF96                            		even
000ACF96                            SoundAC:	incbin	sound\soundAC.bin
000ACFCA                            		even
000ACFCA                            SoundAD:	incbin	sound\soundAD.bin
000AD000                            		even
000AD000                            SoundAE:	incbin	sound\soundAE.bin
000AD04A                            		even
000AD04A                            SoundAF:	incbin	sound\soundAF.bin
000AD078                            		even
000AD078                            SoundB0:	incbin	sound\soundB0.bin
000AD0AA                            		even
000AD0AA                            SoundB1:	incbin	sound\soundB1.bin
000AD0D6                            		even
000AD0D6                            SoundB2:	incbin	sound\soundB2.bin
000AD126                            		even
000AD126                            SoundB3:	incbin	sound\soundB3.bin
000AD170                            		even
000AD170                            SoundB4:	incbin	sound\soundB4.bin
000AD1CC                            		even
000AD1CC                            SoundB5:	incbin	sound\soundB5.bin
000AD1FA                            		even
000AD1FA                            SoundB6:	incbin	sound\soundB6.bin
000AD218                            		even
000AD218                            SoundB7:	incbin	sound\soundB7.bin
000AD254                            		even
000AD254                            SoundB8:	incbin	sound\soundB8.bin
000AD272                            		even
000AD272                            SoundB9:	incbin	sound\soundB9.bin
000AD2D6                            		even
000AD2D6                            SoundBA:	incbin	sound\soundBA.bin
000AD2FE                            		even
000AD2FE                            SoundBB:	incbin	sound\soundBB.bin
000AD32A                            		even
000AD32A                            SoundBC:	incbin	sound\soundBC.bin
000AD36C                            		even
000AD36C                            SoundBD:	incbin	sound\soundBD.bin
000AD3C0                            		even
000AD3C0                            SoundBE:	incbin	sound\soundBE.bin
000AD3FA                            		even
000AD3FA                            SoundBF:	incbin	sound\soundBF.bin
000AD46C                            		even
000AD46C                            SoundC0:	incbin	sound\soundC0.bin
000AD49A                            		even
000AD49A                            SoundC1:	incbin	sound\soundC1.bin
000AD4D4                            		even
000AD4D4                            SoundC2:	incbin	sound\soundC2.bin
000AD4FE                            		even
000AD4FE                            SoundC3:	incbin	sound\soundC3.bin
000AD578                            		even
000AD578                            SoundC4:	incbin	sound\soundC4.bin
000AD5A0                            		even
000AD5A0                            SoundC5:	incbin	sound\soundC5.bin
000AD608                            		even
000AD608                            SoundC6:	incbin	sound\soundC6.bin
000AD64A                            		even
000AD64A                            SoundC7:	incbin	sound\soundC7.bin
000AD678                            		even
000AD678                            SoundC8:	incbin	sound\soundC8.bin
000AD68A                            		even
000AD68A                            SoundC9:	incbin	sound\soundC9.bin
000AD6B8                            		even
000AD6B8                            SoundCA:	incbin	sound\soundCA.bin
000AD6E6                            		even
000AD6E6                            SoundCB:	incbin	sound\soundCB.bin
000AD732                            		even
000AD732                            SoundCC:	incbin	sound\soundCC.bin
000AD76C                            		even
000AD76C                            SoundCD:	incbin	sound\soundCD.bin
000AD77A                            		even
000AD77A                            SoundCE:	incbin	sound\soundCE.bin
000AD7A8                            		even
000AD7A8                            SoundCF:	incbin	sound\soundCF.bin
000AD7E0                            		even
000AD7E0                            SoundD0:	incbin	sound\soundD0.bin
000AD81A                            		even
000AD81A                            SegaPCM:	incbin	"Dual PCM\Samples\incswf\Sega.swf",$3A
000B3660                            SegaPCM_End:	even
000B3660                            
000B3660                            ; ===========================================================================
000B3660                            ; ---------------------------------------------------------------------------
000B3660                            ; Z80 ROM address
000B3660                            ; ---------------------------------------------------------------------------
000B3660                            
000B3660                            Z80ROM:		incbin	"Dual PCM\Z80.bin"
000B5198 00                         Z80ROM_End:	even
000B5198                            
000B5198                            ; ===========================================================================
000B5198                            ; ---------------------------------------------------------------------------
000B5198                            ; Sample 68k PCM list
000B5198                            ; ---------------------------------------------------------------------------
000B5198                            ; SampleList:
000B5198                            		include	"Dual PCM\Samples.asm"
000B5198                            ; ===========================================================================
000B5198                            ; ---------------------------------------------------------------------------
000B5198                            ; Sample 68k PCM list
000B5198                            ; ---------------------------------------------------------------------------
000B5198                            
000B5198                            SampleList:
000B5198                            
000B5198                            	; --- Sonic 1 Samples ---
000B5198                            
000B5198 0000 0000                  		dc.l	Sonic1Kick			; 00
000B519C 0000 0000                  		dc.l	Sonic1Snare			; 01
000B51A0 0000 0000                  		dc.l	Sonic1Timpani		; 02
000B51A4 0000 0000                  		dc.l	SonimeDies			; 03
000B51A8 0000 0000                  		dc.l	SonimeFrustrated	; 04
000B51AC 0000 0000                  		dc.l	SonimeHappy			; 05
000B51B0 0000 0000                  		dc.l	SonimeHappy2		; 06
000B51B4 0000 0000                  		dc.l	SonimeHurt			; 07
000B51B8 0000 0000                  		dc.l	SonimeImpatient		; 08
000B51BC 0000 0000                  		dc.l	SonimeInvincibility	; 09
000B51C0 0000 0000                  		dc.l	SonimeSpikey	; 0A
000B51C4 0000 0000                  		dc.l	SonimeSpeed	; 0B
000B51C8                            		
000B51C8                            ; ---------------------------------------------------------------------------
000B51C8                            ; Sample z80 pointers
000B51C8                            ; ---------------------------------------------------------------------------
000B51C8 =000036B0                  Sec	=	14000	; Hz per second
000B51C8 =000003E8                  Mil	=	1000	; centi-seconds per second
000B51C8                            
000B51C8                            	; --- Stop Sample (used by note 80) ---
000B51C8                            
000B51C8 0000 0000 0000 0000 0000+  StopSample:				dcz80	SWF_StopSample,		SWF_StopSample_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B51D4                            
000B51D4                            	; --- Sonic 1 Samples ---
000B51D4                            
000B51D4 0000 0000 0000 0000 0000+  Sonic1Kick:				dcz80	SWF_S1_Kick,		SWF_S1_Kick_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B51E0 0000 0000 0000 0000 0000+  Sonic1Snare:			dcz80	SWF_S1_Snare,		SWF_S1_Snare_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B51EC 0000 0000 0000 0000 0000+  Sonic1Timpani:			dcz80	SWF_S1_Timpani,		SWF_S1_Timpani,			SWF_StopSample,		SWF_StopSample_Rev
000B51F8 0000 0000 0000 0000 0000+  SonimeDies:				dcz80	SWF_Dies,			SWF_Dies_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B5204 0000 0000 0000 0000 0000+  SonimeFrustrated:		dcz80	SWF_Frustrated,		SWF_Frustrated_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B5210 0000 0000 0000 0000 0000+  SonimeHappy:			dcz80	SWF_Happy,			SWF_Happy_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B521C 0000 0000 0000 0000 0000+  SonimeHappy2:			dcz80	SWF_Happy2,			SWF_Happy2_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B5228 0000 0000 0000 0000 0000+  SonimeHurt:				dcz80	SWF_Hurt,			SWF_Hurt_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B5234 0000 0000 0000 0000 0000+  SonimeImpatient:		dcz80	SWF_Impatient,		SWF_Impatient_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B5240 0000 0000 0000 0000 0000+  SonimeInvincibility:	dcz80	SWF_Invincibility,	SWF_Invincibility_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000B524C 0000 0000 0000 0000 0000+  SonimeSpikey:	dcz80	SWF_Spikey,	SWF_Spikey_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000B5258 0000 0000 0000 0000 0000+  SonimeSpeed:		dcz80	SWF_Speed,		SWF_Speed_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B5264                            ; ---------------------------------------------------------------------------
000B5264                            ; Sample file includes
000B5264                            ; ---------------------------------------------------------------------------
000B5264                            			align	$8000,$FF
000B8000                            ; ---------------------------------------------------------------------------
000B8000                            
000B8000                            	; --- Volume tables ---
000B8000                            
000B8000                            PCM_Volumes:		incbin	"Dual PCM\Volume Maker\Volumes.bin"
000C0000                            
000C0000                            	; --- Stop Sample (used by note 80) ---
000C0000                            
000C0000                            			EndMarker
000C0198                            SWF_StopSample:		dcb.b	$8000-((Z80E_Read*(($1000+$100)/$100))*2),$80
000C7E68                            SWF_StopSample_Rev:	EndMarker
000C8000                            
000C8000                            	; --- Sonic 1 Samples ---
000C8000                            
000C8000                            SWF_S1_Kick:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Kick.swf"
000C8894                            SWF_S1_Kick_Rev:	EndMarker
000C8A2C                            SWF_S1_Snare:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare.swf"
000C9303                            SWF_S1_Snare_Rev:	EndMarker
000C949B                            SWF_S1_Timpani:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani.swf"
000CC41F                            SWF_S1_Timpani_Rev:	EndMarker
000CC5B7                            SWF_Dies:			incbin	"Dual PCM\Samples\incswf\dies.swf"
000D0D24                            SWF_Dies_Rev:		EndMarker
000D0EBC                            SWF_Frustrated:		incbin	"Dual PCM\Samples\incswf\frustrated.swf"
000D8283                            SWF_Frustrated_Rev:	EndMarker
000D841B                            SWF_Happy:			incbin	"Dual PCM\Samples\incswf\happy.swf"
000DF3D3                            SWF_Happy_Rev:		EndMarker
000DF56B                            SWF_Happy2:			incbin	"Dual PCM\Samples\incswf\happy 2.swf"
000ECBB7                            SWF_Happy2_Rev:		EndMarker
000ECD4F                            SWF_Hurt:			incbin	"Dual PCM\Samples\incswf\hurt.swf"
000EF942                            SWF_Hurt_Rev:		EndMarker
000EFADA                            SWF_Impatient:		incbin	"Dual PCM\Samples\incswf\impatient.swf"
000F922E                            SWF_Impatient_Rev:	EndMarker
000F93C6                            SWF_Invincibility:	incbin	"Dual PCM\Samples\incswf\invincibility.swf"
001107C1                            SWF_Invincibility_Rev:	EndMarker
00110959                            SWF_Spikey:	incbin	"Dual PCM\Samples\incswf\spikey.swf"
00114934                            SWF_Spikey_Rev:	EndMarker
00114ACC                            SWF_Speed:	incbin	"Dual PCM\Samples\incswf\goingatsupersonicspeed.swf"
0011F331                            SWF_Speed_Rev:	EndMarker
0011F4C9                            ; ===========================================================================
0011F4C9                            ; ===========================================================================
0011F4CA 00                         		even
0011F4CA                            
0011F4CA                            ; ===========================================================================
0011F4CA                            
0011F4CA                            SHC2021:    incbin "SHC21_Lite_Sonic12.bin"
0012572E                                        even
0012572E                            
0012572E                            ; ===============================================================
0012572E                            ; ---------------------------------------------------------------
0012572E                            ; Error handling module
0012572E                            ; ---------------------------------------------------------------
0012572E                            
0012572E 4EBA 0000                  BusError:	jsr	ErrorHandler(pc)
00125732 4255 5320 4552 524F 5200   		dc.b	"BUS ERROR",0			; text
0012573C 01                         		dc.b	1				; extended stack frame
0012573E 00                         		even
0012573E                            
0012573E 4EBA 0000                  AddressError:	jsr	ErrorHandler(pc)
00125742 4144 4452 4553 5320 4552+  		dc.b	"ADDRESS ERROR",0		; text
00125750 01                         		dc.b	1				; extended stack frame
00125752 00                         		even
00125752                            
00125752 4EBA 0000                  IllegalInstr:	jsr	ErrorHandler(pc)
00125756 494C 4C45 4741 4C20 494E+  		dc.b	"ILLEGAL INSTRUCTION",0		; text
0012576A 00                         		dc.b	0				; extended stack frame
0012576C 00                         		even
0012576C                            
0012576C 4EBA 0000                  ZeroDivide:	jsr	ErrorHandler(pc)
00125770 5A45 524F 2044 4956 4944+  		dc.b	"ZERO DIVIDE",0  		; text
0012577C 00                         		dc.b	0				; extended stack frame
0012577E 00                         		even
0012577E                            
0012577E 4EBA 0000                  ChkInstr:	jsr	ErrorHandler(pc)
00125782 4348 4B20 494E 5354 5255+  		dc.b	"CHK INSTRUCTION",0  		; text
00125792 00                         		dc.b	0				; extended stack frame
00125794 00                         		even
00125794                            
00125794 4EBA 0000                  TrapvInstr:	jsr	ErrorHandler(pc)
00125798 5452 4150 5620 494E 5354+  		dc.b	"TRAPV INSTRUCTION",0  		; text
001257AA 00                         		dc.b	0				; extended stack frame
001257AC 00                         		even
001257AC                            
001257AC 4EBA 0000                  PrivilegeViol:	jsr	ErrorHandler(pc)
001257B0 5052 4956 494C 4547 4520+  		dc.b	"PRIVILEGE VIOLATION",0  	; text
001257C4 00                         		dc.b	0				; extended stack frame
001257C6 00                         		even
001257C6                            
001257C6 4EBA 0000                  Trace:		jsr	ErrorHandler(pc)
001257CA 5452 4143 4500             		dc.b	"TRACE",0 	  		; text
001257D0 00                         		dc.b	0				; extended stack frame
001257D2 00                         		even
001257D2                            
001257D2 4EBA 0000                  Line1010Emu:	jsr	ErrorHandler(pc)
001257D6 4C49 4E45 2031 3031 3020+  		dc.b	"LINE 1010 EMULATOR",0  	; text
001257E9 00                         		dc.b	0				; extended stack frame
001257EA                            		even
001257EA                            
001257EA 4EBA 0000                  Line1111Emu:	jsr	ErrorHandler(pc)
001257EE 4C49 4E45 2031 3131 3120+  		dc.b	"LINE 1111 EMULATOR",0  	; text
00125801 00                         		dc.b	0				; extended stack frame
00125802                            		even
00125802                            
00125802 4EBA 0000                  ErrorExcept:	jsr	ErrorHandler(pc)
00125806 4552 524F 5220 4558 4345+  		dc.b	"ERROR EXCEPTION",0    		; text
00125816 00                         		dc.b	0				; extended stack frame
00125818 00                         		even
00125818                            
00125818                            ErrorHandler:	incbin	"ErrorHandler.bin"
0012722C                            
0012722C                            ; end of 'ROM'
0012722C                            EndOfRom:
0012722C                            
0012722C                            
