00000000                            ; /=========================================================================\
00000000                            ; º	This file is generated by The Interactive Disassembler (IDA)	    º
00000000                            ; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            		include	"Equates.asm"
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Equates
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =FFFFFF90                  HBlankRAM	=	$FFFFFF90		; word	; jmp $00000000
00000000 =FFFFFF92                  HBlankRout	=	HBlankRAM+$02		; long	; ''
00000000 =FFFFFF96                  VBlankRAM	=	HBlankRout+$04		; word	; jmp $00000000
00000000 =FFFFFF98                  VBlankRout	=	VBlankRAM+$02		; long	; ''
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                            		include	"Equz80.asm"
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; ListEqu.exe generated from "Dual PCM\Z80.lst"
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00000018                  Z80E_Read = $18 
00000000 =000000DD                  x = $DD 
00000000 =000000FD                  y = $FD 
00000000 =00000000                  ldin = $0 
00000000 =00000000                  deci = $0 
00000000 =00000000                  inci = $0 
00000000 =00000000                  M_Read = $0 
00000000 =00000000                  M_CapPCM = $0 
00000000 =00000000                  M_Flush01 = $0 
00000000 =00000000                  M_Flush02 = $0 
00000000 =00000000                  M_Revert01 = $0 
00000000 =00000000                  M_Revert02 = $0 
00000000 =00000000                  M_Wrap = $0 
00000000 =00000000                  M_WrapCondition = $0 
00000000 =00000000                  Z80_Start = $0 
00000000 =00000010                  Z80_Stack = $10 
00000000 =00000010                  BreakLate = $10 
00000000 =00000028                  PCM1_ResetJmp = $28 
00000000 =00000030                  PCM2_ResetJmp = $30 
00000000 =00000038                  BreakVBlank = $38 
00000000 =00000040                  BVB_Check = $40 
00000000 =00000046                  BreakPrep = $46 
00000000 =00000063                  BreakDMA = $63 
00000000 =00000074                  BDMA_NoExchange = $74 
00000000 =00000082                  BDMA_NoFixVolume = $82 
00000000 =00000083                  BDMA_NoFixFlush = $83 
00000000 =00000084                  BDMA_ReadSet = $84 
00000000 =00000084                  BreakBank = $84 
00000000 =00000090                  BDMA_NoMax = $90 
00000000 =0000009A                  BDMA_FlushLoop = $9A 
00000000 =0000009A                  Z80_VBlank2 = $9A 
00000000 =0000009E                  BDMA_Flush02 = $9E 
00000000 =000000B3                  Z80_VBlank1 = $B3 
00000000 =000000B7                  BDMA_Flush01 = $B7 
00000000 =00000107                  BDMA_NoRestore = $107 
00000000 =00000107                  YM_FlushTimer = $107 
00000000 =00000116                  YMF_Buff1 = $116 
00000000 =00000120                  YM_Flush = $120 
00000000 =00000123                  YMF_NextByte = $123 
00000000 =00000142                  Z80_DelayYM1 = $142 
00000000 =00000169                  Z80_DelayYM2 = $169 
00000000 =00000189                  YMF_Finish02 = $189 
00000000 =0000018E                  Z80_DelayYM3 = $18E 
00000000 =00000192                  YMF_Finish01 = $192 
00000000 =00000197                  Z80_DelayYM4 = $197 
00000000 =0000019B                  PCM_Flush_exx = $19B 
00000000 =0000019C                  PCM_Flush = $19C 
00000000 =0000019F                  PCM_NextByte = $19F 
00000000 =000001B3                  Z80_DelayEnd1 = $1B3 
00000000 =000001B5                  YMF_Enter02 = $1B5 
00000000 =000001CC                  Z80_DelayEnd2 = $1CC 
00000000 =000001CE                  YMF_Enter01 = $1CE 
00000000 =000001F6                  YMF_SetBuff1 = $1F6 
00000000 =00000202                  VB_PCM1_VolOK = $202 
00000000 =0000020C                  VB_PCM2_VolOK = $20C 
00000000 =0000020D                  PCM_VolChangeDel = $20D 
00000000 =00000218                  PCM1_VolumeNext = $218 
00000000 =0000021D                  PCM2_VolumeNext = $21D 
00000000 =00000222                  PCM_VolChangeNo = $222 
00000000 =00000229                  Z80_Int1 = $229 
00000000 =0000022D                  Z80_Init = $22D 
00000000 =00000291                  CatchUp = $291 
00000000 =00000292                  CatchUp_Exx = $292 
00000000 =000002A6                  Z80_Int2 = $2A6 
00000000 =000002A7                  PCM1_MuteRet = $2A7 
00000000 =000002AC                  Int1_nop = $2AC 
00000000 =000002AD                  PCM1_Switch = $2AD 
00000000 =000002B8                  PCM1_OverflwCur = $2B8 
00000000 =000002C1                  PCM1_OverflwDiv = $2C1 
00000000 =000002DF                  Int1_lda = $2DF 
00000000 =000002E4                  PCM1_PrepRet = $2E4 
00000000 =000002E4                  PCM1_SampCur = $2E4 
00000000 =000002E7                  PCM1_Buffer = $2E7 
00000000 =000002EA                  PCM1_PitchQuo = $2EA 
00000000 =000002ED                  PCM1_PitchDiv = $2ED 
00000000 =000002F0                  PCM1_PitchCur = $2F0 
00000000 =000002F2                  PCM1_PreInst01 = $2F2 
00000000 =000002F7                  PCM1_PreInst02 = $2F7 
00000000 =000002FC                  PCM1_PreInst03 = $2FC 
00000000 =00000318                  PCM1_PreInst04 = $318 
00000000 =0000031D                  PCM1_PreInst05 = $31D 
00000000 =00000322                  PCM1_PreInst06 = $322 
00000000 =00000327                  PCM1_PreInst07 = $327 
00000000 =00000343                  PCM1_PreInst08 = $343 
00000000 =00000348                  PCM1_PreInst09 = $348 
00000000 =0000034D                  PCM1_PreInst0A = $34D 
00000000 =00000352                  PCM1_PreInst0B = $352 
00000000 =00000357                  PCM1_PreInst0C = $357 
00000000 =00000373                  PCM1_PreInst0D = $373 
00000000 =00000378                  PCM1_PreInst0E = $378 
00000000 =0000037D                  PCM1_PreInst0F = $37D 
00000000 =00000382                  PCM1_PreInst10 = $382 
00000000 =0000039E                  PCM1_PreInst11 = $39E 
00000000 =000003A3                  PCM1_PreInst12 = $3A3 
00000000 =000003A8                  PCM1_PreInst13 = $3A8 
00000000 =000003AD                  PCM1_PreInst14 = $3AD 
00000000 =000003B2                  PCM1_PreInst15 = $3B2 
00000000 =000003CE                  PCM1_PreInst16 = $3CE 
00000000 =000003D3                  PCM1_PreInst17 = $3D3 
00000000 =000003D8                  PCM1_PreInst18 = $3D8 
00000000 =00000403                  PCM2_MuteRet = $403 
00000000 =00000408                  Int2_nop = $408 
00000000 =00000409                  PCM2_Switch = $409 
00000000 =00000414                  PCM2_OverflwCur = $414 
00000000 =00000432                  PCM2_OverflwDiv = $432 
00000000 =0000043B                  Int2_lda = $43B 
00000000 =00000440                  PCM2_PrepRet = $440 
00000000 =00000440                  PCM2_SampCur = $440 
00000000 =00000443                  PCM2_Buffer = $443 
00000000 =00000446                  PCM2_PitchQuo = $446 
00000000 =00000449                  PCM2_PitchDiv = $449 
00000000 =0000044C                  PCM2_PitchCur = $44C 
00000000 =0000044E                  PCM2_PreInst01 = $44E 
00000000 =0000046A                  PCM2_PreInst02 = $46A 
00000000 =0000046F                  PCM2_PreInst03 = $46F 
00000000 =00000474                  PCM2_PreInst04 = $474 
00000000 =00000479                  PCM2_PreInst05 = $479 
00000000 =0000047E                  PCM2_PreInst06 = $47E 
00000000 =0000049A                  PCM2_PreInst07 = $49A 
00000000 =0000049F                  PCM2_PreInst08 = $49F 
00000000 =000004A4                  PCM2_PreInst09 = $4A4 
00000000 =000004A9                  PCM2_PreInst0A = $4A9 
00000000 =000004C5                  PCM2_PreInst0B = $4C5 
00000000 =000004CA                  PCM2_PreInst0C = $4CA 
00000000 =000004CF                  PCM2_PreInst0D = $4CF 
00000000 =000004D4                  PCM2_PreInst0E = $4D4 
00000000 =000004D9                  PCM2_PreInst0F = $4D9 
00000000 =000004F5                  PCM2_PreInst10 = $4F5 
00000000 =000004FA                  PCM2_PreInst11 = $4FA 
00000000 =000004FF                  PCM2_PreInst12 = $4FF 
00000000 =00000504                  PCM2_PreInst13 = $504 
00000000 =00000520                  PCM2_PreInst14 = $520 
00000000 =00000525                  PCM2_PreInst15 = $525 
00000000 =0000052A                  PCM2_PreInst16 = $52A 
00000000 =0000052F                  PCM2_PreInst17 = $52F 
00000000 =00000534                  PCM2_PreInst18 = $534 
00000000 =0000055F                  UPD1_Buffer = $55F 
00000000 =00000565                  UPD1_SampCur = $565 
00000000 =0000056B                  UPD1_PitchCur = $56B 
00000000 =000005A3                  PCM_BuffNoReset = $5A3 
00000000 =000005A4                  PCM1_ChangeBank = $5A4 
00000000 =000005BB                  PCM1_IgnoreBank = $5BB 
00000000 =000005BB                  PCM2_ChangeBank = $5BB 
00000000 =000005D2                  PCM2_IgnoreBank = $5D2 
00000000 =000005D2                  PCM1_ChangePitch = $5D2 
00000000 =000005DC                  PCM1_PitchHigh = $5DC 
00000000 =000005E7                  PCM1_PitchLow = $5E7 
00000000 =00000603                  PCM1_IgnorePitch = $603 
00000000 =00000603                  PCM2_ChangePitch = $603 
00000000 =0000060D                  PCM2_PitchHigh = $60D 
00000000 =00000618                  PCM2_PitchLow = $618 
00000000 =00000634                  PCM2_IgnorePitch = $634 
00000000 =00000634                  PCM_ChangeVolume = $634 
00000000 =00000641                  PCM1_Volume = $641 
00000000 =00000646                  PCM2_Volume = $646 
00000000 =0000064B                  PCM_VolumeAlter = $64B 
00000000 =0000064E                  PCM_VolumeRet = $64E 
00000000 =0000064E                  PCM1_NewRET = $64E 
00000000 =00000651                  PCM2_NewRET = $651 
00000000 =00000654                  PCM_NoUpdate = $654 
00000000 =0000066A                  CU_ValidDist = $66A 
00000000 =0000066F                  CU_Flush = $66F 
00000000 =00000673                  FL_NextByte = $673 
00000000 =00000687                  Z80_Flush1 = $687 
00000000 =000006A1                  Z80_Flush2 = $6A1 
00000000 =000006BC                  PCM1_Mute = $6BC 
00000000 =000006CE                  PCM1_Normal = $6CE 
00000000 =000006D4                  PCM1_Reverse = $6D4 
00000000 =000006ED                  PCM1_PrepReset = $6ED 
00000000 =000006FC                  PCM1_PrepCount = $6FC 
00000000 =0000070A                  PCM1_PrepLoc = $70A 
00000000 =0000072E                  Int1_jp = $72E 
00000000 =00000731                  PCM1_Reset = $731 
00000000 =00000745                  PCM1_ValueAdd = $745 
00000000 =00000770                  Int1_ldhl = $770 
00000000 =00000782                  PCM1_ResInst = $782 
00000000 =00000787                  PCM1_ResSamp = $787 
00000000 =0000078A                  PCM1_ResBuff = $78A 
00000000 =0000078D                  PCM1_ResDiv = $78D 
00000000 =00000790                  PCM1_ResPitCur = $790 
00000000 =00000794                  PCM1_ResQuo = $794 
00000000 =00000797                  PCM1_ResJump = $797 
00000000 =0000079A                  PCM1_NewSample = $79A 
00000000 =000007AA                  PCM1_NewNormal = $7AA 
00000000 =000007B0                  PCM1_NewReverse = $7B0 
00000000 =000007C7                  PCM2_Mute = $7C7 
00000000 =000007D9                  PCM2_Normal = $7D9 
00000000 =000007DF                  PCM2_Reverse = $7DF 
00000000 =000007F8                  PCM2_PrepReset = $7F8 
00000000 =00000807                  PCM2_PrepCount = $807 
00000000 =00000815                  PCM2_PrepLoc = $815 
00000000 =00000824                  Int2_jp = $824 
00000000 =00000827                  PCM2_Reset = $827 
00000000 =0000083B                  PCM2_ValueAdd = $83B 
00000000 =00000866                  Int2_ldhl = $866 
00000000 =00000878                  PCM2_ResInst = $878 
00000000 =0000087D                  PCM2_ResSamp = $87D 
00000000 =00000880                  PCM2_ResBuff = $880 
00000000 =00000883                  PCM2_ResDiv = $883 
00000000 =00000886                  PCM2_ResPitCur = $886 
00000000 =0000088A                  PCM2_ResQuo = $88A 
00000000 =0000088D                  PCM2_ResJump = $88D 
00000000 =00000890                  PCM2_NewSample = $890 
00000000 =000008A0                  PCM2_NewNormal = $8A0 
00000000 =000008A6                  PCM2_NewReverse = $8A6 
00000000 =00000A00                  PCM_Volume1 = $A00 
00000000 =00000B00                  PCM_Volume2 = $B00 
00000000 =00000C00                  PCM1_PrepTable = $C00 
00000000 =00000C30                  PCM2_PrepTable = $C30 
00000000 =00000C60                  PCM1_BankCur = $C60 
00000000 =00000C61                  PCM2_BankCur = $C61 
00000000 =00000C62                  MuteSample = $C62 
00000000 =00000C64                  MuteBank = $C64 
00000000 =00000C65                  MuteSample_Rev = $C65 
00000000 =00000C67                  MuteBank_Rev = $C67 
00000000 =00000C68                  YM_Buffer = $C68 
00000000 =00000C69                  PCM1_Sample = $C69 
00000000 =00000C6B                  PCM1_Bank = $C6B 
00000000 =00000C6C                  PCM1_Sample_Rev = $C6C 
00000000 =00000C6E                  PCM1_Bank_Rev = $C6E 
00000000 =00000C6F                  PCM1_SampleNext = $C6F 
00000000 =00000C71                  PCM1_BankNext = $C71 
00000000 =00000C72                  PCM1_SampleNext_Rev = $C72 
00000000 =00000C74                  PCM1_BankNext_Rev = $C74 
00000000 =00000C75                  PCM2_Sample = $C75 
00000000 =00000C77                  PCM2_Bank = $C77 
00000000 =00000C78                  PCM2_Sample_Rev = $C78 
00000000 =00000C7A                  PCM2_Bank_Rev = $C7A 
00000000 =00000C7B                  PCM2_SampleNext = $C7B 
00000000 =00000C7D                  PCM2_BankNext = $C7D 
00000000 =00000C7E                  PCM2_SampleNext_Rev = $C7E 
00000000 =00000C80                  PCM2_BankNext_Rev = $C80 
00000000 =00000CB0                  PCM_Buffer1 = $CB0 
00000000 =00000EB0                  PCM_Buffer2 = $EB0 
00000000 =00001000                  YM_Buffer1 = $1000 
00000000 =00001400                  YM_Buffer2 = $1400 
00000000 =00001800                  PCM_OverflwCalc = $1800 
00000000 =00001A00                  PCM_VolumeControl = $1A00 
00000000 =00001A06                  PCM1_VolumeNew = $1A06 
00000000 =00001A08                  PCM1_VolumeCur = $1A08 
00000000 =00001A13                  PCM1_VolTimer = $1A13 
00000000 =00001A1B                  PCM1_NoVolume = $1A1B 
00000000 =00001A1B                  PCM2_VolumeNew = $1A1B 
00000000 =00001A1D                  PCM2_VolumeCur = $1A1D 
00000000 =00001A28                  PCM2_VolTimer = $1A28 
00000000 =00001A30                  PCM2_NoVolume = $1A30 
00000000 =00001A35                  SwitchVolume = $1A35 
00000000 =00001A38                  SV_VolumeBank = $1A38 
00000000 =00001A55                  SV_NoMute = $1A55 
00000000 =00001A5A                  SV_LoadVolume = $1A5A 
00000000 =00001A6E                  SV_Flush = $1A6E 
00000000 =00001A91                  SVF_NoMute = $1A91 
00000000 =00001A96                  SVF_LoadVolume = $1A96 
00000000 =00001AAB                  SVF_StartVolume = $1AAB 
00000000 =00001AFC                  SwitchBank = $1AFC 
00000000 =00001B03                  SetBank = $1B03 
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                            		include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),($C00004).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000 =000007A0                  torsoart = $7A0 ($C tiles)
00000000 =000007AC                  headart = $7AC ($14 tiles)
00000000 =00000798                  hairart = $798 (8 tiles)
00000000 =000006BA                  ringart = $6BA ($E tiles)
00000000 =00000568                  pointsart = $568 (9 tiles)
00000000 =00000571                  lamppostart = $571 ($A tiles)
00000000                            
00000000 =0000022D                  ssringart = $22D ($E tiles)
00000000                            
00000000 =FFFFF5C0                  SonimeSST = $FFFFF5C0
00000000 =FFFFFFF9                  v_ssangleprev = $FFFFFFF9
00000000 =FFFFF601                  FromSEGA = $FFFFF601
00000000                            
00000000 =00000000                  sonime_headtimer = 0
00000000 =00000002                  sonime_headx = 2
00000000 =00000003                  sonime_heady = 3
00000000 =00000004                  sonime_routine = 4
00000000 =00000005                  sonime_routine2 = 5
00000000 =00000006                  sonime_headx2 = 6
00000000 =00000007                  sonime_headx3 = 7
00000000 =00000009                  sonime_hairx = 9
00000000 =0000000A                  sonime_heady2 = $A
00000000 =0000000B                  sonime_heady3 = $B
00000000 =0000000D                  sonime_hairy = $D
00000000 =0000000E                  sonime_face = $E
00000000 =0000000F                  sonime_faceold = $F
00000000 =00000010                  sonime_facetimer = $10
00000000 =00000012                  sonime_ear = $12
00000000 =00000013                  sonime_earold = $13
00000000 =00000014                  sonime_eartimer = $14
00000000 =00000016                  sonime_torsox = $16
00000000 =00000017                  sonime_movein = $17
00000000 =00000018                  sonime_waittimer = $18
00000000 =00000019                  sonime_waittimer2 = $19
00000000 =00000020                  sonime_pausetimer = $20
00000000 =00000022                  sonime_airtimer = $22
00000000                            
00000000 =00000000                  face_neutrall = 0
00000000 =00000001                  face_blink = 1
00000000 =00000002                  face_neutrallm = 2
00000000 =00000003                  face_neutralm = 3
00000000 =00000004                  face_neutralr = 4
00000000 =00000005                  face_frustrated = 5
00000000 =00000006                  face_surprised = 6
00000000 =00000007                  face_happy = 7
00000000 =00000008                  face_confused = 8
00000000 =00000009                  face_meltdown = 9
00000000 =0000000A                  face_panic = $A
00000000 =0000000B                  face_impatient = $B
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            	; --- Alignment ---
00000000                            
00000000                            align		macro	Size,Value
00000000                            		dcb.b	Size-(*%Size),Value
00000000                            		endm
00000000                            
00000000                            	; --- Stop Z80 ---
00000000                            
00000000                            StopZ80		macro
00000000                            		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
00000000                            		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
00000000                            		bne.s	*-$08					; if not, branch
00000000                            		endm
00000000                            
00000000                            	; --- Start Z80 ---
00000000                            
00000000                            StartZ80	macro
00000000                            		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
00000000                            		endm
00000000                            
00000000                            ResetZ80	macro
00000000                            		move.w	#$0000,($A11200).l			; request Z80 reset (ON)
00000000                            		endm
00000000                            
00000000                            NeglectZ80	macro
00000000                            		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
00000000                            		endm
00000000                            
00000000                            	; --- DMA to (a6) containing C00004 ---
00000000                            
00000000                            DMA:		macro	Size, Source, Destination
00000000                            		move.l	#(((((Size/$02)<<$08)&$FF0000)+((Size/$02)&$FF))+$94009300),(a6)
00000000                            		move.l	#((((((Source&$FFFFFF)/$02)<<$08)&$FF0000)+(((Source&$FFFFFF)/$02)&$FF))+$96009500),(a6)
00000000                            		move.l	#(((((Source&$FFFFFF)/$02)&$7F0000)+$97000000)+((Destination>>$10)&$FFFF)),(a6)
00000000                            		move.w	#((Destination&$FF7F)|$80),(a6)
00000000                            		endm
00000000                            
00000000                            	; --- Storing 68k address for Z80 as dc ---
00000000                            
00000000                            dcz80		macro	Sample, SampleRev, SampleLoop, SampleLoopRev
00000000                            		dc.b	((Sample)&$FF)
00000000                            		dc.b	((((Sample)>>$08)&$7F)|$80)
00000000                            		dc.b	(((Sample)&$7F8000)>>$0F)
00000000                            		dc.b	(((SampleRev)-1)&$FF)
00000000                            		dc.b	(((((SampleRev)-1)>>$08)&$7F)|$80)
00000000                            		dc.b	((((SampleRev)-1)&$7F8000)>>$0F)
00000000                            		dc.b	((SampleLoop)&$FF)
00000000                            		dc.b	((((SampleLoop)>>$08)&$7F)|$80)
00000000                            		dc.b	(((SampleLoop)&$7F8000)>>$0F)
00000000                            		dc.b	(((SampleLoopRev)-1)&$FF)
00000000                            		dc.b	(((((SampleLoopRev)-1)>>$08)&$7F)|$80)
00000000                            		dc.b	((((SampleLoopRev)-1)&$7F8000)>>$0F)
00000000                            		endm
00000000                            
00000000                            	; --- End marker for PCM samples ---
00000000                            
00000000                            EndMarker	macro
00000000                            		dcb.b	Z80E_Read*(($1000+$100)/$100),$00
00000000                            		endm
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            PlayPCM2	macro	Sample
00000000                            		move.l	a0,-(sp)
00000000                            		move.l	a1,-(sp)
00000000                            		lea (Sample).l,a0 ; load sample pointers
00000000                            		lea ($A00C75).l,a1 ; load PCM2 pointers
00000000                            		move.w #$0100,($A11100).l ; request Z80 stop (ON)
00000000                            		btst.b #$00,($A11100).l ; has the Z80 stopped yet?
00000000                            		bne.s *-$08 ; if not, branch
00000000                            		move.b #0,($A00647).l ; set volume
00000000                            		move.b (a0)+,(a1)+ ; set address of sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; set address of reverse sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; set address of loop sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; set address of loop reverse sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b #%11011010,($A00651).l ; set request
00000000                            		move.w #$0000,($A11100).l ; request Z80 stop (OFF)
00000000                            		move.l	(sp)+,a1
00000000                            		move.l	(sp)+,a0
00000000                            		endm
00000000                            
00000000 =000001FF                  Max_Rings = 511 ; default. maximum number possible is 759
00000000 =00000400                  Rings_Space = (Max_Rings+1)*2
00000000                            
00000000 =FFFF8000                  Object_Respawn_Table = $FFFF8000
00000000 =FFFFFE2A                  Camera_X_pos_last = $FFFFFE2A
00000000 =FFFFF76E                  Camera_Y_pos_last = $FFFFF76E
00000000                            
00000000 =FFFF8300                  Ring_Positions = $FFFF8300
00000000 =FFFF8700                  Ring_start_addr_ROM = Ring_Positions+Rings_Space
00000000 =FFFF8704                  Ring_end_addr_ROM = Ring_Positions+Rings_Space+4
00000000 =FFFF8708                  Ring_start_addr_RAM = Ring_Positions+Rings_Space+8
00000000 =FFFF870A                  Perfect_rings_left = Ring_Positions+Rings_Space+$A
00000000 =FFFF870C                  Rings_manager_routine = Ring_Positions+Rings_Space+$C
00000000 =FFFF870D                  Level_started_flag = Ring_Positions+Rings_Space+$D
00000000 =FFFF870E                  Ring_consumption_table = Ring_Positions+Rings_Space+$E
00000000 =00000014                  respawn_index = $14	
00000000                            
00000000 =FFFFF60E                  v_pocketbottom = $FFFFF60E
00000000 =FFFFF610                  v_pocketx = $FFFFF610
00000000 =FFFFF612                  f_insidepocket = $FFFFF612
00000000                            
00000000 =0000000B                  mainspr_mapframe    = $B
00000000 =0000000E                  mainspr_width        = $E
00000000 =0000000F                  mainspr_childsprites     = $F    ; amount of child sprites
00000000 =00000014                  mainspr_height        = $14
00000000 =00000010                  sub2_x_pos        = $10    ;x_vel
00000000 =00000012                  sub2_y_pos        = $12    ;y_vel
00000000 =00000015                  sub2_mapframe        = $15
00000000 =00000016                  sub3_x_pos        = $16    ;y_radius
00000000 =00000018                  sub3_y_pos        = $18    ;priority
00000000 =0000001B                  sub3_mapframe        = $1B    ;anim_frame
00000000 =0000001C                  sub4_x_pos        = $1C    ;anim
00000000 =0000001E                  sub4_y_pos        = $1E    ;anim_frame_duration
00000000 =00000021                  sub4_mapframe        = $21    ;collision_property
00000000 =00000022                  sub5_x_pos        = $22    ;status
00000000 =00000024                  sub5_y_pos        = $24    ;routine
00000000 =00000027                  sub5_mapframe        = $27
00000000 =00000028                  sub6_x_pos        = $28    ;subtype
00000000 =0000002A                  sub6_y_pos        = $2A
00000000 =0000002D                  sub6_mapframe        = $2D
00000000 =0000002E                  sub7_x_pos        = $2E
00000000 =00000030                  sub7_y_pos        = $30
00000000 =00000033                  sub7_mapframe        = $33
00000000 =00000034                  sub8_x_pos        = $34
00000000 =00000036                  sub8_y_pos        = $36
00000000 =00000039                  sub8_mapframe        = $39
00000000 =0000003A                  sub9_x_pos        = $3A
00000000 =0000003C                  sub9_y_pos        = $3C
00000000 =0000003F                  sub9_mapframe        = $3F
00000000 =00000006                  next_subspr       = $6	
00000000                            	
00000000 =00000001                  Yes		=	1
00000000 =00000000                  No		=	0
00000000                            
00000000 =00000000                  MUTEDAC		=	No
00000000 =00000000                  MUTEFM		=	No
00000000 =00000000                  MUTEPSG		=	No
00000000 =00000000                  MUTEPSG		=	No
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3139+  Date:		dc.b '(C)SEGA 1991.APR' ; Release date
00000120 5654 5542 4552 2049 4E20+  Title_Local:	dc.b 'VTUBER IN SONIC 1                               ' ; Domestic name
00000150 5654 5542 4552 2049 4E20+  Title_Int:	dc.b 'VTUBER IN SONIC 1                               ' ; International name
00000180 474D 2030 3030 3034 3034+  Serial:					dc.b "GM 00004049-01" ; Serial/version number (Rev01)
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E                            
0000030E                            loc_348:
0000030E 2CC7                       		move.l	d7,(a6)+
00000310 51CE FFFC                  		dbf	d6,loc_348
00000314 1039 00A1 0001             		move.b	($A10001).l,d0
0000031A 0200 00C0                  		andi.b	#$C0,d0
0000031E 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000322 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
0000032A                            
0000032A                            GameInit:
0000032A 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000330 7E00                       		moveq	#0,d7
00000332 3C3C 3F7F                  		move.w	#$3F7F,d6
00000336                            
00000336                            GameClrRAM:
00000336 2CC7                       		move.l	d7,(a6)+
00000338 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
0000033C 6100 0000                  		bsr.w	VDPSetupGame
00000340 6100 0000                  		bsr.w	SoundDriverLoad
00000344 6100 0000                  		bsr.w	JoypadInit
00000348 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000034E                            
0000034E 41FA 0000                  		lea	GML_Int(pc),a0				; load interrupt list
00000352 3258                       		movea.w	(a0)+,a1				; load dump address
00000354 22D8                       		move.l	(a0)+,(a1)+				; jmp $0000
00000356 22D8                       		move.l	(a0)+,(a1)+				; $0000 jmp
00000358 22D8                       		move.l	(a0)+,(a1)+				; $00000000
0000035A                            
0000035A                            MainGameLoop:
0000035A 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000035E 0240 001C                  		andi.w	#$1C,d0
00000362 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000366 60F2                       		bra.s	MainGameLoop
00000368                            
00000368 FF90                       GML_Int:	dc.w	HBlankRAM&$FFFF
0000036A 4EF9 0000 0000             		jmp	PalToCRAM
00000370 4EF9 0000 0000             		jmp	loc_B10
00000376                            
00000376 4E73                       NullBlank:	rte
00000378                            
00000378                            ; ===========================================================================
00000378                            ; ---------------------------------------------------------------------------
00000378                            ; Main game mode array
00000378                            ; ---------------------------------------------------------------------------
00000378                            
00000378                            GameModeArray:
00000378 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000037C                            ; ===========================================================================
0000037C 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
00000380                            ; ===========================================================================
00000380 6000 0000                  		bra.w	Level		; Demo Mode ($08)
00000384                            ; ===========================================================================
00000384 6000 0000                  		bra.w	Level		; Normal Level ($0C)
00000388                            ; ===========================================================================
00000388 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
0000038C                            ; ===========================================================================
0000038C 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
00000390                            ; ===========================================================================
00000390 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
00000394                            ; ===========================================================================
00000394 6000 0000                  		bra.w	Credits		; Credits ($1C)
00000398                            ; ===========================================================================
00000398 4E75                       		rts	
0000039A                            ; ===========================================================================
0000039A                            
0000039A                            loc_43A:
0000039A 46FC 2700                  		move	#$2700,sr
0000039E 544F                       		addq.w	#2,sp
000003A0 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
000003A4 544F                       		addq.w	#2,sp
000003A6 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003AC 6100 0000                  		bsr.w	ShowErrorMsg
000003B0 202F 0002                  		move.l	2(sp),d0
000003B4 6100 0000                  		bsr.w	sub_5BA
000003B8 2038 FC40                  		move.l	($FFFFFC40).w,d0
000003BC 6100 0000                  		bsr.w	sub_5BA
000003C0 6000                       		bra.s	loc_478
000003C2                            ; ===========================================================================
000003C2                            
000003C2                            loc_462:
000003C2 46FC 2700                  		move	#$2700,sr
000003C6 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003CC 6100 0000                  		bsr.w	ShowErrorMsg
000003D0 202F 0002                  		move.l	2(sp),d0
000003D4 6100 0000                  		bsr.w	sub_5BA
000003D8                            
000003D8                            loc_478:
000003D8 6100 0000                  		bsr.w	ErrorWaitForC
000003DC 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
000003E2 46FC 2300                  		move	#$2300,sr
000003E6 4E73                       		rte	
000003E8                            
000003E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000003E8                            
000003E8                            
000003E8                            ShowErrorMsg:				; XREF: loc_43A; loc_462
000003E8 4DF9 00C0 0000             		lea	($C00000).l,a6
000003EE 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000003F8 41F9 0000 0000             		lea	(Art_Text).l,a0
000003FE 323C 027F                  		move.w	#$27F,d1
00000402                            
00000402                            Error_LoadGfx:
00000402 3C98                       		move.w	(a0)+,(a6)
00000404 51C9 FFFC                  		dbf	d1,Error_LoadGfx
00000408 7000                       		moveq	#0,d0		; clear	d0
0000040A 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
0000040E 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000412 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000416 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
00000420 7212                       		moveq	#$12,d1		; number of characters
00000422                            
00000422                            Error_LoopChars:
00000422 7000                       		moveq	#0,d0
00000424 1018                       		move.b	(a0)+,d0
00000426 0640 0790                  		addi.w	#$790,d0
0000042A 3C80                       		move.w	d0,(a6)
0000042C 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
00000430 4E75                       		rts	
00000432                            ; End of function ShowErrorMsg
00000432                            
00000432                            ; ===========================================================================
00000432 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
00000436 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
0000043A 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
0000043E 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
00000442 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
00000446 0000                       		dc.w asc_5A6-ErrorText
00000448 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
0000045B 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000046E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000481 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000494 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
000004A7 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
000004BA 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
000004CD 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
000004E0 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
000004F3 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
00000506 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
0000051A 00                         		even
0000051A                            
0000051A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000051A                            
0000051A                            
0000051A                            sub_5BA:				; XREF: loc_43A; loc_462
0000051A 3CBC 07CA                  		move.w	#$7CA,(a6)
0000051E 7407                       		moveq	#7,d2
00000520                            
00000520                            loc_5C0:
00000520 E998                       		rol.l	#4,d0
00000522 6100                       		bsr.s	sub_5CA
00000524 51CA FFFA                  		dbf	d2,loc_5C0
00000528 4E75                       		rts	
0000052A                            ; End of function sub_5BA
0000052A                            
0000052A                            
0000052A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000052A                            
0000052A                            
0000052A                            sub_5CA:				; XREF: sub_5BA
0000052A 3200                       		move.w	d0,d1
0000052C 0241 000F                  		andi.w	#$F,d1
00000530 0C41 000A                  		cmpi.w	#$A,d1
00000534 6500                       		bcs.s	loc_5D8
00000536 5E41                       		addq.w	#7,d1
00000538                            
00000538                            loc_5D8:
00000538 0641 07C0                  		addi.w	#$7C0,d1
0000053C 3C81                       		move.w	d1,(a6)
0000053E 4E75                       		rts	
00000540                            ; End of function sub_5CA
00000540                            
00000540                            
00000540                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000540                            
00000540                            
00000540                            ErrorWaitForC:				; XREF: loc_478
00000540 6100 0000                  		bsr.w	ReadJoypads
00000544 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
0000054A 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000054E 4E75                       		rts	
00000550                            ; End of function ErrorWaitForC
00000550                            
00000550                            ; ===========================================================================
00000550                            
00000550                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000A70                            		even
00000A70                            
00000A70                            ; ===========================================================================
00000A70                            
00000A70                            DetectPAL:
00000A70 4EB9 0000 0000             		jsr	(sub_71B4C).l
00000A76 0839 0006 00A1 0001        		btst    #6,($A10001).l
00000A7E 6700 0000                  		beq.w   @ret
00000A82 5238 FFBF                  		addq.b  #1,($FFFFFFBF).w
00000A86 0C38 0005 FFBF             		cmpi.b  #5,($FFFFFFBF).w
00000A8C 6500                       		blo.s   @ret
00000A8E 4238 FFBF                  		clr.b   ($FFFFFFBF).w
00000A92 4EB9 0000 0000             		jsr	sub_71B4C
00000A98                            @ret
00000A98 4E75                       		rts
00000A9A                            ; End of function DetectPAL
00000A9A                            
00000A9A                            loc_B10:				; XREF: Vectors
00000A9A 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000A9E 4A38 F62A                  		tst.b	($FFFFF62A).w
00000AA2 6700                       		beq.s	loc_B88
00000AA4 3039 00C0 0004             		move.w	($C00004).l,d0
00000AAA 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000AB4 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000ABC 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000AC2 6700                       		beq.s	loc_B42
00000AC4 303C 0700                  		move.w	#$700,d0
00000AC8                            
00000AC8                            loc_B3E:
00000AC8 51C8 FFFE                  		dbf	d0,loc_B3E
00000ACC                            
00000ACC                            loc_B42:
00000ACC 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000AD0 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000AD6 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000ADC 0240 003E                  		andi.w	#$3E,d0
00000AE0 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000AE4 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000AE8                            
00000AE8                            loc_B5E:				; XREF: loc_B88
00000AE8 4EB9 0000 0A70             		jsr		(DetectPAL).l
00000AEE                            
00000AEE                            loc_B64:				; XREF: loc_D50
00000AEE 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000AF2 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000AF6 4E73                       		rte	
00000AF8                            ; ===========================================================================
00000AF8 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000AFC 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000B00 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000B04 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000B08 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000B0C 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000B10 0000                       		dc.w loc_E72-off_B6E
00000B12                            ; ===========================================================================
00000B12                            
00000B12                            loc_B88:				; XREF: loc_B10; off_B6E
00000B12 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000B18 6700                       		beq.s	loc_B9A
00000B1A 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000B20 6600 FFC6                  		bne.w	loc_B5E
00000B24                            
00000B24                            loc_B9A:
00000B24 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000B2A 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000B2E 3039 00C0 0004             		move.w	($C00004).l,d0
00000B34 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B3A 6700                       		beq.s	loc_BBA
00000B3C 303C 0700                  		move.w	#$700,d0
00000B40                            
00000B40                            loc_BB6:
00000B40 51C8 FFFE                  		dbf	d0,loc_BB6
00000B44                            
00000B44                            loc_BBA:
00000B44 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B4A 4A38 F64E                  		tst.b	($FFFFF64E).w
00000B4E 6600                       		bne.s	loc_BFE
00000B50 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B56 3ABC 8C81                  		move.w	#$8C81,(a5)
00000B5A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B60 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000B66 3ABC 977F                  		move.w	#$977F,(a5)
00000B6A 3ABC C000                  		move.w	#$C000,(a5)
00000B6E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B74 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B78 6000                       		bra.s	loc_C22
00000B7A                            ; ===========================================================================
00000B7A                            
00000B7A                            loc_BFE:				; XREF: loc_BC8
00000B7A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B80 3ABC 8C89                  		move.w	#$8C89,(a5)
00000B84 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B8A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000B90 3ABC 977F                  		move.w	#$977F,(a5)
00000B94 3ABC C000                  		move.w	#$C000,(a5)
00000B98 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B9E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BA2                            
00000BA2                            loc_C22:				; XREF: loc_BC8
00000BA2 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000BA6 6000 FF40                  		bra.w	loc_B5E
00000BAA                            ; ===========================================================================
00000BAA                            
00000BAA                            loc_C32:				; XREF: off_B6E
00000BAA 6100 0000                  		bsr.w	sub_106E
00000BAE                            
00000BAE                            loc_C36:				; XREF: off_B6E
00000BAE 4A78 F614                  		tst.w	($FFFFF614).w
00000BB2 6700 0000                  		beq.w	locret_C42
00000BB6 5378 F614                  		subq.w	#1,($FFFFF614).w
00000BBA                            
00000BBA                            locret_C42:
00000BBA 4E75                       		rts	
00000BBC                            ; ===========================================================================
00000BBC                            
00000BBC                            loc_C44:				; XREF: off_B6E
00000BBC 6100 0000                  		bsr.w	sub_106E
00000BC0 6100 0000                  		bsr.w	sub_6886
00000BC4 6100 0000                  		bsr.w	sub_1642
00000BC8 4A78 F614                  		tst.w	($FFFFF614).w
00000BCC 6700 0000                  		beq.w	locret_C5C
00000BD0 5378 F614                  		subq.w	#1,($FFFFF614).w
00000BD4                            
00000BD4                            locret_C5C:
00000BD4 4E75                       		rts	
00000BD6                            ; ===========================================================================
00000BD6                            
00000BD6                            loc_C5E:				; XREF: off_B6E
00000BD6 6100 0000                  		bsr.w	sub_106E
00000BDA 4E75                       		rts
00000BDC                            
00000BDC                            ; Return:
00000BDC 6100 0000                  		bsr.w	ReadJoypads
00000BE0 4E75                       		rts	
00000BE2                            ; ===========================================================================
00000BE2                            
00000BE2                            loc_C64:				; XREF: off_B6E
00000BE2 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000BE8 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000BEC                            
00000BEC                            loc_C6E:				; XREF: off_B6E
00000BEC 6100 0000                  		bsr.w	ReadJoypads
00000BF0 4A38 F64E                  		tst.b	($FFFFF64E).w
00000BF4 6600                       		bne.s	loc_CB0
00000BF6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BFC 3ABC 8C81                  		move.w	#$8C81,(a5)
00000C00 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C06 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C0C 3ABC 977F                  		move.w	#$977F,(a5)
00000C10 3ABC C000                  		move.w	#$C000,(a5)
00000C14 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C1A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C1E 6000                       		bra.s	loc_CD4
00000C20                            ; ===========================================================================
00000C20                            
00000C20                            loc_CB0:				; XREF: loc_C76
00000C20 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C26 3ABC 8C89                  		move.w	#$8C89,(a5)
00000C2A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C30 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C36 3ABC 977F                  		move.w	#$977F,(a5)
00000C3A 3ABC C000                  		move.w	#$C000,(a5)
00000C3E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C44 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C48                            
00000C48                            loc_CD4:				; XREF: loc_C76
00000C48 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C4C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C52 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000C58 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000C5E 3ABC 977F                  		move.w	#$977F,(a5)
00000C62 3ABC 7C00                  		move.w	#$7C00,(a5)
00000C66 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C6C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C70 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C76 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000C7C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000C82 3ABC 977F                  		move.w	#$977F,(a5)
00000C86 3ABC 7800                  		move.w	#$7800,(a5)
00000C8A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C90 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C94 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000C9A                            
00000C9A                            loc_D50:
00000C9A 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000CA0 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000CA6 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000CAC 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000CB2 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000CB8 6400                       		bcc.s	Demo_Time
00000CBA 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000CC0 588F                       		addq.l	#4,sp
00000CC2 6000 FE2A                  		bra.w	loc_B64
00000CC6                            
00000CC6                            ; ---------------------------------------------------------------------------
00000CC6                            ; Subroutine to	run a demo for an amount of time
00000CC6                            ; ---------------------------------------------------------------------------
00000CC6                            
00000CC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000CC6                            
00000CC6                            
00000CC6                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000CC6 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000CCA 4EB9 0000 0000             		jsr	AniArt_Load
00000CD0 4EB9 0000 0000             		jsr	HudUpdate
00000CD6 6100 0000                  		bsr.w	sub_165E
00000CDA 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000CDE 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000CE2 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000CE6                            
00000CE6                            Demo_TimeEnd:
00000CE6 4E75                       		rts	
00000CE8                            ; End of function Demo_Time
00000CE8                            
00000CE8                            ; ===========================================================================
00000CE8                            
00000CE8                            loc_DA6:				; XREF: off_B6E
00000CE8 6100 0000                  		bsr.w	ReadJoypads
00000CEC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CF2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CF8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000CFE 3ABC 977F                  		move.w	#$977F,(a5)
00000D02 3ABC C000                  		move.w	#$C000,(a5)
00000D06 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000D0C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D10 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D16 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D1C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D22 3ABC 977F                  		move.w	#$977F,(a5)
00000D26 3ABC 7800                  		move.w	#$7800,(a5)
00000D2A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D30 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D34 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D3A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000D40 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000D46 3ABC 977F                  		move.w	#$977F,(a5)
00000D4A 3ABC 7C00                  		move.w	#$7C00,(a5)
00000D4E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D54 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D58 6100 0000                  		bsr.w	PalCycle_SS
00000D5C 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000D62                            
00000D62                            loc_E64:
00000D62 0C38 0060 F625             		cmpi.b	#96,($FFFFF625).w
00000D68 6400                       		bcc.s	@update
00000D6A 6000 0000                  		bra.w	locret_E70
00000D6E                            
00000D6E                            	@update:
00000D6E 4EB9 0000 0000             		jsr	SS_LoadWalls
00000D74 4A78 F614                  		tst.w	($FFFFF614).w
00000D78 6700 0000                  		beq.w	locret_E70
00000D7C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000D80                            
00000D80                            locret_E70:
00000D80 4E75                       		rts	
00000D82                            ; ===========================================================================
00000D82                            
00000D82                            loc_E72:				; XREF: off_B6E
00000D82 6100 0000                  		bsr.w	ReadJoypads
00000D86 4A38 F64E                  		tst.b	($FFFFF64E).w
00000D8A 6600                       		bne.s	loc_EB4
00000D8C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D92 3ABC 8C81                  		move.w	#$8C81,(a5)
00000D96 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000D9C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DA2 3ABC 977F                  		move.w	#$977F,(a5)
00000DA6 3ABC C000                  		move.w	#$C000,(a5)
00000DAA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DB0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DB4 6000                       		bra.s	loc_ED8
00000DB6                            ; ===========================================================================
00000DB6                            
00000DB6                            loc_EB4:				; XREF: loc_E7A
00000DB6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DBC 3ABC 8C89                  		move.w	#$8C89,(a5)
00000DC0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DC6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DCC 3ABC 977F                  		move.w	#$977F,(a5)
00000DD0 3ABC C000                  		move.w	#$C000,(a5)
00000DD4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DDA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DDE                            
00000DDE                            loc_ED8:				; XREF: loc_E7A
00000DDE 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000DE2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DE8 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000DEE 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000DF4                            
00000DF4                            loc_EEE:
00000DF4 3ABC 977F                  		move.w	#$977F,(a5)
00000DF8 3ABC 7C00                  		move.w	#$7C00,(a5)
00000DFC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E02 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E06 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E0C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000E12 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000E18 3ABC 977F                  		move.w	#$977F,(a5)
00000E1C 3ABC 7800                  		move.w	#$7800,(a5)
00000E20 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E26 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E2A 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E30                            
00000E30                            loc_F54:
00000E30 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000E36 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000E3C 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000E42 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000E48 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000E4C 4EB9 0000 0000             		jsr	AniArt_Load
00000E52 4EB9 0000 0000             		jsr	HudUpdate
00000E58 6100 0000                  		bsr.w	sub_1642
00000E5C 4E75                       		rts	
00000E5E                            ; ===========================================================================
00000E5E                            
00000E5E                            loc_F8A:				; XREF: off_B6E
00000E5E 6100 0000                  		bsr.w	sub_106E
00000E62 5238 F628                  		addq.b	#1,($FFFFF628).w
00000E66 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000E6C 4E75                       		rts	
00000E6E                            ; ===========================================================================
00000E6E                            
00000E6E                            loc_F9A:				; XREF: off_B6E
00000E6E 6100 0000                  		bsr.w	sub_106E
00000E72 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E76 6000 0000                  		bra.w	sub_1642
00000E7A                            ; ===========================================================================
00000E7A                            
00000E7A                            loc_FA6:				; XREF: off_B6E
00000E7A 6100 0000                  		bsr.w	ReadJoypads
00000E7E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E84 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E8A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E90 3ABC 977F                  		move.w	#$977F,(a5)
00000E94 3ABC C000                  		move.w	#$C000,(a5)
00000E98 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E9E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EA2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EA8 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000EAE 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000EB4 3ABC 977F                  		move.w	#$977F,(a5)
00000EB8 3ABC 7800                  		move.w	#$7800,(a5)
00000EBC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EC2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EC6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ECC 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000ED2 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000ED8 3ABC 977F                  		move.w	#$977F,(a5)
00000EDC 3ABC 7C00                  		move.w	#$7C00,(a5)
00000EE0 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EE6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EEA 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000EF0                            
00000EF0                            loc_1060:
00000EF0 4A78 F614                  		tst.w	($FFFFF614).w
00000EF4 6700 0000                  		beq.w	locret_106C
00000EF8 5378 F614                  		subq.w	#1,($FFFFF614).w
00000EFC                            
00000EFC                            locret_106C:
00000EFC 4E75                       		rts	
00000EFE                            
00000EFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000EFE                            
00000EFE                            
00000EFE                            sub_106E:				; XREF: loc_C32; et al
00000EFE 6100 0000                  		bsr.w	ReadJoypads
00000F02 4A38 F64E                  		tst.b	($FFFFF64E).w
00000F06 6600                       		bne.s	loc_10B0
00000F08 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F0E 3ABC 8C81                  		move.w	#$8C81,(a5)
00000F12 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000F18 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000F1E 3ABC 977F                  		move.w	#$977F,(a5)
00000F22 3ABC C000                  		move.w	#$C000,(a5)
00000F26 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F2C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F30                            
00000F30                            PAL1_LOAD:
00000F30 6000                       		bra.s	loc_10D4
00000F32                            ; ===========================================================================
00000F32                            
00000F32                            loc_10B0:
00000F32 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F38 3ABC 8C89                  		move.w	#$8C89,(a5)
00000F3C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000F42 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000F48 3ABC 977F                  		move.w	#$977F,(a5)
00000F4C 3ABC C000                  		move.w	#$C000,(a5)
00000F50 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F56 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F5A                            loc_10D4:
00000F5A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F60 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F66 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F6C 3ABC 977F                  		move.w	#$977F,(a5)
00000F70 3ABC 7800                  		move.w	#$7800,(a5)
00000F74 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F7A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F7E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F84 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F8A 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F90 3ABC 977F                  		move.w	#$977F,(a5)
00000F94 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F98 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F9E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FA2 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000FA8 4E75                       		rts	
00000FAA                            ; End of function sub_106E
00000FAA                            
00000FAA                            ; ---------------------------------------------------------------------------
00000FAA                            ; Subroutine to	move pallets from the RAM to CRAM
00000FAA                            ; ---------------------------------------------------------------------------
00000FAA                            
00000FAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FAA                            
00000FAA                            
00000FAA                            PalToCRAM:
00000FAA 46FC 2700                  		move	#$2700,sr
00000FAE 4A78 F644                  		tst.w	($FFFFF644).w
00000FB2 6700                       		beq.s	locret_119C
00000FB4 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00000FBA 2F08                       		move.l	a0,-(sp)
00000FBC 41F9 00C0 0004             		lea	($C00004).l,a0
00000FC2 30BC 8C89                  		move.w	#$8C89,(a0)
00000FC6 30BC 8ADF                  		move.w	#$8ADF,(a0)
00000FCA 205F                       		move.l	(sp)+,a0
00000FCC 4A38 F64F                  		tst.b	($FFFFF64F).w
00000FD0 6600                       		bne.s	loc_119E
00000FD2                            
00000FD2                            locret_119C:
00000FD2 4E73                       		rte	
00000FD4                            ; ===========================================================================
00000FD4                            
00000FD4                            loc_119E:				; XREF: PalToCRAM
00000FD4 4238 F64F                  		clr.b	($FFFFF64F).w
00000FD8 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000FDC 6100 FCE8                  		bsr.w	Demo_Time
00000FE0 4EB9 0000 0A70             		jsr		(DetectPAL).l
00000FE6 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000FEA 4E73                       		rte	
00000FEC                            ; End of function PalToCRAM
00000FEC                            
00000FEC                            ; ---------------------------------------------------------------------------
00000FEC                            ; Subroutine to	initialise joypads
00000FEC                            ; ---------------------------------------------------------------------------
00000FEC                            
00000FEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FEC                            
00000FEC                            
00000FEC                            JoypadInit:				; XREF: GameClrRAM
00000FEC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FF4                            
00000FF4                            Joypad_WaitZ80:
00000FF4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
00000FFC 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
00000FFE 7040                       		moveq	#$40,d0
00001000 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00001006 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
0000100C 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001012 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000101A 4E75                       		rts	
0000101C                            ; End of function JoypadInit
0000101C                            
0000101C                            ; ---------------------------------------------------------------------------
0000101C                            ; Subroutine to	read joypad input, and send it to the RAM
0000101C                            ; ---------------------------------------------------------------------------
0000101C                            
0000101C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000101C                            
0000101C                            
0000101C                            ReadJoypads:
0000101C 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00001020 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001026 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001028 5449                       		addq.w	#2,a1		; do the second	joypad
0000102A                            
0000102A                            Joypad_Read:
0000102A 12BC 0000                  		move.b	#0,(a1)
0000102E 4E71                       		nop	
00001030 4E71                       		nop	
00001032 1011                       		move.b	(a1),d0
00001034 E508                       		lsl.b	#2,d0
00001036 0200 00C0                  		andi.b	#$C0,d0
0000103A 12BC 0040                  		move.b	#$40,(a1)
0000103E 4E71                       		nop	
00001040 4E71                       		nop	
00001042 1211                       		move.b	(a1),d1
00001044 0201 003F                  		andi.b	#$3F,d1
00001048 8001                       		or.b	d1,d0
0000104A 4600                       		not.b	d0
0000104C 1210                       		move.b	(a0),d1
0000104E B101                       		eor.b	d0,d1
00001050 10C0                       		move.b	d0,(a0)+
00001052 C200                       		and.b	d0,d1
00001054 10C1                       		move.b	d1,(a0)+
00001056 4E75                       		rts	
00001058                            ; End of function ReadJoypads
00001058                            
00001058                            
00001058                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001058                            
00001058                            
00001058                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001058 41F9 00C0 0004             		lea	($C00004).l,a0
0000105E 43F9 00C0 0000             		lea	($C00000).l,a1
00001064 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
0000106A 7E12                       		moveq	#$12,d7
0000106C                            
0000106C                            VDP_Loop:
0000106C 309A                       		move.w	(a2)+,(a0)
0000106E 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001072                            
00001072 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001078 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000107C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001082 7000                       		moveq	#0,d0
00001084 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000108E 3E3C 003F                  		move.w	#$3F,d7
00001092                            
00001092                            VDP_ClrCRAM:
00001092 3280                       		move.w	d0,(a1)
00001094 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001098                            
00001098 42B8 F616                  		clr.l	($FFFFF616).w
0000109C 42B8 F61A                  		clr.l	($FFFFF61A).w
000010A0 2F01                       		move.l	d1,-(sp)
000010A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000010A8 3ABC 8F01                  		move.w	#$8F01,(a5)
000010AC 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000010B2 3ABC 9780                  		move.w	#$9780,(a5)
000010B6 2ABC 4000 0080             		move.l	#$40000080,(a5)
000010BC 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000010C4                            
000010C4                            loc_128E:
000010C4 3215                       		move.w	(a5),d1
000010C6 0801 0001                  		btst	#1,d1
000010CA 66F8                       		bne.s	loc_128E
000010CC                            
000010CC 3ABC 8F02                  		move.w	#$8F02,(a5)
000010D0 221F                       		move.l	(sp)+,d1
000010D2 4E75                       		rts	
000010D4                            ; End of function VDPSetupGame
000010D4                            
000010D4                            ; ===========================================================================
000010D4 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000010DC 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000010E4 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000010EC 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000010F4 9001 9100 9200             		dc.w $9001, $9100, $9200
000010FA                            
000010FA                            ; ---------------------------------------------------------------------------
000010FA                            ; Subroutine to	clear the screen
000010FA                            ; ---------------------------------------------------------------------------
000010FA                            
000010FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010FA                            
000010FA                            
000010FA                            ClearScreen:
000010FA 4BF9 00C0 0004             		lea	($C00004).l,a5
00001100 3ABC 8F01                  		move.w	#$8F01,(a5)
00001104 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
0000110A 3ABC 9780                  		move.w	#$9780,(a5)
0000110E 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001114 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000111C                            
0000111C                            loc_12E6:
0000111C 3215                       		move.w	(a5),d1
0000111E 0801 0001                  		btst	#1,d1
00001122 66F8                       		bne.s	loc_12E6
00001124                            
00001124 3ABC 8F02                  		move.w	#$8F02,(a5)
00001128 4BF9 00C0 0004             		lea	($C00004).l,a5
0000112E 3ABC 8F01                  		move.w	#$8F01,(a5)
00001132 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001138 3ABC 9780                  		move.w	#$9780,(a5)
0000113C 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001142 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000114A                            
0000114A                            loc_1314:
0000114A 3215                       		move.w	(a5),d1
0000114C 0801 0001                  		btst	#1,d1
00001150 66F8                       		bne.s	loc_1314
00001152                            
00001152 3ABC 8F02                  		move.w	#$8F02,(a5)
00001156 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000115E 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001166 43F8 F838                  		lea	($FFFFF838).w,a1
0000116A 7000                       		moveq	#0,d0
0000116C 323C 0092                  		move.w	#$92,d1
00001170                            
00001170                            loc_133A:
00001170 22C0                       		move.l	d0,(a1)+
00001172 51C9 FFFC                  		dbf	d1,loc_133A
00001176                            
00001176 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000117A 7000                       		moveq	#0,d0
0000117C 323C 0100                  		move.w	#$100,d1
00001180                            
00001180                            loc_134A:
00001180 22C0                       		move.l	d0,(a1)+
00001182 51C9 FFFC                  		dbf	d1,loc_134A
00001186 4E75                       		rts	
00001188                            ; End of function ClearScreen
00001188                            
00001188                            ; ---------------------------------------------------------------------------
00001188                            ; Subroutine to	load the sound driver
00001188                            ; ---------------------------------------------------------------------------
00001188                            
00001188                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001188                            
00001188                            
00001188                            SoundDriverLoad:
00001188 41F9 0000 0000             		lea	(Z80ROM).l,a0				; load Z80 ROM data
0000118E 43F9 00A0 0000             		lea	($A00000).l,a1				; load Z80 RAM space address
00001194 323C 0000                  		move.w	#(Z80ROM_End-Z80ROM)-$01,d1		; set repeat times
00001198 33FC 0100 00A1 1100        		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
000011A0 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
000011A8 0839 0000 00A1 1100        		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
000011B0 66F6                       		bne.s	*-$08					; if not, branch
000011B2                            
000011B2                            SM_LoadZ80:
000011B2 12D8                       		move.b	(a0)+,(a1)+				; dump Z80 data to Z80 space
000011B4 51C9 FFFC                  		dbf	d1,SM_LoadZ80				; repeat til done
000011B8 41F9 0000 0000             		lea	(StopSample).l,a0			; load stop/mute sample address
000011BE 43F9 00A0 0C62             		lea	($A00000+MuteSample).l,a1		; load Z80 RAM space where the pointer is to be stored
000011C4 12D8                       		move.b	(a0)+,(a1)+				; copy pointer over into Z80
000011C6 12D8                       		move.b	(a0)+,(a1)+				; ''
000011C8 12D8                       		move.b	(a0)+,(a1)+				; ''
000011CA 12D8                       		move.b	(a0)+,(a1)+				; CHG: copy "reverse" pointer over into Z80
000011CC 12D8                       		move.b	(a0)+,(a1)+				; ''
000011CE 12D8                       		move.b	(a0)+,(a1)+				; ''
000011D0 43F9 00A0 1A38             		lea	($A00000+SV_VolumeBank).l,a1		; load volume bank address write routine
000011D6 12FC 0000                  		move.b 	#$74|((PCM_Volumes>>$0F)&1),(a1)+	; write "ld  (hl),?" instructions
000011DA 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$10)&1),(a1)+	; ''
000011DE 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$11)&1),(a1)+	; ''
000011E2 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$12)&1),(a1)+	; ''
000011E6 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$13)&1),(a1)+	; ''
000011EA 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$14)&1),(a1)+	; ''
000011EE 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$15)&1),(a1)+	; ''
000011F2 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$16)&1),(a1)+	; ''
000011F6 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$17)&1),(a1)+	; ''
000011FA 33FC 0000 00A1 1200        		move.w	#$0000,($A11200).l			; request Z80 reset (ON)
00001202 727F                       		moveq	#$7F,d1					; set repeat times
00001204 51C9 FFFE                  		dbf	d1,*					; there's no way of checking for reset, so a manual delay is necessary
00001208 33FC 0000 00A1 1100        		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
00001210 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
00001218 4E75                       		rts						; return
0000121A                            ; End of function SoundDriverLoad
0000121A                            
0000121A                            ; ---------------------------------------------------------------------------
0000121A                            ; Subroutine to	play a sound or	music track
0000121A                            ; ---------------------------------------------------------------------------
0000121A                            
0000121A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000121A                            
0000121A                            
0000121A                            PlaySound:
0000121A 11C0 F00A                  		move.b	d0,($FFFFF00A).w
0000121E 4E75                       		rts	
00001220                            ; End of function PlaySound
00001220                            
00001220                            ; ---------------------------------------------------------------------------
00001220                            ; Subroutine to	play a special sound/music (E0-E4)
00001220                            ;
00001220                            ; E0 - Fade out
00001220                            ; E1 - Sega
00001220                            ; E2 - Speed up
00001220                            ; E3 - Normal speed
00001220                            ; E4 - Stop
00001220                            ; ---------------------------------------------------------------------------
00001220                            
00001220                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001220                            
00001220                            
00001220                            PlaySound_Special:
00001220 11C0 F00B                  		move.b	d0,($FFFFF00B).w
00001224 4E75                       		rts	
00001226                            ; End of function PlaySound_Special
00001226                            
00001226                            ; ===========================================================================
00001226                            ; ---------------------------------------------------------------------------
00001226                            ; Unused sound/music subroutine
00001226                            ; ---------------------------------------------------------------------------
00001226                            
00001226                            PlaySound_Unk:
00001226 11C0 F00C                  		move.b	d0,($FFFFF00C).w
0000122A 4E75                       		rts	
0000122C                            
0000122C                            ; ---------------------------------------------------------------------------
0000122C                            ; Subroutine to	pause the game
0000122C                            ; ---------------------------------------------------------------------------
0000122C                            
0000122C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000122C                            
0000122C                            
0000122C                            PauseGame:				; XREF: Level_MainLoop; et al
0000122C 4E71                       		nop	
0000122E 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
00001232 6700 0000                  		beq.w	Unpause		; if not, branch
00001236 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
0000123A 6600                       		bne.s	loc_13BE	; if yes, branch
0000123C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001242 6700 0000                  		beq.w	Pause_DoNothing	; if not, branch
00001246                            
00001246                            loc_13BE:
00001246 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
0000124C 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001252                            
00001252                            loc_13CA:
00001252 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
00001258 6100 0000                  		bsr.w	DelayProgram
0000125C 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
00001260 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001262 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001268 6700                       		beq.s	Pause_ChkBC	; if not, branch
0000126A 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001270 4E71                       		nop	
00001272 6000                       		bra.s	loc_1404
00001274                            ; ===========================================================================
00001274                            
00001274                            Pause_ChkBC:				; XREF: PauseGame
00001274 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
0000127A 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000127C 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001282 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001284                            
00001284                            Pause_ChkStart:				; XREF: PauseGame
00001284 4A78 F5E0                  		tst.w	(SonimeSST+sonime_pausetimer).w
00001288 6600                       		bne.s	@waitlonger
0000128A 11FC 0001 F5CE             		move.b	#face_blink,(SonimeSST+sonime_face).w
00001290 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00001296 6000                       		bra.s	@cont
00001298                            
00001298                            	@waitlonger:
00001298 5378 F5E0                  		subi.w	#1,(SonimeSST+sonime_pausetimer).w
0000129C                            
0000129C                            	@cont:
0000129C 41F8 D000                  		lea	($FFFFD000).w,a0 ; a0=object
000012A0 7000                       		moveq	#0,d0
000012A2 7E7F                       		moveq	#$7F,d7 ; run the first $80 objects out of levels
000012A4 4EB9 0000 0000             		jsr		loc_D368
000012AA 4EB9 0000 0000             		jsr		BuildSprites
000012B0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000012B6 6600                       		bne.s	@notss
000012B8 4EB9 0000 0000             		jsr	SS_ShowLayout
000012BE                            
000012BE                            	@notss:
000012BE 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000012C4 678C                       		beq.s	loc_13CA	; if not, branch
000012C6 31FC 0200 F5E0             		move.w	#$200,(SonimeSST+sonime_pausetimer).w
000012CC                            
000012CC                            loc_1404:				; XREF: PauseGame
000012CC 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000012D2                            
000012D2                            Unpause:				; XREF: PauseGame
000012D2 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
000012D8                            
000012D8                            Pause_DoNothing:			; XREF: PauseGame
000012D8 4E75                       		rts	
000012DA                            ; ===========================================================================
000012DA                            
000012DA                            Pause_SlowMo:				; XREF: PauseGame
000012DA 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
000012E0 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000012E6 4E75                       		rts	
000012E8                            ; End of function PauseGame
000012E8                            
000012E8                            ; ---------------------------------------------------------------------------
000012E8                            ; Subroutine to	display	patterns via the VDP
000012E8                            ; ---------------------------------------------------------------------------
000012E8                            
000012E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012E8                            
000012E8                            
000012E8                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
000012E8 4DF9 00C0 0000             		lea	($C00000).l,a6
000012EE 283C 0080 0000             		move.l	#$800000,d4
000012F4                            
000012F4                            loc_142C:
000012F4 2D40 0004                  		move.l	d0,4(a6)
000012F8 3601                       		move.w	d1,d3
000012FA                            
000012FA                            loc_1432:
000012FA 3C99                       		move.w	(a1)+,(a6)
000012FC 51CB FFFC                  		dbf	d3,loc_1432
00001300 D084                       		add.l	d4,d0
00001302 51CA FFF0                  		dbf	d2,loc_142C
00001306 4E75                       		rts	
00001308                            ; End of function ShowVDPGraphics
00001308                            
00001308                            ; ==============================================================================
00001308                            ; ------------------------------------------------------------------------------
00001308                            ; Nemesis decompression routine
00001308                            ; ------------------------------------------------------------------------------
00001308                            ; Optimized by vladikcomper
00001308                            ; ------------------------------------------------------------------------------
00001308                             
00001308                            NemDec_RAM:
00001308 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
0000130C 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
00001310 6000                           bra.s   NemDec_Main
00001312                             
00001312                            ; ------------------------------------------------------------------------------
00001312                            NemDec:
00001312 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001316 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
0000131C 47FA 0000                      lea NemDec_WriteRowToVDP(pc),a3
00001320                             
00001320                            NemDec_Main:
00001320 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
00001324 3418                           move.w  (a0)+,d2        ; get number of patterns
00001326 6A00                           bpl.s   @0          ; are we in Mode 0?
00001328 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
0000132C E74A                       @0  lsl.w   #3,d2
0000132E 3A42                           movea.w d2,a5
00001330 7607                           moveq   #7,d3
00001332 7400                           moveq   #0,d2
00001334 7800                           moveq   #0,d4
00001336 6100 0000                      bsr.w   NemDec4
0000133A 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
0000133C E145                           asl.w   #8,d5           ; shift up by a byte
0000133E 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
00001340 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
00001344 6100                           bsr.s   NemDec2
00001346 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
0000134A 4E75                           rts
0000134C                             
0000134C                            ; ---------------------------------------------------------------------------
0000134C                            ; Part of the Nemesis decompressor, processes the actual compressed data
0000134C                            ; ---------------------------------------------------------------------------
0000134C                             
0000134C                            NemDec2:
0000134C 3E06                           move.w  d6,d7
0000134E 5147                           subq.w  #8,d7           ; get shift value
00001350 3205                           move.w  d5,d1
00001352 EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
00001354 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
00001358 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
0000135A 0241 00FF                      andi.w  #$FF,d1
0000135E D241                           add.w   d1,d1
00001360 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
00001364 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
00001368 6400                           bcc.s   @0          ; if not, branch
0000136A 5046                           addq.w  #8,d6
0000136C E145                           asl.w   #8,d5
0000136E 1A18                           move.b  (a0)+,d5        ; read next byte
00001370 1231 1001                  @0  move.b  1(a1,d1.w),d1
00001374 3001                           move.w  d1,d0
00001376 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
0000137A 0240 00F0                      andi.w  #$F0,d0
0000137E                             
0000137E                            NemDec_GetRepeatCount:
0000137E E848                           lsr.w   #4,d0           ; get repeat count
00001380                             
00001380                            NemDec_WritePixel:
00001380 E98C                           lsl.l   #4,d4           ; shift up by a nybble
00001382 8801                           or.b    d1,d4           ; write pixel
00001384 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
00001388 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
0000138A                            ; ---------------------------------------------------------------------------
0000138A                             
0000138A                            NemDec3:
0000138A 7800                           moveq   #0,d4           ; reset row
0000138C 7607                           moveq   #7,d3           ; reset nybble counter
0000138E                             
0000138E                            NemDec_WritePixelLoop:
0000138E 51C8 FFF0                      dbf d0,NemDec_WritePixel
00001392 60B8                           bra.s   NemDec2
00001394                            ; ---------------------------------------------------------------------------
00001394                             
00001394                            NemDec_InlineData:
00001394 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
00001396 0C46 0009                      cmpi.w  #9,d6
0000139A 6400                           bcc.s   @0
0000139C 5046                           addq.w  #8,d6
0000139E E145                           asl.w   #8,d5
000013A0 1A18                           move.b  (a0)+,d5
000013A2 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
000013A4 3205                           move.w  d5,d1
000013A6 EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
000013A8 3001                           move.w  d1,d0
000013AA 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000013AE 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
000013B2 0C46 0009                      cmpi.w  #9,d6
000013B6 64C6                           bcc.s   NemDec_GetRepeatCount
000013B8 5046                           addq.w  #8,d6
000013BA E145                           asl.w   #8,d5
000013BC 1A18                           move.b  (a0)+,d5
000013BE 60BE                           bra.s   NemDec_GetRepeatCount
000013C0                             
000013C0                            ; ---------------------------------------------------------------------------
000013C0                            ; Subroutines to output decompressed entry
000013C0                            ; Selected depending on current decompression mode
000013C0                            ; ---------------------------------------------------------------------------
000013C0                             
000013C0                            NemDec_WriteRowToVDP:
000013C0                            loc_1502:
000013C0 2884                           move.l  d4,(a4)         ; write 8-pixel row
000013C2 534D                           subq.w  #1,a5
000013C4 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013C6 66C2                           bne.s   NemDec3         ; if not, branch
000013C8 4E75                           rts
000013CA                            ; ---------------------------------------------------------------------------
000013CA                             
000013CA                            NemDec_WriteRowToVDP_XOR:
000013CA B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013CC 2882                           move.l  d2,(a4)         ; and write the result
000013CE 534D                           subq.w  #1,a5
000013D0 380D                           move.w  a5,d4
000013D2 66B6                           bne.s   NemDec3
000013D4 4E75                           rts
000013D6                            ; ---------------------------------------------------------------------------
000013D6                             
000013D6                            NemDec_WriteRowToRAM:
000013D6 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
000013D8 534D                           subq.w  #1,a5
000013DA 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013DC 66AC                           bne.s   NemDec3         ; if not, branch
000013DE 4E75                           rts
000013E0                            ; ---------------------------------------------------------------------------
000013E0                             
000013E0                            NemDec_WriteRowToRAM_XOR:
000013E0 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013E2 28C2                           move.l  d2,(a4)+        ; and write the result
000013E4 534D                           subq.w  #1,a5
000013E6 380D                           move.w  a5,d4
000013E8 66A0                           bne.s   NemDec3
000013EA 4E75                           rts
000013EC                             
000013EC                            ; ---------------------------------------------------------------------------
000013EC                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
000013EC                            ; ---------------------------------------------------------------------------
000013EC                             
000013EC                            NemDec4:
000013EC 1018                           move.b  (a0)+,d0        ; read first byte
000013EE                             
000013EE                            @ChkEnd:
000013EE 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
000013F2 6600                           bne.s   @NewPalIndex        ; if not, branch
000013F4 4E75                           rts
000013F6                            ; ---------------------------------------------------------------------------
000013F6                             
000013F6                            @NewPalIndex:
000013F6 3E00                           move.w  d0,d7
000013F8                             
000013F8                            @ItemLoop:
000013F8 1018                           move.b  (a0)+,d0        ; read next byte
000013FA 6BF2                           bmi.s   @ChkEnd         ; ~~
000013FC 1200                           move.b  d0,d1
000013FE 0247 000F                      andi.w  #$F,d7          ; get palette index
00001402 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
00001406 8E41                           or.w    d1,d7           ; combine the two
00001408 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
0000140C 1200                           move.b  d0,d1
0000140E E149                           lsl.w   #8,d1
00001410 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
00001412 7208                           moveq   #8,d1
00001414 9240                           sub.w   d0,d1           ; is the code 8 bits long?
00001416 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
00001418 1018                           move.b  (a0)+,d0        ; get code
0000141A D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
0000141C 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
00001420 60D6                           bra.s   @ItemLoop       ; repeat
00001422                            ; ---------------------------------------------------------------------------
00001422                             
00001422                            @ItemShortCode:
00001422 1018                           move.b  (a0)+,d0        ; get code
00001424 E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
00001426 D040                           add.w   d0,d0           ; get index into code table
00001428 7A01                           moveq   #1,d5
0000142A E36D                           lsl.w   d1,d5
0000142C 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
0000142E 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
00001432                             
00001432                            @ItemShortCodeLoop:
00001432 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
00001434 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001438 60BE                           bra.s   @ItemLoop
0000143A                            
0000143A                            ; ===============================================================
0000143A                            ; ---------------------------------------------------------------
0000143A                            ; uncompressed art to VRAM loader
0000143A                            ; ---------------------------------------------------------------
0000143A                            ; INPUT:
0000143A                            ;       a0      - Source Offset
0000143A                            ;   d0  - length in tiles
0000143A                            ; ---------------------------------------------------------------
0000143A                            LoadUncArt:
0000143A 46FC 2700                          move    #$2700,sr   ; disable interrupts
0000143E 4DF9 00C0 0000                     lea $C00000.l,a6    ; get VDP data port
00001444                             
00001444                            LoadArt_Loop:
00001444 2C98                               move.l  (a0)+,(a6)  ; transfer 4 bytes
00001446 2C98                               move.l  (a0)+,(a6)  ; transfer 4 more bytes
00001448 2C98                               move.l  (a0)+,(a6)  ; and so on and so forth
0000144A 2C98                               move.l  (a0)+,(a6)  ;
0000144C 2C98                               move.l  (a0)+,(a6)  ;
0000144E 2C98                               move.l  (a0)+,(a6)  ;
00001450 2C98                               move.l  (a0)+,(a6)  ; in total transfer 32 bytes
00001452 2C98                               move.l  (a0)+,(a6)  ; which is 1 full tile
00001454                             
00001454 51C8 FFEE                          dbf d0, LoadArt_Loop; loop until d0 = 0
00001458 46FC 2300                          move    #$2300,sr   ; enable interrupts
0000145C 4E75                               rts	
0000145E                            
0000145E                            ; ---------------------------------------------------------------------------
0000145E                            ; Subroutine to	load pattern load cues
0000145E                            ; ---------------------------------------------------------------------------
0000145E                            
0000145E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000145E                            
0000145E                            
0000145E                            LoadPLC:
0000145E 48E7 0060                  		movem.l	a1-a2,-(sp)
00001462 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001468 D040                       		add.w	d0,d0
0000146A 3031 0000                  		move.w	(a1,d0.w),d0
0000146E 43F1 0000                  		lea	(a1,d0.w),a1
00001472 45F8 F680                  		lea	($FFFFF680).w,a2
00001476                            
00001476                            loc_1598:
00001476 4A92                       		tst.l	(a2)
00001478 6700                       		beq.s	loc_15A0
0000147A 5C4A                       		addq.w	#6,a2
0000147C 60F8                       		bra.s	loc_1598
0000147E                            ; ===========================================================================
0000147E                            
0000147E                            loc_15A0:				; XREF: LoadPLC
0000147E 3019                       		move.w	(a1)+,d0
00001480 6B00                       		bmi.s	loc_15AC
00001482                            
00001482                            loc_15A4:
00001482 24D9                       		move.l	(a1)+,(a2)+
00001484 34D9                       		move.w	(a1)+,(a2)+
00001486 51C8 FFFA                  		dbf	d0,loc_15A4
0000148A                            
0000148A                            loc_15AC:
0000148A 4CDF 0600                  		movem.l	(sp)+,a1-a2
0000148E 4E75                       		rts	
00001490                            ; End of function LoadPLC
00001490                            
00001490                            
00001490                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001490                            
00001490                            
00001490                            LoadPLC2:
00001490 48E7 0060                  		movem.l	a1-a2,-(sp)
00001494 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000149A D040                       		add.w	d0,d0
0000149C 3031 0000                  		move.w	(a1,d0.w),d0
000014A0 43F1 0000                  		lea	(a1,d0.w),a1
000014A4 6100                       		bsr.s	ClearPLC
000014A6 45F8 F680                  		lea	($FFFFF680).w,a2
000014AA 3019                       		move.w	(a1)+,d0
000014AC 6B00                       		bmi.s	loc_15D8
000014AE                            
000014AE                            loc_15D0:
000014AE 24D9                       		move.l	(a1)+,(a2)+
000014B0 34D9                       		move.w	(a1)+,(a2)+
000014B2 51C8 FFFA                  		dbf	d0,loc_15D0
000014B6                            
000014B6                            loc_15D8:
000014B6 4CDF 0600                  		movem.l	(sp)+,a1-a2
000014BA 4E75                       		rts	
000014BC                            ; End of function LoadPLC2
000014BC                            
000014BC                            ; ---------------------------------------------------------------------------
000014BC                            ; Subroutine to	clear the pattern load cues
000014BC                            ; ---------------------------------------------------------------------------
000014BC                            
000014BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014BC                            
000014BC                            
000014BC                            ClearPLC:				; XREF: LoadPLC2
000014BC 45F8 F680                  		lea	($FFFFF680).w,a2
000014C0 701F                       		moveq	#$1F,d0
000014C2                            
000014C2                            ClearPLC_Loop:
000014C2 429A                       		clr.l	(a2)+
000014C4 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
000014C8 4E75                       		rts	
000014CA                            ; End of function ClearPLC
000014CA                            
000014CA                            ; ---------------------------------------------------------------------------
000014CA                            ; Subroutine to	use graphics listed in a pattern load cue
000014CA                            ; ---------------------------------------------------------------------------
000014CA                            
000014CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014CA                            
000014CA                            
000014CA                            RunPLC_RAM:				; XREF: Pal_FadeTo
000014CA 4AB8 F680                  		tst.l	($FFFFF680).w
000014CE 6700                       		beq.s	locret_1640
000014D0 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000014D4 6600                       		bne.s	locret_1640
000014D6 2078 F680                  		movea.l	($FFFFF680).w,a0
000014DA 47F9 0000 13C0             		lea	(loc_1502).l,a3
000014E0 43F8 AA00                  		lea	($FFFFAA00).w,a1
000014E4 3418                       		move.w	(a0)+,d2
000014E6 6A00                       		bpl.s	loc_160E
000014E8 D6FC 000A                  		adda.w	#$A,a3
000014EC                            
000014EC                            loc_160E:
000014EC 0242 7FFF                  		andi.w	#$7FFF,d2
000014F0 6100 FEFA                  		bsr.w	NemDec4
000014F4 1A18                       		move.b	(a0)+,d5
000014F6 E145                       		asl.w	#8,d5
000014F8 1A18                       		move.b	(a0)+,d5
000014FA 7C10                       		moveq	#$10,d6
000014FC 7000                       		moveq	#0,d0
000014FE 21C8 F680                  		move.l	a0,($FFFFF680).w
00001502 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001506 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000150A 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000150E 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001512 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001516 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000151A 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
0000151E                            		
0000151E                            locret_1640:
0000151E 4E75                       		rts	
00001520                            ; End of function RunPLC_RAM
00001520                            
00001520                            
00001520                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001520                            
00001520                            
00001520                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001520 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001524 6700 0000                  		beq.w	locret_16DA
00001528 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
0000152E 7000                       		moveq	#0,d0
00001530 3038 F684                  		move.w	($FFFFF684).w,d0
00001534 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000153A 6000                       		bra.s	loc_1676
0000153C                            ; End of function sub_1642
0000153C                            
0000153C                            
0000153C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000153C                            
0000153C                            
0000153C                            sub_165E:				; XREF: Demo_Time
0000153C 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001540 6700                       		beq.s	locret_16DA
00001542 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001548 7000                       		moveq	#0,d0
0000154A 3038 F684                  		move.w	($FFFFF684).w,d0
0000154E 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001554                            
00001554                            loc_1676:				; XREF: sub_1642
00001554 49F9 00C0 0004             		lea	($C00004).l,a4
0000155A E588                       		lsl.l	#2,d0
0000155C E448                       		lsr.w	#2,d0
0000155E 0040 4000                  		ori.w	#$4000,d0
00001562 4840                       		swap	d0
00001564 2880                       		move.l	d0,(a4)
00001566 594C                       		subq.w	#4,a4
00001568 2078 F680                  		movea.l	($FFFFF680).w,a0
0000156C 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001570 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001574 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001578 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
0000157C 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001580 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001584 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001588                            
00001588                            loc_16AA:				; XREF: sub_165E
00001588 3A7C 0008                  		movea.w	#8,a5
0000158C 6100 FDFC                  		bsr.w	NemDec3
00001590 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
00001594 6700                       		beq.s	loc_16DC
00001596 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
0000159A 66EC                       		bne.s	loc_16AA
0000159C 21C8 F680                  		move.l	a0,($FFFFF680).w
000015A0 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000015A4 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000015A8 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000015AC 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000015B0 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000015B4 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000015B8                            
000015B8                            locret_16DA:				; XREF: sub_1642
000015B8 4E75                       		rts	
000015BA                            ; ===========================================================================
000015BA                            
000015BA                            loc_16DC:				; XREF: sub_165E
000015BA 41F8 F680                  		lea	($FFFFF680).w,a0
000015BE 7015                       		moveq	#$15,d0
000015C0                            
000015C0                            loc_16E2:				; XREF: sub_165E
000015C0 20E8 0006                  		move.l	6(a0),(a0)+
000015C4 51C8 FFFA                  		dbf	d0,loc_16E2
000015C8 4E75                       		rts	
000015CA                            ; End of function sub_165E
000015CA                            
000015CA                            ; ---------------------------------------------------------------------------
000015CA                            ; Subroutine to	execute	the pattern load cue
000015CA                            ; ---------------------------------------------------------------------------
000015CA                            
000015CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015CA                            
000015CA                            
000015CA                            RunPLC_ROM:
000015CA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000015D0 D040                       		add.w	d0,d0
000015D2 3031 0000                  		move.w	(a1,d0.w),d0
000015D6 43F1 0000                  		lea	(a1,d0.w),a1
000015DA 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
000015DC                            
000015DC                            RunPLC_Loop:
000015DC 2059                       		movea.l	(a1)+,a0	; get art pointer
000015DE 7000                       		moveq	#0,d0
000015E0 3019                       		move.w	(a1)+,d0	; get VRAM address
000015E2 E588                       		lsl.l	#2,d0		; divide address by $20
000015E4 E448                       		lsr.w	#2,d0
000015E6 0040 4000                  		ori.w	#$4000,d0
000015EA 4840                       		swap	d0
000015EC 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
000015F2 6100 FD1E                  		bsr.w	NemDec		; decompress
000015F6 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
000015FA 4E75                       		rts	
000015FC                            ; End of function RunPLC_ROM
000015FC                            
000015FC                            ; ---------------------------------------------------------------------------
000015FC                            ; Enigma decompression algorithm
000015FC                            ; ---------------------------------------------------------------------------
000015FC                            
000015FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015FC                            
000015FC                            
000015FC                            EniDec:
000015FC 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001600 3640                       		movea.w	d0,a3
00001602 1018                       		move.b	(a0)+,d0
00001604 4880                       		ext.w	d0
00001606 3A40                       		movea.w	d0,a5
00001608 1818                       		move.b	(a0)+,d4
0000160A E70C                       		lsl.b	#3,d4
0000160C 3458                       		movea.w	(a0)+,a2
0000160E D4CB                       		adda.w	a3,a2
00001610 3858                       		movea.w	(a0)+,a4
00001612 D8CB                       		adda.w	a3,a4
00001614 1A18                       		move.b	(a0)+,d5
00001616 E145                       		asl.w	#8,d5
00001618 1A18                       		move.b	(a0)+,d5
0000161A 7C10                       		moveq	#$10,d6
0000161C                            
0000161C                            loc_173E:				; XREF: loc_1768
0000161C 7007                       		moveq	#7,d0
0000161E 3E06                       		move.w	d6,d7
00001620 9E40                       		sub.w	d0,d7
00001622 3205                       		move.w	d5,d1
00001624 EE69                       		lsr.w	d7,d1
00001626 0241 007F                  		andi.w	#$7F,d1
0000162A 3401                       		move.w	d1,d2
0000162C 0C41 0040                  		cmpi.w	#$40,d1
00001630 6400                       		bcc.s	loc_1758
00001632 7006                       		moveq	#6,d0
00001634 E24A                       		lsr.w	#1,d2
00001636                            
00001636                            loc_1758:
00001636 6100 0000                  		bsr.w	sub_188C
0000163A 0242 000F                  		andi.w	#$F,d2
0000163E E849                       		lsr.w	#4,d1
00001640 D241                       		add.w	d1,d1
00001642 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001646                            ; End of function EniDec
00001646                            
00001646                            ; ===========================================================================
00001646                            
00001646                            loc_1768:				; XREF: loc_17B4
00001646 32CA                       		move.w	a2,(a1)+
00001648 524A                       		addq.w	#1,a2
0000164A 51CA FFFA                  		dbf	d2,loc_1768
0000164E 60CC                       		bra.s	loc_173E
00001650                            ; ===========================================================================
00001650                            
00001650                            loc_1772:				; XREF: loc_17B4
00001650 32CC                       		move.w	a4,(a1)+
00001652 51CA FFFC                  		dbf	d2,loc_1772
00001656 60C4                       		bra.s	loc_173E
00001658                            ; ===========================================================================
00001658                            
00001658                            loc_177A:				; XREF: loc_17B4
00001658 6100 0000                  		bsr.w	loc_17DC
0000165C                            
0000165C                            loc_177E:
0000165C 32C1                       		move.w	d1,(a1)+
0000165E 51CA FFFC                  		dbf	d2,loc_177E
00001662 60B8                       		bra.s	loc_173E
00001664                            ; ===========================================================================
00001664                            
00001664                            loc_1786:				; XREF: loc_17B4
00001664 6100 0000                  		bsr.w	loc_17DC
00001668                            
00001668                            loc_178A:
00001668 32C1                       		move.w	d1,(a1)+
0000166A 5241                       		addq.w	#1,d1
0000166C 51CA FFFA                  		dbf	d2,loc_178A
00001670 60AA                       		bra.s	loc_173E
00001672                            ; ===========================================================================
00001672                            
00001672                            loc_1794:				; XREF: loc_17B4
00001672 6100 0000                  		bsr.w	loc_17DC
00001676                            
00001676                            loc_1798:
00001676 32C1                       		move.w	d1,(a1)+
00001678 5341                       		subq.w	#1,d1
0000167A 51CA FFFA                  		dbf	d2,loc_1798
0000167E 609C                       		bra.s	loc_173E
00001680                            ; ===========================================================================
00001680                            
00001680                            loc_17A2:				; XREF: loc_17B4
00001680 0C42 000F                  		cmpi.w	#$F,d2
00001684 6700                       		beq.s	loc_17C4
00001686                            
00001686                            loc_17A8:
00001686 6100 0000                  		bsr.w	loc_17DC
0000168A 32C1                       		move.w	d1,(a1)+
0000168C 51CA FFF8                  		dbf	d2,loc_17A8
00001690 608A                       		bra.s	loc_173E
00001692                            ; ===========================================================================
00001692                            
00001692                            loc_17B4:				; XREF: EniDec
00001692 60B2                       		bra.s	loc_1768
00001694                            ; ===========================================================================
00001694 60B0                       		bra.s	loc_1768
00001696                            ; ===========================================================================
00001696 60B8                       		bra.s	loc_1772
00001698                            ; ===========================================================================
00001698 60B6                       		bra.s	loc_1772
0000169A                            ; ===========================================================================
0000169A 60BC                       		bra.s	loc_177A
0000169C                            ; ===========================================================================
0000169C 60C6                       		bra.s	loc_1786
0000169E                            ; ===========================================================================
0000169E 60D2                       		bra.s	loc_1794
000016A0                            ; ===========================================================================
000016A0 60DE                       		bra.s	loc_17A2
000016A2                            ; ===========================================================================
000016A2                            
000016A2                            loc_17C4:				; XREF: loc_17A2
000016A2 5348                       		subq.w	#1,a0
000016A4 0C46 0010                  		cmpi.w	#$10,d6
000016A8 6600                       		bne.s	loc_17CE
000016AA 5348                       		subq.w	#1,a0
000016AC                            
000016AC                            loc_17CE:
000016AC 3008                       		move.w	a0,d0
000016AE E248                       		lsr.w	#1,d0
000016B0 6400                       		bcc.s	loc_17D6
000016B2 5248                       		addq.w	#1,a0
000016B4                            
000016B4                            loc_17D6:
000016B4 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000016B8 4E75                       		rts	
000016BA                            ; ===========================================================================
000016BA                            
000016BA                            loc_17DC:				; XREF: loc_17A2
000016BA 360B                       		move.w	a3,d3
000016BC 1204                       		move.b	d4,d1
000016BE D201                       		add.b	d1,d1
000016C0 6400                       		bcc.s	loc_17EE
000016C2 5346                       		subq.w	#1,d6
000016C4 0D05                       		btst	d6,d5
000016C6 6700                       		beq.s	loc_17EE
000016C8 0043 8000                  		ori.w	#-$8000,d3
000016CC                            
000016CC                            loc_17EE:
000016CC D201                       		add.b	d1,d1
000016CE 6400                       		bcc.s	loc_17FC
000016D0 5346                       		subq.w	#1,d6
000016D2 0D05                       		btst	d6,d5
000016D4 6700                       		beq.s	loc_17FC
000016D6 0643 4000                  		addi.w	#$4000,d3
000016DA                            
000016DA                            loc_17FC:
000016DA D201                       		add.b	d1,d1
000016DC 6400                       		bcc.s	loc_180A
000016DE 5346                       		subq.w	#1,d6
000016E0 0D05                       		btst	d6,d5
000016E2 6700                       		beq.s	loc_180A
000016E4 0643 2000                  		addi.w	#$2000,d3
000016E8                            
000016E8                            loc_180A:
000016E8 D201                       		add.b	d1,d1
000016EA 6400                       		bcc.s	loc_1818
000016EC 5346                       		subq.w	#1,d6
000016EE 0D05                       		btst	d6,d5
000016F0 6700                       		beq.s	loc_1818
000016F2 0043 1000                  		ori.w	#$1000,d3
000016F6                            
000016F6                            loc_1818:
000016F6 D201                       		add.b	d1,d1
000016F8 6400                       		bcc.s	loc_1826
000016FA 5346                       		subq.w	#1,d6
000016FC 0D05                       		btst	d6,d5
000016FE 6700                       		beq.s	loc_1826
00001700 0043 0800                  		ori.w	#$800,d3
00001704                            
00001704                            loc_1826:
00001704 3205                       		move.w	d5,d1
00001706 3E06                       		move.w	d6,d7
00001708 9E4D                       		sub.w	a5,d7
0000170A 6400                       		bcc.s	loc_1856
0000170C 3C07                       		move.w	d7,d6
0000170E 0646 0010                  		addi.w	#$10,d6
00001712 4447                       		neg.w	d7
00001714 EF69                       		lsl.w	d7,d1
00001716 1A10                       		move.b	(a0),d5
00001718 EF3D                       		rol.b	d7,d5
0000171A DE47                       		add.w	d7,d7
0000171C CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001720 D245                       		add.w	d5,d1
00001722                            
00001722                            loc_1844:				; XREF: loc_1868
00001722 300D                       		move.w	a5,d0
00001724 D040                       		add.w	d0,d0
00001726 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
0000172A D243                       		add.w	d3,d1
0000172C 1A18                       		move.b	(a0)+,d5
0000172E E14D                       		lsl.w	#8,d5
00001730 1A18                       		move.b	(a0)+,d5
00001732 4E75                       		rts	
00001734                            ; ===========================================================================
00001734                            
00001734                            loc_1856:				; XREF: loc_1826
00001734 6700                       		beq.s	loc_1868
00001736 EE69                       		lsr.w	d7,d1
00001738 300D                       		move.w	a5,d0
0000173A D040                       		add.w	d0,d0
0000173C C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001740 D243                       		add.w	d3,d1
00001742 300D                       		move.w	a5,d0
00001744 6000                       		bra.s	sub_188C
00001746                            ; ===========================================================================
00001746                            
00001746                            loc_1868:				; XREF: loc_1856
00001746 7C10                       		moveq	#$10,d6
00001748                            
00001748                            loc_186A:
00001748 60D8                       		bra.s	loc_1844
0000174A                            ; ===========================================================================
0000174A 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001760 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
0000176A                            
0000176A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000176A                            
0000176A                            
0000176A                            sub_188C:				; XREF: EniDec
0000176A 9C40                       		sub.w	d0,d6
0000176C 0C46 0009                  		cmpi.w	#9,d6
00001770 6400                       		bcc.s	locret_189A
00001772 5046                       		addq.w	#8,d6
00001774 E145                       		asl.w	#8,d5
00001776 1A18                       		move.b	(a0)+,d5
00001778                            
00001778                            locret_189A:
00001778 4E75                       		rts	
0000177A                            ; End of function sub_188C
0000177A                            
0000177A                            ; ===========================================================================
0000177A                            ; ---------------------------------------------------------------------------
0000177A                            ; Kosinski decompression routine
0000177A                            ;
0000177A                            ; Created by vladikcomper
0000177A                            ; Special thanks to flamewing and MarkeyJester
0000177A                            ; ---------------------------------------------------------------------------
0000177A                             
0000177A                            _Kos_RunBitStream macro
0000177A                                dbf d2,@skip\@
0000177A                                moveq   #7,d2
0000177A                                move.b  d1,d0
0000177A                                swap    d3
0000177A                                bpl.s   @skip\@
0000177A                                move.b  (a0)+,d0            ; get desc. bitfield
0000177A                                move.b  (a0)+,d1            ;
0000177A                                move.b  (a4,d0.w),d0            ; reload converted desc. bitfield from a LUT
0000177A                                move.b  (a4,d1.w),d1            ;
0000177A                            @skip\@
0000177A                                endm
0000177A                            ; ---------------------------------------------------------------------------
0000177A                             
0000177A                            KosDec:
0000177A 7E07                           moveq   #7,d7
0000177C 7000                           moveq   #0,d0
0000177E 7200                           moveq   #0,d1
00001780 49FA 0000                      lea KosDec_ByteMap(pc),a4
00001784 1018                           move.b  (a0)+,d0            ; get desc field low-byte
00001786 1218                           move.b  (a0)+,d1            ; get desc field hi-byte
00001788 1034 0000                      move.b  (a4,d0.w),d0            ; reload converted desc. bitfield from a LUT
0000178C 1234 1000                      move.b  (a4,d1.w),d1            ;
00001790 7407                           moveq   #7,d2               ; set repeat count to 8
00001792 76FF                           moveq   #-1,d3              ; d3 will be desc field switcher
00001794 4243                           clr.w   d3              ;
00001796 6000                           bra.s   KosDec_FetchNewCode
00001798                             
00001798                            KosDec_FetchCodeLoop:
00001798                                ; code 1 (Uncompressed byte)
00001798 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017B0 12D8                           move.b  (a0)+,(a1)+
000017B2                             
000017B2                            KosDec_FetchNewCode:
000017B2 D000                           add.b   d0,d0               ; get a bit from the bitstream
000017B4 65E2                           bcs.s   KosDec_FetchCodeLoop        ; if code = 0, branch
000017B6                             
000017B6                                ; codes 00 and 01
000017B6 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017CE 7800                           moveq   #0,d4               ; d4 will contain copy count
000017D0 D000                           add.b   d0,d0               ; get a bit from the bitstream
000017D2 6500                           bcs.s   KosDec_Code_01
000017D4                             
000017D4                                ; code 00 (Dictionary ref. short)
000017D4 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017EC D000                           add.b   d0,d0               ; get a bit from the bitstream
000017EE D944                           addx.w  d4,d4
000017F0 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
00001808 D000                           add.b   d0,d0               ; get a bit from the bitstream
0000180A D944                           addx.w  d4,d4
0000180C 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
00001824 7AFF                           moveq   #-1,d5
00001826 1A18                           move.b  (a0)+,d5            ; d5 = displacement
00001828                             
00001828                            KosDec_StreamCopy:
00001828 47F1 5000                      lea (a1,d5),a3
0000182C 12DB                           move.b  (a3)+,(a1)+         ; do 1 extra copy (to compensate for +1 to copy counter)
0000182E                             
0000182E                            KosDec_copy:
0000182E 12DB                           move.b  (a3)+,(a1)+
00001830 51CC FFFC                      dbf d4,KosDec_copy
00001834 6000 FF7C                      bra.w   KosDec_FetchNewCode
00001838                            ; ---------------------------------------------------------------------------
00001838                            KosDec_Code_01:
00001838                                ; code 01 (Dictionary ref. long / special)
00001838 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
00001850 1C18                           move.b  (a0)+,d6            ; d6 = %LLLLLLLL
00001852 1818                           move.b  (a0)+,d4            ; d4 = %HHHHHCCC
00001854 7AFF                           moveq   #-1,d5
00001856 1A04                           move.b  d4,d5               ; d5 = %11111111 HHHHHCCC
00001858 EB4D                           lsl.w   #5,d5               ; d5 = %111HHHHH CCC00000
0000185A 1A06                           move.b  d6,d5               ; d5 = %111HHHHH LLLLLLLL
0000185C C847                           and.w   d7,d4               ; d4 = %00000CCC
0000185E 66C8                           bne.s   KosDec_StreamCopy       ; if CCC=0, branch
00001860                             
00001860                                ; special mode (extended counter)
00001860 1818                           move.b  (a0)+,d4            ; read cnt
00001862 6700                           beq.s   KosDec_Quit         ; if cnt=0, quit decompression
00001864 5304                           subq.b  #1,d4
00001866 6700 FF4A                      beq.w   KosDec_FetchNewCode     ; if cnt=1, fetch a new code
0000186A                             
0000186A 47F1 5000                      lea (a1,d5),a3
0000186E 12DB                           move.b  (a3)+,(a1)+         ; do 1 extra copy (to compensate for +1 to copy counter)
00001870 3C04                           move.w  d4,d6
00001872 4646                           not.w   d6
00001874 CC47                           and.w   d7,d6
00001876 DC46                           add.w   d6,d6
00001878 E64C                           lsr.w   #3,d4
0000187A 4EFB 6000                      jmp KosDec_largecopy(pc,d6.w)
0000187E                             
0000187E                            KosDec_largecopy:
0000187E                                rept 8
0000187E                                move.b  (a3)+,(a1)+
0000187E 12DB 12DB 12DB 12DB 12DB+      endr
0000188E 51CC FFEE                      dbf d4,KosDec_largecopy
00001892 6000 FF1E                      bra.w   KosDec_FetchNewCode
00001896                             
00001896                            KosDec_Quit:
00001896 4E75                           rts
00001898                             
00001898                            ; ---------------------------------------------------------------------------
00001898                            ; A look-up table to invert bits order in desc. field bytes
00001898                            ; ---------------------------------------------------------------------------
00001898                             
00001898                            KosDec_ByteMap:
00001898 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
000018A8 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
000018B8 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
000018C8 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
000018D8 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
000018E8 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
000018F8 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001908 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001918 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001928 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001938 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001948 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001958 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001968 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001978 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001988 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001998                             
00001998                            ; ===========================================================================
00001998                            
00001998                            ; ---------------------------------------------------------------------------
00001998                            ; Pallet cycling routine loading subroutine
00001998                            ; ---------------------------------------------------------------------------
00001998                            
00001998                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001998                            
00001998                            
00001998                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001998 7400                       		moveq	#0,d2
0000199A 7000                       		moveq	#0,d0
0000199C 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
000019A0 D040                       		add.w	d0,d0		; multiply by 2
000019A2 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
000019A6 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
000019AA                            ; End of function PalCycle_Load
000019AA                            
000019AA                            ; ===========================================================================
000019AA                            ; ---------------------------------------------------------------------------
000019AA                            ; Pallet cycling routines
000019AA                            ; ---------------------------------------------------------------------------
000019AA 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
000019AC 0000                       		dc.w PalCycle_LZ-PalCycle
000019AE 0000                       		dc.w PalCycle_MZ-PalCycle
000019B0 0000                       		dc.w PalCycle_SLZ-PalCycle
000019B2 0000                       		dc.w PalCycle_SYZ-PalCycle
000019B4 0000                       		dc.w PalCycle_SBZ-PalCycle
000019B6 0000                       		dc.w PalCycle_GHZ-PalCycle
000019B8                            
000019B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019B8                            
000019B8                            
000019B8                            PalCycle_Title:				; XREF: TitleScreen
000019B8 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
000019BE 6000                       		bra.s	loc_196A
000019C0                            ; ===========================================================================
000019C0                            
000019C0                            PalCycle_GHZ:				; XREF: PalCycle
000019C0 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
000019C6                            
000019C6                            loc_196A:				; XREF: PalCycle_Title
000019C6 5378 F634                  		subq.w	#1,($FFFFF634).w
000019CA 6A00                       		bpl.s	locret_1990
000019CC 31FC 0005 F634             		move.w	#5,($FFFFF634).w
000019D2 3038 F632                  		move.w	($FFFFF632).w,d0
000019D6 5278 F632                  		addq.w	#1,($FFFFF632).w
000019DA 0240 0003                  		andi.w	#3,d0
000019DE E748                       		lsl.w	#3,d0
000019E0 43F8 FB50                  		lea	($FFFFFB50).w,a1
000019E4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019E8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019EC                            
000019EC                            locret_1990:
000019EC 4E75                       		rts	
000019EE                            ; End of function PalCycle_Title
000019EE                            
000019EE                            
000019EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019EE                            
000019EE                            
000019EE                            PalCycle_LZ:				; XREF: PalCycle
000019EE 5378 F634                  		subq.w	#1,($FFFFF634).w
000019F2 6A00                       		bpl.s	loc_19D8
000019F4 31FC 0002 F634             		move.w	#2,($FFFFF634).w
000019FA 3038 F632                  		move.w	($FFFFF632).w,d0
000019FE 5278 F632                  		addq.w	#1,($FFFFF632).w
00001A02 0240 0003                  		andi.w	#3,d0
00001A06 E748                       		lsl.w	#3,d0
00001A08 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001A0E 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001A14 6600                       		bne.s	loc_19C0
00001A16 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001A1C                            
00001A1C                            loc_19C0:
00001A1C 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001A20 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A24 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001A28 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001A2C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A30 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001A34                            
00001A34                            loc_19D8:
00001A34 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001A38 0240 0007                  		andi.w	#7,d0
00001A3C 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001A40 6700                       		beq.s	locret_1A3A
00001A42 7201                       		moveq	#1,d1
00001A44 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001A48 6700                       		beq.s	loc_19F0
00001A4A 4441                       		neg.w	d1
00001A4C                            
00001A4C                            loc_19F0:
00001A4C 3038 F650                  		move.w	($FFFFF650).w,d0
00001A50 0240 0003                  		andi.w	#3,d0
00001A54 D041                       		add.w	d1,d0
00001A56 0C40 0003                  		cmpi.w	#3,d0
00001A5A 6500                       		bcs.s	loc_1A0A
00001A5C 3200                       		move.w	d0,d1
00001A5E 7000                       		moveq	#0,d0
00001A60 4A41                       		tst.w	d1
00001A62 6A00                       		bpl.s	loc_1A0A
00001A64 7002                       		moveq	#2,d0
00001A66                            
00001A66                            loc_1A0A:
00001A66 31C0 F650                  		move.w	d0,($FFFFF650).w
00001A6A D040                       		add.w	d0,d0
00001A6C 3200                       		move.w	d0,d1
00001A6E D040                       		add.w	d0,d0
00001A70 D041                       		add.w	d1,d0
00001A72 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001A78 43F8 FB78                  		lea	($FFFFFB78).w,a1
00001A7C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A80 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A84 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001A8A 43F8 FAF8                  		lea	($FFFFFAF8).w,a1
00001A8E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A92 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A96                            
00001A96                            locret_1A3A:
00001A96 4E75                       		rts	
00001A98                            ; End of function PalCycle_LZ
00001A98                            
00001A98                            ; ===========================================================================
00001A98 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001AA0                            ; ===========================================================================
00001AA0                            
00001AA0                            PalCycle_MZ:				; XREF: PalCycle
00001AA0 4E75                       		rts	
00001AA2                            
00001AA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AA2                            
00001AA2                            
00001AA2                            PalCycle_SLZ:				; XREF: PalCycle
00001AA2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001AA6 6A00                       		bpl.s	locret_1A80
00001AA8 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001AAE 3038 F632                  		move.w	($FFFFF632).w,d0
00001AB2 5240                       		addq.w	#1,d0
00001AB4 0C40 0006                  		cmpi.w	#6,d0
00001AB8 6500                       		bcs.s	loc_1A60
00001ABA 7000                       		moveq	#0,d0
00001ABC                            
00001ABC                            loc_1A60:
00001ABC 31C0 F632                  		move.w	d0,($FFFFF632).w
00001AC0 3200                       		move.w	d0,d1
00001AC2 D241                       		add.w	d1,d1
00001AC4 D041                       		add.w	d1,d0
00001AC6 D040                       		add.w	d0,d0
00001AC8 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001ACE 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001AD2 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001AD6 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001ADC                            
00001ADC                            locret_1A80:
00001ADC 4E75                       		rts	
00001ADE                            ; End of function PalCycle_SLZ
00001ADE                            
00001ADE                            
00001ADE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ADE                            
00001ADE                            
00001ADE                            PalCycle_SYZ:				; XREF: PalCycle
00001ADE 5378 F634                  		subq.w	#1,($FFFFF634).w
00001AE2 6A00                       		bpl.s	locret_1AC6
00001AE4 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001AEA 3038 F632                  		move.w	($FFFFF632).w,d0
00001AEE 5278 F632                  		addq.w	#1,($FFFFF632).w
00001AF2 0240 0003                  		andi.w	#3,d0
00001AF6 E548                       		lsl.w	#2,d0
00001AF8 3200                       		move.w	d0,d1
00001AFA D040                       		add.w	d0,d0
00001AFC 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001B02 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001B06 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B0A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B0E 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001B14 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001B18 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001B1C 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001B22                            
00001B22                            locret_1AC6:
00001B22 4E75                       		rts	
00001B24                            ; End of function PalCycle_SYZ
00001B24                            
00001B24                            
00001B24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B24                            
00001B24                            
00001B24                            PalCycle_SBZ:				; XREF: PalCycle
00001B24 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001B2A 4A38 FE11                  		tst.b	($FFFFFE11).w
00001B2E 6700                       		beq.s	loc_1ADA
00001B30 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001B36                            
00001B36                            loc_1ADA:
00001B36 43F8 F650                  		lea	($FFFFF650).w,a1
00001B3A 321A                       		move.w	(a2)+,d1
00001B3C                            
00001B3C                            loc_1AE0:
00001B3C 5311                       		subq.b	#1,(a1)
00001B3E 6B00                       		bmi.s	loc_1AEA
00001B40 5489                       		addq.l	#2,a1
00001B42 5C8A                       		addq.l	#6,a2
00001B44 6000                       		bra.s	loc_1B06
00001B46                            ; ===========================================================================
00001B46                            
00001B46                            loc_1AEA:				; XREF: PalCycle_SBZ
00001B46 12DA                       		move.b	(a2)+,(a1)+
00001B48 1011                       		move.b	(a1),d0
00001B4A 5200                       		addq.b	#1,d0
00001B4C B01A                       		cmp.b	(a2)+,d0
00001B4E 6500                       		bcs.s	loc_1AF6
00001B50 7000                       		moveq	#0,d0
00001B52                            
00001B52                            loc_1AF6:
00001B52 12C0                       		move.b	d0,(a1)+
00001B54 0240 000F                  		andi.w	#$F,d0
00001B58 D040                       		add.w	d0,d0
00001B5A 305A                       		movea.w	(a2)+,a0
00001B5C 365A                       		movea.w	(a2)+,a3
00001B5E 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001B62                            
00001B62                            loc_1B06:				; XREF: PalCycle_SBZ
00001B62 51C9 FFD8                  		dbf	d1,loc_1AE0
00001B66 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B6A 6A00                       		bpl.s	locret_1B64
00001B6C 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001B72 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001B78 4A38 FE11                  		tst.b	($FFFFFE11).w
00001B7C 6700                       		beq.s	loc_1B2E
00001B7E 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001B84 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001B8A                            
00001B8A                            loc_1B2E:
00001B8A 72FF                       		moveq	#-1,d1
00001B8C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B90 6700                       		beq.s	loc_1B38
00001B92 4441                       		neg.w	d1
00001B94                            
00001B94                            loc_1B38:
00001B94 3038 F632                  		move.w	($FFFFF632).w,d0
00001B98 0240 0003                  		andi.w	#3,d0
00001B9C D041                       		add.w	d1,d0
00001B9E 0C40 0003                  		cmpi.w	#3,d0
00001BA2 6500                       		bcs.s	loc_1B52
00001BA4 3200                       		move.w	d0,d1
00001BA6 7000                       		moveq	#0,d0
00001BA8 4A41                       		tst.w	d1
00001BAA 6A00                       		bpl.s	loc_1B52
00001BAC 7002                       		moveq	#2,d0
00001BAE                            
00001BAE                            loc_1B52:
00001BAE 31C0 F632                  		move.w	d0,($FFFFF632).w
00001BB2 D040                       		add.w	d0,d0
00001BB4 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001BB8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BBC 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001BC0                            
00001BC0                            locret_1B64:
00001BC0 4E75                       		rts	
00001BC2                            ; End of function PalCycle_SBZ
00001BC2                            
00001BC2                            ; ===========================================================================
00001BC2                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001BE2                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001C02                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001C22                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001C34                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001C46                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001CAE                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001CD2                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001CF2                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001D02                            
00001D02                            Pal_SBZCycList:
00001D02                            	include "_inc\SBZ pallet script 1.asm"
00001D02                            ; ---------------------------------------------------------------------------
00001D02                            ; Scrap Brain Zone 1 pallet cycling script
00001D02                            ; ---------------------------------------------------------------------------
00001D02 0008                       	dc.w 8			; number of entries - 1
00001D04 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001D06 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001D08 FB50                       	dc.w $FB50		; RAM address
00001D0A 0D08                       	dc.b $D, 8
00001D0C 0000                       	dc.w Pal_SBZCyc2
00001D0E FB52                       	dc.w $FB52
00001D10 0E08                       	dc.b $E, 8
00001D12 0000                       	dc.w Pal_SBZCyc3
00001D14 FB6E                       	dc.w $FB6E
00001D16 0B08                       	dc.b $B, 8
00001D18 0000                       	dc.w Pal_SBZCyc5
00001D1A FB70                       	dc.w $FB70
00001D1C 0708                       	dc.b 7,	8
00001D1E 0000                       	dc.w Pal_SBZCyc6
00001D20 FB72                       	dc.w $FB72
00001D22 1C10                       	dc.b $1C, $10
00001D24 0000                       	dc.w Pal_SBZCyc7
00001D26 FB7E                       	dc.w $FB7E
00001D28 0303                       	dc.b 3,	3
00001D2A 0000                       	dc.w Pal_SBZCyc8
00001D2C FB78                       	dc.w $FB78
00001D2E 0303                       	dc.b 3,	3
00001D30 0000                       	dc.w Pal_SBZCyc8+2
00001D32 FB7A                       	dc.w $FB7A
00001D34 0303                       	dc.b 3,	3
00001D36 0000                       	dc.w Pal_SBZCyc8+4
00001D38 FB7C                       	dc.w $FB7C
00001D3A                            	even
00001D3A                            	even
00001D3A                            
00001D3A                            Pal_SBZCycList2:
00001D3A                            	include "_inc\SBZ pallet script 2.asm"
00001D3A                            ; ---------------------------------------------------------------------------
00001D3A                            ; Scrap Brain Zone 2 pallet cycling script
00001D3A                            ; ---------------------------------------------------------------------------
00001D3A 0006                       	dc.w 6
00001D3C 0708                       	dc.b 7,	8
00001D3E 0000                       	dc.w Pal_SBZCyc1
00001D40 FB50                       	dc.w $FB50
00001D42 0D08                       	dc.b $D, 8
00001D44 0000                       	dc.w Pal_SBZCyc2
00001D46 FB52                       	dc.w $FB52
00001D48 0908                       	dc.b 9,	8
00001D4A 0000                       	dc.w Pal_SBZCyc9
00001D4C FB70                       	dc.w $FB70
00001D4E 0708                       	dc.b 7,	8
00001D50 0000                       	dc.w Pal_SBZCyc6
00001D52 FB72                       	dc.w $FB72
00001D54 0303                       	dc.b 3,	3
00001D56 0000                       	dc.w Pal_SBZCyc8
00001D58 FB78                       	dc.w $FB78
00001D5A 0303                       	dc.b 3,	3
00001D5C 0000                       	dc.w Pal_SBZCyc8+2
00001D5E FB7A                       	dc.w $FB7A
00001D60 0303                       	dc.b 3,	3
00001D62 0000                       	dc.w Pal_SBZCyc8+4
00001D64 FB7C                       	dc.w $FB7C
00001D66                            	even
00001D66                            	even
00001D66                            
00001D66                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001D76                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001D86                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001D96                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001DA2                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001DB2                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001DC2                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001DE2                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001DEC                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001DFC                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001E08                            ; ---------------------------------------------------------------------------
00001E08                            ; Subroutine to	fade out and fade in
00001E08                            ; ---------------------------------------------------------------------------
00001E08                            
00001E08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E08                            
00001E08                            
00001E08                            Pal_FadeTo:
00001E08 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001E0E                            
00001E0E                            Pal_FadeTo2:
00001E0E 7000                       		moveq	#0,d0
00001E10 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E14 1038 F626                  		move.b	($FFFFF626).w,d0
00001E18 D0C0                       		adda.w	d0,a0
00001E1A 7200                       		moveq	#0,d1
00001E1C 1038 F627                  		move.b	($FFFFF627).w,d0
00001E20                            
00001E20                            Pal_ToBlack:
00001E20 30C1                       		move.w	d1,(a0)+
00001E22 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001E26                            
00001E26 383C 0015                  		move.w	#$15,d4
00001E2A                            
00001E2A                            loc_1DCE:
00001E2A 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E30 6100 0000                  		bsr.w	DelayProgram
00001E34 6100                       		bsr.s	Pal_FadeIn
00001E36 6100 F692                  		bsr.w	RunPLC_RAM
00001E3A 51CC FFEE                  		dbf	d4,loc_1DCE
00001E3E 4E75                       		rts	
00001E40                            ; End of function Pal_FadeTo
00001E40                            
00001E40                            ; ---------------------------------------------------------------------------
00001E40                            ; Pallet fade-in subroutine
00001E40                            ; ---------------------------------------------------------------------------
00001E40                            
00001E40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E40                            
00001E40                            
00001E40                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001E40 7000                       		moveq	#0,d0
00001E42 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E46 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001E4A 1038 F626                  		move.b	($FFFFF626).w,d0
00001E4E D0C0                       		adda.w	d0,a0
00001E50 D2C0                       		adda.w	d0,a1
00001E52 1038 F627                  		move.b	($FFFFF627).w,d0
00001E56                            
00001E56                            loc_1DFA:
00001E56 6100                       		bsr.s	Pal_AddColor
00001E58 51C8 FFFC                  		dbf	d0,loc_1DFA
00001E5C                            
00001E5C                            locret_1E24:
00001E5C 4E75                       		rts	
00001E5E                            ; End of function Pal_FadeIn
00001E5E                            
00001E5E                            
00001E5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E5E                            
00001E5E                            
00001E5E                            Pal_AddColor:				; XREF: Pal_FadeIn
00001E5E 3419                       		move.w	(a1)+,d2
00001E60 3610                       		move.w	(a0),d3
00001E62 B642                       		cmp.w	d2,d3
00001E64 6700                       		beq.s	loc_1E4E
00001E66 3203                       		move.w	d3,d1
00001E68 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001E6C B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001E6E 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00001E70 30C1                       		move.w	d1,(a0)+	; update pallet
00001E72 4E75                       		rts	
00001E74                            ; ===========================================================================
00001E74                            
00001E74                            Pal_AddGreen:				; XREF: Pal_AddColor
00001E74 3203                       		move.w	d3,d1
00001E76 0641 0020                  		addi.w	#$20,d1		; increase green value
00001E7A B242                       		cmp.w	d2,d1
00001E7C 6200                       		bhi.s	Pal_AddRed
00001E7E 30C1                       		move.w	d1,(a0)+	; update pallet
00001E80 4E75                       		rts	
00001E82                            ; ===========================================================================
00001E82                            
00001E82                            Pal_AddRed:				; XREF: Pal_AddGreen
00001E82 5458                       		addq.w	#2,(a0)+	; increase red value
00001E84 4E75                       		rts	
00001E86                            ; ===========================================================================
00001E86                            
00001E86                            loc_1E4E:				; XREF: Pal_AddColor
00001E86 5448                       		addq.w	#2,a0
00001E88 4E75                       		rts	
00001E8A                            ; End of function Pal_AddColor
00001E8A                            
00001E8A                            
00001E8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E8A                            
00001E8A                            
00001E8A                            Pal_FadeFrom:
00001E8A 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001E90                            
00001E90                            Pal_FadeFrom2:
00001E90 383C 0015                  		move.w	#$15,d4
00001E94                            
00001E94                            loc_1E5C:
00001E94 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E9A 6100 0000                  		bsr.w	DelayProgram
00001E9E 6100                       		bsr.s	Pal_FadeOut
00001EA0 6100 F628                  		bsr.w	RunPLC_RAM
00001EA4 51CC FFEE                  		dbf	d4,loc_1E5C
00001EA8 4E75                       		rts	
00001EAA                            ; End of function Pal_FadeFrom
00001EAA                            
00001EAA                            ; ---------------------------------------------------------------------------
00001EAA                            ; Pallet fade-out subroutine
00001EAA                            ; ---------------------------------------------------------------------------
00001EAA                            
00001EAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EAA                            
00001EAA                            
00001EAA                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001EAA 7000                       		moveq	#0,d0
00001EAC 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001EB0 1038 F626                  		move.b	($FFFFF626).w,d0
00001EB4 D0C0                       		adda.w	d0,a0
00001EB6 1038 F627                  		move.b	($FFFFF627).w,d0
00001EBA                            
00001EBA                            loc_1E82:
00001EBA 6100                       		bsr.s	Pal_DecColor
00001EBC 51C8 FFFC                  		dbf	d0,loc_1E82
00001EC0                            
00001EC0 7000                       		moveq	#0,d0
00001EC2 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001EC6 1038 F626                  		move.b	($FFFFF626).w,d0
00001ECA D0C0                       		adda.w	d0,a0
00001ECC 1038 F627                  		move.b	($FFFFF627).w,d0
00001ED0                            
00001ED0                            loc_1E98:
00001ED0 6100                       		bsr.s	Pal_DecColor
00001ED2 51C8 FFFC                  		dbf	d0,loc_1E98
00001ED6 4E75                       		rts	
00001ED8                            ; End of function Pal_FadeOut
00001ED8                            
00001ED8                            
00001ED8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ED8                            
00001ED8                            
00001ED8                            Pal_DecColor:				; XREF: Pal_FadeOut
00001ED8 3410                       		move.w	(a0),d2
00001EDA 6700                       		beq.s	loc_1ECC
00001EDC 3202                       		move.w	d2,d1
00001EDE 0241 000E                  		andi.w	#$E,d1
00001EE2 6700                       		beq.s	Pal_DecGreen
00001EE4 5558                       		subq.w	#2,(a0)+	; decrease red value
00001EE6 4E75                       		rts	
00001EE8                            ; ===========================================================================
00001EE8                            
00001EE8                            Pal_DecGreen:				; XREF: Pal_DecColor
00001EE8 3202                       		move.w	d2,d1
00001EEA 0241 00E0                  		andi.w	#$E0,d1
00001EEE 6700                       		beq.s	Pal_DecBlue
00001EF0 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001EF4 4E75                       		rts	
00001EF6                            ; ===========================================================================
00001EF6                            
00001EF6                            Pal_DecBlue:				; XREF: Pal_DecGreen
00001EF6 3202                       		move.w	d2,d1
00001EF8 0241 0E00                  		andi.w	#$E00,d1
00001EFC 6700                       		beq.s	loc_1ECC
00001EFE 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001F02 4E75                       		rts	
00001F04                            ; ===========================================================================
00001F04                            
00001F04                            loc_1ECC:				; XREF: Pal_DecColor
00001F04 5448                       		addq.w	#2,a0
00001F06 4E75                       		rts	
00001F08                            ; End of function Pal_DecColor
00001F08                            
00001F08                            ; ---------------------------------------------------------------------------
00001F08                            ; Subroutine to	fill the pallet	with white (special stage)
00001F08                            ; ---------------------------------------------------------------------------
00001F08                            
00001F08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F08                            
00001F08                            
00001F08                            Pal_MakeWhite:				; XREF: SpecialStage
00001F08 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001F0E 7000                       		moveq	#0,d0
00001F10 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F14 1038 F626                  		move.b	($FFFFF626).w,d0
00001F18 D0C0                       		adda.w	d0,a0
00001F1A 323C 0EEE                  		move.w	#$EEE,d1
00001F1E 1038 F627                  		move.b	($FFFFF627).w,d0
00001F22                            
00001F22                            PalWhite_Loop:
00001F22 30C1                       		move.w	d1,(a0)+
00001F24 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00001F28 383C 0015                  		move.w	#$15,d4
00001F2C                            
00001F2C                            loc_1EF4:
00001F2C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F32 6100 0000                  		bsr.w	DelayProgram
00001F36 6100                       		bsr.s	Pal_WhiteToBlack
00001F38 6100 F590                  		bsr.w	RunPLC_RAM
00001F3C 51CC FFEE                  		dbf	d4,loc_1EF4
00001F40 4E75                       		rts	
00001F42                            ; End of function Pal_MakeWhite
00001F42                            
00001F42                            
00001F42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F42                            
00001F42                            
00001F42                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00001F42 7000                       		moveq	#0,d0
00001F44 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F48 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001F4C 1038 F626                  		move.b	($FFFFF626).w,d0
00001F50 D0C0                       		adda.w	d0,a0
00001F52 D2C0                       		adda.w	d0,a1
00001F54 1038 F627                  		move.b	($FFFFF627).w,d0
00001F58                            
00001F58                            loc_1F20:
00001F58 6100                       		bsr.s	Pal_DecColor2
00001F5A 51C8 FFFC                  		dbf	d0,loc_1F20
00001F5E                            
00001F5E                            locret_1F4A:
00001F5E 4E75                       		rts	
00001F60                            ; End of function Pal_WhiteToBlack
00001F60                            
00001F60                            
00001F60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F60                            
00001F60                            
00001F60                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00001F60 3419                       		move.w	(a1)+,d2
00001F62 3610                       		move.w	(a0),d3
00001F64 B642                       		cmp.w	d2,d3
00001F66 6700                       		beq.s	loc_1F78
00001F68 3203                       		move.w	d3,d1
00001F6A 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001F6E 6500                       		bcs.s	loc_1F64
00001F70 B242                       		cmp.w	d2,d1
00001F72 6500                       		bcs.s	loc_1F64
00001F74 30C1                       		move.w	d1,(a0)+
00001F76 4E75                       		rts	
00001F78                            ; ===========================================================================
00001F78                            
00001F78                            loc_1F64:				; XREF: Pal_DecColor2
00001F78 3203                       		move.w	d3,d1
00001F7A 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001F7E 6500                       		bcs.s	loc_1F74
00001F80 B242                       		cmp.w	d2,d1
00001F82 6500                       		bcs.s	loc_1F74
00001F84 30C1                       		move.w	d1,(a0)+
00001F86 4E75                       		rts	
00001F88                            ; ===========================================================================
00001F88                            
00001F88                            loc_1F74:				; XREF: loc_1F64
00001F88 5558                       		subq.w	#2,(a0)+	; decrease red value
00001F8A 4E75                       		rts	
00001F8C                            ; ===========================================================================
00001F8C                            
00001F8C                            loc_1F78:				; XREF: Pal_DecColor2
00001F8C 5448                       		addq.w	#2,a0
00001F8E 4E75                       		rts	
00001F90                            ; End of function Pal_DecColor2
00001F90                            
00001F90                            ; ---------------------------------------------------------------------------
00001F90                            ; Subroutine to	make a white flash when	you enter a special stage
00001F90                            ; ---------------------------------------------------------------------------
00001F90                            
00001F90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F90                            
00001F90                            
00001F90                            Pal_MakeFlash:				; XREF: SpecialStage
00001F90 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001F96 383C 0015                  		move.w	#$15,d4
00001F9A                            
00001F9A                            loc_1F86:
00001F9A 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FA0 6100 0000                  		bsr.w	DelayProgram
00001FA4 6100                       		bsr.s	Pal_ToWhite
00001FA6 6100 F522                  		bsr.w	RunPLC_RAM
00001FAA 51CC FFEE                  		dbf	d4,loc_1F86
00001FAE 4E75                       		rts	
00001FB0                            ; End of function Pal_MakeFlash
00001FB0                            
00001FB0                            
00001FB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FB0                            
00001FB0                            
00001FB0                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00001FB0 7000                       		moveq	#0,d0
00001FB2 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FB6 1038 F626                  		move.b	($FFFFF626).w,d0
00001FBA D0C0                       		adda.w	d0,a0
00001FBC 1038 F627                  		move.b	($FFFFF627).w,d0
00001FC0                            
00001FC0                            loc_1FAC:
00001FC0 6100                       		bsr.s	Pal_AddColor2
00001FC2 51C8 FFFC                  		dbf	d0,loc_1FAC
00001FC6 7000                       		moveq	#0,d0
00001FC8 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FCC 1038 F626                  		move.b	($FFFFF626).w,d0
00001FD0 D0C0                       		adda.w	d0,a0
00001FD2 1038 F627                  		move.b	($FFFFF627).w,d0
00001FD6                            
00001FD6                            loc_1FC2:
00001FD6 6100                       		bsr.s	Pal_AddColor2
00001FD8 51C8 FFFC                  		dbf	d0,loc_1FC2
00001FDC 4E75                       		rts	
00001FDE                            ; End of function Pal_ToWhite
00001FDE                            
00001FDE                            
00001FDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FDE                            
00001FDE                            
00001FDE                            Pal_AddColor2:				; XREF: Pal_ToWhite
00001FDE 3410                       		move.w	(a0),d2
00001FE0 0C42 0EEE                  		cmpi.w	#$EEE,d2
00001FE4 6700                       		beq.s	loc_2006
00001FE6 3202                       		move.w	d2,d1
00001FE8 0241 000E                  		andi.w	#$E,d1
00001FEC 0C41 000E                  		cmpi.w	#$E,d1
00001FF0 6700                       		beq.s	loc_1FE2
00001FF2 5458                       		addq.w	#2,(a0)+	; increase red value
00001FF4 4E75                       		rts	
00001FF6                            ; ===========================================================================
00001FF6                            
00001FF6                            loc_1FE2:				; XREF: Pal_AddColor2
00001FF6 3202                       		move.w	d2,d1
00001FF8 0241 00E0                  		andi.w	#$E0,d1
00001FFC 0C41 00E0                  		cmpi.w	#$E0,d1
00002000 6700                       		beq.s	loc_1FF4
00002002 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002006 4E75                       		rts	
00002008                            ; ===========================================================================
00002008                            
00002008                            loc_1FF4:				; XREF: loc_1FE2
00002008 3202                       		move.w	d2,d1
0000200A 0241 0E00                  		andi.w	#$E00,d1
0000200E 0C41 0E00                  		cmpi.w	#$E00,d1
00002012 6700                       		beq.s	loc_2006
00002014 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002018 4E75                       		rts	
0000201A                            ; ===========================================================================
0000201A                            
0000201A                            loc_2006:				; XREF: Pal_AddColor2
0000201A 5448                       		addq.w	#2,a0
0000201C 4E75                       		rts	
0000201E                            ; End of function Pal_AddColor2
0000201E                            
0000201E                            ; ---------------------------------------------------------------------------
0000201E                            ; Pallet cycling routine - Sega	logo
0000201E                            ; ---------------------------------------------------------------------------
0000201E                            
0000201E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000201E                            
0000201E                            
0000201E                            PalCycle_Sega:				; XREF: SegaScreen
0000201E 4A38 F635                  		tst.b	($FFFFF635).w
00002022 6600                       		bne.s	loc_206A
00002024 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002028 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000202E 7205                       		moveq	#5,d1
00002030 3038 F632                  		move.w	($FFFFF632).w,d0
00002034                            
00002034                            loc_2020:
00002034 6A00                       		bpl.s	loc_202A
00002036 5448                       		addq.w	#2,a0
00002038 5341                       		subq.w	#1,d1
0000203A 5440                       		addq.w	#2,d0
0000203C 60F6                       		bra.s	loc_2020
0000203E                            ; ===========================================================================
0000203E                            
0000203E                            loc_202A:				; XREF: PalCycle_Sega
0000203E 3400                       		move.w	d0,d2
00002040 0242 001E                  		andi.w	#$1E,d2
00002044 6600                       		bne.s	loc_2034
00002046 5440                       		addq.w	#2,d0
00002048                            
00002048                            loc_2034:
00002048 0C40 0060                  		cmpi.w	#$60,d0
0000204C 6400                       		bcc.s	loc_203E
0000204E 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002052                            
00002052                            loc_203E:
00002052 5440                       		addq.w	#2,d0
00002054 51C9 FFE8                  		dbf	d1,loc_202A
00002058 3038 F632                  		move.w	($FFFFF632).w,d0
0000205C 5440                       		addq.w	#2,d0
0000205E 3400                       		move.w	d0,d2
00002060 0242 001E                  		andi.w	#$1E,d2
00002064 6600                       		bne.s	loc_2054
00002066 5440                       		addq.w	#2,d0
00002068                            
00002068                            loc_2054:
00002068 0C40 0064                  		cmpi.w	#$64,d0
0000206C 6D00                       		blt.s	loc_2062
0000206E 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002074 70F4                       		moveq	#-$C,d0
00002076                            
00002076                            loc_2062:
00002076 31C0 F632                  		move.w	d0,($FFFFF632).w
0000207A 7001                       		moveq	#1,d0
0000207C 4E75                       		rts	
0000207E                            ; ===========================================================================
0000207E                            
0000207E                            loc_206A:				; XREF: loc_202A
0000207E 5338 F634                  		subq.b	#1,($FFFFF634).w
00002082 6A00                       		bpl.s	loc_20BC
00002084 11FC 0004 F634             		move.b	#4,($FFFFF634).w
0000208A 3038 F632                  		move.w	($FFFFF632).w,d0
0000208E 0640 000C                  		addi.w	#$C,d0
00002092 0C40 0030                  		cmpi.w	#$30,d0
00002096 6500                       		bcs.s	loc_2088
00002098 7000                       		moveq	#0,d0
0000209A 4E75                       		rts	
0000209C                            ; ===========================================================================
0000209C                            
0000209C                            loc_2088:				; XREF: loc_206A
0000209C 31C0 F632                  		move.w	d0,($FFFFF632).w
000020A0 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000020A6 41F0 0000                  		lea	(a0,d0.w),a0
000020AA 43F8 FB04                  		lea	($FFFFFB04).w,a1
000020AE 22D8                       		move.l	(a0)+,(a1)+
000020B0 22D8                       		move.l	(a0)+,(a1)+
000020B2 3298                       		move.w	(a0)+,(a1)
000020B4 43F8 FB20                  		lea	($FFFFFB20).w,a1
000020B8 7000                       		moveq	#0,d0
000020BA 722C                       		moveq	#$2C,d1
000020BC                            
000020BC                            loc_20A8:
000020BC 3400                       		move.w	d0,d2
000020BE 0242 001E                  		andi.w	#$1E,d2
000020C2 6600                       		bne.s	loc_20B2
000020C4 5440                       		addq.w	#2,d0
000020C6                            
000020C6                            loc_20B2:
000020C6 3390 0000                  		move.w	(a0),(a1,d0.w)
000020CA 5440                       		addq.w	#2,d0
000020CC 51C9 FFEE                  		dbf	d1,loc_20A8
000020D0                            
000020D0                            loc_20BC:
000020D0 7001                       		moveq	#1,d0
000020D2 4E75                       		rts	
000020D4                            ; End of function PalCycle_Sega
000020D4                            
000020D4                            ; ===========================================================================
000020D4                            
000020D4                            Pal_Sega1:	incbin	pallet\sega1.bin
000020E0                            Pal_Sega2:	incbin	pallet\sega2.bin
00002110                            
00002110                            ; ---------------------------------------------------------------------------
00002110                            ; Subroutines to load pallets
00002110                            ; ---------------------------------------------------------------------------
00002110                            
00002110                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002110                            
00002110                            
00002110                            PalLoad1:
00002110 43F9 0000 0000             		lea	(PalPointers).l,a1
00002116 E748                       		lsl.w	#3,d0
00002118 D2C0                       		adda.w	d0,a1
0000211A 2459                       		movea.l	(a1)+,a2
0000211C 3659                       		movea.w	(a1)+,a3
0000211E D6FC 0080                  		adda.w	#$80,a3
00002122 3E19                       		move.w	(a1)+,d7
00002124                            
00002124                            loc_2110:
00002124 26DA                       		move.l	(a2)+,(a3)+
00002126 51CF FFFC                  		dbf	d7,loc_2110
0000212A 4E75                       		rts	
0000212C                            ; End of function PalLoad1
0000212C                            
0000212C                            
0000212C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000212C                            
0000212C                            
0000212C                            PalLoad2:
0000212C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002132 E748                       		lsl.w	#3,d0
00002134 D2C0                       		adda.w	d0,a1
00002136 2459                       		movea.l	(a1)+,a2
00002138 3659                       		movea.w	(a1)+,a3
0000213A 3E19                       		move.w	(a1)+,d7
0000213C                            
0000213C                            loc_2128:
0000213C 26DA                       		move.l	(a2)+,(a3)+
0000213E 51CF FFFC                  		dbf	d7,loc_2128
00002142 4E75                       		rts	
00002144                            ; End of function PalLoad2
00002144                            
00002144                            ; ---------------------------------------------------------------------------
00002144                            ; Underwater pallet loading subroutine
00002144                            ; ---------------------------------------------------------------------------
00002144                            
00002144                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002144                            
00002144                            
00002144                            PalLoad3_Water:
00002144 43F9 0000 0000             		lea	(PalPointers).l,a1
0000214A E748                       		lsl.w	#3,d0
0000214C D2C0                       		adda.w	d0,a1
0000214E 2459                       		movea.l	(a1)+,a2
00002150 3659                       		movea.w	(a1)+,a3
00002152 96FC 0080                  		suba.w	#$80,a3
00002156 3E19                       		move.w	(a1)+,d7
00002158                            
00002158                            loc_2144:
00002158 26DA                       		move.l	(a2)+,(a3)+
0000215A 51CF FFFC                  		dbf	d7,loc_2144
0000215E 4E75                       		rts	
00002160                            ; End of function PalLoad3_Water
00002160                            
00002160                            
00002160                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002160                            
00002160                            
00002160                            PalLoad4_Water:
00002160 43F9 0000 0000             		lea	(PalPointers).l,a1
00002166 E748                       		lsl.w	#3,d0
00002168 D2C0                       		adda.w	d0,a1
0000216A 2459                       		movea.l	(a1)+,a2
0000216C 3659                       		movea.w	(a1)+,a3
0000216E 96FC 0100                  		suba.w	#$100,a3
00002172 3E19                       		move.w	(a1)+,d7
00002174                            
00002174                            loc_2160:
00002174 26DA                       		move.l	(a2)+,(a3)+
00002176 51CF FFFC                  		dbf	d7,loc_2160
0000217A 4E75                       		rts	
0000217C                            ; End of function PalLoad4_Water
0000217C                            
0000217C                            ; ===========================================================================
0000217C                            ; ---------------------------------------------------------------------------
0000217C                            ; Pallet pointers
0000217C                            ; ---------------------------------------------------------------------------
0000217C                            PalPointers:
0000217C                            	include "_inc\Pallet pointers.asm"
0000217C                            ; ---------------------------------------------------------------------------
0000217C                            ; Pallet pointers
0000217C                            ; ---------------------------------------------------------------------------
0000217C 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002180 FB00                       	dc.w $FB00		; RAM address
00002182 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002184 0000 0000                  	dc.l Pal_Title
00002188 FB00                       	dc.w $FB00
0000218A 001F                       	dc.w $1F
0000218C 0000 0000                  	dc.l Pal_LevelSel
00002190 FB00                       	dc.w $FB00
00002192 001F                       	dc.w $1F
00002194 0000 0000                  	dc.l Pal_Sonic
00002198 FB00                       	dc.w $FB00
0000219A 0007                       	dc.w 7
0000219C 0000 0000                  	dc.l Pal_GHZ
000021A0 FB20                       	dc.w $FB20
000021A2 0017                       	dc.w $17
000021A4 0000 0000                  	dc.l Pal_LZ
000021A8 FB20                       	dc.w $FB20
000021AA 0017                       	dc.w $17
000021AC 0000 0000                  	dc.l Pal_MZ
000021B0 FB20                       	dc.w $FB20
000021B2 0017                       	dc.w $17
000021B4 0000 0000                  	dc.l Pal_SLZ
000021B8 FB20                       	dc.w $FB20
000021BA 0017                       	dc.w $17
000021BC 0000 0000                  	dc.l Pal_SYZ
000021C0 FB20                       	dc.w $FB20
000021C2 0017                       	dc.w $17
000021C4 0000 0000                  	dc.l Pal_SBZ1
000021C8 FB20                       	dc.w $FB20
000021CA 0017                       	dc.w $17
000021CC 0000 0000                  	dc.l Pal_Special
000021D0 FB00                       	dc.w $FB00
000021D2 001F                       	dc.w $1F
000021D4 0000 0000                  	dc.l Pal_LZWater
000021D8 FB00                       	dc.w $FB00
000021DA 001F                       	dc.w $1F
000021DC 0000 0000                  	dc.l Pal_SBZ3
000021E0 FB20                       	dc.w $FB20
000021E2 0017                       	dc.w $17
000021E4 0000 0000                  	dc.l Pal_SBZ3Water
000021E8 FB00                       	dc.w $FB00
000021EA 001F                       	dc.w $1F
000021EC 0000 0000                  	dc.l Pal_SBZ2
000021F0 FB20                       	dc.w $FB20
000021F2 0017                       	dc.w $17
000021F4 0000 0000                  	dc.l Pal_LZSonWater
000021F8 FB00                       	dc.w $FB00
000021FA 0007                       	dc.w 7
000021FC 0000 0000                  	dc.l Pal_SBZ3SonWat
00002200 FB00                       	dc.w $FB00
00002202 0007                       	dc.w 7
00002204 0000 0000                  	dc.l Pal_SpeResult
00002208 FB00                       	dc.w $FB00
0000220A 001F                       	dc.w $1F
0000220C 0000 0000                  	dc.l Pal_SpeContinue
00002210 FB00                       	dc.w $FB00
00002212 000F                       	dc.w $F
00002214 0000 0000                  	dc.l Pal_Ending
00002218 FB00                       	dc.w $FB00
0000221A 001F                       	dc.w $1F
0000221C 0000 0000                  	dc.l Pal_Sonic
00002220 FB20                       	dc.w $FB20
00002222 0007                       	dc.w 7
00002222 0007                       	dc.w 7
00002224                            
00002224                            ; ---------------------------------------------------------------------------
00002224                            ; Pallet data
00002224                            ; ---------------------------------------------------------------------------
00002224                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
000022A4                            Pal_Title:	incbin	pallet\title.bin
00002324                            Pal_LevelSel:	incbin	pallet\levelsel.bin
000023A4                            Pal_Sonic:	incbin	pallet\sonic.bin
000023C4                            Pal_GHZ:	incbin	pallet\ghz.bin
00002424                            Pal_LZ:		incbin	pallet\lz.bin
00002484                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002504                            Pal_MZ:		incbin	pallet\mz.bin
00002564                            Pal_SLZ:	incbin	pallet\slz.bin
000025C4                            Pal_SYZ:	incbin	pallet\syz.bin
00002624                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002684                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000026E4                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002764                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000027C4                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002844                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002864                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002884                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002904                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002944                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
000029C4                            
000029C4                            ; ---------------------------------------------------------------------------
000029C4                            ; Subroutine to	delay the program by ($FFFFF62A) frames
000029C4                            ; ---------------------------------------------------------------------------
000029C4                            
000029C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029C4                            
000029C4                            WaitVBlank:
000029C4                            DelayProgram:				; XREF: PauseGame
000029C4 46FC 2300                  		move	#$2300,sr
000029C8                            
000029C8                            loc_29AC:
000029C8 4A38 F62A                  		tst.b	($FFFFF62A).w
000029CC 66FA                       		bne.s	loc_29AC
000029CE 4E75                       		rts	
000029D0                            ; End of function DelayProgram
000029D0                            
000029D0                            ; ---------------------------------------------------------------------------
000029D0                            ; Subroutine to	generate a pseudo-random number	in d0
000029D0                            ; ---------------------------------------------------------------------------
000029D0                            
000029D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029D0                            
000029D0                            
000029D0                            RandomNumber:
000029D0 2238 F636                  		move.l	($FFFFF636).w,d1
000029D4 6600                       		bne.s	loc_29C0
000029D6 223C 2A6D 365A             		move.l	#$2A6D365A,d1
000029DC                            
000029DC                            loc_29C0:
000029DC 2001                       		move.l	d1,d0
000029DE E581                       		asl.l	#2,d1
000029E0 D280                       		add.l	d0,d1
000029E2 E781                       		asl.l	#3,d1
000029E4 D280                       		add.l	d0,d1
000029E6 3001                       		move.w	d1,d0
000029E8 4841                       		swap	d1
000029EA D041                       		add.w	d1,d0
000029EC 3200                       		move.w	d0,d1
000029EE 4841                       		swap	d1
000029F0 21C1 F636                  		move.l	d1,($FFFFF636).w
000029F4 4E75                       		rts	
000029F6                            ; End of function RandomNumber
000029F6                            
000029F6                            
000029F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029F6                            
000029F6                            
000029F6                            CalcSine:
000029F6 0240 00FF                          andi.w  #$FF,d0
000029FA 5040                               addq.w  #8,d0
000029FC D040                               add.w   d0,d0
000029FE 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
00002A02 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
00002A06 4E75                               rts
00002A08                            ; End of function CalcSine
00002A08                            
00002A08                            ; ===========================================================================
00002A08                            
00002A08                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360º sine wave
00002C88                            
00002C88                            ; ===========================================================================
00002C88 48E7 6000                  		movem.l	d1-d2,-(sp)
00002C8C 3200                       		move.w	d0,d1
00002C8E 4841                       		swap	d1
00002C90 7000                       		moveq	#0,d0
00002C92 3200                       		move.w	d0,d1
00002C94 7407                       		moveq	#7,d2
00002C96                            
00002C96                            loc_2C80:
00002C96 E599                       		rol.l	#2,d1
00002C98 D040                       		add.w	d0,d0
00002C9A 5240                       		addq.w	#1,d0
00002C9C 9240                       		sub.w	d0,d1
00002C9E 6400                       		bcc.s	loc_2C9A
00002CA0 D240                       		add.w	d0,d1
00002CA2 5340                       		subq.w	#1,d0
00002CA4 51CA FFF0                  		dbf	d2,loc_2C80
00002CA8 E248                       		lsr.w	#1,d0
00002CAA 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002CAE 4E75                       		rts	
00002CB0                            ; ===========================================================================
00002CB0                            
00002CB0                            loc_2C9A:
00002CB0 5240                       		addq.w	#1,d0
00002CB2 51CA FFE2                  		dbf	d2,loc_2C80
00002CB6 E248                       		lsr.w	#1,d0
00002CB8 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002CBC 4E75                       		rts	
00002CBE                            
00002CBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CBE                            
00002CBE                            
00002CBE                            CalcAngle:
00002CBE 48E7 1800                  		movem.l	d3-d4,-(sp)
00002CC2 7600                       		moveq	#0,d3
00002CC4 7800                       		moveq	#0,d4
00002CC6 3601                       		move.w	d1,d3
00002CC8 3802                       		move.w	d2,d4
00002CCA 8843                       		or.w	d3,d4
00002CCC 6700                       		beq.s	loc_2D04
00002CCE 3802                       		move.w	d2,d4
00002CD0 4A43                       		tst.w	d3
00002CD2 6A00 0000                  		bpl.w	loc_2CC2
00002CD6 4443                       		neg.w	d3
00002CD8                            
00002CD8                            loc_2CC2:
00002CD8 4A44                       		tst.w	d4
00002CDA 6A00 0000                  		bpl.w	loc_2CCA
00002CDE 4444                       		neg.w	d4
00002CE0                            
00002CE0                            loc_2CCA:
00002CE0 B843                       		cmp.w	d3,d4
00002CE2 6400 0000                  		bcc.w	loc_2CDC
00002CE6 E18C                       		lsl.l	#8,d4
00002CE8 88C3                       		divu.w	d3,d4
00002CEA 7000                       		moveq	#0,d0
00002CEC 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002CF0 6000                       		bra.s	loc_2CE6
00002CF2                            ; ===========================================================================
00002CF2                            
00002CF2                            loc_2CDC:				; XREF: CalcAngle
00002CF2 E18B                       		lsl.l	#8,d3
00002CF4 86C4                       		divu.w	d4,d3
00002CF6 7040                       		moveq	#$40,d0
00002CF8 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002CFC                            
00002CFC                            loc_2CE6:
00002CFC 4A41                       		tst.w	d1
00002CFE 6A00 0000                  		bpl.w	loc_2CF2
00002D02 4440                       		neg.w	d0
00002D04 0640 0080                  		addi.w	#$80,d0
00002D08                            
00002D08                            loc_2CF2:
00002D08 4A42                       		tst.w	d2
00002D0A 6A00 0000                  		bpl.w	loc_2CFE
00002D0E 4440                       		neg.w	d0
00002D10 0640 0100                  		addi.w	#$100,d0
00002D14                            
00002D14                            loc_2CFE:
00002D14 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002D18 4E75                       		rts	
00002D1A                            ; ===========================================================================
00002D1A                            
00002D1A                            loc_2D04:				; XREF: CalcAngle
00002D1A 303C 0040                  		move.w	#$40,d0
00002D1E 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002D22 4E75                       		rts	
00002D24                            ; End of function CalcAngle
00002D24                            
00002D24                            ; ===========================================================================
00002D24                            
00002D24                            Angle_Data:	incbin	misc\angles.bin
00002E26                            
00002E26                            ; ===========================================================================
00002E26                            
00002E26                            ; ---------------------------------------------------------------------------
00002E26                            ; Sega screen
00002E26                            ; ---------------------------------------------------------------------------
00002E26                            
00002E26                            SegaScreen:				; XREF: GameModeArray
00002E26 103C 00E4                  		move.b	#$E4,d0
00002E2A 6100 E3F4                  		bsr.w	PlaySound_Special ; stop music
00002E2E 6100 E68C                  		bsr.w	ClearPLC
00002E32 6100 F056                  		bsr.w	Pal_FadeFrom
00002E36 4DF9 00C0 0004             		lea	($C00004).l,a6
00002E3C 3CBC 8004                  		move.w	#$8004,(a6)
00002E40 3CBC 8230                  		move.w	#$8230,(a6)
00002E44 3CBC 8407                  		move.w	#$8407,(a6)
00002E48 3CBC 8700                  		move.w	#$8700,(a6)
00002E4C 3CBC 8B00                  		move.w	#$8B00,(a6)
00002E50 4238 F64E                  		clr.b	($FFFFF64E).w
00002E54 46FC 2700                  		move	#$2700,sr
00002E58 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002E5C 0200 00BF                  		andi.b	#$BF,d0
00002E60 33C0 00C0 0004             		move.w	d0,($C00004).l
00002E66 6100 E292                  		bsr.w	ClearScreen
00002E6A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002E74 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00002E7A 6100 E496                  		bsr.w	NemDec
00002E7E 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E84 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00002E8A 303C 0000                  		move.w	#0,d0
00002E8E 6100 E76C                  		bsr.w	EniDec
00002E92 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E98 203C 6510 0003             		move.l	#$65100003,d0
00002E9E 7217                       		moveq	#$17,d1
00002EA0 7407                       		moveq	#7,d2
00002EA2 6100 E444                  		bsr.w	ShowVDPGraphics
00002EA6 43F9 00FF 0180             		lea	($FF0180).l,a1
00002EAC 203C 4000 0003             		move.l	#$40000003,d0
00002EB2 7227                       		moveq	#$27,d1
00002EB4 741B                       		moveq	#$1B,d2
00002EB6 6100 E430                  		bsr.w	ShowVDPGraphics
00002EBA 7000                       		moveq	#0,d0
00002EBC 6100 F26E                  		bsr.w	PalLoad2	; load Sega logo pallet
00002EC0 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00002EC6 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00002ECC 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00002ED2 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00002ED8 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w		
00002EDE 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002EE2 0000 0040                  		ori.b	#$40,d0
00002EE6 33C0 00C0 0004             		move.w	d0,($C00004).l
00002EEC                            
00002EEC                            Sega_WaitPallet:
00002EEC 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002EF2 6100 FAD0                  		bsr.w	DelayProgram
00002EF6 6100 F126                  		bsr.w	PalCycle_Sega
00002EFA 66F0                       		bne.s	Sega_WaitPallet
00002EFC                            
00002EFC 103C 00E1                  		move.b	#$E1,d0
00002F00 6100 E31E                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00002F04 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00002F0A 6100 FAB8                  		bsr.w	DelayProgram
00002F0E 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00002F14                            
00002F14                            Sega_WaitEnd:
00002F14 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002F1A 6100 FAA8                  		bsr.w	DelayProgram
00002F1E 4A78 F614                  		tst.w	($FFFFF614).w
00002F22 6700                       		beq.s	Sega_GotoTitle
00002F24 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00002F2A 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00002F2C                            
00002F2C                            Sega_GotoTitle:
00002F2C 11FC 0001 F601             		move.b	#1,(FromSEGA).w
00002F32 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00002F38 103C 00E4                  		move.b	#$E4,d0
00002F3C 6100 E2E2                  		bsr.w	PlaySound_Special ; stop music
00002F40 6100 E57A                  		bsr.w	ClearPLC
00002F44 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002F4A 6100 EF44                  		bsr.w	Pal_FadeFrom2
00002F4E 46FC 2700                  		move	#$2700,sr
00002F52 6100 E234                  		bsr.w	SoundDriverLoad
00002F56 4DF9 00C0 0004             		lea	($C00004).l,a6
00002F5C 3CBC 8004                  		move.w	#$8004,(a6)
00002F60 3CBC 8230                  		move.w	#$8230,(a6)
00002F64 3CBC 8407                  		move.w	#$8407,(a6)
00002F68 3CBC 9001                  		move.w	#$9001,(a6)
00002F6C 3CBC 9200                  		move.w	#$9200,(a6)
00002F70 3CBC 8B03                  		move.w	#$8B03,(a6)
00002F74 3CBC 8720                  		move.w	#$8720,(a6)
00002F78 4238 F64E                  		clr.b	($FFFFF64E).w
00002F7C 6100 E17C                  		bsr.w	ClearScreen
00002F80 4EB9 0000 0000             		jsr SHC2021
00002F86 6000                       		bra.s	TitleSkip
00002F88                            ; ===========================================================================
00002F88                            
00002F88                            ; ---------------------------------------------------------------------------
00002F88                            ; Title	screen
00002F88                            ; ---------------------------------------------------------------------------
00002F88                            
00002F88                            TitleScreen:				; XREF: GameModeArray
00002F88 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00002F8E 103C 00E4                  		move.b	#$E4,d0
00002F92 6100 E28C                  		bsr.w	PlaySound_Special ; stop music
00002F96 6100 E524                  		bsr.w	ClearPLC
00002F9A 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00002FA0 6100 EEEE                  		bsr.w	Pal_FadeFrom2
00002FA4 46FC 2700                  		move	#$2700,sr
00002FA8 6100 E1DE                  		bsr.w	SoundDriverLoad
00002FAC 4DF9 00C0 0004             		lea	($C00004).l,a6
00002FB2 3CBC 8004                  		move.w	#$8004,(a6)
00002FB6 3CBC 8230                  		move.w	#$8230,(a6)
00002FBA 3CBC 8407                  		move.w	#$8407,(a6)
00002FBE 3CBC 9001                  		move.w	#$9001,(a6)
00002FC2 3CBC 9200                  		move.w	#$9200,(a6)
00002FC6 3CBC 8B03                  		move.w	#$8B03,(a6)
00002FCA 3CBC 8720                  		move.w	#$8720,(a6)
00002FCE 4238 F64E                  		clr.b	($FFFFF64E).w
00002FD2 6100 E126                  		bsr.w	ClearScreen
00002FD6                            
00002FD6                            TitleSkip:
00002FD6 43F8 D000                  		lea	($FFFFD000).w,a1
00002FDA 7000                       		moveq	#0,d0
00002FDC 323C 07FF                  		move.w	#$7FF,d1
00002FE0                            
00002FE0                            Title_ClrObjRam:
00002FE0 22C0                       		move.l	d0,(a1)+
00002FE2 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00002FE6                            
00002FE6 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002FF0 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00002FF6 6100 E31A                  		bsr.w	NemDec
00002FFA 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003004 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
0000300A 6100 E306                  		bsr.w	NemDec
0000300E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003014 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
0000301A 303C 0000                  		move.w	#0,d0
0000301E 6100 E5DC                  		bsr.w	EniDec
00003022 43F9 00FF 0000             		lea	($FF0000).l,a1
00003028 203C 4000 0003             		move.l	#$40000003,d0
0000302E 7227                       		moveq	#$27,d1
00003030 741B                       		moveq	#$1B,d2
00003032 6100 E2B4                  		bsr.w	ShowVDPGraphics
00003036                            
00003036 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000303A 7000                       		moveq	#0,d0
0000303C 323C 001F                  		move.w	#$1F,d1
00003040                            
00003040                            Title_ClrPallet:
00003040 22C0                       		move.l	d0,(a1)+
00003042 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003046                            
00003046 7014                       		moveq	#$14,d0		; load Sonic's pallet
00003048 6100 F0C6                  		bsr.w	PalLoad1
0000304C 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00003052 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w		
00003058 4EB9 0000 0000             		jsr	ObjectsLoad
0000305E 4EB9 0000 0000             		jsr	BuildSprites
00003064 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000306A 4A38 F601                  		tst.b	(FromSEGA).w
0000306E 6700 0000                  		beq.w	@skip
00003072 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003078                            
00003078                            	@skip:
00003078 6100 ED94                  		bsr.w	Pal_FadeTo2
0000307C 46FC 2700                  		move	#$2700,sr
00003080 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
0000308A 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003090 6100 E280                  		bsr.w	NemDec
00003094 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
0000309E 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
000030A4 6100 E26C                  		bsr.w	NemDec
000030A8 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
000030B2 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
000030B8 6100 E258                  		bsr.w	NemDec
000030BC 4DF9 00C0 0000             		lea	($C00000).l,a6
000030C2 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000030CA 4BF9 0000 0550             		lea	(Art_Text).l,a5
000030D0 323C 028F                  		move.w	#$28F,d1
000030D4                            
000030D4                            Title_LoadText:
000030D4 3C9D                       		move.w	(a5)+,(a6)
000030D6 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
000030DA                            
000030DA 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
000030E0 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
000030E6 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
000030EC 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000030F2 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000030F8 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000030FE 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
00003104 6100 0000                  		bsr.w	LevelSizeLoad
00003108 6100 0000                  		bsr.w	DeformBgLayer
0000310C 43F8 B000                  		lea	($FFFFB000).w,a1
00003110 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003116 303C 0000                  		move.w	#0,d0
0000311A 6100 E4E0                  		bsr.w	EniDec
0000311E 6100 0000                  		bsr.w	LevelLayoutLoad
00003122 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003128 4A38 F601                  		tst.b	(FromSEGA).w
0000312C 6700                       		beq.s	@notSEGA
0000312E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003134                            
00003134                            	@notSEGA:
00003134 6100 ED5A                  		bsr.w	Pal_FadeFrom2
00003138 46FC 2700                  		move	#$2700,sr
0000313C 6100 DFBC                  		bsr.w	ClearScreen
00003140 4BF9 00C0 0004             		lea	($C00004).l,a5
00003146 4DF9 00C0 0000             		lea	($C00000).l,a6
0000314C 47F8 F708                  		lea	($FFFFF708).w,a3
00003150 49F8 A440                  		lea	($FFFFA440).w,a4
00003154 343C 6000                  		move.w	#$6000,d2
00003158 6100 0000                  		bsr.w	LoadTilesFromStart2
0000315C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003162 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003168 303C 0000                  		move.w	#0,d0
0000316C 6100 E48E                  		bsr.w	EniDec
00003170 43F9 00FF 0000             		lea	($FF0000).l,a1
00003176 203C 4206 0003             		move.l	#$42060003,d0
0000317C 7221                       		moveq	#$21,d1
0000317E 7415                       		moveq	#$15,d2
00003180 6100 E166                  		bsr.w	ShowVDPGraphics
00003184 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000318E 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
00003194 6100 E17C                  		bsr.w	NemDec
00003198 7001                       		moveq	#1,d0		; load title screen pallet
0000319A 6100 EF74                  		bsr.w	PalLoad1
0000319E 103C 008A                  		move.b	#$8A,d0		; play title screen music
000031A2 6100 E07C                  		bsr.w	PlaySound_Special
000031A6 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
000031AC                            		;move.b	#1,($FFFFFFE1).w ; enable slow-mo mode
000031AC 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
000031B2 43F8 D080                  		lea	($FFFFD080).w,a1
000031B6 7000                       		moveq	#0,d0
000031B8 323C 0007                  		move.w	#7,d1
000031BC                            
000031BC                            Title_ClrObjRam2:
000031BC 22C0                       		move.l	d0,(a1)+
000031BE 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
000031C2                            
000031C2 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
000031C8 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000031CE 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000031D4 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000031DA 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000031E0 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
000031E6 4EB9 0000 0000             		jsr	ObjectsLoad
000031EC 6100 0000                  		bsr.w	DeformBgLayer
000031F0 4EB9 0000 0000             		jsr	BuildSprites
000031F6 7000                       		moveq	#0,d0
000031F8 6100 E296                  		bsr.w	LoadPLC2
000031FC 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003202 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003208 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000320C 0000 0040                  		ori.b	#$40,d0
00003210 33C0 00C0 0004             		move.w	d0,($C00004).l
00003216 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000321C 4A38 F601                  		tst.b	(FromSEGA).w
00003220 6700                       		beq.s	@notSEGA
00003222 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003228 11FC 0000 F5C4             		move.b	#0,(SonimeSST+sonime_routine).w
0000322E 11FC 0000 F601             		move.b	#0,(FromSEGA).w
00003234                            
00003234                            	@notSEGA:
00003234 6100 EBD8                  		bsr.w	Pal_FadeTo2
00003238                            
00003238                            loc_317C:
00003238 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000323E 6100 F784                  		bsr.w	DelayProgram
00003242 4EB9 0000 0000             		jsr	ObjectsLoad
00003248 6100 0000                  		bsr.w	DeformBgLayer
0000324C 4EB9 0000 0000             		jsr	BuildSprites
00003252 6100 E764                  		bsr.w	PalCycle_Title
00003256 6100 E272                  		bsr.w	RunPLC_RAM
0000325A 3038 D008                  		move.w	($FFFFD008).w,d0
0000325E 5440                       		addq.w	#2,d0
00003260 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003264 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003268 6500                       		bcs.s	Title_ChkRegion	; if not, branch
0000326A 6000 FD1C                  		bra.w	TitleScreen
0000326E                            ; ===========================================================================
0000326E                            
0000326E                            Title_ChkRegion:
0000326E 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003272 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003274 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
0000327A 6000                       		bra.s	Title_EnterCheat
0000327C                            ; ===========================================================================
0000327C                            
0000327C                            Title_RegionJ:				; XREF: Title_ChkRegion
0000327C 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003282                            
00003282                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003282 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003286 D0C0                       		adda.w	d0,a0
00003288 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
0000328C 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003290 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003292 6600                       		bne.s	loc_3210	; if not, branch
00003294 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003298 4A00                       		tst.b	d0
0000329A 6600                       		bne.s	Title_CountC
0000329C 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000032A0 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000032A4 E249                       		lsr.w	#1,d1
000032A6 0241 0003                  		andi.w	#3,d1
000032AA 6700                       		beq.s	Title_PlayRing
000032AC 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000032B0 6A00                       		bpl.s	Title_PlayRing
000032B2 7201                       		moveq	#1,d1
000032B4 1181 1001                  		move.b	d1,1(a0,d1.w)
000032B8                            
000032B8                            Title_PlayRing:
000032B8 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000032BE 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000032C2 6100 DF5C                  		bsr.w	PlaySound_Special
000032C6 6000                       		bra.s	Title_CountC
000032C8                            ; ===========================================================================
000032C8                            
000032C8                            loc_3210:				; XREF: Title_EnterCheat
000032C8 4A00                       		tst.b	d0
000032CA 6700                       		beq.s	Title_CountC
000032CC 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000032D2 6700                       		beq.s	Title_CountC
000032D4 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000032DA                            
000032DA                            Title_CountC:
000032DA 1038 F605                  		move.b	($FFFFF605).w,d0
000032DE 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000032E2 6700                       		beq.s	loc_3230	; if not, branch
000032E4 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000032E8                            
000032E8                            loc_3230:
000032E8 4A78 F614                  		tst.w	($FFFFF614).w
000032EC 6700 0000                  		beq.w	Demo
000032F0 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
000032F6 6700 FF40                  		beq.w	loc_317C	; if not, branch
000032FA                            
000032FA                            Title_ChkLevSel:
000032FA 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
000032FE 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003302 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003308 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000330C 7002                       		moveq	#2,d0
0000330E 6100 EE1C                  		bsr.w	PalLoad2	; load level select pallet
00003312 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003316 7000                       		moveq	#0,d0
00003318 323C 00DF                  		move.w	#$DF,d1
0000331C                            
0000331C                            Title_ClrScroll:
0000331C 22C0                       		move.l	d0,(a1)+
0000331E 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003322                            
00003322 21C0 F616                  		move.l	d0,($FFFFF616).w
00003326 46FC 2700                  		move	#$2700,sr
0000332A 4DF9 00C0 0000             		lea	($C00000).l,a6
00003330 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
0000333A 323C 03FF                  		move.w	#$3FF,d1
0000333E                            
0000333E                            Title_ClrVram:
0000333E 2C80                       		move.l	d0,(a6)
00003340 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003344                            
00003344 6100 0000                  		bsr.w	LevSelTextLoad
00003348                            
00003348                            ; ---------------------------------------------------------------------------
00003348                            ; Level	Select
00003348                            ; ---------------------------------------------------------------------------
00003348                            
00003348                            LevelSelect:
00003348 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000334E 6100 F674                  		bsr.w	DelayProgram
00003352 4EB9 0000 0000             		jsr		BuildSprites
00003358 6100 0000                  		bsr.w	LevSelControls
0000335C 6100 E16C                  		bsr.w	RunPLC_RAM
00003360 4AB8 F680                  		tst.l	($FFFFF680).w
00003364 66E2                       		bne.s	LevelSelect
00003366 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
0000336C 67DA                       		beq.s	LevelSelect	; if not, branch
0000336E 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003372 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00003376 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003378 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000337C 0640 0080                  		addi.w	#$80,d0
00003380 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
00003384 6700                       		beq.s	LevSel_NoCheat	; if not, branch
00003386 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
0000338A 6700                       		beq.s	LevSel_Ending	; if yes, branch
0000338C 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
00003390 6700                       		beq.s	LevSel_Credits	; if yes, branch
00003392                            
00003392                            LevSel_NoCheat:
00003392 0C40 0094                  		cmpi.w	#$94,d0		; is sound $80-$94 being played?
00003396 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
00003398 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
0000339C 65AA                       		bcs.s	LevelSelect	; if yes, branch
0000339E                            
0000339E                            LevSel_PlaySnd:
0000339E 6100 DE80                  		bsr.w	PlaySound_Special
000033A2 60A4                       		bra.s	LevelSelect
000033A4                            ; ===========================================================================
000033A4                            
000033A4                            LevSel_Ending:				; XREF: LevelSelect
000033A4 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000033AA 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000033B0                            	;	move.b	#0,($FFFFFE57).w ; clear emeralds
000033B0 4E75                       		rts	
000033B2                            ; ===========================================================================
000033B2                            
000033B2                            LevSel_Credits:				; XREF: LevelSelect
000033B2 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000033B8 103C 0091                  		move.b	#$91,d0
000033BC 6100 DE62                  		bsr.w	PlaySound_Special ; play credits music
000033C0 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
000033C6 4E75                       		rts	
000033C8                            ; ===========================================================================
000033C8                            
000033C8                            LevSel_Level_SS:			; XREF: LevelSelect
000033C8 D040                       		add.w	d0,d0
000033CA 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000033CE 6B00 FF78                  		bmi.w	LevelSelect
000033D2 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
000033D6 6600                       		bne.s	LevSel_Level	; if not, branch
000033D8 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000033DE 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
000033E2 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000033E8 7000                       		moveq	#0,d0
000033EA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000033EE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000033F2 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000033F6 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
000033FA                            	;	move.l	#$00010203,($FFFFFE58).w ; clear emeralds
000033FA                            	;	move.l	#$04050000,($FFFFFE5C).w ; clear emeralds
000033FA 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)	
00003402 4E75                       		rts	
00003404                            ; ===========================================================================
00003404                            ; ---------------------------------------------------------------------------
00003404                            ; Level	select - level pointers
00003404                            ; ---------------------------------------------------------------------------
00003404                            LSelectPointers:
00003404                            		incbin	misc\ls_point.bin
0000342E                            		even
0000342E                            
0000342E                            LevSel_Level:				; XREF: LevSel_Level_SS
0000342E 0240 3FFF                  		andi.w	#$3FFF,d0
00003432 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003436                            
00003436                            PlayLevel:				; XREF: ROM:00003246j ...
00003436 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000343C 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003442 7000                       		moveq	#0,d0
00003444 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003448 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000344C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003450 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003454 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003458                            	;	move.l	#$01020304,($FFFFFE58).w ; clear emeralds
00003458                            	;	move.l	#$05000000,($FFFFFE5C).w ; clear emeralds
00003458 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
0000345C 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)			
00003464 103C 00E0                  		move.b	#$E0,d0
00003468 6100 DDB6                  		bsr.w	PlaySound_Special ; fade out music
0000346C 4E75                       		rts	
0000346E                            ; ===========================================================================
0000346E                            ; ---------------------------------------------------------------------------
0000346E                            ; Level	select codes
0000346E                            ; ---------------------------------------------------------------------------
0000346E                            LevelSelectCode_J:
0000346E                            		incbin	misc\ls_jcode.bin
00003474                            		even
00003474                            
00003474                            LevelSelectCode_US:
00003474                            		incbin	misc\ls_ucode.bin
0000347A                            		even
0000347A                            ; ===========================================================================
0000347A                            
0000347A                            ; ---------------------------------------------------------------------------
0000347A                            ; Demo mode
0000347A                            ; ---------------------------------------------------------------------------
0000347A                            
0000347A                            Demo:					; XREF: TitleScreen
0000347A 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003480                            
00003480                            loc_33B6:				; XREF: loc_33E4
00003480 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003486 6100 F53C                  		bsr.w	DelayProgram
0000348A 6100 0000                  		bsr.w	DeformBgLayer
0000348E 6100 E508                  		bsr.w	PalCycle_Load
00003492 6100 E036                  		bsr.w	RunPLC_RAM
00003496 3038 D008                  		move.w	($FFFFD008).w,d0
0000349A 5440                       		addq.w	#2,d0
0000349C 31C0 D008                  		move.w	d0,($FFFFD008).w
000034A0 0C40 1C00                  		cmpi.w	#$1C00,d0
000034A4 6500                       		bcs.s	loc_33E4
000034A6 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set screen mode to 0
000034AC 4E75                       		rts	
000034AE                            ; ===========================================================================
000034AE                            
000034AE                            loc_33E4:				; XREF: Demo
000034AE 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000034B4 6600 FE44                  		bne.w	Title_ChkLevSel	; if yes, branch
000034B8 4A78 F614                  		tst.w	($FFFFF614).w
000034BC 6600 FFC2                  		bne.w	loc_33B6
000034C0 103C 00E0                  		move.b	#$E0,d0
000034C4 6100 DD5A                  		bsr.w	PlaySound_Special ; fade out music
000034C8 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
000034CC 0240 0007                  		andi.w	#7,d0
000034D0 D040                       		add.w	d0,d0
000034D2 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000034D6 31C0 FE10                  		move.w	d0,($FFFFFE10).w
000034DA 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
000034DE 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
000034E4 6500                       		bcs.s	loc_3422	; if yes, branch
000034E6 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
000034EC                            
000034EC                            loc_3422:
000034EC 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
000034F2 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
000034F8 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000034FC 6600                       		bne.s	Demo_Level	; if not, branch
000034FE 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003504 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003508 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
0000350C                            
0000350C                            Demo_Level:
0000350C 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003512 7000                       		moveq	#0,d0
00003514 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003518 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000351C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003520 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)		
00003528 4E75                       		rts	
0000352A                            ; ===========================================================================
0000352A                            ; ---------------------------------------------------------------------------
0000352A                            ; Levels used in demos
0000352A                            ; ---------------------------------------------------------------------------
0000352A                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003532                            		even
00003532                            
00003532                            ; ---------------------------------------------------------------------------
00003532                            ; Subroutine to	change what you're selecting in the level select
00003532                            ; ---------------------------------------------------------------------------
00003532                            
00003532                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003532                            
00003532                            
00003532                            LevSelControls:				; XREF: LevelSelect
00003532 1238 F605                  		move.b	($FFFFF605).w,d1
00003536 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
0000353A 6600                       		bne.s	LevSel_UpDown	; if yes, branch
0000353C 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003540 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003542                            
00003542                            LevSel_UpDown:
00003542 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003548 1238 F604                  		move.b	($FFFFF604).w,d1
0000354C 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003550 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003552 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003556 0801 0000                  		btst	#0,d1		; is up	pressed?
0000355A 6700                       		beq.s	LevSel_Down	; if not, branch
0000355C 5340                       		subq.w	#1,d0		; move up 1 selection
0000355E 6400                       		bcc.s	LevSel_Down
00003560 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00003562                            
00003562                            LevSel_Down:
00003562 0801 0001                  		btst	#1,d1		; is down pressed?
00003566 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003568 5240                       		addq.w	#1,d0		; move down 1 selection
0000356A 0C40 0015                  		cmpi.w	#$15,d0
0000356E 6500                       		bcs.s	LevSel_Refresh
00003570 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00003572                            
00003572                            LevSel_Refresh:
00003572 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
00003576 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
0000357A 4E75                       		rts	
0000357C                            ; ===========================================================================
0000357C                            
0000357C                            LevSel_SndTest:				; XREF: LevSelControls
0000357C 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
00003582 6600                       		bne.s	LevSel_NoMove	; if not, branch
00003584 1238 F605                  		move.b	($FFFFF605).w,d1
00003588 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
0000358C 6700                       		beq.s	LevSel_NoMove	; if not, branch
0000358E 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003592 0801 0002                  		btst	#2,d1		; is left pressed?
00003596 6700                       		beq.s	LevSel_Right	; if not, branch
00003598 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
0000359A 6400                       		bcc.s	LevSel_Right
0000359C 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
0000359E                            
0000359E                            LevSel_Right:
0000359E 0801 0003                  		btst	#3,d1		; is right pressed?
000035A2 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000035A4 5240                       		addq.w	#1,d0		; add 1	to sound test
000035A6 0C40 0050                  		cmpi.w	#$50,d0
000035AA 6500                       		bcs.s	LevSel_Refresh2
000035AC 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000035AE                            
000035AE                            LevSel_Refresh2:
000035AE 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
000035B2 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000035B6                            
000035B6                            LevSel_NoMove:
000035B6 4E75                       		rts	
000035B8                            ; End of function LevSelControls
000035B8                            
000035B8                            ; ---------------------------------------------------------------------------
000035B8                            ; Subroutine to load level select text
000035B8                            ; ---------------------------------------------------------------------------
000035B8                            
000035B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000035B8                            
000035B8                            
000035B8                            LevSelTextLoad:				; XREF: TitleScreen
000035B8 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000035BE 4DF9 00C0 0000             		lea	($C00000).l,a6
000035C4 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
000035CA 363C E680                  		move.w	#$E680,d3	; VRAM setting
000035CE 7214                       		moveq	#$14,d1		; number of lines of text
000035D0                            
000035D0                            loc_34FE:				; XREF: LevSelTextLoad+26j
000035D0 2D44 0004                  		move.l	d4,4(a6)
000035D4 6100 0000                  		bsr.w	LevSel_ChgLine
000035D8 0684 0080 0000             		addi.l	#$800000,d4
000035DE 51C9 FFF0                  		dbf	d1,loc_34FE
000035E2 7000                       		moveq	#0,d0
000035E4 3038 FF82                  		move.w	($FFFFFF82).w,d0
000035E8 3200                       		move.w	d0,d1
000035EA 283C 6210 0003             		move.l	#$62100003,d4
000035F0 EF48                       		lsl.w	#7,d0
000035F2 4840                       		swap	d0
000035F4 D880                       		add.l	d0,d4
000035F6 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000035FC E749                       		lsl.w	#3,d1
000035FE 3001                       		move.w	d1,d0
00003600 D241                       		add.w	d1,d1
00003602 D240                       		add.w	d0,d1
00003604 D2C1                       		adda.w	d1,a1
00003606 363C C680                  		move.w	#$C680,d3
0000360A 2D44 0004                  		move.l	d4,4(a6)
0000360E 6100 0000                  		bsr.w	LevSel_ChgLine
00003612 363C E680                  		move.w	#$E680,d3
00003616 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
0000361C 6600                       		bne.s	loc_3550
0000361E 363C C680                  		move.w	#$C680,d3
00003622                            
00003622                            loc_3550:
00003622 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
0000362C 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003630 0640 0080                  		addi.w	#$80,d0
00003634                            
00003634                            DRAWNUMBER:
00003634 1400                       		move.b	d0,d2
00003636 E808                       		lsr.b	#4,d0
00003638 6100 0000                  		bsr.w	LevSel_ChgSnd
0000363C 1002                       		move.b	d2,d0
0000363E 6100 0000                  		bsr.w	LevSel_ChgSnd
00003642 4E75                       		rts	
00003644                            ; End of function LevSelTextLoad
00003644                            
00003644                            
00003644                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003644                            
00003644                            
00003644                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003644 0240 000F                  		andi.w	#$F,d0
00003648 0C00 000A                  		cmpi.b	#$A,d0
0000364C 6500                       		bcs.s	loc_3580
0000364E 5E00                       		addi.b	#7,d0
00003650                            
00003650                            loc_3580:
00003650 D043                       		add.w	d3,d0
00003652 3C80                       		move.w	d0,(a6)
00003654 4E75                       		rts	
00003656                            ; End of function LevSel_ChgSnd
00003656                            
00003656                            
00003656                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003656                            
00003656                            
00003656                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003656 7417                       		moveq	#$17,d2		; number of characters per line
00003658                            
00003658                            loc_3588:
00003658 7000                       		moveq	#0,d0
0000365A 1019                       		move.b	(a1)+,d0
0000365C 6A00                       		bpl.s	loc_3598
0000365E 3CBC 0000                  		move.w	#0,(a6)
00003662 51CA FFF4                  		dbf	d2,loc_3588
00003666 4E75                       		rts	
00003668                            ; ===========================================================================
00003668                            
00003668                            loc_3598:				; XREF: LevSel_ChgLine
00003668 D043                       		add.w	d3,d0
0000366A 3C80                       		move.w	d0,(a6)
0000366C 51CA FFEA                  		dbf	d2,loc_3588
00003670 4E75                       		rts	
00003672                            ; End of function LevSel_ChgLine
00003672                            
00003672                            ; ===========================================================================
00003672                            ; ---------------------------------------------------------------------------
00003672                            ; Level	select menu text
00003672                            ; ---------------------------------------------------------------------------
00003672                            LevelMenuText:	incbin	misc\menutext.bin
0000386A                            		even
0000386A                            ; ---------------------------------------------------------------------------
0000386A                            ; Music	playlist
0000386A                            ; ---------------------------------------------------------------------------
0000386A                            MusicList:	incbin	misc\muslist1.bin
00003872                            		even
00003872                            ; ===========================================================================
00003872                            
00003872                            ; ---------------------------------------------------------------------------
00003872                            ; Level
00003872                            ; ---------------------------------------------------------------------------
00003872                            
00003872                            Level:					; XREF: GameModeArray
00003872 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003878 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w		
0000387E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003882 6B00                       		bmi.s	loc_37B6
00003884 103C 00E0                  		move.b	#$E0,d0
00003888 6100 D996                  		bsr.w	PlaySound_Special ; fade out music
0000388C                            
0000388C                            loc_37B6:
0000388C 6100 DC2E                  		bsr.w	ClearPLC
00003890 6100 E5F8                  		bsr.w	Pal_FadeFrom
00003894 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003898 6B00                       		bmi.s	Level_ClrRam
0000389A 46FC 2700                  		move	#$2700,sr
0000389E 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
000038A8 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
000038AE 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
000038B4 4EB8 143A                          jsr LoadUncArt          ; load uncompressed art
000038B8 46FC 2300                  		move	#$2300,sr
000038BC 7000                       		moveq	#0,d0
000038BE 1038 FE10                  		move.b	($FFFFFE10).w,d0
000038C2 E948                       		lsl.w	#4,d0
000038C4 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000038CA 45F2 0000                  		lea	(a2,d0.w),a2
000038CE 7000                       		moveq	#0,d0
000038D0 1012                       		move.b	(a2),d0
000038D2 6700                       		beq.s	loc_37FC
000038D4 6100 DB88                  		bsr.w	LoadPLC		; load level patterns
000038D8                            
000038D8                            loc_37FC:
000038D8 7001                       		moveq	#1,d0
000038DA 6100 DB82                  		bsr.w	LoadPLC		; load standard	patterns
000038DE                            
000038DE                            Level_ClrRam:
000038DE 43F8 D000                  		lea	($FFFFD000).w,a1
000038E2 7000                       		moveq	#0,d0
000038E4 323C 07FF                  		move.w	#$7FF,d1
000038E8                            
000038E8                            Level_ClrObjRam:
000038E8 22C0                       		move.l	d0,(a1)+
000038EA 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
000038EE                            
000038EE 43F8 F628                  		lea	($FFFFF628).w,a1
000038F2 7000                       		moveq	#0,d0
000038F4 323C 0015                  		move.w	#$15,d1
000038F8                            
000038F8                            Level_ClrVars:
000038F8 22C0                       		move.l	d0,(a1)+
000038FA 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
000038FE                            
000038FE 43F8 F700                  		lea	($FFFFF700).w,a1
00003902 7000                       		moveq	#0,d0
00003904 323C 003F                  		move.w	#$3F,d1
00003908                            
00003908                            Level_ClrVars2:
00003908 22C0                       		move.l	d0,(a1)+
0000390A 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
0000390E                            
0000390E 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003912 7000                       		moveq	#0,d0
00003914 323C 0047                  		move.w	#$47,d1
00003918                            
00003918                            Level_ClrVars3:
00003918 22C0                       		move.l	d0,(a1)+
0000391A 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
0000391E 46FC 2700                  		move	#$2700,sr
00003922 6100 D7D6                  		bsr.w	ClearScreen
00003926 4DF9 00C0 0004             		lea	($C00004).l,a6
0000392C 3CBC 8B03                  		move.w	#$8B03,(a6)
00003930 3CBC 8230                  		move.w	#$8230,(a6)
00003934 3CBC 8407                  		move.w	#$8407,(a6)
00003938 3CBC 857C                  		move.w	#$857C,(a6)
0000393C 3CBC 9001                  		move.w	#$9001,(a6)
00003940 3CBC 8004                  		move.w	#$8004,(a6)
00003944 3CBC 8720                  		move.w	#$8720,(a6)
00003948 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000394E 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003952 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003958 6600                       		bne.s	Level_LoadPal	; if not, branch
0000395A 3CBC 8014                  		move.w	#$8014,(a6)
0000395E 7000                       		moveq	#0,d0
00003960 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003964 D040                       		add.w	d0,d0
00003966 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
0000396C 3031 0000                  		move.w	(a1,d0.w),d0
00003970 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003974 31C0 F648                  		move.w	d0,($FFFFF648).w
00003978 31C0 F64A                  		move.w	d0,($FFFFF64A).w
0000397C 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003980 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003984 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
0000398A                            
0000398A                            Level_LoadPal:
0000398A 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003990 46FC 2300                  		move	#$2300,sr
00003994 7003                       		moveq	#3,d0
00003996 6100 E794                  		bsr.w	PalLoad2	; load Sonic's pallet line
0000399A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000039A0 6600                       		bne.s	Level_GetBgm	; if not, branch
000039A2 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
000039A4 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
000039AA 6600                       		bne.s	Level_WaterPal	; if not, branch
000039AC 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
000039AE                            
000039AE                            Level_WaterPal:
000039AE 6100 E794                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
000039B2 4A38 FE30                  		tst.b	($FFFFFE30).w
000039B6 6700                       		beq.s	Level_GetBgm
000039B8 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000039BE                            
000039BE                            Level_GetBgm:
000039BE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000039C2 6B00                       		bmi.s	loc_3946
000039C4 7000                       		moveq	#0,d0
000039C6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000039CA 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3?
000039D0 6600                       		bne.s	Level_BgmNotLZ4	; if not, branch
000039D2 7005                       		moveq	#5,d0		; move 5 to d0
000039D4                            
000039D4                            Level_BgmNotLZ4:
000039D4 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000039DA 6600                       		bne.s	Level_PlayBgm	; if not, branch
000039DC 7006                       		moveq	#6,d0		; move 6 to d0
000039DE                            
000039DE                            Level_PlayBgm:
000039DE                            ;		lea	(MusicList).l,a1 ; load	music playlist
000039DE                            ;		move.b	(a1,d0.w),d0	; add d0 to a1
000039DE                            ;		bsr.w	PlaySound	; play music
000039DE 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
000039E4                            
000039E4                            Level_TtlCard:
000039E4 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
000039EA 6100 EFD8                  		bsr.w	DelayProgram
000039EE 4EB9 0000 0000             		jsr	ObjectsLoad
000039F4 4EB9 0000 0000             		jsr	BuildSprites
000039FA 6100 DACE                  		bsr.w	RunPLC_RAM
000039FE 3038 D108                  		move.w	($FFFFD108).w,d0
00003A02 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003A06 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003A08 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003A0C 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003A0E 4EB9 0000 0000             		jsr	Hud_Base
00003A14                            
00003A14                            loc_3946:
00003A14 7003                       		moveq	#3,d0
00003A16 6100 E6F8                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003A1A 6100 0000                  		bsr.w	LevelSizeLoad
00003A1E 6100 0000                  		bsr.w	DeformBgLayer
00003A22 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003A28 6100 0000                  		bsr.w	LoadZoneTiles	; load level art			
00003A2C 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003A30 6100 0000                  		bsr.w	LoadTilesFromStart
00003A34 4EB9 0000 0000             		jsr	FloorLog_Unk
00003A3A 6100 0000                  		bsr.w	ColIndexLoad
00003A3E 6100 0000                  		bsr.w	LZWaterEffects
00003A42 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003A48 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003A4C 6B00                       		bmi.s	Level_ChkDebug
00003A4E 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003A54 11FC 0001 FFD0                     move.b    #1,($FFFFFFD0).w
00003A5A                            		
00003A5A                            Level_ChkDebug:
00003A5A 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003A5E 6700                       		beq.s	Level_ChkWater	; if not, branch
00003A60 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003A66 6700                       		beq.s	Level_ChkWater	; if not, branch
00003A68 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003A6E                            
00003A6E                            Level_ChkWater:
00003A6E 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003A74 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003A7A 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
00003A80 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003A86 6600                       		bne.s	Level_LoadObj	; if not, branch
00003A88 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003A8E 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003A94 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003A9A 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003AA0                            
00003AA0                            Level_LoadObj:
00003AA0 4EB9 0000 0000             		jsr	ObjPosLoad
00003AA6 11FC 0000 870C             		move.b	#0,(Rings_manager_routine).w
00003AAC 4EB9 0000 0000             		jsr	RingsManager				
00003AB2 4EB9 0000 0000             		jsr	ObjectsLoad
00003AB8 4EB9 0000 0000             		jsr	BuildSprites
00003ABE 7000                       		moveq	#0,d0
00003AC0 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003AC4 6600                       		bne.s	loc_39E8	; if yes, branch
00003AC6 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003ACA 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003ACE 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003AD2                            
00003AD2                            loc_39E8:
00003AD2 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003AD6 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003ADA 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003ADE 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003AE2 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00003AE6 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003AEA 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003AEE 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003AF2 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
00003AF6 6100 0000                  		bsr.w	OscillateNumInit
00003AFA 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003B00 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003B06 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003B0C 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003B12 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003B18 7000                       		moveq	#0,d0
00003B1A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003B1E E548                       		lsl.w	#2,d0
00003B20 2271 0000                  		movea.l	(a1,d0.w),a1
00003B24 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003B28 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003B2A 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003B30 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003B34 5340                       		subq.w	#1,d0
00003B36 E548                       		lsl.w	#2,d0
00003B38 2271 0000                  		movea.l	(a1,d0.w),a1
00003B3C                            
00003B3C                            Level_Demo:
00003B3C 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003B42 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003B46 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003B4C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003B50 6A00                       		bpl.s	Level_ChkWaterPal
00003B52 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003B58 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003B5E 6600                       		bne.s	Level_ChkWaterPal
00003B60 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003B66                            
00003B66                            Level_ChkWaterPal:
00003B66 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003B6C 6600                       		bne.s	Level_Delay	; if not, branch
00003B6E 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003B70 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003B76 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003B78 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003B7A                            
00003B7A                            Level_WaterPal2:
00003B7A 6100 E5E4                  		bsr.w	PalLoad4_Water
00003B7E                            
00003B7E                            Level_Delay:
00003B7E 323C 0003                  		move.w	#3,d1
00003B82                            
00003B82                            Level_DelayLoop:
00003B82 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003B88 6100 EE3A                  		bsr.w	DelayProgram
00003B8C 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003B90                            
00003B90 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003B96 6100 E276                  		bsr.w	Pal_FadeTo2
00003B9A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003B9E 6B00                       		bmi.s	Level_ClrCardArt
00003BA0 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003BA4 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003BA8 5838 D124                  		addq.b	#4,($FFFFD124).w
00003BAC 5838 D164                  		addq.b	#4,($FFFFD164).w
00003BB0 6000                       		bra.s	Level_StartGame
00003BB2                            ; ===========================================================================
00003BB2                            
00003BB2                            Level_ClrCardArt:
00003BB2 7002                       		moveq	#2,d0
00003BB4 4EB9 0000 145E             		jsr	(LoadPLC).l	; load explosion patterns
00003BBA 7000                       		moveq	#0,d0
00003BBC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003BC0 0640 0015                  		addi.w	#$15,d0
00003BC4 4EB9 0000 145E             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003BCA                            
00003BCA                            Level_StartGame:
00003BCA 11FC 0001 870D             		move.b	#1,(Level_started_flag).w
00003BD0 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003BD6                            
00003BD6                            ; ---------------------------------------------------------------------------
00003BD6                            ; Main level loop (when	all title card and loading sequences are finished)
00003BD6                            ; ---------------------------------------------------------------------------
00003BD6                            
00003BD6                            Level_MainLoop:
00003BD6 6100 D654                  		bsr.w	PauseGame
00003BDA 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003BE0 6100 EDE2                  		bsr.w	DelayProgram
00003BE4 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003BE8 6100 0000                  		bsr.w	MoveSonicInDemo
00003BEC 6100 0000                  		bsr.w	LZWaterEffects
00003BF0 4EB9 0000 0000             		jsr	ObjectsLoad
00003BF6 4A78 FE08                  		tst.w	($FFFFFE08).w
00003BFA 6600                       		bne.s	loc_3B10
00003BFC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003C02 6400                       		bcc.s	loc_3B14
00003C04                            
00003C04                            loc_3B10:
00003C04 6100 0000                  		bsr.w	DeformBgLayer
00003C08                            
00003C08                            loc_3B14:
00003C08 4EB9 0000 0000             		jsr	BuildSprites
00003C0E 4EB9 0000 0000             		jsr	ObjPosLoad
00003C14 4EB9 0000 0000             		jsr	RingsManager
00003C1A 6100 DD7C                  		bsr.w	PalCycle_Load
00003C1E 6100 D8AA                  		bsr.w	RunPLC_RAM
00003C22 6100 0000                  		bsr.w	OscillateNumDo
00003C26 6100 0000                  		bsr.w	ChangeRingFrame
00003C2A 6100 0000                  		bsr.w	SignpostArtLoad
00003C2E 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003C34 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003C36 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003C3A 6600 FC36                  		bne.w	Level		; if yes, branch
00003C3E 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003C44 6700 FF90                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003C48 4E75                       		rts	
00003C4A                            ; ===========================================================================
00003C4A                            
00003C4A                            Level_ChkDemo:				; XREF: Level_MainLoop
00003C4A 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003C4E 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003C50 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003C54 6700                       		beq.s	Level_EndDemo	; if not, branch
00003C56 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003C5C 6700 FF78                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003C60 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00003C66 4E75                       		rts	
00003C68                            ; ===========================================================================
00003C68                            
00003C68                            Level_EndDemo:				; XREF: Level_ChkDemo
00003C68 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003C6E 6600                       		bne.s	loc_3B88	; if not, branch
00003C70 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00003C76 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003C7A 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003C7C 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003C82                            
00003C82                            loc_3B88:
00003C82 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003C88 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003C8E 4278 F794                  		clr.w	($FFFFF794).w
00003C92                            
00003C92                            loc_3B98:
00003C92 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003C98 6100 ED2A                  		bsr.w	DelayProgram
00003C9C 6100 0000                  		bsr.w	MoveSonicInDemo
00003CA0 4EB9 0000 0000             		jsr	ObjectsLoad
00003CA6 4EB9 0000 0000             		jsr	BuildSprites
00003CAC 4EB9 0000 0000             		jsr	ObjPosLoad
00003CB2 5378 F794                  		subq.w	#1,($FFFFF794).w
00003CB6 6A00                       		bpl.s	loc_3BC8
00003CB8 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003CBE 6100 E1EA                  		bsr.w	Pal_FadeOut
00003CC2                            
00003CC2                            loc_3BC8:
00003CC2 4A78 F614                  		tst.w	($FFFFF614).w
00003CC6 66CA                       		bne.s	loc_3B98
00003CC8 4E75                       		rts	
00003CCA                            ; ===========================================================================
00003CCA                            ; ---------------------------------------------------------------------------
00003CCA                            ; Subroutine to	do special water effects in Labyrinth Zone
00003CCA                            ; ---------------------------------------------------------------------------
00003CCA                            
00003CCA                            LZWaterEffects:				; XREF: Level
00003CCA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003CD0 6600                       		bne.s	locret_3C28	; if not, branch
00003CD2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003CD8 6400                       		bcc.s	LZMoveWater
00003CDA 6100 0000                  		bsr.w	LZWindTunnels
00003CDE 6100 0000                  		bsr.w	LZWaterSlides
00003CE2 6100 0000                  		bsr.w	LZDynamicWater
00003CE6                            
00003CE6                            LZMoveWater:
00003CE6 4238 F64E                  		clr.b	($FFFFF64E).w
00003CEA 7000                       		moveq	#0,d0
00003CEC 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003CF0 E248                       		lsr.w	#1,d0
00003CF2 D078 F648                  		add.w	($FFFFF648).w,d0
00003CF6 31C0 F646                  		move.w	d0,($FFFFF646).w
00003CFA 3038 F646                  		move.w	($FFFFF646).w,d0
00003CFE 9078 F704                  		sub.w	($FFFFF704).w,d0
00003D02 6400                       		bcc.s	loc_3C1A
00003D04 4A40                       		tst.w	d0
00003D06 6A00                       		bpl.s	loc_3C1A
00003D08 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003D0E 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003D14                            
00003D14                            loc_3C1A:
00003D14 0C40 00DF                  		cmpi.w	#$DF,d0
00003D18 6500                       		bcs.s	loc_3C24
00003D1A 303C 00DF                  		move.w	#$DF,d0
00003D1E                            
00003D1E                            loc_3C24:
00003D1E 11C0 F625                  		move.b	d0,($FFFFF625).w
00003D22                            
00003D22                            locret_3C28:
00003D22 4E75                       		rts	
00003D24                            ; ===========================================================================
00003D24                            ; ---------------------------------------------------------------------------
00003D24                            ; Labyrinth default water heights
00003D24                            ; ---------------------------------------------------------------------------
00003D24                            WaterHeight:	incbin	misc\lz_heigh.bin
00003D2C                            		even
00003D2C                            ; ===========================================================================
00003D2C                            
00003D2C                            ; ---------------------------------------------------------------------------
00003D2C                            ; Labyrinth dynamic water routines
00003D2C                            ; ---------------------------------------------------------------------------
00003D2C                            
00003D2C                            LZDynamicWater:				; XREF: LZWaterEffects
00003D2C 7000                       		moveq	#0,d0
00003D2E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003D32 D040                       		add.w	d0,d0
00003D34 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003D38 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003D3C 7200                       		moveq	#0,d1
00003D3E 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003D42 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003D46 9078 F648                  		sub.w	($FFFFF648).w,d0
00003D4A 6700                       		beq.s	locret_3C5A
00003D4C 6400                       		bcc.s	loc_3C56
00003D4E 4441                       		neg.w	d1
00003D50                            
00003D50                            loc_3C56:
00003D50 D378 F648                  		add.w	d1,($FFFFF648).w
00003D54                            
00003D54                            locret_3C5A:
00003D54 4E75                       		rts	
00003D56                            ; ===========================================================================
00003D56 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003D58 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003D5A 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003D5C 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003D5E                            ; ===========================================================================
00003D5E                            
00003D5E                            DynWater_LZ1:				; XREF: DynWater_Index
00003D5E 3038 F700                  		move.w	($FFFFF700).w,d0
00003D62 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003D66 6600                       		bne.s	loc_3CD0
00003D68 323C 00B8                  		move.w	#$B8,d1
00003D6C 0C40 0600                  		cmpi.w	#$600,d0
00003D70 6500                       		bcs.s	loc_3CB4
00003D72 323C 0108                  		move.w	#$108,d1
00003D76 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003D7C 6500                       		bcs.s	loc_3CBA
00003D7E 0C40 0C00                  		cmpi.w	#$C00,d0
00003D82 6500                       		bcs.s	loc_3CB4
00003D84 323C 0318                  		move.w	#$318,d1
00003D88 0C40 1080                  		cmpi.w	#$1080,d0
00003D8C 6500                       		bcs.s	loc_3CB4
00003D8E 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003D94 323C 05C8                  		move.w	#$5C8,d1
00003D98 0C40 1380                  		cmpi.w	#$1380,d0
00003D9C 6500                       		bcs.s	loc_3CB4
00003D9E 323C 03A8                  		move.w	#$3A8,d1
00003DA2 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003DA6 6600                       		bne.s	loc_3CB4
00003DA8 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003DAE                            
00003DAE                            loc_3CB4:
00003DAE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DB2 4E75                       		rts	
00003DB4                            ; ===========================================================================
00003DB4                            
00003DB4                            loc_3CBA:				; XREF: DynWater_LZ1
00003DB4 0C40 0C80                  		cmpi.w	#$C80,d0
00003DB8 65F4                       		bcs.s	loc_3CB4
00003DBA 323C 00E8                  		move.w	#$E8,d1
00003DBE 0C40 1500                  		cmpi.w	#$1500,d0
00003DC2 65EA                       		bcs.s	loc_3CB4
00003DC4 323C 0108                  		move.w	#$108,d1
00003DC8 60E4                       		bra.s	loc_3CB4
00003DCA                            ; ===========================================================================
00003DCA                            
00003DCA                            loc_3CD0:				; XREF: DynWater_LZ1
00003DCA 5302                       		subq.b	#1,d2
00003DCC 6600                       		bne.s	locret_3CF4
00003DCE 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00003DD4 6400                       		bcc.s	locret_3CF4
00003DD6 323C 03A8                  		move.w	#$3A8,d1
00003DDA 0C40 1300                  		cmpi.w	#$1300,d0
00003DDE 6500                       		bcs.s	loc_3CF0
00003DE0 323C 0108                  		move.w	#$108,d1
00003DE4 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003DEA                            
00003DEA                            loc_3CF0:
00003DEA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DEE                            
00003DEE                            locret_3CF4:
00003DEE 4E75                       		rts	
00003DF0                            ; ===========================================================================
00003DF0                            
00003DF0                            DynWater_LZ2:				; XREF: DynWater_Index
00003DF0 3038 F700                  		move.w	($FFFFF700).w,d0
00003DF4 323C 0328                  		move.w	#$328,d1
00003DF8 0C40 0500                  		cmpi.w	#$500,d0
00003DFC 6500                       		bcs.s	loc_3D12
00003DFE 323C 03C8                  		move.w	#$3C8,d1
00003E02 0C40 0B00                  		cmpi.w	#$B00,d0
00003E06 6500                       		bcs.s	loc_3D12
00003E08 323C 0428                  		move.w	#$428,d1
00003E0C                            
00003E0C                            loc_3D12:
00003E0C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E10 4E75                       		rts	
00003E12                            ; ===========================================================================
00003E12                            
00003E12                            DynWater_LZ3:				; XREF: DynWater_Index
00003E12 3038 F700                  		move.w	($FFFFF700).w,d0
00003E16 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003E1A 6600                       		bne.s	loc_3D5E
00003E1C 323C 0900                  		move.w	#$900,d1
00003E20 0C40 0600                  		cmpi.w	#$600,d0
00003E24 6500                       		bcs.s	loc_3D54
00003E26 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00003E2C 6500                       		bcs.s	loc_3D54
00003E2E 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003E34 6400                       		bcc.s	loc_3D54
00003E36 323C 04C8                  		move.w	#$4C8,d1
00003E3A 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00003E40 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003E46 303C 00B7                  		move.w	#$B7,d0
00003E4A 6100 D3D4                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00003E4E                            
00003E4E                            loc_3D54:
00003E4E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E52 31C1 F648                  		move.w	d1,($FFFFF648).w
00003E56 4E75                       		rts	
00003E58                            ; ===========================================================================
00003E58                            
00003E58                            loc_3D5E:				; XREF: DynWater_LZ3
00003E58 5302                       		subq.b	#1,d2
00003E5A 6600                       		bne.s	loc_3DA8
00003E5C 323C 04C8                  		move.w	#$4C8,d1
00003E60 0C40 0770                  		cmpi.w	#$770,d0
00003E64 6500                       		bcs.s	loc_3DA2
00003E66 323C 0308                  		move.w	#$308,d1
00003E6A 0C40 1400                  		cmpi.w	#$1400,d0
00003E6E 6500                       		bcs.s	loc_3DA2
00003E70 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00003E76 6700                       		beq.s	loc_3D8E
00003E78 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003E7E 6400                       		bcc.s	loc_3D8E
00003E80 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00003E86 6400                       		bcc.s	loc_3DA2
00003E88                            
00003E88                            loc_3D8E:
00003E88 323C 0508                  		move.w	#$508,d1
00003E8C 31C1 F648                  		move.w	d1,($FFFFF648).w
00003E90 0C40 1770                  		cmpi.w	#$1770,d0
00003E94 6500                       		bcs.s	loc_3DA2
00003E96 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003E9C                            
00003E9C                            loc_3DA2:
00003E9C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003EA0 4E75                       		rts	
00003EA2                            ; ===========================================================================
00003EA2                            
00003EA2                            loc_3DA8:
00003EA2 5302                       		subq.b	#1,d2
00003EA4 6600                       		bne.s	loc_3DD2
00003EA6 323C 0508                  		move.w	#$508,d1
00003EAA 0C40 1860                  		cmpi.w	#$1860,d0
00003EAE 6500                       		bcs.s	loc_3DCC
00003EB0 323C 0188                  		move.w	#$188,d1
00003EB4 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003EB8 6400                       		bcc.s	loc_3DC6
00003EBA B278 F648                  		cmp.w	($FFFFF648).w,d1
00003EBE 6600                       		bne.s	loc_3DCC
00003EC0                            
00003EC0                            loc_3DC6:
00003EC0 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00003EC6                            
00003EC6                            loc_3DCC:
00003EC6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003ECA 4E75                       		rts	
00003ECC                            ; ===========================================================================
00003ECC                            
00003ECC                            loc_3DD2:
00003ECC 5302                       		subq.b	#1,d2
00003ECE 6600                       		bne.s	loc_3E0E
00003ED0 323C 0188                  		move.w	#$188,d1
00003ED4 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003ED8 6500                       		bcs.s	loc_3E04
00003EDA 323C 0900                  		move.w	#$900,d1
00003EDE 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00003EE2 6500                       		bcs.s	loc_3E04
00003EE4 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00003EEA 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00003EF0 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00003EF6 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00003EFC 4E75                       		rts	
00003EFE                            ; ===========================================================================
00003EFE                            
00003EFE                            loc_3E04:
00003EFE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003F02 31C1 F648                  		move.w	d1,($FFFFF648).w
00003F06 4E75                       		rts	
00003F08                            ; ===========================================================================
00003F08                            
00003F08                            loc_3E0E:
00003F08 0C40 1E00                  		cmpi.w	#$1E00,d0
00003F0C 6500                       		bcs.s	locret_3E1A
00003F0E 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00003F14                            
00003F14                            locret_3E1A:
00003F14 4E75                       		rts	
00003F16                            ; ===========================================================================
00003F16                            
00003F16                            DynWater_SBZ3:				; XREF: DynWater_Index
00003F16 323C 0228                  		move.w	#$228,d1
00003F1A 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00003F20 6500                       		bcs.s	loc_3E2C
00003F22 323C 04C8                  		move.w	#$4C8,d1
00003F26                            
00003F26                            loc_3E2C:
00003F26 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003F2A 4E75                       		rts
00003F2C                            
00003F2C                            ; ---------------------------------------------------------------------------
00003F2C                            ; Labyrinth Zone "wind tunnels"	subroutine
00003F2C                            ; ---------------------------------------------------------------------------
00003F2C                            
00003F2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F2C                            
00003F2C                            
00003F2C                            LZWindTunnels:				; XREF: LZWaterEffects
00003F2C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00003F30 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00003F34 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00003F3A 7000                       		moveq	#0,d0
00003F3C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003F40 E748                       		lsl.w	#3,d0
00003F42 D4C0                       		adda.w	d0,a2
00003F44 7200                       		moveq	#0,d1
00003F46 4A38 FE11                  		tst.b	($FFFFFE11).w
00003F4A 6600                       		bne.s	loc_3E56
00003F4C 7201                       		moveq	#1,d1
00003F4E 514A                       		subq.w	#8,a2
00003F50                            
00003F50                            loc_3E56:
00003F50 43F8 D000                  		lea	($FFFFD000).w,a1
00003F54                            
00003F54                            LZWind_Loop:
00003F54 3029 0008                  		move.w	8(a1),d0
00003F58 B052                       		cmp.w	(a2),d0
00003F5A 6500 0000                  		bcs.w	loc_3EF4
00003F5E B06A 0004                  		cmp.w	4(a2),d0
00003F62 6400 0000                  		bcc.w	loc_3EF4
00003F66 3429 000C                  		move.w	$C(a1),d2
00003F6A B46A 0002                  		cmp.w	2(a2),d2
00003F6E 6500                       		bcs.s	loc_3EF4
00003F70 B46A 0006                  		cmp.w	6(a2),d2
00003F74 6400                       		bcc.s	loc_3EF4
00003F76 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003F7A 0200 003F                  		andi.b	#$3F,d0
00003F7E 6600                       		bne.s	loc_3E90
00003F80 303C 00D0                  		move.w	#$D0,d0
00003F84 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play rushing water sound
00003F8A                            
00003F8A                            loc_3E90:
00003F8A 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00003F8E 6600 0000                  		bne.w	locret_3F0A
00003F92 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00003F98 6400                       		bcc.s	loc_3F06
00003F9A 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00003FA0 0440 0080                  		subi.w	#$80,d0
00003FA4 B052                       		cmp.w	(a2),d0
00003FA6 6400                       		bcc.s	LZWind_Move
00003FA8 7002                       		moveq	#2,d0
00003FAA 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00003FB0 6600                       		bne.s	loc_3EBA
00003FB2 4440                       		neg.w	d0
00003FB4                            
00003FB4                            loc_3EBA:
00003FB4 D169 000C                  		add.w	d0,$C(a1)
00003FB8                            
00003FB8                            LZWind_Move:
00003FB8 5869 0008                  		addq.w	#4,8(a1)
00003FBC 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00003FC2 337C 0000 0012             		move.w	#0,$12(a1)
00003FC8 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00003FCE 08E9 0001 0022             		bset	#1,$22(a1)
00003FD4 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00003FDA 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00003FDC 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00003FE0                            
00003FE0                            LZWind_MoveDown:
00003FE0 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00003FE6 6700                       		beq.s	locret_3EF2	; if not, branch
00003FE8 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00003FEC                            
00003FEC                            locret_3EF2:
00003FEC 4E75                       		rts	
00003FEE                            ; ===========================================================================
00003FEE                            
00003FEE                            loc_3EF4:				; XREF: LZWindTunnels
00003FEE 504A                       		addq.w	#8,a2
00003FF0 51C9 FF62                  		dbf	d1,LZWind_Loop
00003FF4 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00003FF8 6700                       		beq.s	locret_3F0A
00003FFA 137C 0000 001C             		move.b	#0,$1C(a1)
00004000                            
00004000                            loc_3F06:
00004000 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004004                            
00004004                            locret_3F0A:
00004004 4E75                       		rts	
00004006                            ; End of function LZWindTunnels
00004006                            
00004006                            ; ===========================================================================
00004006 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
0000400E 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004020 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
0000402E                            					; XREF: LZWindTunnels
0000402E                            		even
0000402E                            
0000402E                            ; ---------------------------------------------------------------------------
0000402E                            ; Labyrinth Zone water slide subroutine
0000402E                            ; ---------------------------------------------------------------------------
0000402E                            
0000402E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000402E                            
0000402E                            
0000402E                            LZWaterSlides:				; XREF: LZWaterEffects
0000402E 43F8 D000                  		lea	($FFFFD000).w,a1
00004032 0829 0001 0022             		btst	#1,$22(a1)
00004038 6600                       		bne.s	loc_3F6A
0000403A 3029 000C                  		move.w	$C(a1),d0
0000403E E248                       		lsr.w	#1,d0
00004040 0240 0380                  		andi.w	#$380,d0
00004044 1229 0008                  		move.b	8(a1),d1
00004048 0241 007F                  		andi.w	#$7F,d1
0000404C D041                       		add.w	d1,d0
0000404E 45F8 A400                  		lea	($FFFFA400).w,a2
00004052 1032 0000                  		move.b	(a2,d0.w),d0
00004056 45FA 0000                  		lea	byte_3FCF(pc),a2
0000405A 7206                       		moveq	#6,d1
0000405C                            
0000405C                            loc_3F62:
0000405C B022                       		cmp.b	-(a2),d0
0000405E 57C9 FFFC                  		dbeq	d1,loc_3F62
00004062 6700                       		beq.s	LZSlide_Move
00004064                            
00004064                            loc_3F6A:
00004064 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00004068 6700                       		beq.s	locret_3F7A
0000406A 337C 0005 003E             		move.w	#5,$3E(a1)
00004070 4238 F7CA                  		clr.b	($FFFFF7CA).w
00004074                            
00004074                            locret_3F7A:
00004074 4E75                       		rts	
00004076                            ; ===========================================================================
00004076                            
00004076                            LZSlide_Move:				; XREF: LZWaterSlides
00004076 0C41 0003                  		cmpi.w	#3,d1
0000407A 6400                       		bcc.s	loc_3F84
0000407C 4E71                       		nop	
0000407E                            
0000407E                            loc_3F84:
0000407E 08A9 0000 0022             		bclr	#0,$22(a1)
00004084 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00004088 1340 0020                  		move.b	d0,$20(a1)
0000408C 6A00                       		bpl.s	loc_3F9A
0000408E 08E9 0000 0022             		bset	#0,$22(a1)
00004094                            
00004094                            loc_3F9A:
00004094 4229 0021                  		clr.b	$21(a1)
00004098 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
0000409E 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000040A4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000040A8 0200 001F                  		andi.b	#$1F,d0
000040AC 6600                       		bne.s	locret_3FBE
000040AE 303C 00D0                  		move.w	#$D0,d0
000040B2 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play water sound
000040B8                            
000040B8                            locret_3FBE:
000040B8 4E75                       		rts	
000040BA                            ; End of function LZWaterSlides
000040BA                            
000040BA                            ; ===========================================================================
000040BA 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
000040C9 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
000040CA                            		even
000040CA                            
000040CA                            ; ---------------------------------------------------------------------------
000040CA                            ; Subroutine to	move Sonic in demo mode
000040CA                            ; ---------------------------------------------------------------------------
000040CA                            
000040CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000040CA                            
000040CA                            
000040CA                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
000040CA 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000040CE 6600                       		bne.s	MoveDemo_On	; if yes, branch
000040D0 4E75                       		rts	
000040D2                            ; ===========================================================================
000040D2                            
000040D2                            ; This is an unused subroutine for recording a demo
000040D2                            
000040D2                            MoveDemo_Record:
000040D2 43F9 0008 0000             		lea	($80000).l,a1
000040D8 3038 F790                  		move.w	($FFFFF790).w,d0
000040DC D2C0                       		adda.w	d0,a1
000040DE 1038 F604                  		move.b	($FFFFF604).w,d0
000040E2 B011                       		cmp.b	(a1),d0
000040E4 6600                       		bne.s	loc_3FFA
000040E6 5229 0001                  		addq.b	#1,1(a1)
000040EA 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
000040F0 6700                       		beq.s	loc_3FFA
000040F2 4E75                       		rts	
000040F4                            ; ===========================================================================
000040F4                            
000040F4                            loc_3FFA:				; XREF: MoveDemo_Record
000040F4 1340 0002                  		move.b	d0,2(a1)
000040F8 137C 0000 0003             		move.b	#0,3(a1)
000040FE 5478 F790                  		addq.w	#2,($FFFFF790).w
00004102 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004108 4E75                       		rts	
0000410A                            ; ===========================================================================
0000410A                            
0000410A                            MoveDemo_On:				; XREF: MoveSonicInDemo
0000410A 4A38 F604                  		tst.b	($FFFFF604).w
0000410E 6A00                       		bpl.s	loc_4022
00004110 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004114 6B00                       		bmi.s	loc_4022
00004116 11FC 0004 F600             		move.b	#4,($FFFFF600).w
0000411C                            
0000411C                            loc_4022:
0000411C 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004122 7000                       		moveq	#0,d0
00004124 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004128 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0000412E 6600                       		bne.s	loc_4038
00004130 7006                       		moveq	#6,d0
00004132                            
00004132                            loc_4038:
00004132 E548                       		lsl.w	#2,d0
00004134 2271 0000                  		movea.l	(a1,d0.w),a1
00004138 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000413C 6A00                       		bpl.s	loc_4056
0000413E 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004144 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004148 5340                       		subq.w	#1,d0
0000414A E548                       		lsl.w	#2,d0
0000414C 2271 0000                  		movea.l	(a1,d0.w),a1
00004150                            
00004150                            loc_4056:
00004150 3038 F790                  		move.w	($FFFFF790).w,d0
00004154 D2C0                       		adda.w	d0,a1
00004156 1011                       		move.b	(a1),d0
00004158 41F8 F604                  		lea	($FFFFF604).w,a0
0000415C 1200                       		move.b	d0,d1
0000415E 1428 FFFE                  		move.b	-2(a0),d2
00004162 B500                       		eor.b	d2,d0
00004164 10C1                       		move.b	d1,(a0)+
00004166 C001                       		and.b	d1,d0
00004168 10C0                       		move.b	d0,(a0)+
0000416A 5338 F792                  		subq.b	#1,($FFFFF792).w
0000416E 6400                       		bcc.s	locret_407E
00004170 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004176 5478 F790                  		addq.w	#2,($FFFFF790).w
0000417A                            
0000417A                            locret_407E:
0000417A 4E75                       		rts	
0000417C                            ; End of function MoveSonicInDemo
0000417C                            
0000417C                            ; ===========================================================================
0000417C                            ; ---------------------------------------------------------------------------
0000417C                            ; Demo sequence	pointers
0000417C                            ; ---------------------------------------------------------------------------
0000417C                            Demo_Index:
0000417C                            	include "_inc\Demo pointers for intro.asm"
0000417C                            ; ---------------------------------------------------------------------------
0000417C                            ; Demo sequence	pointers
0000417C                            ; ---------------------------------------------------------------------------
0000417C 0000 0000                  	dc.l Demo_GHZ
00004180 0000 0000                  	dc.l Demo_GHZ
00004184 0000 0000                  	dc.l Demo_MZ
00004188 0000 0000                  	dc.l Demo_MZ
0000418C 0000 0000                  	dc.l Demo_SYZ
00004190 0000 0000                  	dc.l Demo_SYZ
00004194 0000 0000                  	dc.l Demo_SS
00004198 0000 0000                  	dc.l Demo_SS
00004198 0000 0000                  	dc.l Demo_SS
0000419C                            
0000419C                            Demo_EndIndex:
0000419C                            	include "_inc\Demo pointers for ending.asm"
0000419C                            ; ---------------------------------------------------------------------------
0000419C                            ; Demo (ending) sequence pointers
0000419C                            ; ---------------------------------------------------------------------------
0000419C 0000 0000                  	dc.l Demo_EndGHZ1
000041A0 0000 0000                  	dc.l Demo_EndMZ
000041A4 0000 0000                  	dc.l Demo_EndSYZ
000041A8 0000 0000                  	dc.l Demo_EndLZ
000041AC 0000 0000                  	dc.l Demo_EndSLZ
000041B0 0000 0000                  	dc.l Demo_EndSBZ1
000041B4 0000 0000                  	dc.l Demo_EndSBZ2
000041B8 0000 0000                  	dc.l Demo_EndGHZ2
000041B8 0000 0000                  	dc.l Demo_EndGHZ2
000041BC                            
000041BC 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000041CC 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000041DC 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000041EC                            		even
000041EC                            
000041EC                            ; ---------------------------------------------------------------------------
000041EC                            ; Collision index loading subroutine
000041EC                            ; ---------------------------------------------------------------------------
000041EC                            
000041EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000041EC                            
000041EC                            
000041EC                            ColIndexLoad:				; XREF: Level
000041EC 7000                       		moveq	#0,d0
000041EE 1038 FE10                  		move.b	($FFFFFE10).w,d0
000041F2 E548                       		lsl.w	#2,d0
000041F4 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
000041FA 4E75                       		rts	
000041FC                            ; End of function ColIndexLoad
000041FC                            
000041FC                            ; ===========================================================================
000041FC                            ; ---------------------------------------------------------------------------
000041FC                            ; Collision index pointers
000041FC                            ; ---------------------------------------------------------------------------
000041FC                            ColPointers:
000041FC                            	include "_inc\Collision index pointers.asm"
000041FC                            ; ---------------------------------------------------------------------------
000041FC                            ; Collision index pointers
000041FC                            ; ---------------------------------------------------------------------------
000041FC 0000 0000                  	dc.l Col_GHZ
00004200 0000 0000                  	dc.l Col_LZ
00004204 0000 0000                  	dc.l Col_MZ
00004208 0000 0000                  	dc.l Col_SLZ
0000420C 0000 0000                  	dc.l Col_SYZ
00004210 0000 0000                  	dc.l Col_SBZ
00004210 0000 0000                  	dc.l Col_SBZ
00004214                            
00004214                            ; ---------------------------------------------------------------------------
00004214                            ; Oscillating number subroutine
00004214                            ; ---------------------------------------------------------------------------
00004214                            
00004214                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004214                            
00004214                            
00004214                            OscillateNumInit:			; XREF: Level
00004214 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004218 45F9 0000 0000             		lea	(Osc_Data).l,a2
0000421E 7220                       		moveq	#$20,d1
00004220                            
00004220                            Osc_Loop:
00004220 32DA                       		move.w	(a2)+,(a1)+
00004222 51C9 FFFC                  		dbf	d1,Osc_Loop
00004226 4E75                       		rts	
00004228                            ; End of function OscillateNumInit
00004228                            
00004228                            ; ===========================================================================
00004228 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
0000422C 0000 0080                  		dc.w 0,	$80
00004230 0000 0080                  		dc.w 0,	$80
00004234 0000 0080                  		dc.w 0,	$80
00004238 0000 0080                  		dc.w 0,	$80
0000423C 0000 0080                  		dc.w 0,	$80
00004240 0000 0080                  		dc.w 0,	$80
00004244 0000 0080                  		dc.w 0,	$80
00004248 0000 0080                  		dc.w 0,	$80
0000424C 0000 50F0                  		dc.w 0,	$50F0
00004250 011E 2080                  		dc.w $11E, $2080
00004254 00B4 3080                  		dc.w $B4, $3080
00004258 010E 5080                  		dc.w $10E, $5080
0000425C 01C2 7080                  		dc.w $1C2, $7080
00004260 0276 0080                  		dc.w $276, $80
00004264 0000 0080                  		dc.w 0,	$80
00004268 0000                       		dc.w 0
0000426A                            		even
0000426A                            
0000426A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000426A                            
0000426A                            
0000426A                            OscillateNumDo:				; XREF: Level
0000426A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004270 6400                       		bcc.s	locret_41C4
00004272 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004276 45F9 0000 0000             		lea	(Osc_Data2).l,a2
0000427C 3619                       		move.w	(a1)+,d3
0000427E 720F                       		moveq	#$F,d1
00004280                            
00004280                            loc_4184:
00004280 341A                       		move.w	(a2)+,d2
00004282 381A                       		move.w	(a2)+,d4
00004284 0303                       		btst	d1,d3
00004286 6600                       		bne.s	loc_41A4
00004288 3029 0002                  		move.w	2(a1),d0
0000428C D042                       		add.w	d2,d0
0000428E 3340 0002                  		move.w	d0,2(a1)
00004292 D151                       		add.w	d0,0(a1)
00004294 B811                       		cmp.b	0(a1),d4
00004296 6200                       		bhi.s	loc_41BA
00004298 03C3                       		bset	d1,d3
0000429A 6000                       		bra.s	loc_41BA
0000429C                            ; ===========================================================================
0000429C                            
0000429C                            loc_41A4:				; XREF: OscillateNumDo
0000429C 3029 0002                  		move.w	2(a1),d0
000042A0 9042                       		sub.w	d2,d0
000042A2 3340 0002                  		move.w	d0,2(a1)
000042A6 D151                       		add.w	d0,0(a1)
000042A8 B811                       		cmp.b	0(a1),d4
000042AA 6300                       		bls.s	loc_41BA
000042AC 0383                       		bclr	d1,d3
000042AE                            
000042AE                            loc_41BA:
000042AE 5849                       		addq.w	#4,a1
000042B0 51C9 FFCE                  		dbf	d1,loc_4184
000042B4 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
000042B8                            
000042B8                            locret_41C4:
000042B8 4E75                       		rts	
000042BA                            ; End of function OscillateNumDo
000042BA                            
000042BA                            ; ===========================================================================
000042BA 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
000042BE 0002 0018                  		dc.w 2,	$18
000042C2 0002 0020                  		dc.w 2,	$20
000042C6 0002 0030                  		dc.w 2,	$30
000042CA 0004 0020                  		dc.w 4,	$20
000042CE 0008 0008                  		dc.w 8,	8
000042D2 0008 0040                  		dc.w 8,	$40
000042D6 0004 0040                  		dc.w 4,	$40
000042DA 0002 0050                  		dc.w 2,	$50
000042DE 0002 0050                  		dc.w 2,	$50
000042E2 0002 0020                  		dc.w 2,	$20
000042E6 0003 0030                  		dc.w 3,	$30
000042EA 0005 0050                  		dc.w 5,	$50
000042EE 0007 0070                  		dc.w 7,	$70
000042F2 0002 0010                  		dc.w 2,	$10
000042F6 0002 0010                  		dc.w 2,	$10
000042FA                            		even
000042FA                            
000042FA                            ; ---------------------------------------------------------------------------
000042FA                            ; Subroutine to	change object animation	variables (rings, giant	rings)
000042FA                            ; ---------------------------------------------------------------------------
000042FA                            
000042FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000042FA                            
000042FA                            
000042FA                            ChangeRingFrame:			; XREF: Level
000042FA 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
000042FE 6A00                       		bpl.s	loc_421C
00004300 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004306 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0000430A 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004310                            
00004310                            loc_421C:
00004310 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004314 6A00                       		bpl.s	loc_4232
00004316 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0000431C 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004320 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004326                            
00004326                            loc_4232:
00004326 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000432A 6A00                       		bpl.s	loc_4250
0000432C 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004332 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004336 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
0000433C 6500                       		bcs.s	loc_4250
0000433E 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004344                            
00004344                            loc_4250:
00004344 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004348 6700                       		beq.s	locret_4272
0000434A 7000                       		moveq	#0,d0
0000434C 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004350 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004354 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004358 EF58                       		rol.w	#7,d0
0000435A 0240 0003                  		andi.w	#3,d0
0000435E 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004362 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004366                            
00004366                            locret_4272:
00004366 4E75                       		rts	
00004368                            ; End of function ChangeRingFrame
00004368                            
00004368                            ; ---------------------------------------------------------------------------
00004368                            ; End-of-act signpost pattern loading subroutine
00004368                            ; ---------------------------------------------------------------------------
00004368                            
00004368                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004368                            
00004368                            
00004368                            SignpostArtLoad:			; XREF: Level
00004368 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0000436C 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004370 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004376 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004378 3038 F700                  		move.w	($FFFFF700).w,d0
0000437C 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004380 0441 0100                  		subi.w	#$100,d1
00004384 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004386 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004388 4A38 FE1E                  		tst.b	($FFFFFE1E).w
0000438C 6700                       		beq.s	Signpost_Exit
0000438E B278 F728                  		cmp.w	($FFFFF728).w,d1
00004392 6700                       		beq.s	Signpost_Exit
00004394 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004398 7012                       		moveq	#$12,d0
0000439A 6000 D0F4                  		bra.w	LoadPLC2	; load signpost	patterns
0000439E                            ; ===========================================================================
0000439E                            
0000439E                            Signpost_Exit:
0000439E 4E75                       		rts	
000043A0                            ; End of function SignpostArtLoad
000043A0                            
000043A0                            ; ===========================================================================
000043A0                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004420                            Demo_MZ:	incbin	demodata\i_mz.bin
00004550                            Demo_SYZ:	incbin	demodata\i_syz.bin
000045D0                            Demo_SS:	incbin	demodata\i_ss.bin
000046D0                            ; ===========================================================================
000046D0                            
000046D0                            ; ---------------------------------------------------------------------------
000046D0                            ; Special Stage
000046D0                            ; ---------------------------------------------------------------------------
000046D0                            
000046D0                            SpecialStage:				; XREF: GameModeArray
000046D0 303C 00CA                  		move.w	#$CA,d0
000046D4 6100 CB4A                  		bsr.w	PlaySound_Special ; play special stage entry sound
000046D8 4EB9 0000 0000             		jsr	BuildSprites
000046DE 6100 D8B0                  		bsr.w	Pal_MakeFlash
000046E2 46FC 2700                  		move	#$2700,sr
000046E6 4DF9 00C0 0004             		lea	($C00004).l,a6
000046EC 3CBC 8B03                  		move.w	#$8B03,(a6)
000046F0 3CBC 8004                  		move.w	#$8004,(a6)
000046F4 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
000046FA 3CBC 9011                  		move.w	#$9011,(a6)
000046FE 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004702 0200 00BF                  		andi.b	#$BF,d0
00004706 33C0 00C0 0004             		move.w	d0,($C00004).l
0000470C 6100 C9EC                  		bsr.w	ClearScreen
00004710 46FC 2300                  		move	#$2300,sr
00004714 4BF9 00C0 0004             		lea	($C00004).l,a5
0000471A 3ABC 8F01                  		move.w	#$8F01,(a5)
0000471E 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004724 3ABC 9780                  		move.w	#$9780,(a5)
00004728 2ABC 5000 0081             		move.l	#$50000081,(a5)
0000472E 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004736                            
00004736                            loc_463C:
00004736 3215                       		move.w	(a5),d1
00004738 0801 0001                  		btst	#1,d1
0000473C 66F8                       		bne.s	loc_463C
0000473E 3ABC 8F02                  		move.w	#$8F02,(a5)
00004742 6100 0000                  		bsr.w	SS_BGLoad
00004746 7014                       		moveq	#$14,d0
00004748 6100 CE80                  		bsr.w	RunPLC_ROM	; load special stage patterns
0000474C                            
0000474C 43F8 D000                  		lea	($FFFFD000).w,a1
00004750 7000                       		moveq	#0,d0
00004752 323C 07FF                  		move.w	#$7FF,d1
00004756                            
00004756                            SS_ClrObjRam:
00004756 22C0                       		move.l	d0,(a1)+
00004758 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
0000475C                            
0000475C 43F8 F700                  		lea	($FFFFF700).w,a1
00004760 7000                       		moveq	#0,d0
00004762 323C 003F                  		move.w	#$3F,d1
00004766                            
00004766                            SS_ClrRam:
00004766 22C0                       		move.l	d0,(a1)+
00004768 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
0000476C                            
0000476C 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004770 7000                       		moveq	#0,d0
00004772 323C 0027                  		move.w	#$27,d1
00004776                            
00004776                            SS_ClrRam2:
00004776 22C0                       		move.l	d0,(a1)+
00004778 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
0000477C                            
0000477C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004780 7000                       		moveq	#0,d0
00004782 323C 007F                  		move.w	#$7F,d1
00004786                            
00004786                            SS_ClrNemRam:
00004786 22C0                       		move.l	d0,(a1)+
00004788 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
0000478C 4238 F64E                  		clr.b	($FFFFF64E).w
00004790 4278 FE02                  		clr.w	($FFFFFE02).w
00004794 700A                       		moveq	#$A,d0
00004796 6100 D978                  		bsr.w	PalLoad1	; load special stage pallet
0000479A 4EB9 0000 0000             		jsr	SS_Load
000047A0 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
000047A6 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000047AE 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000047B6 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
000047BC 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w
000047C2 6100 0000                  		bsr.w	PalCycle_SS
000047C6 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w		
000047CA 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
000047CE 11FC 00FF FFF9             		move.b	#$FF,(v_ssangleprev).w	; fill previous angle with obviously false value to force an update
000047D4 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
000047DA 303C 0089                  		move.w	#$89,d0
000047DE 6100 CA3A                  		bsr.w	PlaySound	; play special stage BG	music
000047E2 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000047E8 43F9 0000 417C             		lea	(Demo_Index).l,a1
000047EE 7006                       		moveq	#6,d0
000047F0 E548                       		lsl.w	#2,d0
000047F2 2271 0000                  		movea.l	(a1,d0.w),a1
000047F6 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
000047FC 5338 F792                  		subq.b	#1,($FFFFF792).w
00004800 4278 FE20                  		clr.w	($FFFFFE20).w
00004804 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004808 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
0000480E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004814 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004818 6700                       		beq.s	SS_NoDebug	; if not, branch
0000481A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004820 6700                       		beq.s	SS_NoDebug	; if not, branch
00004822 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004828                            
00004828                            SS_NoDebug:
00004828 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000482C 0000 0040                  		ori.b	#$40,d0
00004830 33C0 00C0 0004             		move.w	d0,($C00004).l
00004836 6100 D6D0                  		bsr.w	Pal_MakeWhite
0000483A                            
0000483A                            ; ---------------------------------------------------------------------------
0000483A                            ; Main Special Stage loop
0000483A                            ; ---------------------------------------------------------------------------
0000483A                            
0000483A                            SS_MainLoop:
0000483A 6100 C9F0                  		bsr.w	PauseGame
0000483E 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004844 6100 E17E                  		bsr.w	DelayProgram
00004848 6100 F880                  		bsr.w	MoveSonicInDemo
0000484C 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004852 4EB9 0000 0000             		jsr	ObjectsLoad
00004858 4EB9 0000 0000             		jsr	BuildSprites
0000485E 4EB9 0000 0000             		jsr	SS_ShowLayout
00004864 6100 0000                  		bsr.w	SS_BGAnimate
00004868 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000486C 6700                       		beq.s	SS_ChkEnd	; if not, branch
0000486E 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004872 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004876                            
00004876                            SS_ChkEnd:
00004876 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
0000487C 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004880                            
00004880 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004884 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004888 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000488E 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004894 6500                       		bcs.s	SS_End		; if not, branch
00004896 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
0000489A                            
0000489A                            SS_End:
0000489A 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
000048A0 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000048A6 4278 F794                  		clr.w	($FFFFF794).w
000048AA                            
000048AA                            SS_EndLoop:
000048AA 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000048B0 6100 E112                  		bsr.w	DelayProgram
000048B4 6100 F814                  		bsr.w	MoveSonicInDemo
000048B8 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000048BE 4EB9 0000 0000             		jsr	ObjectsLoad
000048C4 4EB9 0000 0000             		jsr	BuildSprites
000048CA 4EB9 0000 0000             		jsr	SS_ShowLayout
000048D0 6100 0000                  		bsr.w	SS_BGAnimate
000048D4 5378 F794                  		subq.w	#1,($FFFFF794).w
000048D8 6A00                       		bpl.s	loc_47D4
000048DA 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000048E0 6100 D6CE                  		bsr.w	Pal_ToWhite
000048E4                            
000048E4                            loc_47D4:
000048E4 4A78 F614                  		tst.w	($FFFFF614).w
000048E8 66C0                       		bne.s	SS_EndLoop
000048EA                            
000048EA 46FC 2700                  		move	#$2700,sr
000048EE 4DF9 00C0 0004             		lea	($C00004).l,a6
000048F4 3CBC 8230                  		move.w	#$8230,(a6)
000048F8 3CBC 8407                  		move.w	#$8407,(a6)
000048FC 3CBC 9001                  		move.w	#$9001,(a6)
00004900 6100 C7F8                  		bsr.w	ClearScreen
00004904 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
0000490E 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
00004914 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
0000491A 4EB8 143A                          jsr LoadUncArt          ; load uncompressed art
0000491E 4EB9 0000 0000             		jsr	Hud_Base
00004924 46FC 2300                  		move	#$2300,sr
00004928 7011                       		moveq	#$11,d0
0000492A 6100 D800                  		bsr.w	PalLoad2	; load results screen pallet
0000492E 7000                       		moveq	#0,d0
00004930 6100 CB5E                  		bsr.w	LoadPLC2
00004934 701B                       		moveq	#$1B,d0
00004936 6100 CB26                  		bsr.w	LoadPLC		; load results screen patterns
0000493A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004940 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004946 3038 FE20                  		move.w	($FFFFFE20).w,d0
0000494A C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
0000494E 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004952 303C 008E                  		move.w	#$8E,d0
00004956 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play end-of-level music
0000495C 43F8 D000                  		lea	($FFFFD000).w,a1
00004960 7000                       		moveq	#0,d0
00004962 323C 07FF                  		move.w	#$7FF,d1
00004966                            
00004966                            SS_EndClrObjRam:
00004966 22C0                       		move.l	d0,(a1)+
00004968 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
0000496C                            
0000496C 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004972                            
00004972                            SS_NormalExit:
00004972 6100 C8B8                  		bsr.w	PauseGame
00004976 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000497C 6100 E046                  		bsr.w	DelayProgram
00004980 4EB9 0000 0000             		jsr	ObjectsLoad
00004986 4EB9 0000 0000             		jsr	BuildSprites
0000498C 6100 CB3C                  		bsr.w	RunPLC_RAM
00004990 4A78 FE02                  		tst.w	($FFFFFE02).w
00004994 67DC                       		beq.s	SS_NormalExit
00004996 4AB8 F680                  		tst.l	($FFFFF680).w
0000499A 66D6                       		bne.s	SS_NormalExit
0000499C 303C 00CA                  		move.w	#$CA,d0
000049A0 6100 C87E                  		bsr.w	PlaySound_Special ; play special stage exit sound
000049A4 6100 D5EA                  		bsr.w	Pal_MakeFlash
000049A8 4E75                       		rts	
000049AA                            ; ===========================================================================
000049AA                            
000049AA                            SS_ToSegaScreen:
000049AA 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set screen mode to 00 (Sega screen)
000049B0 4E75                       		rts
000049B2                            
000049B2                            ; ---------------------------------------------------------------------------
000049B2                            ; Special stage	background loading subroutine
000049B2                            ; ---------------------------------------------------------------------------
000049B2                            
000049B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000049B2                            
000049B2                            
000049B2                            SS_BGLoad:				; XREF: SpecialStage
000049B2 43F9 00FF 0000             		lea	($FF0000).l,a1
000049B8 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000049BE 303C 4051                  		move.w	#$4051,d0
000049C2 6100 CC38                  		bsr.w	EniDec
000049C6 263C 5000 0001             		move.l	#$50000001,d3
000049CC 45F9 00FF 0080             		lea	($FF0080).l,a2
000049D2 7E06                       		moveq	#6,d7
000049D4                            
000049D4                            loc_48BE:
000049D4 2003                       		move.l	d3,d0
000049D6 7C03                       		moveq	#3,d6
000049D8 7800                       		moveq	#0,d4
000049DA 0C47 0003                  		cmpi.w	#3,d7
000049DE 6400                       		bcc.s	loc_48CC
000049E0 7801                       		moveq	#1,d4
000049E2                            
000049E2                            loc_48CC:
000049E2 7A07                       		moveq	#7,d5
000049E4                            
000049E4                            loc_48CE:
000049E4 224A                       		movea.l	a2,a1
000049E6 0A04 0001                  		eori.b	#1,d4
000049EA 6600                       		bne.s	loc_48E2
000049EC 0C47 0006                  		cmpi.w	#6,d7
000049F0 6600                       		bne.s	loc_48F2
000049F2 43F9 00FF 0000             		lea	($FF0000).l,a1
000049F8                            
000049F8                            loc_48E2:
000049F8 48E7 F800                  		movem.l	d0-d4,-(sp)
000049FC 7207                       		moveq	#7,d1
000049FE 7407                       		moveq	#7,d2
00004A00 6100 C8E6                  		bsr.w	ShowVDPGraphics
00004A04 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004A08                            
00004A08                            loc_48F2:
00004A08 0680 0010 0000             		addi.l	#$100000,d0
00004A0E 51CD FFD4                  		dbf	d5,loc_48CE
00004A12 0680 0380 0000             		addi.l	#$3800000,d0
00004A18 0A04 0001                  		eori.b	#1,d4
00004A1C 51CE FFC4                  		dbf	d6,loc_48CC
00004A20 0683 1000 0000             		addi.l	#$10000000,d3
00004A26 6A00                       		bpl.s	loc_491C
00004A28 4843                       		swap	d3
00004A2A 0683 0000 C000             		addi.l	#$C000,d3
00004A30 4843                       		swap	d3
00004A32                            
00004A32                            loc_491C:
00004A32 D4FC 0080                  		adda.w	#$80,a2
00004A36 51CF FF9C                  		dbf	d7,loc_48BE
00004A3A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004A40 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004A46 303C 4000                  		move.w	#$4000,d0
00004A4A 6100 CBB0                  		bsr.w	EniDec
00004A4E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004A54 203C 4000 0003             		move.l	#$40000003,d0
00004A5A 723F                       		moveq	#$3F,d1
00004A5C 741F                       		moveq	#$1F,d2
00004A5E 6100 C888                  		bsr.w	ShowVDPGraphics
00004A62 43F9 00FF 0000             		lea	($FF0000).l,a1
00004A68 203C 5000 0003             		move.l	#$50000003,d0
00004A6E 723F                       		moveq	#$3F,d1
00004A70 743F                       		moveq	#$3F,d2
00004A72 6100 C874                  		bsr.w	ShowVDPGraphics
00004A76 4E75                       		rts	
00004A78                            ; End of function SS_BGLoad
00004A78                            
00004A78                            ; ---------------------------------------------------------------------------
00004A78                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
00004A78                            ; to be issued the next time ProcessDMAQueue is called.
00004A78                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
00004A78                            ; by issuing the commands (this subroutine DOES check for overflow)
00004A78                            ; ---------------------------------------------------------------------------
00004A78                            ; In case you wish to use this queue system outside of the spin dash, this is the
00004A78                            ; registers in which it expects data in:
00004A78                            ; d1.l: Address to data (In 68k address space)
00004A78                            ; d2.w: Destination in VRAM
00004A78                            ; d3.w: Length of data
00004A78                            ; ---------------------------------------------------------------------------
00004A78                            
00004A78                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00004A78                            
00004A78                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
00004A78                            QueueDMATransfer:
00004A78 2278 C8FC                  		movea.l ($FFFFC8FC).w,a1
00004A7C B2FC C8FC                  		cmpa.w #$C8FC,a1
00004A80 6700                       		beq.s QueueDMATransfer_Done ; return if there's no more room in the buffer
00004A82                            
00004A82                            ; piece together some VDP commands and store them for later...
00004A82 303C 9300                  		move.w #$9300,d0 ; command to specify DMA transfer length & $00FF
00004A86 1003                       		move.b d3,d0
00004A88 32C0                       		move.w d0,(a1)+ ; store command
00004A8A                            
00004A8A 303C 9400                  		move.w #$9400,d0 ; command to specify DMA transfer length & $FF00
00004A8E E04B                       		lsr.w #8,d3
00004A90 1003                       		move.b d3,d0
00004A92 32C0                       		move.w d0,(a1)+ ; store command
00004A94                            
00004A94 303C 9500                  		move.w #$9500,d0 ; command to specify source address & $0001FE
00004A98 E289                       		lsr.l #1,d1
00004A9A 1001                       		move.b d1,d0
00004A9C 32C0                       		move.w d0,(a1)+ ; store command
00004A9E                            
00004A9E 303C 9600                  		move.w #$9600,d0 ; command to specify source address & $01FE00
00004AA2 E089                       		lsr.l #8,d1
00004AA4 1001                       		move.b d1,d0
00004AA6 32C0                       		move.w d0,(a1)+ ; store command
00004AA8                            
00004AA8 303C 9700                  		move.w #$9700,d0 ; command to specify source address & $FE0000
00004AAC E089                       		lsr.l #8,d1
00004AAE 1001                       		move.b d1,d0
00004AB0 32C0                       		move.w d0,(a1)+ ; store command
00004AB2                            
00004AB2 0282 0000 FFFF             		andi.l #$FFFF,d2 ; command to specify destination address and begin DMA
00004AB8 E58A                       		lsl.l #2,d2
00004ABA E44A                       		lsr.w #2,d2
00004ABC 4842                       		swap d2
00004ABE 0082 4000 0080             		ori.l #$40000080,d2 ; set bits to specify VRAM transfer
00004AC4 22C2                       		move.l d2,(a1)+ ; store command
00004AC6                            
00004AC6 21C9 C8FC                  		move.l a1,($FFFFC8FC).w ; set the next free slot address
00004ACA B2FC C8FC                  		cmpa.w #$C8FC,a1
00004ACE 6700                       		beq.s QueueDMATransfer_Done ; return if there's no more room in the buffer
00004AD0 32BC 0000                  		move.w #0,(a1) ; put a stop token at the end of the used part of the buffer
00004AD4                            ; return_14AA:
00004AD4                            QueueDMATransfer_Done:
00004AD4 4E75                       		rts
00004AD6                            ; End of function QueueDMATransfer
00004AD6                            
00004AD6                            ; ---------------------------------------------------------------------------
00004AD6                            ; Subroutine for issuing all VDP commands that were queued
00004AD6                            ; (by earlier calls to QueueDMATransfer)
00004AD6                            ; Resets the queue when it's done
00004AD6                            ; ---------------------------------------------------------------------------
00004AD6                            
00004AD6                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00004AD6                            
00004AD6                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
00004AD6                            ProcessDMAQueue:
00004AD6 4BF9 00C0 0004             		lea ($C00004).l,a5
00004ADC 43F8 C800                  		lea ($FFFFC800).w,a1
00004AE0                            ; loc_14B6:
00004AE0                            ProcessDMAQueue_Loop:
00004AE0 3019                       		move.w (a1)+,d0
00004AE2 6700                       		beq.s ProcessDMAQueue_Done ; branch if we reached a stop token
00004AE4                            		; issue a set of VDP commands...
00004AE4 3A80                       		move.w d0,(a5) ; transfer length
00004AE6 3A99                       		move.w (a1)+,(a5) ; transfer length
00004AE8 3A99                       		move.w (a1)+,(a5) ; source address
00004AEA 3A99                       		move.w (a1)+,(a5) ; source address
00004AEC 3A99                       		move.w (a1)+,(a5) ; source address
00004AEE 3A99                       		move.w (a1)+,(a5) ; destination
00004AF0 3A99                       		move.w (a1)+,(a5) ; destination
00004AF2 B2FC C8FC                  		cmpa.w #$C8FC,a1
00004AF6 66E8                       		bne.s ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
00004AF8                            ; loc_14CE:
00004AF8                            ProcessDMAQueue_Done:
00004AF8 31FC 0000 C800             		move.w #0,($FFFFC800).w
00004AFE 21FC FFFF C800 C8FC        		move.l #$FFFFC800,($FFFFC8FC).w
00004B06 4E75                       		rts
00004B08                            ; End of function ProcessDMAQueue
00004B08                            
00004B08                            ; ---------------------------------------------------------------------------
00004B08                            ; Pallet cycling routine - special stage
00004B08                            ; ---------------------------------------------------------------------------
00004B08                            
00004B08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B08                            
00004B08                            
00004B08                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004B08 4A78 F63A                  		tst.w	($FFFFF63A).w
00004B0C 6600                       		bne.s	locret_49E6
00004B0E 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004B12 6A00                       		bpl.s	locret_49E6
00004B14 4DF9 00C0 0004             		lea	($C00004).l,a6
00004B1A 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004B1E 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004B22 0240 001F                  		andi.w	#$1F,d0
00004B26 E548                       		lsl.w	#2,d0
00004B28 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004B2E D0C0                       		adda.w	d0,a0
00004B30 1018                       		move.b	(a0)+,d0
00004B32 6A00                       		bpl.s	loc_4992
00004B34 303C 01FF                  		move.w	#$1FF,d0
00004B38                            
00004B38                            loc_4992:
00004B38 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004B3C 7000                       		moveq	#0,d0
00004B3E 1018                       		move.b	(a0)+,d0
00004B40 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004B44 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004B4A 43F1 0000                  		lea	(a1,d0.w),a1
00004B4E 303C 8200                  		move.w	#-$7E00,d0
00004B52 1019                       		move.b	(a1)+,d0
00004B54 3C80                       		move.w	d0,(a6)
00004B56 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004B5A 303C 8400                  		move.w	#-$7C00,d0
00004B5E 1018                       		move.b	(a0)+,d0
00004B60 3C80                       		move.w	d0,(a6)
00004B62 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004B6C 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004B74 7000                       		moveq	#0,d0
00004B76 1018                       		move.b	(a0)+,d0
00004B78 6B00                       		bmi.s	loc_49E8
00004B7A 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004B80 D2C0                       		adda.w	d0,a1
00004B82 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004B86 24D9                       		move.l	(a1)+,(a2)+
00004B88 24D9                       		move.l	(a1)+,(a2)+
00004B8A 24D9                       		move.l	(a1)+,(a2)+
00004B8C                            
00004B8C                            locret_49E6:
00004B8C 4E75                       		rts	
00004B8E                            ; ===========================================================================
00004B8E                            
00004B8E                            loc_49E8:				; XREF: PalCycle_SS
00004B8E 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004B92 0C40 008A                  		cmpi.w	#$8A,d0
00004B96 6500                       		bcs.s	loc_49F4
00004B98 5241                       		addq.w	#1,d1
00004B9A                            
00004B9A                            loc_49F4:
00004B9A C2FC 002A                  		mulu.w	#$2A,d1
00004B9E 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004BA4 D2C1                       		adda.w	d1,a1
00004BA6 0240 007F                  		andi.w	#$7F,d0
00004BAA 0880 0000                  		bclr	#0,d0
00004BAE 6700                       		beq.s	loc_4A18
00004BB0 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004BB4 24D1                       		move.l	(a1),(a2)+
00004BB6 24E9 0004                  		move.l	4(a1),(a2)+
00004BBA 24E9 0008                  		move.l	8(a1),(a2)+
00004BBE                            
00004BBE                            loc_4A18:
00004BBE D2FC 000C                  		adda.w	#$C,a1
00004BC2 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004BC6 0C40 000A                  		cmpi.w	#$A,d0
00004BCA 6500                       		bcs.s	loc_4A2E
00004BCC 0440 000A                  		subi.w	#$A,d0
00004BD0 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004BD4                            
00004BD4                            loc_4A2E:
00004BD4 3200                       		move.w	d0,d1
00004BD6 D040                       		add.w	d0,d0
00004BD8 D041                       		add.w	d1,d0
00004BDA D2C0                       		adda.w	d0,a1
00004BDC 24D9                       		move.l	(a1)+,(a2)+
00004BDE 34D9                       		move.w	(a1)+,(a2)+
00004BE0 4E75                       		rts	
00004BE2                            ; End of function PalCycle_SS
00004BE2                            
00004BE2                            ; ===========================================================================
00004BE2 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004BF2                            					; XREF: PalCycle_SS
00004BF2 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004C02 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004C12 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004C22 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004C32 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004C42 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004C52 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004C62                            		even
00004C62 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004C70                            					; XREF: PalCycle_SS
00004C70                            		even
00004C70                            
00004C70                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004CB8                            		even
00004CB8                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004D8A                            		even
00004D8A                            
00004D8A                            ; ---------------------------------------------------------------------------
00004D8A                            ; Subroutine to	make the special stage background animated
00004D8A                            ; ---------------------------------------------------------------------------
00004D8A                            
00004D8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D8A                            
00004D8A                            
00004D8A                            SS_BGAnimate:				; XREF: SpecialStage
00004D8A 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004D8E 6600                       		bne.s	loc_4BF6
00004D90 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004D96 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004D9C                            
00004D9C                            loc_4BF6:
00004D9C 0C40 0008                  		cmpi.w	#8,d0
00004DA0 6400                       		bcc.s	loc_4C4E
00004DA2 0C40 0006                  		cmpi.w	#6,d0
00004DA6 6600                       		bne.s	loc_4C10
00004DA8 5278 F718                  		addq.w	#1,($FFFFF718).w
00004DAC 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004DB0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004DB6                            
00004DB6                            loc_4C10:
00004DB6 7000                       		moveq	#0,d0
00004DB8 3038 F708                  		move.w	($FFFFF708).w,d0
00004DBC 4440                       		neg.w	d0
00004DBE 4840                       		swap	d0
00004DC0 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004DC6 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004DCA 7609                       		moveq	#9,d3
00004DCC                            
00004DCC                            loc_4C26:
00004DCC 302B 0002                  		move.w	2(a3),d0
00004DD0 6100 DC24                  		bsr.w	CalcSine
00004DD4 7400                       		moveq	#0,d2
00004DD6 1419                       		move.b	(a1)+,d2
00004DD8 C1C2                       		muls.w	d2,d0
00004DDA E080                       		asr.l	#8,d0
00004DDC 36C0                       		move.w	d0,(a3)+
00004DDE 1419                       		move.b	(a1)+,d2
00004DE0 4882                       		ext.w	d2
00004DE2 D55B                       		add.w	d2,(a3)+
00004DE4 51CB FFE6                  		dbf	d3,loc_4C26
00004DE8 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004DEC 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004DF2 6000                       		bra.s	loc_4C7E
00004DF4                            ; ===========================================================================
00004DF4                            
00004DF4                            loc_4C4E:				; XREF: SS_BGAnimate
00004DF4 0C40 000C                  		cmpi.w	#$C,d0
00004DF8 6600                       		bne.s	loc_4C74
00004DFA 5378 F718                  		subq.w	#1,($FFFFF718).w
00004DFE 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004E02 243C 0001 8000             		move.l	#$18000,d2
00004E08 7206                       		moveq	#6,d1
00004E0A                            
00004E0A                            loc_4C64:
00004E0A 2013                       		move.l	(a3),d0
00004E0C 9082                       		sub.l	d2,d0
00004E0E 26C0                       		move.l	d0,(a3)+
00004E10 0482 0000 2000             		subi.l	#$2000,d2
00004E16 51C9 FFF2                  		dbf	d1,loc_4C64
00004E1A                            
00004E1A                            loc_4C74:
00004E1A 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004E1E 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004E24                            
00004E24                            loc_4C7E:
00004E24 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004E28 3038 F718                  		move.w	($FFFFF718).w,d0
00004E2C 4440                       		neg.w	d0
00004E2E 4840                       		swap	d0
00004E30 7600                       		moveq	#0,d3
00004E32 161A                       		move.b	(a2)+,d3
00004E34 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004E38 4442                       		neg.w	d2
00004E3A 0242 00FF                  		andi.w	#$FF,d2
00004E3E E54A                       		lsl.w	#2,d2
00004E40                            
00004E40                            loc_4C9A:
00004E40 301B                       		move.w	(a3)+,d0
00004E42 544B                       		addq.w	#2,a3
00004E44 7200                       		moveq	#0,d1
00004E46 121A                       		move.b	(a2)+,d1
00004E48 5341                       		subq.w	#1,d1
00004E4A                            
00004E4A                            loc_4CA4:
00004E4A 2380 2000                  		move.l	d0,(a1,d2.w)
00004E4E 5842                       		addq.w	#4,d2
00004E50 0242 03FC                  		andi.w	#$3FC,d2
00004E54 51C9 FFF4                  		dbf	d1,loc_4CA4
00004E58 51CB FFE6                  		dbf	d3,loc_4C9A
00004E5C 4E75                       		rts	
00004E5E                            ; End of function SS_BGAnimate
00004E5E                            
00004E5E                            ; ===========================================================================
00004E5E 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00004E6A                            		even
00004E6A 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00004E72                            		even
00004E72 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00004E86                            		even
00004E86                            					; XREF: SS_BGAnimate
00004E86                            ; ===========================================================================
00004E86                            
00004E86                            ; ---------------------------------------------------------------------------
00004E86                            ; Continue screen
00004E86                            ; ---------------------------------------------------------------------------
00004E86                            
00004E86                            ContinueScreen:				; XREF: GameModeArray
00004E86 6100 D002                  		bsr.w	Pal_FadeFrom
00004E8A 46FC 2700                  		move	#$2700,sr
00004E8E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004E92 0200 00BF                  		andi.b	#$BF,d0
00004E96 33C0 00C0 0004             		move.w	d0,($C00004).l
00004E9C 4DF9 00C0 0004             		lea	($C00004).l,a6
00004EA2 3CBC 8004                  		move.w	#$8004,(a6)
00004EA6 3CBC 8700                  		move.w	#$8700,(a6)
00004EAA 6100 C24E                  		bsr.w	ClearScreen
00004EAE 43F8 D000                  		lea	($FFFFD000).w,a1
00004EB2 7000                       		moveq	#0,d0
00004EB4 323C 07FF                  		move.w	#$7FF,d1
00004EB8                            
00004EB8                            Cont_ClrObjRam:
00004EB8 22C0                       		move.l	d0,(a1)+
00004EBA 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00004EBE                            
00004EBE 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
00004EC8 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
00004ECE 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
00004ED4 4EB8 143A                          jsr LoadUncArt          ; load uncompressed art
00004ED8 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00004EE2 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00004EE8 6100 C428                  		bsr.w	NemDec
00004EEC 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00004EF6 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00004EFC 6100 C414                  		bsr.w	NemDec
00004F00 720A                       		moveq	#10,d1
00004F02 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00004F08 7012                       		moveq	#$12,d0
00004F0A 6100 D204                  		bsr.w	PalLoad1	; load continue	screen pallet
00004F0E 103C 0090                  		move.b	#$90,d0
00004F12 6100 C306                  		bsr.w	PlaySound	; play continue	music
00004F16 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00004F1C 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
00004F22 42B8 F700                  		clr.l	($FFFFF700).w
00004F26 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00004F2E 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00004F34 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00004F3A 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00004F40 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00004F46 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00004F4C 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00004F52 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00004F58 11FC 0000 FFD0             		move.b    #0,($FFFFFFD0).w
00004F5E 4EB9 0000 0000             		jsr	ObjectsLoad
00004F64 4EB9 0000 0000             		jsr	BuildSprites
00004F6A 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004F6E 0000 0040                  		ori.b	#$40,d0
00004F72 33C0 00C0 0004             		move.w	d0,($C00004).l
00004F78 6100 CE8E                  		bsr.w	Pal_FadeTo
00004F7C                            
00004F7C                            ; ---------------------------------------------------------------------------
00004F7C                            ; Continue screen main loop
00004F7C                            ; ---------------------------------------------------------------------------
00004F7C                            
00004F7C                            Cont_MainLoop:
00004F7C 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004F82 6100 DA40                  		bsr.w	DelayProgram
00004F86 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004F8C 6400                       		bcc.s	loc_4DF2
00004F8E 46FC 2700                  		move	#$2700,sr
00004F92 3238 F614                  		move.w	($FFFFF614).w,d1
00004F96 82FC 003C                  		divu.w	#$3C,d1
00004F9A 0281 0000 000F             		andi.l	#$F,d1
00004FA0 4EB9 0000 0000             		jsr	ContScrCounter
00004FA6 46FC 2300                  		move	#$2300,sr
00004FAA                            
00004FAA                            loc_4DF2:
00004FAA 4EB9 0000 0000             		jsr	ObjectsLoad
00004FB0 4EB9 0000 0000             		jsr	BuildSprites
00004FB6 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00004FBC 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00004FBE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004FC4 64B6                       		bcc.s	Cont_MainLoop
00004FC6 0C78 0100 F614             		cmpi.w	#$100,($FFFFF614).w
00004FCC 6E00 FFAE                  		bgt.w	Cont_MainLoop
00004FD0 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00004FD6 0C78 0040 F614             		cmpi.w	#$40,($FFFFF614).w
00004FDC 6E00 FF9E                  		bgt.w	Cont_MainLoop
00004FE0 11FC 0009 F5CE             		move.b	#face_meltdown,(SonimeSST+sonime_face).w
00004FE6 4A78 F614                  		tst.w	($FFFFF614).w
00004FEA 6600 FF90                  		bne.w	Cont_MainLoop
00004FEE 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00004FF4 4E75                       		rts	
00004FF6                            ; ===========================================================================
00004FF6                            
00004FF6                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00004FF6 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004FFC 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005002 7000                       		moveq	#0,d0
00005004 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005008 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000500C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005010 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005014 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005018 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)			
00005020 4E75                       		rts	
00005022                            ; ===========================================================================
00005022                            
00005022                            ; ---------------------------------------------------------------------------
00005022                            ; Object 80 - Continue screen elements
00005022                            ; ---------------------------------------------------------------------------
00005022                            
00005022                            Obj80:					; XREF: Obj_Index
00005022 7000                       		moveq	#0,d0
00005024 1028 0024                  		move.b	$24(a0),d0
00005028 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
0000502C 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005030                            ; ===========================================================================
00005030 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005032 0000                       		dc.w Obj80_Display-Obj80_Index
00005034 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005036 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005038                            ; ===========================================================================
00005038                            
00005038                            Obj80_Main:				; XREF: Obj80_Index
00005038 5428 0024                  		addq.b	#2,$24(a0)
0000503C 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005044 317C 8500 0002             		move.w	#$8500,2(a0)
0000504A 117C 0000 0001             		move.b	#0,1(a0)
00005050 117C 003C 0019             		move.b	#$3C,$19(a0)
00005056 317C 0120 0008             		move.w	#$120,8(a0)
0000505C 317C 00C0 000A             		move.w	#$C0,$A(a0)
00005062 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005068                            
00005068                            Obj80_Display:				; XREF: Obj80_Index
00005068 4EF9 0000 0000             		jmp	DisplaySprite
0000506E                            ; ===========================================================================
0000506E                            Obj80_MiniSonicPos:
0000506E 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005080 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
0000508C                            ; ===========================================================================
0000508C                            
0000508C                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
0000508C 2248                       		movea.l	a0,a1
0000508E 45F9 0000 506E             		lea	(Obj80_MiniSonicPos).l,a2
00005094 7200                       		moveq	#0,d1
00005096 1238 FE18                  		move.b	($FFFFFE18).w,d1
0000509A 5501                       		subq.b	#2,d1
0000509C 6400                       		bcc.s	loc_4EC4
0000509E 4EF9 0000 0000             		jmp	DeleteObject
000050A4                            ; ===========================================================================
000050A4                            
000050A4                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
000050A4 7601                       		moveq	#1,d3
000050A6 0C01 000E                  		cmpi.b	#$E,d1
000050AA 6500                       		bcs.s	loc_4ED0
000050AC 7600                       		moveq	#0,d3
000050AE 720E                       		moveq	#$E,d1
000050B0                            
000050B0                            loc_4ED0:
000050B0 1401                       		move.b	d1,d2
000050B2 0202 0001                  		andi.b	#1,d2
000050B6                            
000050B6                            Obj80_MiniSonLoop:
000050B6 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
000050BA 335A 0008                  		move.w	(a2)+,8(a1)
000050BE 4A02                       		tst.b	d2
000050C0 6700                       		beq.s	loc_4EEA
000050C2 0469 000A 0008             		subi.w	#$A,8(a1)
000050C8                            
000050C8                            loc_4EEA:
000050C8 337C 00D0 000A             		move.w	#$D0,$A(a1)
000050CE 137C 0006 001A             		move.b	#6,$1A(a1)
000050D4 137C 0006 0024             		move.b	#6,$24(a1)
000050DA 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
000050E2 337C 8551 0002             		move.w	#$8551,2(a1)
000050E8 137C 0000 0001             		move.b	#0,1(a1)
000050EE 43E9 0040                  		lea	$40(a1),a1
000050F2 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
000050F6 43E9 FFC0                  		lea	-$40(a1),a1
000050FA 1343 0028                  		move.b	d3,$28(a1)
000050FE                            
000050FE                            Obj80_ChkType:				; XREF: Obj80_Index
000050FE 4A28 0028                  		tst.b	$28(a0)
00005102 6700                       		beq.s	loc_4F40
00005104 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000510A 6500                       		bcs.s	loc_4F40
0000510C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005110 0200 0001                  		andi.b	#1,d0
00005114 6600                       		bne.s	loc_4F40
00005116 4A78 D010                  		tst.w	($FFFFD010).w
0000511A 6600                       		bne.s	Obj80_Delete
0000511C 4E75                       		rts	
0000511E                            ; ===========================================================================
0000511E                            
0000511E                            loc_4F40:				; XREF: Obj80_ChkType
0000511E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005122 0200 000F                  		andi.b	#$F,d0
00005126 6600                       		bne.s	Obj80_Display2
00005128 0868 0000 001A             		bchg	#0,$1A(a0)
0000512E                            
0000512E                            Obj80_Display2:
0000512E 4EF9 0000 0000             		jmp	DisplaySprite
00005134                            ; ===========================================================================
00005134                            
00005134                            Obj80_Delete:				; XREF: Obj80_ChkType
00005134 4EF9 0000 0000             		jmp	DeleteObject
0000513A                            ; ===========================================================================
0000513A                            
0000513A                            ; ---------------------------------------------------------------------------
0000513A                            ; Object 81 - Sonic on the continue screen
0000513A                            ; ---------------------------------------------------------------------------
0000513A                            
0000513A                            Obj81:					; XREF: Obj_Index
0000513A 7000                       		moveq	#0,d0
0000513C 1028 0024                  		move.b	$24(a0),d0
00005140 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00005144 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005148 4EF9 0000 0000             		jmp	DisplaySprite
0000514E                            ; ===========================================================================
0000514E 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00005150 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00005152 0000                       		dc.w Obj81_Animate-Obj81_Index
00005154 0000                       		dc.w Obj81_Run-Obj81_Index
00005156                            ; ===========================================================================
00005156                            
00005156                            Obj81_Main:				; XREF: Obj81_Index
00005156 5428 0024                  		addq.b	#2,$24(a0)
0000515A 317C 00A0 0008             		move.w	#$A0,8(a0)
00005160 317C 00C0 000C             		move.w	#$C0,$C(a0)
00005166 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000516E 317C 0780 0002             		move.w	#$780,2(a0)
00005174 117C 0004 0001             		move.b	#4,1(a0)
0000517A 117C 0002 0018             		move.b	#2,$18(a0)
00005180 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00005186 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
0000518C                            
0000518C                            Obj81_ChkLand:				; XREF: Obj81_Index
0000518C 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005192 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005194 5428 0024                  		addq.b	#2,$24(a0)
00005198 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
0000519C 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000051A4 317C 8500 0002             		move.w	#$8500,2(a0)
000051AA 117C 0000 001C             		move.b	#0,$1C(a0)
000051B0 6000                       		bra.s	Obj81_Animate
000051B2                            ; ===========================================================================
000051B2                            
000051B2                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
000051B2 4EB9 0000 0000             		jsr	SpeedToPos
000051B8 4EB9 0000 0000             		jsr	Sonic_Animate
000051BE 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000051C4                            ; ===========================================================================
000051C4                            
000051C4                            Obj81_Animate:				; XREF: Obj81_Index
000051C4 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
000051C8 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
000051CA 43F9 0000 0000             		lea	(Ani_obj81).l,a1
000051D0 4EF9 0000 0000             		jmp	AnimateSprite
000051D6                            ; ===========================================================================
000051D6                            
000051D6                            Obj81_GetUp:				; XREF: Obj81_Animate
000051D6 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
000051DC 5428 0024                  		addq.b	#2,$24(a0)
000051E0 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000051E8 317C 0780 0002             		move.w	#$780,2(a0)
000051EE 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
000051F4 4268 0020                  		clr.w	$20(a0)
000051F8 5168 000C                  		subq.w	#8,$C(a0)
000051FC 103C 00E0                  		move.b	#$E0,d0
00005200 6100 C01E                  		bsr.w	PlaySound_Special ; fade out music
00005204                            
00005204                            Obj81_Run:				; XREF: Obj81_Index
00005204 0C68 0800 0020             		cmpi.w	#$800,$20(a0)	; check	Sonic's "run speed" (not moving)
0000520A 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000520C 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005212 6000                       		bra.s	Obj81_ShowRun
00005214                            ; ===========================================================================
00005214                            
00005214                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005214 0668 0020 0020             		addi.w	#$20,$20(a0)	; increase "run	speed"
0000521A                            
0000521A                            Obj81_ShowRun:				; XREF: Obj81_Run
0000521A 4EB9 0000 0000             		jsr	SpeedToPos
00005220 4EB9 0000 0000             		jsr	Sonic_Animate
00005226 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000522C                            ; ===========================================================================
0000522C                            Ani_obj81:
0000522C                            	include "_anim\obj81.asm"
0000522C                            ; ---------------------------------------------------------------------------
0000522C                            ; Animation script - Sonic on the continue screen
0000522C                            ; ---------------------------------------------------------------------------
0000522C 0000                       		dc.w byte_504A-Ani_obj81
0000522E 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
0000523A 00                         		even
0000523A 00                         		even
0000523A                            
0000523A                            ; ---------------------------------------------------------------------------
0000523A                            ; Sprite mappings - Continue screen
0000523A                            ; ---------------------------------------------------------------------------
0000523A                            Map_obj80:
0000523A                            	include "_maps\obj80.asm"
0000523A                            ; ---------------------------------------------------------------------------
0000523A                            ; Sprite mappings - Continue screen
0000523A                            ; ---------------------------------------------------------------------------
0000523A 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
0000523E 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005242 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005246 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
0000524A 0B                         byte_5066:	dc.b $B
0000524B F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005250 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005255 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
0000525A F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
0000525F F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005264 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005269 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
0000526E F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005273 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005278 3805 2021 08               		dc.b $38, 5, $20, $21, 8
0000527D 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005282 03                         byte_509E:	dc.b 3
00005283 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005288 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000528D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005292 03                         byte_50AE:	dc.b 3
00005293 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005298 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000529D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000052A2 03                         byte_50BE:	dc.b 3
000052A3 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000052A8 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000052AD F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000052B2 02                         byte_50CE:	dc.b 2
000052B3 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000052B8 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000052BD 01                         byte_50D9:	dc.b 1
000052BE 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000052C3 01                         byte_50DF:	dc.b 1
000052C4 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000052CA 00                         		even
000052CA 00                         		even
000052CA                            
000052CA                            ; ===========================================================================
000052CA                            ; ---------------------------------------------------------------------------
000052CA                            ; Ending sequence in Green Hill	Zone
000052CA                            ; ---------------------------------------------------------------------------
000052CA                            
000052CA                            EndingSequence:				; XREF: GameModeArray
000052CA 103C 00E4                  		move.b	#$E4,d0
000052CE 6100 BF50                  		bsr.w	PlaySound_Special ; stop music
000052D2 6100 CBB6                  		bsr.w	Pal_FadeFrom
000052D6 43F8 D000                  		lea	($FFFFD000).w,a1
000052DA 7000                       		moveq	#0,d0
000052DC 323C 07FF                  		move.w	#$7FF,d1
000052E0                            
000052E0                            End_ClrObjRam:
000052E0 22C0                       		move.l	d0,(a1)+
000052E2 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
000052E6                            
000052E6 43F8 F628                  		lea	($FFFFF628).w,a1
000052EA 7000                       		moveq	#0,d0
000052EC 323C 0015                  		move.w	#$15,d1
000052F0                            
000052F0                            End_ClrRam:
000052F0 22C0                       		move.l	d0,(a1)+
000052F2 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
000052F6                            
000052F6 43F8 F700                  		lea	($FFFFF700).w,a1
000052FA 7000                       		moveq	#0,d0
000052FC 323C 003F                  		move.w	#$3F,d1
00005300                            
00005300                            End_ClrRam2:
00005300 22C0                       		move.l	d0,(a1)+
00005302 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005306                            
00005306 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000530A 7000                       		moveq	#0,d0
0000530C 323C 0047                  		move.w	#$47,d1
00005310                            
00005310                            End_ClrRam3:
00005310 22C0                       		move.l	d0,(a1)+
00005312 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005316                            
00005316 46FC 2700                  		move	#$2700,sr
0000531A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000531E 33C0 00C0 0004             		move.w	d0,($C00004).l
00005324 6100 BDD4                  		bsr.w	ClearScreen
00005328 4DF9 00C0 0004             		lea	($C00004).l,a6
0000532E 3CBC 8B03                  		move.w	#$8B03,(a6)
00005332 3CBC 8230                  		move.w	#$8230,(a6)
00005336 3CBC 8407                  		move.w	#$8407,(a6)
0000533A 3CBC 857C                  		move.w	#$857C,(a6)
0000533E 3CBC 9001                  		move.w	#$9001,(a6)
00005342 3CBC 8004                  		move.w	#$8004,(a6)
00005346 3CBC 8720                  		move.w	#$8720,(a6)
0000534A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005350 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005354 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0000535A 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005360 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005366 6700                       		beq.s	End_LoadData	; if yes, branch
00005368 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
0000536E                            
0000536E                            End_LoadData:
0000536E 701C                       		moveq	#$1C,d0
00005370 6100 C258                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005374 4EB9 0000 0000             		jsr	Hud_Base
0000537A 6100 0000                  		bsr.w	LevelSizeLoad
0000537E 6100 0000                  		bsr.w	DeformBgLayer
00005382 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005388 6100 0000                  		bsr.w	LoadZoneTiles	; load level art			
0000538C 6100 0000                  		bsr.w	MainLoadBlockLoad
00005390 6100 0000                  		bsr.w	LoadTilesFromStart
00005394 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
0000539C 46FC 2300                  		move	#$2300,sr
000053A0 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000053A6 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000053AA 6100 C3CE                  		bsr.w	KosDec
000053AE 7003                       		moveq	#3,d0
000053B0 6100 CD5E                  		bsr.w	PalLoad1	; load Sonic's pallet
000053B4 303C 008B                  		move.w	#$8B,d0
000053B8 6100 BE60                  		bsr.w	PlaySound	; play ending sequence music
000053BC 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
000053C2 6700                       		beq.s	End_LoadSonic	; if not, branch
000053C4 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000053CA                            
000053CA                            End_LoadSonic:
000053CA 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000053D0 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
000053D6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
000053DC 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
000053E2 31FC F800 D020             		move.w	#$F800,($FFFFD020).w ; set Sonic's speed
000053E8 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000053EE 11FC 0001 FFD0                     move.b    #1,($FFFFFFD0).w
000053F4 4EB9 0000 0000             		jsr	ObjPosLoad
000053FA 4EB9 0000 0000             		jsr	ObjectsLoad
00005400 4EB9 0000 0000             		jsr	BuildSprites
00005406 7000                       		moveq	#0,d0
00005408 31C0 FE20                  		move.w	d0,($FFFFFE20).w
0000540C 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005410 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005414 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005418 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
0000541C 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005420 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005424 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005428 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000542C 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005430 6100 EDE2                  		bsr.w	OscillateNumInit
00005434 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
0000543A 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005440 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005446 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000544C 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005452 6100 D570                  		bsr.w	DelayProgram
00005456 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000545A 0000 0040                  		ori.b	#$40,d0
0000545E 33C0 00C0 0004             		move.w	d0,($C00004).l
00005464 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000546A 6100 C99C                  		bsr.w	Pal_FadeTo
0000546E                            
0000546E                            ; ---------------------------------------------------------------------------
0000546E                            ; Main ending sequence loop
0000546E                            ; ---------------------------------------------------------------------------
0000546E                            
0000546E                            End_MainLoop:
0000546E 6100 BDBC                  		bsr.w	PauseGame
00005472 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005478 6100 D54A                  		bsr.w	DelayProgram
0000547C 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005480 6100 0000                  		bsr.w	End_MoveSonic
00005484 4EB9 0000 0000             		jsr	ObjectsLoad
0000548A 6100 0000                  		bsr.w	DeformBgLayer
0000548E 4EB9 0000 0000             		jsr	BuildSprites
00005494 4EB9 0000 0000             		jsr	ObjPosLoad
0000549A 6100 C4FC                  		bsr.w	PalCycle_Load
0000549E 6100 EDCA                  		bsr.w	OscillateNumDo
000054A2 6100 EE56                  		bsr.w	ChangeRingFrame
000054A6 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
000054AC 6700                       		beq.s	loc_52DA	; if yes, branch
000054AE 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
000054B4 103C 0091                  		move.b	#$91,d0
000054B8 6100 BD66                  		bsr.w	PlaySound_Special ; play credits music
000054BC 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
000054C2 4E75                       		rts	
000054C4                            ; ===========================================================================
000054C4                            
000054C4                            loc_52DA:
000054C4 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000054C8 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000054CC                            
000054CC 4278 FE02                  		clr.w	($FFFFFE02).w
000054D0 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000054D6 4278 F794                  		clr.w	($FFFFF794).w
000054DA                            
000054DA                            End_AllEmlds:				; XREF: loc_5334
000054DA 6100 BD50                  		bsr.w	PauseGame
000054DE 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000054E4 6100 D4DE                  		bsr.w	DelayProgram
000054E8 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000054EC 6100 0000                  		bsr.w	End_MoveSonic
000054F0 4EB9 0000 0000             		jsr	ObjectsLoad
000054F6 6100 0000                  		bsr.w	DeformBgLayer
000054FA 4EB9 0000 0000             		jsr	BuildSprites
00005500 4EB9 0000 0000             		jsr	ObjPosLoad
00005506 6100 ED62                  		bsr.w	OscillateNumDo
0000550A 6100 EDEE                  		bsr.w	ChangeRingFrame
0000550E 5378 F794                  		subq.w	#1,($FFFFF794).w
00005512 6A00                       		bpl.s	loc_5334
00005514 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000551A 6100 CA94                  		bsr.w	Pal_ToWhite
0000551E                            
0000551E                            loc_5334:
0000551E 4A78 FE02                  		tst.w	($FFFFFE02).w
00005522 6700 FFB6                  		beq.w	End_AllEmlds
00005526 4278 FE02                  		clr.w	($FFFFFE02).w
0000552A 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005530 4BF9 00C0 0004             		lea	($C00004).l,a5
00005536 4DF9 00C0 0000             		lea	($C00000).l,a6
0000553C 47F8 F700                  		lea	($FFFFF700).w,a3
00005540 49F8 A400                  		lea	($FFFFA400).w,a4
00005544 343C 4000                  		move.w	#$4000,d2
00005548 6100 0000                  		bsr.w	LoadTilesFromStart2
0000554C 7013                       		moveq	#$13,d0
0000554E 6100 CBC0                  		bsr.w	PalLoad1	; load ending pallet
00005552 6100 C9B4                  		bsr.w	Pal_MakeWhite
00005556 6000 FF16                  		bra.w	End_MainLoop
0000555A                            
0000555A                            ; ---------------------------------------------------------------------------
0000555A                            ; Subroutine controlling Sonic on the ending sequence
0000555A                            ; ---------------------------------------------------------------------------
0000555A                            
0000555A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000555A                            
0000555A                            
0000555A                            End_MoveSonic:				; XREF: End_MainLoop
0000555A 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
0000555E 6600                       		bne.s	End_MoveSonic2
00005560 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005566 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005568 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000556C 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005572 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005578 4E75                       		rts	
0000557A                            ; ===========================================================================
0000557A                            
0000557A                            End_MoveSonic2:				; XREF: End_MoveSonic
0000557A 5500                       		subq.b	#2,d0
0000557C 6600                       		bne.s	End_MoveSonic3
0000557E 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005584 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005586 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000558A 7000                       		moveq	#0,d0
0000558C 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005590 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00005594 31C0 D020                  		move.w	d0,($FFFFD020).w
00005598 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
0000559E 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000055A4 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
000055AA 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
000055B0 4E75                       		rts	
000055B2                            ; ===========================================================================
000055B2                            
000055B2                            End_MoveSonic3:				; XREF: End_MoveSonic
000055B2 5500                       		subq.b	#2,d0
000055B4 6600                       		bne.s	End_MoveSonExit
000055B6 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000055BA 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
000055C0 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
000055C6 4278 D024                  		clr.w	($FFFFD024).w
000055CA                            
000055CA                            End_MoveSonExit:
000055CA 4E75                       		rts	
000055CC                            ; End of function End_MoveSonic
000055CC                            
000055CC                            ; ===========================================================================
000055CC                            ; ---------------------------------------------------------------------------
000055CC                            ; Object 87 - Sonic on ending sequence
000055CC                            ; ---------------------------------------------------------------------------
000055CC                            
000055CC                            Obj87:					; XREF: Obj_Index
000055CC 7000                       		moveq	#0,d0
000055CE 1028 0025                  		move.b	$25(a0),d0
000055D2 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
000055D6 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
000055DA 4EF9 0000 0000             		jmp	DisplaySprite
000055E0                            ; ===========================================================================
000055E0 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
000055E4 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
000055E8 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
000055EC 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
000055F0 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
000055F4                            ; ===========================================================================
000055F4                            
000055F4                            Obj87_Main:				; XREF: Obj87_Index
000055F4 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000055FA 6700                       		beq.s	Obj87_Main2	; if yes, branch
000055FC 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005602 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005608 4E75                       		rts	
0000560A                            ; ===========================================================================
0000560A                            
0000560A                            Obj87_Main2:				; XREF: Obj87_Main
0000560A 5428 0025                  		addq.b	#2,$25(a0)
0000560E 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005616 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000561C 117C 0004 0001             		move.b	#4,1(a0)
00005622 4228 0022                  		clr.b	$22(a0)
00005626 117C 0002 0018             		move.b	#2,$18(a0)
0000562C 117C 0000 001A             		move.b	#0,$1A(a0)
00005632 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005638                            
00005638                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005638 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000563C 6600                       		bne.s	Obj87_Wait
0000563E 5428 0025                  		addq.b	#2,$25(a0)
00005642 317C 0001 001C             		move.w	#1,$1C(a0)
00005648 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
0000564E                            
0000564E                            Obj87_Wait:
0000564E 4E75                       		rts	
00005650                            ; ===========================================================================
00005650                            
00005650                            Obj87_LookUp:				; XREF: Obj87_Index
00005650 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005658 6600                       		bne.s	locret_5480
0000565A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005660 317C 005A 0030             		move.w	#$5A,$30(a0)
00005666 5428 0025                  		addq.b	#2,$25(a0)
0000566A                            
0000566A                            locret_5480:
0000566A 4E75                       		rts	
0000566C                            ; ===========================================================================
0000566C                            
0000566C                            Obj87_ClrObjRam:			; XREF: Obj87_Index
0000566C 5368 0030                  		subq.w	#1,$30(a0)
00005670 6600                       		bne.s	Obj87_Wait2
00005672 43F8 D400                  		lea	($FFFFD400).w,a1
00005676 323C 00FF                  		move.w	#$FF,d1
0000567A                            
0000567A                            Obj87_ClrLoop:
0000567A 4299                       		clr.l	(a1)+
0000567C 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005680 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005686 5428 0025                  		addq.b	#2,$25(a0)
0000568A 117C 0001 001C             		move.b	#1,$1C(a0)
00005690 317C 003C 0030             		move.w	#$3C,$30(a0)
00005696                            
00005696                            Obj87_Wait2:
00005696 4E75                       		rts	
00005698                            ; ===========================================================================
00005698                            
00005698                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005698 5368 0030                  		subq.w	#1,$30(a0)
0000569C 6600                       		bne.s	Obj87_Wait3
0000569E 5428 0025                  		addq.b	#2,$25(a0)
000056A2 317C 00B4 0030             		move.w	#$B4,$30(a0)
000056A8 117C 0002 001C             		move.b	#2,$1C(a0)
000056AE 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000056B4                            
000056B4                            Obj87_Wait3:
000056B4 4E75                       		rts	
000056B6                            ; ===========================================================================
000056B6                            
000056B6                            Obj87_Animate:				; XREF: Obj87_Index
000056B6 43F9 0000 0000             		lea	(Ani_obj87).l,a1
000056BC 4EF9 0000 0000             		jmp	AnimateSprite
000056C2                            ; ===========================================================================
000056C2                            
000056C2                            Obj87_Leap:				; XREF: Obj87_Index
000056C2 5368 0030                  		subq.w	#1,$30(a0)
000056C6 6600                       		bne.s	Obj87_Wait4
000056C8 5428 0025                  		addq.b	#2,$25(a0)
000056CC 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000056D4 317C 03E1 0002             		move.w	#$3E1,2(a0)
000056DA 117C 0004 0001             		move.b	#4,1(a0)
000056E0 4228 0022                  		clr.b	$22(a0)
000056E4 117C 0002 0018             		move.b	#2,$18(a0)
000056EA 117C 0005 001A             		move.b	#5,$1A(a0)
000056F0 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
000056F6 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000056FC 60B8                       		bra.s	Obj87_Animate
000056FE                            ; ===========================================================================
000056FE                            
000056FE                            Obj87_Wait4:				; XREF: Obj87_Leap
000056FE 4E75                       		rts	
00005700                            ; ===========================================================================
00005700                            Ani_obj87:
00005700                            	include "_anim\obj87.asm"
00005700                            ; ---------------------------------------------------------------------------
00005700                            ; Animation script - Sonic on the ending sequence
00005700                            ; ---------------------------------------------------------------------------
00005700 0000                       		dc.w byte_551C-Ani_obj87
00005702 0000                       		dc.w byte_552A-Ani_obj87
00005704 0000                       		dc.w byte_5534-Ani_obj87
00005706 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005714 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
0000571E 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005726                            		even
00005726                            		even
00005726                            
00005726                            ; ===========================================================================
00005726                            ; ---------------------------------------------------------------------------
00005726                            ; Object 88 - chaos emeralds on	the ending sequence
00005726                            ; ---------------------------------------------------------------------------
00005726                            
00005726                            Obj88:					; XREF: Obj_Index
00005726 7000                       		moveq	#0,d0
00005728 1028 0024                  		move.b	$24(a0),d0
0000572C 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005730 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005734 4EF9 0000 0000             		jmp	DisplaySprite
0000573A                            ; ===========================================================================
0000573A 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
0000573C 0000                       		dc.w Obj88_Move-Obj88_Index
0000573E                            ; ===========================================================================
0000573E                            
0000573E                            Obj88_Main:				; XREF: Obj88_Index
0000573E 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005744 6700                       		beq.s	Obj88_Main2
00005746 588F                       		addq.l	#4,sp
00005748 4E75                       		rts	
0000574A                            ; ===========================================================================
0000574A                            
0000574A                            Obj88_Main2:				; XREF: Obj88_Main
0000574A 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005750 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005756 2248                       		movea.l	a0,a1
00005758 7600                       		moveq	#0,d3
0000575A 7401                       		moveq	#1,d2
0000575C 7205                       		moveq	#5,d1
0000575E                            
0000575E                            Obj88_MainLoop:
0000575E 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005762 5429 0024                  		addq.b	#2,$24(a1)
00005766 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
0000576E 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005774 137C 0004 0001             		move.b	#4,1(a1)
0000577A 137C 0001 0018             		move.b	#1,$18(a1)
00005780 3368 0008 0038             		move.w	8(a0),$38(a1)
00005786 3368 000C 003A             		move.w	$C(a0),$3A(a1)
0000578C 1342 001C                  		move.b	d2,$1C(a1)
00005790 1342 001A                  		move.b	d2,$1A(a1)
00005794 5202                       		addq.b	#1,d2
00005796 1343 0026                  		move.b	d3,$26(a1)
0000579A 0603 002A                  		addi.b	#$2A,d3
0000579E 43E9 0040                  		lea	$40(a1),a1
000057A2 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000057A6                            
000057A6                            Obj88_Move:				; XREF: Obj88_Index
000057A6 3028 003E                  		move.w	$3E(a0),d0
000057AA D168 0026                  		add.w	d0,$26(a0)
000057AE 1028 0026                  		move.b	$26(a0),d0
000057B2 4EB9 0000 29F6             		jsr	(CalcSine).l
000057B8 7800                       		moveq	#0,d4
000057BA 1828 003C                  		move.b	$3C(a0),d4
000057BE C3C4                       		muls.w	d4,d1
000057C0 E081                       		asr.l	#8,d1
000057C2 C1C4                       		muls.w	d4,d0
000057C4 E080                       		asr.l	#8,d0
000057C6 D268 0038                  		add.w	$38(a0),d1
000057CA D068 003A                  		add.w	$3A(a0),d0
000057CE 3141 0008                  		move.w	d1,8(a0)
000057D2 3140 000C                  		move.w	d0,$C(a0)
000057D6 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
000057DC 6700                       		beq.s	loc_55FA
000057DE 0668 0020 003C             		addi.w	#$20,$3C(a0)
000057E4                            
000057E4                            loc_55FA:
000057E4 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
000057EA 6700                       		beq.s	loc_5608
000057EC 0668 0020 003E             		addi.w	#$20,$3E(a0)
000057F2                            
000057F2                            loc_5608:
000057F2 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
000057F8 6700                       		beq.s	locret_5614
000057FA 5368 003A                  		subq.w	#1,$3A(a0)
000057FE                            
000057FE                            locret_5614:
000057FE 4E75                       		rts	
00005800                            ; ===========================================================================
00005800                            ; ---------------------------------------------------------------------------
00005800                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005800                            ; ---------------------------------------------------------------------------
00005800                            
00005800                            Obj89:					; XREF: Obj_Index
00005800 7000                       		moveq	#0,d0
00005802 1028 0024                  		move.b	$24(a0),d0
00005806 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
0000580A 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
0000580E                            ; ===========================================================================
0000580E 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005810 0000                       		dc.w Obj89_Move-Obj89_Index
00005812 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005814                            ; ===========================================================================
00005814                            
00005814                            Obj89_Main:				; XREF: Obj89_Index
00005814 5428 0024                  		addq.b	#2,$24(a0)
00005818 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
0000581E 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005824 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
0000582C 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005832 117C 0000 0001             		move.b	#0,1(a0)
00005838 117C 0000 0018             		move.b	#0,$18(a0)
0000583E                            
0000583E                            Obj89_Move:				; XREF: Obj89_Index
0000583E 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005844 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005846 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
0000584C 4EF9 0000 0000             		jmp	DisplaySprite
00005852                            ; ===========================================================================
00005852                            
00005852                            Obj89_Delay:				; XREF: Obj89_Move
00005852 5428 0024                  		addq.b	#2,$24(a0)
00005856 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
0000585C                            
0000585C                            Obj89_GotoCredits:			; XREF: Obj89_Index
0000585C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005860 6A00                       		bpl.s	Obj89_Display
00005862 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005868                            
00005868                            Obj89_Display:
00005868 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000586E                            ; ===========================================================================
0000586E                            ; ---------------------------------------------------------------------------
0000586E                            ; Sprite mappings - Sonic on the ending	sequence
0000586E                            ; ---------------------------------------------------------------------------
0000586E                            Map_obj87:
0000586E                            	include "_maps\obj87.asm"
0000586E                            ; ---------------------------------------------------------------------------
0000586E                            ; Sprite mappings - Sonic on the ending	sequence
0000586E                            ; ---------------------------------------------------------------------------
0000586E 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005872 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005876 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
0000587A 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
0000587E 02                         byte_5690:	dc.b 2
0000587F EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005884 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005889 03                         byte_569B:	dc.b 3
0000588A FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
0000588F EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005894 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005899 02                         byte_56AB:	dc.b 2
0000589A EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
0000589F FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000058A4 02                         byte_56B6:	dc.b 2
000058A5 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000058AA FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000058AF 02                         byte_56C1:	dc.b 2
000058B0 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000058B5 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000058BA 03                         byte_56CC:	dc.b 3
000058BB EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000058C0 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000058C5 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000058CA 07                         byte_56DC:	dc.b 7
000058CB B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000058D0 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000058D5 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
000058DA CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
000058DF DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
000058E4 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
000058E9 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
000058EE 18                         byte_5700:	dc.b $18
000058EF 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
000058F4 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
000058F9 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
000058FE 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005903 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005908 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
0000590D 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005912 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005917 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
0000591C B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005921 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005926 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
0000592B C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005930 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005935 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
0000593A D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
0000593F D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005944 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005949 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
0000594E E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005953 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005958 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
0000595D F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005962 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005968 00                         		even
00005968 00                         		even
00005968                            
00005968                            ; ---------------------------------------------------------------------------
00005968                            ; Sprite mappings - chaos emeralds on the ending sequence
00005968                            ; ---------------------------------------------------------------------------
00005968                            Map_obj88:
00005968                            	include "_maps\obj88.asm"
00005968                            ; ---------------------------------------------------------------------------
00005968                            ; Sprite mappings - chaos emeralds on the ending sequence
00005968                            ; ---------------------------------------------------------------------------
00005968 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
0000596C 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005970 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005974 0000                       		dc.w byte_57AC-Map_obj88
00005976 01                         byte_5788:	dc.b 1
00005977 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000597C 01                         byte_578E:	dc.b 1
0000597D F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005982 01                         byte_5794:	dc.b 1
00005983 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005988 01                         byte_579A:	dc.b 1
00005989 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
0000598E 01                         byte_57A0:	dc.b 1
0000598F F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005994 01                         byte_57A6:	dc.b 1
00005995 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0000599A 01                         byte_57AC:	dc.b 1
0000599B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000059A0                            		even
000059A0                            		even
000059A0                            
000059A0                            ; ---------------------------------------------------------------------------
000059A0                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000059A0                            ; ---------------------------------------------------------------------------
000059A0                            Map_obj89:
000059A0                            	include "_maps\obj89.asm"
000059A0                            ; ---------------------------------------------------------------------------
000059A0                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000059A0                            ; ---------------------------------------------------------------------------
000059A0 0000                       		dc.w byte_57B4-Map_obj89
000059A2 03                         byte_57B4:	dc.b 3
000059A3 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000059A8 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000059AD F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000059B2                            		even
000059B2                            		even
000059B2                            
000059B2                            ; ===========================================================================
000059B2                            ; ---------------------------------------------------------------------------
000059B2                            ; Credits ending sequence
000059B2                            ; ---------------------------------------------------------------------------
000059B2                            
000059B2                            Credits:				; XREF: GameModeArray
000059B2 6100 BB08                  		bsr.w	ClearPLC
000059B6 6100 C4D2                  		bsr.w	Pal_FadeFrom
000059BA 4DF9 00C0 0004             		lea	($C00004).l,a6
000059C0 3CBC 8004                  		move.w	#$8004,(a6)
000059C4 3CBC 8230                  		move.w	#$8230,(a6)
000059C8 3CBC 8407                  		move.w	#$8407,(a6)
000059CC 3CBC 9001                  		move.w	#$9001,(a6)
000059D0 3CBC 9200                  		move.w	#$9200,(a6)
000059D4 3CBC 8B03                  		move.w	#$8B03,(a6)
000059D8 3CBC 8720                  		move.w	#$8720,(a6)
000059DC 4238 F64E                  		clr.b	($FFFFF64E).w
000059E0 6100 B718                  		bsr.w	ClearScreen
000059E4 43F8 D000                  		lea	($FFFFD000).w,a1
000059E8 7000                       		moveq	#0,d0
000059EA 323C 07FF                  		move.w	#$7FF,d1
000059EE                            
000059EE                            Cred_ClrObjRam:
000059EE 22C0                       		move.l	d0,(a1)+
000059F0 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
000059F4                            
000059F4 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
000059FE 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005A04 6100 B90C                  		bsr.w	NemDec
00005A08 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005A0C 7000                       		moveq	#0,d0
00005A0E 323C 001F                  		move.w	#$1F,d1
00005A12                            
00005A12                            Cred_ClrPallet:
00005A12 22C0                       		move.l	d0,(a1)+
00005A14 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005A18                            
00005A18 7014                       		moveq	#$14,d0
00005A1A 6100 C6F4                  		bsr.w	PalLoad1	; load Sonic's pallet
00005A1E 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005A24 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w
00005A2A 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00005A30 4EB9 0000 0000             		jsr	ObjectsLoad
00005A36 4EB9 0000 0000             		jsr	BuildSprites
00005A3C 6100 0000                  		bsr.w	EndingDemoLoad
00005A40 7000                       		moveq	#0,d0
00005A42 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005A46 E948                       		lsl.w	#4,d0
00005A48 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005A4E 45F2 0000                  		lea	(a2,d0.w),a2
00005A52 7000                       		moveq	#0,d0
00005A54 1012                       		move.b	(a2),d0
00005A56 6700                       		beq.s	loc_5862
00005A58 6100 BA04                  		bsr.w	LoadPLC		; load level patterns
00005A5C                            
00005A5C                            loc_5862:
00005A5C 7001                       		moveq	#1,d0
00005A5E 6100 B9FE                  		bsr.w	LoadPLC		; load standard	level patterns
00005A62 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005A68 6100 C39E                  		bsr.w	Pal_FadeTo
00005A6C                            
00005A6C                            Cred_WaitLoop:
00005A6C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005A72 6100 CF50                  		bsr.w	DelayProgram
00005A76 6100 BA52                  		bsr.w	RunPLC_RAM
00005A7A 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005A7E 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005A80 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005A84 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005A86 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005A8C 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005A90 4E75                       		rts	
00005A92                            
00005A92                            ; ---------------------------------------------------------------------------
00005A92                            ; Ending sequence demo loading subroutine
00005A92                            ; ---------------------------------------------------------------------------
00005A92                            
00005A92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005A92                            
00005A92                            
00005A92                            EndingDemoLoad:				; XREF: Credits
00005A92 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005A96 0240 000F                  		andi.w	#$F,d0
00005A9A D040                       		add.w	d0,d0
00005A9C 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005AA0 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005AA4 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005AA8 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005AAE 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005AB0 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005AB6 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005ABC 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005AC2 7000                       		moveq	#0,d0
00005AC4 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005AC8 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005ACC 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005AD0 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005AD4 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005ADA 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005ADC 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005AE2 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005AE6 303C 0008                  		move.w	#8,d0
00005AEA                            
00005AEA                            EndDemo_LampLoad:
00005AEA 24D9                       		move.l	(a1)+,(a2)+
00005AEC 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005AF0                            
00005AF0                            EndDemo_Exit:
00005AF0 4E75                       		rts	
00005AF2                            ; End of function EndingDemoLoad
00005AF2                            
00005AF2                            ; ===========================================================================
00005AF2                            ; ---------------------------------------------------------------------------
00005AF2                            ; Levels used in the end sequence demos
00005AF2                            ; ---------------------------------------------------------------------------
00005AF2                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005B02                            
00005B02                            ; ---------------------------------------------------------------------------
00005B02                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005B02                            ; ---------------------------------------------------------------------------
00005B02                            EndDemo_LampVar:
00005B02 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005B04 0A00 062C 000D             		dc.w $A00, $62C, $D
00005B0A 0000 0000                  		dc.l 0
00005B0E 0000                       		dc.b 0,	0
00005B10 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005B24 0101                       		dc.b 1,	1
00005B26                            ; ===========================================================================
00005B26                            ; ---------------------------------------------------------------------------
00005B26                            ; "TRY AGAIN" and "END"	screens
00005B26                            ; ---------------------------------------------------------------------------
00005B26                            
00005B26                            TryAgainEnd:				; XREF: Credits
00005B26 6100 B994                  		bsr.w	ClearPLC
00005B2A 6100 C35E                  		bsr.w	Pal_FadeFrom
00005B2E 4DF9 00C0 0004             		lea	($C00004).l,a6
00005B34 3CBC 8004                  		move.w	#$8004,(a6)
00005B38 3CBC 8230                  		move.w	#$8230,(a6)
00005B3C 3CBC 8407                  		move.w	#$8407,(a6)
00005B40 3CBC 9001                  		move.w	#$9001,(a6)
00005B44 3CBC 9200                  		move.w	#$9200,(a6)
00005B48 3CBC 8B03                  		move.w	#$8B03,(a6)
00005B4C 3CBC 8720                  		move.w	#$8720,(a6)
00005B50 4238 F64E                  		clr.b	($FFFFF64E).w
00005B54 6100 B5A4                  		bsr.w	ClearScreen
00005B58 43F8 D000                  		lea	($FFFFD000).w,a1
00005B5C 7000                       		moveq	#0,d0
00005B5E 323C 07FF                  		move.w	#$7FF,d1
00005B62                            
00005B62                            TryAg_ClrObjRam:
00005B62 22C0                       		move.l	d0,(a1)+
00005B64 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005B68                            
00005B68 701D                       		moveq	#$1D,d0
00005B6A 6100 BA5E                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005B6E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005B72 7000                       		moveq	#0,d0
00005B74 323C 001F                  		move.w	#$1F,d1
00005B78                            
00005B78                            TryAg_ClrPallet:
00005B78 22C0                       		move.l	d0,(a1)+
00005B7A 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005B7E                            
00005B7E 7013                       		moveq	#$13,d0
00005B80 6100 C58E                  		bsr.w	PalLoad1	; load ending pallet
00005B84 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005B88 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005B8E 4EB9 0000 0000             		jsr	ObjectsLoad
00005B94 4EB9 0000 0000             		jsr	BuildSprites
00005B9A 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005BA0 6100 C266                  		bsr.w	Pal_FadeTo
00005BA4                            
00005BA4                            ; ---------------------------------------------------------------------------
00005BA4                            ; "TRY AGAIN" and "END"	screen main loop
00005BA4                            ; ---------------------------------------------------------------------------
00005BA4                            TryAg_MainLoop:
00005BA4 6100 B686                  		bsr.w	PauseGame
00005BA8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005BAE 6100 CE14                  		bsr.w	DelayProgram
00005BB2 4EB9 0000 0000             		jsr	ObjectsLoad
00005BB8 4EB9 0000 0000             		jsr	BuildSprites
00005BBE 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005BC4 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005BC6 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005BCA 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005BCC 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005BD2 67D0                       		beq.s	TryAg_MainLoop
00005BD4                            
00005BD4                            TryAg_Exit:
00005BD4 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00005BDA 4E75                       		rts	
00005BDC                            
00005BDC                            ; ===========================================================================
00005BDC                            ; ---------------------------------------------------------------------------
00005BDC                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005BDC                            ; ---------------------------------------------------------------------------
00005BDC                            
00005BDC                            Obj8B:					; XREF: Obj_Index
00005BDC 7000                       		moveq	#0,d0
00005BDE 1028 0024                  		move.b	$24(a0),d0
00005BE2 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005BE6 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005BEA 4EF9 0000 0000             		jmp	DisplaySprite
00005BF0                            ; ===========================================================================
00005BF0 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005BF2 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005BF4 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005BF6 0000                       		dc.w loc_5A8E-Obj8B_Index
00005BF8                            ; ===========================================================================
00005BF8                            
00005BF8                            Obj8B_Main:				; XREF: Obj8B_Index
00005BF8 5428 0024                  		addq.b	#2,$24(a0)
00005BFC 317C 0120 0008             		move.w	#$120,8(a0)
00005C02 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005C08 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005C10 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005C16 117C 0000 0001             		move.b	#0,1(a0)
00005C1C 117C 0002 0018             		move.b	#2,$18(a0)
00005C22 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005C28 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00005C2E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005C34 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005C36 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
00005C3C 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005C42 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005C48 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005C4E 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005C54                            
00005C54                            Obj8B_Animate:				; XREF: Obj8B_Index
00005C54 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005C5A 4EF9 0000 0000             		jmp	AnimateSprite
00005C60                            ; ===========================================================================
00005C60                            
00005C60                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005C60 5428 0024                  		addq.b	#2,$24(a0)
00005C64 7002                       		moveq	#2,d0
00005C66 0828 0000 001C             		btst	#0,$1C(a0)
00005C6C 6700                       		beq.s	loc_5A6A
00005C6E 4440                       		neg.w	d0
00005C70                            
00005C70                            loc_5A6A:
00005C70 43F8 D800                  		lea	($FFFFD800).w,a1
00005C74 7205                       		moveq	#5,d1
00005C76                            
00005C76                            loc_5A70:
00005C76 1340 003E                  		move.b	d0,$3E(a1)
00005C7A 3400                       		move.w	d0,d2
00005C7C E742                       		asl.w	#3,d2
00005C7E D529 0026                  		add.b	d2,$26(a1)
00005C82 43E9 0040                  		lea	$40(a1),a1
00005C86 51C9 FFEE                  		dbf	d1,loc_5A70
00005C8A 5228 001A                  		addq.b	#1,$1A(a0)
00005C8E 317C 0070 0030             		move.w	#112,$30(a0)
00005C94                            
00005C94                            loc_5A8E:				; XREF: Obj8B_Index
00005C94 5368 0030                  		subq.w	#1,$30(a0)
00005C98 6A00                       		bpl.s	locret_5AA0
00005C9A 0868 0000 001C             		bchg	#0,$1C(a0)
00005CA0 117C 0002 0024             		move.b	#2,$24(a0)
00005CA6                            
00005CA6                            locret_5AA0:
00005CA6 4E75                       		rts	
00005CA8                            ; ===========================================================================
00005CA8                            Ani_obj8B:
00005CA8                            	include "_anim\obj8B.asm"
00005CA8                            ; ---------------------------------------------------------------------------
00005CA8                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005CA8                            ; ---------------------------------------------------------------------------
00005CA8 0000                       		dc.w byte_5AA8-Ani_obj8B
00005CAA 0000                       		dc.w byte_5AAC-Ani_obj8B
00005CAC 0000                       		dc.w byte_5AB0-Ani_obj8B
00005CAE 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005CB2 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005CB6 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005CC8                            		even
00005CC8                            		even
00005CC8                            
00005CC8                            ; ===========================================================================
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8                            
00005CC8                            Obj8C:					; XREF: Obj_Index
00005CC8 7000                       		moveq	#0,d0
00005CCA 1028 0024                  		move.b	$24(a0),d0
00005CCE 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005CD2 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005CD6 4EF9 0000 0000             		jmp	DisplaySprite
00005CDC                            ; ===========================================================================
00005CDC 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005CDE 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005CE0                            ; ===========================================================================
00005CE0                            
00005CE0                            Obj8C_Main:				; XREF: Obj8C_Index
00005CE0 2248                       		movea.l	a0,a1
00005CE2 7400                       		moveq	#0,d2
00005CE4 7600                       		moveq	#0,d3
00005CE6 7205                       		moveq	#5,d1
00005CE8 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005CEC                            
00005CEC                            Obj8C_MakeEms:				; XREF: loc_5B42
00005CEC 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005CF0 5429 0024                  		addq.b	#2,$24(a1)
00005CF4 237C 0000 5968 0004        		move.l	#Map_obj88,4(a1)
00005CFC 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005D02 137C 0000 0001             		move.b	#0,1(a1)
00005D08 137C 0001 0018             		move.b	#1,$18(a1)
00005D0E 337C 0104 0008             		move.w	#$104,8(a1)
00005D14 337C 0120 0038             		move.w	#$120,$38(a1)
00005D1A 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005D20 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005D26 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005D2C 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005D30                            
00005D30                            Obj8C_ChkEms:
00005D30 7000                       		moveq	#0,d0
00005D32 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005D36 5340                       		subq.w	#1,d0
00005D38 6500                       		bcs.s	loc_5B42
00005D3A                            
00005D3A                            Obj8C_ChkEmLoop:
00005D3A B433 0000                  		cmp.b	(a3,d0.w),d2
00005D3E 6600                       		bne.s	loc_5B3E
00005D40 5202                       		addq.b	#1,d2
00005D42 60EC                       		bra.s	Obj8C_ChkEms
00005D44                            ; ===========================================================================
00005D44                            
00005D44                            loc_5B3E:
00005D44 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005D48                            
00005D48                            loc_5B42:
00005D48 1342 001A                  		move.b	d2,$1A(a1)
00005D4C 5229 001A                  		addq.b	#1,$1A(a1)
00005D50 5202                       		addq.b	#1,d2
00005D52 137C 0080 0026             		move.b	#$80,$26(a1)
00005D58 1343 001E                  		move.b	d3,$1E(a1)
00005D5C 1343 001F                  		move.b	d3,$1F(a1)
00005D60 0643 000A                  		addi.w	#$A,d3
00005D64 43E9 0040                  		lea	$40(a1),a1
00005D68 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005D6C                            
00005D6C                            Obj8C_Move:				; XREF: Obj8C_Index
00005D6C 4A68 003E                  		tst.w	$3E(a0)
00005D70 6700                       		beq.s	locret_5BBA
00005D72 4A28 001E                  		tst.b	$1E(a0)
00005D76 6700                       		beq.s	loc_5B78
00005D78 5328 001E                  		subq.b	#1,$1E(a0)
00005D7C 6600                       		bne.s	loc_5B80
00005D7E                            
00005D7E                            loc_5B78:
00005D7E 3028 003E                  		move.w	$3E(a0),d0
00005D82 D168 0026                  		add.w	d0,$26(a0)
00005D86                            
00005D86                            loc_5B80:
00005D86 1028 0026                  		move.b	$26(a0),d0
00005D8A 6700                       		beq.s	loc_5B8C
00005D8C 0C00 0080                  		cmpi.b	#$80,d0
00005D90 6600                       		bne.s	loc_5B96
00005D92                            
00005D92                            loc_5B8C:
00005D92 4268 003E                  		clr.w	$3E(a0)
00005D96 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005D9C                            
00005D9C                            loc_5B96:
00005D9C 4EB9 0000 29F6             		jsr	(CalcSine).l
00005DA2 7800                       		moveq	#0,d4
00005DA4 1828 003C                  		move.b	$3C(a0),d4
00005DA8 C3C4                       		muls.w	d4,d1
00005DAA E081                       		asr.l	#8,d1
00005DAC C1C4                       		muls.w	d4,d0
00005DAE E080                       		asr.l	#8,d0
00005DB0 D268 0038                  		add.w	$38(a0),d1
00005DB4 D068 003A                  		add.w	$3A(a0),d0
00005DB8 3141 0008                  		move.w	d1,8(a0)
00005DBC 3140 000A                  		move.w	d0,$A(a0)
00005DC0                            
00005DC0                            locret_5BBA:
00005DC0 4E75                       		rts	
00005DC2                            ; ===========================================================================
00005DC2                            ; ---------------------------------------------------------------------------
00005DC2                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005DC2                            ; ---------------------------------------------------------------------------
00005DC2                            Map_obj8B:
00005DC2                            	include "_maps\obj8B.asm"
00005DC2                            ; ---------------------------------------------------------------------------
00005DC2                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005DC2                            ; ---------------------------------------------------------------------------
00005DC2 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005DC6 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005DCA 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005DCE 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005DD2 08                         byte_5BCC:	dc.b 8
00005DD3 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005DD8 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005DDD E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005DE2 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005DE7 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005DEC 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005DF1 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005DF6 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005DFB 08                         byte_5BF5:	dc.b 8
00005DFC E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005E01 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005E06 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005E0B F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005E10 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005E15 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005E1A 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005E1F 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E24 08                         byte_5C1E:	dc.b 8
00005E25 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005E2A F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005E2F E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005E34 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005E39 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005E3E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005E43 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005E48 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E4D 08                         byte_5C47:	dc.b 8
00005E4E E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005E53 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005E58 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005E5D F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005E62 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005E67 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005E6C 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005E71 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E76 0C                         byte_5C70:	dc.b $C
00005E77 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005E7C F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005E81 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005E86 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005E8B ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005E90 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005E95 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005E9A 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005E9F 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005EA4 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005EA9 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005EAE 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005EB3 0A                         byte_5CAD:	dc.b $A
00005EB4 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005EB9 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005EBE F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00005EC3 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00005EC8 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00005ECD F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00005ED2 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005ED7 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005EDC 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00005EE1 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00005EE6 0A                         byte_5CE0:	dc.b $A
00005EE7 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00005EEC E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00005EF1 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00005EF6 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00005EFB E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00005F00 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00005F05 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005F0A 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005F0F 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00005F14 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00005F19 0C                         byte_5D13:	dc.b $C
00005F1A F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00005F1F FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00005F24 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00005F29 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00005F2E F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00005F33 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00005F38 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00005F3D 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00005F42 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00005F47 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00005F4C 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005F51 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005F56                            		even
00005F56                            		even
00005F56                            
00005F56                            ; ---------------------------------------------------------------------------
00005F56                            ; Ending sequence demos
00005F56                            ; ---------------------------------------------------------------------------
00005F56                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00005F84                            		even
00005F84                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00005FC4                            		even
00005FC4                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00005FF4                            		even
00005FF4                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006024                            		even
00006024                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006044                            		even
00006044                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00006064                            		even
00006064                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00006094                            		even
00006094                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
000060C4                            		even
000060C4                            
000060C4                            ; ---------------------------------------------------------------------------
000060C4                            ; Subroutine to	load level boundaries and start	locations
000060C4                            ; ---------------------------------------------------------------------------
000060C4                            
000060C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000060C4                            
000060C4                            
000060C4                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
000060C4 7000                       		moveq	#0,d0
000060C6 11C0 F740                  		move.b	d0,($FFFFF740).w
000060CA 11C0 F741                  		move.b	d0,($FFFFF741).w
000060CE 11C0 F746                  		move.b	d0,($FFFFF746).w
000060D2 11C0 F748                  		move.b	d0,($FFFFF748).w
000060D6 11C0 F742                  		move.b	d0,($FFFFF742).w
000060DA 3038 FE10                  		move.w	($FFFFFE10).w,d0
000060DE ED08                       		lsl.b	#6,d0
000060E0 E848                       		lsr.w	#4,d0
000060E2 3200                       		move.w	d0,d1
000060E4 D040                       		add.w	d0,d0
000060E6 D041                       		add.w	d1,d0
000060E8 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
000060EC 3018                       		move.w	(a0)+,d0
000060EE 31C0 F730                  		move.w	d0,($FFFFF730).w
000060F2 2018                       		move.l	(a0)+,d0
000060F4 21C0 F728                  		move.l	d0,($FFFFF728).w
000060F8 21C0 F720                  		move.l	d0,($FFFFF720).w
000060FC 2018                       		move.l	(a0)+,d0
000060FE 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006102 21C0 F724                  		move.l	d0,($FFFFF724).w
00006106 3038 F728                  		move.w	($FFFFF728).w,d0
0000610A 0640 0240                  		addi.w	#$240,d0
0000610E 31C0 F732                  		move.w	d0,($FFFFF732).w
00006112 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006118 3018                       		move.w	(a0)+,d0
0000611A 31C0 F73E                  		move.w	d0,($FFFFF73E).w
0000611E 6000 0000                  		bra.w	LevSz_ChkLamp
00006122                            ; ===========================================================================
00006122                            ; ---------------------------------------------------------------------------
00006122                            ; Level size array and ending start location array
00006122                            ; ---------------------------------------------------------------------------
00006122                            LevelSizeArray:	incbin	misc\lvl_size.bin
00006272                            		even
00006272                            
00006272                            EndingStLocArray:
00006272                            		incbin	misc\sloc_end.bin
00006292                            		even
00006292                            
00006292                            ; ===========================================================================
00006292                            
00006292                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006292 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006296 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006298 4EB9 0000 0000             		jsr	Obj79_LoadInfo
0000629E 3238 D008                  		move.w	($FFFFD008).w,d1
000062A2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000062A6 6000                       		bra.s	loc_60D0
000062A8                            ; ===========================================================================
000062A8                            
000062A8                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000062A8 3038 FE10                  		move.w	($FFFFFE10).w,d0
000062AC ED08                       		lsl.b	#6,d0
000062AE E848                       		lsr.w	#4,d0
000062B0 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000062B4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000062B8 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000062BA 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000062BE 5340                       		subq.w	#1,d0
000062C0 E548                       		lsl.w	#2,d0
000062C2 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000062C6                            
000062C6                            LevSz_SonicPos:
000062C6 7200                       		moveq	#0,d1
000062C8 3219                       		move.w	(a1)+,d1
000062CA 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000062CE 7000                       		moveq	#0,d0
000062D0 3011                       		move.w	(a1),d0
000062D2 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000062D6                            
000062D6                            loc_60D0:				; XREF: LevSz_ChkLamp
000062D6 0441 00A0                  		subi.w	#$A0,d1
000062DA 6400                       		bcc.s	loc_60D8
000062DC 7200                       		moveq	#0,d1
000062DE                            
000062DE                            loc_60D8:
000062DE 3438 F72A                  		move.w	($FFFFF72A).w,d2
000062E2 B242                       		cmp.w	d2,d1
000062E4 6500                       		bcs.s	loc_60E2
000062E6 3202                       		move.w	d2,d1
000062E8                            
000062E8                            loc_60E2:
000062E8 31C1 F700                  		move.w	d1,($FFFFF700).w
000062EC 0440 0060                  		subi.w	#$60,d0
000062F0 6400                       		bcc.s	loc_60EE
000062F2 7000                       		moveq	#0,d0
000062F4                            
000062F4                            loc_60EE:
000062F4 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000062F8 6D00                       		blt.s	loc_60F8
000062FA 3038 F72E                  		move.w	($FFFFF72E).w,d0
000062FE                            
000062FE                            loc_60F8:
000062FE 31C0 F704                  		move.w	d0,($FFFFF704).w
00006302 6100 0000                  		bsr.w	BgScrollSpeed
00006306 7000                       		moveq	#0,d0
00006308 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000630C E508                       		lsl.b	#2,d0
0000630E 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006314 6000 0000                  		bra.w	LevSz_Unk
00006318                            ; ===========================================================================
00006318                            ; ---------------------------------------------------------------------------
00006318                            ; Sonic	start location array
00006318                            ; ---------------------------------------------------------------------------
00006318                            StartLocArray:	incbin	misc\sloc_lev.bin
00006388                            		even
00006388                            
00006388                            ; ---------------------------------------------------------------------------
00006388                            ; Which	256x256	tiles contain loops or roll-tunnels
00006388                            ; ---------------------------------------------------------------------------
00006388                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006388                            ; loop,	loop, tunnel, tunnel
00006388                            ; ---------------------------------------------------------------------------
00006388                            LoopTileNums:	incbin	misc\loopnums.bin
000063A4                            		even
000063A4                            
000063A4                            ; ===========================================================================
000063A4                            
000063A4                            LevSz_Unk:				; XREF: LevelSizeLoad
000063A4 7000                       		moveq	#0,d0
000063A6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000063AA E748                       		lsl.w	#3,d0
000063AC 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000063B0 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000063B4 24D9                       		move.l	(a1)+,(a2)+
000063B6 24D9                       		move.l	(a1)+,(a2)+
000063B8 4E75                       		rts	
000063BA                            ; End of function LevelSizeLoad
000063BA                            
000063BA                            ; ===========================================================================
000063BA 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000063C2 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063CA 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063D2 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063DA 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063E2 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063EA 0070 0100 0100 0100        		dc.l $700100, $1000100
000063F2                            
000063F2                            ; ---------------------------------------------------------------------------
000063F2                            ; Subroutine to	set scroll speed of some backgrounds
000063F2                            ; ---------------------------------------------------------------------------
000063F2                            
000063F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000063F2                            
000063F2                            
000063F2                            BgScrollSpeed:				; XREF: LevelSizeLoad
000063F2 4A38 FE30                  		tst.b	($FFFFFE30).w
000063F6 6600                       		bne.s	loc_6206
000063F8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000063FC 31C0 F714                  		move.w	d0,($FFFFF714).w
00006400 31C1 F708                  		move.w	d1,($FFFFF708).w
00006404 31C1 F710                  		move.w	d1,($FFFFF710).w
00006408 31C1 F718                  		move.w	d1,($FFFFF718).w
0000640C                            
0000640C                            loc_6206:
0000640C 7400                       		moveq	#0,d2
0000640E 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006412 D442                       		add.w	d2,d2
00006414 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006418 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000641C                            ; End of function BgScrollSpeed
0000641C                            
0000641C                            ; ===========================================================================
0000641C 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006420 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006424 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006428 0000                       		dc.w BgScroll_End-BgScroll_Index
0000642A                            ; ===========================================================================
0000642A                            
0000642A                            BgScroll_GHZ:				; XREF: BgScroll_Index
0000642A 42B8 F708                  		clr.l	($FFFFF708).w
0000642E 42B8 F70C                  		clr.l	($FFFFF70C).w
00006432 42B8 F714                  		clr.l	($FFFFF714).w
00006436 42B8 F71C                  		clr.l	($FFFFF71C).w
0000643A 45F8 A800                  		lea	($FFFFA800).w,a2
0000643E 429A                       		clr.l	(a2)+
00006440 429A                       		clr.l	(a2)+
00006442 429A                       		clr.l	(a2)+
00006444 4E75                       		rts 
00006446                            ; ===========================================================================
00006446                            
00006446                            BgScroll_LZ:				; XREF: BgScroll_Index
00006446 E280                       		asr.l	#1,d0
00006448 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000644C 4E75                       		rts	
0000644E                            ; ===========================================================================
0000644E                            
0000644E                            BgScroll_MZ:				; XREF: BgScroll_Index
0000644E 4E75                       		rts	
00006450                            ; ===========================================================================
00006450                            
00006450                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006450 E280                       		asr.l	#1,d0
00006452 0640 00C0                  		addi.w	#$C0,d0
00006456 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000645A 42B8 F708                  		clr.l	($FFFFF708).w
0000645E 4E75                       		rts	
00006460                            ; ===========================================================================
00006460                            
00006460                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006460 E980                       		asl.l	#4,d0
00006462 2400                       		move.l	d0,d2
00006464 E380                       		asl.l	#1,d0
00006466 D082                       		add.l	d2,d0
00006468 E080                       		asr.l	#8,d0
0000646A 5240                       		addq.w	#1,d0
0000646C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006470 42B8 F708                  		clr.l	($FFFFF708).w
00006474 4E75                       		rts	
00006476                            ; ===========================================================================
00006476                            
00006476                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006476 0240 07F8                  		andi.w	#$7F8,d0
0000647A E640                       		asr.w	#3,d0
0000647C 5240                       		addq.w	#1,d0
0000647E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006482 4E75                       		rts	
00006484                            ; ===========================================================================
00006484                            
00006484                            BgScroll_End:				; XREF: BgScroll_Index
00006484 3038 F700                  		move.w	($FFFFF700).w,d0
00006488 E240                       		asr.w	#1,d0
0000648A 31C0 F708                  		move.w	d0,($FFFFF708).w
0000648E 31C0 F710                  		move.w	d0,($FFFFF710).w
00006492 E440                       		asr.w	#2,d0
00006494 3200                       		move.w	d0,d1
00006496 D040                       		add.w	d0,d0
00006498 D041                       		add.w	d1,d0
0000649A 31C0 F718                  		move.w	d0,($FFFFF718).w
0000649E 42B8 F70C                  		clr.l	($FFFFF70C).w
000064A2 42B8 F714                  		clr.l	($FFFFF714).w
000064A6 42B8 F71C                  		clr.l	($FFFFF71C).w
000064AA 45F8 A800                  		lea	($FFFFA800).w,a2
000064AE 429A                       		clr.l	(a2)+
000064B0 429A                       		clr.l	(a2)+
000064B2 429A                       		clr.l	(a2)+
000064B4 4E75                       		rts
000064B6                            
000064B6                            ; ---------------------------------------------------------------------------
000064B6                            ; Background layer deformation subroutines
000064B6                            ; ---------------------------------------------------------------------------
000064B6                            
000064B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000064B6                            
000064B6                            
000064B6                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
000064B6 4A38 F744                  		tst.b	($FFFFF744).w
000064BA 6700                       		beq.s	loc_628E
000064BC 4E75                       		rts	
000064BE                            ; ===========================================================================
000064BE                            
000064BE                            loc_628E:
000064BE 4278 F754                  		clr.w	($FFFFF754).w
000064C2 4278 F756                  		clr.w	($FFFFF756).w
000064C6 4278 F758                  		clr.w	($FFFFF758).w
000064CA 4278 F75A                  		clr.w	($FFFFF75A).w
000064CE 6100 0000                  		bsr.w	ScrollHoriz
000064D2 6100 0000                  		bsr.w	ScrollVertical
000064D6 6100 0000                  		bsr.w	DynScrResizeLoad
000064DA 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000064E0 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000064E6 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
000064EC 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000064F2 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
000064F8 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
000064FE 7000                       		moveq	#0,d0
00006500 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006504 D040                       		add.w	d0,d0
00006506 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
0000650A 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
0000650E                            ; End of function DeformBgLayer
0000650E                            
0000650E                            ; ===========================================================================
0000650E                            ; ---------------------------------------------------------------------------
0000650E                            ; Offset index for background layer deformation	code
0000650E                            ; ---------------------------------------------------------------------------
0000650E 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006512 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006516 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
0000651A 0000                       		dc.w Deform_GHZ-Deform_Index
0000651C                            ; ---------------------------------------------------------------------------
0000651C                            ; Green	Hill Zone background layer deformation code
0000651C                            ; ---------------------------------------------------------------------------
0000651C                            
0000651C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000651C                            
0000651C                            
0000651C                            Deform_GHZ:
0000651C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006520 48C4                       		ext.l	d4
00006522 EB84                       		asl.l	#5,d4
00006524 2204                       		move.l	d4,d1
00006526 E384                       		asl.l	#1,d4
00006528 D881                       		add.l	d1,d4
0000652A 7C00                       		moveq	#0,d6
0000652C 6100 0000                  		bsr.w	ScrollBlock6
00006530 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006534 48C4                       		ext.l	d4
00006536 EF84                       		asl.l	#7,d4
00006538 7C00                       		moveq	#0,d6
0000653A 6100 0000                  		bsr.w	ScrollBlock5
0000653E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006542 3038 F704                  		move.w	($FFFFF704).w,d0
00006546 0240 07FF                  		andi.w	#$7FF,d0
0000654A EA48                       		lsr.w	#5,d0
0000654C 4440                       		neg.w	d0
0000654E 0640 0020                  		addi.w	#$20,d0	; ' '
00006552 6A00                       		bpl.s	Deform_GHZ_1
00006554 7000                       		moveq	#0,d0
00006556                            
00006556                            Deform_GHZ_1:				; XREF: Deform_GHZ
00006556 3800                       		move.w	d0,d4
00006558 31C0 F618                  		move.w	d0,($FFFFF618).w
0000655C 3038 F700                  		move.w	($FFFFF700).w,d0
00006560 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006566 6600                       		bne.s	Deform_GHZ_2
00006568 7000                       		moveq	#0,d0
0000656A                            
0000656A                            Deform_GHZ_2:				; XREF: Deform_GHZ
0000656A 4440                       		neg.w	d0
0000656C 4840                       		swap	d0
0000656E 45F8 A800                  		lea	($FFFFA800).w,a2
00006572 069A 0001 0000             		addi.l	#$10000,(a2)+
00006578 069A 0000 C000             		addi.l	#$C000,(a2)+
0000657E 069A 0000 8000             		addi.l	#$8000,(a2)+
00006584 3038 A800                  		move.w	($FFFFA800).w,d0
00006588 D078 F718                  		add.w	($FFFFF718).w,d0
0000658C 4440                       		neg.w	d0
0000658E 323C 001F                  		move.w	#$1F,d1
00006592 9244                       		sub.w	d4,d1
00006594 6500                       		bcs.s	Deform_GHZ_4
00006596                            
00006596                            Deform_GHZ_3:				; XREF: Deform_GHZ
00006596 22C0                       		move.l	d0,(a1)+
00006598 51C9 FFFC                  		dbf	d1,Deform_GHZ_3
0000659C                            
0000659C                            Deform_GHZ_4:				; XREF: Deform_GHZ
0000659C 3038 A804                  		move.w	($FFFFA804).w,d0
000065A0 D078 F718                  		add.w	($FFFFF718).w,d0
000065A4 4440                       		neg.w	d0
000065A6 323C 000F                  		move.w	#$F,d1
000065AA                            
000065AA                            Deform_GHZ_5:				; XREF: Deform_GHZ
000065AA 22C0                       		move.l	d0,(a1)+
000065AC 51C9 FFFC                  		dbf	d1,Deform_GHZ_5
000065B0 3038 A808                  		move.w	($FFFFA808).w,d0
000065B4 D078 F718                  		add.w	($FFFFF718).w,d0
000065B8 4440                       		neg.w	d0
000065BA 323C 000F                  		move.w	#$F,d1
000065BE                            
000065BE                            Deform_GHZ_6:				; XREF: Deform_GHZ
000065BE 22C0                       		move.l	d0,(a1)+
000065C0 51C9 FFFC                  		dbf	d1,Deform_GHZ_6
000065C4 323C 002F                  		move.w	#$2F,d1	; '/'
000065C8 3038 F718                  		move.w	($FFFFF718).w,d0
000065CC 4440                       		neg.w	d0
000065CE                            
000065CE                            Deform_GHZ_7:				; XREF: Deform_GHZ
000065CE 22C0                       		move.l	d0,(a1)+
000065D0 51C9 FFFC                  		dbf	d1,Deform_GHZ_7
000065D4 323C 0027                  		move.w	#$27,d1	; '''
000065D8 3038 F710                  		move.w	($FFFFF710).w,d0
000065DC 4440                       		neg.w	d0
000065DE                            
000065DE                            Deform_GHZ_8:				; XREF: Deform_GHZ
000065DE 22C0                       		move.l	d0,(a1)+
000065E0 51C9 FFFC                  		dbf	d1,Deform_GHZ_8
000065E4 3038 F710                  		move.w	($FFFFF710).w,d0
000065E8 3438 F700                  		move.w	($FFFFF700).w,d2
000065EC 9440                       		sub.w	d0,d2
000065EE 48C2                       		ext.l	d2
000065F0 E182                       		asl.l	#8,d2
000065F2 85FC 0068                  		divs.w	#$68,d2	; 'h'
000065F6 48C2                       		ext.l	d2
000065F8 E182                       		asl.l	#8,d2
000065FA 7600                       		moveq	#0,d3
000065FC 3600                       		move.w	d0,d3
000065FE 323C 0047                  		move.w	#$47,d1	; 'G'
00006602 D244                       		add.w	d4,d1
00006604                            
00006604                            Deform_GHZ_9:				; XREF: Deform_GHZ
00006604 3003                       		move.w	d3,d0
00006606 4440                       		neg.w	d0
00006608 22C0                       		move.l	d0,(a1)+
0000660A 4843                       		swap	d3
0000660C D682                       		add.l	d2,d3
0000660E 4843                       		swap	d3
00006610 51C9 FFF2                  		dbf	d1,Deform_GHZ_9
00006614 4E75                       		rts	
00006616                            ; End of function Deform_GHZ
00006616                            
00006616                            ; ===========================================================================
00006616                            ; ---------------------------------------------------------------------------
00006616                            ; Scroll routine for Labyrinth Zone - optimised by MarkeyJester
00006616                            ; ---------------------------------------------------------------------------
00006616                            
00006616                            Deform_LZ:
00006616 7007                       		moveq	#$07,d0					; prepare multiplication 100 / 2 for BG scrolling
00006618 3838 F73A                  		move.w	($FFFFF73A).w,d4			; load horizontal movement distance (Since last frame)
0000661C 48C4                       		ext.l	d4					; extend to long-word signed
0000661E E1A4                       		asl.l	d0,d4					; align as fixed point 16, but divide by 2 for BG
00006620 3A38 F73C                  		move.w	($FFFFF73C).w,d5			; load vertical movement distance (Since last frame)
00006624 48C5                       		ext.l	d5					; extend to long-word signed
00006626 E1A5                       		asl.l	d0,d5					; align as fixed point 16, but divide by 2 for BG
00006628 6100 0000                  		bsr.w	ScrollBlock1				; adjust BG scroll positions (and set draw code direction flags)
0000662C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w		; set BG V-scroll position
00006632 43F8 CC00                  		lea	($FFFFCC00).w,a1			; load H-scroll buffer
00006636 3038 F700                  		move.w	($FFFFF700).w,d0			; load FG X position
0000663A 4440                       		neg.w	d0					; reverse
0000663C 4840                       		swap	d0					; send to upper word
0000663E 3038 F708                  		move.w	($FFFFF708).w,d0			; load BG X position
00006642 4440                       		neg.w	d0					; reverse
00006644 7600                       		moveq	#$00,d3					; clear d3
00006646 1638 F7D8                  		move.b	($FFFFF7D8).w,d3			; load wave-scroll timer
0000664A 0678 0080 F7D8             		addi.w	#$0080,($FFFFF7D8).w			; increase wave-scroll timer
00006650 343C 00E0                  		move.w	#$00E0,d2				; prepare water-line count
00006654 3238 F646                  		move.w	($FFFFF646).w,d1			; load water line position
00006658 9278 F704                  		sub.w	($FFFFF704).w,d1			; minus FG Y position
0000665C 6B00                       		bmi.s	DLZ_Water				; if the screen is already underwater, branch
0000665E B242                       		cmp.w	d2,d1					; is the water line below the screen?
00006660 6F00                       		ble.s	DLZ_NoWater				; if not, branch
00006662 3202                       		move.w	d2,d1					; set at maximum
00006664                            
00006664                            DLZ_NoWater:
00006664 9441                       		sub.w	d1,d2					; subtract from water-line count
00006666 D601                       		add.b	d1,d3					; advance scroll wave timer to correct amount
00006668 5301                       		subq.b	#$01,d1					; decrease above water count
0000666A 6500                       		bcs.s	DLZ_Water				; if finished, branch
0000666C                            
0000666C                            DLZ_Above:
0000666C 22C0                       		move.l	d0,(a1)+				; save scroll position to buffer
0000666E 51C9 FFFC                  		dbf	d1,DLZ_Above				; repeat for all above water lines
00006672                            
00006672                            DLZ_Water:
00006672 5302                       		subq.b	#$01,d2					; decrease below water count
00006674 6500                       		bcs.s	DLZ_Finish				; if finished, branch
00006676 3200                       		move.w	d0,d1					; copy BG position back to d1
00006678 4840                       		swap	d0					; move FG position back to lower word in d0
0000667A 3803                       		move.w	d3,d4					; copy sroll timer for BG use
0000667C D638 F705                  		add.b	($FFFFF704+$01).w,d3			; add FG Y position
00006680 D838 F70D                  		add.b	($FFFFF70C+$01).w,d4			; add BG Y position
00006684 D643                       		add.w	d3,d3					; multiply by word size (2)
00006686 D844                       		add.w	d4,d4					; ''
00006688 47F9 0000 0000             		lea	(DLZ_WaveBG).l,a3			; load beginning of BG wave data
0000668E D6C4                       		adda.w	d4,a3					; advance to correct starting point
00006690 1813                       		move.b	(a3),d4					; get current position byte
00006692 E404                       		asr.b	#$02,d4					; get only the position bits
00006694 4884                       		ext.w	d4					; extend to word
00006696 D244                       		add.w	d4,d1					; adjust BG's current position
00006698 45FB 3000                  		lea	DLZ_WaveFG(pc,d3.w),a2			; load correct starting point of FG wave data
0000669C 1812                       		move.b	(a2),d4					; get current position byte
0000669E E404                       		asr.b	#$02,d4					; get only the position bits
000066A0 4884                       		ext.w	d4					; extend to word
000066A2 D044                       		add.w	d4,d0					; adjust FG's current position
000066A4                            
000066A4                            DLZ_Below:
000066A4 D05A                       		add.w	(a2)+,d0				; alter FG horizontal position
000066A6 32C0                       		move.w	d0,(a1)+				; save to scroll buffer
000066A8 D25B                       		add.w	(a3)+,d1				; alter BG horizontal position
000066AA 32C1                       		move.w	d1,(a1)+				; save to scroll buffer
000066AC 51CA FFF6                  		dbf	d2,DLZ_Below				; repeat for all below water lines
000066B0                            
000066B0                            DLZ_Finish:
000066B0 4E75                       		rts						; return
000066B2                            
000066B2                            ; ---------------------------------------------------------------------------
000066B2                            ; Scroll data for the FG
000066B2                            ; ---------------------------------------------------------------------------
000066B2                            
000066B2                            DLZ_WaveFG:
000066B2                            		rept	$02
000066B2                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
000066B2                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066B2                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066B2                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066B2                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066B2                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066B2                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066B2                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066B2                            		dc.w	$03FF,$FC00,$FFFF,$F800,$FBFF,$F400,$F400,$F400,$F401,$F800,$F801,$FC00,$FC01,$0000,$0000,$0000
000066B2                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066B2                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
000066B2                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066B2                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066B2                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066B2                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066B2                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066B2 0001 0400 0401 0800 0801+  		endr
00006AB2                            
00006AB2                            ; ---------------------------------------------------------------------------
00006AB2                            ; Scroll data for the BG
00006AB2                            ; ---------------------------------------------------------------------------
00006AB2                            
00006AB2                            DLZ_WaveBG:	rept	$04
00006AB2                            		dc.w	$FC01,$0000,$0000,$0000,$0000,$0000,$0001,$0400,$0400,$0400,$0400,$0401,$0800,$0800,$0800,$0800
00006AB2                            		dc.w	$0800,$0800,$0801,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00
00006AB2                            		dc.w	$0C01,$13FF,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0FFF
00006AB2                            		dc.w	$0800,$0800,$0800,$0800,$0800,$0800,$0BFF,$0400,$0400,$0400,$0400,$07FF,$0000,$0000,$0000,$0000
00006AB2                            		dc.w	$0000,$03FF,$FC00,$FC00,$FC00,$FC00,$FFFF,$F800,$F800,$F800,$F800,$FBFF,$F400,$F400,$F400,$F400
00006AB2                            		dc.w	$F400,$F400,$F7FF,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000
00006AB2                            		dc.w	$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F001
00006AB2                            		dc.w	$F400,$F400,$F400,$F400,$F400,$F400,$F401,$F800,$F800,$F800,$F800,$F801,$FC00,$FC00,$FC00,$FC00
00006AB2 FC01 0000 0000 0000 0000+  		endr
00006EB2                            
00006EB2                            ; ===========================================================================
00006EB2                            
00006EB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EB2                            
00006EB2                            
00006EB2                            Deform_MZ:
00006EB2 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006EB6 48C4                       		ext.l	d4
00006EB8 ED84                       		asl.l	#6,d4
00006EBA 2204                       		move.l	d4,d1
00006EBC E384                       		asl.l	#1,d4
00006EBE D881                       		add.l	d1,d4
00006EC0 7C02                       		moveq	#2,d6
00006EC2 6100 0000                  		bsr.w	ScrollBlock4
00006EC6 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006ECA 48C4                       		ext.l	d4
00006ECC ED84                       		asl.l	#6,d4
00006ECE 7C06                       		moveq	#6,d6
00006ED0 6100 0000                  		bsr.w	ScrollBlock6
00006ED4 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006ED8 48C4                       		ext.l	d4
00006EDA EF84                       		asl.l	#7,d4
00006EDC 7C04                       		moveq	#4,d6
00006EDE 6100 0000                  		bsr.w	ScrollBlock5
00006EE2 303C 0200                  		move.w	#$200,d0
00006EE6 3238 F704                  		move.w	($FFFFF704).w,d1
00006EEA 0441 01C8                  		subi.w	#$1C8,d1
00006EEE 6500                       		bcs.s	Deform_MZ_1
00006EF0 3401                       		move.w	d1,d2
00006EF2 D241                       		add.w	d1,d1
00006EF4 D242                       		add.w	d2,d1
00006EF6 E441                       		asr.w	#2,d1
00006EF8 D041                       		add.w	d1,d0
00006EFA                            
00006EFA                            Deform_MZ_1:				; XREF: Deform_MZ
00006EFA 31C0 F714                  		move.w	d0,($FFFFF714).w
00006EFE 31C0 F71C                  		move.w	d0,($FFFFF71C).w
00006F02 6100 0000                  		bsr.w	ScrollBlock3
00006F06 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006F0C 1038 F756                  		move.b	($FFFFF756).w,d0
00006F10 8038 F758                  		or.b	($FFFFF758).w,d0
00006F14 8138 F75A                  		or.b	d0,($FFFFF75A).w
00006F18 4238 F756                  		clr.b	($FFFFF756).w
00006F1C 4238 F758                  		clr.b	($FFFFF758).w
00006F20 43F8 A800                  		lea	($FFFFA800).w,a1
00006F24 3438 F700                  		move.w	($FFFFF700).w,d2
00006F28 4442                       		neg.w	d2
00006F2A 3002                       		move.w	d2,d0
00006F2C E440                       		asr.w	#2,d0
00006F2E 9042                       		sub.w	d2,d0
00006F30 48C0                       		ext.l	d0
00006F32 E780                       		asl.l	#3,d0
00006F34 81FC 0005                  		divs.w	#5,d0
00006F38 48C0                       		ext.l	d0
00006F3A E980                       		asl.l	#4,d0
00006F3C E180                       		asl.l	#8,d0
00006F3E 7600                       		moveq	#0,d3
00006F40 3602                       		move.w	d2,d3
00006F42 E243                       		asr.w	#1,d3
00006F44 323C 0004                  		move.w	#4,d1
00006F48                            
00006F48                            Deform_MZ_2:				; XREF: Deform_MZ
00006F48 32C3                       		move.w	d3,(a1)+
00006F4A 4843                       		swap	d3
00006F4C D680                       		add.l	d0,d3
00006F4E 4843                       		swap	d3
00006F50 51C9 FFF6                  		dbf	d1,Deform_MZ_2
00006F54 3038 F718                  		move.w	($FFFFF718).w,d0
00006F58 4440                       		neg.w	d0
00006F5A 323C 0001                  		move.w	#1,d1
00006F5E                            
00006F5E                            Deform_MZ_3:				; XREF: Deform_MZ
00006F5E 32C0                       		move.w	d0,(a1)+
00006F60 51C9 FFFC                  		dbf	d1,Deform_MZ_3
00006F64 3038 F710                  		move.w	($FFFFF710).w,d0
00006F68 4440                       		neg.w	d0
00006F6A 323C 0008                  		move.w	#8,d1
00006F6E                            
00006F6E                            Deform_MZ_4:				; XREF: Deform_MZ
00006F6E 32C0                       		move.w	d0,(a1)+
00006F70 51C9 FFFC                  		dbf	d1,Deform_MZ_4
00006F74 3038 F708                  		move.w	($FFFFF708).w,d0
00006F78 4440                       		neg.w	d0
00006F7A 323C 000F                  		move.w	#$F,d1
00006F7E                            
00006F7E                            Deform_MZ_5:				; XREF: Deform_MZ
00006F7E 32C0                       		move.w	d0,(a1)+
00006F80 51C9 FFFC                  		dbf	d1,Deform_MZ_5
00006F84 45F8 A800                  		lea	($FFFFA800).w,a2
00006F88 3038 F70C                  		move.w	($FFFFF70C).w,d0
00006F8C 0440 0200                  		subi.w	#$200,d0
00006F90 3400                       		move.w	d0,d2
00006F92 0C40 0100                  		cmpi.w	#$100,d0
00006F96 6500                       		bcs.s	Deform_MZ_6
00006F98 303C 0100                  		move.w	#$100,d0
00006F9C                            
00006F9C                            Deform_MZ_6:				; XREF: Deform_MZ
00006F9C 0240 01F0                  		andi.w	#$1F0,d0
00006FA0 E648                       		lsr.w	#3,d0
00006FA2 45F2 0000                  		lea	(a2,d0.w),a2
00006FA6 6000 0000                  		bra.w	Deform_All
00006FAA                            ; ===========================================================================
00006FAA                            
00006FAA                            Deform_SLZ:
00006FAA 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006FAE 48C5                       		ext.l	d5
00006FB0 EF85                       		asl.l	#7,d5
00006FB2 6100 0000                  		bsr.w	ScrollBlock2
00006FB6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006FBC 43F8 A800                  		lea	($FFFFA800).w,a1
00006FC0 3438 F700                  		move.w	($FFFFF700).w,d2
00006FC4 4442                       		neg.w	d2
00006FC6 3002                       		move.w	d2,d0
00006FC8 E640                       		asr.w	#3,d0
00006FCA 9042                       		sub.w	d2,d0
00006FCC 48C0                       		ext.l	d0
00006FCE E980                       		asl.l	#4,d0
00006FD0 81FC 001C                  		divs.w	#$1C,d0
00006FD4 48C0                       		ext.l	d0
00006FD6 E980                       		asl.l	#4,d0
00006FD8 E180                       		asl.l	#8,d0
00006FDA 7600                       		moveq	#0,d3
00006FDC 3602                       		move.w	d2,d3
00006FDE 323C 001B                  		move.w	#$1B,d1
00006FE2                            
00006FE2                            Deform_SLZ_1:				; XREF: Deform_MZ
00006FE2 32C3                       		move.w	d3,(a1)+
00006FE4 4843                       		swap	d3
00006FE6 D680                       		add.l	d0,d3
00006FE8 4843                       		swap	d3
00006FEA 51C9 FFF6                  		dbf	d1,Deform_SLZ_1
00006FEE 3002                       		move.w	d2,d0
00006FF0 E640                       		asr.w	#3,d0
00006FF2 3200                       		move.w	d0,d1
00006FF4 E241                       		asr.w	#1,d1
00006FF6 D041                       		add.w	d1,d0
00006FF8 323C 0004                  		move.w	#4,d1
00006FFC                            
00006FFC                            Deform_SLZ_2:				; XREF: Deform_MZ
00006FFC 32C0                       		move.w	d0,(a1)+
00006FFE 51C9 FFFC                  		dbf	d1,Deform_SLZ_2
00007002 3002                       		move.w	d2,d0
00007004 E440                       		asr.w	#2,d0
00007006 323C 0004                  		move.w	#4,d1
0000700A                            
0000700A                            Deform_SLZ_3:				; XREF: Deform_MZ
0000700A 32C0                       		move.w	d0,(a1)+
0000700C 51C9 FFFC                  		dbf	d1,Deform_SLZ_3
00007010 3002                       		move.w	d2,d0
00007012 E240                       		asr.w	#1,d0
00007014 323C 001D                  		move.w	#$1D,d1
00007018                            
00007018                            Deform_SLZ_4:				; XREF: Deform_MZ
00007018 32C0                       		move.w	d0,(a1)+
0000701A 51C9 FFFC                  		dbf	d1,Deform_SLZ_4
0000701E 45F8 A800                  		lea	($FFFFA800).w,a2
00007022 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007026 3400                       		move.w	d0,d2
00007028 0440 00C0                  		subi.w	#$C0,d0	; 'À'
0000702C 0240 03F0                  		andi.w	#$3F0,d0
00007030 E648                       		lsr.w	#3,d0
00007032 45F2 0000                  		lea	(a2,d0.w),a2
00007036                            
00007036                            Deform_All:				; XREF: Deform_MZ, Deform_SYZ, ...
00007036 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000703A 323C 000E                  		move.w	#$E,d1
0000703E 3038 F700                  		move.w	($FFFFF700).w,d0
00007042 4440                       		neg.w	d0
00007044 4840                       		swap	d0
00007046 0242 000F                  		andi.w	#$F,d2
0000704A D442                       		add.w	d2,d2
0000704C 301A                       		move.w	(a2)+,d0
0000704E 4EFB 2000                  		jmp	Deform_All_2(pc,d2.w)
00007052                            ; End of function Deform_MZ
00007052                            
00007052                            ; ===========================================================================
00007052                            
00007052                            Deform_All_1:				; XREF: Deform_All
00007052 301A                       		move.w	(a2)+,d0
00007054                            
00007054                            Deform_All_2:
00007054 22C0                       		move.l	d0,(a1)+
00007056 22C0                       		move.l	d0,(a1)+
00007058 22C0                       		move.l	d0,(a1)+
0000705A 22C0                       		move.l	d0,(a1)+
0000705C 22C0                       		move.l	d0,(a1)+
0000705E 22C0                       		move.l	d0,(a1)+
00007060 22C0                       		move.l	d0,(a1)+
00007062 22C0                       		move.l	d0,(a1)+
00007064 22C0                       		move.l	d0,(a1)+
00007066 22C0                       		move.l	d0,(a1)+
00007068 22C0                       		move.l	d0,(a1)+
0000706A 22C0                       		move.l	d0,(a1)+
0000706C 22C0                       		move.l	d0,(a1)+
0000706E 22C0                       		move.l	d0,(a1)+
00007070 22C0                       		move.l	d0,(a1)+
00007072 22C0                       		move.l	d0,(a1)+
00007074 51C9 FFDC                  		dbf	d1,Deform_All_1
00007078 4E75                       		rts	
0000707A                            
0000707A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000707A                            
0000707A                            
0000707A                            Deform_SYZ:
0000707A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000707E 48C5                       		ext.l	d5
00007080 E985                       		asl.l	#4,d5
00007082 2205                       		move.l	d5,d1
00007084 E385                       		asl.l	#1,d5
00007086 DA81                       		add.l	d1,d5
00007088 6100 0000                  		bsr.w	ScrollBlock2
0000708C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007092 43F8 A800                  		lea	($FFFFA800).w,a1
00007096 3438 F700                  		move.w	($FFFFF700).w,d2
0000709A 4442                       		neg.w	d2
0000709C 3002                       		move.w	d2,d0
0000709E E640                       		asr.w	#3,d0
000070A0 9042                       		sub.w	d2,d0
000070A2 48C0                       		ext.l	d0
000070A4 E780                       		asl.l	#3,d0
000070A6 81FC 0008                  		divs.w	#8,d0
000070AA 48C0                       		ext.l	d0
000070AC E980                       		asl.l	#4,d0
000070AE E180                       		asl.l	#8,d0
000070B0 7600                       		moveq	#0,d3
000070B2 3602                       		move.w	d2,d3
000070B4 E243                       		asr.w	#1,d3
000070B6 323C 0007                  		move.w	#7,d1
000070BA                            
000070BA                            Deform_SYZ_1:				; XREF: Deform_SYZ
000070BA 32C3                       		move.w	d3,(a1)+
000070BC 4843                       		swap	d3
000070BE D680                       		add.l	d0,d3
000070C0 4843                       		swap	d3
000070C2 51C9 FFF6                  		dbf	d1,Deform_SYZ_1
000070C6 3002                       		move.w	d2,d0
000070C8 E640                       		asr.w	#3,d0
000070CA 323C 0004                  		move.w	#4,d1
000070CE                            
000070CE                            Deform_SYZ_2:				; XREF: Deform_SYZ
000070CE 32C0                       		move.w	d0,(a1)+
000070D0 51C9 FFFC                  		dbf	d1,Deform_SYZ_2
000070D4 3002                       		move.w	d2,d0
000070D6 E440                       		asr.w	#2,d0
000070D8 323C 0005                  		move.w	#5,d1
000070DC                            
000070DC                            Deform_SYZ_3:				; XREF: Deform_SYZ
000070DC 32C0                       		move.w	d0,(a1)+
000070DE 51C9 FFFC                  		dbf	d1,Deform_SYZ_3
000070E2 3002                       		move.w	d2,d0
000070E4 3202                       		move.w	d2,d1
000070E6 E241                       		asr.w	#1,d1
000070E8 9041                       		sub.w	d1,d0
000070EA 48C0                       		ext.l	d0
000070EC E980                       		asl.l	#4,d0
000070EE 81FC 000E                  		divs.w	#$E,d0
000070F2 48C0                       		ext.l	d0
000070F4 E980                       		asl.l	#4,d0
000070F6 E180                       		asl.l	#8,d0
000070F8 7600                       		moveq	#0,d3
000070FA 3602                       		move.w	d2,d3
000070FC E243                       		asr.w	#1,d3
000070FE 323C 000D                  		move.w	#$D,d1
00007102                            
00007102                            Deform_SYZ_4:				; XREF: Deform_SYZ
00007102 32C3                       		move.w	d3,(a1)+
00007104 4843                       		swap	d3
00007106 D680                       		add.l	d0,d3
00007108 4843                       		swap	d3
0000710A 51C9 FFF6                  		dbf	d1,Deform_SYZ_4
0000710E 45F8 A800                  		lea	($FFFFA800).w,a2
00007112 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007116 3400                       		move.w	d0,d2
00007118 0240 01F0                  		andi.w	#$1F0,d0
0000711C E648                       		lsr.w	#3,d0
0000711E 45F2 0000                  		lea	(a2,d0.w),a2
00007122 6000 FF12                  		bra.w	Deform_All
00007126                            ; End of function Deform_SYZ
00007126                            
00007126                            
00007126                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007126                            
00007126                            
00007126                            Deform_SBZ:
00007126 4A38 FE11                  		tst.b	($FFFFFE11).w
0000712A 6600 0000                  		bne.w	Deform_SBZ_Act2
0000712E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007132 48C4                       		ext.l	d4
00007134 EF84                       		asl.l	#7,d4
00007136 7C02                       		moveq	#2,d6
00007138 6100 0000                  		bsr.w	ScrollBlock4
0000713C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007140 48C4                       		ext.l	d4
00007142 ED84                       		asl.l	#6,d4
00007144 7C06                       		moveq	#6,d6
00007146 6100 0000                  		bsr.w	ScrollBlock6
0000714A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000714E 48C4                       		ext.l	d4
00007150 EB84                       		asl.l	#5,d4
00007152 2204                       		move.l	d4,d1
00007154 E384                       		asl.l	#1,d4
00007156 D881                       		add.l	d1,d4
00007158 7C04                       		moveq	#4,d6
0000715A 6100 0000                  		bsr.w	ScrollBlock5
0000715E 7800                       		moveq	#0,d4
00007160 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007164 48C5                       		ext.l	d5
00007166 EB85                       		asl.l	#5,d5
00007168 6100 0000                  		bsr.w	ScrollBlock1_2
0000716C 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007170 31C0 F714                  		move.w	d0,($FFFFF714).w
00007174 31C0 F71C                  		move.w	d0,($FFFFF71C).w
00007178 31C0 F618                  		move.w	d0,($FFFFF618).w
0000717C 1038 F756                  		move.b	($FFFFF756).w,d0
00007180 8038 F75A                  		or.b	($FFFFF75A).w,d0
00007184 8138 F758                  		or.b	d0,($FFFFF758).w
00007188 4238 F756                  		clr.b	($FFFFF756).w
0000718C 4238 F75A                  		clr.b	($FFFFF75A).w
00007190 43F8 A800                  		lea	($FFFFA800).w,a1
00007194 3438 F700                  		move.w	($FFFFF700).w,d2
00007198 4442                       		neg.w	d2
0000719A E442                       		asr.w	#2,d2
0000719C 3002                       		move.w	d2,d0
0000719E E240                       		asr.w	#1,d0
000071A0 9042                       		sub.w	d2,d0
000071A2 48C0                       		ext.l	d0
000071A4 E780                       		asl.l	#3,d0
000071A6 81FC 0004                  		divs.w	#4,d0
000071AA 48C0                       		ext.l	d0
000071AC E980                       		asl.l	#4,d0
000071AE E180                       		asl.l	#8,d0
000071B0 7600                       		moveq	#0,d3
000071B2 3602                       		move.w	d2,d3
000071B4 323C 0003                  		move.w	#3,d1
000071B8                            
000071B8                            Deform_SBZ_1:				; XREF: Deform_SBZ
000071B8 32C3                       		move.w	d3,(a1)+
000071BA 4843                       		swap	d3
000071BC D680                       		add.l	d0,d3
000071BE 4843                       		swap	d3
000071C0 51C9 FFF6                  		dbf	d1,Deform_SBZ_1
000071C4 3038 F718                  		move.w	($FFFFF718).w,d0
000071C8 4440                       		neg.w	d0
000071CA 323C 0009                  		move.w	#9,d1
000071CE                            
000071CE                            Deform_SBZ_2:				; XREF: Deform_SBZ
000071CE 32C0                       		move.w	d0,(a1)+
000071D0 51C9 FFFC                  		dbf	d1,Deform_SBZ_2
000071D4 3038 F710                  		move.w	($FFFFF710).w,d0
000071D8 4440                       		neg.w	d0
000071DA 323C 0006                  		move.w	#6,d1
000071DE                            
000071DE                            Deform_SBZ_3:				; XREF: Deform_SBZ
000071DE 32C0                       		move.w	d0,(a1)+
000071E0 51C9 FFFC                  		dbf	d1,Deform_SBZ_3
000071E4 3038 F708                  		move.w	($FFFFF708).w,d0
000071E8 4440                       		neg.w	d0
000071EA 323C 000A                  		move.w	#$A,d1
000071EE                            
000071EE                            Deform_SBZ_4:				; XREF: Deform_SBZ
000071EE 32C0                       		move.w	d0,(a1)+
000071F0 51C9 FFFC                  		dbf	d1,Deform_SBZ_4
000071F4 45F8 A800                  		lea	($FFFFA800).w,a2
000071F8 3038 F70C                  		move.w	($FFFFF70C).w,d0
000071FC 3400                       		move.w	d0,d2
000071FE 0240 01F0                  		andi.w	#$1F0,d0
00007202 E648                       		lsr.w	#3,d0
00007204 45F2 0000                  		lea	(a2,d0.w),a2
00007208 6000 FE2C                  		bra.w	Deform_All
0000720C                            ; ===========================================================================
0000720C                            
0000720C                            Deform_SBZ_Act2:			; XREF: Deform_SBZ
0000720C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007210 48C4                       		ext.l	d4
00007212 ED84                       		asl.l	#6,d4
00007214 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007218 48C5                       		ext.l	d5
0000721A EB85                       		asl.l	#5,d5
0000721C 6100 0000                  		bsr.w	ScrollBlock1
00007220 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007226 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000722A 323C 00DF                  		move.w	#$DF,d1	; 'ß'
0000722E 3038 F700                  		move.w	($FFFFF700).w,d0
00007232 4440                       		neg.w	d0
00007234 4840                       		swap	d0
00007236 3038 F708                  		move.w	($FFFFF708).w,d0
0000723A 4440                       		neg.w	d0
0000723C                            
0000723C                            Deform_SBZ_Act2_1:			; XREF: Deform_SBZ
0000723C 22C0                       		move.l	d0,(a1)+
0000723E 51C9 FFFC                  		dbf	d1,Deform_SBZ_Act2_1
00007242 4E75                       		rts	
00007244                            ; End of function Deform_SBZ
00007244                            
00007244                            ; ---------------------------------------------------------------------------
00007244                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007244                            ; ---------------------------------------------------------------------------
00007244                            
00007244                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007244                            
00007244                            
00007244                            ScrollHoriz:				; XREF: DeformBgLayer
00007244 3838 F700                  		move.w	($FFFFF700).w,d4
00007248 6100                       		bsr.s	ScrollHoriz2
0000724A 3038 F700                  		move.w	($FFFFF700).w,d0
0000724E 0240 0010                  		andi.w	#$10,d0
00007252 1238 F74A                  		move.b	($FFFFF74A).w,d1
00007256 B300                       		eor.b	d1,d0
00007258 6600                       		bne.s	locret_65B0
0000725A 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00007260 3038 F700                  		move.w	($FFFFF700).w,d0
00007264 9044                       		sub.w	d4,d0
00007266 6A00                       		bpl.s	loc_65AA
00007268 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000726E 4E75                       		rts	
00007270                            ; ===========================================================================
00007270                            
00007270                            loc_65AA:
00007270 08F8 0003 F754             		bset	#3,($FFFFF754).w
00007276                            
00007276                            locret_65B0:
00007276 4E75                       		rts	
00007278                            ; End of function ScrollHoriz
00007278                            
00007278                            
00007278                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007278                            
00007278                            
00007278                            ScrollHoriz2:				; XREF: ScrollHoriz
00007278 3038 D008                  		move.w	($FFFFD008).w,d0
0000727C 9078 F700                  		sub.w	($FFFFF700).w,d0
00007280 0440 0090                  		subi.w	#$90,d0
00007284 6B00                       		bmi.s	loc_65F6				; cs to mi (for negative)
00007286 0440 0010                  		subi.w	#$10,d0
0000728A 6A00                       		bpl.s	loc_65CC				; cc to pl (for negative)
0000728C 4278 F73A                  		clr.w	($FFFFF73A).w
00007290 4E75                       		rts
00007292                            ; ===========================================================================
00007292                            
00007292                            loc_65CC:
00007292 0C40 0010                  		cmpi.w	#$10,d0
00007296 6500                       		bcs.s	loc_65D6
00007298 303C 0010                  		move.w	#$10,d0
0000729C                            
0000729C                            loc_65D6:
0000729C D078 F700                  		add.w	($FFFFF700).w,d0
000072A0 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
000072A4 6D00                       		blt.s	loc_65E4
000072A6 3038 F72A                  		move.w	($FFFFF72A).w,d0
000072AA                            
000072AA                            loc_65E4:
000072AA 3200                       		move.w	d0,d1
000072AC 9278 F700                  		sub.w	($FFFFF700).w,d1
000072B0 E141                       		asl.w	#8,d1
000072B2 31C0 F700                  		move.w	d0,($FFFFF700).w
000072B6 31C1 F73A                  		move.w	d1,($FFFFF73A).w
000072BA 4E75                       		rts	
000072BC                            ; ===========================================================================
000072BC                            
000072BC                            loc_65F6:				; XREF: ScrollHoriz2
000072BC D078 F700                  		add.w	($FFFFF700).w,d0
000072C0 B078 F728                  		cmp.w	($FFFFF728).w,d0
000072C4 6EE4                       		bgt.s	loc_65E4
000072C6 3038 F728                  		move.w	($FFFFF728).w,d0
000072CA 60DE                       		bra.s	loc_65E4
000072CC                            ; End of function ScrollHoriz2
000072CC                            
000072CC                            ; ===========================================================================
000072CC 4A40                       		tst.w	d0
000072CE 6A00                       		bpl.s	loc_6610
000072D0 303C FFFE                  		move.w	#-2,d0
000072D4 60E6                       		bra.s	loc_65F6
000072D6                            ; ===========================================================================
000072D6                            
000072D6                            loc_6610:
000072D6 303C 0002                  		move.w	#2,d0
000072DA 60B6                       		bra.s	loc_65CC
000072DC                            
000072DC                            ; ---------------------------------------------------------------------------
000072DC                            ; Subroutine to	scroll the level vertically as Sonic moves
000072DC                            ; ---------------------------------------------------------------------------
000072DC                            
000072DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072DC                            
000072DC                            
000072DC                            ScrollVertical:				; XREF: DeformBgLayer
000072DC 7200                       		moveq	#0,d1
000072DE 3038 D00C                  		move.w	($FFFFD00C).w,d0
000072E2 9078 F704                  		sub.w	($FFFFF704).w,d0
000072E6 0838 0002 D022             		btst	#2,($FFFFD022).w
000072EC 6700                       		beq.s	loc_662A
000072EE 5B40                       		subq.w	#5,d0
000072F0                            
000072F0                            loc_662A:
000072F0 0838 0001 D022             		btst	#1,($FFFFD022).w
000072F6 6700                       		beq.s	loc_664A
000072F8 0640 0020                  		addi.w	#$20,d0
000072FC 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00007300 6500                       		bcs.s	loc_6696
00007302 0440 0040                  		subi.w	#$40,d0
00007306 6400                       		bcc.s	loc_6696
00007308 4A38 F75C                  		tst.b	($FFFFF75C).w
0000730C 6600                       		bne.s	loc_66A8
0000730E 6000                       		bra.s	loc_6656
00007310                            ; ===========================================================================
00007310                            
00007310                            loc_664A:
00007310 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00007314 6600                       		bne.s	loc_665C
00007316 4A38 F75C                  		tst.b	($FFFFF75C).w
0000731A 6600                       		bne.s	loc_66A8
0000731C                            
0000731C                            loc_6656:
0000731C 4278 F73C                  		clr.w	($FFFFF73C).w
00007320 4E75                       		rts	
00007322                            ; ===========================================================================
00007322                            
00007322                            loc_665C:
00007322 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00007328 6600                       		bne.s	loc_6684
0000732A 3238 D020                  		move.w	($FFFFD020).w,d1
0000732E 6A00                       		bpl.s	loc_666C
00007330 4441                       		neg.w	d1
00007332                            
00007332                            loc_666C:
00007332 0C41 0800                  		cmpi.w	#$800,d1
00007336 6400                       		bcc.s	loc_6696
00007338 323C 0600                  		move.w	#$600,d1
0000733C 0C40 0006                  		cmpi.w	#6,d0
00007340 6E00                       		bgt.s	loc_66F6
00007342 0C40 FFFA                  		cmpi.w	#-6,d0
00007346 6D00                       		blt.s	loc_66C0
00007348 6000                       		bra.s	loc_66AE
0000734A                            ; ===========================================================================
0000734A                            
0000734A                            loc_6684:
0000734A 323C 0200                  		move.w	#$200,d1
0000734E 0C40 0002                  		cmpi.w	#2,d0
00007352 6E00                       		bgt.s	loc_66F6
00007354 0C40 FFFE                  		cmpi.w	#-2,d0
00007358 6D00                       		blt.s	loc_66C0
0000735A 6000                       		bra.s	loc_66AE
0000735C                            ; ===========================================================================
0000735C                            
0000735C                            loc_6696:
0000735C 323C 1000                  		move.w	#$1000,d1
00007360 0C40 0010                  		cmpi.w	#$10,d0
00007364 6E00                       		bgt.s	loc_66F6
00007366 0C40 FFF0                  		cmpi.w	#-$10,d0
0000736A 6D00                       		blt.s	loc_66C0
0000736C 6000                       		bra.s	loc_66AE
0000736E                            ; ===========================================================================
0000736E                            
0000736E                            loc_66A8:
0000736E 7000                       		moveq	#0,d0
00007370 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00007374                            
00007374                            loc_66AE:
00007374 7200                       		moveq	#0,d1
00007376 3200                       		move.w	d0,d1
00007378 D278 F704                  		add.w	($FFFFF704).w,d1
0000737C 4A40                       		tst.w	d0
0000737E 6A00 0000                  		bpl.w	loc_6700
00007382 6000 0000                  		bra.w	loc_66CC
00007386                            ; ===========================================================================
00007386                            
00007386                            loc_66C0:
00007386 4441                       		neg.w	d1
00007388 48C1                       		ext.l	d1
0000738A E181                       		asl.l	#8,d1
0000738C D2B8 F704                  		add.l	($FFFFF704).w,d1
00007390 4841                       		swap	d1
00007392                            
00007392                            loc_66CC:
00007392 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00007396 6E00                       		bgt.s	loc_6724
00007398 0C41 FF00                  		cmpi.w	#-$100,d1
0000739C 6E00                       		bgt.s	loc_66F0
0000739E 0241 07FF                  		andi.w	#$7FF,d1
000073A2 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000073A8 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
000073AE 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000073B4 6000                       		bra.s	loc_6724
000073B6                            ; ===========================================================================
000073B6                            
000073B6                            loc_66F0:
000073B6 3238 F72C                  		move.w	($FFFFF72C).w,d1
000073BA 6000                       		bra.s	loc_6724
000073BC                            ; ===========================================================================
000073BC                            
000073BC                            loc_66F6:
000073BC 48C1                       		ext.l	d1
000073BE E181                       		asl.l	#8,d1
000073C0 D2B8 F704                  		add.l	($FFFFF704).w,d1
000073C4 4841                       		swap	d1
000073C6                            
000073C6                            loc_6700:
000073C6 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
000073CA 6D00                       		blt.s	loc_6724
000073CC 0441 0800                  		subi.w	#$800,d1
000073D0 6500                       		bcs.s	loc_6720
000073D2 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000073D8 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
000073DE 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000073E4 6000                       		bra.s	loc_6724
000073E6                            ; ===========================================================================
000073E6                            
000073E6                            loc_6720:
000073E6 3238 F72E                  		move.w	($FFFFF72E).w,d1
000073EA                            
000073EA                            loc_6724:
000073EA 3838 F704                  		move.w	($FFFFF704).w,d4
000073EE 4841                       		swap	d1
000073F0 2601                       		move.l	d1,d3
000073F2 96B8 F704                  		sub.l	($FFFFF704).w,d3
000073F6 E09B                       		ror.l	#8,d3
000073F8 31C3 F73C                  		move.w	d3,($FFFFF73C).w
000073FC 21C1 F704                  		move.l	d1,($FFFFF704).w
00007400 3038 F704                  		move.w	($FFFFF704).w,d0
00007404 0240 0010                  		andi.w	#$10,d0
00007408 1238 F74B                  		move.b	($FFFFF74B).w,d1
0000740C B300                       		eor.b	d1,d0
0000740E 6600                       		bne.s	locret_6766
00007410 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00007416 3038 F704                  		move.w	($FFFFF704).w,d0
0000741A 9044                       		sub.w	d4,d0
0000741C 6A00                       		bpl.s	loc_6760
0000741E 08F8 0000 F754             		bset	#0,($FFFFF754).w
00007424 4E75                       		rts	
00007426                            ; ===========================================================================
00007426                            
00007426                            loc_6760:
00007426 08F8 0001 F754             		bset	#1,($FFFFF754).w
0000742C                            
0000742C                            locret_6766:
0000742C 4E75                       		rts	
0000742E                            ; End of function ScrollVertical
0000742E                            
0000742E                            
0000742E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000742E                            
0000742E                            
0000742E                            ScrollBlock1:				; XREF: Deform_LZ, Deform_SBZ
0000742E 2438 F708                  		move.l	($FFFFF708).w,d2
00007432 2002                       		move.l	d2,d0
00007434 D084                       		add.l	d4,d0
00007436 21C0 F708                  		move.l	d0,($FFFFF708).w
0000743A 2200                       		move.l	d0,d1
0000743C 4841                       		swap	d1
0000743E 0241 0010                  		andi.w	#$10,d1
00007442 1638 F74C                  		move.b	($FFFFF74C).w,d3
00007446 B701                       		eor.b	d3,d1
00007448 6600                       		bne.s	ScrollBlock1_2
0000744A 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00007450 9082                       		sub.l	d2,d0
00007452 6A00                       		bpl.s	ScrollBlock1_1
00007454 08F8 0002 F756             		bset	#2,($FFFFF756).w
0000745A 6000                       		bra.s	ScrollBlock1_2
0000745C                            ; ===========================================================================
0000745C                            
0000745C                            ScrollBlock1_1:				; XREF: ScrollBlock1
0000745C 08F8 0003 F756             		bset	#3,($FFFFF756).w
00007462                            
00007462                            ScrollBlock1_2:				; XREF: ScrollBlock1, Deform_SBZ, ...
00007462 2638 F70C                  		move.l	($FFFFF70C).w,d3
00007466 2003                       		move.l	d3,d0
00007468 D085                       		add.l	d5,d0
0000746A 21C0 F70C                  		move.l	d0,($FFFFF70C).w
0000746E 2200                       		move.l	d0,d1
00007470 4841                       		swap	d1
00007472 0241 0010                  		andi.w	#$10,d1
00007476 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000747A B501                       		eor.b	d2,d1
0000747C 6600                       		bne.s	ScrollBlock1_End
0000747E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007484 9083                       		sub.l	d3,d0
00007486 6A00                       		bpl.s	ScrollBlock1_3
00007488 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000748E 4E75                       		rts	
00007490                            ; ===========================================================================
00007490                            
00007490                            ScrollBlock1_3:				; XREF: ScrollBlock1
00007490 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007496                            
00007496                            ScrollBlock1_End:			; XREF: ScrollBlock1
00007496 4E75                       		rts	
00007498                            ; End of function ScrollBlock1
00007498                            
00007498                            
00007498                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007498                            
00007498                            
00007498                            ScrollBlock2:				; XREF: Deform_MZ, Deform_SYZ
00007498 2638 F70C                  		move.l	($FFFFF70C).w,d3
0000749C 2003                       		move.l	d3,d0
0000749E D085                       		add.l	d5,d0
000074A0 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000074A4 2200                       		move.l	d0,d1
000074A6 4841                       		swap	d1
000074A8 0241 0010                  		andi.w	#$10,d1
000074AC 1438 F74D                  		move.b	($FFFFF74D).w,d2
000074B0 B501                       		eor.b	d2,d1
000074B2 6600                       		bne.s	ScrollBlock2_End
000074B4 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000074BA 9083                       		sub.l	d3,d0
000074BC 6A00                       		bpl.s	ScrollBlock2_1
000074BE 08F8 0004 F756             		bset	#4,($FFFFF756).w
000074C4 4E75                       		rts	
000074C6                            ; ===========================================================================
000074C6                            
000074C6                            ScrollBlock2_1:				; XREF: ScrollBlock2
000074C6 08F8 0005 F756             		bset	#5,($FFFFF756).w
000074CC                            
000074CC                            ScrollBlock2_End:			; XREF: ScrollBlock2
000074CC 4E75                       		rts	
000074CE                            ; End of function ScrollBlock2
000074CE                            
000074CE                            
000074CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074CE                            
000074CE                            
000074CE                            ScrollBlock3:				; XREF: Deform_MZ
000074CE 3638 F70C                  		move.w	($FFFFF70C).w,d3
000074D2 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000074D6 3200                       		move.w	d0,d1
000074D8 0241 0010                  		andi.w	#$10,d1
000074DC 1438 F74D                  		move.b	($FFFFF74D).w,d2
000074E0 B501                       		eor.b	d2,d1
000074E2 6600                       		bne.s	ScrollBlock3_End
000074E4 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000074EA 9043                       		sub.w	d3,d0
000074EC 6A00                       		bpl.s	ScrollBlock3_1
000074EE 08F8 0000 F756             		bset	#0,($FFFFF756).w
000074F4 4E75                       		rts	
000074F6                            ; ===========================================================================
000074F6                            
000074F6                            ScrollBlock3_1:				; XREF: ScrollBlock3
000074F6 08F8 0001 F756             		bset	#1,($FFFFF756).w
000074FC                            
000074FC                            ScrollBlock3_End:			; XREF: ScrollBlock3
000074FC 4E75                       		rts	
000074FE                            ; End of function ScrollBlock3
000074FE                            
000074FE                            
000074FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074FE                            
000074FE                            
000074FE                            ScrollBlock4:				; XREF: Deform_MZ, Deform_SBZ
000074FE 2438 F708                  		move.l	($FFFFF708).w,d2
00007502 2002                       		move.l	d2,d0
00007504 D084                       		add.l	d4,d0
00007506 21C0 F708                  		move.l	d0,($FFFFF708).w
0000750A 2200                       		move.l	d0,d1
0000750C 4841                       		swap	d1
0000750E 0241 0010                  		andi.w	#$10,d1
00007512 1638 F74C                  		move.b	($FFFFF74C).w,d3
00007516 B701                       		eor.b	d3,d1
00007518 6600                       		bne.s	ScrollBlock4_End
0000751A 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00007520 9082                       		sub.l	d2,d0
00007522 6A00                       		bpl.s	ScrollBlock4_1
00007524 0DF8 F756                  		bset	d6,($FFFFF756).w
00007528 6000                       		bra.s	ScrollBlock4_End
0000752A                            ; ===========================================================================
0000752A                            
0000752A                            ScrollBlock4_1:				; XREF: ScrollBlock4
0000752A 5206                       		addq.b	#1,d6
0000752C 0DF8 F756                  		bset	d6,($FFFFF756).w
00007530                            
00007530                            ScrollBlock4_End:			; XREF: ScrollBlock4
00007530 4E75                       		rts	
00007532                            ; End of function ScrollBlock4
00007532                            
00007532                            
00007532                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007532                            
00007532                            
00007532                            ScrollBlock5:				; XREF: Deform_GHZ, Deform_MZ, ...
00007532 2438 F710                  		move.l	($FFFFF710).w,d2
00007536 2002                       		move.l	d2,d0
00007538 D084                       		add.l	d4,d0
0000753A 21C0 F710                  		move.l	d0,($FFFFF710).w
0000753E 2200                       		move.l	d0,d1
00007540 4841                       		swap	d1
00007542 0241 0010                  		andi.w	#$10,d1
00007546 1638 F74E                  		move.b	($FFFFF74E).w,d3
0000754A B701                       		eor.b	d3,d1
0000754C 6600                       		bne.s	ScrollBlock5_End
0000754E 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00007554 9082                       		sub.l	d2,d0
00007556 6A00                       		bpl.s	ScrollBlock5_1
00007558 0DF8 F758                  		bset	d6,($FFFFF758).w
0000755C 6000                       		bra.s	ScrollBlock5_End
0000755E                            ; ===========================================================================
0000755E                            
0000755E                            ScrollBlock5_1:				; XREF: ScrollBlock5
0000755E 5206                       		addq.b	#1,d6
00007560 0DF8 F758                  		bset	d6,($FFFFF758).w
00007564                            
00007564                            ScrollBlock5_End:			; XREF: ScrollBlock5
00007564 4E75                       		rts	
00007566                            ; End of function ScrollBlock5
00007566                            
00007566                            
00007566                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007566                            
00007566                            
00007566                            ScrollBlock6:				; XREF: Deform_GHZ, Deform_MZ, ...
00007566 2438 F718                  		move.l	($FFFFF718).w,d2
0000756A 2002                       		move.l	d2,d0
0000756C D084                       		add.l	d4,d0
0000756E 21C0 F718                  		move.l	d0,($FFFFF718).w
00007572 2200                       		move.l	d0,d1
00007574 4841                       		swap	d1
00007576 0241 0010                  		andi.w	#$10,d1
0000757A 1638 F750                  		move.b	($FFFFF750).w,d3
0000757E B701                       		eor.b	d3,d1
00007580 6600                       		bne.s	ScrollBlock6_End
00007582 0A38 0010 F750             		eori.b	#$10,($FFFFF750).w
00007588 9082                       		sub.l	d2,d0
0000758A 6A00                       		bpl.s	ScrollBlock6_1
0000758C 0DF8 F75A                  		bset	d6,($FFFFF75A).w
00007590 6000                       		bra.s	ScrollBlock6_End
00007592                            ; ===========================================================================
00007592                            
00007592                            ScrollBlock6_1:				; XREF: ScrollBlock6
00007592 5206                       		addq.b	#1,d6
00007594 0DF8 F75A                  		bset	d6,($FFFFF75A).w
00007598                            
00007598                            ScrollBlock6_End:			; XREF: ScrollBlock6
00007598 4E75                       		rts	
0000759A                            ; End of function ScrollBlock6
0000759A                            
0000759A                            
0000759A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000759A                            
0000759A                            
0000759A                            sub_6886:		
0000759A 4BF9 00C0 0004             		lea	($C00004).l,a5
000075A0 4DF9 00C0 0000             		lea	($C00000).l,a6
000075A6 45F8 F756                  		lea	($FFFFF756).w,a2
000075AA 47F8 F708                  		lea	($FFFFF708).w,a3
000075AE 49F8 A440                  		lea	($FFFFA440).w,a4
000075B2 343C 6000                  		move.w	#$6000,d2
000075B6 6100 0000                  		bsr.w	sub_6D0A
000075BA 45F8 F758                  		lea	($FFFFF758).w,a2
000075BE 47F8 F710                  		lea	($FFFFF710).w,a3
000075C2 6000 0000                  		bra.w	sub_6DA6
000075C6                            ; End of function sub_6886
000075C6                            
000075C6                            ; ---------------------------------------------------------------------------
000075C6                            ; Subroutine to	display	correct	tiles as you move
000075C6                            ; ---------------------------------------------------------------------------
000075C6                            
000075C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075C6                            
000075C6                            
000075C6                            LoadTilesAsYouMove:			; XREF: Demo_Time
000075C6 4BF9 00C0 0004             		lea	($C00004).l,a5
000075CC 4DF9 00C0 0000             		lea	($C00000).l,a6
000075D2 45F8 FF32                  		lea	($FFFFFF32).w,a2
000075D6 47F8 FF18                  		lea	($FFFFFF18).w,a3
000075DA 49F8 A440                  		lea	($FFFFA440).w,a4
000075DE 343C 6000                  		move.w	#$6000,d2
000075E2 6100 0000                  		bsr.w	sub_6D0A
000075E6 45F8 FF34                  		lea	($FFFFFF34).w,a2
000075EA 47F8 FF20                  		lea	($FFFFFF20).w,a3
000075EE 6100 0000                  		bsr.w	sub_6DA6
000075F2 45F8 FF36                  		lea	($FFFFFF36).w,a2
000075F6 47F8 FF28                  		lea	($FFFFFF28).w,a3
000075FA 6100 0000                  		bsr.w	sub_6EA4
000075FE 45F8 FF30                  		lea	($FFFFFF30).w,a2
00007602 47F8 FF10                  		lea	($FFFFFF10).w,a3
00007606 49F8 A400                  		lea	($FFFFA400).w,a4
0000760A 343C 4000                  		move.w	#$4000,d2
0000760E 4A38 F745                  		tst.b	($FFFFF745).w
00007612 6700                       		beq.s	Draw_FG
00007614 11FC 0000 F745             		move.b	#0,($FFFFF745).w	;Reset the redraw flag
0000761A 78F0                       		moveq	#-$10,d4			;Go to top line oflevel data relative camera position
0000761C 7C0F                       		moveq	#$F,d6				;
0000761E                            
0000761E                            Draw_All:
0000761E 48E7 0E00                  		movem.l	d4-d6,-(sp)			; This whole routine basically redraws the whole
00007622 7AF0                       		moveq	#-$10,d5			; area instead of merely a line of tiles
00007624 3204                       		move.w	d4,d1
00007626 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000762A 3801                       		move.w	d1,d4
0000762C 7AF0                       		moveq	#-$10,d5
0000762E 6100 0000                  		bsr.w	DrawTiles_LR
00007632 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007636 0644 0010                  		addi.w	#$10,d4
0000763A 51CE FFE2                  		dbf	d6,Draw_All
0000763E 4E75                       		rts	
00007640                            
00007640                            Draw_FG:
00007640 4A12                       		tst.b	(a2)
00007642 6700                       		beq.s	locret_6D08
00007644 0892 0000                  		bclr	#0,(a2)
00007648 6700                       		beq.s	loc_6CBE
0000764A 78F0                       		moveq	#-$10,d4
0000764C 7AF0                       		moveq	#-$10,d5
0000764E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007652 78F0                       		moveq	#-$10,d4
00007654 7AF0                       		moveq	#-$10,d5
00007656 6100 0000                  		bsr.w	DrawTiles_LR
0000765A                            
0000765A                            loc_6CBE:
0000765A 0892 0001                  		bclr	#1,(a2)
0000765E 6700                       		beq.s	loc_6CD8
00007660 383C 00E0                  		move.w	#$E0,d4	; 'à'
00007664 7AF0                       		moveq	#-$10,d5
00007666 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000766A 383C 00E0                  		move.w	#$E0,d4	; 'à'
0000766E 7AF0                       		moveq	#-$10,d5
00007670 6100 0000                  		bsr.w	DrawTiles_LR
00007674                            
00007674                            loc_6CD8:
00007674 0892 0002                  		bclr	#2,(a2)
00007678 6700                       		beq.s	loc_6CEE
0000767A 78F0                       		moveq	#-$10,d4
0000767C 7AF0                       		moveq	#-$10,d5
0000767E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007682 78F0                       		moveq	#-$10,d4
00007684 7AF0                       		moveq	#-$10,d5
00007686 6100 0000                  		bsr.w	DrawTiles_TB
0000768A                            
0000768A                            loc_6CEE:
0000768A 0892 0003                  		bclr	#3,(a2)
0000768E 6700                       		beq.s	locret_6D08
00007690 78F0                       		moveq	#-$10,d4
00007692 3A3C 0140                  		move.w	#$140,d5
00007696 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000769A 78F0                       		moveq	#-$10,d4
0000769C 3A3C 0140                  		move.w	#$140,d5
000076A0 6100 0000                  		bsr.w	DrawTiles_TB
000076A4                            
000076A4                            locret_6D08:
000076A4 4E75                       		rts	
000076A6                            
000076A6                            ; End of function LoadTilesAsYouMove
000076A6                            
000076A6                            
000076A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076A6                            
000076A6                            
000076A6                            sub_6D0A:
000076A6 4A12                       		tst.b	(a2)
000076A8 6700 0000                  		beq.w	locret_6DA4
000076AC 0892 0000                  		bclr	#0,(a2)
000076B0 6700                       		beq.s	loc_6D26
000076B2 78F0                       		moveq	#-$10,d4
000076B4 7AF0                       		moveq	#-$10,d5
000076B6 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076BA 78F0                       		moveq	#-$10,d4
000076BC 7AF0                       		moveq	#-$10,d5
000076BE 6100 0000                  		bsr.w	DrawTiles_LR
000076C2                            
000076C2                            loc_6D26:
000076C2 0892 0001                  		bclr	#1,(a2)
000076C6 6700                       		beq.s	loc_6D40
000076C8 383C 00E0                  		move.w	#$E0,d4	; 'à'
000076CC 7AF0                       		moveq	#-$10,d5
000076CE 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076D2 383C 00E0                  		move.w	#$E0,d4	; 'à'
000076D6 7AF0                       		moveq	#-$10,d5
000076D8 6100 0000                  		bsr.w	DrawTiles_LR
000076DC                            
000076DC                            loc_6D40:
000076DC 0892 0002                  		bclr	#2,(a2)
000076E0 6700                       		beq.s	loc_6D56
000076E2 78F0                       		moveq	#-$10,d4
000076E4 7AF0                       		moveq	#-$10,d5
000076E6 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076EA 78F0                       		moveq	#-$10,d4
000076EC 7AF0                       		moveq	#-$10,d5
000076EE 6100 0000                  		bsr.w	DrawTiles_TB
000076F2                            
000076F2                            loc_6D56:
000076F2 0892 0003                  		bclr	#3,(a2)
000076F6 6700                       		beq.s	loc_6D70
000076F8 78F0                       		moveq	#-$10,d4
000076FA 3A3C 0140                  		move.w	#$140,d5
000076FE 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007702 78F0                       		moveq	#-$10,d4
00007704 3A3C 0140                  		move.w	#$140,d5
00007708 6100 0000                  		bsr.w	DrawTiles_TB
0000770C                            
0000770C                            loc_6D70:
0000770C 0892 0004                  		bclr	#4,(a2)
00007710 6700                       		beq.s	loc_6D88
00007712 78F0                       		moveq	#-$10,d4
00007714 7A00                       		moveq	#0,d5
00007716 6100 0000                  		bsr.w	loc_7176
0000771A 78F0                       		moveq	#-$10,d4
0000771C 7A00                       		moveq	#0,d5
0000771E 7C1F                       		moveq	#$1F,d6
00007720 6100 0000                  		bsr.w	DrawTiles_LR3
00007724                            
00007724                            loc_6D88:
00007724 0892 0005                  		bclr	#5,(a2)
00007728 6700                       		beq.s	locret_6DA4
0000772A 383C 00E0                  		move.w	#$E0,d4	; 'à'
0000772E 7A00                       		moveq	#0,d5
00007730 6100 0000                  		bsr.w	loc_7176
00007734 383C 00E0                  		move.w	#$E0,d4	; 'à'
00007738 7A00                       		moveq	#0,d5
0000773A 7C1F                       		moveq	#$1F,d6
0000773C 6100 0000                  		bsr.w	DrawTiles_LR3
00007740                            
00007740                            locret_6DA4:
00007740 4E75                       		rts	
00007742                            ; End of function sub_6D0A
00007742                            
00007742                            
00007742                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007742                            
00007742                            
00007742                            sub_6DA6:
00007742 4A12                       		tst.b	(a2)
00007744 6700 0000                  		beq.w	locret_6DF2
00007748 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w
0000774E 6700 0000                  		beq.w	loc_6E16
00007752 0892 0000                  		bclr	#0,(a2)
00007756 6700                       		beq.s	loc_6DD2
00007758 383C 0070                  		move.w	#$70,d4	; 'p'
0000775C 7AF0                       		moveq	#-$10,d5
0000775E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007762 383C 0070                  		move.w	#$70,d4	; 'p'
00007766 7AF0                       		moveq	#-$10,d5
00007768 7C02                       		moveq	#2,d6
0000776A 6100 0000                  		bsr.w	DrawTiles_TB2
0000776E                            
0000776E                            loc_6DD2:
0000776E 0892 0001                  		bclr	#1,(a2)
00007772 6700                       		beq.s	locret_6DF2
00007774 383C 0070                  		move.w	#$70,d4	; 'p'
00007778 3A3C 0140                  		move.w	#$140,d5
0000777C 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007780 383C 0070                  		move.w	#$70,d4	; 'p'
00007784 3A3C 0140                  		move.w	#$140,d5
00007788 7C02                       		moveq	#2,d6
0000778A 6100 0000                  		bsr.w	DrawTiles_TB2
0000778E                            
0000778E                            locret_6DF2:
0000778E 4E75                       		rts	
00007790                            ; ===========================================================================
00007790 00                         unk_6DF4:	dc.b   0 ;	 
00007791 00                         unk_6DF5:	dc.b   0 ;	 
00007792 00                         		dc.b   0 ;  
00007793 00                         		dc.b   0 ;  
00007794 00                         		dc.b   0 ;  
00007795 06                         		dc.b   6 ;  
00007796 06                         		dc.b   6 ;  
00007797 06                         		dc.b   6 ;  
00007798 06                         		dc.b   6 ;  
00007799 06                         		dc.b   6 ;  
0000779A 06                         		dc.b   6 ;  
0000779B 06                         		dc.b   6 ;  
0000779C 06                         		dc.b   6 ;  
0000779D 06                         		dc.b   6 ;  
0000779E 06                         		dc.b   6 ;  
0000779F 04                         		dc.b   4 ;  
000077A0 04                         		dc.b   4 ;  
000077A1 04                         		dc.b   4 ;  
000077A2 04                         		dc.b   4 ;  
000077A3 04                         		dc.b   4 ;  
000077A4 04                         		dc.b   4 ;  
000077A5 04                         		dc.b   4 ;  
000077A6 02                         		dc.b   2 ;  
000077A7 02                         		dc.b   2 ;  
000077A8 02                         		dc.b   2 ;  
000077A9 02                         		dc.b   2 ;  
000077AA 02                         		dc.b   2 ;  
000077AB 02                         		dc.b   2 ;  
000077AC 02                         		dc.b   2 ;  
000077AD 02                         		dc.b   2 ;  
000077AE 02                         		dc.b   2 ;  
000077AF 02                         		dc.b   2 ;  
000077B0 02                         		dc.b   2 ;  
000077B1 00                         		dc.b   0 ;  
000077B2                            ; ===========================================================================
000077B2                            
000077B2                            loc_6E16:
000077B2 78F0                       		moveq	#-$10,d4
000077B4 0892 0000                  		bclr	#0,(a2)
000077B8 6600                       		bne.s	loc_6E28
000077BA 0892 0001                  		bclr	#1,(a2)
000077BE 6700                       		beq.s	loc_6E72
000077C0 383C 00E0                  		move.w	#$E0,d4	; 'à'
000077C4                            
000077C4                            loc_6E28:
000077C4 41F9 0000 7791             		lea	(unk_6DF5).l,a0
000077CA 3038 F70C                  		move.w	($FFFFF70C).w,d0
000077CE D044                       		add.w	d4,d0
000077D0 0240 01F0                  		andi.w	#$1F0,d0
000077D4 E848                       		lsr.w	#4,d0
000077D6 1030 0000                  		move.b	(a0,d0.w),d0
000077DA 47F9 0000 0000             		lea	(unk_6FE4).l,a3
000077E0 3673 0000                  		movea.w	(a3,d0.w),a3
000077E4 6700                       		beq.s	loc_6E5E
000077E6 7AF0                       		moveq	#-$10,d5
000077E8 48E7 0C00                  		movem.l	d4-d5,-(sp)
000077EC 6100 0000                  		bsr.w	Calc_VRAM_Pos
000077F0 4CDF 0030                  		movem.l	(sp)+,d4-d5
000077F4 6100 0000                  		bsr.w	DrawTiles_LR
000077F8 6000                       		bra.s	loc_6E72
000077FA                            ; ===========================================================================
000077FA                            
000077FA                            loc_6E5E:
000077FA 7A00                       		moveq	#0,d5
000077FC 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007800 6100 0000                  		bsr.w	loc_7176
00007804 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007808 7C1F                       		moveq	#$1F,d6
0000780A 6100 0000                  		bsr.w	DrawTiles_LR3
0000780E                            
0000780E                            loc_6E72:
0000780E 4A12                       		tst.b	(a2)
00007810 6600                       		bne.s	loc_6E78
00007812 4E75                       		rts	
00007814                            ; ===========================================================================
00007814                            
00007814                            loc_6E78:
00007814 78F0                       		moveq	#-$10,d4
00007816 7AF0                       		moveq	#-$10,d5
00007818 1012                       		move.b	(a2),d0
0000781A 0200 00A8                  		andi.b	#-$58,d0
0000781E 6700                       		beq.s	loc_6E8C
00007820 E208                       		lsr.b	#1,d0
00007822 1480                       		move.b	d0,(a2)
00007824 3A3C 0140                  		move.w	#$140,d5
00007828                            
00007828                            loc_6E8C:
00007828 41F9 0000 7790             		lea	(unk_6DF4).l,a0
0000782E 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007832 0240 01F0                  		andi.w	#$1F0,d0
00007836 E848                       		lsr.w	#4,d0
00007838 41F0 0000                  		lea	(a0,d0.w),a0
0000783C 6000 0000                  		bra.w	loc_6FEC
00007840                            ; End of function sub_6DA6
00007840                            
00007840                            
00007840                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007840                            
00007840                            
00007840                            sub_6EA4:
00007840 4A12                       		tst.b	(a2)
00007842 6700 0000                  		beq.w	locret_6EF0
00007846 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000784C 6700 0000                  		beq.w	loc_6F54
00007850 0892 0000                  		bclr	#0,(a2)
00007854 6700                       		beq.s	loc_6ED0_2
00007856 383C 0040                  		move.w	#$40,d4	; '@'
0000785A 7AF0                       		moveq	#-$10,d5
0000785C 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007860 383C 0040                  		move.w	#$40,d4	; '@'
00007864 7AF0                       		moveq	#-$10,d5
00007866 7C02                       		moveq	#2,d6
00007868 6100 0000                  		bsr.w	DrawTiles_TB2
0000786C                            
0000786C                            loc_6ED0_2:
0000786C 0892 0001                  		bclr	#1,(a2)
00007870 6700                       		beq.s	locret_6EF0
00007872 383C 0040                  		move.w	#$40,d4	; '@'
00007876 3A3C 0140                  		move.w	#$140,d5
0000787A 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000787E 383C 0040                  		move.w	#$40,d4	; '@'
00007882 3A3C 0140                  		move.w	#$140,d5
00007886 7C02                       		moveq	#2,d6
00007888 6100 0000                  		bsr.w	DrawTiles_TB2
0000788C                            
0000788C                            locret_6EF0:
0000788C 4E75                       		rts	
0000788E                            ; ===========================================================================
0000788E 00                         unk_6EF2:	dc.b   0 ;	 
0000788F 00                         unk_6EF3:	dc.b   0 ;	 
00007890 00                         		dc.b   0 ;  
00007891 00                         		dc.b   0 ;  
00007892 00                         		dc.b   0 ;  
00007893 00                         		dc.b   0 ;  
00007894 06                         		dc.b   6 ;  
00007895 06                         		dc.b   6 ;  
00007896 04                         		dc.b   4 ;  
00007897 04                         		dc.b   4 ;  
00007898 04                         		dc.b   4 ;  
00007899 04                         		dc.b   4 ;  
0000789A 04                         		dc.b   4 ;  
0000789B 04                         		dc.b   4 ;  
0000789C 04                         		dc.b   4 ;  
0000789D 04                         		dc.b   4 ;  
0000789E 04                         		dc.b   4 ;  
0000789F 02                         		dc.b   2 ;  
000078A0 02                         		dc.b   2 ;  
000078A1 02                         		dc.b   2 ;  
000078A2 02                         		dc.b   2 ;  
000078A3 02                         		dc.b   2 ;  
000078A4 02                         		dc.b   2 ;  
000078A5 02                         		dc.b   2 ;  
000078A6 02                         		dc.b   2 ;  
000078A7 02                         		dc.b   2 ;  
000078A8 02                         		dc.b   2 ;  
000078A9 02                         		dc.b   2 ;  
000078AA 02                         		dc.b   2 ;  
000078AB 02                         		dc.b   2 ;  
000078AC 02                         		dc.b   2 ;  
000078AD 02                         		dc.b   2 ;  
000078AE 02                         		dc.b   2 ;  
000078AF 02                         		dc.b   2 ;  
000078B0 02                         		dc.b   2 ;  
000078B1 02                         		dc.b   2 ;  
000078B2 02                         		dc.b   2 ;  
000078B3 02                         		dc.b   2 ;  
000078B4 02                         		dc.b   2 ;  
000078B5 02                         		dc.b   2 ;  
000078B6 02                         		dc.b   2 ;  
000078B7 02                         		dc.b   2 ;  
000078B8 02                         		dc.b   2 ;  
000078B9 02                         		dc.b   2 ;  
000078BA 02                         		dc.b   2 ;  
000078BB 02                         		dc.b   2 ;  
000078BC 02                         		dc.b   2 ;  
000078BD 02                         		dc.b   2 ;  
000078BE 02                         		dc.b   2 ;  
000078BF 02                         		dc.b   2 ;  
000078C0 02                         		dc.b   2 ;  
000078C1 02                         		dc.b   2 ;  
000078C2 02                         		dc.b   2 ;  
000078C3 02                         		dc.b   2 ;  
000078C4 02                         		dc.b   2 ;  
000078C5 02                         		dc.b   2 ;  
000078C6 02                         		dc.b   2 ;  
000078C7 02                         		dc.b   2 ;  
000078C8 02                         		dc.b   2 ;  
000078C9 02                         		dc.b   2 ;  
000078CA 02                         		dc.b   2 ;  
000078CB 02                         		dc.b   2 ;  
000078CC 02                         		dc.b   2 ;  
000078CD 02                         		dc.b   2 ;  
000078CE 02                         		dc.b   2 ;  
000078CF 02                         		dc.b   2 ;  
000078D0 02                         		dc.b   2 ;  
000078D1 02                         		dc.b   2 ;  
000078D2 02                         		dc.b   2 ;  
000078D3 02                         		dc.b   2 ;  
000078D4 02                         		dc.b   2 ;  
000078D5 02                         		dc.b   2 ;  
000078D6 02                         		dc.b   2 ;  
000078D7 02                         		dc.b   2 ;  
000078D8 02                         		dc.b   2 ;  
000078D9 02                         		dc.b   2 ;  
000078DA 02                         		dc.b   2 ;  
000078DB 02                         		dc.b   2 ;  
000078DC 02                         		dc.b   2 ;  
000078DD 02                         		dc.b   2 ;  
000078DE 02                         		dc.b   2 ;  
000078DF 02                         		dc.b   2 ;  
000078E0 02                         		dc.b   2 ;  
000078E1 02                         		dc.b   2 ;  
000078E2 02                         		dc.b   2 ;  
000078E3 02                         		dc.b   2 ;  
000078E4 02                         		dc.b   2 ;  
000078E5 02                         		dc.b   2 ;  
000078E6 02                         		dc.b   2 ;  
000078E7 02                         		dc.b   2 ;  
000078E8 02                         		dc.b   2 ;  
000078E9 02                         		dc.b   2 ;  
000078EA 02                         		dc.b   2 ;  
000078EB 02                         		dc.b   2 ;  
000078EC 02                         		dc.b   2 ;  
000078ED 02                         		dc.b   2 ;  
000078EE 02                         		dc.b   2 ;  
000078EF 00                         		dc.b   0 ;  
000078F0                            ; ===========================================================================
000078F0                            
000078F0                            loc_6F54:
000078F0 78F0                       		moveq	#-$10,d4
000078F2 0892 0000                  		bclr	#0,(a2)
000078F6 6600                       		bne.s	loc_6F66
000078F8 0892 0001                  		bclr	#1,(a2)
000078FC 6700                       		beq.s	loc_6FAE
000078FE 383C 00E0                  		move.w	#$E0,d4	; 'à'
00007902                            
00007902                            loc_6F66:
00007902 41F9 0000 788F             		lea	(unk_6EF3).l,a0
00007908 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000790C 0440 0200                  		subi.w	#$200,d0
00007910 D044                       		add.w	d4,d0
00007912 0240 07F0                  		andi.w	#$7F0,d0
00007916 E848                       		lsr.w	#4,d0
00007918 1030 0000                  		move.b	(a0,d0.w),d0
0000791C 367B 0000                  		movea.w	unk_6FE4(pc,d0.w),a3
00007920 6700                       		beq.s	loc_6F9A
00007922 7AF0                       		moveq	#-$10,d5
00007924 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007928 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000792C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007930 6100 0000                  		bsr.w	DrawTiles_LR
00007934 6000                       		bra.s	loc_6FAE
00007936                            ; ===========================================================================
00007936                            
00007936                            loc_6F9A:
00007936 7A00                       		moveq	#0,d5
00007938 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000793C 6100 0000                  		bsr.w	loc_7176
00007940 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007944 7C1F                       		moveq	#$1F,d6
00007946 6100 0000                  		bsr.w	DrawTiles_LR3
0000794A                            
0000794A                            loc_6FAE:
0000794A 4A12                       		tst.b	(a2)
0000794C 6600                       		bne.s	loc_6FB4
0000794E 4E75                       		rts	
00007950                            ; ===========================================================================
00007950                            
00007950                            loc_6FB4:
00007950 78F0                       		moveq	#-$10,d4
00007952 7AF0                       		moveq	#-$10,d5
00007954 1012                       		move.b	(a2),d0
00007956 0200 00A8                  		andi.b	#-$58,d0
0000795A 6700                       		beq.s	loc_6FC8
0000795C E208                       		lsr.b	#1,d0
0000795E 1480                       		move.b	d0,(a2)
00007960 3A3C 0140                  		move.w	#$140,d5
00007964                            
00007964                            loc_6FC8:
00007964 41F9 0000 788E             		lea	(unk_6EF2).l,a0
0000796A 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000796E 0440 0200                  		subi.w	#$200,d0
00007972 0240 07F0                  		andi.w	#$7F0,d0
00007976 E848                       		lsr.w	#4,d0
00007978 41F0 0000                  		lea	(a0,d0.w),a0
0000797C 6000 0000                  		bra.w	loc_6FEC
00007980                            ; ===========================================================================
00007980 FF                         unk_6FE4:	dc.b $FF ;  
00007981 18                         		dc.b $18 ;  
00007982 FF                         		dc.b $FF ;  
00007983 18                         		dc.b $18 ;  
00007984 FF                         		dc.b $FF ;  
00007985 20                         		dc.b $20 ;  
00007986 FF                         		dc.b $FF ;  
00007987 28                         		dc.b $28 ; (
00007988                            ; ===========================================================================
00007988                            
00007988                            loc_6FEC:
00007988 7C0F                       		moveq	#$F,d6
0000798A 2E3C 0080 0000             		move.l	#$800000,d7
00007990                            
00007990                            loc_6FF4:
00007990 7000                       		moveq	#0,d0
00007992 1018                       		move.b	(a0)+,d0
00007994 0112                       		btst	d0,(a2)
00007996 6700                       		beq.s	loc_701C
00007998 367B 00E6                  		movea.w	unk_6FE4(pc,d0.w),a3
0000799C 48E7 0C80                  		movem.l	d4-d5/a0,-(sp)
000079A0 48E7 0C00                  		movem.l	d4-d5,-(sp)
000079A4 6100 0000                  		bsr.w	sub_712A
000079A8 4CDF 0030                  		movem.l	(sp)+,d4-d5
000079AC 6100 0000                  		bsr.w	Calc_VRAM_Pos
000079B0 6100 0000                  		bsr.w	sub_70AC
000079B4 4CDF 0130                  		movem.l	(sp)+,d4-d5/a0
000079B8                            
000079B8                            loc_701C:
000079B8 0644 0010                  		addi.w	#$10,d4
000079BC 51CE FFD2                  		dbf	d6,loc_6FF4
000079C0 4212                       		clr.b	(a2)
000079C2 4E75                       		rts	
000079C4                            ; End of function sub_6EA4
000079C4                            
000079C4                            
000079C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079C4                            
000079C4                            
000079C4                            DrawTiles_LR:
000079C4 7C15                       		moveq	#$15,d6
000079C6                            ; End of function DrawTiles_LR
000079C6                            
000079C6                            
000079C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079C6                            
000079C6                            
000079C6                            DrawTiles_LR2:
000079C6 2E3C 0080 0000             		move.l	#$800000,d7
000079CC 2200                       		move.l	d0,d1
000079CE                            
000079CE                            loc_7032:
000079CE 48E7 0C00                  		movem.l	d4-d5,-(sp)
000079D2 6100 0000                  		bsr.w	sub_712A
000079D6 2001                       		move.l	d1,d0
000079D8 6100 0000                  		bsr.w	sub_70AC
000079DC 5801                       		addq.b	#4,d1
000079DE 0201 007F                  		andi.b	#$7F,d1	; '?'
000079E2 4CDF 0030                  		movem.l	(sp)+,d4-d5
000079E6 0645 0010                  		addi.w	#$10,d5
000079EA 51CE FFE2                  		dbf	d6,loc_7032
000079EE 4E75                       		rts	
000079F0                            ; End of function DrawTiles_LR2
000079F0                            
000079F0                            
000079F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079F0                            
000079F0                            
000079F0                            DrawTiles_LR3:
000079F0 2E3C 0080 0000             		move.l	#$800000,d7
000079F6 2200                       		move.l	d0,d1
000079F8                            
000079F8                            loc_705C:
000079F8 48E7 0C00                  		movem.l	d4-d5,-(sp)
000079FC 6100 0000                  		bsr.w	loc_712C
00007A00 2001                       		move.l	d1,d0
00007A02 6100 0000                  		bsr.w	sub_70AC
00007A06 5801                       		addq.b	#4,d1
00007A08 0201 007F                  		andi.b	#$7F,d1	; '?'
00007A0C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007A10 0645 0010                  		addi.w	#$10,d5
00007A14 51CE FFE2                  		dbf	d6,loc_705C
00007A18 4E75                       		rts	
00007A1A                            ; End of function DrawTiles_LR3
00007A1A                            
00007A1A                            
00007A1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A1A                            
00007A1A                            
00007A1A                            DrawTiles_TB:
00007A1A 7C0F                       		moveq	#$F,d6
00007A1C                            ; End of function DrawTiles_TB
00007A1C                            
00007A1C                            
00007A1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A1C                            
00007A1C                            
00007A1C                            DrawTiles_TB2:
00007A1C 2E3C 0080 0000             		move.l	#$800000,d7
00007A22 2200                       		move.l	d0,d1
00007A24                            
00007A24                            loc_7088:
00007A24 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007A28 6100 0000                  		bsr.w	sub_712A
00007A2C 2001                       		move.l	d1,d0
00007A2E 6100 0000                  		bsr.w	sub_70AC
00007A32 0641 0100                  		addi.w	#$100,d1
00007A36 0241 0FFF                  		andi.w	#$FFF,d1
00007A3A 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007A3E 0644 0010                  		addi.w	#$10,d4
00007A42 51CE FFE0                  		dbf	d6,loc_7088
00007A46 4E75                       		rts	
00007A48                            ; End of function DrawTiles_TB2
00007A48                            
00007A48                            
00007A48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A48                            
00007A48                            
00007A48                            sub_70AC:
00007A48 8042                       		or.w	d2,d0
00007A4A 4840                       		swap	d0
00007A4C 0810 0004                  		btst	#4,(a0)
00007A50 6600                       		bne.s	loc_70E8
00007A52 0810 0003                  		btst	#3,(a0)
00007A56 6600                       		bne.s	loc_70C8
00007A58 2A80                       		move.l	d0,(a5)
00007A5A 2C99                       		move.l	(a1)+,(a6)
00007A5C D087                       		add.l	d7,d0
00007A5E 2A80                       		move.l	d0,(a5)
00007A60 2C99                       		move.l	(a1)+,(a6)
00007A62 4E75                       		rts	
00007A64                            ; ===========================================================================
00007A64                            
00007A64                            loc_70C8:
00007A64 2A80                       		move.l	d0,(a5)
00007A66 2819                       		move.l	(a1)+,d4
00007A68 0A84 0800 0800             		eori.l	#$8000800,d4
00007A6E 4844                       		swap	d4
00007A70 2C84                       		move.l	d4,(a6)
00007A72 D087                       		add.l	d7,d0
00007A74 2A80                       		move.l	d0,(a5)
00007A76 2819                       		move.l	(a1)+,d4
00007A78 0A84 0800 0800             		eori.l	#$8000800,d4
00007A7E 4844                       		swap	d4
00007A80 2C84                       		move.l	d4,(a6)
00007A82 4E75                       		rts	
00007A84                            ; ===========================================================================
00007A84                            
00007A84                            loc_70E8:
00007A84 0810 0003                  		btst	#3,(a0)
00007A88 6600                       		bne.s	loc_710A
00007A8A 2A80                       		move.l	d0,(a5)
00007A8C 2A19                       		move.l	(a1)+,d5
00007A8E 2819                       		move.l	(a1)+,d4
00007A90 0A84 1000 1000             		eori.l	#$10001000,d4
00007A96 2C84                       		move.l	d4,(a6)
00007A98 D087                       		add.l	d7,d0
00007A9A 2A80                       		move.l	d0,(a5)
00007A9C 0A85 1000 1000             		eori.l	#$10001000,d5
00007AA2 2C85                       		move.l	d5,(a6)
00007AA4 4E75                       		rts	
00007AA6                            ; ===========================================================================
00007AA6                            
00007AA6                            loc_710A:
00007AA6 2A80                       		move.l	d0,(a5)
00007AA8 2A19                       		move.l	(a1)+,d5
00007AAA 2819                       		move.l	(a1)+,d4
00007AAC 0A84 1800 1800             		eori.l	#$18001800,d4
00007AB2 4844                       		swap	d4
00007AB4 2C84                       		move.l	d4,(a6)
00007AB6 D087                       		add.l	d7,d0
00007AB8 2A80                       		move.l	d0,(a5)
00007ABA 0A85 1800 1800             		eori.l	#$18001800,d5
00007AC0 4845                       		swap	d5
00007AC2 2C85                       		move.l	d5,(a6)
00007AC4 4E75                       		rts	
00007AC6                            ; End of function sub_70AC
00007AC6                            
00007AC6                            
00007AC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AC6                            
00007AC6                            
00007AC6                            sub_712A:
00007AC6 DA53                       		add.w	(a3),d5
00007AC8                            
00007AC8                            loc_712C:
00007AC8 D86B 0004                  		add.w	4(a3),d4
00007ACC 43F8 B000                  		lea	($FFFFB000).w,a1
00007AD0 3604                       		move.w	d4,d3
00007AD2 E24B                       		lsr.w	#1,d3
00007AD4 0243 0380                  		andi.w	#$380,d3
00007AD8 E64D                       		lsr.w	#3,d5
00007ADA 3005                       		move.w	d5,d0
00007ADC EA48                       		lsr.w	#5,d0
00007ADE 0240 007F                  		andi.w	#$7F,d0	; '?'
00007AE2 D043                       		add.w	d3,d0
00007AE4 4A38 FE10                  		tst.b	($FFFFFE10).w	
00007AE8 6700                       		beq.s	@ghz		
00007AEA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w	
00007AF0 6700                       		beq.s	@lz		
00007AF2 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w	
00007AF8 6700                       		beq.s	@mz		
00007AFA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w	
00007B00 6700                       		beq.s	@slz		
00007B02 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w	
00007B08 6700                       		beq.s	@syz		
00007B0A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w	
00007B10 6700                       		beq.s	@sbz				
00007B12 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
00007B18 6700                       		beq.s	@ghz		; if yes, branch
00007B1A 76FF                       		moveq	#-1,d3		; load chunks from RAM
00007B1C 6100                       		bsr.s	LocateBlock
00007B1E 6000                       		bra.s	@continue
00007B20                            
00007B20                            @ghz:
00007B20 7600                       		moveq	#0,d3
00007B22 6100                       		bsr.s	LocateBlock
00007B24 0683 0000 0000             		add.l	#Blk256_GHZ,d3
00007B2A 6000 0000                  		bra.w	@continue
00007B2E                            	
00007B2E                            @lz:
00007B2E 7600                       		moveq	#0,d3
00007B30 6100                       		bsr.s	LocateBlock
00007B32 0683 0000 0000             		add.l	#Blk256_LZ,d3
00007B38 6000 0000                  		bra.w	@continue
00007B3C                            		
00007B3C                            @mz:
00007B3C 7600                       		moveq	#0,d3
00007B3E 6100                       		bsr.s	LocateBlock
00007B40 0683 0000 0000             		add.l	#Blk256_MZ,d3
00007B46 6000 0000                  		bra.w	@continue
00007B4A                            		
00007B4A                            @slz:
00007B4A 7600                       		moveq	#0,d3
00007B4C 6100                       		bsr.s	LocateBlock
00007B4E 0683 0000 0000             		add.l	#Blk256_SLZ,d3
00007B54 6000 0000                  		bra.w	@continue
00007B58                            		
00007B58                            @syz:
00007B58 7600                       		moveq	#0,d3
00007B5A 6100                       		bsr.s	LocateBlock
00007B5C 0683 0000 0000             		add.l	#Blk256_SYZ,d3
00007B62 6000 0000                  		bra.w	@continue
00007B66                            		
00007B66                            @sbz:
00007B66 7600                       		moveq	#0,d3
00007B68 6100                       		bsr.s	LocateBlock
00007B6A 0683 0000 0000             		add.l	#Blk256_SBZ,d3		
00007B70 6000 0000                  		bra.w	@continue
00007B74                            		
00007B74                            @continue:
00007B74 2043                       		movea.l	d3,a0
00007B76 3610                       		move.w	(a0),d3
00007B78 0243 03FF                  		andi.w	#$3FF,d3
00007B7C E74B                       		lsl.w	#3,d3
00007B7E D2C3                       		adda.w	d3,a1
00007B80 4E75                       		rts	
00007B82                            ; ---------------------------------------------------------------------------
00007B82                            
00007B82                            LocateBlock:
00007B82 1634 0000                  		move.b	(a4,d0.w),d3	; load chunk ID in d3
00007B86 6700                       		beq.s	LocateBlock_EmptyChunk
00007B88 5303                       		subq.b	#1,d3
00007B8A 0243 007F                  		andi.w	#$7F,d3	; '?'
00007B8E EE5B                       		ror.w	#7,d3
00007B90 D844                       		add.w	d4,d4
00007B92 0244 01E0                  		andi.w	#$1E0,d4
00007B96 0245 001E                  		andi.w	#$1E,d5
00007B9A D644                       		add.w	d4,d3
00007B9C D645                       		add.w	d5,d3
00007B9E 4E75                       		rts
00007BA0                            ; ---------------------------------------------------------------------------
00007BA0                            
00007BA0                            LocateBlock_EmptyChunk:
00007BA0 584F                       		addq.w	#4,sp	; pop a stack frame to leave a1 pointing at the first tile
00007BA2 4E75                       		rts
00007BA4                            ; End of function sub_712A
00007BA4                            
00007BA4                            
00007BA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BA4                            
00007BA4                            
00007BA4                            Calc_VRAM_Pos:
00007BA4 DA53                       		add.w	(a3),d5
00007BA6                            
00007BA6                            loc_7176:
00007BA6 D86B 0004                  		add.w	4(a3),d4
00007BAA 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
00007BAE 0245 01F0                  		andi.w	#$1F0,d5
00007BB2 E94C                       		lsl.w	#4,d4
00007BB4 E44D                       		lsr.w	#2,d5
00007BB6 D845                       		add.w	d5,d4
00007BB8 7003                       		moveq	#3,d0
00007BBA 4840                       		swap	d0
00007BBC 3004                       		move.w	d4,d0
00007BBE 4E75                       		rts	
00007BC0                            ; End of function Calc_VRAM_Pos
00007BC0                            
00007BC0                            ; ===========================================================================
00007BC0 D86B 0004                  		add.w	4(a3),d4
00007BC4 DA53                       		add.w	(a3),d5
00007BC6 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
00007BCA 0245 01F0                  		andi.w	#$1F0,d5
00007BCE E94C                       		lsl.w	#4,d4
00007BD0 E44D                       		lsr.w	#2,d5
00007BD2 D845                       		add.w	d5,d4
00007BD4 7002                       		moveq	#2,d0
00007BD6 4840                       		swap	d0
00007BD8 3004                       		move.w	d4,d0
00007BDA 4E75                       		rts	
00007BDC                            
00007BDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BDC                            
00007BDC                            
00007BDC                            LoadTilesFromStart:
00007BDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00007BE2 4DF9 00C0 0000             		lea	($C00000).l,a6
00007BE8 47F8 F700                  		lea	($FFFFF700).w,a3
00007BEC 49F8 A400                  		lea	($FFFFA400).w,a4
00007BF0 343C 4000                  		move.w	#$4000,d2
00007BF4 6100                       		bsr.s	LoadTilesFromStart2
00007BF6 47F8 F708                  		lea	($FFFFF708).w,a3
00007BFA 49F8 A440                  		lea	($FFFFA440).w,a4
00007BFE 343C 6000                  		move.w	#$6000,d2
00007C02 4A38 FE10                  		tst.b	($FFFFFE10).w
00007C06 6700 0000                  		beq.w	loc_7220
00007C0A 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
00007C10 6700 0000                  		beq.w	loc_725A
00007C14 0C78 0500 FE10             		cmpi.w	#$500,($FFFFFE10).w
00007C1A 6700 0000                  		beq.w	loc_7288
00007C1E 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w
00007C24 6700 0000                  		beq.w	loc_7220
00007C28                            ; End of function LoadTilesFromStart
00007C28                            
00007C28                            
00007C28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C28                            
00007C28                            
00007C28                            LoadTilesFromStart2:
00007C28 78F0                       		moveq	#-$10,d4
00007C2A 7C0F                       		moveq	#$F,d6
00007C2C                            
00007C2C                            loc_71FC:
00007C2C 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007C30 7A00                       		moveq	#0,d5
00007C32 3204                       		move.w	d4,d1
00007C34 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
00007C38 3801                       		move.w	d1,d4
00007C3A 7A00                       		moveq	#0,d5
00007C3C 7C1F                       		moveq	#$1F,d6
00007C3E 6100 FD86                  		bsr.w	DrawTiles_LR2
00007C42 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007C46 0644 0010                  		addi.w	#$10,d4
00007C4A 51CE FFE0                  		dbf	d6,loc_71FC
00007C4E 4E75                       		rts	
00007C50                            ; End of function LoadTilesFromStart2
00007C50                            
00007C50                            ; ===========================================================================
00007C50                            
00007C50                            loc_7220:
00007C50 7800                       		moveq	#0,d4
00007C52 7C0F                       		moveq	#$F,d6
00007C54                            
00007C54                            loc_7224:
00007C54 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007C58 41F9 0000 0000             		lea	(unk_724A).l,a0
00007C5E 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007C62 D044                       		add.w	d4,d0
00007C64 0240 00F0                  		andi.w	#$F0,d0	; 'ð'
00007C68 6100 0000                  		bsr.w	sub_72BA
00007C6C 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007C70 0644 0010                  		addi.w	#$10,d4
00007C74 51CE FFDE                  		dbf	d6,loc_7224
00007C78 4E75                       		rts	
00007C7A                            ; ===========================================================================
00007C7A 00                         unk_724A:	dc.b   0 ;	 
00007C7B 00                         		dc.b   0 ;  
00007C7C 00                         		dc.b   0 ;  
00007C7D 00                         		dc.b   0 ;  
00007C7E 06                         		dc.b   6 ;  
00007C7F 06                         		dc.b   6 ;  
00007C80 06                         		dc.b   6 ;  
00007C81 04                         		dc.b   4 ;  
00007C82 04                         		dc.b   4 ;  
00007C83 04                         		dc.b   4 ;  
00007C84 00                         		dc.b   0 ;  
00007C85 00                         		dc.b   0 ;  
00007C86 00                         		dc.b   0 ;  
00007C87 00                         		dc.b   0 ;  
00007C88 00                         		dc.b   0 ;  
00007C89 00                         		dc.b   0 ;  
00007C8A                            ; ===========================================================================
00007C8A                            
00007C8A                            loc_725A:
00007C8A 78F0                       		moveq	#-$10,d4
00007C8C 7C0F                       		moveq	#$F,d6
00007C8E                            
00007C8E                            loc_725E:
00007C8E 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007C92 41F9 0000 788F             		lea	(unk_6EF3).l,a0
00007C98 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007C9C 0440 0200                  		subi.w	#$200,d0
00007CA0 D044                       		add.w	d4,d0
00007CA2 0240 07F0                  		andi.w	#$7F0,d0
00007CA6 6100 0000                  		bsr.w	sub_72BA
00007CAA 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007CAE 0644 0010                  		addi.w	#$10,d4
00007CB2 51CE FFDA                  		dbf	d6,loc_725E
00007CB6 4E75                       		rts	
00007CB8                            ; ===========================================================================
00007CB8                            
00007CB8                            loc_7288:
00007CB8 78F0                       		moveq	#-$10,d4
00007CBA 7C0F                       		moveq	#$F,d6
00007CBC                            
00007CBC                            loc_728C:
00007CBC 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007CC0 41F9 0000 7791             		lea	(unk_6DF5).l,a0
00007CC6 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007CCA D044                       		add.w	d4,d0
00007CCC 0240 01F0                  		andi.w	#$1F0,d0
00007CD0 6100 0000                  		bsr.w	sub_72BA
00007CD4 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007CD8 0644 0010                  		addi.w	#$10,d4
00007CDC 51CE FFDE                  		dbf	d6,loc_728C
00007CE0 4E75                       		rts	
00007CE2                            ; ===========================================================================
00007CE2 F7                         unk_72B2:	dc.b $F7 ; ÷
00007CE3 08                         		dc.b   8 ;  
00007CE4 F7                         		dc.b $F7 ; ÷
00007CE5 08                         		dc.b   8 ;  
00007CE6 F7                         		dc.b $F7 ; ÷
00007CE7 10                         		dc.b $10 ;  
00007CE8 F7                         		dc.b $F7 ; ÷
00007CE9 18                         		dc.b $18 ;  
00007CEA                            
00007CEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CEA                            
00007CEA                            
00007CEA                            sub_72BA:
00007CEA E848                       		lsr.w	#4,d0
00007CEC 1030 0000                  		move.b	(a0,d0.w),d0
00007CF0 367B 00F0                  		movea.w	unk_72B2(pc,d0.w),a3
00007CF4 6700                       		beq.s	loc_72DA
00007CF6 7AF0                       		moveq	#-$10,d5
00007CF8 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007CFC 6100 FEA6                  		bsr.w	Calc_VRAM_Pos
00007D00 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007D04 6100 FCBE                  		bsr.w	DrawTiles_LR
00007D08 6000                       		bra.s	locret_72EE
00007D0A                            ; ===========================================================================
00007D0A                            
00007D0A                            loc_72DA:
00007D0A 7A00                       		moveq	#0,d5
00007D0C 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007D10 6100 FE94                  		bsr.w	loc_7176
00007D14 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007D18 7C1F                       		moveq	#$1F,d6
00007D1A 6100 FCD4                  		bsr.w	DrawTiles_LR3
00007D1E                            
00007D1E                            locret_72EE:
00007D1E 4E75                       		rts	
00007D20                            ; End of function sub_72BA
00007D20                            
00007D20                            LoadZoneTiles:
00007D20 7000                       		moveq	#0,d0			; Clear d0
00007D22 1038 FE10                  		move.b	($FFFFFE10).w,d0		; Load number of current zone to d0
00007D26 E948                       		lsl.w	#4,d0			; Multiply by $10, converting the zone ID into an offset
00007D28 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2	; Load LevelHeaders's address into a2
00007D2E 45F2 0000                  		lea	(a2,d0.w),a2		; Offset LevelHeaders by the zone-offset, and load the resultant address to a2
00007D32 201A                       		move.l	(a2)+,d0		; Move the first longword of data that a2 points to to d0, this contains the zone's first PLC ID and its art's address.
00007D34                            						; The auto increment is pointless as a2 is overwritten later, and nothing reads from a2 before then
00007D34 0280 00FF FFFF             		andi.l	#$FFFFFF,d0    		; Filter out the first byte, which contains the first PLC ID, leaving the address of the zone's art in d0
00007D3A 2040                       		movea.l	d0,a0			; Load the address of the zone's art into a0 (source)
00007D3C 43F9 00FF 0000             		lea	($FF0000).l,a1		; Load v_256x256/StartOfRAM (in this context, an art buffer) into a1 (destination)
00007D42 6100 9A36                  		bsr.w	KosDec			; Decompress a0 to a1 (Kosinski compression)
00007D46                            
00007D46 3609                       		move.w	a1,d3			; Move a word of a1 to d3, note that a1 doesn't exactly contain the address of v_256x256/StartOfRAM anymore, after KosDec, a1 now contains v_256x256/StartOfRAM + the size of the file decompressed to it, d3 now contains the length of the file that was decompressed
00007D48 3E03                       		move.w	d3,d7			; Move d3 to d7, for use in seperate calculations
00007D4A                            
00007D4A 0243 0FFF                  		andi.w	#$FFF,d3		; Remove the high nibble of the high byte of the length of decompressed file, this nibble is how many $1000 bytes the decompressed art is
00007D4E E24B                       		lsr.w	#1,d3			; Half the value of 'length of decompressed file', d3 becomes the 'DMA transfer length'
00007D50                            
00007D50 E95F                       		rol.w	#4,d7			; Rotate (left) length of decompressed file by one nibble
00007D52 0247 000F                  		andi.w	#$F,d7			; Only keep the low nibble of low byte (the same one filtered out of d3 above), this nibble is how many $1000 bytes the decompressed art is
00007D56                            
00007D56 3407                       @loop:		move.w	d7,d2			; Move d7 to d2, note that the ahead dbf removes 1 byte from d7 each time it loops, meaning that the following calculations will have different results each time
00007D58 EF4A                       		lsl.w	#7,d2
00007D5A EB4A                       		lsl.w	#5,d2			; Shift (left) d2 by $C, making it high nibble of the high byte, d2 is now the size of the decompressed file rounded down to the nearest $1000 bytes, d2 becomes the 'destination address'
00007D5C                            
00007D5C 223C 00FF FFFF             		move.l	#$FFFFFF,d1		; Fill d1 with $FF
00007D62 3202                       		move.w	d2,d1			; Move d2 to d1, overwriting the last word of $FF's with d2, this turns d1 into 'StartOfRAM'+'However many $1000 bytes the decompressed art is', d1 becomes the 'source address'
00007D64                            
00007D64 4EB9 0000 4A78             		jsr	(QueueDMATransfer).l	; Use d1, d2, and d3 to locate the decompressed art and ready for transfer to VRAM
00007D6A 3F07                       		move.w	d7,-(sp)		; Store d7 in the Stack
00007D6C 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00007D72 6100 AC50                  		bsr.w	DelayProgram
00007D76 6100 9752                  		bsr.w	RunPLC_RAM
00007D7A 3E1F                       		move.w	(sp)+,d7		; Restore d7 from the Stack
00007D7C 363C 0800                  		move.w	#$800,d3		; Force the DMA transfer length to be $1000/2 (the first cycle is dynamic because the art's DMA'd backwards)
00007D80 51CF FFD4                  		dbf	d7,@loop		; Loop for each $1000 bytes the decompressed art is
00007D84                            
00007D84 4E75                       		rts
00007D86                            ; End of function LoadZoneTiles
00007D86                            
00007D86                            ; ---------------------------------------------------------------------------
00007D86                            ; Main Load Block loading subroutine
00007D86                            ; ---------------------------------------------------------------------------
00007D86                            
00007D86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D86                            
00007D86                            
00007D86                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007D86 7000                       		moveq	#0,d0
00007D88 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007D8C E948                       		lsl.w	#4,d0
00007D8E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007D94 45F2 0000                  		lea	(a2,d0.w),a2
00007D98 2F0A                       		move.l	a2,-(sp)
00007D9A 588A                       		addq.l	#4,a2
00007D9C 205A                       		movea.l	(a2)+,a0
00007D9E 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007DA2 303C 0000                  		move.w	#0,d0
00007DA6 6100 9854                  		bsr.w	EniDec
00007DAA 205A                       		movea.l	(a2)+,a0
00007DAC 4A38 FE10                  		tst.b	($FFFFFE10).w	; are we in Green Hill Zone?
00007DB0 6700                       		beq.s	@no_dec		; if yes, branch
00007DB2 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
00007DB8 6700                       		beq.s	@no_dec		; if yes, branch
00007DBA 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007DC0 6100 99B8                  		bsr.w	KosDec
00007DC4                            
00007DC4                            @no_dec:		
00007DC4 6100 0000                  		bsr.w	LevelLayoutLoad
00007DC8 301A                       		move.w	(a2)+,d0
00007DCA 3012                       		move.w	(a2),d0
00007DCC 0240 00FF                  		andi.w	#$FF,d0
00007DD0 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007DD6 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007DD8 700C                       		moveq	#$C,d0		; use SB3 pallet
00007DDA                            
00007DDA                            MLB_ChkSBZPal:
00007DDA 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007DE0 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007DE2 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007DE8 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007DEA                            
00007DEA                            MLB_UsePal0E:
00007DEA 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00007DEC                            
00007DEC                            MLB_NormalPal:
00007DEC 6100 A322                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007DF0 245F                       		movea.l	(sp)+,a2
00007DF2 584A                       		addq.w	#4,a2
00007DF4 7000                       		moveq	#0,d0
00007DF6 1012                       		move.b	(a2),d0
00007DF8 6700                       		beq.s	locret_6D10
00007DFA 6100 9662                  		bsr.w	LoadPLC		; load pattern load cues
00007DFE                            
00007DFE                            locret_6D10:
00007DFE 4E75                       		rts	
00007E00                            ; End of function MainLoadBlockLoad
00007E00                            
00007E00                            ; ---------------------------------------------------------------------------
00007E00                            ; Level	layout loading subroutine
00007E00                            ; ---------------------------------------------------------------------------
00007E00                            
00007E00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E00                            
00007E00                            
00007E00                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007E00 47F8 A400                  		lea	($FFFFA400).w,a3
00007E04 323C 01FF                  		move.w	#$1FF,d1
00007E08 7000                       		moveq	#0,d0
00007E0A                            
00007E0A                            LevLoad_ClrRam:
00007E0A 26C0                       		move.l	d0,(a3)+
00007E0C 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007E10                            
00007E10 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007E14 7200                       		moveq	#0,d1
00007E16 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007E1A 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007E1E 7202                       		moveq	#2,d1
00007E20                            ; End of function LevelLayoutLoad
00007E20                            
00007E20                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007E20                            
00007E20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E20                            
00007E20                            
00007E20                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007E20 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007E24 ED08                       		lsl.b	#6,d0
00007E26 EA48                       		lsr.w	#5,d0
00007E28 3400                       		move.w	d0,d2
00007E2A D040                       		add.w	d0,d0
00007E2C D042                       		add.w	d2,d0
00007E2E D041                       		add.w	d1,d0
00007E30 43F9 0000 0000             		lea	(Level_Index).l,a1
00007E36 3031 0000                  		move.w	(a1,d0.w),d0
00007E3A 43F1 0000                  		lea	(a1,d0.w),a1
00007E3E 7200                       		moveq	#0,d1
00007E40 3401                       		move.w	d1,d2
00007E42 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007E44 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007E46                            
00007E46                            LevLoad_NumRows:
00007E46 3001                       		move.w	d1,d0
00007E48 204B                       		movea.l	a3,a0
00007E4A                            
00007E4A                            LevLoad_Row:
00007E4A 10D9                       		move.b	(a1)+,(a0)+
00007E4C 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007E50 47EB 0080                  		lea	$80(a3),a3	; do next row
00007E54 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007E58 4E75                       		rts	
00007E5A                            ; End of function LevelLayoutLoad2
00007E5A                            
00007E5A                            ; ---------------------------------------------------------------------------
00007E5A                            ; Dynamic screen resize	loading	subroutine
00007E5A                            ; ---------------------------------------------------------------------------
00007E5A                            
00007E5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E5A                            
00007E5A                            
00007E5A                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007E5A 7000                       		moveq	#0,d0
00007E5C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007E60 D040                       		add.w	d0,d0
00007E62 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007E66 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007E6A 7202                       		moveq	#2,d1
00007E6C 3038 F726                  		move.w	($FFFFF726).w,d0
00007E70 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007E74 6700                       		beq.s	locret_6DAA
00007E76 6400                       		bcc.s	loc_6DAC
00007E78 4441                       		neg.w	d1
00007E7A 3038 F704                  		move.w	($FFFFF704).w,d0
00007E7E B078 F726                  		cmp.w	($FFFFF726).w,d0
00007E82 6300                       		bls.s	loc_6DA0
00007E84 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007E88 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007E8E                            
00007E8E                            loc_6DA0:
00007E8E D378 F72E                  		add.w	d1,($FFFFF72E).w
00007E92 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007E98                            
00007E98                            locret_6DAA:
00007E98 4E75                       		rts	
00007E9A                            ; ===========================================================================
00007E9A                            
00007E9A                            loc_6DAC:				; XREF: DynScrResizeLoad
00007E9A 3038 F704                  		move.w	($FFFFF704).w,d0
00007E9E 5040                       		addq.w	#8,d0
00007EA0 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007EA4 6500                       		bcs.s	loc_6DC4
00007EA6 0838 0001 D022             		btst	#1,($FFFFD022).w
00007EAC 6700                       		beq.s	loc_6DC4
00007EAE D241                       		add.w	d1,d1
00007EB0 D241                       		add.w	d1,d1
00007EB2                            
00007EB2                            loc_6DC4:
00007EB2 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007EB6 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007EBC 4E75                       		rts	
00007EBE                            ; End of function DynScrResizeLoad
00007EBE                            
00007EBE                            ; ===========================================================================
00007EBE                            ; ---------------------------------------------------------------------------
00007EBE                            ; Offset index for dynamic screen resizing
00007EBE                            ; ---------------------------------------------------------------------------
00007EBE 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007EC2 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007EC6 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007ECA 0000                       		dc.w Resize_Ending-Resize_Index
00007ECC                            ; ===========================================================================
00007ECC                            ; ---------------------------------------------------------------------------
00007ECC                            ; Green	Hill Zone dynamic screen resizing
00007ECC                            ; ---------------------------------------------------------------------------
00007ECC                            
00007ECC                            Resize_GHZ:				; XREF: Resize_Index
00007ECC 7000                       		moveq	#0,d0
00007ECE 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007ED2 D040                       		add.w	d0,d0
00007ED4 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007ED8 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007EDC                            ; ===========================================================================
00007EDC 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007EDE 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007EE0 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007EE2                            ; ===========================================================================
00007EE2                            
00007EE2                            Resize_GHZ1:
00007EE2 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007EE8 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007EEE 6500                       		bcs.s	locret_6E08	; if not, branch
00007EF0 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007EF6                            
00007EF6                            locret_6E08:
00007EF6 4E75                       		rts	
00007EF8                            ; ===========================================================================
00007EF8                            
00007EF8                            Resize_GHZ2:
00007EF8 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007EFE 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007F04 6500                       		bcs.s	locret_6E3A
00007F06 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007F0C 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007F12 6500                       		bcs.s	locret_6E3A
00007F14 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007F1A 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00007F20 6500                       		bcs.s	locret_6E3A
00007F22 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007F28                            
00007F28                            locret_6E3A:
00007F28 4E75                       		rts	
00007F2A                            ; ===========================================================================
00007F2A                            
00007F2A                            Resize_GHZ3:
00007F2A 7000                       		moveq	#0,d0
00007F2C 1038 F742                  		move.b	($FFFFF742).w,d0
00007F30 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007F34 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007F38                            ; ===========================================================================
00007F38 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007F3A 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007F3C 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007F3E                            ; ===========================================================================
00007F3E                            
00007F3E                            Resize_GHZ3main:
00007F3E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007F44 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007F4A 6500                       		bcs.s	locret_6E96
00007F4C 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007F52 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007F58 6500                       		bcs.s	locret_6E96
00007F5A 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007F60 6500                       		bcs.s	loc_6E98
00007F62 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007F68 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007F6E 6400                       		bcc.s	loc_6E8E
00007F70 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007F76 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007F7C                            
00007F7C                            loc_6E8E:
00007F7C 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007F82 6400                       		bcc.s	loc_6E98
00007F84                            
00007F84                            locret_6E96:
00007F84 4E75                       		rts	
00007F86                            ; ===========================================================================
00007F86                            
00007F86                            loc_6E98:
00007F86 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007F8C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007F90 4E75                       		rts	
00007F92                            ; ===========================================================================
00007F92                            
00007F92                            Resize_GHZ3boss:
00007F92 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007F98 6400                       		bcc.s	loc_6EB0
00007F9A 5538 F742                  		subq.b	#2,($FFFFF742).w
00007F9E                            
00007F9E                            loc_6EB0:
00007F9E 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007FA4 6500                       		bcs.s	locret_6EE8
00007FA6 6100 0000                  		bsr.w	SingleObjLoad
00007FAA 6600                       		bne.s	loc_6ED0
00007FAC 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007FB0 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007FB6 337C 0280 000C             		move.w	#$280,$C(a1)
00007FBC                            
00007FBC                            loc_6ED0:
00007FBC 303C 008C                  		move.w	#$8C,d0
00007FC0 6100 9258                  		bsr.w	PlaySound	; play boss music
00007FC4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007FCA 5438 F742                  		addq.b	#2,($FFFFF742).w
00007FCE 7011                       		moveq	#$11,d0
00007FD0 6000 948C                  		bra.w	LoadPLC		; load boss patterns
00007FD4                            ; ===========================================================================
00007FD4                            
00007FD4                            locret_6EE8:
00007FD4 4E75                       		rts	
00007FD6                            ; ===========================================================================
00007FD6                            
00007FD6                            Resize_GHZ3end:
00007FD6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007FDC 4E75                       		rts	
00007FDE                            ; ===========================================================================
00007FDE                            ; ---------------------------------------------------------------------------
00007FDE                            ; Labyrinth Zone dynamic screen	resizing
00007FDE                            ; ---------------------------------------------------------------------------
00007FDE                            
00007FDE                            Resize_LZ:				; XREF: Resize_Index
00007FDE 7000                       		moveq	#0,d0
00007FE0 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007FE4 D040                       		add.w	d0,d0
00007FE6 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007FEA 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007FEE                            ; ===========================================================================
00007FEE 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007FF0 0000                       		dc.w Resize_LZ12-Resize_LZx
00007FF2 0000                       		dc.w Resize_LZ3-Resize_LZx
00007FF4 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007FF6                            ; ===========================================================================
00007FF6                            
00007FF6                            Resize_LZ12:
00007FF6 4E75                       		rts	
00007FF8                            ; ===========================================================================
00007FF8                            
00007FF8                            Resize_LZ3:
00007FF8 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
00007FFC 6700                       		beq.s	loc_6F28	; if not, branch
00007FFE 43F8 A506                  		lea	($FFFFA506).w,a1
00008002 0C11 0007                  		cmpi.b	#7,(a1)
00008006 6700                       		beq.s	loc_6F28
00008008 12BC 0007                  		move.b	#7,(a1)		; modify level layout
0000800C 303C 00B7                  		move.w	#$B7,d0
00008010 6100 920E                  		bsr.w	PlaySound_Special ; play rumbling sound
00008014                            
00008014                            loc_6F28:
00008014 4A38 F742                  		tst.b	($FFFFF742).w
00008018 6600                       		bne.s	locret_6F64
0000801A 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00008020 6500                       		bcs.s	locret_6F62
00008022 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00008028 6400                       		bcc.s	locret_6F62
0000802A 6100 0000                  		bsr.w	SingleObjLoad
0000802E 6600                       		bne.s	loc_6F4A
00008030 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00008034                            
00008034                            loc_6F4A:
00008034 303C 008C                  		move.w	#$8C,d0
00008038 6100 91E0                  		bsr.w	PlaySound	; play boss music
0000803C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008042 5438 F742                  		addq.b	#2,($FFFFF742).w
00008046 7011                       		moveq	#$11,d0
00008048 6000 9414                  		bra.w	LoadPLC		; load boss patterns
0000804C                            ; ===========================================================================
0000804C                            
0000804C                            locret_6F62:
0000804C 4E75                       		rts	
0000804E                            ; ===========================================================================
0000804E                            
0000804E                            locret_6F64:
0000804E 4E75                       		rts	
00008050                            ; ===========================================================================
00008050                            
00008050                            Resize_SBZ3:
00008050 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00008056 6500                       		bcs.s	locret_6F8C
00008058 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
0000805E 6400                       		bcc.s	locret_6F8C	; if not, branch
00008060 4238 FE30                  		clr.b	($FFFFFE30).w
00008064 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000806A 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00008070 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00008076                            
00008076                            locret_6F8C:
00008076 4E75                       		rts	
00008078                            ; ===========================================================================
00008078                            ; ---------------------------------------------------------------------------
00008078                            ; Marble Zone dynamic screen resizing
00008078                            ; ---------------------------------------------------------------------------
00008078                            
00008078                            Resize_MZ:				; XREF: Resize_Index
00008078 7000                       		moveq	#0,d0
0000807A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000807E D040                       		add.w	d0,d0
00008080 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00008084 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00008088                            ; ===========================================================================
00008088 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
0000808A 0000                       		dc.w Resize_MZ2-Resize_MZx
0000808C 0000                       		dc.w Resize_MZ3-Resize_MZx
0000808E                            ; ===========================================================================
0000808E                            
0000808E                            Resize_MZ1:
0000808E 7000                       		moveq	#0,d0
00008090 1038 F742                  		move.b	($FFFFF742).w,d0
00008094 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00008098 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
0000809C                            ; ===========================================================================
0000809C 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
0000809E 0000                       		dc.w loc_6FEA-off_6FB2
000080A0 0000                       		dc.w loc_702E-off_6FB2
000080A2 0000                       		dc.w loc_7050-off_6FB2
000080A4                            ; ===========================================================================
000080A4                            
000080A4                            loc_6FBA:
000080A4 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000080AA 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000080B0 6500                       		bcs.s	locret_6FE8
000080B2 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000080B8 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000080BE 6500                       		bcs.s	locret_6FE8
000080C0 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000080C6 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000080CC 6500                       		bcs.s	locret_6FE8
000080CE 5438 F742                  		addq.b	#2,($FFFFF742).w
000080D2                            
000080D2                            locret_6FE8:
000080D2 4E75                       		rts	
000080D4                            ; ===========================================================================
000080D4                            
000080D4                            loc_6FEA:
000080D4 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000080DA 6400                       		bcc.s	loc_6FF8
000080DC 5538 F742                  		subq.b	#2,($FFFFF742).w
000080E0 4E75                       		rts	
000080E2                            ; ===========================================================================
000080E2                            
000080E2                            loc_6FF8:
000080E2 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000080E8 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
000080EE 6400                       		bcc.s	locret_702C
000080F0 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
000080F6 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000080FC 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00008102 6400                       		bcc.s	locret_702C
00008104 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000810A 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00008110 6500                       		bcs.s	locret_702C
00008112 5438 F742                  		addq.b	#2,($FFFFF742).w
00008116                            
00008116                            locret_702C:
00008116 4E75                       		rts	
00008118                            ; ===========================================================================
00008118                            
00008118                            loc_702E:
00008118 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000811E 6400                       		bcc.s	loc_703C
00008120 5538 F742                  		subq.b	#2,($FFFFF742).w
00008124 4E75                       		rts	
00008126                            ; ===========================================================================
00008126                            
00008126                            loc_703C:
00008126 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000812C 6500                       		bcs.s	locret_704E
0000812E 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00008134 5438 F742                  		addq.b	#2,($FFFFF742).w
00008138                            
00008138                            locret_704E:
00008138 4E75                       		rts	
0000813A                            ; ===========================================================================
0000813A                            
0000813A                            loc_7050:
0000813A 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00008140 6500                       		bcs.s	locret_7072
00008142 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00008148 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000814E 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00008154 6500                       		bcs.s	locret_7072
00008156 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000815C                            
0000815C                            locret_7072:
0000815C 4E75                       		rts	
0000815E                            ; ===========================================================================
0000815E                            
0000815E                            Resize_MZ2:
0000815E 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008164 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000816A 6500                       		bcs.s	locret_7088
0000816C 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00008172                            
00008172                            locret_7088:
00008172 4E75                       		rts	
00008174                            ; ===========================================================================
00008174                            
00008174                            Resize_MZ3:
00008174 7000                       		moveq	#0,d0
00008176 1038 F742                  		move.b	($FFFFF742).w,d0
0000817A 303B 0000                  		move.w	off_7098(pc,d0.w),d0
0000817E 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008182                            ; ===========================================================================
00008182 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00008184 0000                       		dc.w Resize_MZ3end-off_7098
00008186                            ; ===========================================================================
00008186                            
00008186                            Resize_MZ3boss:
00008186 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000818C 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00008192 6500                       		bcs.s	locret_70E8
00008194 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000819A 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000081A0 6500                       		bcs.s	locret_70E8
000081A2 6100 0000                  		bsr.w	SingleObjLoad
000081A6 6600                       		bne.s	loc_70D0
000081A8 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
000081AC 337C 19F0 0008             		move.w	#$19F0,8(a1)
000081B2 337C 022C 000C             		move.w	#$22C,$C(a1)
000081B8                            
000081B8                            loc_70D0:
000081B8 303C 008C                  		move.w	#$8C,d0
000081BC 6100 905C                  		bsr.w	PlaySound	; play boss music
000081C0 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000081C6 5438 F742                  		addq.b	#2,($FFFFF742).w
000081CA 7011                       		moveq	#$11,d0
000081CC 6000 9290                  		bra.w	LoadPLC		; load boss patterns
000081D0                            ; ===========================================================================
000081D0                            
000081D0                            locret_70E8:
000081D0 4E75                       		rts	
000081D2                            ; ===========================================================================
000081D2                            
000081D2                            Resize_MZ3end:
000081D2 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000081D8 4E75                       		rts	
000081DA                            ; ===========================================================================
000081DA                            ; ---------------------------------------------------------------------------
000081DA                            ; Star Light Zone dynamic screen resizing
000081DA                            ; ---------------------------------------------------------------------------
000081DA                            
000081DA                            Resize_SLZ:				; XREF: Resize_Index
000081DA 7000                       		moveq	#0,d0
000081DC 1038 FE11                  		move.b	($FFFFFE11).w,d0
000081E0 D040                       		add.w	d0,d0
000081E2 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
000081E6 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
000081EA                            ; ===========================================================================
000081EA 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
000081EC 0000                       		dc.w Resize_SLZ12-Resize_SLZx
000081EE 0000                       		dc.w Resize_SLZ3-Resize_SLZx
000081F0                            ; ===========================================================================
000081F0                            
000081F0                            Resize_SLZ12:
000081F0 4E75                       		rts	
000081F2                            ; ===========================================================================
000081F2                            
000081F2                            Resize_SLZ3:
000081F2 7000                       		moveq	#0,d0
000081F4 1038 F742                  		move.b	($FFFFF742).w,d0
000081F8 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000081FC 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00008200                            ; ===========================================================================
00008200 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00008202 0000                       		dc.w Resize_SLZ3boss-off_7118
00008204 0000                       		dc.w Resize_SLZ3end-off_7118
00008206                            ; ===========================================================================
00008206                            
00008206                            Resize_SLZ3main:
00008206 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000820C 6500                       		bcs.s	locret_7130
0000820E 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00008214 5438 F742                  		addq.b	#2,($FFFFF742).w
00008218                            
00008218                            locret_7130:
00008218 4E75                       		rts	
0000821A                            ; ===========================================================================
0000821A                            
0000821A                            Resize_SLZ3boss:
0000821A 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00008220 6500                       		bcs.s	locret_715C
00008222 6100 0000                  		bsr.w	SingleObjLoad
00008226 6600                       		bne.s	loc_7144
00008228 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000822C                            
0000822C                            loc_7144:
0000822C 303C 008C                  		move.w	#$8C,d0
00008230 6100 8FE8                  		bsr.w	PlaySound	; play boss music
00008234 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000823A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000823E 7011                       		moveq	#$11,d0
00008240 6000 921C                  		bra.w	LoadPLC		; load boss patterns
00008244                            ; ===========================================================================
00008244                            
00008244                            locret_715C:
00008244 4E75                       		rts	
00008246                            ; ===========================================================================
00008246                            
00008246                            Resize_SLZ3end:
00008246 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000824C 4E75                       		rts
0000824E 4E75                       		rts
00008250                            ; ===========================================================================
00008250                            ; ---------------------------------------------------------------------------
00008250                            ; Spring Yard Zone dynamic screen resizing
00008250                            ; ---------------------------------------------------------------------------
00008250                            
00008250                            Resize_SYZ:				; XREF: Resize_Index
00008250 7000                       		moveq	#0,d0
00008252 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008256 D040                       		add.w	d0,d0
00008258 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
0000825C 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00008260                            ; ===========================================================================
00008260 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00008262 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00008264 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00008266                            ; ===========================================================================
00008266                            
00008266                            Resize_SYZ1:
00008266 4E75                       		rts	
00008268                            ; ===========================================================================
00008268                            
00008268                            Resize_SYZ2:
00008268 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000826E 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00008274 6500                       		bcs.s	locret_71A2
00008276 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
0000827C 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00008282 6500                       		bcs.s	locret_71A2
00008284 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000828A                            
0000828A                            locret_71A2:
0000828A 4E75                       		rts	
0000828C                            ; ===========================================================================
0000828C                            
0000828C                            Resize_SYZ3:
0000828C 7000                       		moveq	#0,d0
0000828E 1038 F742                  		move.b	($FFFFF742).w,d0
00008292 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008296 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
0000829A                            ; ===========================================================================
0000829A 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
0000829C 0000                       		dc.w Resize_SYZ3boss-off_71B2
0000829E 0000                       		dc.w Resize_SYZ3end-off_71B2
000082A0                            ; ===========================================================================
000082A0                            
000082A0                            Resize_SYZ3main:
000082A0 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000082A6 6500                       		bcs.s	locret_71CE
000082A8 6100 0000                  		bsr.w	SingleObjLoad
000082AC 6600                       		bne.s	locret_71CE
000082AE 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000082B2 5438 F742                  		addq.b	#2,($FFFFF742).w
000082B6                            
000082B6                            locret_71CE:
000082B6 4E75                       		rts	
000082B8                            ; ===========================================================================
000082B8                            
000082B8                            Resize_SYZ3boss:
000082B8 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000082BE 6500                       		bcs.s	locret_7200
000082C0 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000082C6 6100 0000                  		bsr.w	SingleObjLoad
000082CA 6600                       		bne.s	loc_71EC
000082CC 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000082D0 5438 F742                  		addq.b	#2,($FFFFF742).w
000082D4                            
000082D4                            loc_71EC:
000082D4 303C 008C                  		move.w	#$8C,d0
000082D8 6100 8F40                  		bsr.w	PlaySound	; play boss music
000082DC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000082E2 7011                       		moveq	#$11,d0
000082E4 6000 9178                  		bra.w	LoadPLC		; load boss patterns
000082E8                            ; ===========================================================================
000082E8                            
000082E8                            locret_7200:
000082E8 4E75                       		rts	
000082EA                            ; ===========================================================================
000082EA                            
000082EA                            Resize_SYZ3end:
000082EA 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000082F0 4E75                       		rts	
000082F2                            ; ===========================================================================
000082F2                            ; ---------------------------------------------------------------------------
000082F2                            ; Scrap	Brain Zone dynamic screen resizing
000082F2                            ; ---------------------------------------------------------------------------
000082F2                            
000082F2                            Resize_SBZ:				; XREF: Resize_Index
000082F2 7000                       		moveq	#0,d0
000082F4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000082F8 D040                       		add.w	d0,d0
000082FA 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
000082FE 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00008302                            ; ===========================================================================
00008302 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00008304 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00008306 0000                       		dc.w Resize_FZ-Resize_SBZx
00008308                            ; ===========================================================================
00008308                            
00008308                            Resize_SBZ1:
00008308 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000830E 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00008314 6500                       		bcs.s	locret_7242
00008316 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
0000831C 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00008322 6500                       		bcs.s	locret_7242
00008324 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
0000832A                            
0000832A                            locret_7242:
0000832A 4E75                       		rts	
0000832C                            ; ===========================================================================
0000832C                            
0000832C                            Resize_SBZ2:
0000832C 7000                       		moveq	#0,d0
0000832E 1038 F742                  		move.b	($FFFFF742).w,d0
00008332 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008336 4EFB 0000                  		jmp	off_7252(pc,d0.w)
0000833A                            ; ===========================================================================
0000833A 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
0000833C 0000                       		dc.w Resize_SBZ2boss-off_7252
0000833E 0000                       		dc.w Resize_SBZ2boss2-off_7252
00008340 0000                       		dc.w Resize_SBZ2end-off_7252
00008342                            ; ===========================================================================
00008342                            
00008342                            Resize_SBZ2main:
00008342 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00008348 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
0000834E 6500                       		bcs.s	locret_727A
00008350 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00008356 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
0000835C 6500                       		bcs.s	locret_727A
0000835E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008362                            
00008362                            locret_727A:
00008362 4E75                       		rts	
00008364                            ; ===========================================================================
00008364                            
00008364                            Resize_SBZ2boss:
00008364 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
0000836A 6500                       		bcs.s	locret_7298
0000836C 6100 0000                  		bsr.w	SingleObjLoad
00008370 6600                       		bne.s	locret_7298
00008372 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00008376 5438 F742                  		addq.b	#2,($FFFFF742).w
0000837A 701E                       		moveq	#$1E,d0
0000837C 6000 90E0                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00008380                            ; ===========================================================================
00008380                            
00008380                            locret_7298:
00008380 4E75                       		rts	
00008382                            ; ===========================================================================
00008382                            
00008382                            Resize_SBZ2boss2:
00008382 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00008388 6500                       		bcs.s	loc_72B6
0000838A 6100 0000                  		bsr.w	SingleObjLoad
0000838E 6600                       		bne.s	loc_72B0
00008390 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00008394 5438 F742                  		addq.b	#2,($FFFFF742).w
00008398                            
00008398                            loc_72B0:
00008398 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000839E                            
0000839E                            loc_72B6:
0000839E 6000                       		bra.s	loc_72C2
000083A0                            ; ===========================================================================
000083A0                            
000083A0                            Resize_SBZ2end:
000083A0 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000083A6 6500                       		bcs.s	loc_72C2
000083A8 4E75                       		rts	
000083AA                            ; ===========================================================================
000083AA                            
000083AA                            loc_72C2:
000083AA 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000083B0 4E75                       		rts	
000083B2                            ; ===========================================================================
000083B2                            
000083B2                            Resize_FZ:
000083B2 7000                       		moveq	#0,d0
000083B4 1038 F742                  		move.b	($FFFFF742).w,d0
000083B8 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
000083BC 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000083C0                            ; ===========================================================================
000083C0 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
000083C4 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
000083C8 0000                       		dc.w Resize_FZend2-off_72D8
000083CA                            ; ===========================================================================
000083CA                            
000083CA                            Resize_FZmain:
000083CA 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
000083D0 6500                       		bcs.s	loc_72F4
000083D2 5438 F742                  		addq.b	#2,($FFFFF742).w
000083D6 701F                       		moveq	#$1F,d0
000083D8 6100 9084                  		bsr.w	LoadPLC		; load FZ boss patterns
000083DC                            
000083DC                            loc_72F4:
000083DC 60CC                       		bra.s	loc_72C2
000083DE                            ; ===========================================================================
000083DE                            
000083DE                            Resize_FZboss:
000083DE 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
000083E4 6500                       		bcs.s	loc_7312
000083E6 6100 0000                  		bsr.w	SingleObjLoad
000083EA 6600                       		bne.s	loc_7312
000083EC 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
000083F0 5438 F742                  		addq.b	#2,($FFFFF742).w
000083F4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000083FA                            
000083FA                            loc_7312:
000083FA 60AE                       		bra.s	loc_72C2
000083FC                            ; ===========================================================================
000083FC                            
000083FC                            Resize_FZend:
000083FC 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00008402 6500                       		bcs.s	loc_7320
00008404 5438 F742                  		addq.b	#2,($FFFFF742).w
00008408                            
00008408                            loc_7320:
00008408 60A0                       		bra.s	loc_72C2
0000840A                            ; ===========================================================================
0000840A                            
0000840A                            locret_7322:
0000840A 4E75                       		rts	
0000840C                            ; ===========================================================================
0000840C                            
0000840C                            Resize_FZend2:
0000840C 609C                       		bra.s	loc_72C2
0000840E                            ; ===========================================================================
0000840E                            ; ---------------------------------------------------------------------------
0000840E                            ; Ending sequence dynamic screen resizing (empty)
0000840E                            ; ---------------------------------------------------------------------------
0000840E                            
0000840E                            Resize_Ending:				; XREF: Resize_Index
0000840E 4E75                       		rts	
00008410                            ; ===========================================================================
00008410                            ; ---------------------------------------------------------------------------
00008410                            ; Object 11 - GHZ bridge
00008410                            ; ---------------------------------------------------------------------------
00008410                            
00008410                            Obj11:					; XREF: Obj_Index
00008410 7000                       		moveq	#0,d0
00008412 1028 0024                  		move.b	$24(a0),d0
00008416 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
0000841A 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
0000841E                            ; ===========================================================================
0000841E 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00008422 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00008426 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
0000842A                            ; ===========================================================================
0000842A                            
0000842A                            Obj11_Main:				; XREF: Obj11_Index
0000842A 5428 0024                  		addq.b	#2,$24(a0)
0000842E 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00008436 317C 438E 0002             		move.w	#$438E,2(a0)
0000843C 117C 0004 0001             		move.b	#4,1(a0)
00008442 117C 0003 0018             		move.b	#3,$18(a0)
00008448 117C 0080 0019             		move.b	#$80,$19(a0)
0000844E 3428 000C                  		move.w	$C(a0),d2
00008452 3628 0008                  		move.w	8(a0),d3
00008456 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008458 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
0000845C 7200                       		moveq	#0,d1
0000845E 1212                       		move.b	(a2),d1		; copy a2 to d1
00008460 14FC 0000                  		move.b	#0,(a2)+
00008464 3001                       		move.w	d1,d0
00008466 E248                       		lsr.w	#1,d0
00008468 E948                       		lsl.w	#4,d0
0000846A 9640                       		sub.w	d0,d3
0000846C 5501                       		subq.b	#2,d1
0000846E 6500                       		bcs.s	Obj11_Action
00008470                            
00008470                            Obj11_MakeBdg:
00008470 6100 0000                  		bsr.w	SingleObjLoad
00008474 6600                       		bne.s	Obj11_Action
00008476 5228 0028                  		addq.b	#1,$28(a0)
0000847A B668 0008                  		cmp.w	8(a0),d3
0000847E 6600                       		bne.s	loc_73B8
00008480 0643 0010                  		addi.w	#$10,d3
00008484 3142 000C                  		move.w	d2,$C(a0)
00008488 3142 003C                  		move.w	d2,$3C(a0)
0000848C 3A08                       		move.w	a0,d5
0000848E 0445 D000                  		subi.w	#-$3000,d5
00008492 EC4D                       		lsr.w	#6,d5
00008494 0245 007F                  		andi.w	#$7F,d5
00008498 14C5                       		move.b	d5,(a2)+
0000849A 5228 0028                  		addq.b	#1,$28(a0)
0000849E                            
0000849E                            loc_73B8:				; XREF: ROM:00007398j
0000849E 3A09                       		move.w	a1,d5
000084A0 0445 D000                  		subi.w	#-$3000,d5
000084A4 EC4D                       		lsr.w	#6,d5
000084A6 0245 007F                  		andi.w	#$7F,d5
000084AA 14C5                       		move.b	d5,(a2)+
000084AC 137C 000A 0024             		move.b	#$A,$24(a1)
000084B2 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
000084B4 3342 000C                  		move.w	d2,$C(a1)
000084B8 3342 003C                  		move.w	d2,$3C(a1)
000084BC 3343 0008                  		move.w	d3,8(a1)
000084C0 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
000084C8 337C 438E 0002             		move.w	#$438E,2(a1)
000084CE 137C 0004 0001             		move.b	#4,1(a1)
000084D4 137C 0003 0018             		move.b	#3,$18(a1)
000084DA 137C 0008 0019             		move.b	#8,$19(a1)
000084E0 0643 0010                  		addi.w	#$10,d3
000084E4 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
000084E8                            
000084E8                            Obj11_Action:				; XREF: Obj11_Index
000084E8 6100                       		bsr.s	Obj11_Solid
000084EA 4A28 003E                  		tst.b	$3E(a0)
000084EE 6700                       		beq.s	Obj11_Display
000084F0 5928 003E                  		subq.b	#4,$3E(a0)
000084F4 6100 0000                  		bsr.w	Obj11_Bend
000084F8                            
000084F8                            Obj11_Display:
000084F8 6100 0000                  		bsr.w	DisplaySprite
000084FC 6000 0000                  		bra.w	Obj11_ChkDel
00008500                            
00008500                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008500                            
00008500                            
00008500                            Obj11_Solid:				; XREF: Obj11_Action
00008500 7200                       		moveq	#0,d1
00008502 1228 0028                  		move.b	$28(a0),d1
00008506 E749                       		lsl.w	#3,d1
00008508 3401                       		move.w	d1,d2
0000850A 5041                       		addq.w	#8,d1
0000850C D442                       		add.w	d2,d2
0000850E 43F8 D000                  		lea	($FFFFD000).w,a1
00008512 4A69 0012                  		tst.w	$12(a1)
00008516 6B00 0000                  		bmi.w	locret_751E
0000851A 3029 0008                  		move.w	8(a1),d0
0000851E 9068 0008                  		sub.w	8(a0),d0
00008522 D041                       		add.w	d1,d0
00008524 6B00 0000                  		bmi.w	locret_751E
00008528 B042                       		cmp.w	d2,d0
0000852A 6400 0000                  		bcc.w	locret_751E
0000852E 6000                       		bra.s	Platform2
00008530                            ; End of function Obj11_Solid
00008530                            
00008530                            ; ---------------------------------------------------------------------------
00008530                            ; Platform subroutine
00008530                            ; ---------------------------------------------------------------------------
00008530                            
00008530                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008530                            
00008530                            
00008530                            PlatformObject:
00008530 43F8 D000                  		lea	($FFFFD000).w,a1
00008534 4A69 0012                  		tst.w	$12(a1)
00008538 6B00 0000                  		bmi.w	locret_751E
0000853C 3029 0008                  		move.w	8(a1),d0
00008540 9068 0008                  		sub.w	8(a0),d0
00008544 D041                       		add.w	d1,d0
00008546 6B00 0000                  		bmi.w	locret_751E
0000854A D241                       		add.w	d1,d1
0000854C B041                       		cmp.w	d1,d0
0000854E 6400 0000                  		bcc.w	locret_751E
00008552                            
00008552                            Platform2:
00008552 3028 000C                  		move.w	$C(a0),d0
00008556 5140                       		subq.w	#8,d0
00008558                            
00008558                            Platform3:
00008558 3429 000C                  		move.w	$C(a1),d2
0000855C 1229 0016                  		move.b	$16(a1),d1
00008560 4881                       		ext.w	d1
00008562 D242                       		add.w	d2,d1
00008564 5841                       		addq.w	#4,d1
00008566 9041                       		sub.w	d1,d0
00008568 6200 0000                  		bhi.w	locret_751E
0000856C 0C40 FFF0                  		cmpi.w	#-$10,d0
00008570 6500 0000                  		bcs.w	locret_751E
00008574 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008578 6B00 0000                  		bmi.w	locret_751E
0000857C 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00008582 6400 0000                  		bcc.w	locret_751E
00008586 D440                       		add.w	d0,d2
00008588 5642                       		addq.w	#3,d2
0000858A 3342 000C                  		move.w	d2,$C(a1)
0000858E 5428 0024                  		addq.b	#2,$24(a0)
00008592                            
00008592                            loc_74AE:
00008592 0829 0003 0022             		btst	#3,$22(a1)
00008598 6700                       		beq.s	loc_74DC
0000859A 7000                       		moveq	#0,d0
0000859C 1029 003D                  		move.b	$3D(a1),d0
000085A0 ED48                       		lsl.w	#6,d0
000085A2 0680 00FF D000             		addi.l	#$FFD000,d0
000085A8 2440                       		movea.l	d0,a2
000085AA 08AA 0003 0022             		bclr	#3,$22(a2)
000085B0 422A 0025                  		clr.b	$25(a2)
000085B4 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
000085BA 6600                       		bne.s	loc_74DC
000085BC 552A 0024                  		subq.b	#2,$24(a2)
000085C0                            
000085C0                            loc_74DC:
000085C0 3008                       		move.w	a0,d0
000085C2 0440 D000                  		subi.w	#-$3000,d0
000085C6 EC48                       		lsr.w	#6,d0
000085C8 0240 007F                  		andi.w	#$7F,d0
000085CC 1340 003D                  		move.b	d0,$3D(a1)
000085D0 137C 0000 0026             		move.b	#0,$26(a1)
000085D6 337C 0000 0012             		move.w	#0,$12(a1)
000085DC 3369 0010 0020             		move.w	$10(a1),$20(a1)
000085E2 0829 0001 0022             		btst	#1,$22(a1)
000085E8 6700                       		beq.s	loc_7512
000085EA 2F08                       		move.l	a0,-(sp)
000085EC 2049                       		movea.l	a1,a0
000085EE 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000085F4 205F                       		movea.l	(sp)+,a0
000085F6                            
000085F6                            loc_7512:
000085F6 08E9 0003 0022             		bset	#3,$22(a1)
000085FC 08E8 0003 0022             		bset	#3,$22(a0)
00008602                            
00008602                            locret_751E:
00008602 4E75                       		rts	
00008604                            ; End of function PlatformObject
00008604                            
00008604                            ; ---------------------------------------------------------------------------
00008604                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00008604                            ; ---------------------------------------------------------------------------
00008604                            
00008604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008604                            
00008604                            
00008604                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00008604 43F8 D000                  		lea	($FFFFD000).w,a1
00008608 4A69 0012                  		tst.w	$12(a1)
0000860C 6B00 FFF4                  		bmi.w	locret_751E
00008610 3029 0008                  		move.w	8(a1),d0
00008614 9068 0008                  		sub.w	8(a0),d0
00008618 D041                       		add.w	d1,d0
0000861A 6BE6                       		bmi.s	locret_751E
0000861C D241                       		add.w	d1,d1
0000861E B041                       		cmp.w	d1,d0
00008620 64E0                       		bcc.s	locret_751E
00008622 0828 0000 0001             		btst	#0,1(a0)
00008628 6700                       		beq.s	loc_754A
0000862A 4640                       		not.w	d0
0000862C D041                       		add.w	d1,d0
0000862E                            
0000862E                            loc_754A:
0000862E E248                       		lsr.w	#1,d0
00008630 7600                       		moveq	#0,d3
00008632 1632 0000                  		move.b	(a2,d0.w),d3
00008636 3028 000C                  		move.w	$C(a0),d0
0000863A 9043                       		sub.w	d3,d0
0000863C 6000 FF1A                  		bra.w	Platform3
00008640                            ; End of function SlopeObject
00008640                            
00008640                            
00008640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008640                            
00008640                            
00008640                            Obj15_Solid:				; XREF: Obj15_SetSolid
00008640 43F8 D000                  		lea	($FFFFD000).w,a1
00008644 4A69 0012                  		tst.w	$12(a1)
00008648 6B00 FFB8                  		bmi.w	locret_751E
0000864C 3029 0008                  		move.w	8(a1),d0
00008650 9068 0008                  		sub.w	8(a0),d0
00008654 D041                       		add.w	d1,d0
00008656 6B00 FFAA                  		bmi.w	locret_751E
0000865A D241                       		add.w	d1,d1
0000865C B041                       		cmp.w	d1,d0
0000865E 6400 FFA2                  		bcc.w	locret_751E
00008662 3028 000C                  		move.w	$C(a0),d0
00008666 9043                       		sub.w	d3,d0
00008668 6000 FEEE                  		bra.w	Platform3
0000866C                            ; End of function Obj15_Solid
0000866C                            
0000866C                            ; ===========================================================================
0000866C                            
0000866C                            Obj11_Action2:				; XREF: Obj11_Index
0000866C 6100                       		bsr.s	Obj11_WalkOff
0000866E 6100 0000                  		bsr.w	DisplaySprite
00008672 6000 0000                  		bra.w	Obj11_ChkDel
00008676                            
00008676                            ; ---------------------------------------------------------------------------
00008676                            ; Subroutine allowing Sonic to walk off a bridge
00008676                            ; ---------------------------------------------------------------------------
00008676                            
00008676                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008676                            
00008676                            
00008676                            Obj11_WalkOff:				; XREF: Obj11_Action2
00008676 7200                       		moveq	#0,d1
00008678 1228 0028                  		move.b	$28(a0),d1
0000867C E749                       		lsl.w	#3,d1
0000867E 3401                       		move.w	d1,d2
00008680 5041                       		addq.w	#8,d1
00008682 6100                       		bsr.s	ExitPlatform2
00008684 6400                       		bcc.s	locret_75BE
00008686 E848                       		lsr.w	#4,d0
00008688 1140 003F                  		move.b	d0,$3F(a0)
0000868C 1028 003E                  		move.b	$3E(a0),d0
00008690 0C00 0040                  		cmpi.b	#$40,d0
00008694 6700                       		beq.s	loc_75B6
00008696 5828 003E                  		addq.b	#4,$3E(a0)
0000869A                            
0000869A                            loc_75B6:
0000869A 6100 0000                  		bsr.w	Obj11_Bend
0000869E 6100 0000                  		bsr.w	Obj11_MoveSonic
000086A2                            
000086A2                            locret_75BE:
000086A2 4E75                       		rts	
000086A4                            ; End of function Obj11_WalkOff
000086A4                            
000086A4                            ; ---------------------------------------------------------------------------
000086A4                            ; Subroutine allowing Sonic to walk or jump off	a platform
000086A4                            ; ---------------------------------------------------------------------------
000086A4                            
000086A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086A4                            
000086A4                            
000086A4                            ExitPlatform:
000086A4 3401                       		move.w	d1,d2
000086A6                            
000086A6                            ExitPlatform2:
000086A6 D442                       		add.w	d2,d2
000086A8 43F8 D000                  		lea	($FFFFD000).w,a1
000086AC 0829 0001 0022             		btst	#1,$22(a1)
000086B2 6600                       		bne.s	loc_75E0
000086B4 3029 0008                  		move.w	8(a1),d0
000086B8 9068 0008                  		sub.w	8(a0),d0
000086BC D041                       		add.w	d1,d0
000086BE 6B00                       		bmi.s	loc_75E0
000086C0 B042                       		cmp.w	d2,d0
000086C2 6500                       		bcs.s	locret_75F2
000086C4                            
000086C4                            loc_75E0:
000086C4 08A9 0003 0022             		bclr	#3,$22(a1)
000086CA 117C 0002 0024             		move.b	#2,$24(a0)
000086D0 08A8 0003 0022             		bclr	#3,$22(a0)
000086D6                            
000086D6                            locret_75F2:
000086D6 4E75                       		rts	
000086D8                            ; End of function ExitPlatform
000086D8                            
000086D8                            
000086D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086D8                            
000086D8                            
000086D8                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
000086D8 7000                       		moveq	#0,d0
000086DA 1028 003F                  		move.b	$3F(a0),d0
000086DE 1030 0029                  		move.b	$29(a0,d0.w),d0
000086E2 ED48                       		lsl.w	#6,d0
000086E4 0680 00FF D000             		addi.l	#$FFD000,d0
000086EA 2440                       		movea.l	d0,a2
000086EC 43F8 D000                  		lea	($FFFFD000).w,a1
000086F0 302A 000C                  		move.w	$C(a2),d0
000086F4 5140                       		subq.w	#8,d0
000086F6 7200                       		moveq	#0,d1
000086F8 1229 0016                  		move.b	$16(a1),d1
000086FC 9041                       		sub.w	d1,d0
000086FE 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00008702 4E75                       		rts	
00008704                            ; End of function Obj11_MoveSonic
00008704                            
00008704                            
00008704                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008704                            
00008704                            
00008704                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00008704 1028 003E                  		move.b	$3E(a0),d0
00008708 6100 A2EC                  		bsr.w	CalcSine
0000870C 3800                       		move.w	d0,d4
0000870E 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00008714 7000                       		moveq	#0,d0
00008716 1028 0028                  		move.b	$28(a0),d0
0000871A E948                       		lsl.w	#4,d0
0000871C 7600                       		moveq	#0,d3
0000871E 1628 003F                  		move.b	$3F(a0),d3
00008722 3403                       		move.w	d3,d2
00008724 D640                       		add.w	d0,d3
00008726 7A00                       		moveq	#0,d5
00008728 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
0000872E 1A35 3000                  		move.b	(a5,d3.w),d5
00008732 0243 000F                  		andi.w	#$F,d3
00008736 E94B                       		lsl.w	#4,d3
00008738 47F4 3000                  		lea	(a4,d3.w),a3
0000873C 45E8 0029                  		lea	$29(a0),a2
00008740                            
00008740                            loc_765C:
00008740 7000                       		moveq	#0,d0
00008742 101A                       		move.b	(a2)+,d0
00008744 ED48                       		lsl.w	#6,d0
00008746 0680 00FF D000             		addi.l	#$FFD000,d0
0000874C 2240                       		movea.l	d0,a1
0000874E 7000                       		moveq	#0,d0
00008750 101B                       		move.b	(a3)+,d0
00008752 5240                       		addq.w	#1,d0
00008754 C0C5                       		mulu.w	d5,d0
00008756 C0C4                       		mulu.w	d4,d0
00008758 4840                       		swap	d0
0000875A D069 003C                  		add.w	$3C(a1),d0
0000875E 3340 000C                  		move.w	d0,$C(a1)
00008762 51CA FFDC                  		dbf	d2,loc_765C
00008766 7000                       		moveq	#0,d0
00008768 1028 0028                  		move.b	$28(a0),d0
0000876C 7600                       		moveq	#0,d3
0000876E 1628 003F                  		move.b	$3F(a0),d3
00008772 5203                       		addq.b	#1,d3
00008774 9600                       		sub.b	d0,d3
00008776 4403                       		neg.b	d3
00008778 6B00                       		bmi.s	locret_76CA
0000877A 3403                       		move.w	d3,d2
0000877C E94B                       		lsl.w	#4,d3
0000877E 47F4 3000                  		lea	(a4,d3.w),a3
00008782 D6C2                       		adda.w	d2,a3
00008784 5342                       		subq.w	#1,d2
00008786 6500                       		bcs.s	locret_76CA
00008788                            
00008788                            loc_76A4:
00008788 7000                       		moveq	#0,d0
0000878A 101A                       		move.b	(a2)+,d0
0000878C ED48                       		lsl.w	#6,d0
0000878E 0680 00FF D000             		addi.l	#$FFD000,d0
00008794 2240                       		movea.l	d0,a1
00008796 7000                       		moveq	#0,d0
00008798 1023                       		move.b	-(a3),d0
0000879A 5240                       		addq.w	#1,d0
0000879C C0C5                       		mulu.w	d5,d0
0000879E C0C4                       		mulu.w	d4,d0
000087A0 4840                       		swap	d0
000087A2 D069 003C                  		add.w	$3C(a1),d0
000087A6 3340 000C                  		move.w	d0,$C(a1)
000087AA 51CA FFDC                  		dbf	d2,loc_76A4
000087AE                            
000087AE                            locret_76CA:
000087AE 4E75                       		rts	
000087B0                            ; End of function Obj11_Bend
000087B0                            
000087B0                            ; ===========================================================================
000087B0                            ; ---------------------------------------------------------------------------
000087B0                            ; GHZ bridge-bending data
000087B0                            ; (Defines how the bridge bends	when Sonic walks across	it)
000087B0                            ; ---------------------------------------------------------------------------
000087B0                            Obj11_BendData:	incbin	misc\ghzbend1.bin
000088C0                            		even
000088C0                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000089C0                            		even
000089C0                            
000089C0                            ; ===========================================================================
000089C0                            
000089C0                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000089C0 3028 0008                  		move.w	8(a0),d0
000089C4 0240 FF80                  		andi.w	#$FF80,d0
000089C8 3238 F700                  		move.w	($FFFFF700).w,d1
000089CC 0441 0080                  		subi.w	#$80,d1
000089D0 0241 FF80                  		andi.w	#$FF80,d1
000089D4 9041                       		sub.w	d1,d0
000089D6 0C40 0280                  		cmpi.w	#$280,d0
000089DA 6300                       		bls.s	Obj11_NoDel
000089DC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000089E0 6700                       		beq.s	Obj11_DelAll		; if it's zero, don't remember object
000089E2 3440                       		movea.w	d0,a2	; load address into a2
000089E4 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000089E8 6000                       		bra.s	Obj11_DelAll	; and delete object
000089EA                            
000089EA                            Obj11_NoDel:
000089EA 4E75                       		rts	
000089EC                            ; ===========================================================================
000089EC                            
000089EC                            Obj11_DelAll:				; XREF: Obj11_ChkDel
000089EC 7400                       		moveq	#0,d2
000089EE 45E8 0028                  		lea	$28(a0),a2	; load bridge length
000089F2 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000089F4 5302                       		subq.b	#1,d2		; subtract 1
000089F6 6500                       		bcs.s	Obj11_Delete
000089F8                            
000089F8                            Obj11_DelLoop:
000089F8 7000                       		moveq	#0,d0
000089FA 101A                       		move.b	(a2)+,d0
000089FC ED48                       		lsl.w	#6,d0
000089FE 0680 00FF D000             		addi.l	#$FFD000,d0
00008A04 2240                       		movea.l	d0,a1
00008A06 B048                       		cmp.w	a0,d0
00008A08 6700                       		beq.s	loc_791E
00008A0A 6100 0000                  		bsr.w	DeleteObject2
00008A0E                            
00008A0E                            loc_791E:
00008A0E 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00008A12                            
00008A12                            Obj11_Delete:
00008A12 6100 0000                  		bsr.w	DeleteObject
00008A16 4E75                       		rts	
00008A18                            ; ===========================================================================
00008A18                            
00008A18                            Obj11_Delete2:				; XREF: Obj11_Index
00008A18 6100 0000                  		bsr.w	DeleteObject
00008A1C 4E75                       		rts	
00008A1E                            ; ===========================================================================
00008A1E                            
00008A1E                            Obj11_Display2:				; XREF: Obj11_Index
00008A1E 6100 0000                  		bsr.w	DisplaySprite
00008A22 4E75                       		rts	
00008A24                            ; ===========================================================================
00008A24                            ; ---------------------------------------------------------------------------
00008A24                            ; Sprite mappings - GHZ	bridge
00008A24                            ; ---------------------------------------------------------------------------
00008A24                            Map_obj11:
00008A24                            	include "_maps\obj11.asm"
00008A24                            ; ---------------------------------------------------------------------------
00008A24                            ; Sprite mappings - GHZ	bridge
00008A24                            ; ---------------------------------------------------------------------------
00008A24 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00008A28 0000                       		dc.w byte_794B-Map_obj11
00008A2A 01                         byte_793A:	dc.b 1
00008A2B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008A30 02                         byte_7940:	dc.b 2
00008A31 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00008A36 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00008A3B 01                         byte_794B:	dc.b 1
00008A3C FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00008A42 00                         		even
00008A42 00                         		even
00008A42                            
00008A42                            ; ===========================================================================
00008A42                            ; ---------------------------------------------------------------------------
00008A42                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00008A42                            ;	    - spiked ball on a chain (SBZ)
00008A42                            ; ---------------------------------------------------------------------------
00008A42                            
00008A42                            Obj15:					; XREF: Obj_Index
00008A42 7000                       		moveq	#0,d0
00008A44 1028 0024                  		move.b	$24(a0),d0
00008A48 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00008A4C 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00008A50                            ; ===========================================================================
00008A50 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00008A54 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00008A58 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00008A5C 0000                       		dc.w Obj15_Action-Obj15_Index
00008A5E                            ; ===========================================================================
00008A5E                            
00008A5E                            Obj15_Main:				; XREF: Obj15_Index
00008A5E 5428 0024                  		addq.b	#2,$24(a0)
00008A62 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00008A6A 317C 4380 0002             		move.w	#$4380,2(a0)
00008A70 117C 0004 0001             		move.b	#4,1(a0)
00008A76 117C 0003 0018             		move.b	#3,$18(a0)
00008A7C 117C 0018 0019             		move.b	#$18,$19(a0)
00008A82 117C 0008 0016             		move.b	#8,$16(a0)
00008A88 3168 000C 0038             		move.w	$C(a0),$38(a0)
00008A8E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00008A94 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008A9A 6600                       		bne.s	Obj15_NotSLZ
00008A9C 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00008AA4 317C 43DC 0002             		move.w	#$43DC,2(a0)
00008AAA 117C 0020 0019             		move.b	#$20,$19(a0)
00008AB0 117C 0010 0016             		move.b	#$10,$16(a0)
00008AB6 117C 0099 0020             		move.b	#$99,$20(a0)
00008ABC                            
00008ABC                            Obj15_NotSLZ:
00008ABC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008AC2 6600                       		bne.s	Obj15_SetLength
00008AC4 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00008ACC 317C 0391 0002             		move.w	#$391,2(a0)
00008AD2 117C 0018 0019             		move.b	#$18,$19(a0)
00008AD8 117C 0018 0016             		move.b	#$18,$16(a0)
00008ADE 117C 0086 0020             		move.b	#$86,$20(a0)
00008AE4 117C 000C 0024             		move.b	#$C,$24(a0)
00008AEA                            
00008AEA                            Obj15_SetLength:
00008AEA 1810                       		move.b	0(a0),d4
00008AEC 7200                       		moveq	#0,d1
00008AEE 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008AF2 1212                       		move.b	(a2),d1		; move a2 to d1
00008AF4 3F01                       		move.w	d1,-(sp)
00008AF6 0241 000F                  		andi.w	#$F,d1
00008AFA 14FC 0000                  		move.b	#0,(a2)+
00008AFE 3601                       		move.w	d1,d3
00008B00 E94B                       		lsl.w	#4,d3
00008B02 5003                       		addq.b	#8,d3
00008B04 1143 003C                  		move.b	d3,$3C(a0)
00008B08 5103                       		subq.b	#8,d3
00008B0A 4A28 001A                  		tst.b	$1A(a0)
00008B0E 6700                       		beq.s	Obj15_MakeChain
00008B10 5003                       		addq.b	#8,d3
00008B12 5341                       		subq.w	#1,d1
00008B14                            
00008B14                            Obj15_MakeChain:
00008B14 6100 0000                  		bsr.w	SingleObjLoad
00008B18 6600                       		bne.s	loc_7A92
00008B1A 5228 0028                  		addq.b	#1,$28(a0)
00008B1E 3A09                       		move.w	a1,d5
00008B20 0445 D000                  		subi.w	#-$3000,d5
00008B24 EC4D                       		lsr.w	#6,d5
00008B26 0245 007F                  		andi.w	#$7F,d5
00008B2A 14C5                       		move.b	d5,(a2)+
00008B2C 137C 000A 0024             		move.b	#$A,$24(a1)
00008B32 1284                       		move.b	d4,0(a1)	; load swinging	object
00008B34 2368 0004 0004             		move.l	4(a0),4(a1)
00008B3A 3368 0002 0002             		move.w	2(a0),2(a1)
00008B40 08A9 0006 0002             		bclr	#6,2(a1)
00008B46 137C 0004 0001             		move.b	#4,1(a1)
00008B4C 137C 0004 0018             		move.b	#4,$18(a1)
00008B52 137C 0008 0019             		move.b	#8,$19(a1)
00008B58 137C 0001 001A             		move.b	#1,$1A(a1)
00008B5E 1343 003C                  		move.b	d3,$3C(a1)
00008B62 0403 0010                  		subi.b	#$10,d3
00008B66 6400                       		bcc.s	loc_7A8E
00008B68 137C 0002 001A             		move.b	#2,$1A(a1)
00008B6E 137C 0003 0018             		move.b	#3,$18(a1)
00008B74 08E9 0006 0002             		bset	#6,2(a1)
00008B7A                            
00008B7A                            loc_7A8E:
00008B7A 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00008B7E                            
00008B7E                            loc_7A92:
00008B7E 3A08                       		move.w	a0,d5
00008B80 0445 D000                  		subi.w	#-$3000,d5
00008B84 EC4D                       		lsr.w	#6,d5
00008B86 0245 007F                  		andi.w	#$7F,d5
00008B8A 14C5                       		move.b	d5,(a2)+
00008B8C 317C 4080 0026             		move.w	#$4080,$26(a0)
00008B92 317C FE00 003E             		move.w	#-$200,$3E(a0)
00008B98 321F                       		move.w	(sp)+,d1
00008B9A 0801 0004                  		btst	#4,d1		; is object type $8X ?
00008B9E 6700                       		beq.s	loc_7AD4	; if not, branch
00008BA0 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00008BA8 317C 43AA 0002             		move.w	#$43AA,2(a0)
00008BAE 117C 0001 001A             		move.b	#1,$1A(a0)
00008BB4 117C 0002 0018             		move.b	#2,$18(a0)
00008BBA 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008BC0                            
00008BC0                            loc_7AD4:
00008BC0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008BC6 6700                       		beq.s	Obj15_Action	; if yes, branch
00008BC8                            
00008BC8                            Obj15_SetSolid:				; XREF: Obj15_Index
00008BC8 7200                       		moveq	#0,d1
00008BCA 1228 0019                  		move.b	$19(a0),d1
00008BCE 7600                       		moveq	#0,d3
00008BD0 1628 0016                  		move.b	$16(a0),d3
00008BD4 6100 FA6A                  		bsr.w	Obj15_Solid
00008BD8                            
00008BD8                            Obj15_Action:				; XREF: Obj15_Index
00008BD8 6100 0000                  		bsr.w	Obj15_Move
00008BDC 6100 0000                  		bsr.w	DisplaySprite
00008BE0 6000 0000                  		bra.w	Obj15_ChkDel
00008BE4                            ; ===========================================================================
00008BE4                            
00008BE4                            Obj15_Action2:				; XREF: Obj15_Index
00008BE4 7200                       		moveq	#0,d1
00008BE6 1228 0019                  		move.b	$19(a0),d1
00008BEA 6100 FAB8                  		bsr.w	ExitPlatform
00008BEE 3F28 0008                  		move.w	8(a0),-(sp)
00008BF2 6100 0000                  		bsr.w	Obj15_Move
00008BF6 341F                       		move.w	(sp)+,d2
00008BF8 7600                       		moveq	#0,d3
00008BFA 1628 0016                  		move.b	$16(a0),d3
00008BFE 5203                       		addq.b	#1,d3
00008C00 6100 0000                  		bsr.w	MvSonicOnPtfm
00008C04 6100 0000                  		bsr.w	DisplaySprite
00008C08 6000 0000                  		bra.w	Obj15_ChkDel
00008C0C                            
00008C0C 4E75                       		rts
00008C0E                            
00008C0E                            ; ---------------------------------------------------------------------------
00008C0E                            ; Subroutine to	change Sonic's position with a platform
00008C0E                            ; ---------------------------------------------------------------------------
00008C0E                            
00008C0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C0E                            
00008C0E                            
00008C0E                            MvSonicOnPtfm:
00008C0E 43F8 D000                  		lea	($FFFFD000).w,a1
00008C12 3028 000C                  		move.w	$C(a0),d0
00008C16 9043                       		sub.w	d3,d0
00008C18 6000                       		bra.s	MvSonic2
00008C1A                            ; End of function MvSonicOnPtfm
00008C1A                            
00008C1A                            ; ---------------------------------------------------------------------------
00008C1A                            ; Subroutine to	change Sonic's position with a platform
00008C1A                            ; ---------------------------------------------------------------------------
00008C1A                            
00008C1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C1A                            
00008C1A                            
00008C1A                            MvSonicOnPtfm2:
00008C1A 43F8 D000                  		lea	($FFFFD000).w,a1
00008C1E 3028 000C                  		move.w	$C(a0),d0
00008C22 0440 0009                  		subi.w	#9,d0
00008C26                            
00008C26                            MvSonic2:
00008C26 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008C2A 6B00                       		bmi.s	locret_7B62
00008C2C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008C32 6400                       		bcc.s	locret_7B62
00008C34 4A78 FE08                  		tst.w	($FFFFFE08).w
00008C38 6600                       		bne.s	locret_7B62
00008C3A 9468 0008                  		sub.w	8(a0),d2
00008C3E 9569 0008                  		sub.w	d2,8(a1)
00008C42 7200                       		moveq	#0,d1
00008C44 1229 0016                  		move.b	$16(a1),d1
00008C48 9041                       		sub.w	d1,d0
00008C4A B069 000C                  		cmp.w	$C(a1),d0
00008C4E 6600                       		bne.s	@frustrated
00008C50 4A42                       		tst.w	d2
00008C52 6600                       		bne.s	@frustrated
00008C54 3340 000C                  		move.w	d0,$C(a1)	
00008C58 4A38 F5D9                  		tst.b	(SonimeSST+sonime_waittimer2).w
00008C5C 6700                       		beq.s	@resetwaittimer
00008C5E 4A38 F5D8                  		tst.b	(SonimeSST+sonime_waittimer).w
00008C62 6600                       		bne.s	locret_7B62
00008C64 5338 F5D9                  		subi.b	#1,(SonimeSST+sonime_waittimer2).w
00008C68 6000                       		bra.s	@frustrated2
00008C6A                            
00008C6A                            	@frustrated:
00008C6A 11FC 0020 F5D9             		move.b	#$20,(SonimeSST+sonime_waittimer2).w
00008C70 3340 000C                  		move.w	d0,$C(a1)
00008C74 4A38 F5D8                  		tst.b	(SonimeSST+sonime_waittimer).w
00008C78 6600                       		bne.s	@subtract
00008C7A                            
00008C7A                            	@frustrated2:
00008C7A 11FC 000B F5CE             		move.b	#face_impatient,(SonimeSST+sonime_face).w
00008C80 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00008C86 4E75                       		rts
00008C88                            
00008C88                            	@subtract:
00008C88 5338 F5D8                  		subi.b	#1,(SonimeSST+sonime_waittimer).w
00008C8C 4E75                       		rts
00008C8E                            
00008C8E                            	@resetwaittimer:
00008C8E 11FC 0060 F5D8             		move.b	#$60,(SonimeSST+sonime_waittimer).w
00008C94                            
00008C94                            locret_7B62:
00008C94 4E75                       		rts	
00008C96                            ; End of function MvSonicOnPtfm2
00008C96                            
00008C96                            
00008C96                            CheckIfMoving:
00008C96                            
00008C96                            
00008C96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C96                            
00008C96                            
00008C96                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008C96 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008C9A 323C 0080                  		move.w	#$80,d1
00008C9E 0828 0000 0022             		btst	#0,$22(a0)
00008CA4 6700                       		beq.s	loc_7B78
00008CA6 4440                       		neg.w	d0
00008CA8 D041                       		add.w	d1,d0
00008CAA                            
00008CAA                            loc_7B78:
00008CAA 6000                       		bra.s	Obj15_Move2
00008CAC                            ; End of function Obj15_Move
00008CAC                            
00008CAC                            
00008CAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CAC                            
00008CAC                            
00008CAC                            Obj48_Move:				; XREF: Obj48_Display2
00008CAC 4A28 003D                  		tst.b	$3D(a0)
00008CB0 6600                       		bne.s	loc_7B9C
00008CB2 3028 003E                  		move.w	$3E(a0),d0
00008CB6 5040                       		addq.w	#8,d0
00008CB8 3140 003E                  		move.w	d0,$3E(a0)
00008CBC D168 0026                  		add.w	d0,$26(a0)
00008CC0 0C40 0200                  		cmpi.w	#$200,d0
00008CC4 6600                       		bne.s	loc_7BB6
00008CC6 117C 0001 003D             		move.b	#1,$3D(a0)
00008CCC 6000                       		bra.s	loc_7BB6
00008CCE                            ; ===========================================================================
00008CCE                            
00008CCE                            loc_7B9C:
00008CCE 3028 003E                  		move.w	$3E(a0),d0
00008CD2 5140                       		subq.w	#8,d0
00008CD4 3140 003E                  		move.w	d0,$3E(a0)
00008CD8 D168 0026                  		add.w	d0,$26(a0)
00008CDC 0C40 FE00                  		cmpi.w	#-$200,d0
00008CE0 6600                       		bne.s	loc_7BB6
00008CE2 117C 0000 003D             		move.b	#0,$3D(a0)
00008CE8                            
00008CE8                            loc_7BB6:
00008CE8 1028 0026                  		move.b	$26(a0),d0
00008CEC                            ; End of function Obj48_Move
00008CEC                            
00008CEC                            
00008CEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CEC                            
00008CEC                            
00008CEC                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008CEC 6100 9D08                  		bsr.w	CalcSine
00008CF0 3428 0038                  		move.w	$38(a0),d2
00008CF4 3628 003A                  		move.w	$3A(a0),d3
00008CF8 45E8 0028                  		lea	$28(a0),a2
00008CFC 7C00                       		moveq	#0,d6
00008CFE 1C1A                       		move.b	(a2)+,d6
00008D00                            
00008D00                            loc_7BCE:
00008D00 7800                       		moveq	#0,d4
00008D02 181A                       		move.b	(a2)+,d4
00008D04 ED4C                       		lsl.w	#6,d4
00008D06 0684 00FF D000             		addi.l	#$FFD000,d4
00008D0C 2244                       		movea.l	d4,a1
00008D0E 7800                       		moveq	#0,d4
00008D10 1829 003C                  		move.b	$3C(a1),d4
00008D14 2A04                       		move.l	d4,d5
00008D16 C9C0                       		muls.w	d0,d4
00008D18 E084                       		asr.l	#8,d4
00008D1A CBC1                       		muls.w	d1,d5
00008D1C E085                       		asr.l	#8,d5
00008D1E D842                       		add.w	d2,d4
00008D20 DA43                       		add.w	d3,d5
00008D22 3344 000C                  		move.w	d4,$C(a1)
00008D26 3345 0008                  		move.w	d5,8(a1)
00008D2A 51CE FFD4                  		dbf	d6,loc_7BCE
00008D2E 4E75                       		rts	
00008D30                            ; End of function Obj15_Move2
00008D30                            
00008D30                            ; ===========================================================================
00008D30                            
00008D30                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008D30 3028 003A                  		move.w	$3A(a0),d0
00008D34 0240 FF80                  		andi.w	#$FF80,d0
00008D38 3238 F700                  		move.w	($FFFFF700).w,d1
00008D3C 0441 0080                  		subi.w	#$80,d1
00008D40 0241 FF80                  		andi.w	#$FF80,d1
00008D44 9041                       		sub.w	d1,d0
00008D46 0C40 0280                  		cmpi.w	#$280,d0
00008D4A 6300                       		bls.s	Obj15_NoDel
00008D4C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00008D50 6700                       		beq.s	Obj15_DelAll		; if it's zero, don't remember object
00008D52 3440                       		movea.w	d0,a2	; load address into a2
00008D54 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00008D58 6000                       		bra.s	Obj15_DelAll	; and delete object
00008D5A                            
00008D5A                            Obj15_NoDel:
00008D5A 4E75                       		rts	
00008D5C                            ; ===========================================================================
00008D5C                            
00008D5C                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00008D5C 7400                       		moveq	#0,d2
00008D5E 45E8 0028                  		lea	$28(a0),a2
00008D62 141A                       		move.b	(a2)+,d2
00008D64                            
00008D64                            Obj15_DelLoop:
00008D64 7000                       		moveq	#0,d0
00008D66 101A                       		move.b	(a2)+,d0
00008D68 ED48                       		lsl.w	#6,d0
00008D6A 0680 00FF D000             		addi.l	#$FFD000,d0
00008D70 2240                       		movea.l	d0,a1
00008D72 6100 0000                  		bsr.w	DeleteObject2
00008D76 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008D7A 4E75                       		rts	
00008D7C                            ; ===========================================================================
00008D7C                            
00008D7C                            Obj15_Delete:				; XREF: Obj15_Index
00008D7C 6100 0000                  		bsr.w	DeleteObject
00008D80 4E75                       		rts	
00008D82                            ; ===========================================================================
00008D82                            
00008D82                            Obj15_Display:				; XREF: Obj15_Index
00008D82 6000 0000                  		bra.w	DisplaySprite
00008D86                            ; ===========================================================================
00008D86                            ; ---------------------------------------------------------------------------
00008D86                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008D86                            ; ---------------------------------------------------------------------------
00008D86                            Map_obj15:
00008D86                            	include "_maps\obj15ghz.asm"
00008D86                            ; ---------------------------------------------------------------------------
00008D86                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008D86                            ; ---------------------------------------------------------------------------
00008D86 0000                       		dc.w byte_7C4E-Map_obj15
00008D88 0000                       		dc.w byte_7C59-Map_obj15
00008D8A 0000                       		dc.w byte_7C5F-Map_obj15
00008D8C 02                         byte_7C4E:	dc.b 2
00008D8D F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008D92 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008D97 01                         byte_7C59:	dc.b 1
00008D98 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008D9D 01                         byte_7C5F:	dc.b 1
00008D9E F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008DA4 00                         		even
00008DA4 00                         		even
00008DA4                            
00008DA4                            ; ---------------------------------------------------------------------------
00008DA4                            ; Sprite mappings - SLZ	swinging platforms
00008DA4                            ; ---------------------------------------------------------------------------
00008DA4                            Map_obj15a:
00008DA4                            	include "_maps\obj15slz.asm"
00008DA4                            ; ---------------------------------------------------------------------------
00008DA4                            ; Sprite mappings - SLZ	swinging platforms
00008DA4                            ; ---------------------------------------------------------------------------
00008DA4 0000                       		dc.w byte_7C6C-Map_obj15a
00008DA6 0000                       		dc.w byte_7C95-Map_obj15a
00008DA8 0000                       		dc.w byte_7C9B-Map_obj15a
00008DAA 08                         byte_7C6C:	dc.b 8
00008DAB F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00008DB0 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008DB5 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008DBA F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008DBF 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008DC4 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008DC9 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008DCE 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008DD3 01                         byte_7C95:	dc.b 1
00008DD4 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008DD9 01                         byte_7C9B:	dc.b 1
00008DDA F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008DE0 00                         		even
00008DE0 00                         		even
00008DE0                            
00008DE0                            ; ===========================================================================
00008DE0                            ; ---------------------------------------------------------------------------
00008DE0                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008DE0                            ; ---------------------------------------------------------------------------
00008DE0                            
00008DE0                            Obj17:					; XREF: Obj_Index
00008DE0 7000                       		moveq	#0,d0
00008DE2 1028 0024                  		move.b	$24(a0),d0
00008DE6 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008DEA 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008DEE                            ; ===========================================================================
00008DEE 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008DF0 0000                       		dc.w Obj17_Action-Obj17_Index
00008DF2 0000                       		dc.w Obj17_Action-Obj17_Index
00008DF4 0000                       		dc.w Obj17_Delete-Obj17_Index
00008DF6 0000                       		dc.w Obj17_Display-Obj17_Index
00008DF8                            ; ===========================================================================
00008DF8                            
00008DF8                            Obj17_Main:				; XREF: Obj17_Index
00008DF8 5428 0024                  		addq.b	#2,$24(a0)
00008DFC 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008E04 317C 4398 0002             		move.w	#$4398,2(a0)
00008E0A 117C 0007 0022             		move.b	#7,$22(a0)
00008E10 117C 0004 0001             		move.b	#4,1(a0)
00008E16 117C 0003 0018             		move.b	#3,$18(a0)
00008E1C 117C 0008 0019             		move.b	#8,$19(a0)
00008E22 3428 000C                  		move.w	$C(a0),d2
00008E26 3628 0008                  		move.w	8(a0),d3
00008E2A 1810                       		move.b	0(a0),d4
00008E2C 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008E30 7200                       		moveq	#0,d1
00008E32 1212                       		move.b	(a2),d1		; move a2 to d1
00008E34 14FC 0000                  		move.b	#0,(a2)+
00008E38 3001                       		move.w	d1,d0
00008E3A E248                       		lsr.w	#1,d0
00008E3C E948                       		lsl.w	#4,d0
00008E3E 9640                       		sub.w	d0,d3
00008E40 5501                       		subq.b	#2,d1
00008E42 6500                       		bcs.s	Obj17_Action
00008E44 7C00                       		moveq	#0,d6
00008E46                            
00008E46                            Obj17_MakeHelix:
00008E46 6100 0000                  		bsr.w	SingleObjLoad
00008E4A 6600                       		bne.s	Obj17_Action
00008E4C 5228 0028                  		addq.b	#1,$28(a0)
00008E50 3A09                       		move.w	a1,d5
00008E52 0445 D000                  		subi.w	#$D000,d5
00008E56 EC4D                       		lsr.w	#6,d5
00008E58 0245 007F                  		andi.w	#$7F,d5
00008E5C 14C5                       		move.b	d5,(a2)+
00008E5E 137C 0008 0024             		move.b	#8,$24(a1)
00008E64 1284                       		move.b	d4,0(a1)
00008E66 3342 000C                  		move.w	d2,$C(a1)
00008E6A 3343 0008                  		move.w	d3,8(a1)
00008E6E 2368 0004 0004             		move.l	4(a0),4(a1)
00008E74 337C 4398 0002             		move.w	#$4398,2(a1)
00008E7A 137C 0004 0001             		move.b	#4,1(a1)
00008E80 137C 0003 0018             		move.b	#3,$18(a1)
00008E86 137C 0008 0019             		move.b	#8,$19(a1)
00008E8C 1346 003E                  		move.b	d6,$3E(a1)
00008E90 5206                       		addq.b	#1,d6
00008E92 0206 0007                  		andi.b	#7,d6
00008E96 0643 0010                  		addi.w	#$10,d3
00008E9A B668 0008                  		cmp.w	8(a0),d3
00008E9E 6600                       		bne.s	loc_7D78
00008EA0 1146 003E                  		move.b	d6,$3E(a0)
00008EA4 5206                       		addq.b	#1,d6
00008EA6 0206 0007                  		andi.b	#7,d6
00008EAA 0643 0010                  		addi.w	#$10,d3
00008EAE 5228 0028                  		addq.b	#1,$28(a0)
00008EB2                            
00008EB2                            loc_7D78:
00008EB2 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008EB6                            
00008EB6                            Obj17_Action:				; XREF: Obj17_Index
00008EB6 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008EBA 6100 0000                  		bsr.w	DisplaySprite
00008EBE 6000 0000                  		bra.w	Obj17_ChkDel
00008EC2                            
00008EC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EC2                            
00008EC2                            
00008EC2                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008EC2 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008EC6 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008ECC D028 003E                  		add.b	$3E(a0),d0
00008ED0 0200 0007                  		andi.b	#7,d0
00008ED4 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008ED8 6600                       		bne.s	locret_7DA6
00008EDA 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008EE0                            
00008EE0                            locret_7DA6:
00008EE0 4E75                       		rts	
00008EE2                            ; End of function Obj17_RotateSpikes
00008EE2                            
00008EE2                            ; ===========================================================================
00008EE2                            
00008EE2                            Obj17_ChkDel:				; XREF: Obj17_Action
00008EE2 3028 0008                  		move.w	8(a0),d0
00008EE6 0240 FF80                  		andi.w	#$FF80,d0
00008EEA 3238 F700                  		move.w	($FFFFF700).w,d1
00008EEE 0441 0080                  		subi.w	#$80,d1
00008EF2 0241 FF80                  		andi.w	#$FF80,d1
00008EF6 9041                       		sub.w	d1,d0
00008EF8 0C40 0280                  		cmpi.w	#$280,d0
00008EFC 6300                       		bls.s	Obj17_NoDel
00008EFE 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00008F02 6700                       		beq.s	Obj17_DelAll		; if it's zero, don't remember object
00008F04 3440                       		movea.w	d0,a2	; load address into a2
00008F06 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00008F0A 6000                       		bra.s	Obj17_DelAll	; and delete object
00008F0C                            
00008F0C                            Obj17_NoDel:
00008F0C 4E75                       		rts	
00008F0E                            ; ===========================================================================
00008F0E                            
00008F0E                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008F0E 7400                       		moveq	#0,d2
00008F10 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008F14 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008F16 5502                       		subq.b	#2,d2
00008F18 6500                       		bcs.s	Obj17_Delete
00008F1A                            
00008F1A                            Obj17_DelLoop:
00008F1A 7000                       		moveq	#0,d0
00008F1C 101A                       		move.b	(a2)+,d0
00008F1E ED48                       		lsl.w	#6,d0
00008F20 0680 00FF D000             		addi.l	#$FFD000,d0
00008F26 2240                       		movea.l	d0,a1
00008F28 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008F2C 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008F30                            
00008F30                            Obj17_Delete:				; XREF: Obj17_Index
00008F30 6100 0000                  		bsr.w	DeleteObject
00008F34 4E75                       		rts	
00008F36                            ; ===========================================================================
00008F36                            
00008F36                            Obj17_Display:				; XREF: Obj17_Index
00008F36 6100 FF8A                  		bsr.w	Obj17_RotateSpikes
00008F3A 6000 0000                  		bra.w	DisplaySprite
00008F3E                            ; ===========================================================================
00008F3E                            ; ---------------------------------------------------------------------------
00008F3E                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008F3E                            ; ---------------------------------------------------------------------------
00008F3E                            Map_obj17:
00008F3E                            	include "_maps\obj17.asm"
00008F3E                            ; ---------------------------------------------------------------------------
00008F3E                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008F3E                            ; ---------------------------------------------------------------------------
00008F3E 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008F42 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008F46 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008F4A 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008F4E 01                         byte_7E08:	dc.b 1
00008F4F F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008F54 01                         byte_7E0E:	dc.b 1
00008F55 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008F5A 01                         byte_7E14:	dc.b 1
00008F5B F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008F60 01                         byte_7E1A:	dc.b 1
00008F61 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008F66 01                         byte_7E20:	dc.b 1
00008F67 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008F6C 01                         byte_7E26:	dc.b 1
00008F6D 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008F72 01                         byte_7E2C:	dc.b 1
00008F73 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008F78                            		even
00008F78                            		even
00008F78                            
00008F78                            ; ===========================================================================
00008F78                            ; ---------------------------------------------------------------------------
00008F78                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008F78                            ; ---------------------------------------------------------------------------
00008F78                            
00008F78                            Obj18:					; XREF: Obj_Index
00008F78 7000                       		moveq	#0,d0
00008F7A 1028 0024                  		move.b	$24(a0),d0
00008F7E 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008F82 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008F86                            ; ===========================================================================
00008F86 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008F88 0000                       		dc.w Obj18_Solid-Obj18_Index
00008F8A 0000                       		dc.w Obj18_Action2-Obj18_Index
00008F8C 0000                       		dc.w Obj18_Delete-Obj18_Index
00008F8E 0000                       		dc.w Obj18_Action-Obj18_Index
00008F90                            ; ===========================================================================
00008F90                            
00008F90                            Obj18_Main:				; XREF: Obj18_Index
00008F90 5428 0024                  		addq.b	#2,$24(a0)
00008F94 317C 4000 0002             		move.w	#$4000,2(a0)
00008F9A 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008FA2 117C 0020 0019             		move.b	#$20,$19(a0)
00008FA8 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008FAE 6600                       		bne.s	Obj18_NotSYZ
00008FB0 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008FB8 117C 0020 0019             		move.b	#$20,$19(a0)
00008FBE                            
00008FBE                            Obj18_NotSYZ:
00008FBE 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008FC4 6600                       		bne.s	Obj18_NotSLZ
00008FC6 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008FCE 117C 0020 0019             		move.b	#$20,$19(a0)
00008FD4 317C 4000 0002             		move.w	#$4000,2(a0)
00008FDA 117C 0003 0028             		move.b	#3,$28(a0)
00008FE0                            
00008FE0                            Obj18_NotSLZ:
00008FE0 117C 0004 0001             		move.b	#4,1(a0)
00008FE6 117C 0004 0018             		move.b	#4,$18(a0)
00008FEC 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008FF2 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008FF8 3168 0008 0032             		move.w	8(a0),$32(a0)
00008FFE 317C 0080 0026             		move.w	#$80,$26(a0)
00009004 7200                       		moveq	#0,d1
00009006 1028 0028                  		move.b	$28(a0),d0
0000900A 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
0000900E 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00009010 5201                       		addq.b	#1,d1		; use frame #1
00009012 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00009018                            
00009018                            Obj18_SetFrame:
00009018 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
0000901C                            
0000901C                            Obj18_Solid:				; XREF: Obj18_Index
0000901C 4A28 0038                  		tst.b	$38(a0)
00009020 6700                       		beq.s	loc_7EE0
00009022 5928 0038                  		subq.b	#4,$38(a0)
00009026                            
00009026                            loc_7EE0:
00009026 7200                       		moveq	#0,d1
00009028 1228 0019                  		move.b	$19(a0),d1
0000902C 6100 F502                  		bsr.w	PlatformObject
00009030                            
00009030                            Obj18_Action:				; XREF: Obj18_Index
00009030 6100 0000                  		bsr.w	Obj18_Move
00009034 6100 0000                  		bsr.w	Obj18_Nudge
00009038 6100 0000                  		bsr.w	DisplaySprite
0000903C 6000 0000                  		bra.w	Obj18_ChkDel
00009040                            ; ===========================================================================
00009040                            
00009040                            Obj18_Action2:				; XREF: Obj18_Index
00009040 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00009046 6700                       		beq.s	loc_7F06
00009048 5828 0038                  		addq.b	#4,$38(a0)
0000904C                            
0000904C                            loc_7F06:
0000904C 7200                       		moveq	#0,d1
0000904E 1228 0019                  		move.b	$19(a0),d1
00009052 6100 F650                  		bsr.w	ExitPlatform
00009056 3F28 0008                  		move.w	8(a0),-(sp)
0000905A 6100 0000                  		bsr.w	Obj18_Move
0000905E 6100 0000                  		bsr.w	Obj18_Nudge
00009062 341F                       		move.w	(sp)+,d2
00009064 6100 FBB4                  		bsr.w	MvSonicOnPtfm2
00009068 6100 0000                  		bsr.w	DisplaySprite
0000906C 6000 0000                  		bra.w	Obj18_ChkDel
00009070                            
00009070 4E75                       		rts
00009072                            
00009072                            ; ---------------------------------------------------------------------------
00009072                            ; Subroutine to	move platform slightly when you	stand on it
00009072                            ; ---------------------------------------------------------------------------
00009072                            
00009072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009072                            
00009072                            
00009072                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00009072 1028 0038                  		move.b	$38(a0),d0
00009076 6100 997E                  		bsr.w	CalcSine
0000907A 323C 0400                  		move.w	#$400,d1
0000907E C1C1                       		muls.w	d1,d0
00009080 4840                       		swap	d0
00009082 D068 002C                  		add.w	$2C(a0),d0
00009086 3140 000C                  		move.w	d0,$C(a0)
0000908A 4E75                       		rts	
0000908C                            ; End of function Obj18_Nudge
0000908C                            
0000908C                            ; ---------------------------------------------------------------------------
0000908C                            ; Subroutine to	move platforms
0000908C                            ; ---------------------------------------------------------------------------
0000908C                            
0000908C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000908C                            
0000908C                            
0000908C                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
0000908C 7000                       		moveq	#0,d0
0000908E 1028 0028                  		move.b	$28(a0),d0
00009092 0240 000F                  		andi.w	#$F,d0
00009096 D040                       		add.w	d0,d0
00009098 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
0000909C 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000090A0                            ; End of function Obj18_Move
000090A0                            
000090A0                            ; ===========================================================================
000090A0 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000090A4 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000090A8 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000090AC 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000090B0 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000090B4 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000090B8 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000090BA                            ; ===========================================================================
000090BA                            
000090BA                            Obj18_Type00:
000090BA 4E75                       		rts			; platform 00 doesn't move
000090BC                            ; ===========================================================================
000090BC                            
000090BC                            Obj18_Type05:
000090BC 3028 0032                  		move.w	$32(a0),d0
000090C0 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000090C4 4401                       		neg.b	d1		; reverse platform-motion
000090C6 0601 0040                  		addi.b	#$40,d1
000090CA 6000                       		bra.s	Obj18_01_Move
000090CC                            ; ===========================================================================
000090CC                            
000090CC                            Obj18_Type01:
000090CC 3028 0032                  		move.w	$32(a0),d0
000090D0 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000090D4 0401 0040                  		subi.b	#$40,d1
000090D8                            
000090D8                            Obj18_01_Move:
000090D8 4881                       		ext.w	d1
000090DA D041                       		add.w	d1,d0
000090DC 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000090E0 6000 0000                  		bra.w	Obj18_ChgMotion
000090E4                            ; ===========================================================================
000090E4                            
000090E4                            Obj18_Type0C:
000090E4 3028 0034                  		move.w	$34(a0),d0
000090E8 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000090EC 4401                       		neg.b	d1		; reverse platform-motion
000090EE 0601 0030                  		addi.b	#$30,d1
000090F2 6000                       		bra.s	Obj18_02_Move
000090F4                            ; ===========================================================================
000090F4                            
000090F4                            Obj18_Type0B:
000090F4 3028 0034                  		move.w	$34(a0),d0
000090F8 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000090FC 0401 0030                  		subi.b	#$30,d1
00009100 6000                       		bra.s	Obj18_02_Move
00009102                            ; ===========================================================================
00009102                            
00009102                            Obj18_Type06:
00009102 3028 0034                  		move.w	$34(a0),d0
00009106 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000910A 4401                       		neg.b	d1		; reverse platform-motion
0000910C 0601 0040                  		addi.b	#$40,d1
00009110 6000                       		bra.s	Obj18_02_Move
00009112                            ; ===========================================================================
00009112                            
00009112                            Obj18_Type02:
00009112 3028 0034                  		move.w	$34(a0),d0
00009116 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000911A 0401 0040                  		subi.b	#$40,d1
0000911E                            
0000911E                            Obj18_02_Move:
0000911E 4881                       		ext.w	d1
00009120 D041                       		add.w	d1,d0
00009122 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009126 6000 0000                  		bra.w	Obj18_ChgMotion
0000912A                            ; ===========================================================================
0000912A                            
0000912A                            Obj18_Type03:
0000912A 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000912E 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00009130 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00009136 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00009138 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
0000913E                            
0000913E                            Obj18_03_NoMove:
0000913E 4E75                       		rts	
00009140                            ; ===========================================================================
00009140                            
00009140                            Obj18_03_Wait:
00009140 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00009144 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00009146 317C 0020 003A             		move.w	#32,$3A(a0)
0000914C 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00009150 4E75                       		rts	
00009152                            ; ===========================================================================
00009152                            
00009152                            Obj18_Type04:
00009152 4A68 003A                  		tst.w	$3A(a0)
00009156 6700                       		beq.s	loc_8048
00009158 5368 003A                  		subq.w	#1,$3A(a0)
0000915C 6600                       		bne.s	loc_8048
0000915E 0828 0003 0022             		btst	#3,$22(a0)
00009164 6700                       		beq.s	loc_8042
00009166 08E9 0001 0022             		bset	#1,$22(a1)
0000916C 08A9 0003 0022             		bclr	#3,$22(a1)
00009172 137C 0002 0024             		move.b	#2,$24(a1)
00009178 08A8 0003 0022             		bclr	#3,$22(a0)
0000917E 4228 0025                  		clr.b	$25(a0)
00009182 3368 0012 0012             		move.w	$12(a0),$12(a1)
00009188                            
00009188                            loc_8042:
00009188 117C 0008 0024             		move.b	#8,$24(a0)
0000918E                            
0000918E                            loc_8048:
0000918E 2628 002C                  		move.l	$2C(a0),d3
00009192 3028 0012                  		move.w	$12(a0),d0
00009196 48C0                       		ext.l	d0
00009198 E180                       		asl.l	#8,d0
0000919A D680                       		add.l	d0,d3
0000919C 2143 002C                  		move.l	d3,$2C(a0)
000091A0 0668 0038 0012             		addi.w	#$38,$12(a0)
000091A6 3038 F72E                  		move.w	($FFFFF72E).w,d0
000091AA 0640 00E0                  		addi.w	#$E0,d0
000091AE B068 002C                  		cmp.w	$2C(a0),d0
000091B2 6400                       		bcc.s	locret_8074
000091B4 117C 0006 0024             		move.b	#6,$24(a0)
000091BA                            
000091BA                            locret_8074:
000091BA 4E75                       		rts	
000091BC                            ; ===========================================================================
000091BC                            
000091BC                            Obj18_Type07:
000091BC 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000091C0 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
000091C2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
000091C6 7000                       		moveq	#0,d0
000091C8 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
000091CC E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000091CE 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000091D2 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000091D4 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000091DA                            
000091DA                            Obj18_07_NoMove:
000091DA 4E75                       		rts	
000091DC                            ; ===========================================================================
000091DC                            
000091DC                            Obj18_07_Wait:
000091DC 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000091E0 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000091E2 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000091E6 4E75                       		rts	
000091E8                            ; ===========================================================================
000091E8                            
000091E8                            Obj18_Type08:
000091E8 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000091EC 3028 0034                  		move.w	$34(a0),d0
000091F0 0440 0200                  		subi.w	#$200,d0
000091F4 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000091F8 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000091FA 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000091FE                            
000091FE                            Obj18_08_NoStop:
000091FE 4E75                       		rts	
00009200                            ; ===========================================================================
00009200                            
00009200                            Obj18_Type0A:
00009200 3028 0034                  		move.w	$34(a0),d0
00009204 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00009208 0401 0040                  		subi.b	#$40,d1
0000920C 4881                       		ext.w	d1
0000920E E241                       		asr.w	#1,d1
00009210 D041                       		add.w	d1,d0
00009212 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009216                            
00009216                            Obj18_ChgMotion:
00009216 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
0000921C 4E75                       		rts	
0000921E                            ; ===========================================================================
0000921E                            
0000921E                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
0000921E 3028 0032                  		move.w	$32(a0),d0
00009222 0240 FF80                  		andi.w	#$FF80,d0
00009226 3238 F700                  		move.w	($FFFFF700).w,d1
0000922A 0441 0080                  		subi.w	#$80,d1
0000922E 0241 FF80                  		andi.w	#$FF80,d1
00009232 9041                       		sub.w	d1,d0
00009234 0C40 0280                  		cmpi.w	#$280,d0
00009238 6300                       		bls.s	Obj18_NoDel
0000923A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000923E 6700                       		beq.s	Obj18_Delete		; if it's zero, don't remember object
00009240 3440                       		movea.w	d0,a2	; load address into a2
00009242 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00009246 6000                       		bra.s	Obj18_Delete	; and delete object
00009248                            
00009248                            Obj18_NoDel:
00009248 4E75                       		rts	
0000924A                            ; ===========================================================================
0000924A                            
0000924A                            Obj18_Delete:				; XREF: Obj18_Index
0000924A 6000 0000                  		bra.w	DeleteObject
0000924E                            ; ===========================================================================
0000924E                            ; ---------------------------------------------------------------------------
0000924E                            ; Sprite mappings - unused
0000924E                            ; ---------------------------------------------------------------------------
0000924E                            Map_obj18x:
0000924E                            	include "_maps\obj18x.asm"
0000924E                            ; ---------------------------------------------------------------------------
0000924E                            ; Sprite mappings - unused
0000924E                            ; ---------------------------------------------------------------------------
0000924E 0000                       		dc.w byte_80FE-Map_obj18x
00009250 0000                       		dc.w byte_8109-Map_obj18x
00009252 02                         byte_80FE:	dc.b 2
00009253 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009258 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
0000925D 0A                         byte_8109:	dc.b $A
0000925E F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009263 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009268 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
0000926D 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009272 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009277 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
0000927C 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009281 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009286 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000928B 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009290                            		even
00009290                            		even
00009290                            
00009290                            ; ---------------------------------------------------------------------------
00009290                            ; Sprite mappings - GHZ	platforms
00009290                            ; ---------------------------------------------------------------------------
00009290                            Map_obj18:
00009290                            	include "_maps\obj18ghz.asm"
00009290                            ; ---------------------------------------------------------------------------
00009290                            ; Sprite mappings - GHZ	platforms
00009290                            ; ---------------------------------------------------------------------------
00009290 0000                       		dc.w byte_8140-Map_obj18
00009292 0000                       		dc.w byte_8155-Map_obj18
00009294 04                         byte_8140:	dc.b 4
00009295 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000929A F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000929F F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
000092A4 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
000092A9 0A                         byte_8155:	dc.b $A
000092AA F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000092AF 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
000092B4 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
000092B9 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
000092BE 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000092C3 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000092C8 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
000092CD 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000092D2 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000092D7 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000092DC                            		even
000092DC                            		even
000092DC                            
000092DC                            ; ---------------------------------------------------------------------------
000092DC                            ; Sprite mappings - SYZ	platforms
000092DC                            ; ---------------------------------------------------------------------------
000092DC                            Map_obj18a:
000092DC                            	include "_maps\obj18syz.asm"
000092DC                            ; ---------------------------------------------------------------------------
000092DC                            ; Sprite mappings - SYZ	platforms
000092DC                            ; ---------------------------------------------------------------------------
000092DC 0000                       		dc.w byte_818A-Map_obj18a
000092DE 03                         byte_818A:	dc.b 3
000092DF F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000092E4 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000092E9 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000092EE                            		even
000092EE                            		even
000092EE                            
000092EE                            ; ---------------------------------------------------------------------------
000092EE                            ; Sprite mappings - SLZ	platforms
000092EE                            ; ---------------------------------------------------------------------------
000092EE                            Map_obj18b:
000092EE                            	include "_maps\obj18slz.asm"
000092EE                            ; ---------------------------------------------------------------------------
000092EE                            ; Sprite mappings - SLZ	platforms
000092EE                            ; ---------------------------------------------------------------------------
000092EE 0000                       		dc.w byte_819C-Map_obj18b
000092F0 02                         byte_819C:	dc.b 2
000092F1 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000092F6 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000092FC 00                         		even
000092FC 00                         		even
000092FC                            
000092FC                            ; ===========================================================================
000092FC                            ; ---------------------------------------------------------------------------
000092FC                            ; Object 19 - blank
000092FC                            ; ---------------------------------------------------------------------------
000092FC                            
000092FC                            Obj19:					; XREF: Obj_Index
000092FC 4E75                       		rts	
000092FE                            ; ===========================================================================
000092FE                            ; ---------------------------------------------------------------------------
000092FE                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000092FE                            ; ---------------------------------------------------------------------------
000092FE                            Map_obj48:
000092FE                            	include "_maps\obj48.asm"
000092FE                            ; ---------------------------------------------------------------------------
000092FE                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000092FE                            ; ---------------------------------------------------------------------------
000092FE 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00009302 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00009306 06                         byte_81B2:	dc.b 6
00009307 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
0000930C F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009311 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009316 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0000931B 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009320 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009325 04                         byte_81D1:	dc.b 4
00009326 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
0000932B E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009330 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009335 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
0000933A 04                         byte_81E6:	dc.b 4
0000933B E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009340 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009345 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0000934A 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0000934F 04                         byte_81FB:	dc.b 4
00009350 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009355 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
0000935A 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0000935F 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009364                            		even
00009364                            		even
00009364                            
00009364                            ; ===========================================================================
00009364                            ; ---------------------------------------------------------------------------
00009364                            ; Object 1A - GHZ collapsing ledge
00009364                            ; ---------------------------------------------------------------------------
00009364                            
00009364                            Obj1A:					; XREF: Obj_Index
00009364 7000                       		moveq	#0,d0
00009366 1028 0024                  		move.b	$24(a0),d0
0000936A 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
0000936E 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00009372                            ; ===========================================================================
00009372 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00009376 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
0000937A 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
0000937E                            ; ===========================================================================
0000937E                            
0000937E                            Obj1A_Main:				; XREF: Obj1A_Index
0000937E 5428 0024                  		addq.b	#2,$24(a0)
00009382 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
0000938A 317C 4000 0002             		move.w	#$4000,2(a0)
00009390 0028 0004 0001             		ori.b	#4,1(a0)
00009396 117C 0004 0018             		move.b	#4,$18(a0)
0000939C 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
000093A2 117C 0064 0019             		move.b	#$64,$19(a0)
000093A8 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000093AE 117C 0038 0016             		move.b	#$38,$16(a0)
000093B4 08E8 0004 0001             		bset	#4,1(a0)
000093BA                            
000093BA                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
000093BA 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
000093BE 6700                       		beq.s	Obj1A_Slope	; if not, branch
000093C0 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
000093C4 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
000093C8 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000093CC                            
000093CC                            Obj1A_Slope:
000093CC 323C 0030                  		move.w	#$30,d1
000093D0 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000093D6 6100 F22C                  		bsr.w	SlopeObject
000093DA 6000 0000                  		bra.w	MarkObjGone
000093DE                            ; ===========================================================================
000093DE                            
000093DE                            Obj1A_Touch:				; XREF: Obj1A_Index
000093DE 4A28 0038                  		tst.b	$38(a0)
000093E2 6700 0000                  		beq.w	loc_847A
000093E6 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000093EC 5328 0038                  		subq.b	#1,$38(a0)
000093F0                            
000093F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000093F0                            
000093F0                            
000093F0                            Obj1A_WalkOff:				; XREF: Obj1A_Index
000093F0 323C 0030                  		move.w	#$30,d1
000093F4 6100 F2AE                  		bsr.w	ExitPlatform
000093F8 323C 0030                  		move.w	#$30,d1
000093FC 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00009402 3428 0008                  		move.w	8(a0),d2
00009406 6100 0000                  		bsr.w	SlopeObject2
0000940A 6000 0000                  		bra.w	MarkObjGone
0000940E                            ; End of function Obj1A_WalkOff
0000940E                            
0000940E                            ; ===========================================================================
0000940E                            
0000940E                            Obj1A_Display:				; XREF: Obj1A_Index
0000940E 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009412 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00009414 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009418 6600 0000                  		bne.w	loc_82D0	; if yes, branch
0000941C 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009420 6000 0000                  		bra.w	DisplaySprite
00009424                            ; ===========================================================================
00009424                            
00009424                            loc_82D0:				; XREF: Obj1A_Display
00009424 5328 0038                  		subq.b	#1,$38(a0)
00009428 6100 FFC6                  		bsr.w	Obj1A_WalkOff
0000942C 43F8 D000                  		lea	($FFFFD000).w,a1
00009430 0829 0003 0022             		btst	#3,$22(a1)
00009436 6700                       		beq.s	loc_82FC
00009438 4A28 0038                  		tst.b	$38(a0)
0000943C 6600                       		bne.s	locret_8308
0000943E 08A9 0003 0022             		bclr	#3,$22(a1)
00009444 08A9 0005 0022             		bclr	#5,$22(a1)
0000944A 137C 0001 001D             		move.b	#1,$1D(a1)
00009450                            
00009450                            loc_82FC:
00009450 117C 0000 003A             		move.b	#0,$3A(a0)
00009456 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
0000945C                            
0000945C                            locret_8308:
0000945C 4E75                       		rts	
0000945E                            ; ===========================================================================
0000945E                            
0000945E                            Obj1A_TimeZero:				; XREF: Obj1A_Display
0000945E 6100 0000                  		bsr.w	ObjectFall
00009462 6100 0000                  		bsr.w	DisplaySprite
00009466 4A28 0001                  		tst.b	1(a0)
0000946A 6A00                       		bpl.s	Obj1A_Delete
0000946C 4E75                       		rts	
0000946E                            ; ===========================================================================
0000946E                            
0000946E                            Obj1A_Delete:				; XREF: Obj1A_Index
0000946E 6100 0000                  		bsr.w	DeleteObject
00009472 4E75                       		rts	
00009474                            ; ===========================================================================
00009474                            ; ---------------------------------------------------------------------------
00009474                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009474                            ; ---------------------------------------------------------------------------
00009474                            
00009474                            Obj53:					; XREF: Obj_Index
00009474 7000                       		moveq	#0,d0
00009476 1028 0024                  		move.b	$24(a0),d0
0000947A 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
0000947E 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00009482                            ; ===========================================================================
00009482 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00009486 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
0000948A 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
0000948E                            ; ===========================================================================
0000948E                            
0000948E                            Obj53_Main:				; XREF: Obj53_Index
0000948E 5428 0024                  		addq.b	#2,$24(a0)
00009492 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
0000949A 317C 42B8 0002             		move.w	#$42B8,2(a0)
000094A0 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000094A6 6600                       		bne.s	Obj53_NotSLZ
000094A8 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
000094AE 5428 001A                  		addq.b	#2,$1A(a0)
000094B2                            
000094B2                            Obj53_NotSLZ:
000094B2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000094B8 6600                       		bne.s	Obj53_NotSBZ
000094BA 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
000094C0                            
000094C0                            Obj53_NotSBZ:
000094C0 0028 0004 0001             		ori.b	#4,1(a0)
000094C6 117C 0004 0018             		move.b	#4,$18(a0)
000094CC 117C 0007 0038             		move.b	#7,$38(a0)
000094D2 117C 0044 0019             		move.b	#$44,$19(a0)
000094D8                            
000094D8                            Obj53_ChkTouch:				; XREF: Obj53_Index
000094D8 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000094DC 6700                       		beq.s	Obj53_Solid	; if not, branch
000094DE 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000094E2 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
000094E6 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000094EA                            
000094EA                            Obj53_Solid:
000094EA 323C 0020                  		move.w	#$20,d1
000094EE 6100 F040                  		bsr.w	PlatformObject
000094F2 4A28 0028                  		tst.b	$28(a0)
000094F6 6A00                       		bpl.s	Obj53_MarkAsGone
000094F8 0829 0003 0022             		btst	#3,$22(a1)
000094FE 6700                       		beq.s	Obj53_MarkAsGone
00009500 08A8 0000 0001             		bclr	#0,1(a0)
00009506 3029 0008                  		move.w	8(a1),d0
0000950A 9068 0008                  		sub.w	8(a0),d0
0000950E 6400                       		bcc.s	Obj53_MarkAsGone
00009510 08E8 0000 0001             		bset	#0,1(a0)
00009516                            
00009516                            Obj53_MarkAsGone:
00009516 6000 0000                  		bra.w	MarkObjGone
0000951A                            ; ===========================================================================
0000951A                            
0000951A                            Obj53_Touch:				; XREF: Obj53_Index
0000951A 4A28 0038                  		tst.b	$38(a0)
0000951E 6700 0000                  		beq.w	loc_8458
00009522 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009528 5328 0038                  		subq.b	#1,$38(a0)
0000952C                            
0000952C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000952C                            
0000952C                            
0000952C                            Obj53_WalkOff:				; XREF: Obj53_Index
0000952C 323C 0020                  		move.w	#$20,d1
00009530 6100 F172                  		bsr.w	ExitPlatform
00009534 3428 0008                  		move.w	8(a0),d2
00009538 6100 F6E0                  		bsr.w	MvSonicOnPtfm2
0000953C 6000 0000                  		bra.w	MarkObjGone
00009540                            ; End of function Obj53_WalkOff
00009540                            
00009540                            ; ===========================================================================
00009540                            
00009540                            Obj53_Display:				; XREF: Obj53_Index
00009540 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009544 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00009546 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000954A 6600 0000                  		bne.w	loc_8402	; if yes, branch
0000954E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009552 6000 0000                  		bra.w	DisplaySprite
00009556                            ; ===========================================================================
00009556                            
00009556                            loc_8402:
00009556 5328 0038                  		subq.b	#1,$38(a0)
0000955A 6100 FFD0                  		bsr.w	Obj53_WalkOff
0000955E 43F8 D000                  		lea	($FFFFD000).w,a1
00009562 0829 0003 0022             		btst	#3,$22(a1)
00009568 6700                       		beq.s	loc_842E
0000956A 4A28 0038                  		tst.b	$38(a0)
0000956E 6600                       		bne.s	locret_843A
00009570 08A9 0003 0022             		bclr	#3,$22(a1)
00009576 08A9 0005 0022             		bclr	#5,$22(a1)
0000957C 137C 0001 001D             		move.b	#1,$1D(a1)
00009582                            
00009582                            loc_842E:
00009582 117C 0000 003A             		move.b	#0,$3A(a0)
00009588 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
0000958E                            
0000958E                            locret_843A:
0000958E 4E75                       		rts	
00009590                            ; ===========================================================================
00009590                            
00009590                            Obj53_TimeZero:				; XREF: Obj53_Display
00009590 6100 0000                  		bsr.w	ObjectFall
00009594 6100 0000                  		bsr.w	DisplaySprite
00009598 4A28 0001                  		tst.b	1(a0)
0000959C 6A00                       		bpl.s	Obj53_Delete
0000959E 4E75                       		rts	
000095A0                            ; ===========================================================================
000095A0                            
000095A0                            Obj53_Delete:				; XREF: Obj53_Index
000095A0 6100 0000                  		bsr.w	DeleteObject
000095A4 4E75                       		rts	
000095A6                            ; ===========================================================================
000095A6                            
000095A6                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
000095A6 117C 0000 003A             		move.b	#0,$3A(a0)
000095AC                            
000095AC                            loc_8458:				; XREF: Obj53_Touch
000095AC 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
000095B2 0828 0000 0028             		btst	#0,$28(a0)
000095B8 6700                       		beq.s	loc_846C
000095BA 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
000095C0                            
000095C0                            loc_846C:
000095C0 7207                       		moveq	#7,d1
000095C2 5228 001A                  		addq.b	#1,$1A(a0)
000095C6 6000                       		bra.s	loc_8486
000095C8                            ; ===========================================================================
000095C8                            
000095C8                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
000095C8 117C 0000 003A             		move.b	#0,$3A(a0)
000095CE                            
000095CE                            loc_847A:				; XREF: Obj1A_Touch
000095CE 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
000095D4 7218                       		moveq	#$18,d1
000095D6 5428 001A                  		addq.b	#2,$1A(a0)
000095DA                            
000095DA                            loc_8486:				; XREF: Obj53_Collapse
000095DA 7000                       		moveq	#0,d0
000095DC 1028 001A                  		move.b	$1A(a0),d0
000095E0 D040                       		add.w	d0,d0
000095E2 2668 0004                  		movea.l	4(a0),a3
000095E6 D6F3 0000                  		adda.w	(a3,d0.w),a3
000095EA 524B                       		addq.w	#1,a3
000095EC 08E8 0005 0001             		bset	#5,1(a0)
000095F2 1810                       		move.b	0(a0),d4
000095F4 1A28 0001                  		move.b	1(a0),d5
000095F8 2248                       		movea.l	a0,a1
000095FA 6000                       		bra.s	loc_84B2
000095FC                            ; ===========================================================================
000095FC                            
000095FC                            loc_84AA:
000095FC 6100 0000                  		bsr.w	SingleObjLoad
00009600 6600                       		bne.s	loc_84F2
00009602 5A4B                       		addq.w	#5,a3
00009604                            
00009604                            loc_84B2:
00009604 137C 0006 0024             		move.b	#6,$24(a1)
0000960A 1284                       		move.b	d4,0(a1)
0000960C 234B 0004                  		move.l	a3,4(a1)
00009610 1345 0001                  		move.b	d5,1(a1)
00009614 3368 0008 0008             		move.w	8(a0),8(a1)
0000961A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009620 3368 0002 0002             		move.w	2(a0),2(a1)
00009626 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000962C 1368 0019 0019             		move.b	$19(a0),$19(a1)
00009632 135C 0038                  		move.b	(a4)+,$38(a1)
00009636 B3C8                       		cmpa.l	a0,a1
00009638 6400                       		bcc.s	loc_84EE
0000963A 6100 0000                  		bsr.w	DisplaySprite2
0000963E                            
0000963E                            loc_84EE:
0000963E 51C9 FFBC                  		dbf	d1,loc_84AA
00009642                            
00009642                            loc_84F2:
00009642 6100 0000                  		bsr.w	DisplaySprite
00009646 303C 00B9                  		move.w	#$B9,d0
0000964A 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00009650                            ; ===========================================================================
00009650                            ; ---------------------------------------------------------------------------
00009650                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009650                            ; ---------------------------------------------------------------------------
00009650 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009660 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
0000966A 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00009672 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
0000967A                            
0000967A                            ; ---------------------------------------------------------------------------
0000967A                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
0000967A                            ; ---------------------------------------------------------------------------
0000967A                            
0000967A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000967A                            
0000967A                            
0000967A                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
0000967A 43F8 D000                  		lea	($FFFFD000).w,a1
0000967E 0829 0003 0022             		btst	#3,$22(a1)
00009684 6700                       		beq.s	locret_856E
00009686 3029 0008                  		move.w	8(a1),d0
0000968A 9068 0008                  		sub.w	8(a0),d0
0000968E D041                       		add.w	d1,d0
00009690 E248                       		lsr.w	#1,d0
00009692 0828 0000 0001             		btst	#0,1(a0)
00009698 6700                       		beq.s	loc_854E
0000969A 4640                       		not.w	d0
0000969C D041                       		add.w	d1,d0
0000969E                            
0000969E                            loc_854E:
0000969E 7200                       		moveq	#0,d1
000096A0 1232 0000                  		move.b	(a2,d0.w),d1
000096A4 3028 000C                  		move.w	$C(a0),d0
000096A8 9041                       		sub.w	d1,d0
000096AA 7200                       		moveq	#0,d1
000096AC 1229 0016                  		move.b	$16(a1),d1
000096B0 9041                       		sub.w	d1,d0
000096B2 3340 000C                  		move.w	d0,$C(a1)
000096B6 9468 0008                  		sub.w	8(a0),d2
000096BA 9569 0008                  		sub.w	d2,8(a1)
000096BE                            
000096BE                            locret_856E:
000096BE 4E75                       		rts	
000096C0                            ; End of function SlopeObject2
000096C0                            
000096C0                            ; ===========================================================================
000096C0                            ; ---------------------------------------------------------------------------
000096C0                            ; Collision data for GHZ collapsing ledge
000096C0                            ; ---------------------------------------------------------------------------
000096C0                            Obj1A_SlopeData:
000096C0                            		incbin	misc\ghzledge.bin
000096F0                            		even
000096F0                            
000096F0                            ; ---------------------------------------------------------------------------
000096F0                            ; Sprite mappings - GHZ	collapsing ledge
000096F0                            ; ---------------------------------------------------------------------------
000096F0                            Map_obj1A:
000096F0                            	include "_maps\obj1A.asm"
000096F0                            ; ---------------------------------------------------------------------------
000096F0                            ; Sprite mappings - GHZ	collapsing ledge
000096F0                            ; ---------------------------------------------------------------------------
000096F0 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
000096F4 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
000096F8 10                         byte_85A8:	dc.b $10
000096F9 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
000096FE D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009703 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009708 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000970D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009712 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009717 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000971C F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009721 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009726 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000972B 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009730 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009735 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000973A 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000973F 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009744 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009749 10                         byte_85F9:	dc.b $10
0000974A C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0000974F D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009754 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009759 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000975E D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009763 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009768 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000976D F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009772 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009777 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000977C 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009781 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009786 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000978B 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009790 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009795 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000979A 19                         byte_864A:	dc.b $19
0000979B C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
000097A0 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000097A5 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000097AA D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
000097AF E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
000097B4 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
000097B9 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
000097BE E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000097C3 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000097C8 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000097CD F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000097D2 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000097D7 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
000097DC F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
000097E1 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000097E6 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
000097EB 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000097F0 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
000097F5 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000097FA 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000097FF 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009804 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009809 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000980E 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009813 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009818 19                         byte_86C8:	dc.b $19
00009819 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000981E C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009823 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009828 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000982D E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009832 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009837 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000983C E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009841 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009846 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000984B F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009850 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009855 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000985A F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000985F F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009864 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009869 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000986E 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009873 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009878 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000987D 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009882 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009887 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000988C 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009891 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009896                            		even
00009896                            		even
00009896                            
00009896                            ; ---------------------------------------------------------------------------
00009896                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00009896                            ; ---------------------------------------------------------------------------
00009896                            Map_obj53:
00009896                            	include "_maps\obj53.asm"
00009896                            ; ---------------------------------------------------------------------------
00009896                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00009896                            ; ---------------------------------------------------------------------------
00009896 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
0000989A 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
0000989E 04                         byte_874E:	dc.b 4
0000989F F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
000098A4 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
000098A9 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
000098AE 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
000098B3 08                         byte_8763:	dc.b 8
000098B4 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
000098B9 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000098BE F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000098C3 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
000098C8 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
000098CD 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
000098D2 0805 0000 00               		dc.b 8,	5, 0, 0, 0
000098D7 0805 0000 10               		dc.b 8,	5, 0, 0, $10
000098DC 04                         byte_878C:	dc.b 4
000098DD F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
000098E2 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
000098E7 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
000098EC 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
000098F1 08                         byte_87A1:	dc.b 8
000098F2 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
000098F7 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
000098FC F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00009901 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00009906 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000990B 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00009910 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00009915 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000991A                            		even
0000991A                            		even
0000991A                            
0000991A                            ; ===========================================================================
0000991A                            ; ---------------------------------------------------------------------------
0000991A                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000991A                            ; ---------------------------------------------------------------------------
0000991A                            
0000991A                            Obj1C:					; XREF: Obj_Index
0000991A 7000                       		moveq	#0,d0
0000991C 1028 0024                  		move.b	$24(a0),d0
00009920 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00009924 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00009928                            ; ===========================================================================
00009928 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
0000992A 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
0000992C                            ; ===========================================================================
0000992C                            
0000992C                            Obj1C_Main:				; XREF: Obj1C_Index
0000992C 5428 0024                  		addq.b	#2,$24(a0)
00009930 7000                       		moveq	#0,d0
00009932 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00009936 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000993A 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
0000993E 2159 0004                  		move.l	(a1)+,4(a0)
00009942 3159 0002                  		move.w	(a1)+,2(a0)
00009946 0028 0004 0001             		ori.b	#4,1(a0)
0000994C 1159 001A                  		move.b	(a1)+,$1A(a0)
00009950 1159 0019                  		move.b	(a1)+,$19(a0)
00009954 1159 0018                  		move.b	(a1)+,$18(a0)
00009958 1159 0020                  		move.b	(a1)+,$20(a0)
0000995C                            
0000995C                            Obj1C_ChkDel:				; XREF: Obj1C_Index
0000995C 3028 0008                  		move.w	8(a0),d0
00009960 0240 FF80                  		andi.w	#$FF80,d0
00009964 3238 F700                  		move.w	($FFFFF700).w,d1
00009968 0441 0080                  		subi.w	#$80,d1
0000996C 0241 FF80                  		andi.w	#$FF80,d1
00009970 9041                       		sub.w	d1,d0
00009972 0C40 0280                  		cmpi.w	#$280,d0
00009976 6300 0000                  		bls.w	DisplaySprite
0000997A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000997E 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
00009982 3440                       		movea.w	d0,a2	; load address into a2
00009984 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00009988 6000 0000                  		bra.w	DeleteObject	; and delete object
0000998C                            ; ===========================================================================
0000998C                            ; ---------------------------------------------------------------------------
0000998C                            ; Variables for	object $1C are stored in an array
0000998C                            ; ---------------------------------------------------------------------------
0000998C 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00009990 44D8                       		dc.w $44D8		; VRAM setting
00009992 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00009996 0000 0000                  		dc.l Map_obj1C
0000999A 44D8                       		dc.w $44D8
0000999C 0008 0200                  		dc.b 0,	8, 2, 0
000099A0 0000 0000                  		dc.l Map_obj1C
000099A4 44D8                       		dc.w $44D8
000099A6 0008 0200                  		dc.b 0,	8, 2, 0
000099AA 0000 8A24                  		dc.l Map_obj11
000099AE 438E                       		dc.w $438E
000099B0 0110 0100                  		dc.b 1,	$10, 1,	0
000099B4 0000 0000                  		dc.l Map_obj1C
000099B8 4000                       		dc.w $4000
000099BA 0110 0000                  		dc.b 1,	$10, 0, 0
000099BE 0000 0000                  		dc.l Map_obj1C
000099C2 4000                       		dc.w $4000
000099C4 0210 0000                  		dc.b 2,	$10, 0, 0
000099C8 0000 0000                  		dc.l Map_obj1C
000099CC 4000                       		dc.w $4000
000099CE 0310 0000                  		dc.b 3,	$10, 0, 0
000099D2 0000 0000                  		dc.l Map_obj1C
000099D6 4000                       		dc.w $4000
000099D8 0460 0700                  		dc.b 4,	$60, 7, 0
000099DC                            ; ---------------------------------------------------------------------------
000099DC                            ; Sprite mappings - SLZ	lava thrower
000099DC                            ; ---------------------------------------------------------------------------
000099DC                            Map_obj1C:
000099DC                            	include "_maps\obj1C.asm"
000099DC                            Mappings:
000099DC 0000                       Mappings_0: 	dc.w Mappings_A-Mappings
000099DE 0000                       Mappings_2: 	dc.w Mappings_10-Mappings
000099E0 0000                       Mappings_4: 	dc.w Mappings_16-Mappings
000099E2 0000                       Mappings_6: 	dc.w Mappings_1C-Mappings
000099E4 0000                       Mappings_8: 	dc.w Mappings_22-Mappings
000099E6 01                         Mappings_A: 	dc.b $1
000099E7 F007 0000 F8               	dc.b $F0, $7, $0, $0, $F8
000099EC 01                         Mappings_10: 	dc.b $1
000099ED F00F 0001 F0               	dc.b $F0, $F, $0, $1, $F0
000099F2 01                         Mappings_16: 	dc.b $1
000099F3 F00F 0011 F0               	dc.b $F0, $F, $0, $11, $F0
000099F8 01                         Mappings_1C: 	dc.b $1
000099F9 F00F 0042 F0               	dc.b $F0, $F, $0, $42, $F0
000099FE 18                         Mappings_22: 	dc.b $18
000099FF E00F 01C6 A0               	dc.b $E0, $F, $1, $C6, $A0
00009A04 E00F 01D6 C0               	dc.b $E0, $F, $1, $D6, $C0
00009A09 E00F 01E6 00               	dc.b $E0, $F, $1, $E6, $0
00009A0E E00F 01F6 40               	dc.b $E0, $F, $1, $F6, $40
00009A13 E00F 09D6 E0               	dc.b $E0, $F, $9, $D6, $E0
00009A18 E00F 09C6 20               	dc.b $E0, $F, $9, $C6, $20
00009A1D 000F 01C6 A0               	dc.b $0, $F, $1, $C6, $A0
00009A22 000F 01D6 C0               	dc.b $0, $F, $1, $D6, $C0
00009A27 000F 09D6 E0               	dc.b $0, $F, $9, $D6, $E0
00009A2C 000F 01E6 00               	dc.b $0, $F, $1, $E6, $0
00009A31 000F 09C6 20               	dc.b $0, $F, $9, $C6, $20
00009A36 000F 01F6 40               	dc.b $0, $F, $1, $F6, $40
00009A3B 200F 01C6 A0               	dc.b $20, $F, $1, $C6, $A0
00009A40 200F 01D6 C0               	dc.b $20, $F, $1, $D6, $C0
00009A45 200F 09D6 E0               	dc.b $20, $F, $9, $D6, $E0
00009A4A 200F 01E6 00               	dc.b $20, $F, $1, $E6, $0
00009A4F 200F 09C6 20               	dc.b $20, $F, $9, $C6, $20
00009A54 200F 01F6 40               	dc.b $20, $F, $1, $F6, $40
00009A59 C00F 01D6 C0               	dc.b $C0, $F, $1, $D6, $C0
00009A5E C00F 09D6 E0               	dc.b $C0, $F, $9, $D6, $E0
00009A63 C00F 09CA 00               	dc.b $C0, $F, $9, $CA, $0
00009A68 C00F 01E6 20               	dc.b $C0, $F, $1, $E6, $20
00009A6D D00D 01C6 A1               	dc.b $D0, $D, $1, $C6, $A1
00009A72 D00D 01F6 40               	dc.b $D0, $D, $1, $F6, $40
00009A78 00                         	even
00009A78 00                         	even
00009A78                            
00009A78                            ; ===========================================================================
00009A78                            ; ---------------------------------------------------------------------------
00009A78                            ; Object 03 - LZ Air Pockets
00009A78                            ; ---------------------------------------------------------------------------
00009A78                            
00009A78                            Obj03:					; XREF: Obj_Index
00009A78 7000                       		moveq	#0,d0
00009A7A 1028 0024                  		move.b	$24(a0),d0
00009A7E 323B 0000                  		move.w	Obj03_Index(pc,d0.w),d1
00009A82 4EFB 1000                  		jmp	Obj03_Index(pc,d1.w)
00009A86                            ; ===========================================================================
00009A86 0000                       Obj03_Index:	dc.w Obj03_Main-Obj03_Index
00009A88 0000                       		dc.w Obj03_ChkDel-Obj03_Index
00009A8A                            ; ===========================================================================
00009A8A                            
00009A8A                            Obj03_Main:				; XREF: Obj03_Index
00009A8A 5428 0024                  		addq.b	#2,$24(a0)
00009A8E 217C 0000 0000 0004        		move.l	#Map_Obj03,4(a0)
00009A96 317C 4000 0002             		move.w	#$4000,2(a0)
00009A9C 0028 0004 0001             		ori.b	#4,1(a0)
00009AA2 117C 0060 0019             		move.b	#$60,$19(a0)
00009AA8 117C 0007 0018             		move.b	#7,$18(a0)
00009AAE 117C 0000 001A             		move.b	#0,$1A(a0)
00009AB4 3028 0008                  		move.w	8(a0),d0
00009AB8 31C0 F610                  		move.w	d0,(v_pocketx).w
00009ABC 3028 000C                  		move.w	$C(a0),d0
00009AC0 0640 0040                  		addi.w	#$40,d0
00009AC4 31C0 F60E                  		move.w	d0,(v_pocketbottom).w
00009AC8                            
00009AC8                            Obj03_ChkDel:				; XREF: Obj03_Index
00009AC8 43F8 D000                  		lea	($FFFFD000).w,a1
00009ACC 3029 0008                  		move.w	8(a1),d0
00009AD0 9068 0008                  		sub.w	8(a0),d0
00009AD4 0640 0060                  		addi.w	#$60,d0
00009AD8 6B00                       		bmi.s	@outpocket
00009ADA 0C40 00C0                  		cmpi.w	#$C0,d0
00009ADE 6400                       		bcc.s	@outpocket
00009AE0 3028 000C                  		move.w	$C(a0),d0
00009AE4 9069 000C                  		sub.w	$C(a1),d0
00009AE8 0640 0040                  		addi.w	#$40,d0
00009AEC 6B00                       		bmi.s	@outpocket
00009AEE 0C40 0080                  		cmpi.w	#$80,d0
00009AF2 6400                       		bcc.s	@outpocket
00009AF4                            
00009AF4 50F8 F612                  		st		(f_insidepocket).w
00009AF8 6000                       		bra.s	@chkgone
00009AFA                            
00009AFA                            	@outpocket:
00009AFA 51F8 F612                  		sf		(f_insidepocket).w
00009AFE                            
00009AFE                            	@chkgone:
00009AFE 3028 0008                  		move.w	8(a0),d0
00009B02 0240 FF80                  		andi.w	#$FF80,d0
00009B06 3238 F700                  		move.w	($FFFFF700).w,d1
00009B0A 0441 0080                  		subi.w	#$80,d1
00009B0E 0241 FF80                  		andi.w	#$FF80,d1
00009B12 9041                       		sub.w	d1,d0
00009B14 0C40 0280                  		cmpi.w	#$280,d0
00009B18 6300 0000                  		bls.w	DisplaySprite
00009B1C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00009B20 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
00009B24 3440                       		movea.w	d0,a2	; load address into a2
00009B26 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00009B2A 6000 0000                  		bra.w	DeleteObject	; and delete object
00009B2E                            ; ---------------------------------------------------------------------------
00009B2E                            ; Sprite mappings - LZ Air Pockets
00009B2E                            ; ---------------------------------------------------------------------------
00009B2E                            Map_Obj03:
00009B2E                            	include "_maps\obj03.asm"
00009B2E                            obj03map:
00009B2E 0000                       obj03map_0: 	dc.w obj03map_2-obj03map
00009B30 18                         obj03map_2: 	dc.b $18
00009B31 E00F 01C6 A0               	dc.b $E0, $F, $1, $C6, $A0
00009B36 E00F 01D6 C0               	dc.b $E0, $F, $1, $D6, $C0
00009B3B E00F 01E6 00               	dc.b $E0, $F, $1, $E6, $0
00009B40 E00F 01F6 40               	dc.b $E0, $F, $1, $F6, $40
00009B45 E00F 09D6 E0               	dc.b $E0, $F, $9, $D6, $E0
00009B4A E00F 09C6 20               	dc.b $E0, $F, $9, $C6, $20
00009B4F 000F 01C6 A0               	dc.b $0, $F, $1, $C6, $A0
00009B54 000F 01D6 C0               	dc.b $0, $F, $1, $D6, $C0
00009B59 000F 09D6 E0               	dc.b $0, $F, $9, $D6, $E0
00009B5E 000F 01E6 00               	dc.b $0, $F, $1, $E6, $0
00009B63 000F 09C6 20               	dc.b $0, $F, $9, $C6, $20
00009B68 000F 01F6 40               	dc.b $0, $F, $1, $F6, $40
00009B6D 200F 01C6 A0               	dc.b $20, $F, $1, $C6, $A0
00009B72 200F 01D6 C0               	dc.b $20, $F, $1, $D6, $C0
00009B77 200F 09D6 E0               	dc.b $20, $F, $9, $D6, $E0
00009B7C 200F 01E6 00               	dc.b $20, $F, $1, $E6, $0
00009B81 200F 09C6 20               	dc.b $20, $F, $9, $C6, $20
00009B86 200F 01F6 40               	dc.b $20, $F, $1, $F6, $40
00009B8B C00F 01D6 C0               	dc.b $C0, $F, $1, $D6, $C0
00009B90 C00F 09D6 E0               	dc.b $C0, $F, $9, $D6, $E0
00009B95 C00F 09CA 00               	dc.b $C0, $F, $9, $CA, $0
00009B9A C00F 01E6 20               	dc.b $C0, $F, $1, $E6, $20
00009B9F D00D 01C6 A1               	dc.b $D0, $D, $1, $C6, $A1
00009BA4 D00D 01F6 40               	dc.b $D0, $D, $1, $F6, $40
00009BAA 00                         	even
00009BAA 00                         	even
00009BAA                            
00009BAA                            ; ===========================================================================
00009BAA                            ; ---------------------------------------------------------------------------
00009BAA                            ; Object 1D - switch that activates when Sonic touches it
00009BAA                            ; (this	is not used anywhere in	the game)
00009BAA                            ; ---------------------------------------------------------------------------
00009BAA                            
00009BAA                            Obj1D:					; XREF: Obj_Index
00009BAA 7000                       		moveq	#0,d0
00009BAC 1028 0024                  		move.b	$24(a0),d0
00009BB0 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00009BB4 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00009BB8                            ; ===========================================================================
00009BB8 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00009BBA 0000                       		dc.w Obj1D_Action-Obj1D_Index
00009BBC 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00009BBE                            ; ===========================================================================
00009BBE                            
00009BBE                            Obj1D_Main:				; XREF: Obj1D_Index
00009BBE 5428 0024                  		addq.b	#2,$24(a0)
00009BC2 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00009BCA 317C 4000 0002             		move.w	#$4000,2(a0)
00009BD0 117C 0004 0001             		move.b	#4,1(a0)
00009BD6 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00009BDC 117C 0010 0019             		move.b	#$10,$19(a0)
00009BE2 117C 0005 0018             		move.b	#5,$18(a0)
00009BE8                            
00009BE8                            Obj1D_Action:				; XREF: Obj1D_Index
00009BE8 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00009BEE 323C 0010                  		move.w	#$10,d1
00009BF2 6100 0000                  		bsr.w	Obj1D_ChkTouch
00009BF6 6700                       		beq.s	Obj1D_ChkDel
00009BF8 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00009BFC 7001                       		moveq	#1,d0
00009BFE 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00009C02                            
00009C02                            Obj1D_ChkDel:
00009C02 6100 0000                  		bsr.w	DisplaySprite
00009C06 3028 0008                  		move.w	8(a0),d0
00009C0A 0240 FF80                  		andi.w	#$FF80,d0
00009C0E 3238 F700                  		move.w	($FFFFF700).w,d1
00009C12 0441 0080                  		subi.w	#$80,d1
00009C16 0241 FF80                  		andi.w	#$FF80,d1
00009C1A 9041                       		sub.w	d1,d0
00009C1C 0C40 0280                  		cmpi.w	#$280,d0
00009C20 6300                       		bls.s	Obj1D_NoDel
00009C22 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00009C26 6700                       		beq.s	Obj1D_Delete		; if it's zero, don't remember object
00009C28 3440                       		movea.w	d0,a2	; load address into a2
00009C2A 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00009C2E 6000                       		bra.s	Obj1D_Delete	; and delete object
00009C30                            
00009C30                            Obj1D_NoDel:
00009C30 4E75                       		rts	
00009C32                            ; ===========================================================================
00009C32                            
00009C32                            Obj1D_Delete:				; XREF: Obj1D_Index
00009C32 6100 0000                  		bsr.w	DeleteObject
00009C36 4E75                       		rts	
00009C38                            ; ---------------------------------------------------------------------------
00009C38                            ; Subroutine to	check if Sonic touches the object
00009C38                            ; ---------------------------------------------------------------------------
00009C38                            
00009C38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C38                            
00009C38                            
00009C38                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00009C38 43F8 D000                  		lea	($FFFFD000).w,a1
00009C3C 3029 0008                  		move.w	8(a1),d0
00009C40 9068 0008                  		sub.w	8(a0),d0
00009C44 D041                       		add.w	d1,d0
00009C46 6B00                       		bmi.s	loc_8918
00009C48 D241                       		add.w	d1,d1
00009C4A B041                       		cmp.w	d1,d0
00009C4C 6400                       		bcc.s	loc_8918
00009C4E 3429 000C                  		move.w	$C(a1),d2
00009C52 1229 0016                  		move.b	$16(a1),d1
00009C56 4881                       		ext.w	d1
00009C58 D242                       		add.w	d2,d1
00009C5A 3028 000C                  		move.w	$C(a0),d0
00009C5E 0440 0010                  		subi.w	#$10,d0
00009C62 9041                       		sub.w	d1,d0
00009C64 6200                       		bhi.s	loc_8918
00009C66 0C40 FFF0                  		cmpi.w	#-$10,d0
00009C6A 6500                       		bcs.s	loc_8918
00009C6C 70FF                       		moveq	#-1,d0
00009C6E 4E75                       		rts	
00009C70                            ; ===========================================================================
00009C70                            
00009C70                            loc_8918:
00009C70 7000                       		moveq	#0,d0
00009C72 4E75                       		rts	
00009C74                            ; End of function Obj1D_ChkTouch
00009C74                            
00009C74                            ; ===========================================================================
00009C74                            ; ---------------------------------------------------------------------------
00009C74                            ; Sprite mappings - object 1D
00009C74                            ; ---------------------------------------------------------------------------
00009C74                            Map_obj1D:
00009C74                            	include "_maps\obj1D.asm"
00009C74                            ; ---------------------------------------------------------------------------
00009C74                            ; Sprite mappings - object 1D
00009C74                            ; ---------------------------------------------------------------------------
00009C74 0000                       		dc.w byte_891E-Map_obj1D
00009C76 04                         byte_891E:	dc.b 4
00009C77 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00009C7C 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00009C81 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00009C86 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00009C8C 00                         		even
00009C8C 00                         		even
00009C8C                            
00009C8C                            ; ===========================================================================
00009C8C                            ; ---------------------------------------------------------------------------
00009C8C                            ; Object 2A - doors (SBZ)
00009C8C                            ; ---------------------------------------------------------------------------
00009C8C                            
00009C8C                            Obj2A:					; XREF: Obj_Index
00009C8C 7000                       		moveq	#0,d0
00009C8E 1028 0024                  		move.b	$24(a0),d0
00009C92 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00009C96 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00009C9A                            ; ===========================================================================
00009C9A 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00009C9C 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00009C9E                            ; ===========================================================================
00009C9E                            
00009C9E                            Obj2A_Main:				; XREF: Obj2A_Index
00009C9E 5428 0024                  		addq.b	#2,$24(a0)
00009CA2 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00009CAA 317C 42E8 0002             		move.w	#$42E8,2(a0)
00009CB0 0028 0004 0001             		ori.b	#4,1(a0)
00009CB6 117C 0008 0019             		move.b	#8,$19(a0)
00009CBC 117C 0004 0018             		move.b	#4,$18(a0)
00009CC2                            
00009CC2                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00009CC2 323C 0040                  		move.w	#$40,d1
00009CC6 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00009CCA 3038 D008                  		move.w	($FFFFD008).w,d0
00009CCE D041                       		add.w	d1,d0
00009CD0 B068 0008                  		cmp.w	8(a0),d0
00009CD4 6500                       		bcs.s	Obj2A_Animate
00009CD6 9041                       		sub.w	d1,d0
00009CD8 9041                       		sub.w	d1,d0
00009CDA B068 0008                  		cmp.w	8(a0),d0
00009CDE 6400                       		bcc.s	Obj2A_Animate
00009CE0 D041                       		add.w	d1,d0
00009CE2 B068 0008                  		cmp.w	8(a0),d0
00009CE6 6400                       		bcc.s	loc_899A
00009CE8 0828 0000 0022             		btst	#0,$22(a0)
00009CEE 6600                       		bne.s	Obj2A_Animate
00009CF0 6000                       		bra.s	Obj2A_Open
00009CF2                            ; ===========================================================================
00009CF2                            
00009CF2                            loc_899A:				; XREF: Obj2A_OpenShut
00009CF2 0828 0000 0022             		btst	#0,$22(a0)
00009CF8 6700                       		beq.s	Obj2A_Animate
00009CFA                            
00009CFA                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009CFA 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00009D00                            
00009D00                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00009D00 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00009D06 6100 0000                  		bsr.w	AnimateSprite
00009D0A 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00009D0E 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00009D10 323C 0011                  		move.w	#$11,d1
00009D14 343C 0020                  		move.w	#$20,d2
00009D18 3602                       		move.w	d2,d3
00009D1A 5243                       		addq.w	#1,d3
00009D1C 3828 0008                  		move.w	8(a0),d4
00009D20 6100 0000                  		bsr.w	SolidObject
00009D24                            
00009D24                            Obj2A_MarkAsUsed:
00009D24 6000 0000                  		bra.w	MarkObjGone
00009D28                            ; ===========================================================================
00009D28                            Ani_obj2A:
00009D28                            	include "_anim\obj2A.asm"
00009D28                            ; ---------------------------------------------------------------------------
00009D28                            ; Animation script - doors (SBZ)
00009D28                            ; ---------------------------------------------------------------------------
00009D28 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009D2A 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009D2C 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009D38 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009D44                            		even
00009D44                            		even
00009D44                            
00009D44                            ; ---------------------------------------------------------------------------
00009D44                            ; Sprite mappings - doors (SBZ)
00009D44                            ; ---------------------------------------------------------------------------
00009D44                            Map_obj2A:
00009D44                            	include "_maps\obj2A.asm"
00009D44                            ; ---------------------------------------------------------------------------
00009D44                            ; Sprite mappings - doors (SBZ)
00009D44                            ; ---------------------------------------------------------------------------
00009D44 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009D48 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00009D4C 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00009D50 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00009D54 0000                       		dc.w byte_8A56-Map_obj2A
00009D56 02                         byte_89FE:	dc.b 2
00009D57 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00009D5C 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00009D61 02                         byte_8A09:	dc.b 2
00009D62 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00009D67 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00009D6C 02                         byte_8A14:	dc.b 2
00009D6D D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00009D72 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00009D77 02                         byte_8A1F:	dc.b 2
00009D78 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00009D7D 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00009D82 02                         byte_8A2A:	dc.b 2
00009D83 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00009D88 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00009D8D 02                         byte_8A35:	dc.b 2
00009D8E CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00009D93 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00009D98 02                         byte_8A40:	dc.b 2
00009D99 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00009D9E 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00009DA3 02                         byte_8A4B:	dc.b 2
00009DA4 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00009DA9 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00009DAE 02                         byte_8A56:	dc.b 2
00009DAF C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00009DB4 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00009DBA 00                         		even
00009DBA 00                         		even
00009DBA                            
00009DBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009DBA                            
00009DBA                            
00009DBA                            Obj44_SolidWall:			; XREF: Obj44_Solid
00009DBA 6100 0000                  		bsr.w	Obj44_SolidWall2
00009DBE 6700                       		beq.s	loc_8AA8
00009DC0 6B00 0000                  		bmi.w	loc_8AC4
00009DC4 4A40                       		tst.w	d0
00009DC6 6700 0000                  		beq.w	loc_8A92
00009DCA 6B00                       		bmi.s	loc_8A7C
00009DCC 4A69 0010                  		tst.w	$10(a1)
00009DD0 6B00                       		bmi.s	loc_8A92
00009DD2 6000                       		bra.s	loc_8A82
00009DD4                            ; ===========================================================================
00009DD4                            
00009DD4                            loc_8A7C:
00009DD4 4A69 0010                  		tst.w	$10(a1)
00009DD8 6A00                       		bpl.s	loc_8A92
00009DDA                            
00009DDA                            loc_8A82:
00009DDA 9169 0008                  		sub.w	d0,8(a1)
00009DDE 337C 0000 0020             		move.w	#0,$20(a1)
00009DE4 337C 0000 0010             		move.w	#0,$10(a1)
00009DEA                            
00009DEA                            loc_8A92:
00009DEA 0829 0001 0022             		btst	#1,$22(a1)
00009DF0 6600                       		bne.s	loc_8AB6
00009DF2 08E9 0005 0022             		bset	#5,$22(a1)
00009DF8 08E8 0005 0022             		bset	#5,$22(a0)
00009DFE 4E75                       		rts	
00009E00                            ; ===========================================================================
00009E00                            
00009E00                            loc_8AA8:
00009E00 0828 0005 0022             		btst	#5,$22(a0)
00009E06 6700                       		beq.s	locret_8AC2
00009E08 337C 0001 001C             		move.w	#1,$1C(a1)
00009E0E                            
00009E0E                            loc_8AB6:
00009E0E 08A8 0005 0022             		bclr	#5,$22(a0)
00009E14 08A9 0005 0022             		bclr	#5,$22(a1)
00009E1A                            
00009E1A                            locret_8AC2:
00009E1A 4E75                       		rts	
00009E1C                            ; ===========================================================================
00009E1C                            
00009E1C                            loc_8AC4:
00009E1C 4A69 0012                  		tst.w	$12(a1)
00009E20 6A00                       		bpl.s	locret_8AD8
00009E22 4A43                       		tst.w	d3
00009E24 6A00                       		bpl.s	locret_8AD8
00009E26 9769 000C                  		sub.w	d3,$C(a1)
00009E2A 337C 0000 0012             		move.w	#0,$12(a1)
00009E30                            
00009E30                            locret_8AD8:
00009E30 4E75                       		rts	
00009E32                            ; End of function Obj44_SolidWall
00009E32                            
00009E32                            
00009E32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E32                            
00009E32                            
00009E32                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009E32 43F8 D000                  		lea	($FFFFD000).w,a1
00009E36 3029 0008                  		move.w	8(a1),d0
00009E3A 9068 0008                  		sub.w	8(a0),d0
00009E3E D041                       		add.w	d1,d0
00009E40 6B00                       		bmi.s	loc_8B48
00009E42 3601                       		move.w	d1,d3
00009E44 D643                       		add.w	d3,d3
00009E46 B043                       		cmp.w	d3,d0
00009E48 6200                       		bhi.s	loc_8B48
00009E4A 1629 0016                  		move.b	$16(a1),d3
00009E4E 4883                       		ext.w	d3
00009E50 D443                       		add.w	d3,d2
00009E52 3629 000C                  		move.w	$C(a1),d3
00009E56 9668 000C                  		sub.w	$C(a0),d3
00009E5A D642                       		add.w	d2,d3
00009E5C 6B00                       		bmi.s	loc_8B48
00009E5E 3802                       		move.w	d2,d4
00009E60 D844                       		add.w	d4,d4
00009E62 B644                       		cmp.w	d4,d3
00009E64 6400                       		bcc.s	loc_8B48
00009E66 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009E6A 6B00                       		bmi.s	loc_8B48
00009E6C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009E72 6400                       		bcc.s	loc_8B48
00009E74 4A78 FE08                  		tst.w	($FFFFFE08).w
00009E78 6600                       		bne.s	loc_8B48
00009E7A 3A00                       		move.w	d0,d5
00009E7C B240                       		cmp.w	d0,d1
00009E7E 6400                       		bcc.s	loc_8B30
00009E80 D241                       		add.w	d1,d1
00009E82 9041                       		sub.w	d1,d0
00009E84 3A00                       		move.w	d0,d5
00009E86 4445                       		neg.w	d5
00009E88                            
00009E88                            loc_8B30:
00009E88 3203                       		move.w	d3,d1
00009E8A B443                       		cmp.w	d3,d2
00009E8C 6400                       		bcc.s	loc_8B3C
00009E8E 9644                       		sub.w	d4,d3
00009E90 3203                       		move.w	d3,d1
00009E92 4441                       		neg.w	d1
00009E94                            
00009E94                            loc_8B3C:
00009E94 BA41                       		cmp.w	d1,d5
00009E96 6200                       		bhi.s	loc_8B44
00009E98 7801                       		moveq	#1,d4
00009E9A 4E75                       		rts	
00009E9C                            ; ===========================================================================
00009E9C                            
00009E9C                            loc_8B44:
00009E9C 78FF                       		moveq	#-1,d4
00009E9E 4E75                       		rts	
00009EA0                            ; ===========================================================================
00009EA0                            
00009EA0                            loc_8B48:
00009EA0 7800                       		moveq	#0,d4
00009EA2 4E75                       		rts	
00009EA4                            ; End of function Obj44_SolidWall2
00009EA4                            
00009EA4                            ; ===========================================================================
00009EA4                            ; ---------------------------------------------------------------------------
00009EA4                            ; Object 1E - Ball Hog enemy (SBZ)
00009EA4                            ; ---------------------------------------------------------------------------
00009EA4                            
00009EA4                            Obj1E:					; XREF: Obj_Index
00009EA4 7000                       		moveq	#0,d0
00009EA6 1028 0024                  		move.b	$24(a0),d0
00009EAA 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00009EAE 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00009EB2                            ; ===========================================================================
00009EB2 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009EB4 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009EB6                            ; ===========================================================================
00009EB6                            
00009EB6                            Obj1E_Main:				; XREF: Obj1E_Index
00009EB6 117C 0013 0016             		move.b	#$13,$16(a0)
00009EBC 117C 0008 0017             		move.b	#8,$17(a0)
00009EC2 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009ECA 317C 2302 0002             		move.w	#$2302,2(a0)
00009ED0 117C 0004 0001             		move.b	#4,1(a0)
00009ED6 117C 0004 0018             		move.b	#4,$18(a0)
00009EDC 117C 0005 0020             		move.b	#5,$20(a0)
00009EE2 117C 000C 0019             		move.b	#$C,$19(a0)
00009EE8 6100 0000                  		bsr.w	ObjectFall
00009EEC 4EB9 0000 0000             		jsr	ObjHitFloor
00009EF2 4A41                       		tst.w	d1
00009EF4 6A00                       		bpl.s	locret_8BAC
00009EF6 D368 000C                  		add.w	d1,$C(a0)
00009EFA 317C 0000 0012             		move.w	#0,$12(a0)
00009F00 5428 0024                  		addq.b	#2,$24(a0)
00009F04                            
00009F04                            locret_8BAC:
00009F04 4E75                       		rts	
00009F06                            ; ===========================================================================
00009F06                            
00009F06                            Obj1E_Action:				; XREF: Obj1E_Index
00009F06 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009F0C 6100 0000                  		bsr.w	AnimateSprite
00009F10 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009F16 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009F18 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009F1C 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009F1E 6000                       		bra.s	Obj1E_MarkAsGone
00009F20                            ; ===========================================================================
00009F20                            
00009F20                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009F20 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009F24                            
00009F24                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009F24 6000 0000                  		bra.w	MarkObjGone
00009F28                            ; ===========================================================================
00009F28                            
00009F28                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009F28 117C 0001 0032             		move.b	#1,$32(a0)
00009F2E 6100 0000                  		bsr.w	SingleObjLoad
00009F32 6600                       		bne.s	loc_8C1A
00009F34 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009F38 3368 0008 0008             		move.w	8(a0),8(a1)
00009F3E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009F44 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009F4A 337C 0000 0012             		move.w	#0,$12(a1)
00009F50 70FC                       		moveq	#-4,d0
00009F52 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009F58 6700                       		beq.s	loc_8C0A	; if not, branch
00009F5A 4440                       		neg.w	d0
00009F5C 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00009F60                            
00009F60                            loc_8C0A:
00009F60 D169 0008                  		add.w	d0,8(a1)
00009F64 0669 000C 000C             		addi.w	#$C,$C(a1)
00009F6A 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00009F70                            
00009F70                            loc_8C1A:
00009F70 60B2                       		bra.s	Obj1E_MarkAsGone
00009F72                            ; ===========================================================================
00009F72                            ; ---------------------------------------------------------------------------
00009F72                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009F72                            ; ---------------------------------------------------------------------------
00009F72                            
00009F72                            Obj20:					; XREF: Obj_Index
00009F72 7000                       		moveq	#0,d0
00009F74 1028 0024                  		move.b	$24(a0),d0
00009F78 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00009F7C 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00009F80                            ; ===========================================================================
00009F80 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009F82 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009F84                            ; ===========================================================================
00009F84                            
00009F84                            Obj20_Main:				; XREF: Obj20_Index
00009F84 5428 0024                  		addq.b	#2,$24(a0)
00009F88 117C 0007 0016             		move.b	#7,$16(a0)
00009F8E 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009F96 317C 2302 0002             		move.w	#$2302,2(a0)
00009F9C 117C 0004 0001             		move.b	#4,1(a0)
00009FA2 117C 0003 0018             		move.b	#3,$18(a0)
00009FA8 117C 0087 0020             		move.b	#$87,$20(a0)
00009FAE 117C 0008 0019             		move.b	#8,$19(a0)
00009FB4 7000                       		moveq	#0,d0
00009FB6 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009FBA C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009FBE 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00009FC2 117C 0004 001A             		move.b	#4,$1A(a0)
00009FC8                            
00009FC8                            Obj20_Bounce:				; XREF: Obj20_Index
00009FC8 4EB9 0000 0000             		jsr	ObjectFall
00009FCE 4A68 0012                  		tst.w	$12(a0)
00009FD2 6B00                       		bmi.s	Obj20_ChkExplode
00009FD4 4EB9 0000 0000             		jsr	ObjHitFloor
00009FDA 4A41                       		tst.w	d1
00009FDC 6A00                       		bpl.s	Obj20_ChkExplode
00009FDE D368 000C                  		add.w	d1,$C(a0)
00009FE2 317C FD00 0012             		move.w	#-$300,$12(a0)
00009FE8 4A03                       		tst.b	d3
00009FEA 6700                       		beq.s	Obj20_ChkExplode
00009FEC 6B00                       		bmi.s	loc_8CA4
00009FEE 4A68 0010                  		tst.w	$10(a0)
00009FF2 6A00                       		bpl.s	Obj20_ChkExplode
00009FF4 4468 0010                  		neg.w	$10(a0)
00009FF8 6000                       		bra.s	Obj20_ChkExplode
00009FFA                            ; ===========================================================================
00009FFA                            
00009FFA                            loc_8CA4:				; XREF: Obj20_Bounce
00009FFA 4A68 0010                  		tst.w	$10(a0)
00009FFE 6B00                       		bmi.s	Obj20_ChkExplode
0000A000 4468 0010                  		neg.w	$10(a0)
0000A004                            
0000A004                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
0000A004 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
0000A008 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
0000A00A 10BC 0024                  		move.b	#$24,0(a0)
0000A00E 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
0000A012 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0000A018 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000A01C                            ; ===========================================================================
0000A01C                            
0000A01C                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000A01C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A020 6A00                       		bpl.s	Obj20_Display
0000A022 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
0000A028 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000A02E                            
0000A02E                            Obj20_Display:
0000A02E 6100 0000                  		bsr.w	DisplaySprite
0000A032 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A036 0640 00E0                  		addi.w	#$E0,d0
0000A03A B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000A03E 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A042 4E75                       		rts	
0000A044                            ; ===========================================================================
0000A044                            ; ---------------------------------------------------------------------------
0000A044                            ; Object 24 - explosion	from a destroyed monitor
0000A044                            ; ---------------------------------------------------------------------------
0000A044                            
0000A044                            Obj24:					; XREF: Obj_Index
0000A044 7000                       		moveq	#0,d0
0000A046 1028 0024                  		move.b	$24(a0),d0
0000A04A 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000A04E 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000A052                            ; ===========================================================================
0000A052 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000A054 0000                       		dc.w Obj24_Animate-Obj24_Index
0000A056                            ; ===========================================================================
0000A056                            
0000A056                            Obj24_Main:				; XREF: Obj24_Index
0000A056 5428 0024                  		addq.b	#2,$24(a0)
0000A05A 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
0000A062 317C 041C 0002             		move.w	#$41C,2(a0)
0000A068 117C 0004 0001             		move.b	#4,1(a0)
0000A06E 117C 0001 0018             		move.b	#1,$18(a0)
0000A074 117C 0000 0020             		move.b	#0,$20(a0)
0000A07A 117C 000C 0019             		move.b	#$C,$19(a0)
0000A080 117C 0009 001E             		move.b	#9,$1E(a0)
0000A086 117C 0000 001A             		move.b	#0,$1A(a0)
0000A08C 303C 00A5                  		move.w	#$A5,d0
0000A090 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play explosion sound
0000A096                            
0000A096                            Obj24_Animate:				; XREF: Obj24_Index
0000A096 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A09A 6A00                       		bpl.s	Obj24_Display
0000A09C 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
0000A0A2 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000A0A6 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000A0AC 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A0B0                            
0000A0B0                            Obj24_Display:
0000A0B0 6000 0000                  		bra.w	DisplaySprite
0000A0B4                            ; ===========================================================================
0000A0B4                            ; ---------------------------------------------------------------------------
0000A0B4                            ; Object 27 - explosion	from a destroyed enemy
0000A0B4                            ; ---------------------------------------------------------------------------
0000A0B4                            
0000A0B4                            Obj27:					; XREF: Obj_Index
0000A0B4 7000                       		moveq	#0,d0
0000A0B6 1028 0024                  		move.b	$24(a0),d0
0000A0BA 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000A0BE 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000A0C2                            ; ===========================================================================
0000A0C2 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
0000A0C4 0000                       		dc.w Obj27_Main-Obj27_Index
0000A0C6 0000                       		dc.w Obj27_Animate-Obj27_Index
0000A0C8                            ; ===========================================================================
0000A0C8                            
0000A0C8                            Obj27_LoadAnimal:			; XREF: Obj27_Index
0000A0C8 5428 0024                  		addq.b	#2,$24(a0)
0000A0CC 6100 0000                  		bsr.w	SingleObjLoad
0000A0D0 6600                       		bne.s	Obj27_Main
0000A0D2 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0000A0D6 3368 0008 0008             		move.w	8(a0),8(a1)
0000A0DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A0E2 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A0E8                            
0000A0E8                            Obj27_Main:				; XREF: Obj27_Index
0000A0E8 5428 0024                  		addq.b	#2,$24(a0)
0000A0EC 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000A0F4 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A0FA 117C 0004 0001             		move.b	#4,1(a0)
0000A100 117C 0001 0018             		move.b	#1,$18(a0)
0000A106 117C 0000 0020             		move.b	#0,$20(a0)
0000A10C 117C 000C 0019             		move.b	#$C,$19(a0)
0000A112 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000A118 117C 0000 001A             		move.b	#0,$1A(a0)
0000A11E 303C 00C1                  		move.w	#$C1,d0
0000A122 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000A128                            
0000A128                            Obj27_Animate:				; XREF: Obj27_Index
0000A128 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A12C 6A00                       		bpl.s	Obj27_Display
0000A12E 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000A134 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000A138 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000A13E 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A142                            
0000A142                            Obj27_Display:
0000A142 6000 0000                  		bra.w	DisplaySprite
0000A146                            ; ===========================================================================
0000A146                            ; ---------------------------------------------------------------------------
0000A146                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A146                            ; ---------------------------------------------------------------------------
0000A146                            
0000A146                            Obj3F:					; XREF: Obj_Index
0000A146 7000                       		moveq	#0,d0
0000A148 1028 0024                  		move.b	$24(a0),d0
0000A14C 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000A150 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000A154                            ; ===========================================================================
0000A154 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000A156 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
0000A158                            ; ===========================================================================
0000A158                            
0000A158                            Obj3F_Main:				; XREF: Obj3F_Index
0000A158 5428 0024                  		addq.b	#2,$24(a0)
0000A15C 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
0000A164 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A16A 117C 0004 0001             		move.b	#4,1(a0)
0000A170 117C 0001 0018             		move.b	#1,$18(a0)
0000A176 117C 0000 0020             		move.b	#0,$20(a0)
0000A17C 117C 000C 0019             		move.b	#$C,$19(a0)
0000A182 117C 0007 001E             		move.b	#7,$1E(a0)
0000A188 117C 0000 001A             		move.b	#0,$1A(a0)
0000A18E 303C 00C4                  		move.w	#$C4,d0
0000A192 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
0000A198                            ; ===========================================================================
0000A198                            Ani_obj1E:
0000A198                            	include "_anim\obj1E.asm"
0000A198                            ; ---------------------------------------------------------------------------
0000A198                            ; Animation script - doors (SBZ)
0000A198                            ; ---------------------------------------------------------------------------
0000A198 0000                       		dc.w byte_8E4A-Ani_obj1E
0000A19A 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
0000A1B2 00                         		even
0000A1B2 00                         		even
0000A1B2                            
0000A1B2                            ; ---------------------------------------------------------------------------
0000A1B2                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A1B2                            ; ---------------------------------------------------------------------------
0000A1B2                            Map_obj1E:
0000A1B2                            	include "_maps\obj1E.asm"
0000A1B2                            ; ---------------------------------------------------------------------------
0000A1B2                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A1B2                            ; ---------------------------------------------------------------------------
0000A1B2 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
0000A1B6 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
0000A1BA 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
0000A1BE 02                         byte_8E6E:	dc.b 2
0000A1BF EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A1C4 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
0000A1C9 02                         byte_8E79:	dc.b 2
0000A1CA EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A1CF FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
0000A1D4 02                         byte_8E84:	dc.b 2
0000A1D5 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
0000A1DA 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000A1DF 02                         byte_8E8F:	dc.b 2
0000A1E0 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
0000A1E5 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
0000A1EA 01                         byte_8E9A:	dc.b 1
0000A1EB F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000A1F0 01                         byte_8EA0:	dc.b 1
0000A1F1 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
0000A1F6                            		even
0000A1F6                            		even
0000A1F6                            
0000A1F6                            ; ---------------------------------------------------------------------------
0000A1F6                            ; Sprite mappings - explosion
0000A1F6                            ; ---------------------------------------------------------------------------
0000A1F6                            Map_obj24:
0000A1F6                            	include "_maps\obj24.asm"
0000A1F6                            ; ---------------------------------------------------------------------------
0000A1F6                            ; Sprite mappings - explosion
0000A1F6                            ; ---------------------------------------------------------------------------
0000A1F6 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
0000A1FA 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000A1FE 01                         byte_8EAE:	dc.b 1
0000A1FF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A204 01                         byte_8EB4:	dc.b 1
0000A205 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A20A 01                         byte_8EBA:	dc.b 1
0000A20B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A210 01                         byte_8EC0:	dc.b 1
0000A211 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A216                            		even
0000A216                            		even
0000A216                            
0000A216                            ; ---------------------------------------------------------------------------
0000A216                            ; Sprite mappings - explosion
0000A216                            ; ---------------------------------------------------------------------------
0000A216 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
0000A21A 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000A21E 0000                       		dc.w byte_8EF7-Map_obj27
0000A220 01                         byte_8ED0:	dc.b 1
0000A221 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A226 01                         byte_8ED6:	dc.b 1
0000A227 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A22C 01                         byte_8EDC:	dc.b 1
0000A22D F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A232 04                         byte_8EE2:	dc.b 4
0000A233 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A238 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A23D 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A242 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A247 04                         byte_8EF7:	dc.b 4
0000A248 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A24D EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A252 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A257 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A25C                            		even
0000A25C                            ; ---------------------------------------------------------------------------
0000A25C                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A25C                            ; ---------------------------------------------------------------------------
0000A25C FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000A25E 0000                       		dc.w byte_8F16-Map_obj3F
0000A260 0000                       		dc.w byte_8F1C-Map_obj3F
0000A262 FFD6                       		dc.w byte_8EE2-Map_obj3F
0000A264 FFEB                       		dc.w byte_8EF7-Map_obj3F
0000A266 01                         byte_8F16:	dc.b 1
0000A267 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A26C 01                         byte_8F1C:	dc.b 1
0000A26D F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A272                            		even
0000A272                            ; ===========================================================================
0000A272                            ; ---------------------------------------------------------------------------
0000A272                            ; Object 28 - animals
0000A272                            ; ---------------------------------------------------------------------------
0000A272                            
0000A272                            Obj28:					; XREF: Obj_Index
0000A272 7000                       		moveq	#0,d0
0000A274 1028 0024                  		move.b	$24(a0),d0
0000A278 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000A27C 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000A280                            ; ===========================================================================
0000A280 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000A284 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A288 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000A28C 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A290 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000A294 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000A298 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000A29C 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A2A0 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A2A4 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000A2A8 0000                       		dc.w loc_92D6-Obj28_Index
0000A2AA                            
0000A2AA 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000A2B6                            
0000A2B6 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000A2BA 0000 0000                  		dc.l Map_obj28
0000A2BE FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000A2C2 0000 0000                  		dc.l Map_obj28a		; mappings address
0000A2C6 FE80 FD00                  		dc.w $FE80, $FD00
0000A2CA 0000 0000                  		dc.l Map_obj28
0000A2CE FEC0 FE80                  		dc.w $FEC0, $FE80
0000A2D2 0000 0000                  		dc.l Map_obj28a
0000A2D6 FE40 FD00                  		dc.w $FE40, $FD00
0000A2DA 0000 0000                  		dc.l Map_obj28b
0000A2DE FD00 FC00                  		dc.w $FD00, $FC00
0000A2E2 0000 0000                  		dc.l Map_obj28a
0000A2E6 FD80 FC80                  		dc.w $FD80, $FC80
0000A2EA 0000 0000                  		dc.l Map_obj28b
0000A2EE                            
0000A2EE FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A2FE FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000A30E FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000A31A                            
0000A31A 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000A32E 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
0000A342 0000 0000                  		dc.l Map_obj28b
0000A346                            
0000A346 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000A358 0565 05B3                  		dc.w $565, $5B3
0000A35C                            ; ===========================================================================
0000A35C                            
0000A35C                            Obj28_Ending:				; XREF: Obj28_Index
0000A35C 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000A360 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000A364 7000                       		moveq	#0,d0
0000A366 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000A36A D040                       		add.w	d0,d0		; multiply d0 by 2
0000A36C 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000A370 0440 0014                  		subi.w	#$14,d0
0000A374 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000A37A D040                       		add.w	d0,d0
0000A37C 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000A382 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000A386 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000A38C 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000A392 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000A398 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000A39E 117C 000C 0016             		move.b	#$C,$16(a0)
0000A3A4 117C 0004 0001             		move.b	#4,1(a0)
0000A3AA 08E8 0000 0001             		bset	#0,1(a0)
0000A3B0 117C 0006 0018             		move.b	#6,$18(a0)
0000A3B6 117C 0008 0019             		move.b	#8,$19(a0)
0000A3BC 117C 0007 001E             		move.b	#7,$1E(a0)
0000A3C2 6000 0000                  		bra.w	DisplaySprite
0000A3C6                            ; ===========================================================================
0000A3C6                            
0000A3C6                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000A3C6 5428 0024                  		addq.b	#2,$24(a0)
0000A3CA 6100 8604                  		bsr.w	RandomNumber
0000A3CE 0240 0001                  		andi.w	#1,d0
0000A3D2 7200                       		moveq	#0,d1
0000A3D4 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000A3D8 D241                       		add.w	d1,d1
0000A3DA D240                       		add.w	d0,d1
0000A3DC 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000A3E0 1031 1000                  		move.b	(a1,d1.w),d0
0000A3E4 1140 0030                  		move.b	d0,$30(a0)
0000A3E8 E748                       		lsl.w	#3,d0
0000A3EA 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000A3EE D2C0                       		adda.w	d0,a1
0000A3F0 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000A3F4 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000A3F8 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000A3FC 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000A402 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000A408 6700                       		beq.s	loc_90C0	; if yes, branch
0000A40A 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000A410                            
0000A410                            loc_90C0:
0000A410 117C 000C 0016             		move.b	#$C,$16(a0)
0000A416 117C 0004 0001             		move.b	#4,1(a0)
0000A41C 08E8 0000 0001             		bset	#0,1(a0)
0000A422 117C 0006 0018             		move.b	#6,$18(a0)
0000A428 117C 0008 0019             		move.b	#8,$19(a0)
0000A42E 117C 0007 001E             		move.b	#7,$1E(a0)
0000A434 117C 0002 001A             		move.b	#2,$1A(a0)
0000A43A 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A440 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A444 6600                       		bne.s	loc_911C
0000A446 6100 0000                  		bsr.w	SingleObjLoad
0000A44A 6600                       		bne.s	Obj28_Display
0000A44C 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000A450 3368 0008 0008             		move.w	8(a0),8(a1)
0000A456 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A45C 3028 003E                  		move.w	$3E(a0),d0
0000A460 E248                       		lsr.w	#1,d0
0000A462 1340 001A                  		move.b	d0,$1A(a1)
0000A466                            
0000A466                            Obj28_Display:
0000A466 6000 0000                  		bra.w	DisplaySprite
0000A46A                            ; ===========================================================================
0000A46A                            
0000A46A                            loc_911C:
0000A46A 117C 0012 0024             		move.b	#$12,$24(a0)
0000A470 4268 0010                  		clr.w	$10(a0)
0000A474 6000 0000                  		bra.w	DisplaySprite
0000A478                            ; ===========================================================================
0000A478                            
0000A478                            loc_912A:				; XREF: Obj28_Index
0000A478 4A28 0001                  		tst.b	1(a0)
0000A47C 6A00 0000                  		bpl.w	DeleteObject
0000A480 6100 0000                  		bsr.w	ObjectFall
0000A484 4A68 0012                  		tst.w	$12(a0)
0000A488 6B00                       		bmi.s	loc_9180
0000A48A 4EB9 0000 0000             		jsr	ObjHitFloor
0000A490 4A41                       		tst.w	d1
0000A492 6A00                       		bpl.s	loc_9180
0000A494 D368 000C                  		add.w	d1,$C(a0)
0000A498 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A49E 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A4A4 117C 0001 001A             		move.b	#1,$1A(a0)
0000A4AA 1028 0030                  		move.b	$30(a0),d0
0000A4AE D000                       		add.b	d0,d0
0000A4B0 5800                       		addq.b	#4,d0
0000A4B2 1140 0024                  		move.b	d0,$24(a0)
0000A4B6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A4BA 6700                       		beq.s	loc_9180
0000A4BC 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000A4C2 6700                       		beq.s	loc_9180
0000A4C4 4468 0010                  		neg.w	$10(a0)
0000A4C8 0868 0000 0001             		bchg	#0,1(a0)
0000A4CE                            
0000A4CE                            loc_9180:
0000A4CE 6000 0000                  		bra.w	DisplaySprite
0000A4D2                            ; ===========================================================================
0000A4D2                            
0000A4D2                            loc_9184:				; XREF: Obj28_Index
0000A4D2 6100 0000                  		bsr.w	ObjectFall
0000A4D6 117C 0001 001A             		move.b	#1,$1A(a0)
0000A4DC 4A68 0012                  		tst.w	$12(a0)
0000A4E0 6B00                       		bmi.s	loc_91AE
0000A4E2 117C 0000 001A             		move.b	#0,$1A(a0)
0000A4E8 4EB9 0000 0000             		jsr	ObjHitFloor
0000A4EE 4A41                       		tst.w	d1
0000A4F0 6A00                       		bpl.s	loc_91AE
0000A4F2 D368 000C                  		add.w	d1,$C(a0)
0000A4F6 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A4FC                            
0000A4FC                            loc_91AE:
0000A4FC 4A28 0028                  		tst.b	$28(a0)
0000A500 6600                       		bne.s	loc_9224
0000A502 4A28 0001                  		tst.b	1(a0)
0000A506 6A00 0000                  		bpl.w	DeleteObject
0000A50A 6000 0000                  		bra.w	DisplaySprite
0000A50E                            ; ===========================================================================
0000A50E                            
0000A50E                            loc_91C0:				; XREF: Obj28_Index
0000A50E 6100 0000                  		bsr.w	SpeedToPos
0000A512 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A518 4A68 0012                  		tst.w	$12(a0)
0000A51C 6B00                       		bmi.s	loc_91FC
0000A51E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A524 4A41                       		tst.w	d1
0000A526 6A00                       		bpl.s	loc_91FC
0000A528 D368 000C                  		add.w	d1,$C(a0)
0000A52C 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A532 4A28 0028                  		tst.b	$28(a0)
0000A536 6700                       		beq.s	loc_91FC
0000A538 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000A53E 6700                       		beq.s	loc_91FC
0000A540 4468 0010                  		neg.w	$10(a0)
0000A544 0868 0000 0001             		bchg	#0,1(a0)
0000A54A                            
0000A54A                            loc_91FC:
0000A54A 5328 001E                  		subq.b	#1,$1E(a0)
0000A54E 6A00                       		bpl.s	loc_9212
0000A550 117C 0001 001E             		move.b	#1,$1E(a0)
0000A556 5228 001A                  		addq.b	#1,$1A(a0)
0000A55A 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A560                            
0000A560                            loc_9212:
0000A560 4A28 0028                  		tst.b	$28(a0)
0000A564 6600                       		bne.s	loc_9224
0000A566 4A28 0001                  		tst.b	1(a0)
0000A56A 6A00 0000                  		bpl.w	DeleteObject
0000A56E 6000 0000                  		bra.w	DisplaySprite
0000A572                            ; ===========================================================================
0000A572                            
0000A572                            loc_9224:				; XREF: Obj28_Index
0000A572 3028 0008                  		move.w	8(a0),d0
0000A576 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A57A 6500                       		bcs.s	loc_923C
0000A57C 0440 0180                  		subi.w	#$180,d0
0000A580 6A00                       		bpl.s	loc_923C
0000A582 4A28 0001                  		tst.b	1(a0)
0000A586 6A00 0000                  		bpl.w	DeleteObject
0000A58A                            
0000A58A                            loc_923C:
0000A58A 6000 0000                  		bra.w	DisplaySprite
0000A58E                            ; ===========================================================================
0000A58E                            
0000A58E                            loc_9240:				; XREF: Obj28_Index
0000A58E 4A28 0001                  		tst.b	1(a0)
0000A592 6A00 0000                  		bpl.w	DeleteObject
0000A596 5368 0036                  		subq.w	#1,$36(a0)
0000A59A 6600 0000                  		bne.w	loc_925C
0000A59E 117C 0002 0024             		move.b	#2,$24(a0)
0000A5A4 117C 0003 0018             		move.b	#3,$18(a0)
0000A5AA                            
0000A5AA                            loc_925C:
0000A5AA 6000 0000                  		bra.w	DisplaySprite
0000A5AE                            ; ===========================================================================
0000A5AE                            
0000A5AE                            loc_9260:				; XREF: Obj28_Index
0000A5AE 6100 0000                  		bsr.w	sub_9404
0000A5B2 6400                       		bcc.s	loc_927C
0000A5B4 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A5BA 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A5C0 117C 000E 0024             		move.b	#$E,$24(a0)
0000A5C6 6000 FF46                  		bra.w	loc_91C0
0000A5CA                            ; ===========================================================================
0000A5CA                            
0000A5CA                            loc_927C:
0000A5CA 6000 FFA6                  		bra.w	loc_9224
0000A5CE                            ; ===========================================================================
0000A5CE                            
0000A5CE                            loc_9280:				; XREF: Obj28_Index
0000A5CE 6100 0000                  		bsr.w	sub_9404
0000A5D2 6A00                       		bpl.s	loc_92B6
0000A5D4 4268 0010                  		clr.w	$10(a0)
0000A5D8 4268 0032                  		clr.w	$32(a0)
0000A5DC 6100 0000                  		bsr.w	SpeedToPos
0000A5E0 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A5E6 6100 0000                  		bsr.w	loc_93C4
0000A5EA 6100 0000                  		bsr.w	loc_93EC
0000A5EE 5328 001E                  		subq.b	#1,$1E(a0)
0000A5F2 6A00                       		bpl.s	loc_92B6
0000A5F4 117C 0001 001E             		move.b	#1,$1E(a0)
0000A5FA 5228 001A                  		addq.b	#1,$1A(a0)
0000A5FE 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A604                            
0000A604                            loc_92B6:
0000A604 6000 FF6C                  		bra.w	loc_9224
0000A608                            ; ===========================================================================
0000A608                            
0000A608                            loc_92BA:				; XREF: Obj28_Index
0000A608 6100 0000                  		bsr.w	sub_9404
0000A60C 6A00                       		bpl.s	loc_9310
0000A60E 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A614 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A61A 117C 0004 0024             		move.b	#4,$24(a0)
0000A620 6000 FEB0                  		bra.w	loc_9184
0000A624                            ; ===========================================================================
0000A624                            
0000A624                            loc_92D6:				; XREF: Obj28_Index
0000A624 6100 0000                  		bsr.w	ObjectFall
0000A628 117C 0001 001A             		move.b	#1,$1A(a0)
0000A62E 4A68 0012                  		tst.w	$12(a0)
0000A632 6B00                       		bmi.s	loc_9310
0000A634 117C 0000 001A             		move.b	#0,$1A(a0)
0000A63A 4EB9 0000 0000             		jsr	ObjHitFloor
0000A640 4A41                       		tst.w	d1
0000A642 6A00                       		bpl.s	loc_9310
0000A644 4628 0029                  		not.b	$29(a0)
0000A648 6600                       		bne.s	loc_9306
0000A64A 4468 0010                  		neg.w	$10(a0)
0000A64E 0868 0000 0001             		bchg	#0,1(a0)
0000A654                            
0000A654                            loc_9306:
0000A654 D368 000C                  		add.w	d1,$C(a0)
0000A658 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A65E                            
0000A65E                            loc_9310:
0000A65E 6000 FF12                  		bra.w	loc_9224
0000A662                            ; ===========================================================================
0000A662                            
0000A662                            loc_9314:				; XREF: Obj28_Index
0000A662 6100 0000                  		bsr.w	sub_9404
0000A666 6A00                       		bpl.s	loc_932E
0000A668 4268 0010                  		clr.w	$10(a0)
0000A66C 4268 0032                  		clr.w	$32(a0)
0000A670 6100 0000                  		bsr.w	ObjectFall
0000A674 6100 0000                  		bsr.w	loc_93C4
0000A678 6100 0000                  		bsr.w	loc_93EC
0000A67C                            
0000A67C                            loc_932E:
0000A67C 6000 FEF4                  		bra.w	loc_9224
0000A680                            ; ===========================================================================
0000A680                            
0000A680                            loc_9332:				; XREF: Obj28_Index
0000A680 6100 0000                  		bsr.w	sub_9404
0000A684 6A00                       		bpl.s	loc_936C
0000A686 6100 0000                  		bsr.w	ObjectFall
0000A68A 117C 0001 001A             		move.b	#1,$1A(a0)
0000A690 4A68 0012                  		tst.w	$12(a0)
0000A694 6B00                       		bmi.s	loc_936C
0000A696 117C 0000 001A             		move.b	#0,$1A(a0)
0000A69C 4EB9 0000 0000             		jsr	ObjHitFloor
0000A6A2 4A41                       		tst.w	d1
0000A6A4 6A00                       		bpl.s	loc_936C
0000A6A6 4468 0010                  		neg.w	$10(a0)
0000A6AA 0868 0000 0001             		bchg	#0,1(a0)
0000A6B0 D368 000C                  		add.w	d1,$C(a0)
0000A6B4 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A6BA                            
0000A6BA                            loc_936C:
0000A6BA 6000 FEB6                  		bra.w	loc_9224
0000A6BE                            ; ===========================================================================
0000A6BE                            
0000A6BE                            loc_9370:				; XREF: Obj28_Index
0000A6BE 6100 0000                  		bsr.w	sub_9404
0000A6C2 6A00                       		bpl.s	loc_93C0
0000A6C4 6100 0000                  		bsr.w	SpeedToPos
0000A6C8 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A6CE 4A68 0012                  		tst.w	$12(a0)
0000A6D2 6B00                       		bmi.s	loc_93AA
0000A6D4 4EB9 0000 0000             		jsr	ObjHitFloor
0000A6DA 4A41                       		tst.w	d1
0000A6DC 6A00                       		bpl.s	loc_93AA
0000A6DE 4628 0029                  		not.b	$29(a0)
0000A6E2 6600                       		bne.s	loc_93A0
0000A6E4 4468 0010                  		neg.w	$10(a0)
0000A6E8 0868 0000 0001             		bchg	#0,1(a0)
0000A6EE                            
0000A6EE                            loc_93A0:
0000A6EE D368 000C                  		add.w	d1,$C(a0)
0000A6F2 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A6F8                            
0000A6F8                            loc_93AA:
0000A6F8 5328 001E                  		subq.b	#1,$1E(a0)
0000A6FC 6A00                       		bpl.s	loc_93C0
0000A6FE 117C 0001 001E             		move.b	#1,$1E(a0)
0000A704 5228 001A                  		addq.b	#1,$1A(a0)
0000A708 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A70E                            
0000A70E                            loc_93C0:
0000A70E 6000 FE62                  		bra.w	loc_9224
0000A712                            ; ===========================================================================
0000A712                            
0000A712                            loc_93C4:
0000A712 117C 0001 001A             		move.b	#1,$1A(a0)
0000A718 4A68 0012                  		tst.w	$12(a0)
0000A71C 6B00                       		bmi.s	locret_93EA
0000A71E 117C 0000 001A             		move.b	#0,$1A(a0)
0000A724 4EB9 0000 0000             		jsr	ObjHitFloor
0000A72A 4A41                       		tst.w	d1
0000A72C 6A00                       		bpl.s	locret_93EA
0000A72E D368 000C                  		add.w	d1,$C(a0)
0000A732 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A738                            
0000A738                            locret_93EA:
0000A738 4E75                       		rts	
0000A73A                            ; ===========================================================================
0000A73A                            
0000A73A                            loc_93EC:
0000A73A 08E8 0000 0001             		bset	#0,1(a0)
0000A740 3028 0008                  		move.w	8(a0),d0
0000A744 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A748 6400                       		bcc.s	locret_9402
0000A74A 08A8 0000 0001             		bclr	#0,1(a0)
0000A750                            
0000A750                            locret_9402:
0000A750 4E75                       		rts	
0000A752                            
0000A752                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A752                            
0000A752                            
0000A752                            sub_9404:
0000A752 3038 D008                  		move.w	($FFFFD008).w,d0
0000A756 9068 0008                  		sub.w	8(a0),d0
0000A75A 0440 00B8                  		subi.w	#$B8,d0
0000A75E 4E75                       		rts	
0000A760                            ; End of function sub_9404
0000A760                            
0000A760                            ; ===========================================================================
0000A760                            ; ---------------------------------------------------------------------------
0000A760                            ; Object 29 - points that appear when you destroy something
0000A760                            ; ---------------------------------------------------------------------------
0000A760                            
0000A760                            Obj29:					; XREF: Obj_Index
0000A760 7000                       		moveq	#0,d0
0000A762 1028 0024                  		move.b	$24(a0),d0
0000A766 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000A76A 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000A76E 6000 0000                  		bra.w	DisplaySprite
0000A772                            ; ===========================================================================
0000A772 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0000A774 0000                       		dc.w Obj29_Slower-Obj29_Index
0000A776                            ; ===========================================================================
0000A776                            
0000A776                            Obj29_Main:				; XREF: Obj29_Index
0000A776 5428 0024                  		addq.b	#2,$24(a0)
0000A77A 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
0000A782 317C 2568 0002             		move.w	#($2000+pointsart),2(a0)
0000A788 117C 0004 0001             		move.b	#4,1(a0)
0000A78E 117C 0001 0018             		move.b	#1,$18(a0)
0000A794 117C 0008 0019             		move.b	#8,$19(a0)
0000A79A 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000A7A0                            
0000A7A0                            Obj29_Slower:				; XREF: Obj29_Index
0000A7A0 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A7A4 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000A7A8 6100 0000                  		bsr.w	SpeedToPos
0000A7AC 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A7B2 4E75                       		rts	
0000A7B4                            ; ===========================================================================
0000A7B4                            ; ---------------------------------------------------------------------------
0000A7B4                            ; Sprite mappings - animals
0000A7B4                            ; ---------------------------------------------------------------------------
0000A7B4                            Map_obj28:
0000A7B4                            	include "_maps\obj28.asm"
0000A7B4                            ; ---------------------------------------------------------------------------
0000A7B4                            ; Sprite mappings - animals
0000A7B4                            ; ---------------------------------------------------------------------------
0000A7B4 0000                       		dc.w byte_9472-Map_obj28
0000A7B6 0000                       		dc.w byte_9478-Map_obj28
0000A7B8 0000                       		dc.w byte_946C-Map_obj28
0000A7BA 01                         byte_946C:	dc.b 1
0000A7BB F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A7C0 01                         byte_9472:	dc.b 1
0000A7C1 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000A7C6 01                         byte_9478:	dc.b 1
0000A7C7 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000A7CC                            		even
0000A7CC                            		even
0000A7CC                            
0000A7CC                            Map_obj28a:
0000A7CC                            	include "_maps\obj28a.asm"
0000A7CC                            ; ---------------------------------------------------------------------------
0000A7CC                            ; Sprite mappings - animals
0000A7CC                            ; ---------------------------------------------------------------------------
0000A7CC 0000                       		dc.w byte_948A-Map_obj28a
0000A7CE 0000                       		dc.w byte_9490-Map_obj28a
0000A7D0 0000                       		dc.w byte_9484-Map_obj28a
0000A7D2 01                         byte_9484:	dc.b 1
0000A7D3 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A7D8 01                         byte_948A:	dc.b 1
0000A7D9 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000A7DE 01                         byte_9490:	dc.b 1
0000A7DF FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000A7E4                            		even
0000A7E4                            		even
0000A7E4                            
0000A7E4                            Map_obj28b:
0000A7E4                            	include "_maps\obj28b.asm"
0000A7E4                            ; ---------------------------------------------------------------------------
0000A7E4                            ; Sprite mappings - animals
0000A7E4                            ; ---------------------------------------------------------------------------
0000A7E4 0000                       		dc.w byte_94A2-Map_obj28b
0000A7E6 0000                       		dc.w byte_94A8-Map_obj28b
0000A7E8 0000                       		dc.w byte_949C-Map_obj28b
0000A7EA 01                         byte_949C:	dc.b 1
0000A7EB F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A7F0 01                         byte_94A2:	dc.b 1
0000A7F1 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000A7F6 01                         byte_94A8:	dc.b 1
0000A7F7 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000A7FC                            		even
0000A7FC                            		even
0000A7FC                            
0000A7FC                            ; ---------------------------------------------------------------------------
0000A7FC                            ; Sprite mappings - points that	appear when you	destroy	something
0000A7FC                            ; ---------------------------------------------------------------------------
0000A7FC                            Map_obj29:
0000A7FC                            	include "_maps\obj29.asm"
0000A7FC                            ; ---------------------------------------------------------------------------
0000A7FC                            ; Sprite mappings - points that	appear when you	destroy	something
0000A7FC                            ; ---------------------------------------------------------------------------
0000A7FC 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000A800 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
0000A804 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000A808 0000                       		dc.w byte_94E5-Map_obj29
0000A80A 01                         byte_94BC:	dc.b 1
0000A80B FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000A810 01                         byte_94C2:	dc.b 1
0000A811 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000A816 01                         byte_94C8:	dc.b 1
0000A817 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000A81C 01                         byte_94CE:	dc.b 1
0000A81D FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
0000A822 01                         byte_94D4:	dc.b 1
0000A823 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000A828 02                         byte_94DA:	dc.b 2
0000A829 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000A82E FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000A833 02                         byte_94E5:	dc.b 2
0000A834 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000A839 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000A83E                            		even
0000A83E                            		even
0000A83E                            
0000A83E                            ; ===========================================================================
0000A83E                            ; ---------------------------------------------------------------------------
0000A83E                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000A83E                            ; ---------------------------------------------------------------------------
0000A83E                            
0000A83E                            Obj1F:					; XREF: Obj_Index
0000A83E 7000                       		moveq	#0,d0
0000A840 1028 0024                  		move.b	$24(a0),d0
0000A844 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000A848 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000A84C                            ; ===========================================================================
0000A84C 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000A84E 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000A850 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000A852 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000A854 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000A856                            ; ===========================================================================
0000A856                            
0000A856                            Obj1F_Main:				; XREF: Obj1F_Index
0000A856 117C 0010 0016             		move.b	#$10,$16(a0)
0000A85C 117C 0008 0017             		move.b	#8,$17(a0)
0000A862 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A86A 317C 0400 0002             		move.w	#$400,2(a0)
0000A870 117C 0004 0001             		move.b	#4,1(a0)
0000A876 117C 0003 0018             		move.b	#3,$18(a0)
0000A87C 117C 0006 0020             		move.b	#6,$20(a0)
0000A882 117C 0015 0019             		move.b	#$15,$19(a0)
0000A888 6100 0000                  		bsr.w	ObjectFall
0000A88C 4EB9 0000 0000             		jsr	ObjHitFloor
0000A892 4A41                       		tst.w	d1
0000A894 6A00                       		bpl.s	locret_955A
0000A896 D368 000C                  		add.w	d1,$C(a0)
0000A89A 1143 0026                  		move.b	d3,$26(a0)
0000A89E 317C 0000 0012             		move.w	#0,$12(a0)
0000A8A4 5428 0024                  		addq.b	#2,$24(a0)
0000A8A8                            
0000A8A8                            locret_955A:
0000A8A8 4E75                       		rts	
0000A8AA                            ; ===========================================================================
0000A8AA                            
0000A8AA                            Obj1F_Action:				; XREF: Obj1F_Index
0000A8AA 7000                       		moveq	#0,d0
0000A8AC 1028 0025                  		move.b	$25(a0),d0
0000A8B0 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000A8B4 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000A8B8 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A8BE 6100 0000                  		bsr.w	AnimateSprite
0000A8C2 6000 0000                  		bra.w	MarkObjGone
0000A8C6                            ; ===========================================================================
0000A8C6 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000A8C8 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000A8CA                            ; ===========================================================================
0000A8CA                            
0000A8CA                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000A8CA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000A8CE 6A00                       		bpl.s	locret_95B6
0000A8D0 4A28 0001                  		tst.b	1(a0)
0000A8D4 6A00                       		bpl.s	Obj1F_Move
0000A8D6 0868 0001 0032             		bchg	#1,$32(a0)
0000A8DC 6600                       		bne.s	Obj1F_MakeFire
0000A8DE                            
0000A8DE                            Obj1F_Move:
0000A8DE 5428 0025                  		addq.b	#2,$25(a0)
0000A8E2 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000A8E8 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000A8EE 6100 0000                  		bsr.w	Obj1F_SetAni
0000A8F2 5600                       		addq.b	#3,d0
0000A8F4 1140 001C                  		move.b	d0,$1C(a0)
0000A8F8 0868 0000 0022             		bchg	#0,$22(a0)
0000A8FE 6600                       		bne.s	locret_95B6
0000A900 4468 0010                  		neg.w	$10(a0)		; change direction
0000A904                            
0000A904                            locret_95B6:
0000A904 4E75                       		rts	
0000A906                            ; ===========================================================================
0000A906                            
0000A906                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000A906 317C 003B 0030             		move.w	#$3B,$30(a0)
0000A90C 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000A912 6100 0000                  		bsr.w	SingleObjLoad
0000A916 6600                       		bne.s	Obj1F_MakeFire2
0000A918 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000A91C 137C 0006 0024             		move.b	#6,$24(a1)
0000A922 3368 0008 0008             		move.w	8(a0),8(a1)
0000A928 0469 0010 0008             		subi.w	#$10,8(a1)
0000A92E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A934 337C FF00 0010             		move.w	#-$100,$10(a1)
0000A93A                            
0000A93A                            Obj1F_MakeFire2:
0000A93A 6100 0000                  		bsr.w	SingleObjLoad
0000A93E 6600                       		bne.s	locret_9618
0000A940 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000A944 137C 0006 0024             		move.b	#6,$24(a1)
0000A94A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A950 0669 0010 0008             		addi.w	#$10,8(a1)
0000A956 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A95C 337C 0100 0010             		move.w	#$100,$10(a1)
0000A962                            
0000A962                            locret_9618:
0000A962 4E75                       		rts	
0000A964                            ; ===========================================================================
0000A964                            
0000A964                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000A964 5368 0030                  		subq.w	#1,$30(a0)
0000A968 6B00                       		bmi.s	loc_966E
0000A96A 6100 0000                  		bsr.w	SpeedToPos
0000A96E 0868 0000 0032             		bchg	#0,$32(a0)
0000A974 6600                       		bne.s	loc_9654
0000A976 3628 0008                  		move.w	8(a0),d3
0000A97A 0643 0010                  		addi.w	#$10,d3
0000A97E 0828 0000 0022             		btst	#0,$22(a0)
0000A984 6700                       		beq.s	loc_9640
0000A986 0443 0020                  		subi.w	#$20,d3
0000A98A                            
0000A98A                            loc_9640:
0000A98A 4EB9 0000 0000             		jsr	ObjHitFloor2
0000A990 0C41 FFF8                  		cmpi.w	#-8,d1
0000A994 6D00                       		blt.s	loc_966E
0000A996 0C41 000C                  		cmpi.w	#$C,d1
0000A99A 6C00                       		bge.s	loc_966E
0000A99C 4E75                       		rts	
0000A99E                            ; ===========================================================================
0000A99E                            
0000A99E                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000A99E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A9A4 D368 000C                  		add.w	d1,$C(a0)
0000A9A8 1143 0026                  		move.b	d3,$26(a0)
0000A9AC 6100 0000                  		bsr.w	Obj1F_SetAni
0000A9B0 5600                       		addq.b	#3,d0
0000A9B2 1140 001C                  		move.b	d0,$1C(a0)
0000A9B6 4E75                       		rts	
0000A9B8                            ; ===========================================================================
0000A9B8                            
0000A9B8                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000A9B8 5528 0025                  		subq.b	#2,$25(a0)
0000A9BC 317C 003B 0030             		move.w	#59,$30(a0)
0000A9C2 317C 0000 0010             		move.w	#0,$10(a0)
0000A9C8 6100 0000                  		bsr.w	Obj1F_SetAni
0000A9CC 1140 001C                  		move.b	d0,$1C(a0)
0000A9D0 4E75                       		rts	
0000A9D2                            ; ---------------------------------------------------------------------------
0000A9D2                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000A9D2                            ; ---------------------------------------------------------------------------
0000A9D2                            
0000A9D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A9D2                            
0000A9D2                            
0000A9D2                            Obj1F_SetAni:				; XREF: loc_966E
0000A9D2 7000                       		moveq	#0,d0
0000A9D4 1628 0026                  		move.b	$26(a0),d3
0000A9D8 6B00                       		bmi.s	loc_96A4
0000A9DA 0C03 0006                  		cmpi.b	#6,d3
0000A9DE 6500                       		bcs.s	locret_96A2
0000A9E0 7001                       		moveq	#1,d0
0000A9E2 0828 0000 0022             		btst	#0,$22(a0)
0000A9E8 6600                       		bne.s	locret_96A2
0000A9EA 7002                       		moveq	#2,d0
0000A9EC                            
0000A9EC                            locret_96A2:
0000A9EC 4E75                       		rts	
0000A9EE                            ; ===========================================================================
0000A9EE                            
0000A9EE                            loc_96A4:				; XREF: Obj1F_SetAni
0000A9EE 0C03 00FA                  		cmpi.b	#-6,d3
0000A9F2 6200                       		bhi.s	locret_96B6
0000A9F4 7002                       		moveq	#2,d0
0000A9F6 0828 0000 0022             		btst	#0,$22(a0)
0000A9FC 6600                       		bne.s	locret_96B6
0000A9FE 7001                       		moveq	#1,d0
0000AA00                            
0000AA00                            locret_96B6:
0000AA00 4E75                       		rts	
0000AA02                            ; End of function Obj1F_SetAni
0000AA02                            
0000AA02                            ; ===========================================================================
0000AA02                            
0000AA02                            Obj1F_Delete:				; XREF: Obj1F_Index
0000AA02 6100 0000                  		bsr.w	DeleteObject
0000AA06 4E75                       		rts	
0000AA08                            ; ===========================================================================
0000AA08                            ; ---------------------------------------------------------------------------
0000AA08                            ; Sub-object - missile that the	Crabmeat throws
0000AA08                            ; ---------------------------------------------------------------------------
0000AA08                            
0000AA08                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000AA08 5428 0024                  		addq.b	#2,$24(a0)
0000AA0C 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000AA14 317C 0400 0002             		move.w	#$400,2(a0)
0000AA1A 117C 0004 0001             		move.b	#4,1(a0)
0000AA20 117C 0003 0018             		move.b	#3,$18(a0)
0000AA26 117C 0087 0020             		move.b	#$87,$20(a0)
0000AA2C 117C 0008 0019             		move.b	#8,$19(a0)
0000AA32 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AA38 117C 0007 001C             		move.b	#7,$1C(a0)
0000AA3E                            
0000AA3E                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000AA3E 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000AA44 6100 0000                  		bsr.w	AnimateSprite
0000AA48 6100 0000                  		bsr.w	ObjectFall
0000AA4C 6100 0000                  		bsr.w	DisplaySprite
0000AA50 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000AA54 0640 00E0                  		addi.w	#$E0,d0
0000AA58 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000AA5C 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000AA5E 4E75                       		rts	
0000AA60                            ; ===========================================================================
0000AA60                            
0000AA60                            Obj1F_Delete2:
0000AA60 6000 0000                  		bra.w	DeleteObject
0000AA64                            ; ===========================================================================
0000AA64                            Ani_obj1F:
0000AA64                            	include "_anim\obj1F.asm"
0000AA64                            ; ---------------------------------------------------------------------------
0000AA64                            ; Animation script - Crabmeat enemy
0000AA64                            ; ---------------------------------------------------------------------------
0000AA64 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000AA6A 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000AA70 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000AA74 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000AA78 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000AA7C 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000AA80 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000AA86 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000AA8C 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000AA92 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000AA96 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000AA9A                            		even
0000AA9A                            		even
0000AA9A                            
0000AA9A                            ; ---------------------------------------------------------------------------
0000AA9A                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000AA9A                            ; ---------------------------------------------------------------------------
0000AA9A                            Map_obj1F:
0000AA9A                            	include "_maps\obj1F.asm"
0000AA9A                            ; ---------------------------------------------------------------------------
0000AA9A                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000AA9A                            ; ---------------------------------------------------------------------------
0000AA9A 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000AA9E 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
0000AAA2 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
0000AAA6 0000                       		dc.w byte_97D7-Map_obj1F
0000AAA8 04                         byte_975E:	dc.b 4
0000AAA9 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000AAAE F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000AAB3 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000AAB8 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000AABD 04                         byte_9773:	dc.b 4
0000AABE F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
0000AAC3 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000AAC8 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000AACD 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000AAD2 04                         byte_9788:	dc.b 4
0000AAD3 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000AAD8 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000AADD FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000AAE2 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000AAE7 04                         byte_979D:	dc.b 4
0000AAE8 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000AAED EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000AAF2 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000AAF7 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000AAFC 06                         byte_97B2:	dc.b 6
0000AAFD F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0000AB02 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000AB07 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000AB0C F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000AB11 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000AB16 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000AB1B 01                         byte_97D1:	dc.b 1
0000AB1C F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0000AB21 01                         byte_97D7:	dc.b 1
0000AB22 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
0000AB28 00                         		even
0000AB28 00                         		even
0000AB28                            
0000AB28                            ; ===========================================================================
0000AB28                            ; ---------------------------------------------------------------------------
0000AB28                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000AB28                            ; ---------------------------------------------------------------------------
0000AB28                            
0000AB28                            Obj22:					; XREF: Obj_Index
0000AB28 7000                       		moveq	#0,d0
0000AB2A 1028 0024                  		move.b	$24(a0),d0
0000AB2E 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000AB32 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000AB36                            ; ===========================================================================
0000AB36 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000AB38 0000                       		dc.w Obj22_Action-Obj22_Index
0000AB3A 0000                       		dc.w Obj22_Delete-Obj22_Index
0000AB3C                            ; ===========================================================================
0000AB3C                            
0000AB3C                            Obj22_Main:				; XREF: Obj22_Index
0000AB3C 5428 0024                  		addq.b	#2,$24(a0)
0000AB40 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000AB48 317C 0444 0002             		move.w	#$444,2(a0)
0000AB4E 117C 0004 0001             		move.b	#4,1(a0)
0000AB54 117C 0003 0018             		move.b	#3,$18(a0)
0000AB5A 117C 0008 0020             		move.b	#8,$20(a0)
0000AB60 117C 0018 0019             		move.b	#$18,$19(a0)
0000AB66                            
0000AB66                            Obj22_Action:				; XREF: Obj22_Index
0000AB66 7000                       		moveq	#0,d0
0000AB68 1028 0025                  		move.b	$25(a0),d0
0000AB6C 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000AB70 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000AB74 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000AB7A 6100 0000                  		bsr.w	AnimateSprite
0000AB7E 6000 0000                  		bra.w	MarkObjGone
0000AB82                            ; ===========================================================================
0000AB82 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000AB84 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000AB86                            ; ===========================================================================
0000AB86                            
0000AB86                            Obj22_Move:				; XREF: Obj22_Index2
0000AB86 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000AB8A 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000AB8C 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000AB92 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000AB94 5428 0025                  		addq.b	#2,$25(a0)
0000AB98 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000AB9E 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000ABA4 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000ABAA 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000ABB0 6600                       		bne.s	locret_986C	; if not, branch
0000ABB2 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000ABB6                            
0000ABB6                            locret_986C:
0000ABB6 4E75                       		rts	
0000ABB8                            ; ===========================================================================
0000ABB8                            
0000ABB8                            Obj22_Fire:				; XREF: Obj22_Move
0000ABB8 6100 0000                  		bsr.w	SingleObjLoad
0000ABBC 6600                       		bne.s	locret_98D0
0000ABBE 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000ABC2 3368 0008 0008             		move.w	8(a0),8(a1)
0000ABC8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ABCE 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000ABD4 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000ABDA 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000ABE0 303C 0018                  		move.w	#$18,d0
0000ABE4 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000ABEA 6600                       		bne.s	loc_98AA	; if not, branch
0000ABEC 4440                       		neg.w	d0
0000ABEE 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000ABF2                            
0000ABF2                            loc_98AA:
0000ABF2 D169 0008                  		add.w	d0,8(a1)
0000ABF6 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000ABFC 337C 000E 0032             		move.w	#$E,$32(a1)
0000AC02 2348 003C                  		move.l	a0,$3C(a1)
0000AC06 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000AC0C 317C 003B 0032             		move.w	#$3B,$32(a0)
0000AC12 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000AC18                            
0000AC18                            locret_98D0:
0000AC18 4E75                       		rts	
0000AC1A                            ; ===========================================================================
0000AC1A                            
0000AC1A                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000AC1A 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000AC1E 6B00                       		bmi.s	Obj22_ChgDir
0000AC20 6100 0000                  		bsr.w	SpeedToPos
0000AC24 4A28 0034                  		tst.b	$34(a0)
0000AC28 6600                       		bne.s	locret_992A
0000AC2A 3038 D008                  		move.w	($FFFFD008).w,d0
0000AC2E 9068 0008                  		sub.w	8(a0),d0
0000AC32 6A00                       		bpl.s	Obj22_SetNrSonic
0000AC34 4440                       		neg.w	d0
0000AC36                            
0000AC36                            Obj22_SetNrSonic:
0000AC36 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000AC3A 6400                       		bcc.s	locret_992A	; if not, branch
0000AC3C 4A28 0001                  		tst.b	1(a0)
0000AC40 6A00                       		bpl.s	locret_992A
0000AC42 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000AC48 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000AC4E 6000                       		bra.s	Obj22_Stop
0000AC50                            ; ===========================================================================
0000AC50                            
0000AC50                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000AC50 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000AC56 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000AC5C 317C 003B 0032             		move.w	#59,$32(a0)
0000AC62                            
0000AC62                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000AC62 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000AC66 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000AC6C 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000AC72                            
0000AC72                            locret_992A:
0000AC72 4E75                       		rts	
0000AC74                            ; ===========================================================================
0000AC74                            
0000AC74                            Obj22_Delete:				; XREF: Obj22_Index
0000AC74 6100 0000                  		bsr.w	DeleteObject
0000AC78 4E75                       		rts	
0000AC7A                            ; ===========================================================================
0000AC7A                            ; ---------------------------------------------------------------------------
0000AC7A                            ; Object 23 - missile that Buzz	Bomber throws
0000AC7A                            ; ---------------------------------------------------------------------------
0000AC7A                            
0000AC7A                            Obj23:					; XREF: Obj_Index
0000AC7A 7000                       		moveq	#0,d0
0000AC7C 1028 0024                  		move.b	$24(a0),d0
0000AC80 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000AC84 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000AC88                            ; ===========================================================================
0000AC88 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000AC8A 0000                       		dc.w Obj23_Animate-Obj23_Index
0000AC8C 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000AC8E 0000                       		dc.w Obj23_Delete-Obj23_Index
0000AC90 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000AC92                            ; ===========================================================================
0000AC92                            
0000AC92                            Obj23_Main:				; XREF: Obj23_Index
0000AC92 5368 0032                  		subq.w	#1,$32(a0)
0000AC96 6A00                       		bpl.s	Obj23_ChkCancel
0000AC98 5428 0024                  		addq.b	#2,$24(a0)
0000AC9C 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000ACA4 317C 2444 0002             		move.w	#$2444,2(a0)
0000ACAA 117C 0004 0001             		move.b	#4,1(a0)
0000ACB0 117C 0003 0018             		move.b	#3,$18(a0)
0000ACB6 117C 0008 0019             		move.b	#8,$19(a0)
0000ACBC 0228 0003 0022             		andi.b	#3,$22(a0)
0000ACC2 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000ACC6 6700                       		beq.s	Obj23_Animate	; if not, branch
0000ACC8 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000ACCE 117C 0087 0020             		move.b	#$87,$20(a0)
0000ACD4 117C 0001 001C             		move.b	#1,$1C(a0)
0000ACDA 6000                       		bra.s	Obj23_Animate2
0000ACDC                            ; ===========================================================================
0000ACDC                            
0000ACDC                            Obj23_Animate:				; XREF: Obj23_Index
0000ACDC 6100                       		bsr.s	Obj23_ChkCancel
0000ACDE 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000ACE4 6100 0000                  		bsr.w	AnimateSprite
0000ACE8 6000 0000                  		bra.w	DisplaySprite
0000ACEC                            ; ---------------------------------------------------------------------------
0000ACEC                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000ACEC                            ; destroyed, and if it has, then cancel	the missile
0000ACEC                            ; ---------------------------------------------------------------------------
0000ACEC                            
0000ACEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ACEC                            
0000ACEC                            
0000ACEC                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000ACEC 2268 003C                  		movea.l	$3C(a0),a1
0000ACF0 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000ACF4 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000ACF6 4E75                       		rts	
0000ACF8                            ; End of function Obj23_ChkCancel
0000ACF8                            
0000ACF8                            ; ===========================================================================
0000ACF8                            
0000ACF8                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000ACF8 0828 0007 0022             		btst	#7,$22(a0)
0000ACFE 6600                       		bne.s	Obj23_Explode
0000AD00 117C 0087 0020             		move.b	#$87,$20(a0)
0000AD06 117C 0001 001C             		move.b	#1,$1C(a0)
0000AD0C 6100 0000                  		bsr.w	SpeedToPos
0000AD10 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000AD16 6100 0000                  		bsr.w	AnimateSprite
0000AD1A 6100 0000                  		bsr.w	DisplaySprite
0000AD1E 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000AD22 0640 00E0                  		addi.w	#$E0,d0
0000AD26 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000AD2A 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000AD2C 4E75                       		rts	
0000AD2E                            ; ===========================================================================
0000AD2E                            
0000AD2E                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000AD2E 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000AD32 117C 0000 0024             		move.b	#0,$24(a0)
0000AD38 6000 F30A                  		bra.w	Obj24
0000AD3C                            ; ===========================================================================
0000AD3C                            
0000AD3C                            Obj23_Delete:				; XREF: Obj23_Index
0000AD3C 6100 0000                  		bsr.w	DeleteObject
0000AD40 4E75                       		rts	
0000AD42                            ; ===========================================================================
0000AD42                            
0000AD42                            Obj23_FromNewt:				; XREF: Obj23_Index
0000AD42 4A28 0001                  		tst.b	1(a0)
0000AD46 6AF4                       		bpl.s	Obj23_Delete
0000AD48 6100 0000                  		bsr.w	SpeedToPos
0000AD4C                            
0000AD4C                            Obj23_Animate2:				; XREF: Obj23_Main
0000AD4C 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000AD52 6100 0000                  		bsr.w	AnimateSprite
0000AD56 6100 0000                  		bsr.w	DisplaySprite
0000AD5A 4E75                       		rts	
0000AD5C                            ; ===========================================================================
0000AD5C                            Ani_obj22:
0000AD5C                            	include "_anim\obj22.asm"
0000AD5C                            ; ---------------------------------------------------------------------------
0000AD5C                            ; Animation script - Buzz Bomber enemy
0000AD5C                            ; ---------------------------------------------------------------------------
0000AD5C 0000                       		dc.w byte_9A1E-Ani_obj22
0000AD5E 0000                       		dc.w byte_9A22-Ani_obj22
0000AD60 0000                       		dc.w byte_9A26-Ani_obj22
0000AD62 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000AD66 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000AD6A 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000AD6E                            		even
0000AD6E                            		even
0000AD6E                            
0000AD6E                            Ani_obj23:
0000AD6E                            	include "_anim\obj23.asm"
0000AD6E                            ; ---------------------------------------------------------------------------
0000AD6E                            ; Animation script - missile that Buzz Bomber throws
0000AD6E                            ; ---------------------------------------------------------------------------
0000AD6E 0000                       		dc.w byte_9A2E-Ani_obj23
0000AD70 0000                       		dc.w byte_9A32-Ani_obj23
0000AD72 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000AD76 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000AD7A                            		even
0000AD7A                            		even
0000AD7A                            
0000AD7A                            ; ---------------------------------------------------------------------------
0000AD7A                            ; Sprite mappings - Buzz Bomber	enemy
0000AD7A                            ; ---------------------------------------------------------------------------
0000AD7A                            Map_obj22:
0000AD7A                            	include "_maps\obj22.asm"
0000AD7A                            ; ---------------------------------------------------------------------------
0000AD7A                            ; Sprite mappings - Buzz Bomber	enemy
0000AD7A                            ; ---------------------------------------------------------------------------
0000AD7A 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
0000AD7E 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
0000AD82 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
0000AD86 06                         byte_9A42:	dc.b 6
0000AD87 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000AD8C F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000AD91 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000AD96 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000AD9B F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000ADA0 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000ADA5 06                         byte_9A61:	dc.b 6
0000ADA6 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000ADAB F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000ADB0 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000ADB5 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000ADBA F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000ADBF F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000ADC4 07                         byte_9A80:	dc.b 7
0000ADC5 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000ADCA F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000ADCF F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000ADD4 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000ADD9 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000ADDE F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000ADE3 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000ADE8 07                         byte_9AA4:	dc.b 7
0000ADE9 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000ADEE F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000ADF3 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000ADF8 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000ADFD 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000AE02 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000AE07 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000AE0C 06                         byte_9AC8:	dc.b 6
0000AE0D F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000AE12 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000AE17 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000AE1C 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000AE21 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000AE26 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000AE2B 04                         byte_9AE7:	dc.b 4
0000AE2C F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000AE31 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000AE36 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000AE3B 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000AE40 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000AE45 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000AE4A                            		even
0000AE4A                            		even
0000AE4A                            
0000AE4A                            ; ---------------------------------------------------------------------------
0000AE4A                            ; Sprite mappings - missile that Buzz Bomber throws
0000AE4A                            ; ---------------------------------------------------------------------------
0000AE4A                            Map_obj23:
0000AE4A                            	include "_maps\obj23.asm"
0000AE4A                            ; ---------------------------------------------------------------------------
0000AE4A                            ; Sprite mappings - missile that Buzz Bomber throws
0000AE4A                            ; ---------------------------------------------------------------------------
0000AE4A 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000AE4E 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000AE52 01                         byte_9B0E:	dc.b 1
0000AE53 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000AE58 01                         byte_9B14:	dc.b 1
0000AE59 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000AE5E 01                         byte_9B1A:	dc.b 1
0000AE5F F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000AE64 01                         byte_9B20:	dc.b 1
0000AE65 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000AE6A                            		even
0000AE6A                            		even
0000AE6A                            
0000AE6A                            ; ===========================================================================
0000AE6A                            ; ---------------------------------------------------------------------------
0000AE6A                            ; Object 25 - rings
0000AE6A                            ; ---------------------------------------------------------------------------
0000AE6A                            
0000AE6A                            Obj25:					; XREF: Obj_Index
0000AE6A 7000                       		moveq	#0,d0
0000AE6C 1028 0024                  		move.b	$24(a0),d0
0000AE70 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000AE74 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000AE78                            ; ===========================================================================
0000AE78 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000AE7A 0000                       		dc.w Obj25_Animate-Obj25_Index
0000AE7C 0000                       		dc.w Obj25_Collect-Obj25_Index
0000AE7E 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000AE80 0000                       		dc.w Obj25_Delete-Obj25_Index
0000AE82                            ; ===========================================================================
0000AE82                            
0000AE82                            Obj25_Main:				; XREF: Obj25_Index		addq.b	#2,$24(a0)
0000AE82 3168 0008 0032             		move.w	8(a0),$32(a0)
0000AE88 217C 0000 0000 0004        		move.l	#Map_obj25,4(a0)
0000AE90 317C 26BA 0002             		move.w	#($2000+ringart),2(a0)
0000AE96 117C 0004 0001             		move.b	#4,1(a0)
0000AE9C 117C 0002 0018             		move.b	#2,$18(a0)
0000AEA2 117C 0047 0020             		move.b	#$47,$20(a0)
0000AEA8 117C 0008 0019             		move.b	#8,$19(a0)
0000AEAE                            
0000AEAE                            Obj25_Animate:				; XREF: Obj25_Index
0000AEAE 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000AEB4 3028 0032                  		move.w	$32(a0),d0
0000AEB8 6000 0000                  		bra.w	MarkObjGone
0000AEBC                            ; ===========================================================================
0000AEBC                            
0000AEBC                            Obj25_Collect:				; XREF: Obj25_Index
0000AEBC 5428 0024                  		addq.b	#2,$24(a0)
0000AEC0 117C 0000 0020             		move.b	#0,$20(a0)
0000AEC6 317C 0080 0018             		move.w	#$80,$18(a0)
0000AECC 6100 0000                  		bsr.w	CollectRing
0000AED0                            
0000AED0                            Obj25_Sparkle:				; XREF: Obj25_Index
0000AED0 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000AED6 6100 0000                  		bsr.w	AnimateSprite
0000AEDA 6000 0000                  		bra.w	DisplaySprite
0000AEDE                            ; ===========================================================================
0000AEDE                            
0000AEDE                            Obj25_Delete:				; XREF: Obj25_Index
0000AEDE 6000 0000                  		bra.w	DeleteObject
0000AEE2                            
0000AEE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AEE2                            
0000AEE2                            
0000AEE2                            CollectRing:				; XREF: Obj25_Collect
0000AEE2 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000AEE6 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000AEEC 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000AEF0 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000AEF6 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000AEF8 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000AEFE 6700                       		beq.s	loc_9CA4
0000AF00 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000AF06 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000AF08 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000AF0E 6600                       		bne.s	Obj25_PlaySnd
0000AF10                            
0000AF10                            loc_9CA4:
0000AF10 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AF14 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AF18 303C 0088                  		move.w	#$88,d0		; play extra life music
0000AF1C                            
0000AF1C                            Obj25_PlaySnd:
0000AF1C 4EF9 0000 1220             		jmp	(PlaySound_Special).l
0000AF22                            ; End of function CollectRing
0000AF22                            
0000AF22                            ; ===========================================================================
0000AF22                            ; ---------------------------------------------------------------------------
0000AF22                            ; Object 37 - rings flying out of Sonic	when he's hit
0000AF22                            ; ---------------------------------------------------------------------------
0000AF22                            
0000AF22                            Obj37:					; XREF: Obj_Index
0000AF22 7000                       		moveq	#0,d0
0000AF24 1028 0024                  		move.b	$24(a0),d0
0000AF28 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000AF2C 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000AF30                            ; ===========================================================================
0000AF30 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000AF32 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000AF34 0000                       		dc.w Obj37_Collect-Obj37_Index
0000AF36 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000AF38 0000                       		dc.w Obj37_Delete-Obj37_Index
0000AF3A                            ; ===========================================================================
0000AF3A                            
0000AF3A                            Obj37_CountRings:			; XREF: Obj37_Index
0000AF3A 2248                       		movea.l	a0,a1
0000AF3C 7A00                       		moveq	#0,d5
0000AF3E 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000AF42 7020                       		moveq	#32,d0
0000AF44 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000AF46 6500                       		bcs.s	loc_9CDE	; if not, branch
0000AF48 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000AF4A                            
0000AF4A                            loc_9CDE:
0000AF4A 5345                       		subq.w	#1,d5
0000AF4C 383C 0288                  		move.w	#$288,d4
0000AF50 6000                       		bra.s	Obj37_MakeRings
0000AF52                            ; ===========================================================================
0000AF52                            
0000AF52                            Obj37_Loop:
0000AF52 6100 0000                  		bsr.w	SingleObjLoad
0000AF56 6600 0000                  		bne.w	Obj37_ResetCounter
0000AF5A                            
0000AF5A                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000AF5A 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000AF5E 5429 0024                  		addq.b	#2,$24(a1)
0000AF62 137C 0008 0016             		move.b	#8,$16(a1)
0000AF68 137C 0008 0017             		move.b	#8,$17(a1)
0000AF6E 3368 0008 0008             		move.w	8(a0),8(a1)
0000AF74 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AF7A 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000AF82 337C 26BA 0002             		move.w	#($2000+ringart),2(a1)
0000AF88 137C 0004 0001             		move.b	#4,1(a1)
0000AF8E 137C 0003 0018             		move.b	#3,$18(a1)
0000AF94 137C 0047 0020             		move.b	#$47,$20(a1)
0000AF9A 137C 0008 0019             		move.b	#8,$19(a1)
0000AFA0 4A44                       		tst.w	d4
0000AFA2 6B00                       		bmi.s	loc_9D62
0000AFA4 3004                       		move.w	d4,d0
0000AFA6 4EB9 0000 29F6             		jsr	(CalcSine).l
0000AFAC 3404                       		move.w	d4,d2
0000AFAE E04A                       		lsr.w	#8,d2
0000AFB0 E560                       		asl.w	d2,d0
0000AFB2 E561                       		asl.w	d2,d1
0000AFB4 3400                       		move.w	d0,d2
0000AFB6 3601                       		move.w	d1,d3
0000AFB8 0604 0010                  		addi.b	#$10,d4
0000AFBC 6400                       		bcc.s	loc_9D62
0000AFBE 0444 0080                  		subi.w	#$80,d4
0000AFC2 6400                       		bcc.s	loc_9D62
0000AFC4 383C 0288                  		move.w	#$288,d4
0000AFC8                            
0000AFC8                            loc_9D62:
0000AFC8 3342 0010                  		move.w	d2,$10(a1)
0000AFCC 3343 0012                  		move.w	d3,$12(a1)
0000AFD0 4442                       		neg.w	d2
0000AFD2 4444                       		neg.w	d4
0000AFD4 51CD FF7C                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000AFD8                            
0000AFD8                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000AFD8 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000AFDE 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000AFE4 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000AFEA 70FF                       		moveq	#-1,d0			; Move #-1 to d0
0000AFEC 1140 001F                  		move.b	d0,$1F(a0)	; Move d0 to new timer
0000AFF0 11C0 FEC6                  		move.b	d0,($FFFFFEC6).w	; Move d0 to old timer (for animated purposes)		
0000AFF4 303C 00C6                  		move.w	#$C6,d0
0000AFF8 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000AFFE                            
0000AFFE                            Obj37_Bounce:				; XREF: Obj37_Index
0000AFFE 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000B004 6100 0000                  		bsr.w	SpeedToPos
0000B008 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B00E 6B00                       		bmi.s	Obj37_ChkDel
0000B010 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B014 D007                       		add.b	d7,d0
0000B016 0200 0003                  		andi.b	#3,d0
0000B01A 6600                       		bne.s	Obj37_ChkDel
0000B01C 4EB9 0000 0000             		jsr	ObjHitFloor
0000B022 4A41                       		tst.w	d1
0000B024 6A00                       		bpl.s	Obj37_ChkDel
0000B026 D368 000C                  		add.w	d1,$C(a0)
0000B02A 3028 0012                  		move.w	$12(a0),d0
0000B02E E440                       		asr.w	#2,d0
0000B030 9168 0012                  		sub.w	d0,$12(a0)
0000B034 4468 0012                  		neg.w	$12(a0)
0000B038                            
0000B038                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000B038 5328 001F                  		subq.b	#1,$1F(a0)	; Subtract 1
0000B03C 6700 0000                  		beq.w	DeleteObject		; If 0, delete
0000B040 0C78 FF00 F72C             		cmpi.w	#$FF00,($FFFFF72C).w		; is vertical wrapping enabled?
0000B046 6700 0000                  		beq.w	DisplaySprite			; if so, branch
0000B04A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B04E 0640 00E0                  		addi.w	#$E0,d0
0000B052 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000B056 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000B058 6000 0000                  		bra.w	DisplaySprite
0000B05C                            ; ===========================================================================
0000B05C                            
0000B05C                            Obj37_Collect:				; XREF: Obj37_Index
0000B05C 5428 0024                  		addq.b	#2,$24(a0)
0000B060 117C 0000 0020             		move.b	#0,$20(a0)
0000B066 117C 0001 0018             		move.b	#1,$18(a0)
0000B06C 6100 FE74                  		bsr.w	CollectRing
0000B070                            
0000B070                            Obj37_Sparkle:				; XREF: Obj37_Index
0000B070 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000B076 6100 0000                  		bsr.w	AnimateSprite
0000B07A 6000 0000                  		bra.w	DisplaySprite
0000B07E                            ; ===========================================================================
0000B07E                            
0000B07E                            Obj37_Delete:				; XREF: Obj37_Index
0000B07E 6000 0000                  		bra.w	DeleteObject
0000B082                            ; ===========================================================================
0000B082                            ; ---------------------------------------------------------------------------
0000B082                            ; Object 4B - giant ring for entry to special stage
0000B082                            ; ---------------------------------------------------------------------------
0000B082                            
0000B082                            Obj4B:					; XREF: Obj_Index
0000B082 7000                       		moveq	#0,d0
0000B084 1028 0024                  		move.b	$24(a0),d0
0000B088 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000B08C 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000B090                            ; ===========================================================================
0000B090 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000B092 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000B094 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000B096 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000B098                            ; ===========================================================================
0000B098                            
0000B098                            Obj4B_Main:				; XREF: Obj4B_Index
0000B098 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000B0A0 317C 2400 0002             		move.w	#$2400,2(a0)
0000B0A6 0028 0004 0001             		ori.b	#4,1(a0)
0000B0AC 117C 0040 0019             		move.b	#$40,$19(a0)
0000B0B2 4A28 0001                  		tst.b	1(a0)
0000B0B6 6A00                       		bpl.s	Obj4B_Animate
0000B0B8 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000B0BE 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000B0C2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000B0C8 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000B0CA 4EF9 0000 0000             		jmp	(DeleteObject).l
0000B0D0                            
0000B0D0                            ; ===========================================================================
0000B0D0                            
0000B0D0                            Obj4B_Okay:				; XREF: Obj4B_Main
0000B0D0 5428 0024                  		addq.b	#2,$24(a0)
0000B0D4 117C 0002 0018             		move.b	#2,$18(a0)
0000B0DA 117C 0052 0020             		move.b	#$52,$20(a0)
0000B0E0 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000B0E6                            
0000B0E6                            Obj4B_Animate:				; XREF: Obj4B_Index
0000B0E6 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000B0EC 3028 0008                  		move.w	8(a0),d0
0000B0F0 0240 FF80                  		andi.w	#$FF80,d0
0000B0F4 3238 F700                  		move.w	($FFFFF700).w,d1
0000B0F8 0441 0080                  		subi.w	#$80,d1
0000B0FC 0241 FF80                  		andi.w	#$FF80,d1
0000B100 9041                       		sub.w	d1,d0
0000B102 0C40 0280                  		cmpi.w	#$280,d0
0000B106 6300 0000                  		bls.w	DisplaySprite
0000B10A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B10E 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000B112 3440                       		movea.w	d0,a2	; load address into a2
0000B114 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000B118 6000 0000                  		bra.w	DeleteObject	; and delete object
0000B11C                            ; ===========================================================================
0000B11C                            
0000B11C                            Obj4B_Collect:				; XREF: Obj4B_Index
0000B11C 5528 0024                  		subq.b	#2,$24(a0)
0000B120 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B126 11FC 0040 F5D0             		move.b	#$40,(SonimeSST+sonime_facetimer).w
0000B12C 117C 0000 0020             		move.b	#0,$20(a0)
0000B132 6100 0000                  		bsr.w	SingleObjLoad
0000B136 6600 0000                  		bne.w	Obj4B_PlaySnd
0000B13A 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000B13E 3368 0008 0008             		move.w	8(a0),8(a1)
0000B144 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B14A 2348 003C                  		move.l	a0,$3C(a1)
0000B14E 3038 D008                  		move.w	($FFFFD008).w,d0
0000B152 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000B156 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000B158 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000B15E                            
0000B15E                            Obj4B_PlaySnd:
0000B15E 303C 00C3                  		move.w	#$C3,d0
0000B162 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000B168 6000 FF7C                  		bra.w	Obj4B_Animate
0000B16C                            ; ===========================================================================
0000B16C                            
0000B16C                            Obj4B_Delete:				; XREF: Obj4B_Index
0000B16C 6000 0000                  		bra.w	DeleteObject
0000B170                            ; ===========================================================================
0000B170                            ; ---------------------------------------------------------------------------
0000B170                            ; Object 7C - flash effect when	you collect the	giant ring
0000B170                            ; ---------------------------------------------------------------------------
0000B170                            
0000B170                            Obj7C:					; XREF: Obj_Index
0000B170 7000                       		moveq	#0,d0
0000B172 1028 0024                  		move.b	$24(a0),d0
0000B176 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000B17A 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000B17E                            ; ===========================================================================
0000B17E 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000B180 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000B182 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000B184                            ; ===========================================================================
0000B184                            
0000B184                            Obj7C_Main:				; XREF: Obj7C_Index
0000B184 5428 0024                  		addq.b	#2,$24(a0)
0000B188 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000B190 317C 2462 0002             		move.w	#$2462,2(a0)
0000B196 0028 0004 0001             		ori.b	#4,1(a0)
0000B19C 117C 0000 0018             		move.b	#0,$18(a0)
0000B1A2 117C 0020 0019             		move.b	#$20,$19(a0)
0000B1A8 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000B1AE                            
0000B1AE                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000B1AE 6100                       		bsr.s	Obj7C_Collect
0000B1B0 3028 0008                  		move.w	8(a0),d0
0000B1B4 0240 FF80                  		andi.w	#$FF80,d0
0000B1B8 3238 F700                  		move.w	($FFFFF700).w,d1
0000B1BC 0441 0080                  		subi.w	#$80,d1
0000B1C0 0241 FF80                  		andi.w	#$FF80,d1
0000B1C4 9041                       		sub.w	d1,d0
0000B1C6 0C40 0280                  		cmpi.w	#$280,d0
0000B1CA 6300 0000                  		bls.w	DisplaySprite
0000B1CE 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B1D2 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000B1D6 3440                       		movea.w	d0,a2	; load address into a2
0000B1D8 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000B1DC 6000 0000                  		bra.w	DeleteObject	; and delete object
0000B1E0                            
0000B1E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B1E0                            
0000B1E0                            
0000B1E0                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000B1E0 5328 001E                  		subq.b	#1,$1E(a0)
0000B1E4 6A00                       		bpl.s	locret_9F76
0000B1E6 117C 0001 001E             		move.b	#1,$1E(a0)
0000B1EC 5228 001A                  		addq.b	#1,$1A(a0)
0000B1F0 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000B1F6 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000B1F8 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000B1FE 6600                       		bne.s	locret_9F76	; if not, branch
0000B200 2268 003C                  		movea.l	$3C(a0),a1
0000B204 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000B20A 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000B210 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000B216 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000B21A 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000B21E                            
0000B21E                            locret_9F76:
0000B21E 4E75                       		rts	
0000B220                            ; ===========================================================================
0000B220                            
0000B220                            Obj7C_End:				; XREF: Obj7C_Collect
0000B220 5428 0024                  		addq.b	#2,$24(a0)
0000B224 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000B22A 588F                       		addq.l	#4,sp
0000B22C 4E75                       		rts	
0000B22E                            ; End of function Obj7C_Collect
0000B22E                            
0000B22E                            ; ===========================================================================
0000B22E                            
0000B22E                            Obj7C_Delete:				; XREF: Obj7C_Index
0000B22E 6000 0000                  		bra.w	DeleteObject
0000B232                            ; ===========================================================================
0000B232                            Ani_obj25:
0000B232                            	include "_anim\obj25.asm"
0000B232                            ; ---------------------------------------------------------------------------
0000B232                            ; Animation script - ring
0000B232                            ; ---------------------------------------------------------------------------
0000B232 0000                       		dc.w byte_9F8C-Ani_obj25
0000B234 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000B23A                            		even
0000B23A                            		even
0000B23A                            
0000B23A                            ; ---------------------------------------------------------------------------
0000B23A                            ; Sprite mappings - rings
0000B23A                            ; ---------------------------------------------------------------------------
0000B23A                            Map_obj25:
0000B23A                            	include "_maps\obj25.asm"
0000B23A                            ; ---------------------------------------------------------------------------
0000B23A                            ; Sprite mappings - rings
0000B23A                            ; ---------------------------------------------------------------------------
0000B23A 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000B23E 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000B242 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000B246 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000B24A 01                         byte_9FA2:	dc.b 1
0000B24B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000B250 01                         byte_9FA8:	dc.b 1
0000B251 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000B256 01                         byte_9FAE:	dc.b 1
0000B257 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000B25C 01                         byte_9FB4:	dc.b 1
0000B25D F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000B262 01                         byte_9FBA:	dc.b 1
0000B263 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000B268 01                         byte_9FC0:	dc.b 1
0000B269 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000B26E 01                         byte_9FC6:	dc.b 1
0000B26F F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000B274 01                         byte_9FCC:	dc.b 1
0000B275 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000B27A                            		even
0000B27A                            		even
0000B27A                            
0000B27A                            ; ---------------------------------------------------------------------------
0000B27A                            ; Sprite mappings - giant ring
0000B27A                            ; ---------------------------------------------------------------------------
0000B27A                            Map_obj4B:
0000B27A                            	include "_maps\obj4B.asm"
0000B27A                            ; ---------------------------------------------------------------------------
0000B27A                            ; Sprite mappings - giant ring
0000B27A                            ; ---------------------------------------------------------------------------
0000B27A 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000B27E 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000B282 0A                         byte_9FDA:	dc.b $A
0000B283 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000B288 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000B28D E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000B292 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000B297 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000B29C F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000B2A1 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000B2A6 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000B2AB 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000B2B0 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000B2B5 08                         byte_A00D:	dc.b 8
0000B2B6 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000B2BB E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000B2C0 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000B2C5 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000B2CA F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000B2CF 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000B2D4 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000B2D9 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000B2DE 04                         byte_A036:	dc.b 4
0000B2DF E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000B2E4 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000B2E9 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000B2EE 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000B2F3 08                         byte_A04B:	dc.b 8
0000B2F4 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000B2F9 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000B2FE E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000B303 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000B308 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000B30D 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000B312 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000B317 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000B31C                            		even
0000B31C                            		even
0000B31C                            
0000B31C                            ; ---------------------------------------------------------------------------
0000B31C                            ; Sprite mappings - flash effect when you collect the giant ring
0000B31C                            ; ---------------------------------------------------------------------------
0000B31C                            Map_obj7C:
0000B31C                            	include "_maps\obj7C.asm"
0000B31C                            ; ---------------------------------------------------------------------------
0000B31C                            ; Sprite mappings - flash effect when you collect the giant ring
0000B31C                            ; ---------------------------------------------------------------------------
0000B31C 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000B320 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000B324 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000B328 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000B32C 02                         byte_A084:	dc.b 2
0000B32D E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000B332 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000B337 04                         byte_A08F:	dc.b 4
0000B338 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000B33D E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000B342 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000B347 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000B34C 04                         byte_A0A4:	dc.b 4
0000B34D E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000B352 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000B357 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000B35C 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000B361 04                         byte_A0B9:	dc.b 4
0000B362 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000B367 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000B36C 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000B371 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000B376 04                         byte_A0CE:	dc.b 4
0000B377 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000B37C E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000B381 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000B386 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000B38B 04                         byte_A0E3:	dc.b 4
0000B38C E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000B391 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000B396 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000B39B 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000B3A0 02                         byte_A0F8:	dc.b 2
0000B3A1 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000B3A6 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000B3AB 04                         byte_A103:	dc.b 4
0000B3AC E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000B3B1 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000B3B6 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000B3BB 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000B3C0                            		even
0000B3C0                            		even
0000B3C0                            
0000B3C0                            ; ===========================================================================
0000B3C0                            ; ---------------------------------------------------------------------------
0000B3C0                            ; Object 26 - monitors
0000B3C0                            ; ---------------------------------------------------------------------------
0000B3C0                            
0000B3C0                            Obj26:					; XREF: Obj_Index
0000B3C0 7000                       		moveq	#0,d0
0000B3C2 1028 0024                  		move.b	$24(a0),d0
0000B3C6 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000B3CA 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000B3CE                            ; ===========================================================================
0000B3CE 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000B3D0 0000                       		dc.w Obj26_Solid-Obj26_Index
0000B3D2 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000B3D4 0000                       		dc.w Obj26_Animate-Obj26_Index
0000B3D6 0000                       		dc.w Obj26_Display-Obj26_Index
0000B3D8                            ; ===========================================================================
0000B3D8                            
0000B3D8                            Obj26_Main:				; XREF: Obj26_Index
0000B3D8 5428 0024                  		addq.b	#2,$24(a0)
0000B3DC 117C 000E 0016             		move.b	#$E,$16(a0)
0000B3E2 117C 000E 0017             		move.b	#$E,$17(a0)
0000B3E8 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000B3F0 317C 0680 0002             		move.w	#$680,2(a0)
0000B3F6 117C 0004 0001             		move.b	#4,1(a0)
0000B3FC 117C 0003 0018             		move.b	#3,$18(a0)
0000B402 117C 000F 0019             		move.b	#$F,$19(a0)
0000B408 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B40C 3440                       		movea.w	d0,a2	; load address into a2
0000B40E 0812 0000                  		btst	#0,(a2)	; has monitor been broken?
0000B412 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000B414 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000B41A 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000B420 4E75                       		rts	
0000B422                            ; ===========================================================================
0000B422                            
0000B422                            Obj26_NotBroken:			; XREF: Obj26_Main
0000B422 117C 0046 0020             		move.b	#$46,$20(a0)
0000B428 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000B42E                            
0000B42E                            Obj26_Solid:				; XREF: Obj26_Index
0000B42E 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000B432 6700                       		beq.s	loc_A1EC	; if not, branch
0000B434 5500                       		subq.b	#2,d0
0000B436 6600                       		bne.s	Obj26_Fall
0000B438 7200                       		moveq	#0,d1
0000B43A 1228 0019                  		move.b	$19(a0),d1
0000B43E 0641 000B                  		addi.w	#$B,d1
0000B442 6100 D260                  		bsr.w	ExitPlatform
0000B446 0829 0003 0022             		btst	#3,$22(a1)
0000B44C 6600 0000                  		bne.w	loc_A1BC
0000B450 4228 0025                  		clr.b	$25(a0)
0000B454 6000 0000                  		bra.w	Obj26_Animate
0000B458                            ; ===========================================================================
0000B458                            
0000B458                            loc_A1BC:				; XREF: Obj26_Solid
0000B458 363C 0010                  		move.w	#$10,d3
0000B45C 3428 0008                  		move.w	8(a0),d2
0000B460 6100 D7AC                  		bsr.w	MvSonicOnPtfm
0000B464 6000 0000                  		bra.w	Obj26_Animate
0000B468                            ; ===========================================================================
0000B468                            
0000B468                            Obj26_Fall:				; XREF: Obj26_Solid
0000B468 6100 0000                  		bsr.w	ObjectFall
0000B46C 4EB9 0000 0000             		jsr	ObjHitFloor
0000B472 4A41                       		tst.w	d1
0000B474 6A00 0000                  		bpl.w	Obj26_Animate
0000B478 D368 000C                  		add.w	d1,$C(a0)
0000B47C 4268 0012                  		clr.w	$12(a0)
0000B480 4228 0025                  		clr.b	$25(a0)
0000B484 6000 0000                  		bra.w	Obj26_Animate
0000B488                            ; ===========================================================================
0000B488                            
0000B488                            loc_A1EC:				; XREF: Obj26_Solid
0000B488 323C 001A                  		move.w	#$1A,d1
0000B48C 343C 000F                  		move.w	#$F,d2
0000B490 6100 0000                  		bsr.w	Obj26_SolidSides
0000B494 6700 0000                  		beq.w	loc_A25C
0000B498 4A69 0012                  		tst.w	$12(a1)
0000B49C 6B00                       		bmi.s	loc_A20A
0000B49E 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000B4A4 6700                       		beq.s	loc_A25C	; if yes, branch
0000B4A6                            
0000B4A6                            loc_A20A:
0000B4A6 4A41                       		tst.w	d1
0000B4A8 6A00                       		bpl.s	loc_A220
0000B4AA 9769 000C                  		sub.w	d3,$C(a1)
0000B4AE 6100 D0E2                  		bsr.w	loc_74AE
0000B4B2 117C 0002 0025             		move.b	#2,$25(a0)
0000B4B8 6000 0000                  		bra.w	Obj26_Animate
0000B4BC                            ; ===========================================================================
0000B4BC                            
0000B4BC                            loc_A220:
0000B4BC 4A40                       		tst.w	d0
0000B4BE 6700 0000                  		beq.w	loc_A246
0000B4C2 6B00                       		bmi.s	loc_A230
0000B4C4 4A69 0010                  		tst.w	$10(a1)
0000B4C8 6B00                       		bmi.s	loc_A246
0000B4CA 6000                       		bra.s	loc_A236
0000B4CC                            ; ===========================================================================
0000B4CC                            
0000B4CC                            loc_A230:
0000B4CC 4A69 0010                  		tst.w	$10(a1)
0000B4D0 6A00                       		bpl.s	loc_A246
0000B4D2                            
0000B4D2                            loc_A236:
0000B4D2 9169 0008                  		sub.w	d0,8(a1)
0000B4D6 337C 0000 0020             		move.w	#0,$20(a1)
0000B4DC 337C 0000 0010             		move.w	#0,$10(a1)
0000B4E2                            
0000B4E2                            loc_A246:
0000B4E2 0829 0001 0022             		btst	#1,$22(a1)
0000B4E8 6600                       		bne.s	loc_A26A
0000B4EA 08E9 0005 0022             		bset	#5,$22(a1)
0000B4F0 08E8 0005 0022             		bset	#5,$22(a0)
0000B4F6 6000                       		bra.s	Obj26_Animate
0000B4F8                            ; ===========================================================================
0000B4F8                            
0000B4F8                            loc_A25C:
0000B4F8 0828 0005 0022             		btst	#5,$22(a0)
0000B4FE 6700                       		beq.s	Obj26_Animate
0000B500 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0000B506 6700                       		beq.s	loc_A26A
0000B508 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
0000B50E 6700                       		beq.s	loc_A26A
0000B510 337C 0001 001C             		move.w	#1,$1C(a1)
0000B516                            
0000B516                            loc_A26A:
0000B516 08A8 0005 0022             		bclr	#5,$22(a0)
0000B51C 08A9 0005 0022             		bclr	#5,$22(a1)
0000B522                            
0000B522                            Obj26_Animate:				; XREF: Obj26_Index
0000B522 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000B528 6100 0000                  		bsr.w	AnimateSprite
0000B52C                            
0000B52C                            Obj26_Display:				; XREF: Obj26_Index
0000B52C 6000 0000                  		bra.w	MarkObjGone
0000B530                            ; ===========================================================================
0000B530                            
0000B530                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000B530 5428 0024                  		addq.b	#2,$24(a0)
0000B534 117C 0000 0020             		move.b	#0,$20(a0)
0000B53A 6100 0000                  		bsr.w	SingleObjLoad
0000B53E 6600                       		bne.s	Obj26_Explode
0000B540 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000B544 3368 0008 0008             		move.w	8(a0),8(a1)
0000B54A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B550 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000B556                            
0000B556                            Obj26_Explode:
0000B556 6100 0000                  		bsr.w	SingleObjLoad
0000B55A 6600                       		bne.s	Obj26_SetBroken
0000B55C 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000B560 5429 0024                  		addq.b	#2,$24(a1)
0000B564 3368 0008 0008             		move.w	8(a0),8(a1)
0000B56A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B570                            
0000B570                            Obj26_SetBroken:
0000B570 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B574 6700                       		beq.s	@notremembered			; If it's zero, it isn't remembered
0000B576 3440                       		movea.w	d0,a2	; load address into a2
0000B578 08D2 0000                  		bset	#0,(a2)
0000B57C                            
0000B57C                            	@notremembered:
0000B57C 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000B582 6000 0000                  		bra.w	DisplaySprite
0000B586                            ; ===========================================================================
0000B586                            ; ---------------------------------------------------------------------------
0000B586                            ; Object 2E - contents of monitors
0000B586                            ; ---------------------------------------------------------------------------
0000B586                            
0000B586                            Obj2E:					; XREF: Obj_Index
0000B586 7000                       		moveq	#0,d0
0000B588 1028 0024                  		move.b	$24(a0),d0
0000B58C 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000B590 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000B594 6000 0000                  		bra.w	DisplaySprite
0000B598                            ; ===========================================================================
0000B598 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000B59A 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000B59C 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000B59E                            ; ===========================================================================
0000B59E                            
0000B59E                            Obj2E_Main:				; XREF: Obj2E_Index
0000B59E 5428 0024                  		addq.b	#2,$24(a0)
0000B5A2 317C 0680 0002             		move.w	#$680,2(a0)
0000B5A8 117C 0024 0001             		move.b	#$24,1(a0)
0000B5AE 117C 0003 0018             		move.b	#3,$18(a0)
0000B5B4 117C 0008 0019             		move.b	#8,$19(a0)
0000B5BA 317C FD00 0012             		move.w	#-$300,$12(a0)
0000B5C0 7000                       		moveq	#0,d0
0000B5C2 1028 001C                  		move.b	$1C(a0),d0
0000B5C6 5400                       		addq.b	#2,d0
0000B5C8 1140 001A                  		move.b	d0,$1A(a0)
0000B5CC 227C 0000 0000             		movea.l	#Map_obj26,a1
0000B5D2 D000                       		add.b	d0,d0
0000B5D4 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000B5D8 5249                       		addq.w	#1,a1
0000B5DA 2149 0004                  		move.l	a1,4(a0)
0000B5DE                            
0000B5DE                            Obj2E_Move:				; XREF: Obj2E_Index
0000B5DE 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000B5E2 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000B5E6 6100 0000                  		bsr.w	SpeedToPos
0000B5EA 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000B5F0 4E75                       		rts	
0000B5F2                            ; ===========================================================================
0000B5F2                            
0000B5F2                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000B5F2 5428 0024                  		addq.b	#2,$24(a0)
0000B5F6 317C 001D 001E             		move.w	#29,$1E(a0)
0000B5FC 1028 001C                  		move.b	$1C(a0),d0
0000B600 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000B604 6600                       		bne.s	Obj2E_ChkSonic
0000B606 4E75                       		rts			; Eggman monitor does nothing
0000B608                            ; ===========================================================================
0000B608                            
0000B608                            Obj2E_ChkSonic:
0000B608 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000B60C 6600                       		bne.s	Obj2E_ChkShoes
0000B60E                            
0000B60E                            ExtraLife:
0000B60E 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B614 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000B61A 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000B61E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000B622 303C 0088                  		move.w	#$88,d0
0000B626 4EF9 0000 121A             		jmp	(PlaySound).l	; play extra life music
0000B62C                            ; ===========================================================================
0000B62C                            
0000B62C                            Obj2E_ChkShoes:
0000B62C 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000B630 6600                       		bne.s	Obj2E_ChkShield
0000B632 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000B638 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000B63E 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000B644 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000B64A 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000B650 303C 00E2                  		move.w	#$E2,d0
0000B654 4EF9 0000 121A             		jmp	(PlaySound).l	; Speed	up the music
0000B65A                            ; ===========================================================================
0000B65A                            
0000B65A                            Obj2E_ChkShield:
0000B65A 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000B65E 6600                       		bne.s	Obj2E_ChkInvinc
0000B660 4A38 FE2C                  		tst.b	($FFFFFE2C).w
0000B664 6600                       		bne.s	@alreadyshield
0000B666 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B66C 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000B672 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000B678 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000B67E                            
0000B67E                            	@alreadyshield:
0000B67E 303C 00AF                  		move.w	#$AF,d0
0000B682 4EF9 0000 121A             		jmp	(PlaySound).l	; play shield sound
0000B688                            ; ===========================================================================
0000B688                            
0000B688                            Obj2E_ChkInvinc:
0000B688 0C00 0005                  		cmpi.b #5,d0 ; does monitor contain invincibility?
0000B68C 6600 0000                  		bne.w Obj2E_ChkRings
0000B690 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B696 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000B69C 11FC 0001 FE2D             		move.b #1,($FFFFFE2D).w ; Set Invisibility to 1
0000B6A2 31FC 04B0 D032             		move.w #$4B0,($FFFFD032).w ; Set Invisibility timer to 4B0
0000B6A8 11FC 004A D200             		move.b #$4A,($FFFFD200).w ; load stars object ($3801)
0000B6AE 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000B6B4 4A38 F7AA                  		tst.b ($FFFFF7AA).w ; is boss mode on?
0000B6B8 6600                       		bne.s DontPlayMusic ; If so, don't play music
0000B6BA 0C78 000C FE14             		cmpi.w #$C,($FFFFFE14).w ; Check if Sonic has air left
0000B6C0 6300                       		bls.s DontPlayMusic ; If so, don't play music
0000B6C2 303C 0087                  		move.w #$87,d0 ; Load Invisibility music
0000B6C6 4EF9 0000 121A             		jmp (PlaySound).l
0000B6CC                            
0000B6CC                            DontPlayMusic:
0000B6CC 4E75                       		rts
0000B6CE                            ; ===========================================================================
0000B6CE                            
0000B6CE                            Obj2E_NoMusic:
0000B6CE 4E75                       		rts	
0000B6D0                            ; ===========================================================================
0000B6D0                            
0000B6D0                            Obj2E_ChkRings:
0000B6D0 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000B6D4 6600                       		bne.s	Obj2E_ChkS
0000B6D6 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000B6DC 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000B6E2 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000B6E8 6500                       		bcs.s	Obj2E_RingSound
0000B6EA 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000B6F0 6700 FF1C                  		beq.w	ExtraLife
0000B6F4 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000B6FA 6500                       		bcs.s	Obj2E_RingSound
0000B6FC 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000B702 6700 FF0A                  		beq.w	ExtraLife
0000B706                            
0000B706                            Obj2E_RingSound:
0000B706 303C 00B5                  		move.w	#$B5,d0
0000B70A 4EF9 0000 121A             		jmp	(PlaySound).l	; play ring sound
0000B710                            ; ===========================================================================
0000B710                            
0000B710                            Obj2E_ChkS:
0000B710 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000B714 6600                       		bne.s	Obj2E_ChkEnd
0000B716 4E71                       		nop	
0000B718                            
0000B718                            Obj2E_ChkEnd:
0000B718 4E75                       		rts			; 'S' and goggles monitors do nothing
0000B71A                            ; ===========================================================================
0000B71A                            
0000B71A                            Obj2E_Delete:				; XREF: Obj2E_Index
0000B71A 5368 001E                  		subq.w	#1,$1E(a0)
0000B71E 6B00 0000                  		bmi.w	DeleteObject
0000B722 4E75                       		rts	
0000B724                            ; ---------------------------------------------------------------------------
0000B724                            ; Subroutine to	make the sides of a monitor solid
0000B724                            ; ---------------------------------------------------------------------------
0000B724                            
0000B724                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B724                            
0000B724                            
0000B724                            Obj26_SolidSides:			; XREF: loc_A1EC
0000B724 43F8 D000                  		lea	($FFFFD000).w,a1
0000B728 3029 0008                  		move.w	8(a1),d0
0000B72C 9068 0008                  		sub.w	8(a0),d0
0000B730 D041                       		add.w	d1,d0
0000B732 6B00                       		bmi.s	loc_A4E6
0000B734 3601                       		move.w	d1,d3
0000B736 D643                       		add.w	d3,d3
0000B738 B043                       		cmp.w	d3,d0
0000B73A 6200                       		bhi.s	loc_A4E6
0000B73C 1629 0016                  		move.b	$16(a1),d3
0000B740 4883                       		ext.w	d3
0000B742 D443                       		add.w	d3,d2
0000B744 3629 000C                  		move.w	$C(a1),d3
0000B748 9668 000C                  		sub.w	$C(a0),d3
0000B74C D642                       		add.w	d2,d3
0000B74E 6B00                       		bmi.s	loc_A4E6
0000B750 D442                       		add.w	d2,d2
0000B752 B642                       		cmp.w	d2,d3
0000B754 6400                       		bcc.s	loc_A4E6
0000B756 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000B75A 6B00                       		bmi.s	loc_A4E6
0000B75C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000B762 6400                       		bcc.s	loc_A4E6
0000B764 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B768 6600                       		bne.s	loc_A4E6
0000B76A B240                       		cmp.w	d0,d1
0000B76C 6400                       		bcc.s	loc_A4DC
0000B76E D241                       		add.w	d1,d1
0000B770 9041                       		sub.w	d1,d0
0000B772                            
0000B772                            loc_A4DC:
0000B772 0C43 0010                  		cmpi.w	#$10,d3
0000B776 6500                       		bcs.s	loc_A4EA
0000B778                            
0000B778                            loc_A4E2:
0000B778 7201                       		moveq	#1,d1
0000B77A 4E75                       		rts	
0000B77C                            ; ===========================================================================
0000B77C                            
0000B77C                            loc_A4E6:
0000B77C 7200                       		moveq	#0,d1
0000B77E 4E75                       		rts	
0000B780                            ; ===========================================================================
0000B780                            
0000B780                            loc_A4EA:
0000B780 7200                       		moveq	#0,d1
0000B782 1228 0019                  		move.b	$19(a0),d1
0000B786 5841                       		addq.w	#4,d1
0000B788 3401                       		move.w	d1,d2
0000B78A D442                       		add.w	d2,d2
0000B78C D269 0008                  		add.w	8(a1),d1
0000B790 9268 0008                  		sub.w	8(a0),d1
0000B794 6BE2                       		bmi.s	loc_A4E2
0000B796 B242                       		cmp.w	d2,d1
0000B798 64DE                       		bcc.s	loc_A4E2
0000B79A 72FF                       		moveq	#-1,d1
0000B79C 4E75                       		rts	
0000B79E                            ; End of function Obj26_SolidSides
0000B79E                            
0000B79E                            ; ===========================================================================
0000B79E                            Ani_obj26:
0000B79E                            	include "_anim\obj26.asm"
0000B79E                            ; ---------------------------------------------------------------------------
0000B79E                            ; Animation script - monitors
0000B79E                            ; ---------------------------------------------------------------------------
0000B79E 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000B7A4 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000B7AA 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000B7B0 0000                       		dc.w byte_A582-Ani_obj26
0000B7B2 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000B7B8 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000B7C4 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000B7D0 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000B7DC 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000B7E8 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000B7F4 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000B800 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000B80C 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000B818 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000B820                            		even
0000B820                            		even
0000B820                            
0000B820                            ; ---------------------------------------------------------------------------
0000B820                            ; Sprite mappings - monitors
0000B820                            ; ---------------------------------------------------------------------------
0000B820                            Map_obj26:
0000B820                            	include "_maps\obj26.asm"
0000B820                            ; --------------------------------------------------------------------------------
0000B820                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B820                            ; --------------------------------------------------------------------------------
0000B820                            
0000B820                            SME_XK1AB:	
0000B820 0000 0000                  		dc.w SME_XK1AB_18-SME_XK1AB, SME_XK1AB_1E-SME_XK1AB	
0000B824 0000 0000                  		dc.w SME_XK1AB_29-SME_XK1AB, SME_XK1AB_34-SME_XK1AB	
0000B828 0000 0000                  		dc.w SME_XK1AB_35-SME_XK1AB, SME_XK1AB_40-SME_XK1AB	
0000B82C 0000 0000                  		dc.w SME_XK1AB_4B-SME_XK1AB, SME_XK1AB_56-SME_XK1AB	
0000B830 0000 0000                  		dc.w SME_XK1AB_61-SME_XK1AB, SME_XK1AB_6C-SME_XK1AB	
0000B834 0000 0000                  		dc.w SME_XK1AB_6D-SME_XK1AB, SME_XK1AB_6E-SME_XK1AB	
0000B838 01                         SME_XK1AB_18:	dc.b 1	
0000B839 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B83E 02                         SME_XK1AB_1E:	dc.b 2	
0000B83F F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000B844 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B849 02                         SME_XK1AB_29:	dc.b 2	
0000B84A F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000B84F EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B854 00                         SME_XK1AB_34:	dc.b 0	
0000B855 02                         SME_XK1AB_35:	dc.b 2	
0000B856 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000B85B EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B860 02                         SME_XK1AB_40:	dc.b 2	
0000B861 F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000B866 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B86B 02                         SME_XK1AB_4B:	dc.b 2	
0000B86C F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000B871 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B876 02                         SME_XK1AB_56:	dc.b 2	
0000B877 F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000B87C EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B881 02                         SME_XK1AB_61:	dc.b 2	
0000B882 F505 0028 F8               		dc.b $F5, 5, 0, $28, $F8	
0000B887 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B88C 00                         SME_XK1AB_6C:	dc.b 0	
0000B88D 00                         SME_XK1AB_6D:	dc.b 0	
0000B88E 01                         SME_XK1AB_6E:	dc.b 1	
0000B88F FF0D 002C F0               		dc.b $FF, $D, 0, $2C, $F0	
0000B894                            		even
0000B894                            		even
0000B894                            
0000B894                            ; ===========================================================================
0000B894                            ; ---------------------------------------------------------------------------
0000B894                            ; Object 0E - Sonic on the title screen
0000B894                            ; ---------------------------------------------------------------------------
0000B894                            
0000B894                            Obj0E:					; XREF: Obj_Index
0000B894 7000                       		moveq	#0,d0
0000B896 1028 0024                  		move.b	$24(a0),d0
0000B89A 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000B89E 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000B8A2                            ; ===========================================================================
0000B8A2 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000B8A4 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000B8A6 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000B8A8 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000B8AA                            ; ===========================================================================
0000B8AA                            
0000B8AA                            Obj0E_Main:				; XREF: Obj0E_Index
0000B8AA 5428 0024                  		addq.b	#2,$24(a0)
0000B8AE 317C 00F0 0008             		move.w	#$F0,8(a0)
0000B8B4 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000B8BA 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000B8C2 317C 0300 0002             		move.w	#$300,2(a0)
0000B8C8 117C 0001 0018             		move.b	#1,$18(a0)
0000B8CE 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000B8D4 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B8DA 6100 0000                  		bsr.w	AnimateSprite
0000B8DE                            
0000B8DE                            Obj0E_Delay:				; XREF: Obj0E_Index
0000B8DE 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000B8E2 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000B8E4 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000B8E8 6000 0000                  		bra.w	DisplaySprite
0000B8EC                            ; ===========================================================================
0000B8EC                            
0000B8EC                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000B8EC 4E75                       		rts	
0000B8EE                            ; ===========================================================================
0000B8EE                            
0000B8EE                            Obj0E_Move:				; XREF: Obj0E_Index
0000B8EE 5168 000A                  		subq.w	#8,$A(a0)
0000B8F2 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000B8F8 6600                       		bne.s	Obj0E_Display
0000B8FA 5428 0024                  		addq.b	#2,$24(a0)
0000B8FE                            
0000B8FE                            Obj0E_Display:
0000B8FE 6000 0000                  		bra.w	DisplaySprite
0000B902                            ; ===========================================================================
0000B902 4E75                       		rts	
0000B904                            ; ===========================================================================
0000B904                            
0000B904                            Obj0E_Animate:				; XREF: Obj0E_Index
0000B904 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B90A 6100 0000                  		bsr.w	AnimateSprite
0000B90E 6000 0000                  		bra.w	DisplaySprite
0000B912                            ; ===========================================================================
0000B912 4E75                       		rts	
0000B914                            ; ===========================================================================
0000B914                            ; ---------------------------------------------------------------------------
0000B914                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000B914                            ; ---------------------------------------------------------------------------
0000B914                            
0000B914                            Obj0F:					; XREF: Obj_Index
0000B914 7000                       		moveq	#0,d0
0000B916 1028 0024                  		move.b	$24(a0),d0
0000B91A 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000B91E 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000B922 6000 0000                  		bra.w	DisplaySprite
0000B926                            ; ===========================================================================
0000B926 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000B928 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000B92A 0000                       		dc.w locret_A6F8-Obj0F_Index
0000B92C                            ; ===========================================================================
0000B92C                            
0000B92C                            Obj0F_Main:				; XREF: Obj0F_Index
0000B92C 5428 0024                  		addq.b	#2,$24(a0)
0000B930 317C 00D0 0008             		move.w	#$D0,8(a0)
0000B936 317C 0130 000A             		move.w	#$130,$A(a0)
0000B93C 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B944 317C 2200 0002             		move.w	#$2200,2(a0)
0000B94A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B950 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B952 5428 0024                  		addq.b	#2,$24(a0)
0000B956 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B95C 6600                       		bne.s	locret_A6F8	; if not, branch
0000B95E 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B964 317C 0170 0008             		move.w	#$170,8(a0)
0000B96A 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B970                            
0000B970                            locret_A6F8:				; XREF: Obj0F_Index
0000B970 4E75                       		rts	
0000B972                            ; ===========================================================================
0000B972                            
0000B972                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B972 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B978 6000 0000                  		bra.w	AnimateSprite
0000B97C                            ; ===========================================================================
0000B97C                            Ani_obj0E:
0000B97C                            	include "_anim\obj0E.asm"
0000B97C                            ; ---------------------------------------------------------------------------
0000B97C                            ; Animation script - Sonic on the title screen
0000B97C                            ; ---------------------------------------------------------------------------
0000B97C 0000                       		dc.w byte_A706-Ani_obj0E
0000B97E 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B98A                            		even
0000B98A                            		even
0000B98A                            
0000B98A                            Ani_obj0F:
0000B98A                            	include "_anim\obj0F.asm"
0000B98A                            ; ---------------------------------------------------------------------------
0000B98A                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B98A                            ; ---------------------------------------------------------------------------
0000B98A 0000                       		dc.w byte_A714-Ani_obj0F
0000B98C 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B990                            		even
0000B990                            		even
0000B990                            
0000B990                            ; ---------------------------------------------------------------------------
0000B990                            ; Subroutine to	animate	a sprite using an animation script
0000B990                            ; ---------------------------------------------------------------------------
0000B990                            
0000B990                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B990                            
0000B990                            
0000B990                            AnimateSprite:
0000B990 7000                       		moveq	#0,d0
0000B992 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B996 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B99A 6700                       		beq.s	Anim_Run	; if not, branch
0000B99C 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B9A0 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B9A6 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B9AC                            
0000B9AC                            Anim_Run:
0000B9AC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B9B0 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B9B2 D040                       		add.w	d0,d0
0000B9B4 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B9B8 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B9BC 7200                       		moveq	#0,d1
0000B9BE 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B9C2 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B9C6 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000B9C8                            
0000B9C8                            Anim_Next:
0000B9C8 1200                       		move.b	d0,d1
0000B9CA 0200 001F                  		andi.b	#$1F,d0
0000B9CE 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B9D2 1028 0022                  		move.b	$22(a0),d0
0000B9D6 E719                       		rol.b	#3,d1
0000B9D8 B101                       		eor.b	d0,d1
0000B9DA 0201 0003                  		andi.b	#3,d1
0000B9DE 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B9E4 8328 0001                  		or.b	d1,1(a0)
0000B9E8 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B9EC                            
0000B9EC                            Anim_Wait:
0000B9EC 4E75                       		rts	
0000B9EE                            ; ===========================================================================
0000B9EE                            
0000B9EE                            Anim_End_FF:
0000B9EE 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B9F0 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B9F2 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B9F8 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B9FC 60CA                       		bra.s	Anim_Next
0000B9FE                            ; ===========================================================================
0000B9FE                            
0000B9FE                            Anim_End_FE:
0000B9FE 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000BA00 6600                       		bne.s	Anim_End_FD	; if not, branch
0000BA02 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000BA06 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000BA0A 9200                       		sub.b	d0,d1
0000BA0C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000BA10 60B6                       		bra.s	Anim_Next
0000BA12                            ; ===========================================================================
0000BA12                            
0000BA12                            Anim_End_FD:
0000BA12 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000BA14 6600                       		bne.s	Anim_End_FC	; if not, branch
0000BA16 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000BA1C                            
0000BA1C                            Anim_End_FC:
0000BA1C 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000BA1E 6600                       		bne.s	Anim_End_FB	; if not, branch
0000BA20 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000BA24                            
0000BA24                            Anim_End_FB:
0000BA24 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000BA26 6600                       		bne.s	Anim_End_FA	; if not, branch
0000BA28 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000BA2E 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000BA32                            
0000BA32                            Anim_End_FA:
0000BA32 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000BA34 6600                       		bne.s	Anim_End	; if not, branch
0000BA36 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000BA3A                            
0000BA3A                            Anim_End:
0000BA3A 4E75                       		rts	
0000BA3C                            ; End of function AnimateSprite
0000BA3C                            
0000BA3C                            ; ===========================================================================
0000BA3C                            ; ---------------------------------------------------------------------------
0000BA3C                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000BA3C                            ; ---------------------------------------------------------------------------
0000BA3C                            Map_obj0F:
0000BA3C                            	include "_maps\obj0F.asm"
0000BA3C                            ; ---------------------------------------------------------------------------
0000BA3C                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000BA3C                            ; ---------------------------------------------------------------------------
0000BA3C 0000                       		dc.w byte_A7CD-Map_obj0F
0000BA3E 0000                       		dc.w byte_A7CC-Map_obj0F
0000BA40 0000                       		dc.w byte_A7EB-Map_obj0F
0000BA42 0000                       		dc.w byte_A882-Map_obj0F
0000BA44 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000BA45 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000BA4A 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000BA4F 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000BA54 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000BA59 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000BA5E 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000BA63 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000BA64 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA69 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA6E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA73 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA78 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA7D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA82 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA87 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA8C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA91 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA96 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BA9B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BAA0 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BAA5 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BAAA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BAAF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BAB4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BAB9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BABE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BAC3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BAC8 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BACD F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAD2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAD7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BADC F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAE1 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAE6 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAEB F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAF0 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAF5 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAFA 01                         byte_A882:	dc.b 1			; "TM"
0000BAFB FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000BB00                            		even
0000BB00                            		even
0000BB00                            
0000BB00                            ; ---------------------------------------------------------------------------
0000BB00                            ; Sprite mappings - Sonic on the title screen
0000BB00                            ; ---------------------------------------------------------------------------
0000BB00                            Map_obj0E:
0000BB00                            	include "_maps\obj0E.asm"
0000BB00                            ; ---------------------------------------------------------------------------
0000BB00                            ; Sprite mappings - Sonic on the title screen
0000BB00                            ; ---------------------------------------------------------------------------
0000BB00 0000                       		dc.w byte_A898-Map_obj0E
0000BB02 0000                       		dc.w byte_A8CB-Map_obj0E
0000BB04 0000                       		dc.w byte_A917-Map_obj0E
0000BB06 0000                       		dc.w byte_A96D-Map_obj0E
0000BB08 0000                       		dc.w byte_A9AF-Map_obj0E
0000BB0A 0000                       		dc.w byte_A9E7-Map_obj0E
0000BB0C 0000                       		dc.w byte_AA47-Map_obj0E
0000BB0E 0000                       		dc.w byte_AAB1-Map_obj0E
0000BB10 0A                         byte_A898:	dc.b $A
0000BB11 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000BB16 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000BB1B 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000BB20 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000BB25 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000BB2A 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000BB2F 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000BB34 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000BB39 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000BB3E 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000BB43 0F                         byte_A8CB:	dc.b $F
0000BB44 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000BB49 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000BB4E 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000BB53 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000BB58 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000BB5D 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000BB62 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000BB67 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000BB6C 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000BB71 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000BB76 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000BB7B 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000BB80 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000BB85 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000BB8A 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000BB8F 11                         byte_A917:	dc.b $11
0000BB90 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000BB95 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000BB9A 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000BB9F 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000BBA4 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000BBA9 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000BBAE 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000BBB3 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000BBB8 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000BBBD 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000BBC2 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000BBC7 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000BBCC 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000BBD1 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000BBD6 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000BBDB 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000BBE0 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000BBE5 0D                         byte_A96D:	dc.b $D
0000BBE6 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000BBEB 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000BBF0 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000BBF5 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000BBFA 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000BBFF 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000BC04 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000BC09 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000BC0E 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000BC13 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000BC18 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000BC1D 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000BC22 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000BC27 0B                         byte_A9AF:	dc.b $B
0000BC28 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000BC2D 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000BC32 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000BC37 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000BC3C 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000BC41 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000BC46 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000BC4B 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000BC50 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000BC55 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000BC5A 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000BC5F 13                         byte_A9E7:	dc.b $13
0000BC60 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000BC65 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000BC6A 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000BC6F 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000BC74 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000BC79 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000BC7E 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000BC83 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000BC88 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000BC8D 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000BC92 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000BC97 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000BC9C 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000BCA1 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000BCA6 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000BCAB 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000BCB0 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000BCB5 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000BCBA 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000BCBF 15                         byte_AA47:	dc.b $15
0000BCC0 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000BCC5 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000BCCA 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000BCCF 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000BCD4 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000BCD9 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000BCDE 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000BCE3 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000BCE8 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000BCED 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000BCF2 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000BCF7 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000BCFC 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000BD01 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000BD06 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000BD0B 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000BD10 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000BD15 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000BD1A 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000BD1F 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000BD24 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000BD29 16                         byte_AAB1:	dc.b $16
0000BD2A 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000BD2F 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000BD34 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000BD39 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000BD3E 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000BD43 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000BD48 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000BD4D 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000BD52 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000BD57 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000BD5C 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000BD61 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000BD66 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000BD6B 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000BD70 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000BD75 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000BD7A 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000BD7F 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000BD84 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000BD89 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000BD8E 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000BD93 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000BD98                            		even
0000BD98                            		even
0000BD98                            
0000BD98                            ; ===========================================================================
0000BD98                            ; ---------------------------------------------------------------------------
0000BD98                            ; Object 2B - Chopper enemy (GHZ)
0000BD98                            ; ---------------------------------------------------------------------------
0000BD98                            
0000BD98                            Obj2B:					; XREF: Obj_Index
0000BD98 7000                       		moveq	#0,d0
0000BD9A 1028 0024                  		move.b	$24(a0),d0
0000BD9E 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000BDA2 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000BDA6 6000 0000                  		bra.w	MarkObjGone
0000BDAA                            ; ===========================================================================
0000BDAA 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000BDAC 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000BDAE                            ; ===========================================================================
0000BDAE                            
0000BDAE                            Obj2B_Main:				; XREF: Obj2B_Index
0000BDAE 5428 0024                  		addq.b	#2,$24(a0)
0000BDB2 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000BDBA 317C 047B 0002             		move.w	#$47B,2(a0)
0000BDC0 117C 0004 0001             		move.b	#4,1(a0)
0000BDC6 117C 0004 0018             		move.b	#4,$18(a0)
0000BDCC 117C 0009 0020             		move.b	#9,$20(a0)
0000BDD2 117C 0010 0019             		move.b	#$10,$19(a0)
0000BDD8 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000BDDE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000BDE4                            
0000BDE4                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000BDE4 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000BDEA 6100 FBA4                  		bsr.w	AnimateSprite
0000BDEE 6100 0000                  		bsr.w	SpeedToPos
0000BDF2 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000BDF8 3028 0030                  		move.w	$30(a0),d0
0000BDFC B068 000C                  		cmp.w	$C(a0),d0
0000BE00 6400                       		bcc.s	Obj2B_ChgAni
0000BE02 3140 000C                  		move.w	d0,$C(a0)
0000BE06 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000BE0C                            
0000BE0C                            Obj2B_ChgAni:
0000BE0C 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000BE12 0440 00C0                  		subi.w	#$C0,d0
0000BE16 B068 000C                  		cmp.w	$C(a0),d0
0000BE1A 6400                       		bcc.s	locret_ABB6
0000BE1C 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000BE22 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000BE26 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000BE28 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000BE2E                            
0000BE2E                            locret_ABB6:
0000BE2E 4E75                       		rts	
0000BE30                            ; ===========================================================================
0000BE30                            Ani_obj2B:
0000BE30                            	include "_anim\obj2B.asm"
0000BE30                            ; ---------------------------------------------------------------------------
0000BE30                            ; Animation script - Chopper enemy
0000BE30                            ; ---------------------------------------------------------------------------
0000BE30 0000                       		dc.w byte_ABBE-Ani_obj2B
0000BE32 0000                       		dc.w byte_ABC2-Ani_obj2B
0000BE34 0000                       		dc.w byte_ABC6-Ani_obj2B
0000BE36 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000BE3A 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000BE3E 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000BE42 00                         		even
0000BE42 00                         		even
0000BE42                            
0000BE42                            ; ---------------------------------------------------------------------------
0000BE42                            ; Sprite mappings - Chopper enemy (GHZ)
0000BE42                            ; ---------------------------------------------------------------------------
0000BE42                            Map_obj2B:
0000BE42                            	include "_maps\obj2B.asm"
0000BE42                            ; ---------------------------------------------------------------------------
0000BE42                            ; Sprite mappings - Chopper enemy (GHZ)
0000BE42                            ; ---------------------------------------------------------------------------
0000BE42 0000                       		dc.w byte_ABCE-Map_obj2B
0000BE44 0000                       		dc.w byte_ABD4-Map_obj2B
0000BE46 01                         byte_ABCE:	dc.b 1
0000BE47 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000BE4C 01                         byte_ABD4:	dc.b 1
0000BE4D F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000BE52                            		even
0000BE52                            		even
0000BE52                            
0000BE52                            ; ===========================================================================
0000BE52                            ; ---------------------------------------------------------------------------
0000BE52                            ; Object 2C - Jaws enemy (LZ)
0000BE52                            ; ---------------------------------------------------------------------------
0000BE52                            
0000BE52                            Obj2C:					; XREF: Obj_Index
0000BE52 7000                       		moveq	#0,d0
0000BE54 1028 0024                  		move.b	$24(a0),d0
0000BE58 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000BE5C 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000BE60                            ; ===========================================================================
0000BE60 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000BE62 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000BE64                            ; ===========================================================================
0000BE64                            
0000BE64                            Obj2C_Main:				; XREF: Obj2C_Index
0000BE64 5428 0024                  		addq.b	#2,$24(a0)
0000BE68 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000BE70 317C 2486 0002             		move.w	#$2486,2(a0)
0000BE76 0028 0004 0001             		ori.b	#4,1(a0)
0000BE7C 117C 000A 0020             		move.b	#$A,$20(a0)
0000BE82 117C 0004 0018             		move.b	#4,$18(a0)
0000BE88 117C 0010 0019             		move.b	#$10,$19(a0)
0000BE8E 7000                       		moveq	#0,d0
0000BE90 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000BE94 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000BE96 5340                       		subq.w	#1,d0
0000BE98 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000BE9C 3140 0032                  		move.w	d0,$32(a0)
0000BEA0 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000BEA6 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000BEAC 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000BEAE 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000BEB2                            
0000BEB2                            Obj2C_Turn:				; XREF: Obj2C_Index
0000BEB2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000BEB6 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000BEB8 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000BEBE 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000BEC2 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000BEC8 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000BECE                            
0000BECE                            Obj2C_Animate:
0000BECE 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000BED4 6100 FABA                  		bsr.w	AnimateSprite
0000BED8 6100 0000                  		bsr.w	SpeedToPos
0000BEDC 6000 0000                  		bra.w	MarkObjGone
0000BEE0                            ; ===========================================================================
0000BEE0                            Ani_obj2C:
0000BEE0                            	include "_anim\obj2C.asm"
0000BEE0                            ; ---------------------------------------------------------------------------
0000BEE0                            ; Animation script - Jaws enemy
0000BEE0                            ; ---------------------------------------------------------------------------
0000BEE0 0000                       		dc.w byte_AC6A-Ani_obj2C
0000BEE2 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000BEE8                            		even
0000BEE8                            		even
0000BEE8                            
0000BEE8                            ; ---------------------------------------------------------------------------
0000BEE8                            ; Sprite mappings - Jaws enemy (LZ)
0000BEE8                            ; ---------------------------------------------------------------------------
0000BEE8                            Map_obj2C:
0000BEE8                            	include "_maps\obj2C.asm"
0000BEE8                            mapjaws:
0000BEE8 0000                       mapjaws_0: 	dc.w mapjaws_8-mapjaws
0000BEEA 0000                       mapjaws_2: 	dc.w mapjaws_13-mapjaws
0000BEEC 0000                       mapjaws_4: 	dc.w mapjaws_1E-mapjaws
0000BEEE 0000                       mapjaws_6: 	dc.w mapjaws_29-mapjaws
0000BEF0 02                         mapjaws_8: 	dc.b $2
0000BEF1 F40E 0000 F0               	dc.b $F4, $E, $0, $0, $F0
0000BEF6 F505 4018 10               	dc.b $F5, $5, $40, $18, $10
0000BEFB 02                         mapjaws_13: 	dc.b $2
0000BEFC F40E 000C F0               	dc.b $F4, $E, $0, $C, $F0
0000BF01 F505 401C 10               	dc.b $F5, $5, $40, $1C, $10
0000BF06 02                         mapjaws_1E: 	dc.b $2
0000BF07 F40E 0000 F0               	dc.b $F4, $E, $0, $0, $F0
0000BF0C F505 5018 10               	dc.b $F5, $5, $50, $18, $10
0000BF11 02                         mapjaws_29: 	dc.b $2
0000BF12 F40E 000C F0               	dc.b $F4, $E, $0, $C, $F0
0000BF17 F505 501C 10               	dc.b $F5, $5, $50, $1C, $10
0000BF1C                            	even
0000BF1C                            	even
0000BF1C                            
0000BF1C                            ; ===========================================================================
0000BF1C                            ; ---------------------------------------------------------------------------
0000BF1C                            ; Object 2D - Burrobot enemy (LZ)
0000BF1C                            ; ---------------------------------------------------------------------------
0000BF1C                            
0000BF1C                            Obj2D:					; XREF: Obj_Index
0000BF1C 7000                       		moveq	#0,d0
0000BF1E 1028 0024                  		move.b	$24(a0),d0
0000BF22 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000BF26 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000BF2A                            ; ===========================================================================
0000BF2A 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000BF2C 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000BF2E                            ; ===========================================================================
0000BF2E                            
0000BF2E                            Obj2D_Main:				; XREF: Obj2D_Index
0000BF2E 5428 0024                  		addq.b	#2,$24(a0)
0000BF32 117C 0013 0016             		move.b	#$13,$16(a0)
0000BF38 117C 0008 0017             		move.b	#8,$17(a0)
0000BF3E 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000BF46 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000BF4C 0028 0004 0001             		ori.b	#4,1(a0)
0000BF52 117C 0004 0018             		move.b	#4,$18(a0)
0000BF58 117C 0005 0020             		move.b	#5,$20(a0)
0000BF5E 117C 000C 0019             		move.b	#$C,$19(a0)
0000BF64 5028 0025                  		addq.b	#8,$25(a0)	; run "Obj2D_ChkSonic" routine
0000BF68 117C 0004 001C             		move.b	#4,$1C(a0)
0000BF6E                            
0000BF6E                            Obj2D_Action:				; XREF: Obj2D_Index
0000BF6E 7000                       		moveq	#0,d0
0000BF70 1028 0025                  		move.b	$25(a0),d0
0000BF74 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000BF78 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000BF7C 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000BF82 6100 FA0C                  		bsr.w	AnimateSprite
0000BF86 6000 0000                  		bra.w	MarkObjGone
0000BF8A                            ; ===========================================================================
0000BF8A 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000BF8C 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000BF8E 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000BF90 0000                       		dc.w Obj2D_Jump2-Obj2D_Index2
0000BF92 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000BF94                            ; ===========================================================================
0000BF94                            
0000BF94                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000BF94 5368 0030                  		subq.w	#1,$30(a0)
0000BF98 6A00                       		bpl.s	locret_AD42
0000BF9A 5428 0025                  		addq.b	#2,$25(a0)
0000BF9E 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000BFA4 317C 0080 0010             		move.w	#$80,$10(a0)
0000BFAA 117C 0001 001C             		move.b	#1,$1C(a0)
0000BFB0 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000BFB6 6700                       		beq.s	locret_AD42
0000BFB8 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000BFBC                            
0000BFBC                            locret_AD42:
0000BFBC 4E75                       		rts	
0000BFBE                            ; ===========================================================================
0000BFBE                            
0000BFBE                            Obj2D_Move:				; XREF: Obj2D_Index2
0000BFBE 5368 0030                  		subq.w	#1,$30(a0)
0000BFC2 6B00                       		bmi.s	loc_AD84
0000BFC4 6100 0000                  		bsr.w	SpeedToPos
0000BFC8 0868 0000 0032             		bchg	#0,$32(a0)
0000BFCE 6600                       		bne.s	loc_AD78
0000BFD0 3628 0008                  		move.w	8(a0),d3
0000BFD4 0643 000C                  		addi.w	#$C,d3
0000BFD8 0828 0000 0022             		btst	#0,$22(a0)
0000BFDE 6600                       		bne.s	loc_AD6A
0000BFE0 0443 0018                  		subi.w	#$18,d3
0000BFE4                            
0000BFE4                            loc_AD6A:
0000BFE4 4EB9 0000 0000             		jsr	ObjHitFloor2
0000BFEA 0C41 000C                  		cmpi.w	#$C,d1
0000BFEE 6C00                       		bge.s	loc_AD84
0000BFF0 4E75                       		rts	
0000BFF2                            ; ===========================================================================
0000BFF2                            
0000BFF2                            loc_AD78:				; XREF: Obj2D_Move
0000BFF2 4EB9 0000 0000             		jsr	ObjHitFloor
0000BFF8 D368 000C                  		add.w	d1,$C(a0)
0000BFFC 4E75                       		rts	
0000BFFE                            ; ===========================================================================
0000BFFE                            
0000BFFE                            loc_AD84:				; XREF: Obj2D_Move
0000BFFE 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000C004 6700                       		beq.s	loc_ADA4
0000C006 5528 0025                  		subq.b	#2,$25(a0)
0000C00A 317C 003B 0030             		move.w	#$3B,$30(a0)
0000C010 317C 0000 0010             		move.w	#0,$10(a0)
0000C016 117C 0000 001C             		move.b	#0,$1C(a0)
0000C01C 4E75                       		rts	
0000C01E                            ; ===========================================================================
0000C01E                            
0000C01E                            loc_ADA4:
0000C01E 5428 0025                  		addq.b	#2,$25(a0)
0000C022 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C028 117C 0002 001C             		move.b	#2,$1C(a0)
0000C02E 4E75                       		rts	
0000C030                            ; ===========================================================================
0000C030                            
0000C030                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000C030 6100 0000                  		bsr.w	SpeedToPos
0000C034 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C03A 6B00                       		bmi.s	locret_ADF0
0000C03C 117C 0003 001C             		move.b	#3,$1C(a0)
0000C042 4EB9 0000 0000             		jsr	ObjHitFloor
0000C048 4A41                       		tst.w	d1
0000C04A 6A00                       		bpl.s	locret_ADF0
0000C04C D368 000C                  		add.w	d1,$C(a0)
0000C050 317C 0000 0012             		move.w	#0,$12(a0)
0000C056 117C 0001 001C             		move.b	#1,$1C(a0)
0000C05C 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000C062 5528 0025                  		subq.b	#2,$25(a0)
0000C066 6000 0000                  		bra.w	Obj2D_ChkSonic2
0000C06A                            ; ===========================================================================
0000C06A                            
0000C06A                            Obj2D_Jump2:				; XREF: Obj2D_Index2
0000C06A 6100 0000                  		bsr.w	SpeedToPos
0000C06E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C074 5368 0030                  		subq.w	#1,$30(a0)
0000C078 6A00                       		bpl.s	locret_ADF0
0000C07A 117C 0002 001C             		move.b	#2,$1C(a0)
0000C080 5528 0025                  		subq.b	#2,$25(a0)
0000C084                            
0000C084                            locret_ADF0:
0000C084 4E75                       		rts	
0000C086                            ; ===========================================================================
0000C086                            
0000C086                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000C086 343C 0060                  		move.w	#$60,d2
0000C08A 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000C08E 6400                       		bcc.s	locret_AE20
0000C090 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000C094 9068 000C                  		sub.w	$C(a0),d0
0000C098 6400                       		bcc.s	locret_AE20
0000C09A 0C40 FF80                  		cmpi.w	#-$80,d0
0000C09E 6500                       		bcs.s	locret_AE20
0000C0A0 4A78 FE08                  		tst.w	($FFFFFE08).w
0000C0A4 6600                       		bne.s	locret_AE20
0000C0A6 5528 0025                  		subq.b	#2,$25(a0)
0000C0AA 317C 0004 0030             		move.w	#4,$30(a0)
0000C0B0 3141 0010                  		move.w	d1,$10(a0)
0000C0B4 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C0BA                            
0000C0BA                            locret_AE20:
0000C0BA 4E75                       		rts	
0000C0BC                            
0000C0BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C0BC                            
0000C0BC                            
0000C0BC                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000C0BC 323C 0080                  		move.w	#$80,d1
0000C0C0 08E8 0000 0022             		bset	#0,$22(a0)
0000C0C6 3038 D008                  		move.w	($FFFFD008).w,d0
0000C0CA 9068 0008                  		sub.w	8(a0),d0
0000C0CE 6400                       		bcc.s	loc_AE40
0000C0D0 4440                       		neg.w	d0
0000C0D2 4441                       		neg.w	d1
0000C0D4 08A8 0000 0022             		bclr	#0,$22(a0)
0000C0DA                            
0000C0DA                            loc_AE40:
0000C0DA B042                       		cmp.w	d2,d0
0000C0DC 4E75                       		rts	
0000C0DE                            ; End of function Obj2D_ChkSonic2
0000C0DE                            
0000C0DE                            ; ===========================================================================
0000C0DE                            Ani_obj2D:
0000C0DE                            	include "_anim\obj2D.asm"
0000C0DE                            ; ---------------------------------------------------------------------------
0000C0DE                            ; Animation script - Burrobot enemy
0000C0DE                            ; ---------------------------------------------------------------------------
0000C0DE 0000                       		dc.w byte_AE4C-Ani_obj2D
0000C0E0 0000                       		dc.w byte_AE50-Ani_obj2D
0000C0E2 0000                       		dc.w byte_AE54-Ani_obj2D
0000C0E4 0000                       		dc.w byte_AE58-Ani_obj2D
0000C0E6 0000                       		dc.w byte_AE542-Ani_obj2D
0000C0E8 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000C0EC 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000C0F0 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000C0F4 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000C0F7 0307 08FF                  byte_AE542:	dc.b 3,	7, 8, $FF
0000C0FC 00                         		even
0000C0FC 00                         		even
0000C0FC                            
0000C0FC                            ; ---------------------------------------------------------------------------
0000C0FC                            ; Sprite mappings - Burrobot enemy (LZ)
0000C0FC                            ; ---------------------------------------------------------------------------
0000C0FC                            Map_obj2D:
0000C0FC                            	include "_maps\obj2D.asm"
0000C0FC                            burromap:
0000C0FC 0000                       burromap_0: 	dc.w burromap_12-burromap
0000C0FE 0000                       burromap_2: 	dc.w burromap_1D-burromap
0000C100 0000                       burromap_4: 	dc.w burromap_28-burromap
0000C102 0000                       burromap_6: 	dc.w burromap_33-burromap
0000C104 0000                       burromap_8: 	dc.w burromap_3E-burromap
0000C106 0000                       burromap_A: 	dc.w burromap_49-burromap
0000C108 0000                       burromap_C: 	dc.w burromap_54-burromap
0000C10A 0000                       burromap_E: 	dc.w burromap_5F-burromap
0000C10C 0000                       burromap_10: 	dc.w burromap_65-burromap
0000C10E 02                         burromap_12: 	dc.b $2
0000C10F EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0000C114 0409 0009 F4               	dc.b $4, $9, $0, $9, $F4
0000C119 02                         burromap_1D: 	dc.b $2
0000C11A EC0A 000F F0               	dc.b $EC, $A, $0, $F, $F0
0000C11F 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
0000C124 02                         burromap_28: 	dc.b $2
0000C125 E80A 001E F4               	dc.b $E8, $A, $0, $1E, $F4
0000C12A 000A 0027 F4               	dc.b $0, $A, $0, $27, $F4
0000C12F 02                         burromap_33: 	dc.b $2
0000C130 E80A 0030 F4               	dc.b $E8, $A, $0, $30, $F4
0000C135 000A 0039 F4               	dc.b $0, $A, $0, $39, $F4
0000C13A 02                         burromap_3E: 	dc.b $2
0000C13B E80A 000F F0               	dc.b $E8, $A, $0, $F, $F0
0000C140 000A 0042 F4               	dc.b $0, $A, $0, $42, $F4
0000C145 02                         burromap_49: 	dc.b $2
0000C146 F406 004B E8               	dc.b $F4, $6, $0, $4B, $E8
0000C14B F40A 0051 F8               	dc.b $F4, $A, $0, $51, $F8
0000C150 02                         burromap_54: 	dc.b $2
0000C151 EC0A 000F F0               	dc.b $EC, $A, $0, $F, $F0
0000C156 0409 0009 F4               	dc.b $4, $9, $0, $9, $F4
0000C15B 01                         burromap_5F: 	dc.b $1
0000C15C E80A 0030 F4               	dc.b $E8, $A, $0, $30, $F4
0000C161 01                         burromap_65: 	dc.b $1
0000C162 E80A 001E F4               	dc.b $E8, $A, $0, $1E, $F4
0000C168 00                         	even
0000C168 00                         	even
0000C168                            
0000C168                            ; ===========================================================================
0000C168                            ; ---------------------------------------------------------------------------
0000C168                            ; Object 2F - large moving platforms (MZ)
0000C168                            ; ---------------------------------------------------------------------------
0000C168                            
0000C168                            Obj2F:					; XREF: Obj_Index
0000C168 7000                       		moveq	#0,d0
0000C16A 1028 0024                  		move.b	$24(a0),d0
0000C16E 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000C172 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000C176                            ; ===========================================================================
0000C176 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000C178 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000C17A                            
0000C17A 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000C17C 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000C17E 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000C180 0140                       		dc.b 1,	$40
0000C182 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000C184 0220                       		dc.b 2,	$20
0000C186                            ; ===========================================================================
0000C186                            
0000C186                            Obj2F_Main:				; XREF: Obj2F_Index
0000C186 5428 0024                  		addq.b	#2,$24(a0)
0000C18A 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000C192 317C C000 0002             		move.w	#$C000,2(a0)
0000C198 117C 0004 0001             		move.b	#4,1(a0)
0000C19E 117C 0005 0018             		move.b	#5,$18(a0)
0000C1A4 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000C1AA 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C1B0 7000                       		moveq	#0,d0
0000C1B2 1028 0028                  		move.b	$28(a0),d0
0000C1B6 E448                       		lsr.w	#2,d0
0000C1B8 0240 001C                  		andi.w	#$1C,d0
0000C1BC 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000C1C0 3019                       		move.w	(a1)+,d0
0000C1C2 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000C1C6 214A 0030                  		move.l	a2,$30(a0)
0000C1CA 1159 001A                  		move.b	(a1)+,$1A(a0)
0000C1CE 1151 0019                  		move.b	(a1),$19(a0)
0000C1D2 0228 000F 0028             		andi.b	#$F,$28(a0)
0000C1D8 117C 0040 0016             		move.b	#$40,$16(a0)
0000C1DE 08E8 0004 0001             		bset	#4,1(a0)
0000C1E4                            
0000C1E4                            Obj2F_Action:				; XREF: Obj2F_Index
0000C1E4 6100 0000                  		bsr.w	Obj2F_Types
0000C1E8 4A28 0025                  		tst.b	$25(a0)
0000C1EC 6700                       		beq.s	Obj2F_Solid
0000C1EE 7200                       		moveq	#0,d1
0000C1F0 1228 0019                  		move.b	$19(a0),d1
0000C1F4 0641 000B                  		addi.w	#$B,d1
0000C1F8 6100 C4AA                  		bsr.w	ExitPlatform
0000C1FC 0829 0003 0022             		btst	#3,$22(a1)
0000C202 6600 0000                  		bne.w	Obj2F_Slope
0000C206 4228 0025                  		clr.b	$25(a0)
0000C20A 6000                       		bra.s	Obj2F_Display
0000C20C                            ; ===========================================================================
0000C20C                            
0000C20C                            Obj2F_Slope:				; XREF: Obj2F_Action
0000C20C 7200                       		moveq	#0,d1
0000C20E 1228 0019                  		move.b	$19(a0),d1
0000C212 0641 000B                  		addi.w	#$B,d1
0000C216 2468 0030                  		movea.l	$30(a0),a2
0000C21A 3428 0008                  		move.w	8(a0),d2
0000C21E 6100 D45A                  		bsr.w	SlopeObject2
0000C222 6000                       		bra.s	Obj2F_Display
0000C224                            ; ===========================================================================
0000C224                            
0000C224                            Obj2F_Solid:				; XREF: Obj2F_Action
0000C224 7200                       		moveq	#0,d1
0000C226 1228 0019                  		move.b	$19(a0),d1
0000C22A 0641 000B                  		addi.w	#$B,d1
0000C22E 343C 0020                  		move.w	#$20,d2
0000C232 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000C238 6600                       		bne.s	loc_AF8E
0000C23A 343C 0030                  		move.w	#$30,d2
0000C23E                            
0000C23E                            loc_AF8E:
0000C23E 2468 0030                  		movea.l	$30(a0),a2
0000C242 6100 0000                  		bsr.w	SolidObject2F
0000C246                            
0000C246                            Obj2F_Display:				; XREF: Obj2F_Action
0000C246 6100 0000                  		bsr.w	DisplaySprite
0000C24A 6000 0000                  		bra.w	Obj2F_ChkDel
0000C24E                            
0000C24E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C24E                            
0000C24E                            
0000C24E                            Obj2F_Types:				; XREF: Obj2F_Action
0000C24E 7000                       		moveq	#0,d0
0000C250 1028 0028                  		move.b	$28(a0),d0
0000C254 0240 0007                  		andi.w	#7,d0
0000C258 D040                       		add.w	d0,d0
0000C25A 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000C25E 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000C262                            ; End of function Obj2F_Types
0000C262                            
0000C262                            ; ===========================================================================
0000C262 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000C264 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000C266 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000C268 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000C26A 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000C26C 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000C26E                            ; ===========================================================================
0000C26E                            
0000C26E                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000C26E 4E75                       		rts			; type 00 platform doesn't move
0000C270                            ; ===========================================================================
0000C270                            
0000C270                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000C270 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000C274 323C 0020                  		move.w	#$20,d1
0000C278 6000                       		bra.s	Obj2F_Move
0000C27A                            ; ===========================================================================
0000C27A                            
0000C27A                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000C27A 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000C27E 323C 0030                  		move.w	#$30,d1
0000C282 6000                       		bra.s	Obj2F_Move
0000C284                            ; ===========================================================================
0000C284                            
0000C284                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000C284 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000C288 323C 0040                  		move.w	#$40,d1
0000C28C 6000                       		bra.s	Obj2F_Move
0000C28E                            ; ===========================================================================
0000C28E                            
0000C28E                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000C28E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000C292 323C 0060                  		move.w	#$60,d1
0000C296                            
0000C296                            Obj2F_Move:
0000C296 0828 0003 0028             		btst	#3,$28(a0)
0000C29C 6700                       		beq.s	loc_AFF2
0000C29E 4440                       		neg.w	d0
0000C2A0 D041                       		add.w	d1,d0
0000C2A2                            
0000C2A2                            loc_AFF2:
0000C2A2 3228 002C                  		move.w	$2C(a0),d1
0000C2A6 9240                       		sub.w	d0,d1
0000C2A8 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000C2AC 4E75                       		rts	
0000C2AE                            ; ===========================================================================
0000C2AE                            
0000C2AE                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000C2AE 1028 0034                  		move.b	$34(a0),d0
0000C2B2 4A28 0025                  		tst.b	$25(a0)
0000C2B6 6600                       		bne.s	loc_B010
0000C2B8 5500                       		subq.b	#2,d0
0000C2BA 6400                       		bcc.s	loc_B01C
0000C2BC 7000                       		moveq	#0,d0
0000C2BE 6000                       		bra.s	loc_B01C
0000C2C0                            ; ===========================================================================
0000C2C0                            
0000C2C0                            loc_B010:
0000C2C0 5800                       		addq.b	#4,d0
0000C2C2 0C00 0040                  		cmpi.b	#$40,d0
0000C2C6 6500                       		bcs.s	loc_B01C
0000C2C8 103C 0040                  		move.b	#$40,d0
0000C2CC                            
0000C2CC                            loc_B01C:
0000C2CC 1140 0034                  		move.b	d0,$34(a0)
0000C2D0 4EB9 0000 29F6             		jsr	(CalcSine).l
0000C2D6 E848                       		lsr.w	#4,d0
0000C2D8 3200                       		move.w	d0,d1
0000C2DA D068 002C                  		add.w	$2C(a0),d0
0000C2DE 3140 000C                  		move.w	d0,$C(a0)
0000C2E2 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000C2E8 6600                       		bne.s	loc_B07A
0000C2EA 4A28 0035                  		tst.b	$35(a0)
0000C2EE 6600                       		bne.s	loc_B07A
0000C2F0 117C 0001 0035             		move.b	#1,$35(a0)
0000C2F6 6100 0000                  		bsr.w	SingleObjLoad2
0000C2FA 6600                       		bne.s	loc_B07A
0000C2FC 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000C300 3368 0008 0008             		move.w	8(a0),8(a1)
0000C306 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000C30C 5069 002C                  		addq.w	#8,$2C(a1)
0000C310 5769 002C                  		subq.w	#3,$2C(a1)
0000C314 0469 0040 0008             		subi.w	#$40,8(a1)
0000C31A 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000C320 2348 0038                  		move.l	a0,$38(a1)
0000C324 2448                       		movea.l	a0,a2
0000C326 6100                       		bsr.s	sub_B09C
0000C328                            
0000C328                            loc_B07A:
0000C328 7400                       		moveq	#0,d2
0000C32A 45E8 0036                  		lea	$36(a0),a2
0000C32E 141A                       		move.b	(a2)+,d2
0000C330 5302                       		subq.b	#1,d2
0000C332 6500                       		bcs.s	locret_B09A
0000C334                            
0000C334                            loc_B086:
0000C334 7000                       		moveq	#0,d0
0000C336 101A                       		move.b	(a2)+,d0
0000C338 ED48                       		lsl.w	#6,d0
0000C33A 0640 D000                  		addi.w	#-$3000,d0
0000C33E 3240                       		movea.w	d0,a1
0000C340 3341 003C                  		move.w	d1,$3C(a1)
0000C344 51CA FFEE                  		dbf	d2,loc_B086
0000C348                            
0000C348                            locret_B09A:
0000C348 4E75                       		rts	
0000C34A                            
0000C34A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C34A                            
0000C34A                            
0000C34A                            sub_B09C:
0000C34A 45EA 0036                  		lea	$36(a2),a2
0000C34E 7000                       		moveq	#0,d0
0000C350 1012                       		move.b	(a2),d0
0000C352 5212                       		addq.b	#1,(a2)
0000C354 45F2 0001                  		lea	1(a2,d0.w),a2
0000C358 3009                       		move.w	a1,d0
0000C35A 0440 D000                  		subi.w	#-$3000,d0
0000C35E EC48                       		lsr.w	#6,d0
0000C360 0240 007F                  		andi.w	#$7F,d0
0000C364 1480                       		move.b	d0,(a2)
0000C366 4E75                       		rts	
0000C368                            ; End of function sub_B09C
0000C368                            
0000C368                            ; ===========================================================================
0000C368                            
0000C368                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000C368 4A28 0035                  		tst.b	$35(a0)
0000C36C 6700                       		beq.s	loc_B0C6
0000C36E 4A28 0001                  		tst.b	1(a0)
0000C372 6A00                       		bpl.s	Obj2F_DelFlames
0000C374                            
0000C374                            loc_B0C6:
0000C374 3028 002A                  		move.w	$2A(a0),d0
0000C378 0240 FF80                  		andi.w	#$FF80,d0
0000C37C 3238 F700                  		move.w	($FFFFF700).w,d1
0000C380 0441 0080                  		subi.w	#$80,d1
0000C384 0241 FF80                  		andi.w	#$FF80,d1
0000C388 9041                       		sub.w	d1,d0
0000C38A 0C40 0280                  		cmpi.w	#$280,d0
0000C38E 6300                       		bls.s	Obj2F_NoDel
0000C390 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000C394 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000C398 3440                       		movea.w	d0,a2	; load address into a2
0000C39A 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000C39E 6000 0000                  		bra.w	DeleteObject	; and delete object
0000C3A2                            
0000C3A2                            Obj2F_NoDel:
0000C3A2 4E75                       		rts	
0000C3A4                            ; ===========================================================================
0000C3A4                            
0000C3A4                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000C3A4 7400                       		moveq	#0,d2
0000C3A6                            
0000C3A6                            loc_B0E8:
0000C3A6 45E8 0036                  		lea	$36(a0),a2
0000C3AA 1412                       		move.b	(a2),d2
0000C3AC 421A                       		clr.b	(a2)+
0000C3AE 5302                       		subq.b	#1,d2
0000C3B0 6500                       		bcs.s	locret_B116
0000C3B2                            
0000C3B2                            loc_B0F4:
0000C3B2 7000                       		moveq	#0,d0
0000C3B4 1012                       		move.b	(a2),d0
0000C3B6 421A                       		clr.b	(a2)+
0000C3B8 ED48                       		lsl.w	#6,d0
0000C3BA 0640 D000                  		addi.w	#-$3000,d0
0000C3BE 3240                       		movea.w	d0,a1
0000C3C0 6100 0000                  		bsr.w	DeleteObject2
0000C3C4 51CA FFEC                  		dbf	d2,loc_B0F4
0000C3C8 117C 0000 0035             		move.b	#0,$35(a0)
0000C3CE 117C 0000 0034             		move.b	#0,$34(a0)
0000C3D4                            
0000C3D4                            locret_B116:
0000C3D4 4E75                       		rts	
0000C3D6                            ; ===========================================================================
0000C3D6                            ; ---------------------------------------------------------------------------
0000C3D6                            ; Collision data for large moving platforms (MZ)
0000C3D6                            ; ---------------------------------------------------------------------------
0000C3D6                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000C422                            		even
0000C422                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000C44E                            		even
0000C44E                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000C49A                            		even
0000C49A                            ; ===========================================================================
0000C49A                            ; ---------------------------------------------------------------------------
0000C49A                            ; Object 35 - fireball that sits on the	floor (MZ)
0000C49A                            ; (appears when	you walk on sinking platforms)
0000C49A                            ; ---------------------------------------------------------------------------
0000C49A                            
0000C49A                            Obj35:					; XREF: Obj_Index
0000C49A 7000                       		moveq	#0,d0
0000C49C 1028 0024                  		move.b	$24(a0),d0
0000C4A0 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000C4A4 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000C4A8                            ; ===========================================================================
0000C4A8 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000C4AA 0000                       		dc.w loc_B238-Obj35_Index
0000C4AC 0000                       		dc.w Obj35_Move-Obj35_Index
0000C4AE                            ; ===========================================================================
0000C4AE                            
0000C4AE                            Obj35_Main:				; XREF: Obj35_Index
0000C4AE 5428 0024                  		addq.b	#2,$24(a0)
0000C4B2 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000C4BA 317C 0345 0002             		move.w	#$345,2(a0)
0000C4C0 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C4C6 117C 0004 0001             		move.b	#4,1(a0)
0000C4CC 117C 0001 0018             		move.b	#1,$18(a0)
0000C4D2 117C 008B 0020             		move.b	#$8B,$20(a0)
0000C4D8 117C 0008 0019             		move.b	#8,$19(a0)
0000C4DE 303C 00C8                  		move.w	#$C8,d0
0000C4E2 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play flame sound
0000C4E8 4A28 0028                  		tst.b	$28(a0)
0000C4EC 6700                       		beq.s	loc_B238
0000C4EE 5428 0024                  		addq.b	#2,$24(a0)
0000C4F2 6000 0000                  		bra.w	Obj35_Move
0000C4F6                            ; ===========================================================================
0000C4F6                            
0000C4F6                            loc_B238:				; XREF: Obj35_Index
0000C4F6 2268 0030                  		movea.l	$30(a0),a1
0000C4FA 3228 0008                  		move.w	8(a0),d1
0000C4FE 9268 002A                  		sub.w	$2A(a0),d1
0000C502 0641 000C                  		addi.w	#$C,d1
0000C506 3001                       		move.w	d1,d0
0000C508 E248                       		lsr.w	#1,d0
0000C50A 1031 0000                  		move.b	(a1,d0.w),d0
0000C50E 4440                       		neg.w	d0
0000C510 D068 002C                  		add.w	$2C(a0),d0
0000C514 3400                       		move.w	d0,d2
0000C516 D068 003C                  		add.w	$3C(a0),d0
0000C51A 3140 000C                  		move.w	d0,$C(a0)
0000C51E 0C41 0084                  		cmpi.w	#$84,d1
0000C522 6400                       		bcc.s	loc_B2B0
0000C524 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C52C 0C41 0080                  		cmpi.w	#$80,d1
0000C530 6400                       		bcc.s	loc_B2B0
0000C532 2028 0008                  		move.l	8(a0),d0
0000C536 0680 0008 0000             		addi.l	#$80000,d0
0000C53C 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000C542 6600                       		bne.s	loc_B2B0
0000C544 6100 0000                  		bsr.w	SingleObjLoad2
0000C548 6600                       		bne.s	loc_B2B0
0000C54A 12BC 0035                  		move.b	#$35,0(a1)
0000C54E 3368 0008 0008             		move.w	8(a0),8(a1)
0000C554 3342 002C                  		move.w	d2,$2C(a1)
0000C558 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000C55E 137C 0001 0028             		move.b	#1,$28(a1)
0000C564 2468 0038                  		movea.l	$38(a0),a2
0000C568 6100 FDE0                  		bsr.w	sub_B09C
0000C56C                            
0000C56C                            loc_B2B0:
0000C56C 6000                       		bra.s	Obj35_Animate
0000C56E                            ; ===========================================================================
0000C56E                            
0000C56E                            Obj35_Move:				; XREF: Obj35_Index
0000C56E 3028 002C                  		move.w	$2C(a0),d0
0000C572 D068 003C                  		add.w	$3C(a0),d0
0000C576 3140 000C                  		move.w	d0,$C(a0)
0000C57A                            
0000C57A                            Obj35_Animate:				; XREF: loc_B238
0000C57A 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000C580 6100 F40E                  		bsr.w	AnimateSprite
0000C584 6000 0000                  		bra.w	DisplaySprite
0000C588                            ; ===========================================================================
0000C588                            Ani_obj35:
0000C588                            	include "_anim\obj35.asm"
0000C588                            ; ---------------------------------------------------------------------------
0000C588                            ; Animation script - fireball that sits on the	floor (MZ)
0000C588                            ; ---------------------------------------------------------------------------
0000C588 0000                       		dc.w byte_B2CE-Ani_obj35
0000C58A 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000C590                            		even
0000C590                            		even
0000C590                            
0000C590                            ; ---------------------------------------------------------------------------
0000C590                            ; Sprite mappings - large moving platforms (MZ)
0000C590                            ; ---------------------------------------------------------------------------
0000C590                            Map_obj2F:
0000C590                            	include "_maps\obj2F.asm"
0000C590                            ; ---------------------------------------------------------------------------
0000C590                            ; Sprite mappings - large moving platforms (MZ)
0000C590                            ; ---------------------------------------------------------------------------
0000C590 0000                       		dc.w byte_B2DA-Map_obj2F
0000C592 0000                       		dc.w byte_B31C-Map_obj2F
0000C594 0000                       		dc.w byte_B34F-Map_obj2F
0000C596 0D                         byte_B2DA:	dc.b $D
0000C597 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000C59C F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000C5A1 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000C5A6 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000C5AB F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000C5B0 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C5B5 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000C5BA D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000C5BF F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000C5C4 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000C5C9 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000C5CE D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000C5D3 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000C5D8 0A                         byte_B31C:	dc.b $A
0000C5D9 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000C5DE F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000C5E3 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000C5E8 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000C5ED E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000C5F2 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C5F7 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000C5FC E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000C601 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000C606 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000C60B 06                         byte_B34F:	dc.b 6
0000C60C D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000C611 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C616 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000C61B D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000C620 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000C625 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000C62A                            		even
0000C62A                            		even
0000C62A                            
0000C62A                            ; ---------------------------------------------------------------------------
0000C62A                            ; Sprite mappings - lava balls (MZ, SLZ)
0000C62A                            ; ---------------------------------------------------------------------------
0000C62A                            Map_obj14:
0000C62A                            	include "_maps\obj14.asm"
0000C62A                            ; ---------------------------------------------------------------------------
0000C62A                            ; Sprite mappings - lava balls (MZ, SLZ)
0000C62A                            ; ---------------------------------------------------------------------------
0000C62A 0000                       		dc.w byte_B37A-Map_obj14
0000C62C 0000                       		dc.w byte_B380-Map_obj14
0000C62E 0000                       		dc.w byte_B386-Map_obj14
0000C630 0000                       		dc.w byte_B38C-Map_obj14
0000C632 0000                       		dc.w byte_B392-Map_obj14
0000C634 0000                       		dc.w byte_B398-Map_obj14
0000C636 01                         byte_B37A:	dc.b 1
0000C637 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000C63C 01                         byte_B380:	dc.b 1
0000C63D E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000C642 01                         byte_B386:	dc.b 1
0000C643 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000C648 01                         byte_B38C:	dc.b 1
0000C649 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000C64E 01                         byte_B392:	dc.b 1
0000C64F F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000C654 01                         byte_B398:	dc.b 1
0000C655 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000C65A                            		even
0000C65A                            		even
0000C65A                            
0000C65A                            ; ===========================================================================
0000C65A                            ; ---------------------------------------------------------------------------
0000C65A                            ; Object 30 - large green glassy blocks	(MZ)
0000C65A                            ; ---------------------------------------------------------------------------
0000C65A                            
0000C65A                            Obj30:					; XREF: Obj_Index
0000C65A 7000                       		moveq	#0,d0
0000C65C 1028 0024                  		move.b	$24(a0),d0
0000C660 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000C664 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000C668 3028 0008                  		move.w	8(a0),d0
0000C66C 0240 FF80                  		andi.w	#$FF80,d0
0000C670 3238 F700                  		move.w	($FFFFF700).w,d1
0000C674 0441 0080                  		subi.w	#$80,d1
0000C678 0241 FF80                  		andi.w	#$FF80,d1
0000C67C 9041                       		sub.w	d1,d0
0000C67E 0C40 0280                  		cmpi.w	#$280,d0
0000C682 6300 0000                  		bls.w	DisplaySprite
0000C686 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000C68A 6700                       		beq.s	Obj30_Delete		; if it's zero, don't remember object
0000C68C 3440                       		movea.w	d0,a2	; load address into a2
0000C68E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000C692                            
0000C692                            Obj30_Delete:
0000C692 6000 0000                  		bra.w	DeleteObject
0000C696                            ; ===========================================================================
0000C696 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000C698 0000                       		dc.w Obj30_Block012-Obj30_Index
0000C69A 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000C69C 0000                       		dc.w Obj30_Block34-Obj30_Index
0000C69E 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000C6A0                            
0000C6A0 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000C6A3 0400 01                    		dc.b 4,	0, 1
0000C6A6 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000C6A9 0800 01                    		dc.b 8,	0, 1
0000C6AC                            ; ===========================================================================
0000C6AC                            
0000C6AC                            Obj30_Main:				; XREF: Obj30_Index
0000C6AC 45F9 0000 C6A0             		lea	(Obj30_Vars1).l,a2
0000C6B2 7201                       		moveq	#1,d1
0000C6B4 117C 0048 0016             		move.b	#$48,$16(a0)
0000C6BA 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000C6C0 6500                       		bcs.s	loc_B40C	; if yes, branch
0000C6C2 45F9 0000 C6A6             		lea	(Obj30_Vars2).l,a2
0000C6C8 7201                       		moveq	#1,d1
0000C6CA 117C 0038 0016             		move.b	#$38,$16(a0)
0000C6D0                            
0000C6D0                            loc_B40C:
0000C6D0 2248                       		movea.l	a0,a1
0000C6D2 6000                       		bra.s	Obj30_Load	; load main object
0000C6D4                            ; ===========================================================================
0000C6D4                            
0000C6D4                            Obj30_Loop:
0000C6D4 6100 0000                  		bsr.w	SingleObjLoad2
0000C6D8 6600                       		bne.s	loc_B480
0000C6DA                            
0000C6DA                            Obj30_Load:				; XREF: Obj30_Main
0000C6DA 135A 0024                  		move.b	(a2)+,$24(a1)
0000C6DE 12BC 0030                  		move.b	#$30,0(a1)
0000C6E2 3368 0008 0008             		move.w	8(a0),8(a1)
0000C6E8 101A                       		move.b	(a2)+,d0
0000C6EA 4880                       		ext.w	d0
0000C6EC D068 000C                  		add.w	$C(a0),d0
0000C6F0 3340 000C                  		move.w	d0,$C(a1)
0000C6F4 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000C6FC 337C C38E 0002             		move.w	#$C38E,2(a1)
0000C702 137C 0004 0001             		move.b	#4,1(a1)
0000C708 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C70E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C714 137C 0020 0019             		move.b	#$20,$19(a1)
0000C71A 137C 0004 0018             		move.b	#4,$18(a1)
0000C720 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C724 2348 003C                  		move.l	a0,$3C(a1)
0000C728 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000C72C                            
0000C72C 137C 0010 0019             		move.b	#$10,$19(a1)
0000C732 137C 0003 0018             		move.b	#3,$18(a1)
0000C738 5029 0028                  		addq.b	#8,$28(a1)
0000C73C 0229 000F 0028             		andi.b	#$F,$28(a1)
0000C742                            
0000C742                            loc_B480:
0000C742 317C 0090 0032             		move.w	#$90,$32(a0)
0000C748 08E8 0004 0001             		bset	#4,1(a0)
0000C74E                            
0000C74E                            Obj30_Block012:				; XREF: Obj30_Index
0000C74E 6100 0000                  		bsr.w	Obj30_Types
0000C752 323C 002B                  		move.w	#$2B,d1
0000C756 343C 0048                  		move.w	#$48,d2
0000C75A 363C 0049                  		move.w	#$49,d3
0000C75E 3828 0008                  		move.w	8(a0),d4
0000C762 6000 0000                  		bra.w	SolidObject
0000C766                            ; ===========================================================================
0000C766                            
0000C766                            Obj30_Reflect012:			; XREF: Obj30_Index
0000C766 2268 003C                  		movea.l	$3C(a0),a1
0000C76A 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C770 6000 0000                  		bra.w	Obj30_Types
0000C774                            ; ===========================================================================
0000C774                            
0000C774                            Obj30_Block34:				; XREF: Obj30_Index
0000C774 6100 0000                  		bsr.w	Obj30_Types
0000C778 323C 002B                  		move.w	#$2B,d1
0000C77C 343C 0038                  		move.w	#$38,d2
0000C780 363C 0039                  		move.w	#$39,d3
0000C784 3828 0008                  		move.w	8(a0),d4
0000C788 6000 0000                  		bra.w	SolidObject
0000C78C                            ; ===========================================================================
0000C78C                            
0000C78C                            Obj30_Reflect34:			; XREF: Obj30_Index
0000C78C 2268 003C                  		movea.l	$3C(a0),a1
0000C790 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C796 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000C79C 6000 0002                  		bra.w	*+4
0000C7A0                            
0000C7A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C7A0                            
0000C7A0                            
0000C7A0                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000C7A0 7000                       		moveq	#0,d0
0000C7A2 1028 0028                  		move.b	$28(a0),d0
0000C7A6 0240 0007                  		andi.w	#7,d0
0000C7AA D040                       		add.w	d0,d0
0000C7AC 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000C7B0 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000C7B4                            ; End of function Obj30_Types
0000C7B4                            
0000C7B4                            ; ===========================================================================
0000C7B4 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000C7B6 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000C7B8 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000C7BA 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000C7BC 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000C7BE                            ; ===========================================================================
0000C7BE                            
0000C7BE                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000C7BE 4E75                       		rts	
0000C7C0                            ; ===========================================================================
0000C7C0                            
0000C7C0                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000C7C0 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C7C4 323C 0040                  		move.w	#$40,d1
0000C7C8 6000                       		bra.s	loc_B514
0000C7CA                            ; ===========================================================================
0000C7CA                            
0000C7CA                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000C7CA 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C7CE 323C 0040                  		move.w	#$40,d1
0000C7D2 4440                       		neg.w	d0
0000C7D4 D041                       		add.w	d1,d0
0000C7D6                            
0000C7D6                            loc_B514:				; XREF: Obj30_Type01
0000C7D6 0828 0003 0028             		btst	#3,$28(a0)
0000C7DC 6700                       		beq.s	loc_B526
0000C7DE 4440                       		neg.w	d0
0000C7E0 D041                       		add.w	d1,d0
0000C7E2 E208                       		lsr.b	#1,d0
0000C7E4 0640 0020                  		addi.w	#$20,d0
0000C7E8                            
0000C7E8                            loc_B526:
0000C7E8 6000 0000                  		bra.w	loc_B5EE
0000C7EC                            ; ===========================================================================
0000C7EC                            
0000C7EC                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000C7EC 0828 0003 0028             		btst	#3,$28(a0)
0000C7F2 6700                       		beq.s	loc_B53E
0000C7F4 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C7F8 0440 0010                  		subi.w	#$10,d0
0000C7FC 6000 0000                  		bra.w	loc_B5EE
0000C800                            ; ===========================================================================
0000C800                            
0000C800                            loc_B53E:
0000C800 0828 0003 0022             		btst	#3,$22(a0)
0000C806 6600                       		bne.s	loc_B54E
0000C808 08A8 0000 0034             		bclr	#0,$34(a0)
0000C80E 6000                       		bra.s	loc_B582
0000C810                            ; ===========================================================================
0000C810                            
0000C810                            loc_B54E:
0000C810 4A28 0034                  		tst.b	$34(a0)
0000C814 6600                       		bne.s	loc_B582
0000C816 117C 0001 0034             		move.b	#1,$34(a0)
0000C81C 08E8 0000 0035             		bset	#0,$35(a0)
0000C822 6700                       		beq.s	loc_B582
0000C824 08E8 0007 0034             		bset	#7,$34(a0)
0000C82A 317C 0010 0036             		move.w	#$10,$36(a0)
0000C830 117C 000A 0038             		move.b	#$A,$38(a0)
0000C836 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000C83C 6600                       		bne.s	loc_B582
0000C83E 317C 0040 0036             		move.w	#$40,$36(a0)
0000C844                            
0000C844                            loc_B582:
0000C844 4A28 0034                  		tst.b	$34(a0)
0000C848 6A00                       		bpl.s	loc_B5AA
0000C84A 4A28 0038                  		tst.b	$38(a0)
0000C84E 6700                       		beq.s	loc_B594
0000C850 5328 0038                  		subq.b	#1,$38(a0)
0000C854 6600                       		bne.s	loc_B5AA
0000C856                            
0000C856                            loc_B594:
0000C856 4A68 0032                  		tst.w	$32(a0)
0000C85A 6700                       		beq.s	loc_B5A4
0000C85C 5368 0032                  		subq.w	#1,$32(a0)
0000C860 5368 0036                  		subq.w	#1,$36(a0)
0000C864 6600                       		bne.s	loc_B5AA
0000C866                            
0000C866                            loc_B5A4:
0000C866 08A8 0007 0034             		bclr	#7,$34(a0)
0000C86C                            
0000C86C                            loc_B5AA:
0000C86C 3028 0032                  		move.w	$32(a0),d0
0000C870 6000                       		bra.s	loc_B5EE
0000C872                            ; ===========================================================================
0000C872                            
0000C872                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000C872 0828 0003 0028             		btst	#3,$28(a0)
0000C878 6700                       		beq.s	Obj30_ChkSwitch
0000C87A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C87E 0440 0010                  		subi.w	#$10,d0
0000C882 6000                       		bra.s	loc_B5EE
0000C884                            ; ===========================================================================
0000C884                            
0000C884                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000C884 4A28 0034                  		tst.b	$34(a0)
0000C888 6600                       		bne.s	loc_B5E0
0000C88A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000C88E 7000                       		moveq	#0,d0
0000C890 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000C894 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000C896 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000C89A 6700                       		beq.s	loc_B5EA	; if not, branch
0000C89C 117C 0001 0034             		move.b	#1,$34(a0)
0000C8A2                            
0000C8A2                            loc_B5E0:
0000C8A2 4A68 0032                  		tst.w	$32(a0)
0000C8A6 6700                       		beq.s	loc_B5EA
0000C8A8 5568 0032                  		subq.w	#2,$32(a0)
0000C8AC                            
0000C8AC                            loc_B5EA:
0000C8AC 3028 0032                  		move.w	$32(a0),d0
0000C8B0                            
0000C8B0                            loc_B5EE:
0000C8B0 3228 0030                  		move.w	$30(a0),d1
0000C8B4 9240                       		sub.w	d0,d1
0000C8B6 3141 000C                  		move.w	d1,$C(a0)
0000C8BA 4E75                       		rts	
0000C8BC                            ; ===========================================================================
0000C8BC                            ; ---------------------------------------------------------------------------
0000C8BC                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C8BC                            ; ---------------------------------------------------------------------------
0000C8BC                            Map_obj30:
0000C8BC                            	include "_maps\obj30.asm"
0000C8BC                            ; ---------------------------------------------------------------------------
0000C8BC                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C8BC                            ; ---------------------------------------------------------------------------
0000C8BC 0000                       		dc.w byte_B600-Map_obj30
0000C8BE 0000                       		dc.w byte_B63D-Map_obj30
0000C8C0 0000                       		dc.w byte_B648-Map_obj30
0000C8C2 0C                         byte_B600:	dc.b $C
0000C8C3 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000C8C8 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000C8CD C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000C8D2 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000C8D7 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000C8DC E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000C8E1 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000C8E6 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000C8EB 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000C8F0 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000C8F5 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000C8FA 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000C8FF 02                         byte_B63D:	dc.b 2
0000C900 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000C905 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000C90A 0A                         byte_B648:	dc.b $A
0000C90B C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000C910 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000C915 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000C91A D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000C91F F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000C924 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000C929 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000C92E 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000C933 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000C938 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000C93E 00                         		even
0000C93E 00                         		even
0000C93E                            
0000C93E                            ; ===========================================================================
0000C93E                            ; ---------------------------------------------------------------------------
0000C93E                            ; Object 31 - stomping metal blocks on chains (MZ)
0000C93E                            ; ---------------------------------------------------------------------------
0000C93E                            
0000C93E                            Obj31:					; XREF: Obj_Index
0000C93E 7000                       		moveq	#0,d0
0000C940 1028 0024                  		move.b	$24(a0),d0
0000C944 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000C948 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000C94C                            ; ===========================================================================
0000C94C 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000C94E 0000                       		dc.w loc_B798-Obj31_Index
0000C950 0000                       		dc.w loc_B7FE-Obj31_Index
0000C952 0000                       		dc.w Obj31_Display2-Obj31_Index
0000C954 0000                       		dc.w loc_B7E2-Obj31_Index
0000C956                            
0000C956 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000C958 0100                       		dc.b 1,	0
0000C95A                            
0000C95A 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000C95D 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000C960 08CC 03                    		dc.b 8,	$CC, 3
0000C963 06F0 02                    		dc.b 6,	$F0, 2
0000C966                            
0000C966 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000C96A 5000 7800                  		dc.w $5000, $7800
0000C96E 3800 5800                  		dc.w $3800, $5800
0000C972 B800                       		dc.w $B800
0000C974                            ; ===========================================================================
0000C974                            
0000C974                            Obj31_Main:				; XREF: Obj31_Index
0000C974 7000                       		moveq	#0,d0
0000C976 1028 0028                  		move.b	$28(a0),d0
0000C97A 6A00                       		bpl.s	loc_B6CE
0000C97C 0240 007F                  		andi.w	#$7F,d0
0000C980 D040                       		add.w	d0,d0
0000C982 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000C986 115A 003A                  		move.b	(a2)+,$3A(a0)
0000C98A 101A                       		move.b	(a2)+,d0
0000C98C 1140 0028                  		move.b	d0,$28(a0)
0000C990                            
0000C990                            loc_B6CE:
0000C990 0200 000F                  		andi.b	#$F,d0
0000C994 D040                       		add.w	d0,d0
0000C996 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000C99A 4A40                       		tst.w	d0
0000C99C 6600                       		bne.s	loc_B6E0
0000C99E 3142 0032                  		move.w	d2,$32(a0)
0000C9A2                            
0000C9A2                            loc_B6E0:
0000C9A2 45F9 0000 C95A             		lea	(Obj31_Var).l,a2
0000C9A8 2248                       		movea.l	a0,a1
0000C9AA 7203                       		moveq	#3,d1
0000C9AC 6000                       		bra.s	Obj31_MakeStomper
0000C9AE                            ; ===========================================================================
0000C9AE                            
0000C9AE                            Obj31_Loop:
0000C9AE 6100 0000                  		bsr.w	SingleObjLoad2
0000C9B2 6600 0000                  		bne.w	Obj31_SetSize
0000C9B6                            
0000C9B6                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000C9B6 135A 0024                  		move.b	(a2)+,$24(a1)
0000C9BA 12BC 0031                  		move.b	#$31,0(a1)
0000C9BE 3368 0008 0008             		move.w	8(a0),8(a1)
0000C9C4 101A                       		move.b	(a2)+,d0
0000C9C6 4880                       		ext.w	d0
0000C9C8 D068 000C                  		add.w	$C(a0),d0
0000C9CC 3340 000C                  		move.w	d0,$C(a1)
0000C9D0 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C9D8 337C 0300 0002             		move.w	#$300,2(a1)
0000C9DE 137C 0004 0001             		move.b	#4,1(a1)
0000C9E4 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C9EA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C9F0 137C 0010 0019             		move.b	#$10,$19(a1)
0000C9F6 3342 0034                  		move.w	d2,$34(a1)
0000C9FA 137C 0004 0018             		move.b	#4,$18(a1)
0000CA00 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CA04 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000CA0A 6600                       		bne.s	loc_B76A
0000CA0C 5341                       		subq.w	#1,d1
0000CA0E 1028 0028                  		move.b	$28(a0),d0
0000CA12 0240 00F0                  		andi.w	#$F0,d0
0000CA16 0C40 0020                  		cmpi.w	#$20,d0
0000CA1A 679A                       		beq.s	Obj31_MakeStomper
0000CA1C 137C 0038 0019             		move.b	#$38,$19(a1)
0000CA22 137C 0090 0020             		move.b	#$90,$20(a1)
0000CA28 5241                       		addq.w	#1,d1
0000CA2A                            
0000CA2A                            loc_B76A:
0000CA2A 2348 003C                  		move.l	a0,$3C(a1)
0000CA2E 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000CA32                            
0000CA32 137C 0003 0018             		move.b	#3,$18(a1)
0000CA38                            
0000CA38                            Obj31_SetSize:
0000CA38 7000                       		moveq	#0,d0
0000CA3A 1028 0028                  		move.b	$28(a0),d0
0000CA3E E648                       		lsr.w	#3,d0
0000CA40 0200 000E                  		andi.b	#$E,d0
0000CA44 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000CA48 115A 0019                  		move.b	(a2)+,$19(a0)
0000CA4C 115A 001A                  		move.b	(a2)+,$1A(a0)
0000CA50 6000                       		bra.s	loc_B798
0000CA52                            ; ===========================================================================
0000CA52 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000CA54 3009                       		dc.b $30, 9
0000CA56 100A                       		dc.b $10, $A
0000CA58                            ; ===========================================================================
0000CA58                            
0000CA58                            loc_B798:				; XREF: Obj31_Index
0000CA58 6100 0000                  		bsr.w	Obj31_Types
0000CA5C 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000CA62 7200                       		moveq	#0,d1
0000CA64 1228 0019                  		move.b	$19(a0),d1
0000CA68 0641 000B                  		addi.w	#$B,d1
0000CA6C 343C 000C                  		move.w	#$C,d2
0000CA70 363C 000D                  		move.w	#$D,d3
0000CA74 3828 0008                  		move.w	8(a0),d4
0000CA78 6100 0000                  		bsr.w	SolidObject
0000CA7C 0828 0003 0022             		btst	#3,$22(a0)
0000CA82 6700                       		beq.s	Obj31_Display
0000CA84 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000CA8A 6400                       		bcc.s	Obj31_Display
0000CA8C 2448                       		movea.l	a0,a2
0000CA8E 41F8 D000                  		lea	($FFFFD000).w,a0
0000CA92 4EB9 0000 0000             		jsr	KillSonic
0000CA98 204A                       		movea.l	a2,a0
0000CA9A 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0000CAA0 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0000CAA6                            
0000CAA6                            Obj31_Display:
0000CAA6 6100 0000                  		bsr.w	DisplaySprite
0000CAAA 6000 0000                  		bra.w	Obj31_ChkDel
0000CAAE                            ; ===========================================================================
0000CAAE                            
0000CAAE                            loc_B7E2:				; XREF: Obj31_Index
0000CAAE 117C 0080 0016             		move.b	#$80,$16(a0)
0000CAB4 08E8 0004 0001             		bset	#4,1(a0)
0000CABA 2268 003C                  		movea.l	$3C(a0),a1
0000CABE 1029 0032                  		move.b	$32(a1),d0
0000CAC2 EA08                       		lsr.b	#5,d0
0000CAC4 5600                       		addq.b	#3,d0
0000CAC6 1140 001A                  		move.b	d0,$1A(a0)
0000CACA                            
0000CACA                            loc_B7FE:				; XREF: Obj31_Index
0000CACA 2268 003C                  		movea.l	$3C(a0),a1
0000CACE 7000                       		moveq	#0,d0
0000CAD0 1029 0032                  		move.b	$32(a1),d0
0000CAD4 D068 0030                  		add.w	$30(a0),d0
0000CAD8 3140 000C                  		move.w	d0,$C(a0)
0000CADC                            
0000CADC                            Obj31_Display2:				; XREF: Obj31_Index
0000CADC 6100 0000                  		bsr.w	DisplaySprite
0000CAE0                            
0000CAE0                            Obj31_ChkDel:				; XREF: Obj31_Display
0000CAE0 3028 0008                  		move.w	8(a0),d0
0000CAE4 0240 FF80                  		andi.w	#$FF80,d0
0000CAE8 3238 F700                  		move.w	($FFFFF700).w,d1
0000CAEC 0441 0080                  		subi.w	#$80,d1
0000CAF0 0241 FF80                  		andi.w	#$FF80,d1
0000CAF4 9041                       		sub.w	d1,d0
0000CAF6 0C40 0280                  		cmpi.w	#$280,d0
0000CAFA 6300                       		bls.s	Obj31_NoDel
0000CAFC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000CB00 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000CB04 3640                       		movea.w	d0,a3	; load address into a2
0000CB06 0893 0007                  		bclr	#7,(a3)	; clear respawn table entry, so object can be loaded again
0000CB0A 6000 0000                  		bra.w	DeleteObject	; and delete object
0000CB0E                            
0000CB0E                            Obj31_NoDel:
0000CB0E 4E75                       		rts	
0000CB10                            ; ===========================================================================
0000CB10                            
0000CB10                            Obj31_Types:				; XREF: loc_B798
0000CB10 1028 0028                  		move.b	$28(a0),d0
0000CB14 0240 000F                  		andi.w	#$F,d0
0000CB18 D040                       		add.w	d0,d0
0000CB1A 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000CB1E 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000CB22                            ; ===========================================================================
0000CB22 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000CB24 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CB26 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CB28 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000CB2A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CB2C 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000CB2E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CB30                            ; ===========================================================================
0000CB30                            
0000CB30                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000CB30 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000CB34 7000                       		moveq	#0,d0
0000CB36 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000CB3A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000CB3E 6700                       		beq.s	loc_B8A8	; if not, branch
0000CB40 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000CB44 6A00                       		bpl.s	loc_B872
0000CB46 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000CB4C 6700                       		beq.s	loc_B8A0
0000CB4E                            
0000CB4E                            loc_B872:
0000CB4E 4A68 0032                  		tst.w	$32(a0)
0000CB52 6700                       		beq.s	loc_B8A0
0000CB54 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CB58 0200 000F                  		andi.b	#$F,d0
0000CB5C 6600                       		bne.s	loc_B892
0000CB5E 4A28 0001                  		tst.b	1(a0)
0000CB62 6A00                       		bpl.s	loc_B892
0000CB64 303C 00C7                  		move.w	#$C7,d0
0000CB68 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000CB6E                            
0000CB6E                            loc_B892:
0000CB6E 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CB74 6400                       		bcc.s	Obj31_Restart
0000CB76 317C 0000 0032             		move.w	#0,$32(a0)
0000CB7C                            
0000CB7C                            loc_B8A0:
0000CB7C 317C 0000 0012             		move.w	#0,$12(a0)
0000CB82 6000                       		bra.s	Obj31_Restart
0000CB84                            ; ===========================================================================
0000CB84                            
0000CB84                            loc_B8A8:				; XREF: Obj31_Type00
0000CB84 3228 0034                  		move.w	$34(a0),d1
0000CB88 B268 0032                  		cmp.w	$32(a0),d1
0000CB8C 6700                       		beq.s	Obj31_Restart
0000CB8E 3028 0012                  		move.w	$12(a0),d0
0000CB92 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000CB98 D168 0032                  		add.w	d0,$32(a0)
0000CB9C B268 0032                  		cmp.w	$32(a0),d1
0000CBA0 6200                       		bhi.s	Obj31_Restart
0000CBA2 3141 0032                  		move.w	d1,$32(a0)
0000CBA6 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000CBAC 4A28 0001                  		tst.b	1(a0)
0000CBB0 6A00                       		bpl.s	Obj31_Restart
0000CBB2 303C 00BD                  		move.w	#$BD,d0
0000CBB6 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play stomping sound
0000CBBC                            
0000CBBC                            Obj31_Restart:
0000CBBC 7000                       		moveq	#0,d0
0000CBBE 1028 0032                  		move.b	$32(a0),d0
0000CBC2 D068 0030                  		add.w	$30(a0),d0
0000CBC6 3140 000C                  		move.w	d0,$C(a0)
0000CBCA 4E75                       		rts	
0000CBCC                            ; ===========================================================================
0000CBCC                            
0000CBCC                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000CBCC 4A68 0036                  		tst.w	$36(a0)
0000CBD0 6700                       		beq.s	loc_B938
0000CBD2 4A68 0038                  		tst.w	$38(a0)
0000CBD6 6700                       		beq.s	loc_B902
0000CBD8 5368 0038                  		subq.w	#1,$38(a0)
0000CBDC 6000                       		bra.s	loc_B97C
0000CBDE                            ; ===========================================================================
0000CBDE                            
0000CBDE                            loc_B902:
0000CBDE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CBE2 0200 000F                  		andi.b	#$F,d0
0000CBE6 6600                       		bne.s	loc_B91C
0000CBE8 4A28 0001                  		tst.b	1(a0)
0000CBEC 6A00                       		bpl.s	loc_B91C
0000CBEE 303C 00C7                  		move.w	#$C7,d0
0000CBF2 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000CBF8                            
0000CBF8                            loc_B91C:
0000CBF8 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CBFE 6400                       		bcc.s	loc_B97C
0000CC00 317C 0000 0032             		move.w	#0,$32(a0)
0000CC06 317C 0000 0012             		move.w	#0,$12(a0)
0000CC0C 317C 0000 0036             		move.w	#0,$36(a0)
0000CC12 6000                       		bra.s	loc_B97C
0000CC14                            ; ===========================================================================
0000CC14                            
0000CC14                            loc_B938:				; XREF: Obj31_Type01
0000CC14 3228 0034                  		move.w	$34(a0),d1
0000CC18 B268 0032                  		cmp.w	$32(a0),d1
0000CC1C 6700                       		beq.s	loc_B97C
0000CC1E 3028 0012                  		move.w	$12(a0),d0
0000CC22 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000CC28 D168 0032                  		add.w	d0,$32(a0)
0000CC2C B268 0032                  		cmp.w	$32(a0),d1
0000CC30 6200                       		bhi.s	loc_B97C
0000CC32 3141 0032                  		move.w	d1,$32(a0)
0000CC36 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000CC3C 317C 0001 0036             		move.w	#1,$36(a0)
0000CC42 317C 003C 0038             		move.w	#$3C,$38(a0)
0000CC48 4A28 0001                  		tst.b	1(a0)
0000CC4C 6A00                       		bpl.s	loc_B97C
0000CC4E 303C 00BD                  		move.w	#$BD,d0
0000CC52 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play stomping sound
0000CC58                            
0000CC58                            loc_B97C:
0000CC58 6000 FF62                  		bra.w	Obj31_Restart
0000CC5C                            ; ===========================================================================
0000CC5C                            
0000CC5C                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000CC5C 3038 D008                  		move.w	($FFFFD008).w,d0
0000CC60 9068 0008                  		sub.w	8(a0),d0
0000CC64 6400                       		bcc.s	loc_B98C
0000CC66 4440                       		neg.w	d0
0000CC68                            
0000CC68                            loc_B98C:
0000CC68 0C40 0090                  		cmpi.w	#$90,d0
0000CC6C 6400                       		bcc.s	loc_B996
0000CC6E 5228 0028                  		addq.b	#1,$28(a0)
0000CC72                            
0000CC72                            loc_B996:
0000CC72 6000 FF48                  		bra.w	Obj31_Restart
0000CC76                            ; ===========================================================================
0000CC76                            ; ---------------------------------------------------------------------------
0000CC76                            ; Object 45 - spiked metal block from beta version (MZ)
0000CC76                            ; ---------------------------------------------------------------------------
0000CC76                            
0000CC76                            Obj45:					; XREF: Obj_Index
0000CC76 7000                       		moveq	#0,d0
0000CC78 1028 0024                  		move.b	$24(a0),d0
0000CC7C 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000CC80 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000CC84                            ; ===========================================================================
0000CC84 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000CC86 0000                       		dc.w Obj45_Solid-Obj45_Index
0000CC88 0000                       		dc.w loc_BA8E-Obj45_Index
0000CC8A 0000                       		dc.w Obj45_Display-Obj45_Index
0000CC8C 0000                       		dc.w loc_BA7A-Obj45_Index
0000CC8E                            
0000CC8E 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000CC91 04E4 01                    		dc.b	4, $E4,	  1
0000CC94 0834 03                    		dc.b	8, $34,	  3
0000CC97 0628 02                    		dc.b	6, $28,	  2
0000CC9A                            
0000CC9A 3800                       word_B9BE:	dc.w $3800
0000CC9C A000                       		dc.w -$6000
0000CC9E 5000                       		dc.w $5000
0000CCA0                            ; ===========================================================================
0000CCA0                            
0000CCA0                            Obj45_Main:				; XREF: Obj45_Index
0000CCA0 7000                       		moveq	#0,d0
0000CCA2 1028 0028                  		move.b	$28(a0),d0
0000CCA6 D040                       		add.w	d0,d0
0000CCA8 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000CCAC 45F9 0000 CC8E             		lea	(Obj45_Var).l,a2
0000CCB2 2248                       		movea.l	a0,a1
0000CCB4 7203                       		moveq	#3,d1
0000CCB6 6000                       		bra.s	Obj45_Load
0000CCB8                            ; ===========================================================================
0000CCB8                            
0000CCB8                            Obj45_Loop:
0000CCB8 6100 0000                  		bsr.w	SingleObjLoad2
0000CCBC 6600                       		bne.s	loc_BA52
0000CCBE                            
0000CCBE                            Obj45_Load:				; XREF: Obj45_Main
0000CCBE 135A 0024                  		move.b	(a2)+,$24(a1)
0000CCC2 12BC 0045                  		move.b	#$45,0(a1)
0000CCC6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CCCC 101A                       		move.b	(a2)+,d0
0000CCCE 4880                       		ext.w	d0
0000CCD0 D068 0008                  		add.w	8(a0),d0
0000CCD4 3340 0008                  		move.w	d0,8(a1)
0000CCD8 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000CCE0 337C 0300 0002             		move.w	#$300,2(a1)
0000CCE6 137C 0004 0001             		move.b	#4,1(a1)
0000CCEC 3369 0008 0030             		move.w	8(a1),$30(a1)
0000CCF2 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000CCF8 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000CCFE 137C 0020 0019             		move.b	#$20,$19(a1)
0000CD04 3342 0034                  		move.w	d2,$34(a1)
0000CD08 137C 0004 0018             		move.b	#4,$18(a1)
0000CD0E 0C12 0001                  		cmpi.b	#1,(a2)
0000CD12 6600                       		bne.s	loc_BA40
0000CD14 137C 0091 0020             		move.b	#$91,$20(a1)
0000CD1A                            
0000CD1A                            loc_BA40:
0000CD1A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CD1E 2348 003C                  		move.l	a0,$3C(a1)
0000CD22 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000CD26                            
0000CD26 137C 0003 0018             		move.b	#3,$18(a1)
0000CD2C                            
0000CD2C                            loc_BA52:
0000CD2C 117C 0010 0019             		move.b	#$10,$19(a0)
0000CD32                            
0000CD32                            Obj45_Solid:				; XREF: Obj45_Index
0000CD32 3F28 0008                  		move.w	8(a0),-(sp)
0000CD36 6100 0000                  		bsr.w	Obj45_Move
0000CD3A 323C 0017                  		move.w	#$17,d1
0000CD3E 343C 0020                  		move.w	#$20,d2
0000CD42 363C 0020                  		move.w	#$20,d3
0000CD46 381F                       		move.w	(sp)+,d4
0000CD48 6100 0000                  		bsr.w	SolidObject
0000CD4C 6100 0000                  		bsr.w	DisplaySprite
0000CD50 6000 0000                  		bra.w	Obj45_ChkDel
0000CD54                            ; ===========================================================================
0000CD54                            
0000CD54                            loc_BA7A:				; XREF: Obj45_Index
0000CD54 2268 003C                  		movea.l	$3C(a0),a1
0000CD58 1029 0032                  		move.b	$32(a1),d0
0000CD5C 0600 0010                  		addi.b	#$10,d0
0000CD60 EA08                       		lsr.b	#5,d0
0000CD62 5600                       		addq.b	#3,d0
0000CD64 1140 001A                  		move.b	d0,$1A(a0)
0000CD68                            
0000CD68                            loc_BA8E:				; XREF: Obj45_Index
0000CD68 2268 003C                  		movea.l	$3C(a0),a1
0000CD6C 7000                       		moveq	#0,d0
0000CD6E 1029 0032                  		move.b	$32(a1),d0
0000CD72 4440                       		neg.w	d0
0000CD74 D068 0030                  		add.w	$30(a0),d0
0000CD78 3140 0008                  		move.w	d0,8(a0)
0000CD7C                            
0000CD7C                            Obj45_Display:				; XREF: Obj45_Index
0000CD7C 6100 0000                  		bsr.w	DisplaySprite
0000CD80                            
0000CD80                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000CD80 3028 003A                  		move.w	$3A(a0),d0
0000CD84 0240 FF80                  		andi.w	#$FF80,d0
0000CD88 3238 F700                  		move.w	($FFFFF700).w,d1
0000CD8C 0441 0080                  		subi.w	#$80,d1
0000CD90 0241 FF80                  		andi.w	#$FF80,d1
0000CD94 9041                       		sub.w	d1,d0
0000CD96 0C40 0280                  		cmpi.w	#$280,d0
0000CD9A 6300                       		bls.s	Obj45_NoDel
0000CD9C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000CDA0 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000CDA4 3440                       		movea.w	d0,a2	; load address into a2
0000CDA6 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000CDAA 6000 0000                  		bra.w	DeleteObject	; and delete object
0000CDAE                            
0000CDAE                            Obj45_NoDel:
0000CDAE 4E75                       		rts	
0000CDB0                            
0000CDB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CDB0                            
0000CDB0                            
0000CDB0                            Obj45_Move:				; XREF: Obj45_Solid
0000CDB0 7000                       		moveq	#0,d0
0000CDB2 1028 0028                  		move.b	$28(a0),d0
0000CDB6 D040                       		add.w	d0,d0
0000CDB8 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000CDBC 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000CDC0                            ; End of function Obj45_Move
0000CDC0                            
0000CDC0                            ; ===========================================================================
0000CDC0 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000CDC2 0000                       		dc.w loc_BADA-off_BAD6
0000CDC4                            ; ===========================================================================
0000CDC4                            
0000CDC4                            loc_BADA:				; XREF: off_BAD6
0000CDC4 4A68 0036                  		tst.w	$36(a0)
0000CDC8 6700                       		beq.s	loc_BB08
0000CDCA 4A68 0038                  		tst.w	$38(a0)
0000CDCE 6700                       		beq.s	loc_BAEC
0000CDD0 5368 0038                  		subq.w	#1,$38(a0)
0000CDD4 6000                       		bra.s	loc_BB3C
0000CDD6                            ; ===========================================================================
0000CDD6                            
0000CDD6                            loc_BAEC:
0000CDD6 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CDDC 6400                       		bcc.s	loc_BB3C
0000CDDE 317C 0000 0032             		move.w	#0,$32(a0)
0000CDE4 317C 0000 0010             		move.w	#0,$10(a0)
0000CDEA 317C 0000 0036             		move.w	#0,$36(a0)
0000CDF0 6000                       		bra.s	loc_BB3C
0000CDF2                            ; ===========================================================================
0000CDF2                            
0000CDF2                            loc_BB08:				; XREF: loc_BADA
0000CDF2 3228 0034                  		move.w	$34(a0),d1
0000CDF6 B268 0032                  		cmp.w	$32(a0),d1
0000CDFA 6700                       		beq.s	loc_BB3C
0000CDFC 3028 0010                  		move.w	$10(a0),d0
0000CE00 0668 0070 0010             		addi.w	#$70,$10(a0)
0000CE06 D168 0032                  		add.w	d0,$32(a0)
0000CE0A B268 0032                  		cmp.w	$32(a0),d1
0000CE0E 6200                       		bhi.s	loc_BB3C
0000CE10 3141 0032                  		move.w	d1,$32(a0)
0000CE14 317C 0000 0010             		move.w	#0,$10(a0)
0000CE1A 317C 0001 0036             		move.w	#1,$36(a0)
0000CE20 317C 003C 0038             		move.w	#$3C,$38(a0)
0000CE26                            
0000CE26                            loc_BB3C:
0000CE26 7000                       		moveq	#0,d0
0000CE28 1028 0032                  		move.b	$32(a0),d0
0000CE2C 4440                       		neg.w	d0
0000CE2E D068 0030                  		add.w	$30(a0),d0
0000CE32 3140 0008                  		move.w	d0,8(a0)
0000CE36 4E75                       		rts	
0000CE38                            ; ===========================================================================
0000CE38                            ; ---------------------------------------------------------------------------
0000CE38                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000CE38                            ; ---------------------------------------------------------------------------
0000CE38                            Map_obj31:
0000CE38                            	include "_maps\obj31.asm"
0000CE38                            ; ---------------------------------------------------------------------------
0000CE38                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000CE38                            ; ---------------------------------------------------------------------------
0000CE38 0000                       		dc.w byte_BB64-Map_obj31
0000CE3A 0000                       		dc.w byte_BB7E-Map_obj31
0000CE3C 0000                       		dc.w byte_BB98-Map_obj31
0000CE3E 0000                       		dc.w byte_BB9E-Map_obj31
0000CE40 0000                       		dc.w byte_BBA9-Map_obj31
0000CE42 0000                       		dc.w byte_BBBE-Map_obj31
0000CE44 0000                       		dc.w byte_BBDD-Map_obj31
0000CE46 0000                       		dc.w byte_BC06-Map_obj31
0000CE48 0000                       		dc.w byte_BC06-Map_obj31
0000CE4A 0000                       		dc.w byte_BC39-Map_obj31
0000CE4C 0000                       		dc.w byte_BC53-Map_obj31
0000CE4E 05                         byte_BB64:	dc.b 5
0000CE4F F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000CE54 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000CE59 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000CE5E F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000CE63 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000CE68 05                         byte_BB7E:	dc.b 5
0000CE69 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000CE6E F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000CE73 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000CE78 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000CE7D F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000CE82 01                         byte_BB98:	dc.b 1
0000CE83 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000CE88 02                         byte_BB9E:	dc.b 2
0000CE89 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CE8E 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CE93 04                         byte_BBA9:	dc.b 4
0000CE94 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CE99 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CE9E 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CEA3 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CEA8 06                         byte_BBBE:	dc.b 6
0000CEA9 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CEAE D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CEB3 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CEB8 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CEBD 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CEC2 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CEC7 08                         byte_BBDD:	dc.b 8
0000CEC8 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000CECD B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000CED2 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CED7 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CEDC E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CEE1 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CEE6 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CEEB 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CEF0 0A                         byte_BC06:	dc.b $A
0000CEF1 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000CEF6 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000CEFB A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000CF00 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000CF05 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CF0A D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CF0F E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CF14 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CF19 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CF1E 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CF23 05                         byte_BC39:	dc.b 5
0000CF24 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000CF29 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000CF2E F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000CF33 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000CF38 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000CF3D 01                         byte_BC53:	dc.b 1
0000CF3E EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000CF44 00                         		even
0000CF44 00                         		even
0000CF44                            
0000CF44                            ; ---------------------------------------------------------------------------
0000CF44                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000CF44                            ; ---------------------------------------------------------------------------
0000CF44                            Map_obj45:
0000CF44                            	include "_maps\obj45.asm"
0000CF44                            ; ---------------------------------------------------------------------------
0000CF44                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000CF44                            ; ---------------------------------------------------------------------------
0000CF44 0000                       		dc.w byte_BC6C-Map_obj45
0000CF46 0000                       		dc.w byte_BC7C-Map_obj45
0000CF48 0000                       		dc.w byte_BC8C-Map_obj45
0000CF4A 0000                       		dc.w byte_BC92-Map_obj45
0000CF4C 0000                       		dc.w byte_BC9D-Map_obj45
0000CF4E 0000                       		dc.w byte_BCB2-Map_obj45
0000CF50 0000                       		dc.w byte_BCD1-Map_obj45
0000CF52 0000                       		dc.w byte_BCFA-Map_obj45
0000CF54 0000                       		dc.w byte_BCFA-Map_obj45
0000CF56 03                         byte_BC6C:	dc.b 3
0000CF57 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000CF5C 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000CF61 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000CF66 03                         byte_BC7C:	dc.b 3
0000CF67 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000CF6C FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000CF71 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000CF76 01                         byte_BC8C:	dc.b 1
0000CF77 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000CF7C 02                         byte_BC92:	dc.b 2
0000CF7D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CF82 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CF87 04                         byte_BC9D:	dc.b 4
0000CF88 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CF8D F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CF92 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CF97 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CF9C 06                         byte_BCB2:	dc.b 6
0000CF9D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CFA2 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CFA7 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CFAC F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CFB1 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CFB6 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CFBB 08                         byte_BCD1:	dc.b 8
0000CFBC F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CFC1 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CFC6 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CFCB F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CFD0 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CFD5 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CFDA F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000CFDF F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000CFE4 08                         byte_BCFA:	dc.b 8
0000CFE5 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CFEA F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CFEF F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CFF4 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CFF9 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CFFE F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D003 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000D008 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000D00D F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000D012 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000D018 00                         		even
0000D018 00                         		even
0000D018                            
0000D018                            ; ===========================================================================
0000D018                            ; ---------------------------------------------------------------------------
0000D018                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000D018                            ; ---------------------------------------------------------------------------
0000D018                            
0000D018                            Obj32:					; XREF: Obj_Index
0000D018 7000                       		moveq	#0,d0
0000D01A 1028 0024                  		move.b	$24(a0),d0
0000D01E 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000D022 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000D026                            ; ===========================================================================
0000D026 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000D028 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000D02A                            ; ===========================================================================
0000D02A                            
0000D02A                            Obj32_Main:				; XREF: Obj32_Index
0000D02A 5428 0024                  		addq.b	#2,$24(a0)
0000D02E 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000D036 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000D03C 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000D042 6700                       		beq.s	loc_BD60
0000D044 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000D04A                            
0000D04A                            loc_BD60:
0000D04A 117C 0004 0001             		move.b	#4,1(a0)
0000D050 117C 0010 0019             		move.b	#$10,$19(a0)
0000D056 117C 0004 0018             		move.b	#4,$18(a0)
0000D05C 5668 000C                  		addq.w	#3,$C(a0)
0000D060                            
0000D060                            Obj32_Pressed:				; XREF: Obj32_Index
0000D060 4A28 0001                  		tst.b	1(a0)
0000D064 6A00                       		bpl.s	Obj32_Display
0000D066 323C 001B                  		move.w	#$1B,d1
0000D06A 343C 0005                  		move.w	#5,d2
0000D06E 363C 0005                  		move.w	#5,d3
0000D072 3828 0008                  		move.w	8(a0),d4
0000D076 6100 0000                  		bsr.w	SolidObject
0000D07A 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000D080 1028 0028                  		move.b	$28(a0),d0
0000D084 0240 000F                  		andi.w	#$F,d0
0000D088 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000D08C 47F3 0000                  		lea	(a3,d0.w),a3
0000D090 7600                       		moveq	#0,d3
0000D092 0828 0006 0028             		btst	#6,$28(a0)
0000D098 6700                       		beq.s	loc_BDB2
0000D09A 7607                       		moveq	#7,d3
0000D09C                            
0000D09C                            loc_BDB2:
0000D09C 4A28 0028                  		tst.b	$28(a0)
0000D0A0 6A00                       		bpl.s	loc_BDBE
0000D0A2 6100 0000                  		bsr.w	Obj32_MZBlock
0000D0A6 6600                       		bne.s	loc_BDC8
0000D0A8                            
0000D0A8                            loc_BDBE:
0000D0A8 4A28 0025                  		tst.b	$25(a0)
0000D0AC 6600                       		bne.s	loc_BDC8
0000D0AE 0793                       		bclr	d3,(a3)
0000D0B0 6000                       		bra.s	loc_BDDE
0000D0B2                            ; ===========================================================================
0000D0B2                            
0000D0B2                            loc_BDC8:
0000D0B2 4A13                       		tst.b	(a3)
0000D0B4 6600                       		bne.s	loc_BDD6
0000D0B6 303C 00CD                  		move.w	#$CD,d0
0000D0BA 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play switch sound
0000D0C0                            
0000D0C0                            loc_BDD6:
0000D0C0 07D3                       		bset	d3,(a3)
0000D0C2 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000D0C8                            
0000D0C8                            loc_BDDE:
0000D0C8 0828 0005 0028             		btst	#5,$28(a0)
0000D0CE 6700                       		beq.s	Obj32_Display
0000D0D0 5328 001E                  		subq.b	#1,$1E(a0)
0000D0D4 6A00                       		bpl.s	Obj32_Display
0000D0D6 117C 0007 001E             		move.b	#7,$1E(a0)
0000D0DC 0868 0001 001A             		bchg	#1,$1A(a0)
0000D0E2                            
0000D0E2                            Obj32_Display:
0000D0E2 6100 0000                  		bsr.w	DisplaySprite
0000D0E6 3028 0008                  		move.w	8(a0),d0
0000D0EA 0240 FF80                  		andi.w	#$FF80,d0
0000D0EE 3238 F700                  		move.w	($FFFFF700).w,d1
0000D0F2 0441 0080                  		subi.w	#$80,d1
0000D0F6 0241 FF80                  		andi.w	#$FF80,d1
0000D0FA 9041                       		sub.w	d1,d0
0000D0FC 0C40 0280                  		cmpi.w	#$280,d0
0000D100 6300                       		bls.s	Obj32_NoDel
0000D102 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D106 6700                       		beq.s	Obj32_Delete		; if it's zero, don't remember object
0000D108 3440                       		movea.w	d0,a2	; load address into a2
0000D10A 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000D10E 6000                       		bra.s	Obj32_Delete	; and delete object
0000D110                            
0000D110                            Obj32_NoDel:
0000D110 4E75                       		rts	
0000D112                            ; ===========================================================================
0000D112                            
0000D112                            Obj32_Delete:
0000D112 6100 0000                  		bsr.w	DeleteObject
0000D116 4E75                       		rts	
0000D118                            
0000D118                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D118                            
0000D118                            
0000D118                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000D118 3F03                       		move.w	d3,-(sp)
0000D11A 3428 0008                  		move.w	8(a0),d2
0000D11E 3628 000C                  		move.w	$C(a0),d3
0000D122 0442 0010                  		subi.w	#$10,d2
0000D126 5143                       		subq.w	#8,d3
0000D128 383C 0020                  		move.w	#$20,d4
0000D12C 3A3C 0010                  		move.w	#$10,d5
0000D130 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000D134 3C3C 005F                  		move.w	#$5F,d6
0000D138                            
0000D138                            Obj32_MZLoop:
0000D138 4A29 0001                  		tst.b	1(a1)
0000D13C 6A00                       		bpl.s	loc_BE4E
0000D13E 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000D142 6700                       		beq.s	loc_BE5E	; if yes, branch
0000D144                            
0000D144                            loc_BE4E:
0000D144 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000D148 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000D14C                            
0000D14C 361F                       		move.w	(sp)+,d3
0000D14E 7000                       		moveq	#0,d0
0000D150                            
0000D150                            locret_BE5A:
0000D150 4E75                       		rts	
0000D152                            ; ===========================================================================
0000D152 1010                       Obj32_MZData:	dc.b $10, $10
0000D154                            ; ===========================================================================
0000D154                            
0000D154                            loc_BE5E:				; XREF: Obj32_MZBlock
0000D154 7001                       		moveq	#1,d0
0000D156 0240 003F                  		andi.w	#$3F,d0
0000D15A D040                       		add.w	d0,d0
0000D15C 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000D160 121A                       		move.b	(a2)+,d1
0000D162 4881                       		ext.w	d1
0000D164 3029 0008                  		move.w	8(a1),d0
0000D168 9041                       		sub.w	d1,d0
0000D16A 9042                       		sub.w	d2,d0
0000D16C 6400                       		bcc.s	loc_BE80
0000D16E D241                       		add.w	d1,d1
0000D170 D041                       		add.w	d1,d0
0000D172 6500                       		bcs.s	loc_BE84
0000D174 60CE                       		bra.s	loc_BE4E
0000D176                            ; ===========================================================================
0000D176                            
0000D176                            loc_BE80:
0000D176 B044                       		cmp.w	d4,d0
0000D178 62CA                       		bhi.s	loc_BE4E
0000D17A                            
0000D17A                            loc_BE84:
0000D17A 121A                       		move.b	(a2)+,d1
0000D17C 4881                       		ext.w	d1
0000D17E 3029 000C                  		move.w	$C(a1),d0
0000D182 9041                       		sub.w	d1,d0
0000D184 9043                       		sub.w	d3,d0
0000D186 6400                       		bcc.s	loc_BE9A
0000D188 D241                       		add.w	d1,d1
0000D18A D041                       		add.w	d1,d0
0000D18C 6500                       		bcs.s	loc_BE9E
0000D18E 60B4                       		bra.s	loc_BE4E
0000D190                            ; ===========================================================================
0000D190                            
0000D190                            loc_BE9A:
0000D190 B045                       		cmp.w	d5,d0
0000D192 62B0                       		bhi.s	loc_BE4E
0000D194                            
0000D194                            loc_BE9E:
0000D194 361F                       		move.w	(sp)+,d3
0000D196 7001                       		moveq	#1,d0
0000D198 4E75                       		rts	
0000D19A                            ; End of function Obj32_MZBlock
0000D19A                            
0000D19A                            ; ===========================================================================
0000D19A                            ; ---------------------------------------------------------------------------
0000D19A                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D19A                            ; ---------------------------------------------------------------------------
0000D19A                            Map_obj32:
0000D19A                            	include "_maps\obj32.asm"
0000D19A                            ; ---------------------------------------------------------------------------
0000D19A                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D19A                            ; ---------------------------------------------------------------------------
0000D19A 0000                       		dc.w byte_BEAC-Map_obj32
0000D19C 0000                       		dc.w byte_BEB7-Map_obj32
0000D19E 0000                       		dc.w byte_BEC2-Map_obj32
0000D1A0 0000                       		dc.w byte_BEB7-Map_obj32
0000D1A2 02                         byte_BEAC:	dc.b 2
0000D1A3 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000D1A8 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000D1AD 02                         byte_BEB7:	dc.b 2
0000D1AE F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000D1B3 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000D1B8 02                         byte_BEC2:	dc.b 2
0000D1B9 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000D1BE F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000D1C3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D1C8                            		even
0000D1C8                            		even
0000D1C8                            
0000D1C8                            ; ===========================================================================
0000D1C8                            ; ---------------------------------------------------------------------------
0000D1C8                            ; Object 33 - pushable blocks (MZ, LZ)
0000D1C8                            ; ---------------------------------------------------------------------------
0000D1C8                            
0000D1C8                            Obj33:					; XREF: Obj_Index
0000D1C8 7000                       		moveq	#0,d0
0000D1CA 1028 0024                  		move.b	$24(a0),d0
0000D1CE 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000D1D2 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000D1D6                            ; ===========================================================================
0000D1D6 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000D1D8 0000                       		dc.w loc_BF6E-Obj33_Index
0000D1DA 0000                       		dc.w loc_C02C-Obj33_Index
0000D1DC                            
0000D1DC 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000D1DE 4001                       		dc.b $40, 1
0000D1E0                            ; ===========================================================================
0000D1E0                            
0000D1E0                            Obj33_Main:				; XREF: Obj33_Index
0000D1E0 5428 0024                  		addq.b	#2,$24(a0)
0000D1E4 117C 000F 0016             		move.b	#$F,$16(a0)
0000D1EA 117C 000F 0017             		move.b	#$F,$17(a0)
0000D1F0 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000D1F8 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000D1FE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000D204 6600                       		bne.s	loc_BF16
0000D206 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000D20C                            
0000D20C                            loc_BF16:
0000D20C 117C 0004 0001             		move.b	#4,1(a0)
0000D212 117C 0003 0018             		move.b	#3,$18(a0)
0000D218 3168 0008 0034             		move.w	8(a0),$34(a0)
0000D21E 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000D224 7000                       		moveq	#0,d0
0000D226 1028 0028                  		move.b	$28(a0),d0
0000D22A D040                       		add.w	d0,d0
0000D22C 0240 000E                  		andi.w	#$E,d0
0000D230 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000D234 115A 0019                  		move.b	(a2)+,$19(a0)
0000D238 115A 001A                  		move.b	(a2)+,$1A(a0)
0000D23C 4A28 0028                  		tst.b	$28(a0)
0000D240 6700                       		beq.s	Obj33_ChkGone
0000D242 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000D248                            
0000D248                            Obj33_ChkGone:
0000D248 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D24C 6700                       		beq.s	loc_BF6E		; if it's zero, don't remember object
0000D24E 3440                       		movea.w	d0,a2	; load address into a2
0000D250 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000D254 08D2 0000                  		bset	#0,(a2)
0000D258 6600 0000                  		bne.w	DeleteObject
0000D25C                            
0000D25C                            loc_BF6E:				; XREF: Obj33_Index
0000D25C 4A28 0032                  		tst.b	$32(a0)
0000D260 6600 0000                  		bne.w	loc_C046
0000D264 7200                       		moveq	#0,d1
0000D266 1228 0019                  		move.b	$19(a0),d1
0000D26A 0641 000B                  		addi.w	#$B,d1
0000D26E 343C 0010                  		move.w	#$10,d2
0000D272 363C 0011                  		move.w	#$11,d3
0000D276 3828 0008                  		move.w	8(a0),d4
0000D27A 6100 0000                  		bsr.w	loc_C186
0000D27E 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000D284 6600                       		bne.s	loc_BFC6	; if not, branch
0000D286 08A8 0007 0028             		bclr	#7,$28(a0)
0000D28C 3028 0008                  		move.w	8(a0),d0
0000D290 0C40 0A20                  		cmpi.w	#$A20,d0
0000D294 6500                       		bcs.s	loc_BFC6
0000D296 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000D29A 6400                       		bcc.s	loc_BFC6
0000D29C 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000D2A0 0440 001C                  		subi.w	#$1C,d0
0000D2A4 3140 000C                  		move.w	d0,$C(a0)
0000D2A8 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000D2AE 08E8 0007 0028             		bset	#7,$28(a0)
0000D2B4                            
0000D2B4                            loc_BFC6:
0000D2B4 3028 0008                  		move.w	8(a0),d0
0000D2B8 0240 FF80                  		andi.w	#$FF80,d0
0000D2BC 3238 F700                  		move.w	($FFFFF700).w,d1
0000D2C0 0441 0080                  		subi.w	#$80,d1
0000D2C4 0241 FF80                  		andi.w	#$FF80,d1
0000D2C8 9041                       		sub.w	d1,d0
0000D2CA 0C40 0280                  		cmpi.w	#$280,d0
0000D2CE 6300 0000                  		bls.w	DisplaySprite
0000D2D2 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D2D6 6700                       		beq.s	loc_BFE6	; if it's zero, don't remember object
0000D2D8 3440                       		movea.w	d0,a2	; load address into a2
0000D2DA 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000D2DE                            
0000D2DE                            loc_BFE6:
0000D2DE 3028 0034                  		move.w	$34(a0),d0
0000D2E2 0240 FF80                  		andi.w	#$FF80,d0
0000D2E6 3238 F700                  		move.w	($FFFFF700).w,d1
0000D2EA 0441 0080                  		subi.w	#$80,d1
0000D2EE 0241 FF80                  		andi.w	#$FF80,d1
0000D2F2 9041                       		sub.w	d1,d0
0000D2F4 0C40 0280                  		cmpi.w	#$280,d0
0000D2F8 6200                       		bhi.s	loc_C016
0000D2FA 3168 0034 0008             		move.w	$34(a0),8(a0)
0000D300 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000D306 117C 0004 0024             		move.b	#4,$24(a0)
0000D30C 6000                       		bra.s	loc_C02C
0000D30E                            ; ===========================================================================
0000D30E                            
0000D30E                            loc_C016:
0000D30E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D312 6700                       		beq.s	loc_C028		; if it's zero, don't remember object
0000D314 3440                       		movea.w	d0,a2	; load address into a2
0000D316 0892 0000                  		bclr	#0,(a2)
0000D31A                            
0000D31A                            loc_C028:
0000D31A 6000 0000                  		bra.w	DeleteObject
0000D31E                            ; ===========================================================================
0000D31E                            
0000D31E                            loc_C02C:				; XREF: Obj33_Index
0000D31E 6100 0000                  		bsr.w	ChkObjOnScreen2
0000D322 6700                       		beq.s	locret_C044
0000D324 117C 0002 0024             		move.b	#2,$24(a0)
0000D32A 4228 0032                  		clr.b	$32(a0)
0000D32E 4268 0010                  		clr.w	$10(a0)
0000D332 4268 0012                  		clr.w	$12(a0)
0000D336                            
0000D336                            locret_C044:
0000D336 4E75                       		rts	
0000D338                            ; ===========================================================================
0000D338                            
0000D338                            loc_C046:				; XREF: loc_BF6E
0000D338 3F28 0008                  		move.w	8(a0),-(sp)
0000D33C 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000D342 6400                       		bcc.s	loc_C056
0000D344 6100 0000                  		bsr.w	SpeedToPos
0000D348                            
0000D348                            loc_C056:
0000D348 0828 0001 0022             		btst	#1,$22(a0)
0000D34E 6700                       		beq.s	loc_C0A0
0000D350 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D356 4EB9 0000 0000             		jsr	ObjHitFloor
0000D35C 4A41                       		tst.w	d1
0000D35E 6A00 0000                  		bpl.w	loc_C09E
0000D362 D368 000C                  		add.w	d1,$C(a0)
0000D366 4268 0012                  		clr.w	$12(a0)
0000D36A 08A8 0001 0022             		bclr	#1,$22(a0)
0000D370 3011                       		move.w	(a1),d0
0000D372 0240 03FF                  		andi.w	#$3FF,d0
0000D376 0C40 016A                  		cmpi.w	#$16A,d0
0000D37A 6500                       		bcs.s	loc_C09E
0000D37C 3028 0030                  		move.w	$30(a0),d0
0000D380 E640                       		asr.w	#3,d0
0000D382 3140 0010                  		move.w	d0,$10(a0)
0000D386 117C 0001 0032             		move.b	#1,$32(a0)
0000D38C 4268 000E                  		clr.w	$E(a0)
0000D390                            
0000D390                            loc_C09E:
0000D390 6000                       		bra.s	loc_C0E6
0000D392                            ; ===========================================================================
0000D392                            
0000D392                            loc_C0A0:
0000D392 4A68 0010                  		tst.w	$10(a0)
0000D396 6700 0000                  		beq.w	loc_C0D6
0000D39A 6B00                       		bmi.s	loc_C0BC
0000D39C 7600                       		moveq	#0,d3
0000D39E 1628 0019                  		move.b	$19(a0),d3
0000D3A2 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D3A8 4A41                       		tst.w	d1		; has block touched a wall?
0000D3AA 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D3AC 6000                       		bra.s	loc_C0E6
0000D3AE                            ; ===========================================================================
0000D3AE                            
0000D3AE                            loc_C0BC:
0000D3AE 7600                       		moveq	#0,d3
0000D3B0 1628 0019                  		move.b	$19(a0),d3
0000D3B4 4643                       		not.w	d3
0000D3B6 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D3BC 4A41                       		tst.w	d1		; has block touched a wall?
0000D3BE 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D3C0 6000                       		bra.s	loc_C0E6
0000D3C2                            ; ===========================================================================
0000D3C2                            
0000D3C2                            Obj33_StopPush:
0000D3C2 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000D3C6 6000                       		bra.s	loc_C0E6
0000D3C8                            ; ===========================================================================
0000D3C8                            
0000D3C8                            loc_C0D6:
0000D3C8 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000D3D0 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000D3D6 6400                       		bcc.s	loc_C104
0000D3D8                            
0000D3D8                            loc_C0E6:
0000D3D8 7200                       		moveq	#0,d1
0000D3DA 1228 0019                  		move.b	$19(a0),d1
0000D3DE 0641 000B                  		addi.w	#$B,d1
0000D3E2 343C 0010                  		move.w	#$10,d2
0000D3E6 363C 0011                  		move.w	#$11,d3
0000D3EA 381F                       		move.w	(sp)+,d4
0000D3EC 6100 0000                  		bsr.w	loc_C186
0000D3F0 6100                       		bsr.s	Obj33_ChkLava
0000D3F2 6000 FEC0                  		bra.w	loc_BFC6
0000D3F6                            ; ===========================================================================
0000D3F6                            
0000D3F6                            loc_C104:
0000D3F6 381F                       		move.w	(sp)+,d4
0000D3F8 43F8 D000                  		lea	($FFFFD000).w,a1
0000D3FC 08A9 0003 0022             		bclr	#3,$22(a1)
0000D402 08A8 0003 0022             		bclr	#3,$22(a0)
0000D408 6000 FED4                  		bra.w	loc_BFE6
0000D40C                            ; ===========================================================================
0000D40C                            
0000D40C                            Obj33_ChkLava:
0000D40C 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000D412 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000D414 343C FFE0                  		move.w	#-$20,d2
0000D418 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000D41E 6700                       		beq.s	Obj33_LoadLava
0000D420 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000D426 6700                       		beq.s	Obj33_LoadLava
0000D428 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000D42E 6700                       		beq.s	Obj33_LoadLava
0000D430 4E75                       		rts	
0000D432                            ; ===========================================================================
0000D432                            
0000D432                            Obj33_ChkLava2:
0000D432 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000D438 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000D43A 343C 0020                  		move.w	#$20,d2
0000D43E 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000D444 6700                       		beq.s	Obj33_LoadLava
0000D446 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000D44C 6700                       		beq.s	Obj33_LoadLava
0000D44E                            
0000D44E                            Obj33_NoLava:
0000D44E 4E75                       		rts	
0000D450                            ; ===========================================================================
0000D450                            
0000D450                            Obj33_LoadLava:
0000D450 6100 0000                  		bsr.w	SingleObjLoad
0000D454 6600                       		bne.s	locret_C184
0000D456 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000D45A 3368 0008 0008             		move.w	8(a0),8(a1)
0000D460 D569 0008                  		add.w	d2,8(a1)
0000D464 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D46A 0669 0010 000C             		addi.w	#$10,$C(a1)
0000D470 2348 003C                  		move.l	a0,$3C(a1)
0000D474                            
0000D474                            locret_C184:
0000D474 4E75                       		rts	
0000D476                            ; ===========================================================================
0000D476                            
0000D476                            loc_C186:				; XREF: loc_BF6E
0000D476 1028 0025                  		move.b	$25(a0),d0
0000D47A 6700 0000                  		beq.w	loc_C218
0000D47E 5500                       		subq.b	#2,d0
0000D480 6600                       		bne.s	loc_C1AA
0000D482 6100 B220                  		bsr.w	ExitPlatform
0000D486 0829 0003 0022             		btst	#3,$22(a1)
0000D48C 6600                       		bne.s	loc_C1A4
0000D48E 4228 0025                  		clr.b	$25(a0)
0000D492 4E75                       		rts	
0000D494                            ; ===========================================================================
0000D494                            
0000D494                            loc_C1A4:
0000D494 3404                       		move.w	d4,d2
0000D496 6000 B776                  		bra.w	MvSonicOnPtfm
0000D49A                            ; ===========================================================================
0000D49A                            
0000D49A                            loc_C1AA:
0000D49A 5500                       		subq.b	#2,d0
0000D49C 6600                       		bne.s	loc_C1F2
0000D49E 6100 0000                  		bsr.w	SpeedToPos
0000D4A2 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D4A8 4EB9 0000 0000             		jsr	ObjHitFloor
0000D4AE 4A41                       		tst.w	d1
0000D4B0 6A00 0000                  		bpl.w	locret_C1F0
0000D4B4 D368 000C                  		add.w	d1,$C(a0)
0000D4B8 4268 0012                  		clr.w	$12(a0)
0000D4BC 4228 0025                  		clr.b	$25(a0)
0000D4C0 3011                       		move.w	(a1),d0
0000D4C2 0240 03FF                  		andi.w	#$3FF,d0
0000D4C6 0C40 016A                  		cmpi.w	#$16A,d0
0000D4CA 6500                       		bcs.s	locret_C1F0
0000D4CC 3028 0030                  		move.w	$30(a0),d0
0000D4D0 E640                       		asr.w	#3,d0
0000D4D2 3140 0010                  		move.w	d0,$10(a0)
0000D4D6 117C 0001 0032             		move.b	#1,$32(a0)
0000D4DC 4268 000E                  		clr.w	$E(a0)
0000D4E0                            
0000D4E0                            locret_C1F0:
0000D4E0 4E75                       		rts	
0000D4E2                            ; ===========================================================================
0000D4E2                            
0000D4E2                            loc_C1F2:
0000D4E2 6100 0000                  		bsr.w	SpeedToPos
0000D4E6 3028 0008                  		move.w	8(a0),d0
0000D4EA 0240 000C                  		andi.w	#$C,d0
0000D4EE 6600 0000                  		bne.w	locret_C2E4
0000D4F2 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000D4F8 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000D4FE 4268 0010                  		clr.w	$10(a0)
0000D502 5528 0025                  		subq.b	#2,$25(a0)
0000D506 4E75                       		rts	
0000D508                            ; ===========================================================================
0000D508                            
0000D508                            loc_C218:
0000D508 6100 0000                  		bsr.w	loc_FAC8
0000D50C 4A44                       		tst.w	d4
0000D50E 6700 0000                  		beq.w	locret_C2E4
0000D512 6B00 0000                  		bmi.w	locret_C2E4
0000D516 4A28 0032                  		tst.b	$32(a0)
0000D51A 6700                       		beq.s	loc_C230
0000D51C 6000 0000                  		bra.w	locret_C2E4
0000D520                            ; ===========================================================================
0000D520                            
0000D520                            loc_C230:
0000D520 4A40                       		tst.w	d0
0000D522 6700 0000                  		beq.w	locret_C2E4
0000D526 6B00                       		bmi.s	loc_C268
0000D528 0829 0000 0022             		btst	#0,$22(a1)
0000D52E 6600 0000                  		bne.w	locret_C2E4
0000D532 3F00                       		move.w	d0,-(sp)
0000D534 7600                       		moveq	#0,d3
0000D536 1628 0019                  		move.b	$19(a0),d3
0000D53A 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D540 301F                       		move.w	(sp)+,d0
0000D542 4A41                       		tst.w	d1
0000D544 6B00 0000                  		bmi.w	locret_C2E4
0000D548 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000D550 7001                       		moveq	#1,d0
0000D552 323C 0040                  		move.w	#$40,d1
0000D556 6000                       		bra.s	loc_C294
0000D558                            ; ===========================================================================
0000D558                            
0000D558                            loc_C268:
0000D558 0829 0000 0022             		btst	#0,$22(a1)
0000D55E 6700                       		beq.s	locret_C2E4
0000D560 3F00                       		move.w	d0,-(sp)
0000D562 7600                       		moveq	#0,d3
0000D564 1628 0019                  		move.b	$19(a0),d3
0000D568 4643                       		not.w	d3
0000D56A 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D570 301F                       		move.w	(sp)+,d0
0000D572 4A41                       		tst.w	d1
0000D574 6B00                       		bmi.s	locret_C2E4
0000D576 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000D57E 70FF                       		moveq	#-1,d0
0000D580 323C FFC0                  		move.w	#-$40,d1
0000D584                            
0000D584                            loc_C294:
0000D584 43F8 D000                  		lea	($FFFFD000).w,a1
0000D588 D169 0008                  		add.w	d0,8(a1)
0000D58C 3341 0020                  		move.w	d1,$20(a1)
0000D590 337C 0000 0010             		move.w	#0,$10(a1)
0000D596 3F00                       		move.w	d0,-(sp)
0000D598 303C 00A7                  		move.w	#$A7,d0
0000D59C 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play pushing sound
0000D5A2 301F                       		move.w	(sp)+,d0
0000D5A4 4A28 0028                  		tst.b	$28(a0)
0000D5A8 6B00                       		bmi.s	locret_C2E4
0000D5AA 3F00                       		move.w	d0,-(sp)
0000D5AC 4EB9 0000 0000             		jsr	ObjHitFloor
0000D5B2 301F                       		move.w	(sp)+,d0
0000D5B4 0C41 0004                  		cmpi.w	#4,d1
0000D5B8 6F00                       		ble.s	loc_C2E0
0000D5BA 317C 0400 0010             		move.w	#$400,$10(a0)
0000D5C0 4A40                       		tst.w	d0
0000D5C2 6A00                       		bpl.s	loc_C2D8
0000D5C4 4468 0010                  		neg.w	$10(a0)
0000D5C8                            
0000D5C8                            loc_C2D8:
0000D5C8 117C 0006 0025             		move.b	#6,$25(a0)
0000D5CE 6000                       		bra.s	locret_C2E4
0000D5D0                            ; ===========================================================================
0000D5D0                            
0000D5D0                            loc_C2E0:
0000D5D0 D368 000C                  		add.w	d1,$C(a0)
0000D5D4                            
0000D5D4                            locret_C2E4:
0000D5D4 4E75                       		rts	
0000D5D6                            ; ===========================================================================
0000D5D6                            ; ---------------------------------------------------------------------------
0000D5D6                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000D5D6                            ; ---------------------------------------------------------------------------
0000D5D6                            Map_obj33:
0000D5D6                            	include "_maps\obj33.asm"
0000D5D6                            ; ---------------------------------------------------------------------------
0000D5D6                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000D5D6                            ; ---------------------------------------------------------------------------
0000D5D6 0000                       		dc.w byte_C2EA-Map_obj33
0000D5D8 0000                       		dc.w byte_C2F0-Map_obj33
0000D5DA 01                         byte_C2EA:	dc.b 1
0000D5DB F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000D5E0 04                         byte_C2F0:	dc.b 4
0000D5E1 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000D5E6 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000D5EB F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000D5F0 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000D5F6 00                         		even
0000D5F6 00                         		even
0000D5F6                            
0000D5F6                            ; ===========================================================================
0000D5F6                            ; ---------------------------------------------------------------------------
0000D5F6                            ; Object 34 - zone title cards
0000D5F6                            ; ---------------------------------------------------------------------------
0000D5F6                            
0000D5F6                            Obj34:					; XREF: Obj_Index
0000D5F6 7000                       		moveq	#0,d0
0000D5F8 1028 0024                  		move.b	$24(a0),d0
0000D5FC 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000D600 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000D604                            ; ===========================================================================
0000D604 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000D606 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000D608 0000                       		dc.w Obj34_Wait-Obj34_Index
0000D60A 0000                       		dc.w Obj34_Wait-Obj34_Index
0000D60C                            ; ===========================================================================
0000D60C                            
0000D60C                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000D60C 2248                       		movea.l	a0,a1
0000D60E 7000                       		moveq	#0,d0
0000D610 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D614 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000D61A 6600                       		bne.s	Obj34_CheckFZ
0000D61C 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000D61E                            
0000D61E                            Obj34_CheckFZ:
0000D61E 3400                       		move.w	d0,d2
0000D620 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000D626 6600                       		bne.s	Obj34_LoadConfig
0000D628 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000D62A 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000D62C                            
0000D62C                            Obj34_LoadConfig:
0000D62C 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000D632 E948                       		lsl.w	#4,d0
0000D634 D6C0                       		adda.w	d0,a3
0000D636 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000D63C 7203                       		moveq	#3,d1
0000D63E                            
0000D63E                            Obj34_Loop:
0000D63E 12BC 0034                  		move.b	#$34,0(a1)
0000D642 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000D646 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000D64A 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000D64E 335A 000A                  		move.w	(a2)+,$A(a1)
0000D652 135A 0024                  		move.b	(a2)+,$24(a1)
0000D656 101A                       		move.b	(a2)+,d0
0000D658 6600                       		bne.s	Obj34_ActNumber
0000D65A 1002                       		move.b	d2,d0
0000D65C                            
0000D65C                            Obj34_ActNumber:
0000D65C 0C00 0007                  		cmpi.b	#7,d0
0000D660 6600                       		bne.s	Obj34_MakeSprite
0000D662 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000D666 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000D66C 6600                       		bne.s	Obj34_MakeSprite
0000D66E 5300                       		subq.b	#1,d0
0000D670                            
0000D670                            Obj34_MakeSprite:
0000D670 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000D674 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000D67C 337C 8580 0002             		move.w	#$8580,2(a1)
0000D682 137C 0078 0019             		move.b	#$78,$19(a1)
0000D688 137C 0000 0001             		move.b	#0,1(a1)
0000D68E 137C 0000 0018             		move.b	#0,$18(a1)
0000D694 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000D69A 43E9 0040                  		lea	$40(a1),a1	; next object
0000D69E 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000D6A2                            
0000D6A2                            Obj34_ChkPos:				; XREF: Obj34_Index
0000D6A2 7210                       		moveq	#$10,d1		; set horizontal speed
0000D6A4 3028 0030                  		move.w	$30(a0),d0
0000D6A8 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000D6AC 6700                       		beq.s	loc_C3C8	; if yes, branch
0000D6AE 6C00                       		bge.s	Obj34_Move
0000D6B0 4441                       		neg.w	d1
0000D6B2                            
0000D6B2                            Obj34_Move:
0000D6B2 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D6B6                            
0000D6B6                            loc_C3C8:
0000D6B6 3028 0008                  		move.w	8(a0),d0
0000D6BA 6B00                       		bmi.s	locret_C3D8
0000D6BC 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D6C0 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000D6C2 6000 0000                  		bra.w	DisplaySprite
0000D6C6                            ; ===========================================================================
0000D6C6                            
0000D6C6                            locret_C3D8:
0000D6C6 4E75                       		rts	
0000D6C8                            ; ===========================================================================
0000D6C8                            
0000D6C8                            Obj34_Wait:				; XREF: Obj34_Index
0000D6C8 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000D6CC 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000D6CE 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000D6D2 6000 0000                  		bra.w	DisplaySprite
0000D6D6                            ; ===========================================================================
0000D6D6                            
0000D6D6                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000D6D6 4A28 0001                  		tst.b	1(a0)
0000D6DA 6A00                       		bpl.s	Obj34_ChangeArt
0000D6DC 7220                       		moveq	#$20,d1
0000D6DE 3028 0032                  		move.w	$32(a0),d0
0000D6E2 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000D6E6 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000D6E8 6C00                       		bge.s	Obj34_Move2
0000D6EA 4441                       		neg.w	d1
0000D6EC                            
0000D6EC                            Obj34_Move2:
0000D6EC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D6F0 3028 0008                  		move.w	8(a0),d0
0000D6F4 6B00                       		bmi.s	locret_C412
0000D6F6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D6FA 6400                       		bcc.s	locret_C412	; if yes, branch
0000D6FC 6000 0000                  		bra.w	DisplaySprite
0000D700                            ; ===========================================================================
0000D700                            
0000D700                            locret_C412:
0000D700 4E75                       		rts	
0000D702                            ; ===========================================================================
0000D702                            
0000D702                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000D702 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D708 6600                       		bne.s	Obj34_Delete
0000D70A 7002                       		moveq	#2,d0
0000D70C 4EB9 0000 145E             		jsr	(LoadPLC).l	; load explosion patterns
0000D712 7000                       		moveq	#0,d0
0000D714 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D718 0640 0015                  		addi.w	#$15,d0
0000D71C 4EB9 0000 145E             		jsr	(LoadPLC).l	; load animal patterns
0000D722                            
0000D722                            Obj34_Delete:
0000D722 6000 0000                  		bra.w	DeleteObject
0000D726                            ; ===========================================================================
0000D726 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000D728 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000D72A 00E4                       		dc.w $E4
0000D72C 0206                       		dc.b 2,	6
0000D72E 00EA                       		dc.w $EA
0000D730 0207                       		dc.b 2,	7
0000D732 00E0                       		dc.w $E0
0000D734 020A                       		dc.b 2,	$A
0000D736                            ; ---------------------------------------------------------------------------
0000D736                            ; Title	card configuration data
0000D736                            ; Format:
0000D736                            ; 4 bytes per item (YYYY XXXX)
0000D736                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000D736                            ; ---------------------------------------------------------------------------
0000D736 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D746 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000D756 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000D766 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000D776 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000D786 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000D796 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000D7A6                            ; ===========================================================================
0000D7A6                            ; ---------------------------------------------------------------------------
0000D7A6                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000D7A6                            ; ---------------------------------------------------------------------------
0000D7A6                            
0000D7A6                            Obj39:					; XREF: Obj_Index
0000D7A6 7000                       		moveq	#0,d0
0000D7A8 1028 0024                  		move.b	$24(a0),d0
0000D7AC 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000D7B0 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000D7B4                            ; ===========================================================================
0000D7B4 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000D7B6 0000                       		dc.w loc_C50C-Obj39_Index
0000D7B8 0000                       		dc.w Obj39_Wait-Obj39_Index
0000D7BA                            ; ===========================================================================
0000D7BA                            
0000D7BA                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000D7BA 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D7BE 6700                       		beq.s	Obj39_Main	; if yes, branch
0000D7C0 4E75                       		rts	
0000D7C2                            ; ===========================================================================
0000D7C2                            
0000D7C2                            Obj39_Main:
0000D7C2 5428 0024                  		addq.b	#2,$24(a0)
0000D7C6 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000D7CC 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000D7D2 6700                       		beq.s	loc_C4EC	; if not, branch
0000D7D4 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000D7DA                            
0000D7DA                            loc_C4EC:
0000D7DA 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000D7E0 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000D7E8 317C 855E 0002             		move.w	#$855E,2(a0)
0000D7EE 117C 0000 0001             		move.b	#0,1(a0)
0000D7F4 117C 0000 0018             		move.b	#0,$18(a0)
0000D7FA                            
0000D7FA                            loc_C50C:				; XREF: Obj39_Index
0000D7FA 7210                       		moveq	#$10,d1		; set horizontal speed
0000D7FC 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000D802 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000D804 6500                       		bcs.s	Obj39_Move
0000D806 4441                       		neg.w	d1
0000D808                            
0000D808                            Obj39_Move:
0000D808 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D80C 6000 0000                  		bra.w	DisplaySprite
0000D810                            ; ===========================================================================
0000D810                            
0000D810                            Obj39_SetWait:				; XREF: Obj39_Main
0000D810 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000D816 5428 0024                  		addq.b	#2,$24(a0)
0000D81A 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0000D820 4A38 FE18                  		tst.b	($FFFFFE18).w
0000D824 6600                       		bne.s	@nocontinues
0000D826 11FC 0009 F5CE             		move.b	#face_meltdown,(SonimeSST+sonime_face).w
0000D82C                            
0000D82C                            	@nocontinues:
0000D82C 4E75                       		rts	
0000D82E                            ; ===========================================================================
0000D82E                            
0000D82E                            Obj39_Wait:				; XREF: Obj39_Index
0000D82E 1038 F605                  		move.b	($FFFFF605).w,d0
0000D832 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000D836 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000D838 0828 0000 001A             		btst	#0,$1A(a0)
0000D83E 6600                       		bne.s	Obj39_Display
0000D840 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000D844 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000D846 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D84A 6000 0000                  		bra.w	DisplaySprite
0000D84E                            ; ===========================================================================
0000D84E                            
0000D84E                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000D84E 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000D852 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000D854 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000D85A 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000D85E 6600                       		bne.s	Obj39_Display	; if yes, branch
0000D860 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set mode to 0 (Sega screen)
0000D866 6000                       		bra.s	Obj39_Display
0000D868                            ; ===========================================================================
0000D868                            
0000D868                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000D868 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D86E                            
0000D86E                            Obj39_Display:				; XREF: Obj39_ChgMode
0000D86E 6000 0000                  		bra.w	DisplaySprite
0000D872                            ; ===========================================================================
0000D872                            ; ---------------------------------------------------------------------------
0000D872                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000D872                            ; ---------------------------------------------------------------------------
0000D872                            
0000D872                            Obj3A:					; XREF: Obj_Index
0000D872 7000                       		moveq	#0,d0
0000D874 1028 0024                  		move.b	$24(a0),d0
0000D878 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000D87C 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000D880                            ; ===========================================================================
0000D880 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000D882 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000D884 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D886 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000D888 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D88A 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000D88C 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D88E 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000D890 0000                       		dc.w loc_C766-Obj3A_Index
0000D892                            ; ===========================================================================
0000D892                            
0000D892                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000D892 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D896 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000D898 4E75                       		rts	
0000D89A                            ; ===========================================================================
0000D89A                            
0000D89A                            Obj3A_Main:
0000D89A 2248                       		movea.l	a0,a1
0000D89C 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000D8A2 7206                       		moveq	#6,d1
0000D8A4                            
0000D8A4                            Obj3A_Loop:
0000D8A4 12BC 003A                  		move.b	#$3A,0(a1)
0000D8A8 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000D8AC 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000D8B0 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D8B4 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D8B8 135A 0024                  		move.b	(a2)+,$24(a1)
0000D8BC 101A                       		move.b	(a2)+,d0
0000D8BE 0C00 0006                  		cmpi.b	#6,d0
0000D8C2 6600                       		bne.s	loc_C5CA
0000D8C4 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000D8C8                            
0000D8C8                            loc_C5CA:
0000D8C8 1340 001A                  		move.b	d0,$1A(a1)
0000D8CC 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000D8D4 337C 8580 0002             		move.w	#$8580,2(a1)
0000D8DA 137C 0000 0001             		move.b	#0,1(a1)
0000D8E0 43E9 0040                  		lea	$40(a1),a1
0000D8E4 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000D8E8                            
0000D8E8                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000D8E8 7210                       		moveq	#$10,d1		; set horizontal speed
0000D8EA 3028 0030                  		move.w	$30(a0),d0
0000D8EE B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D8F2 6700                       		beq.s	loc_C61A	; if yes, branch
0000D8F4 6C00                       		bge.s	Obj3A_Move
0000D8F6 4441                       		neg.w	d1
0000D8F8                            
0000D8F8                            Obj3A_Move:
0000D8F8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D8FC                            
0000D8FC                            loc_C5FE:				; XREF: loc_C61A
0000D8FC 3028 0008                  		move.w	8(a0),d0
0000D900 6B00                       		bmi.s	locret_C60E
0000D902 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D906 6400                       		bcc.s	locret_C60E	; if yes, branch
0000D908 6000 0000                  		bra.w	DisplaySprite
0000D90C                            ; ===========================================================================
0000D90C                            
0000D90C                            locret_C60E:
0000D90C 4E75                       		rts	
0000D90E                            ; ===========================================================================
0000D90E                            
0000D90E                            loc_C610:				; XREF: loc_C61A
0000D90E 117C 000E 0024             		move.b	#$E,$24(a0)
0000D914 6000 0000                  		bra.w	Obj3A_ChkPos2
0000D918                            ; ===========================================================================
0000D918                            
0000D918                            loc_C61A:				; XREF: Obj3A_ChkPos
0000D918 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000D91E 67EE                       		beq.s	loc_C610
0000D920 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D926 66D4                       		bne.s	loc_C5FE
0000D928 5428 0024                  		addq.b	#2,$24(a0)
0000D92C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D932                            
0000D932                            Obj3A_Wait:				; XREF: Obj3A_Index
0000D932 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D936 6600                       		bne.s	Obj3A_Display
0000D938 5428 0024                  		addq.b	#2,$24(a0)
0000D93C                            
0000D93C                            Obj3A_Display:
0000D93C 6000 0000                  		bra.w	DisplaySprite
0000D940                            ; ===========================================================================
0000D940                            
0000D940                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000D940 6100 0000                  		bsr.w	DisplaySprite
0000D944 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000D94A 7000                       		moveq	#0,d0
0000D94C 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000D950 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000D952 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D956 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000D95C                            
0000D95C                            Obj3A_RingBonus:
0000D95C 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D960 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000D962 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D966 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D96C                            
0000D96C                            Obj3A_ChkBonus:
0000D96C 4A40                       		tst.w	d0		; is there any bonus?
0000D96E 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000D970 303C 00C5                  		move.w	#$C5,d0
0000D974 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D97A 5428 0024                  		addq.b	#2,$24(a0)
0000D97E 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000D984 6600                       		bne.s	Obj3A_SetDelay
0000D986 5828 0024                  		addq.b	#4,$24(a0)
0000D98A                            
0000D98A                            Obj3A_SetDelay:
0000D98A 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D990                            
0000D990                            locret_C692:
0000D990 4E75                       		rts	
0000D992                            ; ===========================================================================
0000D992                            
0000D992                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000D992 4EB9 0000 0000             		jsr	AddPoints
0000D998 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D99C 0200 0003                  		andi.b	#3,d0
0000D9A0 66EE                       		bne.s	locret_C692
0000D9A2 303C 00CD                  		move.w	#$CD,d0
0000D9A6 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D9AC                            ; ===========================================================================
0000D9AC                            
0000D9AC                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000D9AC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D9B0 0240 0007                  		andi.w	#7,d0
0000D9B4 E748                       		lsl.w	#3,d0
0000D9B6 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000D9BA 0241 0003                  		andi.w	#3,d1
0000D9BE D241                       		add.w	d1,d1
0000D9C0 D041                       		add.w	d1,d0
0000D9C2 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000D9C6 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000D9CA 4A40                       		tst.w	d0
0000D9CC 6600                       		bne.s	Obj3A_ChkSS
0000D9CE 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to level (00)
0000D9D4 6000                       		bra.s	Obj3A_Display2
0000D9D6                            ; ===========================================================================
0000D9D6                            
0000D9D6                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000D9D6 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000D9DA 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000D9DE 6700                       		beq.s	loc_C6EA	; if not, branch
0000D9E0 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000D9E6 6000                       		bra.s	Obj3A_Display2
0000D9E8                            ; ===========================================================================
0000D9E8                            
0000D9E8                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000D9E8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D9EE                            
0000D9EE                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000D9EE 6000 0000                  		bra.w	DisplaySprite
0000D9F2                            ; ===========================================================================
0000D9F2                            ; ---------------------------------------------------------------------------
0000D9F2                            ; Level	order array
0000D9F2                            ; ---------------------------------------------------------------------------
0000D9F2                            LevelOrder:	incbin	misc\lvl_ord.bin
0000DA22                            		even
0000DA22                            ; ===========================================================================
0000DA22                            
0000DA22                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000DA22 7220                       		moveq	#$20,d1		; set horizontal speed
0000DA24 3028 0032                  		move.w	$32(a0),d0
0000DA28 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000DA2C 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000DA2E 6C00                       		bge.s	Obj3A_Move2
0000DA30 4441                       		neg.w	d1
0000DA32                            
0000DA32                            Obj3A_Move2:
0000DA32 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DA36 3028 0008                  		move.w	8(a0),d0
0000DA3A 6B00                       		bmi.s	locret_C748
0000DA3C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DA40 6400                       		bcc.s	locret_C748	; if yes, branch
0000DA42 6000 0000                  		bra.w	DisplaySprite
0000DA46                            ; ===========================================================================
0000DA46                            
0000DA46                            locret_C748:
0000DA46 4E75                       		rts	
0000DA48                            ; ===========================================================================
0000DA48                            
0000DA48                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000DA48 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000DA4E 6600 0000                  		bne.w	DeleteObject
0000DA52 5428 0024                  		addq.b	#2,$24(a0)
0000DA56 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000DA5A 303C 008D                  		move.w	#$8D,d0
0000DA5E 4EF9 0000 121A             		jmp	(PlaySound).l	; play FZ music
0000DA64                            ; ===========================================================================
0000DA64                            
0000DA64                            loc_C766:				; XREF: Obj3A_Index
0000DA64 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000DA68 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000DA6E 6700 0000                  		beq.w	DeleteObject
0000DA72 4E75                       		rts	
0000DA74                            ; ===========================================================================
0000DA74 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000DA7A 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000DA7C FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000DA82 0201                       		dc.b 2,	1
0000DA84 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000DA8A 0206                       		dc.b 2,	6
0000DA8C 0520 0120 00EC             		dc.w $520, $120, $EC
0000DA92 0202                       		dc.b 2,	2
0000DA94 0540 0120 00FC             		dc.w $540, $120, $FC
0000DA9A 0203                       		dc.b 2,	3
0000DA9C 0560 0120 010C             		dc.w $560, $120, $10C
0000DAA2 0204                       		dc.b 2,	4
0000DAA4 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000DAAA 0205                       		dc.b 2,	5
0000DAAC                            ; ===========================================================================
0000DAAC                            ; ---------------------------------------------------------------------------
0000DAAC                            ; Object 7E - special stage results screen
0000DAAC                            ; ---------------------------------------------------------------------------
0000DAAC                            
0000DAAC                            Obj7E:					; XREF: Obj_Index
0000DAAC 7000                       		moveq	#0,d0
0000DAAE 1028 0024                  		move.b	$24(a0),d0
0000DAB2 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000DAB6 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000DABA                            ; ===========================================================================
0000DABA 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000DABC 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000DABE 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000DAC0 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000DAC2 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000DAC4 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000DAC6 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000DAC8 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000DACA 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000DACC 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000DACE 0000                       		dc.w loc_C91A-Obj7E_Index
0000DAD0                            ; ===========================================================================
0000DAD0                            
0000DAD0                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000DAD0 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000DAD4 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000DAD6 4E75                       		rts	
0000DAD8                            ; ===========================================================================
0000DAD8                            
0000DAD8                            Obj7E_Main:
0000DAD8 2248                       		movea.l	a0,a1
0000DADA 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000DAE0 7203                       		moveq	#3,d1
0000DAE2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000DAE8 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000DAEA 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000DAEC                            
0000DAEC                            Obj7E_Loop:
0000DAEC 12BC 007E                  		move.b	#$7E,0(a1)
0000DAF0 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000DAF4 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000DAF8 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000DAFC 135A 0024                  		move.b	(a2)+,$24(a1)
0000DB00 135A 001A                  		move.b	(a2)+,$1A(a1)
0000DB04 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000DB0C 337C A580 0002             		move.w	#$A580,2(a1)
0000DB12 137C 0000 0001             		move.b	#0,1(a1)
0000DB18 43E9 0040                  		lea	$40(a1),a1
0000DB1C 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000DB20                            
0000DB20 7007                       		moveq	#7,d0
0000DB22 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000DB26 6700                       		beq.s	loc_C842
0000DB28 7000                       		moveq	#0,d0
0000DB2A 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000DB2E 6600                       		bne.s	loc_C842	; if not, branch
0000DB30 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000DB32 317C 0018 0008             		move.w	#$18,8(a0)
0000DB38 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000DB3E                            
0000DB3E                            loc_C842:
0000DB3E 1140 001A                  		move.b	d0,$1A(a0)
0000DB42                            
0000DB42                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000DB42 7210                       		moveq	#$10,d1		; set horizontal speed
0000DB44 3028 0030                  		move.w	$30(a0),d0
0000DB48 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000DB4C 6700                       		beq.s	loc_C86C	; if yes, branch
0000DB4E 6C00                       		bge.s	Obj7E_Move
0000DB50 4441                       		neg.w	d1
0000DB52                            
0000DB52                            Obj7E_Move:
0000DB52 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DB56                            
0000DB56                            loc_C85A:				; XREF: loc_C86C
0000DB56 3028 0008                  		move.w	8(a0),d0
0000DB5A 6B00                       		bmi.s	locret_C86A
0000DB5C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DB60 6400                       		bcc.s	locret_C86A	; if yes, branch
0000DB62 6000 0000                  		bra.w	DisplaySprite
0000DB66                            ; ===========================================================================
0000DB66                            
0000DB66                            locret_C86A:
0000DB66 4E75                       		rts	
0000DB68                            ; ===========================================================================
0000DB68                            
0000DB68                            loc_C86C:				; XREF: Obj7E_ChkPos
0000DB68 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000DB6E 66E6                       		bne.s	loc_C85A
0000DB70 5428 0024                  		addq.b	#2,$24(a0)
0000DB74 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000DB7A 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000DB80                            
0000DB80                            Obj7E_Wait:				; XREF: Obj7E_Index
0000DB80 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000DB84 6600                       		bne.s	Obj7E_Display
0000DB86 5428 0024                  		addq.b	#2,$24(a0)
0000DB8A                            
0000DB8A                            Obj7E_Display:
0000DB8A 6000 0000                  		bra.w	DisplaySprite
0000DB8E                            ; ===========================================================================
0000DB8E                            
0000DB8E                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000DB8E 6100 0000                  		bsr.w	DisplaySprite
0000DB92 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000DB98 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000DB9C 6700                       		beq.s	loc_C8C4	; if yes, branch
0000DB9E 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000DBA4 700A                       		moveq	#10,d0		; add 10 to score
0000DBA6 4EB9 0000 0000             		jsr	AddPoints
0000DBAC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DBB0 0200 0003                  		andi.b	#3,d0
0000DBB4 6600                       		bne.s	locret_C8EA
0000DBB6 303C 00CD                  		move.w	#$CD,d0
0000DBBA 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000DBC0                            ; ===========================================================================
0000DBC0                            
0000DBC0                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000DBC0 303C 00C5                  		move.w	#$C5,d0
0000DBC4 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000DBCA 5428 0024                  		addq.b	#2,$24(a0)
0000DBCE 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000DBD4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000DBDA 6500                       		bcs.s	locret_C8EA	; if not, branch
0000DBDC 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000DBE2 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000DBE6                            
0000DBE6                            locret_C8EA:
0000DBE6 4E75                       		rts	
0000DBE8                            ; ===========================================================================
0000DBE8                            
0000DBE8                            Obj7E_Exit:				; XREF: Obj7E_Index
0000DBE8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000DBEE 6000 0000                  		bra.w	DisplaySprite
0000DBF2                            ; ===========================================================================
0000DBF2                            
0000DBF2                            Obj7E_Continue:				; XREF: Obj7E_Index
0000DBF2 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000DBF8 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000DBFE 303C 00BF                  		move.w	#$BF,d0
0000DC02 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play continues music
0000DC08 5428 0024                  		addq.b	#2,$24(a0)
0000DC0C 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000DC12 6000 0000                  		bra.w	DisplaySprite
0000DC16                            ; ===========================================================================
0000DC16                            
0000DC16                            loc_C91A:				; XREF: Obj7E_Index
0000DC16 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DC1A 0200 000F                  		andi.b	#$F,d0
0000DC1E 6600                       		bne.s	Obj7E_Display2
0000DC20 0868 0000 001A             		bchg	#0,$1A(a0)
0000DC26                            
0000DC26                            Obj7E_Display2:
0000DC26 6000 0000                  		bra.w	DisplaySprite
0000DC2A                            ; ===========================================================================
0000DC2A 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000DC30 0200                       		dc.b 2,	0		; rountine number, frame number
0000DC32 0320 0120 0118             		dc.w $320, $120, $118
0000DC38 0201                       		dc.b 2,	1
0000DC3A 0360 0120 0128             		dc.w $360, $120, $128
0000DC40 0202                       		dc.b 2,	2
0000DC42 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000DC48 0203                       		dc.b 2,	3
0000DC4A 03A0 0120 0138             		dc.w $3A0, $120, $138
0000DC50 0206                       		dc.b 2,	6
0000DC52                            ; ===========================================================================
0000DC52                            ; ---------------------------------------------------------------------------
0000DC52                            ; Object 7F - chaos emeralds from the special stage results screen
0000DC52                            ; ---------------------------------------------------------------------------
0000DC52                            
0000DC52                            Obj7F:					; XREF: Obj_Index
0000DC52 7000                       		moveq	#0,d0
0000DC54 1028 0024                  		move.b	$24(a0),d0
0000DC58 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000DC5C 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000DC60                            ; ===========================================================================
0000DC60 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000DC62 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000DC64                            
0000DC64                            ; ---------------------------------------------------------------------------
0000DC64                            ; X-axis positions for chaos emeralds
0000DC64                            ; ---------------------------------------------------------------------------
0000DC64 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000DC70                            ; ===========================================================================
0000DC70                            
0000DC70                            Obj7F_Main:				; XREF: Obj7F_Index
0000DC70 2248                       		movea.l	a0,a1
0000DC72 45F9 0000 DC64             		lea	(Obj7F_PosData).l,a2
0000DC78 7400                       		moveq	#0,d2
0000DC7A 7200                       		moveq	#0,d1
0000DC7C 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000DC80 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000DC82 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000DC86                            
0000DC86                            Obj7F_Loop:
0000DC86 12BC 007F                  		move.b	#$7F,0(a1)
0000DC8A 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000DC8E 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000DC94 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000DC98 1633 2000                  		move.b	(a3,d2.w),d3
0000DC9C 1343 001A                  		move.b	d3,$1A(a1)
0000DCA0 1343 001C                  		move.b	d3,$1C(a1)
0000DCA4 5202                       		addq.b	#1,d2
0000DCA6 5429 0024                  		addq.b	#2,$24(a1)
0000DCAA 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000DCB2 337C 8541 0002             		move.w	#$8541,2(a1)
0000DCB8 137C 0000 0001             		move.b	#0,1(a1)
0000DCBE 43E9 0040                  		lea	$40(a1),a1	; next object
0000DCC2 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000DCC6                            
0000DCC6                            Obj7F_Flash:				; XREF: Obj7F_Index
0000DCC6 1028 001A                  		move.b	$1A(a0),d0
0000DCCA 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000DCD0 0C00 0006                  		cmpi.b	#6,d0
0000DCD4 6600                       		bne.s	Obj7F_Display
0000DCD6 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000DCDC                            
0000DCDC                            Obj7F_Display:
0000DCDC 6000 0000                  		bra.w	DisplaySprite
0000DCE0                            ; ===========================================================================
0000DCE0                            ; ---------------------------------------------------------------------------
0000DCE0                            ; Sprite mappings - zone title cards
0000DCE0                            ; ---------------------------------------------------------------------------
0000DCE0 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000DCE2 0000                       		dc.w byte_CA2C-Map_obj34
0000DCE4 0000                       		dc.w byte_CA5A-Map_obj34
0000DCE6 0000                       		dc.w byte_CA7A-Map_obj34
0000DCE8 0000                       		dc.w byte_CAA8-Map_obj34
0000DCEA 0000                       		dc.w byte_CADC-Map_obj34
0000DCEC 0000                       		dc.w byte_CB10-Map_obj34
0000DCEE 0000                       		dc.w byte_CB26-Map_obj34
0000DCF0 0000                       		dc.w byte_CB31-Map_obj34
0000DCF2 0000                       		dc.w byte_CB3C-Map_obj34
0000DCF4 0000                       		dc.w byte_CB47-Map_obj34
0000DCF6 0000                       		dc.w byte_CB8A-Map_obj34
0000DCF8 09                         byte_C9FE:	dc.b 9 			; GREEN HILL
0000DCF9 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000DCFE F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000DD03 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000DD08 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000DD0D F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000DD12 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000DD17 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000DD1C F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000DD21 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000DD26 09                         byte_CA2C:	dc.b 9			; LABYRINTH
0000DD27 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000DD2C F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000DD31 F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000DD36 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000DD3B F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000DD40 F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000DD45 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000DD4A F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000DD4F F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000DD54 06                         byte_CA5A:	dc.b 6			; MARBLE
0000DD55 F805 002A CF               		dc.b $F8, 5, 0,	$2A, $CF
0000DD5A F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000DD5F F805 003A F0               		dc.b $F8, 5, 0,	$3A, $F0
0000DD64 F805 0004 00               		dc.b $F8, 5, 0,	4, 0
0000DD69 F805 0026 10               		dc.b $F8, 5, 0,	$26, $10
0000DD6E F805 0010 20               		dc.b $F8, 5, 0,	$10, $20
0000DD73 00                         		dc.b 0
0000DD74 09                         byte_CA7A:	dc.b 9			; STAR	LIGHT
0000DD75 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000DD7A F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000DD7F F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000DD84 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000DD89 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000DD8E F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000DD93 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000DD98 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000DD9D F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000DDA2 0A                         byte_CAA8:	dc.b $A			; SPRING YARD
0000DDA3 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000DDA8 F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000DDAD F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000DDB2 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000DDB7 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000DDBC F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000DDC1 F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000DDC6 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000DDCB F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000DDD0 F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000DDD5 00                         		dc.b 0
0000DDD6 0A                         byte_CADC:	dc.b $A			; SCRAP BRAIN
0000DDD7 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000DDDC F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000DDE1 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000DDE6 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000DDEB F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000DDF0 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000DDF5 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000DDFA F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000DDFF F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000DE04 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000DE09 00                         		dc.b 0
0000DE0A 04                         byte_CB10:	dc.b 4			; ZONE
0000DE0B F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000DE10 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000DE15 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000DE1A F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DE1F 00                         		dc.b 0
0000DE20 02                         byte_CB26:	dc.b 2			; ACT 1
0000DE21 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000DE26 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000DE2B 02                         byte_CB31:	dc.b 2			; ACT 2
0000DE2C 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000DE31 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000DE36 02                         byte_CB3C:	dc.b 2			; ACT 3
0000DE37 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000DE3C F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000DE41 0D                         byte_CB47:	dc.b $D			; Oval
0000DE42 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000DE47 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000DE4C EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000DE51 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000DE56 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000DE5B 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000DE60 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000DE65 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000DE6A EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000DE6F F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000DE74 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000DE79 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000DE7E 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000DE83 00                         		dc.b 0
0000DE84 05                         byte_CB8A:	dc.b 5			; FINAL
0000DE85 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000DE8A F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000DE8F F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000DE94 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000DE99 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000DE9E                            		even
0000DE9E                            ; ---------------------------------------------------------------------------
0000DE9E                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000DE9E                            ; ---------------------------------------------------------------------------
0000DE9E                            Map_obj39:
0000DE9E                            	include "_maps\obj39.asm"
0000DE9E                            ; ---------------------------------------------------------------------------
0000DE9E                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000DE9E                            ; ---------------------------------------------------------------------------
0000DE9E 0000                       		dc.w byte_CBAC-Map_obj39
0000DEA0 0000                       		dc.w byte_CBB7-Map_obj39
0000DEA2 0000                       		dc.w byte_CBC2-Map_obj39
0000DEA4 0000                       		dc.w byte_CBCD-Map_obj39
0000DEA6 02                         byte_CBAC:	dc.b 2
0000DEA7 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000DEAC F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000DEB1 02                         byte_CBB7:	dc.b 2
0000DEB2 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000DEB7 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000DEBC 02                         byte_CBC2:	dc.b 2
0000DEBD F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000DEC2 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000DEC7 02                         byte_CBCD:	dc.b 2
0000DEC8 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000DECD F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000DED2                            		even
0000DED2                            		even
0000DED2                            
0000DED2                            ; ---------------------------------------------------------------------------
0000DED2                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000DED2                            ; ---------------------------------------------------------------------------
0000DED2 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000DED4 0000                       		dc.w byte_CC13-Map_obj3A
0000DED6 0000                       		dc.w byte_CC32-Map_obj3A
0000DED8 0000                       		dc.w byte_CC51-Map_obj3A
0000DEDA 0000                       		dc.w byte_CC75-Map_obj3A
0000DEDC FF6F                       		dc.w byte_CB47-Map_obj3A
0000DEDE FF4E                       		dc.w byte_CB26-Map_obj3A
0000DEE0 FF59                       		dc.w byte_CB31-Map_obj3A
0000DEE2 FF64                       		dc.w byte_CB3C-Map_obj3A
0000DEE4 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000DEE5 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000DEEA F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000DEEF F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000DEF4 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000DEF9 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000DEFE F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000DF03 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000DF08 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000DF0D 06                         byte_CC13:	dc.b 6			; PASSED
0000DF0E F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000DF13 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000DF18 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000DF1D F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000DF22 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DF27 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000DF2C 06                         byte_CC32:	dc.b 6			; SCORE
0000DF2D F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000DF32 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000DF37 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000DF3C F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000DF41 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000DF46 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000DF4B 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000DF4C F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000DF51 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DF56 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DF5B F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DF60 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DF65 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000DF6A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DF6F 07                         byte_CC75:	dc.b 7			; RING BONUS
0000DF70 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000DF75 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DF7A F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DF7F F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DF84 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DF89 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000DF8E F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DF94 00                         		even
0000DF94                            ; ---------------------------------------------------------------------------
0000DF94                            ; Sprite mappings - special stage results screen
0000DF94                            ; ---------------------------------------------------------------------------
0000DF94 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000DF96 0000                       		dc.w byte_CCEE-Map_obj7E
0000DF98 0000                       		dc.w byte_CD0D-Map_obj7E
0000DF9A FEAD                       		dc.w byte_CB47-Map_obj7E
0000DF9C 0000                       		dc.w byte_CD31-Map_obj7E
0000DF9E 0000                       		dc.w byte_CD46-Map_obj7E
0000DFA0 0000                       		dc.w byte_CD5B-Map_obj7E
0000DFA2 0000                       		dc.w byte_CD6B-Map_obj7E
0000DFA4 0000                       		dc.w byte_CDA8-Map_obj7E
0000DFA6 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000DFA7 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000DFAC F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000DFB1 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000DFB6 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000DFBB F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000DFC0 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000DFC5 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000DFCA F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DFCF F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000DFD4 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000DFD9 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000DFDE F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000DFE3 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000DFE8 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000DFE9 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000DFEE F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000DFF3 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000DFF8 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000DFFD F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000E002 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000E007 07                         byte_CD0D:	dc.b 7
0000E008 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000E00D F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000E012 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000E017 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000E01C FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000E021 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000E026 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000E02B 04                         byte_CD31:	dc.b 4
0000E02C F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E031 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E036 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E03B F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000E040 04                         byte_CD46:	dc.b 4
0000E041 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E046 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E04B F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E050 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000E055 03                         byte_CD5B:	dc.b 3
0000E056 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E05B F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E060 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E065 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000E066 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000E06B F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000E070 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000E075 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000E07A F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000E07F F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000E084 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000E089 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000E08E F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000E093 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000E098 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000E09D F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000E0A2 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000E0A3 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000E0A8 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000E0AD F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000E0B2 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000E0B7 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000E0BC F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000E0C1 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000E0C6 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000E0CB F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000E0D0 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000E0D5 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000E0DA F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000E0DF F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000E0E4 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000E0E9 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000E0EE                            		even
0000E0EE                            ; ---------------------------------------------------------------------------
0000E0EE                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000E0EE                            ; ---------------------------------------------------------------------------
0000E0EE                            Map_obj7F:
0000E0EE                            	include "_maps\obj7F.asm"
0000E0EE                            ; ---------------------------------------------------------------------------
0000E0EE                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000E0EE                            ; ---------------------------------------------------------------------------
0000E0EE 0000                       		dc.w byte_CE02-Map_obj7F
0000E0F0 0000                       		dc.w byte_CE08-Map_obj7F
0000E0F2 0000                       		dc.w byte_CE0E-Map_obj7F
0000E0F4 0000                       		dc.w byte_CE14-Map_obj7F
0000E0F6 0000                       		dc.w byte_CE1A-Map_obj7F
0000E0F8 0000                       		dc.w byte_CE20-Map_obj7F
0000E0FA 0000                       		dc.w byte_CE26-Map_obj7F
0000E0FC 01                         byte_CE02:	dc.b 1
0000E0FD F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8
0000E102 01                         byte_CE08:	dc.b 1
0000E103 F805 2000 F8               		dc.b $F8, 5, $20,	0, $F8
0000E108 01                         byte_CE0E:	dc.b 1
0000E109 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000E10E 01                         byte_CE14:	dc.b 1
0000E10F F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000E114 01                         byte_CE1A:	dc.b 1
0000E115 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8
0000E11A 01                         byte_CE20:	dc.b 1
0000E11B F805 000C F8               		dc.b $F8, 5, 0, $C, $F8
0000E120 00                         byte_CE26:	dc.b 0			; Blank frame
0000E122 00                         		even
0000E122 00                         		even
0000E122                            
0000E122                            ; ===========================================================================
0000E122                            ; ---------------------------------------------------------------------------
0000E122                            ; Object 36 - spikes
0000E122                            ; ---------------------------------------------------------------------------
0000E122                            
0000E122                            Obj36:					; XREF: Obj_Index
0000E122 7000                       		moveq	#0,d0
0000E124 1028 0024                  		move.b	$24(a0),d0
0000E128 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000E12C 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000E130                            ; ===========================================================================
0000E130 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000E132 0000                       		dc.w Obj36_Solid-Obj36_Index
0000E134                            
0000E134 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000E136 0110                       		dc.b 1,	$10
0000E138 0204                       		dc.b 2,	4
0000E13A 031C                       		dc.b 3,	$1C
0000E13C 0440                       		dc.b 4,	$40
0000E13E 0510                       		dc.b 5,	$10
0000E140                            ; ===========================================================================
0000E140                            
0000E140                            Obj36_Main:				; XREF: Obj36_Index
0000E140 5428 0024                  		addq.b	#2,$24(a0)
0000E144 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000E14C 317C 051B 0002             		move.w	#$51B,2(a0)
0000E152 0028 0004 0001             		ori.b	#4,1(a0)
0000E158 117C 0004 0018             		move.b	#4,$18(a0)
0000E15E 1028 0028                  		move.b	$28(a0),d0
0000E162 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E168 0240 00F0                  		andi.w	#$F0,d0
0000E16C 43F9 0000 E134             		lea	(Obj36_Var).l,a1
0000E172 E648                       		lsr.w	#3,d0
0000E174 D2C0                       		adda.w	d0,a1
0000E176 1159 001A                  		move.b	(a1)+,$1A(a0)
0000E17A 1159 0019                  		move.b	(a1)+,$19(a0)
0000E17E 3168 0008 0030             		move.w	8(a0),$30(a0)
0000E184 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000E18A                            
0000E18A                            Obj36_Solid:				; XREF: Obj36_Index
0000E18A 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000E18E 343C 0004                  		move.w	#4,d2
0000E192 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000E198 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000E19A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000E1A0 6600                       		bne.s	Obj36_Upright	; if not, branch
0000E1A2 343C 0014                  		move.w	#$14,d2
0000E1A6                            
0000E1A6                            ; Spikes types $1x and $5x face	sideways
0000E1A6                            
0000E1A6                            Obj36_SideWays:				; XREF: Obj36_Solid
0000E1A6 323C 001B                  		move.w	#$1B,d1
0000E1AA 3602                       		move.w	d2,d3
0000E1AC 5243                       		addq.w	#1,d3
0000E1AE 3828 0008                  		move.w	8(a0),d4
0000E1B2 6100 0000                  		bsr.w	SolidObject
0000E1B6 0828 0003 0022             		btst	#3,$22(a0)
0000E1BC 6600                       		bne.s	Obj36_Display
0000E1BE 0C44 0001                  		cmpi.w	#1,d4
0000E1C2 6700                       		beq.s	Obj36_Hurt
0000E1C4 6000                       		bra.s	Obj36_Display
0000E1C6                            ; ===========================================================================
0000E1C6                            
0000E1C6                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000E1C6                            
0000E1C6                            Obj36_Upright:				; XREF: Obj36_Solid
0000E1C6 7200                       		moveq	#0,d1
0000E1C8 1228 0019                  		move.b	$19(a0),d1
0000E1CC 0641 000B                  		addi.w	#$B,d1
0000E1D0 343C 0010                  		move.w	#$10,d2
0000E1D4 363C 0011                  		move.w	#$11,d3
0000E1D8 3828 0008                  		move.w	8(a0),d4
0000E1DC 6100 0000                  		bsr.w	SolidObject
0000E1E0 0828 0003 0022             		btst	#3,$22(a0)
0000E1E6 6600                       		bne.s	Obj36_Hurt
0000E1E8 4A44                       		tst.w	d4
0000E1EA 6A00                       		bpl.s	Obj36_Display
0000E1EC                            
0000E1EC                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000E1EC 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000E1F0 6600                       		bne.s	Obj36_PreDisplay	; if yes, branch
0000E1F2 2F08                       		move.l	a0,-(sp)
0000E1F4 2448                       		movea.l	a0,a2
0000E1F6 41F8 D000                  		lea	($FFFFD000).w,a0
0000E1FA 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000E200 6400                       		bcc.s	loc_CF20
0000E202 2628 000C                  		move.l	$C(a0),d3
0000E206 3028 0012                  		move.w	$12(a0),d0
0000E20A 48C0                       		ext.l	d0
0000E20C E180                       		asl.l	#8,d0
0000E20E 9680                       		sub.l	d0,d3
0000E210 2143 000C                  		move.l	d3,$C(a0)
0000E214 4EB9 0000 0000             		jsr	HurtSonic
0000E21A                            
0000E21A                            loc_CF20:
0000E21A 205F                       		movea.l	(sp)+,a0
0000E21C 6000                       		bra.s	Obj36_Display
0000E21E                            
0000E21E                            Obj36_PreDisplay:
0000E21E 0C78 0100 D032             		cmpi.w	#$100,($FFFFD032).w
0000E224 6E00                       		bgt.s	Obj36_Display
0000E226 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
0000E22C 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000E232                            
0000E232                            Obj36_Display:
0000E232 6100 0000                  		bsr.w	DisplaySprite
0000E236 3028 0030                  		move.w	$30(a0),d0
0000E23A 0240 FF80                  		andi.w	#$FF80,d0
0000E23E 3238 F700                  		move.w	($FFFFF700).w,d1
0000E242 0441 0080                  		subi.w	#$80,d1
0000E246 0241 FF80                  		andi.w	#$FF80,d1
0000E24A 9041                       		sub.w	d1,d0
0000E24C 0C40 0280                  		cmpi.w	#$280,d0
0000E250 6300                       		bls.s	Obj36_NoDel
0000E252 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000E256 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000E25A 3440                       		movea.w	d0,a2	; load address into a2
0000E25C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000E260 6000 0000                  		bra.w	DeleteObject	; and delete object
0000E264                            
0000E264                            Obj36_NoDel:
0000E264 4E75                       		rts	
0000E266                            ; ===========================================================================
0000E266                            
0000E266                            Obj36_Type0x:				; XREF: Obj36_Solid
0000E266 7000                       		moveq	#0,d0
0000E268 1028 0028                  		move.b	$28(a0),d0
0000E26C D040                       		add.w	d0,d0
0000E26E 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000E272 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000E276                            ; ===========================================================================
0000E276 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000E278 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000E27A 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000E27C                            ; ===========================================================================
0000E27C                            
0000E27C                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000E27C 4E75                       		rts			; don't move the object
0000E27E                            ; ===========================================================================
0000E27E                            
0000E27E                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000E27E 6100 0000                  		bsr.w	Obj36_Wait
0000E282 7000                       		moveq	#0,d0
0000E284 1028 0034                  		move.b	$34(a0),d0
0000E288 D068 0032                  		add.w	$32(a0),d0
0000E28C 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000E290 4E75                       		rts	
0000E292                            ; ===========================================================================
0000E292                            
0000E292                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000E292 6100 0000                  		bsr.w	Obj36_Wait
0000E296 7000                       		moveq	#0,d0
0000E298 1028 0034                  		move.b	$34(a0),d0
0000E29C D068 0030                  		add.w	$30(a0),d0
0000E2A0 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000E2A4 4E75                       		rts	
0000E2A6                            ; ===========================================================================
0000E2A6                            
0000E2A6                            Obj36_Wait:
0000E2A6 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000E2AA 6700                       		beq.s	loc_CFA4	; if yes, branch
0000E2AC 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000E2B0 6600                       		bne.s	locret_CFE6
0000E2B2 4A28 0001                  		tst.b	1(a0)
0000E2B6 6A00                       		bpl.s	locret_CFE6
0000E2B8 303C 00B6                  		move.w	#$B6,d0
0000E2BC 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000E2C2 6000                       		bra.s	locret_CFE6
0000E2C4                            ; ===========================================================================
0000E2C4                            
0000E2C4                            loc_CFA4:
0000E2C4 4A68 0036                  		tst.w	$36(a0)
0000E2C8 6700                       		beq.s	loc_CFC6
0000E2CA 0468 0800 0034             		subi.w	#$800,$34(a0)
0000E2D0 6400                       		bcc.s	locret_CFE6
0000E2D2 317C 0000 0034             		move.w	#0,$34(a0)
0000E2D8 317C 0000 0036             		move.w	#0,$36(a0)
0000E2DE 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E2E4 6000                       		bra.s	locret_CFE6
0000E2E6                            ; ===========================================================================
0000E2E6                            
0000E2E6                            loc_CFC6:
0000E2E6 0668 0800 0034             		addi.w	#$800,$34(a0)
0000E2EC 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000E2F2 6500                       		bcs.s	locret_CFE6
0000E2F4 317C 2000 0034             		move.w	#$2000,$34(a0)
0000E2FA 317C 0001 0036             		move.w	#1,$36(a0)
0000E300 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E306                            
0000E306                            locret_CFE6:
0000E306 4E75                       		rts	
0000E308                            ; ===========================================================================
0000E308                            ; ---------------------------------------------------------------------------
0000E308                            ; Sprite mappings - spikes
0000E308                            ; ---------------------------------------------------------------------------
0000E308                            Map_obj36:
0000E308                            	include "_maps\obj36.asm"
0000E308                            ; ---------------------------------------------------------------------------
0000E308                            ; Sprite mappings - spikes
0000E308                            ; ---------------------------------------------------------------------------
0000E308 0000                       		dc.w byte_CFF4-Map_obj36
0000E30A 0000                       		dc.w byte_D004-Map_obj36
0000E30C 0000                       		dc.w byte_D014-Map_obj36
0000E30E 0000                       		dc.w byte_D01A-Map_obj36
0000E310 0000                       		dc.w byte_D02A-Map_obj36
0000E312 0000                       		dc.w byte_D049-Map_obj36
0000E314 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000E315 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000E31A F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E31F F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000E324 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000E325 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000E32A FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000E32F 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000E334 01                         byte_D014:	dc.b 1			; 1 spike
0000E335 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E33A 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000E33B F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000E340 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E345 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000E34A 06                         byte_D02A:	dc.b 6			; 6 spikes
0000E34B F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000E350 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000E355 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000E35A F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000E35F F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000E364 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000E369 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000E36A FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000E370 00                         		even
0000E370 00                         		even
0000E370                            
0000E370                            ; ===========================================================================
0000E370                            ; ---------------------------------------------------------------------------
0000E370                            ; Object 3B - purple rock (GHZ)
0000E370                            ; ---------------------------------------------------------------------------
0000E370                            
0000E370                            Obj3B:					; XREF: Obj_Index
0000E370 7000                       		moveq	#0,d0
0000E372 1028 0024                  		move.b	$24(a0),d0
0000E376 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000E37A 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000E37E                            ; ===========================================================================
0000E37E 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000E380 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000E382                            ; ===========================================================================
0000E382                            
0000E382                            Obj3B_Main:				; XREF: Obj3B_Index
0000E382 5428 0024                  		addq.b	#2,$24(a0)
0000E386 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000E38E 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000E394 117C 0004 0001             		move.b	#4,1(a0)
0000E39A 117C 0013 0019             		move.b	#$13,$19(a0)
0000E3A0 117C 0004 0018             		move.b	#4,$18(a0)
0000E3A6                            
0000E3A6                            Obj3B_Solid:				; XREF: Obj3B_Index
0000E3A6 323C 001B                  		move.w	#$1B,d1
0000E3AA 343C 0010                  		move.w	#$10,d2
0000E3AE 363C 0010                  		move.w	#$10,d3
0000E3B2 3828 0008                  		move.w	8(a0),d4
0000E3B6 6100 0000                  		bsr.w	SolidObject
0000E3BA 6100 0000                  		bsr.w	DisplaySprite
0000E3BE 3028 0008                  		move.w	8(a0),d0
0000E3C2 0240 FF80                  		andi.w	#$FF80,d0
0000E3C6 3238 F700                  		move.w	($FFFFF700).w,d1
0000E3CA 0441 0080                  		subi.w	#$80,d1
0000E3CE 0241 FF80                  		andi.w	#$FF80,d1
0000E3D2 9041                       		sub.w	d1,d0
0000E3D4 0C40 0280                  		cmpi.w	#$280,d0
0000E3D8 6300                       		bls.s	Obj3B_NoDel
0000E3DA 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000E3DE 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000E3E2 3440                       		movea.w	d0,a2	; load address into a2
0000E3E4 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000E3E8 6000 0000                  		bra.w	DeleteObject	; and delete object
0000E3EC                            
0000E3EC                            Obj3B_NoDel:
0000E3EC 4E75                       		rts	
0000E3EE                            ; ===========================================================================
0000E3EE                            ; ---------------------------------------------------------------------------
0000E3EE                            ; Object 49 - waterfall	sound effect (GHZ)
0000E3EE                            ; ---------------------------------------------------------------------------
0000E3EE                            
0000E3EE                            Obj49:					; XREF: Obj_Index
0000E3EE 7000                       		moveq	#0,d0
0000E3F0 1028 0024                  		move.b	$24(a0),d0
0000E3F4 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000E3F8 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000E3FC                            ; ===========================================================================
0000E3FC 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000E3FE 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000E400                            ; ===========================================================================
0000E400                            
0000E400                            Obj49_Main:				; XREF: Obj49_Index
0000E400 5428 0024                  		addq.b	#2,$24(a0)
0000E404 117C 0004 0001             		move.b	#4,1(a0)
0000E40A                            
0000E40A                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000E40A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E40E 0200 003F                  		andi.b	#$3F,d0
0000E412 6600                       		bne.s	Obj49_ChkDel
0000E414 303C 00D0                  		move.w	#$D0,d0
0000E418 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000E41E                            
0000E41E                            Obj49_ChkDel:
0000E41E 3028 0008                  		move.w	8(a0),d0
0000E422 0240 FF80                  		andi.w	#$FF80,d0
0000E426 3238 F700                  		move.w	($FFFFF700).w,d1
0000E42A 0441 0080                  		subi.w	#$80,d1
0000E42E 0241 FF80                  		andi.w	#$FF80,d1
0000E432 9041                       		sub.w	d1,d0
0000E434 0C40 0280                  		cmpi.w	#$280,d0
0000E438 6300                       		bls.s	Obj49_NoDel
0000E43A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000E43E 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000E442 3440                       		movea.w	d0,a2	; load address into a2
0000E444 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000E448 6000 0000                  		bra.w	DeleteObject	; and delete object
0000E44C                            
0000E44C                            Obj49_NoDel:
0000E44C 4E75                       		rts	
0000E44E                            ; ===========================================================================
0000E44E                            ; ---------------------------------------------------------------------------
0000E44E                            ; Sprite mappings - purple rock	(GHZ)
0000E44E                            ; ---------------------------------------------------------------------------
0000E44E                            Map_obj3B:
0000E44E                            	include "_maps\obj3B.asm"
0000E44E                            ; ---------------------------------------------------------------------------
0000E44E                            ; Sprite mappings - purple rock	(GHZ)
0000E44E                            ; ---------------------------------------------------------------------------
0000E44E 0000                       		dc.w byte_D110-Map_obj3B
0000E450 02                         byte_D110:	dc.b 2
0000E451 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000E456 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000E45C 00                         		even
0000E45C 00                         		even
0000E45C                            
0000E45C                            ; ===========================================================================
0000E45C                            ; ---------------------------------------------------------------------------
0000E45C                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000E45C                            ; ---------------------------------------------------------------------------
0000E45C                            
0000E45C                            Obj3C:					; XREF: Obj_Index
0000E45C 7000                       		moveq	#0,d0
0000E45E 1028 0024                  		move.b	$24(a0),d0
0000E462 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000E466 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000E46A 6000 0000                  		bra.w	MarkObjGone
0000E46E                            ; ===========================================================================
0000E46E 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000E470 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000E472 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000E474                            ; ===========================================================================
0000E474                            
0000E474                            Obj3C_Main:				; XREF: Obj3C_Index
0000E474 5428 0024                  		addq.b	#2,$24(a0)
0000E478 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000E480 317C 450F 0002             		move.w	#$450F,2(a0)
0000E486 117C 0004 0001             		move.b	#4,1(a0)
0000E48C 117C 0010 0019             		move.b	#$10,$19(a0)
0000E492 117C 0004 0018             		move.b	#4,$18(a0)
0000E498 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000E49E                            
0000E49E                            Obj3C_Solid:				; XREF: Obj3C_Index
0000E49E 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000E4A4 323C 001B                  		move.w	#$1B,d1
0000E4A8 343C 0020                  		move.w	#$20,d2
0000E4AC 363C 0020                  		move.w	#$20,d3
0000E4B0 3828 0008                  		move.w	8(a0),d4
0000E4B4 6100 0000                  		bsr.w	SolidObject
0000E4B8 0828 0005 0022             		btst	#5,$22(a0)
0000E4BE 6600                       		bne.s	Obj3C_ChkRoll
0000E4C0                            
0000E4C0                            locret_D180:
0000E4C0 4E75                       		rts	
0000E4C2                            ; ===========================================================================
0000E4C2                            
0000E4C2                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000E4C2 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000E4C8 66F6                       		bne.s	locret_D180	; if not, branch
0000E4CA 3028 0030                  		move.w	$30(a0),d0
0000E4CE 6A00                       		bpl.s	Obj3C_ChkSpeed
0000E4D0 4440                       		neg.w	d0
0000E4D2                            
0000E4D2                            Obj3C_ChkSpeed:
0000E4D2 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000E4D6 65E8                       		bcs.s	locret_D180	; if not, branch
0000E4D8 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000E4DE 5869 0008                  		addq.w	#4,8(a1)
0000E4E2 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000E4E8 3028 0008                  		move.w	8(a0),d0
0000E4EC B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000E4F0 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000E4F2 5169 0008                  		subq.w	#8,8(a1)
0000E4F6 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000E4FC                            
0000E4FC                            Obj3C_Smash:
0000E4FC 3369 0010 0020             		move.w	$10(a1),$20(a1)
0000E502 08A8 0005 0022             		bclr	#5,$22(a0)
0000E508 08A9 0005 0022             		bclr	#5,$22(a1)
0000E50E 7207                       		moveq	#7,d1		; load 8 fragments
0000E510 343C 0070                  		move.w	#$70,d2
0000E514 6100                       		bsr.s	SmashObject
0000E516                            
0000E516                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000E516 6100 0000                  		bsr.w	SpeedToPos
0000E51A 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000E520 6100 0000                  		bsr.w	DisplaySprite
0000E524 4A28 0001                  		tst.b	1(a0)
0000E528 6A00 0000                  		bpl.w	DeleteObject
0000E52C 4E75                       		rts	
0000E52E                            
0000E52E                            ; ---------------------------------------------------------------------------
0000E52E                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000E52E                            ; ---------------------------------------------------------------------------
0000E52E                            
0000E52E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E52E                            
0000E52E                            
0000E52E                            SmashObject:				; XREF: Obj3C_Smash
0000E52E 7000                       		moveq	#0,d0
0000E530 1028 001A                  		move.b	$1A(a0),d0
0000E534 D040                       		add.w	d0,d0
0000E536 2668 0004                  		movea.l	4(a0),a3
0000E53A D6F3 0000                  		adda.w	(a3,d0.w),a3
0000E53E 524B                       		addq.w	#1,a3
0000E540 08E8 0005 0001             		bset	#5,1(a0)
0000E546 1810                       		move.b	0(a0),d4
0000E548 1A28 0001                  		move.b	1(a0),d5
0000E54C 2248                       		movea.l	a0,a1
0000E54E 6000                       		bra.s	Smash_LoadFrag
0000E550                            ; ===========================================================================
0000E550                            
0000E550                            Smash_Loop:
0000E550 6100 0000                  		bsr.w	SingleObjLoad
0000E554 6600                       		bne.s	Smash_PlaySnd
0000E556 5A4B                       		addq.w	#5,a3
0000E558                            
0000E558                            Smash_LoadFrag:				; XREF: SmashObject
0000E558 137C 0004 0024             		move.b	#4,$24(a1)
0000E55E 1284                       		move.b	d4,0(a1)
0000E560 234B 0004                  		move.l	a3,4(a1)
0000E564 1345 0001                  		move.b	d5,1(a1)
0000E568 3368 0008 0008             		move.w	8(a0),8(a1)
0000E56E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E574 3368 0002 0002             		move.w	2(a0),2(a1)
0000E57A 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000E580 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000E586 335C 0010                  		move.w	(a4)+,$10(a1)
0000E58A 335C 0012                  		move.w	(a4)+,$12(a1)
0000E58E B3C8                       		cmpa.l	a0,a1
0000E590 6400                       		bcc.s	loc_D268
0000E592 2F08                       		move.l	a0,-(sp)
0000E594 2049                       		movea.l	a1,a0
0000E596 6100 0000                  		bsr.w	SpeedToPos
0000E59A D568 0012                  		add.w	d2,$12(a0)
0000E59E 205F                       		movea.l	(sp)+,a0
0000E5A0 6100 0000                  		bsr.w	DisplaySprite2
0000E5A4                            
0000E5A4                            loc_D268:
0000E5A4 51C9 FFAA                  		dbf	d1,Smash_Loop
0000E5A8                            
0000E5A8                            Smash_PlaySnd:
0000E5A8 303C 00CB                  		move.w	#$CB,d0
0000E5AC 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play smashing sound
0000E5B2                            ; End of function SmashObject
0000E5B2                            
0000E5B2                            ; ===========================================================================
0000E5B2                            ; Smashed block	fragment speeds
0000E5B2                            ;
0000E5B2 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000E5B6 0600 FF00                  		dc.w $600, $FF00
0000E5BA 0600 0100                  		dc.w $600, $100
0000E5BE 0400 0500                  		dc.w $400, $500
0000E5C2 0600 FA00                  		dc.w $600, $FA00
0000E5C6 0800 FE00                  		dc.w $800, $FE00
0000E5CA 0800 0200                  		dc.w $800, $200
0000E5CE 0600 0600                  		dc.w $600, $600
0000E5D2                            
0000E5D2 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000E5D6 F800 FE00                  		dc.w $F800, $FE00
0000E5DA F800 0200                  		dc.w $F800, $200
0000E5DE FA00 0600                  		dc.w $FA00, $600
0000E5E2 FC00 FB00                  		dc.w $FC00, $FB00
0000E5E6 FA00 FF00                  		dc.w $FA00, $FF00
0000E5EA FA00 0100                  		dc.w $FA00, $100
0000E5EE FC00 0500                  		dc.w $FC00, $500
0000E5F2                            ; ---------------------------------------------------------------------------
0000E5F2                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000E5F2                            ; ---------------------------------------------------------------------------
0000E5F2                            Map_obj3C:
0000E5F2                            	include "_maps\obj3C.asm"
0000E5F2                            ; ---------------------------------------------------------------------------
0000E5F2                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000E5F2                            ; ---------------------------------------------------------------------------
0000E5F2 0000                       		dc.w byte_D2BC-Map_obj3C
0000E5F4 0000                       		dc.w byte_D2E5-Map_obj3C
0000E5F6 0000                       		dc.w byte_D30E-Map_obj3C
0000E5F8 08                         byte_D2BC:	dc.b 8
0000E5F9 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000E5FE F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000E603 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000E608 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000E60D E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000E612 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000E617 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000E61C 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000E621 08                         byte_D2E5:	dc.b 8
0000E622 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000E627 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000E62C 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000E631 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000E636 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000E63B F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000E640 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000E645 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000E64A 08                         byte_D30E:	dc.b 8
0000E64B E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000E650 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000E655 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000E65A 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000E65F E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000E664 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000E669 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000E66E 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000E674 00                         		even
0000E674 00                         		even
0000E674                            
0000E674                            ; ---------------------------------------------------------------------------
0000E674                            ; Object code loading subroutine
0000E674                            ; ---------------------------------------------------------------------------
0000E674                            
0000E674                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E674                            
0000E674                            
0000E674                            ObjectsLoad:				; XREF: TitleScreen; et al
0000E674 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000E678 7E7F                       		moveq	#$7F,d7
0000E67A 7000                       		moveq	#0,d0
0000E67C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000E682 6400                       		bcc.s	loc_D362
0000E684                            
0000E684                            loc_D348:
0000E684 1010                       		move.b	(a0),d0		; load object number from RAM
0000E686 6700                       		beq.s	loc_D358
0000E688 D040                       		add.w	d0,d0
0000E68A D040                       		add.w	d0,d0
0000E68C 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000E690 4E91                       		jsr	(a1)		; run the object's code
0000E692 7000                       		moveq	#0,d0
0000E694                            
0000E694                            loc_D358:
0000E694 41E8 0040                  		lea	$40(a0),a0	; next object
0000E698 51CF FFEA                  		dbf	d7,loc_D348
0000E69C 4E75                       		rts
0000E69E                            ; ===========================================================================
0000E69E                            
0000E69E                            loc_D362:
0000E69E 0C38 000A D024             		cmpi.b	#$A,($FFFFD000+$24).w	; Has Sonic drowned?
0000E6A4 67DE                       		beq.s	loc_D348				; If so, run objects a little longer
0000E6A6 7E1F                       		moveq	#$1F,d7
0000E6A8 61DA                       		bsr.s	loc_D348
0000E6AA 7E5F                       		moveq	#$5F,d7
0000E6AC                            
0000E6AC                            loc_D368:
0000E6AC 7000                       		moveq	#0,d0
0000E6AE 1010                       		move.b	(a0),d0
0000E6B0 6700                       		beq.s	loc_D378
0000E6B2 4A28 0001                  		tst.b	1(a0)
0000E6B6 6A00                       		bpl.s	loc_D378
0000E6B8 6100 0000                  		bsr.w	DisplaySprite
0000E6BC                            
0000E6BC                            loc_D378:
0000E6BC 41E8 0040                  		lea	$40(a0),a0
0000E6C0                            
0000E6C0                            loc_D37C:
0000E6C0 51CF FFEA                  		dbf	d7,loc_D368
0000E6C4 4E75                       		rts
0000E6C6                            ; End of function ObjectsLoad
0000E6C6                            
0000E6C6                            ; ===========================================================================
0000E6C6                            ; ---------------------------------------------------------------------------
0000E6C6                            ; Object pointers
0000E6C6                            ; ---------------------------------------------------------------------------
0000E6C6                            Obj_Index:
0000E6C6                            	include "_inc\Object pointers.asm"
0000E6C6                            ; ---------------------------------------------------------------------------
0000E6C6                            ; Object pointers
0000E6C6                            ; ---------------------------------------------------------------------------
0000E6C6 0000 0000 0000 0000 0000+  	dc.l Obj01, Obj02,	Obj03, ObjectFall
0000E6D6 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000E6E6 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000E6F6 0000 0000 0000 B894 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000E706 0000 8410 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000E716 0000 8A42 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000E726 0000 92FC 0000 9364 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000E736 0000 9BAA 0000 9EA4 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000E746 0000 0000 0000 AB28 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000E756 0000 AE6A 0000 B3C0 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000E766 0000 A760 0000 9C8C 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000E776 0000 BF1C 0000 B586 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000E786 0000 C93E 0000 D018 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000E796 0000 C49A 0000 E122 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000E7A6 0000 D7A6 0000 D872 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000E7B6 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000E7C6 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000E7D6 0000 CC76 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000E7E6 0000 E3EE 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000E7F6 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000E806 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000E816 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000E826 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000E836 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000E846 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000E856 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000E866 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000E876 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000E886 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000E896 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000E8A6 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000E8B6 0000 0000 0000 DAAC 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000E8C6 0000 513A 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000E8D6 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000E8E6 0000 5800 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E8E6 0000 5800 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E8F6                            
0000E8F6                            ; ---------------------------------------------------------------------------
0000E8F6                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E8F6                            ; ---------------------------------------------------------------------------
0000E8F6                            
0000E8F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E8F6                            
0000E8F6                            
0000E8F6                            ObjectFall:
0000E8F6 3028 0010                  		move.w	$10(a0),d0
0000E8FA 48C0                       		ext.l	d0
0000E8FC E188                       		lsl.l	#8,d0
0000E8FE D1A8 0008                  		add.l	d0,8(a0)
0000E902 3028 0012                  		move.w	$12(a0),d0
0000E906 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000E90C 48C0                       		ext.l	d0
0000E90E E188                       		lsl.l	#8,d0
0000E910 D1A8 000C                  		add.l	d0,$C(a0)
0000E914 4E75                       		rts	
0000E916                            
0000E916                            ; End of function ObjectFall
0000E916                            
0000E916                            ; ---------------------------------------------------------------------------
0000E916                            ; Subroutine translating object	speed to update	object position
0000E916                            ; ---------------------------------------------------------------------------
0000E916                            
0000E916                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E916                            
0000E916                            
0000E916                            SpeedToPos:
0000E916 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000E91A 48C0                       		ext.l	d0
0000E91C E188                       		lsl.l	#8,d0		; multiply speed by $100
0000E91E D1A8 0008                  		add.l	d0,8(a0)	; add to x-axis	position
0000E922 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000E926 48C0                       		ext.l	d0
0000E928 E188                       		lsl.l	#8,d0		; multiply by $100
0000E92A D1A8 000C                  		add.l	d0,$C(a0)	; add to y-axis	position
0000E92E 4E75                       		rts	
0000E930                            
0000E930                            ; End of function SpeedToPos
0000E930                            
0000E930                            ; ---------------------------------------------------------------------------
0000E930                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E930                            ; ---------------------------------------------------------------------------
0000E930                            
0000E930                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E930                            
0000E930                            
0000E930                            DisplaySprite:
0000E930 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E934 3028 0018                  		move.w	$18(a0),d0
0000E938 E248                       		lsr.w	#1,d0
0000E93A 0240 0380                  		andi.w	#$380,d0
0000E93E D2C0                       		adda.w	d0,a1
0000E940 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E944 6400                       		bcc.s	locret_D620
0000E946 5451                       		addq.w	#2,(a1)
0000E948 D2D1                       		adda.w	(a1),a1
0000E94A 3288                       		move.w	a0,(a1)
0000E94C                            
0000E94C                            locret_D620:
0000E94C 4E75                       		rts	
0000E94E                            ; End of function DisplaySprite
0000E94E                            
0000E94E                            ; ---------------------------------------------------------------------------
0000E94E                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E94E                            ; ---------------------------------------------------------------------------
0000E94E                            
0000E94E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E94E                            
0000E94E                            
0000E94E                            DisplaySprite2:
0000E94E 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E952 3029 0018                  		move.w	$18(a1),d0
0000E956 E248                       		lsr.w	#1,d0
0000E958 0240 0380                  		andi.w	#$380,d0
0000E95C D4C0                       		adda.w	d0,a2
0000E95E 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E962 6400                       		bcc.s	locret_D63E
0000E964 5452                       		addq.w	#2,(a2)
0000E966 D4D2                       		adda.w	(a2),a2
0000E968 3489                       		move.w	a1,(a2)
0000E96A                            
0000E96A                            locret_D63E:
0000E96A 4E75                       		rts	
0000E96C                            ; End of function DisplaySprite2
0000E96C                            
0000E96C                            
0000E96C                            DisplaySprite3:
0000E96C 43F8 AC00                      lea    ($FFFFAC00).w,a1
0000E970 D2C0                           adda.w    d0,a1
0000E972 0C51 007E                      cmpi.w    #$7E,(a1)
0000E976 6400                           bhs.s    return_16542
0000E978 5451                           addq.w    #2,(a1)
0000E97A D2D1                           adda.w    (a1),a1
0000E97C 3288                           move.w    a0,(a1)
0000E97E                            
0000E97E                            return_16542:
0000E97E 4E75                           rts
0000E980                            ; ---------------------------------------------------------------------------
0000E980                            ; Subroutine to	delete an object
0000E980                            ; ---------------------------------------------------------------------------
0000E980                            
0000E980                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E980                            
0000E980                            
0000E980                            DeleteObject:
0000E980 2248                       		movea.l	a0,a1
0000E982                            
0000E982                            DeleteObject2:
0000E982 7200                       		moveq	#0,d1
0000E984 700F                       		moveq	#$F,d0
0000E986                            
0000E986                            loc_D646:
0000E986 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E988 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E98C 4E75                       		rts	
0000E98E                            ; End of function DeleteObject
0000E98E                            
0000E98E                            ; ===========================================================================
0000E98E 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E992 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E996 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E99A 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E99E                            ; ---------------------------------------------------------------------------
0000E99E                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E99E                            ; ---------------------------------------------------------------------------
0000E99E                            
0000E99E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E99E                            
0000E99E                            
0000E99E                            BuildSprites:                ; XREF: TitleScreen; et al
0000E99E 45F8 F800                          lea    ($FFFFF800).w,a2 ; set address for sprite table
0000E9A2 4EB9 0000 0000                     jsr		Obj02
0000E9A8 4A38 FFD0                          tst.b    ($FFFFFFD0).w ; this was level_started_flag
0000E9AC 6700                               beq.s    BuildSprites_2
0000E9AE 4EB9 0000 0000                     jsr    loc_40804
0000E9B4                            
0000E9B4                            BuildSprites_2:
0000E9B4 49F8 AC00                          lea    ($FFFFAC00).w,a4
0000E9B8 7E07                               moveq    #7,d7
0000E9BA                            
0000E9BA                            loc_D66A:
0000E9BA 0C47 0005                  		cmpi.w	#$07-$02,d7
0000E9BE 6600                       		bne.s	BuildSpritesCont
0000E9C0 4A38 870D                  		tst.b	(Level_started_flag).w
0000E9C4 6700                       		beq.s	BuildSpritesCont
0000E9C6 48E7 0108                  		movem.l	d7/a4,-(sp)
0000E9CA 6100 0000                  		bsr.w	BuildRings
0000E9CE 4CDF 1080                  		movem.l	(sp)+,d7/a4
0000E9D2                            
0000E9D2                            BuildSpritesCont:
0000E9D2 4A54                       		tst.w	(a4)
0000E9D4 6700 0000                  		beq.w	loc_D72E
0000E9D8 7C02                       		moveq	#2,d6
0000E9DA                            
0000E9DA                            loc_D672:
0000E9DA 3074 6000                          movea.w    (a4,d6.w),a0
0000E9DE 4A10                               tst.b    (a0)
0000E9E0 6700 0000                          beq.w    loc_D726
0000E9E4 08A8 0007 0001                     bclr    #7,1(a0)
0000E9EA 1028 0001                          move.b    1(a0),d0
0000E9EE 1800                               move.b    d0,d4
0000E9F0 0C10 0001                          cmpi.b    #1,(a0)    ; is this object is Sonic
0000E9F4 6700                               beq.s    @skip    ; if it is, branch
0000E9F6 0800 0006                          btst    #6,d0    ; is the multi-draw flag set?
0000E9FA 6600 0000                          bne.w   BuildSprites_MultiDraw    ; if it is, branch
0000E9FE                               @skip:
0000E9FE 0240 000C                  		andi.w	#$C,d0
0000EA02 6700                       		beq.s	loc_D6DE
0000EA04 227B 0088                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000EA08 7000                       		moveq	#0,d0
0000EA0A 1028 0019                  		move.b	$19(a0),d0
0000EA0E 3628 0008                  		move.w	8(a0),d3
0000EA12 9651                       		sub.w	(a1),d3
0000EA14 3203                       		move.w	d3,d1
0000EA16 D240                       		add.w	d0,d1
0000EA18 6B00 0000                  		bmi.w	loc_D726
0000EA1C 3203                       		move.w	d3,d1
0000EA1E 9240                       		sub.w	d0,d1
0000EA20 0C41 0140                  		cmpi.w	#$140,d1
0000EA24 6C00                       		bge.s	loc_D726
0000EA26 0643 0080                  		addi.w	#$80,d3
0000EA2A 0804 0004                  		btst	#4,d4
0000EA2E 6700                       		beq.s	loc_D6E8
0000EA30 7000                       		moveq	#0,d0
0000EA32 1028 0016                  		move.b	$16(a0),d0
0000EA36 3428 000C                  		move.w	$C(a0),d2
0000EA3A 9469 0004                  		sub.w	4(a1),d2
0000EA3E 3202                       		move.w	d2,d1
0000EA40 D240                       		add.w	d0,d1
0000EA42 6B00                       		bmi.s	loc_D726
0000EA44 3202                       		move.w	d2,d1
0000EA46 9240                       		sub.w	d0,d1
0000EA48 0C41 00E0                  		cmpi.w	#$E0,d1
0000EA4C 6C00                       		bge.s	loc_D726
0000EA4E 0642 0080                  		addi.w	#$80,d2
0000EA52 6000                       		bra.s	loc_D700
0000EA54                            ; ===========================================================================
0000EA54                            
0000EA54                            loc_D6DE:
0000EA54 3428 000A                  		move.w	$A(a0),d2
0000EA58 3628 0008                  		move.w	8(a0),d3
0000EA5C 6000                       		bra.s	loc_D700
0000EA5E                            ; ===========================================================================
0000EA5E                            
0000EA5E                            loc_D6E8:
0000EA5E 3428 000C                  		move.w	$C(a0),d2
0000EA62 9469 0004                  		sub.w	4(a1),d2
0000EA66 0642 0080                  		addi.w	#$80,d2
0000EA6A 0C42 0060                  		cmpi.w	#$60,d2
0000EA6E 6500                       		bcs.s	loc_D726
0000EA70 0C42 0180                  		cmpi.w	#$180,d2
0000EA74 6400                       		bcc.s	loc_D726
0000EA76                            
0000EA76                            loc_D700:
0000EA76 2268 0004                  		movea.l	4(a0),a1
0000EA7A 7200                       		moveq	#0,d1
0000EA7C 0804 0005                  		btst	#5,d4
0000EA80 6600                       		bne.s	loc_D71C
0000EA82 1228 001A                  		move.b	$1A(a0),d1
0000EA86 D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000EA88 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000EA8C 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000EA8E 1219                       		move.b	(a1)+,d1
0000EA90 5301                       		subq.b	#1,d1
0000EA92 6B00                       		bmi.s	loc_D720
0000EA94                            
0000EA94                            loc_D71C:
0000EA94 4EB9 0000 0000             		jsr	sub_D750
0000EA9A                            
0000EA9A                            loc_D720:
0000EA9A 08E8 0007 0001             		bset	#7,1(a0)
0000EAA0                            
0000EAA0                            loc_D726:
0000EAA0 5446                       		addq.w	#2,d6
0000EAA2 5554                       		subq.w	#2,(a4)
0000EAA4 6600 FF34                  		bne.w	loc_D672
0000EAA8                            
0000EAA8                            loc_D72E:
0000EAA8 49EC 0080                  		lea	$80(a4),a4
0000EAAC 51CF FF0C                  		dbf	d7,loc_D66A
0000EAB0 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000EAB4 0C05 0050                  		cmpi.b	#$50,d5
0000EAB8 6700                       		beq.s	loc_D748
0000EABA 24BC 0000 0000             		move.l	#0,(a2)
0000EAC0 4E75                       		rts	
0000EAC2                            ; ===========================================================================
0000EAC2                            
0000EAC2                            loc_D748:
0000EAC2 157C 0000 FFFB             		move.b	#0,-5(a2)
0000EAC8 4E75                       		rts	
0000EACA                            ; End of function BuildSprites
0000EACA                            
0000EACA                            BuildSprites_MultiDraw:
0000EACA 2F0C                       	move.l	a4,-(sp)
0000EACC 49F8 F700                  	lea	($FFFFF700).w,a4
0000EAD0 3668 0002                  	movea.w	2(a0),a3
0000EAD4 2A68 0004                  	movea.l	4(a0),a5
0000EAD8 7000                       	moveq	#0,d0
0000EADA                            
0000EADA                            	; check if object is within X bounds
0000EADA 1028 000E                  	move.b	mainspr_width(a0),d0	; load pixel width
0000EADE 3628 0008                  	move.w	8(a0),d3
0000EAE2 9654                       	sub.w	(a4),d3
0000EAE4 3203                       	move.w	d3,d1                            
0000EAE6 D240                       	add.w	d0,d1                            ; is the object right edge to the left of the screen? 
0000EAE8 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000EAEC 3203                       	move.w	d3,d1
0000EAEE 9240                       	sub.w	d0,d1
0000EAF0 0C41 0140                  	cmpi.w	#320,d1                          ; is the object left edge to the right of the screen?
0000EAF4 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000EAF8 0643 0080                  	addi.w	#128,d3
0000EAFC                            
0000EAFC                            	; check if object is within Y bounds
0000EAFC 0804 0004                  	btst	#4,d4                            ; is the accurate Y check flag set?
0000EB00 6700                       	beq.s	BuildSpritesMulti_ApproxYCheck
0000EB02 7000                       	moveq	#0,d0
0000EB04 1028 0014                  	move.b	mainspr_height(a0),d0	         ; load pixel height
0000EB08 3428 000C                  	move.w	$C(a0),d2
0000EB0C 946C 0004                  	sub.w	4(a4),d2
0000EB10 3202                       	move.w	d2,d1
0000EB12 D240                       	add.w	d0,d1
0000EB14 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj  ; if the object is above the screen
0000EB18 3202                       	move.w	d2,d1
0000EB1A 9240                       	sub.w	d0,d1
0000EB1C 0C41 00E0                  	cmpi.w	#224,d1
0000EB20 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj  ; if the object is below the screen
0000EB24 0642 0080                  	addi.w	#128,d2
0000EB28 6000                       	bra.s	BuildSpritesMulti_DrawSprite
0000EB2A                            BuildSpritesMulti_ApproxYCheck:
0000EB2A 3428 000C                  	move.w	$C(a0),d2
0000EB2E 946C 0004                  	sub.w	4(a4),d2
0000EB32 0642 0080                  	addi.w	#128,d2
0000EB36 0242 07FF                  	andi.w	#$7FF,d2
0000EB3A 0C42 0060                  	cmpi.w	#-32+128,d2
0000EB3E 6500                       	blo.s	BuildSprites_MultiDraw_NextObj
0000EB40 0C42 0180                  	cmpi.w	#32+128+224,d2
0000EB44 6400                       	bhs.s	BuildSprites_MultiDraw_NextObj
0000EB46                            BuildSpritesMulti_DrawSprite:
0000EB46 7200                       	moveq	#0,d1
0000EB48 1228 000B                  	move.b	mainspr_mapframe(a0),d1	         ; get current frame
0000EB4C 6700                       	beq.s	@noparenttodraw
0000EB4E D241                       	add.w	d1,d1
0000EB50 224D                       	movea.l	a5,a1                            ; a5 is mappings(a0), copy to a1
0000EB52 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000EB56 7200                       	moveq	#0,d1
0000EB58 1219                       	move.b	(a1)+,d1
0000EB5A 5301                       	subq.b	#1,d1                            ; get number of pieces
0000EB5C 6B00                       	bmi.s	@noparenttodraw                  ; if there are 0 pieces, branch
0000EB5E 3F04                       	move.w	d4,-(sp)
0000EB60 4EB9 0000 0000             	jsr	ChkDrawSprite	                 ; draw the sprite
0000EB66 381F                       	move.w	(sp)+,d4
0000EB68                            @noparenttodraw:
0000EB68 0028 0080 0001             	ori.b	#$80,1(a0)	         ; set onscreen flag
0000EB6E 4DE8 0010                  	lea	sub2_x_pos(a0),a6                ; address of first child sprite info
0000EB72 7000                       	moveq	#0,d0
0000EB74 1028 000F                  	move.b	mainspr_childsprites(a0),d0	 ; get child sprite count
0000EB78 5340                       	subq.w	#1,d0		                 ; if there are 0, go to next object
0000EB7A 6500                       	bcs.s	BuildSprites_MultiDraw_NextObj
0000EB7C                            
0000EB7C                            @drawchildloop:
0000EB7C 4840                       	swap	d0
0000EB7E 361E                       	move.w	(a6)+,d3	                 ; get X pos
0000EB80 9654                       	sub.w	(a4),d3                          ; subtract the screen's x position
0000EB82 0643 0080                  	addi.w	#128,d3
0000EB86 341E                       	move.w	(a6)+,d2	                 ; get Y pos
0000EB88 946C 0004                  	sub.w	4(a4),d2   ; subtract the screen's y position
0000EB8C 0642 0080                  	addi.w	#128,d2
0000EB90 0242 07FF                  	andi.w	#$7FF,d2
0000EB94 524E                       	addq.w	#1,a6
0000EB96 7200                       	moveq	#0,d1
0000EB98 121E                       	move.b	(a6)+,d1	                 ; get mapping frame
0000EB9A D241                       	add.w	d1,d1
0000EB9C 224D                       	movea.l	a5,a1
0000EB9E D2F1 1000                  	adda.w	(a1,d1.w),a1
0000EBA2 7200                       	moveq	#0,d1
0000EBA4 1219                       	move.b	(a1)+,d1
0000EBA6 5301                       	subq.b	#1,d1                            ; get number of pieces
0000EBA8 6B00                       	bmi.s	@nochildleft                     ; if there are 0 pieces, branch
0000EBAA 3F04                       	move.w	d4,-(sp)
0000EBAC 4EB9 0000 0000             	jsr	ChkDrawSprite
0000EBB2 381F                       	move.w	(sp)+,d4
0000EBB4                            @nochildleft:
0000EBB4 4840                       	swap	d0
0000EBB6 51C8 FFC4                  	dbf	d0,@drawchildloop	         ; repeat for number of child sprites
0000EBBA                            ; loc_16804:
0000EBBA                            BuildSprites_MultiDraw_NextObj:
0000EBBA 285F                       	movea.l	(sp)+,a4
0000EBBC 6000 FEE2                  	bra.w	loc_D726; End of function BuildSprites
0000EBC0                            
0000EBC0                            
0000EBC0                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000EBC0                            
0000EBC0                            ; sub_1680A:
0000EBC0                            ChkDrawSprite:
0000EBC0 0C05 0050                  	cmpi.b	#80,d5		; has the sprite limit been reached?
0000EBC4 6500                       	blo.s	loc_1681C	; if it hasn't, branch
0000EBC6 4E75                       	rts	; otherwise, return
0000EBC8                            
0000EBC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EBC8                            
0000EBC8                            
0000EBC8                            sub_D750:				; XREF: BuildSprites
0000EBC8 3668 0002                  		movea.w	2(a0),a3
0000EBCC                            loc_1681C:
0000EBCC 0804 0000                  		btst	#0,d4
0000EBD0 6600                       		bne.s	loc_D796
0000EBD2 0804 0001                  		btst	#1,d4
0000EBD6 6600 0000                  		bne.w	loc_D7E4
0000EBDA                            ; End of function sub_D750
0000EBDA                            
0000EBDA                            
0000EBDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EBDA                            
0000EBDA                            
0000EBDA                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000EBDA 0C05 0050                  		cmpi.b	#$50,d5
0000EBDE 6700                       		beq.s	locret_D794
0000EBE0                            DrawSprite_Loop:				; XREF: sub_D762; SS_ShowLayout	
0000EBE0 1019                       		move.b	(a1)+,d0
0000EBE2 4880                       		ext.w	d0
0000EBE4 D042                       		add.w	d2,d0
0000EBE6 34C0                       		move.w	d0,(a2)+
0000EBE8 14D9                       		move.b	(a1)+,(a2)+
0000EBEA 5205                       		addq.b	#1,d5
0000EBEC 14C5                       		move.b	d5,(a2)+
0000EBEE 1019                       		move.b	(a1)+,d0
0000EBF0 E148                       		lsl.w	#8,d0
0000EBF2 1019                       		move.b	(a1)+,d0
0000EBF4 D04B                       		add.w	a3,d0
0000EBF6 34C0                       		move.w	d0,(a2)+
0000EBF8 1019                       		move.b	(a1)+,d0
0000EBFA 4880                       		ext.w	d0
0000EBFC D043                       		add.w	d3,d0
0000EBFE 0240 01FF                  		andi.w	#$1FF,d0
0000EC02 6600                       		bne.s	loc_D78E
0000EC04 5240                       		addq.w	#1,d0
0000EC06                            
0000EC06                            loc_D78E:
0000EC06 34C0                       		move.w	d0,(a2)+
0000EC08 51C9 FFD0                  		dbf	d1,sub_D762
0000EC0C                            
0000EC0C                            locret_D794:
0000EC0C 4E75                       		rts	
0000EC0E                            ; End of function sub_D762
0000EC0E                            
0000EC0E                            ; ===========================================================================
0000EC0E                            
0000EC0E                            loc_D796:
0000EC0E 0804 0001                  		btst	#1,d4
0000EC12 6600 0000                  		bne.w	loc_D82A
0000EC16                            
0000EC16                            loc_D79E:
0000EC16 0C05 0050                  		cmpi.b	#$50,d5
0000EC1A 6700                       		beq.s	locret_D7E2
0000EC1C 1019                       		move.b	(a1)+,d0
0000EC1E 4880                       		ext.w	d0
0000EC20 D042                       		add.w	d2,d0
0000EC22 34C0                       		move.w	d0,(a2)+
0000EC24 1819                       		move.b	(a1)+,d4
0000EC26 14C4                       		move.b	d4,(a2)+
0000EC28 5205                       		addq.b	#1,d5
0000EC2A 14C5                       		move.b	d5,(a2)+
0000EC2C 1019                       		move.b	(a1)+,d0
0000EC2E E148                       		lsl.w	#8,d0
0000EC30 1019                       		move.b	(a1)+,d0
0000EC32 D04B                       		add.w	a3,d0
0000EC34 0A40 0800                  		eori.w	#$800,d0
0000EC38 34C0                       		move.w	d0,(a2)+
0000EC3A 1019                       		move.b	(a1)+,d0
0000EC3C 4880                       		ext.w	d0
0000EC3E 4440                       		neg.w	d0
0000EC40 D804                       		add.b	d4,d4
0000EC42 0244 0018                  		andi.w	#$18,d4
0000EC46 5044                       		addq.w	#8,d4
0000EC48 9044                       		sub.w	d4,d0
0000EC4A D043                       		add.w	d3,d0
0000EC4C 0240 01FF                  		andi.w	#$1FF,d0
0000EC50 6600                       		bne.s	loc_D7DC
0000EC52 5240                       		addq.w	#1,d0
0000EC54                            
0000EC54                            loc_D7DC:
0000EC54 34C0                       		move.w	d0,(a2)+
0000EC56 51C9 FFBE                  		dbf	d1,loc_D79E
0000EC5A                            
0000EC5A                            locret_D7E2:
0000EC5A 4E75                       		rts	
0000EC5C                            ; ===========================================================================
0000EC5C                            
0000EC5C                            loc_D7E4:				; XREF: sub_D750
0000EC5C 0C05 0050                  		cmpi.b	#$50,d5
0000EC60 6700                       		beq.s	locret_D828
0000EC62 1019                       		move.b	(a1)+,d0
0000EC64 1811                       		move.b	(a1),d4
0000EC66 4880                       		ext.w	d0
0000EC68 4440                       		neg.w	d0
0000EC6A E70C                       		lsl.b	#3,d4
0000EC6C 0244 0018                  		andi.w	#$18,d4
0000EC70 5044                       		addq.w	#8,d4
0000EC72 9044                       		sub.w	d4,d0
0000EC74 D042                       		add.w	d2,d0
0000EC76 34C0                       		move.w	d0,(a2)+
0000EC78 14D9                       		move.b	(a1)+,(a2)+
0000EC7A 5205                       		addq.b	#1,d5
0000EC7C 14C5                       		move.b	d5,(a2)+
0000EC7E 1019                       		move.b	(a1)+,d0
0000EC80 E148                       		lsl.w	#8,d0
0000EC82 1019                       		move.b	(a1)+,d0
0000EC84 D04B                       		add.w	a3,d0
0000EC86 0A40 1000                  		eori.w	#$1000,d0
0000EC8A 34C0                       		move.w	d0,(a2)+
0000EC8C 1019                       		move.b	(a1)+,d0
0000EC8E 4880                       		ext.w	d0
0000EC90 D043                       		add.w	d3,d0
0000EC92 0240 01FF                  		andi.w	#$1FF,d0
0000EC96 6600                       		bne.s	loc_D822
0000EC98 5240                       		addq.w	#1,d0
0000EC9A                            
0000EC9A                            loc_D822:
0000EC9A 34C0                       		move.w	d0,(a2)+
0000EC9C 51C9 FFBE                  		dbf	d1,loc_D7E4
0000ECA0                            
0000ECA0                            locret_D828:
0000ECA0 4E75                       		rts	
0000ECA2                            ; ===========================================================================
0000ECA2                            
0000ECA2                            loc_D82A:
0000ECA2 0C05 0050                  		cmpi.b	#$50,d5
0000ECA6 6700                       		beq.s	locret_D87C
0000ECA8 1019                       		move.b	(a1)+,d0
0000ECAA 1811                       		move.b	(a1),d4
0000ECAC 4880                       		ext.w	d0
0000ECAE 4440                       		neg.w	d0
0000ECB0 E70C                       		lsl.b	#3,d4
0000ECB2 0244 0018                  		andi.w	#$18,d4
0000ECB6 5044                       		addq.w	#8,d4
0000ECB8 9044                       		sub.w	d4,d0
0000ECBA D042                       		add.w	d2,d0
0000ECBC 34C0                       		move.w	d0,(a2)+
0000ECBE 1819                       		move.b	(a1)+,d4
0000ECC0 14C4                       		move.b	d4,(a2)+
0000ECC2 5205                       		addq.b	#1,d5
0000ECC4 14C5                       		move.b	d5,(a2)+
0000ECC6 1019                       		move.b	(a1)+,d0
0000ECC8 E148                       		lsl.w	#8,d0
0000ECCA 1019                       		move.b	(a1)+,d0
0000ECCC D04B                       		add.w	a3,d0
0000ECCE 0A40 1800                  		eori.w	#$1800,d0
0000ECD2 34C0                       		move.w	d0,(a2)+
0000ECD4 1019                       		move.b	(a1)+,d0
0000ECD6 4880                       		ext.w	d0
0000ECD8 4440                       		neg.w	d0
0000ECDA D804                       		add.b	d4,d4
0000ECDC 0244 0018                  		andi.w	#$18,d4
0000ECE0 5044                       		addq.w	#8,d4
0000ECE2 9044                       		sub.w	d4,d0
0000ECE4 D043                       		add.w	d3,d0
0000ECE6 0240 01FF                  		andi.w	#$1FF,d0
0000ECEA 6600                       		bne.s	loc_D876
0000ECEC 5240                       		addq.w	#1,d0
0000ECEE                            
0000ECEE                            loc_D876:
0000ECEE 34C0                       		move.w	d0,(a2)+
0000ECF0 51C9 FFB0                  		dbf	d1,loc_D82A
0000ECF4                            
0000ECF4                            locret_D87C:
0000ECF4 4E75                       		rts	
0000ECF6                            ; ---------------------------------------------------------------------------
0000ECF6                            ; Subroutine to	check if an object is on the screen
0000ECF6                            ; ---------------------------------------------------------------------------
0000ECF6                            
0000ECF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ECF6                            
0000ECF6                            
0000ECF6                            ChkObjOnScreen:
0000ECF6 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000ECFA 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000ECFE 6B00                       		bmi.s	NotOnScreen
0000ED00 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000ED04 6C00                       		bge.s	NotOnScreen	; if not, branch
0000ED06                            
0000ED06 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000ED0A 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000ED0E 6B00                       		bmi.s	NotOnScreen
0000ED10 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000ED14 6C00                       		bge.s	NotOnScreen	; if not, branch
0000ED16                            
0000ED16 7000                       		moveq	#0,d0		; set flag to 0
0000ED18 4E75                       		rts	
0000ED1A                            ; ===========================================================================
0000ED1A                            
0000ED1A                            NotOnScreen:				; XREF: ChkObjOnScreen
0000ED1A 7001                       		moveq	#1,d0		; set flag to 1
0000ED1C 4E75                       		rts	
0000ED1E                            ; End of function ChkObjOnScreen
0000ED1E                            
0000ED1E                            
0000ED1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ED1E                            
0000ED1E                            
0000ED1E                            ChkObjOnScreen2:
0000ED1E 7200                       		moveq	#0,d1
0000ED20 1228 0019                  		move.b	$19(a0),d1
0000ED24 3028 0008                  		move.w	8(a0),d0
0000ED28 9078 F700                  		sub.w	($FFFFF700).w,d0
0000ED2C D041                       		add.w	d1,d0
0000ED2E 6B00                       		bmi.s	NotOnScreen2
0000ED30 D241                       		add.w	d1,d1
0000ED32 9041                       		sub.w	d1,d0
0000ED34 0C40 0140                  		cmpi.w	#320,d0
0000ED38 6C00                       		bge.s	NotOnScreen2
0000ED3A                            
0000ED3A 3228 000C                  		move.w	$C(a0),d1
0000ED3E 9278 F704                  		sub.w	($FFFFF704).w,d1
0000ED42 6B00                       		bmi.s	NotOnScreen2
0000ED44 0C41 00E0                  		cmpi.w	#224,d1
0000ED48 6C00                       		bge.s	NotOnScreen2
0000ED4A                            
0000ED4A 7000                       		moveq	#0,d0
0000ED4C 4E75                       		rts	
0000ED4E                            ; ===========================================================================
0000ED4E                            
0000ED4E                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000ED4E 7001                       		moveq	#1,d0
0000ED50 4E75                       		rts	
0000ED52                            ; End of function ChkObjOnScreen2
0000ED52                            
0000ED52                            ; ---------------------------------------------------------------------------
0000ED52                            ; Subroutine to	load a level's objects
0000ED52                            ; ---------------------------------------------------------------------------
0000ED52                            
0000ED52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ED52                            
0000ED52                            
0000ED52                            ; ---------------------------------------------------------------------------
0000ED52                            ; Objects Manager
0000ED52                            ; Subroutine to load objects whenever they are close to the screen. Unlike in
0000ED52                            ; normal s2, in this version every object gets an entry in the respawn table.
0000ED52                            ; This is necessary to get the additional y-range checks to work.
0000ED52                            ;
0000ED52                            ; input variables:
0000ED52                            ;  -none-
0000ED52                            ;
0000ED52                            ; writes:
0000ED52                            ;  d0, d1, d2
0000ED52                            ;  d3 = upper boundary to load object
0000ED52                            ;  d4 = lower boundary to load object
0000ED52                            ;  d5 = #$FFF, used to filter out object's y position
0000ED52                            ;  d6 = camera position
0000ED52                            ;
0000ED52                            ;  a0 = address in object placement list
0000ED52                            ;  a3 = address in object respawn table
0000ED52                            ;  a6 = object loading routine
0000ED52                            ; ---------------------------------------------------------------------------
0000ED52                             
0000ED52                            ; loc_17AA4
0000ED52                            ObjPosLoad:
0000ED52 7000                       	moveq	#0,d0
0000ED54 1038 F76C                  	move.b	($FFFFF76C).w,d0
0000ED58 4EFB 0000                  	jmp	ObjPosLoad_States(pc,d0.w)
0000ED5C                             
0000ED5C                            ; ============== JUMP TABLE	=============================================
0000ED5C                            ObjPosLoad_States:
0000ED5C 6000 0000                  	bra.w	ObjPosLoad_Init		; 0
0000ED60 6000 0000                  	bra.w	ObjPosLoad_Main		; 2
0000ED64                            ; ============== END JUMP TABLE	=============================================
0000ED64                             
0000ED64                            ObjPosLoad_Init:
0000ED64 5838 F76C                  	addq.b	#4,($FFFFF76C).w
0000ED68                             
0000ED68 41F8 8000                  	lea     (Object_Respawn_Table).w,a0
0000ED6C 7000                       	moveq   #0,d0
0000ED6E 323C 00BF                  	move.w  #$BF,d1 ; set loop counter
0000ED72                            OPLBack1:
0000ED72 20C0                       	move.l  d0,(a0)+
0000ED74 51C9 FFFC                  	dbf     d1,OPLBack1
0000ED78                             
0000ED78 3038 FE10                  	move.w	($FFFFFE10).w,d0
0000ED7C                            ;
0000ED7C                            ;	ror.b	#1,d0			; this is from s3k
0000ED7C                            ;	lsr.w	#5,d0
0000ED7C                            ;	lea	(Off_Objects).l,a0
0000ED7C                            ;	movea.l	(a0,d0.w),a0
0000ED7C                            ;
0000ED7C ED08                       	lsl.b	#6,d0
0000ED7E E848                       	lsr.w	#4,d0
0000ED80 41F9 0000 0000             	lea	(ObjPos_Index).l,a0	; load the first pointer in the object layout list pointer index,
0000ED86 D0F0 0000                  	adda.w	(a0,d0.w),a0		; load the pointer to the current object layout
0000ED8A                             
0000ED8A                            	; initialize each object load address with the first object in the layout
0000ED8A 21C8 F770                  	move.l	a0,($FFFFF770).w
0000ED8E 21C8 F774                  	move.l	a0,($FFFFF774).w
0000ED92 47F8 8000                  	lea	(Object_Respawn_Table).w,a3
0000ED96                             
0000ED96 3C38 F700                  	move.w	($FFFFF700).w,d6
0000ED9A 0446 0080                  	subi.w	#$80,d6	; look one chunk to the left
0000ED9E 6400                       	bcc.s	OPL1	; if the result was negative,
0000EDA0 7C00                       	moveq	#0,d6	; cap at zero
0000EDA2                            	OPL1:	
0000EDA2 0246 FF80                  	andi.w	#$FF80,d6	; limit to increments of $80 (width of a chunk)
0000EDA6                             
0000EDA6 2078 F770                  	movea.l	($FFFFF770).w,a0	; get first object in layout
0000EDAA                             
0000EDAA                            OPLBack2:	; at the beginning of a level this gives respawn table entries to any object that is one chunk
0000EDAA                            	; behind the left edge of the screen that needs to remember its state (Monitors, Badniks, etc.)
0000EDAA BC50                       	cmp.w	(a0),d6		; is object's x position >= d6?
0000EDAC 6300                       	bls.s	OPL2		; if yes, branch
0000EDAE 5C48                       	addq.w	#6,a0	; next object
0000EDB0 524B                       	addq.w	#1,a3	; respawn index of next object going right
0000EDB2 60F6                       	bra.s	OPLBack2
0000EDB4                            ; ---------------------------------------------------------------------------
0000EDB4                             
0000EDB4                            OPL2:	
0000EDB4 21C8 F770                  	move.l	a0,($FFFFF770).w	; remember rightmost object that has been processed, so far (we still need to look forward)
0000EDB8 31CB F778                  	move.w	a3,($FFFFF778).w	; and its respawn table index
0000EDBC                             
0000EDBC 47F8 8000                  	lea	(Object_Respawn_Table).w,a3	; reset a3
0000EDC0 2078 F774                  	movea.l	($FFFFF774).w,a0	; reset a0
0000EDC4 0446 0080                  	subi.w	#$80,d6		; look even farther left (any object behind this is out of range)
0000EDC8 6500                       	bcs.s	OPL3		; branch, if camera position would be behind level's left boundary
0000EDCA                             
0000EDCA                             OPLBack3:	; count how many objects are behind the screen that are not in range and need to remember their state
0000EDCA BC50                       	cmp.w	(a0),d6		; is object's x position >= d6?
0000EDCC 6300                       	bls.s	OPL3		; if yes, branch
0000EDCE 5C48                       	addq.w	#6,a0
0000EDD0 524B                       	addq.w	#1,a3	; respawn index of next object going left
0000EDD2 60F6                       	bra.s	OPLBack3	; continue with next object
0000EDD4                            ; ---------------------------------------------------------------------------
0000EDD4                             
0000EDD4                            OPL3:	
0000EDD4 21C8 F774                  	move.l	a0,($FFFFF774).w	; remember current object from the left
0000EDD8 31CB F77C                  	move.w	a3,($FFFFF77C).w	; and its respawn table index
0000EDDC                             
0000EDDC 31FC FFFF FE2A             	move.w	#-1,(Camera_X_Pos_last).w	; make sure ObjPosLoad_GoingForward is run
0000EDE2                             
0000EDE2 3038 F704                  	move.w	($FFFFF704).w,d0
0000EDE6 0240 FF80                  	andi.w	#$FF80,d0
0000EDEA 31C0 F76E                  	move.w	d0,(Camera_Y_pos_last).w	; make sure the Y check isn't run unnecessarily during initialization
0000EDEE                            ; ---------------------------------------------------------------------------
0000EDEE                             
0000EDEE                            ObjPosLoad_Main:
0000EDEE                            	; get coarse camera position
0000EDEE                            ;	move.w	($FFFFF704).w,d1
0000EDEE                            ;	subi.w	#$80,d1
0000EDEE                            ;	andi.w	#$FF80,d1
0000EDEE                            ;	move.w	d1,(Camera_Y_pos_coarse).w
0000EDEE                             
0000EDEE                            ;	move.w	($FFFFF700).w,d1
0000EDEE                            ;	subi.w	#$80,d1
0000EDEE                            ;	andi.w	#$FF80,d1
0000EDEE                            ;	move.w	d1,(Camera_X_pos_coarse).w
0000EDEE                             
0000EDEE 4A78 F726                  	tst.w	($FFFFF726).w	; does this level y-wrap?
0000EDF2 6A00                       	bpl.s	ObjMan_Main_NoYWrap	; if not, branch
0000EDF4 4DF9 0000 0000             	lea	(ChkLoadObj_YWrap).l,a6	; set object loading routine
0000EDFA 3638 F704                  	move.w	($FFFFF704).w,d3
0000EDFE 0243 FF80                  	andi.w	#$FF80,d3	; get coarse value
0000EE02 3803                       	move.w	d3,d4
0000EE04 0644 0200                  	addi.w	#$200,d4	; set lower boundary
0000EE08 0443 0080                  	subi.w	#$80,d3		; set upper boundary
0000EE0C 6A00                       	bpl.s	OPL4		; branch, if upper boundary > 0
0000EE0E 0243 07FF                  	andi.w	#$7FF,d3	; wrap value
0000EE12 6000                       	bra.s	ObjMan_Main_Cont
0000EE14                            ; ---------------------------------------------------------------------------
0000EE14                             
0000EE14                            OPL4:	
0000EE14 303C 07FF                  	move.w	#$7FF,d0
0000EE18 5240                       	addq.w	#1,d0
0000EE1A B840                       	cmp.w	d0,d4
0000EE1C 6300                       	bls.s	OPL5		; branch, if lower boundary < $7FF
0000EE1E 0244 07FF                  	andi.w	#$7FF,d4	; wrap value
0000EE22 6000                       	bra.s	ObjMan_Main_Cont
0000EE24                            ; ---------------------------------------------------------------------------
0000EE24                             
0000EE24                            ObjMan_Main_NoYWrap:
0000EE24 3638 F704                  	move.w	($FFFFF704).w,d3
0000EE28 0243 FF80                  	andi.w	#$FF80,d3	; get coarse value
0000EE2C 3803                       	move.w	d3,d4
0000EE2E 0644 0200                  	addi.w	#$200,d4	; set lower boundary
0000EE32 0443 0080                  	subi.w	#$80,d3		; set upper boundary
0000EE36 6A00                       	bpl.s	OPL5
0000EE38 7600                       	moveq	#0,d3	; no negative values allowed
0000EE3A                             
0000EE3A                            OPL5:	
0000EE3A 4DF9 0000 0000             	lea	(ChkLoadObj).l,a6	; set object loading routine
0000EE40                             
0000EE40                            ObjMan_Main_Cont:
0000EE40 3A3C 0FFF                  	move.w	#$FFF,d5	; this will be used later when we load objects
0000EE44 3C38 F700                  	move.w	($FFFFF700).w,d6
0000EE48 0246 FF80                  	andi.w	#$FF80,d6
0000EE4C BC78 FE2A                  	cmp.w	(Camera_X_Pos_last).w,d6	; is the X range the same as last time?
0000EE50 6700 0000                  	beq.w	ObjPosLoad_SameXRange	; if yes, branch
0000EE54 6C00                       	bge.s	ObjPosLoad_GoingForward	; if new pos is greater than old pos, branch
0000EE56                             
0000EE56                            	; if the player is moving back
0000EE56 31C6 FE2A                  	move.w	d6,(Camera_X_Pos_last).w	; remember current position for next time
0000EE5A                             
0000EE5A 2078 F774                  	movea.l	($FFFFF774).w,a0	; get current object going left
0000EE5E 3678 F77C                  	movea.w	($FFFFF77C).w,a3	; and its respawn table index
0000EE62                             
0000EE62 0446 0080                  	subi.w	#$80,d6			; look one chunk to the left
0000EE66 6500                       	bcs.s	ObjMan_GoingBack_Part2	; branch, if camera position would be behind level's left boundary
0000EE68                             
0000EE68 4EB9 0000 0000             	jsr	(SingleObjLoad).l		; find an empty object slot
0000EE6E 6600                       	bne.s	ObjMan_GoingBack_Part2		; branch, if there are none
0000EE70                            OPLBack4:	; load all objects left of the screen that are now in range
0000EE70 BC68 FFFA                  	cmp.w	-6(a0),d6		; is the previous object's X pos less than d6?
0000EE74 6C00                       	bge.s	ObjMan_GoingBack_Part2	; if it is, branch
0000EE76 5D48                       	subq.w	#6,a0		; get object's address
0000EE78 534B                       	subq.w	#1,a3		; and respawn table index
0000EE7A 4E96                       	jsr	(a6)		; load object
0000EE7C 6600                       	bne.s	OPL6		; branch, if SST is full
0000EE7E 5D48                       	subq.w	#6,a0
0000EE80 60EE                       	bra.s	OPLBack4	; continue with previous object
0000EE82                            ; ---------------------------------------------------------------------------
0000EE82                             
0000EE82                            OPL6:	
0000EE82                            	; undo a few things, if the object couldn't load
0000EE82 5C48                       	addq.w	#6,a0	; go back to last object
0000EE84 524B                       	addq.w	#1,a3	; since we didn't load the object, undo last change
0000EE86                             
0000EE86                            ObjMan_GoingBack_Part2:
0000EE86 21C8 F774                  	move.l	a0,($FFFFF774).w	; remember current object going left
0000EE8A 31CB F77C                  	move.w	a3,($FFFFF77C).w	; and its respawn table index
0000EE8E 2078 F770                  	movea.l	($FFFFF770).w,a0	; get next object going right
0000EE92 3678 F778                  	movea.w	($FFFFF778).w,a3	; and its respawn table index
0000EE96 0646 0300                  	addi.w	#$300,d6	; look two chunks beyond the right edge of the screen
0000EE9A                             
0000EE9A                            OPLBack5:	; subtract number of objects that have been moved out of range (from the right side)
0000EE9A BC68 FFFA                  	cmp.w	-6(a0),d6	; is the previous object's X pos less than d6?
0000EE9E 6E00                       	bgt.s	OPL7		; if it is, branch
0000EEA0 5D48                       	subq.w	#6,a0		; get object's address
0000EEA2 534B                       	subq.w	#1,a3		; and respawn table index
0000EEA4 60F4                       	bra.s	OPLBack5	; continue with previous object
0000EEA6                            ; ---------------------------------------------------------------------------
0000EEA6                             
0000EEA6                            OPL7:	
0000EEA6 21C8 F770                  	move.l	a0,($FFFFF770).w	; remember next object going right
0000EEAA 31CB F778                  	move.w	a3,($FFFFF778).w	; and its respawn table index
0000EEAE 6000                       	bra.s	ObjPosLoad_SameXRange
0000EEB0                            ; ---------------------------------------------------------------------------
0000EEB0                             
0000EEB0                            ObjPosLoad_GoingForward:
0000EEB0 31C6 FE2A                  	move.w	d6,(Camera_X_Pos_last).w
0000EEB4                             
0000EEB4 2078 F770                  	movea.l	($FFFFF770).w,a0	; get next object from the right
0000EEB8 3678 F778                  	movea.w ($FFFFF778).w,a3	; and its respawn table index
0000EEBC 0646 0280                  	addi.w	#$280,d6	; look two chunks forward
0000EEC0 4EB9 0000 0000             	jsr	(SingleObjLoad).l		; find an empty object slot
0000EEC6 6600                       	bne.s	ObjMan_GoingForward_Part2	; branch, if there are none
0000EEC8                             
0000EEC8                            OPLBack6:	; load all objects right of the screen that are now in range
0000EEC8 BC50                       	cmp.w	(a0),d6				; is object's x position >= d6?
0000EECA 6300                       	bls.s	ObjMan_GoingForward_Part2	; if yes, branch
0000EECC 4E96                       	jsr	(a6)		; load object (and get address of next object)
0000EECE 524B                       	addq.w	#1,a3		; respawn index of next object to the right
0000EED0 67F6                       	beq.s	OPLBack6	; continue loading objects, if the SST isn't full
0000EED2                             
0000EED2                            ObjMan_GoingForward_Part2:
0000EED2 21C8 F770                  	move.l	a0,($FFFFF770).w	; remember next object from the right
0000EED6 31CB F778                  	move.w	a3,($FFFFF778).w	; and its respawn table index
0000EEDA 2078 F774                  	movea.l	($FFFFF774).w,a0	; get current object from the left
0000EEDE 3678 F77C                  	movea.w	($FFFFF77C).w,a3	; and its respawn table index
0000EEE2 0446 0300                  	subi.w	#$300,d6		; look one chunk behind the left edge of the screen
0000EEE6 6500                       	bcs.s	ObjMan_GoingForward_End	; branch, if camera position would be behind level's left boundary
0000EEE8                             
0000EEE8                            OPLBack7:	; subtract number of objects that have been moved out of range (from the left)
0000EEE8 BC50                       	cmp.w	(a0),d6			; is object's x position >= d6?
0000EEEA 6300                       	bls.s	ObjMan_GoingForward_End	; if yes, branch
0000EEEC 5C48                       	addq.w	#6,a0	; next object
0000EEEE 524B                       	addq.w	#1,a3	; respawn index of next object to the left
0000EEF0 60F6                       	bra.s	OPLBack7	; continue with next object
0000EEF2                            ; ---------------------------------------------------------------------------
0000EEF2                             
0000EEF2                            ObjMan_GoingForward_End:
0000EEF2 21C8 F774                  	move.l	a0,($FFFFF774).w	; remember current object from the left
0000EEF6 31CB F77C                  	move.w	a3,($FFFFF77C).w	; and its respawn table index
0000EEFA                             
0000EEFA                            ObjPosLoad_SameXRange:
0000EEFA 3C38 F704                  	move.w	($FFFFF704).w,d6
0000EEFE 0246 FF80                  	andi.w	#$FF80,d6
0000EF02 3606                       	move.w	d6,d3
0000EF04 BC78 F76E                  	cmp.w	(Camera_Y_pos_last).w,d6	; is the y range the same as last time?
0000EF08 6700 0000                  	beq.w	ObjPosLoad_SameYRange	; if yes, branch
0000EF0C 6C00                       	bge.s	ObjPosLoad_GoingDown	; if the player is moving down
0000EF0E                             
0000EF0E                            	; if the player is moving up
0000EF0E 4A78 F72C                  	tst.w	($FFFFF72C).w	; does the level y-wrap?
0000EF12 6A00                       	bpl.s	ObjMan_GoingUp_NoYWrap	; if not, branch
0000EF14 4A46                       	tst.w	d6
0000EF16 6600                       	bne.s	ObjMan_GoingUp_YWrap
0000EF18 0C78 0080 F76E             	cmpi.w	#$80,(Camera_Y_pos_last).w
0000EF1E 6600                       	bne.s	ObjMan_GoingDown_YWrap
0000EF20                             
0000EF20                            ObjMan_GoingUp_YWrap:
0000EF20 0443 0080                  	subi.w	#$80,d3			; look one chunk up
0000EF24 6A00                       	bpl.s	ObjPosLoad_YCheck	; go to y check, if camera y position >= $80
0000EF26 0243 07FF                  	andi.w	#$7FF,d3		; else, wrap value
0000EF2A 6000                       	bra.s	ObjPosLoad_YCheck
0000EF2C                             
0000EF2C                            ; ---------------------------------------------------------------------------
0000EF2C                             
0000EF2C                            ObjMan_GoingUp_NoYWrap:
0000EF2C 0443 0080                  	subi.w	#$80,d3				; look one chunk up
0000EF30 6B00 0000                  	bmi.w	ObjPosLoad_SameYRange	; don't do anything if camera y position is < $80
0000EF34 6000                       	bra.s	ObjPosLoad_YCheck
0000EF36                            ; ---------------------------------------------------------------------------
0000EF36                             
0000EF36                            ObjPosLoad_GoingDown:
0000EF36 4A78 F72C                  	tst.w	($FFFFF72C).w		; does the level y-wrap?
0000EF3A 6A00                       	bpl.s	ObjMan_GoingDown_NoYWrap	; if not, branch
0000EF3C 4A78 F76E                  	tst.w	(Camera_Y_pos_last).w
0000EF40 6600                       	bne.s	ObjMan_GoingDown_YWrap
0000EF42 0C46 0080                  	cmpi.w	#$80,d6
0000EF46 66D8                       	bne.s	ObjMan_GoingUp_YWrap
0000EF48                             
0000EF48                            ObjMan_GoingDown_YWrap:
0000EF48 0643 0180                  	addi.w	#$180,d3		; look one chunk down
0000EF4C 0C43 07FF                  	cmpi.w	#$7FF,d3
0000EF50 6500                       	bcs.s	ObjPosLoad_YCheck	; go to  check, if camera y position < $7FF
0000EF52 0243 07FF                  	andi.w	#$7FF,d3		; else, wrap value
0000EF56 6000                       	bra.s	ObjPosLoad_YCheck
0000EF58                            ; ---------------------------------------------------------------------------
0000EF58                             
0000EF58                            ObjMan_GoingDown_NoYWrap:
0000EF58 0643 0180                  	addi.w	#$180,d3			; look one chunk down
0000EF5C 0C43 07FF                  	cmpi.w	#$7FF,d3
0000EF60 6200                       	bhi.s	ObjPosLoad_SameYRange	; don't do anything, if camera is too close to bottom
0000EF62                             
0000EF62                            ObjPosLoad_YCheck:
0000EF62 4EB9 0000 0000             	jsr	(SingleObjLoad).l		; get an empty object slot
0000EF68 6600                       	bne.s	ObjPosLoad_SameYRange	; branch, if there are none
0000EF6A 3803                       	move.w	d3,d4
0000EF6C 0644 0080                  	addi.w	#$80,d4
0000EF70 3A3C 0FFF                  	move.w	#$FFF,d5	; this will be used later when we load objects
0000EF74 2078 F774                  	movea.l	($FFFFF774).w,a0	; get next object going left
0000EF78 3678 F77C                  	movea.w	($FFFFF77C).w,a3	; and its respawn table index
0000EF7C 2E38 F770                  	move.l	($FFFFF770).w,d7	; get next object going right
0000EF80 9E88                       	sub.l	a0,d7	; d7 = number of objects between the left and right boundaries * 6
0000EF82 6700                       	beq.s	ObjPosLoad_SameYRange	; branch if there are no objects inbetween
0000EF84 5448                       	addq.w	#2,a0	; align to object's y position
0000EF86                             
0000EF86                            OPLBack8:	; check, if current object needs to be loaded
0000EF86 4A13                       	tst.b	(a3)	; is object already loaded?
0000EF88 6B00                       	bmi.s	OPL8	; if yes, branch
0000EF8A 3210                       	move.w	(a0),d1
0000EF8C C245                       	and.w	d5,d1	; get object's y position
0000EF8E B243                       	cmp.w	d3,d1
0000EF90 6500                       	bcs.s	OPL8	; branch, if object is out of range from the top
0000EF92 B244                       	cmp.w	d4,d1
0000EF94 6200                       	bhi.s	OPL8	; branch, if object is out of range from the bottom
0000EF96 08D3 0007                  	bset	#7,(a3)	; mark object as loaded
0000EF9A                            	; load object
0000EF9A 3368 FFFE 0008             	move.w	-2(a0),8(a1)
0000EFA0 3210                       	move.w	(a0),d1
0000EFA2 3401                       	move.w	d1,d2
0000EFA4 C245                       	and.w	d5,d1	; get object's y position
0000EFA6 3341 000C                  	move.w	d1,$C(a1)
0000EFAA E75A                       	rol.w	#3,d2
0000EFAC 0242 0003                  	andi.w	#3,d2	; get object's render flags and status
0000EFB0 1342 0001                  	move.b	d2,1(a1)
0000EFB4 1342 0022                  	move.b	d2,$22(a1)
0000EFB8 7000                           moveq	#0,d0
0000EFBA 1028 0002                  	move.b	2(a0),d0
0000EFBE 0200 007F                  	andi.b	#$7F,d0
0000EFC2 1280                       	move.b	d0,0(a1)
0000EFC4 1368 0003 0028             	move.b	3(a0),$28(a1)
0000EFCA 334B 0014                  	move.w	a3,respawn_index(a1)
0000EFCE 4EB9 0000 0000             	jsr	(SingleObjLoad).l	; find new object slot
0000EFD4 6600                       	bne.s	ObjPosLoad_SameYRange	; brach, if there are none left
0000EFD6                            OPL8:
0000EFD6 5C48                       	addq.w	#6,a0	; address of next object
0000EFD8 524B                       	addq.w	#1,a3	; and its respawn index
0000EFDA 5D47                       	subq.w	#6,d7	; subtract from size of remaining objects
0000EFDC 66A8                       	bne.s	OPLBack8	; branch, if there are more
0000EFDE                             
0000EFDE                            ObjPosLoad_SameYRange:
0000EFDE 31C6 F76E                  	move.w	d6,(Camera_Y_pos_last).w
0000EFE2 4E75                       	rts		
0000EFE4                            ; ===========================================================================
0000EFE4                            ; ---------------------------------------------------------------------------
0000EFE4                            ; Subroutines to check if an object needs to be loaded,
0000EFE4                            ; with and without y-wrapping enabled.
0000EFE4                            ;
0000EFE4                            ; input variables:
0000EFE4                            ;  d3 = upper boundary to load object
0000EFE4                            ;  d4 = lower boundary to load object
0000EFE4                            ;  d5 = #$FFF, used to filter out object's y position
0000EFE4                            ;
0000EFE4                            ;  a0 = address in object placement list
0000EFE4                            ;  a1 = object
0000EFE4                            ;  a3 = address in object respawn table
0000EFE4                            ;
0000EFE4                            ; writes:
0000EFE4                            ;  d1, d2, d7
0000EFE4                            ; ---------------------------------------------------------------------------
0000EFE4                            ChkLoadObj_YWrap:
0000EFE4 4A13                       	tst.b	(a3)	; is object already loaded?
0000EFE6 6A00                       	bpl.s	OPL9	; if not, branch
0000EFE8 5C48                       	addq.w	#6,a0	; address of next object
0000EFEA 7200                       	moveq	#0,d1	; let the objects manager know that it can keep going
0000EFEC 4E75                       	rts	
0000EFEE                            ; ---------------------------------------------------------------------------
0000EFEE                             
0000EFEE                            OPL9:	
0000EFEE 3E18                       	move.w	(a0)+,d7	; x_pos
0000EFF0 3218                       	move.w	(a0)+,d1	; there are three things stored in this word
0000EFF2 3401                       	move.w	d1,d2	; does this object skip y-Checks?
0000EFF4 6B00                       	bmi.s	OPL10	; if yes, branch
0000EFF6 C245                       	and.w	d5,d1	; y_pos
0000EFF8 B243                       	cmp.w	d3,d1
0000EFFA 6400                       	bcc.s	LoadObj_YWrap
0000EFFC B244                       	cmp.w	d4,d1
0000EFFE 6300                       	bls.s	LoadObj_YWrap
0000F000 5448                       	addq.w	#2,a0	; address of next object
0000F002 7200                       	moveq	#0,d1	; let the objects manager know that it can keep going
0000F004 4E75                       	rts	
0000F006                            ; ---------------------------------------------------------------------------
0000F006                             
0000F006                            OPL10:	
0000F006 C245                       	and.w	d5,d1	; y_pos
0000F008                             
0000F008                            LoadObj_YWrap:
0000F008 08D3 0007                  	bset	#7,(a3)	; mark object as loaded
0000F00C 3347 0008                  	move.w	d7,8(a1)
0000F010 3341 000C                  	move.w	d1,$C(a1)
0000F014 E75A                       	rol.w	#3,d2	; adjust bits
0000F016 0242 0003                  	andi.w	#3,d2	; get render flags and status
0000F01A 1342 0001                  	move.b	d2,1(a1)
0000F01E 1342 0022                  	move.b	d2,$22(a1)
0000F022 7000                           moveq	#0,d0
0000F024 1018                       	move.b	(a0)+,d0
0000F026 0200 007F                  	andi.b	#$7F,d0
0000F02A 1280                       	move.b	d0,0(a1)
0000F02C 1358 0028                  	move.b	(a0)+,$28(a1)
0000F030 334B 0014                  	move.w	a3,respawn_index(a1)
0000F034 6000                       	bra.s	SingleObjLoad	; find new object slot
0000F036                             
0000F036                            ;loc_17F36
0000F036                            ChkLoadObj:
0000F036 4A13                       	tst.b	(a3)	; is object already loaded?
0000F038 6A00                       	bpl.s	OPL11	; if not, branch
0000F03A 5C48                       	addq.w	#6,a0	; address of next object
0000F03C 7200                       	moveq	#0,d1	; let the objects manager know that it can keep going
0000F03E 4E75                       	rts
0000F040                            ; ---------------------------------------------------------------------------
0000F040                             
0000F040                            OPL11:	
0000F040 3E18                       	move.w	(a0)+,d7	; x_pos
0000F042 3218                       	move.w	(a0)+,d1	; there are three things stored in this word
0000F044 3401                       	move.w	d1,d2	; does this object skip y-Checks?	;*6
0000F046 6B00                       	bmi.s	OPL13	; if yes, branch
0000F048 C245                       	and.w	d5,d1	; y_pos
0000F04A B243                       	cmp.w	d3,d1
0000F04C 6500                       	bcs.s	OPL12	; branch, if object is out of range from the top
0000F04E B244                       	cmp.w	d4,d1
0000F050 6300                       	bls.s	LoadObj	; branch, if object is in range from the bottom
0000F052                            OPL12:
0000F052 5448                       	addq.w	#2,a0	; address of next object
0000F054 7200                       	moveq	#0,d1
0000F056 4E75                       	rts		
0000F058                            ; ---------------------------------------------------------------------------
0000F058                             
0000F058                            OPL13:	
0000F058 C245                       	and.w	d5,d1	; y_pos
0000F05A                             
0000F05A                            LoadObj:
0000F05A 08D3 0007                  	bset	#7,(a3)	; mark object as loaded
0000F05E 3347 0008                  	move.w	d7,8(a1)
0000F062 3341 000C                  	move.w	d1,$C(a1)
0000F066 E75A                       	rol.w	#3,d2	; adjust bits
0000F068 0242 0003                  	andi.w	#3,d2	; get render flags and status
0000F06C 1342 0001                  	move.b	d2,1(a1)
0000F070 1342 0022                  	move.b	d2,$22(a1)
0000F074 7000                           moveq	#0,d0
0000F076 1018                           move.b	(a0)+,d0
0000F078 0200 007F                  	andi.b	#$7F,d0
0000F07C 1280                       	move.b	d0,0(a1)
0000F07E 1358 0028                  	move.b	(a0)+,$28(a1)
0000F082 334B 0014                  	move.w	a3,respawn_index(a1)
0000F086                            	; continue straight to SingleObjLoad
0000F086                            ; End of function ChkLoadObj
0000F086                            ; ===========================================================================
0000F086                            
0000F086                            ; ---------------------------------------------------------------------------
0000F086                            ; Single object	loading	subroutine
0000F086                            ; ---------------------------------------------------------------------------
0000F086                            
0000F086                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F086                            
0000F086                            
0000F086                            SingleObjLoad:
0000F086 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000F08A 303C 005F                  		move.w	#$5F,d0
0000F08E                            
0000F08E                            loc_DA94:
0000F08E 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000F090 6700                       		beq.s	locret_DAA0	; if yes, branch
0000F092 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000F096 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000F09A                            
0000F09A                            locret_DAA0:
0000F09A 4E75                       		rts	
0000F09C                            ; End of function SingleObjLoad
0000F09C                            
0000F09C                            
0000F09C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F09C                            
0000F09C                            
0000F09C                            SingleObjLoad2:
0000F09C 2248                       		movea.l	a0,a1
0000F09E 303C F000                  		move.w	#-$1000,d0
0000F0A2 9048                       		sub.w	a0,d0
0000F0A4 EC48                       		lsr.w	#6,d0
0000F0A6 5340                       		subq.w	#1,d0
0000F0A8 6500                       		bcs.s	locret_DABC
0000F0AA                            
0000F0AA                            loc_DAB0:
0000F0AA 4A11                       		tst.b	(a1)
0000F0AC 6700                       		beq.s	locret_DABC
0000F0AE 43E9 0040                  		lea	$40(a1),a1
0000F0B2 51C8 FFF6                  		dbf	d0,loc_DAB0
0000F0B6                            
0000F0B6                            locret_DABC:
0000F0B6 4E75                       		rts	
0000F0B8                            ; End of function SingleObjLoad2
0000F0B8                            
0000F0B8                            ; ===========================================================================
0000F0B8                            RingsManager:
0000F0B8 7000                       	moveq	#0,d0
0000F0BA 1038 870C                  	move.b	(Rings_manager_routine).w,d0
0000F0BE 303B 0000                  	move.w	RingsManager_States(pc,d0.w),d0
0000F0C2 4EFB 0000                  	jmp	RingsManager_States(pc,d0.w)
0000F0C6                            ; ===========================================================================
0000F0C6                            ; off_16F96:
0000F0C6                            RingsManager_States:
0000F0C6 0000                       	dc.w RingsManager_Init-RingsManager_States
0000F0C8 0000                       	dc.w RingsManager_Main-RingsManager_States
0000F0CA                            ; ===========================================================================
0000F0CA                            ; loc_16F9A:
0000F0CA                            RingsManager_Init:
0000F0CA 5438 870C                  	addq.b	#2,(Rings_manager_routine).w ; => RingsManager_Main
0000F0CE 6100 0000                  	bsr.w	RingsManager_Setup
0000F0D2 2278 8700                  	movea.l	(Ring_start_addr_ROM).w,a1
0000F0D6 45F8 8300                  	lea	(Ring_Positions).w,a2
0000F0DA 3838 F700                  	move.w	($FFFFF700).w,d4
0000F0DE 5144                       	subq.w	#8,d4
0000F0E0 6200                       	bhi.s	loc_16FB6
0000F0E2 7801                       	moveq	#1,d4
0000F0E4 6000                       	bra.s	loc_16FB6
0000F0E6                            ; ===========================================================================
0000F0E6                            
0000F0E6                            loc_16FB2:
0000F0E6 5849                       	addq.w	#4,a1
0000F0E8 544A                       	addq.w	#2,a2
0000F0EA                            
0000F0EA                            loc_16FB6:
0000F0EA B851                       	cmp.w	(a1),d4
0000F0EC 62F8                       	bhi.s	loc_16FB2
0000F0EE 21C9 8700                  	move.l	a1,(Ring_start_addr_ROM).w
0000F0F2 31CA 8708                  	move.w	a2,(Ring_start_addr_RAM).w
0000F0F6 0644 0150                  	addi.w	#$150,d4
0000F0FA 6000                       	bra.s	loc_16FCE
0000F0FC                            ; ===========================================================================
0000F0FC                            
0000F0FC                            loc_16FCA:
0000F0FC 5849                       	addq.w	#4,a1
0000F0FE                            
0000F0FE                            loc_16FCE:
0000F0FE B851                       	cmp.w	(a1),d4
0000F100 62FA                       	bhi.s	loc_16FCA
0000F102 21C9 8704                  	move.l	a1,(Ring_end_addr_ROM).w
0000F106 4E75                       	rts
0000F108                            ; ===========================================================================
0000F108                            ; loc_16FDE:
0000F108                            RingsManager_Main:
0000F108 45F8 870E                  	lea	(Ring_consumption_table).w,a2
0000F10C 321A                       	move.w	(a2)+,d1
0000F10E 5341                       	subq.w	#1,d1
0000F110 6500                       	bcs.s	loc_17014
0000F112                            
0000F112                            loc_16FE8:
0000F112 301A                       	move.w	(a2)+,d0
0000F114 67FC                       	beq.s	loc_16FE8
0000F116 3240                       	movea.w	d0,a1
0000F118 5311                       	subq.b	#1,(a1)
0000F11A 6600                       	bne.s	loc_17010
0000F11C 12BC 0006                  	move.b	#6,(a1)
0000F120 5229 0001                  	addq.b	#1,1(a1)
0000F124 0C29 0008 0001             	cmpi.b	#8,1(a1)
0000F12A 6600                       	bne.s	loc_17010
0000F12C 32BC FFFF                  	move.w	#-1,(a1)
0000F130 357C 0000 FFFE             	move.w	#0,-2(a2)
0000F136 5378 870E                  	subq.w	#1,(Ring_consumption_table).w
0000F13A                            
0000F13A                            loc_17010:
0000F13A 51C9 FFD6                  	dbf	d1,loc_16FE8
0000F13E                            
0000F13E                            loc_17014:
0000F13E 2278 8700                  	movea.l	(Ring_start_addr_ROM).w,a1
0000F142 3478 8708                  	movea.w	(Ring_start_addr_RAM).w,a2
0000F146 3838 F700                  	move.w	($FFFFF700).w,d4
0000F14A 5144                       	subq.w	#8,d4
0000F14C 6200                       	bhi.s	loc_17028
0000F14E 7801                       	moveq	#1,d4
0000F150 6000                       	bra.s	loc_17028
0000F152                            ; ===========================================================================
0000F152                            
0000F152                            loc_17024:
0000F152 5849                       	addq.w	#4,a1
0000F154 544A                       	addq.w	#2,a2
0000F156                            
0000F156                            loc_17028:
0000F156 B851                       	cmp.w	(a1),d4
0000F158 62F8                       	bhi.s	loc_17024
0000F15A 6000                       	bra.s	loc_17032
0000F15C                            ; ===========================================================================
0000F15C                            
0000F15C                            loc_17030:
0000F15C 5949                       	subq.w	#4,a1
0000F15E 554A                       	subq.w	#2,a2
0000F160                            
0000F160                            loc_17032:
0000F160 B869 FFFC                  	cmp.w	-4(a1),d4
0000F164 63F6                       	bls.s	loc_17030
0000F166 21C9 8700                  	move.l	a1,(Ring_start_addr_ROM).w
0000F16A 31CA 8708                  	move.w	a2,(Ring_start_addr_RAM).w
0000F16E 2478 8704                  	movea.l	(Ring_end_addr_ROM).w,a2
0000F172 0644 0150                  	addi.w	#$150,d4
0000F176 6000                       	bra.s	loc_1704A
0000F178                            ; ===========================================================================
0000F178                            
0000F178                            loc_17046:
0000F178 584A                       	addq.w	#4,a2
0000F17A                            
0000F17A                            loc_1704A:
0000F17A B852                       	cmp.w	(a2),d4
0000F17C 62FA                       	bhi.s	loc_17046
0000F17E 6000                       	bra.s	loc_17054
0000F180                            ; ===========================================================================
0000F180                            
0000F180                            loc_17052:
0000F180 594A                       	subq.w	#4,a2
0000F182                            
0000F182                            loc_17054:
0000F182 B86A FFFC                  	cmp.w	-4(a2),d4
0000F186 63F8                       	bls.s	loc_17052
0000F188 21CA 8704                  	move.l	a2,(Ring_end_addr_ROM).w
0000F18C 4E75                       	rts
0000F18E                            
0000F18E                            ; ===========================================================================
0000F18E                            
0000F18E                            Touch_Rings:
0000F18E 2278 8700                  	movea.l	(Ring_start_addr_ROM).w,a1
0000F192 2478 8704                  	movea.l	(Ring_end_addr_ROM).w,a2
0000F196                            
0000F196                            loc_170D0:
0000F196 B5C9                       	cmpa.l	a1,a2
0000F198 6700 0000                  	beq.w	return_17166
0000F19C 3878 8708                  	movea.w	(Ring_start_addr_RAM).w,a4
0000F1A0 0C68 005A 0030             	cmpi.w	#$5A,$30(a0)
0000F1A6 6400 0000                  	bcc.w	return_17166
0000F1AA                            	
0000F1AA                            Touch_Rings_NoAttraction:
0000F1AA 3428 0008                  	move.w	8(a0),d2
0000F1AE 3628 000C                  	move.w	$C(a0),d3
0000F1B2 5142                       	subi.w	#8,d2
0000F1B4 7A00                       	moveq	#0,d5
0000F1B6 1A28 0016                  	move.b	$16(a0),d5
0000F1BA 5705                       	subq.b	#3,d5
0000F1BC 9645                       	sub.w	d5,d3
0000F1BE 0C28 004D 0004             	cmpi.b	#$4D,4(a0)
0000F1C4 6600                       	bne.s	RM1
0000F1C6 0643 000C                  	addi.w	#$C,d3
0000F1CA 7A0A                       	moveq	#$A,d5
0000F1CC                            RM1:
0000F1CC 323C 0006                  	move.w	#6,d1
0000F1D0 3C3C 000C                  	move.w	#$C,d6
0000F1D4 383C 0010                  	move.w	#$10,d4
0000F1D8 DA45                       	add.w	d5,d5
0000F1DA                            
0000F1DA                            loc_17112:
0000F1DA 4A54                       	tst.w	(a4)
0000F1DC 6600 0000                  	bne.w	loc_1715C
0000F1E0 3011                       	move.w	(a1),d0
0000F1E2 9041                       	sub.w	d1,d0
0000F1E4 9042                       	sub.w	d2,d0
0000F1E6 6400                       	bcc.s	loc_1712A
0000F1E8 D046                       	add.w	d6,d0
0000F1EA 6500                       	bcs.s	loc_17130
0000F1EC 6000 0000                  	bra.w	loc_1715C
0000F1F0                            ; ===========================================================================
0000F1F0                            
0000F1F0                            loc_1712A:
0000F1F0 B044                       	cmp.w	d4,d0
0000F1F2 6200 0000                  	bhi.w	loc_1715C
0000F1F6                            
0000F1F6                            loc_17130:
0000F1F6 3029 0002                  	move.w	2(a1),d0
0000F1FA 9041                       	sub.w	d1,d0
0000F1FC 9043                       	sub.w	d3,d0
0000F1FE 6400                       	bcc.s	loc_17142
0000F200 D046                       	add.w	d6,d0
0000F202 6500                       	bcs.s	loc_17148
0000F204 6000 0000                  	bra.w	loc_1715C
0000F208                            ; ===========================================================================
0000F208                            
0000F208                            loc_17142:
0000F208 B045                       	cmp.w	d5,d0
0000F20A 6200 0000                  	bhi.w	loc_1715C
0000F20E                            
0000F20E                            loc_17148:
0000F20E 38BC 0604                  	move.w	#$604,(a4)
0000F212 6100                       	bsr.s	loc_17168
0000F214 47F8 8710                  	lea	(Ring_consumption_table+2).w,a3
0000F218                            
0000F218                            loc_17152:
0000F218 4A5B                       	tst.w	(a3)+
0000F21A 66FC                       	bne.s	loc_17152
0000F21C 370C                       	move.w	a4,-(a3)
0000F21E 5278 870E                  	addq.w	#1,(Ring_consumption_table).w
0000F222                            
0000F222                            loc_1715C:
0000F222 5849                       	addq.w	#4,a1
0000F224 544C                       	addq.w	#2,a4
0000F226 B5C9                       	cmpa.l	a1,a2
0000F228 6600 FFB0                  	bne.w	loc_17112
0000F22C                            
0000F22C                            return_17166:
0000F22C 4E75                       	rts
0000F22E                            ; ===========================================================================
0000F22E                            
0000F22E                            loc_17168:
0000F22E 5378 870A                  	subq.w	#1,(Perfect_rings_left).w
0000F232 6000 BCAE                  	bra.w	CollectRing
0000F236                            ; ===========================================================================
0000F236                            
0000F236                            BuildRings:
0000F236 2078 8700                  	movea.l	(Ring_start_addr_ROM).w,a0
0000F23A 2E38 8704                  	move.l	(Ring_end_addr_ROM).w,d7
0000F23E 9E88                       	sub.l	a0,d7
0000F240 6600                       	bne.s	loc_17186
0000F242 4E75                       	rts
0000F244                            ; ===========================================================================
0000F244                            
0000F244                            loc_17186:
0000F244 3878 8708                  	movea.w	(Ring_start_addr_RAM).w,a4
0000F248 47F8 F700                  	lea	($FFFFF700).w,a3
0000F24C                            
0000F24C                            loc_1718A:
0000F24C 4A5C                       	tst.w	(a4)+
0000F24E 6B00 0000                  	bmi.w	loc_171EC
0000F252 3610                       	move.w	(a0),d3
0000F254 9653                       	sub.w	(a3),d3
0000F256 0643 0080                  	addi.w	#$80,d3
0000F25A 3428 0002                  	move.w	2(a0),d2
0000F25E 946B 0004                  	sub.w	4(a3),d2
0000F262 0242 07FF                  	andi.w	#$7FF,d2
0000F266 5042                       	addi.w	#8,d2
0000F268 6B00                       	bmi.s	loc_171EC
0000F26A 0C42 00F0                  	cmpi.w	#$F0,d2
0000F26E 6C00                       	bge.s	loc_171EC
0000F270 0642 0078                  	addi.w	#$78,d2
0000F274 43F9 0000 B23A             	lea	(Map_Obj25).l,a1
0000F27A 7200                       	moveq	#0,d1
0000F27C 122C FFFF                  	move.b	-1(a4),d1
0000F280 6600                       	bne.s	loc_171C8
0000F282 1238 FEC3                  	move.b	($FFFFFEC3).w,d1
0000F286                            
0000F286                            loc_171C8:
0000F286 D241                       	add.w	d1,d1
0000F288 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000F28C 7200                       	moveq	#$00,d1
0000F28E 1219                       	move.b	(a1)+,d1
0000F290 5301                       	subq.b	#1,d1
0000F292 6B00                       	bmi.s	loc_171EC
0000F294 1019                       	move.b	(a1)+,d0
0000F296 4880                       	ext.w	d0
0000F298 D042                       	add.w	d2,d0
0000F29A 34C0                       	move.w	d0,(a2)+
0000F29C 14D9                       	move.b	(a1)+,(a2)+
0000F29E 5205                       	addq.b	#1,d5
0000F2A0 14C5                       	move.b	d5,(a2)+
0000F2A2 1019                       	move.b	(a1)+,d0
0000F2A4 E148                       	lsl.w	#8,d0
0000F2A6 1019                       	move.b	(a1)+,d0
0000F2A8 0640 26BA                  	addi.w	#($2000+ringart),d0
0000F2AC 34C0                       	move.w	d0,(a2)+
0000F2AE 1019                       	move.b	(a1)+,d0
0000F2B0 4880                       	ext.w	d0
0000F2B2 D043                       	add.w	d3,d0
0000F2B4 34C0                       	move.w	d0,(a2)+
0000F2B6                            
0000F2B6                            loc_171EC:
0000F2B6 5848                       	addq.w	#4,a0
0000F2B8 5947                       	subq.w	#4,d7
0000F2BA 6600 FF90                  	bne.w	loc_1718A
0000F2BE 4E75                       	rts
0000F2C0                            ; ===========================================================================
0000F2C0                            
0000F2C0                            RingsManager_Setup:
0000F2C0 43F8 8300                  	lea	(Ring_Positions).w,a1
0000F2C4 7000                       	moveq	#0,d0
0000F2C6 323C 00FF                  	move.w	#Rings_Space/4-1,d1
0000F2CA                            
0000F2CA                            loc_172AE:				; CODE XREF: h+33Cj
0000F2CA 22C0                       	move.l	d0,(a1)+
0000F2CC 51C9 FFFC                  	dbf	d1,loc_172AE
0000F2D0                            
0000F2D0                            	; d0 = 0
0000F2D0 43F8 870E                  	lea	(Ring_consumption_table).w,a1
0000F2D4 323C 001F                  	move.w	#$1F,d1
0000F2D8                            RMBack1:
0000F2D8 22C0                       	move.l	d0,(a1)+
0000F2DA 51C9 FFFC                  	dbf	d1,RMBack1
0000F2DE                            
0000F2DE 7A00                       	moveq	#0,d5
0000F2E0 7000                       	moveq	#0,d0
0000F2E2 3038 FE10                  	move.w	($FFFFFE10).w,d0
0000F2E6 ED08                       	lsl.b	#6,d0
0000F2E8 E848                       	lsr.w	#4,d0
0000F2EA 43F9 0000 0000             	lea	(RingPos_Index).l,a1
0000F2F0 3031 0000                  	move.w	(a1,d0.w),d0
0000F2F4 43F1 0000                  	lea	(a1,d0.w),a1
0000F2F8 21C9 8700                  	move.l	a1,(Ring_start_addr_ROM).w
0000F2FC 5849                       	addq.w	#4,a1
0000F2FE 7A00                       	moveq	#0,d5
0000F300 303C 01FE                  	move.w	#(Max_Rings-1),d0	
0000F304                            	
0000F304                            RMBack2:
0000F304 4A99                       	tst.l	(a1)+
0000F306 6B00                       	bmi.s	RM2
0000F308 5245                       	addq.w	#1,d5
0000F30A 51C8 FFF8                  	dbf	d0,RMBack2
0000F30E                            RM2:
0000F30E 31C5 870A                  	move.w	d5,(Perfect_rings_left).w
0000F312 4E75                       	rts
0000F314                            ; ===========================================================================
0000F314                            
0000F314                            ; ===========================================================================
0000F314                            ; ---------------------------------------------------------------------------
0000F314                            ; Object 41 - springs
0000F314                            ; ---------------------------------------------------------------------------
0000F314                            
0000F314                            Obj41:					; XREF: Obj_Index
0000F314 7000                       		moveq	#0,d0
0000F316 1028 0024                  		move.b	$24(a0),d0
0000F31A 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000F31E 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000F322 6100 F60C                  		bsr.w	DisplaySprite
0000F326 3028 0008                  		move.w	8(a0),d0
0000F32A 0240 FF80                  		andi.w	#$FF80,d0
0000F32E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F332 0441 0080                  		subi.w	#$80,d1
0000F336 0241 FF80                  		andi.w	#$FF80,d1
0000F33A 9041                       		sub.w	d1,d0
0000F33C 0C40 0280                  		cmpi.w	#$280,d0
0000F340 6300                       		bls.s	Obj41_NoDel
0000F342 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000F346 6700 F638                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000F34A 3440                       		movea.w	d0,a2	; load address into a2
0000F34C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000F350 6000 F62E                  		bra.w	DeleteObject	; and delete object
0000F354                            
0000F354                            Obj41_NoDel:
0000F354 4E75                       		rts	
0000F356                            ; ===========================================================================
0000F356 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000F358 0000                       		dc.w Obj41_Up-Obj41_Index
0000F35A 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000F35C 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000F35E 0000                       		dc.w Obj41_LR-Obj41_Index
0000F360 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000F362 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000F364 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000F366 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000F368 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000F36A                            
0000F36A F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000F36C F600                       		dc.w -$A00		; power	of yellow spring
0000F36E                            ; ===========================================================================
0000F36E                            
0000F36E                            Obj41_Main:				; XREF: Obj41_Index
0000F36E 5428 0024                  		addq.b	#2,$24(a0)
0000F372 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000F37A 317C 0523 0002             		move.w	#$523,2(a0)
0000F380 0028 0004 0001             		ori.b	#4,1(a0)
0000F386 117C 0010 0019             		move.b	#$10,$19(a0)
0000F38C 117C 0004 0018             		move.b	#4,$18(a0)
0000F392 1028 0028                  		move.b	$28(a0),d0
0000F396 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000F39A 6700                       		beq.s	loc_DB54	; if not, branch
0000F39C 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000F3A2 117C 0001 001C             		move.b	#1,$1C(a0)
0000F3A8 117C 0003 001A             		move.b	#3,$1A(a0)
0000F3AE 317C 0533 0002             		move.w	#$533,2(a0)
0000F3B4 117C 0008 0019             		move.b	#8,$19(a0)
0000F3BA                            
0000F3BA                            loc_DB54:
0000F3BA 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000F3BE 6700                       		beq.s	loc_DB66	; if not, branch
0000F3C0 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000F3C6 08E8 0001 0022             		bset	#1,$22(a0)
0000F3CC                            
0000F3CC                            loc_DB66:
0000F3CC 0800 0001                  		btst	#1,d0
0000F3D0 6700                       		beq.s	loc_DB72
0000F3D2 08E8 0005 0002             		bset	#5,2(a0)
0000F3D8                            
0000F3D8                            loc_DB72:
0000F3D8 0240 000F                  		andi.w	#$F,d0
0000F3DC 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000F3E2 4E75                       		rts	
0000F3E4                            ; ===========================================================================
0000F3E4                            
0000F3E4                            Obj41_Up:				; XREF: Obj41_Index
0000F3E4 323C 001B                  		move.w	#$1B,d1
0000F3E8 343C 0008                  		move.w	#8,d2
0000F3EC 363C 0010                  		move.w	#$10,d3
0000F3F0 3828 0008                  		move.w	8(a0),d4
0000F3F4 6100 0000                  		bsr.w	SolidObject
0000F3F8 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000F3FC 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000F3FE 4E75                       		rts	
0000F400                            ; ===========================================================================
0000F400                            
0000F400                            Obj41_BounceUp:				; XREF: Obj41_Up
0000F400 5428 0024                  		addq.b	#2,$24(a0)
0000F404 5069 000C                  		addq.w	#8,$C(a1)
0000F408 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000F40E 08E9 0001 0022             		bset	#1,$22(a1)
0000F414 08A9 0003 0022             		bclr	#3,$22(a1)
0000F41A 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000F420 137C 0002 0024             		move.b	#2,$24(a1)
0000F426 08A8 0003 0022             		bclr	#3,$22(a0)
0000F42C 4228 0025                  		clr.b	$25(a0)
0000F430 303C 00CC                  		move.w	#$CC,d0
0000F434 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play spring sound
0000F43A                            
0000F43A                            Obj41_AniUp:				; XREF: Obj41_Index
0000F43A 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F440 6000 C54E                  		bra.w	AnimateSprite
0000F444                            ; ===========================================================================
0000F444                            
0000F444                            Obj41_ResetUp:				; XREF: Obj41_Index
0000F444 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F44A 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000F44E 4E75                       		rts	
0000F450                            ; ===========================================================================
0000F450                            
0000F450                            Obj41_LR:				; XREF: Obj41_Index
0000F450 323C 0013                  		move.w	#$13,d1
0000F454 343C 000E                  		move.w	#$E,d2
0000F458 363C 000F                  		move.w	#$F,d3
0000F45C 3828 0008                  		move.w	8(a0),d4
0000F460 6100 0000                  		bsr.w	SolidObject
0000F464 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F46A 6600                       		bne.s	loc_DC0C
0000F46C 117C 0008 0024             		move.b	#8,$24(a0)
0000F472                            
0000F472                            loc_DC0C:
0000F472 0828 0005 0022             		btst	#5,$22(a0)
0000F478 6600                       		bne.s	Obj41_BounceLR
0000F47A 4E75                       		rts	
0000F47C                            ; ===========================================================================
0000F47C                            
0000F47C                            Obj41_BounceLR:				; XREF: Obj41_LR
0000F47C 5428 0024                  		addq.b	#2,$24(a0)
0000F480 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000F486 5069 0008                  		addq.w	#8,8(a1)
0000F48A 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000F490 6600                       		bne.s	loc_DC36	; if yes, branch
0000F492 0469 0010 0008             		subi.w	#$10,8(a1)
0000F498 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000F49C                            
0000F49C                            loc_DC36:
0000F49C 337C 000F 003E             		move.w	#$F,$3E(a1)
0000F4A2 3369 0010 0020             		move.w	$10(a1),$20(a1)
0000F4A8 0869 0000 0022             		bchg	#0,$22(a1)
0000F4AE 0829 0002 0022             		btst	#2,$22(a1)
0000F4B4 6600                       		bne.s	loc_DC56
0000F4B6 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000F4BC                            
0000F4BC                            loc_DC56:
0000F4BC 08A8 0005 0022             		bclr	#5,$22(a0)
0000F4C2 08A9 0005 0022             		bclr	#5,$22(a1)
0000F4C8 303C 00CC                  		move.w	#$CC,d0
0000F4CC 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play spring sound
0000F4D2                            
0000F4D2                            Obj41_AniLR:				; XREF: Obj41_Index
0000F4D2 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F4D8 6000 C4B6                  		bra.w	AnimateSprite
0000F4DC                            ; ===========================================================================
0000F4DC                            
0000F4DC                            Obj41_ResetLR:				; XREF: Obj41_Index
0000F4DC 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000F4E2 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000F4E6 4E75                       		rts	
0000F4E8                            ; ===========================================================================
0000F4E8                            
0000F4E8                            Obj41_Dwn:				; XREF: Obj41_Index
0000F4E8 323C 001B                  		move.w	#$1B,d1
0000F4EC 343C 0008                  		move.w	#8,d2
0000F4F0 363C 0010                  		move.w	#$10,d3
0000F4F4 3828 0008                  		move.w	8(a0),d4
0000F4F8 6100 0000                  		bsr.w	SolidObject
0000F4FC 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F502 6600                       		bne.s	loc_DCA4
0000F504 117C 000E 0024             		move.b	#$E,$24(a0)
0000F50A                            
0000F50A                            loc_DCA4:
0000F50A 4A28 0025                  		tst.b	$25(a0)
0000F50E 6600                       		bne.s	locret_DCAE
0000F510 4A44                       		tst.w	d4
0000F512 6B00                       		bmi.s	Obj41_BounceDwn
0000F514                            
0000F514                            locret_DCAE:
0000F514 4E75                       		rts	
0000F516                            ; ===========================================================================
0000F516                            
0000F516                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000F516 5428 0024                  		addq.b	#2,$24(a0)
0000F51A 5169 000C                  		subq.w	#8,$C(a1)
0000F51E 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000F524 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000F528 08E9 0001 0022             		bset	#1,$22(a1)
0000F52E 08A9 0003 0022             		bclr	#3,$22(a1)
0000F534 137C 0002 0024             		move.b	#2,$24(a1)
0000F53A 08A8 0003 0022             		bclr	#3,$22(a0)
0000F540 4228 0025                  		clr.b	$25(a0)
0000F544 303C 00CC                  		move.w	#$CC,d0
0000F548 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play spring sound
0000F54E                            
0000F54E                            Obj41_AniDwn:				; XREF: Obj41_Index
0000F54E 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F554 6000 C43A                  		bra.w	AnimateSprite
0000F558                            ; ===========================================================================
0000F558                            
0000F558                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000F558 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F55E 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000F562 4E75                       		rts	
0000F564                            ; ===========================================================================
0000F564                            Ani_obj41:
0000F564                            	include "_anim\obj41.asm"
0000F564                            ; ---------------------------------------------------------------------------
0000F564                            ; Animation script - springs
0000F564                            ; ---------------------------------------------------------------------------
0000F564 0000                       		dc.w byte_DD02-Ani_obj41
0000F566 0000                       		dc.w byte_DD0E-Ani_obj41
0000F568 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000F574 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000F580                            		even
0000F580                            		even
0000F580                            
0000F580                            ; ---------------------------------------------------------------------------
0000F580                            ; Sprite mappings - springs
0000F580                            ; ---------------------------------------------------------------------------
0000F580                            Map_obj41:
0000F580                            	include "_maps\obj41.asm"
0000F580                            ; ---------------------------------------------------------------------------
0000F580                            ; Sprite mappings - springs
0000F580                            ; ---------------------------------------------------------------------------
0000F580 0000                       		dc.w byte_DD26-Map_obj41
0000F582 0000                       		dc.w byte_DD31-Map_obj41
0000F584 0000                       		dc.w byte_DD37-Map_obj41
0000F586 0000                       		dc.w byte_DD47-Map_obj41
0000F588 0000                       		dc.w byte_DD4D-Map_obj41
0000F58A 0000                       		dc.w byte_DD53-Map_obj41
0000F58C 02                         byte_DD26:	dc.b 2
0000F58D F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000F592 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000F597 01                         byte_DD31:	dc.b 1
0000F598 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000F59D 03                         byte_DD37:	dc.b 3
0000F59E E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000F5A3 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F5A8 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000F5AD 01                         byte_DD47:	dc.b 1
0000F5AE F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000F5B3 01                         byte_DD4D:	dc.b 1
0000F5B4 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000F5B9 04                         byte_DD53:	dc.b 4
0000F5BA F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000F5BF F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000F5C4 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000F5C9 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000F5CE                            		even
0000F5CE                            		even
0000F5CE                            
0000F5CE                            ; ===========================================================================
0000F5CE                            ; ---------------------------------------------------------------------------
0000F5CE                            ; Object 42 - Newtron enemy (GHZ)
0000F5CE                            ; ---------------------------------------------------------------------------
0000F5CE                            
0000F5CE                            Obj42:					; XREF: Obj_Index
0000F5CE 7000                       		moveq	#0,d0
0000F5D0 1028 0024                  		move.b	$24(a0),d0
0000F5D4 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000F5D8 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000F5DC                            ; ===========================================================================
0000F5DC 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000F5DE 0000                       		dc.w Obj42_Action-Obj42_Index
0000F5E0 0000                       		dc.w Obj42_Delete-Obj42_Index
0000F5E2                            ; ===========================================================================
0000F5E2                            
0000F5E2                            Obj42_Main:				; XREF: Obj42_Index
0000F5E2 5428 0024                  		addq.b	#2,$24(a0)
0000F5E6 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000F5EE 317C 049B 0002             		move.w	#$49B,2(a0)
0000F5F4 117C 0004 0001             		move.b	#4,1(a0)
0000F5FA 117C 0004 0018             		move.b	#4,$18(a0)
0000F600 117C 0014 0019             		move.b	#$14,$19(a0)
0000F606 117C 0010 0016             		move.b	#$10,$16(a0)
0000F60C 117C 0008 0017             		move.b	#8,$17(a0)
0000F612                            
0000F612                            Obj42_Action:				; XREF: Obj42_Index
0000F612 7000                       		moveq	#0,d0
0000F614 1028 0025                  		move.b	$25(a0),d0
0000F618 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000F61C 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000F620 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000F626 6100 C368                  		bsr.w	AnimateSprite
0000F62A 6000 0000                  		bra.w	MarkObjGone
0000F62E                            ; ===========================================================================
0000F62E 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000F630 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000F632 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000F634 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000F636 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000F638                            ; ===========================================================================
0000F638                            
0000F638                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000F638 08E8 0000 0022             		bset	#0,$22(a0)
0000F63E 3038 D008                  		move.w	($FFFFD008).w,d0
0000F642 9068 0008                  		sub.w	8(a0),d0
0000F646 6400                       		bcc.s	loc_DDEA
0000F648 4440                       		neg.w	d0
0000F64A 08A8 0000 0022             		bclr	#0,$22(a0)
0000F650                            
0000F650                            loc_DDEA:
0000F650 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000F654 6400                       		bcc.s	locret_DE12	; if not, branch
0000F656 5428 0025                  		addq.b	#2,$25(a0)
0000F65A 117C 0001 001C             		move.b	#1,$1C(a0)
0000F660 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000F664 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000F666 317C 249B 0002             		move.w	#$249B,2(a0)
0000F66C 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000F672 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000F678                            
0000F678                            locret_DE12:
0000F678 4E75                       		rts	
0000F67A                            ; ===========================================================================
0000F67A                            
0000F67A                            Obj42_Type00:				; XREF: Obj42_Index2
0000F67A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000F680 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000F682 08E8 0000 0022             		bset	#0,$22(a0)
0000F688 3038 D008                  		move.w	($FFFFD008).w,d0
0000F68C 9068 0008                  		sub.w	8(a0),d0
0000F690 6400                       		bcc.s	locret_DE32
0000F692 08A8 0000 0022             		bclr	#0,$22(a0)
0000F698                            
0000F698                            locret_DE32:
0000F698 4E75                       		rts	
0000F69A                            ; ===========================================================================
0000F69A                            
0000F69A                            Obj42_Fall:				; XREF: Obj42_Type00
0000F69A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F6A0 6600                       		bne.s	loc_DE42
0000F6A2 117C 000C 0020             		move.b	#$C,$20(a0)
0000F6A8                            
0000F6A8                            loc_DE42:
0000F6A8 6100 F24C                  		bsr.w	ObjectFall
0000F6AC 6100 0000                  		bsr.w	ObjHitFloor
0000F6B0 4A41                       		tst.w	d1		; has newtron hit the floor?
0000F6B2 6A00                       		bpl.s	locret_DE86	; if not, branch
0000F6B4 D368 000C                  		add.w	d1,$C(a0)
0000F6B8 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000F6BE 5428 0025                  		addq.b	#2,$25(a0)
0000F6C2 117C 0002 001C             		move.b	#2,$1C(a0)
0000F6C8 0828 0005 0002             		btst	#5,2(a0)
0000F6CE 6700                       		beq.s	Obj42_Move
0000F6D0 5228 001C                  		addq.b	#1,$1C(a0)
0000F6D4                            
0000F6D4                            Obj42_Move:
0000F6D4 117C 000D 0020             		move.b	#$D,$20(a0)
0000F6DA 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000F6E0 0828 0000 0022             		btst	#0,$22(a0)
0000F6E6 6600                       		bne.s	locret_DE86
0000F6E8 4468 0010                  		neg.w	$10(a0)
0000F6EC                            
0000F6EC                            locret_DE86:
0000F6EC 4E75                       		rts	
0000F6EE                            ; ===========================================================================
0000F6EE                            
0000F6EE                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000F6EE 6100 F226                  		bsr.w	SpeedToPos
0000F6F2 6100 0000                  		bsr.w	ObjHitFloor
0000F6F6 0C41 FFF8                  		cmpi.w	#-8,d1
0000F6FA 6D00                       		blt.s	loc_DEA2
0000F6FC 0C41 000C                  		cmpi.w	#$C,d1
0000F700 6C00                       		bge.s	loc_DEA2
0000F702 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000F706 4E75                       		rts	
0000F708                            ; ===========================================================================
0000F708                            
0000F708                            loc_DEA2:
0000F708 5428 0025                  		addq.b	#2,$25(a0)
0000F70C 4E75                       		rts	
0000F70E                            ; ===========================================================================
0000F70E                            
0000F70E                            Obj42_Speed:				; XREF: Obj42_Index2
0000F70E 6100 F206                  		bsr.w	SpeedToPos
0000F712 4E75                       		rts	
0000F714                            ; ===========================================================================
0000F714                            
0000F714                            Obj42_Type01:				; XREF: Obj42_Index2
0000F714 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F71A 6600                       		bne.s	Obj42_FireMissile
0000F71C 117C 000C 0020             		move.b	#$C,$20(a0)
0000F722                            
0000F722                            Obj42_FireMissile:
0000F722 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000F728 6600                       		bne.s	locret_DF14
0000F72A 4A28 0032                  		tst.b	$32(a0)
0000F72E 6600                       		bne.s	locret_DF14
0000F730 117C 0001 0032             		move.b	#1,$32(a0)
0000F736 6100 F94E                  		bsr.w	SingleObjLoad
0000F73A 6600                       		bne.s	locret_DF14
0000F73C 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000F740 3368 0008 0008             		move.w	8(a0),8(a1)
0000F746 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F74C 5169 000C                  		subq.w	#8,$C(a1)
0000F750 337C 0200 0010             		move.w	#$200,$10(a1)
0000F756 303C 0014                  		move.w	#$14,d0
0000F75A 0828 0000 0022             		btst	#0,$22(a0)
0000F760 6600                       		bne.s	loc_DF04
0000F762 4440                       		neg.w	d0
0000F764 4469 0010                  		neg.w	$10(a1)
0000F768                            
0000F768                            loc_DF04:
0000F768 D169 0008                  		add.w	d0,8(a1)
0000F76C 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F772 137C 0001 0028             		move.b	#1,$28(a1)
0000F778                            
0000F778                            locret_DF14:
0000F778 4E75                       		rts	
0000F77A                            ; ===========================================================================
0000F77A                            
0000F77A                            Obj42_Delete:				; XREF: Obj42_Index
0000F77A 6000 F204                  		bra.w	DeleteObject
0000F77E                            ; ===========================================================================
0000F77E                            Ani_obj42:
0000F77E                            	include "_anim\obj42.asm"
0000F77E                            ; ---------------------------------------------------------------------------
0000F77E                            ; Animation script - Newtron enemy
0000F77E                            ; ---------------------------------------------------------------------------
0000F77E 0000                       		dc.w byte_DF24-Ani_obj42
0000F780 0000                       		dc.w byte_DF28-Ani_obj42
0000F782 0000                       		dc.w byte_DF30-Ani_obj42
0000F784 0000                       		dc.w byte_DF34-Ani_obj42
0000F786 0000                       		dc.w byte_DF38-Ani_obj42
0000F788 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000F78C 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000F794 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000F798 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000F79C 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000F7A6                            		even
0000F7A6                            		even
0000F7A6                            
0000F7A6                            ; ---------------------------------------------------------------------------
0000F7A6                            ; Sprite mappings - Newtron enemy (GHZ)
0000F7A6                            ; ---------------------------------------------------------------------------
0000F7A6                            Map_obj42:
0000F7A6                            	include "_maps\obj42.asm"
0000F7A6                            ; ---------------------------------------------------------------------------
0000F7A6                            ; Sprite mappings - Newtron enemy (GHZ)
0000F7A6                            ; ---------------------------------------------------------------------------
0000F7A6 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000F7AA 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000F7AE 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000F7B2 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000F7B6 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000F7BA 0000                       		dc.w byte_DFF8-Map_obj42
0000F7BC 03                         byte_DF58:	dc.b 3
0000F7BD EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000F7C2 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000F7C7 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000F7CC 03                         byte_DF68:	dc.b 3
0000F7CD EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000F7D2 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F7D7 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F7DC 03                         byte_DF78:	dc.b 3
0000F7DD EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000F7E2 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F7E7 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F7EC 04                         byte_DF88:	dc.b 4
0000F7ED EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000F7F2 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F7F7 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000F7FC 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000F801 03                         byte_DF9D:	dc.b 3
0000F802 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000F807 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000F80C 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000F811 02                         byte_DFAD:	dc.b 2
0000F812 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F817 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F81C 03                         byte_DFB8:	dc.b 3
0000F81D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F822 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F827 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000F82C 03                         byte_DFC8:	dc.b 3
0000F82D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F832 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F837 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000F83C 03                         byte_DFD8:	dc.b 3
0000F83D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F842 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F847 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000F84C 03                         byte_DFE8:	dc.b 3
0000F84D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F852 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F857 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000F85C 00                         byte_DFF8:	dc.b 0
0000F85E 00                         		even
0000F85E 00                         		even
0000F85E                            
0000F85E                            ; ===========================================================================
0000F85E                            ; ---------------------------------------------------------------------------
0000F85E                            ; Object 43 - Roller enemy (SYZ)
0000F85E                            ; ---------------------------------------------------------------------------
0000F85E                            
0000F85E                            Obj43:					; XREF: Obj_Index
0000F85E 7000                       		moveq	#0,d0
0000F860 1028 0024                  		move.b	$24(a0),d0
0000F864 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000F868 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000F86C                            ; ===========================================================================
0000F86C 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000F86E 0000                       		dc.w Obj43_Action-Obj43_Index
0000F870                            ; ===========================================================================
0000F870                            
0000F870                            Obj43_Main:				; XREF: Obj43_Index
0000F870 117C 000E 0016             		move.b	#$E,$16(a0)
0000F876 117C 0008 0017             		move.b	#8,$17(a0)
0000F87C 6100 F078                  		bsr.w	ObjectFall
0000F880 6100 0000                  		bsr.w	ObjHitFloor
0000F884 4A41                       		tst.w	d1
0000F886 6A00                       		bpl.s	locret_E052
0000F888 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000F88C 317C 0000 0012             		move.w	#0,$12(a0)
0000F892 5428 0024                  		addq.b	#2,$24(a0)
0000F896 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000F89E 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000F8A4 117C 0004 0001             		move.b	#4,1(a0)
0000F8AA 117C 0004 0018             		move.b	#4,$18(a0)
0000F8B0 117C 0010 0019             		move.b	#$10,$19(a0)
0000F8B6                            
0000F8B6                            locret_E052:
0000F8B6 4E75                       		rts	
0000F8B8                            ; ===========================================================================
0000F8B8                            
0000F8B8                            Obj43_Action:				; XREF: Obj43_Index
0000F8B8 7000                       		moveq	#0,d0
0000F8BA 1028 0025                  		move.b	$25(a0),d0
0000F8BE 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000F8C2 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000F8C6 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000F8CC 6100 C0C2                  		bsr.w	AnimateSprite
0000F8D0 3028 0008                  		move.w	8(a0),d0
0000F8D4 0240 FF80                  		andi.w	#$FF80,d0
0000F8D8 3238 F700                  		move.w	($FFFFF700).w,d1
0000F8DC 0441 0080                  		subi.w	#$80,d1
0000F8E0 0241 FF80                  		andi.w	#$FF80,d1
0000F8E4 9041                       		sub.w	d1,d0
0000F8E6 0C40 0280                  		cmpi.w	#$280,d0
0000F8EA 6E00 0000                  		bgt.w	Obj43_ChkGone
0000F8EE 6000 F040                  		bra.w	DisplaySprite
0000F8F2                            ; ===========================================================================
0000F8F2                            
0000F8F2                            Obj43_ChkGone:				; XREF: Obj43_Action
0000F8F2 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000F8F6 6700                       		beq.s	Obj43_Delete		; if it's zero, don't remember object
0000F8F8 3440                       		movea.w	d0,a2	; load address into a2
0000F8FA 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000F8FE                            
0000F8FE                            Obj43_Delete:
0000F8FE 6000 F080                  		bra.w	DeleteObject
0000F902                            ; ===========================================================================
0000F902 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000F904 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000F906 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000F908 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000F90A                            ; ===========================================================================
0000F90A                            
0000F90A                            Obj43_RollChk:				; XREF: Obj43_Index2
0000F90A 3038 D008                  		move.w	($FFFFD008).w,d0
0000F90E 0440 0100                  		subi.w	#$100,d0
0000F912 6500                       		bcs.s	loc_E0D2
0000F914 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000F918 6500                       		bcs.s	loc_E0D2
0000F91A 5828 0025                  		addq.b	#4,$25(a0)
0000F91E 117C 0002 001C             		move.b	#2,$1C(a0)
0000F924 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000F92A 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000F930                            
0000F930                            loc_E0D2:
0000F930 588F                       		addq.l	#4,sp
0000F932 4E75                       		rts	
0000F934                            ; ===========================================================================
0000F934                            
0000F934                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000F934 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000F93A 6700                       		beq.s	loc_E0F8
0000F93C 5368 0030                  		subq.w	#1,$30(a0)
0000F940 6A00                       		bpl.s	locret_E0F6
0000F942 117C 0001 001C             		move.b	#1,$1C(a0)
0000F948 317C 0700 0010             		move.w	#$700,$10(a0)
0000F94E 117C 008E 0020             		move.b	#$8E,$20(a0)
0000F954                            
0000F954                            locret_E0F6:
0000F954 4E75                       		rts	
0000F956                            ; ===========================================================================
0000F956                            
0000F956                            loc_E0F8:
0000F956 5428 0025                  		addq.b	#2,$25(a0)
0000F95A 4E75                       		rts	
0000F95C                            ; ===========================================================================
0000F95C                            
0000F95C                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000F95C 6100 0000                  		bsr.w	Obj43_Stop
0000F960 6100 EFB4                  		bsr.w	SpeedToPos
0000F964 6100 0000                  		bsr.w	ObjHitFloor
0000F968 0C41 FFF8                  		cmpi.w	#-8,d1
0000F96C 6D00                       		blt.s	Obj43_Jump
0000F96E 0C41 000C                  		cmpi.w	#$C,d1
0000F972 6C00                       		bge.s	Obj43_Jump
0000F974 D368 000C                  		add.w	d1,$C(a0)
0000F978 4E75                       		rts	
0000F97A                            ; ===========================================================================
0000F97A                            
0000F97A                            Obj43_Jump:
0000F97A 5428 0025                  		addq.b	#2,$25(a0)
0000F97E 08E8 0000 0032             		bset	#0,$32(a0)
0000F984 6700                       		beq.s	locret_E12E
0000F986 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000F98C                            
0000F98C                            locret_E12E:
0000F98C 4E75                       		rts	
0000F98E                            ; ===========================================================================
0000F98E                            
0000F98E                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000F98E 6100 EF66                  		bsr.w	ObjectFall
0000F992 4A68 0012                  		tst.w	$12(a0)
0000F996 6B00                       		bmi.s	locret_E150
0000F998 6100 0000                  		bsr.w	ObjHitFloor
0000F99C 4A41                       		tst.w	d1
0000F99E 6A00                       		bpl.s	locret_E150
0000F9A0 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000F9A4 5528 0025                  		subq.b	#2,$25(a0)
0000F9A8 317C 0000 0012             		move.w	#0,$12(a0)
0000F9AE                            
0000F9AE                            locret_E150:
0000F9AE 4E75                       		rts	
0000F9B0                            
0000F9B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9B0                            
0000F9B0                            
0000F9B0                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000F9B0 4A28 0032                  		tst.b	$32(a0)
0000F9B4 6B00                       		bmi.s	locret_E188
0000F9B6 3038 D008                  		move.w	($FFFFD008).w,d0
0000F9BA 0440 0030                  		subi.w	#$30,d0
0000F9BE 9068 0008                  		sub.w	8(a0),d0
0000F9C2 6400                       		bcc.s	locret_E188
0000F9C4 117C 0000 001C             		move.b	#0,$1C(a0)
0000F9CA 117C 000E 0020             		move.b	#$E,$20(a0)
0000F9D0 4268 0010                  		clr.w	$10(a0)
0000F9D4 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000F9DA 117C 0002 0025             		move.b	#2,$25(a0)
0000F9E0 08E8 0007 0032             		bset	#7,$32(a0)
0000F9E6                            
0000F9E6                            locret_E188:
0000F9E6 4E75                       		rts	
0000F9E8                            ; End of function Obj43_Stop
0000F9E8                            
0000F9E8                            ; ===========================================================================
0000F9E8                            Ani_obj43:
0000F9E8                            	include "_anim\obj43.asm"
0000F9E8                            ; ---------------------------------------------------------------------------
0000F9E8                            ; Animation script - Roller enemy
0000F9E8                            ; ---------------------------------------------------------------------------
0000F9E8 0000                       		dc.w byte_E190-Ani_obj43
0000F9EA 0000                       		dc.w byte_E196-Ani_obj43
0000F9EC 0000                       		dc.w byte_E19C-Ani_obj43
0000F9EE 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000F9F4 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000F9FA 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000FA00 00                         		even
0000FA00 00                         		even
0000FA00                            
0000FA00                            ; ---------------------------------------------------------------------------
0000FA00                            ; Sprite mappings - Roller enemy (SYZ)
0000FA00                            ; ---------------------------------------------------------------------------
0000FA00                            Map_obj43:
0000FA00                            	include "_maps\obj43.asm"
0000FA00                            ; ---------------------------------------------------------------------------
0000FA00                            ; Sprite mappings - Roller enemy (SYZ)
0000FA00                            ; ---------------------------------------------------------------------------
0000FA00 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000FA04 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000FA08 0000                       		dc.w byte_E1CE-Map_obj43
0000FA0A 02                         byte_E1AC:	dc.b 2
0000FA0B DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000FA10 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000FA15 02                         byte_E1B7:	dc.b 2
0000FA16 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000FA1B FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000FA20 01                         byte_E1C2:	dc.b 1
0000FA21 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000FA26 01                         byte_E1C8:	dc.b 1
0000FA27 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000FA2C 01                         byte_E1CE:	dc.b 1
0000FA2D F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000FA32                            		even
0000FA32                            		even
0000FA32                            
0000FA32                            ; ===========================================================================
0000FA32                            ; ---------------------------------------------------------------------------
0000FA32                            ; Object 44 - walls (GHZ)
0000FA32                            ; ---------------------------------------------------------------------------
0000FA32                            
0000FA32                            Obj44:					; XREF: Obj_Index
0000FA32 7000                       		moveq	#0,d0
0000FA34 1028 0024                  		move.b	$24(a0),d0
0000FA38 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000FA3C 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000FA40                            ; ===========================================================================
0000FA40 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000FA42 0000                       		dc.w Obj44_Solid-Obj44_Index
0000FA44 0000                       		dc.w Obj44_Display-Obj44_Index
0000FA46                            ; ===========================================================================
0000FA46                            
0000FA46                            Obj44_Main:				; XREF: Obj44_Index
0000FA46 5428 0024                  		addq.b	#2,$24(a0)
0000FA4A 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000FA52 317C 434C 0002             		move.w	#$434C,2(a0)
0000FA58 0028 0004 0001             		ori.b	#4,1(a0)
0000FA5E 117C 0008 0019             		move.b	#8,$19(a0)
0000FA64 117C 0006 0018             		move.b	#6,$18(a0)
0000FA6A 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000FA70 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000FA76 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000FA78 5428 0024                  		addq.b	#2,$24(a0)
0000FA7C 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000FA7E                            ; ===========================================================================
0000FA7E                            
0000FA7E                            Obj44_Solid:				; XREF: Obj44_Index
0000FA7E 323C 0013                  		move.w	#$13,d1
0000FA82 343C 0028                  		move.w	#$28,d2
0000FA86 6100 A332                  		bsr.w	Obj44_SolidWall
0000FA8A                            
0000FA8A                            Obj44_Display:				; XREF: Obj44_Index
0000FA8A 6100 EEA4                  		bsr.w	DisplaySprite
0000FA8E 3028 0008                  		move.w	8(a0),d0
0000FA92 0240 FF80                  		andi.w	#$FF80,d0
0000FA96 3238 F700                  		move.w	($FFFFF700).w,d1
0000FA9A 0441 0080                  		subi.w	#$80,d1
0000FA9E 0241 FF80                  		andi.w	#$FF80,d1
0000FAA2 9041                       		sub.w	d1,d0
0000FAA4 0C40 0280                  		cmpi.w	#$280,d0
0000FAA8 6300                       		bls.s	Obj44_NoDel
0000FAAA 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000FAAE 6700 EED0                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000FAB2 3440                       		movea.w	d0,a2	; load address into a2
0000FAB4 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000FAB8 6000 EEC6                  		bra.w	DeleteObject	; and delete object
0000FABC                            
0000FABC                            Obj44_NoDel:
0000FABC 4E75                       		rts	
0000FABE                            ; ===========================================================================
0000FABE                            ; ---------------------------------------------------------------------------
0000FABE                            ; Sprite mappings - walls (GHZ)
0000FABE                            ; ---------------------------------------------------------------------------
0000FABE                            Map_obj44:
0000FABE                            	include "_maps\obj44.asm"
0000FABE                            ; ---------------------------------------------------------------------------
0000FABE                            ; Sprite mappings - walls (GHZ)
0000FABE                            ; ---------------------------------------------------------------------------
0000FABE 0000                       		dc.w byte_E256-Map_obj44
0000FAC0 0000                       		dc.w byte_E26B-Map_obj44
0000FAC2 0000                       		dc.w byte_E280-Map_obj44
0000FAC4 04                         byte_E256:	dc.b 4
0000FAC5 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000FACA F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FACF 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000FAD4 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000FAD9 04                         byte_E26B:	dc.b 4
0000FADA E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000FADF F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FAE4 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000FAE9 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000FAEE 04                         byte_E280:	dc.b 4
0000FAEF E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000FAF4 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000FAF9 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000FAFE 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000FB04 00                         		even
0000FB04 00                         		even
0000FB04                            
0000FB04                            ; ===========================================================================
0000FB04                            ; ---------------------------------------------------------------------------
0000FB04                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000FB04                            ; ---------------------------------------------------------------------------
0000FB04                            
0000FB04                            Obj13:					; XREF: Obj_Index
0000FB04 7000                       		moveq	#0,d0
0000FB06 1028 0024                  		move.b	$24(a0),d0
0000FB0A 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000FB0E 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000FB12 6000 0000                  		bra.w	Obj14_ChkDel
0000FB16                            ; ===========================================================================
0000FB16 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000FB18 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000FB1A                            ; ---------------------------------------------------------------------------
0000FB1A                            ;
0000FB1A                            ; Lava ball production rates
0000FB1A                            ;
0000FB1A 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000FB20                            ; ===========================================================================
0000FB20                            
0000FB20                            Obj13_Main:				; XREF: Obj13_Index
0000FB20 5428 0024                  		addq.b	#2,$24(a0)
0000FB24 1028 0028                  		move.b	$28(a0),d0
0000FB28 E848                       		lsr.w	#4,d0
0000FB2A 0240 000F                  		andi.w	#$F,d0
0000FB2E 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000FB34 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000FB3A 0228 000F 0028             		andi.b	#$F,$28(a0)
0000FB40                            
0000FB40                            Obj13_MakeLava:				; XREF: Obj13_Index
0000FB40 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000FB44 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000FB46 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000FB4C 6100 F1A8                  		bsr.w	ChkObjOnScreen
0000FB50 6600                       		bne.s	locret_E302
0000FB52 6100 F532                  		bsr.w	SingleObjLoad
0000FB56 6600                       		bne.s	locret_E302
0000FB58 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000FB5C 3368 0008 0008             		move.w	8(a0),8(a1)
0000FB62 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FB68 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FB6E                            
0000FB6E                            locret_E302:
0000FB6E 4E75                       		rts	
0000FB70                            ; ===========================================================================
0000FB70                            ; ---------------------------------------------------------------------------
0000FB70                            ; Object 14 - lava balls (MZ, SLZ)
0000FB70                            ; ---------------------------------------------------------------------------
0000FB70                            
0000FB70                            Obj14:					; XREF: Obj_Index
0000FB70 7000                       		moveq	#0,d0
0000FB72 1028 0024                  		move.b	$24(a0),d0
0000FB76 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000FB7A 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000FB7E 6000 EDB0                  		bra.w	DisplaySprite
0000FB82                            ; ===========================================================================
0000FB82 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000FB84 0000                       		dc.w Obj14_Action-Obj14_Index
0000FB86 0000                       		dc.w Obj14_Delete-Obj14_Index
0000FB88                            
0000FB88 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000FB92 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000FB9A                            ; ===========================================================================
0000FB9A                            
0000FB9A                            Obj14_Main:				; XREF: Obj14_Index
0000FB9A 5428 0024                  		addq.b	#2,$24(a0)
0000FB9E 117C 0008 0016             		move.b	#8,$16(a0)
0000FBA4 117C 0008 0017             		move.b	#8,$17(a0)
0000FBAA 217C 0000 C62A 0004        		move.l	#Map_obj14,4(a0)
0000FBB2 317C 0345 0002             		move.w	#$345,2(a0)
0000FBB8 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000FBBE 6600                       		bne.s	loc_E35A
0000FBC0 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000FBC6                            
0000FBC6                            loc_E35A:
0000FBC6 117C 0004 0001             		move.b	#4,1(a0)
0000FBCC 117C 0003 0018             		move.b	#3,$18(a0)
0000FBD2 117C 008B 0020             		move.b	#$8B,$20(a0)
0000FBD8 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FBDE 4A28 0029                  		tst.b	$29(a0)
0000FBE2 6700                       		beq.s	Obj14_SetSpeed
0000FBE4 5428 0018                  		addq.b	#2,$18(a0)
0000FBE8                            
0000FBE8                            Obj14_SetSpeed:
0000FBE8 7000                       		moveq	#0,d0
0000FBEA 1028 0028                  		move.b	$28(a0),d0
0000FBEE D040                       		add.w	d0,d0
0000FBF0 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000FBF6 117C 0008 0019             		move.b	#8,$19(a0)
0000FBFC 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000FC02 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000FC04 117C 0010 0019             		move.b	#$10,$19(a0)
0000FC0A 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000FC10 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000FC16 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000FC1C                            
0000FC1C                            Obj14_PlaySnd:
0000FC1C 303C 00AE                  		move.w	#$AE,d0
0000FC20 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000FC26                            
0000FC26                            Obj14_Action:				; XREF: Obj14_Index
0000FC26 7000                       		moveq	#0,d0
0000FC28 1028 0028                  		move.b	$28(a0),d0
0000FC2C D040                       		add.w	d0,d0
0000FC2E 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000FC32 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000FC36 6100 ECDE                  		bsr.w	SpeedToPos
0000FC3A 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000FC40 6100 BD4E                  		bsr.w	AnimateSprite
0000FC44                            
0000FC44                            Obj14_ChkDel:				; XREF: Obj13
0000FC44 3028 0008                  		move.w	8(a0),d0
0000FC48 0240 FF80                  		andi.w	#$FF80,d0
0000FC4C 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC50 0441 0080                  		subi.w	#$80,d1
0000FC54 0241 FF80                  		andi.w	#$FF80,d1
0000FC58 9041                       		sub.w	d1,d0
0000FC5A 0C40 0280                  		cmpi.w	#$280,d0
0000FC5E 6300                       		bls.s	Obj14_NoDel
0000FC60 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000FC64 6700 ED1A                  		beq.w	DeleteObject	; if it's zero, don't remember object
0000FC68 3440                       		movea.w	d0,a2	; load address into a2
0000FC6A 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000FC6E 6000 ED10                  		bra.w	DeleteObject	; and delete object
0000FC72                            
0000FC72                            Obj14_NoDel:
0000FC72 4E75                       		rts	
0000FC74                            ; ===========================================================================
0000FC74 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FC78 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FC7C 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000FC80 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000FC84 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000FC86                            ; ===========================================================================
0000FC86                            ; lavaball types 00-03 fly up and fall back down
0000FC86                            
0000FC86                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000FC86 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000FC8C 3028 0030                  		move.w	$30(a0),d0
0000FC90 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000FC94 6400                       		bcc.s	loc_E41E	; if not, branch
0000FC96 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000FC9A                            
0000FC9A                            loc_E41E:
0000FC9A 08A8 0001 0022             		bclr	#1,$22(a0)
0000FCA0 4A68 0012                  		tst.w	$12(a0)
0000FCA4 6A00                       		bpl.s	locret_E430
0000FCA6 08E8 0001 0022             		bset	#1,$22(a0)
0000FCAC                            
0000FCAC                            locret_E430:
0000FCAC 4E75                       		rts	
0000FCAE                            ; ===========================================================================
0000FCAE                            ; lavaball type	04 flies up until it hits the ceiling
0000FCAE                            
0000FCAE                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000FCAE 08E8 0001 0022             		bset	#1,$22(a0)
0000FCB4 6100 0000                  		bsr.w	ObjHitCeiling
0000FCB8 4A41                       		tst.w	d1
0000FCBA 6A00                       		bpl.s	locret_E452
0000FCBC 117C 0008 0028             		move.b	#8,$28(a0)
0000FCC2 117C 0001 001C             		move.b	#1,$1C(a0)
0000FCC8 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000FCCE                            
0000FCCE                            locret_E452:
0000FCCE 4E75                       		rts	
0000FCD0                            ; ===========================================================================
0000FCD0                            ; lavaball type	05 falls down until it hits the	floor
0000FCD0                            
0000FCD0                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000FCD0 08A8 0001 0022             		bclr	#1,$22(a0)
0000FCD6 6100 0000                  		bsr.w	ObjHitFloor
0000FCDA 4A41                       		tst.w	d1
0000FCDC 6A00                       		bpl.s	locret_E474
0000FCDE 117C 0008 0028             		move.b	#8,$28(a0)
0000FCE4 117C 0001 001C             		move.b	#1,$1C(a0)
0000FCEA 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000FCF0                            
0000FCF0                            locret_E474:
0000FCF0 4E75                       		rts	
0000FCF2                            ; ===========================================================================
0000FCF2                            ; lavaball types 06-07 move sideways
0000FCF2                            
0000FCF2                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000FCF2 08E8 0000 0022             		bset	#0,$22(a0)
0000FCF8 76F8                       		moveq	#-8,d3
0000FCFA 6100 0000                  		bsr.w	ObjHitWallLeft
0000FCFE 4A41                       		tst.w	d1
0000FD00 6A00                       		bpl.s	locret_E498
0000FD02 117C 0008 0028             		move.b	#8,$28(a0)
0000FD08 117C 0003 001C             		move.b	#3,$1C(a0)
0000FD0E 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000FD14                            
0000FD14                            locret_E498:
0000FD14 4E75                       		rts	
0000FD16                            ; ===========================================================================
0000FD16                            
0000FD16                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000FD16 08A8 0000 0022             		bclr	#0,$22(a0)
0000FD1C 7608                       		moveq	#8,d3
0000FD1E 6100 0000                  		bsr.w	ObjHitWallRight
0000FD22 4A41                       		tst.w	d1
0000FD24 6A00                       		bpl.s	locret_E4BC
0000FD26 117C 0008 0028             		move.b	#8,$28(a0)
0000FD2C 117C 0003 001C             		move.b	#3,$1C(a0)
0000FD32 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000FD38                            
0000FD38                            locret_E4BC:
0000FD38 4E75                       		rts	
0000FD3A                            ; ===========================================================================
0000FD3A                            
0000FD3A                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000FD3A 4E75                       		rts	
0000FD3C                            ; ===========================================================================
0000FD3C                            
0000FD3C                            Obj14_Delete:				; XREF: Obj14_Index
0000FD3C 6000 EC42                  		bra.w	DeleteObject
0000FD40                            ; ===========================================================================
0000FD40                            Ani_obj14:
0000FD40                            	include "_anim\obj14.asm"
0000FD40                            ; ---------------------------------------------------------------------------
0000FD40                            ; Animation script - lava balls
0000FD40                            ; ---------------------------------------------------------------------------
0000FD40 0000                       		dc.w byte_E4CC-Ani_obj14
0000FD42 0000                       		dc.w byte_E4D2-Ani_obj14
0000FD44 0000                       		dc.w byte_E4D6-Ani_obj14
0000FD46 0000                       		dc.w byte_E4DC-Ani_obj14
0000FD48 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000FD4E 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000FD52 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000FD58 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000FD5C                            		even
0000FD5C                            		even
0000FD5C                            
0000FD5C                            ; ===========================================================================
0000FD5C                            ; ---------------------------------------------------------------------------
0000FD5C                            ; Object 6D - flame thrower (SBZ)
0000FD5C                            ; ---------------------------------------------------------------------------
0000FD5C                            
0000FD5C                            Obj6D:					; XREF: Obj_Index
0000FD5C 7000                       		moveq	#0,d0
0000FD5E 1028 0024                  		move.b	$24(a0),d0
0000FD62 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000FD66 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000FD6A                            ; ===========================================================================
0000FD6A 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000FD6C 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000FD6E                            ; ===========================================================================
0000FD6E                            
0000FD6E                            Obj6D_Main:				; XREF: Obj6D_Index
0000FD6E 5428 0024                  		addq.b	#2,$24(a0)
0000FD72 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000FD7A 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000FD80 0028 0004 0001             		ori.b	#4,1(a0)
0000FD86 117C 0001 0018             		move.b	#1,$18(a0)
0000FD8C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FD92 117C 000C 0019             		move.b	#$C,$19(a0)
0000FD98 1028 0028                  		move.b	$28(a0),d0
0000FD9C 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000FDA0 D040                       		add.w	d0,d0		; multiply by 2
0000FDA2 3140 0030                  		move.w	d0,$30(a0)
0000FDA6 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000FDAA 1028 0028                  		move.b	$28(a0),d0
0000FDAE 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000FDB2 EB48                       		lsl.w	#5,d0		; multiply by $20
0000FDB4 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000FDB8 117C 000A 0036             		move.b	#$A,$36(a0)
0000FDBE 0828 0001 0022             		btst	#1,$22(a0)
0000FDC4 6700                       		beq.s	Obj6D_Action
0000FDC6 117C 0002 001C             		move.b	#2,$1C(a0)
0000FDCC 117C 0015 0036             		move.b	#$15,$36(a0)
0000FDD2                            
0000FDD2                            Obj6D_Action:				; XREF: Obj6D_Index
0000FDD2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000FDD6 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000FDD8 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000FDDE 0868 0000 001C             		bchg	#0,$1C(a0)
0000FDE4 6700                       		beq.s	loc_E57A
0000FDE6 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000FDEC 303C 00B3                  		move.w	#$B3,d0
0000FDF0 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play flame sound
0000FDF6                            
0000FDF6                            loc_E57A:
0000FDF6 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000FDFC 6100 BB92                  		bsr.w	AnimateSprite
0000FE00 117C 0000 0020             		move.b	#0,$20(a0)
0000FE06 1028 0036                  		move.b	$36(a0),d0
0000FE0A B028 001A                  		cmp.b	$1A(a0),d0
0000FE0E 6600                       		bne.s	Obj6D_ChkDel
0000FE10 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000FE16                            
0000FE16                            Obj6D_ChkDel:
0000FE16 3028 0008                  		move.w	8(a0),d0
0000FE1A 0240 FF80                  		andi.w	#$FF80,d0
0000FE1E 3238 F700                  		move.w	($FFFFF700).w,d1
0000FE22 0441 0080                  		subi.w	#$80,d1
0000FE26 0241 FF80                  		andi.w	#$FF80,d1
0000FE2A 9041                       		sub.w	d1,d0
0000FE2C 0C40 0280                  		cmpi.w	#$280,d0
0000FE30 6300 EAFE                  		bls.w	DisplaySprite
0000FE34 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000FE38 6700 EB46                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
0000FE3C 3440                       		movea.w	d0,a2	; load address into a2
0000FE3E 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
0000FE42 6000 EB3C                  		bra.w	DeleteObject
0000FE46                            ; ===========================================================================
0000FE46                            Ani_obj6D:
0000FE46                            	include "_anim\obj6D.asm"
0000FE46                            ; ---------------------------------------------------------------------------
0000FE46                            ; Animation script - flamethrower (SBZ)
0000FE46                            ; ---------------------------------------------------------------------------
0000FE46 0000                       		dc.w byte_E5C4-Ani_obj6D
0000FE48 0000                       		dc.w byte_E5D2-Ani_obj6D
0000FE4A 0000                       		dc.w byte_E5DC-Ani_obj6D
0000FE4C 0000                       		dc.w byte_E5EA-Ani_obj6D
0000FE4E 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000FE5C 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000FE66 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000FE74 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000FE7E                            		even
0000FE7E                            		even
0000FE7E                            
0000FE7E                            ; ---------------------------------------------------------------------------
0000FE7E                            ; Sprite mappings - flame thrower (SBZ)
0000FE7E                            ; ---------------------------------------------------------------------------
0000FE7E                            Map_obj6D:
0000FE7E                            	include "_maps\obj6D.asm"
0000FE7E                            ; ---------------------------------------------------------------------------
0000FE7E                            ; Sprite mappings - flame thrower (SBZ)
0000FE7E                            ; ---------------------------------------------------------------------------
0000FE7E 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000FE82 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000FE86 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000FE8A 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000FE8E 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000FE92 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000FE96 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000FE9A 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000FE9E 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000FEA2 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000FEA6 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000FEAA 01                         byte_E620:	dc.b 1
0000FEAB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FEB0 02                         byte_E626:	dc.b 2
0000FEB1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FEB6 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FEBB 02                         byte_E631:	dc.b 2
0000FEBC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FEC1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FEC6 03                         byte_E63C:	dc.b 3
0000FEC7 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FECC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FED1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FED6 03                         byte_E64C:	dc.b 3
0000FED7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FEDC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FEE1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FEE6 04                         byte_E65C:	dc.b 4
0000FEE7 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FEEC 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FEF1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FEF6 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FEFB 04                         byte_E671:	dc.b 4
0000FEFC 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000FF01 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FF06 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FF0B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF10 05                         byte_E686:	dc.b 5
0000FF11 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000FF16 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FF1B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FF20 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FF25 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF2A 05                         byte_E6A0:	dc.b 5
0000FF2B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000FF30 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000FF35 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FF3A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FF3F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF44 06                         byte_E6BA:	dc.b 6
0000FF45 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000FF4A F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000FF4F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FF54 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000FF59 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FF5E 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF63 06                         byte_E6D9:	dc.b 6
0000FF64 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000FF69 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000FF6E 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000FF73 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FF78 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FF7D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF82 01                         byte_E6F8:	dc.b 1
0000FF83 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FF88 02                         byte_E6FE:	dc.b 2
0000FF89 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FF8E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FF93 02                         byte_E709:	dc.b 2
0000FF94 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FF99 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FF9E 03                         byte_E714:	dc.b 3
0000FF9F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FFA4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFA9 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FFAE 03                         byte_E724:	dc.b 3
0000FFAF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FFB4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFB9 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FFBE 04                         byte_E734:	dc.b 4
0000FFBF 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FFC4 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FFC9 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFCE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FFD3 04                         byte_E749:	dc.b 4
0000FFD4 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000FFD9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FFDE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFE3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FFE8 05                         byte_E75E:	dc.b 5
0000FFE9 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000FFEE 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FFF3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FFF8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFFD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010002 05                         byte_E778:	dc.b 5
00010003 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010008 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0001000D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010012 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010017 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001001C 06                         byte_E792:	dc.b 6
0001001D E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010022 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010027 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001002C 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010031 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010036 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001003B 06                         byte_E7B1:	dc.b 6
0001003C E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010041 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010046 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0001004B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010050 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010055 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001005A                            		even
0001005A                            		even
0001005A                            
0001005A                            ; ===========================================================================
0001005A                            ; ---------------------------------------------------------------------------
0001005A                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0001005A                            ; ---------------------------------------------------------------------------
0001005A                            
0001005A                            Obj46:					; XREF: Obj_Index
0001005A 7000                       		moveq	#0,d0
0001005C 1028 0024                  		move.b	$24(a0),d0
00010060 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
00010064 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
00010068                            ; ===========================================================================
00010068 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0001006A 0000                       		dc.w Obj46_Action-Obj46_Index
0001006C                            ; ===========================================================================
0001006C                            
0001006C                            Obj46_Main:				; XREF: Obj46_Index
0001006C 5428 0024                  		addq.b	#2,$24(a0)
00010070 117C 000F 0016             		move.b	#$F,$16(a0)
00010076 117C 000F 0017             		move.b	#$F,$17(a0)
0001007C 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
00010084 317C 4000 0002             		move.w	#$4000,2(a0)
0001008A 117C 0004 0001             		move.b	#4,1(a0)
00010090 117C 0003 0018             		move.b	#3,$18(a0)
00010096 117C 0010 0019             		move.b	#$10,$19(a0)
0001009C 3168 000C 0030             		move.w	$C(a0),$30(a0)
000100A2 317C 05C0 0032             		move.w	#$5C0,$32(a0)
000100A8                            
000100A8                            Obj46_Action:				; XREF: Obj46_Index
000100A8 4A28 0001                  		tst.b	1(a0)
000100AC 6A00                       		bpl.s	Obj46_ChkDel
000100AE 7000                       		moveq	#0,d0
000100B0 1028 0028                  		move.b	$28(a0),d0	; get object type
000100B4 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
000100B8 D040                       		add.w	d0,d0
000100BA 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
000100BE 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
000100C2 323C 001B                  		move.w	#$1B,d1
000100C6 343C 0010                  		move.w	#$10,d2
000100CA 363C 0011                  		move.w	#$11,d3
000100CE 3828 0008                  		move.w	8(a0),d4
000100D2 6100 0000                  		bsr.w	SolidObject
000100D6                            
000100D6                            Obj46_ChkDel:
000100D6 6100 E858                  		bsr.w	DisplaySprite
000100DA 3028 0008                  		move.w	8(a0),d0
000100DE 0240 FF80                  		andi.w	#$FF80,d0
000100E2 3238 F700                  		move.w	($FFFFF700).w,d1
000100E6 0441 0080                  		subi.w	#$80,d1
000100EA 0241 FF80                  		andi.w	#$FF80,d1
000100EE 9041                       		sub.w	d1,d0
000100F0 0C40 0280                  		cmpi.w	#$280,d0
000100F4 6300                       		bls.s	Obj46_NoDel
000100F6 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000100FA 6700 E884                  		beq.w	DeleteObject		; if it's zero, don't remember object
000100FE 3440                       		movea.w	d0,a2	; load address into a2
00010100 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010104 6000 E87A                  		bra.w	DeleteObject	; and delete object
00010108                            
00010108                            Obj46_NoDel:
00010108 4E75                       		rts	
0001010A                            ; ===========================================================================
0001010A 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0001010C 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0001010E 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
00010110 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
00010112 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
00010114                            ; ===========================================================================
00010114                            
00010114                            Obj46_Type00:				; XREF: Obj46_TypeIndex
00010114 4E75                       		rts	
00010116                            ; ===========================================================================
00010116                            
00010116                            Obj46_Type02:				; XREF: Obj46_TypeIndex
00010116 3038 D008                  		move.w	($FFFFD008).w,d0
0001011A 9068 0008                  		sub.w	8(a0),d0
0001011E 6400                       		bcc.s	loc_E888
00010120 4440                       		neg.w	d0
00010122                            
00010122                            loc_E888:
00010122 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010126 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
00010128 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0001012E                            
0001012E                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0001012E 7000                       		moveq	#0,d0
00010130 1038 FE74                  		move.b	($FFFFFE74).w,d0
00010134 0828 0003 0028             		btst	#3,$28(a0)
0001013A 6700                       		beq.s	loc_E8A8
0001013C 4440                       		neg.w	d0
0001013E 0640 0010                  		addi.w	#$10,d0
00010142                            
00010142                            loc_E8A8:
00010142 3228 0030                  		move.w	$30(a0),d1
00010146 9240                       		sub.w	d0,d1
00010148 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0001014C 4E75                       		rts	
0001014E                            ; ===========================================================================
0001014E                            
0001014E                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0001014E 6100 E7C6                  		bsr.w	SpeedToPos
00010152 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
00010158 6100 0000                  		bsr.w	ObjHitFloor
0001015C 4A41                       		tst.w	d1		; has the block	hit the	floor?
0001015E 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010162 D368 000C                  		add.w	d1,$C(a0)
00010166 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0001016A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010170 117C 0004 0028             		move.b	#4,$28(a0)
00010176 3011                       		move.w	(a1),d0
00010178 0240 03FF                  		andi.w	#$3FF,d0
0001017C 0C40 02E8                  		cmpi.w	#$2E8,d0
00010180 6400                       		bcc.s	locret_E8EE
00010182 117C 0000 0028             		move.b	#0,$28(a0)
00010188                            
00010188                            locret_E8EE:
00010188 4E75                       		rts	
0001018A                            ; ===========================================================================
0001018A                            
0001018A                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0001018A 7000                       		moveq	#0,d0
0001018C 1038 FE70                  		move.b	($FFFFFE70).w,d0
00010190 E648                       		lsr.w	#3,d0
00010192 3228 0030                  		move.w	$30(a0),d1
00010196 9240                       		sub.w	d0,d1
00010198 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0001019C 4E75                       		rts	
0001019E                            ; ===========================================================================
0001019E                            ; ---------------------------------------------------------------------------
0001019E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0001019E                            ; ---------------------------------------------------------------------------
0001019E                            Map_obj46:
0001019E                            	include "_maps\obj46.asm"
0001019E                            ; ---------------------------------------------------------------------------
0001019E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0001019E                            ; ---------------------------------------------------------------------------
0001019E 0000                       		dc.w byte_E906-Map_obj46
000101A0 01                         byte_E906:	dc.b 1
000101A1 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
000101A6                            		even
000101A6                            		even
000101A6                            
000101A6                            ; ===========================================================================
000101A6                            ; ---------------------------------------------------------------------------
000101A6                            ; Object 12 - lamp (SYZ)
000101A6                            ; ---------------------------------------------------------------------------
000101A6                            
000101A6                            Obj12:					; XREF: Obj_Index
000101A6 7000                       		moveq	#0,d0
000101A8 1028 0024                  		move.b	$24(a0),d0
000101AC 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
000101B0 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
000101B4                            ; ===========================================================================
000101B4 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
000101B6 0000                       		dc.w Obj12_Animate-Obj12_Index
000101B8                            ; ===========================================================================
000101B8                            
000101B8                            Obj12_Main:				; XREF: Obj12_Index
000101B8 5428 0024                  		addq.b	#2,$24(a0)
000101BC 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
000101C4 317C 0000 0002             		move.w	#0,2(a0)
000101CA 117C 0004 0001             		move.b	#4,1(a0)
000101D0 117C 0010 0019             		move.b	#$10,$19(a0)
000101D6 117C 0006 0018             		move.b	#6,$18(a0)
000101DC                            
000101DC                            Obj12_Animate:				; XREF: Obj12_Index
000101DC 5328 001E                  		subq.b	#1,$1E(a0)
000101E0 6A00                       		bpl.s	Obj12_ChkDel
000101E2 117C 0007 001E             		move.b	#7,$1E(a0)
000101E8 5228 001A                  		addq.b	#1,$1A(a0)
000101EC 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
000101F2 6500                       		bcs.s	Obj12_ChkDel
000101F4 117C 0000 001A             		move.b	#0,$1A(a0)
000101FA                            
000101FA                            Obj12_ChkDel:
000101FA 3028 0008                  		move.w	8(a0),d0
000101FE 0240 FF80                  		andi.w	#$FF80,d0
00010202 3238 F700                  		move.w	($FFFFF700).w,d1
00010206 0441 0080                  		subi.w	#$80,d1
0001020A 0241 FF80                  		andi.w	#$FF80,d1
0001020E 9041                       		sub.w	d1,d0
00010210 0C40 0280                  		cmpi.w	#$280,d0
00010214 6300 E71A                  		bls.w	DisplaySprite
00010218 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001021C 6700 E762                  		beq.w	DeleteObject		; if it's zero, don't remember object
00010220 3440                       		movea.w	d0,a2	; load address into a2
00010222 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010226 6000 E758                  		bra.w	DeleteObject	; and delete object
0001022A                            ; ===========================================================================
0001022A                            ; ---------------------------------------------------------------------------
0001022A                            ; Sprite mappings - lamp (SYZ)
0001022A                            ; ---------------------------------------------------------------------------
0001022A                            Map_obj12:
0001022A                            	include "_maps\obj12.asm"
0001022A                            ; ---------------------------------------------------------------------------
0001022A                            ; Sprite mappings - lamp (SYZ)
0001022A                            ; ---------------------------------------------------------------------------
0001022A 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0001022E 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
00010232 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
00010236 02                         byte_E98E:	dc.b 2
00010237 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0001023C 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
00010241 02                         byte_E999:	dc.b 2
00010242 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
00010247 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0001024C 02                         byte_E9A4:	dc.b 2
0001024D F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
00010252 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
00010257 02                         byte_E9AF:	dc.b 2
00010258 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0001025D 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
00010262 02                         byte_E9BA:	dc.b 2
00010263 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
00010268 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0001026D 02                         byte_E9C5:	dc.b 2
0001026E F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
00010273 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
00010278                            		even
00010278                            		even
00010278                            
00010278                            ; ===========================================================================
00010278                            ; ---------------------------------------------------------------------------
00010278                            ; Object 47 - pinball bumper (SYZ)
00010278                            ; ---------------------------------------------------------------------------
00010278                            
00010278                            Obj47:					; XREF: Obj_Index
00010278 7000                       		moveq	#0,d0
0001027A 1028 0024                  		move.b	$24(a0),d0
0001027E 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
00010282 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
00010286                            ; ===========================================================================
00010286 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
00010288 0000                       		dc.w Obj47_Hit-Obj47_Index
0001028A                            ; ===========================================================================
0001028A                            
0001028A                            Obj47_Main:				; XREF: Obj47_Index
0001028A 5428 0024                  		addq.b	#2,$24(a0)
0001028E 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
00010296 317C 0380 0002             		move.w	#$380,2(a0)
0001029C 117C 0004 0001             		move.b	#4,1(a0)
000102A2 117C 0010 0019             		move.b	#$10,$19(a0)
000102A8 117C 0001 0018             		move.b	#1,$18(a0)
000102AE 117C 00D7 0020             		move.b	#$D7,$20(a0)
000102B4                            
000102B4                            Obj47_Hit:				; XREF: Obj47_Index
000102B4 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
000102B8 6700 0000                  		beq.w	Obj47_Display	; if not, branch
000102BC 11FC 0008 F5CE             		move.b	#face_confused,(SonimeSST+sonime_face).w
000102C2 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
000102C8 4228 0021                  		clr.b	$21(a0)
000102CC 43F8 D000                  		lea	($FFFFD000).w,a1
000102D0 3228 0008                  		move.w	8(a0),d1
000102D4 3428 000C                  		move.w	$C(a0),d2
000102D8 9269 0008                  		sub.w	8(a1),d1
000102DC 9469 000C                  		sub.w	$C(a1),d2
000102E0 4EB9 0000 2CBE             		jsr	(CalcAngle).l
000102E6 4EB9 0000 29F6             		jsr	(CalcSine).l
000102EC C3FC F900                  		muls.w	#-$700,d1
000102F0 E081                       		asr.l	#8,d1
000102F2 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
000102F6 C1FC F900                  		muls.w	#-$700,d0
000102FA E080                       		asr.l	#8,d0
000102FC 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
00010300 08E9 0001 0022             		bset	#1,$22(a1)
00010306 08A9 0004 0022             		bclr	#4,$22(a1)
0001030C 08A9 0005 0022             		bclr	#5,$22(a1)
00010312 4229 003C                  		clr.b	$3C(a1)
00010316 117C 0001 001C             		move.b	#1,$1C(a0)
0001031C 303C 00B4                  		move.w	#$B4,d0
00010320 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play bumper sound
00010326 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001032A 6700                       		beq.s	Obj47_Score		; if it's zero, don't remember object
0001032C 3440                       		movea.w	d0,a2	; load address into a2
0001032E 0C12 008A                  		cmpi.b	#$8A,(a2)	; has bumper been hit $8A times?
00010332 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
00010334 5212                       		addq.b	#1,(a2)
00010336                            
00010336                            Obj47_Score:
00010336 7001                       		moveq	#1,d0
00010338 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0001033E 6100 ED46                  		bsr.w	SingleObjLoad
00010342 6600                       		bne.s	Obj47_Display
00010344 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010348 3368 0008 0008             		move.w	8(a0),8(a1)
0001034E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010354 137C 0004 001A             		move.b	#4,$1A(a1)
0001035A                            
0001035A                            Obj47_Display:
0001035A 43F9 0000 0000             		lea	(Ani_obj47).l,a1
00010360 6100 B62E                  		bsr.w	AnimateSprite
00010364 3028 0008                  		move.w	8(a0),d0
00010368 0240 FF80                  		andi.w	#$FF80,d0
0001036C 3238 F700                  		move.w	($FFFFF700).w,d1
00010370 0441 0080                  		subi.w	#$80,d1
00010374 0241 FF80                  		andi.w	#$FF80,d1
00010378 9041                       		sub.w	d1,d0
0001037A 0C40 0280                  		cmpi.w	#$280,d0
0001037E 6200                       		bhi.s	Obj47_ChkHit
00010380 6000 E5AE                  		bra.w	DisplaySprite
00010384                            ; ===========================================================================
00010384                            
00010384                            Obj47_ChkHit:				; XREF: Obj47_Display
00010384 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010388 6700                       		beq.s	Obj47_Delete		; if it's zero, don't remember object
0001038A 3440                       		movea.w	d0,a2	; load address into a2
0001038C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010390                            
00010390                            Obj47_Delete:
00010390 6000 E5EE                  		bra.w	DeleteObject
00010394                            ; ===========================================================================
00010394                            Ani_obj47:
00010394                            	include "_anim\obj47.asm"
00010394                            ; ---------------------------------------------------------------------------
00010394                            ; Animation script - flamethrower (SBZ)
00010394                            ; ---------------------------------------------------------------------------
00010394 0000                       		dc.w byte_EAF4-Ani_obj47
00010396 0000                       		dc.w byte_EAF8-Ani_obj47
00010398 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0001039C 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
000103A4                            		even
000103A4                            		even
000103A4                            
000103A4                            ; ---------------------------------------------------------------------------
000103A4                            ; Sprite mappings - pinball bumper (SYZ)
000103A4                            ; ---------------------------------------------------------------------------
000103A4                            Map_obj47:
000103A4                            	include "_maps\obj47.asm"
000103A4                            ; ---------------------------------------------------------------------------
000103A4                            ; Sprite mappings - pinball bumper (SYZ)
000103A4                            ; ---------------------------------------------------------------------------
000103A4 0000                       		dc.w byte_EB06-Map_obj47
000103A6 0000                       		dc.w byte_EB11-Map_obj47
000103A8 0000                       		dc.w byte_EB1C-Map_obj47
000103AA 02                         byte_EB06:	dc.b 2
000103AB F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
000103B0 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
000103B5 02                         byte_EB11:	dc.b 2
000103B6 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
000103BB F402 0808 04               		dc.b $F4, 2, 8,	8, 4
000103C0 02                         byte_EB1C:	dc.b 2
000103C1 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
000103C6 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
000103CC 00                         		even
000103CC 00                         		even
000103CC                            
000103CC                            ; ===========================================================================
000103CC                            ; ---------------------------------------------------------------------------
000103CC                            ; Object 0D - signpost at the end of a level
000103CC                            ; ---------------------------------------------------------------------------
000103CC                            
000103CC                            Obj0D:					; XREF: Obj_Index
000103CC 7000                       		moveq	#0,d0
000103CE 1028 0024                  		move.b	$24(a0),d0
000103D2 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
000103D6 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
000103DA 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
000103E0 6100 B5AE                  		bsr.w	AnimateSprite
000103E4 6100 E54A                  		bsr.w	DisplaySprite
000103E8 3028 0008                  		move.w	8(a0),d0
000103EC 0240 FF80                  		andi.w	#$FF80,d0
000103F0 3238 F700                  		move.w	($FFFFF700).w,d1
000103F4 0441 0080                  		subi.w	#$80,d1
000103F8 0241 FF80                  		andi.w	#$FF80,d1
000103FC 9041                       		sub.w	d1,d0
000103FE 0C40 0280                  		cmpi.w	#$280,d0
00010402 6300                       		bls.s	Obj0D_NoDel
00010404 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010408 6700 E576                  		beq.w	DeleteObject		; if it's zero, don't remember object
0001040C 3440                       		movea.w	d0,a2	; load address into a2
0001040E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010412 6000 E56C                  		bra.w	DeleteObject	; and delete object
00010416                            
00010416                            Obj0D_NoDel:
00010416 4E75                       		rts	
00010418                            ; ===========================================================================
00010418 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0001041A 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0001041C 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0001041E 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
00010420 0000                       		dc.w locret_ED1A-Obj0D_Index
00010422                            ; ===========================================================================
00010422                            
00010422                            Obj0D_Main:				; XREF: Obj0D_Index
00010422 5428 0024                  		addq.b	#2,$24(a0)
00010426 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0001042E 317C 0680 0002             		move.w	#$680,2(a0)
00010434 117C 0004 0001             		move.b	#4,1(a0)
0001043A 117C 0018 0019             		move.b	#$18,$19(a0)
00010440 117C 0004 0018             		move.b	#4,$18(a0)
00010446                            
00010446                            Obj0D_Touch:				; XREF: Obj0D_Index
00010446 3038 D008                  		move.w	($FFFFD008).w,d0
0001044A 9068 0008                  		sub.w	8(a0),d0
0001044E 6500                       		bcs.s	locret_EBBA
00010450 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010454 6400                       		bcc.s	locret_EBBA	; if not, branch
00010456 303C 00CF                  		move.w	#$CF,d0
0001045A 4EB9 0000 121A             		jsr	(PlaySound).l	; play signpost	sound
00010460 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00010464 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0001046A 5428 0024                  		addq.b	#2,$24(a0)
0001046E                            
0001046E                            locret_EBBA:
0001046E 4E75                       		rts	
00010470                            ; ===========================================================================
00010470                            
00010470                            Obj0D_Spin:				; XREF: Obj0D_Index
00010470 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
00010474 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
00010476 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0001047C 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
00010480 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
00010486 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
00010488 5428 0024                  		addq.b	#2,$24(a0)
0001048C                            
0001048C                            Obj0D_Sparkle:
0001048C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00010490 6A00                       		bpl.s	locret_EC42	; if time remains, branch
00010492 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
00010498 7000                       		moveq	#0,d0
0001049A 1028 0034                  		move.b	$34(a0),d0
0001049E 5428 0034                  		addq.b	#2,$34(a0)
000104A2 0228 000E 0034             		andi.b	#$E,$34(a0)
000104A8 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
000104AC 6100 EBD8                  		bsr.w	SingleObjLoad
000104B0 6600                       		bne.s	locret_EC42
000104B2 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
000104B6 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
000104BC 101A                       		move.b	(a2)+,d0
000104BE 4880                       		ext.w	d0
000104C0 D068 0008                  		add.w	8(a0),d0
000104C4 3340 0008                  		move.w	d0,8(a1)
000104C8 101A                       		move.b	(a2)+,d0
000104CA 4880                       		ext.w	d0
000104CC D068 000C                  		add.w	$C(a0),d0
000104D0 3340 000C                  		move.w	d0,$C(a1)
000104D4 237C 0000 B23A 0004        		move.l	#Map_obj25,4(a1)
000104DC 337C 26BA 0002             		move.w	#($2000+ringart),2(a1)
000104E2 137C 0004 0001             		move.b	#4,1(a1)
000104E8 137C 0002 0018             		move.b	#2,$18(a1)
000104EE 137C 0008 0019             		move.b	#8,$19(a1)
000104F4                            
000104F4                            locret_EC42:
000104F4 4E75                       		rts	
000104F6                            ; ===========================================================================
000104F6 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
000104F8 0808                       		dc.b	8,   8
000104FA F000                       		dc.b -$10,   0
000104FC 18F8                       		dc.b  $18,  -8
000104FE 00F8                       		dc.b	0,  -8
00010500 1000                       		dc.b  $10,   0
00010502 E808                       		dc.b -$18,   8
00010504 1810                       		dc.b  $18, $10
00010506                            ; ===========================================================================
00010506                            
00010506                            Obj0D_SonicRun:				; XREF: Obj0D_Index
00010506 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001050A 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0001050E 0838 0001 D022             		btst	#1,($FFFFD022).w
00010514 6600                       		bne.s	loc_EC70
00010516 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001051C 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
00010522                            
00010522                            loc_EC70:
00010522 4A38 D000                  		tst.b	($FFFFD000).w
00010526 6700                       		beq.s	loc_EC86
00010528 3038 D008                  		move.w	($FFFFD008).w,d0
0001052C 3238 F72A                  		move.w	($FFFFF72A).w,d1
00010530 0641 0128                  		addi.w	#$128,d1
00010534 B041                       		cmp.w	d1,d0
00010536 6500                       		bcs.s	locret_ECEE
00010538                            
00010538                            loc_EC86:
00010538 5428 0024                  		addq.b	#2,$24(a0)
0001053C                            
0001053C                            ; ---------------------------------------------------------------------------
0001053C                            ; Subroutine to	set up bonuses at the end of an	act
0001053C                            ; ---------------------------------------------------------------------------
0001053C                            
0001053C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001053C                            
0001053C                            
0001053C                            GotThroughAct:				; XREF: Obj3E_EndAct
0001053C 4A38 D5C0                  		tst.b	($FFFFD5C0).w
00010540 6600                       		bne.s	locret_ECEE
00010542 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
00010548 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0001054C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00010550 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
00010556 2F08                               move.l  a0,-(sp)            ; save object address to stack
00010558 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
00010562 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
00010568 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
0001056E 4EB8 143A                          jsr LoadUncArt          ; load uncompressed art
00010572 205F                               move.l  (sp)+,a0            ; get object address from stack
00010574 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0001057A 7000                       		moveq	#0,d0
0001057C 1038 FE23                  		move.b	($FFFFFE23).w,d0
00010580 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010584 7200                       		moveq	#0,d1
00010586 1238 FE24                  		move.b	($FFFFFE24).w,d1
0001058A D041                       		add.w	d1,d0		; add up your time
0001058C 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010590 7214                       		moveq	#$14,d1
00010592 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010594 6500                       		bcs.s	loc_ECD0	; if not, branch
00010596 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010598                            
00010598                            loc_ECD0:
00010598 D040                       		add.w	d0,d0
0001059A 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
000105A0 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
000105A4 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
000105A8 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
000105AC 303C 008E                  		move.w	#$8E,d0
000105B0 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
000105B6                            
000105B6                            locret_ECEE:
000105B6 4E75                       		rts	
000105B8                            ; End of function GotThroughAct
000105B8                            
000105B8                            ; ===========================================================================
000105B8 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
000105CC 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
000105E2                            ; ===========================================================================
000105E2                            
000105E2                            locret_ED1A:				; XREF: Obj0D_Index
000105E2 4E75                       		rts	
000105E4                            ; ===========================================================================
000105E4                            Ani_obj0D:
000105E4                            	include "_anim\obj0D.asm"
000105E4                            ; ---------------------------------------------------------------------------
000105E4                            ; Animation script - signpost
000105E4                            ; ---------------------------------------------------------------------------
000105E4 0000                       		dc.w byte_ED24-Ani_obj0D
000105E6 0000                       		dc.w byte_ED28-Ani_obj0D
000105E8 0000                       		dc.w byte_ED2E-Ani_obj0D
000105EA 0000                       		dc.w byte_ED34-Ani_obj0D
000105EC 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
000105F0 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
000105F6 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
000105FC 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
00010600 00                         		even
00010600 00                         		even
00010600                            
00010600                            ; ---------------------------------------------------------------------------
00010600                            ; Sprite mappings - signpost
00010600                            ; ---------------------------------------------------------------------------
00010600                            Map_obj0D:
00010600                            	include "_maps\obj0D.asm"
00010600                            ; ---------------------------------------------------------------------------
00010600                            ; Sprite mappings - signpost
00010600                            ; ---------------------------------------------------------------------------
00010600 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
00010604 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
00010608 0000                       		dc.w byte_ED73-Map_obj0D
0001060A 03                         byte_ED42:	dc.b 3
0001060B F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
00010610 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
00010615 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0001061A 02                         byte_ED52:	dc.b 2
0001061B F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
00010620 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00010625 02                         byte_ED5D:	dc.b 2
00010626 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0001062B 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
00010630 02                         byte_ED68:	dc.b 2
00010631 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
00010636 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0001063B 03                         byte_ED73:	dc.b 3
0001063C F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
00010641 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
00010646 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0001064C 00                         		even
0001064C 00                         		even
0001064C                            
0001064C                            ; ===========================================================================
0001064C                            ; ---------------------------------------------------------------------------
0001064C                            ; Object 4C - lava geyser / lavafall producer (MZ)
0001064C                            ; ---------------------------------------------------------------------------
0001064C                            
0001064C                            Obj4C:					; XREF: Obj_Index
0001064C 7000                       		moveq	#0,d0
0001064E 1028 0024                  		move.b	$24(a0),d0
00010652 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
00010656 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0001065A 6000 0000                  		bra.w	Obj4D_ChkDel
0001065E                            ; ===========================================================================
0001065E 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
00010660 0000                       		dc.w loc_EDCC-Obj4C_Index
00010662 0000                       		dc.w loc_EE3E-Obj4C_Index
00010664 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
00010666 0000                       		dc.w Obj4C_Display-Obj4C_Index
00010668 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0001066A                            ; ===========================================================================
0001066A                            
0001066A                            Obj4C_Main:				; XREF: Obj4C_Index
0001066A 5428 0024                  		addq.b	#2,$24(a0)
0001066E 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
00010676 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0001067C 117C 0004 0001             		move.b	#4,1(a0)
00010682 117C 0001 0018             		move.b	#1,$18(a0)
00010688 117C 0038 0019             		move.b	#$38,$19(a0)
0001068E 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
00010694                            
00010694                            loc_EDCC:				; XREF: Obj4C_Index
00010694 5368 0032                  		subq.w	#1,$32(a0)
00010698 6A00                       		bpl.s	locret_EDF0
0001069A 3168 0034 0032             		move.w	$34(a0),$32(a0)
000106A0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000106A4 3228 000C                  		move.w	$C(a0),d1
000106A8 B041                       		cmp.w	d1,d0
000106AA 6400                       		bcc.s	locret_EDF0
000106AC 0441 0170                  		subi.w	#$170,d1
000106B0 B041                       		cmp.w	d1,d0
000106B2 6500                       		bcs.s	locret_EDF0
000106B4 5428 0024                  		addq.b	#2,$24(a0)
000106B8                            
000106B8                            locret_EDF0:
000106B8 4E75                       		rts	
000106BA                            ; ===========================================================================
000106BA                            
000106BA                            Obj4C_MakeLava:				; XREF: Obj4C_Index
000106BA 5428 0024                  		addq.b	#2,$24(a0)
000106BE 6100 E9DC                  		bsr.w	SingleObjLoad2
000106C2 6600                       		bne.s	loc_EE18
000106C4 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
000106C8 3368 0008 0008             		move.w	8(a0),8(a1)
000106CE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000106D4 1368 0028 0028             		move.b	$28(a0),$28(a1)
000106DA 2348 003C                  		move.l	a0,$3C(a1)
000106DE                            
000106DE                            loc_EE18:
000106DE 117C 0001 001C             		move.b	#1,$1C(a0)
000106E4 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
000106E8 6700                       		beq.s	Obj4C_Type00	; if yes, branch
000106EA 117C 0004 001C             		move.b	#4,$1C(a0)
000106F0 6000                       		bra.s	Obj4C_Display
000106F2                            ; ===========================================================================
000106F2                            
000106F2                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
000106F2 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
000106F6 08E9 0001 0022             		bset	#1,$22(a1)
000106FC 337C FA80 0012             		move.w	#-$580,$12(a1)
00010702 6000                       		bra.s	Obj4C_Display
00010704                            ; ===========================================================================
00010704                            
00010704                            loc_EE3E:				; XREF: Obj4C_Index
00010704 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
00010708 6700                       		beq.s	Obj4C_Display	; if yes, branch
0001070A 5428 0024                  		addq.b	#2,$24(a0)
0001070E 4E75                       		rts	
00010710                            ; ===========================================================================
00010710                            
00010710                            Obj4C_Display:				; XREF: Obj4C_Index
00010710 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00010716 6100 B278                  		bsr.w	AnimateSprite
0001071A 6100 E214                  		bsr.w	DisplaySprite
0001071E 4E75                       		rts	
00010720                            ; ===========================================================================
00010720                            
00010720                            Obj4C_Delete:				; XREF: Obj4C_Index
00010720 117C 0000 001C             		move.b	#0,$1C(a0)
00010726 117C 0002 0024             		move.b	#2,$24(a0)
0001072C 4A28 0028                  		tst.b	$28(a0)
00010730 6700 E24E                  		beq.w	DeleteObject
00010734 4E75                       		rts	
00010736                            ; ===========================================================================
00010736                            ; ---------------------------------------------------------------------------
00010736                            ; Object 4D - lava geyser / lavafall (MZ)
00010736                            ; ---------------------------------------------------------------------------
00010736                            
00010736                            Obj4D:					; XREF: Obj_Index
00010736 7000                       		moveq	#0,d0
00010738 1028 0024                  		move.b	$24(a0),d0
0001073C 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
00010740 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
00010744 6000 E1EA                  		bra.w	DisplaySprite
00010748                            ; ===========================================================================
00010748 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0001074A 0000                       		dc.w Obj4D_Action-Obj4D_Index
0001074C 0000                       		dc.w loc_EFFC-Obj4D_Index
0001074E 0000                       		dc.w Obj4D_Delete-Obj4D_Index
00010750                            
00010750 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
00010754                            ; ===========================================================================
00010754                            
00010754                            Obj4D_Main:				; XREF: Obj4D_Index
00010754 5428 0024                  		addq.b	#2,$24(a0)
00010758 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001075E 4A28 0028                  		tst.b	$28(a0)
00010762 6700                       		beq.s	loc_EEA4
00010764 0468 0250 000C             		subi.w	#$250,$C(a0)
0001076A                            
0001076A                            loc_EEA4:
0001076A 7000                       		moveq	#0,d0
0001076C 1028 0028                  		move.b	$28(a0),d0
00010770 D040                       		add.w	d0,d0
00010772 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
00010778 2248                       		movea.l	a0,a1
0001077A 7201                       		moveq	#1,d1
0001077C 6100                       		bsr.s	Obj4D_MakeLava
0001077E 6000                       		bra.s	loc_EF10
00010780                            ; ===========================================================================
00010780                            
00010780                            Obj4D_Loop:
00010780 6100 E91A                  		bsr.w	SingleObjLoad2
00010784 6600                       		bne.s	loc_EF0A
00010786                            
00010786                            Obj4D_MakeLava:				; XREF: Obj4D_Main
00010786 12BC 004D                  		move.b	#$4D,0(a1)
0001078A 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
00010792 337C 63A8 0002             		move.w	#$63A8,2(a1)
00010798 137C 0004 0001             		move.b	#4,1(a1)
0001079E 137C 0020 0019             		move.b	#$20,$19(a1)
000107A4 3368 0008 0008             		move.w	8(a0),8(a1)
000107AA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000107B0 1368 0028 0028             		move.b	$28(a0),$28(a1)
000107B6 137C 0001 0018             		move.b	#1,$18(a1)
000107BC 137C 0005 001C             		move.b	#5,$1C(a1)
000107C2 4A28 0028                  		tst.b	$28(a0)
000107C6 6700                       		beq.s	loc_EF0A
000107C8 137C 0002 001C             		move.b	#2,$1C(a1)
000107CE                            
000107CE                            loc_EF0A:
000107CE 51C9 FFB0                  		dbf	d1,Obj4D_Loop
000107D2 4E75                       		rts	
000107D4                            ; ===========================================================================
000107D4                            
000107D4                            loc_EF10:				; XREF: Obj4D_Main
000107D4 0669 0060 000C             		addi.w	#$60,$C(a1)
000107DA 3368 0030 0030             		move.w	$30(a0),$30(a1)
000107E0 0669 0060 0030             		addi.w	#$60,$30(a1)
000107E6 137C 0093 0020             		move.b	#$93,$20(a1)
000107EC 137C 0080 0016             		move.b	#$80,$16(a1)
000107F2 08E9 0004 0001             		bset	#4,1(a1)
000107F8 5829 0024                  		addq.b	#4,$24(a1)
000107FC 2348 003C                  		move.l	a0,$3C(a1)
00010800 4A28 0028                  		tst.b	$28(a0)
00010804 6700                       		beq.s	Obj4D_PlaySnd
00010806 7200                       		moveq	#0,d1
00010808 6100 FF76                  		bsr.w	Obj4D_Loop
0001080C 5429 0024                  		addq.b	#2,$24(a1)
00010810 08E9 0004 0002             		bset	#4,2(a1)
00010816 0669 0100 000C             		addi.w	#$100,$C(a1)
0001081C 137C 0000 0018             		move.b	#0,$18(a1)
00010822 3368 0030 0030             		move.w	$30(a0),$30(a1)
00010828 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0001082E 117C 0000 0028             		move.b	#0,$28(a0)
00010834                            
00010834                            Obj4D_PlaySnd:
00010834 303C 00C8                  		move.w	#$C8,d0
00010838 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play flame sound
0001083E                            
0001083E                            Obj4D_Action:				; XREF: Obj4D_Index
0001083E 7000                       		moveq	#0,d0
00010840 1028 0028                  		move.b	$28(a0),d0
00010844 D040                       		add.w	d0,d0
00010846 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0001084A 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0001084E 6100 E0C6                  		bsr.w	SpeedToPos
00010852 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00010858 6100 B136                  		bsr.w	AnimateSprite
0001085C                            
0001085C                            Obj4D_ChkDel:				; XREF: Obj4C
0001085C 3028 0008                  		move.w	8(a0),d0
00010860 0240 FF80                  		andi.w	#$FF80,d0
00010864 3238 F700                  		move.w	($FFFFF700).w,d1
00010868 0441 0080                  		subi.w	#$80,d1
0001086C 0241 FF80                  		andi.w	#$FF80,d1
00010870 9041                       		sub.w	d1,d0
00010872 0C40 0280                  		cmpi.w	#$280,d0
00010876 6300                       		bls.s	Obj4D_NoDel
00010878 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001087C 6700 E102                  		beq.w	DeleteObject	; if it's zero, don't remember object
00010880 3440                       		movea.w	d0,a2	; load address into a2
00010882 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010886 6000 E0F8                  		bra.w	DeleteObject	; and delete object
0001088A                            
0001088A                            Obj4D_NoDel:
0001088A 4E75                       		rts	
0001088C                            ; ===========================================================================
0001088C 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0001088E 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
00010890                            ; ===========================================================================
00010890                            
00010890                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
00010890 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00010896 3028 0030                  		move.w	$30(a0),d0
0001089A B068 000C                  		cmp.w	$C(a0),d0
0001089E 6400                       		bcc.s	locret_EFDA
000108A0 5828 0024                  		addq.b	#4,$24(a0)
000108A4 2268 003C                  		movea.l	$3C(a0),a1
000108A8 137C 0003 001C             		move.b	#3,$1C(a1)
000108AE                            
000108AE                            locret_EFDA:
000108AE 4E75                       		rts	
000108B0                            ; ===========================================================================
000108B0                            
000108B0                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
000108B0 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
000108B6 3028 0030                  		move.w	$30(a0),d0
000108BA B068 000C                  		cmp.w	$C(a0),d0
000108BE 6400                       		bcc.s	locret_EFFA
000108C0 5828 0024                  		addq.b	#4,$24(a0)
000108C4 2268 003C                  		movea.l	$3C(a0),a1
000108C8 137C 0001 001C             		move.b	#1,$1C(a1)
000108CE                            
000108CE                            locret_EFFA:
000108CE 4E75                       		rts	
000108D0                            ; ===========================================================================
000108D0                            
000108D0                            loc_EFFC:				; XREF: Obj4D_Index
000108D0 2268 003C                  		movea.l	$3C(a0),a1
000108D4 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000108DA 6700 0000                  		beq.w	Obj4D_Delete
000108DE 3029 000C                  		move.w	$C(a1),d0
000108E2 0640 0060                  		addi.w	#$60,d0
000108E6 3140 000C                  		move.w	d0,$C(a0)
000108EA 9068 0030                  		sub.w	$30(a0),d0
000108EE 4440                       		neg.w	d0
000108F0 7208                       		moveq	#8,d1
000108F2 0C40 0040                  		cmpi.w	#$40,d0
000108F6 6C00                       		bge.s	loc_F026
000108F8 720B                       		moveq	#$B,d1
000108FA                            
000108FA                            loc_F026:
000108FA 0C40 0080                  		cmpi.w	#$80,d0
000108FE 6F00                       		ble.s	loc_F02E
00010900 720E                       		moveq	#$E,d1
00010902                            
00010902                            loc_F02E:
00010902 5328 001E                  		subq.b	#1,$1E(a0)
00010906 6A00                       		bpl.s	loc_F04C
00010908 117C 0007 001E             		move.b	#7,$1E(a0)
0001090E 5228 001B                  		addq.b	#1,$1B(a0)
00010912 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
00010918 6500                       		bcs.s	loc_F04C
0001091A 117C 0000 001B             		move.b	#0,$1B(a0)
00010920                            
00010920                            loc_F04C:
00010920 1028 001B                  		move.b	$1B(a0),d0
00010924 D001                       		add.b	d1,d0
00010926 1140 001A                  		move.b	d0,$1A(a0)
0001092A 6000 FF30                  		bra.w	Obj4D_ChkDel
0001092E                            ; ===========================================================================
0001092E                            
0001092E                            Obj4D_Delete:				; XREF: Obj4D_Index
0001092E 6000 E050                  		bra.w	DeleteObject
00010932                            ; ===========================================================================
00010932                            ; ---------------------------------------------------------------------------
00010932                            ; Object 4E - advancing	wall of	lava (MZ)
00010932                            ; ---------------------------------------------------------------------------
00010932                            
00010932                            Obj4E:					; XREF: Obj_Index
00010932 7000                       		moveq	#0,d0
00010934 1028 0024                  		move.b	$24(a0),d0
00010938 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0001093C 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
00010940                            ; ===========================================================================
00010940 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
00010942 0000                       		dc.w Obj4E_Solid-Obj4E_Index
00010944 0000                       		dc.w Obj4E_Action-Obj4E_Index
00010946 0000                       		dc.w Obj4E_Move2-Obj4E_Index
00010948 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0001094A                            ; ===========================================================================
0001094A                            
0001094A                            Obj4E_Main:				; XREF: Obj4E_Index
0001094A 5828 0024                  		addq.b	#4,$24(a0)
0001094E 2248                       		movea.l	a0,a1
00010950 7201                       		moveq	#1,d1
00010952 6000                       		bra.s	Obj4E_Main2
00010954                            ; ===========================================================================
00010954                            
00010954                            Obj4E_Loop:
00010954 6100 E746                  		bsr.w	SingleObjLoad2
00010958 6600                       		bne.s	loc_F0C8
0001095A                            
0001095A                            Obj4E_Main2:				; XREF: Obj4E_Main
0001095A 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0001095E 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
00010966 337C 63A8 0002             		move.w	#$63A8,2(a1)
0001096C 137C 0004 0001             		move.b	#4,1(a1)
00010972 137C 0050 0019             		move.b	#$50,$19(a1)
00010978 3368 0008 0008             		move.w	8(a0),8(a1)
0001097E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010984 137C 0001 0018             		move.b	#1,$18(a1)
0001098A 137C 0000 001C             		move.b	#0,$1C(a1)
00010990 137C 0094 0020             		move.b	#$94,$20(a1)
00010996 2348 003C                  		move.l	a0,$3C(a1)
0001099A                            
0001099A                            loc_F0C8:
0001099A 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0001099E                            
0001099E 5C29 0024                  		addq.b	#6,$24(a1)
000109A2 137C 0004 001A             		move.b	#4,$1A(a1)
000109A8                            
000109A8                            Obj4E_Action:				; XREF: Obj4E_Index
000109A8 3038 D008                  		move.w	($FFFFD008).w,d0
000109AC 9068 0008                  		sub.w	8(a0),d0
000109B0 6400                       		bcc.s	Obj4E_ChkSonic
000109B2 4440                       		neg.w	d0
000109B4                            
000109B4                            Obj4E_ChkSonic:
000109B4 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
000109B8 6400                       		bcc.s	Obj4E_Move	; if not, branch
000109BA 3038 D00C                  		move.w	($FFFFD00C).w,d0
000109BE 9068 000C                  		sub.w	$C(a0),d0
000109C2 6400                       		bcc.s	loc_F0F4
000109C4 4440                       		neg.w	d0
000109C6                            
000109C6                            loc_F0F4:
000109C6 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
000109CA 6400                       		bcc.s	Obj4E_Move	; if not, branch
000109CC 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
000109D2 6000                       		bra.s	Obj4E_Solid
000109D4                            ; ===========================================================================
000109D4                            
000109D4                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
000109D4 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
000109D8 6700                       		beq.s	Obj4E_Solid	; if not, branch
000109DA 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
000109E0 5528 0024                  		subq.b	#2,$24(a0)
000109E4                            
000109E4                            Obj4E_Solid:				; XREF: Obj4E_Index
000109E4 323C 002B                  		move.w	#$2B,d1
000109E8 343C 0018                  		move.w	#$18,d2
000109EC 3602                       		move.w	d2,d3
000109EE 5243                       		addq.w	#1,d3
000109F0 3828 0008                  		move.w	8(a0),d4
000109F4 1028 0024                  		move.b	$24(a0),d0
000109F8 3F00                       		move.w	d0,-(sp)
000109FA 6100 0000                  		bsr.w	SolidObject
000109FE 301F                       		move.w	(sp)+,d0
00010A00 1140 0024                  		move.b	d0,$24(a0)
00010A04 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
00010A0A 6600                       		bne.s	Obj4E_Animate	; if not, branch
00010A0C 4268 0010                  		clr.w	$10(a0)		; stop object moving
00010A10 4228 0036                  		clr.b	$36(a0)
00010A14                            
00010A14                            Obj4E_Animate:
00010A14 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
00010A1A 6100 AF74                  		bsr.w	AnimateSprite
00010A1E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00010A24 6400                       		bcc.s	Obj4E_ChkDel
00010A26 6100 DEEE                  		bsr.w	SpeedToPos
00010A2A                            
00010A2A                            Obj4E_ChkDel:
00010A2A 6100 DF04                  		bsr.w	DisplaySprite
00010A2E 4A28 0036                  		tst.b	$36(a0)
00010A32 6600                       		bne.s	locret_F17E
00010A34 3028 0008                  		move.w	8(a0),d0
00010A38 0240 FF80                  		andi.w	#$FF80,d0
00010A3C 3238 F700                  		move.w	($FFFFF700).w,d1
00010A40 0441 0080                  		subi.w	#$80,d1
00010A44 0241 FF80                  		andi.w	#$FF80,d1
00010A48 9041                       		sub.w	d1,d0
00010A4A 0C40 0280                  		cmpi.w	#$280,d0
00010A4E 6200                       		bhi.s	Obj4E_ChkGone
00010A50                            
00010A50                            locret_F17E:
00010A50 4E75                       		rts	
00010A52                            ; ===========================================================================
00010A52                            
00010A52                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
00010A52 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010A56 3440                       		movea.w	d0,a2	; load address into a2
00010A58 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010A5C 117C 0008 0024             		move.b	#8,$24(a0)
00010A62 4E75                       		rts	
00010A64                            ; ===========================================================================
00010A64                            
00010A64                            Obj4E_Move2:				; XREF: Obj4E_Index
00010A64 2268 003C                  		movea.l	$3C(a0),a1
00010A68 0C29 0008 0024             		cmpi.b	#8,$24(a1)
00010A6E 6700                       		beq.s	Obj4E_Delete
00010A70 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
00010A76 0468 0080 0008             		subi.w	#$80,8(a0)
00010A7C 6000 DEB2                  		bra.w	DisplaySprite
00010A80                            ; ===========================================================================
00010A80                            
00010A80                            Obj4E_Delete:				; XREF: Obj4E_Index
00010A80 6000 DEFE                  		bra.w	DeleteObject
00010A84                            ; ===========================================================================
00010A84                            ; ---------------------------------------------------------------------------
00010A84                            ; Object 54 - invisible	lava tag (MZ)
00010A84                            ; ---------------------------------------------------------------------------
00010A84                            
00010A84                            Obj54:					; XREF: Obj_Index
00010A84 7000                       		moveq	#0,d0
00010A86 1028 0024                  		move.b	$24(a0),d0
00010A8A 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
00010A8E 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
00010A92                            ; ===========================================================================
00010A92 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
00010A94 0000                       		dc.w Obj54_ChkDel-Obj54_Index
00010A96                            
00010A96 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
00010A9A                            ; ===========================================================================
00010A9A                            
00010A9A                            Obj54_Main:				; XREF: Obj54_Index
00010A9A 5428 0024                  		addq.b	#2,$24(a0)
00010A9E 7000                       		moveq	#0,d0
00010AA0 1028 0028                  		move.b	$28(a0),d0
00010AA4 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
00010AAA 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
00010AB2 117C 0084 0001             		move.b	#$84,1(a0)
00010AB8                            
00010AB8                            Obj54_ChkDel:				; XREF: Obj54_Index
00010AB8 3028 0008                  		move.w	8(a0),d0
00010ABC 0240 FF80                  		andi.w	#$FF80,d0
00010AC0 3238 F700                  		move.w	($FFFFF700).w,d1
00010AC4 0441 0080                  		subi.w	#$80,d1
00010AC8 0241 FF80                  		andi.w	#$FF80,d1
00010ACC 9041                       		sub.w	d1,d0
00010ACE 6B00 DEB0                  		bmi.w	DeleteObject
00010AD2 0C40 0280                  		cmpi.w	#$280,d0
00010AD6 6300                       		bls.s	Obj54_NoDel
00010AD8                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
00010AD8                            	;	beq.w	DeleteObject		; if it's zero, don't remember object
00010AD8                            	;	movea.w	d0,a2	; load address into a2
00010AD8                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010AD8 6000 DEA6                  		bra.w	DeleteObject	; and delete object
00010ADC                            
00010ADC                            Obj54_NoDel:
00010ADC 4E75                       		rts	
00010ADE                            ; ===========================================================================
00010ADE                            ; ---------------------------------------------------------------------------
00010ADE                            ; Sprite mappings - invisible lava tag (MZ)
00010ADE                            ; ---------------------------------------------------------------------------
00010ADE                            Map_obj54:
00010ADE                            	include "_maps\obj54.asm"
00010ADE                            ; ---------------------------------------------------------------------------
00010ADE                            ; Sprite mappings - invisible lava tag (MZ)
00010ADE                            ; ---------------------------------------------------------------------------
00010ADE 0000                       		dc.w byte_F212-Map_obj54
00010AE0 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
00010AE2 00                         		even
00010AE2 00                         		even
00010AE2                            
00010AE2                            Ani_obj4C:
00010AE2                            	include "_anim\obj4C.asm"
00010AE2                            ; ---------------------------------------------------------------------------
00010AE2                            ; Animation script - geyser of lava (MZ)
00010AE2                            ; ---------------------------------------------------------------------------
00010AE2 0000                       		dc.w byte_F220-Ani_obj4C
00010AE4 0000                       		dc.w byte_F22A-Ani_obj4C
00010AE6 0000                       		dc.w byte_F22E-Ani_obj4C
00010AE8 0000                       		dc.w byte_F232-Ani_obj4C
00010AEA 0000                       		dc.w byte_F23A-Ani_obj4C
00010AEC 0000                       		dc.w byte_F23E-Ani_obj4C
00010AEE 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
00010AF8 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
00010AFC 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
00010B00 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
00010B08 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
00010B0C 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
00010B10                            		even
00010B10                            		even
00010B10                            
00010B10                            Ani_obj4E:
00010B10                            	include "_anim\obj4E.asm"
00010B10                            ; ---------------------------------------------------------------------------
00010B10                            ; Animation script - advancing wall of lava (MZ)
00010B10                            ; ---------------------------------------------------------------------------
00010B10 0000                       		dc.w byte_F244-Ani_obj4E
00010B12 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
00010B18                            		even
00010B18                            		even
00010B18                            
00010B18                            ; ---------------------------------------------------------------------------
00010B18                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010B18                            ; ---------------------------------------------------------------------------
00010B18                            Map_obj4C:
00010B18                            	include "_maps\obj4C.asm"
00010B18                            ; ---------------------------------------------------------------------------
00010B18                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010B18                            ; ---------------------------------------------------------------------------
00010B18 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
00010B1C 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
00010B20 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
00010B24 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
00010B28 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
00010B2C 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
00010B30 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
00010B34 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
00010B38 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
00010B3C 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
00010B40 02                         byte_F272:	dc.b 2
00010B41 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00010B46 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
00010B4B 02                         byte_F27D:	dc.b 2
00010B4C EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00010B51 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00010B56 04                         byte_F288:	dc.b 4
00010B57 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010B5C F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010B61 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010B66 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010B6B 04                         byte_F29D:	dc.b 4
00010B6C EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010B71 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010B76 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010B7B EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010B80 06                         byte_F2B2:	dc.b 6
00010B81 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010B86 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010B8B F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010B90 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010B95 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
00010B9A E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00010B9F 06                         byte_F2D1:	dc.b 6
00010BA0 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010BA5 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010BAA F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010BAF EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010BB4 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00010BB9 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00010BBE 02                         byte_F2F0:	dc.b 2
00010BBF E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00010BC4 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00010BC9 02                         byte_F2FB:	dc.b 2
00010BCA E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00010BCF E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00010BD4 0A                         byte_F306:	dc.b $A
00010BD5 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010BDA 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010BDF B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010BE4 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010BE9 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010BEE D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010BF3 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010BF8 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010BFD 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010C02 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010C07 0A                         byte_F339:	dc.b $A
00010C08 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010C0D 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010C12 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010C17 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010C1C D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010C21 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010C26 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010C2B F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010C30 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010C35 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010C3A 0A                         byte_F36C:	dc.b $A
00010C3B 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010C40 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010C45 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010C4A B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010C4F D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010C54 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010C59 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010C5E F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010C63 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010C68 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010C6D 06                         byte_F39F:	dc.b 6
00010C6E 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010C73 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010C78 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010C7D B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010C82 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010C87 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010C8C 06                         byte_F3BE:	dc.b 6
00010C8D 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010C92 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010C97 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010C9C B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010CA1 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010CA6 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010CAB 06                         byte_F3DD:	dc.b 6
00010CAC 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010CB1 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010CB6 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010CBB B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010CC0 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010CC5 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010CCA 10                         byte_F3FC:	dc.b $10
00010CCB 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010CD0 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010CD5 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010CDA B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010CDF D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010CE4 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010CE9 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010CEE F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010CF3 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010CF8 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010CFD 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00010D02 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00010D07 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00010D0C 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00010D11 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00010D16 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00010D1B 10                         byte_F44D:	dc.b $10
00010D1C 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010D21 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010D26 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010D2B B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010D30 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010D35 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010D3A F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010D3F F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010D44 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010D49 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010D4E 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00010D53 300F 0850 00               		dc.b $30, $F, 8, $50, 0
00010D58 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
00010D5D 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00010D62 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00010D67 700F 0850 00               		dc.b $70, $F, 8, $50, 0
00010D6C 10                         byte_F49E:	dc.b $10
00010D6D 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010D72 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010D77 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010D7C B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010D81 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010D86 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010D8B F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010D90 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010D95 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010D9A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010D9F 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00010DA4 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00010DA9 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00010DAE 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00010DB3 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00010DB8 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00010DBD 06                         byte_F4EF:	dc.b 6
00010DBE E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00010DC3 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00010DC8 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00010DCD E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00010DD2 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00010DD7 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00010DDC 06                         byte_F50E:	dc.b 6
00010DDD E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00010DE2 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00010DE7 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00010DEC E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00010DF1 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00010DF6 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00010DFB 00                         byte_F52D:	dc.b 0
00010DFC                            		even
00010DFC                            		even
00010DFC                            
00010DFC                            ; ---------------------------------------------------------------------------
00010DFC                            ; Sprite mappings - advancing wall of lava (MZ)
00010DFC                            ; ---------------------------------------------------------------------------
00010DFC                            Map_obj4E:
00010DFC                            	include "_maps\obj4E.asm"
00010DFC                            ; ---------------------------------------------------------------------------
00010DFC                            ; Sprite mappings - advancing wall of lava (MZ)
00010DFC                            ; ---------------------------------------------------------------------------
00010DFC 0000                       		dc.w byte_F538-Map_obj4E
00010DFE 0000                       		dc.w byte_F566-Map_obj4E
00010E00 0000                       		dc.w byte_F594-Map_obj4E
00010E02 0000                       		dc.w byte_F5C2-Map_obj4E
00010E04 0000                       		dc.w byte_F5F0-Map_obj4E
00010E06 09                         byte_F538:	dc.b 9
00010E07 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
00010E0C 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010E11 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010E16 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010E1B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010E20 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010E25 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010E2A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010E2F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010E34 09                         byte_F566:	dc.b 9
00010E35 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010E3A 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
00010E3F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010E44 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010E49 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010E4E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010E53 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010E58 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010E5D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010E62 09                         byte_F594:	dc.b 9
00010E63 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
00010E68 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010E6D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010E72 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010E77 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010E7C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010E81 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010E86 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010E8B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010E90 09                         byte_F5C2:	dc.b 9
00010E91 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010E96 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
00010E9B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010EA0 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010EA5 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010EAA E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010EAF 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010EB4 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010EB9 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010EBE 08                         byte_F5F0:	dc.b 8
00010EBF E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00010EC4 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010EC9 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010ECE 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010ED3 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010ED8 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010EDD E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010EE2 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010EE8 00                         		even
00010EE8 00                         		even
00010EE8                            
00010EE8                            ; ===========================================================================
00010EE8                            ; ---------------------------------------------------------------------------
00010EE8                            ; Object 40 - Moto Bug enemy (GHZ)
00010EE8                            ; ---------------------------------------------------------------------------
00010EE8                            
00010EE8                            Obj40:					; XREF: Obj_Index
00010EE8 7000                       		moveq	#0,d0
00010EEA 1028 0024                  		move.b	$24(a0),d0
00010EEE 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00010EF2 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00010EF6                            ; ===========================================================================
00010EF6 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
00010EF8 0000                       		dc.w Obj40_Action-Obj40_Index
00010EFA 0000                       		dc.w Obj40_Animate-Obj40_Index
00010EFC 0000                       		dc.w Obj40_Delete-Obj40_Index
00010EFE                            ; ===========================================================================
00010EFE                            
00010EFE                            Obj40_Main:				; XREF: Obj40_Index
00010EFE 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00010F06 317C 04F0 0002             		move.w	#$4F0,2(a0)
00010F0C 117C 0004 0001             		move.b	#4,1(a0)
00010F12 117C 0004 0018             		move.b	#4,$18(a0)
00010F18 117C 0014 0019             		move.b	#$14,$19(a0)
00010F1E 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00010F22 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
00010F24 117C 000E 0016             		move.b	#$E,$16(a0)
00010F2A 117C 0008 0017             		move.b	#8,$17(a0)
00010F30 117C 000C 0020             		move.b	#$C,$20(a0)
00010F36 6100 D9BE                  		bsr.w	ObjectFall
00010F3A 4EB9 0000 0000             		jsr	ObjHitFloor
00010F40 4A41                       		tst.w	d1
00010F42 6A00                       		bpl.s	locret_F68A
00010F44 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010F48 317C 0000 0012             		move.w	#0,$12(a0)
00010F4E 5428 0024                  		addq.b	#2,$24(a0)
00010F52 0868 0000 0022             		bchg	#0,$22(a0)
00010F58                            
00010F58                            locret_F68A:
00010F58 4E75                       		rts	
00010F5A                            ; ===========================================================================
00010F5A                            
00010F5A                            Obj40_SetSmoke:				; XREF: Obj40_Main
00010F5A 5828 0024                  		addq.b	#4,$24(a0)
00010F5E 6000 0000                  		bra.w	Obj40_Animate
00010F62                            ; ===========================================================================
00010F62                            
00010F62                            Obj40_Action:				; XREF: Obj40_Index
00010F62 7000                       		moveq	#0,d0
00010F64 1028 0025                  		move.b	$25(a0),d0
00010F68 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
00010F6C 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
00010F70 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00010F76 6100 AA18                  		bsr.w	AnimateSprite
00010F7A                            
00010F7A                            ; ---------------------------------------------------------------------------
00010F7A                            ; Routine to mark an enemy/monitor/ring	as destroyed
00010F7A                            ; ---------------------------------------------------------------------------
00010F7A                            
00010F7A                            MarkObjGone:
00010F7A 3028 0008                  		move.w	8(a0),d0
00010F7E 0240 FF80                  		andi.w	#$FF80,d0
00010F82 3238 F700                  		move.w	($FFFFF700).w,d1
00010F86 0441 0080                  		subi.w	#$80,d1
00010F8A 0241 FF80                  		andi.w	#$FF80,d1
00010F8E 9041                       		sub.w	d1,d0
00010F90 0C40 0280                  		cmpi.w	#$280,d0
00010F94 6200 0000                  		bhi.w	Mark_ChkGone
00010F98 6000 D996                  		bra.w	DisplaySprite
00010F9C                            ; ===========================================================================
00010F9C                            
00010F9C                            Mark_ChkGone:
00010F9C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010FA0 6700 D9DE                  		beq.w	DeleteObject	; if it's zero, don't remember object
00010FA4 3440                       		movea.w	d0,a2	; load address into a2
00010FA6 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010FAA                            
00010FAA                            Mark_Delete:
00010FAA 6000 D9D4                  		bra.w	DeleteObject
00010FAE                            
00010FAE                            ; ===========================================================================
00010FAE 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
00010FB0 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
00010FB2                            ; ===========================================================================
00010FB2                            
00010FB2                            Obj40_Move:				; XREF: Obj40_Index2
00010FB2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010FB6 6A00                       		bpl.s	locret_F70A	; if time remains, branch
00010FB8 5428 0025                  		addq.b	#2,$25(a0)
00010FBC 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
00010FC2 117C 0001 001C             		move.b	#1,$1C(a0)
00010FC8 0868 0000 0022             		bchg	#0,$22(a0)
00010FCE 6600                       		bne.s	locret_F70A
00010FD0 4468 0010                  		neg.w	$10(a0)		; change direction
00010FD4                            
00010FD4                            locret_F70A:
00010FD4 4E75                       		rts	
00010FD6                            ; ===========================================================================
00010FD6                            
00010FD6                            Obj40_FixToFloor:			; XREF: Obj40_Index2
00010FD6 6100 D93E                  		bsr.w	SpeedToPos
00010FDA 4EB9 0000 0000             		jsr	ObjHitFloor
00010FE0 0C41 FFF8                  		cmpi.w	#-8,d1
00010FE4 6D00                       		blt.s	Obj40_Pause
00010FE6 0C41 000C                  		cmpi.w	#$C,d1
00010FEA 6C00                       		bge.s	Obj40_Pause
00010FEC D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010FF0 5328 0033                  		subq.b	#1,$33(a0)
00010FF4 6A00                       		bpl.s	locret_F756
00010FF6 117C 000F 0033             		move.b	#$F,$33(a0)
00010FFC 6100 E088                  		bsr.w	SingleObjLoad
00011000 6600                       		bne.s	locret_F756
00011002 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
00011006 3368 0008 0008             		move.w	8(a0),8(a1)
0001100C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011012 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011018 137C 0002 001C             		move.b	#2,$1C(a1)
0001101E                            
0001101E                            locret_F756:
0001101E 4E75                       		rts	
00011020                            ; ===========================================================================
00011020                            
00011020                            Obj40_Pause:				; XREF: Obj40_FixToFloor
00011020 5528 0025                  		subq.b	#2,$25(a0)
00011024 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001102A 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
00011030 117C 0000 001C             		move.b	#0,$1C(a0)
00011036 4E75                       		rts	
00011038                            ; ===========================================================================
00011038                            
00011038                            Obj40_Animate:				; XREF: Obj40_Index
00011038 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0001103E 6100 A950                  		bsr.w	AnimateSprite
00011042 6000 D8EC                  		bra.w	DisplaySprite
00011046                            ; ===========================================================================
00011046                            
00011046                            Obj40_Delete:				; XREF: Obj40_Index
00011046 6000 D938                  		bra.w	DeleteObject
0001104A                            ; ===========================================================================
0001104A                            Ani_obj40:
0001104A                            	include "_anim\obj40.asm"
0001104A                            ; ---------------------------------------------------------------------------
0001104A                            ; Animation script - Motobug enemy
0001104A                            ; ---------------------------------------------------------------------------
0001104A 0000                       		dc.w byte_F788-Ani_obj40
0001104C 0000                       		dc.w byte_F78C-Ani_obj40
0001104E 0000                       		dc.w byte_F792-Ani_obj40
00011050 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
00011054 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0001105A 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
00011068                            		even
00011068                            		even
00011068                            
00011068                            ; ---------------------------------------------------------------------------
00011068                            ; Sprite mappings - Moto Bug enemy (GHZ)
00011068                            ; ---------------------------------------------------------------------------
00011068                            Map_obj40:
00011068                            	include "_maps\obj40.asm"
00011068                            ; ---------------------------------------------------------------------------
00011068                            ; Sprite mappings - Moto Bug enemy (GHZ)
00011068                            ; ---------------------------------------------------------------------------
00011068 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
0001106C 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
00011070 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
00011074 0000                       		dc.w byte_F804-Map_obj40
00011076 04                         byte_F7AE:	dc.b 4
00011077 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0001107C 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
00011081 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00011086 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
0001108B 04                         byte_F7C3:	dc.b 4
0001108C F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
00011091 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
00011096 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
0001109B 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
000110A0 05                         byte_F7D8:	dc.b 5
000110A1 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
000110A6 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
000110AB F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000110B0 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
000110B5 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
000110BA 01                         byte_F7F2:	dc.b 1
000110BB FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
000110C0 01                         byte_F7F8:	dc.b 1
000110C1 FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
000110C6 01                         byte_F7FE:	dc.b 1
000110C7 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
000110CC 00                         byte_F804:	dc.b 0
000110CE 00                         		even
000110CE 00                         		even
000110CE                            
000110CE                            ; ===========================================================================
000110CE                            ; ---------------------------------------------------------------------------
000110CE                            ; Object 4F - blank
000110CE                            ; ---------------------------------------------------------------------------
000110CE                            
000110CE                            Obj4F:					; XREF: Obj_Index
000110CE 4E75                       		rts	
000110D0                            
000110D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000110D0                            
000110D0                            
000110D0                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
000110D0 3038 FE04                  		move.w	($FFFFFE04).w,d0
000110D4 D047                       		add.w	d7,d0
000110D6 0240 0003                  		andi.w	#3,d0
000110DA 6600                       		bne.s	loc_F836
000110DC 7600                       		moveq	#0,d3
000110DE 1628 0019                  		move.b	$19(a0),d3
000110E2 4A68 0010                  		tst.w	$10(a0)
000110E6 6B00                       		bmi.s	loc_F82C
000110E8 6100 0000                  		bsr.w	ObjHitWallRight
000110EC 4A41                       		tst.w	d1
000110EE 6A00                       		bpl.s	loc_F836
000110F0                            
000110F0                            loc_F828:
000110F0 7001                       		moveq	#1,d0
000110F2 4E75                       		rts	
000110F4                            ; ===========================================================================
000110F4                            
000110F4                            loc_F82C:
000110F4 4643                       		not.w	d3
000110F6 6100 0000                  		bsr.w	ObjHitWallLeft
000110FA 4A41                       		tst.w	d1
000110FC 6BF2                       		bmi.s	loc_F828
000110FE                            
000110FE                            loc_F836:
000110FE 7000                       		moveq	#0,d0
00011100 4E75                       		rts	
00011102                            ; End of function Obj50_ChkWall
00011102                            
00011102                            ; ===========================================================================
00011102                            ; ---------------------------------------------------------------------------
00011102                            ; Object 50 - Yadrin enemy (SYZ)
00011102                            ; ---------------------------------------------------------------------------
00011102                            
00011102                            Obj50:					; XREF: Obj_Index
00011102 7000                       		moveq	#0,d0
00011104 1028 0024                  		move.b	$24(a0),d0
00011108 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0001110C 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00011110                            ; ===========================================================================
00011110 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00011112 0000                       		dc.w Obj50_Action-Obj50_Index
00011114                            ; ===========================================================================
00011114                            
00011114                            Obj50_Main:				; XREF: Obj50_Index
00011114 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0001111C 317C 247B 0002             		move.w	#$247B,2(a0)
00011122 117C 0004 0001             		move.b	#4,1(a0)
00011128 117C 0004 0018             		move.b	#4,$18(a0)
0001112E 117C 0014 0019             		move.b	#$14,$19(a0)
00011134 117C 0011 0016             		move.b	#$11,$16(a0)
0001113A 117C 0008 0017             		move.b	#8,$17(a0)
00011140 117C 00CC 0020             		move.b	#$CC,$20(a0)
00011146 6100 D7AE                  		bsr.w	ObjectFall
0001114A 6100 0000                  		bsr.w	ObjHitFloor
0001114E 4A41                       		tst.w	d1
00011150 6A00                       		bpl.s	locret_F89E
00011152 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00011156 317C 0000 0012             		move.w	#0,$12(a0)
0001115C 5428 0024                  		addq.b	#2,$24(a0)
00011160 0868 0000 0022             		bchg	#0,$22(a0)
00011166                            
00011166                            locret_F89E:
00011166 4E75                       		rts	
00011168                            ; ===========================================================================
00011168                            
00011168                            Obj50_Action:				; XREF: Obj50_Index
00011168 7000                       		moveq	#0,d0
0001116A 1028 0025                  		move.b	$25(a0),d0
0001116E 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00011172 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
00011176 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0001117C 6100 A812                  		bsr.w	AnimateSprite
00011180 6000 FDF8                  		bra.w	MarkObjGone
00011184                            ; ===========================================================================
00011184 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
00011186 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
00011188                            ; ===========================================================================
00011188                            
00011188                            Obj50_Move:				; XREF: Obj50_Index2
00011188 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0001118C 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0001118E 5428 0025                  		addq.b	#2,$25(a0)
00011192 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
00011198 117C 0001 001C             		move.b	#1,$1C(a0)
0001119E 0868 0000 0022             		bchg	#0,$22(a0)
000111A4 6600                       		bne.s	locret_F8E2
000111A6 4468 0010                  		neg.w	$10(a0)		; change direction
000111AA                            
000111AA                            locret_F8E2:
000111AA 4E75                       		rts	
000111AC                            ; ===========================================================================
000111AC                            
000111AC                            Obj50_FixToFloor:			; XREF: Obj50_Index2
000111AC 6100 D768                  		bsr.w	SpeedToPos
000111B0 6100 0000                  		bsr.w	ObjHitFloor
000111B4 0C41 FFF8                  		cmpi.w	#-8,d1
000111B8 6D00                       		blt.s	Obj50_Pause
000111BA 0C41 000C                  		cmpi.w	#$C,d1
000111BE 6C00                       		bge.s	Obj50_Pause
000111C0 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
000111C4 6100 FF0A                  		bsr.w	Obj50_ChkWall
000111C8 6600                       		bne.s	Obj50_Pause
000111CA 4E75                       		rts	
000111CC                            ; ===========================================================================
000111CC                            
000111CC                            Obj50_Pause:				; XREF: Obj50_FixToFloor
000111CC 5528 0025                  		subq.b	#2,$25(a0)
000111D0 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000111D6 317C 0000 0010             		move.w	#0,$10(a0)
000111DC 117C 0000 001C             		move.b	#0,$1C(a0)
000111E2 4E75                       		rts	
000111E4                            ; ===========================================================================
000111E4                            Ani_obj50:
000111E4                            	include "_anim\obj50.asm"
000111E4                            ; ---------------------------------------------------------------------------
000111E4                            ; Animation script - Yadrin enemy
000111E4                            ; ---------------------------------------------------------------------------
000111E4 0000                       		dc.w byte_F920-Ani_obj50
000111E6 0000                       		dc.w byte_F924-Ani_obj50
000111E8 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
000111EC 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
000111F6                            		even
000111F6                            		even
000111F6                            
000111F6                            ; ---------------------------------------------------------------------------
000111F6                            ; Sprite mappings - Yadrin enemy (SYZ)
000111F6                            ; ---------------------------------------------------------------------------
000111F6                            Map_obj50:
000111F6                            	include "_maps\obj50.asm"
000111F6                            ; ---------------------------------------------------------------------------
000111F6                            ; Sprite mappings - Yadrin enemy (SYZ)
000111F6                            ; ---------------------------------------------------------------------------
000111F6 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
000111FA 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
000111FE 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
00011202 05                         byte_F93A:	dc.b 5
00011203 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00011208 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0001120D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011212 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011217 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0001121C 05                         byte_F954:	dc.b 5
0001121D F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00011222 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00011227 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001122C F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011231 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00011236 05                         byte_F96E:	dc.b 5
00011237 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0001123C 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00011241 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011246 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001124B 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00011250 05                         byte_F988:	dc.b 5
00011251 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00011256 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0001125B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011260 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011265 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0001126A 05                         byte_F9A2:	dc.b 5
0001126B F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00011270 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00011275 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001127A F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001127F 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00011284 05                         byte_F9BC:	dc.b 5
00011285 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0001128A 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0001128F EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011294 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011299 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0001129E                            		even
0001129E                            		even
0001129E                            
0001129E                            ; ---------------------------------------------------------------------------
0001129E                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0001129E                            ;
0001129E                            ; variables:
0001129E                            ; d1 = width
0001129E                            ; d2 = height /	2 (when	jumping)
0001129E                            ; d3 = height /	2 (when	walking)
0001129E                            ; d4 = x-axis position
0001129E                            ; ---------------------------------------------------------------------------
0001129E                            
0001129E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001129E                            
0001129E                            
0001129E                            SolidObject:
0001129E 4A28 0025                  		tst.b	$25(a0)
000112A2 6700 0000                  		beq.w	loc_FAC8
000112A6 3401                       		move.w	d1,d2
000112A8 D442                       		add.w	d2,d2
000112AA 43F8 D000                  		lea	($FFFFD000).w,a1
000112AE 0829 0001 0022             		btst	#1,$22(a1)
000112B4 6600                       		bne.s	loc_F9FE
000112B6 3029 0008                  		move.w	8(a1),d0
000112BA 9068 0008                  		sub.w	8(a0),d0
000112BE D041                       		add.w	d1,d0
000112C0 6B00                       		bmi.s	loc_F9FE
000112C2 B042                       		cmp.w	d2,d0
000112C4 6500                       		bcs.s	loc_FA12
000112C6                            
000112C6                            loc_F9FE:
000112C6 08A9 0003 0022             		bclr	#3,$22(a1)
000112CC 08A8 0003 0022             		bclr	#3,$22(a0)
000112D2 4228 0025                  		clr.b	$25(a0)
000112D6 7800                       		moveq	#0,d4
000112D8 4E75                       		rts	
000112DA                            ; ===========================================================================
000112DA                            
000112DA                            loc_FA12:
000112DA 3404                       		move.w	d4,d2
000112DC 4EB9 0000 8C0E             		jsr	(MvSonicOnPtfm).l
000112E2 7800                       		moveq	#0,d4
000112E4 4E75                       		rts	
000112E6                            ; ===========================================================================
000112E6                            
000112E6                            SolidObject71:				; XREF: Obj71_Solid
000112E6 4A28 0025                  		tst.b	$25(a0)
000112EA 6700 0000                  		beq.w	loc_FAD0
000112EE 3401                       		move.w	d1,d2
000112F0 D442                       		add.w	d2,d2
000112F2 43F8 D000                  		lea	($FFFFD000).w,a1
000112F6 0829 0001 0022             		btst	#1,$22(a1)
000112FC 6600                       		bne.s	loc_FA44
000112FE 3029 0008                  		move.w	8(a1),d0
00011302 9068 0008                  		sub.w	8(a0),d0
00011306 D041                       		add.w	d1,d0
00011308 6B00                       		bmi.s	loc_FA44
0001130A B042                       		cmp.w	d2,d0
0001130C 6500                       		bcs.s	loc_FA58
0001130E                            
0001130E                            loc_FA44:
0001130E 08A9 0003 0022             		bclr	#3,$22(a1)
00011314 08A8 0003 0022             		bclr	#3,$22(a0)
0001131A 4228 0025                  		clr.b	$25(a0)
0001131E 7800                       		moveq	#0,d4
00011320 4E75                       		rts	
00011322                            ; ===========================================================================
00011322                            
00011322                            loc_FA58:
00011322 3404                       		move.w	d4,d2
00011324 4EB9 0000 8C0E             		jsr	(MvSonicOnPtfm).l
0001132A 7800                       		moveq	#0,d4
0001132C 4E75                       		rts	
0001132E                            ; ===========================================================================
0001132E                            
0001132E                            SolidObject2F:				; XREF: Obj2F_Solid
0001132E 43F8 D000                  		lea	($FFFFD000).w,a1
00011332 4A28 0001                  		tst.b	1(a0)
00011336 6A00 0000                  		bpl.w	loc_FB92
0001133A 3029 0008                  		move.w	8(a1),d0
0001133E 9068 0008                  		sub.w	8(a0),d0
00011342 D041                       		add.w	d1,d0
00011344 6B00 0000                  		bmi.w	loc_FB92
00011348 3601                       		move.w	d1,d3
0001134A D643                       		add.w	d3,d3
0001134C B043                       		cmp.w	d3,d0
0001134E 6200 0000                  		bhi.w	loc_FB92
00011352 3A00                       		move.w	d0,d5
00011354 0828 0000 0001             		btst	#0,1(a0)
0001135A 6700                       		beq.s	loc_FA94
0001135C 4645                       		not.w	d5
0001135E DA43                       		add.w	d3,d5
00011360                            
00011360                            loc_FA94:
00011360 E24D                       		lsr.w	#1,d5
00011362 7600                       		moveq	#0,d3
00011364 1632 5000                  		move.b	(a2,d5.w),d3
00011368 9612                       		sub.b	(a2),d3
0001136A 3A28 000C                  		move.w	$C(a0),d5
0001136E 9A43                       		sub.w	d3,d5
00011370 1629 0016                  		move.b	$16(a1),d3
00011374 4883                       		ext.w	d3
00011376 D443                       		add.w	d3,d2
00011378 3629 000C                  		move.w	$C(a1),d3
0001137C 9645                       		sub.w	d5,d3
0001137E 5843                       		addq.w	#4,d3
00011380 D642                       		add.w	d2,d3
00011382 6B00 0000                  		bmi.w	loc_FB92
00011386 3802                       		move.w	d2,d4
00011388 D844                       		add.w	d4,d4
0001138A B644                       		cmp.w	d4,d3
0001138C 6400 0000                  		bcc.w	loc_FB92
00011390 6000 0000                  		bra.w	loc_FB0E
00011394                            ; ===========================================================================
00011394                            
00011394                            loc_FAC8:
00011394 4A28 0001                  		tst.b	1(a0)
00011398 6A00 0000                  		bpl.w	loc_FB92
0001139C                            
0001139C                            loc_FAD0:
0001139C 43F8 D000                  		lea	($FFFFD000).w,a1
000113A0 3029 0008                  		move.w	8(a1),d0
000113A4 9068 0008                  		sub.w	8(a0),d0
000113A8 D041                       		add.w	d1,d0
000113AA 6B00 0000                  		bmi.w	loc_FB92
000113AE 3601                       		move.w	d1,d3
000113B0 D643                       		add.w	d3,d3
000113B2 B043                       		cmp.w	d3,d0
000113B4 6200 0000                  		bhi.w	loc_FB92
000113B8 1629 0016                  		move.b	$16(a1),d3
000113BC 4883                       		ext.w	d3
000113BE D443                       		add.w	d3,d2
000113C0 3629 000C                  		move.w	$C(a1),d3
000113C4 9668 000C                  		sub.w	$C(a0),d3
000113C8 5843                       		addq.w	#4,d3
000113CA D642                       		add.w	d2,d3
000113CC 6B00 0000                  		bmi.w	loc_FB92
000113D0 3802                       		move.w	d2,d4
000113D2 D844                       		add.w	d4,d4
000113D4 B644                       		cmp.w	d4,d3
000113D6 6400 0000                  		bcc.w	loc_FB92
000113DA                            
000113DA                            loc_FB0E:
000113DA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000113DE 6B00 0000                  		bmi.w	loc_FB92
000113E2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000113E8 6400 0000                  		bcc.w	loc_FB92
000113EC 4A78 FE08                  		tst.w	($FFFFFE08).w
000113F0 6600 0000                  		bne.w	loc_FBAC
000113F4 3A00                       		move.w	d0,d5
000113F6 B240                       		cmp.w	d0,d1
000113F8 6400                       		bcc.s	loc_FB36
000113FA D241                       		add.w	d1,d1
000113FC 9041                       		sub.w	d1,d0
000113FE 3A00                       		move.w	d0,d5
00011400 4445                       		neg.w	d5
00011402                            
00011402                            loc_FB36:
00011402 3203                       		move.w	d3,d1
00011404 B443                       		cmp.w	d3,d2
00011406 6400                       		bcc.s	loc_FB44
00011408 5943                       		subq.w	#4,d3
0001140A 9644                       		sub.w	d4,d3
0001140C 3203                       		move.w	d3,d1
0001140E 4441                       		neg.w	d1
00011410                            
00011410                            loc_FB44:
00011410 BA41                       		cmp.w	d1,d5
00011412 6200 0000                  		bhi.w	loc_FBB0
00011416 0C41 0004                  		cmpi.w	#4,d1
0001141A 6300                       		bls.s	loc_FB8C
0001141C 4A40                       		tst.w	d0
0001141E 6700                       		beq.s	loc_FB70
00011420 6B00                       		bmi.s	loc_FB5E
00011422 4A69 0010                  		tst.w	$10(a1)
00011426 6B00                       		bmi.s	loc_FB70
00011428 6000                       		bra.s	loc_FB64
0001142A                            ; ===========================================================================
0001142A                            
0001142A                            loc_FB5E:
0001142A 4A69 0010                  		tst.w	$10(a1)
0001142E 6A00                       		bpl.s	loc_FB70
00011430                            
00011430                            loc_FB64:
00011430 337C 0000 0020             		move.w	#0,$20(a1)	; stop Sonic moving
00011436 337C 0000 0010             		move.w	#0,$10(a1)
0001143C                            
0001143C                            loc_FB70:
0001143C 9169 0008                  		sub.w	d0,8(a1)
00011440 0829 0001 0022             		btst	#1,$22(a1)
00011446 6600                       		bne.s	loc_FB8C
00011448 08E9 0005 0022             		bset	#5,$22(a1)
0001144E 08E8 0005 0022             		bset	#5,$22(a0)
00011454 7801                       		moveq	#1,d4
00011456 4E75                       		rts	
00011458                            ; ===========================================================================
00011458                            
00011458                            loc_FB8C:
00011458 6100                       		bsr.s	loc_FBA0
0001145A 7801                       		moveq	#1,d4
0001145C 4E75                       		rts	
0001145E                            ; ===========================================================================
0001145E                            loc_FB92:
0001145E 0828 0005 0022             		btst	#5,$22(a0)
00011464 6700                       		beq.s	loc_FBAC
00011466 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0001146C 6700                       		beq.s	loc_FBA0
0001146E 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
00011474 6700                       		beq.s	loc_FBA0
00011476 0C29 001A 001C             		cmp.b	#$1A,$1C(a1)	; check if in hurt animation
0001147C 6700                       		beq.s	loc_FBA0
0001147E 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00011484                            
00011484                            loc_FBA0:
00011484 08A8 0005 0022             		bclr	#5,$22(a0)
0001148A 08A9 0005 0022             		bclr	#5,$22(a1)
00011490                            
00011490                            loc_FBAC:
00011490 7800                       		moveq	#0,d4
00011492 4E75                       		rts	
00011494                            ; ===========================================================================
00011494                            
00011494                            loc_FBB0:
00011494 4A43                       		tst.w	d3
00011496 6B00                       		bmi.s	loc_FBBC
00011498 0C43 0010                  		cmpi.w	#$10,d3
0001149C 6500                       		bcs.s	loc_FBEE
0001149E 60BE                       		bra.s	loc_FB92
000114A0                            ; ===========================================================================
000114A0                            
000114A0                            loc_FBBC:
000114A0 4A69 0012                  		tst.w	$12(a1)
000114A4 6700                       		beq.s	loc_FBD6
000114A6 6A00                       		bpl.s	loc_FBD2
000114A8 4A43                       		tst.w	d3
000114AA 6A00                       		bpl.s	loc_FBD2
000114AC 9769 000C                  		sub.w	d3,$C(a1)
000114B0 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
000114B6                            
000114B6                            loc_FBD2:
000114B6 78FF                       		moveq	#-1,d4
000114B8 4E75                       		rts	
000114BA                            ; ===========================================================================
000114BA                            
000114BA                            loc_FBD6:
000114BA 0829 0001 0022             		btst	#1,$22(a1)
000114C0 66F4                       		bne.s	loc_FBD2
000114C2 2F08                       		move.l	a0,-(sp)
000114C4 2049                       		movea.l	a1,a0
000114C6 4EB9 0000 0000             		jsr	KillSonic
000114CC 205F                       		movea.l	(sp)+,a0
000114CE 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
000114D4 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
000114DA 78FF                       		moveq	#-1,d4
000114DC 4E75                       		rts	
000114DE                            ; ===========================================================================
000114DE                            
000114DE                            loc_FBEE:
000114DE 5943                       		subq.w	#4,d3
000114E0 7200                       		moveq	#0,d1
000114E2 1228 0019                  		move.b	$19(a0),d1
000114E6 3401                       		move.w	d1,d2
000114E8 D442                       		add.w	d2,d2
000114EA D269 0008                  		add.w	8(a1),d1
000114EE 9268 0008                  		sub.w	8(a0),d1
000114F2 6B00                       		bmi.s	loc_FC28
000114F4 B242                       		cmp.w	d2,d1
000114F6 6400                       		bcc.s	loc_FC28
000114F8 4A69 0012                  		tst.w	$12(a1)
000114FC 6B00                       		bmi.s	loc_FC28
000114FE 9769 000C                  		sub.w	d3,$C(a1)
00011502 5369 000C                  		subq.w	#1,$C(a1)
00011506 6100                       		bsr.s	sub_FC2C
00011508 117C 0002 0025             		move.b	#2,$25(a0)
0001150E 08E8 0003 0022             		bset	#3,$22(a0)
00011514 78FF                       		moveq	#-1,d4
00011516 4E75                       		rts	
00011518                            ; ===========================================================================
00011518                            
00011518                            loc_FC28:
00011518 7800                       		moveq	#0,d4
0001151A 4E75                       		rts	
0001151C                            ; End of function SolidObject
0001151C                            
0001151C                            
0001151C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001151C                            
0001151C                            
0001151C                            sub_FC2C:				; XREF: SolidObject
0001151C 0829 0003 0022             		btst	#3,$22(a1)
00011522 6700                       		beq.s	loc_FC4E
00011524 7000                       		moveq	#0,d0
00011526 1029 003D                  		move.b	$3D(a1),d0
0001152A ED48                       		lsl.w	#6,d0
0001152C 0680 00FF D000             		addi.l	#$FFD000,d0
00011532 2440                       		movea.l	d0,a2
00011534 08AA 0003 0022             		bclr	#3,$22(a2)
0001153A 422A 0025                  		clr.b	$25(a2)
0001153E                            
0001153E                            loc_FC4E:
0001153E 3008                       		move.w	a0,d0
00011540 0440 D000                  		subi.w	#-$3000,d0
00011544 EC48                       		lsr.w	#6,d0
00011546 0240 007F                  		andi.w	#$7F,d0
0001154A 1340 003D                  		move.b	d0,$3D(a1)
0001154E 137C 0000 0026             		move.b	#0,$26(a1)
00011554 337C 0000 0012             		move.w	#0,$12(a1)
0001155A 3369 0010 0020             		move.w	$10(a1),$20(a1)
00011560 0829 0001 0022             		btst	#1,$22(a1)
00011566 6700                       		beq.s	loc_FC84
00011568 2F08                       		move.l	a0,-(sp)
0001156A 2049                       		movea.l	a1,a0
0001156C 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00011572 205F                       		movea.l	(sp)+,a0
00011574                            
00011574                            loc_FC84:
00011574 08E9 0003 0022             		bset	#3,$22(a1)
0001157A 08E8 0003 0022             		bset	#3,$22(a0)
00011580 4E75                       		rts	
00011582                            ; End of function sub_FC2C
00011582                            
00011582                            ; ===========================================================================
00011582                            ; ---------------------------------------------------------------------------
00011582                            ; Object 51 - smashable	green block (MZ)
00011582                            ; ---------------------------------------------------------------------------
00011582                            
00011582                            Obj51:					; XREF: Obj_Index
00011582 7000                       		moveq	#0,d0
00011584 1028 0024                  		move.b	$24(a0),d0
00011588 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0001158C 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00011590 6000 F9E8                  		bra.w	MarkObjGone
00011594                            ; ===========================================================================
00011594 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00011596 0000                       		dc.w Obj51_Solid-Obj51_Index
00011598 0000                       		dc.w Obj51_Display-Obj51_Index
0001159A                            ; ===========================================================================
0001159A                            
0001159A                            Obj51_Main:				; XREF: Obj51_Index
0001159A 5428 0024                  		addq.b	#2,$24(a0)
0001159E 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000115A6 317C 42B8 0002             		move.w	#$42B8,2(a0)
000115AC 117C 0004 0001             		move.b	#4,1(a0)
000115B2 117C 0010 0019             		move.b	#$10,$19(a0)
000115B8 117C 0004 0018             		move.b	#4,$18(a0)
000115BE 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000115C4                            
000115C4                            Obj51_Solid:				; XREF: Obj51_Index
000115C4 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
000115CA 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
000115D0 323C 001B                  		move.w	#$1B,d1
000115D4 343C 0010                  		move.w	#$10,d2
000115D8 363C 0011                  		move.w	#$11,d3
000115DC 3828 0008                  		move.w	8(a0),d4
000115E0 6100 FCBC                  		bsr.w	SolidObject
000115E4 0828 0003 0022             		btst	#3,$22(a0)
000115EA 6600                       		bne.s	Obj51_Smash
000115EC                            
000115EC                            locret_FCFC:
000115EC 4E75                       		rts	
000115EE                            ; ===========================================================================
000115EE                            
000115EE                            Obj51_Smash:				; XREF: Obj51_Solid
000115EE 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000115F4 66F6                       		bne.s	locret_FCFC	; if not, branch
000115F6 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000115FC 08E9 0002 0022             		bset	#2,$22(a1)
00011602 137C 000E 0016             		move.b	#$E,$16(a1)
00011608 137C 0007 0017             		move.b	#7,$17(a1)
0001160E 137C 0002 001C             		move.b	#2,$1C(a1)
00011614 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0001161A 08E9 0001 0022             		bset	#1,$22(a1)
00011620 08A9 0003 0022             		bclr	#3,$22(a1)
00011626 137C 0002 0024             		move.b	#2,$24(a1)
0001162C 08A8 0003 0022             		bclr	#3,$22(a0)
00011632 4228 0025                  		clr.b	$25(a0)
00011636 117C 0001 001A             		move.b	#1,$1A(a0)
0001163C 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00011642 7203                       		moveq	#3,d1		; set number of	fragments to 4
00011644 343C 0038                  		move.w	#$38,d2
00011648 6100 CEE4                  		bsr.w	SmashObject
0001164C 6100 DA38                  		bsr.w	SingleObjLoad
00011650 6600                       		bne.s	Obj51_Display
00011652 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00011656 3368 0008 0008             		move.w	8(a0),8(a1)
0001165C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011662 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00011666 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0001166A 0C42 0006                  		cmpi.w	#6,d2
0001166E 6500                       		bcs.s	Obj51_Bonus
00011670 7406                       		moveq	#6,d2
00011672                            
00011672                            Obj51_Bonus:
00011672 7000                       		moveq	#0,d0
00011674 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00011678 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0001167E 6500                       		bcs.s	loc_FD98	; if not, branch
00011680 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00011684 740A                       		moveq	#10,d2
00011686                            
00011686                            loc_FD98:
00011686 4EB9 0000 0000             		jsr	AddPoints
0001168C E24A                       		lsr.w	#1,d2
0001168E 1342 001A                  		move.b	d2,$1A(a1)
00011692                            
00011692                            Obj51_Display:				; XREF: Obj51_Index
00011692 6100 D282                  		bsr.w	SpeedToPos
00011696 0668 0038 0012             		addi.w	#$38,$12(a0)
0001169C 6100 D292                  		bsr.w	DisplaySprite
000116A0 4A28 0001                  		tst.b	1(a0)
000116A4 6A00 D2DA                  		bpl.w	DeleteObject
000116A8 4E75                       		rts	
000116AA                            ; ===========================================================================
000116AA FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000116AE FF00 FF00                  		dc.w $FF00, $FF00
000116B2 0200 FE00                  		dc.w $200, $FE00
000116B6 0100 FF00                  		dc.w $100, $FF00
000116BA                            
000116BA 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000116C2                            ; ---------------------------------------------------------------------------
000116C2                            ; Sprite mappings - smashable green block (MZ)
000116C2                            ; ---------------------------------------------------------------------------
000116C2                            Map_obj51:
000116C2                            	include "_maps\obj51.asm"
000116C2                            ; ---------------------------------------------------------------------------
000116C2                            ; Sprite mappings - smashable green block (MZ)
000116C2                            ; ---------------------------------------------------------------------------
000116C2 0000                       		dc.w byte_FDD8-Map_obj51
000116C4 0000                       		dc.w byte_FDE3-Map_obj51
000116C6 02                         byte_FDD8:	dc.b 2
000116C7 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
000116CC 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000116D1 04                         byte_FDE3:	dc.b 4
000116D2 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000116D7 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000116DC F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000116E1 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000116E6                            		even
000116E6                            		even
000116E6                            
000116E6                            ; ===========================================================================
000116E6                            ; ---------------------------------------------------------------------------
000116E6                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000116E6                            ; ---------------------------------------------------------------------------
000116E6                            
000116E6                            Obj52:					; XREF: Obj_Index
000116E6 7000                       		moveq	#0,d0
000116E8 1028 0024                  		move.b	$24(a0),d0
000116EC 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000116F0 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000116F4                            ; ===========================================================================
000116F4 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000116F6 0000                       		dc.w Obj52_Platform-Obj52_Index
000116F8 0000                       		dc.w Obj52_StandOn-Obj52_Index
000116FA                            
000116FA 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
000116FC 2001                       		dc.b $20, 1
000116FE 2002                       		dc.b $20, 2
00011700 4003                       		dc.b $40, 3
00011702 3004                       		dc.b $30, 4
00011704                            ; ===========================================================================
00011704                            
00011704                            Obj52_Main:				; XREF: Obj52_Index
00011704 5428 0024                  		addq.b	#2,$24(a0)
00011708 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00011710 317C 42B8 0002             		move.w	#$42B8,2(a0)
00011716 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001171C 6600                       		bne.s	loc_FE44
0001171E 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00011726 317C 43BC 0002             		move.w	#$43BC,2(a0)
0001172C 117C 0007 0016             		move.b	#7,$16(a0)
00011732                            
00011732                            loc_FE44:
00011732 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00011738 6600                       		bne.s	loc_FE60
0001173A 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00011740 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00011746 6700                       		beq.s	loc_FE60	; if yes, branch
00011748 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0001174E                            
0001174E                            loc_FE60:
0001174E 117C 0004 0001             		move.b	#4,1(a0)
00011754 7000                       		moveq	#0,d0
00011756 1028 0028                  		move.b	$28(a0),d0
0001175A E648                       		lsr.w	#3,d0
0001175C 0240 001E                  		andi.w	#$1E,d0
00011760 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00011764 115A 0019                  		move.b	(a2)+,$19(a0)
00011768 115A 001A                  		move.b	(a2)+,$1A(a0)
0001176C 117C 0004 0018             		move.b	#4,$18(a0)
00011772 3168 0008 0030             		move.w	8(a0),$30(a0)
00011778 3168 000C 0032             		move.w	$C(a0),$32(a0)
0001177E 0228 000F 0028             		andi.b	#$F,$28(a0)
00011784                            
00011784                            Obj52_Platform:				; XREF: Obj52_Index
00011784 6100 0000                  		bsr.w	Obj52_Move
00011788 7200                       		moveq	#0,d1
0001178A 1228 0019                  		move.b	$19(a0),d1
0001178E 4EB9 0000 8530             		jsr	(PlatformObject).l
00011794 6000                       		bra.s	Obj52_ChkDel
00011796                            ; ===========================================================================
00011796                            
00011796                            Obj52_StandOn:				; XREF: Obj52_Index
00011796 7200                       		moveq	#0,d1
00011798 1228 0019                  		move.b	$19(a0),d1
0001179C 4EB9 0000 86A4             		jsr	(ExitPlatform).l
000117A2 3F28 0008                  		move.w	8(a0),-(sp)
000117A6 6100 0000                  		bsr.w	Obj52_Move
000117AA 341F                       		move.w	(sp)+,d2
000117AC 4EB9 0000 8C1A             		jsr	(MvSonicOnPtfm2).l
000117B2                            
000117B2                            Obj52_ChkDel:				; XREF: Obj52_Platform
000117B2 3028 0030                  		move.w	$30(a0),d0
000117B6 0240 FF80                  		andi.w	#$FF80,d0
000117BA 3238 F700                  		move.w	($FFFFF700).w,d1
000117BE 0441 0080                  		subi.w	#$80,d1
000117C2 0241 FF80                  		andi.w	#$FF80,d1
000117C6 9041                       		sub.w	d1,d0
000117C8 0C40 0280                  		cmpi.w	#$280,d0
000117CC 6300 D162                  		bls.w	DisplaySprite
000117D0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000117D4 6700 D1AA                  		beq.w	DeleteObject		; if it's zero, don't remember object
000117D8 3440                       		movea.w	d0,a2	; load address into a2
000117DA 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000117DE 6000 D1A0                  		bra.w	DeleteObject	; and delete object
000117E2                            ; ===========================================================================
000117E2                            
000117E2                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000117E2 7000                       		moveq	#0,d0
000117E4 1028 0028                  		move.b	$28(a0),d0
000117E8 0240 000F                  		andi.w	#$F,d0
000117EC D040                       		add.w	d0,d0
000117EE 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000117F2 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000117F6                            ; ===========================================================================
000117F6 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000117FA 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000117FE 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00011802 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00011806 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
0001180A 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
0001180C                            ; ===========================================================================
0001180C                            
0001180C                            Obj52_Type00:				; XREF: Obj52_TypeIndex
0001180C 4E75                       		rts	
0001180E                            ; ===========================================================================
0001180E                            
0001180E                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0001180E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011812 323C 0060                  		move.w	#$60,d1
00011816 0828 0000 0022             		btst	#0,$22(a0)
0001181C 6700                       		beq.s	loc_FF26
0001181E 4440                       		neg.w	d0
00011820 D041                       		add.w	d1,d0
00011822                            
00011822                            loc_FF26:
00011822 3228 0030                  		move.w	$30(a0),d1
00011826 9240                       		sub.w	d0,d1
00011828 3141 0008                  		move.w	d1,8(a0)
0001182C 4E75                       		rts	
0001182E                            ; ===========================================================================
0001182E                            
0001182E                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0001182E 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00011834 6600                       		bne.s	Obj52_02_Wait
00011836 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001183A                            
0001183A                            Obj52_02_Wait:
0001183A 4E75                       		rts	
0001183C                            ; ===========================================================================
0001183C                            
0001183C                            Obj52_Type03:				; XREF: Obj52_TypeIndex
0001183C 7600                       		moveq	#0,d3
0001183E 1628 0019                  		move.b	$19(a0),d3
00011842 6100 0000                  		bsr.w	ObjHitWallRight
00011846 4A41                       		tst.w	d1		; has the platform hit a wall?
00011848 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
0001184A 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001184E 3168 0008 0030             		move.w	8(a0),$30(a0)
00011854 4E75                       		rts	
00011856                            ; ===========================================================================
00011856                            
00011856                            Obj52_03_End:
00011856 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
0001185A 4E75                       		rts	
0001185C                            ; ===========================================================================
0001185C                            
0001185C                            Obj52_Type05:				; XREF: Obj52_TypeIndex
0001185C 7600                       		moveq	#0,d3
0001185E 1628 0019                  		move.b	$19(a0),d3
00011862 6100 0000                  		bsr.w	ObjHitWallRight
00011866 4A41                       		tst.w	d1		; has the platform hit a wall?
00011868 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
0001186A 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001186E 3168 0008 0030             		move.w	8(a0),$30(a0)
00011874 4E75                       		rts	
00011876                            ; ===========================================================================
00011876                            
00011876                            Obj52_05_End:
00011876 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
0001187A 4E75                       		rts	
0001187C                            ; ===========================================================================
0001187C                            
0001187C                            Obj52_Type06:				; XREF: Obj52_TypeIndex
0001187C 6100 D098                  		bsr.w	SpeedToPos
00011880 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00011886 6100 0000                  		bsr.w	ObjHitFloor
0001188A 4A41                       		tst.w	d1		; has platform hit the floor?
0001188C 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00011890 D368 000C                  		add.w	d1,$C(a0)
00011894 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00011898 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
0001189C                            
0001189C                            locret_FFA0:
0001189C 4E75                       		rts	
0001189E                            ; ===========================================================================
0001189E                            
0001189E                            Obj52_Type07:				; XREF: Obj52_TypeIndex
0001189E 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
000118A2 6700                       		beq.s	Obj52_07_ChkDel
000118A4 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
000118A8                            
000118A8                            Obj52_07_ChkDel:
000118A8 588F                       		addq.l	#4,sp
000118AA 3028 0030                  		move.w	$30(a0),d0
000118AE 0240 FF80                  		andi.w	#$FF80,d0
000118B2 3238 F700                  		move.w	($FFFFF700).w,d1
000118B6 0441 0080                  		subi.w	#$80,d1
000118BA 0241 FF80                  		andi.w	#$FF80,d1
000118BE 9041                       		sub.w	d1,d0
000118C0 0C40 0280                  		cmpi.w	#$280,d0
000118C4 6200 D0BA                  		bhi.w	DeleteObject
000118C8 4E75                       		rts	
000118CA                            ; ===========================================================================
000118CA                            
000118CA                            Obj52_Type08:				; XREF: Obj52_TypeIndex
000118CA 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000118CE 323C 0080                  		move.w	#$80,d1
000118D2 0828 0000 0022             		btst	#0,$22(a0)
000118D8 6700                       		beq.s	loc_FFE2
000118DA 4440                       		neg.w	d0
000118DC D041                       		add.w	d1,d0
000118DE                            
000118DE                            loc_FFE2:
000118DE 3228 0032                  		move.w	$32(a0),d1
000118E2 9240                       		sub.w	d0,d1
000118E4 3141 000C                  		move.w	d1,$C(a0)
000118E8 4E75                       		rts	
000118EA                            ; ===========================================================================
000118EA                            
000118EA                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
000118EA 7600                       		moveq	#0,d3
000118EC 1628 0019                  		move.b	$19(a0),d3
000118F0 D643                       		add.w	d3,d3
000118F2 7208                       		moveq	#8,d1
000118F4 0828 0000 0022             		btst	#0,$22(a0)
000118FA 6700                       		beq.s	loc_10004
000118FC 4441                       		neg.w	d1
000118FE 4443                       		neg.w	d3
00011900                            
00011900                            loc_10004:
00011900 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00011904 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00011906 3028 0008                  		move.w	8(a0),d0
0001190A 9068 0030                  		sub.w	$30(a0),d0
0001190E B043                       		cmp.w	d3,d0
00011910 6700                       		beq.s	Obj52_0A_Wait
00011912 D368 0008                  		add.w	d1,8(a0)	; move platform
00011916 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
0001191C 4E75                       		rts	
0001191E                            ; ===========================================================================
0001191E                            
0001191E                            Obj52_0A_Wait:
0001191E 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00011922 6600                       		bne.s	locret_1002E	; if time remains, branch
00011924 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
0001192A                            
0001192A                            locret_1002E:
0001192A 4E75                       		rts	
0001192C                            ; ===========================================================================
0001192C                            
0001192C                            Obj52_0A_Back:
0001192C 3028 0008                  		move.w	8(a0),d0
00011930 9068 0030                  		sub.w	$30(a0),d0
00011934 6700                       		beq.s	Obj52_0A_Reset
00011936 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
0001193A 4E75                       		rts	
0001193C                            ; ===========================================================================
0001193C                            
0001193C                            Obj52_0A_Reset:
0001193C 4268 0036                  		clr.w	$36(a0)
00011940 5328 0028                  		subq.b	#1,$28(a0)
00011944 4E75                       		rts	
00011946                            ; ===========================================================================
00011946                            ; ---------------------------------------------------------------------------
00011946                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011946                            ; ---------------------------------------------------------------------------
00011946                            Map_obj52:
00011946                            	include "_maps\obj52mz.asm"
00011946                            ; ---------------------------------------------------------------------------
00011946                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011946                            ; ---------------------------------------------------------------------------
00011946 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
0001194A 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
0001194E 0000                       		dc.w byte_1008F-Map_obj52
00011950 01                         byte_10054:	dc.b 1
00011951 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011956 02                         byte_1005A:	dc.b 2
00011957 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
0001195C F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00011961 04                         byte_10065:	dc.b 4
00011962 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00011967 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
0001196C F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00011971 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00011976 04                         byte_1007A:	dc.b 4
00011977 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
0001197C F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00011981 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00011986 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
0001198B 03                         byte_1008F:	dc.b 3
0001198C F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00011991 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011996 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
0001199C 00                         		even
0001199C 00                         		even
0001199C                            
0001199C                            ; ---------------------------------------------------------------------------
0001199C                            ; Sprite mappings - moving block (LZ)
0001199C                            ; ---------------------------------------------------------------------------
0001199C                            Map_obj52a:
0001199C                            	include "_maps\obj52lz.asm"
0001199C                            ; ---------------------------------------------------------------------------
0001199C                            ; Sprite mappings - moving block (LZ)
0001199C                            ; ---------------------------------------------------------------------------
0001199C 0000                       		dc.w byte_100A2-Map_obj52a
0001199E 01                         byte_100A2:	dc.b 1
0001199F F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
000119A4                            		even
000119A4                            		even
000119A4                            
000119A4                            ; ===========================================================================
000119A4                            ; ---------------------------------------------------------------------------
000119A4                            ; Object 55 - Basaran enemy (MZ)
000119A4                            ; ---------------------------------------------------------------------------
000119A4                            
000119A4                            Obj55:					; XREF: Obj_Index
000119A4 7000                       		moveq	#0,d0
000119A6 1028 0024                  		move.b	$24(a0),d0
000119AA 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
000119AE 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
000119B2                            ; ===========================================================================
000119B2 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
000119B4 0000                       		dc.w Obj55_Action-Obj55_Index
000119B6                            ; ===========================================================================
000119B6                            
000119B6                            Obj55_Main:				; XREF: Obj55_Index
000119B6 5428 0024                  		addq.b	#2,$24(a0)
000119BA 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
000119C2 317C 84B8 0002             		move.w	#$84B8,2(a0)
000119C8 117C 0004 0001             		move.b	#4,1(a0)
000119CE 117C 000C 0016             		move.b	#$C,$16(a0)
000119D4 117C 0002 0018             		move.b	#2,$18(a0)
000119DA 117C 000B 0020             		move.b	#$B,$20(a0)
000119E0 117C 0010 0019             		move.b	#$10,$19(a0)
000119E6                            
000119E6                            Obj55_Action:				; XREF: Obj55_Index
000119E6 7000                       		moveq	#0,d0
000119E8 1028 0025                  		move.b	$25(a0),d0
000119EC 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
000119F0 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
000119F4 43F9 0000 0000             		lea	(Ani_obj55).l,a1
000119FA 6100 9F94                  		bsr.w	AnimateSprite
000119FE 6000 F57A                  		bra.w	MarkObjGone
00011A02                            ; ===========================================================================
00011A02 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00011A04 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00011A06 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00011A08 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00011A0A                            ; ===========================================================================
00011A0A                            
00011A0A                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00011A0A 343C 0080                  		move.w	#$80,d2
00011A0E 6100 0000                  		bsr.w	Obj55_ChkSonic
00011A12 6400                       		bcc.s	Obj55_NoDrop
00011A14 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011A18 3140 0036                  		move.w	d0,$36(a0)
00011A1C 9068 000C                  		sub.w	$C(a0),d0
00011A20 6500                       		bcs.s	Obj55_NoDrop
00011A22 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00011A26 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00011A28 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00011A2C 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00011A2E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011A32 D007                       		add.b	d7,d0
00011A34 0200 0007                  		andi.b	#7,d0
00011A38 6600                       		bne.s	Obj55_NoDrop
00011A3A 117C 0001 001C             		move.b	#1,$1C(a0)
00011A40 5428 0025                  		addq.b	#2,$25(a0)
00011A44                            
00011A44                            Obj55_NoDrop:
00011A44 4E75                       		rts	
00011A46                            ; ===========================================================================
00011A46                            
00011A46                            Obj55_DropFly:				; XREF: Obj55_Index2
00011A46 6100 CECE                  		bsr.w	SpeedToPos
00011A4A 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00011A50 343C 0080                  		move.w	#$80,d2
00011A54 6100 0000                  		bsr.w	Obj55_ChkSonic
00011A58 3028 0036                  		move.w	$36(a0),d0
00011A5C 9068 000C                  		sub.w	$C(a0),d0
00011A60 6500                       		bcs.s	Obj55_ChkDel
00011A62 0C40 0010                  		cmpi.w	#$10,d0
00011A66 6400                       		bcc.s	locret_10180
00011A68 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00011A6C 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00011A72 117C 0002 001C             		move.b	#2,$1C(a0)
00011A78 5428 0025                  		addq.b	#2,$25(a0)
00011A7C                            
00011A7C                            locret_10180:
00011A7C 4E75                       		rts	
00011A7E                            ; ===========================================================================
00011A7E                            
00011A7E                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00011A7E 4A28 0001                  		tst.b	1(a0)
00011A82 6A00 CEFC                  		bpl.w	DeleteObject
00011A86 4E75                       		rts	
00011A88                            ; ===========================================================================
00011A88                            
00011A88                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00011A88 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011A8C 0200 000F                  		andi.b	#$F,d0
00011A90 6600                       		bne.s	loc_101A0
00011A92 303C 00C0                  		move.w	#$C0,d0
00011A96 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play flapping sound
00011A9C                            
00011A9C                            loc_101A0:
00011A9C 6100 CE78                  		bsr.w	SpeedToPos
00011AA0 3038 D008                  		move.w	($FFFFD008).w,d0
00011AA4 9068 0008                  		sub.w	8(a0),d0
00011AA8 6400                       		bcc.s	loc_101B0
00011AAA 4440                       		neg.w	d0
00011AAC                            
00011AAC                            loc_101B0:
00011AAC 0C40 0080                  		cmpi.w	#$80,d0
00011AB0 6500                       		bcs.s	locret_101C6
00011AB2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011AB6 D007                       		add.b	d7,d0
00011AB8 0200 0007                  		andi.b	#7,d0
00011ABC 6600                       		bne.s	locret_101C6
00011ABE 5428 0025                  		addq.b	#2,$25(a0)
00011AC2                            
00011AC2                            locret_101C6:
00011AC2 4E75                       		rts	
00011AC4                            ; ===========================================================================
00011AC4                            
00011AC4                            Obj55_FlyUp:				; XREF: Obj55_Index2
00011AC4 6100 CE50                  		bsr.w	SpeedToPos
00011AC8 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00011ACE 6100 0000                  		bsr.w	ObjHitCeiling
00011AD2 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00011AD4 6A00                       		bpl.s	locret_101F4	; if not, branch
00011AD6 9368 000C                  		sub.w	d1,$C(a0)
00011ADA 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00011AE0 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00011AE4 4268 0012                  		clr.w	$12(a0)
00011AE8 4228 001C                  		clr.b	$1C(a0)
00011AEC 4228 0025                  		clr.b	$25(a0)
00011AF0                            
00011AF0                            locret_101F4:
00011AF0 4E75                       		rts	
00011AF2                            ; ===========================================================================
00011AF2                            
00011AF2                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00011AF2 323C 0100                  		move.w	#$100,d1
00011AF6 08E8 0000 0022             		bset	#0,$22(a0)
00011AFC 3038 D008                  		move.w	($FFFFD008).w,d0
00011B00 9068 0008                  		sub.w	8(a0),d0
00011B04 6400                       		bcc.s	loc_10214
00011B06 4440                       		neg.w	d0
00011B08 4441                       		neg.w	d1
00011B0A 08A8 0000 0022             		bclr	#0,$22(a0)
00011B10                            
00011B10                            loc_10214:
00011B10 B042                       		cmp.w	d2,d0
00011B12 4E75                       		rts	
00011B14                            ; ===========================================================================
00011B14 6100 CE00                  		bsr.w	SpeedToPos
00011B18 6100 CE16                  		bsr.w	DisplaySprite
00011B1C 4A28 0001                  		tst.b	1(a0)
00011B20 6A00 CE5E                  		bpl.w	DeleteObject
00011B24 4E75                       		rts	
00011B26                            ; ===========================================================================
00011B26                            Ani_obj55:
00011B26                            	include "_anim\obj55.asm"
00011B26                            ; ---------------------------------------------------------------------------
00011B26                            ; Animation script - Basaran enemy
00011B26                            ; ---------------------------------------------------------------------------
00011B26 0000                       		dc.w byte_10230-Ani_obj55
00011B28 0000                       		dc.w byte_10234-Ani_obj55
00011B2A 0000                       		dc.w byte_10238-Ani_obj55
00011B2C 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00011B30 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00011B34 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00011B3A                            		even
00011B3A                            		even
00011B3A                            
00011B3A                            ; ---------------------------------------------------------------------------
00011B3A                            ; Sprite mappings - Basaran enemy (MZ)
00011B3A                            ; ---------------------------------------------------------------------------
00011B3A                            Map_obj55:
00011B3A                            	include "_maps\obj55.asm"
00011B3A                            ; ---------------------------------------------------------------------------
00011B3A                            ; Sprite mappings - Basaran enemy (MZ)
00011B3A                            ; ---------------------------------------------------------------------------
00011B3A 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00011B3E 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00011B42 01                         byte_10246:	dc.b 1
00011B43 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00011B48 03                         byte_1024C:	dc.b 3
00011B49 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00011B4E 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00011B53 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00011B58 04                         byte_1025C:	dc.b 4
00011B59 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00011B5E 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00011B63 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00011B68 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00011B6D 04                         byte_10271:	dc.b 4
00011B6E F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00011B73 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00011B78 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00011B7D FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00011B82                            		even
00011B82                            		even
00011B82                            
00011B82                            ; ===========================================================================
00011B82                            ; ---------------------------------------------------------------------------
00011B82                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00011B82                            ; ---------------------------------------------------------------------------
00011B82                            
00011B82                            Obj56:					; XREF: Obj_Index
00011B82 7000                       		moveq	#0,d0
00011B84 1028 0024                  		move.b	$24(a0),d0
00011B88 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00011B8C 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00011B90                            ; ===========================================================================
00011B90 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00011B92 0000                       		dc.w Obj56_Action-Obj56_Index
00011B94                            
00011B94 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00011B96 2020                       		dc.b  $20, $20
00011B98 1020                       		dc.b  $10, $20
00011B9A 201A                       		dc.b  $20, $1A
00011B9C 1027                       		dc.b  $10, $27
00011B9E 1010                       		dc.b  $10, $10
00011BA0 0820                       		dc.b	8, $20
00011BA2 4010                       		dc.b  $40, $10
00011BA4                            ; ===========================================================================
00011BA4                            
00011BA4                            Obj56_Main:				; XREF: Obj56_Index
00011BA4 5428 0024                  		addq.b	#2,$24(a0)
00011BA8 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00011BB0 317C 4000 0002             		move.w	#$4000,2(a0)
00011BB6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011BBC 6600                       		bne.s	loc_102C8
00011BBE 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00011BC4                            
00011BC4                            loc_102C8:
00011BC4 117C 0004 0001             		move.b	#4,1(a0)
00011BCA 117C 0003 0018             		move.b	#3,$18(a0)
00011BD0 7000                       		moveq	#0,d0
00011BD2 1028 0028                  		move.b	$28(a0),d0
00011BD6 E648                       		lsr.w	#3,d0
00011BD8 0240 000E                  		andi.w	#$E,d0
00011BDC 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00011BE0 115A 0019                  		move.b	(a2)+,$19(a0)
00011BE4 1152 0016                  		move.b	(a2),$16(a0)
00011BE8 E248                       		lsr.w	#1,d0
00011BEA 1140 001A                  		move.b	d0,$1A(a0)
00011BEE 3168 0008 0034             		move.w	8(a0),$34(a0)
00011BF4 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011BFA 7000                       		moveq	#0,d0
00011BFC 1012                       		move.b	(a2),d0
00011BFE D040                       		add.w	d0,d0
00011C00 3140 003A                  		move.w	d0,$3A(a0)
00011C04 7000                       		moveq	#0,d0
00011C06 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011C0C 6700                       		beq.s	loc_10332
00011C0E 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00011C12 0240 000F                  		andi.w	#$F,d0
00011C16 5140                       		subq.w	#8,d0
00011C18 6500                       		bcs.s	loc_10332
00011C1A E548                       		lsl.w	#2,d0
00011C1C 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00011C20 45F2 0000                  		lea	(a2,d0.w),a2
00011C24 4A52                       		tst.w	(a2)
00011C26 6A00                       		bpl.s	loc_10332
00011C28 0868 0000 0022             		bchg	#0,$22(a0)
00011C2E                            
00011C2E                            loc_10332:
00011C2E 1028 0028                  		move.b	$28(a0),d0
00011C32 6A00                       		bpl.s	Obj56_Action
00011C34 0200 000F                  		andi.b	#$F,d0
00011C38 1140 003C                  		move.b	d0,$3C(a0)
00011C3C 117C 0005 0028             		move.b	#5,$28(a0)
00011C42 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00011C48 6600                       		bne.s	Obj56_ChkGone
00011C4A 117C 000C 0028             		move.b	#$C,$28(a0)
00011C50 317C 0080 003A             		move.w	#$80,$3A(a0)
00011C56                            
00011C56                            Obj56_ChkGone:
00011C56 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011C5A 6700                       		beq.s	Obj56_Action		; if it's zero, don't remember object
00011C5C 3440                       		movea.w	d0,a2	; load address into a2
00011C5E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00011C62 0812 0000                  		btst	#0,(a2)
00011C66 6700                       		beq.s	Obj56_Action
00011C68 5228 0028                  		addq.b	#1,$28(a0)
00011C6C 4268 003A                  		clr.w	$3A(a0)
00011C70                            
00011C70                            Obj56_Action:				; XREF: Obj56_Index
00011C70 3F28 0008                  		move.w	8(a0),-(sp)
00011C74 7000                       		moveq	#0,d0
00011C76 1028 0028                  		move.b	$28(a0),d0	; get object type
00011C7A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00011C7E D040                       		add.w	d0,d0
00011C80 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00011C84 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00011C88 381F                       		move.w	(sp)+,d4
00011C8A 4A28 0001                  		tst.b	1(a0)
00011C8E 6A00                       		bpl.s	Obj56_ChkDel
00011C90 7200                       		moveq	#0,d1
00011C92 1228 0019                  		move.b	$19(a0),d1
00011C96 0641 000B                  		addi.w	#$B,d1
00011C9A 7400                       		moveq	#0,d2
00011C9C 1428 0016                  		move.b	$16(a0),d2
00011CA0 3602                       		move.w	d2,d3
00011CA2 5243                       		addq.w	#1,d3
00011CA4 6100 F5F8                  		bsr.w	SolidObject
00011CA8                            
00011CA8                            Obj56_ChkDel:
00011CA8 3028 0034                  		move.w	$34(a0),d0
00011CAC 0240 FF80                  		andi.w	#$FF80,d0
00011CB0 3238 F700                  		move.w	($FFFFF700).w,d1
00011CB4 0441 0080                  		subi.w	#$80,d1
00011CB8 0241 FF80                  		andi.w	#$FF80,d1
00011CBC 9041                       		sub.w	d1,d0
00011CBE 0C40 0280                  		cmpi.w	#$280,d0
00011CC2 6300 CC6C                  		bls.w	DisplaySprite
00011CC6 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011CCA 6700 CCB4                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
00011CCE 3440                       		movea.w	d0,a2	; load address into a2
00011CD0 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
00011CD4 6000 CCAA                  		bra.w	DeleteObject
00011CD8                            ; ===========================================================================
00011CD8 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00011CDC 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00011CE0 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00011CE4 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00011CE8 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00011CEC 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00011CF0 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00011CF4                            ; ===========================================================================
00011CF4                            
00011CF4                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00011CF4 4E75                       		rts	
00011CF6                            ; ===========================================================================
00011CF6                            
00011CF6                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00011CF6 323C 0040                  		move.w	#$40,d1
00011CFA 7000                       		moveq	#0,d0
00011CFC 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011D00 6000                       		bra.s	Obj56_Move_LR
00011D02                            ; ===========================================================================
00011D02                            
00011D02                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00011D02 323C 0080                  		move.w	#$80,d1
00011D06 7000                       		moveq	#0,d0
00011D08 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011D0C                            
00011D0C                            Obj56_Move_LR:
00011D0C 0828 0000 0022             		btst	#0,$22(a0)
00011D12 6700                       		beq.s	loc_10416
00011D14 4440                       		neg.w	d0
00011D16 D041                       		add.w	d1,d0
00011D18                            
00011D18                            loc_10416:
00011D18 3228 0034                  		move.w	$34(a0),d1
00011D1C 9240                       		sub.w	d0,d1
00011D1E 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011D22 4E75                       		rts	
00011D24                            ; ===========================================================================
00011D24                            
00011D24                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00011D24 323C 0040                  		move.w	#$40,d1
00011D28 7000                       		moveq	#0,d0
00011D2A 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011D2E 6000                       		bra.s	Obj56_Move_UD
00011D30                            ; ===========================================================================
00011D30                            
00011D30                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00011D30 323C 0080                  		move.w	#$80,d1
00011D34 7000                       		moveq	#0,d0
00011D36 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011D3A                            
00011D3A                            Obj56_Move_UD:
00011D3A 0828 0000 0022             		btst	#0,$22(a0)
00011D40 6700                       		beq.s	loc_10444
00011D42 4440                       		neg.w	d0
00011D44 D041                       		add.w	d1,d0
00011D46                            
00011D46                            loc_10444:
00011D46 3228 0030                  		move.w	$30(a0),d1
00011D4A 9240                       		sub.w	d0,d1
00011D4C 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011D50 4E75                       		rts	
00011D52                            ; ===========================================================================
00011D52                            
00011D52                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00011D52 4A28 0038                  		tst.b	$38(a0)
00011D56 6600                       		bne.s	loc_104A4
00011D58 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011D5E 6600                       		bne.s	loc_1047A	; if not, branch
00011D60 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00011D66 6600                       		bne.s	loc_1047A
00011D68 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011D6C 3038 D008                  		move.w	($FFFFD008).w,d0
00011D70 B068 0008                  		cmp.w	8(a0),d0
00011D74 6400                       		bcc.s	loc_1047A
00011D76 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00011D7C                            
00011D7C                            loc_1047A:
00011D7C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011D80 7000                       		moveq	#0,d0
00011D82 1028 003C                  		move.b	$3C(a0),d0
00011D86 0832 0000 0000             		btst	#0,(a2,d0.w)
00011D8C 6700                       		beq.s	loc_104AE
00011D8E 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011D94 6600                       		bne.s	loc_1049E	; if not, branch
00011D96 0C00 0003                  		cmpi.b	#3,d0
00011D9A 6600                       		bne.s	loc_1049E
00011D9C 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011DA0                            
00011DA0                            loc_1049E:
00011DA0 117C 0001 0038             		move.b	#1,$38(a0)
00011DA6                            
00011DA6                            loc_104A4:
00011DA6 4A68 003A                  		tst.w	$3A(a0)
00011DAA 6700                       		beq.s	loc_104C8
00011DAC 5568 003A                  		subq.w	#2,$3A(a0)
00011DB0                            
00011DB0                            loc_104AE:
00011DB0 3028 003A                  		move.w	$3A(a0),d0
00011DB4 0828 0000 0022             		btst	#0,$22(a0)
00011DBA 6700                       		beq.s	loc_104BC
00011DBC 4440                       		neg.w	d0
00011DBE                            
00011DBE                            loc_104BC:
00011DBE 3228 0030                  		move.w	$30(a0),d1
00011DC2 D240                       		add.w	d0,d1
00011DC4 3141 000C                  		move.w	d1,$C(a0)
00011DC8 4E75                       		rts	
00011DCA                            ; ===========================================================================
00011DCA                            
00011DCA                            loc_104C8:
00011DCA 5228 0028                  		addq.b	#1,$28(a0)
00011DCE 4228 0038                  		clr.b	$38(a0)
00011DD2 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011DD6 67D8                       		beq.s	loc_104AE		; if it's zero, don't remember object
00011DD8 3440                       		movea.w	d0,a2	; load address into a2
00011DDA 08D2 0000                  		bset	#0,(a2)
00011DDE 60D0                       		bra.s	loc_104AE
00011DE0                            ; ===========================================================================
00011DE0                            
00011DE0                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00011DE0 4A28 0038                  		tst.b	$38(a0)
00011DE4 6600                       		bne.s	loc_10500
00011DE6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011DEA 7000                       		moveq	#0,d0
00011DEC 1028 003C                  		move.b	$3C(a0),d0
00011DF0 4A32 0000                  		tst.b	(a2,d0.w)
00011DF4 6A00                       		bpl.s	loc_10512
00011DF6 117C 0001 0038             		move.b	#1,$38(a0)
00011DFC                            
00011DFC                            loc_10500:
00011DFC 7000                       		moveq	#0,d0
00011DFE 1028 0016                  		move.b	$16(a0),d0
00011E02 D040                       		add.w	d0,d0
00011E04 B068 003A                  		cmp.w	$3A(a0),d0
00011E08 6700                       		beq.s	loc_1052C
00011E0A 5468 003A                  		addq.w	#2,$3A(a0)
00011E0E                            
00011E0E                            loc_10512:
00011E0E 3028 003A                  		move.w	$3A(a0),d0
00011E12 0828 0000 0022             		btst	#0,$22(a0)
00011E18 6700                       		beq.s	loc_10520
00011E1A 4440                       		neg.w	d0
00011E1C                            
00011E1C                            loc_10520:
00011E1C 3228 0030                  		move.w	$30(a0),d1
00011E20 D240                       		add.w	d0,d1
00011E22 3141 000C                  		move.w	d1,$C(a0)
00011E26 4E75                       		rts	
00011E28                            ; ===========================================================================
00011E28                            
00011E28                            loc_1052C:
00011E28 5328 0028                  		subq.b	#1,$28(a0)
00011E2C 4228 0038                  		clr.b	$38(a0)
00011E30 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011E34 67D8                       		beq.s	loc_10512		; if it's zero, don't remember object
00011E36 3440                       		movea.w	d0,a2	; load address into a2
00011E38 0892 0000                  		bclr	#0,(a2)
00011E3C 60D0                       		bra.s	loc_10512
00011E3E                            ; ===========================================================================
00011E3E                            
00011E3E                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00011E3E 4A28 0038                  		tst.b	$38(a0)
00011E42 6600                       		bne.s	loc_1055E
00011E44 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00011E48 6700                       		beq.s	locret_10578
00011E4A 117C 0001 0038             		move.b	#1,$38(a0)
00011E50 4268 003A                  		clr.w	$3A(a0)
00011E54                            
00011E54                            loc_1055E:
00011E54 5268 0008                  		addq.w	#1,8(a0)
00011E58 3168 0008 0034             		move.w	8(a0),$34(a0)
00011E5E 5268 003A                  		addq.w	#1,$3A(a0)
00011E62 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00011E68 6600                       		bne.s	locret_10578
00011E6A 4228 0028                  		clr.b	$28(a0)
00011E6E                            
00011E6E                            locret_10578:
00011E6E 4E75                       		rts	
00011E70                            ; ===========================================================================
00011E70                            
00011E70                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00011E70 4A28 0038                  		tst.b	$38(a0)
00011E74 6600                       		bne.s	loc_10598
00011E76 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011E7A 7000                       		moveq	#0,d0
00011E7C 1028 003C                  		move.b	$3C(a0),d0
00011E80 0832 0000 0000             		btst	#0,(a2,d0.w)
00011E86 6700                       		beq.s	loc_105A2
00011E88 117C 0001 0038             		move.b	#1,$38(a0)
00011E8E                            
00011E8E                            loc_10598:
00011E8E 4A68 003A                  		tst.w	$3A(a0)
00011E92 6700                       		beq.s	loc_105C0
00011E94 5568 003A                  		subq.w	#2,$3A(a0)
00011E98                            
00011E98                            loc_105A2:
00011E98 3028 003A                  		move.w	$3A(a0),d0
00011E9C 0828 0000 0022             		btst	#0,$22(a0)
00011EA2 6700                       		beq.s	loc_105B4
00011EA4 4440                       		neg.w	d0
00011EA6 0640 0080                  		addi.w	#$80,d0
00011EAA                            
00011EAA                            loc_105B4:
00011EAA 3228 0034                  		move.w	$34(a0),d1
00011EAE D240                       		add.w	d0,d1
00011EB0 3141 0008                  		move.w	d1,8(a0)
00011EB4 4E75                       		rts	
00011EB6                            ; ===========================================================================
00011EB6                            
00011EB6                            loc_105C0:
00011EB6 5228 0028                  		addq.b	#1,$28(a0)
00011EBA 4228 0038                  		clr.b	$38(a0)
00011EBE 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011EC2 67D4                       		beq.s	loc_105A2		; if it's zero, don't remember object
00011EC4 3440                       		movea.w	d0,a2	; load address into a2
00011EC6 08D2 0000                  		bset	#0,(a2)
00011ECA 60CC                       		bra.s	loc_105A2
00011ECC                            ; ===========================================================================
00011ECC                            
00011ECC                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00011ECC 4A28 0038                  		tst.b	$38(a0)
00011ED0 6600                       		bne.s	loc_105F8
00011ED2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011ED6 7000                       		moveq	#0,d0
00011ED8 1028 003C                  		move.b	$3C(a0),d0
00011EDC 4A32 0000                  		tst.b	(a2,d0.w)
00011EE0 6A00                       		bpl.s	loc_10606
00011EE2 117C 0001 0038             		move.b	#1,$38(a0)
00011EE8                            
00011EE8                            loc_105F8:
00011EE8 303C 0080                  		move.w	#$80,d0
00011EEC B068 003A                  		cmp.w	$3A(a0),d0
00011EF0 6700                       		beq.s	loc_10624
00011EF2 5468 003A                  		addq.w	#2,$3A(a0)
00011EF6                            
00011EF6                            loc_10606:
00011EF6 3028 003A                  		move.w	$3A(a0),d0
00011EFA 0828 0000 0022             		btst	#0,$22(a0)
00011F00 6700                       		beq.s	loc_10618
00011F02 4440                       		neg.w	d0
00011F04 0640 0080                  		addi.w	#$80,d0
00011F08                            
00011F08                            loc_10618:
00011F08 3228 0034                  		move.w	$34(a0),d1
00011F0C D240                       		add.w	d0,d1
00011F0E 3141 0008                  		move.w	d1,8(a0)
00011F12 4E75                       		rts	
00011F14                            ; ===========================================================================
00011F14                            
00011F14                            loc_10624:
00011F14 5328 0028                  		subq.b	#1,$28(a0)
00011F18 4228 0038                  		clr.b	$38(a0)
00011F1C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011F20 67D4                       		beq.s	loc_10606		; if it's zero, don't remember object
00011F22 3440                       		movea.w	d0,a2	; load address into a2
00011F24 0892 0000                  		bclr	#0,(a2)
00011F28 60CC                       		bra.s	loc_10606
00011F2A                            ; ===========================================================================
00011F2A                            
00011F2A                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00011F2A 323C 0010                  		move.w	#$10,d1
00011F2E 7000                       		moveq	#0,d0
00011F30 1038 FE88                  		move.b	($FFFFFE88).w,d0
00011F34 E248                       		lsr.w	#1,d0
00011F36 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00011F3A 6000                       		bra.s	Obj56_Move_Sqr
00011F3C                            ; ===========================================================================
00011F3C                            
00011F3C                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00011F3C 323C 0030                  		move.w	#$30,d1
00011F40 7000                       		moveq	#0,d0
00011F42 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00011F46 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00011F4A 6000                       		bra.s	Obj56_Move_Sqr
00011F4C                            ; ===========================================================================
00011F4C                            
00011F4C                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00011F4C 323C 0050                  		move.w	#$50,d1
00011F50 7000                       		moveq	#0,d0
00011F52 1038 FE90                  		move.b	($FFFFFE90).w,d0
00011F56 3638 FE92                  		move.w	($FFFFFE92).w,d3
00011F5A 6000                       		bra.s	Obj56_Move_Sqr
00011F5C                            ; ===========================================================================
00011F5C                            
00011F5C                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00011F5C 323C 0070                  		move.w	#$70,d1
00011F60 7000                       		moveq	#0,d0
00011F62 1038 FE94                  		move.b	($FFFFFE94).w,d0
00011F66 3638 FE96                  		move.w	($FFFFFE96).w,d3
00011F6A                            
00011F6A                            Obj56_Move_Sqr:
00011F6A 4A43                       		tst.w	d3
00011F6C 6600                       		bne.s	loc_1068E
00011F6E 5228 0022                  		addq.b	#1,$22(a0)
00011F72 0228 0003 0022             		andi.b	#3,$22(a0)
00011F78                            
00011F78                            loc_1068E:
00011F78 1428 0022                  		move.b	$22(a0),d2
00011F7C 0202 0003                  		andi.b	#3,d2
00011F80 6600                       		bne.s	loc_106AE
00011F82 9041                       		sub.w	d1,d0
00011F84 D068 0034                  		add.w	$34(a0),d0
00011F88 3140 0008                  		move.w	d0,8(a0)
00011F8C 4441                       		neg.w	d1
00011F8E D268 0030                  		add.w	$30(a0),d1
00011F92 3141 000C                  		move.w	d1,$C(a0)
00011F96 4E75                       		rts	
00011F98                            ; ===========================================================================
00011F98                            
00011F98                            loc_106AE:
00011F98 5302                       		subq.b	#1,d2
00011F9A 6600                       		bne.s	loc_106CC
00011F9C 5341                       		subq.w	#1,d1
00011F9E 9041                       		sub.w	d1,d0
00011FA0 4440                       		neg.w	d0
00011FA2 D068 0030                  		add.w	$30(a0),d0
00011FA6 3140 000C                  		move.w	d0,$C(a0)
00011FAA 5241                       		addq.w	#1,d1
00011FAC D268 0034                  		add.w	$34(a0),d1
00011FB0 3141 0008                  		move.w	d1,8(a0)
00011FB4 4E75                       		rts	
00011FB6                            ; ===========================================================================
00011FB6                            
00011FB6                            loc_106CC:
00011FB6 5302                       		subq.b	#1,d2
00011FB8 6600                       		bne.s	loc_106EA
00011FBA 5341                       		subq.w	#1,d1
00011FBC 9041                       		sub.w	d1,d0
00011FBE 4440                       		neg.w	d0
00011FC0 D068 0034                  		add.w	$34(a0),d0
00011FC4 3140 0008                  		move.w	d0,8(a0)
00011FC8 5241                       		addq.w	#1,d1
00011FCA D268 0030                  		add.w	$30(a0),d1
00011FCE 3141 000C                  		move.w	d1,$C(a0)
00011FD2 4E75                       		rts	
00011FD4                            ; ===========================================================================
00011FD4                            
00011FD4                            loc_106EA:
00011FD4 9041                       		sub.w	d1,d0
00011FD6 D068 0030                  		add.w	$30(a0),d0
00011FDA 3140 000C                  		move.w	d0,$C(a0)
00011FDE 4441                       		neg.w	d1
00011FE0 D268 0034                  		add.w	$34(a0),d1
00011FE4 3141 0008                  		move.w	d1,8(a0)
00011FE8 4E75                       		rts	
00011FEA                            ; ===========================================================================
00011FEA                            ; ---------------------------------------------------------------------------
00011FEA                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011FEA                            ; ---------------------------------------------------------------------------
00011FEA                            Map_obj56:
00011FEA                            	include "_maps\obj56.asm"
00011FEA                            ; ---------------------------------------------------------------------------
00011FEA                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011FEA                            ; ---------------------------------------------------------------------------
00011FEA 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00011FEE 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00011FF2 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00011FF6 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00011FFA 01                         byte_10710:	dc.b 1
00011FFB F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00012000 04                         byte_10716:	dc.b 4
00012001 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00012006 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
0001200B 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00012010 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00012015 02                         byte_1072B:	dc.b 2
00012016 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
0001201B 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00012020 04                         byte_10736:	dc.b 4
00012021 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00012026 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
0001202B 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00012030 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012035 03                         byte_1074B:	dc.b 3
00012036 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
0001203B F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00012040 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012045 01                         byte_1075B:	dc.b 1
00012046 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001204B 02                         byte_10761:	dc.b 2
0001204C E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00012051 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012056 04                         byte_1076C:	dc.b 4
00012057 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
0001205C F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00012061 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012066 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
0001206C 00                         		even
0001206C 00                         		even
0001206C                            
0001206C                            ; ===========================================================================
0001206C                            ; ---------------------------------------------------------------------------
0001206C                            ; Object 57 - spiked balls (SYZ, LZ)
0001206C                            ; ---------------------------------------------------------------------------
0001206C                            
0001206C                            Obj57:					; XREF: Obj_Index
0001206C 7000                       		moveq	#0,d0
0001206E 1028 0024                  		move.b	$24(a0),d0
00012072 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00012076 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
0001207A                            ; ===========================================================================
0001207A 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
0001207C 0000                       		dc.w Obj57_Move-Obj57_Index
0001207E 0000                       		dc.w Obj57_Display-Obj57_Index
00012080                            ; ===========================================================================
00012080                            
00012080                            Obj57_Main:				; XREF: Obj57_Index
00012080 5428 0024                  		addq.b	#2,$24(a0)
00012084 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
0001208C 317C 03BA 0002             		move.w	#$3BA,2(a0)
00012092 117C 0004 0001             		move.b	#4,1(a0)
00012098 117C 0004 0018             		move.b	#4,$18(a0)
0001209E 117C 0008 0019             		move.b	#8,$19(a0)
000120A4 3168 0008 003A             		move.w	8(a0),$3A(a0)
000120AA 3168 000C 0038             		move.w	$C(a0),$38(a0)
000120B0 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
000120B6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000120BC 6600                       		bne.s	loc_107E8
000120BE 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
000120C4 317C 0310 0002             		move.w	#$310,2(a0)
000120CA 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
000120D2                            
000120D2                            loc_107E8:
000120D2 1228 0028                  		move.b	$28(a0),d1	; get object type
000120D6 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000120DA 4881                       		ext.w	d1
000120DC E741                       		asl.w	#3,d1		; multiply by 8
000120DE 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
000120E2 1028 0022                  		move.b	$22(a0),d0
000120E6 E418                       		ror.b	#2,d0
000120E8 0200 00C0                  		andi.b	#-$40,d0
000120EC 1140 0026                  		move.b	d0,$26(a0)
000120F0 45E8 0029                  		lea	$29(a0),a2
000120F4 1228 0028                  		move.b	$28(a0),d1	; get object type
000120F8 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
000120FC 14FC 0000                  		move.b	#0,(a2)+
00012100 3601                       		move.w	d1,d3
00012102 E94B                       		lsl.w	#4,d3
00012104 1143 003C                  		move.b	d3,$3C(a0)
00012108 5341                       		subq.w	#1,d1		; set chain length (type-1)
0001210A 6500                       		bcs.s	loc_10894
0001210C 0828 0003 0028             		btst	#3,$28(a0)
00012112 6700                       		beq.s	Obj57_MakeChain
00012114 5341                       		subq.w	#1,d1
00012116 6500                       		bcs.s	loc_10894
00012118                            
00012118                            Obj57_MakeChain:
00012118 6100 CF6C                  		bsr.w	SingleObjLoad
0001211C 6600                       		bne.s	loc_10894
0001211E 5228 0029                  		addq.b	#1,$29(a0)
00012122 3A09                       		move.w	a1,d5
00012124 0445 D000                  		subi.w	#-$3000,d5
00012128 EC4D                       		lsr.w	#6,d5
0001212A 0245 007F                  		andi.w	#$7F,d5
0001212E 14C5                       		move.b	d5,(a2)+
00012130 137C 0004 0024             		move.b	#4,$24(a1)
00012136 1290                       		move.b	0(a0),0(a1)
00012138 2368 0004 0004             		move.l	4(a0),4(a1)
0001213E 3368 0002 0002             		move.w	2(a0),2(a1)
00012144 1368 0001 0001             		move.b	1(a0),1(a1)
0001214A 1368 0018 0018             		move.b	$18(a0),$18(a1)
00012150 1368 0019 0019             		move.b	$19(a0),$19(a1)
00012156 1368 0020 0020             		move.b	$20(a0),$20(a1)
0001215C 0403 0010                  		subi.b	#$10,d3
00012160 1343 003C                  		move.b	d3,$3C(a1)
00012164 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001216A 6600                       		bne.s	loc_10890
0001216C 4A03                       		tst.b	d3
0001216E 6600                       		bne.s	loc_10890
00012170 137C 0002 001A             		move.b	#2,$1A(a1)
00012176                            
00012176                            loc_10890:
00012176 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
0001217A                            
0001217A                            loc_10894:
0001217A 3A08                       		move.w	a0,d5
0001217C 0445 D000                  		subi.w	#-$3000,d5
00012180 EC4D                       		lsr.w	#6,d5
00012182 0245 007F                  		andi.w	#$7F,d5
00012186 14C5                       		move.b	d5,(a2)+
00012188 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001218E 6600                       		bne.s	Obj57_Move
00012190 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00012196 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
0001219C                            
0001219C                            Obj57_Move:				; XREF: Obj57_Index
0001219C 6100 0000                  		bsr.w	Obj57_MoveSub
000121A0 6000 0000                  		bra.w	Obj57_ChkDel
000121A4                            ; ===========================================================================
000121A4                            
000121A4                            Obj57_MoveSub:				; XREF: Obj57_Move
000121A4 3028 003E                  		move.w	$3E(a0),d0
000121A8 D168 0026                  		add.w	d0,$26(a0)
000121AC 1028 0026                  		move.b	$26(a0),d0
000121B0 4EB9 0000 29F6             		jsr	(CalcSine).l
000121B6 3428 0038                  		move.w	$38(a0),d2
000121BA 3628 003A                  		move.w	$3A(a0),d3
000121BE 45E8 0029                  		lea	$29(a0),a2
000121C2 7C00                       		moveq	#0,d6
000121C4 1C1A                       		move.b	(a2)+,d6
000121C6                            
000121C6                            Obj57_MoveLoop:
000121C6 7800                       		moveq	#0,d4
000121C8 181A                       		move.b	(a2)+,d4
000121CA ED4C                       		lsl.w	#6,d4
000121CC 0684 00FF D000             		addi.l	#$FFD000,d4
000121D2 2244                       		movea.l	d4,a1
000121D4 7800                       		moveq	#0,d4
000121D6 1829 003C                  		move.b	$3C(a1),d4
000121DA 2A04                       		move.l	d4,d5
000121DC C9C0                       		muls.w	d0,d4
000121DE E084                       		asr.l	#8,d4
000121E0 CBC1                       		muls.w	d1,d5
000121E2 E085                       		asr.l	#8,d5
000121E4 D842                       		add.w	d2,d4
000121E6 DA43                       		add.w	d3,d5
000121E8 3344 000C                  		move.w	d4,$C(a1)
000121EC 3345 0008                  		move.w	d5,8(a1)
000121F0 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
000121F4 4E75                       		rts	
000121F6                            ; ===========================================================================
000121F6                            
000121F6                            Obj57_ChkDel:				; XREF: Obj57_Move
000121F6 3028 003A                  		move.w	$3A(a0),d0
000121FA 0240 FF80                  		andi.w	#$FF80,d0
000121FE 3238 F700                  		move.w	($FFFFF700).w,d1
00012202 0441 0080                  		subi.w	#$80,d1
00012206 0241 FF80                  		andi.w	#$FF80,d1
0001220A 9041                       		sub.w	d1,d0
0001220C 0C40 0280                  		cmpi.w	#$280,d0
00012210 6300 C71E                  		bls.w	DisplaySprite
00012214 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012218 6700                       		beq.s	Obj57_Delete	; if it's zero, object was placed in debug mode
0001221A 3440                       		movea.w	d0,a2	; load address into a2
0001221C 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
00012220                            ; ===========================================================================
00012220                            
00012220                            Obj57_Delete:				; XREF: Obj57_ChkDel
00012220 7400                       		moveq	#0,d2
00012222 45E8 0029                  		lea	$29(a0),a2
00012226 141A                       		move.b	(a2)+,d2
00012228                            
00012228                            Obj57_DelLoop:
00012228 7000                       		moveq	#0,d0
0001222A 101A                       		move.b	(a2)+,d0
0001222C ED48                       		lsl.w	#6,d0
0001222E 0680 00FF D000             		addi.l	#$FFD000,d0
00012234 2240                       		movea.l	d0,a1
00012236 6100 C74A                  		bsr.w	DeleteObject2
0001223A 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
0001223E                            
0001223E 4E75                       		rts	
00012240                            ; ===========================================================================
00012240                            
00012240                            Obj57_Display:				; XREF: Obj57_Index
00012240 6000 C6EE                  		bra.w	DisplaySprite
00012244                            ; ===========================================================================
00012244                            ; ---------------------------------------------------------------------------
00012244                            ; Sprite mappings - chain of spiked balls (SYZ)
00012244                            ; ---------------------------------------------------------------------------
00012244                            Map_obj57:
00012244                            	include "_maps\obj57syz.asm"
00012244                            ; ---------------------------------------------------------------------------
00012244                            ; Sprite mappings - chain of spiked balls (SYZ)
00012244                            ; ---------------------------------------------------------------------------
00012244 0000                       		dc.w byte_10958-Map_obj57
00012246 01                         byte_10958:	dc.b 1
00012247 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001224C                            		even
0001224C                            		even
0001224C                            
0001224C                            ; ---------------------------------------------------------------------------
0001224C                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001224C                            ; ---------------------------------------------------------------------------
0001224C                            Map_obj57a:
0001224C                            	include "_maps\obj57lz.asm"
0001224C                            ; ---------------------------------------------------------------------------
0001224C                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001224C                            ; ---------------------------------------------------------------------------
0001224C 0000                       		dc.w byte_10964-Map_obj57a
0001224E 0000                       		dc.w byte_1096A-Map_obj57a
00012250 0000                       		dc.w byte_10970-Map_obj57a
00012252 01                         byte_10964:	dc.b 1
00012253 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012258 01                         byte_1096A:	dc.b 1
00012259 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
0001225E 01                         byte_10970:	dc.b 1
0001225F F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00012264                            		even
00012264                            		even
00012264                            
00012264                            ; ===========================================================================
00012264                            ; ---------------------------------------------------------------------------
00012264                            ; Object 58 - giant spiked balls (SYZ)
00012264                            ; ---------------------------------------------------------------------------
00012264                            
00012264                            Obj58:					; XREF: Obj_Index
00012264 7000                       		moveq	#0,d0
00012266 1028 0024                  		move.b	$24(a0),d0
0001226A 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
0001226E 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00012272                            ; ===========================================================================
00012272 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00012274 0000                       		dc.w Obj58_Move-Obj58_Index
00012276                            ; ===========================================================================
00012276                            
00012276                            Obj58_Main:				; XREF: Obj58_Index
00012276 5428 0024                  		addq.b	#2,$24(a0)
0001227A 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00012282 317C 0396 0002             		move.w	#$396,2(a0)
00012288 117C 0004 0001             		move.b	#4,1(a0)
0001228E 117C 0004 0018             		move.b	#4,$18(a0)
00012294 117C 0018 0019             		move.b	#$18,$19(a0)
0001229A 3168 0008 003A             		move.w	8(a0),$3A(a0)
000122A0 3168 000C 0038             		move.w	$C(a0),$38(a0)
000122A6 117C 0086 0020             		move.b	#$86,$20(a0)
000122AC 1228 0028                  		move.b	$28(a0),d1	; get object type
000122B0 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000122B4 4881                       		ext.w	d1
000122B6 E741                       		asl.w	#3,d1		; multiply by 8
000122B8 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
000122BC 1028 0022                  		move.b	$22(a0),d0
000122C0 E418                       		ror.b	#2,d0
000122C2 0200 00C0                  		andi.b	#$C0,d0
000122C6 1140 0026                  		move.b	d0,$26(a0)
000122CA 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
000122D0                            
000122D0                            Obj58_Move:				; XREF: Obj58_Index
000122D0 7000                       		moveq	#0,d0
000122D2 1028 0028                  		move.b	$28(a0),d0	; get object type
000122D6 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000122DA D040                       		add.w	d0,d0
000122DC 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
000122E0 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
000122E4 3028 003A                  		move.w	$3A(a0),d0
000122E8 0240 FF80                  		andi.w	#$FF80,d0
000122EC 3238 F700                  		move.w	($FFFFF700).w,d1
000122F0 0441 0080                  		subi.w	#$80,d1
000122F4 0241 FF80                  		andi.w	#$FF80,d1
000122F8 9041                       		sub.w	d1,d0
000122FA 0C40 0280                  		cmpi.w	#$280,d0
000122FE 6300 C630                  		bls.w	DisplaySprite
00012302 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012306 6700 C678                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
0001230A 3440                       		movea.w	d0,a2	; load address into a2
0001230C 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
00012310 6000 C66E                  		bra.w	DeleteObject
00012314                            ; ===========================================================================
00012314 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00012316 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00012318 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
0001231A 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
0001231C                            ; ===========================================================================
0001231C                            
0001231C                            Obj58_Type00:				; XREF: Obj58_TypeIndex
0001231C 4E75                       		rts	
0001231E                            ; ===========================================================================
0001231E                            
0001231E                            Obj58_Type01:				; XREF: Obj58_TypeIndex
0001231E 323C 0060                  		move.w	#$60,d1
00012322 7000                       		moveq	#0,d0
00012324 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00012328 0828 0000 0022             		btst	#0,$22(a0)
0001232E 6700                       		beq.s	loc_10A38
00012330 4440                       		neg.w	d0
00012332 D041                       		add.w	d1,d0
00012334                            
00012334                            loc_10A38:
00012334 3228 003A                  		move.w	$3A(a0),d1
00012338 9240                       		sub.w	d0,d1
0001233A 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001233E 4E75                       		rts	
00012340                            ; ===========================================================================
00012340                            
00012340                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00012340 323C 0060                  		move.w	#$60,d1
00012344 7000                       		moveq	#0,d0
00012346 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001234A 0828 0000 0022             		btst	#0,$22(a0)
00012350 6700                       		beq.s	loc_10A5C
00012352 4440                       		neg.w	d0
00012354 0640 0080                  		addi.w	#$80,d0
00012358                            
00012358                            loc_10A5C:
00012358 3228 0038                  		move.w	$38(a0),d1
0001235C 9240                       		sub.w	d0,d1
0001235E 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00012362 4E75                       		rts	
00012364                            ; ===========================================================================
00012364                            
00012364                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00012364 3028 003E                  		move.w	$3E(a0),d0
00012368 D168 0026                  		add.w	d0,$26(a0)
0001236C 1028 0026                  		move.b	$26(a0),d0
00012370 4EB9 0000 29F6             		jsr	(CalcSine).l
00012376 3428 0038                  		move.w	$38(a0),d2
0001237A 3628 003A                  		move.w	$3A(a0),d3
0001237E 7800                       		moveq	#0,d4
00012380 1828 003C                  		move.b	$3C(a0),d4
00012384 2A04                       		move.l	d4,d5
00012386 C9C0                       		muls.w	d0,d4
00012388 E084                       		asr.l	#8,d4
0001238A CBC1                       		muls.w	d1,d5
0001238C E085                       		asr.l	#8,d5
0001238E D842                       		add.w	d2,d4
00012390 DA43                       		add.w	d3,d5
00012392 3144 000C                  		move.w	d4,$C(a0)
00012396 3145 0008                  		move.w	d5,8(a0)
0001239A 4E75                       		rts	
0001239C                            ; ===========================================================================
0001239C                            ; ---------------------------------------------------------------------------
0001239C                            ; Sprite mappings - SBZ	spiked ball on a chain
0001239C                            ; ---------------------------------------------------------------------------
0001239C                            Map_obj15b:
0001239C                            	include "_maps\obj15sbz.asm"
0001239C                            ; ---------------------------------------------------------------------------
0001239C                            ; Sprite mappings - spiked ball on a chain (SBZ)
0001239C                            ; ---------------------------------------------------------------------------
0001239C 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
000123A0 0000                       		dc.w byte_10AC6-Map_obj15b
000123A2 05                         byte_10AA6:	dc.b 5
000123A3 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
000123A8 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
000123AD F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
000123B2 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000123B7 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000123BC 01                         byte_10AC0:	dc.b 1
000123BD F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000123C2 02                         byte_10AC6:	dc.b 2
000123C3 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000123C8 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000123CE 00                         		even
000123CE 00                         		even
000123CE                            
000123CE                            ; ===========================================================================
000123CE                            ; ---------------------------------------------------------------------------
000123CE                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000123CE                            ; ---------------------------------------------------------------------------
000123CE                            
000123CE                            Obj59:					; XREF: Obj_Index
000123CE 7000                       		moveq	#0,d0
000123D0 1028 0024                  		move.b	$24(a0),d0
000123D4 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000123D8 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
000123DC 3028 0032                  		move.w	$32(a0),d0
000123E0 0240 FF80                  		andi.w	#$FF80,d0
000123E4 3238 F700                  		move.w	($FFFFF700).w,d1
000123E8 0441 0080                  		subi.w	#$80,d1
000123EC 0241 FF80                  		andi.w	#$FF80,d1
000123F0 9041                       		sub.w	d1,d0
000123F2 0C40 0280                  		cmpi.w	#$280,d0
000123F6 6300 C538                  		bls.w	DisplaySprite
000123FA 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000123FE 6700 C580                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
00012402 3440                       		movea.w	d0,a2	; load address into a2
00012404 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
00012408 6000 C576                  		bra.w	DeleteObject
0001240C                            ; ===========================================================================
0001240C 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
0001240E 0000                       		dc.w Obj59_Platform-Obj59_Index
00012410 0000                       		dc.w Obj59_Action-Obj59_Index
00012412 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00012414                            
00012414 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00012416                            
00012416 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00012418 2001                       		dc.b $20, 1
0001241A 3401                       		dc.b $34, 1
0001241C 1003                       		dc.b $10, 3
0001241E 2003                       		dc.b $20, 3
00012420 3403                       		dc.b $34, 3
00012422 1401                       		dc.b $14, 1
00012424 2401                       		dc.b $24, 1
00012426 2C01                       		dc.b $2C, 1
00012428 1403                       		dc.b $14, 3
0001242A 2403                       		dc.b $24, 3
0001242C 2C03                       		dc.b $2C, 3
0001242E 2005                       		dc.b $20, 5
00012430 2007                       		dc.b $20, 7
00012432 3009                       		dc.b $30, 9
00012434                            ; ===========================================================================
00012434                            
00012434                            Obj59_Main:				; XREF: Obj59_Index
00012434 5428 0024                  		addq.b	#2,$24(a0)
00012438 7000                       		moveq	#0,d0
0001243A 1028 0028                  		move.b	$28(a0),d0
0001243E 6A00                       		bpl.s	Obj59_Main2
00012440 5828 0024                  		addq.b	#4,$24(a0)
00012444 0240 007F                  		andi.w	#$7F,d0
00012448 C0FC 0006                  		mulu.w	#6,d0
0001244C 3140 003C                  		move.w	d0,$3C(a0)
00012450 3140 003E                  		move.w	d0,$3E(a0)
00012454 588F                       		addq.l	#4,sp
00012456 4E75                       		rts	
00012458                            ; ===========================================================================
00012458                            
00012458                            Obj59_Main2:
00012458 E648                       		lsr.w	#3,d0
0001245A 0240 001E                  		andi.w	#$1E,d0
0001245E 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00012462 115A 0019                  		move.b	(a2)+,$19(a0)
00012466 115A 001A                  		move.b	(a2)+,$1A(a0)
0001246A 7000                       		moveq	#0,d0
0001246C 1028 0028                  		move.b	$28(a0),d0
00012470 D040                       		add.w	d0,d0
00012472 0240 001E                  		andi.w	#$1E,d0
00012476 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
0001247A 101A                       		move.b	(a2)+,d0
0001247C E548                       		lsl.w	#2,d0
0001247E 3140 003C                  		move.w	d0,$3C(a0)
00012482 115A 0028                  		move.b	(a2)+,$28(a0)
00012486 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
0001248E 317C 4000 0002             		move.w	#$4000,2(a0)
00012494 117C 0004 0001             		move.b	#4,1(a0)
0001249A 117C 0004 0018             		move.b	#4,$18(a0)
000124A0 3168 0008 0032             		move.w	8(a0),$32(a0)
000124A6 3168 000C 0030             		move.w	$C(a0),$30(a0)
000124AC                            
000124AC                            Obj59_Platform:				; XREF: Obj59_Index
000124AC 7200                       		moveq	#0,d1
000124AE 1228 0019                  		move.b	$19(a0),d1
000124B2 4EB9 0000 8530             		jsr	(PlatformObject).l
000124B8 6000 0000                  		bra.w	Obj59_Types
000124BC                            ; ===========================================================================
000124BC                            
000124BC                            Obj59_Action:				; XREF: Obj59_Index
000124BC 7200                       		moveq	#0,d1
000124BE 1228 0019                  		move.b	$19(a0),d1
000124C2 4EB9 0000 86A4             		jsr	(ExitPlatform).l
000124C8 3F28 0008                  		move.w	8(a0),-(sp)
000124CC 6100 0000                  		bsr.w	Obj59_Types
000124D0 341F                       		move.w	(sp)+,d2
000124D2 4A10                       		tst.b	0(a0)
000124D4 6700                       		beq.s	locret_10BD4
000124D6 4EF9 0000 8C1A             		jmp	(MvSonicOnPtfm2).l
000124DC                            ; ===========================================================================
000124DC                            
000124DC                            locret_10BD4:
000124DC 4E75                       		rts	
000124DE                            ; ===========================================================================
000124DE                            
000124DE                            Obj59_Types:
000124DE 7000                       		moveq	#0,d0
000124E0 1028 0028                  		move.b	$28(a0),d0
000124E4 0240 000F                  		andi.w	#$F,d0
000124E8 D040                       		add.w	d0,d0
000124EA 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
000124EE 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
000124F2                            ; ===========================================================================
000124F2 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000124F6 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000124FA 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000124FE 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00012502 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00012506                            ; ===========================================================================
00012506                            
00012506                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00012506 4E75                       		rts	
00012508                            ; ===========================================================================
00012508                            
00012508                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00012508 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
0001250E 6600                       		bne.s	locret_10C0C
00012510 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012514                            
00012514                            locret_10C0C:
00012514 4E75                       		rts	
00012516                            ; ===========================================================================
00012516                            
00012516                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00012516 6100 0000                  		bsr.w	Obj59_Move
0001251A 3028 0034                  		move.w	$34(a0),d0
0001251E 4440                       		neg.w	d0
00012520 D068 0030                  		add.w	$30(a0),d0
00012524 3140 000C                  		move.w	d0,$C(a0)
00012528 4E75                       		rts	
0001252A                            ; ===========================================================================
0001252A                            
0001252A                            Obj59_Type04:				; XREF: Obj59_TypeIndex
0001252A 6100 0000                  		bsr.w	Obj59_Move
0001252E 3028 0034                  		move.w	$34(a0),d0
00012532 D068 0030                  		add.w	$30(a0),d0
00012536 3140 000C                  		move.w	d0,$C(a0)
0001253A 4E75                       		rts	
0001253C                            ; ===========================================================================
0001253C                            
0001253C                            Obj59_Type06:				; XREF: Obj59_TypeIndex
0001253C 6100 0000                  		bsr.w	Obj59_Move
00012540 3028 0034                  		move.w	$34(a0),d0
00012544 E240                       		asr.w	#1,d0
00012546 4440                       		neg.w	d0
00012548 D068 0030                  		add.w	$30(a0),d0
0001254C 3140 000C                  		move.w	d0,$C(a0)
00012550 3028 0034                  		move.w	$34(a0),d0
00012554 D068 0032                  		add.w	$32(a0),d0
00012558 3140 0008                  		move.w	d0,8(a0)
0001255C 4E75                       		rts	
0001255E                            ; ===========================================================================
0001255E                            
0001255E                            Obj59_Type08:				; XREF: Obj59_TypeIndex
0001255E 6100 0000                  		bsr.w	Obj59_Move
00012562 3028 0034                  		move.w	$34(a0),d0
00012566 E240                       		asr.w	#1,d0
00012568 D068 0030                  		add.w	$30(a0),d0
0001256C 3140 000C                  		move.w	d0,$C(a0)
00012570 3028 0034                  		move.w	$34(a0),d0
00012574 4440                       		neg.w	d0
00012576 D068 0032                  		add.w	$32(a0),d0
0001257A 3140 0008                  		move.w	d0,8(a0)
0001257E 4E75                       		rts	
00012580                            ; ===========================================================================
00012580                            
00012580                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00012580 6100 0000                  		bsr.w	Obj59_Move
00012584 3028 0034                  		move.w	$34(a0),d0
00012588 4440                       		neg.w	d0
0001258A D068 0030                  		add.w	$30(a0),d0
0001258E 3140 000C                  		move.w	d0,$C(a0)
00012592 4A28 0028                  		tst.b	$28(a0)
00012596 6700 0000                  		beq.w	loc_10C94
0001259A 4E75                       		rts	
0001259C                            ; ===========================================================================
0001259C                            
0001259C                            loc_10C94:
0001259C 0828 0003 0022             		btst	#3,$22(a0)
000125A2 6700                       		beq.s	Obj59_Delete
000125A4 08E9 0001 0022             		bset	#1,$22(a1)
000125AA 08A9 0003 0022             		bclr	#3,$22(a1)
000125B0 137C 0002 0024             		move.b	#2,$24(a1)
000125B6                            
000125B6                            Obj59_Delete:
000125B6 6000 C3C8                  		bra.w	DeleteObject
000125BA                            
000125BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000125BA                            
000125BA                            
000125BA                            Obj59_Move:				; XREF: Obj59_Type02; et al
000125BA 3028 0038                  		move.w	$38(a0),d0
000125BE 4A28 003A                  		tst.b	$3A(a0)
000125C2 6600                       		bne.s	loc_10CC8
000125C4 0C40 0800                  		cmpi.w	#$800,d0
000125C8 6400                       		bcc.s	loc_10CD0
000125CA 0640 0010                  		addi.w	#$10,d0
000125CE 6000                       		bra.s	loc_10CD0
000125D0                            ; ===========================================================================
000125D0                            
000125D0                            loc_10CC8:
000125D0 4A40                       		tst.w	d0
000125D2 6700                       		beq.s	loc_10CD0
000125D4 0440 0010                  		subi.w	#$10,d0
000125D8                            
000125D8                            loc_10CD0:
000125D8 3140 0038                  		move.w	d0,$38(a0)
000125DC 48C0                       		ext.l	d0
000125DE E180                       		asl.l	#8,d0
000125E0 D0A8 0034                  		add.l	$34(a0),d0
000125E4 2140 0034                  		move.l	d0,$34(a0)
000125E8 4840                       		swap	d0
000125EA 3428 003C                  		move.w	$3C(a0),d2
000125EE B042                       		cmp.w	d2,d0
000125F0 6300                       		bls.s	loc_10CF0
000125F2 117C 0001 003A             		move.b	#1,$3A(a0)
000125F8                            
000125F8                            loc_10CF0:
000125F8 D442                       		add.w	d2,d2
000125FA B042                       		cmp.w	d2,d0
000125FC 6600                       		bne.s	locret_10CFA
000125FE 4228 0028                  		clr.b	$28(a0)
00012602                            
00012602                            locret_10CFA:
00012602 4E75                       		rts	
00012604                            ; End of function Obj59_Move
00012604                            
00012604                            ; ===========================================================================
00012604                            
00012604                            Obj59_MakeMulti:			; XREF: Obj59_Index
00012604 5368 003C                  		subq.w	#1,$3C(a0)
00012608 6600                       		bne.s	Obj59_ChkDel
0001260A 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00012610 6100 CA74                  		bsr.w	SingleObjLoad
00012614 6600                       		bne.s	Obj59_ChkDel
00012616 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
0001261A 3368 0008 0008             		move.w	8(a0),8(a1)
00012620 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012626 137C 000E 0028             		move.b	#$E,$28(a1)
0001262C                            
0001262C                            Obj59_ChkDel:
0001262C 588F                       		addq.l	#4,sp
0001262E 3028 0008                  		move.w	8(a0),d0
00012632 0240 FF80                  		andi.w	#$FF80,d0
00012636 3238 F700                  		move.w	($FFFFF700).w,d1
0001263A 0441 0080                  		subi.w	#$80,d1
0001263E 0241 FF80                  		andi.w	#$FF80,d1
00012642 9041                       		sub.w	d1,d0
00012644 0C40 0280                  		cmpi.w	#$280,d0
00012648 6200 C336                  		bhi.w	DeleteObject
0001264C 4E75                       		rts	
0001264E                            ; ===========================================================================
0001264E                            ; ---------------------------------------------------------------------------
0001264E                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001264E                            ; ---------------------------------------------------------------------------
0001264E                            Map_obj59:
0001264E                            	include "_maps\obj59.asm"
0001264E                            ; ---------------------------------------------------------------------------
0001264E                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001264E                            ; ---------------------------------------------------------------------------
0001264E 0000                       		dc.w byte_10D4A-Map_obj59
00012650 03                         byte_10D4A:	dc.b 3
00012651 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00012656 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001265B F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00012660                            		even
00012660                            		even
00012660                            
00012660                            ; ===========================================================================
00012660                            ; ---------------------------------------------------------------------------
00012660                            ; Object 5A - platforms	moving in circles (SLZ)
00012660                            ; ---------------------------------------------------------------------------
00012660                            
00012660                            Obj5A:					; XREF: Obj_Index
00012660 7000                       		moveq	#0,d0
00012662 1028 0024                  		move.b	$24(a0),d0
00012666 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
0001266A 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
0001266E 3028 0032                  		move.w	$32(a0),d0
00012672 0240 FF80                  		andi.w	#$FF80,d0
00012676 3238 F700                  		move.w	($FFFFF700).w,d1
0001267A 0441 0080                  		subi.w	#$80,d1
0001267E 0241 FF80                  		andi.w	#$FF80,d1
00012682 9041                       		sub.w	d1,d0
00012684 0C40 0280                  		cmpi.w	#$280,d0
00012688 6300 C2A6                  		bls.w	DisplaySprite
0001268C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012690 6700 C2EE                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
00012694 3440                       		movea.w	d0,a2	; load address into a2
00012696 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
0001269A 6000 C2E4                  		bra.w	DeleteObject
0001269E                            ; ===========================================================================
0001269E 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000126A0 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000126A2 0000                       		dc.w Obj5A_Action-Obj5A_Index
000126A4                            ; ===========================================================================
000126A4                            
000126A4                            Obj5A_Main:				; XREF: Obj5A_Index
000126A4 5428 0024                  		addq.b	#2,$24(a0)
000126A8 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000126B0 317C 4000 0002             		move.w	#$4000,2(a0)
000126B6 117C 0004 0001             		move.b	#4,1(a0)
000126BC 117C 0004 0018             		move.b	#4,$18(a0)
000126C2 117C 0018 0019             		move.b	#$18,$19(a0)
000126C8 3168 0008 0032             		move.w	8(a0),$32(a0)
000126CE 3168 000C 0030             		move.w	$C(a0),$30(a0)
000126D4                            
000126D4                            Obj5A_Platform:				; XREF: Obj5A_Index
000126D4 7200                       		moveq	#0,d1
000126D6 1228 0019                  		move.b	$19(a0),d1
000126DA 4EB9 0000 8530             		jsr	(PlatformObject).l
000126E0 6000 0000                  		bra.w	Obj5A_Types
000126E4                            ; ===========================================================================
000126E4                            
000126E4                            Obj5A_Action:				; XREF: Obj5A_Index
000126E4 7200                       		moveq	#0,d1
000126E6 1228 0019                  		move.b	$19(a0),d1
000126EA 4EB9 0000 86A4             		jsr	(ExitPlatform).l
000126F0 3F28 0008                  		move.w	8(a0),-(sp)
000126F4 6100 0000                  		bsr.w	Obj5A_Types
000126F8 341F                       		move.w	(sp)+,d2
000126FA 4EF9 0000 8C1A             		jmp	(MvSonicOnPtfm2).l
00012700                            ; ===========================================================================
00012700                            
00012700                            Obj5A_Types:
00012700 7000                       		moveq	#0,d0
00012702 1028 0028                  		move.b	$28(a0),d0
00012706 0240 000C                  		andi.w	#$C,d0
0001270A E248                       		lsr.w	#1,d0
0001270C 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00012710 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00012714                            ; ===========================================================================
00012714 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00012716 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00012718                            ; ===========================================================================
00012718                            
00012718                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00012718 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001271C 0401 0050                  		subi.b	#$50,d1
00012720 4881                       		ext.w	d1
00012722 1438 FE84                  		move.b	($FFFFFE84).w,d2
00012726 0402 0050                  		subi.b	#$50,d2
0001272A 4882                       		ext.w	d2
0001272C 0828 0000 0028             		btst	#0,$28(a0)
00012732 6700                       		beq.s	loc_10E24
00012734 4441                       		neg.w	d1
00012736 4442                       		neg.w	d2
00012738                            
00012738                            loc_10E24:
00012738 0828 0001 0028             		btst	#1,$28(a0)
0001273E 6700                       		beq.s	loc_10E30
00012740 4441                       		neg.w	d1
00012742 C342                       		exg	d1,d2
00012744                            
00012744                            loc_10E30:
00012744 D268 0032                  		add.w	$32(a0),d1
00012748 3141 0008                  		move.w	d1,8(a0)
0001274C D468 0030                  		add.w	$30(a0),d2
00012750 3142 000C                  		move.w	d2,$C(a0)
00012754 4E75                       		rts	
00012756                            ; ===========================================================================
00012756                            
00012756                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00012756 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001275A 0401 0050                  		subi.b	#$50,d1
0001275E 4881                       		ext.w	d1
00012760 1438 FE84                  		move.b	($FFFFFE84).w,d2
00012764 0402 0050                  		subi.b	#$50,d2
00012768 4882                       		ext.w	d2
0001276A 0828 0000 0028             		btst	#0,$28(a0)
00012770 6700                       		beq.s	loc_10E62
00012772 4441                       		neg.w	d1
00012774 4442                       		neg.w	d2
00012776                            
00012776                            loc_10E62:
00012776 0828 0001 0028             		btst	#1,$28(a0)
0001277C 6700                       		beq.s	loc_10E6E
0001277E 4441                       		neg.w	d1
00012780 C342                       		exg	d1,d2
00012782                            
00012782                            loc_10E6E:
00012782 4441                       		neg.w	d1
00012784 D268 0032                  		add.w	$32(a0),d1
00012788 3141 0008                  		move.w	d1,8(a0)
0001278C D468 0030                  		add.w	$30(a0),d2
00012790 3142 000C                  		move.w	d2,$C(a0)
00012794 4E75                       		rts	
00012796                            ; ===========================================================================
00012796                            ; ---------------------------------------------------------------------------
00012796                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012796                            ; ---------------------------------------------------------------------------
00012796                            Map_obj5A:
00012796                            	include "_maps\obj5A.asm"
00012796                            ; ---------------------------------------------------------------------------
00012796                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012796                            ; ---------------------------------------------------------------------------
00012796 0000                       		dc.w byte_10E84-Map_obj5A
00012798 02                         byte_10E84:	dc.b 2
00012799 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001279E F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000127A4 00                         		even
000127A4 00                         		even
000127A4                            
000127A4                            ; ===========================================================================
000127A4                            ; ---------------------------------------------------------------------------
000127A4                            ; Object 5B - blocks that form a staircase (SLZ)
000127A4                            ; ---------------------------------------------------------------------------
000127A4                            
000127A4                            Obj5B:					; XREF: Obj_Index
000127A4 7000                       		moveq	#0,d0
000127A6 1028 0024                  		move.b	$24(a0),d0
000127AA 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000127AE 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000127B2 3028 0030                  		move.w	$30(a0),d0
000127B6 0240 FF80                  		andi.w	#$FF80,d0
000127BA 3238 F700                  		move.w	($FFFFF700).w,d1
000127BE 0441 0080                  		subi.w	#$80,d1
000127C2 0241 FF80                  		andi.w	#$FF80,d1
000127C6 9041                       		sub.w	d1,d0
000127C8 0C40 0280                  		cmpi.w	#$280,d0
000127CC 6300 C162                  		bls.w	DisplaySprite
000127D0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000127D4 6700 C1AA                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
000127D8 3440                       		movea.w	d0,a2	; load address into a2
000127DA 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
000127DE 6000 C1A0                  		bra.w	DeleteObject
000127E2                            ; ===========================================================================
000127E2 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000127E4 0000                       		dc.w Obj5B_Move-Obj5B_Index
000127E6 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000127E8                            ; ===========================================================================
000127E8                            
000127E8                            Obj5B_Main:				; XREF: Obj5B_Index
000127E8 5428 0024                  		addq.b	#2,$24(a0)
000127EC 7638                       		moveq	#$38,d3
000127EE 7801                       		moveq	#1,d4
000127F0 0828 0000 0022             		btst	#0,$22(a0)
000127F6 6700                       		beq.s	loc_10EDA
000127F8 763B                       		moveq	#$3B,d3
000127FA 78FF                       		moveq	#-1,d4
000127FC                            
000127FC                            loc_10EDA:
000127FC 3428 0008                  		move.w	8(a0),d2
00012800 2248                       		movea.l	a0,a1
00012802 7203                       		moveq	#3,d1
00012804 6000                       		bra.s	Obj5B_MakeBlocks
00012806                            ; ===========================================================================
00012806                            
00012806                            Obj5B_Loop:
00012806 6100 C894                  		bsr.w	SingleObjLoad2
0001280A 6600 0000                  		bne.w	Obj5B_Move
0001280E 137C 0004 0024             		move.b	#4,$24(a1)
00012814                            
00012814                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00012814 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00012818 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00012820 337C 4000 0002             		move.w	#$4000,2(a1)
00012826 137C 0004 0001             		move.b	#4,1(a1)
0001282C 137C 0003 0018             		move.b	#3,$18(a1)
00012832 137C 0010 0019             		move.b	#$10,$19(a1)
00012838 1368 0028 0028             		move.b	$28(a0),$28(a1)
0001283E 3342 0008                  		move.w	d2,8(a1)
00012842 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012848 3368 0008 0030             		move.w	8(a0),$30(a1)
0001284E 3369 000C 0032             		move.w	$C(a1),$32(a1)
00012854 0642 0020                  		addi.w	#$20,d2
00012858 1343 0037                  		move.b	d3,$37(a1)
0001285C 2348 003C                  		move.l	a0,$3C(a1)
00012860 D604                       		add.b	d4,d3
00012862 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00012866                            
00012866                            Obj5B_Move:				; XREF: Obj5B_Index
00012866 7000                       		moveq	#0,d0
00012868 1028 0028                  		move.b	$28(a0),d0
0001286C 0240 0007                  		andi.w	#7,d0
00012870 D040                       		add.w	d0,d0
00012872 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00012876 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
0001287A                            
0001287A                            Obj5B_Solid:				; XREF: Obj5B_Index
0001287A 2468 003C                  		movea.l	$3C(a0),a2
0001287E 7000                       		moveq	#0,d0
00012880 1028 0037                  		move.b	$37(a0),d0
00012884 1032 0000                  		move.b	(a2,d0.w),d0
00012888 D068 0032                  		add.w	$32(a0),d0
0001288C 3140 000C                  		move.w	d0,$C(a0)
00012890 7200                       		moveq	#0,d1
00012892 1228 0019                  		move.b	$19(a0),d1
00012896 0641 000B                  		addi.w	#$B,d1
0001289A 343C 0010                  		move.w	#$10,d2
0001289E 363C 0011                  		move.w	#$11,d3
000128A2 3828 0008                  		move.w	8(a0),d4
000128A6 6100 E9F6                  		bsr.w	SolidObject
000128AA 4A04                       		tst.b	d4
000128AC 6A00                       		bpl.s	loc_10F92
000128AE 1544 0036                  		move.b	d4,$36(a2)
000128B2                            
000128B2                            loc_10F92:
000128B2 0828 0003 0022             		btst	#3,$22(a0)
000128B8 6700                       		beq.s	locret_10FA0
000128BA 157C 0001 0036             		move.b	#1,$36(a2)
000128C0                            
000128C0                            locret_10FA0:
000128C0 4E75                       		rts	
000128C2                            ; ===========================================================================
000128C2 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000128C4 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000128C6 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
000128C8 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000128CA                            ; ===========================================================================
000128CA                            
000128CA                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
000128CA 4A68 0034                  		tst.w	$34(a0)
000128CE 6600                       		bne.s	loc_10FC0
000128D0 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000128D6 6600                       		bne.s	locret_10FBE
000128D8 317C 001E 0034             		move.w	#$1E,$34(a0)
000128DE                            
000128DE                            locret_10FBE:
000128DE 4E75                       		rts	
000128E0                            ; ===========================================================================
000128E0                            
000128E0                            loc_10FC0:
000128E0 5368 0034                  		subq.w	#1,$34(a0)
000128E4 66F8                       		bne.s	locret_10FBE
000128E6 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000128EA 4E75                       		rts	
000128EC                            ; ===========================================================================
000128EC                            
000128EC                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
000128EC 4A68 0034                  		tst.w	$34(a0)
000128F0 6600                       		bne.s	loc_10FE0
000128F2 4A28 0036                  		tst.b	$36(a0)
000128F6 6A00                       		bpl.s	locret_10FDE
000128F8 317C 003C 0034             		move.w	#$3C,$34(a0)
000128FE                            
000128FE                            locret_10FDE:
000128FE 4E75                       		rts	
00012900                            ; ===========================================================================
00012900                            
00012900                            loc_10FE0:
00012900 5368 0034                  		subq.w	#1,$34(a0)
00012904 6600                       		bne.s	loc_10FEC
00012906 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001290A 4E75                       		rts	
0001290C                            ; ===========================================================================
0001290C                            
0001290C                            loc_10FEC:
0001290C 43E8 0038                  		lea	$38(a0),a1
00012910 3028 0034                  		move.w	$34(a0),d0
00012914 E408                       		lsr.b	#2,d0
00012916 0200 0001                  		andi.b	#1,d0
0001291A 12C0                       		move.b	d0,(a1)+
0001291C 0A00 0001                  		eori.b	#1,d0
00012920 12C0                       		move.b	d0,(a1)+
00012922 0A00 0001                  		eori.b	#1,d0
00012926 12C0                       		move.b	d0,(a1)+
00012928 0A00 0001                  		eori.b	#1,d0
0001292C 12C0                       		move.b	d0,(a1)+
0001292E 4E75                       		rts	
00012930                            ; ===========================================================================
00012930                            
00012930                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00012930 43E8 0038                  		lea	$38(a0),a1
00012934 0C11 0080                  		cmpi.b	#$80,(a1)
00012938 6700                       		beq.s	locret_11038
0001293A 5211                       		addq.b	#1,(a1)
0001293C 7200                       		moveq	#0,d1
0001293E 1219                       		move.b	(a1)+,d1
00012940 4841                       		swap	d1
00012942 E289                       		lsr.l	#1,d1
00012944 2401                       		move.l	d1,d2
00012946 E289                       		lsr.l	#1,d1
00012948 2601                       		move.l	d1,d3
0001294A D682                       		add.l	d2,d3
0001294C 4841                       		swap	d1
0001294E 4842                       		swap	d2
00012950 4843                       		swap	d3
00012952 12C3                       		move.b	d3,(a1)+
00012954 12C2                       		move.b	d2,(a1)+
00012956 12C1                       		move.b	d1,(a1)+
00012958                            
00012958                            locret_11038:
00012958 4E75                       		rts	
0001295A 4E75                       		rts	
0001295C                            ; ===========================================================================
0001295C                            ; ---------------------------------------------------------------------------
0001295C                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001295C                            ; ---------------------------------------------------------------------------
0001295C                            Map_obj5B:
0001295C                            	include "_maps\obj5B.asm"
0001295C                            ; ---------------------------------------------------------------------------
0001295C                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001295C                            ; ---------------------------------------------------------------------------
0001295C 0000                       		dc.w byte_1103E-Map_obj5B
0001295E 01                         byte_1103E:	dc.b 1
0001295F F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00012964                            		even
00012964                            		even
00012964                            
00012964                            ; ===========================================================================
00012964                            ; ---------------------------------------------------------------------------
00012964                            ; Object 5C - metal girders in foreground (SLZ)
00012964                            ; ---------------------------------------------------------------------------
00012964                            
00012964                            Obj5C:					; XREF: Obj_Index
00012964 7000                       		moveq	#0,d0
00012966 1028 0024                  		move.b	$24(a0),d0
0001296A 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
0001296E 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00012972                            ; ===========================================================================
00012972 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00012974 0000                       		dc.w Obj5C_Display-Obj5C_Index
00012976                            ; ===========================================================================
00012976                            
00012976                            Obj5C_Main:				; XREF: Obj5C_Index
00012976 5428 0024                  		addq.b	#2,$24(a0)
0001297A 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00012982 317C 83CC 0002             		move.w	#$83CC,2(a0)
00012988 117C 0010 0019             		move.b	#$10,$19(a0)
0001298E                            
0001298E                            Obj5C_Display:				; XREF: Obj5C_Index
0001298E 2238 F700                  		move.l	($FFFFF700).w,d1
00012992 D281                       		add.l	d1,d1
00012994 4841                       		swap	d1
00012996 4441                       		neg.w	d1
00012998 3141 0008                  		move.w	d1,8(a0)
0001299C 2238 F704                  		move.l	($FFFFF704).w,d1
000129A0 D281                       		add.l	d1,d1
000129A2 4841                       		swap	d1
000129A4 0241 003F                  		andi.w	#$3F,d1
000129A8 4441                       		neg.w	d1
000129AA 0641 0100                  		addi.w	#$100,d1
000129AE 3141 000A                  		move.w	d1,$A(a0)
000129B2 6000 BF7C                  		bra.w	DisplaySprite
000129B6                            ; ===========================================================================
000129B6                            ; ---------------------------------------------------------------------------
000129B6                            ; Sprite mappings - metal girders in foreground	(SLZ)
000129B6                            ; ---------------------------------------------------------------------------
000129B6                            Map_obj5C:
000129B6                            	include "_maps\obj5C.asm"
000129B6                            ; ---------------------------------------------------------------------------
000129B6                            ; Sprite mappings - metal girders in foreground	(SLZ)
000129B6                            ; ---------------------------------------------------------------------------
000129B6 0000                       		dc.w byte_11098-Map_obj5C
000129B8 09                         byte_11098:	dc.b 9
000129B9 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000129BE A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000129C3 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000129C8 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000129CD 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000129D2 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000129D7 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000129DC 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000129E1 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000129E6                            		even
000129E6                            		even
000129E6                            
000129E6                            ; ===========================================================================
000129E6                            ; ---------------------------------------------------------------------------
000129E6                            ; Object 1B - water surface (LZ)
000129E6                            ; ---------------------------------------------------------------------------
000129E6                            
000129E6                            Obj1B:					; XREF: Obj_Index
000129E6 7000                       		moveq	#0,d0
000129E8 1028 0024                  		move.b	$24(a0),d0
000129EC 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
000129F0 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
000129F4                            ; ===========================================================================
000129F4 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
000129F6 0000                       		dc.w Obj1B_Action-Obj1B_Index
000129F8                            ; ===========================================================================
000129F8                            
000129F8                            Obj1B_Main:				; XREF: Obj1B_Index
000129F8 5428 0024                  		addq.b	#2,$24(a0)
000129FC 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00012A04 317C C300 0002             		move.w	#$C300,2(a0)
00012A0A 117C 0004 0001             		move.b	#4,1(a0)
00012A10 117C 0080 0019             		move.b	#$80,$19(a0)
00012A16 3168 0008 0030             		move.w	8(a0),$30(a0)
00012A1C                            
00012A1C                            Obj1B_Action:				; XREF: Obj1B_Index
00012A1C 3238 F700                  		move.w	($FFFFF700).w,d1
00012A20 0241 FFE0                  		andi.w	#$FFE0,d1
00012A24 D268 0030                  		add.w	$30(a0),d1
00012A28 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00012A2E 6700                       		beq.s	loc_11114
00012A30 0641 0020                  		addi.w	#$20,d1
00012A34                            
00012A34                            loc_11114:
00012A34 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00012A38 3238 F646                  		move.w	($FFFFF646).w,d1
00012A3C 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00012A40 4A28 0032                  		tst.b	$32(a0)
00012A44 6600                       		bne.s	Obj1B_Animate
00012A46 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00012A4C 6700                       		beq.s	loc_1114A	; if not, branch
00012A4E 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00012A52 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00012A58 6000                       		bra.s	Obj1B_Display
00012A5A                            ; ===========================================================================
00012A5A                            
00012A5A                            Obj1B_Animate:				; XREF: loc_11114
00012A5A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00012A5E 6600                       		bne.s	Obj1B_Display	; if yes, branch
00012A60 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00012A66 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00012A6A                            
00012A6A                            loc_1114A:				; XREF: loc_11114
00012A6A 5328 001E                  		subq.b	#1,$1E(a0)
00012A6E 6A00                       		bpl.s	Obj1B_Display
00012A70 117C 0007 001E             		move.b	#7,$1E(a0)
00012A76 5228 001A                  		addq.b	#1,$1A(a0)
00012A7A 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00012A80 6500                       		bcs.s	Obj1B_Display
00012A82 117C 0000 001A             		move.b	#0,$1A(a0)
00012A88                            
00012A88                            Obj1B_Display:
00012A88 6000 BEA6                  		bra.w	DisplaySprite
00012A8C                            ; ===========================================================================
00012A8C                            ; ---------------------------------------------------------------------------
00012A8C                            ; Sprite mappings - water surface (LZ)
00012A8C                            ; ---------------------------------------------------------------------------
00012A8C                            Map_obj1B:
00012A8C                            	include "_maps\obj1B.asm"
00012A8C                            ; ---------------------------------------------------------------------------
00012A8C                            ; Sprite mappings - water surface (LZ)
00012A8C                            ; ---------------------------------------------------------------------------
00012A8C 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00012A90 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00012A94 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00012A98 03                         byte_11178:	dc.b 3
00012A99 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00012A9E FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012AA3 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012AA8 03                         byte_11188:	dc.b 3
00012AA9 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012AAE FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012AB3 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012AB8 03                         byte_11198:	dc.b 3
00012AB9 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012ABE FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012AC3 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012AC8 06                         byte_111A8:	dc.b 6
00012AC9 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00012ACE FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00012AD3 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012AD8 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00012ADD FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012AE2 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00012AE7 06                         byte_111C7:	dc.b 6
00012AE8 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012AED FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00012AF2 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012AF7 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00012AFC FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012B01 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00012B06 06                         byte_111E6:	dc.b 6
00012B07 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012B0C FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00012B11 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012B16 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00012B1B FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012B20 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00012B26 00                         		even
00012B26 00                         		even
00012B26                            
00012B26                            ; ===========================================================================
00012B26                            ; ---------------------------------------------------------------------------
00012B26                            ; Object 0B - pole that	breaks (LZ)
00012B26                            ; ---------------------------------------------------------------------------
00012B26                            
00012B26                            Obj0B:					; XREF: Obj_Index
00012B26 7000                       		moveq	#0,d0
00012B28 1028 0024                  		move.b	$24(a0),d0
00012B2C 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00012B30 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00012B34                            ; ===========================================================================
00012B34 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00012B36 0000                       		dc.w Obj0B_Action-Obj0B_Index
00012B38 0000                       		dc.w Obj0B_Display-Obj0B_Index
00012B3A                            ; ===========================================================================
00012B3A                            
00012B3A                            Obj0B_Main:				; XREF: Obj0B_Index
00012B3A 5428 0024                  		addq.b	#2,$24(a0)
00012B3E 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00012B46 317C 43DE 0002             		move.w	#$43DE,2(a0)
00012B4C 117C 0004 0001             		move.b	#4,1(a0)
00012B52 117C 0008 0019             		move.b	#8,$19(a0)
00012B58 117C 0004 0018             		move.b	#4,$18(a0)
00012B5E 117C 00E1 0020             		move.b	#$E1,$20(a0)
00012B64 7000                       		moveq	#0,d0
00012B66 1028 0028                  		move.b	$28(a0),d0	; get object type
00012B6A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012B6E 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00012B72                            
00012B72                            Obj0B_Action:				; XREF: Obj0B_Index
00012B72 4A28 0032                  		tst.b	$32(a0)
00012B76 6700                       		beq.s	Obj0B_Grab
00012B78 4A68 0030                  		tst.w	$30(a0)
00012B7C 6700                       		beq.s	Obj0B_MoveUp
00012B7E 5368 0030                  		subq.w	#1,$30(a0)
00012B82 6600                       		bne.s	Obj0B_MoveUp
00012B84 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00012B8A 6000                       		bra.s	Obj0B_Release
00012B8C                            ; ===========================================================================
00012B8C                            
00012B8C                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00012B8C 43F8 D000                  		lea	($FFFFD000).w,a1
00012B90 3028 000C                  		move.w	$C(a0),d0
00012B94 0440 0018                  		subi.w	#$18,d0
00012B98 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00012B9E 6700                       		beq.s	Obj0B_MoveDown
00012BA0 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00012BA4 B069 000C                  		cmp.w	$C(a1),d0
00012BA8 6500                       		bcs.s	Obj0B_MoveDown
00012BAA 3340 000C                  		move.w	d0,$C(a1)
00012BAE                            
00012BAE                            Obj0B_MoveDown:
00012BAE 0640 0024                  		addi.w	#$24,d0
00012BB2 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00012BB8 6700                       		beq.s	Obj0B_LetGo
00012BBA 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00012BBE B069 000C                  		cmp.w	$C(a1),d0
00012BC2 6400                       		bcc.s	Obj0B_LetGo
00012BC4 3340 000C                  		move.w	d0,$C(a1)
00012BC8                            
00012BC8                            Obj0B_LetGo:
00012BC8 1038 F603                  		move.b	($FFFFF603).w,d0
00012BCC 0240 0070                  		andi.w	#$70,d0
00012BD0 6700                       		beq.s	Obj0B_Display
00012BD2                            
00012BD2                            Obj0B_Release:				; XREF: Obj0B_Action
00012BD2 4228 0020                  		clr.b	$20(a0)
00012BD6 5428 0024                  		addq.b	#2,$24(a0)
00012BDA 4238 F7C8                  		clr.b	($FFFFF7C8).w
00012BDE 4238 F7C9                  		clr.b	($FFFFF7C9).w
00012BE2 4228 0032                  		clr.b	$32(a0)
00012BE6 6000                       		bra.s	Obj0B_Display
00012BE8                            ; ===========================================================================
00012BE8                            
00012BE8                            Obj0B_Grab:				; XREF: Obj0B_Action
00012BE8 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00012BEC 6700                       		beq.s	Obj0B_Display	; if not, branch
00012BEE 43F8 D000                  		lea	($FFFFD000).w,a1
00012BF2 3028 0008                  		move.w	8(a0),d0
00012BF6 0640 0014                  		addi.w	#$14,d0
00012BFA B069 0008                  		cmp.w	8(a1),d0
00012BFE 6400                       		bcc.s	Obj0B_Display
00012C00 4228 0021                  		clr.b	$21(a0)
00012C04 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00012C0A 6400                       		bcc.s	Obj0B_Display
00012C0C 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00012C10 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00012C14 3028 0008                  		move.w	8(a0),d0
00012C18 0640 0014                  		addi.w	#$14,d0
00012C1C 3340 0008                  		move.w	d0,8(a1)
00012C20 08A9 0000 0022             		bclr	#0,$22(a1)
00012C26 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00012C2C 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00012C32 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012C38 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00012C3E                            
00012C3E                            Obj0B_Display:				; XREF: Obj0B_Index
00012C3E 6000 E33A                  		bra.w	MarkObjGone
00012C42                            ; ===========================================================================
00012C42                            ; ---------------------------------------------------------------------------
00012C42                            ; Sprite mappings - pole that breaks (LZ)
00012C42                            ; ---------------------------------------------------------------------------
00012C42                            Map_obj0B:
00012C42                            	include "_maps\obj0B.asm"
00012C42                            ; ---------------------------------------------------------------------------
00012C42                            ; Sprite mappings - pole that breaks (LZ)
00012C42                            ; ---------------------------------------------------------------------------
00012C42 0000                       		dc.w byte_11326-Map_obj0B
00012C44 0000                       		dc.w byte_11331-Map_obj0B
00012C46 02                         byte_11326:	dc.b 2			; normal pole
00012C47 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00012C4C 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00012C51 04                         byte_11331:	dc.b 4			; broken pole
00012C52 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00012C57 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00012C5C 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00012C61 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00012C66                            		even
00012C66                            		even
00012C66                            
00012C66                            ; ===========================================================================
00012C66                            ; ---------------------------------------------------------------------------
00012C66                            ; Object 0C - flapping door (LZ)
00012C66                            ; ---------------------------------------------------------------------------
00012C66                            
00012C66                            Obj0C:					; XREF: Obj_Index
00012C66 7000                       		moveq	#0,d0
00012C68 1028 0024                  		move.b	$24(a0),d0
00012C6C 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00012C70 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00012C74                            ; ===========================================================================
00012C74 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00012C76 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00012C78                            ; ===========================================================================
00012C78                            
00012C78                            Obj0C_Main:				; XREF: Obj0C_Index
00012C78 5428 0024                  		addq.b	#2,$24(a0)
00012C7C 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00012C84 317C 4328 0002             		move.w	#$4328,2(a0)
00012C8A 0028 0004 0001             		ori.b	#4,1(a0)
00012C90 117C 0028 0019             		move.b	#$28,$19(a0)
00012C96 7000                       		moveq	#0,d0
00012C98 1028 0028                  		move.b	$28(a0),d0	; get object type
00012C9C C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012CA0 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00012CA4                            
00012CA4                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00012CA4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012CA8 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00012CAA 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00012CB0 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00012CB6 4A28 0001                  		tst.b	1(a0)
00012CBA 6A00                       		bpl.s	Obj0C_Solid
00012CBC 303C 00BB                  		move.w	#$BB,d0
00012CC0 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play door sound
00012CC6                            
00012CC6                            Obj0C_Solid:
00012CC6 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00012CCC 6100 8CC2                  		bsr.w	AnimateSprite
00012CD0 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00012CD4 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00012CD8 6600                       		bne.s	Obj0C_Display	; if yes, branch
00012CDA 3038 D008                  		move.w	($FFFFD008).w,d0
00012CDE B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00012CE2 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00012CE4 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012CEA 323C 0013                  		move.w	#$13,d1
00012CEE 343C 0020                  		move.w	#$20,d2
00012CF2 3602                       		move.w	d2,d3
00012CF4 5243                       		addq.w	#1,d3
00012CF6 3828 0008                  		move.w	8(a0),d4
00012CFA 6100 E5A2                  		bsr.w	SolidObject	; make the door	solid
00012CFE                            
00012CFE                            Obj0C_Display:
00012CFE 6000 E27A                  		bra.w	MarkObjGone
00012D02                            ; ===========================================================================
00012D02                            Ani_obj0C:
00012D02                            	include "_anim\obj0C.asm"
00012D02                            ; ---------------------------------------------------------------------------
00012D02                            ; Animation script - flapping door (LZ)
00012D02                            ; ---------------------------------------------------------------------------
00012D02 0000                       		dc.w byte_113E6-Ani_obj0C
00012D04 0000                       		dc.w byte_113EC-Ani_obj0C
00012D06 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00012D0C 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00012D12                            		even
00012D12                            		even
00012D12                            
00012D12                            ; ---------------------------------------------------------------------------
00012D12                            ; Sprite mappings - flapping door (LZ)
00012D12                            ; ---------------------------------------------------------------------------
00012D12                            Map_obj0C:
00012D12                            	include "_maps\obj0C.asm"
00012D12                            ; ---------------------------------------------------------------------------
00012D12                            ; Sprite mappings - flapping door (LZ)
00012D12                            ; ---------------------------------------------------------------------------
00012D12 0000                       		dc.w byte_113F8-Map_obj0C
00012D14 0000                       		dc.w byte_11403-Map_obj0C
00012D16 0000                       		dc.w byte_1140E-Map_obj0C
00012D18 02                         byte_113F8:	dc.b 2
00012D19 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00012D1E 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012D23 02                         byte_11403:	dc.b 2
00012D24 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00012D29 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00012D2E 02                         byte_1140E:	dc.b 2
00012D2F D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00012D34 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00012D3A 00                         		even
00012D3A 00                         		even
00012D3A                            
00012D3A                            ; ===========================================================================
00012D3A                            ; ---------------------------------------------------------------------------
00012D3A                            ; Object 71 - invisible	solid blocks
00012D3A                            ; ---------------------------------------------------------------------------
00012D3A                            
00012D3A                            Obj71:					; XREF: Obj_Index
00012D3A 7000                       		moveq	#0,d0
00012D3C 1028 0024                  		move.b	$24(a0),d0
00012D40 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00012D44 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00012D48                            ; ===========================================================================
00012D48 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00012D4A 0000                       		dc.w Obj71_Solid-Obj71_Index
00012D4C                            ; ===========================================================================
00012D4C                            
00012D4C                            Obj71_Main:				; XREF: Obj71_Index
00012D4C 5428 0024                  		addq.b	#2,$24(a0)
00012D50 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00012D58 317C 8680 0002             		move.w	#$8680,2(a0)
00012D5E 0028 0004 0001             		ori.b	#4,1(a0)
00012D64 1028 0028                  		move.b	$28(a0),d0	; get object type
00012D68 1200                       		move.b	d0,d1
00012D6A 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00012D6E 0640 0010                  		addi.w	#$10,d0
00012D72 E248                       		lsr.w	#1,d0
00012D74 1140 0019                  		move.b	d0,$19(a0)	; set object width
00012D78 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00012D7C 5241                       		addq.w	#1,d1
00012D7E E749                       		lsl.w	#3,d1
00012D80 1141 0016                  		move.b	d1,$16(a0)	; set object height
00012D84                            
00012D84                            Obj71_Solid:				; XREF: Obj71_Index
00012D84 6100 BF70                  		bsr.w	ChkObjOnScreen
00012D88 6600                       		bne.s	Obj71_ChkDel
00012D8A 7200                       		moveq	#0,d1
00012D8C 1228 0019                  		move.b	$19(a0),d1
00012D90 0641 000B                  		addi.w	#$B,d1
00012D94 7400                       		moveq	#0,d2
00012D96 1428 0016                  		move.b	$16(a0),d2
00012D9A 3602                       		move.w	d2,d3
00012D9C 5243                       		addq.w	#1,d3
00012D9E 3828 0008                  		move.w	8(a0),d4
00012DA2 6100 E542                  		bsr.w	SolidObject71
00012DA6                            
00012DA6                            Obj71_ChkDel:
00012DA6 3028 0008                  		move.w	8(a0),d0
00012DAA 0240 FF80                  		andi.w	#$FF80,d0
00012DAE 3238 F700                  		move.w	($FFFFF700).w,d1
00012DB2 0441 0080                  		subi.w	#$80,d1
00012DB6 0241 FF80                  		andi.w	#$FF80,d1
00012DBA 9041                       		sub.w	d1,d0
00012DBC 0C40 0280                  		cmpi.w	#$280,d0
00012DC0 6300                       		bls.s	Obj71_NoDel
00012DC2 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012DC6 6700                       		beq.s	Obj71_Delete		; if it's zero, don't remember object
00012DC8 3440                       		movea.w	d0,a2	; load address into a2
00012DCA 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00012DCE 6000                       		bra.s	Obj71_Delete	; and delete object
00012DD0                            
00012DD0                            Obj71_NoDel:
00012DD0 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00012DD4 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00012DD6 4EFA BB58                  		jmp	DisplaySprite	; if yes, display the object
00012DDA                            ; ===========================================================================
00012DDA                            
00012DDA                            Obj71_NoDisplay:
00012DDA 4E75                       		rts	
00012DDC                            ; ===========================================================================
00012DDC                            
00012DDC                            Obj71_Delete:
00012DDC 4EFA BBA2                  		jmp	DeleteObject
00012DE0                            ; ===========================================================================
00012DE0                            ; ---------------------------------------------------------------------------
00012DE0                            ; Sprite mappings - invisible solid blocks
00012DE0                            ; ---------------------------------------------------------------------------
00012DE0                            Map_obj71:
00012DE0                            	include "_maps\obj71.asm"
00012DE0                            ; ---------------------------------------------------------------------------
00012DE0                            ; Sprite mappings - invisible solid blocks
00012DE0                            ; ---------------------------------------------------------------------------
00012DE0 0000                       		dc.w byte_114BC-Map_obj71
00012DE2 0000                       		dc.w byte_114D1-Map_obj71
00012DE4 0000                       		dc.w byte_114E6-Map_obj71
00012DE6 04                         byte_114BC:	dc.b 4
00012DE7 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00012DEC F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00012DF1 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00012DF6 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00012DFB 04                         byte_114D1:	dc.b 4
00012DFC E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00012E01 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00012E06 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00012E0B 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00012E10 04                         byte_114E6:	dc.b 4
00012E11 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00012E16 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00012E1B 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00012E20 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00012E26 00                         		even
00012E26 00                         		even
00012E26                            
00012E26                            ; ===========================================================================
00012E26                            ; ---------------------------------------------------------------------------
00012E26                            ; Object 5D - fans (SLZ)
00012E26                            ; ---------------------------------------------------------------------------
00012E26                            
00012E26                            Obj5D:					; XREF: Obj_Index
00012E26 7000                       		moveq	#0,d0
00012E28 1028 0024                  		move.b	$24(a0),d0
00012E2C 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00012E30 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00012E34                            ; ===========================================================================
00012E34 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00012E36 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00012E38                            ; ===========================================================================
00012E38                            
00012E38                            Obj5D_Main:				; XREF: Obj5D_Index
00012E38 5428 0024                  		addq.b	#2,$24(a0)
00012E3C 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00012E44 317C 43A0 0002             		move.w	#$43A0,2(a0)
00012E4A 0028 0004 0001             		ori.b	#4,1(a0)
00012E50 117C 0010 0019             		move.b	#$10,$19(a0)
00012E56 117C 0004 0018             		move.b	#4,$18(a0)
00012E5C                            
00012E5C                            Obj5D_Delay:				; XREF: Obj5D_Index
00012E5C 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00012E62 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00012E64 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012E68 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00012E6A 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00012E70 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00012E76 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00012E78 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00012E7E                            
00012E7E                            Obj5D_Blow:
00012E7E 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00012E82 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00012E86 43F8 D000                  		lea	($FFFFD000).w,a1
00012E8A 3029 0008                  		move.w	8(a1),d0
00012E8E 9068 0008                  		sub.w	8(a0),d0
00012E92 0828 0000 0022             		btst	#0,$22(a0)
00012E98 6600                       		bne.s	Obj5D_ChkSonic
00012E9A 4440                       		neg.w	d0
00012E9C                            
00012E9C                            Obj5D_ChkSonic:
00012E9C 0640 0050                  		addi.w	#$50,d0
00012EA0 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00012EA4 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00012EA6 3229 000C                  		move.w	$C(a1),d1
00012EAA 0641 0060                  		addi.w	#$60,d1
00012EAE 9268 000C                  		sub.w	$C(a0),d1
00012EB2 6500                       		bcs.s	Obj5D_Animate
00012EB4 0C41 0070                  		cmpi.w	#$70,d1
00012EB8 6400                       		bcc.s	Obj5D_Animate
00012EBA 0440 0050                  		subi.w	#$50,d0
00012EBE 6400                       		bcc.s	loc_1159A
00012EC0 4640                       		not.w	d0
00012EC2 D040                       		add.w	d0,d0
00012EC4                            
00012EC4                            loc_1159A:
00012EC4 0640 0060                  		addi.w	#$60,d0
00012EC8 0828 0000 0022             		btst	#0,$22(a0)
00012ECE 6600                       		bne.s	loc_115A8
00012ED0 4440                       		neg.w	d0
00012ED2                            
00012ED2                            loc_115A8:
00012ED2 4400                       		neg.b	d0
00012ED4 E840                       		asr.w	#4,d0
00012ED6 0828 0000 0028             		btst	#0,$28(a0)
00012EDC 6700                       		beq.s	Obj5D_MoveSonic
00012EDE 4440                       		neg.w	d0
00012EE0                            
00012EE0                            Obj5D_MoveSonic:
00012EE0 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00012EE4                            
00012EE4                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00012EE4 5328 001E                  		subq.b	#1,$1E(a0)
00012EE8 6A00                       		bpl.s	Obj5D_ChkDel
00012EEA 117C 0000 001E             		move.b	#0,$1E(a0)
00012EF0 5228 001B                  		addq.b	#1,$1B(a0)
00012EF4 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00012EFA 6500                       		bcs.s	loc_115D8
00012EFC 117C 0000 001B             		move.b	#0,$1B(a0)
00012F02                            
00012F02                            loc_115D8:
00012F02 7000                       		moveq	#0,d0
00012F04 0828 0000 0028             		btst	#0,$28(a0)
00012F0A 6700                       		beq.s	loc_115E4
00012F0C 7002                       		moveq	#2,d0
00012F0E                            
00012F0E                            loc_115E4:
00012F0E D028 001B                  		add.b	$1B(a0),d0
00012F12 1140 001A                  		move.b	d0,$1A(a0)
00012F16                            
00012F16                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00012F16 6100 BA18                  		bsr.w	DisplaySprite
00012F1A 3028 0008                  		move.w	8(a0),d0
00012F1E 0240 FF80                  		andi.w	#$FF80,d0
00012F22 3238 F700                  		move.w	($FFFFF700).w,d1
00012F26 0441 0080                  		subi.w	#$80,d1
00012F2A 0241 FF80                  		andi.w	#$FF80,d1
00012F2E 9041                       		sub.w	d1,d0
00012F30 0C40 0280                  		cmpi.w	#$280,d0
00012F34 6300                       		bls.s	Obj5D_NoDel
00012F36 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012F3A 6700 BA44                  		beq.w	DeleteObject		; if it's zero, don't remember object
00012F3E 3440                       		movea.w	d0,a2	; load address into a2
00012F40 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00012F44 6000 BA3A                  		bra.w	DeleteObject	; and delete object
00012F48                            
00012F48                            Obj5D_NoDel:
00012F48 4E75                       		rts	
00012F4A                            ; ===========================================================================
00012F4A                            ; ---------------------------------------------------------------------------
00012F4A                            ; Sprite mappings - fans (SLZ)
00012F4A                            ; ---------------------------------------------------------------------------
00012F4A                            Map_obj5D:
00012F4A                            	include "_maps\obj5D.asm"
00012F4A                            ; ---------------------------------------------------------------------------
00012F4A                            ; Sprite mappings - fans (SLZ)
00012F4A                            ; ---------------------------------------------------------------------------
00012F4A 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00012F4E 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00012F52 0000                       		dc.w byte_1161A-Map_obj5D
00012F54 02                         byte_1161A:	dc.b 2
00012F55 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00012F5A 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00012F5F 02                         byte_11625:	dc.b 2
00012F60 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00012F65 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00012F6A 02                         byte_11630:	dc.b 2
00012F6B F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00012F70 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00012F76 00                         		even
00012F76 00                         		even
00012F76                            
00012F76                            ; ===========================================================================
00012F76                            ; ---------------------------------------------------------------------------
00012F76                            ; Object 5E - seesaws (SLZ)
00012F76                            ; ---------------------------------------------------------------------------
00012F76                            
00012F76                            Obj5E:					; XREF: Obj_Index
00012F76 7000                       		moveq	#0,d0
00012F78 1028 0024                  		move.b	$24(a0),d0
00012F7C 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00012F80 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00012F84 3028 0030                  		move.w	$30(a0),d0
00012F88 0240 FF80                  		andi.w	#$FF80,d0
00012F8C 3238 F700                  		move.w	($FFFFF700).w,d1
00012F90 0441 0080                  		subi.w	#$80,d1
00012F94 0241 FF80                  		andi.w	#$FF80,d1
00012F98 9041                       		sub.w	d1,d0
00012F9A 6B00 B9E4                  		bmi.w	DeleteObject
00012F9E 0C40 0280                  		cmpi.w	#$280,d0
00012FA2 6300 B98C                  		bls.w	DisplaySprite
00012FA6 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012FAA 6700 B9D4                  		beq.w	DeleteObject		; if it's zero, don't remember object
00012FAE 3440                       		movea.w	d0,a2	; load address into a2
00012FB0 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00012FB4 6000 B9CA                  		bra.w	DeleteObject	; and delete object		
00012FB8                            ; ===========================================================================
00012FB8 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00012FBA 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00012FBC 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00012FBE 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00012FC0 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00012FC2 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00012FC4                            ; ===========================================================================
00012FC4                            
00012FC4                            Obj5E_Main:				; XREF: Obj5E_Index
00012FC4 5428 0024                  		addq.b	#2,$24(a0)
00012FC8 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00012FD0 317C 0374 0002             		move.w	#$374,2(a0)
00012FD6 0028 0004 0001             		ori.b	#4,1(a0)
00012FDC 117C 0004 0018             		move.b	#4,$18(a0)
00012FE2 117C 0030 0019             		move.b	#$30,$19(a0)
00012FE8 3168 0008 0030             		move.w	8(a0),$30(a0)
00012FEE 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00012FF2 6600                       		bne.s	loc_116D2	; if not, branch
00012FF4 6100 C0A6                  		bsr.w	SingleObjLoad2
00012FF8 6600                       		bne.s	loc_116D2
00012FFA 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00012FFE 5C29 0024                  		addq.b	#6,$24(a1)
00013002 3368 0008 0008             		move.w	8(a0),8(a1)
00013008 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001300E 1368 0022 0022             		move.b	$22(a0),$22(a1)
00013014 2348 003C                  		move.l	a0,$3C(a1)
00013018                            
00013018                            loc_116D2:
00013018 0828 0000 0022             		btst	#0,$22(a0)
0001301E 6700                       		beq.s	loc_116E0
00013020 117C 0002 001A             		move.b	#2,$1A(a0)
00013026                            
00013026                            loc_116E0:
00013026 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
0001302C                            
0001302C                            Obj5E_Slope:				; XREF: Obj5E_Index
0001302C 1228 003A                  		move.b	$3A(a0),d1
00013030 6100 0000                  		bsr.w	loc_11766
00013034 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001303A 0828 0000 001A             		btst	#0,$1A(a0)
00013040 6700                       		beq.s	loc_11702
00013042 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00013048                            
00013048                            loc_11702:
00013048 43F8 D000                  		lea	($FFFFD000).w,a1
0001304C 3169 0012 0038             		move.w	$12(a1),$38(a0)
00013052 323C 0030                  		move.w	#$30,d1
00013056 4EB9 0000 8604             		jsr	(SlopeObject).l
0001305C 4E75                       		rts	
0001305E                            ; ===========================================================================
0001305E                            
0001305E                            Obj5E_Slope2:				; XREF: Obj5E_Index
0001305E 6100 0000                  		bsr.w	loc_1174A
00013062 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00013068 0828 0000 001A             		btst	#0,$1A(a0)
0001306E 6700                       		beq.s	loc_11730
00013070 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00013076                            
00013076                            loc_11730:
00013076 323C 0030                  		move.w	#$30,d1
0001307A 4EB9 0000 86A4             		jsr	(ExitPlatform).l
00013080 323C 0030                  		move.w	#$30,d1
00013084 3428 0008                  		move.w	8(a0),d2
00013088 4EB9 0000 967A             		jsr	SlopeObject2
0001308E 4E75                       		rts	
00013090                            ; ===========================================================================
00013090                            
00013090                            loc_1174A:				; XREF: Obj5E_Slope2
00013090 7202                       		moveq	#2,d1
00013092 43F8 D000                  		lea	($FFFFD000).w,a1
00013096 3028 0008                  		move.w	8(a0),d0
0001309A 9069 0008                  		sub.w	8(a1),d0
0001309E 6400                       		bcc.s	loc_1175E
000130A0 4440                       		neg.w	d0
000130A2 7200                       		moveq	#0,d1
000130A4                            
000130A4                            loc_1175E:
000130A4 0C40 0008                  		cmpi.w	#8,d0
000130A8 6400                       		bcc.s	loc_11766
000130AA 7201                       		moveq	#1,d1
000130AC                            
000130AC                            loc_11766:
000130AC 1028 001A                  		move.b	$1A(a0),d0
000130B0 B001                       		cmp.b	d1,d0
000130B2 6700                       		beq.s	locret_11790
000130B4 6400                       		bcc.s	loc_11772
000130B6 5400                       		addq.b	#2,d0
000130B8                            
000130B8                            loc_11772:
000130B8 5300                       		subq.b	#1,d0
000130BA 1140 001A                  		move.b	d0,$1A(a0)
000130BE 1141 003A                  		move.b	d1,$3A(a0)
000130C2 08A8 0000 0001             		bclr	#0,1(a0)
000130C8 0828 0001 001A             		btst	#1,$1A(a0)
000130CE 6700                       		beq.s	locret_11790
000130D0 08E8 0000 0001             		bset	#0,1(a0)
000130D6                            
000130D6                            locret_11790:
000130D6 4E75                       		rts	
000130D8                            ; ===========================================================================
000130D8                            
000130D8                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000130D8 5428 0024                  		addq.b	#2,$24(a0)
000130DC 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
000130E4 317C 04F0 0002             		move.w	#$4F0,2(a0)
000130EA 0028 0004 0001             		ori.b	#4,1(a0)
000130F0 117C 0004 0018             		move.b	#4,$18(a0)
000130F6 117C 008B 0020             		move.b	#$8B,$20(a0)
000130FC 117C 000C 0019             		move.b	#$C,$19(a0)
00013102 3168 0008 0030             		move.w	8(a0),$30(a0)
00013108 0668 0028 0008             		addi.w	#$28,8(a0)
0001310E 3168 000C 0034             		move.w	$C(a0),$34(a0)
00013114 117C 0001 001A             		move.b	#1,$1A(a0)
0001311A 0828 0000 0022             		btst	#0,$22(a0)
00013120 6700                       		beq.s	Obj5E_MoveSpike
00013122 0468 0050 0008             		subi.w	#$50,8(a0)
00013128 117C 0002 003A             		move.b	#2,$3A(a0)
0001312E                            
0001312E                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
0001312E 2268 003C                  		movea.l	$3C(a0),a1
00013132 7000                       		moveq	#0,d0
00013134 1028 003A                  		move.b	$3A(a0),d0
00013138 9029 003A                  		sub.b	$3A(a1),d0
0001313C 6700                       		beq.s	loc_1183E
0001313E 6400                       		bcc.s	loc_117FC
00013140 4400                       		neg.b	d0
00013142                            
00013142                            loc_117FC:
00013142 323C F7E8                  		move.w	#-$818,d1
00013146 343C FEEC                  		move.w	#-$114,d2
0001314A 0C00 0001                  		cmpi.b	#1,d0
0001314E 6700                       		beq.s	loc_11822
00013150 323C F510                  		move.w	#-$AF0,d1
00013154 343C FF34                  		move.w	#-$CC,d2
00013158 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
0001315E 6D00                       		blt.s	loc_11822
00013160 323C F200                  		move.w	#-$E00,d1
00013164 343C FF60                  		move.w	#-$A0,d2
00013168                            
00013168                            loc_11822:
00013168 3141 0012                  		move.w	d1,$12(a0)
0001316C 3142 0010                  		move.w	d2,$10(a0)
00013170 3028 0008                  		move.w	8(a0),d0
00013174 9068 0030                  		sub.w	$30(a0),d0
00013178 6400                       		bcc.s	loc_11838
0001317A 4468 0010                  		neg.w	$10(a0)
0001317E                            
0001317E                            loc_11838:
0001317E 5428 0024                  		addq.b	#2,$24(a0)
00013182 6000                       		bra.s	Obj5E_SpikeFall
00013184                            ; ===========================================================================
00013184                            
00013184                            loc_1183E:				; XREF: Obj5E_MoveSpike
00013184 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001318A 7000                       		moveq	#0,d0
0001318C 1029 001A                  		move.b	$1A(a1),d0
00013190 343C 0028                  		move.w	#$28,d2
00013194 3228 0008                  		move.w	8(a0),d1
00013198 9268 0030                  		sub.w	$30(a0),d1
0001319C 6400                       		bcc.s	loc_1185C
0001319E 4442                       		neg.w	d2
000131A0 5440                       		addq.w	#2,d0
000131A2                            
000131A2                            loc_1185C:
000131A2 D040                       		add.w	d0,d0
000131A4 3228 0034                  		move.w	$34(a0),d1
000131A8 D272 0000                  		add.w	(a2,d0.w),d1
000131AC 3141 000C                  		move.w	d1,$C(a0)
000131B0 D468 0030                  		add.w	$30(a0),d2
000131B4 3142 0008                  		move.w	d2,8(a0)
000131B8 4268 000E                  		clr.w	$E(a0)
000131BC 4268 000A                  		clr.w	$A(a0)
000131C0 4E75                       		rts	
000131C2                            ; ===========================================================================
000131C2                            
000131C2                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000131C2 4A68 0012                  		tst.w	$12(a0)
000131C6 6A00                       		bpl.s	loc_1189A
000131C8 6100 B72C                  		bsr.w	ObjectFall
000131CC 3028 0034                  		move.w	$34(a0),d0
000131D0 0440 002F                  		subi.w	#$2F,d0
000131D4 B068 000C                  		cmp.w	$C(a0),d0
000131D8 6E00                       		bgt.s	locret_11898
000131DA 6100 B71A                  		bsr.w	ObjectFall
000131DE                            
000131DE                            locret_11898:
000131DE 4E75                       		rts	
000131E0                            ; ===========================================================================
000131E0                            
000131E0                            loc_1189A:				; XREF: Obj5E_SpikeFall
000131E0 6100 B714                  		bsr.w	ObjectFall
000131E4 2268 003C                  		movea.l	$3C(a0),a1
000131E8 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000131EE 7000                       		moveq	#0,d0
000131F0 1029 001A                  		move.b	$1A(a1),d0
000131F4 3228 0008                  		move.w	8(a0),d1
000131F8 9268 0030                  		sub.w	$30(a0),d1
000131FC 6400                       		bcc.s	loc_118BA
000131FE 5440                       		addq.w	#2,d0
00013200                            
00013200                            loc_118BA:
00013200 D040                       		add.w	d0,d0
00013202 3228 0034                  		move.w	$34(a0),d1
00013206 D272 0000                  		add.w	(a2,d0.w),d1
0001320A B268 000C                  		cmp.w	$C(a0),d1
0001320E 6E00                       		bgt.s	locret_11938
00013210 2268 003C                  		movea.l	$3C(a0),a1
00013214 7202                       		moveq	#2,d1
00013216 4A68 0010                  		tst.w	$10(a0)
0001321A 6B00                       		bmi.s	Obj5E_Spring
0001321C 7200                       		moveq	#0,d1
0001321E                            
0001321E                            Obj5E_Spring:
0001321E 1341 003A                  		move.b	d1,$3A(a1)
00013222 1141 003A                  		move.b	d1,$3A(a0)
00013226 B229 001A                  		cmp.b	$1A(a1),d1
0001322A 6700                       		beq.s	loc_1192C
0001322C 08A9 0003 0022             		bclr	#3,$22(a1)
00013232 6700                       		beq.s	loc_1192C
00013234 4229 0025                  		clr.b	$25(a1)
00013238 137C 0002 0024             		move.b	#2,$24(a1)
0001323E 45F8 D000                  		lea	($FFFFD000).w,a2
00013242 3568 0012 0012             		move.w	$12(a0),$12(a2)
00013248 446A 0012                  		neg.w	$12(a2)
0001324C 08EA 0001 0022             		bset	#1,$22(a2)
00013252 08AA 0003 0022             		bclr	#3,$22(a2)
00013258 422A 003C                  		clr.b	$3C(a2)
0001325C 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00013262 157C 0002 0024             		move.b	#2,$24(a2)
00013268 303C 00CC                  		move.w	#$CC,d0
0001326C 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play spring sound
00013272                            
00013272                            loc_1192C:
00013272 4268 0010                  		clr.w	$10(a0)
00013276 4268 0012                  		clr.w	$12(a0)
0001327A 5528 0024                  		subq.b	#2,$24(a0)
0001327E                            
0001327E                            locret_11938:
0001327E 4E75                       		rts	
00013280                            ; ===========================================================================
00013280 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001328A                            
0001328A                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
000132BA                            		even
000132BA                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
000132EA                            		even
000132EA                            ; ---------------------------------------------------------------------------
000132EA                            ; Sprite mappings - seesaws (SLZ)
000132EA                            ; ---------------------------------------------------------------------------
000132EA                            Map_obj5E:
000132EA                            	include "_maps\obj5E.asm"
000132EA                            ; ---------------------------------------------------------------------------
000132EA                            ; Sprite mappings - seesaws (SLZ)
000132EA                            ; ---------------------------------------------------------------------------
000132EA 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000132EE 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000132F2 07                         byte_119AC:	dc.b 7
000132F3 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
000132F8 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000132FD E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00013302 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013307 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
0001330C F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00013311 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013316 04                         byte_119D0:	dc.b 4
00013317 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
0001331C E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00013321 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013326 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
0001332C 00                         		even
0001332C 00                         		even
0001332C                            
0001332C                            ; ---------------------------------------------------------------------------
0001332C                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001332C                            ; ---------------------------------------------------------------------------
0001332C                            Map_obj5Ea:
0001332C                            	include "_maps\obj5Eballs.asm"
0001332C                            ; ---------------------------------------------------------------------------
0001332C                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001332C                            ; ---------------------------------------------------------------------------
0001332C 0000                       		dc.w byte_119EA-Map_obj5Ea
0001332E 0000                       		dc.w byte_119F0-Map_obj5Ea
00013330 01                         byte_119EA:	dc.b 1
00013331 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013336 01                         byte_119F0:	dc.b 1
00013337 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001333C                            		even
0001333C                            		even
0001333C                            
0001333C                            ; ===========================================================================
0001333C                            ; ---------------------------------------------------------------------------
0001333C                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
0001333C                            ; ---------------------------------------------------------------------------
0001333C                            
0001333C                            Obj5F:					; XREF: Obj_Index
0001333C 7000                       		moveq	#0,d0
0001333E 1028 0024                  		move.b	$24(a0),d0
00013342 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00013346 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
0001334A                            ; ===========================================================================
0001334A 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
0001334C 0000                       		dc.w Obj5F_Action-Obj5F_Index
0001334E 0000                       		dc.w Obj5F_Display-Obj5F_Index
00013350 0000                       		dc.w Obj5F_End-Obj5F_Index
00013352                            ; ===========================================================================
00013352                            
00013352                            Obj5F_Main:				; XREF: Obj5F_Index
00013352 5428 0024                  		addq.b	#2,$24(a0)
00013356 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
0001335E 317C 0400 0002             		move.w	#$400,2(a0)
00013364 0028 0004 0001             		ori.b	#4,1(a0)
0001336A 117C 0003 0018             		move.b	#3,$18(a0)
00013370 117C 000C 0019             		move.b	#$C,$19(a0)
00013376 1028 0028                  		move.b	$28(a0),d0
0001337A 6700                       		beq.s	loc_11A3C
0001337C 1140 0024                  		move.b	d0,$24(a0)
00013380 4E75                       		rts	
00013382                            ; ===========================================================================
00013382                            
00013382                            loc_11A3C:
00013382 117C 009A 0020             		move.b	#$9A,$20(a0)
00013388 0868 0000 0022             		bchg	#0,$22(a0)
0001338E                            
0001338E                            Obj5F_Action:				; XREF: Obj5F_Index
0001338E 7000                       		moveq	#0,d0
00013390 1028 0025                  		move.b	$25(a0),d0
00013394 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00013398 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
0001339C 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000133A2 6100 85EC                  		bsr.w	AnimateSprite
000133A6 6000 DBD2                  		bra.w	MarkObjGone
000133AA                            ; ===========================================================================
000133AA 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
000133AC 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
000133AE 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
000133B0                            ; ===========================================================================
000133B0                            
000133B0                            Obj5F_Walk:				; XREF: Obj5F_Index2
000133B0 6100 0000                  		bsr.w	Obj5F_ChkSonic
000133B4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000133B8 6A00                       		bpl.s	locret_11A96	; if time remains, branch
000133BA 5428 0025                  		addq.b	#2,$25(a0)
000133BE 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
000133C4 317C 0010 0010             		move.w	#$10,$10(a0)
000133CA 117C 0001 001C             		move.b	#1,$1C(a0)
000133D0 0868 0000 0022             		bchg	#0,$22(a0)
000133D6 6700                       		beq.s	locret_11A96
000133D8 4468 0010                  		neg.w	$10(a0)		; change direction
000133DC                            
000133DC                            locret_11A96:
000133DC 4E75                       		rts	
000133DE                            ; ===========================================================================
000133DE                            
000133DE                            Obj5F_Wait:				; XREF: Obj5F_Index2
000133DE 6100 0000                  		bsr.w	Obj5F_ChkSonic
000133E2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000133E6 6B00                       		bmi.s	loc_11AA8
000133E8 6100 B52C                  		bsr.w	SpeedToPos
000133EC 4E75                       		rts	
000133EE                            ; ===========================================================================
000133EE                            
000133EE                            loc_11AA8:
000133EE 5528 0025                  		subq.b	#2,$25(a0)
000133F2 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
000133F8 4268 0010                  		clr.w	$10(a0)		; stop walking
000133FC 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00013402 4E75                       		rts	
00013404                            ; ===========================================================================
00013404                            
00013404                            Obj5F_Explode:				; XREF: Obj5F_Index2
00013404 5368 0030                  		subq.w	#1,$30(a0)
00013408 6A00                       		bpl.s	locret_11AD0
0001340A 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
0001340E 117C 0000 0024             		move.b	#0,$24(a0)
00013414                            
00013414                            locret_11AD0:
00013414 4E75                       		rts	
00013416                            ; ===========================================================================
00013416                            
00013416                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00013416 3038 D008                  		move.w	($FFFFD008).w,d0
0001341A 9068 0008                  		sub.w	8(a0),d0
0001341E 6400                       		bcc.s	loc_11ADE
00013420 4440                       		neg.w	d0
00013422                            
00013422                            loc_11ADE:
00013422 0C40 0060                  		cmpi.w	#$60,d0
00013426 6400                       		bcc.s	locret_11B5E
00013428 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001342C 9068 000C                  		sub.w	$C(a0),d0
00013430 6400                       		bcc.s	Obj5F_MakeFuse
00013432 4440                       		neg.w	d0
00013434                            
00013434                            Obj5F_MakeFuse:
00013434 0C40 0060                  		cmpi.w	#$60,d0
00013438 6400                       		bcc.s	locret_11B5E
0001343A 4A78 FE08                  		tst.w	($FFFFFE08).w
0001343E 6600                       		bne.s	locret_11B5E
00013440 117C 0004 0025             		move.b	#4,$25(a0)
00013446 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
0001344C 4268 0010                  		clr.w	$10(a0)
00013450 117C 0002 001C             		move.b	#2,$1C(a0)
00013456 6100 BC44                  		bsr.w	SingleObjLoad2
0001345A 6600                       		bne.s	locret_11B5E
0001345C 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00013460 3368 0008 0008             		move.w	8(a0),8(a1)
00013466 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001346C 3368 000C 0034             		move.w	$C(a0),$34(a1)
00013472 1368 0022 0022             		move.b	$22(a0),$22(a1)
00013478 137C 0004 0028             		move.b	#4,$28(a1)
0001347E 137C 0003 001C             		move.b	#3,$1C(a1)
00013484 337C 0010 0012             		move.w	#$10,$12(a1)
0001348A 0828 0001 0022             		btst	#1,$22(a0)
00013490 6700                       		beq.s	loc_11B54
00013492 4469 0012                  		neg.w	$12(a1)
00013496                            
00013496                            loc_11B54:
00013496 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
0001349C 2348 003C                  		move.l	a0,$3C(a1)
000134A0                            
000134A0                            locret_11B5E:
000134A0 4E75                       		rts	
000134A2                            ; ===========================================================================
000134A2                            
000134A2                            Obj5F_Display:				; XREF: Obj5F_Index
000134A2 6100                       		bsr.s	loc_11B70
000134A4 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000134AA 6100 84E4                  		bsr.w	AnimateSprite
000134AE 6000 DACA                  		bra.w	MarkObjGone
000134B2                            ; ===========================================================================
000134B2                            
000134B2                            loc_11B70:
000134B2 5368 0030                  		subq.w	#1,$30(a0)
000134B6 6B00                       		bmi.s	loc_11B7C
000134B8 6100 B45C                  		bsr.w	SpeedToPos
000134BC 4E75                       		rts	
000134BE                            ; ===========================================================================
000134BE                            
000134BE                            loc_11B7C:
000134BE 4268 0030                  		clr.w	$30(a0)
000134C2 4228 0024                  		clr.b	$24(a0)
000134C6 3168 0034 000C             		move.w	$34(a0),$C(a0)
000134CC 7203                       		moveq	#3,d1
000134CE 2248                       		movea.l	a0,a1
000134D0 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000134D6 6000                       		bra.s	Obj5F_MakeShrap
000134D8                            ; ===========================================================================
000134D8                            
000134D8                            Obj5F_Loop:
000134D8 6100 BBC2                  		bsr.w	SingleObjLoad2
000134DC 6600                       		bne.s	loc_11BCE
000134DE                            
000134DE                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000134DE 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000134E2 3368 0008 0008             		move.w	8(a0),8(a1)
000134E8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000134EE 137C 0006 0028             		move.b	#6,$28(a1)
000134F4 137C 0004 001C             		move.b	#4,$1C(a1)
000134FA 335A 0010                  		move.w	(a2)+,$10(a1)
000134FE 335A 0012                  		move.w	(a2)+,$12(a1)
00013502 137C 0098 0020             		move.b	#$98,$20(a1)
00013508 08E9 0007 0001             		bset	#7,1(a1)
0001350E                            
0001350E                            loc_11BCE:
0001350E 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00013512                            
00013512 117C 0006 0024             		move.b	#6,$24(a0)
00013518                            
00013518                            Obj5F_End:				; XREF: Obj5F_Index
00013518 6100 B3FC                  		bsr.w	SpeedToPos
0001351C 0668 0018 0012             		addi.w	#$18,$12(a0)
00013522 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00013528 6100 8466                  		bsr.w	AnimateSprite
0001352C 4A28 0001                  		tst.b	1(a0)
00013530 6A00 B44E                  		bpl.w	DeleteObject
00013534 6000 B3FA                  		bra.w	DisplaySprite
00013538                            ; ===========================================================================
00013538 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00013548                            
00013548                            Ani_obj5F:
00013548                            	include "_anim\obj5F.asm"
00013548                            ; ---------------------------------------------------------------------------
00013548                            ; Animation script - Bomb enemy
00013548                            ; ---------------------------------------------------------------------------
00013548 0000                       		dc.w byte_11C12-Ani_obj5F
0001354A 0000                       		dc.w byte_11C16-Ani_obj5F
0001354C 0000                       		dc.w byte_11C1C-Ani_obj5F
0001354E 0000                       		dc.w byte_11C20-Ani_obj5F
00013550 0000                       		dc.w byte_11C24-Ani_obj5F
00013552 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00013556 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
0001355C 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00013560 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00013564 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00013568                            		even
00013568                            		even
00013568                            
00013568                            ; ---------------------------------------------------------------------------
00013568                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00013568                            ; ---------------------------------------------------------------------------
00013568                            Map_obj5F:
00013568                            	include "_maps\obj5F.asm"
00013568                            ; ---------------------------------------------------------------------------
00013568                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00013568                            ; ---------------------------------------------------------------------------
00013568 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
0001356C 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00013570 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00013574 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00013578 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
0001357C 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00013580 03                         byte_11C40:	dc.b 3
00013581 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00013586 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001358B E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013590 03                         byte_11C50:	dc.b 3
00013591 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013596 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001359B E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000135A0 03                         byte_11C60:	dc.b 3
000135A1 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000135A6 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000135AB E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000135B0 03                         byte_11C70:	dc.b 3
000135B1 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000135B6 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000135BB E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000135C0 03                         byte_11C80:	dc.b 3
000135C1 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000135C6 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000135CB E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000135D0 03                         byte_11C90:	dc.b 3
000135D1 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000135D6 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000135DB E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000135E0 02                         byte_11CA0:	dc.b 2
000135E1 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000135E6 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000135EB 02                         byte_11CAB:	dc.b 2
000135EC F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000135F1 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000135F6 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000135F7 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
000135FC 01                         byte_11CBC:	dc.b 1			; fuse
000135FD E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00013602 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00013603 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00013608 01                         byte_11CC8:	dc.b 1			; fireball
00013609 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001360E                            		even
0001360E                            		even
0001360E                            
0001360E                            ; ===========================================================================
0001360E                            ; ---------------------------------------------------------------------------
0001360E                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
0001360E                            ; ---------------------------------------------------------------------------
0001360E                            
0001360E                            Obj60:					; XREF: Obj_Index
0001360E 7000                       		moveq	#0,d0
00013610 1028 0024                  		move.b	$24(a0),d0
00013614 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00013618 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
0001361C                            ; ===========================================================================
0001361C 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
0001361E 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00013620 0000                       		dc.w Obj60_Display-Obj60_Index
00013622 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00013624 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00013626                            ; ===========================================================================
00013626                            
00013626                            Obj60_Main:				; XREF: Obj60_Index
00013626 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
0001362E 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00013634 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001363A 6700                       		beq.s	loc_11D02
0001363C 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00013642                            
00013642                            loc_11D02:
00013642 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00013648 6600                       		bne.s	loc_11D10
0001364A 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00013650                            
00013650                            loc_11D10:
00013650 0028 0004 0001             		ori.b	#4,1(a0)
00013656 117C 0004 0018             		move.b	#4,$18(a0)
0001365C 117C 000B 0020             		move.b	#$B,$20(a0)
00013662 117C 000C 0019             		move.b	#$C,$19(a0)
00013668 7400                       		moveq	#0,d2
0001366A 45E8 0037                  		lea	$37(a0),a2
0001366E 264A                       		movea.l	a2,a3
00013670 524A                       		addq.w	#1,a2
00013672 7203                       		moveq	#3,d1
00013674                            
00013674                            Obj60_MakeOrbs:
00013674 6100 BA26                  		bsr.w	SingleObjLoad2
00013678 6600                       		bne.s	loc_11D90
0001367A 5213                       		addq.b	#1,(a3)
0001367C 3A09                       		move.w	a1,d5
0001367E 0445 D000                  		subi.w	#-$3000,d5
00013682 EC4D                       		lsr.w	#6,d5
00013684 0245 007F                  		andi.w	#$7F,d5
00013688 14C5                       		move.b	d5,(a2)+
0001368A 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001368C 137C 0006 0024             		move.b	#6,$24(a1)
00013692 2368 0004 0004             		move.l	4(a0),4(a1)
00013698 3368 0002 0002             		move.w	2(a0),2(a1)
0001369E 0029 0004 0001             		ori.b	#4,1(a1)
000136A4 137C 0004 0018             		move.b	#4,$18(a1)
000136AA 137C 0008 0019             		move.b	#8,$19(a1)
000136B0 137C 0003 001A             		move.b	#3,$1A(a1)
000136B6 137C 0098 0020             		move.b	#$98,$20(a1)
000136BC 1342 0026                  		move.b	d2,$26(a1)
000136C0 0602 0040                  		addi.b	#$40,d2
000136C4 2348 003C                  		move.l	a0,$3C(a1)
000136C8 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000136CC                            
000136CC                            loc_11D90:
000136CC 7001                       		moveq	#1,d0
000136CE 0828 0000 0022             		btst	#0,$22(a0)
000136D4 6700                       		beq.s	Obj60_Move
000136D6 4440                       		neg.w	d0
000136D8                            
000136D8                            Obj60_Move:
000136D8 1140 0036                  		move.b	d0,$36(a0)
000136DC 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000136E2 5428 0024                  		addq.b	#2,$24(a0)
000136E6 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000136EC 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000136F2 6700                       		beq.s	locret_11DBC	; if not, branch
000136F4 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000136F8                            
000136F8                            locret_11DBC:
000136F8 4E75                       		rts	
000136FA                            ; ===========================================================================
000136FA                            
000136FA                            Obj60_ChkSonic:				; XREF: Obj60_Index
000136FA 3038 D008                  		move.w	($FFFFD008).w,d0
000136FE 9068 0008                  		sub.w	8(a0),d0
00013702 6400                       		bcc.s	loc_11DCA
00013704 4440                       		neg.w	d0
00013706                            
00013706                            loc_11DCA:
00013706 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
0001370A 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001370C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00013710 9068 000C                  		sub.w	$C(a0),d0
00013714 6400                       		bcc.s	loc_11DDC
00013716 4440                       		neg.w	d0
00013718                            
00013718                            loc_11DDC:
00013718 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
0001371C 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001371E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00013722 6600                       		bne.s	Obj60_Animate	; if yes, branch
00013724 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
0001372A                            
0001372A                            Obj60_Animate:
0001372A 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00013730 6100 825E                  		bsr.w	AnimateSprite
00013734 6000 0000                  		bra.w	Obj60_ChkDel
00013738                            ; ===========================================================================
00013738                            
00013738                            Obj60_Display:				; XREF: Obj60_Index
00013738 6100 B1DC                  		bsr.w	SpeedToPos
0001373C                            
0001373C                            Obj60_ChkDel:				; XREF: Obj60_Animate
0001373C 3028 0008                  		move.w	8(a0),d0
00013740 0240 FF80                  		andi.w	#$FF80,d0
00013744 3238 F700                  		move.w	($FFFFF700).w,d1
00013748 0441 0080                  		subi.w	#$80,d1
0001374C 0241 FF80                  		andi.w	#$FF80,d1
00013750 9041                       		sub.w	d1,d0
00013752 0C40 0280                  		cmpi.w	#$280,d0
00013756 6200 0000                  		bhi.w	Obj60_ChkGone
0001375A 6000 B1D4                  		bra.w	DisplaySprite
0001375E                            ; ===========================================================================
0001375E                            
0001375E                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
0001375E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00013762 6700                       		beq.s	loc_11E34		; if it's zero, don't remember object
00013764 3440                       		movea.w	d0,a2	; load address into a2
00013766 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001376A                            
0001376A                            loc_11E34:
0001376A 45E8 0037                  		lea	$37(a0),a2
0001376E 7400                       		moveq	#0,d2
00013770 141A                       		move.b	(a2)+,d2
00013772 5342                       		subq.w	#1,d2
00013774 6500                       		bcs.s	Obj60_Delete
00013776                            
00013776                            loc_11E40:
00013776 7000                       		moveq	#0,d0
00013778 101A                       		move.b	(a2)+,d0
0001377A ED48                       		lsl.w	#6,d0
0001377C 0680 00FF D000             		addi.l	#$FFD000,d0
00013782 2240                       		movea.l	d0,a1
00013784 6100 B1FC                  		bsr.w	DeleteObject2
00013788 51CA FFEC                  		dbf	d2,loc_11E40
0001378C                            
0001378C                            Obj60_Delete:
0001378C 6000 B1F2                  		bra.w	DeleteObject
00013790                            ; ===========================================================================
00013790                            
00013790                            Obj60_MoveOrb:				; XREF: Obj60_Index
00013790 2268 003C                  		movea.l	$3C(a0),a1
00013794 0C11 0060                  		cmpi.b	#$60,0(a1)
00013798 6600 B1E6                  		bne.w	DeleteObject
0001379C 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000137A2 6600                       		bne.s	Obj60_Circle
000137A4 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000137AA 6600                       		bne.s	Obj60_Circle
000137AC 5428 0024                  		addq.b	#2,$24(a0)
000137B0 5329 0037                  		subq.b	#1,$37(a1)
000137B4 6600                       		bne.s	Obj60_FireOrb
000137B6 5429 0024                  		addq.b	#2,$24(a1)
000137BA                            
000137BA                            Obj60_FireOrb:
000137BA 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000137C0 0829 0000 0022             		btst	#0,$22(a1)
000137C6 6700                       		beq.s	Obj60_Display2
000137C8 4468 0010                  		neg.w	$10(a0)
000137CC                            
000137CC                            Obj60_Display2:
000137CC 6000 B162                  		bra.w	DisplaySprite
000137D0                            ; ===========================================================================
000137D0                            
000137D0                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000137D0 1028 0026                  		move.b	$26(a0),d0
000137D4 4EB9 0000 29F6             		jsr	(CalcSine).l
000137DA E841                       		asr.w	#4,d1
000137DC D269 0008                  		add.w	8(a1),d1
000137E0 3141 0008                  		move.w	d1,8(a0)
000137E4 E840                       		asr.w	#4,d0
000137E6 D069 000C                  		add.w	$C(a1),d0
000137EA 3140 000C                  		move.w	d0,$C(a0)
000137EE 1029 0036                  		move.b	$36(a1),d0
000137F2 D128 0026                  		add.b	d0,$26(a0)
000137F6 6000 B138                  		bra.w	DisplaySprite
000137FA                            ; ===========================================================================
000137FA                            
000137FA                            Obj60_ChkDel2:				; XREF: Obj60_Index
000137FA 6100 B11A                  		bsr.w	SpeedToPos
000137FE 4A28 0001                  		tst.b	1(a0)
00013802 6A00 B17C                  		bpl.w	DeleteObject
00013806 6000 B128                  		bra.w	DisplaySprite
0001380A                            ; ===========================================================================
0001380A                            Ani_obj60:
0001380A                            	include "_anim\obj60.asm"
0001380A                            ; ---------------------------------------------------------------------------
0001380A                            ; Animation script - Orbinaut enemy
0001380A                            ; ---------------------------------------------------------------------------
0001380A 0000                       		dc.w byte_11EDA-Ani_obj60
0001380C 0000                       		dc.w byte_11EDE-Ani_obj60
0001380E 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00013812 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00013818                            		even
00013818                            		even
00013818                            
00013818                            ; ---------------------------------------------------------------------------
00013818                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00013818                            ; ---------------------------------------------------------------------------
00013818                            Map_obj60:
00013818                            	include "_maps\obj60.asm"
00013818                            ; ---------------------------------------------------------------------------
00013818                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00013818                            ; ---------------------------------------------------------------------------
00013818 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
0001381C 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00013820 01                         byte_11EEC:	dc.b 1
00013821 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013826 01                         byte_11EF2:	dc.b 1
00013827 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
0001382C 01                         byte_11EF8:	dc.b 1
0001382D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00013832 01                         byte_11EFE:	dc.b 1
00013833 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00013838                            		even
00013838                            		even
00013838                            
00013838                            ; ===========================================================================
00013838                            ; ---------------------------------------------------------------------------
00013838                            ; Object 16 - harpoon (LZ)
00013838                            ; ---------------------------------------------------------------------------
00013838                            
00013838                            Obj16:					; XREF: Obj_Index
00013838 7000                       		moveq	#0,d0
0001383A 1028 0024                  		move.b	$24(a0),d0
0001383E 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00013842 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00013846                            ; ===========================================================================
00013846 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00013848 0000                       		dc.w Obj16_Move-Obj16_Index
0001384A 0000                       		dc.w Obj16_Wait-Obj16_Index
0001384C                            ; ===========================================================================
0001384C                            
0001384C                            Obj16_Main:				; XREF: Obj16_Index
0001384C 5428 0024                  		addq.b	#2,$24(a0)
00013850 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00013858 317C 03CC 0002             		move.w	#$3CC,2(a0)
0001385E 0028 0004 0001             		ori.b	#4,1(a0)
00013864 117C 0004 0018             		move.b	#4,$18(a0)
0001386A 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00013870 117C 0014 0019             		move.b	#$14,$19(a0)
00013876 317C 003C 0030             		move.w	#60,$30(a0)
0001387C                            
0001387C                            Obj16_Move:				; XREF: Obj16_Index
0001387C 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00013882 6100 810C                  		bsr.w	AnimateSprite
00013886 7000                       		moveq	#0,d0
00013888 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
0001388C 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00013892 6000 D6E6                  		bra.w	MarkObjGone
00013896                            ; ===========================================================================
00013896 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
0001389C                            ; ===========================================================================
0001389C                            
0001389C                            Obj16_Wait:				; XREF: Obj16_Index
0001389C 5368 0030                  		subq.w	#1,$30(a0)
000138A0 6A00                       		bpl.s	Obj16_ChkDel
000138A2 317C 003C 0030             		move.w	#60,$30(a0)
000138A8 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000138AC 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000138B2                            
000138B2                            Obj16_ChkDel:
000138B2 6000 D6C6                  		bra.w	MarkObjGone
000138B6                            ; ===========================================================================
000138B6                            Ani_obj16:
000138B6                            	include "_anim\obj16.asm"
000138B6                            ; ---------------------------------------------------------------------------
000138B6                            ; Animation script - harpoon (LZ)
000138B6                            ; ---------------------------------------------------------------------------
000138B6 0000                       		dc.w byte_11F8A-Ani_obj16
000138B8 0000                       		dc.w byte_11F8E-Ani_obj16
000138BA 0000                       		dc.w byte_11F92-Ani_obj16
000138BC 0000                       		dc.w byte_11F96-Ani_obj16
000138BE 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000138C2 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000138C6 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000138CA 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000138CE                            		even
000138CE                            		even
000138CE                            
000138CE                            ; ---------------------------------------------------------------------------
000138CE                            ; Sprite mappings - harpoon (LZ)
000138CE                            ; ---------------------------------------------------------------------------
000138CE                            Map_obj16:
000138CE                            	include "_maps\obj16.asm"
000138CE                            ; ---------------------------------------------------------------------------
000138CE                            ; Sprite mappings - harpoon (LZ)
000138CE                            ; ---------------------------------------------------------------------------
000138CE 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000138D2 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000138D6 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000138DA 01                         byte_11FA6:	dc.b 1
000138DB FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000138E0 01                         byte_11FAC:	dc.b 1
000138E1 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000138E6 02                         byte_11FB2:	dc.b 2
000138E7 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000138EC FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000138F1 01                         byte_11FBD:	dc.b 1
000138F2 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000138F7 01                         byte_11FC3:	dc.b 1
000138F8 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000138FD 02                         byte_11FC9:	dc.b 2
000138FE D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00013903 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00013908                            		even
00013908                            		even
00013908                            
00013908                            ; ===========================================================================
00013908                            ; ---------------------------------------------------------------------------
00013908                            ; Object 61 - blocks (LZ)
00013908                            ; ---------------------------------------------------------------------------
00013908                            
00013908                            Obj61:					; XREF: Obj_Index
00013908 7000                       		moveq	#0,d0
0001390A 1028 0024                  		move.b	$24(a0),d0
0001390E 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00013912 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00013916                            ; ===========================================================================
00013916 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00013918 0000                       		dc.w Obj61_Action-Obj61_Index
0001391A                            
0001391A 1010                       Obj61_Var:	dc.b $10, $10		; width, height
0001391C 200C                       		dc.b $20, $C
0001391E 1010                       		dc.b $10, $10
00013920 1010                       		dc.b $10, $10
00013922                            ; ===========================================================================
00013922                            
00013922                            Obj61_Main:				; XREF: Obj61_Index
00013922 5428 0024                  		addq.b	#2,$24(a0)
00013926 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
0001392E 317C 43E6 0002             		move.w	#$43E6,2(a0)
00013934 117C 0004 0001             		move.b	#4,1(a0)
0001393A 117C 0003 0018             		move.b	#3,$18(a0)
00013940 7000                       		moveq	#0,d0
00013942 1028 0028                  		move.b	$28(a0),d0
00013946 E648                       		lsr.w	#3,d0
00013948 0240 000E                  		andi.w	#$E,d0
0001394C 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00013950 115A 0019                  		move.b	(a2)+,$19(a0)
00013954 1152 0016                  		move.b	(a2),$16(a0)
00013958 E248                       		lsr.w	#1,d0
0001395A 1140 001A                  		move.b	d0,$1A(a0)
0001395E 3168 0008 0034             		move.w	8(a0),$34(a0)
00013964 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001396A 1028 0028                  		move.b	$28(a0),d0
0001396E 0200 000F                  		andi.b	#$F,d0
00013972 6700                       		beq.s	Obj61_Action
00013974 0C00 0007                  		cmpi.b	#7,d0
00013978 6700                       		beq.s	Obj61_Action
0001397A 117C 0001 0038             		move.b	#1,$38(a0)
00013980                            
00013980                            Obj61_Action:				; XREF: Obj61_Index
00013980 3F28 0008                  		move.w	8(a0),-(sp)
00013984 7000                       		moveq	#0,d0
00013986 1028 0028                  		move.b	$28(a0),d0
0001398A 0240 000F                  		andi.w	#$F,d0
0001398E D040                       		add.w	d0,d0
00013990 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00013994 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00013998 381F                       		move.w	(sp)+,d4
0001399A 4A28 0001                  		tst.b	1(a0)
0001399E 6A00                       		bpl.s	Obj61_ChkDel
000139A0 7200                       		moveq	#0,d1
000139A2 1228 0019                  		move.b	$19(a0),d1
000139A6 0641 000B                  		addi.w	#$B,d1
000139AA 7400                       		moveq	#0,d2
000139AC 1428 0016                  		move.b	$16(a0),d2
000139B0 3602                       		move.w	d2,d3
000139B2 5243                       		addq.w	#1,d3
000139B4 6100 D8E8                  		bsr.w	SolidObject
000139B8 1144 003F                  		move.b	d4,$3F(a0)
000139BC 6100 0000                  		bsr.w	loc_12180
000139C0                            
000139C0                            Obj61_ChkDel:
000139C0 3028 0034                  		move.w	$34(a0),d0
000139C4 0240 FF80                  		andi.w	#$FF80,d0
000139C8 3238 F700                  		move.w	($FFFFF700).w,d1
000139CC 0441 0080                  		subi.w	#$80,d1
000139D0 0241 FF80                  		andi.w	#$FF80,d1
000139D4 9041                       		sub.w	d1,d0
000139D6 0C40 0280                  		cmpi.w	#$280,d0
000139DA 6300 AF54                  		bls.w	DisplaySprite
000139DE 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000139E2 6700 AF9C                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
000139E6 3440                       		movea.w	d0,a2	; load address into a2
000139E8 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
000139EC 6000 AF92                  		bra.w	DeleteObject
000139F0                            ; ===========================================================================
000139F0 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000139F4 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000139F8 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
000139FC 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00013A00                            ; ===========================================================================
00013A00                            
00013A00                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00013A00 4E75                       		rts	
00013A02                            ; ===========================================================================
00013A02                            
00013A02                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00013A02 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00013A06 6600                       		bne.s	loc_120D6	; if yes, branch
00013A08 0828 0003 0022             		btst	#3,$22(a0)
00013A0E 6700                       		beq.s	locret_120D4
00013A10 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
00013A16                            
00013A16                            locret_120D4:
00013A16 4E75                       		rts	
00013A18                            ; ===========================================================================
00013A18                            
00013A18                            loc_120D6:
00013A18 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00013A1C 66F8                       		bne.s	locret_120D4	; if time remains, branch
00013A1E 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00013A22 4228 0038                  		clr.b	$38(a0)
00013A26 4E75                       		rts	
00013A28                            ; ===========================================================================
00013A28                            
00013A28                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00013A28 6100 AEEC                  		bsr.w	SpeedToPos
00013A2C 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00013A30 6100 0000                  		bsr.w	ObjHitFloor
00013A34 4A41                       		tst.w	d1
00013A36 6A00 0000                  		bpl.w	locret_12106
00013A3A 5241                       		addq.w	#1,d1
00013A3C D368 000C                  		add.w	d1,$C(a0)
00013A40 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00013A44 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013A48                            
00013A48                            locret_12106:
00013A48 4E75                       		rts	
00013A4A                            ; ===========================================================================
00013A4A                            
00013A4A                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00013A4A 6100 AECA                  		bsr.w	SpeedToPos
00013A4E 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00013A52 6100 0000                  		bsr.w	ObjHitCeiling
00013A56 4A41                       		tst.w	d1
00013A58 6A00 0000                  		bpl.w	locret_12126
00013A5C 9368 000C                  		sub.w	d1,$C(a0)
00013A60 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00013A64 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013A68                            
00013A68                            locret_12126:
00013A68 4E75                       		rts	
00013A6A                            ; ===========================================================================
00013A6A                            
00013A6A                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00013A6A 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00013A70 6600                       		bne.s	locret_12138	; if not, branch
00013A72 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00013A76 4228 0038                  		clr.b	$38(a0)
00013A7A                            
00013A7A                            locret_12138:
00013A7A 4E75                       		rts	
00013A7C                            ; ===========================================================================
00013A7C                            
00013A7C                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00013A7C 3038 F646                  		move.w	($FFFFF646).w,d0
00013A80 9068 000C                  		sub.w	$C(a0),d0
00013A84 6700                       		beq.s	locret_1217E
00013A86 6400                       		bcc.s	loc_12162
00013A88 0C40 FFFE                  		cmpi.w	#-2,d0
00013A8C 6C00                       		bge.s	loc_1214E
00013A8E 70FE                       		moveq	#-2,d0
00013A90                            
00013A90                            loc_1214E:
00013A90 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00013A94 6100 0000                  		bsr.w	ObjHitCeiling
00013A98 4A41                       		tst.w	d1
00013A9A 6A00 0000                  		bpl.w	locret_12160
00013A9E 9368 000C                  		sub.w	d1,$C(a0)
00013AA2                            
00013AA2                            locret_12160:
00013AA2 4E75                       		rts	
00013AA4                            ; ===========================================================================
00013AA4                            
00013AA4                            loc_12162:				; XREF: Obj61_Type07
00013AA4 0C40 0002                  		cmpi.w	#2,d0
00013AA8 6F00                       		ble.s	loc_1216A
00013AAA 7002                       		moveq	#2,d0
00013AAC                            
00013AAC                            loc_1216A:
00013AAC D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00013AB0 6100 0000                  		bsr.w	ObjHitFloor
00013AB4 4A41                       		tst.w	d1
00013AB6 6A00 0000                  		bpl.w	locret_1217E
00013ABA 5241                       		addq.w	#1,d1
00013ABC D368 000C                  		add.w	d1,$C(a0)
00013AC0                            
00013AC0                            locret_1217E:
00013AC0 4E75                       		rts	
00013AC2                            ; ===========================================================================
00013AC2                            
00013AC2                            loc_12180:				; XREF: Obj61_Action
00013AC2 4A28 0038                  		tst.b	$38(a0)
00013AC6 6700                       		beq.s	locret_121C0
00013AC8 0828 0003 0022             		btst	#3,$22(a0)
00013ACE 6600                       		bne.s	loc_1219A
00013AD0 4A28 003E                  		tst.b	$3E(a0)
00013AD4 6700                       		beq.s	locret_121C0
00013AD6 5928 003E                  		subq.b	#4,$3E(a0)
00013ADA 6000                       		bra.s	loc_121A6
00013ADC                            ; ===========================================================================
00013ADC                            
00013ADC                            loc_1219A:
00013ADC 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00013AE2 6700                       		beq.s	locret_121C0
00013AE4 5828 003E                  		addq.b	#4,$3E(a0)
00013AE8                            
00013AE8                            loc_121A6:
00013AE8 1028 003E                  		move.b	$3E(a0),d0
00013AEC 4EB9 0000 29F6             		jsr	(CalcSine).l
00013AF2 323C 0400                  		move.w	#$400,d1
00013AF6 C1C1                       		muls.w	d1,d0
00013AF8 4840                       		swap	d0
00013AFA D068 0030                  		add.w	$30(a0),d0
00013AFE 3140 000C                  		move.w	d0,$C(a0)
00013B02                            
00013B02                            locret_121C0:
00013B02 4E75                       		rts	
00013B04                            ; ===========================================================================
00013B04                            ; ---------------------------------------------------------------------------
00013B04                            ; Sprite mappings - blocks (LZ)
00013B04                            ; ---------------------------------------------------------------------------
00013B04                            Map_obj61:
00013B04                            	include "_maps\obj61.asm"
00013B04                            ; ---------------------------------------------------------------------------
00013B04                            ; Sprite mappings - blocks (LZ)
00013B04                            ; ---------------------------------------------------------------------------
00013B04 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00013B08 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00013B0C 01                         byte_121CA:	dc.b 1
00013B0D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00013B12 02                         byte_121D0:	dc.b 2
00013B13 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00013B18 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00013B1D 01                         byte_121DB:	dc.b 1
00013B1E F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00013B23 01                         byte_121E1:	dc.b 1
00013B24 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00013B2A 00                         		even
00013B2A 00                         		even
00013B2A                            
00013B2A                            ; ===========================================================================
00013B2A                            ; ---------------------------------------------------------------------------
00013B2A                            ; Object 62 - gargoyle head (LZ)
00013B2A                            ; ---------------------------------------------------------------------------
00013B2A                            
00013B2A                            Obj62:					; XREF: Obj_Index
00013B2A 7000                       		moveq	#0,d0
00013B2C 1028 0024                  		move.b	$24(a0),d0
00013B30 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00013B34 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00013B38 6000 D440                  		bra.w	MarkObjGone
00013B3C                            ; ===========================================================================
00013B3C 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00013B3E 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00013B40 0000                       		dc.w Obj62_FireBall-Obj62_Index
00013B42 0000                       		dc.w Obj62_AniFire-Obj62_Index
00013B44                            
00013B44 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00013B4C                            ; ===========================================================================
00013B4C                            
00013B4C                            Obj62_Main:				; XREF: Obj62_Index
00013B4C 5428 0024                  		addq.b	#2,$24(a0)
00013B50 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013B58 317C 42E9 0002             		move.w	#$42E9,2(a0)
00013B5E 0028 0004 0001             		ori.b	#4,1(a0)
00013B64 117C 0003 0018             		move.b	#3,$18(a0)
00013B6A 117C 0010 0019             		move.b	#$10,$19(a0)
00013B70 1028 0028                  		move.b	$28(a0),d0	; get object type
00013B74 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00013B78 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00013B7E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013B84 0228 000F 0028             		andi.b	#$F,$28(a0)
00013B8A                            
00013B8A                            Obj62_MakeFire:				; XREF: Obj62_Index
00013B8A 5328 001E                  		subq.b	#1,$1E(a0)
00013B8E 6600                       		bne.s	Obj62_NoFire
00013B90 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013B96 6100 B15E                  		bsr.w	ChkObjOnScreen
00013B9A 6600                       		bne.s	Obj62_NoFire
00013B9C 6100 B4E8                  		bsr.w	SingleObjLoad
00013BA0 6600                       		bne.s	Obj62_NoFire
00013BA2 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00013BA6 5829 0024                  		addq.b	#4,$24(a1)
00013BAA 3368 0008 0008             		move.w	8(a0),8(a1)
00013BB0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013BB6 1368 0001 0001             		move.b	1(a0),1(a1)
00013BBC 1368 0022 0022             		move.b	$22(a0),$22(a1)
00013BC2                            
00013BC2                            Obj62_NoFire:
00013BC2 4E75                       		rts	
00013BC4                            ; ===========================================================================
00013BC4                            
00013BC4                            Obj62_FireBall:				; XREF: Obj62_Index
00013BC4 5428 0024                  		addq.b	#2,$24(a0)
00013BC8 117C 0008 0016             		move.b	#8,$16(a0)
00013BCE 117C 0008 0017             		move.b	#8,$17(a0)
00013BD4 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013BDC 317C 02E9 0002             		move.w	#$2E9,2(a0)
00013BE2 0028 0004 0001             		ori.b	#4,1(a0)
00013BE8 117C 0004 0018             		move.b	#4,$18(a0)
00013BEE 117C 0098 0020             		move.b	#$98,$20(a0)
00013BF4 117C 0008 0019             		move.b	#8,$19(a0)
00013BFA 117C 0002 001A             		move.b	#2,$1A(a0)
00013C00 5068 000C                  		addq.w	#8,$C(a0)
00013C04 317C 0200 0010             		move.w	#$200,$10(a0)
00013C0A 0828 0000 0022             		btst	#0,$22(a0)
00013C10 6600                       		bne.s	Obj62_Sound
00013C12 4468 0010                  		neg.w	$10(a0)
00013C16                            
00013C16                            Obj62_Sound:
00013C16 303C 00AE                  		move.w	#$AE,d0
00013C1A 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play lava ball sound
00013C20                            
00013C20                            Obj62_AniFire:				; XREF: Obj62_Index
00013C20 1038 FE05                  		move.b	($FFFFFE05).w,d0
00013C24 0200 0007                  		andi.b	#7,d0
00013C28 6600                       		bne.s	Obj62_StopFire
00013C2A 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00013C30                            
00013C30                            Obj62_StopFire:
00013C30 6100 ACE4                  		bsr.w	SpeedToPos
00013C34 0828 0000 0022             		btst	#0,$22(a0)
00013C3A 6600                       		bne.s	Obj62_StopFire2
00013C3C 76F8                       		moveq	#-8,d3
00013C3E 6100 0000                  		bsr.w	ObjHitWallLeft
00013C42 4A41                       		tst.w	d1
00013C44 6B00 AD3A                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00013C48 4E75                       		rts	
00013C4A                            ; ===========================================================================
00013C4A                            
00013C4A                            Obj62_StopFire2:
00013C4A 7608                       		moveq	#8,d3
00013C4C 6100 0000                  		bsr.w	ObjHitWallRight
00013C50 4A41                       		tst.w	d1
00013C52 6B00 AD2C                  		bmi.w	DeleteObject
00013C56 4E75                       		rts	
00013C58                            ; ===========================================================================
00013C58                            ; ---------------------------------------------------------------------------
00013C58                            ; Sprite mappings - gargoyle head (LZ)
00013C58                            ; ---------------------------------------------------------------------------
00013C58                            Map_obj62:
00013C58                            	include "_maps\obj62.asm"
00013C58                            ; ---------------------------------------------------------------------------
00013C58                            ; Sprite mappings - gargoyle head (LZ)
00013C58                            ; ---------------------------------------------------------------------------
00013C58 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00013C5C 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00013C60 03                         byte_12320:	dc.b 3
00013C61 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00013C66 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00013C6B 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00013C70 01                         byte_12330:	dc.b 1
00013C71 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00013C76 01                         byte_12336:	dc.b 1
00013C77 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00013C7C                            		even
00013C7C                            		even
00013C7C                            
00013C7C                            ; ===========================================================================
00013C7C                            ; ---------------------------------------------------------------------------
00013C7C                            ; Object 63 - platforms	on a conveyor belt (LZ)
00013C7C                            ; ---------------------------------------------------------------------------
00013C7C                            
00013C7C                            Obj63:					; XREF: Obj_Index
00013C7C 7000                       		moveq	#0,d0
00013C7E 1028 0024                  		move.b	$24(a0),d0
00013C82 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00013C86 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00013C8A 3028 0030                  		move.w	$30(a0),d0
00013C8E 0240 FF80                  		andi.w	#$FF80,d0
00013C92 3238 F700                  		move.w	($FFFFF700).w,d1
00013C96 0441 0080                  		subi.w	#$80,d1
00013C9A 0241 FF80                  		andi.w	#$FF80,d1
00013C9E 9041                       		sub.w	d1,d0
00013CA0 0C40 0280                  		cmpi.w	#$280,d0
00013CA4 6300                       		bls.s	Obj63_Display
00013CA6 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00013CAA 6700                       		beq.s	loc_1236A		; if it's zero, don't remember object
00013CAC 3440                       		movea.w	d0,a2	; load address into a2
00013CAE 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00013CB2 6000                       		bra.s	loc_1236A	; and delete object
00013CB4                            
00013CB4                            Obj63_Display:				; XREF: loc_1236A
00013CB4 6000 AC7A                  		bra.w	DisplaySprite
00013CB8                            ; ===========================================================================
00013CB8                            
00013CB8                            loc_1236A:				; XREF: Obj63
00013CB8 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00013CBE 6600                       		bne.s	loc_12378
00013CC0 0C40 FF80                  		cmpi.w	#-$80,d0
00013CC4 64EE                       		bcc.s	Obj63_Display
00013CC6                            
00013CC6                            loc_12378:
00013CC6 1028 002F                  		move.b	$2F(a0),d0
00013CCA 6A00 ACB4                  		bpl.w	DeleteObject
00013CCE 0240 007F                  		andi.w	#$7F,d0
00013CD2 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013CD6 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00013CDC 6000 ACA2                  		bra.w	DeleteObject
00013CE0                            ; ===========================================================================
00013CE0 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00013CE2 0000                       		dc.w loc_124B2-Obj63_Index
00013CE4 0000                       		dc.w loc_124C2-Obj63_Index
00013CE6 0000                       		dc.w loc_124DE-Obj63_Index
00013CE8                            ; ===========================================================================
00013CE8                            
00013CE8                            Obj63_Main:				; XREF: Obj63_Index
00013CE8 1028 0028                  		move.b	$28(a0),d0
00013CEC 6B00 0000                  		bmi.w	loc_12460
00013CF0 5428 0024                  		addq.b	#2,$24(a0)
00013CF4 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00013CFC 317C 43F6 0002             		move.w	#$43F6,2(a0)
00013D02 0028 0004 0001             		ori.b	#4,1(a0)
00013D08 117C 0010 0019             		move.b	#$10,$19(a0)
00013D0E 117C 0004 0018             		move.b	#4,$18(a0)
00013D14 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00013D1A 6600                       		bne.s	loc_123E2
00013D1C 5828 0024                  		addq.b	#4,$24(a0)
00013D20 317C 03F6 0002             		move.w	#$3F6,2(a0)
00013D26 117C 0001 0018             		move.b	#1,$18(a0)
00013D2C 6000 0000                  		bra.w	loc_124DE
00013D30                            ; ===========================================================================
00013D30                            
00013D30                            loc_123E2:
00013D30 117C 0004 001A             		move.b	#4,$1A(a0)
00013D36 7000                       		moveq	#0,d0
00013D38 1028 0028                  		move.b	$28(a0),d0
00013D3C 3200                       		move.w	d0,d1
00013D3E E648                       		lsr.w	#3,d0
00013D40 0240 001E                  		andi.w	#$1E,d0
00013D44 45FA 0000                  		lea	Obj63_Data(pc),a2
00013D48 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013D4C 315A 0038                  		move.w	(a2)+,$38(a0)
00013D50 315A 0030                  		move.w	(a2)+,$30(a0)
00013D54 214A 003C                  		move.l	a2,$3C(a0)
00013D58 0241 000F                  		andi.w	#$F,d1
00013D5C E549                       		lsl.w	#2,d1
00013D5E 1141 0038                  		move.b	d1,$38(a0)
00013D62 117C 0004 003A             		move.b	#4,$3A(a0)
00013D68 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013D6C 6700                       		beq.s	loc_1244C
00013D6E 117C 0001 003B             		move.b	#1,$3B(a0)
00013D74 4428 003A                  		neg.b	$3A(a0)
00013D78 7200                       		moveq	#0,d1
00013D7A 1228 0038                  		move.b	$38(a0),d1
00013D7E D228 003A                  		add.b	$3A(a0),d1
00013D82 B228 0039                  		cmp.b	$39(a0),d1
00013D86 6500                       		bcs.s	loc_12448
00013D88 1001                       		move.b	d1,d0
00013D8A 7200                       		moveq	#0,d1
00013D8C 4A00                       		tst.b	d0
00013D8E 6A00                       		bpl.s	loc_12448
00013D90 1228 0039                  		move.b	$39(a0),d1
00013D94 5901                       		subq.b	#4,d1
00013D96                            
00013D96                            loc_12448:
00013D96 1141 0038                  		move.b	d1,$38(a0)
00013D9A                            
00013D9A                            loc_1244C:
00013D9A 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00013DA0 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00013DA6 6100 0000                  		bsr.w	Obj63_ChangeDir
00013DAA 6000 0000                  		bra.w	loc_124B2
00013DAE                            ; ===========================================================================
00013DAE                            
00013DAE                            loc_12460:				; XREF: Obj63_Main
00013DAE 1140 002F                  		move.b	d0,$2F(a0)
00013DB2 0240 007F                  		andi.w	#$7F,d0
00013DB6 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013DBA 08F2 0000 0000             		bset	#0,(a2,d0.w)
00013DC0 6600 ABBE                  		bne.w	DeleteObject
00013DC4 D040                       		add.w	d0,d0
00013DC6 0240 001E                  		andi.w	#$1E,d0
00013DCA 0640 0070                  		addi.w	#$70,d0
00013DCE 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00013DD4 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013DD8 321A                       		move.w	(a2)+,d1
00013DDA 2248                       		movea.l	a0,a1
00013DDC 6000                       		bra.s	Obj63_MakePtfms
00013DDE                            ; ===========================================================================
00013DDE                            
00013DDE                            Obj63_Loop:
00013DDE 6100 B2A6                  		bsr.w	SingleObjLoad
00013DE2 6600                       		bne.s	loc_124AA
00013DE4                            
00013DE4                            Obj63_MakePtfms:			; XREF: loc_12460
00013DE4 12BC 0063                  		move.b	#$63,0(a1)
00013DE8 335A 0008                  		move.w	(a2)+,8(a1)
00013DEC 335A 000C                  		move.w	(a2)+,$C(a1)
00013DF0 301A                       		move.w	(a2)+,d0
00013DF2 1340 0028                  		move.b	d0,$28(a1)
00013DF6                            
00013DF6                            loc_124AA:
00013DF6 51C9 FFE6                  		dbf	d1,Obj63_Loop
00013DFA                            
00013DFA 588F                       		addq.l	#4,sp
00013DFC 4E75                       		rts	
00013DFE                            ; ===========================================================================
00013DFE                            
00013DFE                            loc_124B2:				; XREF: Obj63_Index
00013DFE 7200                       		moveq	#0,d1
00013E00 1228 0019                  		move.b	$19(a0),d1
00013E04 4EB9 0000 8530             		jsr	(PlatformObject).l
00013E0A 6000 0000                  		bra.w	sub_12502
00013E0E                            ; ===========================================================================
00013E0E                            
00013E0E                            loc_124C2:				; XREF: Obj63_Index
00013E0E 7200                       		moveq	#0,d1
00013E10 1228 0019                  		move.b	$19(a0),d1
00013E14 4EB9 0000 86A4             		jsr	(ExitPlatform).l
00013E1A 3F28 0008                  		move.w	8(a0),-(sp)
00013E1E 6100 0000                  		bsr.w	sub_12502
00013E22 341F                       		move.w	(sp)+,d2
00013E24 4EF9 0000 8C1A             		jmp	(MvSonicOnPtfm2).l
00013E2A                            ; ===========================================================================
00013E2A                            
00013E2A                            loc_124DE:				; XREF: Obj63_Index
00013E2A 3038 FE04                  		move.w	($FFFFFE04).w,d0
00013E2E 0240 0003                  		andi.w	#3,d0
00013E32 6600                       		bne.s	loc_124FC
00013E34 7201                       		moveq	#1,d1
00013E36 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013E3A 6700                       		beq.s	loc_124F2
00013E3C 4401                       		neg.b	d1
00013E3E                            
00013E3E                            loc_124F2:
00013E3E D328 001A                  		add.b	d1,$1A(a0)
00013E42 0228 0003 001A             		andi.b	#3,$1A(a0)
00013E48                            
00013E48                            loc_124FC:
00013E48 588F                       		addq.l	#4,sp
00013E4A 6000 D12E                  		bra.w	MarkObjGone
00013E4E                            
00013E4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E4E                            
00013E4E                            
00013E4E                            sub_12502:				; XREF: loc_124B2; loc_124C2
00013E4E 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00013E52 6700                       		beq.s	loc_12520
00013E54 4A28 003B                  		tst.b	$3B(a0)
00013E58 6600                       		bne.s	loc_12520
00013E5A 117C 0001 003B             		move.b	#1,$3B(a0)
00013E60 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00013E66 4428 003A                  		neg.b	$3A(a0)
00013E6A 6000                       		bra.s	loc_12534
00013E6C                            ; ===========================================================================
00013E6C                            
00013E6C                            loc_12520:
00013E6C 3028 0008                  		move.w	8(a0),d0
00013E70 B068 0034                  		cmp.w	$34(a0),d0
00013E74 6600                       		bne.s	loc_1256A
00013E76 3028 000C                  		move.w	$C(a0),d0
00013E7A B068 0036                  		cmp.w	$36(a0),d0
00013E7E 6600                       		bne.s	loc_1256A
00013E80                            
00013E80                            loc_12534:
00013E80 7200                       		moveq	#0,d1
00013E82 1228 0038                  		move.b	$38(a0),d1
00013E86 D228 003A                  		add.b	$3A(a0),d1
00013E8A B228 0039                  		cmp.b	$39(a0),d1
00013E8E 6500                       		bcs.s	loc_12552
00013E90 1001                       		move.b	d1,d0
00013E92 7200                       		moveq	#0,d1
00013E94 4A00                       		tst.b	d0
00013E96 6A00                       		bpl.s	loc_12552
00013E98 1228 0039                  		move.b	$39(a0),d1
00013E9C 5901                       		subq.b	#4,d1
00013E9E                            
00013E9E                            loc_12552:
00013E9E 1141 0038                  		move.b	d1,$38(a0)
00013EA2 2268 003C                  		movea.l	$3C(a0),a1
00013EA6 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00013EAC 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00013EB2 6100 0000                  		bsr.w	Obj63_ChangeDir
00013EB6                            
00013EB6                            loc_1256A:
00013EB6 6100 AA5E                  		bsr.w	SpeedToPos
00013EBA 4E75                       		rts	
00013EBC                            ; End of function sub_12502
00013EBC                            
00013EBC                            
00013EBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EBC                            
00013EBC                            
00013EBC                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00013EBC 7000                       		moveq	#0,d0
00013EBE 343C FF00                  		move.w	#-$100,d2
00013EC2 3028 0008                  		move.w	8(a0),d0
00013EC6 9068 0034                  		sub.w	$34(a0),d0
00013ECA 6400                       		bcc.s	loc_12584
00013ECC 4440                       		neg.w	d0
00013ECE 4442                       		neg.w	d2
00013ED0                            
00013ED0                            loc_12584:
00013ED0 7200                       		moveq	#0,d1
00013ED2 363C FF00                  		move.w	#-$100,d3
00013ED6 3228 000C                  		move.w	$C(a0),d1
00013EDA 9268 0036                  		sub.w	$36(a0),d1
00013EDE 6400                       		bcc.s	loc_12598
00013EE0 4441                       		neg.w	d1
00013EE2 4443                       		neg.w	d3
00013EE4                            
00013EE4                            loc_12598:
00013EE4 B240                       		cmp.w	d0,d1
00013EE6 6500                       		bcs.s	loc_125C2
00013EE8 3028 0008                  		move.w	8(a0),d0
00013EEC 9068 0034                  		sub.w	$34(a0),d0
00013EF0 6700                       		beq.s	loc_125AE
00013EF2 48C0                       		ext.l	d0
00013EF4 E180                       		asl.l	#8,d0
00013EF6 81C1                       		divs.w	d1,d0
00013EF8 4440                       		neg.w	d0
00013EFA                            
00013EFA                            loc_125AE:
00013EFA 3140 0010                  		move.w	d0,$10(a0)
00013EFE 3143 0012                  		move.w	d3,$12(a0)
00013F02 4840                       		swap	d0
00013F04 3140 000A                  		move.w	d0,$A(a0)
00013F08 4268 000E                  		clr.w	$E(a0)
00013F0C 4E75                       		rts	
00013F0E                            ; ===========================================================================
00013F0E                            
00013F0E                            loc_125C2:				; XREF: Obj63_ChangeDir
00013F0E 3228 000C                  		move.w	$C(a0),d1
00013F12 9268 0036                  		sub.w	$36(a0),d1
00013F16 6700                       		beq.s	loc_125D4
00013F18 48C1                       		ext.l	d1
00013F1A E181                       		asl.l	#8,d1
00013F1C 83C0                       		divs.w	d0,d1
00013F1E 4441                       		neg.w	d1
00013F20                            
00013F20                            loc_125D4:
00013F20 3141 0012                  		move.w	d1,$12(a0)
00013F24 3142 0010                  		move.w	d2,$10(a0)
00013F28 4841                       		swap	d1
00013F2A 3141 000E                  		move.w	d1,$E(a0)
00013F2E 4268 000A                  		clr.w	$A(a0)
00013F32 4E75                       		rts	
00013F34                            ; End of function Obj63_ChangeDir
00013F34                            
00013F34                            ; ===========================================================================
00013F34 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00013F36 0000                       		dc.w word_12610-Obj63_Data
00013F38 0000                       		dc.w word_12628-Obj63_Data
00013F3A 0000                       		dc.w word_1263C-Obj63_Data
00013F3C 0000                       		dc.w word_12650-Obj63_Data
00013F3E 0000                       		dc.w word_12668-Obj63_Data
00013F40 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00013F50 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00013F5C 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00013F6C 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00013F74 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00013F88 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00013F9C 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00013FB4 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00013FC8                            
00013FC8                            ; ---------------------------------------------------------------------------
00013FC8                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013FC8                            ; ---------------------------------------------------------------------------
00013FC8                            Map_obj63:
00013FC8                            	include "_maps\obj63.asm"
00013FC8                            ; ---------------------------------------------------------------------------
00013FC8                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013FC8                            ; ---------------------------------------------------------------------------
00013FC8 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00013FCC 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00013FD0 0000                       		dc.w byte_1269E-Map_obj63
00013FD2 01                         byte_12686:	dc.b 1
00013FD3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00013FD8 01                         byte_1268C:	dc.b 1
00013FD9 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00013FDE 01                         byte_12692:	dc.b 1
00013FDF F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00013FE4 01                         byte_12698:	dc.b 1
00013FE5 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00013FEA 01                         byte_1269E:	dc.b 1
00013FEB F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00013FF0                            		even
00013FF0                            		even
00013FF0                            
00013FF0                            ; ===========================================================================
00013FF0                            ; ---------------------------------------------------------------------------
00013FF0                            ; Object 64 - bubbles (LZ)
00013FF0                            ; ---------------------------------------------------------------------------
00013FF0                            
00013FF0                            Obj64:					; XREF: Obj_Index
00013FF0 7000                       		moveq	#0,d0
00013FF2 1028 0024                  		move.b	$24(a0),d0
00013FF6 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00013FFA 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00013FFE                            ; ===========================================================================
00013FFE 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00014000 0000                       		dc.w Obj64_Animate-Obj64_Index
00014002 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00014004 0000                       		dc.w Obj64_Display2-Obj64_Index
00014006 0000                       		dc.w Obj64_Delete3-Obj64_Index
00014008 0000                       		dc.w Obj64_BblMaker-Obj64_Index
0001400A                            ; ===========================================================================
0001400A                            
0001400A                            Obj64_Main:				; XREF: Obj64_Index
0001400A 5428 0024                  		addq.b	#2,$24(a0)
0001400E 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00014016 317C 8348 0002             		move.w	#$8348,2(a0)
0001401C 117C 0084 0001             		move.b	#$84,1(a0)
00014022 117C 0010 0019             		move.b	#$10,$19(a0)
00014028 117C 0001 0018             		move.b	#1,$18(a0)
0001402E 1028 0028                  		move.b	$28(a0),d0	; get object type
00014032 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00014034 5028 0024                  		addq.b	#8,$24(a0)
00014038 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
0001403C 1140 0032                  		move.b	d0,$32(a0)
00014040 1140 0033                  		move.b	d0,$33(a0)
00014044 117C 0006 001C             		move.b	#6,$1C(a0)
0001404A 6000 0000                  		bra.w	Obj64_BblMaker
0001404E                            ; ===========================================================================
0001404E                            
0001404E                            Obj64_Bubble:				; XREF: Obj64_Main
0001404E 1140 001C                  		move.b	d0,$1C(a0)
00014052 3168 0008 0030             		move.w	8(a0),$30(a0)
00014058 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
0001405E 4EB9 0000 29D0             		jsr	(RandomNumber).l
00014064 1140 0026                  		move.b	d0,$26(a0)
00014068                            
00014068                            Obj64_Animate:				; XREF: Obj64_Index
00014068 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001406E 4EB9 0000 B990             		jsr	AnimateSprite
00014074 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0001407A 6600                       		bne.s	Obj64_ChkWater
0001407C 117C 0001 002E             		move.b	#1,$2E(a0)
00014082                            
00014082                            Obj64_ChkWater:				; XREF: Obj64_Index
00014082 3038 F646                  		move.w	($FFFFF646).w,d0
00014086 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
0001408A 6400                       		bcc.s	Obj64_Burst	; if yes, branch
0001408C 3038 F60E                  		move.w	(v_pocketbottom).w,d0
00014090 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00014094 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00014096 3028 0008                  		move.w	8(a0),d0
0001409A 9078 F610                  		sub.w	(v_pocketx).w,d0
0001409E 0640 0060                  		addi.w	#$60,d0
000140A2 6B00                       		bmi.s	Obj64_Wobble
000140A4 0C40 00C0                  		cmpi.w	#$C0,d0
000140A8 6400                       		bcc.s	Obj64_Wobble
000140AA                            
000140AA                            Obj64_Burst:				; XREF: Obj64_Wobble
000140AA 117C 0006 0024             		move.b	#6,$24(a0)
000140B0 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
000140B4 6000 0000                  		bra.w	Obj64_Display2
000140B8                            ; ===========================================================================
000140B8                            
000140B8                            Obj64_Wobble:				; XREF: Obj64_ChkWater
000140B8 1028 0026                  		move.b	$26(a0),d0
000140BC 5228 0026                  		addq.b	#1,$26(a0)
000140C0 0240 007F                  		andi.w	#$7F,d0
000140C4 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000140CA 1031 0000                  		move.b	(a1,d0.w),d0
000140CE 4880                       		ext.w	d0
000140D0 D068 0030                  		add.w	$30(a0),d0
000140D4 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
000140D8 4A28 002E                  		tst.b	$2E(a0)
000140DC 6700                       		beq.s	Obj64_Display
000140DE 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
000140E2 6700                       		beq.s	Obj64_Display	; if not, branch
000140E4                            
000140E4 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
000140E8 303C 00AD                  		move.w	#$AD,d0
000140EC 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
000140F2 43F8 D000                  		lea	($FFFFD000).w,a1
000140F6 4269 0010                  		clr.w	$10(a1)
000140FA 4269 0012                  		clr.w	$12(a1)
000140FE 4269 0020                  		clr.w	$20(a1)
00014102 137C 0015 001C             		move.b	#$15,$1C(a1)
00014108 337C 0023 003E             		move.w	#$23,$3E(a1)
0001410E 137C 0000 003C             		move.b	#0,$3C(a1)
00014114 08A9 0005 0022             		bclr	#5,$22(a1)
0001411A 08A9 0004 0022             		bclr	#4,$22(a1)
00014120 0829 0002 0022             		btst	#2,$22(a1)
00014126 6700 FF82                  		beq.w	Obj64_Burst
0001412A 08A9 0002 0022             		bclr	#2,$22(a1)
00014130 137C 0013 0016             		move.b	#$13,$16(a1)
00014136 137C 0009 0017             		move.b	#9,$17(a1)
0001413C 5B69 000C                  		subq.w	#5,$C(a1)
00014140 6000 FF68                  		bra.w	Obj64_Burst
00014144                            ; ===========================================================================
00014144                            
00014144                            Obj64_Display:				; XREF: Obj64_Wobble
00014144 6100 A7D0                  		bsr.w	SpeedToPos
00014148 4A28 0001                  		tst.b	1(a0)
0001414C 6A00                       		bpl.s	Obj64_Delete
0001414E 4EFA A7E0                  		jmp	DisplaySprite
00014152                            ; ===========================================================================
00014152                            
00014152                            Obj64_Delete:
00014152 4EFA A82C                  		jmp	DeleteObject
00014156                            ; ===========================================================================
00014156                            
00014156                            Obj64_Display2:				; XREF: Obj64_Index
00014156 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001415C 4EB9 0000 B990             		jsr	AnimateSprite
00014162 4A28 0001                  		tst.b	1(a0)
00014166 6A00                       		bpl.s	Obj64_Delete2
00014168 4EFA A7C6                  		jmp	DisplaySprite
0001416C                            ; ===========================================================================
0001416C                            
0001416C                            Obj64_Delete2:
0001416C 4EFA A812                  		jmp	DeleteObject
00014170                            ; ===========================================================================
00014170                            
00014170                            Obj64_Delete3:				; XREF: Obj64_Index
00014170 6000 A80E                  		bra.w	DeleteObject
00014174                            ; ===========================================================================
00014174                            
00014174                            Obj64_BblMaker:				; XREF: Obj64_Index
00014174 4A68 0036                  		tst.w	$36(a0)
00014178 6600                       		bne.s	loc_12874
0001417A 3038 F646                  		move.w	($FFFFF646).w,d0
0001417E B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00014182 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00014186 3038 F60E                  		move.w	(v_pocketbottom).w,d0
0001418A B068 000C                  		cmp.w	$C(a0),d0
0001418E 6500                       		bcs.s	Obj64_Cont
00014190 3028 0008                  		move.w	8(a0),d0
00014194 9078 F610                  		sub.w	(v_pocketx).w,d0
00014198 0640 0060                  		addi.w	#$60,d0
0001419C 6B00                       		bmi.s	Obj64_Cont
0001419E 0C40 00C0                  		cmpi.w	#$C0,d0
000141A2 6400                       		bcc.s	Obj64_Cont
000141A4 6000 0000                  		bra.w	Obj64_ChkDel
000141A8                            
000141A8                            Obj64_Cont:
000141A8 4A28 0001                  		tst.b	1(a0)
000141AC 6A00 0000                  		bpl.w	Obj64_ChkDel
000141B0 5368 0038                  		subq.w	#1,$38(a0)
000141B4 6A00 0000                  		bpl.w	loc_12914
000141B8 317C 0001 0036             		move.w	#1,$36(a0)
000141BE                            
000141BE                            loc_1283A:
000141BE 4EB9 0000 29D0             		jsr	(RandomNumber).l
000141C4 3200                       		move.w	d0,d1
000141C6 0240 0007                  		andi.w	#7,d0
000141CA 0C40 0006                  		cmpi.w	#6,d0
000141CE 64EE                       		bcc.s	loc_1283A
000141D0                            
000141D0 1140 0034                  		move.b	d0,$34(a0)
000141D4 0241 000C                  		andi.w	#$C,d1
000141D8 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
000141DE D2C1                       		adda.w	d1,a1
000141E0 2149 003C                  		move.l	a1,$3C(a0)
000141E4 5328 0032                  		subq.b	#1,$32(a0)
000141E8 6A00                       		bpl.s	loc_12872
000141EA 1168 0033 0032             		move.b	$33(a0),$32(a0)
000141F0 08E8 0007 0036             		bset	#7,$36(a0)
000141F6                            
000141F6                            loc_12872:
000141F6 6000                       		bra.s	loc_1287C
000141F8                            ; ===========================================================================
000141F8                            
000141F8                            loc_12874:				; XREF: Obj64_BblMaker
000141F8 5368 0038                  		subq.w	#1,$38(a0)
000141FC 6A00 0000                  		bpl.w	loc_12914
00014200                            
00014200                            loc_1287C:
00014200 4EB9 0000 29D0             		jsr	(RandomNumber).l
00014206 0240 001F                  		andi.w	#$1F,d0
0001420A 3140 0038                  		move.w	d0,$38(a0)
0001420E 6100 AE76                  		bsr.w	SingleObjLoad
00014212 6600                       		bne.s	loc_128F8
00014214 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00014218 3368 0008 0008             		move.w	8(a0),8(a1)
0001421E 4EB9 0000 29D0             		jsr	(RandomNumber).l
00014224 0240 000F                  		andi.w	#$F,d0
00014228 5140                       		subq.w	#8,d0
0001422A D169 0008                  		add.w	d0,8(a1)
0001422E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00014234 7000                       		moveq	#0,d0
00014236 1028 0034                  		move.b	$34(a0),d0
0001423A 2468 003C                  		movea.l	$3C(a0),a2
0001423E 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00014244 0828 0007 0036             		btst	#7,$36(a0)
0001424A 6700                       		beq.s	loc_128F8
0001424C 4EB9 0000 29D0             		jsr	(RandomNumber).l
00014252 0240 0003                  		andi.w	#3,d0
00014256 6600                       		bne.s	loc_128E4
00014258 08E8 0006 0036             		bset	#6,$36(a0)
0001425E 6600                       		bne.s	loc_128F8
00014260 137C 0002 0028             		move.b	#2,$28(a1)
00014266                            
00014266                            loc_128E4:
00014266 4A28 0034                  		tst.b	$34(a0)
0001426A 6600                       		bne.s	loc_128F8
0001426C 08E8 0006 0036             		bset	#6,$36(a0)
00014272 6600                       		bne.s	loc_128F8
00014274 137C 0002 0028             		move.b	#2,$28(a1)
0001427A                            
0001427A                            loc_128F8:
0001427A 5328 0034                  		subq.b	#1,$34(a0)
0001427E 6A00                       		bpl.s	loc_12914
00014280 4EB9 0000 29D0             		jsr	(RandomNumber).l
00014286 0240 007F                  		andi.w	#$7F,d0
0001428A 0640 0080                  		addi.w	#$80,d0
0001428E D168 0038                  		add.w	d0,$38(a0)
00014292 4268 0036                  		clr.w	$36(a0)
00014296                            
00014296                            loc_12914:
00014296 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001429C 4EB9 0000 B990             		jsr	AnimateSprite
000142A2                            
000142A2                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
000142A2 3028 0008                  		move.w	8(a0),d0
000142A6 0240 FF80                  		andi.w	#$FF80,d0
000142AA 3238 F700                  		move.w	($FFFFF700).w,d1
000142AE 0441 0080                  		subi.w	#$80,d1
000142B2 0241 FF80                  		andi.w	#$FF80,d1
000142B6 9041                       		sub.w	d1,d0
000142B8 0C40 0280                  		cmpi.w	#$280,d0
000142BC 6300                       		bls.s	Obj64_NoDel
000142BE 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000142C2 6700 A6BC                  		beq.w	DeleteObject		; if it's zero, don't remember object
000142C6 3440                       		movea.w	d0,a2	; load address into a2
000142C8 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000142CC 6000 A6B2                  		bra.w	DeleteObject	; and delete object
000142D0                            
000142D0                            Obj64_NoDel:	
000142D0 3038 F646                  		move.w	($FFFFF646).w,d0
000142D4 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
000142D8 6400                       		bcc.s	Obj64_UW	; if not, branch
000142DA 3038 F60E                  		move.w	(v_pocketbottom).w,d0
000142DE B068 000C                  		cmp.w	$C(a0),d0
000142E2 6500 A64C                  		bcs.w	DisplaySprite
000142E6 3028 0008                  		move.w	8(a0),d0
000142EA 9078 F610                  		sub.w	(v_pocketx).w,d0
000142EE 0640 0060                  		addi.w	#$60,d0
000142F2 6B00 A63C                  		bmi.w	DisplaySprite
000142F6 0C40 00C0                  		cmpi.w	#$C0,d0
000142FA 6400 A634                  		bcc.w	DisplaySprite
000142FE                            
000142FE                            Obj64_UW:
000142FE 4E75                       		rts	
00014300                            ; ===========================================================================
00014300                            ; bubble production sequence
00014300                            
00014300                            ; 0 = small bubble, 1 =	large bubble
00014300                            
00014300 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014312                            
00014312                            ; ===========================================================================
00014312                            
00014312                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00014312 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00014316 6B00                       		bmi.s	loc_12998
00014318 43F8 D000                  		lea	($FFFFD000).w,a1
0001431C 3029 0008                  		move.w	8(a1),d0
00014320 3228 0008                  		move.w	8(a0),d1
00014324 0441 0010                  		subi.w	#$10,d1
00014328 B240                       		cmp.w	d0,d1
0001432A 6400                       		bcc.s	loc_12998
0001432C 0641 0020                  		addi.w	#$20,d1
00014330 B240                       		cmp.w	d0,d1
00014332 6500                       		bcs.s	loc_12998
00014334 3029 000C                  		move.w	$C(a1),d0
00014338 3228 000C                  		move.w	$C(a0),d1
0001433C B240                       		cmp.w	d0,d1
0001433E 6400                       		bcc.s	loc_12998
00014340 0641 0010                  		addi.w	#$10,d1
00014344 B240                       		cmp.w	d0,d1
00014346 6500                       		bcs.s	loc_12998
00014348 7001                       		moveq	#1,d0
0001434A 4E75                       		rts	
0001434C                            ; ===========================================================================
0001434C                            
0001434C                            loc_12998:
0001434C 7000                       		moveq	#0,d0
0001434E 4E75                       		rts	
00014350                            ; ===========================================================================
00014350                            Ani_obj64:
00014350                            	include "_anim\obj64.asm"
00014350                            ; ---------------------------------------------------------------------------
00014350                            ; Animation script - bubbles (LZ)
00014350                            ; ---------------------------------------------------------------------------
00014350 0000                       		dc.w byte_129AA-Ani_obj64
00014352 0000                       		dc.w byte_129B0-Ani_obj64
00014354 0000                       		dc.w byte_129B6-Ani_obj64
00014356 0000                       		dc.w byte_129BE-Ani_obj64
00014358 0000                       		dc.w byte_129BE-Ani_obj64
0001435A 0000                       		dc.w byte_129C0-Ani_obj64
0001435C 0000                       		dc.w byte_129C6-Ani_obj64
0001435E 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00014364 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
0001436A 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00014372 04FC                       byte_129BE:	dc.b 4,	$FC
00014374 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
0001437A 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00014380 00                         		even
00014380 00                         		even
00014380                            
00014380                            ; ---------------------------------------------------------------------------
00014380                            ; Sprite mappings - bubbles (LZ)
00014380                            ; ---------------------------------------------------------------------------
00014380                            Map_obj64:
00014380                            	include "_maps\obj64.asm"
00014380                            bubmap:
00014380 0000                       bubmap_0: 	dc.w bubmap_2E-bubmap
00014382 0000                       bubmap_2: 	dc.w bubmap_34-bubmap
00014384 0000                       bubmap_4: 	dc.w bubmap_3A-bubmap
00014386 0000                       bubmap_6: 	dc.w bubmap_40-bubmap
00014388 0000                       bubmap_8: 	dc.w bubmap_46-bubmap
0001438A 0000                       bubmap_A: 	dc.w bubmap_4C-bubmap
0001438C 0000                       bubmap_C: 	dc.w bubmap_52-bubmap
0001438E 0000                       bubmap_E: 	dc.w bubmap_58-bubmap
00014390 0000                       bubmap_10: 	dc.w bubmap_6D-bubmap
00014392 0000                       bubmap_12: 	dc.w bubmap_82-bubmap
00014394 0000                       bubmap_14: 	dc.w bubmap_88-bubmap
00014396 0000                       bubmap_16: 	dc.w bubmap_8E-bubmap
00014398 0000                       bubmap_18: 	dc.w bubmap_94-bubmap
0001439A 0000                       bubmap_1A: 	dc.w bubmap_9A-bubmap
0001439C 0000                       bubmap_1C: 	dc.w bubmap_A0-bubmap
0001439E 0000                       bubmap_1E: 	dc.w bubmap_A6-bubmap
000143A0 0000                       bubmap_20: 	dc.w bubmap_AC-bubmap
000143A2 0000                       bubmap_22: 	dc.w bubmap_B2-bubmap
000143A4 0000                       bubmap_24: 	dc.w bubmap_B8-bubmap
000143A6 0000                       bubmap_26: 	dc.w bubmap_BE-bubmap
000143A8 0000                       bubmap_28: 	dc.w bubmap_C4-bubmap
000143AA 0000                       bubmap_2A: 	dc.w bubmap_CA-bubmap
000143AC 0000                       bubmap_2C: 	dc.w bubmap_D0-bubmap
000143AE 01                         bubmap_2E: 	dc.b $1
000143AF FC00 6000 FC               	dc.b $FC, $0, $60, $0, $FC
000143B4 01                         bubmap_34: 	dc.b $1
000143B5 FC00 6001 FC               	dc.b $FC, $0, $60, $1, $FC
000143BA 01                         bubmap_3A: 	dc.b $1
000143BB FC00 6002 FC               	dc.b $FC, $0, $60, $2, $FC
000143C0 01                         bubmap_40: 	dc.b $1
000143C1 F805 6003 F8               	dc.b $F8, $5, $60, $3, $F8
000143C6 01                         bubmap_46: 	dc.b $1
000143C7 F805 6007 F8               	dc.b $F8, $5, $60, $7, $F8
000143CC 01                         bubmap_4C: 	dc.b $1
000143CD F40A 600B F4               	dc.b $F4, $A, $60, $B, $F4
000143D2 01                         bubmap_52: 	dc.b $1
000143D3 F00F 6014 F0               	dc.b $F0, $F, $60, $14, $F0
000143D8 04                         bubmap_58: 	dc.b $4
000143D9 F005 6024 F0               	dc.b $F0, $5, $60, $24, $F0
000143DE F005 6824 00               	dc.b $F0, $5, $68, $24, $0
000143E3 0005 7024 F0               	dc.b $0, $5, $70, $24, $F0
000143E8 0005 7824 00               	dc.b $0, $5, $78, $24, $0
000143ED 04                         bubmap_6D: 	dc.b $4
000143EE F005 6028 F0               	dc.b $F0, $5, $60, $28, $F0
000143F3 F005 6828 00               	dc.b $F0, $5, $68, $28, $0
000143F8 0005 7028 F0               	dc.b $0, $5, $70, $28, $F0
000143FD 0005 7828 00               	dc.b $0, $5, $78, $28, $0
00014402 01                         bubmap_82: 	dc.b $1
00014403 F406 002C F8               	dc.b $F4, $6, $0, $2C, $F8
00014408 01                         bubmap_88: 	dc.b $1
00014409 F406 0032 F8               	dc.b $F4, $6, $0, $32, $F8
0001440E 01                         bubmap_8E: 	dc.b $1
0001440F F406 0038 F8               	dc.b $F4, $6, $0, $38, $F8
00014414 01                         bubmap_94: 	dc.b $1
00014415 F406 003E F8               	dc.b $F4, $6, $0, $3E, $F8
0001441A 01                         bubmap_9A: 	dc.b $1
0001441B F406 2044 F8               	dc.b $F4, $6, $20, $44, $F8
00014420 01                         bubmap_A0: 	dc.b $1
00014421 F406 204A F8               	dc.b $F4, $6, $20, $4A, $F8
00014426 01                         bubmap_A6: 	dc.b $1
00014427 F406 2050 F8               	dc.b $F4, $6, $20, $50, $F8
0001442C 01                         bubmap_AC: 	dc.b $1
0001442D F406 2056 F8               	dc.b $F4, $6, $20, $56, $F8
00014432 01                         bubmap_B2: 	dc.b $1
00014433 F406 205C F8               	dc.b $F4, $6, $20, $5C, $F8
00014438 01                         bubmap_B8: 	dc.b $1
00014439 F406 2062 F8               	dc.b $F4, $6, $20, $62, $F8
0001443E 01                         bubmap_BE: 	dc.b $1
0001443F F805 6068 F8               	dc.b $F8, $5, $60, $68, $F8
00014444 01                         bubmap_C4: 	dc.b $1
00014445 F805 606C F8               	dc.b $F8, $5, $60, $6C, $F8
0001444A 01                         bubmap_CA: 	dc.b $1
0001444B F805 6070 F8               	dc.b $F8, $5, $60, $70, $F8
00014450 00                         bubmap_D0: 	dc.b $0
00014452 00                         	even
00014452 00                         	even
00014452                            
00014452                            ; ===========================================================================
00014452                            ; ---------------------------------------------------------------------------
00014452                            ; Object 65 - waterfalls (LZ)
00014452                            ; ---------------------------------------------------------------------------
00014452                            
00014452                            Obj65:					; XREF: Obj_Index
00014452 7000                       		moveq	#0,d0
00014454 1028 0024                  		move.b	$24(a0),d0
00014458 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
0001445C 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00014460                            ; ===========================================================================
00014460 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00014462 0000                       		dc.w Obj65_Animate-Obj65_Index
00014464 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00014466 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00014468 0000                       		dc.w loc_12B36-Obj65_Index
0001446A                            ; ===========================================================================
0001446A                            
0001446A                            Obj65_Main:				; XREF: Obj65_Index
0001446A 5828 0024                  		addq.b	#4,$24(a0)
0001446E 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00014476 317C 4259 0002             		move.w	#$4259,2(a0)
0001447C 0028 0004 0001             		ori.b	#4,1(a0)
00014482 117C 0018 0019             		move.b	#$18,$19(a0)
00014488 117C 0001 0018             		move.b	#1,$18(a0)
0001448E 1028 0028                  		move.b	$28(a0),d0	; get object type
00014492 6A00                       		bpl.s	loc_12AE6
00014494 08E8 0007 0002             		bset	#7,2(a0)
0001449A                            
0001449A                            loc_12AE6:
0001449A 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
0001449E 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000144A2 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000144A6 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000144A8 4228 0018                  		clr.b	$18(a0)
000144AC 5528 0024                  		subq.b	#2,$24(a0)
000144B0 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
000144B6 6700                       		beq.s	loc_12B0A	; if not, branch
000144B8 117C 0006 0024             		move.b	#6,$24(a0)
000144BE                            
000144BE                            loc_12B0A:
000144BE 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
000144C4 6700                       		beq.s	Obj65_Animate	; if not, branch
000144C6 117C 0008 0024             		move.b	#8,$24(a0)
000144CC                            
000144CC                            Obj65_Animate:				; XREF: Obj65_Index
000144CC 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000144D2 4EB9 0000 B990             		jsr	AnimateSprite
000144D8                            
000144D8                            Obj65_ChkDel:				; XREF: Obj65_Index
000144D8 6000 CAA0                  		bra.w	MarkObjGone
000144DC                            ; ===========================================================================
000144DC                            
000144DC                            Obj65_FixHeight:			; XREF: Obj65_Index
000144DC 3038 F646                  		move.w	($FFFFF646).w,d0
000144E0 0440 0010                  		subi.w	#$10,d0
000144E4 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000144E8 60E2                       		bra.s	Obj65_Animate
000144EA                            ; ===========================================================================
000144EA                            
000144EA                            loc_12B36:				; XREF: Obj65_Index
000144EA 08A8 0007 0002             		bclr	#7,2(a0)
000144F0 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
000144F6 6600                       		bne.s	Obj65_Animate2
000144F8 08E8 0007 0002             		bset	#7,2(a0)
000144FE                            
000144FE                            Obj65_Animate2:
000144FE 60CC                       		bra.s	Obj65_Animate
00014500                            ; ===========================================================================
00014500                            Ani_obj65:
00014500                            	include "_anim\obj65.asm"
00014500                            ; ---------------------------------------------------------------------------
00014500                            ; Animation script - waterfall (LZ)
00014500                            ; ---------------------------------------------------------------------------
00014500 0000                       		dc.w byte_12B4E-Ani_obj65
00014502 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00014508 00                         		even
00014508 00                         		even
00014508                            
00014508                            ; ---------------------------------------------------------------------------
00014508                            ; Sprite mappings - waterfalls (LZ)
00014508                            ; ---------------------------------------------------------------------------
00014508                            Map_obj65:
00014508                            	include "_maps\obj65.asm"
00014508                            ; ---------------------------------------------------------------------------
00014508                            ; Sprite mappings - waterfalls (LZ)
00014508                            ; ---------------------------------------------------------------------------
00014508 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
0001450C 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00014510 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00014514 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00014518 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
0001451C 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00014520 01                         byte_12B6C:	dc.b 1
00014521 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014526 02                         byte_12B72:	dc.b 2
00014527 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
0001452C 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014531 02                         byte_12B7D:	dc.b 2
00014532 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014537 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001453C 01                         byte_12B88:	dc.b 1
0001453D F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014542 02                         byte_12B8E:	dc.b 2
00014543 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014548 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001454D 01                         byte_12B99:	dc.b 1
0001454E F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014553 01                         byte_12B9F:	dc.b 1
00014554 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014559 01                         byte_12BA5:	dc.b 1
0001455A F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
0001455F 02                         byte_12BAB:	dc.b 2
00014560 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014565 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
0001456A 02                         byte_12BB6:	dc.b 2
0001456B F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014570 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014575 02                         byte_12BC1:	dc.b 2
00014576 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
0001457B F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014580 02                         byte_12BCC:	dc.b 2
00014581 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014586 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
0001458C 00                         		even
0001458C 00                         		even
0001458C                            
0001458C                            ; ===========================================================================
0001458C                            ; ---------------------------------------------------------------------------
0001458C                            ; Object 01 - Sonic
0001458C                            ; ---------------------------------------------------------------------------
0001458C                            
0001458C                            Obj01:					; XREF: Obj_Index
0001458C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00014590 6700                       		beq.s	Obj01_Normal	; if not, branch
00014592 4EF9 0000 0000             		jmp	DebugMode
00014598                            ; ===========================================================================
00014598                            
00014598                            Obj01_Normal:
00014598 7000                       		moveq	#0,d0
0001459A 1028 0024                  		move.b	$24(a0),d0
0001459E 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000145A2 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
000145A6                            ; ===========================================================================
000145A6 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
000145A8 0000                       		dc.w Obj01_Control-Obj01_Index
000145AA 0000                       		dc.w Obj01_Hurt-Obj01_Index
000145AC 0000                       		dc.w Obj01_Death-Obj01_Index
000145AE 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
000145B0 0000                       		dc.w Sonic_Drowned-Obj01_Index
000145B2                            ;===========================================================================
000145B2                            
000145B2                            Obj01_Main:				; XREF: Obj01_Index
000145B2 5428 0024                  		addq.b	#2,$24(a0)
000145B6 117C 0013 0016             		move.b	#$13,$16(a0)
000145BC 117C 0009 0017             		move.b	#9,$17(a0)
000145C2 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000145CA 317C 0780 0002             		move.w	#$780,2(a0)
000145D0 117C 0002 0018             		move.b	#2,$18(a0)
000145D6 117C 0018 0019             		move.b	#$18,$19(a0)
000145DC 117C 0004 0001             		move.b	#4,1(a0)
000145E2 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
000145E8 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
000145EE 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
000145F4                            
000145F4                            Obj01_Control:				; XREF: Obj01_Index
000145F4 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
000145F8 6700                       		beq.s	loc_12C58	; if not, branch
000145FA 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00014600 6700                       		beq.s	loc_12C58	; if not, branch
00014602 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00014608 4238 F7CC                  		clr.b	($FFFFF7CC).w
0001460C 4E75                       		rts	
0001460E                            ; ===========================================================================
0001460E                            
0001460E                            loc_12C58:
0001460E 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00014612 6600                       		bne.s	loc_12C64	; if yes, branch
00014614 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
0001461A                            
0001461A                            loc_12C64:
0001461A 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00014620 6600                       		bne.s	loc_12C7E	; if yes, branch
00014622 7000                       		moveq	#0,d0
00014624 1028 0022                  		move.b	$22(a0),d0
00014628 0240 0006                  		andi.w	#6,d0
0001462C 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00014630 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00014634                            
00014634                            loc_12C7E:
00014634 6100                       		bsr.s	Sonic_Display
00014636 6100 0000                  		bsr.w	Sonic_RecordPos
0001463A 6100 0000                  		bsr.w	Sonic_Water
0001463E 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00014644 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
0001464A 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001464E 6700                       		beq.s	loc_12CA6
00014650 4A28 001C                  		tst.b	$1C(a0)
00014654 6600                       		bne.s	loc_12CA6
00014656 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
0001465C                            
0001465C                            loc_12CA6:
0001465C 6100 0000                  		bsr.w	Sonic_Animate
00014660 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00014664 6B00                       		bmi.s	loc_12CB6
00014666 4EB9 0000 0000             		jsr	TouchResponse
0001466C                            
0001466C                            loc_12CB6:
0001466C 6100 0000                  		bsr.w	Sonic_Loops
00014670 6100 0000                  		bsr.w	LoadSonicDynPLC
00014674 4E75                       		rts	
00014676                            ; ===========================================================================
00014676 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00014678 0000                       		dc.w Obj01_MdJump-Obj01_Modes
0001467A 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
0001467C 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
0001467E                            ; ---------------------------------------------------------------------------
0001467E                            ; Music	to play	after invincibility wears off
0001467E                            ; ---------------------------------------------------------------------------
0001467E                            MusicList2:	incbin	misc\muslist2.bin
00014684                            		even
00014684                            ; ===========================================================================
00014684                            
00014684                            Sonic_Display:				; XREF: loc_12C7E
00014684 3028 0030                  		move.w	$30(a0),d0
00014688 6700                       		beq.s	Obj01_Display
0001468A 5368 0030                  		subq.w	#1,$30(a0)
0001468E E648                       		lsr.w	#3,d0
00014690 6400                       		bcc.s	Obj01_ChkInvin
00014692                            
00014692                            Obj01_Display:
00014692 4EBA A29C                  		jsr	DisplaySprite
00014696                            
00014696                            Obj01_ChkInvin:
00014696 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001469A 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
0001469C 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
000146A0 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
000146A2 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
000146A6 6600                       		bne.s	Obj01_ChkShoes
000146A8 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000146AC 6600                       		bne.s	Obj01_RmvInvin
000146AE 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000146B4 6500                       		bcs.s	Obj01_RmvInvin
000146B6 7000                       		moveq	#0,d0
000146B8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000146BC 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ3
000146C2 6600                       		bne.s	Obj01_PlayMusic
000146C4 7005                       		moveq	#5,d0		; play SBZ music
000146C6                            
000146C6                            Obj01_PlayMusic:
000146C6 43F9 0001 467E             		lea	(MusicList2).l,a1
000146CC 1031 0000                  		move.b	(a1,d0.w),d0
000146D0 4EB9 0000 121A             		jsr	(PlaySound).l	; play normal music
000146D6                            
000146D6                            Obj01_RmvInvin:
000146D6 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
000146DC                            
000146DC                            Obj01_ChkShoes:
000146DC 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
000146E0 6700                       		beq.s	Obj01_ExitChk	; if not, branch
000146E2 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
000146E6 6700                       		beq.s	Obj01_ExitChk
000146E8 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000146EC 6600                       		bne.s	Obj01_ExitChk
000146EE 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000146F4 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000146FA 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00014700 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00014706 303C 00E3                  		move.w	#$E3,d0
0001470A 4EF9 0000 121A             		jmp	(PlaySound).l	; run music at normal speed
00014710                            ; ===========================================================================
00014710                            
00014710                            Obj01_ExitChk:
00014710 4E75                       		rts	
00014712                            
00014712                            ; ---------------------------------------------------------------------------
00014712                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00014712                            ; ---------------------------------------------------------------------------
00014712                            
00014712                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014712                            
00014712                            
00014712                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00014712 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014716 43F8 CB00                  		lea	($FFFFCB00).w,a1
0001471A 43F1 0000                  		lea	(a1,d0.w),a1
0001471E 32E8 0008                  		move.w	8(a0),(a1)+
00014722 32E8 000C                  		move.w	$C(a0),(a1)+
00014726 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
0001472A 4E75                       		rts	
0001472C                            ; End of function Sonic_RecordPos
0001472C                            
0001472C                            ; ---------------------------------------------------------------------------
0001472C                            ; Subroutine for Sonic when he's underwater
0001472C                            ; ---------------------------------------------------------------------------
0001472C                            
0001472C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001472C                            
0001472C                            
0001472C                            Sonic_Water:				; XREF: loc_12C7E
0001472C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00014732 6700                       		beq.s	Obj01_InWater	; if yes, branch
00014734                            
00014734                            locret_12D80:
00014734 4E75                       		rts	
00014736                            ; ===========================================================================
00014736                            
00014736                            Obj01_InWater:
00014736 3038 F646                  		move.w	($FFFFF646).w,d0
0001473A B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
0001473E 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00014740 4A38 F612                  		tst.b	(f_insidepocket).w
00014744 6600                       		bne.s	Obj01_OutWater
00014746 08E8 0006 0022             		bset	#6,$22(a0)
0001474C 66E6                       		bne.s	locret_12D80
0001474E 6100 0000                  		bsr.w	ResumeMusic
00014752 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00014758 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
0001475E 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00014764 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
0001476A 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00014770 E0E8 0010                  		asr	$10(a0)
00014774 E0E8 0012                  		asr	$12(a0)
00014778 E0E8 0012                  		asr	$12(a0)
0001477C 67B6                       		beq.s	locret_12D80
0001477E 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00014784 303C 00AA                  		move.w	#$AA,d0
00014788 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play splash sound
0001478E                            ; ===========================================================================
0001478E                            
0001478E                            Obj01_OutWater:
0001478E 08A8 0006 0022             		bclr	#6,$22(a0)
00014794 679E                       		beq.s	locret_12D80
00014796 6100 0000                  		bsr.w	ResumeMusic
0001479A 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000147A0 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000147A6 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000147AC E1E8 0012                  		asl	$12(a0)
000147B0 6700 FF82                  		beq.w	locret_12D80
000147B4 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000147BA 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
000147C0 6E00                       		bgt.s	loc_12E0E
000147C2 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
000147C8                            
000147C8                            loc_12E0E:
000147C8 303C 00AA                  		move.w	#$AA,d0
000147CC 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play splash sound
000147D2                            ; End of function Sonic_Water
000147D2                            
000147D2                            ; ===========================================================================
000147D2                            ; ---------------------------------------------------------------------------
000147D2                            ; Modes	for controlling	Sonic
000147D2                            ; ---------------------------------------------------------------------------
000147D2                            
000147D2                            Obj01_MdNormal:				; XREF: Obj01_Modes
000147D2 6100 0000                  		bsr.w	Sonic_Jump
000147D6 6100 0000                  		bsr.w	Sonic_SlopeResist
000147DA 6100 0000                  		bsr.w	Sonic_Move
000147DE 6100 0000                  		bsr.w	Sonic_Roll
000147E2 6100 0000                  		bsr.w	Sonic_LevelBound
000147E6 4EBA A12E                  		jsr	SpeedToPos
000147EA 6100 0000                  		bsr.w	Sonic_AnglePos
000147EE 6100 0000                  		bsr.w	Sonic_SlopeRepel
000147F2 4E75                       		rts	
000147F4                            ; ===========================================================================
000147F4                            
000147F4                            Obj01_MdJump:				; XREF: Obj01_Modes
000147F4 6100 0000                  		bsr.w	Sonic_JumpHeight
000147F8 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000147FC 6100 0000                  		bsr.w	Sonic_LevelBound
00014800 4EBA A0F4                  		jsr	ObjectFall
00014804 0828 0006 0022             		btst	#6,$22(a0)
0001480A 6700                       		beq.s	loc_12E5C
0001480C 0468 0028 0012             		subi.w	#$28,$12(a0)
00014812                            
00014812                            loc_12E5C:
00014812 6100 0000                  		bsr.w	Sonic_JumpAngle
00014816 6100 0000                  		bsr.w	Sonic_Floor
0001481A 0C38 0030 F5E2             		cmpi.b	#$30,(SonimeSST+sonime_airtimer).w
00014820 6600                       		bne.s	@addtimer
00014822 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00014828 6300                       		bls.s	@done
0001482A 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w
00014830 6700                       		beq.s	@done
00014832 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00014838 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0001483E 6000                       		bra.s	@done
00014840                            
00014840                            
00014840                            	@addtimer:
00014840 5238 F5E2                  		addi.b	#1,(SonimeSST+sonime_airtimer).w
00014844 4A38 D012                  		tst.b	($FFFFD012).w
00014848 6A00                       		bpl.s	@done
0001484A 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001484E                            
0001484E                            	@done:
0001484E 4E75                       		rts	
00014850                            ; ===========================================================================
00014850                            
00014850                            Obj01_MdRoll:				; XREF: Obj01_Modes
00014850 6100 0000                  		bsr.w	Sonic_Jump
00014854 6100 0000                  		bsr.w	Sonic_RollRepel
00014858 6100 0000                  		bsr.w	Sonic_RollSpeed
0001485C 6100 0000                  		bsr.w	Sonic_LevelBound
00014860 4EBA A0B4                  		jsr	SpeedToPos
00014864 6100 0000                  		bsr.w	Sonic_AnglePos
00014868 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001486C 4E75                       		rts	
0001486E                            ; ===========================================================================
0001486E                            
0001486E                            Obj01_MdJump2:				; XREF: Obj01_Modes
0001486E 6100 0000                  		bsr.w	Sonic_JumpHeight
00014872 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00014876 6100 0000                  		bsr.w	Sonic_LevelBound
0001487A 4EBA A07A                  		jsr	ObjectFall
0001487E 0828 0006 0022             		btst	#6,$22(a0)
00014884 6700                       		beq.s	loc_12EA6
00014886 0468 0028 0012             		subi.w	#$28,$12(a0)
0001488C                            
0001488C                            loc_12EA6:
0001488C 6100 0000                  		bsr.w	Sonic_JumpAngle
00014890 6100 0000                  		bsr.w	Sonic_Floor
00014894 0C38 0040 F5E2             		cmpi.b	#$40,(SonimeSST+sonime_airtimer).w
0001489A 6600                       		bne.s	@addtimer
0001489C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000148A2 6300                       		bls.s	@done
000148A4 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w
000148AA 6700                       		beq.s	@done
000148AC 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
000148B2 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
000148B8 6000                       		bra.s	@done
000148BA                            
000148BA                            
000148BA                            	@addtimer:
000148BA 5238 F5E2                  		addi.b	#1,(SonimeSST+sonime_airtimer).w
000148BE 4A38 D012                  		tst.b	($FFFFD012).w
000148C2 6A00                       		bpl.s	@done
000148C4 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
000148C8                            
000148C8                            	@done:
000148C8 4E75                       		rts	
000148CA                            ; ---------------------------------------------------------------------------
000148CA                            ; Subroutine to	make Sonic walk/run
000148CA                            ; ---------------------------------------------------------------------------
000148CA                            
000148CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000148CA                            
000148CA                            
000148CA                            Sonic_Move:				; XREF: Obj01_MdNormal
000148CA 3C38 F760                  		move.w	($FFFFF760).w,d6
000148CE 3A38 F762                  		move.w	($FFFFF762).w,d5
000148D2 3838 F764                  		move.w	($FFFFF764).w,d4
000148D6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000148DA 6600 0000                  		bne.w	loc_12FEE
000148DE 4A68 003E                  		tst.w	$3E(a0)
000148E2 6600 0000                  		bne.w	Obj01_ResetScr
000148E6 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000148EC 6700                       		beq.s	Obj01_NotLeft	; if not, branch
000148EE 6100 0000                  		bsr.w	Sonic_MoveLeft
000148F2                            
000148F2                            Obj01_NotLeft:
000148F2 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000148F8 6700                       		beq.s	Obj01_NotRight	; if not, branch
000148FA 6100 0000                  		bsr.w	Sonic_MoveRight
000148FE                            
000148FE                            Obj01_NotRight:
000148FE 1028 0026                  		move.b	$26(a0),d0
00014902 0600 0020                  		addi.b	#$20,d0
00014906 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
0001490A 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001490E 4A68 0020                  		tst.w	$20(a0)		; is Sonic moving?
00014912 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00014916 08A8 0005 0022             		bclr	#5,$22(a0)
0001491C 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00014922 0828 0003 0022             		btst	#3,$22(a0)
00014928 6700                       		beq.s	Sonic_Balance
0001492A 7000                       		moveq	#0,d0
0001492C 1028 003D                  		move.b	$3D(a0),d0
00014930 ED48                       		lsl.w	#6,d0
00014932 43F8 D000                  		lea	($FFFFD000).w,a1
00014936 43F1 0000                  		lea	(a1,d0.w),a1
0001493A 4A29 0022                  		tst.b	$22(a1)
0001493E 6B00                       		bmi.s	Sonic_LookUp
00014940 7200                       		moveq	#0,d1
00014942 1229 0019                  		move.b	$19(a1),d1
00014946 3401                       		move.w	d1,d2
00014948 D442                       		add.w	d2,d2
0001494A 5942                       		subq.w	#4,d2
0001494C D268 0008                  		add.w	8(a0),d1
00014950 9269 0008                  		sub.w	8(a1),d1
00014954 0C41 0004                  		cmpi.w	#4,d1
00014958 6D00                       		blt.s	loc_12F6A
0001495A B242                       		cmp.w	d2,d1
0001495C 6C00                       		bge.s	loc_12F5A
0001495E 6000                       		bra.s	Sonic_LookUp
00014960                            ; ===========================================================================
00014960                            
00014960                            Sonic_Balance:
00014960 4EB9 0000 0000             		jsr	ObjHitFloor
00014966 0C41 000C                  		cmpi.w	#$C,d1
0001496A 6D00                       		blt.s	Sonic_LookUp
0001496C 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00014972 6600                       		bne.s	loc_12F62
00014974                            
00014974                            loc_12F5A:
00014974 08A8 0000 0022             		bclr	#0,$22(a0)
0001497A 6000                       		bra.s	loc_12F70
0001497C                            ; ===========================================================================
0001497C                            
0001497C                            loc_12F62:
0001497C 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00014982 6600                       		bne.s	Sonic_LookUp
00014984                            
00014984                            loc_12F6A:
00014984 08E8 0000 0022             		bset	#0,$22(a0)
0001498A                            
0001498A                            loc_12F70:
0001498A 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00014990 6000                       		bra.s	Obj01_ResetScr
00014992                            ; ===========================================================================
00014992                            
00014992                            Sonic_LookUp:
00014992 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00014998 6700                       		beq.s	Sonic_Duck	; if not, branch
0001499A 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000149A0 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000149A6 6700                       		beq.s	loc_12FC2
000149A8 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000149AC 6000                       		bra.s	loc_12FC2
000149AE                            ; ===========================================================================
000149AE                            
000149AE                            Sonic_Duck:
000149AE 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000149B4 6700                       		beq.s	Obj01_ResetScr	; if not, branch
000149B6 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000149BC 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000149C2 6700                       		beq.s	loc_12FC2
000149C4 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000149C8 6000                       		bra.s	loc_12FC2
000149CA                            ; ===========================================================================
000149CA                            
000149CA                            Obj01_ResetScr:
000149CA 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000149D0 6700                       		beq.s	loc_12FC2	; if yes, branch
000149D2 6400                       		bcc.s	loc_12FBE
000149D4 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000149D8                            
000149D8                            loc_12FBE:
000149D8 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000149DC                            
000149DC                            loc_12FC2:
000149DC 1038 F602                  		move.b	($FFFFF602).w,d0
000149E0 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
000149E4 6600                       		bne.s	loc_12FEE	; if yes, branch
000149E6 3028 0020                  		move.w	$20(a0),d0
000149EA 6700                       		beq.s	loc_12FEE
000149EC 6B00                       		bmi.s	loc_12FE2
000149EE 9045                       		sub.w	d5,d0
000149F0 6400                       		bcc.s	loc_12FDC
000149F2 303C 0000                  		move.w	#0,d0
000149F6                            
000149F6                            loc_12FDC:
000149F6 3140 0020                  		move.w	d0,$20(a0)
000149FA 6000                       		bra.s	loc_12FEE
000149FC                            ; ===========================================================================
000149FC                            
000149FC                            loc_12FE2:
000149FC D045                       		add.w	d5,d0
000149FE 6400                       		bcc.s	loc_12FEA
00014A00 303C 0000                  		move.w	#0,d0
00014A04                            
00014A04                            loc_12FEA:
00014A04 3140 0020                  		move.w	d0,$20(a0)
00014A08                            
00014A08                            loc_12FEE:
00014A08 1028 0026                  		move.b	$26(a0),d0
00014A0C 4EB9 0000 29F6             		jsr	(CalcSine).l
00014A12 C3E8 0020                  		muls.w	$20(a0),d1
00014A16 E081                       		asr.l	#8,d1
00014A18 3141 0010                  		move.w	d1,$10(a0)
00014A1C C1E8 0020                  		muls.w	$20(a0),d0
00014A20 E080                       		asr.l	#8,d0
00014A22 3140 0012                  		move.w	d0,$12(a0)
00014A26                            
00014A26                            loc_1300C:
00014A26 1028 0026                  		move.b	$26(a0),d0
00014A2A 0600 0040                  		addi.b	#$40,d0
00014A2E 6B00                       		bmi.s	locret_1307C
00014A30 123C 0040                  		move.b	#$40,d1
00014A34 4A68 0020                  		tst.w	$20(a0)
00014A38 6700                       		beq.s	locret_1307C
00014A3A 6B00                       		bmi.s	loc_13024
00014A3C 4441                       		neg.w	d1
00014A3E                            
00014A3E                            loc_13024:
00014A3E 1028 0026                  		move.b	$26(a0),d0
00014A42 D001                       		add.b	d1,d0
00014A44 3F00                       		move.w	d0,-(sp)
00014A46 6100 0000                  		bsr.w	Sonic_WalkSpeed
00014A4A 301F                       		move.w	(sp)+,d0
00014A4C 4A41                       		tst.w	d1
00014A4E 6A00                       		bpl.s	locret_1307C
00014A50 E141                       		asl.w	#8,d1
00014A52 0600 0020                  		addi.b	#$20,d0
00014A56 0200 00C0                  		andi.b	#$C0,d0
00014A5A 6700                       		beq.s	loc_13078
00014A5C 0C00 0040                  		cmpi.b	#$40,d0
00014A60 6700                       		beq.s	loc_13066
00014A62 0C00 0080                  		cmpi.b	#$80,d0
00014A66 6700                       		beq.s	loc_13060
00014A68 D368 0010                  		add.w	d1,$10(a0)
00014A6C 08E8 0005 0022             		bset	#5,$22(a0)
00014A72 317C 0000 0020             		move.w	#0,$20(a0)
00014A78 4E75                       		rts	
00014A7A                            ; ===========================================================================
00014A7A                            
00014A7A                            loc_13060:
00014A7A 9368 0012                  		sub.w	d1,$12(a0)
00014A7E 4E75                       		rts	
00014A80                            ; ===========================================================================
00014A80                            
00014A80                            loc_13066:
00014A80 9368 0010                  		sub.w	d1,$10(a0)
00014A84 08E8 0005 0022             		bset	#5,$22(a0)
00014A8A 317C 0000 0020             		move.w	#0,$20(a0)
00014A90 4E75                       		rts	
00014A92                            ; ===========================================================================
00014A92                            
00014A92                            loc_13078:
00014A92 D368 0012                  		add.w	d1,$12(a0)
00014A96                            
00014A96                            locret_1307C:
00014A96 4E75                       		rts	
00014A98                            ; End of function Sonic_Move
00014A98                            
00014A98                            
00014A98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A98                            
00014A98                            
00014A98                            Sonic_MoveLeft:				; XREF: Sonic_Move
00014A98 3028 0020                  		move.w	$20(a0),d0
00014A9C 6700                       		beq.s	loc_13086
00014A9E 6A00                       		bpl.s	loc_130B2
00014AA0                            
00014AA0                            loc_13086:
00014AA0 08E8 0000 0022             		bset	#0,$22(a0)
00014AA6 6600                       		bne.s	loc_1309A
00014AA8 08A8 0005 0022             		bclr	#5,$22(a0)
00014AAE 117C 0001 001D             		move.b	#1,$1D(a0)
00014AB4                            
00014AB4                            loc_1309A:
00014AB4 9045                       		sub.w	d5,d0
00014AB6 3206                       		move.w	d6,d1
00014AB8 4441                       		neg.w	d1
00014ABA B041                       		cmp.w	d1,d0
00014ABC 6E00                       		bgt.s	loc_130A6
00014ABE 3001                       		move.w	d1,d0
00014AC0                            
00014AC0                            loc_130A6:
00014AC0 3140 0020                  		move.w	d0,$20(a0)
00014AC4 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00014ACA 4E75                       		rts	
00014ACC                            ; ===========================================================================
00014ACC                            
00014ACC                            loc_130B2:				; XREF: Sonic_MoveLeft
00014ACC 9044                       		sub.w	d4,d0
00014ACE 6400                       		bcc.s	loc_130BA
00014AD0 303C FF80                  		move.w	#-$80,d0
00014AD4                            
00014AD4                            loc_130BA:
00014AD4 3140 0020                  		move.w	d0,$20(a0)
00014AD8 1028 0026                  		move.b	$26(a0),d0
00014ADC 0600 0020                  		addi.b	#$20,d0
00014AE0 0200 00C0                  		andi.b	#$C0,d0
00014AE4 6600                       		bne.s	locret_130E8
00014AE6 0C40 0400                  		cmpi.w	#$400,d0
00014AEA 6D00                       		blt.s	locret_130E8
00014AEC 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00014AF2 08A8 0000 0022             		bclr	#0,$22(a0)
00014AF8 303C 00A4                  		move.w	#$A4,d0
00014AFC 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play stopping sound
00014B02                            
00014B02                            locret_130E8:
00014B02 4E75                       		rts	
00014B04                            ; End of function Sonic_MoveLeft
00014B04                            
00014B04                            
00014B04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B04                            
00014B04                            
00014B04                            Sonic_MoveRight:			; XREF: Sonic_Move
00014B04 3028 0020                  		move.w	$20(a0),d0
00014B08 6B00                       		bmi.s	loc_13118
00014B0A 08A8 0000 0022             		bclr	#0,$22(a0)
00014B10 6700                       		beq.s	loc_13104
00014B12 08A8 0005 0022             		bclr	#5,$22(a0)
00014B18 117C 0001 001D             		move.b	#1,$1D(a0)
00014B1E                            
00014B1E                            loc_13104:
00014B1E D045                       		add.w	d5,d0
00014B20 B046                       		cmp.w	d6,d0
00014B22 6D00                       		blt.s	loc_1310C
00014B24 3006                       		move.w	d6,d0
00014B26                            
00014B26                            loc_1310C:
00014B26 3140 0020                  		move.w	d0,$20(a0)
00014B2A 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00014B30 4E75                       		rts	
00014B32                            ; ===========================================================================
00014B32                            
00014B32                            loc_13118:				; XREF: Sonic_MoveRight
00014B32 D044                       		add.w	d4,d0
00014B34 6400                       		bcc.s	loc_13120
00014B36 303C 0080                  		move.w	#$80,d0
00014B3A                            
00014B3A                            loc_13120:
00014B3A 3140 0020                  		move.w	d0,$20(a0)
00014B3E 1028 0026                  		move.b	$26(a0),d0
00014B42 0600 0020                  		addi.b	#$20,d0
00014B46 0200 00C0                  		andi.b	#$C0,d0
00014B4A 6600                       		bne.s	locret_1314E
00014B4C 0C40 FC00                  		cmpi.w	#-$400,d0
00014B50 6E00                       		bgt.s	locret_1314E
00014B52 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00014B58 08E8 0000 0022             		bset	#0,$22(a0)
00014B5E 303C 00A4                  		move.w	#$A4,d0
00014B62 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play stopping sound
00014B68                            
00014B68                            locret_1314E:
00014B68 4E75                       		rts	
00014B6A                            ; End of function Sonic_MoveRight
00014B6A                            
00014B6A                            ; ---------------------------------------------------------------------------
00014B6A                            ; Subroutine to	change Sonic's speed as he rolls
00014B6A                            ; ---------------------------------------------------------------------------
00014B6A                            
00014B6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B6A                            
00014B6A                            
00014B6A                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00014B6A 3C38 F760                  		move.w	($FFFFF760).w,d6
00014B6E E346                       		asl.w	#1,d6
00014B70 3A38 F762                  		move.w	($FFFFF762).w,d5
00014B74 E245                       		asr.w	#1,d5
00014B76 3838 F764                  		move.w	($FFFFF764).w,d4
00014B7A E444                       		asr.w	#2,d4
00014B7C 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014B80 6600 0000                  		bne.w	loc_131CC
00014B84 4A68 003E                  		tst.w	$3E(a0)
00014B88 6600                       		bne.s	loc_13188
00014B8A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014B90 6700                       		beq.s	loc_1317C	; if not, branch
00014B92 6100 0000                  		bsr.w	Sonic_RollLeft
00014B96                            
00014B96                            loc_1317C:
00014B96 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014B9C 6700                       		beq.s	loc_13188	; if not, branch
00014B9E 6100 0000                  		bsr.w	Sonic_RollRight
00014BA2                            
00014BA2                            loc_13188:
00014BA2 3028 0020                  		move.w	$20(a0),d0
00014BA6 6700                       		beq.s	loc_131AA
00014BA8 6B00                       		bmi.s	loc_1319E
00014BAA 9045                       		sub.w	d5,d0
00014BAC 6400                       		bcc.s	loc_13198
00014BAE 303C 0000                  		move.w	#0,d0
00014BB2                            
00014BB2                            loc_13198:
00014BB2 3140 0020                  		move.w	d0,$20(a0)
00014BB6 6000                       		bra.s	loc_131AA
00014BB8                            ; ===========================================================================
00014BB8                            
00014BB8                            loc_1319E:				; XREF: Sonic_RollSpeed
00014BB8 D045                       		add.w	d5,d0
00014BBA 6400                       		bcc.s	loc_131A6
00014BBC 303C 0000                  		move.w	#0,d0
00014BC0                            
00014BC0                            loc_131A6:
00014BC0 3140 0020                  		move.w	d0,$20(a0)
00014BC4                            
00014BC4                            loc_131AA:
00014BC4 4A68 0020                  		tst.w	$20(a0)		; is Sonic moving?
00014BC8 6600                       		bne.s	loc_131CC	; if yes, branch
00014BCA                            
00014BCA                            	@NoReset:
00014BCA 08A8 0002 0022             		bclr	#2,$22(a0)
00014BD0 117C 0013 0016             		move.b	#$13,$16(a0)
00014BD6 117C 0009 0017             		move.b	#9,$17(a0)
00014BDC 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00014BE2 5B68 000C                  		subq.w	#5,$C(a0)
00014BE6                            
00014BE6                            loc_131CC:
00014BE6 1028 0026                  		move.b	$26(a0),d0
00014BEA 4EB9 0000 29F6             		jsr	(CalcSine).l
00014BF0 C1E8 0020                  		muls.w	$20(a0),d0
00014BF4 E080                       		asr.l	#8,d0
00014BF6 3140 0012                  		move.w	d0,$12(a0)
00014BFA C3E8 0020                  		muls.w	$20(a0),d1
00014BFE E081                       		asr.l	#8,d1
00014C00 0C41 1000                  		cmpi.w	#$1000,d1
00014C04 6F00                       		ble.s	loc_131F0
00014C06 323C 1000                  		move.w	#$1000,d1
00014C0A                            
00014C0A                            loc_131F0:
00014C0A 0C41 F000                  		cmpi.w	#-$1000,d1
00014C0E 6C00                       		bge.s	loc_131FA
00014C10 323C F000                  		move.w	#-$1000,d1
00014C14                            
00014C14                            loc_131FA:
00014C14 3141 0010                  		move.w	d1,$10(a0)
00014C18 6000 FE0C                  		bra.w	loc_1300C
00014C1C                            ; End of function Sonic_RollSpeed
00014C1C                            
00014C1C                            
00014C1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C1C                            
00014C1C                            
00014C1C                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00014C1C 3028 0020                  		move.w	$20(a0),d0
00014C20 6700                       		beq.s	loc_1320A
00014C22 6A00                       		bpl.s	loc_13218
00014C24                            
00014C24                            loc_1320A:
00014C24 08E8 0000 0022             		bset	#0,$22(a0)
00014C2A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014C30 4E75                       		rts	
00014C32                            ; ===========================================================================
00014C32                            
00014C32                            loc_13218:
00014C32 9044                       		sub.w	d4,d0
00014C34 6400                       		bcc.s	loc_13220
00014C36 303C FF80                  		move.w	#-$80,d0
00014C3A                            
00014C3A                            loc_13220:
00014C3A 3140 0020                  		move.w	d0,$20(a0)
00014C3E 4E75                       		rts	
00014C40                            ; End of function Sonic_RollLeft
00014C40                            
00014C40                            
00014C40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C40                            
00014C40                            
00014C40                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00014C40 3028 0020                  		move.w	$20(a0),d0
00014C44 6B00                       		bmi.s	loc_1323A
00014C46 08A8 0000 0022             		bclr	#0,$22(a0)
00014C4C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014C52 4E75                       		rts	
00014C54                            ; ===========================================================================
00014C54                            
00014C54                            loc_1323A:
00014C54 D044                       		add.w	d4,d0
00014C56 6400                       		bcc.s	loc_13242
00014C58 303C 0080                  		move.w	#$80,d0
00014C5C                            
00014C5C                            loc_13242:
00014C5C 3140 0020                  		move.w	d0,$20(a0)
00014C60 4E75                       		rts	
00014C62                            ; End of function Sonic_RollRight
00014C62                            
00014C62                            ; ---------------------------------------------------------------------------
00014C62                            ; Subroutine to	change Sonic's direction while jumping
00014C62                            ; ---------------------------------------------------------------------------
00014C62                            
00014C62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C62                            
00014C62                            
00014C62                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014C62 3C38 F760                  		move.w	($FFFFF760).w,d6
00014C66 3A38 F762                  		move.w	($FFFFF762).w,d5
00014C6A E345                       		asl.w	#1,d5
00014C6C 0828 0004 0022             		btst	#4,$22(a0)
00014C72 6600                       		bne.s	Obj01_ResetScr2
00014C74 3028 0010                  		move.w	$10(a0),d0
00014C78 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014C7E 6700                       		beq.s	loc_13278	; if not, branch
00014C80 08E8 0000 0022             		bset	#0,$22(a0)
00014C86 9045                       		sub.w	d5,d0
00014C88 3206                       		move.w	d6,d1
00014C8A 4441                       		neg.w	d1
00014C8C B041                       		cmp.w	d1,d0
00014C8E 6E00                       		bgt.s	loc_13278
00014C90 3001                       		move.w	d1,d0
00014C92                            
00014C92                            loc_13278:
00014C92 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014C98 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00014C9A 08A8 0000 0022             		bclr	#0,$22(a0)
00014CA0 D045                       		add.w	d5,d0
00014CA2 B046                       		cmp.w	d6,d0
00014CA4 6D00                       		blt.s	Obj01_JumpMove
00014CA6 3006                       		move.w	d6,d0
00014CA8                            
00014CA8                            Obj01_JumpMove:
00014CA8 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00014CAC                            
00014CAC                            Obj01_ResetScr2:
00014CAC 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00014CB2 6700                       		beq.s	loc_132A4	; if yes, branch
00014CB4 6400                       		bcc.s	loc_132A0
00014CB6 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00014CBA                            
00014CBA                            loc_132A0:
00014CBA 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014CBE                            
00014CBE                            loc_132A4:
00014CBE 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00014CC4 6500                       		bcs.s	locret_132D2	; if yes, branch
00014CC6 3028 0010                  		move.w	$10(a0),d0
00014CCA 3200                       		move.w	d0,d1
00014CCC EA41                       		asr.w	#5,d1
00014CCE 6700                       		beq.s	locret_132D2
00014CD0 6B00                       		bmi.s	loc_132C6
00014CD2 9041                       		sub.w	d1,d0
00014CD4 6400                       		bcc.s	loc_132C0
00014CD6 303C 0000                  		move.w	#0,d0
00014CDA                            
00014CDA                            loc_132C0:
00014CDA 3140 0010                  		move.w	d0,$10(a0)
00014CDE 4E75                       		rts	
00014CE0                            ; ===========================================================================
00014CE0                            
00014CE0                            loc_132C6:
00014CE0 9041                       		sub.w	d1,d0
00014CE2 6500                       		bcs.s	loc_132CE
00014CE4 303C 0000                  		move.w	#0,d0
00014CE8                            
00014CE8                            loc_132CE:
00014CE8 3140 0010                  		move.w	d0,$10(a0)
00014CEC                            
00014CEC                            locret_132D2:
00014CEC 4E75                       		rts	
00014CEE                            ; End of function Sonic_ChgJumpDir
00014CEE                            
00014CEE                            ; ===========================================================================
00014CEE                            ; ---------------------------------------------------------------------------
00014CEE                            ; Unused subroutine to squash Sonic
00014CEE                            ; ---------------------------------------------------------------------------
00014CEE 1028 0026                  		move.b	$26(a0),d0
00014CF2 0600 0020                  		addi.b	#$20,d0
00014CF6 0200 00C0                  		andi.b	#$C0,d0
00014CFA 6600                       		bne.s	locret_13302
00014CFC 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014D00 4A41                       		tst.w	d1
00014D02 6A00                       		bpl.s	locret_13302
00014D04 317C 0000 0020             		move.w	#0,$20(a0)	; stop Sonic moving
00014D0A 317C 0000 0010             		move.w	#0,$10(a0)
00014D10 317C 0000 0012             		move.w	#0,$12(a0)
00014D16 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00014D1C                            
00014D1C                            locret_13302:
00014D1C 4E75                       		rts	
00014D1E                            ; ---------------------------------------------------------------------------
00014D1E                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00014D1E                            ; ---------------------------------------------------------------------------
00014D1E                            
00014D1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D1E                            
00014D1E                            
00014D1E                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00014D1E 2228 0008                  		move.l	8(a0),d1
00014D22 3028 0010                  		move.w	$10(a0),d0
00014D26 48C0                       		ext.l	d0
00014D28 E180                       		asl.l	#8,d0
00014D2A D280                       		add.l	d0,d1
00014D2C 4841                       		swap	d1
00014D2E 3038 F728                  		move.w	($FFFFF728).w,d0
00014D32 0640 0010                  		addi.w	#$10,d0
00014D36 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014D38 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00014D3A 3038 F72A                  		move.w	($FFFFF72A).w,d0
00014D3E 0640 0128                  		addi.w	#$128,d0
00014D42 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00014D46 6600                       		bne.s	loc_13332
00014D48 0640 0040                  		addi.w	#$40,d0
00014D4C                            
00014D4C                            loc_13332:
00014D4C B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014D4E 6300                       		bls.s	Boundary_Sides	; if yes, branch
00014D50                            
00014D50                            loc_13336:
00014D50 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014D54 0640 00E0                  		addi.w	#$E0,d0
00014D58 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00014D5C 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00014D5E 4E75                       		rts	
00014D60                            ; ===========================================================================
00014D60                            
00014D60                            Boundary_Bottom:
00014D60 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00014D66 6600                       		bne.s	JMPKillSonic	; if not, kill Sonic
00014D68 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00014D6E 6500                       		bcs.s	JMPKillSonic
00014D70 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00014D74 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014D7A 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00014D80 4E75                       		rts	
00014D82                            ; ===========================================================================
00014D82                            
00014D82                            Boundary_Sides:
00014D82 3140 0008                  		move.w	d0,8(a0)
00014D86 317C 0000 000A             		move.w	#0,$A(a0)
00014D8C 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00014D92 317C 0000 0020             		move.w	#0,$20(a0)
00014D98 60B6                       		bra.s	loc_13336
00014D9A                            
00014D9A                            JMPKillSonic:
00014D9A 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
00014DA0 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
00014DA6 4EF9 0000 0000             		jmp	KillSonic
00014DAC                            ; End of function Sonic_LevelBound
00014DAC                            
00014DAC                            ; ---------------------------------------------------------------------------
00014DAC                            ; Subroutine allowing Sonic to roll when he's moving
00014DAC                            ; ---------------------------------------------------------------------------
00014DAC                            
00014DAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DAC                            
00014DAC                            
00014DAC                            Sonic_Roll:				; XREF: Obj01_MdNormal
00014DAC 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014DB0 6600                       		bne.s	Obj01_NoRoll
00014DB2 3028 0020                  		move.w	$20(a0),d0
00014DB6 6A00                       		bpl.s	loc_13392
00014DB8 4440                       		neg.w	d0
00014DBA                            
00014DBA                            loc_13392:
00014DBA 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00014DBE 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00014DC0 1038 F602                  		move.b	($FFFFF602).w,d0
00014DC4 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00014DC8 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00014DCA 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00014DD0 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00014DD2                            
00014DD2                            Obj01_NoRoll:
00014DD2 4E75                       		rts	
00014DD4                            ; ===========================================================================
00014DD4                            
00014DD4                            Obj01_ChkRoll:
00014DD4 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00014DDA 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00014DDC 4E75                       		rts	
00014DDE                            ; ===========================================================================
00014DDE                            
00014DDE                            Obj01_DoRoll:
00014DDE 08E8 0002 0022             		bset	#2,$22(a0)
00014DE4 117C 000E 0016             		move.b	#$E,$16(a0)
00014DEA 117C 0007 0017             		move.b	#7,$17(a0)
00014DF0 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014DF6 5A68 000C                  		addq.w	#5,$C(a0)
00014DFA 303C 00BE                  		move.w	#$BE,d0
00014DFE 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play rolling sound
00014E04 4A68 0020                  		tst.w	$20(a0)
00014E08 6600                       		bne.s	locret_133E8
00014E0A 317C 0200 0020             		move.w	#$200,$20(a0)
00014E10                            
00014E10                            locret_133E8:
00014E10 4E75                       		rts	
00014E12                            ; End of function Sonic_Roll
00014E12                            
00014E12                            ; ---------------------------------------------------------------------------
00014E12                            ; Subroutine allowing Sonic to jump
00014E12                            ; ---------------------------------------------------------------------------
00014E12                            
00014E12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E12                            
00014E12                            
00014E12                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014E12 1038 F603                  		move.b	($FFFFF603).w,d0
00014E16 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00014E1A 6700 0000                  		beq.w	locret_1348E	; if not, branch
00014E1E 31FC 6000 F5D8             		move.w	#$6000,(SonimeSST+sonime_waittimer).w
00014E24 0C38 000B F5CE             		cmpi.b	#face_impatient,(SonimeSST+sonime_face).w
00014E2A 6600                       		bne.s	@notfrustrated
00014E2C 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00014E32                            
00014E32                            	@notfrustrated:
00014E32 7000                       		moveq	#0,d0
00014E34 1028 0026                  		move.b	$26(a0),d0
00014E38 0600 0080                  		addi.b	#$80,d0
00014E3C 6100 0000                  		bsr.w	sub_14D48
00014E40 0C41 0006                  		cmpi.w	#6,d1
00014E44 6D00 0000                  		blt.w	locret_1348E
00014E48 343C 0680                  		move.w	#$680,d2
00014E4C 0828 0006 0022             		btst	#6,$22(a0)
00014E52 6700                       		beq.s	loc_1341C
00014E54 343C 0380                  		move.w	#$380,d2
00014E58                            
00014E58                            loc_1341C:
00014E58 7000                       		moveq	#0,d0
00014E5A 1028 0026                  		move.b	$26(a0),d0
00014E5E 0400 0040                  		subi.b	#$40,d0
00014E62 4EB9 0000 29F6             		jsr	(CalcSine).l
00014E68 C3C2                       		muls.w	d2,d1
00014E6A E081                       		asr.l	#8,d1
00014E6C D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00014E70 C1C2                       		muls.w	d2,d0
00014E72 E080                       		asr.l	#8,d0
00014E74 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00014E78 08E8 0001 0022             		bset	#1,$22(a0)
00014E7E 08A8 0005 0022             		bclr	#5,$22(a0)
00014E84 588F                       		addq.l	#4,sp
00014E86 117C 0001 003C             		move.b	#1,$3C(a0)
00014E8C 4228 0038                  		clr.b	$38(a0)
00014E90 303C 00A0                  		move.w	#$A0,d0
00014E94 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play jumping sound
00014E9A 117C 0013 0016             		move.b	#$13,$16(a0)
00014EA0 117C 0009 0017             		move.b	#9,$17(a0)
00014EA6 0828 0002 0022             		btst	#2,$22(a0)
00014EAC 6600                       		bne.s	loc_13490
00014EAE 117C 000E 0016             		move.b	#$E,$16(a0)
00014EB4 117C 0007 0017             		move.b	#7,$17(a0)
00014EBA 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00014EC0 08E8 0002 0022             		bset	#2,$22(a0)
00014EC6 5A68 000C                  		addq.w	#5,$C(a0)
00014ECA                            
00014ECA                            locret_1348E:
00014ECA 4E75                       		rts	
00014ECC                            ; ===========================================================================
00014ECC                            
00014ECC                            loc_13490:
00014ECC 08E8 0004 0022             		bset	#4,$22(a0)
00014ED2 4E75                       		rts	
00014ED4                            ; End of function Sonic_Jump
00014ED4                            
00014ED4                            
00014ED4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014ED4                            
00014ED4                            
00014ED4                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014ED4 4A28 003C                  		tst.b	$3C(a0)
00014ED8 6700                       		beq.s	loc_134C4
00014EDA 323C FC00                  		move.w	#-$400,d1
00014EDE 0828 0006 0022             		btst	#6,$22(a0)
00014EE4 6700                       		beq.s	loc_134AE
00014EE6 323C FE00                  		move.w	#-$200,d1
00014EEA                            
00014EEA                            loc_134AE:
00014EEA B268 0012                  		cmp.w	$12(a0),d1
00014EEE 6F00                       		ble.s	locret_134C2
00014EF0 1038 F602                  		move.b	($FFFFF602).w,d0
00014EF4 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00014EF8 6600                       		bne.s	locret_134C2	; if yes, branch
00014EFA 3141 0012                  		move.w	d1,$12(a0)
00014EFE                            
00014EFE                            locret_134C2:
00014EFE 4E75                       		rts	
00014F00                            ; ===========================================================================
00014F00                            
00014F00                            loc_134C4:
00014F00 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00014F06 6C00                       		bge.s	locret_134D2
00014F08 317C F040 0012             		move.w	#-$FC0,$12(a0)
00014F0E                            
00014F0E                            locret_134D2:
00014F0E 4E75                       		rts	
00014F10                            ; End of function Sonic_JumpHeight
00014F10                            
00014F10                            ; ---------------------------------------------------------------------------
00014F10                            ; Subroutine to	slow Sonic walking up a	slope
00014F10                            ; ---------------------------------------------------------------------------
00014F10                            
00014F10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F10                            
00014F10                            
00014F10                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00014F10 1028 0026                  		move.b	$26(a0),d0
00014F14 0600 0060                  		addi.b	#$60,d0
00014F18 0C00 00C0                  		cmpi.b	#$C0,d0
00014F1C 6400                       		bcc.s	locret_13508
00014F1E 1028 0026                  		move.b	$26(a0),d0
00014F22 4EB9 0000 29F6             		jsr	(CalcSine).l
00014F28 C1FC 0020                  		muls.w	#$20,d0
00014F2C E080                       		asr.l	#8,d0
00014F2E 4A68 0020                  		tst.w	$20(a0)
00014F32 6700                       		beq.s	locret_13508
00014F34 6B00                       		bmi.s	loc_13504
00014F36 4A40                       		tst.w	d0
00014F38 6700                       		beq.s	locret_13502
00014F3A D168 0020                  		add.w	d0,$20(a0)	; change Sonic's inertia
00014F3E                            
00014F3E                            locret_13502:
00014F3E 4E75                       		rts	
00014F40                            ; ===========================================================================
00014F40                            
00014F40                            loc_13504:
00014F40 D168 0020                  		add.w	d0,$20(a0)
00014F44                            
00014F44                            locret_13508:
00014F44 4E75                       		rts	
00014F46                            ; End of function Sonic_SlopeResist
00014F46                            
00014F46                            ; ---------------------------------------------------------------------------
00014F46                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00014F46                            ; ---------------------------------------------------------------------------
00014F46                            
00014F46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F46                            
00014F46                            
00014F46                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00014F46 1028 0026                  		move.b	$26(a0),d0
00014F4A 0600 0060                  		addi.b	#$60,d0
00014F4E 0C00 00C0                  		cmpi.b	#-$40,d0
00014F52 6400                       		bcc.s	locret_13544
00014F54 1028 0026                  		move.b	$26(a0),d0
00014F58 4EB9 0000 29F6             		jsr	(CalcSine).l
00014F5E C1FC 0050                  		muls.w	#$50,d0
00014F62 E080                       		asr.l	#8,d0
00014F64 4A68 0020                  		tst.w	$20(a0)
00014F68 6B00                       		bmi.s	loc_1353A
00014F6A 4A40                       		tst.w	d0
00014F6C 6A00                       		bpl.s	loc_13534
00014F6E E480                       		asr.l	#2,d0
00014F70                            
00014F70                            loc_13534:
00014F70 D168 0020                  		add.w	d0,$20(a0)
00014F74 4E75                       		rts	
00014F76                            ; ===========================================================================
00014F76                            
00014F76                            loc_1353A:
00014F76 4A40                       		tst.w	d0
00014F78 6B00                       		bmi.s	loc_13540
00014F7A E480                       		asr.l	#2,d0
00014F7C                            
00014F7C                            loc_13540:
00014F7C D168 0020                  		add.w	d0,$20(a0)
00014F80                            
00014F80                            locret_13544:
00014F80 4E75                       		rts	
00014F82                            ; End of function Sonic_RollRepel
00014F82                            
00014F82                            ; ---------------------------------------------------------------------------
00014F82                            ; Subroutine to	push Sonic down	a slope
00014F82                            ; ---------------------------------------------------------------------------
00014F82                            
00014F82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F82                            
00014F82                            
00014F82                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00014F82 4E71                       		nop	
00014F84 4A28 0038                  		tst.b	$38(a0)
00014F88 6600                       		bne.s	locret_13580
00014F8A 4A68 003E                  		tst.w	$3E(a0)
00014F8E 6600                       		bne.s	loc_13582
00014F90 1028 0026                  		move.b	$26(a0),d0
00014F94 0600 0020                  		addi.b	#$20,d0
00014F98 0200 00C0                  		andi.b	#$C0,d0
00014F9C 6700                       		beq.s	locret_13580
00014F9E 3028 0020                  		move.w	$20(a0),d0
00014FA2 6A00                       		bpl.s	loc_1356A
00014FA4 4440                       		neg.w	d0
00014FA6                            
00014FA6                            loc_1356A:
00014FA6 0C40 0280                  		cmpi.w	#$280,d0
00014FAA 6400                       		bcc.s	locret_13580
00014FAC 4268 0020                  		clr.w	$20(a0)
00014FB0 08E8 0001 0022             		bset	#1,$22(a0)
00014FB6 317C 001E 003E             		move.w	#$1E,$3E(a0)
00014FBC                            
00014FBC                            locret_13580:
00014FBC 4E75                       		rts	
00014FBE                            ; ===========================================================================
00014FBE                            
00014FBE                            loc_13582:
00014FBE 5368 003E                  		subq.w	#1,$3E(a0)
00014FC2 4E75                       		rts	
00014FC4                            ; End of function Sonic_SlopeRepel
00014FC4                            
00014FC4                            ; ---------------------------------------------------------------------------
00014FC4                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00014FC4                            ; ---------------------------------------------------------------------------
00014FC4                            
00014FC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FC4                            
00014FC4                            
00014FC4                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014FC4 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014FC8 6700                       		beq.s	locret_135A2	; if already 0,	branch
00014FCA 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00014FCC                            
00014FCC 5400                       		addq.b	#2,d0		; increase angle
00014FCE 6400                       		bcc.s	loc_13596
00014FD0 7000                       		moveq	#0,d0
00014FD2                            
00014FD2                            loc_13596:
00014FD2 6000                       		bra.s	loc_1359E
00014FD4                            ; ===========================================================================
00014FD4                            
00014FD4                            loc_13598:
00014FD4 5500                       		subq.b	#2,d0		; decrease angle
00014FD6 6400                       		bcc.s	loc_1359E
00014FD8 7000                       		moveq	#0,d0
00014FDA                            
00014FDA                            loc_1359E:
00014FDA 1140 0026                  		move.b	d0,$26(a0)
00014FDE                            
00014FDE                            locret_135A2:
00014FDE 4E75                       		rts	
00014FE0                            ; End of function Sonic_JumpAngle
00014FE0                            
00014FE0                            ; ---------------------------------------------------------------------------
00014FE0                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00014FE0                            ; ---------------------------------------------------------------------------
00014FE0                            
00014FE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FE0                            
00014FE0                            
00014FE0                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00014FE0 3228 0010                  		move.w	$10(a0),d1
00014FE4 3428 0012                  		move.w	$12(a0),d2
00014FE8 4EB9 0000 2CBE             		jsr	(CalcAngle).l
00014FEE 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00014FF2 0400 0020                  		subi.b	#$20,d0
00014FF6 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00014FFA 0200 00C0                  		andi.b	#$C0,d0
00014FFE 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00015002 0C00 0040                  		cmpi.b	#$40,d0
00015006 6700 0000                  		beq.w	loc_13680
0001500A 0C00 0080                  		cmpi.b	#$80,d0
0001500E 6700 0000                  		beq.w	loc_136E2
00015012 0C00 00C0                  		cmpi.b	#-$40,d0
00015016 6700 0000                  		beq.w	loc_1373E
0001501A 6100 0000                  		bsr.w	Sonic_HitWall
0001501E 4A41                       		tst.w	d1
00015020 6A00                       		bpl.s	loc_135F0
00015022 9368 0008                  		sub.w	d1,8(a0)
00015026 317C 0000 0010             		move.w	#0,$10(a0)
0001502C                            
0001502C                            loc_135F0:
0001502C 6100 0000                  		bsr.w	sub_14EB4
00015030 4A41                       		tst.w	d1
00015032 6A00                       		bpl.s	loc_13602
00015034 D368 0008                  		add.w	d1,8(a0)
00015038 317C 0000 0010             		move.w	#0,$10(a0)
0001503E                            
0001503E                            loc_13602:
0001503E 6100 0000                  		bsr.w	Sonic_HitFloor
00015042 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00015046 4A41                       		tst.w	d1
00015048 6A00                       		bpl.s	locret_1367E
0001504A 1428 0012                  		move.b	$12(a0),d2
0001504E 5002                       		addq.b	#8,d2
00015050 4402                       		neg.b	d2
00015052 B202                       		cmp.b	d2,d1
00015054 6C00                       		bge.s	loc_1361E
00015056 B002                       		cmp.b	d2,d0
00015058 6D00                       		blt.s	locret_1367E
0001505A                            
0001505A                            loc_1361E:
0001505A D368 000C                  		add.w	d1,$C(a0)
0001505E 1143 0026                  		move.b	d3,$26(a0)
00015062 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015066 117C 0000 001C             		move.b	#0,$1C(a0)
0001506C 1003                       		move.b	d3,d0
0001506E 0600 0020                  		addi.b	#$20,d0
00015072 0200 0040                  		andi.b	#$40,d0
00015076 6600                       		bne.s	loc_1365C
00015078 1003                       		move.b	d3,d0
0001507A 0600 0010                  		addi.b	#$10,d0
0001507E 0200 0020                  		andi.b	#$20,d0
00015082 6700                       		beq.s	loc_1364E
00015084 E0E8 0012                  		asr	$12(a0)
00015088 6000                       		bra.s	loc_13670
0001508A                            ; ===========================================================================
0001508A                            
0001508A                            loc_1364E:
0001508A 317C 0000 0012             		move.w	#0,$12(a0)
00015090 3168 0010 0020             		move.w	$10(a0),$20(a0)
00015096 4E75                       		rts	
00015098                            ; ===========================================================================
00015098                            
00015098                            loc_1365C:
00015098 317C 0000 0010             		move.w	#0,$10(a0)
0001509E 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
000150A4 6F00                       		ble.s	loc_13670
000150A6 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
000150AC                            
000150AC                            loc_13670:
000150AC 3168 0012 0020             		move.w	$12(a0),$20(a0)
000150B2 4A03                       		tst.b	d3
000150B4 6A00                       		bpl.s	locret_1367E
000150B6 4468 0020                  		neg.w	$20(a0)
000150BA                            
000150BA                            locret_1367E:
000150BA 4E75                       		rts	
000150BC                            ; ===========================================================================
000150BC                            
000150BC                            loc_13680:
000150BC 6100 0000                  		bsr.w	Sonic_HitWall
000150C0 4A41                       		tst.w	d1
000150C2 6A00                       		bpl.s	loc_1369A
000150C4 9368 0008                  		sub.w	d1,8(a0)
000150C8 317C 0000 0010             		move.w	#0,$10(a0)
000150CE 3168 0012 0020             		move.w	$12(a0),$20(a0)
000150D4 4E75                       		rts	
000150D6                            ; ===========================================================================
000150D6                            
000150D6                            loc_1369A:
000150D6 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000150DA 4A41                       		tst.w	d1
000150DC 6A00                       		bpl.s	loc_136B4
000150DE 9368 000C                  		sub.w	d1,$C(a0)
000150E2 4A68 0012                  		tst.w	$12(a0)
000150E6 6A00                       		bpl.s	locret_136B2
000150E8 317C 0000 0012             		move.w	#0,$12(a0)
000150EE                            
000150EE                            locret_136B2:
000150EE 4E75                       		rts	
000150F0                            ; ===========================================================================
000150F0                            
000150F0                            loc_136B4:
000150F0 4A68 0012                  		tst.w	$12(a0)
000150F4 6B00                       		bmi.s	locret_136E0
000150F6 6100 0000                  		bsr.w	Sonic_HitFloor
000150FA 4A41                       		tst.w	d1
000150FC 6A00                       		bpl.s	locret_136E0
000150FE D368 000C                  		add.w	d1,$C(a0)
00015102 1143 0026                  		move.b	d3,$26(a0)
00015106 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001510A 117C 0000 001C             		move.b	#0,$1C(a0)
00015110 317C 0000 0012             		move.w	#0,$12(a0)
00015116 3168 0010 0020             		move.w	$10(a0),$20(a0)
0001511C                            
0001511C                            locret_136E0:
0001511C 4E75                       		rts	
0001511E                            ; ===========================================================================
0001511E                            
0001511E                            loc_136E2:
0001511E 6100 0000                  		bsr.w	Sonic_HitWall
00015122 4A41                       		tst.w	d1
00015124 6A00                       		bpl.s	loc_136F4
00015126 9368 0008                  		sub.w	d1,8(a0)
0001512A 317C 0000 0010             		move.w	#0,$10(a0)
00015130                            
00015130                            loc_136F4:
00015130 6100 0000                  		bsr.w	sub_14EB4
00015134 4A41                       		tst.w	d1
00015136 6A00                       		bpl.s	loc_13706
00015138 D368 0008                  		add.w	d1,8(a0)
0001513C 317C 0000 0010             		move.w	#0,$10(a0)
00015142                            
00015142                            loc_13706:
00015142 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015146 4A41                       		tst.w	d1
00015148 6A00                       		bpl.s	locret_1373C
0001514A 9368 000C                  		sub.w	d1,$C(a0)
0001514E 1003                       		move.b	d3,d0
00015150 0600 0020                  		addi.b	#$20,d0
00015154 0200 0040                  		andi.b	#$40,d0
00015158 6600                       		bne.s	loc_13726
0001515A 317C 0000 0012             		move.w	#0,$12(a0)
00015160 4E75                       		rts	
00015162                            ; ===========================================================================
00015162                            
00015162                            loc_13726:
00015162 1143 0026                  		move.b	d3,$26(a0)
00015166 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001516A 3168 0012 0020             		move.w	$12(a0),$20(a0)
00015170 4A03                       		tst.b	d3
00015172 6A00                       		bpl.s	locret_1373C
00015174 4468 0020                  		neg.w	$20(a0)
00015178                            
00015178                            locret_1373C:
00015178 4E75                       		rts	
0001517A                            ; ===========================================================================
0001517A                            
0001517A                            loc_1373E:
0001517A 6100 0000                  		bsr.w	sub_14EB4
0001517E 4A41                       		tst.w	d1
00015180 6A00                       		bpl.s	loc_13758
00015182 D368 0008                  		add.w	d1,8(a0)
00015186 317C 0000 0010             		move.w	#0,$10(a0)
0001518C 3168 0012 0020             		move.w	$12(a0),$20(a0)
00015192 4E75                       		rts	
00015194                            ; ===========================================================================
00015194                            
00015194                            loc_13758:
00015194 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015198 4A41                       		tst.w	d1
0001519A 6A00                       		bpl.s	loc_13772
0001519C 9368 000C                  		sub.w	d1,$C(a0)
000151A0 4A68 0012                  		tst.w	$12(a0)
000151A4 6A00                       		bpl.s	locret_13770
000151A6 317C 0000 0012             		move.w	#0,$12(a0)
000151AC                            
000151AC                            locret_13770:
000151AC 4E75                       		rts	
000151AE                            ; ===========================================================================
000151AE                            
000151AE                            loc_13772:
000151AE 4A68 0012                  		tst.w	$12(a0)
000151B2 6B00                       		bmi.s	locret_1379E
000151B4 6100 0000                  		bsr.w	Sonic_HitFloor
000151B8 4A41                       		tst.w	d1
000151BA 6A00                       		bpl.s	locret_1379E
000151BC D368 000C                  		add.w	d1,$C(a0)
000151C0 1143 0026                  		move.b	d3,$26(a0)
000151C4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000151C8 117C 0000 001C             		move.b	#0,$1C(a0)
000151CE 317C 0000 0012             		move.w	#0,$12(a0)
000151D4 3168 0010 0020             		move.w	$10(a0),$20(a0)
000151DA                            
000151DA                            locret_1379E:
000151DA 4E75                       		rts	
000151DC                            ; End of function Sonic_Floor
000151DC                            
000151DC                            ; ---------------------------------------------------------------------------
000151DC                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000151DC                            ; ---------------------------------------------------------------------------
000151DC                            
000151DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151DC                            
000151DC                            
000151DC                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
000151DC 0828 0004 0022             		btst	#4,$22(a0)
000151E2 6700                       		beq.s	loc_137AE
000151E4 4E71                       		nop	
000151E6 4E71                       		nop	
000151E8 4E71                       		nop	
000151EA                            
000151EA                            loc_137AE:
000151EA 08A8 0005 0022             		bclr	#5,$22(a0)
000151F0 08A8 0001 0022             		bclr	#1,$22(a0)
000151F6 08A8 0004 0022             		bclr	#4,$22(a0)
000151FC 0828 0002 0022             		btst	#2,$22(a0)
00015202 6700                       		beq.s	loc_137E4
00015204 08A8 0002 0022             		bclr	#2,$22(a0)
0001520A 117C 0013 0016             		move.b	#$13,$16(a0)
00015210 117C 0009 0017             		move.b	#9,$17(a0)
00015216 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
0001521C 5B68 000C                  		subq.w	#5,$C(a0)
00015220                            
00015220                            loc_137E4:
00015220 117C 0000 003C             		move.b	#0,$3C(a0)
00015226 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
0001522C 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
00015230                            
00015230                            	@NoReset:
00015230 4E75                       		rts	
00015232                            ; End of function Sonic_ResetOnFloor
00015232                            
00015232                            ; ===========================================================================
00015232                            ; ---------------------------------------------------------------------------
00015232                            ; Sonic	when he	gets hurt
00015232                            ; ---------------------------------------------------------------------------
00015232                            
00015232                            Obj01_Hurt:				; XREF: Obj01_Index
00015232 4EBA 96E2                  		jsr	SpeedToPos
00015236 0668 0030 0012             		addi.w	#$30,$12(a0)
0001523C 0828 0006 0022             		btst	#6,$22(a0)
00015242 6700                       		beq.s	loc_1380C
00015244 0468 0020 0012             		subi.w	#$20,$12(a0)
0001524A                            
0001524A                            loc_1380C:
0001524A 6100 0000                  		bsr.w	Sonic_HurtStop
0001524E 6100 FACE                  		bsr.w	Sonic_LevelBound
00015252 6100 F4BE                  		bsr.w	Sonic_RecordPos
00015256 6100 0000                  		bsr.w	Sonic_Animate
0001525A 6100 0000                  		bsr.w	LoadSonicDynPLC
0001525E 4EFA 96D0                  		jmp	DisplaySprite
00015262                            
00015262                            ; ---------------------------------------------------------------------------
00015262                            ; Subroutine to	stop Sonic falling after he's been hurt
00015262                            ; ---------------------------------------------------------------------------
00015262                            
00015262                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015262                            
00015262                            
00015262                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00015262 3038 F72E                  		move.w	($FFFFF72E).w,d0
00015266 0640 00E0                  		addi.w	#$E0,d0
0001526A B068 000C                  		cmp.w	$C(a0),d0
0001526E 6500 FB2A                  		bcs.w	JMPKillSonic
00015272 6100 FD6C                  		bsr.w	Sonic_Floor
00015276 0828 0001 0022             		btst	#1,$22(a0)
0001527C 6600                       		bne.s	locret_13860
0001527E 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00015284 7000                       		moveq	#0,d0
00015286 3140 0012                  		move.w	d0,$12(a0)
0001528A 3140 0010                  		move.w	d0,$10(a0)
0001528E 3140 0020                  		move.w	d0,$20(a0)
00015292 117C 0000 001C             		move.b	#0,$1C(a0)
00015298 5528 0024                  		subq.b	#2,$24(a0)
0001529C 317C 0078 0030             		move.w	#$78,$30(a0)
000152A2                            
000152A2                            locret_13860:
000152A2 4E75                       		rts	
000152A4                            ; End of function Sonic_HurtStop
000152A4                            
000152A4                            ; ===========================================================================
000152A4                            ; ---------------------------------------------------------------------------
000152A4                            ; Sonic	when he	dies
000152A4                            ; ---------------------------------------------------------------------------
000152A4                            
000152A4                            Obj01_Death:				; XREF: Obj01_Index
000152A4 6100 0000                  		bsr.w	GameOver
000152A8 4EBA 964C                  		jsr	ObjectFall
000152AC 6100 F464                  		bsr.w	Sonic_RecordPos
000152B0 6100 0000                  		bsr.w	Sonic_Animate
000152B4 6100 0000                  		bsr.w	LoadSonicDynPLC
000152B8 4EFA 9676                  		jmp	DisplaySprite
000152BC                            
000152BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152BC                            
000152BC                            
000152BC                            GameOver:				; XREF: Obj01_Death
000152BC 3038 F72E                  		move.w	($FFFFF72E).w,d0
000152C0 0640 0100                  		addi.w	#$100,d0
000152C4 B068 000C                  		cmp.w	$C(a0),d0
000152C8 6400 0000                  		bcc.w	locret_13900
000152CC 317C FFC8 0012             		move.w	#-$38,$12(a0)
000152D2 5428 0024                  		addq.b	#2,$24(a0)
000152D6 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000152DA 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
000152DE 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
000152E2 6600                       		bne.s	loc_138D4
000152E4 317C 0000 003A             		move.w	#0,$3A(a0)
000152EA 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
000152F0 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000152F6 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
000152FC 4238 FE1A                  		clr.b	($FFFFFE1A).w
00015300                            
00015300                            loc_138C2:
00015300 303C 008F                  		move.w	#$8F,d0
00015304 4EB9 0000 121A             		jsr	(PlaySound).l	; play game over music
0001530A 7003                       		moveq	#3,d0
0001530C 4EF9 0000 145E             		jmp	(LoadPLC).l	; load game over patterns
00015312                            ; ===========================================================================
00015312                            
00015312                            loc_138D4:
00015312 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00015318 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
0001531C 6700                       		beq.s	locret_13900	; if not, branch
0001531E 317C 0000 003A             		move.w	#0,$3A(a0)
00015324 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
0001532A 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00015330 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00015336 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0001533C 60C2                       		bra.s	loc_138C2
0001533E                            ; ===========================================================================
0001533E                            
0001533E                            locret_13900:
0001533E 4E75                       		rts	
00015340                            ; End of function GameOver
00015340                            
00015340                            ; ===========================================================================
00015340                            ; ---------------------------------------------------------------------------
00015340                            ; Sonic	when the level is restarted
00015340                            ; ---------------------------------------------------------------------------
00015340                            
00015340                            Obj01_ResetLevel:			; XREF: Obj01_Index
00015340 4A68 003A                  		tst.w	$3A(a0)
00015344 6700                       		beq.s	locret_13914
00015346 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0001534A 6600                       		bne.s	locret_13914
0001534C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00015352 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00015358                            
00015358                            locret_13914:
00015358 4E75                       		rts	
0001535A                            
0001535A                            ; ---------------------------------------------------------------------------
0001535A                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001535A                            ; ---------------------------------------------------------------------------
0001535A                            
0001535A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001535A                            
0001535A                            
0001535A                            Sonic_Loops:				; XREF: Obj01_Control
0001535A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00015360 6700                       		beq.s	loc_13926	; if yes, branch
00015362 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00015366 6600 0000                  		bne.w	locret_139C2	; if not, branch
0001536A                            
0001536A                            loc_13926:
0001536A 3028 000C                  		move.w	$C(a0),d0
0001536E E248                       		lsr.w	#1,d0
00015370 0240 0380                  		andi.w	#$380,d0
00015374 1228 0008                  		move.b	8(a0),d1
00015378 0241 007F                  		andi.w	#$7F,d1
0001537C D041                       		add.w	d1,d0
0001537E 43F8 A400                  		lea	($FFFFA400).w,a1
00015382 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00015386 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
0001538A 6700 FA48                  		beq.w	Obj01_ChkRoll
0001538E B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00015392 6700 FA40                  		beq.w	Obj01_ChkRoll
00015396 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
0001539A 6700                       		beq.s	loc_13976
0001539C B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
000153A0 6700                       		beq.s	loc_13966
000153A2 08A8 0006 0001             		bclr	#6,1(a0)
000153A8 4E75                       		rts	
000153AA                            ; ===========================================================================
000153AA                            
000153AA                            loc_13966:
000153AA 0828 0001 0022             		btst	#1,$22(a0)
000153B0 6700                       		beq.s	loc_13976
000153B2 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000153B8 4E75                       		rts	
000153BA                            ; ===========================================================================
000153BA                            
000153BA                            loc_13976:
000153BA 3428 0008                  		move.w	8(a0),d2
000153BE 0C02 002C                  		cmpi.b	#$2C,d2
000153C2 6400                       		bcc.s	loc_13988
000153C4 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000153CA 4E75                       		rts	
000153CC                            ; ===========================================================================
000153CC                            
000153CC                            loc_13988:
000153CC 0C02 00E0                  		cmpi.b	#-$20,d2
000153D0 6500                       		bcs.s	loc_13996
000153D2 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000153D8 4E75                       		rts	
000153DA                            ; ===========================================================================
000153DA                            
000153DA                            loc_13996:
000153DA 0828 0006 0001             		btst	#6,1(a0)
000153E0 6600                       		bne.s	loc_139B2
000153E2 1228 0026                  		move.b	$26(a0),d1
000153E6 6700                       		beq.s	locret_139C2
000153E8 0C01 0080                  		cmpi.b	#-$80,d1
000153EC 6200                       		bhi.s	locret_139C2
000153EE 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000153F4 4E75                       		rts	
000153F6                            ; ===========================================================================
000153F6                            
000153F6                            loc_139B2:
000153F6 1228 0026                  		move.b	$26(a0),d1
000153FA 0C01 0080                  		cmpi.b	#-$80,d1
000153FE 6300                       		bls.s	locret_139C2
00015400 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00015406                            
00015406                            locret_139C2:
00015406 4E75                       		rts	
00015408                            ; End of function Sonic_Loops
00015408                            
00015408                            ; ---------------------------------------------------------------------------
00015408                            ; Sonic when he's drowning
00015408                            ; ---------------------------------------------------------------------------
00015408                             
00015408                            ; ||||||||||||||| S	U B	R O	U T	I N	E |||||||||||||||||||||||||||||||||||||||
00015408                             
00015408                             
00015408                            Sonic_Drowned:
00015408 6100 950C                  		bsr.w   SpeedToPos		; Make Sonic able to move
0001540C 0668 0010 0012             		addi.w  #$10,$12(a0)	; Apply gravity
00015412 6100 F2FE                  		bsr.w   Sonic_RecordPos	; Record position
00015416 6100                       		bsr.s   Sonic_Animate	; Animate Sonic
00015418 6100 0000                  		bsr.w   LoadSonicDynPLC	; Load Sonic's DPLCs
0001541C 6000 9512                  		bra.w   DisplaySprite	; And finally, display Sonic
00015420                            
00015420                            ; ---------------------------------------------------------------------------
00015420                            ; Subroutine to	animate	Sonic's sprites
00015420                            ; ---------------------------------------------------------------------------
00015420                            
00015420                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015420                            
00015420                            
00015420                            Sonic_Animate:				; XREF: Obj01_Control; et al
00015420 43F9 0000 0000             		lea	(SonicAniData).l,a1
00015426 7000                       		moveq	#0,d0
00015428 1028 001C                  		move.b	$1C(a0),d0
0001542C B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00015430 6700                       		beq.s	SAnim_Do	; if not, branch
00015432 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00015436 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0001543C 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00015442                            
00015442                            SAnim_Do:
00015442 D040                       		add.w	d0,d0
00015444 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00015448 1011                       		move.b	(a1),d0
0001544A 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
0001544C 1228 0022                  		move.b	$22(a0),d1
00015450 0201 0001                  		andi.b	#1,d1
00015454 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001545A 8328 0001                  		or.b	d1,1(a0)
0001545E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00015462 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00015464 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00015468                            
00015468                            SAnim_Do2:
00015468 7200                       		moveq	#0,d1
0001546A 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0001546E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00015472 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00015474                            
00015474                            SAnim_Next:
00015474 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00015478 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0001547C                            
0001547C                            SAnim_Delay:
0001547C 4E75                       		rts	
0001547E                            ; ===========================================================================
0001547E                            
0001547E                            SAnim_End_FF:
0001547E 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00015480 6600                       		bne.s	SAnim_End_FE	; if not, branch
00015482 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00015488 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001548C 60E6                       		bra.s	SAnim_Next
0001548E                            ; ===========================================================================
0001548E                            
0001548E                            SAnim_End_FE:
0001548E 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00015490 6600                       		bne.s	SAnim_End_FD	; if not, branch
00015492 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00015496 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0001549A 9200                       		sub.b	d0,d1
0001549C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000154A0 60D2                       		bra.s	SAnim_Next
000154A2                            ; ===========================================================================
000154A2                            
000154A2                            SAnim_End_FD:
000154A2 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000154A4 6600                       		bne.s	SAnim_End	; if not, branch
000154A6 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000154AC                            
000154AC                            SAnim_End:
000154AC 4E75                       		rts	
000154AE                            ; ===========================================================================
000154AE                            
000154AE                            SAnim_WalkRun:				; XREF: SAnim_Do
000154AE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000154B2 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
000154B4 5200                       		addq.b	#1,d0		; is animation walking/running?
000154B6 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
000154BA 7200                       		moveq	#0,d1
000154BC 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
000154C0 1428 0022                  		move.b	$22(a0),d2
000154C4 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
000154C8 6600                       		bne.s	loc_13A70	; if yes, branch
000154CA 4600                       		not.b	d0		; reverse angle
000154CC                            
000154CC                            loc_13A70:
000154CC 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
000154D0 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
000154D2 7203                       		moveq	#3,d1
000154D4                            
000154D4                            loc_13A78:
000154D4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000154DA B302                       		eor.b	d1,d2
000154DC 8528 0001                  		or.b	d2,1(a0)
000154E0 0828 0005 0022             		btst	#5,$22(a0)
000154E6 6600 0000                  		bne.w	SAnim_Push
000154EA E808                       		lsr.b	#4,d0		; divide angle by $10
000154EC 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000154F0 3428 0020                  		move.w	$20(a0),d2	; get Sonic's speed
000154F4 6A00                       		bpl.s	loc_13A9C
000154F6 4442                       		neg.w	d2
000154F8                            
000154F8                            loc_13A9C:
000154F8 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000154FE 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00015502 6400                       		bcc.s	loc_13AB4	; if yes, branch
00015504 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
0001550A 1200                       		move.b	d0,d1
0001550C E209                       		lsr.b	#1,d1
0001550E D001                       		add.b	d1,d0
00015510                            
00015510                            loc_13AB4:
00015510 D000                       		add.b	d0,d0
00015512 1600                       		move.b	d0,d3
00015514 4442                       		neg.w	d2
00015516 0642 0800                  		addi.w	#$800,d2
0001551A 6A00                       		bpl.s	loc_13AC2
0001551C 7400                       		moveq	#0,d2
0001551E                            
0001551E                            loc_13AC2:
0001551E E04A                       		lsr.w	#8,d2
00015520 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00015524 6100 FF42                  		bsr.w	SAnim_Do2
00015528 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
0001552C 4E75                       		rts	
0001552E                            ; ===========================================================================
0001552E                            
0001552E                            SAnim_RollJump:				; XREF: SAnim_WalkRun
0001552E 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00015530 6600                       		bne.s	SAnim_Push	; if not, branch
00015532 3428 0020                  		move.w	$20(a0),d2	; get Sonic's speed
00015536 6A00                       		bpl.s	loc_13ADE
00015538 4442                       		neg.w	d2
0001553A                            
0001553A                            loc_13ADE:
0001553A 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00015540 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00015544 6400                       		bcc.s	loc_13AF0	; if yes, branch
00015546 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
0001554C                            
0001554C                            loc_13AF0:
0001554C 4442                       		neg.w	d2
0001554E 0642 0400                  		addi.w	#$400,d2
00015552 6A00                       		bpl.s	loc_13AFA
00015554 7400                       		moveq	#0,d2
00015556                            
00015556                            loc_13AFA:
00015556 E04A                       		lsr.w	#8,d2
00015558 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001555C 1228 0022                  		move.b	$22(a0),d1
00015560 0201 0001                  		andi.b	#1,d1
00015564 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001556A 8328 0001                  		or.b	d1,1(a0)
0001556E 6000 FEF8                  		bra.w	SAnim_Do2
00015572                            ; ===========================================================================
00015572                            
00015572                            SAnim_Push:				; XREF: SAnim_RollJump
00015572 3428 0020                  		move.w	$20(a0),d2	; get Sonic's speed
00015576 6B00                       		bmi.s	loc_13B1E
00015578 4442                       		neg.w	d2
0001557A                            
0001557A                            loc_13B1E:
0001557A 0642 0800                  		addi.w	#$800,d2
0001557E 6A00                       		bpl.s	loc_13B26
00015580 7400                       		moveq	#0,d2
00015582                            
00015582                            loc_13B26:
00015582 EC4A                       		lsr.w	#6,d2
00015584 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00015588 43F9 0000 0000             		lea	(SonAni_Push).l,a1
0001558E 1228 0022                  		move.b	$22(a0),d1
00015592 0201 0001                  		andi.b	#1,d1
00015596 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001559C 8328 0001                  		or.b	d1,1(a0)
000155A0 6000 FEC6                  		bra.w	SAnim_Do2
000155A4                            ; End of function Sonic_Animate
000155A4                            
000155A4                            ; ===========================================================================
000155A4                            SonicAniData:
000155A4                            	include "_anim\Sonic.asm"
000155A4                            ; ---------------------------------------------------------------------------
000155A4                            ; Animation script - Sonic
000155A4                            ; ---------------------------------------------------------------------------
000155A4 0000                       		dc.w SonAni_Walk-SonicAniData
000155A6 0000                       		dc.w SonAni_Run-SonicAniData
000155A8 0000                       		dc.w SonAni_Roll-SonicAniData
000155AA 0000                       		dc.w SonAni_Roll2-SonicAniData
000155AC 0000                       		dc.w SonAni_Push-SonicAniData
000155AE 0000                       		dc.w SonAni_Wait-SonicAniData
000155B0 0000                       		dc.w SonAni_Balance-SonicAniData
000155B2 0000                       		dc.w SonAni_LookUp-SonicAniData
000155B4 0000                       		dc.w SonAni_Duck-SonicAniData
000155B6 0000                       		dc.w SonAni_Warp1-SonicAniData
000155B8 0000                       		dc.w SonAni_Warp2-SonicAniData
000155BA 0000                       		dc.w SonAni_Warp3-SonicAniData
000155BC 0000                       		dc.w SonAni_Warp4-SonicAniData
000155BE 0000                       		dc.w SonAni_Stop-SonicAniData
000155C0 0000                       		dc.w SonAni_Float1-SonicAniData
000155C2 0000                       		dc.w SonAni_Float2-SonicAniData
000155C4 0000                       		dc.w SonAni_Spring-SonicAniData
000155C6 0000                       		dc.w SonAni_LZHang-SonicAniData
000155C8 0000                       		dc.w SonAni_Leap1-SonicAniData
000155CA 0000                       		dc.w SonAni_Leap2-SonicAniData
000155CC 0000                       		dc.w SonAni_Surf-SonicAniData
000155CE 0000                       		dc.w SonAni_Bubble-SonicAniData
000155D0 0000                       		dc.w SonAni_Death1-SonicAniData
000155D2 0000                       		dc.w SonAni_Drown-SonicAniData
000155D4 0000                       		dc.w SonAni_Death2-SonicAniData
000155D6 0000                       		dc.w SonAni_Shrink-SonicAniData
000155D8 0000                       		dc.w SonAni_Hurt-SonicAniData
000155DA 0000                       		dc.w SonAni_LZSlide-SonicAniData
000155DC 0000                       		dc.w SonAni_Blank-SonicAniData
000155DE 0000                       		dc.w SonAni_Float3-SonicAniData
000155E0 0000                       		dc.w SonAni_Float4-SonicAniData
000155E2 FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
000155EA FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
000155F2 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
000155FA FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00015602 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
0001560A 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00015620 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
00015624 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00015628 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
0001562C 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00015630 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00015634 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00015638 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
0001563C 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00015640 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00015644 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
0001564C 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00015650 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00015654 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
0001565A 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00015660 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00015664 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
0001566C 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00015670 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00015674 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00015678 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00015682 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
00015686 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
0001568A 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
0001568E 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00015696 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
0001569A                            		even
0001569A                            		even
0001569A                            
0001569A                            ; ---------------------------------------------------------------------------
0001569A                            ; Sonic	pattern	loading	subroutine
0001569A                            ; ---------------------------------------------------------------------------
0001569A                            
0001569A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001569A                            
0001569A                            
0001569A                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
0001569A 7000                       		moveq	#0,d0
0001569C 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000156A0 B038 F766                  		cmp.b	($FFFFF766).w,d0
000156A4 6700 0000                  		beq.w	locret_13C96
000156A8 11C0 F766                  		move.b	d0,($FFFFF766).w
000156AC 45F9 0000 0000             		lea	(SonicDynPLC).l,a2	
000156B2 D040                       		add.w	d0,d0
000156B4 D4F2 0000                  		adda.w	(a2,d0.w),a2
000156B8 7A00                       		moveq	#0,d5
000156BA 1A1A                       		move.b	(a2)+,d5
000156BC 5345                       		subq.w	#1,d5
000156BE 6B00                       		bmi.s	locret_13C96
000156C0 383C F000                  		move.w	#$F000,d4
000156C4 2C3C 0000 0000             		move.l	#Art_Sonic,d6
000156CA                            
000156CA                            SPLC_ReadEntry:
000156CA 7200                       		moveq	#0,d1
000156CC 121A                       		move.b	(a2)+,d1
000156CE E149                       		lsl.w	#8,d1
000156D0 121A                       		move.b	(a2)+,d1
000156D2 3601                       		move.w	d1,d3
000156D4 E04B                       		lsr.w	#8,d3
000156D6 0243 00F0                  		andi.w	#$F0,d3
000156DA 0643 0010                  		addi.w	#$10,d3
000156DE 0241 0FFF                  		andi.w	#$FFF,d1
000156E2 EB89                       		lsl.l	#5,d1
000156E4 D286                       		add.l	d6,d1
000156E6 3404                       		move.w	d4,d2
000156E8 D843                       		add.w	d3,d4
000156EA D843                       		add.w	d3,d4
000156EC 4EB9 0000 4A78             		jsr	(QueueDMATransfer).l
000156F2 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
000156F6                             
000156F6                            locret_13C96:
000156F6 4E75                       		rts	
000156F8                            ; End of function LoadSonicDynPLC
000156F8                            
000156F8                            ; ===========================================================================
000156F8                            ; ---------------------------------------------------------------------------
000156F8                            ; Object 02 - Sonime
000156F8                            ; ---------------------------------------------------------------------------
000156F8                            
000156F8                            Obj02:
000156F8 7000                       		moveq	#0,d0
000156FA 41F8 F5C0                  		lea	(SonimeSST).w,a0
000156FE 1028 0004                  		move.b	sonime_routine(a0),d0
00015702 323B 0000                  		move.w	Obj02_Index(pc,d0.w),d1
00015706 4EFB 1000                  		jmp	Obj02_Index(pc,d1.w)
0001570A                            ; ===========================================================================
0001570A 0000                       Obj02_Index:	dc.w Obj02_Init-Obj02_Index
0001570C 0000                       		dc.w Obj02_MoveIn-Obj02_Index
0001570E 0000                       		dc.w Obj02_Animate-Obj02_Index
00015710                            ; ===========================================================================
00015710                            
00015710                            Obj02_Init:				; XREF: Obj0A_Index
00015710 5428 0004                  		addq.b	#2,sonime_routine(a0)
00015714 223C 0000 0000             		move.l #Art_Sonime_Torso,d1
0001571A 343C F400                  		move.w #(torsoart*$20),d2
0001571E 363C 00C0                  		move.w #$C0,d3
00015722 4EB9 0000 4A78             		jsr (QueueDMATransfer).l
00015728 223C 0000 0000             		move.l #Art_Sonime_Head,d1
0001572E 343C F580                  		move.w #(headart*$20),d2
00015732 363C 0140                  		move.w #$140,d3
00015736 4EB9 0000 4A78             		jsr (QueueDMATransfer).l
0001573C 223C 0000 0000             		move.l #Art_Sonime_Hair,d1
00015742 343C F300                  		move.w #(hairart*$20),d2
00015746 363C 0080                  		move.w #$80,d3
0001574A 4EB9 0000 4A78             		jsr (QueueDMATransfer).l
00015750 117C 0030 0017             		move.b	#$30,sonime_movein(a0)
00015756 31FC 0200 F5E0             		move.w	#$200,(SonimeSST+sonime_pausetimer).w
0001575C                            
0001575C                            Obj02_MoveIn:
0001575C 5528 0017                  		subq.b	#2,sonime_movein(a0)
00015760 1028 0017                  		move.b	sonime_movein(a0),d0
00015764 1140 0002                  		move.b	d0,sonime_headx(a0)
00015768 1140 0016                  		move.b	d0,sonime_torsox(a0)
0001576C 1140 0009                  		move.b	d0,sonime_hairx(a0)
00015770 4A00                       		tst.b	d0
00015772 6600 0000                  		bne.w	Obj02_Display
00015776 5428 0004                  		addq.b	#2,sonime_routine(a0)
0001577A                            
0001577A                            Obj02_Animate:
0001577A 5350                       		subi.w	#1,sonime_headtimer(a0)
0001577C 6A00 0000                  		bpl.w	Obj02_Face
00015780 4EB8 29D0                  		jsr	RandomNumber
00015784 0240 003F                  		andi.w	#$3F,d0
00015788 0640 0080                  		addi.w	#$80,d0
0001578C 3080                       		move.w	d0,sonime_headtimer(a0)
0001578E 4EB8 29D0                  		jsr	RandomNumber
00015792 0240 0006                  		andi.w	#6,d0
00015796 303B 0000                  		move.w	Obj02_HeadIndex(pc,d0.w),d0
0001579A 4EFB 0000                  		jmp	Obj02_HeadIndex(pc,d0.w)
0001579E                            
0001579E                            ; ===========================================================================
0001579E 0000                       Obj02_HeadIndex:	dc.w Obj02_Up-Obj02_HeadIndex
000157A0 0000                       		dc.w Obj02_Down-Obj02_HeadIndex
000157A2 0000                       		dc.w Obj02_Left-Obj02_HeadIndex
000157A4 0000                       		dc.w Obj02_Right-Obj02_HeadIndex
000157A6                            ; ===========================================================================
000157A6                            
000157A6                            Obj02_Up:
000157A6 4A28 0003                  		tst.b	sonime_heady(a0)
000157AA 6D00                       		blt.s	Obj02_Down
000157AC 5328 0003                  		subi.b	#1,sonime_heady(a0)
000157B0 6000                       		bra.s	Obj02_Face
000157B2                            
000157B2                            Obj02_Down:
000157B2 4A28 0003                  		tst.b	sonime_heady(a0)
000157B6 6EEE                       		bgt.s	Obj02_Up
000157B8 5228 0003                  		addi.b	#1,sonime_heady(a0)
000157BC 6000                       		bra.s	Obj02_Face
000157BE                            
000157BE                            Obj02_Left:
000157BE 4A28 0002                  		tst.b	sonime_headx(a0)
000157C2 6D00                       		blt.s	Obj02_Right
000157C4 5328 0002                  		subi.b	#1,sonime_headx(a0)
000157C8 6000                       		bra.s	Obj02_Face
000157CA                            
000157CA                            Obj02_Right:
000157CA 4A28 0002                  		tst.b	sonime_headx(a0)
000157CE 6EEE                       		bgt.s	Obj02_Left
000157D0 5228 0002                  		addi.b	#1,sonime_headx(a0)
000157D4                            
000157D4                            Obj02_Face:
000157D4 4A38 FE12                  		tst.b	($FFFFFE12).w
000157D8 6700 0000                  		beq.w	@NoWait
000157DC 0C28 0001 000E             		cmpi.b	#face_blink,sonime_face(a0)
000157E2 6700                       		beq.s	@UnBlink
000157E4 5368 0010                  		subi.w	#1,sonime_facetimer(a0)
000157E8 6A00 0000                  		bpl.w	@NoWait
000157EC 317C 0003 0010             		move.w	#3,sonime_facetimer(a0)
000157F2 117C 0001 000E             		move.b	#face_blink,sonime_face(a0)
000157F8 6000 0000                  		bra.w	@NoWait
000157FC                            
000157FC                            	@UnBlink:
000157FC 5368 0010                  		subi.w	#1,sonime_facetimer(a0)
00015800 6A00 0000                  		bpl.w	@NoWait
00015804 117C 0004 000E             		move.b	#face_neutralr,sonime_face(a0)
0001580A 4EB8 29D0                  		jsr	RandomNumber
0001580E 0240 003F                  		andi.w	#$3F,d0
00015812 0640 00B0                  		addi.w	#$B0,d0
00015816 3140 0010                  		move.w	d0,sonime_facetimer(a0)
0001581A 4EB8 29D0                  		jsr	RandomNumber
0001581E 0200 000F                  		andi.b	#$F,d0
00015822 4A00                       		tst.b	d0
00015824 6700                       		beq.s	@NoBlink
00015826 117C 0003 000E             		move.b	#face_neutralm,sonime_face(a0)
0001582C 0C00 0001                  		cmpi.b	#1,d0
00015830 6700                       		beq.s	@NoBlink
00015832 117C 0002 000E             		move.b	#face_neutrallm,sonime_face(a0)
00015838 0C00 0002                  		cmpi.b	#2,d0
0001583C 6700                       		beq.s	@NoBlink
0001583E 117C 0000 000E             		move.b	#face_neutrall,sonime_face(a0)
00015844                            
00015844                            	@NoBlink:
00015844 0C38 0005 D01C             		cmpi.b	#5,($FFFFD01C).w
0001584A 6600                       		bne.s	@NoWait
0001584C 0C38 000F D01B             		cmpi.b	#$F,($FFFFD01B).w
00015852 6500                       		bcs.s	@NoWait
00015854 117C 000B 000E             		move.b	#face_impatient,sonime_face(a0)
0001585A 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeImpatient		
000158B0                            
000158B0                            	@NoWait:
000158B0 0C78 0950 D010             		cmpi.w	#$950,($FFFFD010).w
000158B6 6D00                       		blt.s	@TooSlow
000158B8 117C 0007 000E             		move.b	#face_happy,sonime_face(a0)
000158BE 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeSpeed
00015914                            
00015914                            	@TooSlow:
00015914 0C78 F6B0 D010             		cmpi.w	#-$950,($FFFFD010).w
0001591A 6E00                       		bgt.s	@TooSlow2
0001591C 117C 0007 000E             		move.b	#face_happy,sonime_face(a0)	
00015922 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeSpeed
00015978                            		
00015978                            	@TooSlow2:
00015978 7800                       		moveq	#0,d4
0001597A 1828 000E                  		move.b	sonime_face(a0),d4
0001597E B828 000F                  		cmp.b	sonime_faceold(a0),d4
00015982 6700                       		beq.s	Obj02_Ear
00015984 1144 000F                  		move.b	d4,sonime_faceold(a0)
00015988 ED4C                       		lsl.w	#6,d4
0001598A 3A04                       		move.w	d4,d5
0001598C DA45                       		add.w	d5,d5
0001598E D845                       		add.w	d5,d4
00015990 223C 0000 0000             		move.l #Art_Sonime_Faces,d1
00015996 D244                       		add.w	d4,d1
00015998 343C F5C0                  		move.w #(headart*$20+$40),d2
0001599C 363C 0020                  		move.w #$20,d3
000159A0 4EB9 0000 4A78             		jsr (QueueDMATransfer).l
000159A6 223C 0000 0000             		move.l #(Art_Sonime_Faces+$40),d1
000159AC D244                       		add.w	d4,d1
000159AE 343C F640                  		move.w #(headart*$20+$C0),d2
000159B2 363C 0020                  		move.w #$20,d3
000159B6 4EB9 0000 4A78             		jsr (QueueDMATransfer).l
000159BC 223C 0000 0000             		move.l #(Art_Sonime_Faces+$80),d1
000159C2 D244                       		add.w	d4,d1
000159C4 343C F6C0                  		move.w #(headart*$20+$140),d2
000159C8 363C 0020                  		move.w #$20,d3
000159CC 4EB9 0000 4A78             		jsr (QueueDMATransfer).l
000159D2                            
000159D2                            Obj02_Ear:
000159D2 4A28 0012                  		tst.b	sonime_ear(a0)
000159D6 6600                       		bne.s	@UnTwitch
000159D8 5368 0014                  		subi.w	#1,sonime_eartimer(a0)
000159DC 6A00                       		bpl.s	@NoTwitch
000159DE 317C 000F 0014             		move.w	#$F,sonime_eartimer(a0)
000159E4 4EB8 29D0                  		jsr	RandomNumber
000159E8 0200 0001                  		andi.b	#1,d0
000159EC 5200                       		addq.b	#1,d0
000159EE 1140 0012                  		move.b	d0,sonime_ear(a0)
000159F2 6000                       		bra.s	@NoTwitch
000159F4                            
000159F4                            	@UnTwitch:
000159F4 5368 0014                  		subi.w	#1,sonime_eartimer(a0)
000159F8 6A00                       		bpl.s	@NoTwitch
000159FA 117C 0000 0012             		move.b	#0,sonime_ear(a0)
00015A00 4EB8 29D0                  		jsr	RandomNumber
00015A04 0240 007F                  		andi.w	#$7F,d0
00015A08 0640 0100                  		addi.w	#$100,d0
00015A0C 3140 0014                  		move.w	d0,sonime_eartimer(a0)
00015A10                            
00015A10                            	@NoTwitch:
00015A10 7800                       		moveq	#0,d4
00015A12 1828 0012                  		move.b	sonime_ear(a0),d4
00015A16 B828 0013                  		cmp.b	sonime_earold(a0),d4
00015A1A 6700                       		beq.s	Obj02_Display
00015A1C 1144 0013                  		move.b	d4,sonime_earold(a0)
00015A20 EB0C                       		lsl.b	#5,d4
00015A22 0204 0020                  		andi.b	#$20,d4
00015A26 223C 0000 0000             		move.l #Art_Sonime_LeftEar,d1
00015A2C D284                       		add.l	d4,d1
00015A2E 343C F580                  		move.w #(headart*$20),d2
00015A32 363C 0010                  		move.w #$10,d3
00015A36 4EB9 0000 4A78             		jsr (QueueDMATransfer).l
00015A3C 7800                       		moveq	#0,d4
00015A3E 1828 0012                  		move.b	sonime_ear(a0),d4
00015A42 EB0C                       		lsl.b	#5,d4
00015A44 0204 0040                  		andi.b	#$40,d4
00015A48 223C 0000 0000             		move.l #Art_Sonime_RightEar,d1
00015A4E D284                       		add.l	d4,d1
00015A50 343C F680                  		move.w #(headart*$20+$100),d2
00015A54 363C 0020                  		move.w #$20,d3
00015A58 4EB9 0000 4A78             		jsr (QueueDMATransfer).l
00015A5E                            
00015A5E                            Obj02_Display:
00015A5E 7200                       		moveq	#0,d1
00015A60 7400                       		moveq	#0,d2
00015A62 7600                       		moveq	#0,d3
00015A64 7800                       		moveq	#0,d4
00015A66 7A00                       		moveq	#0,d5
00015A68 1628 0002                  		move.b	sonime_headx(a0),d3	; set X pos
00015A6C 1428 0003                  		move.b	sonime_heady(a0),d2	; set Y pos
00015A70 4883                       		ext.w	d3
00015A72 4882                       		ext.w	d2
00015A74 0643 01A0                  		addi.w	#$1A0,d3
00015A78 0642 0140                  		addi.w	#$140,d2
00015A7C 43F9 0000 0000             		lea	(Map_sonime_head).l,a1
00015A82 367C 87AC                  		movea.w	#($8000+headart),a3	; set art tile and flags
00015A86 D241                       		add.w	d1,d1
00015A88 D2F1 1000                  		adda.w	(a1,d1.w),a1
00015A8C 1219                       		move.b	(a1)+,d1
00015A8E 5301                       		subq.b	#1,d1
00015A90 6B00                       		bmi.s	@nextspr
00015A92 6100 914C                  		bsr.w	DrawSprite_Loop
00015A96                            
00015A96                            	@nextspr:
00015A96 7200                       		moveq	#0,d1
00015A98 7600                       		moveq	#0,d3
00015A9A 1628 0016                  		move.b	sonime_torsox(a0),d3
00015A9E 0643 01A0                  		add.w	#$1A0,d3	; set X pos
00015AA2 343C 0154                  		move.w	#$154,d2	; set Y pos
00015AA6 43F9 0000 0000             		lea	(Map_sonime_torso).l,a1
00015AAC 367C 87A0                  		movea.w	#($8000+torsoart),a3	; set art tile and flags
00015AB0 D241                       		add.w	d1,d1
00015AB2 D2F1 1000                  		adda.w	(a1,d1.w),a1
00015AB6 1219                       		move.b	(a1)+,d1
00015AB8 5301                       		subq.b	#1,d1
00015ABA 6B00                       		bmi.s	@nextspr2
00015ABC 6100 9122                  		bsr.w	DrawSprite_Loop
00015AC0                            
00015AC0                            	@nextspr2:
00015AC0 7200                       		moveq	#0,d1
00015AC2 7400                       		moveq	#0,d2
00015AC4 7600                       		moveq	#0,d3
00015AC6 1628 0009                  		move.b	sonime_hairx(a0),d3	; set X pos
00015ACA 1428 000D                  		move.b	sonime_hairy(a0),d2	; set Y pos
00015ACE 4883                       		ext.w	d3
00015AD0 4882                       		ext.w	d2
00015AD2 0643 01A0                  		addi.w	#$1A0,d3
00015AD6 0642 0153                  		addi.w	#$153,d2
00015ADA 1168 0007 0009             		move.b	sonime_headx3(a0),sonime_hairx(a0)
00015AE0 1168 000B 000D             		move.b	sonime_heady3(a0),sonime_hairy(a0)
00015AE6 1168 0006 0007             		move.b	sonime_headx2(a0),sonime_headx3(a0)
00015AEC 1168 000A 000B             		move.b	sonime_heady2(a0),sonime_heady3(a0)
00015AF2 1168 0002 0006             		move.b	sonime_headx(a0),sonime_headx2(a0)
00015AF8 1168 0003 000A             		move.b	sonime_heady(a0),sonime_heady2(a0)
00015AFE 43F9 0000 0000             		lea	(Map_sonime_hair).l,a1
00015B04 367C 8798                  		movea.w	#($8000+hairart),a3	; set art tile and flags
00015B08 D241                       		add.w	d1,d1
00015B0A D2F1 1000                  		adda.w	(a1,d1.w),a1
00015B0E 1219                       		move.b	(a1)+,d1
00015B10 5301                       		subq.b	#1,d1
00015B12 6B00                       		bmi.s	Obj02_Done
00015B14 6100 90CA                  		bsr.w	DrawSprite_Loop
00015B18                            
00015B18                            Obj02_Done:		
00015B18 4E75                       		rts	
00015B1A                            
00015B1A                            ; ---------------------------------------------------------------------------
00015B1A                            ; Sprite mappings - sonime
00015B1A                            ; ---------------------------------------------------------------------------
00015B1A                            Map_sonime_torso:
00015B1A                            	include "_maps\sonime_torso.asm"
00015B1A                            ; ================================================================================
00015B1A                            ; Sprite Mappings - generated by Flex 2 Fri Dec 18 2020 22:06:55 GMT-0500 (Eastern Standard Time)
00015B1A                            ; ================================================================================
00015B1A                            
00015B1A                            DATAUI6DX8OCWY:
00015B1A 0000                       	dc.w DATAUI6DX8OCWY_0-DATAUI6DX8OCWY
00015B1C 01                         DATAUI6DX8OCWY_0: dc.b $1
00015B1D F40E 0000 F0               	dc.b $F4, $E, $0, $0, $F0
00015B22                            	even
00015B22                            	even
00015B22                            
00015B22                            Map_sonime_head:
00015B22                            	include "_maps\sonime_head.asm"
00015B22                            ; ================================================================================
00015B22                            ; Sprite Mappings - generated by Flex 2 Fri Dec 18 2020 22:05:21 GMT-0500 (Eastern Standard Time)
00015B22                            ; ================================================================================
00015B22                            
00015B22                            DATAYDZD849MEMA:
00015B22 0000                       	dc.w DATAYDZD849MEMA_0-DATAYDZD849MEMA
00015B24 03                         DATAYDZD849MEMA_0: dc.b $3
00015B25 E80F 0000 F0               	dc.b $E8, $F, $0, $0, $F0
00015B2A 0808 0010 F0               	dc.b $8, $8, $0, $10, $F0
00015B2F 1000 0013 00               	dc.b $10, $0, $0, $13, $0
00015B34                            	even
00015B34                            	even
00015B34                            
00015B34                            Map_sonime_hair:
00015B34                            	include "_maps\sonime_hair.asm"
00015B34                            ; ================================================================================
00015B34                            ; Sprite Mappings - generated by Flex 2 Sun Dec 20 2020 17:48:20 GMT-0500 (Eastern Standard Time)
00015B34                            ; ================================================================================
00015B34                            
00015B34                            DATAQZ9CZ11E8T:
00015B34 0000                       	dc.w DATAQZ9CZ11E8T_0-DATAQZ9CZ11E8T
00015B36 03                         DATAQZ9CZ11E8T_0: dc.b $3
00015B37 F40C 0000 F0               	dc.b $F4, $C, $0, $0, $F0
00015B3C FC01 0004 F0               	dc.b $FC, $1, $0, $4, $F0
00015B41 FC01 0006 08               	dc.b $FC, $1, $0, $6, $8
00015B46                            	even
00015B46                            	even
00015B46                            
00015B46                            ; ===========================================================================
00015B46                            ; ---------------------------------------------------------------------------
00015B46                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00015B46                            ; ---------------------------------------------------------------------------
00015B46                            
00015B46                            Obj0A:					; XREF: Obj_Index
00015B46 7000                       		moveq	#0,d0
00015B48 1028 0024                  		move.b	$24(a0),d0
00015B4C 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00015B50 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00015B54                            ; ===========================================================================
00015B54 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00015B58 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00015B5C 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00015B60 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00015B64 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00015B66                            ; ===========================================================================
00015B66                            
00015B66                            Obj0A_Main:				; XREF: Obj0A_Index
00015B66 5428 0024                  		addq.b	#2,$24(a0)
00015B6A 217C 0001 4380 0004        		move.l	#Map_obj64,4(a0)
00015B72 317C 8348 0002             		move.w	#$8348,2(a0)
00015B78 117C 0084 0001             		move.b	#$84,1(a0)
00015B7E 117C 0010 0019             		move.b	#$10,$19(a0)
00015B84 117C 0001 0018             		move.b	#1,$18(a0)
00015B8A 1028 0028                  		move.b	$28(a0),d0
00015B8E 6A00                       		bpl.s	loc_13D00
00015B90 5028 0024                  		addq.b	#8,$24(a0)
00015B94 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00015B9C 317C 0440 0002             		move.w	#$440,2(a0)
00015BA2 0240 007F                  		andi.w	#$7F,d0
00015BA6 1140 0033                  		move.b	d0,$33(a0)
00015BAA 6000 0000                  		bra.w	Obj0A_Countdown
00015BAE                            ; ===========================================================================
00015BAE                            
00015BAE                            loc_13D00:
00015BAE 1140 001C                  		move.b	d0,$1C(a0)
00015BB2 3168 0008 0030             		move.w	8(a0),$30(a0)
00015BB8 317C FF78 0012             		move.w	#-$88,$12(a0)
00015BBE                            
00015BBE                            Obj0A_Animate:				; XREF: Obj0A_Index
00015BBE 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015BC4 4EB9 0000 B990             		jsr	AnimateSprite
00015BCA                            
00015BCA                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00015BCA 3038 F646                  		move.w	($FFFFF646).w,d0
00015BCE B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00015BD2 6400                       		bcc.s	Obj0A_ChkDel	; if not, branch
00015BD4 3038 F60E                  		move.w	(v_pocketbottom).w,d0
00015BD8 B068 000C                  		cmp.w	$C(a0),d0
00015BDC 6500                       		bcs.s	Obj0A_Wobble
00015BDE 3028 0008                  		move.w	8(a0),d0
00015BE2 9078 F610                  		sub.w	(v_pocketx).w,d0
00015BE6 0640 0060                  		addi.w	#$60,d0
00015BEA 6B00                       		bmi.s	Obj0A_Wobble
00015BEC 0C40 00C0                  		cmpi.w	#$C0,d0
00015BF0 6400                       		bcc.s	Obj0A_Wobble
00015BF2                            
00015BF2                            Obj0A_ChkDel:
00015BF2 117C 0006 0024             		move.b	#6,$24(a0)
00015BF8 5E28 001C                  		addq.b	#7,$1C(a0)
00015BFC 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00015C02 6700                       		beq.s	Obj0A_Display
00015C04 6000                       		bra.s	Obj0A_Display
00015C06                            ; ===========================================================================
00015C06                            
00015C06                            Obj0A_Wobble:
00015C06 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00015C0A 6700                       		beq.s	loc_13D44
00015C0C 5868 0030                  		addq.w	#4,$30(a0)
00015C10                            
00015C10                            loc_13D44:
00015C10 1028 0026                  		move.b	$26(a0),d0
00015C14 5228 0026                  		addq.b	#1,$26(a0)
00015C18 0240 007F                  		andi.w	#$7F,d0
00015C1C 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00015C22 1031 0000                  		move.b	(a1,d0.w),d0
00015C26 4880                       		ext.w	d0
00015C28 D068 0030                  		add.w	$30(a0),d0
00015C2C 3140 0008                  		move.w	d0,8(a0)
00015C30 6100                       		bsr.s	Obj0A_ShowNumber
00015C32 4EBA 8CE2                  		jsr	SpeedToPos
00015C36 4A28 0001                  		tst.b	1(a0)
00015C3A 6A00                       		bpl.s	Obj0A_Delete
00015C3C 4EFA 8CF2                  		jmp	DisplaySprite
00015C40                            ; ===========================================================================
00015C40                            
00015C40                            Obj0A_Delete:
00015C40 4EFA 8D3E                  		jmp	DeleteObject
00015C44                            ; ===========================================================================
00015C44                            
00015C44                            Obj0A_Display:				; XREF: Obj0A_Index
00015C44 6100                       		bsr.s	Obj0A_ShowNumber
00015C46 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015C4C 4EB9 0000 B990             		jsr	AnimateSprite
00015C52 4EFA 8CDC                  		jmp	DisplaySprite
00015C56                            ; ===========================================================================
00015C56                            
00015C56                            Obj0A_Delete2:				; XREF: Obj0A_Index
00015C56 4EFA 8D28                  		jmp	DeleteObject
00015C5A                            ; ===========================================================================
00015C5A                            
00015C5A                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00015C5A 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00015C60 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00015C62 5368 0038                  		subq.w	#1,$38(a0)
00015C66 6600                       		bne.s	Obj0A_Display2
00015C68 117C 000E 0024             		move.b	#$E,$24(a0)
00015C6E 5E28 001C                  		addq.b	#7,$1C(a0)
00015C72 60D0                       		bra.s	Obj0A_Display
00015C74                            ; ===========================================================================
00015C74                            
00015C74                            Obj0A_Display2:
00015C74 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015C7A 4EB9 0000 B990             		jsr	AnimateSprite
00015C80 4A28 0001                  		tst.b	1(a0)
00015C84 6A00                       		bpl.s	Obj0A_Delete3
00015C86 4EFA 8CA8                  		jmp	DisplaySprite
00015C8A                            ; ===========================================================================
00015C8A                            
00015C8A                            Obj0A_Delete3:
00015C8A 4EFA 8CF4                  		jmp	DeleteObject
00015C8E                            ; ===========================================================================
00015C8E                            
00015C8E                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00015C8E 4A68 0038                  		tst.w	$38(a0)
00015C92 6700                       		beq.s	locret_13E1A
00015C94 5368 0038                  		subq.w	#1,$38(a0)
00015C98 6600                       		bne.s	locret_13E1A
00015C9A 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00015CA0 6400                       		bcc.s	locret_13E1A
00015CA2 317C 000F 0038             		move.w	#$F,$38(a0)
00015CA8 4268 0012                  		clr.w	$12(a0)
00015CAC 117C 0080 0001             		move.b	#$80,1(a0)
00015CB2 3028 0008                  		move.w	8(a0),d0
00015CB6 9078 F700                  		sub.w	($FFFFF700).w,d0
00015CBA 0640 0080                  		addi.w	#$80,d0
00015CBE 3140 0008                  		move.w	d0,8(a0)
00015CC2 3028 000C                  		move.w	$C(a0),d0
00015CC6 9078 F704                  		sub.w	($FFFFF704).w,d0
00015CCA 0640 0080                  		addi.w	#$80,d0
00015CCE 3140 000A                  		move.w	d0,$A(a0)
00015CD2 117C 000C 0024             		move.b	#$C,$24(a0)
00015CD8                            
00015CD8                            locret_13E1A:
00015CD8 4E75                       		rts	
00015CDA                            ; ===========================================================================
00015CDA                            Obj0A_WobbleData:
00015CDA 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00015CEB 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00015CFC 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00015D0D 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00015D1D FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00015D2A FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015D37 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015D44 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015D51 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00015D5A 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00015D6B 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00015D7C 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00015D8D 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00015D9D FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00015DAA FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015DB7 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015DC4 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015DD1 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00015DDA                            ;===========================================================================
00015DDA                            
00015DDA                            Obj0A_Countdown:			; XREF: Obj0A_Index
00015DDA 4A68 002C                  		tst.w	$2C(a0)
00015DDE 6600 0000                  		bne.w	loc_13F86
00015DE2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00015DE8 6400 0000                  		bcc.w	locret_1408C
00015DEC 0838 0006 D022             		btst	#6,($FFFFD022).w
00015DF2 6700 0000                  		beq.w	locret_1408C
00015DF6 5368 0038                  		subq.w	#1,$38(a0)
00015DFA 6A00 0000                  		bpl.w	loc_13FAC
00015DFE 317C 003B 0038             		move.w	#59,$38(a0)
00015E04 317C 0001 0036             		move.w	#1,$36(a0)
00015E0A 4EB9 0000 29D0             		jsr	(RandomNumber).l
00015E10 0240 0001                  		andi.w	#1,d0
00015E14 1140 0034                  		move.b	d0,$34(a0)
00015E18 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00015E1C 0C40 0019                  		cmpi.w	#$19,d0
00015E20 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00015E22 0C40 0014                  		cmpi.w	#$14,d0
00015E26 6700                       		beq.s	Obj0A_WarnSound
00015E28 0C40 000F                  		cmpi.w	#$F,d0
00015E2C 6700                       		beq.s	Obj0A_WarnSound
00015E2E 0C40 000C                  		cmpi.w	#$C,d0
00015E32 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00015E34 6600                       		bne.s	loc_13F02
00015E36 303C 0092                  		move.w	#$92,d0
00015E3A 4EB9 0000 121A             		jsr	(PlaySound).l	; play countdown music
00015E40                            
00015E40                            loc_13F02:
00015E40 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00015E46 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00015E4C 5328 0032                  		subq.b	#1,$32(a0)
00015E50 6A00                       		bpl.s	Obj0A_ReduceAir
00015E52 1168 0033 0032             		move.b	$33(a0),$32(a0)
00015E58 08E8 0007 0036             		bset	#7,$36(a0)
00015E5E 6000                       		bra.s	Obj0A_ReduceAir
00015E60                            ; ===========================================================================
00015E60                            
00015E60                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00015E60 303C 00C2                  		move.w	#$C2,d0
00015E64 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00015E6A                            
00015E6A                            Obj0A_ReduceAir:
00015E6A 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00015E6E 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00015E72 6100 0000                  		bsr.w	ResumeMusic
00015E76 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00015E7C 303C 00B2                  		move.w	#$B2,d0
00015E80 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play drowning sound
00015E86 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
00015E8C 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
00015E92 117C 000A 0034             		move.b	#$A,$34(a0)
00015E98 317C 0001 0036             		move.w	#1,$36(a0)
00015E9E 317C 0078 002C             		move.w	#$78,$2C(a0)
00015EA4 2F08                       		move.l	a0,-(sp)
00015EA6 41F8 D000                  		lea	($FFFFD000).w,a0
00015EAA 6100 F330                  		bsr.w	Sonic_ResetOnFloor
00015EAE 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00015EB4 08E8 0001 0022             		bset	#1,$22(a0)
00015EBA 08E8 0007 0002             		bset	#7,2(a0)
00015EC0 317C 0000 0012             		move.w	#0,$12(a0)
00015EC6 317C 0000 0010             		move.w	#0,$10(a0)
00015ECC 317C 0000 0020             		move.w	#0,$20(a0)
00015ED2 117C 000A 0024             		move.b	#$A,$24(a0)		; Force the character to drown		
00015ED8 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00015EDE 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w	; Stop the timer immediately		
00015EE4 205F                       		movea.l	(sp)+,a0
00015EE6 4E75                       		rts	
00015EE8                            ; ===========================================================================
00015EE8                            
00015EE8                            loc_13F86:
00015EE8 5368 002C                  		subq.w	#1,$2C(a0)
00015EEC 6600                       		bne.s	loc_13FAC	; Make it jump straight to this location
00015EEE 11FC 0006 D024             		move.b	#6,($FFFFD000+$24).w
00015EF4 4E75                       		rts
00015EF6                            ; ===========================================================================
00015EF6                            
00015EF6                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00015EF6 6000                       		bra.s	Obj0A_MakeItem
00015EF8                            ; ===========================================================================
00015EF8                            
00015EF8                            loc_13FAC:
00015EF8 4A68 0036                  		tst.w	$36(a0)
00015EFC 6700 0000                  		beq.w	locret_1408C
00015F00 5368 003A                  		subq.w	#1,$3A(a0)
00015F04 6A00 0000                  		bpl.w	locret_1408C
00015F08                            
00015F08                            Obj0A_MakeItem:
00015F08 4EB9 0000 29D0             		jsr	(RandomNumber).l
00015F0E 0240 000F                  		andi.w	#$F,d0
00015F12 3140 003A                  		move.w	d0,$3A(a0)
00015F16 4EBA 916E                  		jsr	SingleObjLoad
00015F1A 6600 0000                  		bne.w	locret_1408C
00015F1E 12BC 000A                  		move.b	#$A,0(a1)	; load object
00015F22 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00015F28 7006                       		moveq	#6,d0
00015F2A 0838 0000 D022             		btst	#0,($FFFFD022).w
00015F30 6700                       		beq.s	loc_13FF2
00015F32 4440                       		neg.w	d0
00015F34 137C 0040 0026             		move.b	#$40,$26(a1)
00015F3A                            
00015F3A                            loc_13FF2:
00015F3A D169 0008                  		add.w	d0,8(a1)
00015F3E 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00015F44 137C 0006 0028             		move.b	#6,$28(a1)
00015F4A 4A68 002C                  		tst.w	$2C(a0)
00015F4E 6700 0000                  		beq.w	loc_1403E
00015F52 0268 0007 003A             		andi.w	#7,$3A(a0)
00015F58 0668 0000 003A             		addi.w	#0,$3A(a0)
00015F5E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015F62 0440 000C                  		subi.w	#$C,d0
00015F66 3340 000C                  		move.w	d0,$C(a1)
00015F6A 4EB9 0000 29D0             		jsr	(RandomNumber).l
00015F70 1340 0026                  		move.b	d0,$26(a1)
00015F74 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015F78 0200 0003                  		andi.b	#3,d0
00015F7C 6600                       		bne.s	loc_14082
00015F7E 137C 000E 0028             		move.b	#$E,$28(a1)
00015F84 6000                       		bra.s	loc_14082
00015F86                            ; ===========================================================================
00015F86                            
00015F86                            loc_1403E:
00015F86 0828 0007 0036             		btst	#7,$36(a0)
00015F8C 6700                       		beq.s	loc_14082
00015F8E 3438 FE14                  		move.w	($FFFFFE14).w,d2
00015F92 E24A                       		lsr.w	#1,d2
00015F94 4EB9 0000 29D0             		jsr	(RandomNumber).l
00015F9A 0240 0003                  		andi.w	#3,d0
00015F9E 6600                       		bne.s	loc_1406A
00015FA0 08E8 0006 0036             		bset	#6,$36(a0)
00015FA6 6600                       		bne.s	loc_14082
00015FA8 1342 0028                  		move.b	d2,$28(a1)
00015FAC 337C 001C 0038             		move.w	#$1C,$38(a1)
00015FB2                            
00015FB2                            loc_1406A:
00015FB2 4A28 0034                  		tst.b	$34(a0)
00015FB6 6600                       		bne.s	loc_14082
00015FB8 08E8 0006 0036             		bset	#6,$36(a0)
00015FBE 6600                       		bne.s	loc_14082
00015FC0 1342 0028                  		move.b	d2,$28(a1)
00015FC4 337C 001C 0038             		move.w	#$1C,$38(a1)
00015FCA                            
00015FCA                            loc_14082:
00015FCA 5328 0034                  		subq.b	#1,$34(a0)
00015FCE 6A00                       		bpl.s	locret_1408C
00015FD0 4268 0036                  		clr.w	$36(a0)
00015FD4                            
00015FD4                            locret_1408C:
00015FD4 4E75                       		rts	
00015FD6                            
00015FD6                            ; ---------------------------------------------------------------------------
00015FD6                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00015FD6                            ; ---------------------------------------------------------------------------
00015FD6                            
00015FD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FD6                            
00015FD6                            
00015FD6                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00015FD6 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00015FDC 6200                       		bhi.s	loc_140AC
00015FDE 303C 0082                  		move.w	#$82,d0		; play LZ music
00015FE2 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	0103 (SBZ3)
00015FE8 6600                       		bne.s	loc_140A6
00015FEA 303C 0086                  		move.w	#$86,d0		; play SBZ music
00015FEE                            
00015FEE                            loc_140A6:
00015FEE 4EB9 0000 121A             		jsr	(PlaySound).l
00015FF4 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00015FFA 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00016000                            
00016000                            loc_140AC:
00016000 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00016006 4238 D372                  		clr.b	($FFFFD372).w
0001600A 4E75                       		rts	
0001600C                            ; End of function ResumeMusic
0001600C                            
0001600C                            ; ===========================================================================
0001600C                            Ani_obj0A:
0001600C                            	include "_anim\obj0A.asm"
0001600C                            ; ---------------------------------------------------------------------------
0001600C                            ; Animation script - countdown numbers and bubbles (LZ)
0001600C                            ; ---------------------------------------------------------------------------
0001600C 0000                       		dc.w byte_140D6-Ani_obj0A
0001600E 0000                       		dc.w byte_140E0-Ani_obj0A
00016010 0000                       		dc.w byte_140EA-Ani_obj0A
00016012 0000                       		dc.w byte_140F4-Ani_obj0A
00016014 0000                       		dc.w byte_140FE-Ani_obj0A
00016016 0000                       		dc.w byte_14108-Ani_obj0A
00016018 0000                       		dc.w byte_14112-Ani_obj0A
0001601A 0000                       		dc.w byte_14118-Ani_obj0A
0001601C 0000                       		dc.w byte_14120-Ani_obj0A
0001601E 0000                       		dc.w byte_14128-Ani_obj0A
00016020 0000                       		dc.w byte_14130-Ani_obj0A
00016022 0000                       		dc.w byte_14138-Ani_obj0A
00016024 0000                       		dc.w byte_14140-Ani_obj0A
00016026 0000                       		dc.w byte_14148-Ani_obj0A
00016028 0000                       		dc.w byte_1414A-Ani_obj0A
0001602A 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00016034 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
0001603E 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00016048 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00016052 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
0001605C 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00016066 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
0001606C 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00016074 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
0001607C 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00016084 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
0001608C 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00016094 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
0001609C 0EFC                       byte_14148:	dc.b $E, $FC
0001609E 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
000160A4                            		even
000160A4                            		even
000160A4                            
000160A4                            ; ---------------------------------------------------------------------------
000160A4                            ; Sprite mappings - drowning countdown numbers (LZ)
000160A4                            ; ---------------------------------------------------------------------------
000160A4                            Map_obj0A:
000160A4                            	include "_maps\obj0A.asm"
000160A4                            ; ---------------------------------------------------------------------------
000160A4                            ; Sprite mappings - drowning countdown numbers (LZ)
000160A4                            ; ---------------------------------------------------------------------------
000160A4 0000                       		dc.w byte_14152-Map_obj0A
000160A6 01                         byte_14152:	dc.b 1
000160A7 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
000160AC                            		even
000160AC                            		even
000160AC                            
000160AC                            ; ===========================================================================
000160AC                            ; ---------------------------------------------------------------------------
000160AC                            ; Object 38 - shield
000160AC                            ; ---------------------------------------------------------------------------
000160AC                            
000160AC                            Obj38: ; XREF: Obj_Index
000160AC 223C 0000 0000             		move.l #UnC_Shield,d1 ; Call for Regular Shield Art
000160B2 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
000160B6                            ; In this case, VRAM = $541*20
000160B6 363C 0200                  		move.w #$200,d3
000160BA 4EB9 0000 4A78             		jsr (QueueDMATransfer).l
000160C0                            ; ---------------------------------------------------------------------------
000160C0                            
000160C0                            ShieldObj_Main:
000160C0 7000                       		moveq #0,d0
000160C2 1028 0024                  		move.b $24(a0),d0
000160C6 323B 0000                  		move.w Shield_Index(pc,d0.w),d1
000160CA 4EFB 1000                  		jmp Shield_Index(pc,d1.w)
000160CE                            ; ===========================================================================
000160CE                            Shield_Index:
000160CE 0000                       		dc.w Shield_Init-Shield_Index
000160D0 0000                       		dc.w ShieldChecks-Shield_Index
000160D2                            ; ===========================================================================
000160D2                            
000160D2                            Shield_Init:
000160D2 5428 0024                  		addq.b #2,$24(a0)
000160D6 217C 0000 0000 0004        		move.l #Map_Obj38, $0004(A0) ; Load Shield Map into place
000160DE 117C 0004 0001             		move.b #4,1(a0)
000160E4 117C 0001 0018             		move.b #1,$18(a0)
000160EA 117C 0018 0019             		move.b #$18,$19(a0)
000160F0 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
000160F6 0838 0007 D002             		btst #7,($FFFFD002).w
000160FC 6700                       		beq.s ShieldChecks
000160FE 08E8 0007 0002             		bset #7,2(a0)
00016104                            ; ---------------------------------------------------------------------------
00016104                            
00016104                            ShieldChecks:
00016104 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016108 6600                       		bne.s SonicHasShield ; If so, branch to do nothing
0001610A 4A38 FE2C                  		tst.b ($FFFFFE2C).w ; Test if Sonic got invisibility
0001610E 6700                       		beq.s jmp_DeleteObj38 ; If so, delete object temporarily
00016110                            
00016110                            ShieldProperties:
00016110 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016116 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
0001611C 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016122 43F9 0000 0000             		lea (Ani_obj38).l, a1 ; Load Animation Scripts into a1
00016128 4EB9 0000 B990             		jsr AnimateSprite
0001612E 4EFA 8800                  		jmp DisplaySprite
00016132                            
00016132                            SonicHasShield:
00016132 4E75                       		rts
00016134                            
00016134                            jmp_DeleteObj38: ; loc_12648:
00016134 4EFA 884A                  		jmp DeleteObject 
00016138                            
00016138                            ; ---------------------------------------------------------------------------
00016138                            ; Object 4A - New Invincibility Object (ported from Sonic 2)
00016138                            ; ---------------------------------------------------------------------------
00016138                            
00016138                            Obj4A: ; XREF: Obj_Index
00016138 7000                       		moveq	#0,d0
0001613A 1028 0000                  		move.b	InvStars_routine(a0),d0
0001613E 323B 0000                  		move.w	InvStars_Index(pc,d0.w),d1
00016142 4EFB 1000                  		jmp	InvStars_Index(pc,d1.w)
00016146                            ; ===========================================================================
00016146                            
00016146 0000                       InvStars_Index:	dc.w Obj4A_Init-InvStars_Index
00016148 0000                       		dc.w Obj4A_Main-InvStars_Index
0001614A 0000                       		dc.w Obj4A_SubObject-InvStars_Index
0001614C                            ; ===========================================================================
0001614C                            
0001614C                            off_1D992:
0001614C 0000 0000                  		dc.l Ani_InvStars2 ; animation script
00016150 000B                       		dc.w $B ; speed index,sub3 anim
00016152 0000 0000                  		dc.l Ani_InvStars3
00016156 160D                       		dc.w $160D
00016158 0000 0000                  		dc.l Ani_InvStars4
0001615C 2C0D                       		dc.w $2C0D
0001615E                            ; ===========================================================================	
0001615E                            
0001615E =0000000A                  InvStars_routine: equ $A ; the same as obRoutine in other objects
0001615E =00000030                  InvStars_AniScript: equ $30 ; animation script used by sub-objects(in main object it's clear and unused) (4 bytes)
0001615E =00000034                  InvStars_SpeedIndex: equ $34  ; (2 bytes)
0001615E =00000036                  InvStars_PrevPosIndex: equ $36 ; clear and unused in main object
0001615E                            
0001615E                            
0001615E                            Obj4A_Init:
0001615E 223C 0000 0000             		move.l	#ArtUnc_InvStars,d1
00016164 343C A820                  		move.w	#$A820,d2
00016168 363C 0200                  		move.w	#$200,d3
0001616C 4EB9 0000 4A78             		jsr	(QueueDMATransfer).l
00016172 7400                       		moveq	#0,d2
00016174 45FA FFD0                  		lea	off_1D992-6(pc),a2
00016178 43D0                       		lea	(a0),a1
0001617A 7203                       		moveq	#3,d1
0001617C                            LoadStarsObject:	
0001617C 1290                       		move.b	(a0),(a1) ; load obj35
0001617E 137C 0004 000A             		move.b	#4,InvStars_routine(a1)		; => @SubObject
00016184 237C 0000 0000 0004        		move.l	#Map_InvStars,$4(a1)
0001618C 337C 0541 0002             		move.w	#$541,$2(a1)
00016192 137C 0044 0001             		move.b  #%001000100,1(a1)
00016198 137C 0010 000E             		move.b	#$10,mainspr_width(a1)
0001619E 137C 0002 000F             		move.b	#2,mainspr_childsprites(a1)
000161A4 1342 0036                  		move.b	d2,InvStars_PrevPosIndex(a1)
000161A8 5242                       		addq.w	#1,d2
000161AA 235A 0030                  		move.l	(a2)+,InvStars_AniScript(a1)
000161AE 335A 0034                  		move.w	(a2)+,InvStars_SpeedIndex(a1)
000161B2 43E9 0040                  		lea	$40(a1),a1 ; a1=object
000161B6 51C9 FFC4                  		dbf	d1,LoadStarsObject
000161BA                            
000161BA 117C 0002 000A             		move.b	#2,InvStars_routine(a0)		; => @MainObject
000161C0 117C 0004 0034             		move.b	#4,InvStars_SpeedIndex(a0)
000161C6                            
000161C6                            Obj4A_Main:
000161C6 43F8 D000                  		lea ($FFFFD000).w,a1 ; a1=character
000161CA 4A38 FE2D                  		tst.b   ($FFFFFE2D).w
000161CE 6700 87B0                  		beq.w	DeleteObject
000161D2 3029 0008                  		move.w	8(a1),d0
000161D6 3140 0008                  		move.w	d0,8(a0)
000161DA 3229 000C                  		move.w	$C(a1),d1
000161DE 3141 000C                  		move.w	d1,$C(a0)
000161E2 45E8 0010                  		lea	sub2_x_pos(a0),a2
000161E6 47F9 0000 0000             		lea	Ani_InvStars1,a3
000161EC 7A00                       		moveq	#0,d5
000161EE                            
000161EE                            Obj4A_GetFrame:
000161EE 3428 0038                  		move.w	$38(a0),d2
000161F2 1A33 2000                  		move.b	(a3,d2.w),d5
000161F6 6A00                       		bpl.s	Obj4A_SetFrameandPos
000161F8 4268 0038                  		clr.w	$38(a0)
000161FC 60F0                       		bra.s	Obj4A_GetFrame
000161FE                            ; ===========================================================================
000161FE                            
000161FE                            Obj4A_SetFrameandPos:
000161FE 5268 0038                  		addq.w	#1,$38(a0)
00016202 4DF9 0000 0000             		lea	InvStars_Speeds,a6
00016208 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
0001620C 4EB9 0000 0000             		jsr	Obj4A_Display2
00016212 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
00016214 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
00016216 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
00016218 0646 0020                  		addi.w	#$20,d6
0001621C 4EB9 0000 0000             		jsr	Obj4A_Display2
00016222 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
00016224 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
00016226 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
00016228 7012                       		moveq	#$12,d0
0001622A 0829 0000 0022             		btst	#0,$22(a1)
00016230 6700                       		beq.s	Obj4A_Display
00016232 4440                       		neg.w	d0
00016234                            
00016234                            Obj4A_Display:
00016234 D128 0034                  		add.b	d0,InvStars_SpeedIndex(a0)
00016238 303C 0080                  		move.w	#(1*$80),d0
0001623C 6000 872E                  		bra.w	DisplaySprite3
00016240                            ; ===========================================================================
00016240                            
00016240                            Obj4A_SubObject:
00016240 43F8 D000                  		lea ($FFFFD000).w,a1 ; a1=character
00016244 4A38 FE2D                  		tst.b   ($FFFFFE2D).w
00016248 6700 8736                  		beq.w	DeleteObject
0001624C 4BF8 F7A8                  		lea	($FFFFF7A8).w,a5
00016250 4DF8 CB00                  		lea	($FFFFCB00).w,a6
00016254                            	
00016254                            @getPosition_sub:
00016254 1228 0036                  		move.b	InvStars_PrevPosIndex(a0),d1
00016258 E509                       		lsl.b	#2,d1
0001625A 3401                       		move.w	d1,d2
0001625C D241                       		add.w	d1,d1
0001625E D242                       		add.w	d2,d1 
00016260 3015                       		move.w	(a5),d0
00016262 9001                       		sub.b	d1,d0
00016264 45F6 0000                  		lea	(a6,d0.w),a2
00016268 301A                       		move.w	(a2)+,d0
0001626A 321A                       		move.w	(a2)+,d1
0001626C 3140 0008                  		move.w	d0,8(a0)
00016270 3141 000C                  		move.w	d1,$C(a0)
00016274 45E8 0010                  		lea	sub2_x_pos(a0),a2
00016278 2668 0030                  		movea.l	InvStars_AniScript(a0),a3
0001627C                            
0001627C                            Obj4A_GetSubFrame:
0001627C 3428 0038                  		move.w	$38(a0),d2
00016280 1A33 2000                  		move.b	(a3,d2.w),d5
00016284 6A00                       		bpl.s	Obj4A_SetSubFrameandPos
00016286 4268 0038                  		clr.w	$38(a0)
0001628A 60F0                       		bra.s	Obj4A_GetSubFrame
0001628C                            ; ===========================================================================
0001628C                            
0001628C                            Obj4A_SetSubFrameandPos:
0001628C 4845                       		swap	d5
0001628E D428 0035                  		add.b	$35(a0),d2
00016292 1A33 2000                  		move.b	(a3,d2.w),d5
00016296 5268 0038                  		addq.w	#1,$38(a0)
0001629A 4DFA 0000                  		lea	InvStars_Speeds(pc),a6
0001629E 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
000162A2 6100                       		bsr.s	Obj4A_Display2
000162A4 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
000162A6 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
000162A8 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
000162AA 0646 0020                  		addi.w	#$20,d6
000162AE 4845                       		swap	d5
000162B0 6100                       		bsr.s	Obj4A_Display2
000162B2 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
000162B4 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
000162B6 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
000162B8 7002                       		moveq	#2,d0
000162BA 0829 0000 0022             		btst	#0,$22(a1)
000162C0 6700                       		beq.s	loc_1DB20
000162C2 4440                       		neg.w	d0
000162C4                            
000162C4                            loc_1DB20:
000162C4 D128 0034                  		add.b    d0,InvStars_SpeedIndex(a0)
000162C8 303C 0080                  		move.w    #(1*$80),d0
000162CC 6000 869E                  		bra.w    DisplaySprite3
000162D0                            ; ===========================================================================
000162D0                            Obj4A_Display2:
000162D0 0246 003E                  		andi.w	#$3E,d6 ; limit to 6 bits and clear first bit
000162D4 1436 6000                  		move.b	(a6,d6.w),d2 ; move x-move speed to d2
000162D8 1636 6001                  		move.b	1(a6,d6.w),d3 ; move y-move speed to d3
000162DC 4882                       		ext.w	d2
000162DE 4883                       		ext.w	d3
000162E0 D440                       		add.w	d0,d2 ; add object x position to x-move speed
000162E2 D641                       		add.w	d1,d3 ; add object y position to y-move speed
000162E4 4E75                       		rts
000162E6                            
000162E6                            InvStars_Speeds: ; x-move speed,	y-move speed	
000162E6 0F00 0F03 0E06 0D08 0B0B+  		dc.w   $F00,  $F03,  $E06,  $D08,  $B0B,  $80D,  $60E,  $30F,   $10, $FC0F, $F90E, $F70D, $F40B, $F208, $F106, $F003
00016306 F000 F0FC F1F9 F2F7 F4F4+  		dc.w  $F000, $F0FC, $F1F9, $F2F7, $F4F4, $F7F2, $F9F1, $FCF0, $FFF0,  $3F0,  $6F1,  $8F2,  $BF4,  $DF7,  $EF9,  $FFC
00016326                            
00016326                            ; ---------------------------------------------------------------------------
00016326                            ; Animation script - invincibility stars
00016326                            ; ---------------------------------------------------------------------------
00016326                            
00016326                            ; The animation script differs from the animate_sprite subroutine
00016326                            ; Every positive byte - mapping
00016326                            ; Every negative byte - loop flag 
00016326                            
00016326 0805 0706 0607 0508 0607+  Ani_InvStars1:	dc.b   8,  5,  7,  6,  6,  7,  5,  8,  6,  7,  7,  6,$FF
00016334 00                         	even
00016334 0807 0605 0403 0405 0607+  Ani_InvStars2:	dc.b   8,  7,  6,  5,  4,  3,  4,  5,  6,  7,$FF
0001633F 0304 0506 0708 0706 0504   		dc.b   3,  4,  5,  6,  7,  8,  7,  6,  5,  4
0001634A 00                         	even
0001634A 0807 0605 0403 0203 0405+  Ani_InvStars3:	dc.b   8,  7,  6,  5,  4,  3,  2,  3,  4,  5,  6,  7,$FF
00016357 0203 0405 0607 0807 0605+  		dc.b   2,  3,  4,  5,  6,  7,  8,  7,  6,  5,  4,  3
00016364 00                         	even
00016364 0706 0504 0302 0102 0304+  Ani_InvStars4:	dc.b   7,  6,  5,  4,  3,  2,  1,  2,  3,  4,  5,  6,$FF
00016371 0102 0304 0506 0706 0504+  		dc.b   1,  2,  3,  4,  5,  6,  7,  6,  5,  4,  3,  2
0001637E 00                         	even		
0001637E                            
0001637E                            
0001637E                            Map_InvStars:
0001637E                            	include "_maps\obj4A.asm"
0001637E                            ; ================================================================================
0001637E                            ; Sprite Mappings - generated by Flex 2 Wed Aug 11 2021 18:32:48 GMT+0100 (British Summer Time)
0001637E                            ; ================================================================================
0001637E                            
0001637E                            DATAZEB5V6JRJ3H:
0001637E 0000 0000                  	dc.w DATAZEB5V6JRJ3H_0-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_1-DATAZEB5V6JRJ3H
00016382 0000 0000                  	dc.w DATAZEB5V6JRJ3H_2-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_3-DATAZEB5V6JRJ3H
00016386 0000 0000                  	dc.w DATAZEB5V6JRJ3H_4-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_5-DATAZEB5V6JRJ3H
0001638A 0000 0000                  	dc.w DATAZEB5V6JRJ3H_6-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_7-DATAZEB5V6JRJ3H
0001638E 0000                       	dc.w DATAZEB5V6JRJ3H_8-DATAZEB5V6JRJ3H
00016390 01                         DATAZEB5V6JRJ3H_0: dc.b $1
00016391 EF0F 0000 F0               	dc.b $EF, $F, $0, $0, $F0
00016396 01                         DATAZEB5V6JRJ3H_1: dc.b $1
00016397 F800 0000 FC               	dc.b $F8, $0, $0, $0, $FC
0001639C 01                         DATAZEB5V6JRJ3H_2: dc.b $1
0001639D F800 0001 FC               	dc.b $F8, $0, $0, $1, $FC
000163A2 01                         DATAZEB5V6JRJ3H_3: dc.b $1
000163A3 F801 0002 FC               	dc.b $F8, $1, $0, $2, $FC
000163A8 01                         DATAZEB5V6JRJ3H_4: dc.b $1
000163A9 F801 0004 FC               	dc.b $F8, $1, $0, $4, $FC
000163AE 01                         DATAZEB5V6JRJ3H_5: dc.b $1
000163AF F801 0006 FC               	dc.b $F8, $1, $0, $6, $FC
000163B4 01                         DATAZEB5V6JRJ3H_6: dc.b $1
000163B5 F805 0008 F8               	dc.b $F8, $5, $0, $8, $F8
000163BA 01                         DATAZEB5V6JRJ3H_7: dc.b $1
000163BB F805 000C F8               	dc.b $F8, $5, $0, $C, $F8
000163C0 01                         DATAZEB5V6JRJ3H_8: dc.b $1
000163C1 F00F 0010 F0               	dc.b $F0, $F, $0, $10, $F0
000163C6                            	even
000163C6                            	even
000163C6                            ; ===========================================================================
000163C6                            ; ---------------------------------------------------------------------------
000163C6                            ; Object 08 - water splash (LZ)
000163C6                            ; ---------------------------------------------------------------------------
000163C6                            
000163C6                            Obj08:					; XREF: Obj_Index
000163C6 7000                       		moveq	#0,d0
000163C8 1028 0024                  		move.b	$24(a0),d0
000163CC 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
000163D0 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
000163D4                            ; ===========================================================================
000163D4 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
000163D6 0000                       		dc.w Obj08_Display-Obj08_Index
000163D8 0000                       		dc.w Obj08_Delete-Obj08_Index
000163DA                            ; ===========================================================================
000163DA                            
000163DA                            Obj08_Main:				; XREF: Obj08_Index
000163DA 5428 0024                  		addq.b	#2,$24(a0)
000163DE 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
000163E6 0028 0004 0001             		ori.b	#4,1(a0)
000163EC 117C 0001 0018             		move.b	#1,$18(a0)
000163F2 117C 0010 0019             		move.b	#$10,$19(a0)
000163F8 317C 4259 0002             		move.w	#$4259,2(a0)
000163FE 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00016404                            
00016404                            Obj08_Display:				; XREF: Obj08_Index
00016404 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
0001640A 4A38 F64E                  		tst.b	($FFFFF64E).w
0001640E 6700                       		beq.s	Obj08_Animate
00016410 3178 F60E 000C             		move.w	(v_pocketbottom).w,$C(a0) ; copy y-position from water height
00016416                            
00016416                            Obj08_Animate:
00016416 43F9 0000 0000             		lea	(Ani_obj08).l,a1
0001641C 4EB9 0000 B990             		jsr	AnimateSprite
00016422 4EFA 850C                  		jmp	DisplaySprite
00016426                            ; ===========================================================================
00016426                            
00016426                            Obj08_Delete:				; XREF: Obj08_Index
00016426 4EFA 8558                  		jmp	DeleteObject	; delete when animation	is complete
0001642A                            ; ===========================================================================
0001642A                            Ani_obj38:
0001642A                            	include "_anim\obj38.asm"
0001642A                            ; ---------------------------------------------------------------------------
0001642A                            ; Animation script - shield and invincibility stars
0001642A                            ; ---------------------------------------------------------------------------
0001642A 0000                       		dc.w byte_14356-Ani_obj38
0001642C 0000                       		dc.w byte_1435E-Ani_obj38
0001642E 0000                       		dc.w byte_14364-Ani_obj38
00016430 0000                       		dc.w byte_1437E-Ani_obj38
00016432 0000                       		dc.w byte_14398-Ani_obj38
00016434 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
0001643C 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00016442 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00016453 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
0001645C 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
0001646D 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00016476 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00016487 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00016490                            		even
00016490                            		even
00016490                            
00016490                            ; ---------------------------------------------------------------------------
00016490                            ; Sprite mappings - shield and invincibility stars
00016490                            ; ---------------------------------------------------------------------------
00016490                            Map_obj38:
00016490                            	include "_maps\obj38.asm"
00016490                            ; ---------------------------------------------------------------------------
00016490                            ; Sprite mappings - shield and invincibility stars
00016490                            ; ---------------------------------------------------------------------------
00016490 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00016494 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00016498 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
0001649C 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
000164A0 04                         byte_143C2:	dc.b 4
000164A1 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000164A6 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000164AB 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
000164B0 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000164B5 04                         byte_143D7:	dc.b 4
000164B6 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
000164BB E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
000164C0 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
000164C5 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
000164CA 04                         byte_143EC:	dc.b 4
000164CB E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000164D0 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000164D5 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000164DA 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000164DF 04                         byte_14401:	dc.b 4
000164E0 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000164E5 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000164EA 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000164EF 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000164F4 04                         byte_14416:	dc.b 4
000164F5 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000164FA E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000164FF 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00016504 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00016509 04                         byte_1442B:	dc.b 4
0001650A E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0001650F E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00016514 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00016519 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0001651E 04                         byte_14440:	dc.b 4
0001651F E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00016524 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00016529 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0001652E 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00016534 00                         		even
00016534 00                         		even
00016534                            
00016534                            ; ---------------------------------------------------------------------------
00016534                            ; Sprite mappings - special stage entry	from beta
00016534                            ; ---------------------------------------------------------------------------
00016534                            
00016534                            Ani_obj08:
00016534                            	include "_anim\obj08.asm"
00016534                            ; ---------------------------------------------------------------------------
00016534                            ; Animation script - water splash (LZ)
00016534                            ; ---------------------------------------------------------------------------
00016534 0000                       		dc.w byte_145C6-Ani_obj08
00016536 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
0001653C                            		even
0001653C                            		even
0001653C                            
0001653C                            ; ---------------------------------------------------------------------------
0001653C                            ; Sprite mappings - water splash (LZ)
0001653C                            ; ---------------------------------------------------------------------------
0001653C                            Map_obj08:
0001653C                            	include "_maps\obj08.asm"
0001653C                            ; ---------------------------------------------------------------------------
0001653C                            ; Sprite mappings - water splash (LZ)
0001653C                            ; ---------------------------------------------------------------------------
0001653C 0000                       		dc.w byte_145D2-Map_obj08
0001653E 0000                       		dc.w byte_145DD-Map_obj08
00016540 0000                       		dc.w byte_145E8-Map_obj08
00016542 02                         byte_145D2:	dc.b 2
00016543 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00016548 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
0001654D 02                         byte_145DD:	dc.b 2
0001654E E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00016553 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00016558 01                         byte_145E8:	dc.b 1
00016559 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
0001655E                            		even
0001655E                            		even
0001655E                            
0001655E                            ; ---------------------------------------------------------------------------
0001655E                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
0001655E                            ; ---------------------------------------------------------------------------
0001655E                            
0001655E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001655E                            
0001655E                            
0001655E                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
0001655E 0828 0003 0022             		btst	#3,$22(a0)
00016564 6700                       		beq.s	loc_14602
00016566 7000                       		moveq	#0,d0
00016568 11C0 F768                  		move.b	d0,($FFFFF768).w
0001656C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016570 4E75                       		rts	
00016572                            ; ===========================================================================
00016572                            
00016572                            loc_14602:
00016572 7003                       		moveq	#3,d0
00016574 11C0 F768                  		move.b	d0,($FFFFF768).w
00016578 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001657C 1028 0026                  		move.b	$26(a0),d0
00016580 0600 0020                  		addi.b	#$20,d0
00016584 6A00                       		bpl.s	loc_14624
00016586 1028 0026                  		move.b	$26(a0),d0
0001658A 6A00                       		bpl.s	loc_1461E
0001658C 5300                       		subq.b	#1,d0
0001658E                            
0001658E                            loc_1461E:
0001658E 0600 0020                  		addi.b	#$20,d0
00016592 6000                       		bra.s	loc_14630
00016594                            ; ===========================================================================
00016594                            
00016594                            loc_14624:
00016594 1028 0026                  		move.b	$26(a0),d0
00016598 6A00                       		bpl.s	loc_1462C
0001659A 5200                       		addq.b	#1,d0
0001659C                            
0001659C                            loc_1462C:
0001659C 0600 001F                  		addi.b	#$1F,d0
000165A0                            
000165A0                            loc_14630:
000165A0 0200 00C0                  		andi.b	#$C0,d0
000165A4 0C00 0040                  		cmpi.b	#$40,d0
000165A8 6700 0000                  		beq.w	Sonic_WalkVertL
000165AC 0C00 0080                  		cmpi.b	#$80,d0
000165B0 6700 0000                  		beq.w	Sonic_WalkCeiling
000165B4 0C00 00C0                  		cmpi.b	#$C0,d0
000165B8 6700 0000                  		beq.w	Sonic_WalkVertR
000165BC 3428 000C                  		move.w	$C(a0),d2
000165C0 3628 0008                  		move.w	8(a0),d3
000165C4 7000                       		moveq	#0,d0
000165C6 1028 0016                  		move.b	$16(a0),d0
000165CA 4880                       		ext.w	d0
000165CC D440                       		add.w	d0,d2
000165CE 1028 0017                  		move.b	$17(a0),d0
000165D2 4880                       		ext.w	d0
000165D4 D640                       		add.w	d0,d3
000165D6 49F8 F768                  		lea	($FFFFF768).w,a4
000165DA 367C 0010                  		movea.w	#$10,a3
000165DE 3C3C 0000                  		move.w	#0,d6
000165E2 7A0D                       		moveq	#$D,d5
000165E4 6100 0000                  		bsr.w	FindFloor
000165E8 3F01                       		move.w	d1,-(sp)
000165EA 3428 000C                  		move.w	$C(a0),d2
000165EE 3628 0008                  		move.w	8(a0),d3
000165F2 7000                       		moveq	#0,d0
000165F4 1028 0016                  		move.b	$16(a0),d0
000165F8 4880                       		ext.w	d0
000165FA D440                       		add.w	d0,d2
000165FC 1028 0017                  		move.b	$17(a0),d0
00016600 4880                       		ext.w	d0
00016602 4440                       		neg.w	d0
00016604 D640                       		add.w	d0,d3
00016606 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001660A 367C 0010                  		movea.w	#$10,a3
0001660E 3C3C 0000                  		move.w	#0,d6
00016612 7A0D                       		moveq	#$D,d5
00016614 6100 0000                  		bsr.w	FindFloor
00016618 301F                       		move.w	(sp)+,d0
0001661A 6100 0000                  		bsr.w	Sonic_Angle
0001661E 4A41                       		tst.w	d1
00016620 6700                       		beq.s	locret_146BE
00016622 6A00                       		bpl.s	loc_146C0
00016624 0C41 FFF2                  		cmpi.w	#-$E,d1
00016628 6D00                       		blt.s	locret_146E6
0001662A D368 000C                  		add.w	d1,$C(a0)
0001662E                            
0001662E                            locret_146BE:
0001662E 4E75                       		rts	
00016630                            ; ===========================================================================
00016630                            
00016630                            loc_146C0:
00016630 0C41 000E                  		cmpi.w	#$E,d1
00016634 6E00                       		bgt.s	loc_146CC
00016636                            
00016636                            loc_146C6:
00016636 D368 000C                  		add.w	d1,$C(a0)
0001663A 4E75                       		rts	
0001663C                            ; ===========================================================================
0001663C                            
0001663C                            loc_146CC:
0001663C 4A28 0038                  		tst.b	$38(a0)
00016640 66F4                       		bne.s	loc_146C6
00016642 08E8 0001 0022             		bset	#1,$22(a0)
00016648 08A8 0005 0022             		bclr	#5,$22(a0)
0001664E 117C 0001 001D             		move.b	#1,$1D(a0)
00016654 4E75                       		rts	
00016656                            ; ===========================================================================
00016656                            
00016656                            locret_146E6:
00016656 4E75                       		rts	
00016658                            ; End of function Sonic_AnglePos
00016658                            
00016658                            ; ===========================================================================
00016658 2428 0008                  		move.l	8(a0),d2
0001665C 3028 0010                  		move.w	$10(a0),d0
00016660 48C0                       		ext.l	d0
00016662 E180                       		asl.l	#8,d0
00016664 9480                       		sub.l	d0,d2
00016666 2142 0008                  		move.l	d2,8(a0)
0001666A 303C 0038                  		move.w	#$38,d0
0001666E 48C0                       		ext.l	d0
00016670 E180                       		asl.l	#8,d0
00016672 9680                       		sub.l	d0,d3
00016674 2143 000C                  		move.l	d3,$C(a0)
00016678 4E75                       		rts	
0001667A                            ; ===========================================================================
0001667A                            
0001667A                            locret_1470A:
0001667A 4E75                       		rts	
0001667C                            ; ===========================================================================
0001667C 2628 000C                  		move.l	$C(a0),d3
00016680 3028 0012                  		move.w	$12(a0),d0
00016684 0440 0038                  		subi.w	#$38,d0
00016688 3140 0012                  		move.w	d0,$12(a0)
0001668C 48C0                       		ext.l	d0
0001668E E180                       		asl.l	#8,d0
00016690 9680                       		sub.l	d0,d3
00016692 2143 000C                  		move.l	d3,$C(a0)
00016696 4E75                       		rts	
00016698 4E75                       		rts	
0001669A                            ; ===========================================================================
0001669A 2428 0008                  		move.l	8(a0),d2
0001669E 2628 000C                  		move.l	$C(a0),d3
000166A2 3028 0010                  		move.w	$10(a0),d0
000166A6 48C0                       		ext.l	d0
000166A8 E180                       		asl.l	#8,d0
000166AA 9480                       		sub.l	d0,d2
000166AC 3028 0012                  		move.w	$12(a0),d0
000166B0 48C0                       		ext.l	d0
000166B2 E180                       		asl.l	#8,d0
000166B4 9680                       		sub.l	d0,d3
000166B6 2142 0008                  		move.l	d2,8(a0)
000166BA 2143 000C                  		move.l	d3,$C(a0)
000166BE 4E75                       		rts	
000166C0                            
000166C0                            ; ---------------------------------------------------------------------------
000166C0                            ; Subroutine to	change Sonic's angle as he walks along the floor
000166C0                            ; ---------------------------------------------------------------------------
000166C0                            
000166C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166C0                            
000166C0                            
000166C0                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
000166C0 1438 F76A                  		move.b	($FFFFF76A).w,d2
000166C4 B240                       		cmp.w	d0,d1
000166C6 6F00                       		ble.s	loc_1475E
000166C8 1438 F768                  		move.b	($FFFFF768).w,d2
000166CC 3200                       		move.w	d0,d1
000166CE                            
000166CE                            loc_1475E:
000166CE 0802 0000                  		btst	#0,d2
000166D2 6600                       		bne.s	loc_1476A
000166D4 1142 0026                  		move.b	d2,$26(a0)
000166D8 4E75                       		rts	
000166DA                            ; ===========================================================================
000166DA                            
000166DA                            loc_1476A:
000166DA 1428 0026                  		move.b	$26(a0),d2
000166DE 0602 0020                  		addi.b	#$20,d2
000166E2 0202 00C0                  		andi.b	#$C0,d2
000166E6 1142 0026                  		move.b	d2,$26(a0)
000166EA 4E75                       		rts	
000166EC                            ; End of function Sonic_Angle
000166EC                            
000166EC                            ; ---------------------------------------------------------------------------
000166EC                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000166EC                            ; ---------------------------------------------------------------------------
000166EC                            
000166EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166EC                            
000166EC                            
000166EC                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
000166EC 3428 000C                  		move.w	$C(a0),d2
000166F0 3628 0008                  		move.w	8(a0),d3
000166F4 7000                       		moveq	#0,d0
000166F6 1028 0017                  		move.b	$17(a0),d0
000166FA 4880                       		ext.w	d0
000166FC 4440                       		neg.w	d0
000166FE D440                       		add.w	d0,d2
00016700 1028 0016                  		move.b	$16(a0),d0
00016704 4880                       		ext.w	d0
00016706 D640                       		add.w	d0,d3
00016708 49F8 F768                  		lea	($FFFFF768).w,a4
0001670C 367C 0010                  		movea.w	#$10,a3
00016710 3C3C 0000                  		move.w	#0,d6
00016714 7A0D                       		moveq	#$D,d5
00016716 6100 0000                  		bsr.w	FindWall
0001671A 3F01                       		move.w	d1,-(sp)
0001671C 3428 000C                  		move.w	$C(a0),d2
00016720 3628 0008                  		move.w	8(a0),d3
00016724 7000                       		moveq	#0,d0
00016726 1028 0017                  		move.b	$17(a0),d0
0001672A 4880                       		ext.w	d0
0001672C D440                       		add.w	d0,d2
0001672E 1028 0016                  		move.b	$16(a0),d0
00016732 4880                       		ext.w	d0
00016734 D640                       		add.w	d0,d3
00016736 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001673A 367C 0010                  		movea.w	#$10,a3
0001673E 3C3C 0000                  		move.w	#0,d6
00016742 7A0D                       		moveq	#$D,d5
00016744 6100 0000                  		bsr.w	FindWall
00016748 301F                       		move.w	(sp)+,d0
0001674A 6100 FF74                  		bsr.w	Sonic_Angle
0001674E 4A41                       		tst.w	d1
00016750 6700                       		beq.s	locret_147F0
00016752 6A00                       		bpl.s	loc_147F2
00016754 0C41 FFF2                  		cmpi.w	#-$E,d1
00016758 6D00 FF20                  		blt.w	locret_1470A
0001675C D368 0008                  		add.w	d1,8(a0)
00016760                            
00016760                            locret_147F0:
00016760 4E75                       		rts	
00016762                            ; ===========================================================================
00016762                            
00016762                            loc_147F2:
00016762 0C41 000E                  		cmpi.w	#$E,d1
00016766 6E00                       		bgt.s	loc_147FE
00016768                            
00016768                            loc_147F8:
00016768 D368 0008                  		add.w	d1,8(a0)
0001676C 4E75                       		rts	
0001676E                            ; ===========================================================================
0001676E                            
0001676E                            loc_147FE:
0001676E 4A28 0038                  		tst.b	$38(a0)
00016772 66F4                       		bne.s	loc_147F8
00016774 08E8 0001 0022             		bset	#1,$22(a0)
0001677A 08A8 0005 0022             		bclr	#5,$22(a0)
00016780 117C 0001 001D             		move.b	#1,$1D(a0)
00016786 4E75                       		rts	
00016788                            ; End of function Sonic_WalkVertR
00016788                            
00016788                            ; ---------------------------------------------------------------------------
00016788                            ; Subroutine allowing Sonic to walk upside-down
00016788                            ; ---------------------------------------------------------------------------
00016788                            
00016788                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016788                            
00016788                            
00016788                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00016788 3428 000C                  		move.w	$C(a0),d2
0001678C 3628 0008                  		move.w	8(a0),d3
00016790 7000                       		moveq	#0,d0
00016792 1028 0016                  		move.b	$16(a0),d0
00016796 4880                       		ext.w	d0
00016798 9440                       		sub.w	d0,d2
0001679A 0A42 000F                  		eori.w	#$F,d2
0001679E 1028 0017                  		move.b	$17(a0),d0
000167A2 4880                       		ext.w	d0
000167A4 D640                       		add.w	d0,d3
000167A6 49F8 F768                  		lea	($FFFFF768).w,a4
000167AA 367C FFF0                  		movea.w	#-$10,a3
000167AE 3C3C 1000                  		move.w	#$1000,d6
000167B2 7A0D                       		moveq	#$D,d5
000167B4 6100 0000                  		bsr.w	FindFloor
000167B8 3F01                       		move.w	d1,-(sp)
000167BA 3428 000C                  		move.w	$C(a0),d2
000167BE 3628 0008                  		move.w	8(a0),d3
000167C2 7000                       		moveq	#0,d0
000167C4 1028 0016                  		move.b	$16(a0),d0
000167C8 4880                       		ext.w	d0
000167CA 9440                       		sub.w	d0,d2
000167CC 0A42 000F                  		eori.w	#$F,d2
000167D0 1028 0017                  		move.b	$17(a0),d0
000167D4 4880                       		ext.w	d0
000167D6 9640                       		sub.w	d0,d3
000167D8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000167DC 367C FFF0                  		movea.w	#-$10,a3
000167E0 3C3C 1000                  		move.w	#$1000,d6
000167E4 7A0D                       		moveq	#$D,d5
000167E6 6100 0000                  		bsr.w	FindFloor
000167EA 301F                       		move.w	(sp)+,d0
000167EC 6100 FED2                  		bsr.w	Sonic_Angle
000167F0 4A41                       		tst.w	d1
000167F2 6700                       		beq.s	locret_14892
000167F4 6A00                       		bpl.s	loc_14894
000167F6 0C41 FFF2                  		cmpi.w	#-$E,d1
000167FA 6D00 FE5A                  		blt.w	locret_146E6
000167FE 9368 000C                  		sub.w	d1,$C(a0)
00016802                            
00016802                            locret_14892:
00016802 4E75                       		rts	
00016804                            ; ===========================================================================
00016804                            
00016804                            loc_14894:
00016804 0C41 000E                  		cmpi.w	#$E,d1
00016808 6E00                       		bgt.s	loc_148A0
0001680A                            
0001680A                            loc_1489A:
0001680A 9368 000C                  		sub.w	d1,$C(a0)
0001680E 4E75                       		rts	
00016810                            ; ===========================================================================
00016810                            
00016810                            loc_148A0:
00016810 4A28 0038                  		tst.b	$38(a0)
00016814 66F4                       		bne.s	loc_1489A
00016816 08E8 0001 0022             		bset	#1,$22(a0)
0001681C 08A8 0005 0022             		bclr	#5,$22(a0)
00016822 117C 0001 001D             		move.b	#1,$1D(a0)
00016828 4E75                       		rts	
0001682A                            ; End of function Sonic_WalkCeiling
0001682A                            
0001682A                            ; ---------------------------------------------------------------------------
0001682A                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
0001682A                            ; ---------------------------------------------------------------------------
0001682A                            
0001682A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001682A                            
0001682A                            
0001682A                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
0001682A 3428 000C                  		move.w	$C(a0),d2
0001682E 3628 0008                  		move.w	8(a0),d3
00016832 7000                       		moveq	#0,d0
00016834 1028 0017                  		move.b	$17(a0),d0
00016838 4880                       		ext.w	d0
0001683A 9440                       		sub.w	d0,d2
0001683C 1028 0016                  		move.b	$16(a0),d0
00016840 4880                       		ext.w	d0
00016842 9640                       		sub.w	d0,d3
00016844 0A43 000F                  		eori.w	#$F,d3
00016848 49F8 F768                  		lea	($FFFFF768).w,a4
0001684C 367C FFF0                  		movea.w	#-$10,a3
00016850 3C3C 0800                  		move.w	#$800,d6
00016854 7A0D                       		moveq	#$D,d5
00016856 6100 0000                  		bsr.w	FindWall
0001685A 3F01                       		move.w	d1,-(sp)
0001685C 3428 000C                  		move.w	$C(a0),d2
00016860 3628 0008                  		move.w	8(a0),d3
00016864 7000                       		moveq	#0,d0
00016866 1028 0017                  		move.b	$17(a0),d0
0001686A 4880                       		ext.w	d0
0001686C D440                       		add.w	d0,d2
0001686E 1028 0016                  		move.b	$16(a0),d0
00016872 4880                       		ext.w	d0
00016874 9640                       		sub.w	d0,d3
00016876 0A43 000F                  		eori.w	#$F,d3
0001687A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001687E 367C FFF0                  		movea.w	#-$10,a3
00016882 3C3C 0800                  		move.w	#$800,d6
00016886 7A0D                       		moveq	#$D,d5
00016888 6100 0000                  		bsr.w	FindWall
0001688C 301F                       		move.w	(sp)+,d0
0001688E 6100 FE30                  		bsr.w	Sonic_Angle
00016892 4A41                       		tst.w	d1
00016894 6700                       		beq.s	locret_14934
00016896 6A00                       		bpl.s	loc_14936
00016898 0C41 FFF2                  		cmpi.w	#-$E,d1
0001689C 6D00 FDDC                  		blt.w	locret_1470A
000168A0 9368 0008                  		sub.w	d1,8(a0)
000168A4                            
000168A4                            locret_14934:
000168A4 4E75                       		rts	
000168A6                            ; ===========================================================================
000168A6                            
000168A6                            loc_14936:
000168A6 0C41 000E                  		cmpi.w	#$E,d1
000168AA 6E00                       		bgt.s	loc_14942
000168AC                            
000168AC                            loc_1493C:
000168AC 9368 0008                  		sub.w	d1,8(a0)
000168B0 4E75                       		rts	
000168B2                            ; ===========================================================================
000168B2                            
000168B2                            loc_14942:
000168B2 4A28 0038                  		tst.b	$38(a0)
000168B6 66F4                       		bne.s	loc_1493C
000168B8 08E8 0001 0022             		bset	#1,$22(a0)
000168BE 08A8 0005 0022             		bclr	#5,$22(a0)
000168C4 117C 0001 001D             		move.b	#1,$1D(a0)
000168CA 4E75                       		rts	
000168CC                            ; End of function Sonic_WalkVertL
000168CC                            
000168CC                            ; ---------------------------------------------------------------------------
000168CC                            ; Subroutine to	find which tile	the object is standing on
000168CC                            ; ---------------------------------------------------------------------------
000168CC                            
000168CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000168CC                            
000168CC                            
000168CC                            Floor_ChkTile_LocateBlock:
000168CC 43F8 A400                  		lea	($FFFFA400).w,a1
000168D0 1231 0000                  		move.b	(a1,d0.w),d1
000168D4 6700                       		beq.s	Floor_ChkTile_EmptyChunk	; if the chunk ID is 0 (empty chunk), branch
000168D6 6B00                       		bmi.s	loc_1499A
000168D8 5301                       		subq.b	#1,d1		; the empty chunk is not included in the chunk mappings, subtract 1 to read the correct data
000168DA 4881                       		ext.w	d1
000168DC EE59                       		ror.w	#7,d1
000168DE 3002                       		move.w	d2,d0
000168E0 D040                       		add.w	d0,d0
000168E2 0240 01E0                  		andi.w	#$1E0,d0
000168E6 D240                       		add.w	d0,d1
000168E8 3003                       		move.w	d3,d0
000168EA E648                       		lsr.w	#3,d0
000168EC 0240 001E                  		andi.w	#$1E,d0
000168F0 D240                       		add.w	d0,d1
000168F2 4E75                       		rts	
000168F4                            ; ---------------------------------------------------------------------------
000168F4                            
000168F4                            loc_1499A:
000168F4 0241 007F                  		andi.w	#$7F,d1
000168F8 0828 0006 0001             		btst	#6,1(a0)
000168FE 6700                       		beq.s	loc_149B2
00016900 5241                       		addq.w	#1,d1
00016902 0C41 0029                  		cmpi.w	#$29,d1
00016906 6600                       		bne.s	loc_149B2
00016908 323C 0051                  		move.w	#$51,d1
0001690C                            
0001690C                            loc_149B2:
0001690C 5301                       		subq.b	#1,d1
0001690E EE59                       		ror.w	#7,d1
00016910 3002                       		move.w	d2,d0
00016912 D040                       		add.w	d0,d0
00016914 0240 01E0                  		andi.w	#$1E0,d0
00016918 D240                       		add.w	d0,d1
0001691A 3003                       		move.w	d3,d0
0001691C E648                       		lsr.w	#3,d0
0001691E 0240 001E                  		andi.w	#$1E,d0
00016922 D240                       		add.w	d0,d1
00016924 4E75                       		rts	
00016926                            ; ---------------------------------------------------------------------------
00016926                            
00016926                            Floor_ChkTile_EmptyChunk:
00016926 43F8 FF00                  		lea	($FFFFFF00).w,a1	; override a1
0001692A 584F                       		addq.w	#4,sp			; pop a stack frame to avoid adding the address of the chunk mappings to a1
0001692C 4E75                       		rts	
0001692E                            
0001692E                            ; ---------------------------------------------------------------------------
0001692E                            ; Subroutine to	find which tile	the object is standing on
0001692E                            ; ---------------------------------------------------------------------------
0001692E                            
0001692E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001692E                            
0001692E                            
0001692E                            Floor_ChkTile:				; XREF: FindFloor; et al
0001692E 3002                       		move.w	d2,d0
00016930 E248                       		lsr.w	#1,d0
00016932 0240 0380                  		andi.w	#$380,d0
00016936 3203                       		move.w	d3,d1
00016938 E049                       		lsr.w	#8,d1
0001693A 0241 007F                  		andi.w	#$7F,d1
0001693E D041                       		add.w	d1,d0
00016940 4A38 FE10                  		tst.b	($FFFFFE10).w	; are we in Green Hill Zone?
00016944 6700                       		beq.s	@ghz		; if yes, branch		
00016946 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w	
0001694C 6700                       		beq.s	@lz		
0001694E 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w	
00016954 6700                       		beq.s	@mz		
00016956 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w	
0001695C 6700                       		beq.s	@slz		
0001695E 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w	
00016964 6700                       		beq.s	@syz		
00016966 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w	
0001696C 6700                       		beq.s	@sbz				
0001696E 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
00016974 6700                       		beq.s	@ghz		; if yes, branch
00016976 72FF                       		moveq	#-1,d1
00016978 6100 FF52                  		bsr.w	Floor_ChkTile_LocateBlock
0001697C 2241                       		movea.l	d1,a1
0001697E 4E75                       		rts	
00016980                            ; ---------------------------------------------------------------------------
00016980                            
00016980                            @ghz:
00016980 7200                       		moveq	#0,d1
00016982 6100 FF48                  		bsr.w	Floor_ChkTile_LocateBlock
00016986 0681 0000 0000             		add.l	#Blk256_GHZ,d1
0001698C 2241                       		movea.l	d1,a1
0001698E 4E75                       		rts	
00016990                            
00016990                            @lz:
00016990 7200                       		moveq	#0,d1
00016992 6100 FF38                  		bsr.w	Floor_ChkTile_LocateBlock
00016996 0681 0000 0000             		add.l	#Blk256_LZ,d1
0001699C 2241                       		movea.l	d1,a1
0001699E 4E75                       		rts	
000169A0                            
000169A0                            @mz:
000169A0 7200                       		moveq	#0,d1
000169A2 6100 FF28                  		bsr.w	Floor_ChkTile_LocateBlock
000169A6 0681 0000 0000             		add.l	#Blk256_MZ,d1
000169AC 2241                       		movea.l	d1,a1
000169AE 4E75                       		rts	
000169B0                            
000169B0                            @slz:
000169B0 7200                       		moveq	#0,d1
000169B2 6100 FF18                  		bsr.w	Floor_ChkTile_LocateBlock
000169B6 0681 0000 0000             		add.l	#Blk256_SLZ,d1
000169BC 2241                       		movea.l	d1,a1
000169BE 4E75                       		rts	
000169C0                            
000169C0                            @syz:
000169C0 7200                       		moveq	#0,d1
000169C2 6100 FF08                  		bsr.w	Floor_ChkTile_LocateBlock
000169C6 0681 0000 0000             		add.l	#Blk256_SYZ,d1
000169CC 2241                       		movea.l	d1,a1
000169CE 4E75                       		rts	
000169D0                            
000169D0                            @sbz:
000169D0 7200                       		moveq	#0,d1
000169D2 6100 FEF8                  		bsr.w	Floor_ChkTile_LocateBlock
000169D6 0681 0000 0000             		add.l	#Blk256_SBZ,d1
000169DC 2241                       		movea.l	d1,a1
000169DE 4E75                       		rts			
000169E0                            ; End of function Floor_ChkTile
000169E0                            
000169E0                            
000169E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000169E0                            
000169E0                            
000169E0                            FindFloor:				; XREF: Sonic_AnglePos; et al
000169E0 6100 FF4C                  		bsr.w	Floor_ChkTile
000169E4 3011                       		move.w	(a1),d0
000169E6 3800                       		move.w	d0,d4
000169E8 0240 07FF                  		andi.w	#$7FF,d0
000169EC 6700                       		beq.s	loc_149DE
000169EE 0B04                       		btst	d5,d4
000169F0 6600                       		bne.s	loc_149EC
000169F2                            
000169F2                            loc_149DE:
000169F2 D44B                       		add.w	a3,d2
000169F4 6100 0000                  		bsr.w	FindFloor2
000169F8 944B                       		sub.w	a3,d2
000169FA 0641 0010                  		addi.w	#$10,d1
000169FE 4E75                       		rts	
00016A00                            ; ===========================================================================
00016A00                            
00016A00                            loc_149EC:
00016A00 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00016A04 1032 0000                  		move.b	(a2,d0.w),d0
00016A08 0240 00FF                  		andi.w	#$FF,d0
00016A0C 67E4                       		beq.s	loc_149DE
00016A0E 45F9 0000 0000             		lea	(AngleMap).l,a2
00016A14 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016A18 E948                       		lsl.w	#4,d0
00016A1A 3203                       		move.w	d3,d1
00016A1C 0804 000B                  		btst	#$B,d4
00016A20 6700                       		beq.s	loc_14A12
00016A22 4641                       		not.w	d1
00016A24 4414                       		neg.b	(a4)
00016A26                            
00016A26                            loc_14A12:
00016A26 0804 000C                  		btst	#$C,d4
00016A2A 6700                       		beq.s	loc_14A22
00016A2C 0614 0040                  		addi.b	#$40,(a4)
00016A30 4414                       		neg.b	(a4)
00016A32 0414 0040                  		subi.b	#$40,(a4)
00016A36                            
00016A36                            loc_14A22:
00016A36 0241 000F                  		andi.w	#$F,d1
00016A3A D240                       		add.w	d0,d1
00016A3C 45F9 0000 0000             		lea	(CollArray1).l,a2
00016A42 1032 1000                  		move.b	(a2,d1.w),d0
00016A46 4880                       		ext.w	d0
00016A48 BD44                       		eor.w	d6,d4
00016A4A 0804 000C                  		btst	#$C,d4
00016A4E 6700                       		beq.s	loc_14A3E
00016A50 4440                       		neg.w	d0
00016A52                            
00016A52                            loc_14A3E:
00016A52 4A40                       		tst.w	d0
00016A54 679C                       		beq.s	loc_149DE
00016A56 6B00                       		bmi.s	loc_14A5A
00016A58 0C00 0010                  		cmpi.b	#$10,d0
00016A5C 6700                       		beq.s	loc_14A66
00016A5E 3202                       		move.w	d2,d1
00016A60 0241 000F                  		andi.w	#$F,d1
00016A64 D041                       		add.w	d1,d0
00016A66 323C 000F                  		move.w	#$F,d1
00016A6A 9240                       		sub.w	d0,d1
00016A6C 4E75                       		rts	
00016A6E                            ; ===========================================================================
00016A6E                            
00016A6E                            loc_14A5A:
00016A6E 3202                       		move.w	d2,d1
00016A70 0241 000F                  		andi.w	#$F,d1
00016A74 D041                       		add.w	d1,d0
00016A76 6A00 FF7A                  		bpl.w	loc_149DE
00016A7A                            
00016A7A                            loc_14A66:
00016A7A 944B                       		sub.w	a3,d2
00016A7C 6100 0000                  		bsr.w	FindFloor2
00016A80 D44B                       		add.w	a3,d2
00016A82 0441 0010                  		subi.w	#$10,d1
00016A86 4E75                       		rts	
00016A88                            ; End of function FindFloor
00016A88                            
00016A88                            
00016A88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A88                            
00016A88                            
00016A88                            FindFloor2:				; XREF: FindFloor
00016A88 6100 FEA4                  		bsr.w	Floor_ChkTile
00016A8C 3011                       		move.w	(a1),d0
00016A8E 3800                       		move.w	d0,d4
00016A90 0240 07FF                  		andi.w	#$7FF,d0
00016A94 6700                       		beq.s	loc_14A86
00016A96 0B04                       		btst	d5,d4
00016A98 6600                       		bne.s	loc_14A94
00016A9A                            
00016A9A                            loc_14A86:
00016A9A 323C 000F                  		move.w	#$F,d1
00016A9E 3002                       		move.w	d2,d0
00016AA0 0240 000F                  		andi.w	#$F,d0
00016AA4 9240                       		sub.w	d0,d1
00016AA6 4E75                       		rts	
00016AA8                            ; ===========================================================================
00016AA8                            
00016AA8                            loc_14A94:
00016AA8 2478 F796                  		movea.l	($FFFFF796).w,a2
00016AAC 1032 0000                  		move.b	(a2,d0.w),d0
00016AB0 0240 00FF                  		andi.w	#$FF,d0
00016AB4 67E4                       		beq.s	loc_14A86
00016AB6 45F9 0000 0000             		lea	(AngleMap).l,a2
00016ABC 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016AC0 E948                       		lsl.w	#4,d0
00016AC2 3203                       		move.w	d3,d1
00016AC4 0804 000B                  		btst	#$B,d4
00016AC8 6700                       		beq.s	loc_14ABA
00016ACA 4641                       		not.w	d1
00016ACC 4414                       		neg.b	(a4)
00016ACE                            
00016ACE                            loc_14ABA:
00016ACE 0804 000C                  		btst	#$C,d4
00016AD2 6700                       		beq.s	loc_14ACA
00016AD4 0614 0040                  		addi.b	#$40,(a4)
00016AD8 4414                       		neg.b	(a4)
00016ADA 0414 0040                  		subi.b	#$40,(a4)
00016ADE                            
00016ADE                            loc_14ACA:
00016ADE 0241 000F                  		andi.w	#$F,d1
00016AE2 D240                       		add.w	d0,d1
00016AE4 45F9 0000 0000             		lea	(CollArray1).l,a2
00016AEA 1032 1000                  		move.b	(a2,d1.w),d0
00016AEE 4880                       		ext.w	d0
00016AF0 BD44                       		eor.w	d6,d4
00016AF2 0804 000C                  		btst	#$C,d4
00016AF6 6700                       		beq.s	loc_14AE6
00016AF8 4440                       		neg.w	d0
00016AFA                            
00016AFA                            loc_14AE6:
00016AFA 4A40                       		tst.w	d0
00016AFC 679C                       		beq.s	loc_14A86
00016AFE 6B00                       		bmi.s	loc_14AFC
00016B00 3202                       		move.w	d2,d1
00016B02 0241 000F                  		andi.w	#$F,d1
00016B06 D041                       		add.w	d1,d0
00016B08 323C 000F                  		move.w	#$F,d1
00016B0C 9240                       		sub.w	d0,d1
00016B0E 4E75                       		rts	
00016B10                            ; ===========================================================================
00016B10                            
00016B10                            loc_14AFC:
00016B10 3202                       		move.w	d2,d1
00016B12 0241 000F                  		andi.w	#$F,d1
00016B16 D041                       		add.w	d1,d0
00016B18 6A00 FF80                  		bpl.w	loc_14A86
00016B1C 4641                       		not.w	d1
00016B1E 4E75                       		rts	
00016B20                            ; End of function FindFloor2
00016B20                            
00016B20                            
00016B20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016B20                            
00016B20                            
00016B20                            FindWall:				; XREF: Sonic_WalkVertR; et al
00016B20 6100 FE0C                  		bsr.w	Floor_ChkTile
00016B24 3011                       		move.w	(a1),d0
00016B26 3800                       		move.w	d0,d4
00016B28 0240 07FF                  		andi.w	#$7FF,d0
00016B2C 6700                       		beq.s	loc_14B1E
00016B2E 0B04                       		btst	d5,d4
00016B30 6600                       		bne.s	loc_14B2C
00016B32                            
00016B32                            loc_14B1E:
00016B32 D64B                       		add.w	a3,d3
00016B34 6100 0000                  		bsr.w	FindWall2
00016B38 964B                       		sub.w	a3,d3
00016B3A 0641 0010                  		addi.w	#$10,d1
00016B3E 4E75                       		rts	
00016B40                            ; ===========================================================================
00016B40                            
00016B40                            loc_14B2C:
00016B40 2478 F796                  		movea.l	($FFFFF796).w,a2
00016B44 1032 0000                  		move.b	(a2,d0.w),d0
00016B48 0240 00FF                  		andi.w	#$FF,d0
00016B4C 67E4                       		beq.s	loc_14B1E
00016B4E 45F9 0000 0000             		lea	(AngleMap).l,a2
00016B54 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016B58 E948                       		lsl.w	#4,d0
00016B5A 3202                       		move.w	d2,d1
00016B5C 0804 000C                  		btst	#$C,d4
00016B60 6700                       		beq.s	loc_14B5A
00016B62 4641                       		not.w	d1
00016B64 0614 0040                  		addi.b	#$40,(a4)
00016B68 4414                       		neg.b	(a4)
00016B6A 0414 0040                  		subi.b	#$40,(a4)
00016B6E                            
00016B6E                            loc_14B5A:
00016B6E 0804 000B                  		btst	#$B,d4
00016B72 6700                       		beq.s	loc_14B62
00016B74 4414                       		neg.b	(a4)
00016B76                            
00016B76                            loc_14B62:
00016B76 0241 000F                  		andi.w	#$F,d1
00016B7A D240                       		add.w	d0,d1
00016B7C 45F9 0000 0000             		lea	(CollArray2).l,a2
00016B82 1032 1000                  		move.b	(a2,d1.w),d0
00016B86 4880                       		ext.w	d0
00016B88 BD44                       		eor.w	d6,d4
00016B8A 0804 000B                  		btst	#$B,d4
00016B8E 6700                       		beq.s	loc_14B7E
00016B90 4440                       		neg.w	d0
00016B92                            
00016B92                            loc_14B7E:
00016B92 4A40                       		tst.w	d0
00016B94 679C                       		beq.s	loc_14B1E
00016B96 6B00                       		bmi.s	loc_14B9A
00016B98 0C00 0010                  		cmpi.b	#$10,d0
00016B9C 6700                       		beq.s	loc_14BA6
00016B9E 3203                       		move.w	d3,d1
00016BA0 0241 000F                  		andi.w	#$F,d1
00016BA4 D041                       		add.w	d1,d0
00016BA6 323C 000F                  		move.w	#$F,d1
00016BAA 9240                       		sub.w	d0,d1
00016BAC 4E75                       		rts	
00016BAE                            ; ===========================================================================
00016BAE                            
00016BAE                            loc_14B9A:
00016BAE 3203                       		move.w	d3,d1
00016BB0 0241 000F                  		andi.w	#$F,d1
00016BB4 D041                       		add.w	d1,d0
00016BB6 6A00 FF7A                  		bpl.w	loc_14B1E
00016BBA                            
00016BBA                            loc_14BA6:
00016BBA 964B                       		sub.w	a3,d3
00016BBC 6100 0000                  		bsr.w	FindWall2
00016BC0 D64B                       		add.w	a3,d3
00016BC2 0441 0010                  		subi.w	#$10,d1
00016BC6 4E75                       		rts	
00016BC8                            ; End of function FindWall
00016BC8                            
00016BC8                            
00016BC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016BC8                            
00016BC8                            
00016BC8                            FindWall2:				; XREF: FindWall
00016BC8 6100 FD64                  		bsr.w	Floor_ChkTile
00016BCC 3011                       		move.w	(a1),d0
00016BCE 3800                       		move.w	d0,d4
00016BD0 0240 07FF                  		andi.w	#$7FF,d0
00016BD4 6700                       		beq.s	loc_14BC6
00016BD6 0B04                       		btst	d5,d4
00016BD8 6600                       		bne.s	loc_14BD4
00016BDA                            
00016BDA                            loc_14BC6:
00016BDA 323C 000F                  		move.w	#$F,d1
00016BDE 3003                       		move.w	d3,d0
00016BE0 0240 000F                  		andi.w	#$F,d0
00016BE4 9240                       		sub.w	d0,d1
00016BE6 4E75                       		rts	
00016BE8                            ; ===========================================================================
00016BE8                            
00016BE8                            loc_14BD4:
00016BE8 2478 F796                  		movea.l	($FFFFF796).w,a2
00016BEC 1032 0000                  		move.b	(a2,d0.w),d0
00016BF0 0240 00FF                  		andi.w	#$FF,d0
00016BF4 67E4                       		beq.s	loc_14BC6
00016BF6 45F9 0000 0000             		lea	(AngleMap).l,a2
00016BFC 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016C00 E948                       		lsl.w	#4,d0
00016C02 3202                       		move.w	d2,d1
00016C04 0804 000C                  		btst	#$C,d4
00016C08 6700                       		beq.s	loc_14C02
00016C0A 4641                       		not.w	d1
00016C0C 0614 0040                  		addi.b	#$40,(a4)
00016C10 4414                       		neg.b	(a4)
00016C12 0414 0040                  		subi.b	#$40,(a4)
00016C16                            
00016C16                            loc_14C02:
00016C16 0804 000B                  		btst	#$B,d4
00016C1A 6700                       		beq.s	loc_14C0A
00016C1C 4414                       		neg.b	(a4)
00016C1E                            
00016C1E                            loc_14C0A:
00016C1E 0241 000F                  		andi.w	#$F,d1
00016C22 D240                       		add.w	d0,d1
00016C24 45F9 0000 0000             		lea	(CollArray2).l,a2
00016C2A 1032 1000                  		move.b	(a2,d1.w),d0
00016C2E 4880                       		ext.w	d0
00016C30 BD44                       		eor.w	d6,d4
00016C32 0804 000B                  		btst	#$B,d4
00016C36 6700                       		beq.s	loc_14C26
00016C38 4440                       		neg.w	d0
00016C3A                            
00016C3A                            loc_14C26:
00016C3A 4A40                       		tst.w	d0
00016C3C 679C                       		beq.s	loc_14BC6
00016C3E 6B00                       		bmi.s	loc_14C3C
00016C40 3203                       		move.w	d3,d1
00016C42 0241 000F                  		andi.w	#$F,d1
00016C46 D041                       		add.w	d1,d0
00016C48 323C 000F                  		move.w	#$F,d1
00016C4C 9240                       		sub.w	d0,d1
00016C4E 4E75                       		rts	
00016C50                            ; ===========================================================================
00016C50                            
00016C50                            loc_14C3C:
00016C50 3203                       		move.w	d3,d1
00016C52 0241 000F                  		andi.w	#$F,d1
00016C56 D041                       		add.w	d1,d0
00016C58 6A00 FF80                  		bpl.w	loc_14BC6
00016C5C 4641                       		not.w	d1
00016C5E 4E75                       		rts	
00016C60                            ; End of function FindWall2
00016C60                            
00016C60                            ; ---------------------------------------------------------------------------
00016C60                            ; Unused floor/wall subroutine - logs something	to do with collision
00016C60                            ; ---------------------------------------------------------------------------
00016C60                            
00016C60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C60                            
00016C60                            
00016C60                            FloorLog_Unk:				; XREF: Level
00016C60 4E75                       		rts	
00016C62                            
00016C62 43F9 0000 0000             		lea	(CollArray1).l,a1
00016C68 45F9 0000 0000             		lea	(CollArray1).l,a2
00016C6E 363C 00FF                  		move.w	#$FF,d3
00016C72                            
00016C72                            loc_14C5E:
00016C72 7A10                       		moveq	#$10,d5
00016C74 343C 000F                  		move.w	#$F,d2
00016C78                            
00016C78                            loc_14C64:
00016C78 7800                       		moveq	#0,d4
00016C7A 323C 000F                  		move.w	#$F,d1
00016C7E                            
00016C7E                            loc_14C6A:
00016C7E 3019                       		move.w	(a1)+,d0
00016C80 EAA8                       		lsr.l	d5,d0
00016C82 D944                       		addx.w	d4,d4
00016C84 51C9 FFF8                  		dbf	d1,loc_14C6A
00016C88                            
00016C88 34C4                       		move.w	d4,(a2)+
00016C8A 92FC 0020                  		suba.w	#$20,a1
00016C8E 5345                       		subq.w	#1,d5
00016C90 51CA FFE6                  		dbf	d2,loc_14C64
00016C94                            
00016C94 D2FC 0020                  		adda.w	#$20,a1
00016C98 51CB FFD8                  		dbf	d3,loc_14C5E
00016C9C                            
00016C9C 43F9 0000 0000             		lea	(CollArray1).l,a1
00016CA2 45F9 0000 0000             		lea	(CollArray2).l,a2
00016CA8 6100                       		bsr.s	FloorLog_Unk2
00016CAA 43F9 0000 0000             		lea	(CollArray1).l,a1
00016CB0 45F9 0000 0000             		lea	(CollArray1).l,a2
00016CB6                            
00016CB6                            ; End of function FloorLog_Unk
00016CB6                            
00016CB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016CB6                            
00016CB6                            
00016CB6                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00016CB6 363C 0FFF                  		move.w	#$FFF,d3
00016CBA                            
00016CBA                            loc_14CA6:
00016CBA 7400                       		moveq	#0,d2
00016CBC 323C 000F                  		move.w	#$F,d1
00016CC0 3019                       		move.w	(a1)+,d0
00016CC2 6700                       		beq.s	loc_14CD4
00016CC4 6B00                       		bmi.s	loc_14CBE
00016CC6                            
00016CC6                            loc_14CB2:
00016CC6 E248                       		lsr.w	#1,d0
00016CC8 6400                       		bcc.s	loc_14CB8
00016CCA 5202                       		addq.b	#1,d2
00016CCC                            
00016CCC                            loc_14CB8:
00016CCC 51C9 FFF8                  		dbf	d1,loc_14CB2
00016CD0                            
00016CD0 6000                       		bra.s	loc_14CD6
00016CD2                            ; ===========================================================================
00016CD2                            
00016CD2                            loc_14CBE:
00016CD2 0C40 FFFF                  		cmpi.w	#-1,d0
00016CD6 6700                       		beq.s	loc_14CD0
00016CD8                            
00016CD8                            loc_14CC4:
00016CD8 E348                       		lsl.w	#1,d0
00016CDA 6400                       		bcc.s	loc_14CCA
00016CDC 5302                       		subq.b	#1,d2
00016CDE                            
00016CDE                            loc_14CCA:
00016CDE 51C9 FFF8                  		dbf	d1,loc_14CC4
00016CE2                            
00016CE2 6000                       		bra.s	loc_14CD6
00016CE4                            ; ===========================================================================
00016CE4                            
00016CE4                            loc_14CD0:
00016CE4 303C 0010                  		move.w	#$10,d0
00016CE8                            
00016CE8                            loc_14CD4:
00016CE8 3400                       		move.w	d0,d2
00016CEA                            
00016CEA                            loc_14CD6:
00016CEA 14C2                       		move.b	d2,(a2)+
00016CEC 51CB FFCC                  		dbf	d3,loc_14CA6
00016CF0                            
00016CF0 4E75                       		rts	
00016CF2                            
00016CF2                            ; End of function FloorLog_Unk2
00016CF2                            
00016CF2                            
00016CF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016CF2                            
00016CF2                            
00016CF2                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00016CF2 2628 0008                  		move.l	8(a0),d3
00016CF6 2428 000C                  		move.l	$C(a0),d2
00016CFA 3228 0010                  		move.w	$10(a0),d1
00016CFE 48C1                       		ext.l	d1
00016D00 E181                       		asl.l	#8,d1
00016D02 D681                       		add.l	d1,d3
00016D04 3228 0012                  		move.w	$12(a0),d1
00016D08 48C1                       		ext.l	d1
00016D0A E181                       		asl.l	#8,d1
00016D0C D481                       		add.l	d1,d2
00016D0E 4842                       		swap	d2
00016D10 4843                       		swap	d3
00016D12 11C0 F768                  		move.b	d0,($FFFFF768).w
00016D16 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016D1A 1200                       		move.b	d0,d1
00016D1C 0600 0020                  		addi.b	#$20,d0
00016D20 6A00                       		bpl.s	loc_14D1A
00016D22 1001                       		move.b	d1,d0
00016D24 6A00                       		bpl.s	loc_14D14
00016D26 5300                       		subq.b	#1,d0
00016D28                            
00016D28                            loc_14D14:
00016D28 0600 0020                  		addi.b	#$20,d0
00016D2C 6000                       		bra.s	loc_14D24
00016D2E                            ; ===========================================================================
00016D2E                            
00016D2E                            loc_14D1A:
00016D2E 1001                       		move.b	d1,d0
00016D30 6A00                       		bpl.s	loc_14D20
00016D32 5200                       		addq.b	#1,d0
00016D34                            
00016D34                            loc_14D20:
00016D34 0600 001F                  		addi.b	#$1F,d0
00016D38                            
00016D38                            loc_14D24:
00016D38 0200 00C0                  		andi.b	#$C0,d0
00016D3C 6700 0000                  		beq.w	loc_14DF0
00016D40 0C00 0080                  		cmpi.b	#$80,d0
00016D44 6700 0000                  		beq.w	loc_14F7C
00016D48 0201 0038                  		andi.b	#$38,d1
00016D4C 6600                       		bne.s	loc_14D3C
00016D4E 5042                       		addq.w	#8,d2
00016D50                            
00016D50                            loc_14D3C:
00016D50 0C00 0040                  		cmpi.b	#$40,d0
00016D54 6700 0000                  		beq.w	loc_1504A
00016D58 6000 0000                  		bra.w	loc_14EBC
00016D5C                            
00016D5C                            ; End of function Sonic_WalkSpeed
00016D5C                            
00016D5C                            
00016D5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016D5C                            
00016D5C                            
00016D5C                            sub_14D48:				; XREF: Sonic_Jump
00016D5C 11C0 F768                  		move.b	d0,($FFFFF768).w
00016D60 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016D64 0600 0020                  		addi.b	#$20,d0
00016D68 0200 00C0                  		andi.b	#$C0,d0
00016D6C 0C00 0040                  		cmpi.b	#$40,d0
00016D70 6700 0000                  		beq.w	loc_14FD6
00016D74 0C00 0080                  		cmpi.b	#$80,d0
00016D78 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00016D7C 0C00 00C0                  		cmpi.b	#$C0,d0
00016D80 6700 0000                  		beq.w	sub_14E50
00016D84                            
00016D84                            ; End of function sub_14D48
00016D84                            
00016D84                            ; ---------------------------------------------------------------------------
00016D84                            ; Subroutine to	make Sonic land	on the floor after jumping
00016D84                            ; ---------------------------------------------------------------------------
00016D84                            
00016D84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016D84                            
00016D84                            
00016D84                            Sonic_HitFloor:				; XREF: Sonic_Floor
00016D84 3428 000C                  		move.w	$C(a0),d2
00016D88 3628 0008                  		move.w	8(a0),d3
00016D8C 7000                       		moveq	#0,d0
00016D8E 1028 0016                  		move.b	$16(a0),d0
00016D92 4880                       		ext.w	d0
00016D94 D440                       		add.w	d0,d2
00016D96 1028 0017                  		move.b	$17(a0),d0
00016D9A 4880                       		ext.w	d0
00016D9C D640                       		add.w	d0,d3
00016D9E 49F8 F768                  		lea	($FFFFF768).w,a4
00016DA2 367C 0010                  		movea.w	#$10,a3
00016DA6 3C3C 0000                  		move.w	#0,d6
00016DAA 7A0D                       		moveq	#$D,d5
00016DAC 6100 FC32                  		bsr.w	FindFloor
00016DB0 3F01                       		move.w	d1,-(sp)
00016DB2 3428 000C                  		move.w	$C(a0),d2
00016DB6 3628 0008                  		move.w	8(a0),d3
00016DBA 7000                       		moveq	#0,d0
00016DBC 1028 0016                  		move.b	$16(a0),d0
00016DC0 4880                       		ext.w	d0
00016DC2 D440                       		add.w	d0,d2
00016DC4 1028 0017                  		move.b	$17(a0),d0
00016DC8 4880                       		ext.w	d0
00016DCA 9640                       		sub.w	d0,d3
00016DCC 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016DD0 367C 0010                  		movea.w	#$10,a3
00016DD4 3C3C 0000                  		move.w	#0,d6
00016DD8 7A0D                       		moveq	#$D,d5
00016DDA 6100 FC04                  		bsr.w	FindFloor
00016DDE 301F                       		move.w	(sp)+,d0
00016DE0 143C 0000                  		move.b	#0,d2
00016DE4                            
00016DE4                            loc_14DD0:
00016DE4 1638 F76A                  		move.b	($FFFFF76A).w,d3
00016DE8 B240                       		cmp.w	d0,d1
00016DEA 6F00                       		ble.s	loc_14DDE
00016DEC 1638 F768                  		move.b	($FFFFF768).w,d3
00016DF0 C141                       		exg	d0,d1
00016DF2                            
00016DF2                            loc_14DDE:
00016DF2 0803 0000                  		btst	#0,d3
00016DF6 6700                       		beq.s	locret_14DE6
00016DF8 1602                       		move.b	d2,d3
00016DFA                            
00016DFA                            locret_14DE6:
00016DFA 4E75                       		rts	
00016DFC                            
00016DFC                            ; End of function Sonic_HitFloor
00016DFC                            
00016DFC                            ; ===========================================================================
00016DFC 3428 000C                  		move.w	$C(a0),d2
00016E00 3628 0008                  		move.w	8(a0),d3
00016E04                            
00016E04                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00016E04 0642 000A                  		addi.w	#$A,d2
00016E08 49F8 F768                  		lea	($FFFFF768).w,a4
00016E0C 367C 0010                  		movea.w	#$10,a3
00016E10 3C3C 0000                  		move.w	#0,d6
00016E14 7A0E                       		moveq	#$E,d5
00016E16 6100 FBC8                  		bsr.w	FindFloor
00016E1A 143C 0000                  		move.b	#0,d2
00016E1E                            
00016E1E                            loc_14E0A:				; XREF: sub_14EB4
00016E1E 1638 F768                  		move.b	($FFFFF768).w,d3
00016E22 0803 0000                  		btst	#0,d3
00016E26 6700                       		beq.s	locret_14E16
00016E28 1602                       		move.b	d2,d3
00016E2A                            
00016E2A                            locret_14E16:
00016E2A 4E75                       		rts	
00016E2C                            
00016E2C                            ; ---------------------------------------------------------------------------
00016E2C                            ; Subroutine allowing objects to interact with the floor
00016E2C                            ; ---------------------------------------------------------------------------
00016E2C                            
00016E2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E2C                            
00016E2C                            
00016E2C                            ObjHitFloor:
00016E2C 3628 0008                  		move.w	8(a0),d3
00016E30                            
00016E30                            ; End of function ObjHitFloor
00016E30                            
00016E30                            
00016E30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E30                            
00016E30                            
00016E30                            ObjHitFloor2:
00016E30 3428 000C                  		move.w	$C(a0),d2
00016E34 7000                       		moveq	#0,d0
00016E36 1028 0016                  		move.b	$16(a0),d0
00016E3A 4880                       		ext.w	d0
00016E3C D440                       		add.w	d0,d2
00016E3E 49F8 F768                  		lea	($FFFFF768).w,a4
00016E42 18BC 0000                  		move.b	#0,(a4)
00016E46 367C 0010                  		movea.w	#$10,a3
00016E4A 3C3C 0000                  		move.w	#0,d6
00016E4E 7A0D                       		moveq	#$D,d5
00016E50 6100 FB8E                  		bsr.w	FindFloor
00016E54 1638 F768                  		move.b	($FFFFF768).w,d3
00016E58 0803 0000                  		btst	#0,d3
00016E5C 6700                       		beq.s	locret_14E4E
00016E5E 163C 0000                  		move.b	#0,d3
00016E62                            
00016E62                            locret_14E4E:
00016E62 4E75                       		rts	
00016E64                            ; End of function ObjHitFloor2
00016E64                            
00016E64                            
00016E64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E64                            
00016E64                            
00016E64                            sub_14E50:				; XREF: sub_14D48
00016E64 3428 000C                  		move.w	$C(a0),d2
00016E68 3628 0008                  		move.w	8(a0),d3
00016E6C 7000                       		moveq	#0,d0
00016E6E 1028 0017                  		move.b	$17(a0),d0
00016E72 4880                       		ext.w	d0
00016E74 9440                       		sub.w	d0,d2
00016E76 1028 0016                  		move.b	$16(a0),d0
00016E7A 4880                       		ext.w	d0
00016E7C D640                       		add.w	d0,d3
00016E7E 49F8 F768                  		lea	($FFFFF768).w,a4
00016E82 367C 0010                  		movea.w	#$10,a3
00016E86 3C3C 0000                  		move.w	#0,d6
00016E8A 7A0E                       		moveq	#$E,d5
00016E8C 6100 FC92                  		bsr.w	FindWall
00016E90 3F01                       		move.w	d1,-(sp)
00016E92 3428 000C                  		move.w	$C(a0),d2
00016E96 3628 0008                  		move.w	8(a0),d3
00016E9A 7000                       		moveq	#0,d0
00016E9C 1028 0017                  		move.b	$17(a0),d0
00016EA0 4880                       		ext.w	d0
00016EA2 D440                       		add.w	d0,d2
00016EA4 1028 0016                  		move.b	$16(a0),d0
00016EA8 4880                       		ext.w	d0
00016EAA D640                       		add.w	d0,d3
00016EAC 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016EB0 367C 0010                  		movea.w	#$10,a3
00016EB4 3C3C 0000                  		move.w	#0,d6
00016EB8 7A0E                       		moveq	#$E,d5
00016EBA 6100 FC64                  		bsr.w	FindWall
00016EBE 301F                       		move.w	(sp)+,d0
00016EC0 143C 00C0                  		move.b	#-$40,d2
00016EC4 6000 FF1E                  		bra.w	loc_14DD0
00016EC8                            
00016EC8                            ; End of function sub_14E50
00016EC8                            
00016EC8                            
00016EC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016EC8                            
00016EC8                            
00016EC8                            sub_14EB4:				; XREF: Sonic_Floor
00016EC8 3428 000C                  		move.w	$C(a0),d2
00016ECC 3628 0008                  		move.w	8(a0),d3
00016ED0                            
00016ED0                            loc_14EBC:
00016ED0 0643 000A                  		addi.w	#$A,d3
00016ED4 49F8 F768                  		lea	($FFFFF768).w,a4
00016ED8 367C 0010                  		movea.w	#$10,a3
00016EDC 3C3C 0000                  		move.w	#0,d6
00016EE0 7A0E                       		moveq	#$E,d5
00016EE2 6100 FC3C                  		bsr.w	FindWall
00016EE6 143C 00C0                  		move.b	#-$40,d2
00016EEA 6000 FF32                  		bra.w	loc_14E0A
00016EEE                            
00016EEE                            ; End of function sub_14EB4
00016EEE                            
00016EEE                            ; ---------------------------------------------------------------------------
00016EEE                            ; Subroutine to	detect when an object hits a wall to its right
00016EEE                            ; ---------------------------------------------------------------------------
00016EEE                            
00016EEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016EEE                            
00016EEE                            
00016EEE                            ObjHitWallRight:
00016EEE D668 0008                  		add.w	8(a0),d3
00016EF2 3428 000C                  		move.w	$C(a0),d2
00016EF6 49F8 F768                  		lea	($FFFFF768).w,a4
00016EFA 18BC 0000                  		move.b	#0,(a4)
00016EFE 367C 0010                  		movea.w	#$10,a3
00016F02 3C3C 0000                  		move.w	#0,d6
00016F06 7A0E                       		moveq	#$E,d5
00016F08 6100 FC16                  		bsr.w	FindWall
00016F0C 1638 F768                  		move.b	($FFFFF768).w,d3
00016F10 0803 0000                  		btst	#0,d3
00016F14 6700                       		beq.s	locret_14F06
00016F16 163C 00C0                  		move.b	#-$40,d3
00016F1A                            
00016F1A                            locret_14F06:
00016F1A 4E75                       		rts	
00016F1C                            
00016F1C                            ; End of function ObjHitWallRight
00016F1C                            
00016F1C                            ; ---------------------------------------------------------------------------
00016F1C                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00016F1C                            ; touches them
00016F1C                            ; ---------------------------------------------------------------------------
00016F1C                            
00016F1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F1C                            
00016F1C                            
00016F1C                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00016F1C 3428 000C                  		move.w	$C(a0),d2
00016F20 3628 0008                  		move.w	8(a0),d3
00016F24 7000                       		moveq	#0,d0
00016F26 1028 0016                  		move.b	$16(a0),d0
00016F2A 4880                       		ext.w	d0
00016F2C 9440                       		sub.w	d0,d2
00016F2E 0A42 000F                  		eori.w	#$F,d2
00016F32 1028 0017                  		move.b	$17(a0),d0
00016F36 4880                       		ext.w	d0
00016F38 D640                       		add.w	d0,d3
00016F3A 49F8 F768                  		lea	($FFFFF768).w,a4
00016F3E 367C FFF0                  		movea.w	#-$10,a3
00016F42 3C3C 1000                  		move.w	#$1000,d6
00016F46 7A0E                       		moveq	#$E,d5
00016F48 6100 FA96                  		bsr.w	FindFloor
00016F4C 3F01                       		move.w	d1,-(sp)
00016F4E 3428 000C                  		move.w	$C(a0),d2
00016F52 3628 0008                  		move.w	8(a0),d3
00016F56 7000                       		moveq	#0,d0
00016F58 1028 0016                  		move.b	$16(a0),d0
00016F5C 4880                       		ext.w	d0
00016F5E 9440                       		sub.w	d0,d2
00016F60 0A42 000F                  		eori.w	#$F,d2
00016F64 1028 0017                  		move.b	$17(a0),d0
00016F68 4880                       		ext.w	d0
00016F6A 9640                       		sub.w	d0,d3
00016F6C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016F70 367C FFF0                  		movea.w	#-$10,a3
00016F74 3C3C 1000                  		move.w	#$1000,d6
00016F78 7A0E                       		moveq	#$E,d5
00016F7A 6100 FA64                  		bsr.w	FindFloor
00016F7E 301F                       		move.w	(sp)+,d0
00016F80 143C 0080                  		move.b	#-$80,d2
00016F84 6000 FE5E                  		bra.w	loc_14DD0
00016F88                            ; End of function Sonic_DontRunOnWalls
00016F88                            
00016F88                            ; ===========================================================================
00016F88 3428 000C                  		move.w	$C(a0),d2
00016F8C 3628 0008                  		move.w	8(a0),d3
00016F90                            
00016F90                            loc_14F7C:
00016F90 0442 000A                  		subi.w	#$A,d2
00016F94 0A42 000F                  		eori.w	#$F,d2
00016F98 49F8 F768                  		lea	($FFFFF768).w,a4
00016F9C 367C FFF0                  		movea.w	#-$10,a3
00016FA0 3C3C 1000                  		move.w	#$1000,d6
00016FA4 7A0E                       		moveq	#$E,d5
00016FA6 6100 FA38                  		bsr.w	FindFloor
00016FAA 143C 0080                  		move.b	#-$80,d2
00016FAE 6000 FE6E                  		bra.w	loc_14E0A
00016FB2                            
00016FB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016FB2                            
00016FB2                            
00016FB2                            ObjHitCeiling:
00016FB2 3428 000C                  		move.w	$C(a0),d2
00016FB6 3628 0008                  		move.w	8(a0),d3
00016FBA 7000                       		moveq	#0,d0
00016FBC 1028 0016                  		move.b	$16(a0),d0
00016FC0 4880                       		ext.w	d0
00016FC2 9440                       		sub.w	d0,d2
00016FC4 0A42 000F                  		eori.w	#$F,d2
00016FC8 49F8 F768                  		lea	($FFFFF768).w,a4
00016FCC 367C FFF0                  		movea.w	#-$10,a3
00016FD0 3C3C 1000                  		move.w	#$1000,d6
00016FD4 7A0E                       		moveq	#$E,d5
00016FD6 6100 FA08                  		bsr.w	FindFloor
00016FDA 1638 F768                  		move.b	($FFFFF768).w,d3
00016FDE 0803 0000                  		btst	#0,d3
00016FE2 6700                       		beq.s	locret_14FD4
00016FE4 163C 0080                  		move.b	#-$80,d3
00016FE8                            
00016FE8                            locret_14FD4:
00016FE8 4E75                       		rts	
00016FEA                            ; End of function ObjHitCeiling
00016FEA                            
00016FEA                            ; ===========================================================================
00016FEA                            
00016FEA                            loc_14FD6:				; XREF: sub_14D48
00016FEA 3428 000C                  		move.w	$C(a0),d2
00016FEE 3628 0008                  		move.w	8(a0),d3
00016FF2 7000                       		moveq	#0,d0
00016FF4 1028 0017                  		move.b	$17(a0),d0
00016FF8 4880                       		ext.w	d0
00016FFA 9440                       		sub.w	d0,d2
00016FFC 1028 0016                  		move.b	$16(a0),d0
00017000 4880                       		ext.w	d0
00017002 9640                       		sub.w	d0,d3
00017004 0A43 000F                  		eori.w	#$F,d3
00017008 49F8 F768                  		lea	($FFFFF768).w,a4
0001700C 367C FFF0                  		movea.w	#-$10,a3
00017010 3C3C 0800                  		move.w	#$800,d6
00017014 7A0E                       		moveq	#$E,d5
00017016 6100 FB08                  		bsr.w	FindWall
0001701A 3F01                       		move.w	d1,-(sp)
0001701C 3428 000C                  		move.w	$C(a0),d2
00017020 3628 0008                  		move.w	8(a0),d3
00017024 7000                       		moveq	#0,d0
00017026 1028 0017                  		move.b	$17(a0),d0
0001702A 4880                       		ext.w	d0
0001702C D440                       		add.w	d0,d2
0001702E 1028 0016                  		move.b	$16(a0),d0
00017032 4880                       		ext.w	d0
00017034 9640                       		sub.w	d0,d3
00017036 0A43 000F                  		eori.w	#$F,d3
0001703A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001703E 367C FFF0                  		movea.w	#-$10,a3
00017042 3C3C 0800                  		move.w	#$800,d6
00017046 7A0E                       		moveq	#$E,d5
00017048 6100 FAD6                  		bsr.w	FindWall
0001704C 301F                       		move.w	(sp)+,d0
0001704E 143C 0040                  		move.b	#$40,d2
00017052 6000 FD90                  		bra.w	loc_14DD0
00017056                            
00017056                            ; ---------------------------------------------------------------------------
00017056                            ; Subroutine to	stop Sonic when	he jumps at a wall
00017056                            ; ---------------------------------------------------------------------------
00017056                            
00017056                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017056                            
00017056                            
00017056                            Sonic_HitWall:				; XREF: Sonic_Floor
00017056 3428 000C                  		move.w	$C(a0),d2
0001705A 3628 0008                  		move.w	8(a0),d3
0001705E                            
0001705E                            loc_1504A:
0001705E 0443 000A                  		subi.w	#$A,d3
00017062 0A43 000F                  		eori.w	#$F,d3
00017066 49F8 F768                  		lea	($FFFFF768).w,a4
0001706A 367C FFF0                  		movea.w	#-$10,a3
0001706E 3C3C 0800                  		move.w	#$800,d6
00017072 7A0E                       		moveq	#$E,d5
00017074 6100 FAAA                  		bsr.w	FindWall
00017078 143C 0040                  		move.b	#$40,d2
0001707C 6000 FDA0                  		bra.w	loc_14E0A
00017080                            ; End of function Sonic_HitWall
00017080                            
00017080                            ; ---------------------------------------------------------------------------
00017080                            ; Subroutine to	detect when an object hits a wall to its left
00017080                            ; ---------------------------------------------------------------------------
00017080                            
00017080                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017080                            
00017080                            
00017080                            ObjHitWallLeft:
00017080 D668 0008                  		add.w	8(a0),d3
00017084 3428 000C                  		move.w	$C(a0),d2
00017088 49F8 F768                  		lea	($FFFFF768).w,a4
0001708C 18BC 0000                  		move.b	#0,(a4)
00017090 367C FFF0                  		movea.w	#-$10,a3
00017094 3C3C 0800                  		move.w	#$800,d6
00017098 7A0E                       		moveq	#$E,d5
0001709A 6100 FA84                  		bsr.w	FindWall
0001709E 1638 F768                  		move.b	($FFFFF768).w,d3
000170A2 0803 0000                  		btst	#0,d3
000170A6 6700                       		beq.s	locret_15098
000170A8 163C 0040                  		move.b	#$40,d3
000170AC                            
000170AC                            locret_15098:
000170AC 4E75                       		rts	
000170AE                            ; End of function ObjHitWallLeft
000170AE                            
000170AE                            ; ===========================================================================
000170AE                            ; ---------------------------------------------------------------------------
000170AE                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
000170AE                            ; ---------------------------------------------------------------------------
000170AE                            
000170AE                            Obj66:					; XREF: Obj_Index
000170AE 7000                       		moveq	#0,d0
000170B0 1028 0024                  		move.b	$24(a0),d0
000170B4 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
000170B8 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
000170BC                            ; ===========================================================================
000170BC 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
000170BE 0000                       		dc.w Obj66_Action-Obj66_Index
000170C0 0000                       		dc.w Obj66_Display-Obj66_Index
000170C2 0000                       		dc.w Obj66_Release-Obj66_Index
000170C4                            ; ===========================================================================
000170C4                            
000170C4                            Obj66_Main:				; XREF: Obj66_Index
000170C4 5428 0024                  		addq.b	#2,$24(a0)
000170C8 323C 0001                  		move.w	#1,d1
000170CC 2248                       		movea.l	a0,a1
000170CE 6000                       		bra.s	Obj66_MakeItem
000170D0                            ; ===========================================================================
000170D0                            
000170D0                            Obj66_Loop:
000170D0 4EB9 0000 F086             		jsr	(SingleObjLoad).l
000170D6 6600                       		bne.s	loc_150FE
000170D8 12BC 0066                  		move.b	#$66,0(a1)
000170DC 5829 0024                  		addq.b	#4,$24(a1)
000170E0 3368 0008 0008             		move.w	8(a0),8(a1)
000170E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000170EC 137C 0003 0018             		move.b	#3,$18(a1)
000170F2 137C 0010 001A             		move.b	#$10,$1A(a1)
000170F8                            
000170F8                            Obj66_MakeItem:				; XREF: Obj66_Main
000170F8 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00017100 337C 4348 0002             		move.w	#$4348,2(a1)
00017106 0029 0004 0001             		ori.b	#4,1(a1)
0001710C 137C 0038 0019             		move.b	#$38,$19(a1)
00017112                            
00017112                            loc_150FE:
00017112 51C9 FFBC                  		dbf	d1,Obj66_Loop
00017116                            
00017116 117C 0030 0019             		move.b	#$30,$19(a0)
0001711C 117C 0004 0018             		move.b	#4,$18(a0)
00017122 317C 003C 0030             		move.w	#$3C,$30(a0)
00017128 117C 0001 0034             		move.b	#1,$34(a0)
0001712E 1168 0028 0038             		move.b	$28(a0),$38(a0)
00017134                            
00017134                            Obj66_Action:				; XREF: Obj66_Index
00017134 6100 0000                  		bsr.w	Obj66_ChkSwitch
00017138 4A28 0001                  		tst.b	1(a0)
0001713C 6A00 0000                  		bpl.w	Obj66_Display
00017140 323C 0030                  		move.w	#$30,d1
00017144 3401                       		move.w	d1,d2
00017146 3602                       		move.w	d2,d3
00017148 5243                       		addq.w	#1,d3
0001714A 3828 0008                  		move.w	8(a0),d4
0001714E 6100 A14E                  		bsr.w	SolidObject
00017152 0828 0005 0022             		btst	#5,$22(a0)
00017158 6700 0000                  		beq.w	Obj66_Display
0001715C 43F8 D000                  		lea	($FFFFD000).w,a1
00017160 720E                       		moveq	#$E,d1
00017162 3029 0008                  		move.w	8(a1),d0
00017166 B068 0008                  		cmp.w	8(a0),d0
0001716A 6500                       		bcs.s	Obj66_GrabSonic
0001716C 7207                       		moveq	#7,d1
0001716E                            
0001716E                            Obj66_GrabSonic:
0001716E B228 001A                  		cmp.b	$1A(a0),d1
00017172 6600                       		bne.s	Obj66_Display
00017174 1141 0032                  		move.b	d1,$32(a0)
00017178 5828 0024                  		addq.b	#4,$24(a0)
0001717C 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00017182 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00017188 337C 0800 0020             		move.w	#$800,$20(a1)
0001718E 337C 0000 0010             		move.w	#0,$10(a1)
00017194 337C 0000 0012             		move.w	#0,$12(a1)
0001719A 08A8 0005 0022             		bclr	#5,$22(a0)
000171A0 08A9 0005 0022             		bclr	#5,$22(a1)
000171A6 08E9 0001 0022             		bset	#1,$22(a1)
000171AC 3429 0008                  		move.w	8(a1),d2
000171B0 3629 000C                  		move.w	$C(a1),d3
000171B4 6100 0000                  		bsr.w	Obj66_ChgPos
000171B8 D569 0008                  		add.w	d2,8(a1)
000171BC D769 000C                  		add.w	d3,$C(a1)
000171C0 E0E9 0008                  		asr	8(a1)
000171C4 E0E9 000C                  		asr	$C(a1)
000171C8                            
000171C8                            Obj66_Display:				; XREF: Obj66_Index
000171C8 6000 9DB0                  		bra.w	MarkObjGone
000171CC                            ; ===========================================================================
000171CC                            
000171CC                            Obj66_Release:				; XREF: Obj66_Index
000171CC 1028 001A                  		move.b	$1A(a0),d0
000171D0 0C00 0004                  		cmpi.b	#4,d0
000171D4 6700                       		beq.s	loc_151C8
000171D6 0C00 0007                  		cmpi.b	#7,d0
000171DA 6600                       		bne.s	loc_151F8
000171DC                            
000171DC                            loc_151C8:
000171DC B028 0032                  		cmp.b	$32(a0),d0
000171E0 6700                       		beq.s	loc_151F8
000171E2 43F8 D000                  		lea	($FFFFD000).w,a1
000171E6 337C 0000 0010             		move.w	#0,$10(a1)
000171EC 337C 0800 0012             		move.w	#$800,$12(a1)
000171F2 0C00 0004                  		cmpi.b	#4,d0
000171F6 6700                       		beq.s	loc_151F0
000171F8 337C 0800 0010             		move.w	#$800,$10(a1)
000171FE 337C 0800 0012             		move.w	#$800,$12(a1)
00017204                            
00017204                            loc_151F0:
00017204 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00017208 5928 0024                  		subq.b	#4,$24(a0)
0001720C                            
0001720C                            loc_151F8:
0001720C 6100                       		bsr.s	Obj66_ChkSwitch
0001720E 6100                       		bsr.s	Obj66_ChgPos
00017210 6000 9D68                  		bra.w	MarkObjGone
00017214                            
00017214                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017214                            
00017214                            
00017214                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00017214 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017218 7000                       		moveq	#0,d0
0001721A 1028 0038                  		move.b	$38(a0),d0
0001721E 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00017224 6700                       		beq.s	loc_15224	; if not, branch
00017226 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
0001722A 6600                       		bne.s	Obj66_Animate	; if yes, branch
0001722C 4428 0034                  		neg.b	$34(a0)
00017230 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00017236 6000                       		bra.s	Obj66_Animate
00017238                            ; ===========================================================================
00017238                            
00017238                            loc_15224:
00017238 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
0001723C                            
0001723C                            Obj66_Animate:
0001723C 5328 001E                  		subq.b	#1,$1E(a0)
00017240 6A00                       		bpl.s	locret_15246
00017242 117C 0007 001E             		move.b	#7,$1E(a0)
00017248 1228 0034                  		move.b	$34(a0),d1
0001724C 1028 001A                  		move.b	$1A(a0),d0
00017250 D001                       		add.b	d1,d0
00017252 0200 000F                  		andi.b	#$F,d0
00017256 1140 001A                  		move.b	d0,$1A(a0)
0001725A                            
0001725A                            locret_15246:
0001725A 4E75                       		rts	
0001725C                            ; End of function Obj66_ChkSwitch
0001725C                            
0001725C                            
0001725C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001725C                            
0001725C                            
0001725C                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
0001725C 43F8 D000                  		lea	($FFFFD000).w,a1
00017260 7000                       		moveq	#0,d0
00017262 1028 001A                  		move.b	$1A(a0),d0
00017266 D040                       		add.w	d0,d0
00017268 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
0001726C 101A                       		move.b	(a2)+,d0
0001726E 4880                       		ext.w	d0
00017270 D068 0008                  		add.w	8(a0),d0
00017274 3340 0008                  		move.w	d0,8(a1)
00017278 101A                       		move.b	(a2)+,d0
0001727A 4880                       		ext.w	d0
0001727C D068 000C                  		add.w	$C(a0),d0
00017280 3340 000C                  		move.w	d0,$C(a1)
00017284 4E75                       		rts	
00017286                            ; End of function Obj66_ChgPos
00017286                            
00017286                            ; ===========================================================================
00017286 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
0001728A E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
0001728E 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00017292 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00017296 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
0001729A 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
0001729E 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
000172A2 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
000172A6                            ; ---------------------------------------------------------------------------
000172A6                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000172A6                            ; ---------------------------------------------------------------------------
000172A6                            Map_obj66:
000172A6                            	include "_maps\obj66.asm"
000172A6                            ; ---------------------------------------------------------------------------
000172A6                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000172A6                            ; ---------------------------------------------------------------------------
000172A6 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
000172AA 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
000172AE 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
000172B2 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
000172B6 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
000172BA 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
000172BE 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
000172C2 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
000172C6 0000                       		dc.w byte_154A4-Map_obj66
000172C8 06                         byte_152B4:	dc.b 6
000172C9 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000172CE 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000172D3 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000172D8 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000172DD 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000172E2 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000172E7 06                         byte_152D3:	dc.b 6
000172E8 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000172ED 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000172F2 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000172F7 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000172FC 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00017301 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00017306 06                         byte_152F2:	dc.b 6
00017307 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
0001730C 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00017311 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00017316 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
0001731B 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00017320 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00017325 06                         byte_15311:	dc.b 6
00017326 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
0001732B 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00017330 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00017335 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
0001733A 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
0001733F 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00017344 06                         byte_15330:	dc.b 6
00017345 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
0001734A 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
0001734F 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00017354 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00017359 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
0001735E 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00017363 06                         byte_1534F:	dc.b 6
00017364 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00017369 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
0001736E 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00017373 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00017378 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
0001737D 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00017382 06                         byte_1536E:	dc.b 6
00017383 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00017388 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
0001738D 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00017392 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00017397 180A 1000 00               		dc.b $18, $A, $10, 0, 0
0001739C 180A 1800 18               		dc.b $18, $A, $18, 0, $18
000173A1 06                         byte_1538D:	dc.b 6
000173A2 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
000173A7 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000173AC F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000173B1 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000173B6 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000173BB 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000173C0 06                         byte_153AC:	dc.b 6
000173C1 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000173C6 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000173CB E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000173D0 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000173D5 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000173DA 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000173DF 06                         byte_153CB:	dc.b 6
000173E0 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000173E5 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000173EA DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000173EF DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000173F4 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000173F9 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000173FE 06                         byte_153EA:	dc.b 6
000173FF D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00017404 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00017409 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
0001740E D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00017413 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00017418 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
0001741D 06                         byte_15409:	dc.b 6
0001741E D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00017423 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00017428 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
0001742D CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00017432 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00017437 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
0001743C 06                         byte_15428:	dc.b 6
0001743D D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00017442 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00017447 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
0001744C C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00017451 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00017456 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
0001745B 06                         byte_15447:	dc.b 6
0001745C D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00017461 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00017466 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
0001746B CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00017470 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00017475 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
0001747A 06                         byte_15466:	dc.b 6
0001747B E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00017480 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00017485 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
0001748A D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
0001748F E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00017494 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00017499 06                         byte_15485:	dc.b 6
0001749A E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
0001749F D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
000174A4 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
000174A9 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
000174AE F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
000174B3 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
000174B8 0C                         byte_154A4:	dc.b $C
000174B9 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000174BE D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
000174C3 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
000174C8 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
000174CD D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
000174D2 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
000174D7 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
000174DC 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
000174E1 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
000174E6 280D 1809 00               		dc.b $28, $D, $18, 9, 0
000174EB 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
000174F0 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
000174F6 00                         		even
000174F6 00                         		even
000174F6                            
000174F6                            ; ===========================================================================
000174F6                            ; ---------------------------------------------------------------------------
000174F6                            ; Object 67 - disc that	you run	around (SBZ)
000174F6                            ; ---------------------------------------------------------------------------
000174F6                            
000174F6                            Obj67:					; XREF: Obj_Index
000174F6 7000                       		moveq	#0,d0
000174F8 1028 0024                  		move.b	$24(a0),d0
000174FC 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00017500 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00017504                            ; ===========================================================================
00017504 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00017506 0000                       		dc.w Obj67_Action-Obj67_Index
00017508                            ; ===========================================================================
00017508                            
00017508                            Obj67_Main:				; XREF: Obj67_Index
00017508 5428 0024                  		addq.b	#2,$24(a0)
0001750C 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00017514 317C C344 0002             		move.w	#$C344,2(a0)
0001751A 117C 0004 0001             		move.b	#4,1(a0)
00017520 117C 0004 0018             		move.b	#4,$18(a0)
00017526 117C 0008 0019             		move.b	#8,$19(a0)
0001752C 3168 0008 0032             		move.w	8(a0),$32(a0)
00017532 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017538 117C 0018 0034             		move.b	#$18,$34(a0)
0001753E 117C 0048 0038             		move.b	#$48,$38(a0)
00017544 1228 0028                  		move.b	$28(a0),d1	; get object type
00017548 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001754C 6700                       		beq.s	loc_15546
0001754E 117C 0010 0034             		move.b	#$10,$34(a0)
00017554 117C 0038 0038             		move.b	#$38,$38(a0)
0001755A                            
0001755A                            loc_15546:
0001755A 1228 0028                  		move.b	$28(a0),d1	; get object type
0001755E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00017562 4881                       		ext.w	d1
00017564 E741                       		asl.w	#3,d1
00017566 3141 0036                  		move.w	d1,$36(a0)
0001756A 1028 0022                  		move.b	$22(a0),d0
0001756E E418                       		ror.b	#2,d0
00017570 0200 00C0                  		andi.b	#-$40,d0
00017574 1140 0026                  		move.b	d0,$26(a0)
00017578                            
00017578                            Obj67_Action:				; XREF: Obj67_Index
00017578 6100 0000                  		bsr.w	Obj67_MoveSonic
0001757C 6100 0000                  		bsr.w	Obj67_MoveSpot
00017580 6000 0000                  		bra.w	Obj67_ChkDel
00017584                            ; ===========================================================================
00017584                            
00017584                            Obj67_MoveSonic:			; XREF: Obj67_Action
00017584 7400                       		moveq	#0,d2
00017586 1428 0038                  		move.b	$38(a0),d2
0001758A 3602                       		move.w	d2,d3
0001758C D643                       		add.w	d3,d3
0001758E 43F8 D000                  		lea	($FFFFD000).w,a1
00017592 3029 0008                  		move.w	8(a1),d0
00017596 9068 0032                  		sub.w	$32(a0),d0
0001759A D042                       		add.w	d2,d0
0001759C B043                       		cmp.w	d3,d0
0001759E 6400                       		bcc.s	loc_155A8
000175A0 3229 000C                  		move.w	$C(a1),d1
000175A4 9268 0030                  		sub.w	$30(a0),d1
000175A8 D242                       		add.w	d2,d1
000175AA B243                       		cmp.w	d3,d1
000175AC 6400                       		bcc.s	loc_155A8
000175AE 0829 0001 0022             		btst	#1,$22(a1)
000175B4 6700                       		beq.s	loc_155B8
000175B6 4228 003A                  		clr.b	$3A(a0)
000175BA 4E75                       		rts	
000175BC                            ; ===========================================================================
000175BC                            
000175BC                            loc_155A8:
000175BC 4A28 003A                  		tst.b	$3A(a0)
000175C0 6700                       		beq.s	locret_155B6
000175C2 4229 0038                  		clr.b	$38(a1)
000175C6 4228 003A                  		clr.b	$3A(a0)
000175CA                            
000175CA                            locret_155B6:
000175CA 4E75                       		rts	
000175CC                            ; ===========================================================================
000175CC                            
000175CC                            loc_155B8:
000175CC 4A28 003A                  		tst.b	$3A(a0)
000175D0 6600                       		bne.s	loc_155E2
000175D2 117C 0001 003A             		move.b	#1,$3A(a0)
000175D8 0829 0002 0022             		btst	#2,$22(a1)
000175DE 6600                       		bne.s	loc_155D0
000175E0 4229 001C                  		clr.b	$1C(a1)
000175E4                            
000175E4                            loc_155D0:
000175E4 08A9 0005 0022             		bclr	#5,$22(a1)
000175EA 137C 0001 001D             		move.b	#1,$1D(a1)
000175F0 137C 0001 0038             		move.b	#1,$38(a1)
000175F6                            
000175F6                            loc_155E2:
000175F6 3029 0020                  		move.w	$20(a1),d0
000175FA 4A68 0036                  		tst.w	$36(a0)
000175FE 6A00                       		bpl.s	loc_15608
00017600 0C40 FC00                  		cmpi.w	#-$400,d0
00017604 6F00                       		ble.s	loc_155FA
00017606 337C FC00 0020             		move.w	#-$400,$20(a1)
0001760C 4E75                       		rts	
0001760E                            ; ===========================================================================
0001760E                            
0001760E                            loc_155FA:
0001760E 0C40 F100                  		cmpi.w	#-$F00,d0
00017612 6C00                       		bge.s	locret_15606
00017614 337C F100 0020             		move.w	#-$F00,$20(a1)
0001761A                            
0001761A                            locret_15606:
0001761A 4E75                       		rts	
0001761C                            ; ===========================================================================
0001761C                            
0001761C                            loc_15608:
0001761C 0C40 0400                  		cmpi.w	#$400,d0
00017620 6C00                       		bge.s	loc_15616
00017622 337C 0400 0020             		move.w	#$400,$20(a1)
00017628 4E75                       		rts	
0001762A                            ; ===========================================================================
0001762A                            
0001762A                            loc_15616:
0001762A 0C40 0F00                  		cmpi.w	#$F00,d0
0001762E 6F00                       		ble.s	locret_15622
00017630 337C 0F00 0020             		move.w	#$F00,$20(a1)
00017636                            
00017636                            locret_15622:
00017636 4E75                       		rts	
00017638                            ; ===========================================================================
00017638                            
00017638                            Obj67_MoveSpot:				; XREF: Obj67_Action
00017638 3028 0036                  		move.w	$36(a0),d0
0001763C D168 0026                  		add.w	d0,$26(a0)
00017640 1028 0026                  		move.b	$26(a0),d0
00017644 4EB9 0000 29F6             		jsr	(CalcSine).l
0001764A 3428 0030                  		move.w	$30(a0),d2
0001764E 3628 0032                  		move.w	$32(a0),d3
00017652 7800                       		moveq	#0,d4
00017654 1828 0034                  		move.b	$34(a0),d4
00017658 E14C                       		lsl.w	#8,d4
0001765A 2A04                       		move.l	d4,d5
0001765C C9C0                       		muls.w	d0,d4
0001765E 4844                       		swap	d4
00017660 CBC1                       		muls.w	d1,d5
00017662 4845                       		swap	d5
00017664 D842                       		add.w	d2,d4
00017666 DA43                       		add.w	d3,d5
00017668 3144 000C                  		move.w	d4,$C(a0)
0001766C 3145 0008                  		move.w	d5,8(a0)
00017670 4E75                       		rts	
00017672                            ; ===========================================================================
00017672                            
00017672                            Obj67_ChkDel:				; XREF: Obj67_Action
00017672 3028 0032                  		move.w	$32(a0),d0
00017676 0240 FF80                  		andi.w	#-$80,d0
0001767A 3238 F700                  		move.w	($FFFFF700).w,d1
0001767E 0441 0080                  		subi.w	#$80,d1
00017682 0241 FF80                  		andi.w	#-$80,d1
00017686 9041                       		sub.w	d1,d0
00017688 0C40 0280                  		cmpi.w	#$280,d0
0001768C 6200                       		bhi.s	Obj67_Delete
0001768E 4EF9 0000 E930             		jmp	DisplaySprite
00017694                            ; ===========================================================================
00017694                            
00017694                            Obj67_Delete:
00017694 4EF9 0000 E980             		jmp	DeleteObject
0001769A                            ; ===========================================================================
0001769A                            ; ---------------------------------------------------------------------------
0001769A                            ; Sprite mappings - disc that you run around (SBZ)
0001769A                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001769A                            ; part of the level tiles.)
0001769A                            ; ---------------------------------------------------------------------------
0001769A                            Map_obj67:
0001769A                            	include "_maps\obj67.asm"
0001769A                            ; ---------------------------------------------------------------------------
0001769A                            ; Sprite mappings - disc that you run around (SBZ)
0001769A                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001769A                            ; part of the level tiles.)
0001769A                            ; ---------------------------------------------------------------------------
0001769A 0000                       		dc.w byte_15688-Map_obj67
0001769C 01                         byte_15688:	dc.b 1
0001769D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000176A2                            		even
000176A2                            		even
000176A2                            
000176A2                            ; ===========================================================================
000176A2                            ; ---------------------------------------------------------------------------
000176A2                            ; Object 68 - conveyor belts (SBZ)
000176A2                            ; ---------------------------------------------------------------------------
000176A2                            
000176A2                            Obj68:					; XREF: Obj_Index
000176A2 7000                       		moveq	#0,d0
000176A4 1028 0024                  		move.b	$24(a0),d0
000176A8 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
000176AC 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
000176B0                            ; ===========================================================================
000176B0 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
000176B2 0000                       		dc.w Obj68_Action-Obj68_Index
000176B4                            ; ===========================================================================
000176B4                            
000176B4                            Obj68_Main:				; XREF: Obj68_Index
000176B4 5428 0024                  		addq.b	#2,$24(a0)
000176B8 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
000176BE 1228 0028                  		move.b	$28(a0),d1	; get object type
000176C2 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000176C6 6700                       		beq.s	loc_156BA	; if zero, branch
000176C8 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
000176CE                            
000176CE                            loc_156BA:
000176CE 1228 0028                  		move.b	$28(a0),d1	; get object type
000176D2 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000176D6 4881                       		ext.w	d1
000176D8 E841                       		asr.w	#4,d1
000176DA 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
000176DE                            
000176DE                            Obj68_Action:				; XREF: Obj68_Index
000176DE 6100                       		bsr.s	Obj68_MoveSonic
000176E0 3028 0008                  		move.w	8(a0),d0
000176E4 0240 FF80                  		andi.w	#$FF80,d0
000176E8 3238 F700                  		move.w	($FFFFF700).w,d1
000176EC 0441 0080                  		subi.w	#$80,d1
000176F0 0241 FF80                  		andi.w	#$FF80,d1
000176F4 9041                       		sub.w	d1,d0
000176F6 0C40 0280                  		cmpi.w	#$280,d0
000176FA 6300                       		bls.s	Obj68_NoDel
000176FC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017700 6700                       		beq.s	Obj68_Delete		; if it's zero, don't remember object
00017702 3440                       		movea.w	d0,a2	; load address into a2
00017704 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017708 6000                       		bra.s	Obj68_Delete	; and delete object
0001770A                            
0001770A                            Obj68_NoDel:
0001770A 4E75                       		rts	
0001770C                            ; ===========================================================================
0001770C                            
0001770C                            Obj68_Delete:
0001770C 4EF9 0000 E980             		jmp	DeleteObject
00017712                            ; ===========================================================================
00017712                            
00017712                            Obj68_MoveSonic:			; XREF: Obj68_Action
00017712 7400                       		moveq	#0,d2
00017714 1428 0038                  		move.b	$38(a0),d2
00017718 3602                       		move.w	d2,d3
0001771A D643                       		add.w	d3,d3
0001771C 43F8 D000                  		lea	($FFFFD000).w,a1
00017720 3029 0008                  		move.w	8(a1),d0
00017724 9068 0008                  		sub.w	8(a0),d0
00017728 D042                       		add.w	d2,d0
0001772A B043                       		cmp.w	d3,d0
0001772C 6400                       		bcc.s	locret_1572E
0001772E 3229 000C                  		move.w	$C(a1),d1
00017732 9268 000C                  		sub.w	$C(a0),d1
00017736 0641 0030                  		addi.w	#$30,d1
0001773A 0C41 0030                  		cmpi.w	#$30,d1
0001773E 6400                       		bcc.s	locret_1572E
00017740 0829 0001 0022             		btst	#1,$22(a1)
00017746 6600                       		bne.s	locret_1572E
00017748 3028 0036                  		move.w	$36(a0),d0
0001774C D169 0008                  		add.w	d0,8(a1)
00017750                            
00017750                            locret_1572E:
00017750 4E75                       		rts	
00017752                            
00017752                            ; ===========================================================================
00017752                            ; ---------------------------------------------------------------------------
00017752                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00017752                            ; ---------------------------------------------------------------------------
00017752                            
00017752                            Obj69:					; XREF: Obj_Index
00017752 7000                       		moveq	#0,d0
00017754 1028 0024                  		move.b	$24(a0),d0
00017758 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
0001775C 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00017760                            ; ===========================================================================
00017760 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00017762 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00017764 0000                       		dc.w Obj69_Spinner-Obj69_Index
00017766                            ; ===========================================================================
00017766                            
00017766                            Obj69_Main:				; XREF: Obj69_Index
00017766 5428 0024                  		addq.b	#2,$24(a0)
0001776A 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00017772 317C 4492 0002             		move.w	#$4492,2(a0)
00017778 0028 0004 0001             		ori.b	#4,1(a0)
0001777E 117C 0080 0019             		move.b	#$80,$19(a0)
00017784 7000                       		moveq	#0,d0
00017786 1028 0028                  		move.b	$28(a0),d0
0001778A 0240 000F                  		andi.w	#$F,d0
0001778E C0FC 003C                  		mulu.w	#$3C,d0
00017792 3140 0032                  		move.w	d0,$32(a0)
00017796 4A28 0028                  		tst.b	$28(a0)
0001779A 6A00                       		bpl.s	Obj69_Trapdoor
0001779C 5428 0024                  		addq.b	#2,$24(a0)
000177A0 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
000177A8 317C 04DF 0002             		move.w	#$4DF,2(a0)
000177AE 117C 0010 0019             		move.b	#$10,$19(a0)
000177B4 117C 0002 001C             		move.b	#2,$1C(a0)
000177BA 7000                       		moveq	#0,d0
000177BC 1028 0028                  		move.b	$28(a0),d0	; get object type
000177C0 3200                       		move.w	d0,d1
000177C2 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000177C6 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000177CA 3140 0030                  		move.w	d0,$30(a0)	; set time delay
000177CE 3140 0032                  		move.w	d0,$32(a0)
000177D2 0241 0070                  		andi.w	#$70,d1
000177D6 0641 0010                  		addi.w	#$10,d1
000177DA E549                       		lsl.w	#2,d1
000177DC 5341                       		subq.w	#1,d1
000177DE 3141 0036                  		move.w	d1,$36(a0)
000177E2 6000                       		bra.s	Obj69_Spinner
000177E4                            ; ===========================================================================
000177E4                            
000177E4                            Obj69_Trapdoor:				; XREF: Obj69_Index
000177E4 5368 0030                  		subq.w	#1,$30(a0)
000177E8 6A00                       		bpl.s	Obj69_Animate
000177EA 3168 0032 0030             		move.w	$32(a0),$30(a0)
000177F0 0868 0000 001C             		bchg	#0,$1C(a0)
000177F6 4A28 0001                  		tst.b	1(a0)
000177FA 6A00                       		bpl.s	Obj69_Animate
000177FC 303C 00BB                  		move.w	#$BB,d0
00017800 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play door sound
00017806                            
00017806                            Obj69_Animate:
00017806 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001780C 4EB9 0000 B990             		jsr	AnimateSprite
00017812 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00017816 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00017818 323C 004B                  		move.w	#$4B,d1
0001781C 343C 000C                  		move.w	#$C,d2
00017820 3602                       		move.w	d2,d3
00017822 5243                       		addq.w	#1,d3
00017824 3828 0008                  		move.w	8(a0),d4
00017828 6100 9A74                  		bsr.w	SolidObject
0001782C 6000 974C                  		bra.w	MarkObjGone
00017830                            ; ===========================================================================
00017830                            
00017830                            Obj69_NotSolid:
00017830 0828 0003 0022             		btst	#3,$22(a0)
00017836 6700                       		beq.s	Obj69_Display
00017838 43F8 D000                  		lea	($FFFFD000).w,a1
0001783C 08A9 0003 0022             		bclr	#3,$22(a1)
00017842 08A8 0003 0022             		bclr	#3,$22(a0)
00017848 4228 0025                  		clr.b	$25(a0)
0001784C                            
0001784C                            Obj69_Display:
0001784C 6000 972C                  		bra.w	MarkObjGone
00017850                            ; ===========================================================================
00017850                            
00017850                            Obj69_Spinner:				; XREF: Obj69_Index
00017850 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017854 C068 0036                  		and.w	$36(a0),d0
00017858 6600                       		bne.s	Obj69_Delay
0001785A 117C 0001 0034             		move.b	#1,$34(a0)
00017860                            
00017860                            Obj69_Delay:
00017860 4A28 0034                  		tst.b	$34(a0)
00017864 6700                       		beq.s	Obj69_Animate2
00017866 5368 0030                  		subq.w	#1,$30(a0)
0001786A 6A00                       		bpl.s	Obj69_Animate2
0001786C 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017872 4228 0034                  		clr.b	$34(a0)
00017876 0868 0000 001C             		bchg	#0,$1C(a0)
0001787C                            
0001787C                            Obj69_Animate2:
0001787C 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00017882 4EB9 0000 B990             		jsr	AnimateSprite
00017888 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
0001788C 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
0001788E 323C 001B                  		move.w	#$1B,d1
00017892 343C 0007                  		move.w	#7,d2
00017896 3602                       		move.w	d2,d3
00017898 5243                       		addq.w	#1,d3
0001789A 3828 0008                  		move.w	8(a0),d4
0001789E 6100 99FE                  		bsr.w	SolidObject
000178A2 6000 96D6                  		bra.w	MarkObjGone
000178A6                            ; ===========================================================================
000178A6                            
000178A6                            Obj69_NotSolid2:
000178A6 0828 0003 0022             		btst	#3,$22(a0)
000178AC 6700                       		beq.s	Obj69_Display2
000178AE 43F8 D000                  		lea	($FFFFD000).w,a1
000178B2 08A9 0003 0022             		bclr	#3,$22(a1)
000178B8 08A8 0003 0022             		bclr	#3,$22(a0)
000178BE 4228 0025                  		clr.b	$25(a0)
000178C2                            
000178C2                            Obj69_Display2:
000178C2 6000 96B6                  		bra.w	MarkObjGone
000178C6                            ; ===========================================================================
000178C6                            Ani_obj69:
000178C6                            	include "_anim\obj69.asm"
000178C6                            ; ---------------------------------------------------------------------------
000178C6                            ; Animation script - trapdoor (SBZ)
000178C6                            ; ---------------------------------------------------------------------------
000178C6 0000                       		dc.w byte_158AC-Ani_obj69
000178C8 0000                       		dc.w byte_158B2-Ani_obj69
000178CA 0000                       		dc.w byte_158B8-Ani_obj69
000178CC 0000                       		dc.w byte_158CC-Ani_obj69
000178CE 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
000178D4 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000178DA 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000178E7 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000178EE 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000178FB 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00017902                            		even
00017902                            		even
00017902                            
00017902                            ; ---------------------------------------------------------------------------
00017902                            ; Sprite mappings - trapdoor (SBZ)
00017902                            ; ---------------------------------------------------------------------------
00017902                            Map_obj69:
00017902                            	include "_maps\obj69.asm"
00017902                            ; ---------------------------------------------------------------------------
00017902                            ; Sprite mappings - trapdoor (SBZ)
00017902                            ; ---------------------------------------------------------------------------
00017902 0000                       		dc.w byte_158E6-Map_obj69
00017904 0000                       		dc.w byte_158FB-Map_obj69
00017906 0000                       		dc.w byte_15924-Map_obj69
00017908 04                         byte_158E6:	dc.b 4
00017909 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
0001790E F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00017913 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00017918 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
0001791D 08                         byte_158FB:	dc.b 8
0001791E F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00017923 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00017928 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
0001792D 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00017932 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00017937 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
0001793C 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00017941 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00017946 04                         byte_15924:	dc.b 4
00017947 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
0001794C 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00017951 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00017956 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
0001795C 00                         		even
0001795C 00                         		even
0001795C                            
0001795C                            ; ---------------------------------------------------------------------------
0001795C                            ; Sprite mappings - spinning platforms (SBZ)
0001795C                            ; ---------------------------------------------------------------------------
0001795C                            Map_obj69a:
0001795C                            	include "_maps\obj69a.asm"
0001795C                            ; ---------------------------------------------------------------------------
0001795C                            ; Sprite mappings - spinning platforms (SBZ)
0001795C                            ; ---------------------------------------------------------------------------
0001795C 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00017960 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00017964 0000                       		dc.w byte_15970-Map_obj69a
00017966 02                         byte_15944:	dc.b 2
00017967 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0001796C F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00017971 02                         byte_1594F:	dc.b 2
00017972 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00017977 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
0001797C 02                         byte_1595A:	dc.b 2
0001797D F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00017982 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00017987 02                         byte_15965:	dc.b 2
00017988 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
0001798D 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00017992 02                         byte_15970:	dc.b 2
00017993 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00017998 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
0001799E 00                         		even
0001799E 00                         		even
0001799E                            
0001799E                            ; ===========================================================================
0001799E                            ; ---------------------------------------------------------------------------
0001799E                            ; Object 6A - ground saws and pizza cutters (SBZ)
0001799E                            ; ---------------------------------------------------------------------------
0001799E                            
0001799E                            Obj6A:					; XREF: Obj_Index
0001799E 7000                       		moveq	#0,d0
000179A0 1028 0024                  		move.b	$24(a0),d0
000179A4 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
000179A8 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
000179AC                            ; ===========================================================================
000179AC 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
000179AE 0000                       		dc.w Obj6A_Action-Obj6A_Index
000179B0                            ; ===========================================================================
000179B0                            
000179B0                            Obj6A_Main:				; XREF: Obj6A_Index
000179B0 5428 0024                  		addq.b	#2,$24(a0)
000179B4 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
000179BC 317C 43B5 0002             		move.w	#$43B5,2(a0)
000179C2 117C 0004 0001             		move.b	#4,1(a0)
000179C8 117C 0004 0018             		move.b	#4,$18(a0)
000179CE 117C 0020 0019             		move.b	#$20,$19(a0)
000179D4 3168 0008 003A             		move.w	8(a0),$3A(a0)
000179DA 3168 000C 0038             		move.w	$C(a0),$38(a0)
000179E0 0C28 0003 0028             		cmpi.b	#3,$28(a0)
000179E6 6400                       		bcc.s	Obj6A_Action
000179E8 117C 00A2 0020             		move.b	#$A2,$20(a0)
000179EE                            
000179EE                            Obj6A_Action:				; XREF: Obj6A_Index
000179EE 7000                       		moveq	#0,d0
000179F0 1028 0028                  		move.b	$28(a0),d0
000179F4 0240 0007                  		andi.w	#7,d0
000179F8 D040                       		add.w	d0,d0
000179FA 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
000179FE 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00017A02 3028 003A                  		move.w	$3A(a0),d0
00017A06 0240 FF80                  		andi.w	#$FF80,d0
00017A0A 3238 F700                  		move.w	($FFFFF700).w,d1
00017A0E 0441 0080                  		subi.w	#$80,d1
00017A12 0241 FF80                  		andi.w	#$FF80,d1
00017A16 9041                       		sub.w	d1,d0
00017A18 0C40 0280                  		cmpi.w	#$280,d0
00017A1C 6300                       		bls.s	Obj6A_NoDel
00017A1E                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
00017A1E                            	;	beq.s	Obj6A_Delete		; if it's zero, don't remember object
00017A1E                            	;	movea.w	d0,a2	; load address into a2
00017A1E                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017A1E 6000                       		bra.s	Obj6A_Delete	; and delete object
00017A20                            
00017A20                            Obj6A_NoDel:
00017A20 4EF9 0000 E930             		jmp	DisplaySprite
00017A26                            ; ===========================================================================
00017A26                            
00017A26                            Obj6A_Delete:
00017A26 4EF9 0000 E980             		jmp	DeleteObject
00017A2C                            ; ===========================================================================
00017A2C 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00017A30 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00017A34 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00017A36                            ; ===========================================================================
00017A36                            
00017A36                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00017A36 4E75                       		rts	
00017A38                            ; ===========================================================================
00017A38                            
00017A38                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00017A38 323C 0060                  		move.w	#$60,d1
00017A3C 7000                       		moveq	#0,d0
00017A3E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00017A42 0828 0000 0022             		btst	#0,$22(a0)
00017A48 6700                       		beq.s	Obj6A_Animate01
00017A4A 4440                       		neg.w	d0
00017A4C D041                       		add.w	d1,d0
00017A4E                            
00017A4E                            Obj6A_Animate01:
00017A4E 3228 003A                  		move.w	$3A(a0),d1
00017A52 9240                       		sub.w	d0,d1
00017A54 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00017A58 5328 001E                  		subq.b	#1,$1E(a0)
00017A5C 6A00                       		bpl.s	loc_15A46
00017A5E 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00017A64 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00017A6A                            
00017A6A                            loc_15A46:
00017A6A 4A28 0001                  		tst.b	1(a0)
00017A6E 6A00                       		bpl.s	locret_15A60
00017A70 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017A74 0240 000F                  		andi.w	#$F,d0
00017A78 6600                       		bne.s	locret_15A60
00017A7A 303C 00B0                  		move.w	#$B0,d0
00017A7E 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play saw sound
00017A84                            
00017A84                            locret_15A60:
00017A84 4E75                       		rts	
00017A86                            ; ===========================================================================
00017A86                            
00017A86                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00017A86 323C 0030                  		move.w	#$30,d1
00017A8A 7000                       		moveq	#0,d0
00017A8C 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017A90 0828 0000 0022             		btst	#0,$22(a0)
00017A96 6700                       		beq.s	Obj6A_Animate02
00017A98 4440                       		neg.w	d0
00017A9A 0640 0080                  		addi.w	#$80,d0
00017A9E                            
00017A9E                            Obj6A_Animate02:
00017A9E 3228 0038                  		move.w	$38(a0),d1
00017AA2 9240                       		sub.w	d0,d1
00017AA4 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00017AA8 5328 001E                  		subq.b	#1,$1E(a0)
00017AAC 6A00                       		bpl.s	loc_15A96
00017AAE 117C 0002 001E             		move.b	#2,$1E(a0)
00017AB4 0868 0000 001A             		bchg	#0,$1A(a0)
00017ABA                            
00017ABA                            loc_15A96:
00017ABA 4A28 0001                  		tst.b	1(a0)
00017ABE 6A00                       		bpl.s	locret_15AB0
00017AC0 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017AC4 0C00 0018                  		cmpi.b	#$18,d0
00017AC8 6600                       		bne.s	locret_15AB0
00017ACA 303C 00B0                  		move.w	#$B0,d0
00017ACE 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play saw sound
00017AD4                            
00017AD4                            locret_15AB0:
00017AD4 4E75                       		rts	
00017AD6                            ; ===========================================================================
00017AD6                            
00017AD6                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00017AD6 4A28 003D                  		tst.b	$3D(a0)
00017ADA 6600                       		bne.s	Obj6A_Animate03
00017ADC 3038 D008                  		move.w	($FFFFD008).w,d0
00017AE0 0440 00C0                  		subi.w	#$C0,d0
00017AE4 6500                       		bcs.s	loc_15B02
00017AE6 9068 0008                  		sub.w	8(a0),d0
00017AEA 6500                       		bcs.s	loc_15B02
00017AEC 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017AF0 0440 0080                  		subi.w	#$80,d0
00017AF4 B068 000C                  		cmp.w	$C(a0),d0
00017AF8 6400                       		bcc.s	locret_15B04
00017AFA 0640 0100                  		addi.w	#$100,d0
00017AFE B068 000C                  		cmp.w	$C(a0),d0
00017B02 6500                       		bcs.s	locret_15B04
00017B04 117C 0001 003D             		move.b	#1,$3D(a0)
00017B0A 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00017B10 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017B16 117C 0002 001A             		move.b	#2,$1A(a0)
00017B1C 303C 00B0                  		move.w	#$B0,d0
00017B20 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play saw sound
00017B26                            
00017B26                            loc_15B02:
00017B26 588F                       		addq.l	#4,sp
00017B28                            
00017B28                            locret_15B04:
00017B28 4E75                       		rts	
00017B2A                            ; ===========================================================================
00017B2A                            
00017B2A                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00017B2A 4EB9 0000 E916             		jsr	SpeedToPos
00017B30 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017B36 5328 001E                  		subq.b	#1,$1E(a0)
00017B3A 6A00                       		bpl.s	locret_15B24
00017B3C 117C 0002 001E             		move.b	#2,$1E(a0)
00017B42 0868 0000 001A             		bchg	#0,$1A(a0)
00017B48                            
00017B48                            locret_15B24:
00017B48 4E75                       		rts	
00017B4A                            ; ===========================================================================
00017B4A                            
00017B4A                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00017B4A 4A28 003D                  		tst.b	$3D(a0)
00017B4E 6600                       		bne.s	Obj6A_Animate04
00017B50 3038 D008                  		move.w	($FFFFD008).w,d0
00017B54 0640 00E0                  		addi.w	#$E0,d0
00017B58 9068 0008                  		sub.w	8(a0),d0
00017B5C 6400                       		bcc.s	loc_15B74
00017B5E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017B62 0440 0080                  		subi.w	#$80,d0
00017B66 B068 000C                  		cmp.w	$C(a0),d0
00017B6A 6400                       		bcc.s	locret_15B76
00017B6C 0640 0100                  		addi.w	#$100,d0
00017B70 B068 000C                  		cmp.w	$C(a0),d0
00017B74 6500                       		bcs.s	locret_15B76
00017B76 117C 0001 003D             		move.b	#1,$3D(a0)
00017B7C 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00017B82 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017B88 117C 0002 001A             		move.b	#2,$1A(a0)
00017B8E 303C 00B0                  		move.w	#$B0,d0
00017B92 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play saw sound
00017B98                            
00017B98                            loc_15B74:
00017B98 588F                       		addq.l	#4,sp
00017B9A                            
00017B9A                            locret_15B76:
00017B9A 4E75                       		rts	
00017B9C                            ; ===========================================================================
00017B9C                            
00017B9C                            Obj6A_Animate04:
00017B9C 4EB9 0000 E916             		jsr	SpeedToPos
00017BA2 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017BA8 5328 001E                  		subq.b	#1,$1E(a0)
00017BAC 6A00                       		bpl.s	locret_15B96
00017BAE 117C 0002 001E             		move.b	#2,$1E(a0)
00017BB4 0868 0000 001A             		bchg	#0,$1A(a0)
00017BBA                            
00017BBA                            locret_15B96:
00017BBA 4E75                       		rts	
00017BBC                            ; ===========================================================================
00017BBC                            ; ---------------------------------------------------------------------------
00017BBC                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017BBC                            ; ---------------------------------------------------------------------------
00017BBC                            Map_obj6A:
00017BBC                            	include "_maps\obj6A.asm"
00017BBC                            ; ---------------------------------------------------------------------------
00017BBC                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017BBC                            ; ---------------------------------------------------------------------------
00017BBC 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00017BC0 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00017BC4 07                         byte_15BA0:	dc.b 7
00017BC5 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017BCA D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017BCF E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017BD4 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017BD9 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017BDE 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017BE3 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017BE8 07                         byte_15BC4:	dc.b 7
00017BE9 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017BEE D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017BF3 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017BF8 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00017BFD E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00017C02 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00017C07 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00017C0C 04                         byte_15BE8:	dc.b 4
00017C0D E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017C12 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017C17 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017C1C 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017C21 04                         byte_15BFD:	dc.b 4
00017C22 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00017C27 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00017C2C 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00017C31 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00017C36                            		even
00017C36                            		even
00017C36                            
00017C36                            ; ===========================================================================
00017C36                            ; ---------------------------------------------------------------------------
00017C36                            ; Object 6B - stomper (SBZ)
00017C36                            ; ---------------------------------------------------------------------------
00017C36                            
00017C36                            Obj6B:					; XREF: Obj_Index
00017C36 7000                       		moveq	#0,d0
00017C38 1028 0024                  		move.b	$24(a0),d0
00017C3C 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00017C40 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00017C44                            ; ===========================================================================
00017C44 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00017C46 0000                       		dc.w Obj6B_Action-Obj6B_Index
00017C48                            
00017C48 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00017C4C 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00017C50 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00017C54 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00017C58 8040 0005                  		dc.b  $80, $40,	  0,   5
00017C5C                            ; ===========================================================================
00017C5C                            
00017C5C                            Obj6B_Main:				; XREF: Obj6B_Index
00017C5C 5428 0024                  		addq.b	#2,$24(a0)
00017C60 7000                       		moveq	#0,d0
00017C62 1028 0028                  		move.b	$28(a0),d0
00017C66 E448                       		lsr.w	#2,d0
00017C68 0240 001C                  		andi.w	#$1C,d0
00017C6C 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00017C70 115B 0019                  		move.b	(a3)+,$19(a0)
00017C74 115B 0016                  		move.b	(a3)+,$16(a0)
00017C78 E448                       		lsr.w	#2,d0
00017C7A 1140 001A                  		move.b	d0,$1A(a0)
00017C7E 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00017C86 317C 22C0 0002             		move.w	#$22C0,2(a0)
00017C8C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00017C92 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00017C94 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00017C9A 6700                       		beq.s	Obj6B_SBZ3
00017C9C                            
00017C9C                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00017C9C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017CA0 6700                       		beq.s	Obj6B_Delete		; if it's zero, don't remember object
00017CA2 3440                       		movea.w	d0,a2	; load address into a2
00017CA4 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017CA8                            
00017CA8                            Obj6B_Delete:
00017CA8 4EF9 0000 E980             		jmp	DeleteObject
00017CAE                            ; ===========================================================================
00017CAE                            
00017CAE                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00017CAE 317C 41F0 0002             		move.w	#$41F0,2(a0)
00017CB4 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00017CBA 6600                       		bne.s	Obj6B_SBZ12
00017CBC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017CC0 6700                       		beq.s	Obj6B_SBZ12		; if it's zero, don't remember object
00017CC2 3440                       		movea.w	d0,a2	; load address into a2
00017CC4 0812 0000                  		btst	#0,(a2)
00017CC8 6700                       		beq.s	Obj6B_SBZ12
00017CCA 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017CCE 60CC                       		bra.s	Obj6B_ChkGone
00017CD0                            ; ===========================================================================
00017CD0                            
00017CD0                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00017CD0 0028 0004 0001             		ori.b	#4,1(a0)
00017CD6 117C 0004 0018             		move.b	#4,$18(a0)
00017CDC 3168 0008 0034             		move.w	8(a0),$34(a0)
00017CE2 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017CE8 7000                       		moveq	#0,d0
00017CEA 101B                       		move.b	(a3)+,d0
00017CEC 3140 003C                  		move.w	d0,$3C(a0)
00017CF0 7000                       		moveq	#0,d0
00017CF2 1028 0028                  		move.b	$28(a0),d0
00017CF6 6A00                       		bpl.s	Obj6B_Action
00017CF8 0200 000F                  		andi.b	#$F,d0
00017CFC 1140 003E                  		move.b	d0,$3E(a0)
00017D00 1153 0028                  		move.b	(a3),$28(a0)
00017D04 0C13 0005                  		cmpi.b	#5,(a3)
00017D08 6600                       		bne.s	Obj6B_ChkGone2
00017D0A 08E8 0004 0001             		bset	#4,1(a0)
00017D10                            
00017D10                            Obj6B_ChkGone2:
00017D10 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017D14 6700                       		beq.s	Obj6B_Action		; if it's zero, don't remember object
00017D16 3440                       		movea.w	d0,a2	; load address into a2
00017D18 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017D1C                            
00017D1C                            Obj6B_Action:				; XREF: Obj6B_Index
00017D1C 3F28 0008                  		move.w	8(a0),-(sp)
00017D20 7000                       		moveq	#0,d0
00017D22 1028 0028                  		move.b	$28(a0),d0
00017D26 0240 000F                  		andi.w	#$F,d0
00017D2A D040                       		add.w	d0,d0
00017D2C 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00017D30 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00017D34 381F                       		move.w	(sp)+,d4
00017D36 4A28 0001                  		tst.b	1(a0)
00017D3A 6A00                       		bpl.s	Obj6B_ChkDel
00017D3C 7200                       		moveq	#0,d1
00017D3E 1228 0019                  		move.b	$19(a0),d1
00017D42 0641 000B                  		addi.w	#$B,d1
00017D46 7400                       		moveq	#0,d2
00017D48 1428 0016                  		move.b	$16(a0),d2
00017D4C 3602                       		move.w	d2,d3
00017D4E 5243                       		addq.w	#1,d3
00017D50 6100 954C                  		bsr.w	SolidObject
00017D54                            
00017D54                            Obj6B_ChkDel:
00017D54 3028 0034                  		move.w	$34(a0),d0
00017D58 0240 FF80                  		andi.w	#$FF80,d0
00017D5C 3238 F700                  		move.w	($FFFFF700).w,d1
00017D60 0441 0080                  		subi.w	#$80,d1
00017D64 0241 FF80                  		andi.w	#$FF80,d1
00017D68 9041                       		sub.w	d1,d0
00017D6A 0C40 0280                  		cmpi.w	#$280,d0
00017D6E 6200                       		bhi.s	loc_15D64
00017D70 4EF9 0000 E930             		jmp	DisplaySprite
00017D76                            ; ===========================================================================
00017D76                            
00017D76                            loc_15D64:
00017D76 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017D7C 6600                       		bne.s	Obj6B_Delete2
00017D7E 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017D82 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017D86 6700                       		beq.s	Obj6B_Delete2		; if it's zero, don't remember object
00017D88 3440                       		movea.w	d0,a2	; load address into a2
00017D8A 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017D8E                            
00017D8E                            Obj6B_Delete2:
00017D8E 4EF9 0000 E980             		jmp	DeleteObject
00017D94                            ; ===========================================================================
00017D94 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00017D98 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00017D9C 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00017DA0                            ; ===========================================================================
00017DA0                            
00017DA0                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00017DA0 4E75                       		rts	
00017DA2                            ; ===========================================================================
00017DA2                            
00017DA2                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00017DA2 4A28 0038                  		tst.b	$38(a0)
00017DA6 6600                       		bne.s	loc_15DB4
00017DA8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017DAC 7000                       		moveq	#0,d0
00017DAE 1028 003E                  		move.b	$3E(a0),d0
00017DB2 0832 0000 0000             		btst	#0,(a2,d0.w)
00017DB8 6700                       		beq.s	loc_15DC2
00017DBA 117C 0001 0038             		move.b	#1,$38(a0)
00017DC0                            
00017DC0                            loc_15DB4:
00017DC0 3028 003C                  		move.w	$3C(a0),d0
00017DC4 B068 003A                  		cmp.w	$3A(a0),d0
00017DC8 6700                       		beq.s	loc_15DE0
00017DCA 5468 003A                  		addq.w	#2,$3A(a0)
00017DCE                            
00017DCE                            loc_15DC2:
00017DCE 3028 003A                  		move.w	$3A(a0),d0
00017DD2 0828 0000 0022             		btst	#0,$22(a0)
00017DD8 6700                       		beq.s	loc_15DD4
00017DDA 4440                       		neg.w	d0
00017DDC 0640 0080                  		addi.w	#$80,d0
00017DE0                            
00017DE0                            loc_15DD4:
00017DE0 3228 0034                  		move.w	$34(a0),d1
00017DE4 9240                       		sub.w	d0,d1
00017DE6 3141 0008                  		move.w	d1,8(a0)
00017DEA 4E75                       		rts	
00017DEC                            ; ===========================================================================
00017DEC                            
00017DEC                            loc_15DE0:
00017DEC 5228 0028                  		addq.b	#1,$28(a0)
00017DF0 317C 00B4 0036             		move.w	#$B4,$36(a0)
00017DF6 4228 0038                  		clr.b	$38(a0)
00017DFA 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017DFE 67CE                       		beq.s	loc_15DC2		; if it's zero, don't remember object
00017E00 3440                       		movea.w	d0,a2	; load address into a2
00017E02 08D2 0000                  		bset	#0,(a2)
00017E06 60C6                       		bra.s	loc_15DC2
00017E08                            ; ===========================================================================
00017E08                            
00017E08                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00017E08 4A28 0038                  		tst.b	$38(a0)
00017E0C 6600                       		bne.s	loc_15E14
00017E0E 5368 0036                  		subq.w	#1,$36(a0)
00017E12 6600                       		bne.s	loc_15E1E
00017E14 117C 0001 0038             		move.b	#1,$38(a0)
00017E1A                            
00017E1A                            loc_15E14:
00017E1A 4A68 003A                  		tst.w	$3A(a0)
00017E1E 6700                       		beq.s	loc_15E3C
00017E20 5568 003A                  		subq.w	#2,$3A(a0)
00017E24                            
00017E24                            loc_15E1E:
00017E24 3028 003A                  		move.w	$3A(a0),d0
00017E28 0828 0000 0022             		btst	#0,$22(a0)
00017E2E 6700                       		beq.s	loc_15E30
00017E30 4440                       		neg.w	d0
00017E32 0640 0080                  		addi.w	#$80,d0
00017E36                            
00017E36                            loc_15E30:
00017E36 3228 0034                  		move.w	$34(a0),d1
00017E3A 9240                       		sub.w	d0,d1
00017E3C 3141 0008                  		move.w	d1,8(a0)
00017E40 4E75                       		rts	
00017E42                            ; ===========================================================================
00017E42                            
00017E42                            loc_15E3C:
00017E42 5328 0028                  		subq.b	#1,$28(a0)
00017E46 4228 0038                  		clr.b	$38(a0)
00017E4A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017E4E 67D4                       		beq.s	loc_15E1E		; if it's zero, don't remember object
00017E50 3440                       		movea.w	d0,a2	; load address into a2
00017E52 0892 0000                  		bclr	#0,(a2)
00017E56 60CC                       		bra.s	loc_15E1E
00017E58                            ; ===========================================================================
00017E58                            
00017E58                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00017E58 4A28 0038                  		tst.b	$38(a0)
00017E5C 6600                       		bne.s	loc_15E7C
00017E5E 4A68 003A                  		tst.w	$3A(a0)
00017E62 6700                       		beq.s	loc_15E6A
00017E64 5368 003A                  		subq.w	#1,$3A(a0)
00017E68 6000                       		bra.s	loc_15E8E
00017E6A                            ; ===========================================================================
00017E6A                            
00017E6A                            loc_15E6A:
00017E6A 5368 0036                  		subq.w	#1,$36(a0)
00017E6E 6A00                       		bpl.s	loc_15E8E
00017E70 317C 003C 0036             		move.w	#$3C,$36(a0)
00017E76 117C 0001 0038             		move.b	#1,$38(a0)
00017E7C                            
00017E7C                            loc_15E7C:
00017E7C 5068 003A                  		addq.w	#8,$3A(a0)
00017E80 3028 003A                  		move.w	$3A(a0),d0
00017E84 B068 003C                  		cmp.w	$3C(a0),d0
00017E88 6600                       		bne.s	loc_15E8E
00017E8A 4228 0038                  		clr.b	$38(a0)
00017E8E                            
00017E8E                            loc_15E8E:
00017E8E 3028 003A                  		move.w	$3A(a0),d0
00017E92 0828 0000 0022             		btst	#0,$22(a0)
00017E98 6700                       		beq.s	loc_15EA0
00017E9A 4440                       		neg.w	d0
00017E9C 0640 0038                  		addi.w	#$38,d0
00017EA0                            
00017EA0                            loc_15EA0:
00017EA0 3228 0030                  		move.w	$30(a0),d1
00017EA4 D240                       		add.w	d0,d1
00017EA6 3141 000C                  		move.w	d1,$C(a0)
00017EAA 4E75                       		rts	
00017EAC                            ; ===========================================================================
00017EAC                            
00017EAC                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00017EAC 4A28 0038                  		tst.b	$38(a0)
00017EB0 6600                       		bne.s	loc_15ED0
00017EB2 4A68 003A                  		tst.w	$3A(a0)
00017EB6 6700                       		beq.s	loc_15EBE
00017EB8 5168 003A                  		subq.w	#8,$3A(a0)
00017EBC 6000                       		bra.s	loc_15EF0
00017EBE                            ; ===========================================================================
00017EBE                            
00017EBE                            loc_15EBE:
00017EBE 5368 0036                  		subq.w	#1,$36(a0)
00017EC2 6A00                       		bpl.s	loc_15EF0
00017EC4 317C 003C 0036             		move.w	#$3C,$36(a0)
00017ECA 117C 0001 0038             		move.b	#1,$38(a0)
00017ED0                            
00017ED0                            loc_15ED0:
00017ED0 3028 003A                  		move.w	$3A(a0),d0
00017ED4 B068 003C                  		cmp.w	$3C(a0),d0
00017ED8 6700                       		beq.s	loc_15EE0
00017EDA 5068 003A                  		addq.w	#8,$3A(a0)
00017EDE 6000                       		bra.s	loc_15EF0
00017EE0                            ; ===========================================================================
00017EE0                            
00017EE0                            loc_15EE0:
00017EE0 5368 0036                  		subq.w	#1,$36(a0)
00017EE4 6A00                       		bpl.s	loc_15EF0
00017EE6 317C 003C 0036             		move.w	#$3C,$36(a0)
00017EEC 4228 0038                  		clr.b	$38(a0)
00017EF0                            
00017EF0                            loc_15EF0:
00017EF0 3028 003A                  		move.w	$3A(a0),d0
00017EF4 0828 0000 0022             		btst	#0,$22(a0)
00017EFA 6700                       		beq.s	loc_15F02
00017EFC 4440                       		neg.w	d0
00017EFE 0640 0038                  		addi.w	#$38,d0
00017F02                            
00017F02                            loc_15F02:
00017F02 3228 0030                  		move.w	$30(a0),d1
00017F06 D240                       		add.w	d0,d1
00017F08 3141 000C                  		move.w	d1,$C(a0)
00017F0C 4E75                       		rts	
00017F0E                            ; ===========================================================================
00017F0E                            
00017F0E                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00017F0E 4A28 0038                  		tst.b	$38(a0)
00017F12 6600                       		bne.s	loc_15F3E
00017F14 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017F18 7000                       		moveq	#0,d0
00017F1A 1028 003E                  		move.b	$3E(a0),d0
00017F1E 0832 0000 0000             		btst	#0,(a2,d0.w)
00017F24 6700                       		beq.s	locret_15F5C
00017F26 117C 0001 0038             		move.b	#1,$38(a0)
00017F2C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017F30 6700                       		beq.s	loc_15F3E		; if it's zero, don't remember object
00017F32 3440                       		movea.w	d0,a2	; load address into a2
00017F34 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017F38                            
00017F38                            loc_15F3E:
00017F38 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00017F40 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00017F48 3168 0008 0034             		move.w	8(a0),$34(a0)
00017F4E 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00017F54 6700                       		beq.s	loc_15F5E
00017F56                            
00017F56                            locret_15F5C:
00017F56 4E75                       		rts	
00017F58                            ; ===========================================================================
00017F58                            
00017F58                            loc_15F5E:
00017F58 4228 0028                  		clr.b	$28(a0)
00017F5C 4228 0038                  		clr.b	$38(a0)
00017F60 4E75                       		rts	
00017F62                            ; ===========================================================================
00017F62                            ; ---------------------------------------------------------------------------
00017F62                            ; Sprite mappings - stomper and	platforms (SBZ)
00017F62                            ; ---------------------------------------------------------------------------
00017F62                            Map_obj6B:
00017F62                            	include "_maps\obj6B.asm"
00017F62                            ; ---------------------------------------------------------------------------
00017F62                            ; Sprite mappings - stomper and	platforms (SBZ)
00017F62                            ; ---------------------------------------------------------------------------
00017F62 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00017F66 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00017F6A 0000                       		dc.w byte_15FB0-Map_obj6B
00017F6C 04                         byte_15F72:	dc.b 4
00017F6D F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00017F72 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00017F77 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00017F7C F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00017F81 08                         byte_15F87:	dc.b 8
00017F82 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00017F87 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00017F8C E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00017F91 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00017F96 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00017F9B 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00017FA0 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00017FA5 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00017FAA 0E                         byte_15FB0:	dc.b $E
00017FAB C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00017FB0 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00017FB5 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00017FBA C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00017FBF C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00017FC4 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00017FC9 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00017FCE C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00017FD3 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00017FD8 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00017FDD E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00017FE2 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00017FE7 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00017FEC 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00017FF2 00                         		even
00017FF2 00                         		even
00017FF2                            
00017FF2                            ; ===========================================================================
00017FF2                            ; ---------------------------------------------------------------------------
00017FF2                            ; Object 6C - vanishing	platforms (SBZ)
00017FF2                            ; ---------------------------------------------------------------------------
00017FF2                            
00017FF2                            Obj6C:					; XREF: Obj_Index
00017FF2 7000                       		moveq	#0,d0
00017FF4 1028 0024                  		move.b	$24(a0),d0
00017FF8 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00017FFC 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00018000                            ; ===========================================================================
00018000 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00018002 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00018004 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00018006 0000                       		dc.w loc_16068-Obj6C_Index
00018008                            ; ===========================================================================
00018008                            
00018008                            Obj6C_Main:				; XREF: Obj6C_Index
00018008 5C28 0024                  		addq.b	#6,$24(a0)
0001800C 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00018014 317C 44C3 0002             		move.w	#$44C3,2(a0)
0001801A 0028 0004 0001             		ori.b	#4,1(a0)
00018020 117C 0010 0019             		move.b	#$10,$19(a0)
00018026 117C 0004 0018             		move.b	#4,$18(a0)
0001802C 7000                       		moveq	#0,d0
0001802E 1028 0028                  		move.b	$28(a0),d0	; get object type
00018032 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00018036 5240                       		addq.w	#1,d0		; add 1
00018038 EF48                       		lsl.w	#7,d0		; multiply by $80
0001803A 3200                       		move.w	d0,d1
0001803C 5340                       		subq.w	#1,d0
0001803E 3140 0030                  		move.w	d0,$30(a0)
00018042 3140 0032                  		move.w	d0,$32(a0)
00018046 7000                       		moveq	#0,d0
00018048 1028 0028                  		move.b	$28(a0),d0	; get object type
0001804C 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00018050 0641 0080                  		addi.w	#$80,d1
00018054 C0C1                       		mulu.w	d1,d0
00018056 E088                       		lsr.l	#8,d0
00018058 3140 0036                  		move.w	d0,$36(a0)
0001805C 5341                       		subq.w	#1,d1
0001805E 3141 0038                  		move.w	d1,$38(a0)
00018062                            
00018062                            loc_16068:				; XREF: Obj6C_Index
00018062 3038 FE04                  		move.w	($FFFFFE04).w,d0
00018066 9068 0036                  		sub.w	$36(a0),d0
0001806A C068 0038                  		and.w	$38(a0),d0
0001806E 6600                       		bne.s	Obj6C_Animate
00018070 5928 0024                  		subq.b	#4,$24(a0)
00018074 6000                       		bra.s	Obj6C_Vanish
00018076                            ; ===========================================================================
00018076                            
00018076                            Obj6C_Animate:
00018076 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001807C 4EB9 0000 B990             		jsr	AnimateSprite
00018082 6000 8EF6                  		bra.w	MarkObjGone
00018086                            ; ===========================================================================
00018086                            
00018086                            Obj6C_Vanish:				; XREF: Obj6C_Index
00018086 5368 0030                  		subq.w	#1,$30(a0)
0001808A 6A00                       		bpl.s	loc_160AA
0001808C 317C 007F 0030             		move.w	#127,$30(a0)
00018092 4A28 001C                  		tst.b	$1C(a0)
00018096 6700                       		beq.s	loc_160A4
00018098 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001809E                            
0001809E                            loc_160A4:
0001809E 0868 0000 001C             		bchg	#0,$1C(a0)
000180A4                            
000180A4                            loc_160AA:
000180A4 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000180AA 4EB9 0000 B990             		jsr	AnimateSprite
000180B0 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
000180B6 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
000180B8 0C28 0002 0024             		cmpi.b	#2,$24(a0)
000180BE 6600                       		bne.s	loc_160D6
000180C0 7200                       		moveq	#0,d1
000180C2 1228 0019                  		move.b	$19(a0),d1
000180C6 4EB9 0000 8530             		jsr	(PlatformObject).l
000180CC 6000 8EAC                  		bra.w	MarkObjGone
000180D0                            ; ===========================================================================
000180D0                            
000180D0                            loc_160D6:
000180D0 7200                       		moveq	#0,d1
000180D2 1228 0019                  		move.b	$19(a0),d1
000180D6 4EB9 0000 86A4             		jsr	(ExitPlatform).l
000180DC 3428 0008                  		move.w	8(a0),d2
000180E0 4EB9 0000 8C1A             		jsr	(MvSonicOnPtfm2).l
000180E6 6000 8E92                  		bra.w	MarkObjGone
000180EA                            ; ===========================================================================
000180EA                            
000180EA                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
000180EA 0828 0003 0022             		btst	#3,$22(a0)
000180F0 6700                       		beq.s	Obj6C_Display
000180F2 43F8 D000                  		lea	($FFFFD000).w,a1
000180F6 08A9 0003 0022             		bclr	#3,$22(a1)
000180FC 08A8 0003 0022             		bclr	#3,$22(a0)
00018102 117C 0002 0024             		move.b	#2,$24(a0)
00018108 4228 0025                  		clr.b	$25(a0)
0001810C                            
0001810C                            Obj6C_Display:
0001810C 6000 8E6C                  		bra.w	MarkObjGone
00018110                            ; ===========================================================================
00018110                            Ani_obj6C:
00018110                            	include "_anim\obj6C.asm"
00018110                            ; ---------------------------------------------------------------------------
00018110                            ; Animation script - vanishing platforms (SBZ)
00018110                            ; ---------------------------------------------------------------------------
00018110 0000                       		dc.w byte_1611A-Ani_obj6C
00018112 0000                       		dc.w byte_16122-Ani_obj6C
00018114 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
0001811C 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00018124                            		even
00018124                            		even
00018124                            
00018124                            ; ---------------------------------------------------------------------------
00018124                            ; Sprite mappings - vanishing platforms	(SBZ)
00018124                            ; ---------------------------------------------------------------------------
00018124                            Map_obj6C:
00018124                            	include "_maps\obj6C.asm"
00018124                            ; ---------------------------------------------------------------------------
00018124                            ; Sprite mappings - vanishing platforms	(SBZ)
00018124                            ; ---------------------------------------------------------------------------
00018124 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00018128 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
0001812C 01                         byte_16132:	dc.b 1
0001812D F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00018132 01                         byte_16138:	dc.b 1
00018133 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00018138 01                         byte_1613E:	dc.b 1
00018139 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
0001813E 00                         byte_16144:	dc.b 0
00018140 00                         		even
00018140 00                         		even
00018140                            
00018140                            ; ===========================================================================
00018140                            ; ---------------------------------------------------------------------------
00018140                            ; Object 6E - electrocution orbs (SBZ)
00018140                            ; ---------------------------------------------------------------------------
00018140                            
00018140                            Obj6E:					; XREF: Obj_Index
00018140 7000                       		moveq	#0,d0
00018142 1028 0024                  		move.b	$24(a0),d0
00018146 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
0001814A 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
0001814E                            ; ===========================================================================
0001814E 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00018150 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00018152                            ; ===========================================================================
00018152                            
00018152                            Obj6E_Main:				; XREF: Obj6E_Index
00018152 5428 0024                  		addq.b	#2,$24(a0)
00018156 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
0001815E 317C 047E 0002             		move.w	#$47E,2(a0)
00018164 0028 0004 0001             		ori.b	#4,1(a0)
0001816A 117C 0028 0019             		move.b	#$28,$19(a0)
00018170 7000                       		moveq	#0,d0
00018172 1028 0028                  		move.b	$28(a0),d0	; read object type
00018176 E948                       		lsl.w	#4,d0		; multiply by $10
00018178 5340                       		subq.w	#1,d0
0001817A 3140 0034                  		move.w	d0,$34(a0)
0001817E                            
0001817E                            Obj6E_Shock:				; XREF: Obj6E_Index
0001817E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00018182 C068 0034                  		and.w	$34(a0),d0
00018186 6600                       		bne.s	Obj6E_Animate
00018188 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
0001818E 4A28 0001                  		tst.b	1(a0)
00018192 6A00                       		bpl.s	Obj6E_Animate
00018194 303C 00B1                  		move.w	#$B1,d0
00018198 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play electricity sound
0001819E                            
0001819E                            Obj6E_Animate:
0001819E 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
000181A4 4EB9 0000 B990             		jsr	AnimateSprite
000181AA 117C 0000 0020             		move.b	#0,$20(a0)
000181B0 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
000181B6 6600                       		bne.s	Obj6E_Display	; if not, branch
000181B8 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
000181BE                            
000181BE                            Obj6E_Display:
000181BE 6000 8DBA                  		bra.w	MarkObjGone
000181C2                            ; ===========================================================================
000181C2                            Ani_obj6E:
000181C2                            	include "_anim\obj6E.asm"
000181C2                            ; ---------------------------------------------------------------------------
000181C2                            ; Animation script - electrocution orbs (SBZ)
000181C2                            ; ---------------------------------------------------------------------------
000181C2 0000                       		dc.w byte_161CC-Ani_obj6E
000181C4 0000                       		dc.w byte_161D0-Ani_obj6E
000181C6 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
000181CA 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
000181DA                            		even
000181DA                            		even
000181DA                            
000181DA                            ; ---------------------------------------------------------------------------
000181DA                            ; Sprite mappings - electrocution orbs (SBZ)
000181DA                            ; ---------------------------------------------------------------------------
000181DA                            Map_obj6E:
000181DA                            	include "_maps\obj6E.asm"
000181DA                            ; ---------------------------------------------------------------------------
000181DA                            ; Sprite mappings - electrocution orbs (SBZ)
000181DA                            ; ---------------------------------------------------------------------------
000181DA 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
000181DE 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
000181E2 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
000181E6 02                         byte_161EC:	dc.b 2
000181E7 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000181EC 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000181F1 03                         byte_161F7:	dc.b 3
000181F2 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000181F7 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000181FC 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018201 05                         byte_16207:	dc.b 5
00018202 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00018207 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001820C 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018211 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00018216 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
0001821B 04                         byte_16221:	dc.b 4
0001821C F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018221 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018226 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
0001822B F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00018230 06                         byte_16236:	dc.b 6
00018231 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018236 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001823B F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
00018240 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00018245 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
0001824A F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
0001824F 04                         byte_16255:	dc.b 4
00018250 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018255 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001825A F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
0001825F F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00018264                            		even
00018264                            		even
00018264                            
00018264                            ; ===========================================================================
00018264                            ; ---------------------------------------------------------------------------
00018264                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00018264                            ; ---------------------------------------------------------------------------
00018264                            
00018264                            Obj6F:					; XREF: Obj_Index
00018264 7000                       		moveq	#0,d0
00018266 1028 0024                  		move.b	$24(a0),d0
0001826A 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
0001826E 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00018272 3028 0030                  		move.w	$30(a0),d0
00018276 0240 FF80                  		andi.w	#$FF80,d0
0001827A 3238 F700                  		move.w	($FFFFF700).w,d1
0001827E 0441 0080                  		subi.w	#$80,d1
00018282 0241 FF80                  		andi.w	#$FF80,d1
00018286 9041                       		sub.w	d1,d0
00018288 0C40 0280                  		cmpi.w	#$280,d0
0001828C 6300                       		bls.s	Obj6F_Display
0001828E                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
0001828E                            	;	beq.s	loc_1629A		; if it's zero, don't remember object
0001828E                            	;	movea.w	d0,a2	; load address into a2
0001828E                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001828E 6000                       		bra.s	loc_1629A	; and delete object
00018290                            
00018290                            Obj6F_Display:
00018290 4EF9 0000 E930             		jmp	DisplaySprite
00018296                            ; ===========================================================================
00018296                            
00018296                            loc_1629A:
00018296 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
0001829C 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
0001829E 0C40 FF80                  		cmpi.w	#-$80,d0
000182A2 64EC                       		bcc.s	Obj6F_Display
000182A4                            
000182A4                            Obj6F_Act1or2:
000182A4 1028 002F                  		move.b	$2F(a0),d0
000182A8 6A00                       		bpl.s	Obj6F_Delete
000182AA 0240 007F                  		andi.w	#$7F,d0
000182AE 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000182B2 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000182B8                            
000182B8                            Obj6F_Delete:
000182B8 4EF9 0000 E980             		jmp	DeleteObject
000182BE                            ; ===========================================================================
000182BE 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
000182C0 0000                       		dc.w loc_163D8-Obj6F_Index
000182C2                            ; ===========================================================================
000182C2                            
000182C2                            Obj6F_Main:				; XREF: Obj6F_Index
000182C2 1028 0028                  		move.b	$28(a0),d0
000182C6 6B00 0000                  		bmi.w	loc_16380
000182CA 5428 0024                  		addq.b	#2,$24(a0)
000182CE 217C 0001 795C 0004        		move.l	#Map_obj69a,4(a0)
000182D6 317C 04DF 0002             		move.w	#$4DF,2(a0)
000182DC 117C 0010 0019             		move.b	#$10,$19(a0)
000182E2 0028 0004 0001             		ori.b	#4,1(a0)
000182E8 117C 0004 0018             		move.b	#4,$18(a0)
000182EE 7000                       		moveq	#0,d0
000182F0 1028 0028                  		move.b	$28(a0),d0
000182F4 3200                       		move.w	d0,d1
000182F6 E648                       		lsr.w	#3,d0
000182F8 0240 001E                  		andi.w	#$1E,d0
000182FC 45FA 0000                  		lea	off_164A6(pc),a2
00018300 D4F2 0000                  		adda.w	(a2,d0.w),a2
00018304 315A 0038                  		move.w	(a2)+,$38(a0)
00018308 315A 0030                  		move.w	(a2)+,$30(a0)
0001830C 214A 003C                  		move.l	a2,$3C(a0)
00018310 0241 000F                  		andi.w	#$F,d1
00018314 E549                       		lsl.w	#2,d1
00018316 1141 0038                  		move.b	d1,$38(a0)
0001831A 117C 0004 003A             		move.b	#4,$3A(a0)
00018320 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00018324 6700                       		beq.s	loc_16356
00018326 117C 0001 003B             		move.b	#1,$3B(a0)
0001832C 4428 003A                  		neg.b	$3A(a0)
00018330 7200                       		moveq	#0,d1
00018332 1228 0038                  		move.b	$38(a0),d1
00018336 D228 003A                  		add.b	$3A(a0),d1
0001833A B228 0039                  		cmp.b	$39(a0),d1
0001833E 6500                       		bcs.s	loc_16352
00018340 1001                       		move.b	d1,d0
00018342 7200                       		moveq	#0,d1
00018344 4A00                       		tst.b	d0
00018346 6A00                       		bpl.s	loc_16352
00018348 1228 0039                  		move.b	$39(a0),d1
0001834C 5901                       		subq.b	#4,d1
0001834E                            
0001834E                            loc_16352:
0001834E 1141 0038                  		move.b	d1,$38(a0)
00018352                            
00018352                            loc_16356:
00018352 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00018358 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001835E 4A41                       		tst.w	d1
00018360 6600                       		bne.s	loc_1636C
00018362 117C 0001 001C             		move.b	#1,$1C(a0)
00018368                            
00018368                            loc_1636C:
00018368 0C41 0008                  		cmpi.w	#8,d1
0001836C 6600                       		bne.s	loc_16378
0001836E 117C 0000 001C             		move.b	#0,$1C(a0)
00018374                            
00018374                            loc_16378:
00018374 6100 BB46                  		bsr.w	Obj63_ChangeDir
00018378 6000 0000                  		bra.w	loc_163D8
0001837C                            ; ===========================================================================
0001837C                            
0001837C                            loc_16380:				; XREF: Obj6F_Main
0001837C 1140 002F                  		move.b	d0,$2F(a0)
00018380 0240 007F                  		andi.w	#$7F,d0
00018384 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00018388 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001838E 6700                       		beq.s	loc_1639A
00018390 4EF9 0000 E980             		jmp	DeleteObject
00018396                            ; ===========================================================================
00018396                            
00018396                            loc_1639A:
00018396 D040                       		add.w	d0,d0
00018398 0240 001E                  		andi.w	#$1E,d0
0001839C 0640 0080                  		addi.w	#$80,d0
000183A0 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000183A6 D4F2 0000                  		adda.w	(a2,d0.w),a2
000183AA 321A                       		move.w	(a2)+,d1
000183AC 2248                       		movea.l	a0,a1
000183AE 6000                       		bra.s	Obj6F_LoadPform
000183B0                            ; ===========================================================================
000183B0                            
000183B0                            Obj6F_Loop:
000183B0 4EB9 0000 F086             		jsr	SingleObjLoad
000183B6 6600                       		bne.s	loc_163D0
000183B8                            
000183B8                            Obj6F_LoadPform:			; XREF: loc_1639A
000183B8 12BC 006F                  		move.b	#$6F,0(a1)
000183BC 335A 0008                  		move.w	(a2)+,8(a1)
000183C0 335A 000C                  		move.w	(a2)+,$C(a1)
000183C4 301A                       		move.w	(a2)+,d0
000183C6 1340 0028                  		move.b	d0,$28(a1)
000183CA                            
000183CA                            loc_163D0:
000183CA 51C9 FFE4                  		dbf	d1,Obj6F_Loop
000183CE                            
000183CE 588F                       		addq.l	#4,sp
000183D0 4E75                       		rts	
000183D2                            ; ===========================================================================
000183D2                            
000183D2                            loc_163D8:				; XREF: Obj6F_Index
000183D2 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
000183D8 4EB9 0000 B990             		jsr	AnimateSprite
000183DE 4A28 001A                  		tst.b	$1A(a0)
000183E2 6600                       		bne.s	loc_16404
000183E4 3F28 0008                  		move.w	8(a0),-(sp)
000183E8 6100 0000                  		bsr.w	loc_16424
000183EC 323C 001B                  		move.w	#$1B,d1
000183F0 343C 0007                  		move.w	#7,d2
000183F4 3602                       		move.w	d2,d3
000183F6 5243                       		addq.w	#1,d3
000183F8 381F                       		move.w	(sp)+,d4
000183FA 6000 8EA2                  		bra.w	SolidObject
000183FE                            ; ===========================================================================
000183FE                            
000183FE                            loc_16404:
000183FE 0828 0003 0022             		btst	#3,$22(a0)
00018404 6700                       		beq.s	loc_16420
00018406 43F8 D000                  		lea	($FFFFD000).w,a1
0001840A 08A9 0003 0022             		bclr	#3,$22(a1)
00018410 08A8 0003 0022             		bclr	#3,$22(a0)
00018416 4228 0025                  		clr.b	$25(a0)
0001841A                            
0001841A                            loc_16420:
0001841A 6000 0002                  		bra.w	*+4
0001841E                            
0001841E                            loc_16424:
0001841E 3028 0008                  		move.w	8(a0),d0
00018422 B068 0034                  		cmp.w	$34(a0),d0
00018426 6600                       		bne.s	loc_16484
00018428 3028 000C                  		move.w	$C(a0),d0
0001842C B068 0036                  		cmp.w	$36(a0),d0
00018430 6600                       		bne.s	loc_16484
00018432 7200                       		moveq	#0,d1
00018434 1228 0038                  		move.b	$38(a0),d1
00018438 D228 003A                  		add.b	$3A(a0),d1
0001843C B228 0039                  		cmp.b	$39(a0),d1
00018440 6500                       		bcs.s	loc_16456
00018442 1001                       		move.b	d1,d0
00018444 7200                       		moveq	#0,d1
00018446 4A00                       		tst.b	d0
00018448 6A00                       		bpl.s	loc_16456
0001844A 1228 0039                  		move.b	$39(a0),d1
0001844E 5901                       		subq.b	#4,d1
00018450                            
00018450                            loc_16456:
00018450 1141 0038                  		move.b	d1,$38(a0)
00018454 2268 003C                  		movea.l	$3C(a0),a1
00018458 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001845E 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00018464 4A41                       		tst.w	d1
00018466 6600                       		bne.s	loc_16474
00018468 117C 0001 001C             		move.b	#1,$1C(a0)
0001846E                            
0001846E                            loc_16474:
0001846E 0C41 0008                  		cmpi.w	#8,d1
00018472 6600                       		bne.s	loc_16480
00018474 117C 0000 001C             		move.b	#0,$1C(a0)
0001847A                            
0001847A                            loc_16480:
0001847A 6100 BA40                  		bsr.w	Obj63_ChangeDir
0001847E                            
0001847E                            loc_16484:
0001847E 4EF9 0000 E916             		jmp	SpeedToPos
00018484                            ; ===========================================================================
00018484                            Ani_obj6F:
00018484                            	include "_anim\obj6F.asm"
00018484                            ; ---------------------------------------------------------------------------
00018484                            ; Animation script - platform on conveyor belt (SBZ)
00018484                            ; ---------------------------------------------------------------------------
00018484 0000                       		dc.w byte_1648E-Ani_obj6F
00018486 0000                       		dc.w byte_164A2-Ani_obj6F
00018488 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00018495 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
0001849C 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
000184A0 00                         		even
000184A0 00                         		even
000184A0                            
000184A0 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
000184A6 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
000184AC 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
000184C0 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
000184D4 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
000184E8 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
000184FC 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00018510 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00018524                            ; ===========================================================================
00018524                            ; ---------------------------------------------------------------------------
00018524                            ; Object 70 - large girder block (SBZ)
00018524                            ; ---------------------------------------------------------------------------
00018524                            
00018524                            Obj70:					; XREF: Obj_Index
00018524 7000                       		moveq	#0,d0
00018526 1028 0024                  		move.b	$24(a0),d0
0001852A 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
0001852E 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00018532                            ; ===========================================================================
00018532 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00018534 0000                       		dc.w Obj70_Action-Obj70_Index
00018536                            ; ===========================================================================
00018536                            
00018536                            Obj70_Main:				; XREF: Obj70_Index
00018536 5428 0024                  		addq.b	#2,$24(a0)
0001853A 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00018542 317C 42F0 0002             		move.w	#$42F0,2(a0)
00018548 0028 0004 0001             		ori.b	#4,1(a0)
0001854E 117C 0004 0018             		move.b	#4,$18(a0)
00018554 117C 0060 0019             		move.b	#$60,$19(a0)
0001855A 117C 0018 0016             		move.b	#$18,$16(a0)
00018560 3168 0008 0032             		move.w	8(a0),$32(a0)
00018566 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001856C 6100 0000                  		bsr.w	Obj70_Move2
00018570                            
00018570                            Obj70_Action:				; XREF: Obj70_Index
00018570 3F28 0008                  		move.w	8(a0),-(sp)
00018574 4A68 003A                  		tst.w	$3A(a0)
00018578 6700                       		beq.s	Obj70_Move
0001857A 5368 003A                  		subq.w	#1,$3A(a0)
0001857E 6600                       		bne.s	Obj70_Solid
00018580                            
00018580                            Obj70_Move:
00018580 4EB9 0000 E916             		jsr	SpeedToPos
00018586 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
0001858A 6600                       		bne.s	Obj70_Solid	; if time remains, branch
0001858C 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00018590                            
00018590                            Obj70_Solid:
00018590 381F                       		move.w	(sp)+,d4
00018592 4A28 0001                  		tst.b	1(a0)
00018596 6A00                       		bpl.s	Obj70_ChkDel
00018598 7200                       		moveq	#0,d1
0001859A 1228 0019                  		move.b	$19(a0),d1
0001859E 0641 000B                  		addi.w	#$B,d1
000185A2 7400                       		moveq	#0,d2
000185A4 1428 0016                  		move.b	$16(a0),d2
000185A8 3602                       		move.w	d2,d3
000185AA 5243                       		addq.w	#1,d3
000185AC 6100 8CF0                  		bsr.w	SolidObject
000185B0                            
000185B0                            Obj70_ChkDel:
000185B0 3028 0032                  		move.w	$32(a0),d0
000185B4 0240 FF80                  		andi.w	#$FF80,d0
000185B8 3238 F700                  		move.w	($FFFFF700).w,d1
000185BC 0441 0080                  		subi.w	#$80,d1
000185C0 0241 FF80                  		andi.w	#$FF80,d1
000185C4 9041                       		sub.w	d1,d0
000185C6 0C40 0280                  		cmpi.w	#$280,d0
000185CA 6300                       		bls.s	Obj70_NoDel
000185CC                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
000185CC                            	;	beq.s	Obj70_Delete		; if it's zero, don't remember object
000185CC                            	;	movea.w	d0,a2	; load address into a2
000185CC                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000185CC 6000                       		bra.s	Obj70_Delete	; and delete object
000185CE                            
000185CE                            Obj70_NoDel:
000185CE 4EF9 0000 E930             		jmp	DisplaySprite
000185D4                            ; ===========================================================================
000185D4                            
000185D4                            Obj70_Delete:
000185D4 4EF9 0000 E980             		jmp	DeleteObject
000185DA                            ; ===========================================================================
000185DA                            
000185DA                            Obj70_Move2:				; XREF: Obj70_Main
000185DA 1028 0038                  		move.b	$38(a0),d0
000185DE 0240 0018                  		andi.w	#$18,d0
000185E2 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
000185E8 43F1 0000                  		lea	(a1,d0.w),a1
000185EC 3159 0010                  		move.w	(a1)+,$10(a0)
000185F0 3159 0012                  		move.w	(a1)+,$12(a0)
000185F4 3159 0034                  		move.w	(a1)+,$34(a0)
000185F8 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
000185FC 317C 0007 003A             		move.w	#7,$3A(a0)
00018602 4E75                       		rts	
00018604                            ; ===========================================================================
00018604 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
0001860C 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00018614 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
0001861C 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00018624                            ; ---------------------------------------------------------------------------
00018624                            ; Sprite mappings - large girder block (SBZ)
00018624                            ; ---------------------------------------------------------------------------
00018624                            Map_obj70:
00018624                            	include "_maps\obj70.asm"
00018624                            ; ---------------------------------------------------------------------------
00018624                            ; Sprite mappings - large girder block (SBZ)
00018624                            ; ---------------------------------------------------------------------------
00018624 0000                       		dc.w byte_1662A-Map_obj70
00018626 0C                         byte_1662A:	dc.b $C
00018627 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001862C 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00018631 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00018636 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001863B E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00018640 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00018645 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001864A 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0001864F E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00018654 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00018659 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0001865E 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00018664 00                         		even
00018664 00                         		even
00018664                            
00018664                            ; ===========================================================================
00018664                            ; ---------------------------------------------------------------------------
00018664                            ; Object 72 - teleporter (SBZ)
00018664                            ; ---------------------------------------------------------------------------
00018664                            
00018664                            Obj72:					; XREF: Obj_Index
00018664 7000                       		moveq	#0,d0
00018666 1028 0024                  		move.b	$24(a0),d0
0001866A 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
0001866E 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00018672 3028 0008                  		move.w	8(a0),d0
00018676 0240 FF80                  		andi.w	#$FF80,d0
0001867A 3238 F700                  		move.w	($FFFFF700).w,d1
0001867E 0441 0080                  		subi.w	#$80,d1
00018682 0241 FF80                  		andi.w	#$FF80,d1
00018686 9041                       		sub.w	d1,d0
00018688 0C40 0280                  		cmpi.w	#$280,d0
0001868C 6300                       		bls.s	Obj72_NoDel
0001868E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018692 6700                       		beq.s	Obj72_Delete	; if it's zero, don't remember object
00018694 3440                       		movea.w	d0,a2	; load address into a2
00018696 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001869A 6000                       		bra.s	Obj72_Delete	; and delete object
0001869C                            
0001869C                            Obj72_NoDel:
0001869C 4E75                       		rts	
0001869E                            ; ===========================================================================
0001869E                            
0001869E                            Obj72_Delete:
0001869E 4EF9 0000 E980             		jmp	DeleteObject
000186A4                            ; ===========================================================================
000186A4 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
000186A6 0000                       		dc.w loc_166C8-Obj72_Index
000186A8 0000                       		dc.w loc_1675E-Obj72_Index
000186AA 0000                       		dc.w loc_16798-Obj72_Index
000186AC                            ; ===========================================================================
000186AC                            
000186AC                            Obj72_Main:				; XREF: Obj72_Index
000186AC 5428 0024                  		addq.b	#2,$24(a0)
000186B0 1028 0028                  		move.b	$28(a0),d0
000186B4 D040                       		add.w	d0,d0
000186B6 0240 001E                  		andi.w	#$1E,d0
000186BA 45FA 0000                  		lea	Obj72_Data(pc),a2
000186BE D4F2 0000                  		adda.w	(a2,d0.w),a2
000186C2 315A 003A                  		move.w	(a2)+,$3A(a0)
000186C6 214A 003C                  		move.l	a2,$3C(a0)
000186CA 315A 0036                  		move.w	(a2)+,$36(a0)
000186CE 315A 0038                  		move.w	(a2)+,$38(a0)
000186D2                            
000186D2                            loc_166C8:				; XREF: Obj72_Index
000186D2 43F8 D000                  		lea	($FFFFD000).w,a1
000186D6 3029 0008                  		move.w	8(a1),d0
000186DA 9068 0008                  		sub.w	8(a0),d0
000186DE 0828 0000 0022             		btst	#0,$22(a0)
000186E4 6700                       		beq.s	loc_166E0
000186E6 0640 000F                  		addi.w	#$F,d0
000186EA                            
000186EA                            loc_166E0:
000186EA 0C40 0010                  		cmpi.w	#$10,d0
000186EE 6400                       		bcc.s	locret_1675C
000186F0 3229 000C                  		move.w	$C(a1),d1
000186F4 9268 000C                  		sub.w	$C(a0),d1
000186F8 0641 0020                  		addi.w	#$20,d1
000186FC 0C41 0040                  		cmpi.w	#$40,d1
00018700 6400                       		bcc.s	locret_1675C
00018702 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018706 6600                       		bne.s	locret_1675C
00018708 0C28 0007 0028             		cmpi.b	#7,$28(a0)
0001870E 6600                       		bne.s	loc_1670E
00018710 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00018716 6500                       		bcs.s	locret_1675C
00018718                            
00018718                            loc_1670E:
00018718 5428 0024                  		addq.b	#2,$24(a0)
0001871C 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00018722 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00018728 337C 0800 0020             		move.w	#$800,$20(a1)
0001872E 337C 0000 0010             		move.w	#0,$10(a1)
00018734 337C 0000 0012             		move.w	#0,$12(a1)
0001873A 08A8 0005 0022             		bclr	#5,$22(a0)
00018740 08A9 0005 0022             		bclr	#5,$22(a1)
00018746 08E9 0001 0022             		bset	#1,$22(a1)
0001874C 3368 0008 0008             		move.w	8(a0),8(a1)
00018752 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018758 4228 0032                  		clr.b	$32(a0)
0001875C 303C 00BE                  		move.w	#$BE,d0
00018760 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00018766                            
00018766                            locret_1675C:
00018766 4E75                       		rts	
00018768                            ; ===========================================================================
00018768                            
00018768                            loc_1675E:				; XREF: Obj72_Index
00018768 43F8 D000                  		lea	($FFFFD000).w,a1
0001876C 1028 0032                  		move.b	$32(a0),d0
00018770 5428 0032                  		addq.b	#2,$32(a0)
00018774 4EB9 0000 29F6             		jsr	(CalcSine).l
0001877A EA40                       		asr.w	#5,d0
0001877C 3428 000C                  		move.w	$C(a0),d2
00018780 9440                       		sub.w	d0,d2
00018782 3342 000C                  		move.w	d2,$C(a1)
00018786 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0001878C 6600                       		bne.s	locret_16796
0001878E 6100 0000                  		bsr.w	sub_1681C
00018792 5428 0024                  		addq.b	#2,$24(a0)
00018796 303C 00BC                  		move.w	#$BC,d0
0001879A 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play teleport sound
000187A0                            
000187A0                            locret_16796:
000187A0 4E75                       		rts	
000187A2                            ; ===========================================================================
000187A2                            
000187A2                            loc_16798:				; XREF: Obj72_Index
000187A2 588F                       		addq.l	#4,sp
000187A4 43F8 D000                  		lea	($FFFFD000).w,a1
000187A8 5328 002E                  		subq.b	#1,$2E(a0)
000187AC 6A00                       		bpl.s	loc_167DA
000187AE 3368 0036 0008             		move.w	$36(a0),8(a1)
000187B4 3368 0038 000C             		move.w	$38(a0),$C(a1)
000187BA 7200                       		moveq	#0,d1
000187BC 1228 003A                  		move.b	$3A(a0),d1
000187C0 5801                       		addq.b	#4,d1
000187C2 B228 003B                  		cmp.b	$3B(a0),d1
000187C6 6500                       		bcs.s	loc_167C2
000187C8 7200                       		moveq	#0,d1
000187CA 6000                       		bra.s	loc_16800
000187CC                            ; ===========================================================================
000187CC                            
000187CC                            loc_167C2:
000187CC 1141 003A                  		move.b	d1,$3A(a0)
000187D0 2468 003C                  		movea.l	$3C(a0),a2
000187D4 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000187DA 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000187E0 6000 0000                  		bra.w	sub_1681C
000187E4                            ; ===========================================================================
000187E4                            
000187E4                            loc_167DA:
000187E4 2429 0008                  		move.l	8(a1),d2
000187E8 2629 000C                  		move.l	$C(a1),d3
000187EC 3029 0010                  		move.w	$10(a1),d0
000187F0 48C0                       		ext.l	d0
000187F2 E180                       		asl.l	#8,d0
000187F4 D480                       		add.l	d0,d2
000187F6 3029 0012                  		move.w	$12(a1),d0
000187FA 48C0                       		ext.l	d0
000187FC E180                       		asl.l	#8,d0
000187FE D680                       		add.l	d0,d3
00018800 2342 0008                  		move.l	d2,8(a1)
00018804 2343 000C                  		move.l	d3,$C(a1)
00018808 4E75                       		rts	
0001880A                            ; ===========================================================================
0001880A                            
0001880A                            loc_16800:
0001880A 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00018810 4228 0024                  		clr.b	$24(a0)
00018814 4238 F7C8                  		clr.b	($FFFFF7C8).w
00018818 337C 0000 0010             		move.w	#0,$10(a1)
0001881E 337C 0200 0012             		move.w	#$200,$12(a1)
00018824 4E75                       		rts	
00018826                            
00018826                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018826                            
00018826                            
00018826                            sub_1681C:
00018826 7000                       		moveq	#0,d0
00018828 343C 1000                  		move.w	#$1000,d2
0001882C 3028 0036                  		move.w	$36(a0),d0
00018830 9069 0008                  		sub.w	8(a1),d0
00018834 6C00                       		bge.s	loc_16830
00018836 4440                       		neg.w	d0
00018838 4442                       		neg.w	d2
0001883A                            
0001883A                            loc_16830:
0001883A 7200                       		moveq	#0,d1
0001883C 363C 1000                  		move.w	#$1000,d3
00018840 3228 0038                  		move.w	$38(a0),d1
00018844 9269 000C                  		sub.w	$C(a1),d1
00018848 6C00                       		bge.s	loc_16844
0001884A 4441                       		neg.w	d1
0001884C 4443                       		neg.w	d3
0001884E                            
0001884E                            loc_16844:
0001884E B240                       		cmp.w	d0,d1
00018850 6500                       		bcs.s	loc_1687A
00018852 7200                       		moveq	#0,d1
00018854 3228 0038                  		move.w	$38(a0),d1
00018858 9269 000C                  		sub.w	$C(a1),d1
0001885C 4841                       		swap	d1
0001885E 83C3                       		divs.w	d3,d1
00018860 7000                       		moveq	#0,d0
00018862 3028 0036                  		move.w	$36(a0),d0
00018866 9069 0008                  		sub.w	8(a1),d0
0001886A 6700                       		beq.s	loc_16866
0001886C 4840                       		swap	d0
0001886E 81C1                       		divs.w	d1,d0
00018870                            
00018870                            loc_16866:
00018870 3340 0010                  		move.w	d0,$10(a1)
00018874 3343 0012                  		move.w	d3,$12(a1)
00018878 4A41                       		tst.w	d1
0001887A 6A00                       		bpl.s	loc_16874
0001887C 4441                       		neg.w	d1
0001887E                            
0001887E                            loc_16874:
0001887E 3141 002E                  		move.w	d1,$2E(a0)
00018882 4E75                       		rts	
00018884                            ; ===========================================================================
00018884                            
00018884                            loc_1687A:
00018884 7000                       		moveq	#0,d0
00018886 3028 0036                  		move.w	$36(a0),d0
0001888A 9069 0008                  		sub.w	8(a1),d0
0001888E 4840                       		swap	d0
00018890 81C2                       		divs.w	d2,d0
00018892 7200                       		moveq	#0,d1
00018894 3228 0038                  		move.w	$38(a0),d1
00018898 9269 000C                  		sub.w	$C(a1),d1
0001889C 6700                       		beq.s	loc_16898
0001889E 4841                       		swap	d1
000188A0 83C0                       		divs.w	d0,d1
000188A2                            
000188A2                            loc_16898:
000188A2 3341 0012                  		move.w	d1,$12(a1)
000188A6 3342 0010                  		move.w	d2,$10(a1)
000188AA 4A40                       		tst.w	d0
000188AC 6A00                       		bpl.s	loc_168A6
000188AE 4440                       		neg.w	d0
000188B0                            
000188B0                            loc_168A6:
000188B0 3140 002E                  		move.w	d0,$2E(a0)
000188B4 4E75                       		rts	
000188B6                            ; End of function sub_1681C
000188B6                            
000188B6                            ; ===========================================================================
000188B6 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
000188BC 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
000188C2 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
000188C6 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
000188CC 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
000188D2 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
000188D8 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000188DE 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000188E4 0884 0298 0894             		dc.w $884, $298, $894
000188EA 0270 0894 0190             		dc.w $270, $894, $190
000188F0 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
000188F6 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
000188FC 1184 0498 1158             		dc.w $1184, $498, $1158
00018902 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00018908 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
0001890E 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00018914 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
0001891A 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00018920 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00018926 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0001892C 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00018932 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00018938 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
0001893E                            ; ===========================================================================
0001893E                            ; ---------------------------------------------------------------------------
0001893E                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
0001893E                            ; ---------------------------------------------------------------------------
0001893E                            
0001893E                            Obj78:					; XREF: Obj_Index
0001893E 7000                       		moveq	#0,d0
00018940 1028 0024                  		move.b	$24(a0),d0
00018944 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00018948 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
0001894C                            ; ===========================================================================
0001894C 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
0001894E 0000                       		dc.w Obj78_Action-Obj78_Index
00018950 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00018952 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00018954 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00018956 0000                       		dc.w Obj78_Delete-Obj78_Index
00018958 0000                       		dc.w loc_16CC0-Obj78_Index
0001895A                            ; ===========================================================================
0001895A                            
0001895A                            locret_16950:
0001895A 4E75                       		rts	
0001895C                            ; ===========================================================================
0001895C                            
0001895C                            Obj78_Main:				; XREF: Obj78_Index
0001895C 117C 0007 0016             		move.b	#7,$16(a0)
00018962 117C 0008 0017             		move.b	#8,$17(a0)
00018968 4EB9 0000 E8F6             		jsr	ObjectFall
0001896E 4EBA E4BC                  		jsr	ObjHitFloor
00018972 4A41                       		tst.w	d1
00018974 6AE4                       		bpl.s	locret_16950
00018976 D368 000C                  		add.w	d1,$C(a0)
0001897A 4268 0012                  		clr.w	$12(a0)
0001897E 5428 0024                  		addq.b	#2,$24(a0)
00018982 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
0001898A 317C 22B0 0002             		move.w	#$22B0,2(a0)
00018990 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00018996 6700                       		beq.s	loc_16996
00018998 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
0001899E                            
0001899E                            loc_16996:
0001899E 0228 0003 0001             		andi.b	#3,1(a0)
000189A4 0028 0004 0001             		ori.b	#4,1(a0)
000189AA 1168 0001 0022             		move.b	1(a0),$22(a0)
000189B0 117C 0004 0018             		move.b	#4,$18(a0)
000189B6 117C 0008 0019             		move.b	#8,$19(a0)
000189BC 117C 000B 0020             		move.b	#$B,$20(a0)
000189C2 3428 0008                  		move.w	8(a0),d2
000189C6 7A0C                       		moveq	#$C,d5
000189C8 0828 0000 0022             		btst	#0,$22(a0)
000189CE 6700                       		beq.s	loc_169CA
000189D0 4445                       		neg.w	d5
000189D2                            
000189D2                            loc_169CA:
000189D2 1C3C 0004                  		move.b	#4,d6
000189D6 7600                       		moveq	#0,d3
000189D8 7804                       		moveq	#4,d4
000189DA 2448                       		movea.l	a0,a2
000189DC 7202                       		moveq	#2,d1
000189DE                            
000189DE                            Obj78_LoadBody:
000189DE 4EB9 0000 F09C             		jsr	SingleObjLoad2
000189E4 6600                       		bne.s	Obj78_QuitLoad
000189E6 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
000189EA 1346 0024                  		move.b	d6,$24(a1)
000189EE 5406                       		addq.b	#2,d6
000189F0 2368 0004 0004             		move.l	4(a0),4(a1)
000189F6 3368 0002 0002             		move.w	2(a0),2(a1)
000189FC 137C 0005 0018             		move.b	#5,$18(a1)
00018A02 137C 0008 0019             		move.b	#8,$19(a1)
00018A08 137C 00CB 0020             		move.b	#$CB,$20(a1)
00018A0E D445                       		add.w	d5,d2
00018A10 3342 0008                  		move.w	d2,8(a1)
00018A14 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018A1A 1368 0022 0022             		move.b	$22(a0),$22(a1)
00018A20 1368 0022 0001             		move.b	$22(a0),1(a1)
00018A26 137C 0008 001A             		move.b	#8,$1A(a1)
00018A2C 234A 003C                  		move.l	a2,$3C(a1)
00018A30 1344 003C                  		move.b	d4,$3C(a1)
00018A34 5804                       		addq.b	#4,d4
00018A36 2449                       		movea.l	a1,a2
00018A38                            
00018A38                            Obj78_QuitLoad:
00018A38 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00018A3C                            
00018A3C 117C 0007 002A             		move.b	#7,$2A(a0)
00018A42 4228 003C                  		clr.b	$3C(a0)
00018A46                            
00018A46                            Obj78_Action:				; XREF: Obj78_Index
00018A46 4A28 0022                  		tst.b	$22(a0)
00018A4A 6B00 0000                  		bmi.w	loc_16C96
00018A4E 7000                       		moveq	#0,d0
00018A50 1028 0025                  		move.b	$25(a0),d0
00018A54 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00018A58 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00018A5C 1228 002B                  		move.b	$2B(a0),d1
00018A60 6A00                       		bpl.s	Obj78_Display
00018A62 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018A68 1028 0026                  		move.b	$26(a0),d0
00018A6C 0240 007F                  		andi.w	#$7F,d0
00018A70 5828 0026                  		addq.b	#4,$26(a0)
00018A74 1031 0000                  		move.b	(a1,d0.w),d0
00018A78 6A00                       		bpl.s	Obj78_AniHead
00018A7A 08A8 0007 002B             		bclr	#7,$2B(a0)
00018A80 6000                       		bra.s	Obj78_Display
00018A82                            ; ===========================================================================
00018A82                            
00018A82                            Obj78_AniHead:
00018A82 0201 0010                  		andi.b	#$10,d1
00018A86 D001                       		add.b	d1,d0
00018A88 1140 001A                  		move.b	d0,$1A(a0)
00018A8C                            
00018A8C                            Obj78_Display:
00018A8C 3028 0008                  		move.w	8(a0),d0
00018A90 0240 FF80                  		andi.w	#$FF80,d0
00018A94 3238 F700                  		move.w	($FFFFF700).w,d1
00018A98 0441 0080                  		subi.w	#$80,d1
00018A9C 0241 FF80                  		andi.w	#$FF80,d1
00018AA0 9041                       		sub.w	d1,d0
00018AA2 0C40 0280                  		cmpi.w	#$280,d0
00018AA6 6200 0000                  		bhi.w	Obj78_ChkGone
00018AAA 4EF9 0000 E930             		jmp	DisplaySprite
00018AB0                            ; ===========================================================================
00018AB0                            
00018AB0                            Obj78_ChkGone:
00018AB0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018AB4 6700                       		beq.s	loc_16ABC		; if it's zero, don't remember object
00018AB6 3440                       		movea.w	d0,a2	; load address into a2
00018AB8 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00018ABC                            
00018ABC                            loc_16ABC:
00018ABC 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00018AC2 4E75                       		rts	
00018AC4                            ; ===========================================================================
00018AC4                            
00018AC4                            Obj78_Delete:				; XREF: Obj78_Index
00018AC4 4EF9 0000 E980             		jmp	DeleteObject
00018ACA                            ; ===========================================================================
00018ACA 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00018ACC 0000                       		dc.w loc_16B02-Obj78_Index2
00018ACE                            ; ===========================================================================
00018ACE                            
00018ACE                            Obj78_Move:				; XREF: Obj78_Index2
00018ACE 5328 002A                  		subq.b	#1,$2A(a0)
00018AD2 6B00                       		bmi.s	Obj78_Move2
00018AD4 4E75                       		rts	
00018AD6                            ; ===========================================================================
00018AD6                            
00018AD6                            Obj78_Move2:
00018AD6 5428 0025                  		addq.b	#2,$25(a0)
00018ADA 117C 0010 002A             		move.b	#$10,$2A(a0)
00018AE0 317C FF40 0010             		move.w	#-$C0,$10(a0)
00018AE6 317C 0040 001C             		move.w	#$40,$1C(a0)
00018AEC 0868 0004 002B             		bchg	#4,$2B(a0)
00018AF2 6600                       		bne.s	loc_16AFC
00018AF4 4268 0010                  		clr.w	$10(a0)
00018AF8 4468 001C                  		neg.w	$1C(a0)
00018AFC                            
00018AFC                            loc_16AFC:
00018AFC 08E8 0007 002B             		bset	#7,$2B(a0)
00018B02                            
00018B02                            loc_16B02:				; XREF: Obj78_Index2
00018B02 5328 002A                  		subq.b	#1,$2A(a0)
00018B06 6B00                       		bmi.s	loc_16B5E
00018B08 2F28 0008                  		move.l	8(a0),-(sp)
00018B0C 2428 0008                  		move.l	8(a0),d2
00018B10 3028 0010                  		move.w	$10(a0),d0
00018B14 0828 0000 0022             		btst	#0,$22(a0)
00018B1A 6700                       		beq.s	loc_16B1E
00018B1C 4440                       		neg.w	d0
00018B1E                            
00018B1E                            loc_16B1E:
00018B1E 48C0                       		ext.l	d0
00018B20 E180                       		asl.l	#8,d0
00018B22 D480                       		add.l	d0,d2
00018B24 2142 0008                  		move.l	d2,8(a0)
00018B28 4EBA E302                  		jsr	ObjHitFloor
00018B2C 241F                       		move.l	(sp)+,d2
00018B2E 0C41 FFF8                  		cmpi.w	#-8,d1
00018B32 6D00                       		blt.s	loc_16B70
00018B34 0C41 000C                  		cmpi.w	#$C,d1
00018B38 6C00                       		bge.s	loc_16B70
00018B3A D368 000C                  		add.w	d1,$C(a0)
00018B3E 4842                       		swap	d2
00018B40 B468 0008                  		cmp.w	8(a0),d2
00018B44 6700                       		beq.s	locret_16B5C
00018B46 7000                       		moveq	#0,d0
00018B48 1028 003C                  		move.b	$3C(a0),d0
00018B4C 5228 003C                  		addq.b	#1,$3C(a0)
00018B50 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018B56 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018B5A                            
00018B5A                            locret_16B5C:
00018B5A 4E75                       		rts	
00018B5C                            ; ===========================================================================
00018B5C                            
00018B5C                            loc_16B5E:
00018B5C 5528 0025                  		subq.b	#2,$25(a0)
00018B60 117C 0007 002A             		move.b	#7,$2A(a0)
00018B66 317C 0000 0010             		move.w	#0,$10(a0)
00018B6C 4E75                       		rts	
00018B6E                            ; ===========================================================================
00018B6E                            
00018B6E                            loc_16B70:
00018B6E 2142 0008                  		move.l	d2,8(a0)
00018B72 0868 0000 0022             		bchg	#0,$22(a0)
00018B78 1168 0022 0001             		move.b	$22(a0),1(a0)
00018B7E 7000                       		moveq	#0,d0
00018B80 1028 003C                  		move.b	$3C(a0),d0
00018B84 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00018B8A 5228 003C                  		addq.b	#1,$3C(a0)
00018B8E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018B94 4E75                       		rts	
00018B96                            ; ===========================================================================
00018B96                            
00018B96                            Obj78_BodySeg2:				; XREF: Obj78_Index
00018B96 2268 003C                  		movea.l	$3C(a0),a1
00018B9A 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018BA0 6A00                       		bpl.s	Obj78_BodySeg1
00018BA2 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018BA8 1028 0026                  		move.b	$26(a0),d0
00018BAC 0240 007F                  		andi.w	#$7F,d0
00018BB0 5828 0026                  		addq.b	#4,$26(a0)
00018BB4 4A31 0004                  		tst.b	4(a1,d0.w)
00018BB8 6A00                       		bpl.s	Obj78_AniBody
00018BBA 5828 0026                  		addq.b	#4,$26(a0)
00018BBE                            
00018BBE                            Obj78_AniBody:
00018BBE 1031 0000                  		move.b	(a1,d0.w),d0
00018BC2 5000                       		addq.b	#8,d0
00018BC4 1140 001A                  		move.b	d0,$1A(a0)
00018BC8                            
00018BC8                            Obj78_BodySeg1:				; XREF: Obj78_Index
00018BC8 2268 003C                  		movea.l	$3C(a0),a1
00018BCC 4A28 0022                  		tst.b	$22(a0)
00018BD0 6B00 0000                  		bmi.w	loc_16C90
00018BD4 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018BDA 1169 0025 0025             		move.b	$25(a1),$25(a0)
00018BE0 6700 0000                  		beq.w	loc_16C64
00018BE4 3169 001C 001C             		move.w	$1C(a1),$1C(a0)
00018BEA 3029 0010                  		move.w	$10(a1),d0
00018BEE D069 001C                  		add.w	$1C(a1),d0
00018BF2 3140 0010                  		move.w	d0,$10(a0)
00018BF6 2428 0008                  		move.l	8(a0),d2
00018BFA 2602                       		move.l	d2,d3
00018BFC 3028 0010                  		move.w	$10(a0),d0
00018C00 0828 0000 0022             		btst	#0,$22(a0)
00018C06 6700                       		beq.s	loc_16C0C
00018C08 4440                       		neg.w	d0
00018C0A                            
00018C0A                            loc_16C0C:
00018C0A 48C0                       		ext.l	d0
00018C0C E180                       		asl.l	#8,d0
00018C0E D480                       		add.l	d0,d2
00018C10 2142 0008                  		move.l	d2,8(a0)
00018C14 4843                       		swap	d3
00018C16 B668 0008                  		cmp.w	8(a0),d3
00018C1A 6700                       		beq.s	loc_16C64
00018C1C 7000                       		moveq	#0,d0
00018C1E 1028 003C                  		move.b	$3C(a0),d0
00018C22 1231 002C                  		move.b	$2C(a1,d0.w),d1
00018C26 0C01 0080                  		cmpi.b	#-$80,d1
00018C2A 6600                       		bne.s	loc_16C50
00018C2C 4843                       		swap	d3
00018C2E 2143 0008                  		move.l	d3,8(a0)
00018C32 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018C36 0868 0000 0022             		bchg	#0,$22(a0)
00018C3C 1168 0022 0001             		move.b	$22(a0),1(a0)
00018C42 5228 003C                  		addq.b	#1,$3C(a0)
00018C46 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018C4C 6000                       		bra.s	loc_16C64
00018C4E                            ; ===========================================================================
00018C4E                            
00018C4E                            loc_16C50:
00018C4E 4881                       		ext.w	d1
00018C50 D368 000C                  		add.w	d1,$C(a0)
00018C54 5228 003C                  		addq.b	#1,$3C(a0)
00018C58 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018C5E 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018C62                            
00018C62                            loc_16C64:
00018C62 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00018C68 6700                       		beq.s	loc_16C90
00018C6A 0C11 0027                  		cmpi.b	#$27,0(a1)
00018C6E 6700                       		beq.s	loc_16C7C
00018C70 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00018C76 6600                       		bne.s	loc_16C82
00018C78                            
00018C78                            loc_16C7C:
00018C78 4229 0020                  		clr.b	$20(a1)	; immediately remove all touch response values when destroying the head to avoid taking damage
00018C7C 117C 000A 0024             		move.b	#$A,$24(a0)
00018C82                            
00018C82                            loc_16C82:
00018C82 4EF9 0000 E930             		jmp	DisplaySprite
00018C88                            
00018C88                            ; ===========================================================================
00018C88 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00018C90                            ; ===========================================================================
00018C90                            
00018C90                            loc_16C90:
00018C90 08E9 0007 0022             		bset	#7,$22(a1)
00018C96                            
00018C96                            loc_16C96:
00018C96 7000                       		moveq	#0,d0
00018C98 1028 0024                  		move.b	$24(a0),d0
00018C9C 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00018CA0 0828 0000 0022             		btst	#0,$22(a0)
00018CA6 6700                       		beq.s	loc_16CAA
00018CA8 4440                       		neg.w	d0
00018CAA                            
00018CAA                            loc_16CAA:
00018CAA 3140 0010                  		move.w	d0,$10(a0)
00018CAE 317C FC00 0012             		move.w	#-$400,$12(a0)
00018CB4 117C 000C 0024             		move.b	#$C,$24(a0)
00018CBA 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00018CC0                            
00018CC0                            loc_16CC0:				; XREF: Obj78_Index
00018CC0 4EB9 0000 E8F6             		jsr	ObjectFall
00018CC6 4A68 0012                  		tst.w	$12(a0)
00018CCA 6B00                       		bmi.s	loc_16CE0
00018CCC 4EBA E15E                  		jsr	ObjHitFloor
00018CD0 4A41                       		tst.w	d1
00018CD2 6A00                       		bpl.s	loc_16CE0
00018CD4 D368 000C                  		add.w	d1,$C(a0)
00018CD8 317C FC00 0012             		move.w	#-$400,$12(a0)
00018CDE                            
00018CDE                            loc_16CE0:
00018CDE 4A28 0001                  		tst.b	1(a0)
00018CE2 6A00 FDCC                  		bpl.w	Obj78_ChkGone
00018CE6 4EF9 0000 E930             		jmp	DisplaySprite
00018CEC                            ; ===========================================================================
00018CEC                            Ani_obj78:
00018CEC                            	include "_anim\obj78.asm"
00018CEC                            ; ---------------------------------------------------------------------------
00018CEC                            ; Animation script - Caterkiller enemy (uses non-standard format)
00018CEC                            ; ---------------------------------------------------------------------------
00018CEC 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00018CFC 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00018D0C 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00018D1C 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00018D2C 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00018D3C 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00018D4C 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00018D5C 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00018D6C                            	even
00018D6C                            	even
00018D6C                            
00018D6C                            ; ---------------------------------------------------------------------------
00018D6C                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018D6C                            ; ---------------------------------------------------------------------------
00018D6C                            Map_obj78:
00018D6C                            	include "_maps\obj78.asm"
00018D6C                            ; ---------------------------------------------------------------------------
00018D6C                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018D6C                            ; ---------------------------------------------------------------------------
00018D6C 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00018D70 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00018D74 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00018D78 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00018D7C 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00018D80 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00018D84 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00018D88 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00018D8C 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00018D90 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00018D94 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00018D98 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00018D9C 01                         byte_16D9E:	dc.b 1
00018D9D F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00018DA2 01                         byte_16DA4:	dc.b 1
00018DA3 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00018DA8 01                         byte_16DAA:	dc.b 1
00018DA9 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00018DAE 01                         byte_16DB0:	dc.b 1
00018DAF EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00018DB4 01                         byte_16DB6:	dc.b 1
00018DB5 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00018DBA 01                         byte_16DBC:	dc.b 1
00018DBB ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00018DC0 01                         byte_16DC2:	dc.b 1
00018DC1 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00018DC6 01                         byte_16DC8:	dc.b 1
00018DC7 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00018DCC 01                         byte_16DCE:	dc.b 1
00018DCD F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00018DD2 01                         byte_16DD4:	dc.b 1
00018DD3 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00018DD8 01                         byte_16DDA:	dc.b 1
00018DD9 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00018DDE 01                         byte_16DE0:	dc.b 1
00018DDF F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00018DE4 01                         byte_16DE6:	dc.b 1
00018DE5 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00018DEA 01                         byte_16DEC:	dc.b 1
00018DEB F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00018DF0 01                         byte_16DF2:	dc.b 1
00018DF1 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00018DF6 01                         byte_16DF8:	dc.b 1
00018DF7 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00018DFC 01                         byte_16DFE:	dc.b 1
00018DFD F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00018E02 01                         byte_16E04:	dc.b 1
00018E03 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00018E08 01                         byte_16E0A:	dc.b 1
00018E09 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00018E0E 01                         byte_16E10:	dc.b 1
00018E0F EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00018E14 01                         byte_16E16:	dc.b 1
00018E15 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00018E1A 01                         byte_16E1C:	dc.b 1
00018E1B ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00018E20 01                         byte_16E22:	dc.b 1
00018E21 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00018E26 01                         byte_16E28:	dc.b 1
00018E27 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00018E2C                            		even
00018E2C                            		even
00018E2C                            
00018E2C                            ; ===========================================================================
00018E2C                            ; ---------------------------------------------------------------------------
00018E2C                            ; Object 79 - lamppost
00018E2C                            ; ---------------------------------------------------------------------------
00018E2C                            
00018E2C                            Obj79:					; XREF: Obj_Index
00018E2C 7000                       		moveq	#0,d0
00018E2E 1028 0024                  		move.b	$24(a0),d0
00018E32 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00018E36 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00018E3A 4EFA 813E                  		jmp	MarkObjGone
00018E3E                            ; ===========================================================================
00018E3E 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00018E40 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00018E42 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00018E44 0000                       		dc.w Obj79_Twirl-Obj79_Index
00018E46                            ; ===========================================================================
00018E46                            
00018E46                            Obj79_Main:				; XREF: Obj79_Index
00018E46 5428 0024                  		addq.b	#2,$24(a0)
00018E4A 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00018E52 317C 0571 0002             		move.w	#lamppostart,2(a0)
00018E58 117C 0004 0001             		move.b	#4,1(a0)
00018E5E 117C 0008 0019             		move.b	#8,$19(a0)
00018E64 117C 0005 0018             		move.b	#5,$18(a0)
00018E6A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018E6E 3440                       		movea.w	d0,a2	; load address into a2
00018E70 0812 0000                  		btst	#0,(a2)
00018E74 6600                       		bne.s	Obj79_RedLamp
00018E76 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018E7A 0201 007F                  		andi.b	#$7F,d1
00018E7E 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00018E82 0202 007F                  		andi.b	#$7F,d2
00018E86 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00018E88 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00018E8A                            
00018E8A                            Obj79_RedLamp:
00018E8A 08D2 0000                  		bset	#0,(a2)
00018E8E 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00018E94 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00018E9A 4E75                       		rts	
00018E9C                            ; ===========================================================================
00018E9C                            
00018E9C                            Obj79_BlueLamp:				; XREF: Obj79_Index
00018E9C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00018EA0 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00018EA4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018EA8 6B00 0000                  		bmi.w	locret_16F90
00018EAC 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018EB0 0201 007F                  		andi.b	#$7F,d1
00018EB4 1428 0028                  		move.b	$28(a0),d2
00018EB8 0202 007F                  		andi.b	#$7F,d2
00018EBC B202                       		cmp.b	d2,d1
00018EBE 6500                       		bcs.s	Obj79_HitLamp
00018EC0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018EC4 3440                       		movea.w	d0,a2	; load address into a2
00018EC6 08D2 0000                  		bset	#0,(a2)
00018ECA 117C 0004 0024             		move.b	#4,$24(a0)
00018ED0 117C 0003 001A             		move.b	#3,$1A(a0)
00018ED6 6000 0000                  		bra.w	locret_16F90
00018EDA                            ; ===========================================================================
00018EDA                            
00018EDA                            Obj79_HitLamp:
00018EDA 3038 D008                  		move.w	($FFFFD008).w,d0
00018EDE 9068 0008                  		sub.w	8(a0),d0
00018EE2 5040                       		addq.w	#8,d0
00018EE4 0C40 0010                  		cmpi.w	#$10,d0
00018EE8 6400 0000                  		bcc.w	locret_16F90
00018EEC 3038 D00C                  		move.w	($FFFFD00C).w,d0
00018EF0 9068 000C                  		sub.w	$C(a0),d0
00018EF4 0640 0040                  		addi.w	#$40,d0
00018EF8 0C40 0068                  		cmpi.w	#$68,d0
00018EFC 6400                       		bcc.s	locret_16F90
00018EFE 303C 00A1                  		move.w	#$A1,d0
00018F02 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play lamppost sound
00018F08 5428 0024                  		addq.b	#2,$24(a0)
00018F0C 4EB9 0000 F086             		jsr	SingleObjLoad
00018F12 6600                       		bne.s	loc_16F76
00018F14 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00018F18 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00018F1E 3368 0008 0030             		move.w	8(a0),$30(a1)
00018F24 3368 000C 0032             		move.w	$C(a0),$32(a1)
00018F2A 0469 0018 0032             		subi.w	#$18,$32(a1)
00018F30 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00018F38 337C 0571 0002             		move.w	#lamppostart,2(a1)
00018F3E 137C 0004 0001             		move.b	#4,1(a1)
00018F44 137C 0008 0019             		move.b	#8,$19(a1)
00018F4A 137C 0004 0018             		move.b	#4,$18(a1)
00018F50 137C 0002 001A             		move.b	#2,$1A(a1)
00018F56 337C 0020 0036             		move.w	#$20,$36(a1)
00018F5C                            
00018F5C                            loc_16F76:
00018F5C 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00018F62 6100 0000                  		bsr.w	Obj79_StoreInfo
00018F66 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018F6A 3440                       		movea.w	d0,a2	; load address into a2
00018F6C 08D2 0000                  		bset	#0,(a2)
00018F70                            
00018F70                            locret_16F90:
00018F70 4E75                       		rts	
00018F72                            ; ===========================================================================
00018F72                            
00018F72                            Obj79_AfterHit:				; XREF: Obj79_Index
00018F72 4E75                       		rts	
00018F74                            ; ===========================================================================
00018F74                            
00018F74                            Obj79_Twirl:				; XREF: Obj79_Index
00018F74 5368 0036                  		subq.w	#1,$36(a0)
00018F78 6A00                       		bpl.s	loc_16FA0
00018F7A 117C 0004 0024             		move.b	#4,$24(a0)
00018F80                            
00018F80                            loc_16FA0:
00018F80 1028 0026                  		move.b	$26(a0),d0
00018F84 0428 0010 0026             		subi.b	#$10,$26(a0)
00018F8A 0400 0040                  		subi.b	#$40,d0
00018F8E 4EB9 0000 29F6             		jsr	(CalcSine).l
00018F94 C3FC 0C00                  		muls.w	#$C00,d1
00018F98 4841                       		swap	d1
00018F9A D268 0030                  		add.w	$30(a0),d1
00018F9E 3141 0008                  		move.w	d1,8(a0)
00018FA2 C1FC 0C00                  		muls.w	#$C00,d0
00018FA6 4840                       		swap	d0
00018FA8 D068 0032                  		add.w	$32(a0),d0
00018FAC 3140 000C                  		move.w	d0,$C(a0)
00018FB0 4E75                       		rts	
00018FB2                            ; ===========================================================================
00018FB2                            ; ---------------------------------------------------------------------------
00018FB2                            ; Subroutine to	store information when you hit a lamppost
00018FB2                            ; ---------------------------------------------------------------------------
00018FB2                            
00018FB2                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00018FB2 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00018FB8 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00018FBE 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00018FC4 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00018FCA 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00018FD0 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00018FD6 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00018FDC 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00018FE2 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00018FE8 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00018FEE 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00018FF4 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00018FFA 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00019000 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00019006 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
0001900C 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00019012 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00019018 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
0001901E 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00019024 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
0001902A 4E75                       		rts	
0001902C                            
0001902C                            ; ---------------------------------------------------------------------------
0001902C                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001902C                            ; ---------------------------------------------------------------------------
0001902C                            
0001902C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001902C                            
0001902C                            
0001902C                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
0001902C 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00019032 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00019038 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
0001903E 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00019044 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
0001904A 4278 FE20                  		clr.w	($FFFFFE20).w
0001904E 4238 FE1B                  		clr.b	($FFFFFE1B).w
00019052 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00019058 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
0001905E 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00019062 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00019068 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001906E 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00019074 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
0001907A 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00019080 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00019086 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
0001908C 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00019092 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00019098 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
0001909E 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
000190A4 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
000190AA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000190B0 6600                       		bne.s	loc_170E4
000190B2 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
000190B8 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000190BE 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000190C4                            
000190C4                            loc_170E4:
000190C4 4A38 FE30                  		tst.b	($FFFFFE30).w
000190C8 6A00                       		bpl.s	locret_170F6
000190CA 3038 FE32                  		move.w	($FFFFFE32).w,d0
000190CE 0440 00A0                  		subi.w	#$A0,d0
000190D2 31C0 F728                  		move.w	d0,($FFFFF728).w
000190D6                            
000190D6                            locret_170F6:
000190D6 4E75                       		rts	
000190D8                            ; End of function Obj79_LoadInfo
000190D8                            
000190D8                            ; ===========================================================================
000190D8                            ; ---------------------------------------------------------------------------
000190D8                            ; Sprite mappings - lamppost
000190D8                            ; ---------------------------------------------------------------------------
000190D8                            Map_obj79:
000190D8                            	include "_maps\obj79.asm"
000190D8                            ; ---------------------------------------------------------------------------
000190D8                            ; Sprite mappings - lamppost
000190D8                            ; ---------------------------------------------------------------------------
000190D8 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
000190DC 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
000190E0 06                         byte_17100:	dc.b 6
000190E1 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000190E6 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000190EB F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000190F0 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000190F5 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
000190FA D401 0806 00               		dc.b $D4, 1, 8,	6, 0
000190FF 04                         byte_1711F:	dc.b 4
00019100 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00019105 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001910A F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001910F F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00019114 02                         byte_17134:	dc.b 2
00019115 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001911A F801 0808 00               		dc.b $F8, 1, 8,	8, 0
0001911F 06                         byte_1713F:	dc.b 6
00019120 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00019125 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001912A F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001912F F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00019134 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00019139 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
0001913E                            		even
0001913E                            		even
0001913E                            
0001913E                            ; ===========================================================================
0001913E                            ; ---------------------------------------------------------------------------
0001913E                            ; Object 7D - hidden points at the end of a level
0001913E                            ; ---------------------------------------------------------------------------
0001913E                            
0001913E                            Obj7D:					; XREF: Obj_Index
0001913E 7000                       		moveq	#0,d0
00019140 1028 0024                  		move.b	$24(a0),d0
00019144 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00019148 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
0001914C                            ; ===========================================================================
0001914C 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
0001914E 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00019150                            ; ===========================================================================
00019150                            
00019150                            Obj7D_Main:				; XREF: Obj7D_Index
00019150 7410                       		moveq	#$10,d2
00019152 3602                       		move.w	d2,d3
00019154 D643                       		add.w	d3,d3
00019156 43F8 D000                  		lea	($FFFFD000).w,a1
0001915A 3029 0008                  		move.w	8(a1),d0
0001915E 9068 0008                  		sub.w	8(a0),d0
00019162 D042                       		add.w	d2,d0
00019164 B043                       		cmp.w	d3,d0
00019166 6400                       		bcc.s	Obj7D_ChkDel
00019168 3229 000C                  		move.w	$C(a1),d1
0001916C 9268 000C                  		sub.w	$C(a0),d1
00019170 D242                       		add.w	d2,d1
00019172 B243                       		cmp.w	d3,d1
00019174 6400                       		bcc.s	Obj7D_ChkDel
00019176 4A78 FE08                  		tst.w	($FFFFFE08).w
0001917A 6600                       		bne.s	Obj7D_ChkDel
0001917C 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00019180 6600                       		bne.s	Obj7D_ChkDel
00019182 5428 0024                  		addq.b	#2,$24(a0)
00019186 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
0001918E 317C 84B6 0002             		move.w	#$84B6,2(a0)
00019194 0028 0004 0001             		ori.b	#4,1(a0)
0001919A 117C 0000 0018             		move.b	#0,$18(a0)
000191A0 117C 0010 0019             		move.b	#$10,$19(a0)
000191A6 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000191AC 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
000191B2 303C 00C9                  		move.w	#$C9,d0
000191B6 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play bonus sound
000191BC 7000                       		moveq	#0,d0
000191BE 1028 0028                  		move.b	$28(a0),d0
000191C2 D040                       		add.w	d0,d0
000191C4 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
000191C8 4EB9 0000 0000             		jsr	AddPoints
000191CE                            
000191CE                            Obj7D_ChkDel:
000191CE 3028 0008                  		move.w	8(a0),d0
000191D2 0240 FF80                  		andi.w	#$FF80,d0
000191D6 3238 F700                  		move.w	($FFFFF700).w,d1
000191DA 0441 0080                  		subi.w	#$80,d1
000191DE 0241 FF80                  		andi.w	#$FF80,d1
000191E2 9041                       		sub.w	d1,d0
000191E4 0C40 0280                  		cmpi.w	#$280,d0
000191E8 6300                       		bls.s	Obj7D_NoDel
000191EA 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000191EE 6700                       		beq.s	Obj7D_Delete		; if it's zero, don't remember object
000191F0 3440                       		movea.w	d0,a2	; load address into a2
000191F2 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000191F6 6000                       		bra.s	Obj7D_Delete	; and delete object
000191F8                            
000191F8                            Obj7D_NoDel:
000191F8 4E75                       		rts	
000191FA                            ; ===========================================================================
000191FA                            
000191FA                            Obj7D_Delete:
000191FA 4EF9 0000 E980             		jmp	DeleteObject
00019200                            ; ===========================================================================
00019200 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00019202 03E8                       		dc.w 1000		; earn 1000*10 points for revealing 10000 object
00019204 0064                       		dc.w 100		; earn 100*10 points for revealing 1000 object
00019206 000A                       		dc.w 10			; earn 10*10 points for revealing 100 object
00019208                            ; ===========================================================================
00019208                            
00019208                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00019208 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
0001920C 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
0001920E 3028 0008                  		move.w	8(a0),d0
00019212 0240 FF80                  		andi.w	#-$80,d0
00019216 3238 F700                  		move.w	($FFFFF700).w,d1
0001921A 0441 0080                  		subi.w	#$80,d1
0001921E 0241 FF80                  		andi.w	#-$80,d1
00019222 9041                       		sub.w	d1,d0
00019224 0C40 0280                  		cmpi.w	#$280,d0
00019228 6200                       		bhi.s	Obj7D_Delete2
0001922A 4EF9 0000 E930             		jmp	DisplaySprite
00019230                            ; ===========================================================================
00019230                            
00019230                            Obj7D_Delete2:
00019230 4EF9 0000 E980             		jmp	DeleteObject
00019236                            ; ===========================================================================
00019236                            ; ---------------------------------------------------------------------------
00019236                            ; Sprite mappings - hidden points at the end of	a level
00019236                            ; ---------------------------------------------------------------------------
00019236                            Map_obj7D:
00019236                            	include "_maps\obj7D.asm"
00019236                            ; ---------------------------------------------------------------------------
00019236                            ; Sprite mappings - hidden points at the end of	a level
00019236                            ; ---------------------------------------------------------------------------
00019236 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
0001923A 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
0001923E 00                         byte_17250:	dc.b 0
0001923F 01                         byte_17251:	dc.b 1
00019240 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00019245 01                         byte_17257:	dc.b 1
00019246 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001924B 01                         byte_1725D:	dc.b 1
0001924C F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00019252 00                         		even
00019252 00                         		even
00019252                            
00019252                            ; ===========================================================================
00019252                            ; ---------------------------------------------------------------------------
00019252                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00019252                            ; ---------------------------------------------------------------------------
00019252                            
00019252                            Obj8A:					; XREF: Obj_Index
00019252 7000                       		moveq	#0,d0
00019254 1028 0024                  		move.b	$24(a0),d0
00019258 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
0001925C 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00019260                            ; ===========================================================================
00019260 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00019262 0000                       		dc.w Obj8A_Display-Obj8A_Index
00019264                            ; ===========================================================================
00019264                            
00019264                            Obj8A_Main:				; XREF: Obj8A_Index
00019264 5428 0024                  		addq.b	#2,$24(a0)
00019268 317C 0120 0008             		move.w	#$120,8(a0)
0001926E 317C 00F0 000A             		move.w	#$F0,$A(a0)
00019274 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
0001927C 317C 25A0 0002             		move.w	#$25A0,2(a0)
00019282 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00019286 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
0001928A 117C 0000 0001             		move.b	#0,1(a0)
00019290 117C 0000 0018             		move.b	#0,$18(a0)
00019296 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
0001929C 6600                       		bne.s	Obj8A_Display	; if not, branch
0001929E 317C 20A6 0002             		move.w	#$20A6,2(a0)
000192A4 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
000192AA 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
000192AE 6700                       		beq.s	Obj8A_Display	; if not, branch
000192B0 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
000192B6 6600                       		bne.s	Obj8A_Display	; if not, branch
000192B8 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
000192BE 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
000192C4 4EF9 0000 E980             		jmp	DeleteObject
000192CA                            ; ===========================================================================
000192CA                            
000192CA                            Obj8A_Display:				; XREF: Obj8A_Index
000192CA 4EF9 0000 E930             		jmp	DisplaySprite
000192D0                            ; ===========================================================================
000192D0                            ; ---------------------------------------------------------------------------
000192D0                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000192D0                            ; ---------------------------------------------------------------------------
000192D0                            Map_obj8A:
000192D0                            	include "_maps\obj8A.asm"
000192D0                            ; ---------------------------------------------------------------------------
000192D0                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000192D0                            ; ---------------------------------------------------------------------------
000192D0 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
000192D4 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
000192D8 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
000192DC 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
000192E0 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
000192E4 0000                       		dc.w byte_176A9-Map_obj8A
000192E6 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
000192E7 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
000192EC F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
000192F1 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
000192F6 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
000192FB F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
00019300 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
00019305 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001930A F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001930F F809 0008 08               		dc.b $F8, 9, 0,	8, 8
00019314 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
00019319 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001931E F805 0004 48               		dc.b $F8, 5, 0,	4, $48
00019323 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
00019328 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001932D 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
0001932E D805 0000 80               		dc.b $D8, 5, 0,	0, $80
00019333 D805 0004 90               		dc.b $D8, 5, 0,	4, $90
00019338 D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
0001933D D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
00019342 D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
00019347 D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
0001934C D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
00019351 D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
00019356 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
0001935B 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
00019360 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
00019365 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
0001936A 0805 0016 08               		dc.b 8,	5, 0, $16, 8
0001936F 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
00019374 0805 0004 30               		dc.b 8,	5, 0, 4, $30
00019379 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
0001937E 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
0001937F D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
00019384 D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
00019389 D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
0001938E D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
00019393 D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
00019398 D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
0001939D D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
000193A2 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
000193A7 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
000193AC 0805 0036 08               		dc.b 8,	5, 0, $36, 8
000193B1 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
000193B2 D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
000193B7 D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
000193BC D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
000193C1 D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
000193C6 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
000193CB D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
000193D0 D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
000193D5 D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
000193DA D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
000193DF D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
000193E4 D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
000193E9 D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
000193EE D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
000193F3 D805 0000 58               		dc.b $D8, 5, 0,	0, $58
000193F8 D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
000193FD 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
00019402 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
00019407 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
0001940C 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
00019411 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
00019416 0805 0016 00               		dc.b 8,	5, 0, $16, 0
0001941B 0805 0004 10               		dc.b 8,	5, 0, 4, $10
00019420 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
00019425 0805 0042 30               		dc.b 8,	5, 0, $42, $30
0001942A 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
0001942B D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
00019430 D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
00019435 D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
0001943A D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
0001943F D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
00019444 D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
00019449 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
0001944E 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
00019453 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
00019458 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
0001945D 0005 0004 24               		dc.b 0,	5, 0, 4, $24
00019462 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
00019467 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
0001946C 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
00019471 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
00019476 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
0001947B 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
00019480 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
00019485 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
0001948A 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
0001948F 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
00019490 D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
00019495 D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
0001949A D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
0001949F D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
000194A4 D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
000194A9 D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
000194AE D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
000194B3 D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
000194B8 D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
000194BD D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
000194C2 D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
000194C7 D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
000194CC 0809 0008 88               		dc.b 8,	9, 0, 8, $88
000194D1 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
000194D6 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
000194DB 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
000194E0 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
000194E5 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
000194EA 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
000194EF 0805 0004 08               		dc.b 8,	5, 0, 4, 8
000194F4 0805 0058 18               		dc.b 8,	5, 0, $58, $18
000194F9 0805 0004 28               		dc.b 8,	5, 0, 4, $28
000194FE 0809 0008 38               		dc.b 8,	9, 0, 8, $38
00019503 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
00019508 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
0001950D 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
00019512 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
00019513 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
00019518 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001951D D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
00019522 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
00019527 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001952C D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
00019531 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
00019536 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001953B D005 0000 28               		dc.b $D0, 5, 0,	0, $28
00019540 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
00019545 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001954A D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001954F 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00019554 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00019559 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001955E 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
00019563 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
00019568 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001956D 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
00019572 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
00019577 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001957C 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
00019581 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
00019586 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
00019587 D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
0001958C D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
00019591 D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
00019596 D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
0001959B D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
000195A0 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
000195A5 D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
000195AA D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
000195AF D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
000195B4 D805 0004 18               		dc.b $D8, 5, 0,	4, $18
000195B9 D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
000195BE D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
000195C3 D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
000195C8 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
000195CD 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
000195D2 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
000195D7 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
000195DC 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
000195E1 0009 0008 00               		dc.b 0,	9, 0, 8, 0
000195E6 0001 0046 14               		dc.b 0,	1, 0, $46, $14
000195EB 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
000195F0 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
000195F5 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
000195FA 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
000195FF 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
00019604 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
00019609 0001 0046 74               		dc.b 0,	1, 0, $46, $74
0001960E 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
00019613 2005 0004 08               		dc.b $20, 5, 0,	4, 8
00019618 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
0001961D 2005 0004 28               		dc.b $20, 5, 0,	4, $28
00019622 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
00019623 F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
00019628 F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
0001962D F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
00019632 F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
00019637 F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
0001963C F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
00019641 F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
00019646 F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
0001964B F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
00019650 F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
00019655 F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
0001965A F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
0001965F F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
00019664 F805 0000 60               		dc.b $F8, 5, 0,	0, $60
00019669 F805 0004 70               		dc.b $F8, 5, 0,	4, $70
0001966E 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
0001966F 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
00019674 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
00019679 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001967E 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
00019683 3005 0000 08               		dc.b $30, 5, 0,	0, 8
00019688 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001968D 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
00019692 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
00019697 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
00019698 E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
0001969D E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
000196A2 E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
000196A7 E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
000196AC E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
000196B1 E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
000196B6 E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
000196BB E805 0004 24               		dc.b $E8, 5, 0,	4, $24
000196C0 E809 0008 34               		dc.b $E8, 9, 0,	8, $34
000196C5 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
000196CA 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
000196CF 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
000196D4 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
000196D9 0005 000E 00               		dc.b 0,	5, 0, $E, 0
000196DE 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
000196E3 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
000196E8 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
000196EE 00                         		even
000196EE 00                         		even
000196EE                            
000196EE                            ; ===========================================================================
000196EE                            ; ---------------------------------------------------------------------------
000196EE                            ; Object 3D - Eggman (GHZ)
000196EE                            ; ---------------------------------------------------------------------------
000196EE                            
000196EE                            Obj3D:					; XREF: Obj_Index
000196EE 7000                       		moveq	#0,d0
000196F0 1028 0024                  		move.b	$24(a0),d0
000196F4 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
000196F8 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
000196FC                            ; ===========================================================================
000196FC 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
000196FE 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00019700 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00019702 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00019704                            
00019704 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00019706 0401                       		dc.b 4,	1
00019708 0607                       		dc.b 6,	7
0001970A                            ; ===========================================================================
0001970A                            
0001970A                            Obj3D_Main:				; XREF: Obj3D_Index
0001970A 45F9 0001 9704             		lea	(Obj3D_ObjData).l,a2
00019710 2248                       		movea.l	a0,a1
00019712 7202                       		moveq	#2,d1
00019714 6000                       		bra.s	Obj3D_LoadBoss
00019716                            ; ===========================================================================
00019716                            
00019716                            Obj3D_Loop:
00019716 4EB9 0000 F09C             		jsr	SingleObjLoad2
0001971C 6600                       		bne.s	loc_17772
0001971E                            
0001971E                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
0001971E 135A 0024                  		move.b	(a2)+,$24(a1)
00019722 12BC 003D                  		move.b	#$3D,0(a1)
00019726 3368 0008 0008             		move.w	8(a0),8(a1)
0001972C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019732 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
0001973A 337C 0400 0002             		move.w	#$400,2(a1)
00019740 137C 0004 0001             		move.b	#4,1(a1)
00019746 137C 0020 0019             		move.b	#$20,$19(a1)
0001974C 137C 0003 0018             		move.b	#3,$18(a1)
00019752 135A 001C                  		move.b	(a2)+,$1C(a1)
00019756 2348 0034                  		move.l	a0,$34(a1)
0001975A 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
0001975E                            
0001975E                            loc_17772:
0001975E 3168 0008 0030             		move.w	8(a0),$30(a0)
00019764 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001976A 117C 000F 0020             		move.b	#$F,$20(a0)
00019770 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019776                            
00019776                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00019776 7000                       		moveq	#0,d0
00019778 1028 0025                  		move.b	$25(a0),d0
0001977C 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00019780 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00019784 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001978A 4EB9 0000 B990             		jsr	AnimateSprite
00019790 1028 0022                  		move.b	$22(a0),d0
00019794 0200 0003                  		andi.b	#3,d0
00019798 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001979E 8128 0001                  		or.b	d0,1(a0)
000197A2 4EF9 0000 E930             		jmp	DisplaySprite
000197A8                            ; ===========================================================================
000197A8 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000197AA 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000197AC 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000197AE 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000197B0 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000197B2 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000197B4 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
000197B6                            ; ===========================================================================
000197B6                            
000197B6                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000197B6 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
000197BC 6100 0000                  		bsr.w	BossMove
000197C0 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000197C6 6600                       		bne.s	loc_177E6
000197C8 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000197CE 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000197D2                            
000197D2                            loc_177E6:
000197D2 1028 003F                  		move.b	$3F(a0),d0
000197D6 4EB9 0000 29F6             		jsr	(CalcSine).l
000197DC EC40                       		asr.w	#6,d0
000197DE D068 0038                  		add.w	$38(a0),d0
000197E2 3140 000C                  		move.w	d0,$C(a0)
000197E6 3168 0030 0008             		move.w	$30(a0),8(a0)
000197EC 5428 003F                  		addq.b	#2,$3F(a0)
000197F0 0C28 0008 0025             		cmpi.b	#8,$25(a0)
000197F6 6400                       		bcc.s	locret_1784A
000197F8 4A28 0022                  		tst.b	$22(a0)
000197FC 6B00                       		bmi.s	loc_1784C
000197FE 4A28 0020                  		tst.b	$20(a0)
00019802 6600                       		bne.s	locret_1784A
00019804 4A28 003E                  		tst.b	$3E(a0)
00019808 6600                       		bne.s	Obj3D_ShipFlash
0001980A 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00019810 303C 00AC                  		move.w	#$AC,d0
00019814 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001981A                            
0001981A                            Obj3D_ShipFlash:
0001981A 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001981E 7000                       		moveq	#0,d0		; move 0 (black) to d0
00019820 4A51                       		tst.w	(a1)
00019822 6600                       		bne.s	loc_1783C
00019824 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00019828                            
00019828                            loc_1783C:
00019828 3280                       		move.w	d0,(a1)		; load colour stored in	d0
0001982A 5328 003E                  		subq.b	#1,$3E(a0)
0001982E 6600                       		bne.s	locret_1784A
00019830 117C 000F 0020             		move.b	#$F,$20(a0)
00019836                            
00019836                            locret_1784A:
00019836 4E75                       		rts	
00019838                            ; ===========================================================================
00019838                            
00019838                            loc_1784C:				; XREF: loc_177E6
00019838 7064                       		moveq	#100,d0
0001983A 6100 0000                  		bsr.w	AddPoints
0001983E 117C 0008 0025             		move.b	#8,$25(a0)
00019844 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001984A 4E75                       		rts	
0001984C                            
0001984C                            ; ---------------------------------------------------------------------------
0001984C                            ; Defeated boss	subroutine
0001984C                            ; ---------------------------------------------------------------------------
0001984C                            
0001984C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001984C                            
0001984C                            
0001984C                            BossDefeated:
0001984C 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00019852 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w	
00019858 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001985C 0200 0007                  		andi.b	#7,d0
00019860 6600                       		bne.s	locret_178A2
00019862 4EB9 0000 F086             		jsr	SingleObjLoad
00019868 6600                       		bne.s	locret_178A2
0001986A 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001986E 3368 0008 0008             		move.w	8(a0),8(a1)
00019874 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001987A 4EB9 0000 29D0             		jsr	(RandomNumber).l
00019880 3200                       		move.w	d0,d1
00019882 7200                       		moveq	#0,d1
00019884 1200                       		move.b	d0,d1
00019886 E409                       		lsr.b	#2,d1
00019888 0441 0020                  		subi.w	#$20,d1
0001988C D369 0008                  		add.w	d1,8(a1)
00019890 E048                       		lsr.w	#8,d0
00019892 E608                       		lsr.b	#3,d0
00019894 D169 000C                  		add.w	d0,$C(a1)
00019898                            
00019898                            locret_178A2:
00019898 4E75                       		rts	
0001989A                            ; End of function BossDefeated
0001989A                            
0001989A                            ; ---------------------------------------------------------------------------
0001989A                            ; Subroutine to	move a boss
0001989A                            ; ---------------------------------------------------------------------------
0001989A                            
0001989A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001989A                            
0001989A                            
0001989A                            BossMove:
0001989A 2428 0030                  		move.l	$30(a0),d2
0001989E 2628 0038                  		move.l	$38(a0),d3
000198A2 3028 0010                  		move.w	$10(a0),d0
000198A6 48C0                       		ext.l	d0
000198A8 E180                       		asl.l	#8,d0
000198AA D480                       		add.l	d0,d2
000198AC 3028 0012                  		move.w	$12(a0),d0
000198B0 48C0                       		ext.l	d0
000198B2 E180                       		asl.l	#8,d0
000198B4 D680                       		add.l	d0,d3
000198B6 2142 0030                  		move.l	d2,$30(a0)
000198BA 2143 0038                  		move.l	d3,$38(a0)
000198BE 4E75                       		rts	
000198C0                            ; End of function BossMove
000198C0                            
000198C0                            ; ===========================================================================
000198C0                            
000198C0                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
000198C0 317C FF00 0010             		move.w	#-$100,$10(a0)
000198C6 317C FFC0 0012             		move.w	#-$40,$12(a0)
000198CC 6100 FFCC                  		bsr.w	BossMove
000198D0 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000198D6 6600                       		bne.s	loc_17916
000198D8 317C 0000 0010             		move.w	#0,$10(a0)
000198DE 317C 0000 0012             		move.w	#0,$12(a0)
000198E4 5428 0025                  		addq.b	#2,$25(a0)
000198E8 4EB9 0000 F09C             		jsr	SingleObjLoad2
000198EE 6600                       		bne.s	loc_17910
000198F0 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
000198F4 3368 0030 0008             		move.w	$30(a0),8(a1)
000198FA 3368 0038 000C             		move.w	$38(a0),$C(a1)
00019900 2348 0034                  		move.l	a0,$34(a1)
00019904                            
00019904                            loc_17910:
00019904 317C 0077 003C             		move.w	#$77,$3C(a0)
0001990A                            
0001990A                            loc_17916:
0001990A 6000 FEC6                  		bra.w	loc_177E6
0001990E                            ; ===========================================================================
0001990E                            
0001990E                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
0001990E 5368 003C                  		subq.w	#1,$3C(a0)
00019912 6A00                       		bpl.s	Obj3D_Reverse
00019914 5428 0025                  		addq.b	#2,$25(a0)
00019918 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001991E 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00019924 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001992A 6600                       		bne.s	Obj3D_Reverse
0001992C 317C 007F 003C             		move.w	#$7F,$3C(a0)
00019932 317C 0040 0010             		move.w	#$40,$10(a0)
00019938                            
00019938                            Obj3D_Reverse:
00019938 0828 0000 0022             		btst	#0,$22(a0)
0001993E 6600                       		bne.s	loc_17950
00019940 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00019944                            
00019944                            loc_17950:
00019944 6000 FE8C                  		bra.w	loc_177E6
00019948                            ; ===========================================================================
00019948                            
00019948                            loc_17954:				; XREF: Obj3D_ShipIndex
00019948 5368 003C                  		subq.w	#1,$3C(a0)
0001994C 6B00                       		bmi.s	loc_17960
0001994E 6100 FF4A                  		bsr.w	BossMove
00019952 6000                       		bra.s	loc_17976
00019954                            ; ===========================================================================
00019954                            
00019954                            loc_17960:
00019954 0868 0000 0022             		bchg	#0,$22(a0)
0001995A 317C 003F 003C             		move.w	#$3F,$3C(a0)
00019960 5528 0025                  		subq.b	#2,$25(a0)
00019964 317C 0000 0010             		move.w	#0,$10(a0)
0001996A                            
0001996A                            loc_17976:
0001996A 6000 FE66                  		bra.w	loc_177E6
0001996E                            ; ===========================================================================
0001996E                            
0001996E                            loc_1797A:				; XREF: Obj3D_ShipIndex
0001996E 5368 003C                  		subq.w	#1,$3C(a0)
00019972 6B00                       		bmi.s	loc_17984
00019974 6000 FED6                  		bra.w	BossDefeated
00019978                            ; ===========================================================================
00019978                            
00019978                            loc_17984:
00019978 08E8 0000 0022             		bset	#0,$22(a0)
0001997E 08A8 0007 0022             		bclr	#7,$22(a0)
00019984 4268 0010                  		clr.w	$10(a0)
00019988 5428 0025                  		addq.b	#2,$25(a0)
0001998C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00019992 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019996 6600                       		bne.s	locret_179AA
00019998 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001999E                            
0001999E                            locret_179AA:
0001999E 4E75                       		rts	
000199A0                            ; ===========================================================================
000199A0                            
000199A0                            loc_179AC:				; XREF: Obj3D_ShipIndex
000199A0 5268 003C                  		addq.w	#1,$3C(a0)
000199A4 6700                       		beq.s	loc_179BC
000199A6 6A00                       		bpl.s	loc_179C2
000199A8 0668 0018 0012             		addi.w	#$18,$12(a0)
000199AE 6000 0000                  		bra.w	loc_179EE
000199B2                            ; ===========================================================================
000199B2                            
000199B2                            loc_179BC:
000199B2 4268 0012                  		clr.w	$12(a0)
000199B6 6000 0000                  		bra.w	loc_179EE
000199BA                            ; ===========================================================================
000199BA                            
000199BA                            loc_179C2:
000199BA 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000199C0 6500                       		bcs.s	loc_179DA
000199C2 6700                       		beq.s	loc_179E0
000199C4 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
000199CA 6500                       		bcs.s	loc_179EE
000199CC 5428 0025                  		addq.b	#2,$25(a0)
000199D0 6000                       		bra.s	loc_179EE
000199D2                            ; ===========================================================================
000199D2                            
000199D2                            loc_179DA:
000199D2 5168 0012                  		subq.w	#8,$12(a0)
000199D6 6000                       		bra.s	loc_179EE
000199D8                            ; ===========================================================================
000199D8                            
000199D8                            loc_179E0:
000199D8 4268 0012                  		clr.w	$12(a0)
000199DC 12D8 12D8 12D8 12D8 12D8+  		PlayPCM2	SonimeBossDefeated			
00019A32 303C 0081                  		move.w	#$81,d0
00019A36 4EB9 0000 121A             		jsr	(PlaySound).l	; play GHZ music
00019A3C                            
00019A3C                            loc_179EE:
00019A3C 6100 FE5C                  		bsr.w	BossMove
00019A40 6000 FD90                  		bra.w	loc_177E6
00019A44                            ; ===========================================================================
00019A44                            
00019A44                            loc_179F6:				; XREF: Obj3D_ShipIndex
00019A44 317C 0400 0010             		move.w	#$400,$10(a0)
00019A4A 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019A50 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00019A56 6700                       		beq.s	loc_17A10
00019A58 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019A5C 6000                       		bra.s	loc_17A16
00019A5E                            ; ===========================================================================
00019A5E                            
00019A5E                            loc_17A10:
00019A5E 4A28 0001                  		tst.b	1(a0)
00019A62 6A00                       		bpl.s	Obj3D_ShipDel
00019A64                            
00019A64                            loc_17A16:
00019A64 6100 FE34                  		bsr.w	BossMove
00019A68 6000 FD68                  		bra.w	loc_177E6
00019A6C                            ; ===========================================================================
00019A6C                            
00019A6C                            Obj3D_ShipDel:
00019A6C 4EF9 0000 E980             		jmp	DeleteObject
00019A72                            ; ===========================================================================
00019A72                            
00019A72                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00019A72 7000                       		moveq	#0,d0
00019A74 7201                       		moveq	#1,d1
00019A76 2268 0034                  		movea.l	$34(a0),a1
00019A7A 1029 0025                  		move.b	$25(a1),d0
00019A7E 5900                       		subq.b	#4,d0
00019A80 6600                       		bne.s	loc_17A3E
00019A82 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00019A88 6600                       		bne.s	loc_17A46
00019A8A 7204                       		moveq	#4,d1
00019A8C                            
00019A8C                            loc_17A3E:
00019A8C 5D00                       		subq.b	#6,d0
00019A8E 6B00                       		bmi.s	loc_17A46
00019A90 720A                       		moveq	#$A,d1
00019A92 6000                       		bra.s	loc_17A5A
00019A94                            ; ===========================================================================
00019A94                            
00019A94                            loc_17A46:
00019A94 4A29 0020                  		tst.b	$20(a1)
00019A98 6600                       		bne.s	loc_17A50
00019A9A 7205                       		moveq	#5,d1
00019A9C 6000                       		bra.s	loc_17A5A
00019A9E                            ; ===========================================================================
00019A9E                            
00019A9E                            loc_17A50:
00019A9E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019AA4 6500                       		bcs.s	loc_17A5A
00019AA6 7204                       		moveq	#4,d1
00019AA8                            
00019AA8                            loc_17A5A:
00019AA8 1141 001C                  		move.b	d1,$1C(a0)
00019AAC 5500                       		subq.b	#2,d0
00019AAE 6600                       		bne.s	Obj3D_FaceDisp
00019AB0 117C 0006 001C             		move.b	#6,$1C(a0)
00019AB6 4A28 0001                  		tst.b	1(a0)
00019ABA 6A00                       		bpl.s	Obj3D_FaceDel
00019ABC                            
00019ABC                            Obj3D_FaceDisp:
00019ABC 6000                       		bra.s	Obj3D_Display
00019ABE                            ; ===========================================================================
00019ABE                            
00019ABE                            Obj3D_FaceDel:
00019ABE 4EF9 0000 E980             		jmp	DeleteObject
00019AC4                            ; ===========================================================================
00019AC4                            
00019AC4                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00019AC4 117C 0007 001C             		move.b	#7,$1C(a0)
00019ACA 2268 0034                  		movea.l	$34(a0),a1
00019ACE 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00019AD4 6600                       		bne.s	loc_17A96
00019AD6 117C 000B 001C             		move.b	#$B,$1C(a0)
00019ADC 4A28 0001                  		tst.b	1(a0)
00019AE0 6A00                       		bpl.s	Obj3D_FlameDel
00019AE2 6000                       		bra.s	Obj3D_FlameDisp
00019AE4                            ; ===========================================================================
00019AE4                            
00019AE4                            loc_17A96:
00019AE4 3029 0010                  		move.w	$10(a1),d0
00019AE8 6700                       		beq.s	Obj3D_FlameDisp
00019AEA 117C 0008 001C             		move.b	#8,$1C(a0)
00019AF0                            
00019AF0                            Obj3D_FlameDisp:
00019AF0 6000                       		bra.s	Obj3D_Display
00019AF2                            ; ===========================================================================
00019AF2                            
00019AF2                            Obj3D_FlameDel:
00019AF2 4EF9 0000 E980             		jmp	DeleteObject
00019AF8                            ; ===========================================================================
00019AF8                            
00019AF8                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00019AF8 2268 0034                  		movea.l	$34(a0),a1
00019AFC 3169 0008 0008             		move.w	8(a1),8(a0)
00019B02 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019B08 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019B0E 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00019B14 4EB9 0000 B990             		jsr	AnimateSprite
00019B1A 1028 0022                  		move.b	$22(a0),d0
00019B1E 0200 0003                  		andi.b	#3,d0
00019B22 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019B28 8128 0001                  		or.b	d0,1(a0)
00019B2C 4EF9 0000 E930             		jmp	DisplaySprite
00019B32                            ; ===========================================================================
00019B32                            ; ---------------------------------------------------------------------------
00019B32                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00019B32                            ; ---------------------------------------------------------------------------
00019B32                            
00019B32                            Obj48:					; XREF: Obj_Index
00019B32 7000                       		moveq	#0,d0
00019B34 1028 0024                  		move.b	$24(a0),d0
00019B38 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00019B3C 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00019B40                            ; ===========================================================================
00019B40 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00019B42 0000                       		dc.w Obj48_Base-Obj48_Index
00019B44 0000                       		dc.w Obj48_Display2-Obj48_Index
00019B46 0000                       		dc.w loc_17C68-Obj48_Index
00019B48 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00019B4A                            ; ===========================================================================
00019B4A                            
00019B4A                            Obj48_Main:				; XREF: Obj48_Index
00019B4A 5428 0024                  		addq.b	#2,$24(a0)
00019B4E 317C 4080 0026             		move.w	#$4080,$26(a0)
00019B54 317C FE00 003E             		move.w	#-$200,$3E(a0)
00019B5A 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00019B62 317C 046C 0002             		move.w	#$46C,2(a0)
00019B68 45E8 0028                  		lea	$28(a0),a2
00019B6C 14FC 0000                  		move.b	#0,(a2)+
00019B70 7205                       		moveq	#5,d1
00019B72 2248                       		movea.l	a0,a1
00019B74 6000                       		bra.s	loc_17B60
00019B76                            ; ===========================================================================
00019B76                            
00019B76                            Obj48_MakeLinks:
00019B76 4EB9 0000 F09C             		jsr	SingleObjLoad2
00019B7C 6600                       		bne.s	Obj48_MakeBall
00019B7E 3368 0008 0008             		move.w	8(a0),8(a1)
00019B84 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019B8A 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00019B8E 137C 0006 0024             		move.b	#6,$24(a1)
00019B94 237C 0000 8D86 0004        		move.l	#Map_obj15,4(a1)
00019B9C 337C 0380 0002             		move.w	#$380,2(a1)
00019BA2 137C 0001 001A             		move.b	#1,$1A(a1)
00019BA8 5228 0028                  		addq.b	#1,$28(a0)
00019BAC                            
00019BAC                            loc_17B60:				; XREF: Obj48_Main
00019BAC 3A09                       		move.w	a1,d5
00019BAE 0445 D000                  		subi.w	#$D000,d5
00019BB2 EC4D                       		lsr.w	#6,d5
00019BB4 0245 007F                  		andi.w	#$7F,d5
00019BB8 14C5                       		move.b	d5,(a2)+
00019BBA 137C 0004 0001             		move.b	#4,1(a1)
00019BC0 137C 0008 0019             		move.b	#8,$19(a1)
00019BC6 137C 0006 0018             		move.b	#6,$18(a1)
00019BCC 2368 0034 0034             		move.l	$34(a0),$34(a1)
00019BD2 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00019BD6                            
00019BD6                            Obj48_MakeBall:
00019BD6 137C 0008 0024             		move.b	#8,$24(a1)
00019BDC 237C 0000 92FE 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00019BE4 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00019BEA 137C 0001 001A             		move.b	#1,$1A(a1)
00019BF0 137C 0005 0018             		move.b	#5,$18(a1)
00019BF6 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00019BFC 4E75                       		rts	
00019BFE                            ; ===========================================================================
00019BFE                            
00019BFE 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00019C04                            
00019C04                            ; ===========================================================================
00019C04                            
00019C04                            Obj48_Base:				; XREF: Obj48_Index
00019C04 47F9 0001 9BFE             		lea	(Obj48_PosData).l,a3
00019C0A 45E8 0028                  		lea	$28(a0),a2
00019C0E 7C00                       		moveq	#0,d6
00019C10 1C1A                       		move.b	(a2)+,d6
00019C12                            
00019C12                            loc_17BC6:
00019C12 7800                       		moveq	#0,d4
00019C14 181A                       		move.b	(a2)+,d4
00019C16 ED4C                       		lsl.w	#6,d4
00019C18 0684 00FF D000             		addi.l	#$FFD000,d4
00019C1E 2244                       		movea.l	d4,a1
00019C20 101B                       		move.b	(a3)+,d0
00019C22 B029 003C                  		cmp.b	$3C(a1),d0
00019C26 6700                       		beq.s	loc_17BE0
00019C28 5229 003C                  		addq.b	#1,$3C(a1)
00019C2C                            
00019C2C                            loc_17BE0:
00019C2C 51CE FFE4                  		dbf	d6,loc_17BC6
00019C30                            
00019C30 B029 003C                  		cmp.b	$3C(a1),d0
00019C34 6600                       		bne.s	loc_17BFA
00019C36 2268 0034                  		movea.l	$34(a0),a1
00019C3A 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00019C40 6600                       		bne.s	loc_17BFA
00019C42 5428 0024                  		addq.b	#2,$24(a0)
00019C46                            
00019C46                            loc_17BFA:
00019C46 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00019C4C 6700                       		beq.s	Obj48_Display
00019C4E 5268 0032                  		addq.w	#1,$32(a0)
00019C52                            
00019C52                            Obj48_Display:
00019C52 6100 0000                  		bsr.w	sub_17C2A
00019C56 1028 0026                  		move.b	$26(a0),d0
00019C5A 4EB9 0000 8CEC             		jsr	(Obj15_Move2).l
00019C60 4EF9 0000 E930             		jmp	DisplaySprite
00019C66                            ; ===========================================================================
00019C66                            
00019C66                            Obj48_Display2:				; XREF: Obj48_Index
00019C66 6100 0000                  		bsr.w	sub_17C2A
00019C6A 4EB9 0000 8CAC             		jsr	(Obj48_Move).l
00019C70 4EF9 0000 E930             		jmp	DisplaySprite
00019C76                            
00019C76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019C76                            
00019C76                            
00019C76                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00019C76 2268 0034                  		movea.l	$34(a0),a1
00019C7A 0628 0020 001B             		addi.b	#$20,$1B(a0)
00019C80 6400                       		bcc.s	loc_17C3C
00019C82 0868 0000 001A             		bchg	#0,$1A(a0)
00019C88                            
00019C88                            loc_17C3C:
00019C88 3169 0008 003A             		move.w	8(a1),$3A(a0)
00019C8E 3029 000C                  		move.w	$C(a1),d0
00019C92 D068 0032                  		add.w	$32(a0),d0
00019C96 3140 0038                  		move.w	d0,$38(a0)
00019C9A 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019CA0 4A29 0022                  		tst.b	$22(a1)
00019CA4 6A00                       		bpl.s	locret_17C66
00019CA6 10BC 003F                  		move.b	#$3F,0(a0)
00019CAA 117C 0000 0024             		move.b	#0,$24(a0)
00019CB0                            
00019CB0                            locret_17C66:
00019CB0 4E75                       		rts	
00019CB2                            ; End of function sub_17C2A
00019CB2                            
00019CB2                            ; ===========================================================================
00019CB2                            
00019CB2                            loc_17C68:				; XREF: Obj48_Index
00019CB2 2268 0034                  		movea.l	$34(a0),a1
00019CB6 4A29 0022                  		tst.b	$22(a1)
00019CBA 6A00                       		bpl.s	Obj48_Display3
00019CBC 10BC 003F                  		move.b	#$3F,0(a0)
00019CC0 117C 0000 0024             		move.b	#0,$24(a0)
00019CC6                            
00019CC6                            Obj48_Display3:
00019CC6 4EF9 0000 E930             		jmp	DisplaySprite
00019CCC                            ; ===========================================================================
00019CCC                            
00019CCC                            Obj48_ChkVanish:			; XREF: Obj48_Index
00019CCC 7000                       		moveq	#0,d0
00019CCE 4A28 001A                  		tst.b	$1A(a0)
00019CD2 6600                       		bne.s	Obj48_Vanish
00019CD4 5200                       		addq.b	#1,d0
00019CD6                            
00019CD6                            Obj48_Vanish:
00019CD6 1140 001A                  		move.b	d0,$1A(a0)
00019CDA 2268 0034                  		movea.l	$34(a0),a1
00019CDE 4A29 0022                  		tst.b	$22(a1)
00019CE2 6A00                       		bpl.s	Obj48_Display4
00019CE4 117C 0000 0020             		move.b	#0,$20(a0)
00019CEA 6100 FB60                  		bsr.w	BossDefeated
00019CEE 5328 003C                  		subq.b	#1,$3C(a0)
00019CF2 6A00                       		bpl.s	Obj48_Display4
00019CF4 10BC 003F                  		move.b	#$3F,(a0)
00019CF8 117C 0000 0024             		move.b	#0,$24(a0)
00019CFE                            
00019CFE                            Obj48_Display4:
00019CFE 4EF9 0000 E930             		jmp	DisplaySprite
00019D04                            ; ===========================================================================
00019D04                            Ani_Eggman:
00019D04                            	include "_anim\Eggman.asm"
00019D04                            ; ---------------------------------------------------------------------------
00019D04                            ; Animation script - Eggman (bosses)
00019D04                            ; ---------------------------------------------------------------------------
00019D04 0000                       		dc.w byte_17CD4-Ani_Eggman
00019D06 0000                       		dc.w byte_17CD8-Ani_Eggman
00019D08 0000                       		dc.w byte_17CDC-Ani_Eggman
00019D0A 0000                       		dc.w byte_17CE0-Ani_Eggman
00019D0C 0000                       		dc.w byte_17CE4-Ani_Eggman
00019D0E 0000                       		dc.w byte_17CE8-Ani_Eggman
00019D10 0000                       		dc.w byte_17CEC-Ani_Eggman
00019D12 0000                       		dc.w byte_17CF0-Ani_Eggman
00019D14 0000                       		dc.w byte_17CF4-Ani_Eggman
00019D16 0000                       		dc.w byte_17CF8-Ani_Eggman
00019D18 0000                       		dc.w byte_17CFC-Ani_Eggman
00019D1A 0000                       		dc.w byte_17D00-Ani_Eggman
00019D1C 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00019D20 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00019D24 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00019D28 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00019D2C 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00019D30 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00019D34 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00019D38 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00019D3C 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00019D40 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00019D44 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00019D48 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00019D54                            		even
00019D54                            		even
00019D54                            
00019D54                            ; ---------------------------------------------------------------------------
00019D54                            ; Sprite mappings - Eggman (boss levels)
00019D54                            ; ---------------------------------------------------------------------------
00019D54                            Map_Eggman:
00019D54                            	include "_maps\Eggman.asm"
00019D54                            ; ---------------------------------------------------------------------------
00019D54                            ; Sprite mappings - Eggman (boss levels)
00019D54                            ; ---------------------------------------------------------------------------
00019D54 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00019D58 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00019D5C 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
00019D60 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
00019D64 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
00019D68 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
00019D6C 0000                       		dc.w byte_17DC8-Map_Eggman
00019D6E 06                         byte_17D26:	dc.b 6
00019D6F EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
00019D74 EC01 000E 14               		dc.b $EC, 1, 0,	$E, $14
00019D79 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
00019D7E FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
00019D83 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00019D88 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00019D8D 02                         byte_17D45:	dc.b 2
00019D8E E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019D93 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00019D98 02                         byte_17D50:	dc.b 2
00019D99 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019D9E EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019DA3 03                         byte_17D5B:	dc.b 3
00019DA4 E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
00019DA9 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00019DAE EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00019DB3 03                         byte_17D6B:	dc.b 3
00019DB4 E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
00019DB9 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00019DBE EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00019DC3 03                         byte_17D7B:	dc.b 3
00019DC4 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019DC9 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019DCE EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019DD3 03                         byte_17D8B:	dc.b 3
00019DD4 E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
00019DD9 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019DDE EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019DE3 04                         byte_17D9B:	dc.b 4
00019DE4 E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
00019DE9 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019DEE EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019DF3 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019DF8 01                         byte_17DB0:	dc.b 1
00019DF9 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00019DFE 01                         byte_17DB6:	dc.b 1
00019DFF 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00019E04 00                         byte_17DBC:	dc.b 0
00019E05 02                         byte_17DBD:	dc.b 2
00019E06 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00019E0B 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
00019E10 02                         byte_17DC8:	dc.b 2
00019E11 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00019E16 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00019E1C 00                         		even
00019E1C 00                         		even
00019E1C                            
00019E1C                            ; ---------------------------------------------------------------------------
00019E1C                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019E1C                            ; ---------------------------------------------------------------------------
00019E1C                            Map_BossItems:
00019E1C                            	include "_maps\Boss items.asm"
00019E1C                            ; ---------------------------------------------------------------------------
00019E1C                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019E1C                            ; ---------------------------------------------------------------------------
00019E1C 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00019E20 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00019E24 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00019E28 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00019E2C 01                         byte_17DE4:	dc.b 1
00019E2D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019E32 02                         byte_17DEA:	dc.b 2
00019E33 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00019E38 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019E3D 00                         		dc.b 0
00019E3E 01                         byte_17DF6:	dc.b 1
00019E3F FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00019E44 01                         byte_17DFC:	dc.b 1
00019E45 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00019E4A 01                         byte_17E02:	dc.b 1
00019E4B 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00019E50 04                         byte_17E08:	dc.b 4
00019E51 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00019E56 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00019E5B F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00019E60 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00019E65 00                         		dc.b 0
00019E66 02                         byte_17E1E:	dc.b 2
00019E67 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00019E6C 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00019E71 00                         		dc.b 0
00019E72 02                         byte_17E2A:	dc.b 2
00019E73 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00019E78 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00019E7E 00                         		even
00019E7E 00                         		even
00019E7E                            
00019E7E                            ; ===========================================================================
00019E7E                            ; ---------------------------------------------------------------------------
00019E7E                            ; Object 77 - Eggman (LZ)
00019E7E                            ; ---------------------------------------------------------------------------
00019E7E                            
00019E7E                            Obj77:					; XREF: Obj_Index
00019E7E 7000                       		moveq	#0,d0
00019E80 1028 0024                  		move.b	$24(a0),d0
00019E84 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00019E88 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00019E8C                            ; ===========================================================================
00019E8C 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00019E8E 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00019E90 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00019E92 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00019E94                            
00019E94 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00019E96 0401                       		dc.b 4,	1
00019E98 0607                       		dc.b 6,	7
00019E9A                            ; ===========================================================================
00019E9A                            
00019E9A                            Obj77_Main:				; XREF: Obj77_Index
00019E9A 317C 1E10 0008             		move.w	#$1E10,8(a0)
00019EA0 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00019EA6 3168 0008 0030             		move.w	8(a0),$30(a0)
00019EAC 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019EB2 117C 000F 0020             		move.b	#$F,$20(a0)
00019EB8 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019EBE 117C 0004 0018             		move.b	#4,$18(a0)
00019EC4 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00019EC8 2248                       		movea.l	a0,a1
00019ECA 7202                       		moveq	#2,d1
00019ECC 6000                       		bra.s	Obj77_LoadBoss
00019ECE                            ; ===========================================================================
00019ECE                            
00019ECE                            Obj77_Loop:
00019ECE 4EB9 0000 F09C             		jsr	SingleObjLoad2
00019ED4 6600                       		bne.s	Obj77_ShipMain
00019ED6 12BC 0077                  		move.b	#$77,0(a1)
00019EDA 3368 0008 0008             		move.w	8(a0),8(a1)
00019EE0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019EE6                            
00019EE6                            Obj77_LoadBoss:				; XREF: Obj77_Main
00019EE6 08A8 0000 0022             		bclr	#0,$22(a0)
00019EEC 4229 0025                  		clr.b	$25(a1)
00019EF0 135A 0024                  		move.b	(a2)+,$24(a1)
00019EF4 135A 001C                  		move.b	(a2)+,$1C(a1)
00019EF8 1368 0018 0018             		move.b	$18(a0),$18(a1)
00019EFE 237C 0001 9D54 0004        		move.l	#Map_Eggman,4(a1)
00019F06 337C 0400 0002             		move.w	#$400,2(a1)
00019F0C 137C 0004 0001             		move.b	#4,1(a1)
00019F12 137C 0020 0019             		move.b	#$20,$19(a1)
00019F18 2348 0034                  		move.l	a0,$34(a1)
00019F1C 51C9 FFB0                  		dbf	d1,Obj77_Loop
00019F20                            
00019F20                            Obj77_ShipMain:
00019F20 43F8 D000                  		lea	($FFFFD000).w,a1
00019F24 7000                       		moveq	#0,d0
00019F26 1028 0025                  		move.b	$25(a0),d0
00019F2A 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00019F2E 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
00019F32 43F9 0001 9D04             		lea	(Ani_Eggman).l,a1
00019F38 4EB9 0000 B990             		jsr	AnimateSprite
00019F3E 7003                       		moveq	#3,d0
00019F40 C028 0022                  		and.b	$22(a0),d0
00019F44 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019F4A 8128 0001                  		or.b	d0,1(a0)
00019F4E 4EF9 0000 E930             		jmp	DisplaySprite
00019F54                            ; ===========================================================================
00019F54 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00019F58 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00019F5C 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00019F60 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
00019F64                            ; ===========================================================================
00019F64                            
00019F64                            loc_17F1E:				; XREF: Obj77_ShipIndex
00019F64 3029 0008                  		move.w	8(a1),d0
00019F68 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00019F6C 6500                       		bcs.s	loc_17F38
00019F6E 317C FE80 0012             		move.w	#-$180,$12(a0)
00019F74 317C 0060 0010             		move.w	#$60,$10(a0)
00019F7A 5428 0025                  		addq.b	#2,$25(a0)
00019F7E                            
00019F7E                            loc_17F38:
00019F7E 6100 F91A                  		bsr.w	BossMove
00019F82 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019F88 3168 0030 0008             		move.w	$30(a0),8(a0)
00019F8E                            
00019F8E                            loc_17F48:
00019F8E 4A28 003D                  		tst.b	$3D(a0)
00019F92 6600                       		bne.s	loc_17F8E
00019F94 4A28 0022                  		tst.b	$22(a0)
00019F98 6B00                       		bmi.s	loc_17F92
00019F9A 4A28 0020                  		tst.b	$20(a0)
00019F9E 6600                       		bne.s	locret_17F8C
00019FA0 4A28 003E                  		tst.b	$3E(a0)
00019FA4 6600                       		bne.s	loc_17F70
00019FA6 117C 0020 003E             		move.b	#$20,$3E(a0)
00019FAC 303C 00AC                  		move.w	#$AC,d0
00019FB0 4EB9 0000 1220             		jsr	(PlaySound_Special).l
00019FB6                            
00019FB6                            loc_17F70:
00019FB6 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019FBA 7000                       		moveq	#0,d0
00019FBC 4A51                       		tst.w	(a1)
00019FBE 6600                       		bne.s	loc_17F7E
00019FC0 303C 0EEE                  		move.w	#$EEE,d0
00019FC4                            
00019FC4                            loc_17F7E:
00019FC4 3280                       		move.w	d0,(a1)
00019FC6 5328 003E                  		subq.b	#1,$3E(a0)
00019FCA 6600                       		bne.s	locret_17F8C
00019FCC 117C 000F 0020             		move.b	#$F,$20(a0)
00019FD2                            
00019FD2                            locret_17F8C:
00019FD2 4E75                       		rts	
00019FD4                            ; ===========================================================================
00019FD4                            
00019FD4                            loc_17F8E:				; XREF: loc_17F48
00019FD4 6000 F876                  		bra.w	BossDefeated
00019FD8                            ; ===========================================================================
00019FD8                            
00019FD8                            loc_17F92:				; XREF: loc_17F48
00019FD8 7064                       		moveq	#100,d0
00019FDA 6100 0000                  		bsr.w	AddPoints
00019FDE 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019FE4 4E75                       		rts	
00019FE6                            ; ===========================================================================
00019FE6                            
00019FE6                            loc_17FA0:				; XREF: Obj77_ShipIndex
00019FE6 70FE                       		moveq	#-2,d0
00019FE8 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00019FEE 6500                       		bcs.s	loc_17FB6
00019FF0 317C 1E48 0030             		move.w	#$1E48,$30(a0)
00019FF6 4268 0010                  		clr.w	$10(a0)
00019FFA 5240                       		addq.w	#1,d0
00019FFC                            
00019FFC                            loc_17FB6:
00019FFC 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001A002 6E00                       		bgt.s	loc_17FCA
0001A004 317C 0500 0038             		move.w	#$500,$38(a0)
0001A00A 4268 0012                  		clr.w	$12(a0)
0001A00E 5240                       		addq.w	#1,d0
0001A010                            
0001A010                            loc_17FCA:
0001A010 6600                       		bne.s	loc_17FDC
0001A012 317C 0140 0010             		move.w	#$140,$10(a0)
0001A018 317C FE00 0012             		move.w	#-$200,$12(a0)
0001A01E 5428 0025                  		addq.b	#2,$25(a0)
0001A022                            
0001A022                            loc_17FDC:
0001A022 6000 FF5A                  		bra.w	loc_17F38
0001A026                            ; ===========================================================================
0001A026                            
0001A026                            loc_17FE0:				; XREF: Obj77_ShipIndex
0001A026 70FE                       		moveq	#-2,d0
0001A028 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001A02E 6500                       		bcs.s	loc_17FF6
0001A030 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001A036 4268 0010                  		clr.w	$10(a0)
0001A03A 5240                       		addq.w	#1,d0
0001A03C                            
0001A03C                            loc_17FF6:
0001A03C 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001A042 6E00                       		bgt.s	loc_1800A
0001A044 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001A04A 4268 0012                  		clr.w	$12(a0)
0001A04E 5240                       		addq.w	#1,d0
0001A050                            
0001A050                            loc_1800A:
0001A050 6600                       		bne.s	loc_1801A
0001A052 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A058 5428 0025                  		addq.b	#2,$25(a0)
0001A05C 4228 003F                  		clr.b	$3F(a0)
0001A060                            
0001A060                            loc_1801A:
0001A060 6000 FF1C                  		bra.w	loc_17F38
0001A064                            ; ===========================================================================
0001A064                            
0001A064                            loc_1801E:				; XREF: Obj77_ShipIndex
0001A064 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001A06A 6E00                       		bgt.s	loc_1804E
0001A06C 317C 0100 0038             		move.w	#$100,$38(a0)
0001A072 317C 0140 0010             		move.w	#$140,$10(a0)
0001A078 317C FF80 0012             		move.w	#-$80,$12(a0)
0001A07E 4A28 003D                  		tst.b	$3D(a0)
0001A082 6700                       		beq.s	loc_18046
0001A084 E1E8 0010                  		asl	$10(a0)
0001A088 E1E8 0012                  		asl	$12(a0)
0001A08C                            
0001A08C                            loc_18046:
0001A08C 5428 0025                  		addq.b	#2,$25(a0)
0001A090 6000 FEEC                  		bra.w	loc_17F38
0001A094                            ; ===========================================================================
0001A094                            
0001A094                            loc_1804E:
0001A094 08E8 0000 0022             		bset	#0,$22(a0)
0001A09A 5428 003F                  		addq.b	#2,$3F(a0)
0001A09E 1028 003F                  		move.b	$3F(a0),d0
0001A0A2 4EB9 0000 29F6             		jsr	(CalcSine).l
0001A0A8 4A41                       		tst.w	d1
0001A0AA 6A00                       		bpl.s	loc_1806C
0001A0AC 08A8 0000 0022             		bclr	#0,$22(a0)
0001A0B2                            
0001A0B2                            loc_1806C:
0001A0B2 E840                       		asr.w	#4,d0
0001A0B4 4840                       		swap	d0
0001A0B6 4240                       		clr.w	d0
0001A0B8 D0A8 0030                  		add.l	$30(a0),d0
0001A0BC 4840                       		swap	d0
0001A0BE 3140 0008                  		move.w	d0,8(a0)
0001A0C2 3028 0012                  		move.w	$12(a0),d0
0001A0C6 3238 D00C                  		move.w	($FFFFD00C).w,d1
0001A0CA 9268 000C                  		sub.w	$C(a0),d1
0001A0CE 6500                       		bcs.s	loc_180A2
0001A0D0 0441 0048                  		subi.w	#$48,d1
0001A0D4 6500                       		bcs.s	loc_180A2
0001A0D6 E240                       		asr.w	#1,d0
0001A0D8 0441 0028                  		subi.w	#$28,d1
0001A0DC 6500                       		bcs.s	loc_180A2
0001A0DE E240                       		asr.w	#1,d0
0001A0E0 0441 0028                  		subi.w	#$28,d1
0001A0E4 6500                       		bcs.s	loc_180A2
0001A0E6 7000                       		moveq	#0,d0
0001A0E8                            
0001A0E8                            loc_180A2:
0001A0E8 48C0                       		ext.l	d0
0001A0EA E180                       		asl.l	#8,d0
0001A0EC 4A28 003D                  		tst.b	$3D(a0)
0001A0F0 6700                       		beq.s	loc_180AE
0001A0F2 D080                       		add.l	d0,d0
0001A0F4                            
0001A0F4                            loc_180AE:
0001A0F4 D1A8 0038                  		add.l	d0,$38(a0)
0001A0F8 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A0FE 6000 FE8E                  		bra.w	loc_17F48
0001A102                            ; ===========================================================================
0001A102                            
0001A102                            loc_180BC:				; XREF: Obj77_ShipIndex
0001A102 70FE                       		moveq	#-2,d0
0001A104 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001A10A 6500                       		bcs.s	loc_180D2
0001A10C 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001A112 4268 0010                  		clr.w	$10(a0)
0001A116 5240                       		addq.w	#1,d0
0001A118                            
0001A118                            loc_180D2:
0001A118 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001A11E 6E00                       		bgt.s	loc_180E6
0001A120 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001A126 4268 0012                  		clr.w	$12(a0)
0001A12A 5240                       		addq.w	#1,d0
0001A12C                            
0001A12C                            loc_180E6:
0001A12C 6600                       		bne.s	loc_180F2
0001A12E 5428 0025                  		addq.b	#2,$25(a0)
0001A132 08A8 0000 0022             		bclr	#0,$22(a0)
0001A138                            
0001A138                            loc_180F2:
0001A138 6000 FE44                  		bra.w	loc_17F38
0001A13C                            ; ===========================================================================
0001A13C                            
0001A13C                            loc_180F6:				; XREF: Obj77_ShipIndex
0001A13C 4A28 003D                  		tst.b	$3D(a0)
0001A140 6600                       		bne.s	loc_18112
0001A142 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
0001A148 6D00                       		blt.s	loc_18126
0001A14A 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
0001A150 6E00                       		bgt.s	loc_18126
0001A152 117C 0032 003C             		move.b	#$32,$3C(a0)
0001A158                            
0001A158                            loc_18112:
0001A158 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeBossDefeated	
0001A1AE 303C 0082                  		move.w	#$82,d0
0001A1B2 4EB9 0000 121A             		jsr	(PlaySound).l	; play LZ music
0001A1B8 08E8 0000 0022             		bset	#0,$22(a0)
0001A1BE 5428 0025                  		addq.b	#2,$25(a0)
0001A1C2                            
0001A1C2                            loc_18126:
0001A1C2 6000 FDBA                  		bra.w	loc_17F38
0001A1C6                            ; ===========================================================================
0001A1C6                            
0001A1C6                            loc_1812A:				; XREF: Obj77_ShipIndex
0001A1C6 4A28 003D                  		tst.b	$3D(a0)
0001A1CA 6600                       		bne.s	loc_18136
0001A1CC 5328 003C                  		subq.b	#1,$3C(a0)
0001A1D0 6600                       		bne.s	loc_1814E
0001A1D2                            
0001A1D2                            loc_18136:
0001A1D2 4228 003C                  		clr.b	$3C(a0)
0001A1D6 317C 0400 0010             		move.w	#$400,$10(a0)
0001A1DC 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A1E2 4228 003D                  		clr.b	$3D(a0)
0001A1E6 5428 0025                  		addq.b	#2,$25(a0)
0001A1EA                            
0001A1EA                            loc_1814E:
0001A1EA 6000 FD92                  		bra.w	loc_17F38
0001A1EE                            ; ===========================================================================
0001A1EE                            
0001A1EE                            loc_18152:				; XREF: Obj77_ShipIndex
0001A1EE 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
0001A1F4 6400                       		bcc.s	loc_18160
0001A1F6 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A1FA 6000                       		bra.s	loc_18166
0001A1FC                            ; ===========================================================================
0001A1FC                            
0001A1FC                            loc_18160:
0001A1FC 4A28 0001                  		tst.b	1(a0)
0001A200 6A00                       		bpl.s	Obj77_ShipDel
0001A202                            
0001A202                            loc_18166:
0001A202 6000 FD7A                  		bra.w	loc_17F38
0001A206                            ; ===========================================================================
0001A206                            
0001A206                            Obj77_ShipDel:
0001A206 4EF9 0000 E980             		jmp	DeleteObject
0001A20C                            ; ===========================================================================
0001A20C                            
0001A20C                            Obj77_FaceMain:				; XREF: Obj77_Index
0001A20C 2268 0034                  		movea.l	$34(a0),a1
0001A210 1011                       		move.b	(a1),d0
0001A212 B010                       		cmp.b	(a0),d0
0001A214 6600                       		bne.s	Obj77_FaceDel
0001A216 7000                       		moveq	#0,d0
0001A218 1029 0025                  		move.b	$25(a1),d0
0001A21C 7201                       		moveq	#1,d1
0001A21E 4A28 003D                  		tst.b	$3D(a0)
0001A222 6700                       		beq.s	loc_1818C
0001A224 720A                       		moveq	#$A,d1
0001A226 6000                       		bra.s	loc_181A0
0001A228                            ; ===========================================================================
0001A228                            
0001A228                            loc_1818C:
0001A228 4A29 0020                  		tst.b	$20(a1)
0001A22C 6600                       		bne.s	loc_18196
0001A22E 7205                       		moveq	#5,d1
0001A230 6000                       		bra.s	loc_181A0
0001A232                            ; ===========================================================================
0001A232                            
0001A232                            loc_18196:
0001A232 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A238 6500                       		bcs.s	loc_181A0
0001A23A 7204                       		moveq	#4,d1
0001A23C                            
0001A23C                            loc_181A0:
0001A23C 1141 001C                  		move.b	d1,$1C(a0)
0001A240 0C00 000E                  		cmpi.b	#$E,d0
0001A244 6600                       		bne.s	loc_181B6
0001A246 117C 0006 001C             		move.b	#6,$1C(a0)
0001A24C 4A28 0001                  		tst.b	1(a0)
0001A250 6A00                       		bpl.s	Obj77_FaceDel
0001A252                            
0001A252                            loc_181B6:
0001A252 6000                       		bra.s	Obj77_Display
0001A254                            ; ===========================================================================
0001A254                            
0001A254                            Obj77_FaceDel:
0001A254 4EF9 0000 E980             		jmp	DeleteObject
0001A25A                            ; ===========================================================================
0001A25A                            
0001A25A                            Obj77_FlameMain:			; XREF: Obj77_Index
0001A25A 117C 0007 001C             		move.b	#7,$1C(a0)
0001A260 2268 0034                  		movea.l	$34(a0),a1
0001A264 1011                       		move.b	(a1),d0
0001A266 B010                       		cmp.b	(a0),d0
0001A268 6600                       		bne.s	Obj77_FlameDel
0001A26A 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
0001A270 6600                       		bne.s	loc_181F0
0001A272 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A278 4A28 0001                  		tst.b	1(a0)
0001A27C 6A00                       		bpl.s	Obj77_FlameDel
0001A27E 6000                       		bra.s	loc_181F0
0001A280                            ; ===========================================================================
0001A280 4A69 0010                  		tst.w	$10(a1)
0001A284 6700                       		beq.s	loc_181F0
0001A286 117C 0008 001C             		move.b	#8,$1C(a0)
0001A28C                            
0001A28C                            loc_181F0:
0001A28C 6000                       		bra.s	Obj77_Display
0001A28E                            ; ===========================================================================
0001A28E                            
0001A28E                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
0001A28E 4EF9 0000 E980             		jmp	DeleteObject
0001A294                            ; ===========================================================================
0001A294                            
0001A294                            Obj77_Display:
0001A294 43F9 0001 9D04             		lea	(Ani_Eggman).l,a1
0001A29A 4EB9 0000 B990             		jsr	AnimateSprite
0001A2A0 2268 0034                  		movea.l	$34(a0),a1
0001A2A4 3169 0008 0008             		move.w	8(a1),8(a0)
0001A2AA 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A2B0 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A2B6 7003                       		moveq	#3,d0
0001A2B8 C028 0022                  		and.b	$22(a0),d0
0001A2BC 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A2C2 8128 0001                  		or.b	d0,1(a0)
0001A2C6 4EF9 0000 E930             		jmp	DisplaySprite
0001A2CC                            ; ===========================================================================
0001A2CC                            ; ---------------------------------------------------------------------------
0001A2CC                            ; Object 73 - Eggman (MZ)
0001A2CC                            ; ---------------------------------------------------------------------------
0001A2CC                            
0001A2CC                            Obj73:					; XREF: Obj_Index
0001A2CC 7000                       		moveq	#0,d0
0001A2CE 1028 0024                  		move.b	$24(a0),d0
0001A2D2 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001A2D6 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001A2DA                            ; ===========================================================================
0001A2DA 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001A2DC 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001A2DE 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001A2E0 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001A2E2 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001A2E4                            
0001A2E4 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A2E7 0401 04                    		dc.b 4,	1, 4
0001A2EA 0607 04                    		dc.b 6,	7, 4
0001A2ED 0800 03                    		dc.b 8,	0, 3
0001A2F0                            ; ===========================================================================
0001A2F0                            
0001A2F0                            Obj73_Main:				; XREF: Obj73_Index
0001A2F0 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A2F6 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A2FC 117C 000F 0020             		move.b	#$F,$20(a0)
0001A302 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A308 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001A30C 2248                       		movea.l	a0,a1
0001A30E 7203                       		moveq	#3,d1
0001A310 6000                       		bra.s	Obj73_LoadBoss
0001A312                            ; ===========================================================================
0001A312                            
0001A312                            Obj73_Loop:
0001A312 4EB9 0000 F09C             		jsr	SingleObjLoad2
0001A318 6600                       		bne.s	Obj73_ShipMain
0001A31A 12BC 0073                  		move.b	#$73,0(a1)
0001A31E 3368 0008 0008             		move.w	8(a0),8(a1)
0001A324 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A32A                            
0001A32A                            Obj73_LoadBoss:				; XREF: Obj73_Main
0001A32A 08A8 0000 0022             		bclr	#0,$22(a0)
0001A330 4229 0025                  		clr.b	$25(a1)
0001A334 135A 0024                  		move.b	(a2)+,$24(a1)
0001A338 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A33C 135A 0018                  		move.b	(a2)+,$18(a1)
0001A340 237C 0001 9D54 0004        		move.l	#Map_Eggman,4(a1)
0001A348 337C 0400 0002             		move.w	#$400,2(a1)
0001A34E 137C 0004 0001             		move.b	#4,1(a1)
0001A354 137C 0020 0019             		move.b	#$20,$19(a1)
0001A35A 2348 0034                  		move.l	a0,$34(a1)
0001A35E 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001A362                            
0001A362                            Obj73_ShipMain:
0001A362 7000                       		moveq	#0,d0
0001A364 1028 0025                  		move.b	$25(a0),d0
0001A368 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001A36C 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001A370 43F9 0001 9D04             		lea	(Ani_Eggman).l,a1
0001A376 4EB9 0000 B990             		jsr	AnimateSprite
0001A37C 7003                       		moveq	#3,d0
0001A37E C028 0022                  		and.b	$22(a0),d0
0001A382 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A388 8128 0001                  		or.b	d0,1(a0)
0001A38C 4EF9 0000 E930             		jmp	DisplaySprite
0001A392                            ; ===========================================================================
0001A392 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001A394 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001A396 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001A398 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001A39A 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001A39C                            ; ===========================================================================
0001A39C                            
0001A39C                            loc_18302:				; XREF: Obj73_ShipIndex
0001A39C 1028 003F                  		move.b	$3F(a0),d0
0001A3A0 5428 003F                  		addq.b	#2,$3F(a0)
0001A3A4 4EB9 0000 29F6             		jsr	(CalcSine).l
0001A3AA E440                       		asr.w	#2,d0
0001A3AC 3140 0012                  		move.w	d0,$12(a0)
0001A3B0 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A3B6 6100 F4E2                  		bsr.w	BossMove
0001A3BA 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A3C0 6600                       		bne.s	loc_18334
0001A3C2 5428 0025                  		addq.b	#2,$25(a0)
0001A3C6 4228 0028                  		clr.b	$28(a0)
0001A3CA 42A8 0010                  		clr.l	$10(a0)
0001A3CE                            
0001A3CE                            loc_18334:
0001A3CE 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001A3D4 1140 0034                  		move.b	d0,$34(a0)
0001A3D8                            
0001A3D8                            loc_1833E:
0001A3D8 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A3DE 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A3E4 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0001A3EA 6400                       		bcc.s	locret_18390
0001A3EC 4A28 0022                  		tst.b	$22(a0)
0001A3F0 6B00                       		bmi.s	loc_18392
0001A3F2 4A28 0020                  		tst.b	$20(a0)
0001A3F6 6600                       		bne.s	locret_18390
0001A3F8 4A28 003E                  		tst.b	$3E(a0)
0001A3FC 6600                       		bne.s	loc_18374
0001A3FE 117C 0028 003E             		move.b	#$28,$3E(a0)
0001A404 303C 00AC                  		move.w	#$AC,d0
0001A408 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A40E                            
0001A40E                            loc_18374:
0001A40E 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A412 7000                       		moveq	#0,d0
0001A414 4A51                       		tst.w	(a1)
0001A416 6600                       		bne.s	loc_18382
0001A418 303C 0EEE                  		move.w	#$EEE,d0
0001A41C                            
0001A41C                            loc_18382:
0001A41C 3280                       		move.w	d0,(a1)
0001A41E 5328 003E                  		subq.b	#1,$3E(a0)
0001A422 6600                       		bne.s	locret_18390
0001A424 117C 000F 0020             		move.b	#$F,$20(a0)
0001A42A                            
0001A42A                            locret_18390:
0001A42A 4E75                       		rts	
0001A42C                            ; ===========================================================================
0001A42C                            
0001A42C                            loc_18392:				; XREF: loc_1833E
0001A42C 7064                       		moveq	#100,d0
0001A42E 6100 0000                  		bsr.w	AddPoints
0001A432 117C 0004 0025             		move.b	#4,$25(a0)
0001A438 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001A43E 4268 0010                  		clr.w	$10(a0)
0001A442 4E75                       		rts	
0001A444                            ; ===========================================================================
0001A444                            
0001A444                            loc_183AA:				; XREF: Obj73_ShipIndex
0001A444 7000                       		moveq	#0,d0
0001A446 1028 0028                  		move.b	$28(a0),d0
0001A44A 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001A44E 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001A452 0228 0006 0028             		andi.b	#6,$28(a0)
0001A458 6000 FF7E                  		bra.w	loc_1833E
0001A45C                            ; ===========================================================================
0001A45C 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001A45E 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A460 0000                       		dc.w loc_183CA-off_183C2
0001A462 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A464                            ; ===========================================================================
0001A464                            
0001A464                            loc_183CA:				; XREF: off_183C2
0001A464 4A68 0010                  		tst.w	$10(a0)
0001A468 6600                       		bne.s	loc_183FE
0001A46A 7040                       		moveq	#$40,d0
0001A46C 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A472 6700                       		beq.s	loc_183E6
0001A474 6500                       		bcs.s	loc_183DE
0001A476 4440                       		neg.w	d0
0001A478                            
0001A478                            loc_183DE:
0001A478 3140 0012                  		move.w	d0,$12(a0)
0001A47C 6000 F41C                  		bra.w	BossMove
0001A480                            ; ===========================================================================
0001A480                            
0001A480                            loc_183E6:
0001A480 317C 0200 0010             		move.w	#$200,$10(a0)
0001A486 317C 0100 0012             		move.w	#$100,$12(a0)
0001A48C 0828 0000 0022             		btst	#0,$22(a0)
0001A492 6600                       		bne.s	loc_183FE
0001A494 4468 0010                  		neg.w	$10(a0)
0001A498                            
0001A498                            loc_183FE:
0001A498 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001A49E 6400                       		bcc.s	Obj73_MakeLava
0001A4A0 6100 F3F8                  		bsr.w	BossMove
0001A4A4 5968 0012                  		subq.w	#4,$12(a0)
0001A4A8                            
0001A4A8                            Obj73_MakeLava:
0001A4A8 5328 0034                  		subq.b	#1,$34(a0)
0001A4AC 6400                       		bcc.s	loc_1845C
0001A4AE 4EB9 0000 F086             		jsr	SingleObjLoad
0001A4B4 6600                       		bne.s	loc_1844A
0001A4B6 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0001A4BA 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
0001A4C0 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001A4C6 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001A4CC 80FC 0050                  		divu.w	#$50,d0
0001A4D0 4840                       		swap	d0
0001A4D2 0640 1878                  		addi.w	#$1878,d0
0001A4D6 3340 0008                  		move.w	d0,8(a1)
0001A4DA EE09                       		lsr.b	#7,d1
0001A4DC 337C 00FF 0028             		move.w	#$FF,$28(a1)
0001A4E2                            
0001A4E2                            loc_1844A:
0001A4E2 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001A4E8 0200 001F                  		andi.b	#$1F,d0
0001A4EC 0600 0040                  		addi.b	#$40,d0
0001A4F0 1140 0034                  		move.b	d0,$34(a0)
0001A4F4                            
0001A4F4                            loc_1845C:
0001A4F4 0828 0000 0022             		btst	#0,$22(a0)
0001A4FA 6700                       		beq.s	loc_18474
0001A4FC 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A502 6D00                       		blt.s	locret_1849C
0001A504 317C 1910 0030             		move.w	#$1910,$30(a0)
0001A50A 6000                       		bra.s	loc_18482
0001A50C                            ; ===========================================================================
0001A50C                            
0001A50C                            loc_18474:
0001A50C 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001A512 6E00                       		bgt.s	locret_1849C
0001A514 317C 1830 0030             		move.w	#$1830,$30(a0)
0001A51A                            
0001A51A                            loc_18482:
0001A51A 4268 0010                  		clr.w	$10(a0)
0001A51E 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A524 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A52A 6400                       		bcc.s	loc_18498
0001A52C 4468 0012                  		neg.w	$12(a0)
0001A530                            
0001A530                            loc_18498:
0001A530 5428 0028                  		addq.b	#2,$28(a0)
0001A534                            
0001A534                            locret_1849C:
0001A534 4E75                       		rts	
0001A536                            ; ===========================================================================
0001A536                            
0001A536                            Obj73_MakeLava2:			; XREF: off_183C2
0001A536 6100 F362                  		bsr.w	BossMove
0001A53A 3028 0038                  		move.w	$38(a0),d0
0001A53E 0440 022C                  		subi.w	#$22C,d0
0001A542 6E00                       		bgt.s	locret_184F4
0001A544 303C 022C                  		move.w	#$22C,d0
0001A548 4A68 0012                  		tst.w	$12(a0)
0001A54C 6700                       		beq.s	loc_184EA
0001A54E 4268 0012                  		clr.w	$12(a0)
0001A552 317C 0050 003C             		move.w	#$50,$3C(a0)
0001A558 0868 0000 0022             		bchg	#0,$22(a0)
0001A55E 4EB9 0000 F086             		jsr	SingleObjLoad
0001A564 6600                       		bne.s	loc_184EA
0001A566 3368 0030 0008             		move.w	$30(a0),8(a1)
0001A56C 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001A572 0669 0018 000C             		addi.w	#$18,$C(a1)
0001A578 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001A57C 137C 0001 0028             		move.b	#1,$28(a1)
0001A582                            
0001A582                            loc_184EA:
0001A582 5368 003C                  		subq.w	#1,$3C(a0)
0001A586 6600                       		bne.s	locret_184F4
0001A588 5428 0028                  		addq.b	#2,$28(a0)
0001A58C                            
0001A58C                            locret_184F4:
0001A58C 4E75                       		rts	
0001A58E                            ; ===========================================================================
0001A58E                            
0001A58E                            loc_184F6:				; XREF: Obj73_ShipIndex
0001A58E 5368 003C                  		subq.w	#1,$3C(a0)
0001A592 6B00                       		bmi.s	loc_18500
0001A594 6000 F2B6                  		bra.w	BossDefeated
0001A598                            ; ===========================================================================
0001A598                            
0001A598                            loc_18500:
0001A598 08E8 0000 0022             		bset	#0,$22(a0)
0001A59E 08A8 0007 0022             		bclr	#7,$22(a0)
0001A5A4 4268 0010                  		clr.w	$10(a0)
0001A5A8 5428 0025                  		addq.b	#2,$25(a0)
0001A5AC 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001A5B2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A5B6 6600                       		bne.s	locret_1852A
0001A5B8 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A5BE 4268 0012                  		clr.w	$12(a0)
0001A5C2                            
0001A5C2                            locret_1852A:
0001A5C2 4E75                       		rts	
0001A5C4                            ; ===========================================================================
0001A5C4                            
0001A5C4                            loc_1852C:				; XREF: Obj73_ShipIndex
0001A5C4 5268 003C                  		addq.w	#1,$3C(a0)
0001A5C8 6700                       		beq.s	loc_18544
0001A5CA 6A00                       		bpl.s	loc_1854E
0001A5CC 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001A5D2 6400                       		bcc.s	loc_18544
0001A5D4 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A5DA 6000 0000                  		bra.w	loc_1857A
0001A5DE                            ; ===========================================================================
0001A5DE                            
0001A5DE                            loc_18544:
0001A5DE 4268 0012                  		clr.w	$12(a0)
0001A5E2 4268 003C                  		clr.w	$3C(a0)
0001A5E6 6000 0000                  		bra.w	loc_1857A
0001A5EA                            ; ===========================================================================
0001A5EA                            
0001A5EA                            loc_1854E:
0001A5EA 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001A5F0 6500                       		bcs.s	loc_18566
0001A5F2 6700                       		beq.s	loc_1856C
0001A5F4 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001A5FA 6500                       		bcs.s	loc_1857A
0001A5FC 5428 0025                  		addq.b	#2,$25(a0)
0001A600 6000                       		bra.s	loc_1857A
0001A602                            ; ===========================================================================
0001A602                            
0001A602                            loc_18566:
0001A602 5168 0012                  		subq.w	#8,$12(a0)
0001A606 6000                       		bra.s	loc_1857A
0001A608                            ; ===========================================================================
0001A608                            
0001A608                            loc_1856C:
0001A608 4268 0012                  		clr.w	$12(a0)
0001A60C 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeBossDefeated			
0001A662 303C 0083                  		move.w	#$83,d0
0001A666 4EB9 0000 121A             		jsr	(PlaySound).l	; play MZ music
0001A66C                            
0001A66C                            loc_1857A:
0001A66C 6100 F22C                  		bsr.w	BossMove
0001A670 6000 FD66                  		bra.w	loc_1833E
0001A674                            ; ===========================================================================
0001A674                            
0001A674                            loc_18582:				; XREF: Obj73_ShipIndex
0001A674 317C 0500 0010             		move.w	#$500,$10(a0)
0001A67A 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A680 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
0001A686 6400                       		bcc.s	loc_1859C
0001A688 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A68C 6000                       		bra.s	loc_185A2
0001A68E                            ; ===========================================================================
0001A68E                            
0001A68E                            loc_1859C:
0001A68E 4A28 0001                  		tst.b	1(a0)
0001A692 6A00                       		bpl.s	Obj73_ShipDel
0001A694                            
0001A694                            loc_185A2:
0001A694 6100 F204                  		bsr.w	BossMove
0001A698 6000 FD3E                  		bra.w	loc_1833E
0001A69C                            ; ===========================================================================
0001A69C                            
0001A69C                            Obj73_ShipDel:
0001A69C 4EF9 0000 E980             		jmp	DeleteObject
0001A6A2                            ; ===========================================================================
0001A6A2                            
0001A6A2                            Obj73_FaceMain:				; XREF: Obj73_Index
0001A6A2 7000                       		moveq	#0,d0
0001A6A4 7201                       		moveq	#1,d1
0001A6A6 2268 0034                  		movea.l	$34(a0),a1
0001A6AA 1029 0025                  		move.b	$25(a1),d0
0001A6AE 5540                       		subq.w	#2,d0
0001A6B0 6600                       		bne.s	loc_185D2
0001A6B2 0829 0001 0028             		btst	#1,$28(a1)
0001A6B8 6700                       		beq.s	loc_185DA
0001A6BA 4A69 0012                  		tst.w	$12(a1)
0001A6BE 6600                       		bne.s	loc_185DA
0001A6C0 7204                       		moveq	#4,d1
0001A6C2 6000                       		bra.s	loc_185EE
0001A6C4                            ; ===========================================================================
0001A6C4                            
0001A6C4                            loc_185D2:
0001A6C4 5500                       		subq.b	#2,d0
0001A6C6 6B00                       		bmi.s	loc_185DA
0001A6C8 720A                       		moveq	#$A,d1
0001A6CA 6000                       		bra.s	loc_185EE
0001A6CC                            ; ===========================================================================
0001A6CC                            
0001A6CC                            loc_185DA:
0001A6CC 4A29 0020                  		tst.b	$20(a1)
0001A6D0 6600                       		bne.s	loc_185E4
0001A6D2 7205                       		moveq	#5,d1
0001A6D4 6000                       		bra.s	loc_185EE
0001A6D6                            ; ===========================================================================
0001A6D6                            
0001A6D6                            loc_185E4:
0001A6D6 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A6DC 6500                       		bcs.s	loc_185EE
0001A6DE 7204                       		moveq	#4,d1
0001A6E0                            
0001A6E0                            loc_185EE:
0001A6E0 1141 001C                  		move.b	d1,$1C(a0)
0001A6E4 5900                       		subq.b	#4,d0
0001A6E6 6600                       		bne.s	loc_18602
0001A6E8 117C 0006 001C             		move.b	#6,$1C(a0)
0001A6EE 4A28 0001                  		tst.b	1(a0)
0001A6F2 6A00                       		bpl.s	Obj73_FaceDel
0001A6F4                            
0001A6F4                            loc_18602:
0001A6F4 6000                       		bra.s	Obj73_Display
0001A6F6                            ; ===========================================================================
0001A6F6                            
0001A6F6                            Obj73_FaceDel:
0001A6F6 4EF9 0000 E980             		jmp	DeleteObject
0001A6FC                            ; ===========================================================================
0001A6FC                            
0001A6FC                            Obj73_FlameMain:			; XREF: Obj73_Index
0001A6FC 117C 0007 001C             		move.b	#7,$1C(a0)
0001A702 2268 0034                  		movea.l	$34(a0),a1
0001A706 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A70C 6D00                       		blt.s	loc_1862A
0001A70E 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A714 4A28 0001                  		tst.b	1(a0)
0001A718 6A00                       		bpl.s	Obj73_FlameDel
0001A71A 6000                       		bra.s	loc_18636
0001A71C                            ; ===========================================================================
0001A71C                            
0001A71C                            loc_1862A:
0001A71C 4A69 0010                  		tst.w	$10(a1)
0001A720 6700                       		beq.s	loc_18636
0001A722 117C 0008 001C             		move.b	#8,$1C(a0)
0001A728                            
0001A728                            loc_18636:
0001A728 6000                       		bra.s	Obj73_Display
0001A72A                            ; ===========================================================================
0001A72A                            
0001A72A                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
0001A72A 4EF9 0000 E980             		jmp	DeleteObject
0001A730                            ; ===========================================================================
0001A730                            
0001A730                            Obj73_Display:
0001A730 43F9 0001 9D04             		lea	(Ani_Eggman).l,a1
0001A736 4EB9 0000 B990             		jsr	AnimateSprite
0001A73C                            
0001A73C                            loc_1864A:
0001A73C 2268 0034                  		movea.l	$34(a0),a1
0001A740 3169 0008 0008             		move.w	8(a1),8(a0)
0001A746 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A74C 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A752 7003                       		moveq	#3,d0
0001A754 C028 0022                  		and.b	$22(a0),d0
0001A758 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A75E 8128 0001                  		or.b	d0,1(a0)
0001A762 4EF9 0000 E930             		jmp	DisplaySprite
0001A768                            ; ===========================================================================
0001A768                            
0001A768                            Obj73_TubeMain:				; XREF: Obj73_Index
0001A768 2268 0034                  		movea.l	$34(a0),a1
0001A76C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A772 6600                       		bne.s	loc_18688
0001A774 4A28 0001                  		tst.b	1(a0)
0001A778 6A00                       		bpl.s	Obj73_TubeDel
0001A77A                            
0001A77A                            loc_18688:
0001A77A 217C 0001 9E1C 0004        		move.l	#Map_BossItems,4(a0)
0001A782 317C 246C 0002             		move.w	#$246C,2(a0)
0001A788 117C 0004 001A             		move.b	#4,$1A(a0)
0001A78E 60AC                       		bra.s	loc_1864A
0001A790                            ; ===========================================================================
0001A790                            
0001A790                            Obj73_TubeDel:
0001A790 4EF9 0000 E980             		jmp	DeleteObject
0001A796                            ; ===========================================================================
0001A796                            ; ---------------------------------------------------------------------------
0001A796                            ; Object 74 - lava that	Eggman drops (MZ)
0001A796                            ; ---------------------------------------------------------------------------
0001A796                            
0001A796                            Obj74:					; XREF: Obj_Index
0001A796 7000                       		moveq	#0,d0
0001A798 1028 0024                  		move.b	$24(a0),d0
0001A79C 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001A7A0 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001A7A4 4EF9 0000 E930             		jmp	DisplaySprite
0001A7AA                            ; ===========================================================================
0001A7AA 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001A7AC 0000                       		dc.w Obj74_Action-Obj74_Index
0001A7AE 0000                       		dc.w loc_18886-Obj74_Index
0001A7B0 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001A7B2                            ; ===========================================================================
0001A7B2                            
0001A7B2                            Obj74_Main:				; XREF: Obj74_Index
0001A7B2 117C 0008 0016             		move.b	#8,$16(a0)
0001A7B8 117C 0008 0017             		move.b	#8,$17(a0)
0001A7BE 217C 0000 C62A 0004        		move.l	#Map_obj14,4(a0)
0001A7C6 317C 0345 0002             		move.w	#$345,2(a0)
0001A7CC 117C 0004 0001             		move.b	#4,1(a0)
0001A7D2 117C 0005 0018             		move.b	#5,$18(a0)
0001A7D8 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A7DE 117C 0008 0019             		move.b	#8,$19(a0)
0001A7E4 5428 0024                  		addq.b	#2,$24(a0)
0001A7E8 4A28 0028                  		tst.b	$28(a0)
0001A7EC 6600                       		bne.s	loc_1870A
0001A7EE 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A7F4 5428 0024                  		addq.b	#2,$24(a0)
0001A7F8 6000 0000                  		bra.w	loc_18886
0001A7FC                            ; ===========================================================================
0001A7FC                            
0001A7FC                            loc_1870A:
0001A7FC 117C 001E 0029             		move.b	#$1E,$29(a0)
0001A802 303C 00AE                  		move.w	#$AE,d0
0001A806 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play lava sound
0001A80C                            
0001A80C                            Obj74_Action:				; XREF: Obj74_Index
0001A80C 7000                       		moveq	#0,d0
0001A80E 1028 0025                  		move.b	$25(a0),d0
0001A812 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001A816 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001A81A 4EB9 0000 E916             		jsr	SpeedToPos
0001A820 43F9 0000 FD40             		lea	(Ani_obj14).l,a1
0001A826 4EB9 0000 B990             		jsr	AnimateSprite
0001A82C 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001A832 6200                       		bhi.s	Obj74_Delete
0001A834 4E75                       		rts	
0001A836                            ; ===========================================================================
0001A836                            
0001A836                            Obj74_Delete:
0001A836 4EF9 0000 E980             		jmp	DeleteObject
0001A83C                            ; ===========================================================================
0001A83C 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001A83E 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001A840 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001A842 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001A844                            ; ===========================================================================
0001A844                            
0001A844                            Obj74_Drop:				; XREF: Obj74_Index2
0001A844 08E8 0001 0022             		bset	#1,$22(a0)
0001A84A 5328 0029                  		subq.b	#1,$29(a0)
0001A84E 6A00                       		bpl.s	locret_18780
0001A850 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A856 4228 0028                  		clr.b	$28(a0)
0001A85A 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A860 08A8 0001 0022             		bclr	#1,$22(a0)
0001A866 6100 C5C4                  		bsr.w	ObjHitFloor
0001A86A 4A41                       		tst.w	d1
0001A86C 6A00                       		bpl.s	locret_18780
0001A86E 5428 0025                  		addq.b	#2,$25(a0)
0001A872                            
0001A872                            locret_18780:
0001A872 4E75                       		rts	
0001A874                            ; ===========================================================================
0001A874                            
0001A874                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001A874 5568 000C                  		subq.w	#2,$C(a0)
0001A878 08E8 0007 0002             		bset	#7,2(a0)
0001A87E 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001A884 4268 0012                  		clr.w	$12(a0)
0001A888 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A88E 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A894 117C 0003 0029             		move.b	#3,$29(a0)
0001A89A 4EB9 0000 F09C             		jsr	SingleObjLoad2
0001A8A0 6600                       		bne.s	loc_187CA
0001A8A2 47D1                       		lea	(a1),a3
0001A8A4 45D0                       		lea	(a0),a2
0001A8A6 7003                       		moveq	#3,d0
0001A8A8                            
0001A8A8                            Obj74_Loop:
0001A8A8 26DA                       		move.l	(a2)+,(a3)+
0001A8AA 26DA                       		move.l	(a2)+,(a3)+
0001A8AC 26DA                       		move.l	(a2)+,(a3)+
0001A8AE 26DA                       		move.l	(a2)+,(a3)+
0001A8B0 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001A8B4                            
0001A8B4 4469 0010                  		neg.w	$10(a1)
0001A8B8 5429 0025                  		addq.b	#2,$25(a1)
0001A8BC                            
0001A8BC                            loc_187CA:
0001A8BC 5428 0025                  		addq.b	#2,$25(a0)
0001A8C0 4E75                       		rts	
0001A8C2                            
0001A8C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A8C2                            
0001A8C2                            
0001A8C2                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001A8C2 4EB9 0000 F09C             		jsr	SingleObjLoad2
0001A8C8 6600                       		bne.s	locret_187EE
0001A8CA 3368 0008 0008             		move.w	8(a0),8(a1)
0001A8D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A8D6 12BC 0074                  		move.b	#$74,(a1)
0001A8DA 337C 0067 0028             		move.w	#$67,$28(a1)
0001A8E0                            
0001A8E0                            locret_187EE:
0001A8E0 4E75                       		rts	
0001A8E2                            ; End of function Obj74_Duplicate2
0001A8E2                            
0001A8E2                            ; ===========================================================================
0001A8E2                            
0001A8E2                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001A8E2 6100 C548                  		bsr.w	ObjHitFloor
0001A8E6 4A41                       		tst.w	d1
0001A8E8 6A00                       		bpl.s	loc_18826
0001A8EA 3028 0008                  		move.w	8(a0),d0
0001A8EE 0C40 1940                  		cmpi.w	#$1940,d0
0001A8F2 6E00                       		bgt.s	loc_1882C
0001A8F4 3228 0030                  		move.w	$30(a0),d1
0001A8F8 B240                       		cmp.w	d0,d1
0001A8FA 6700                       		beq.s	loc_1881E
0001A8FC 0240 0010                  		andi.w	#$10,d0
0001A900 0241 0010                  		andi.w	#$10,d1
0001A904 B240                       		cmp.w	d0,d1
0001A906 6700                       		beq.s	loc_1881E
0001A908 61B8                       		bsr.s	Obj74_Duplicate2
0001A90A 3168 0008 0032             		move.w	8(a0),$32(a0)
0001A910                            
0001A910                            loc_1881E:
0001A910 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A916 4E75                       		rts	
0001A918                            ; ===========================================================================
0001A918                            
0001A918                            loc_18826:
0001A918 5428 0025                  		addq.b	#2,$25(a0)
0001A91C 4E75                       		rts	
0001A91E                            ; ===========================================================================
0001A91E                            
0001A91E                            loc_1882C:
0001A91E 5428 0024                  		addq.b	#2,$24(a0)
0001A922 4E75                       		rts	
0001A924                            ; ===========================================================================
0001A924                            
0001A924                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001A924 08A8 0001 0022             		bclr	#1,$22(a0)
0001A92A 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001A930 3028 0008                  		move.w	8(a0),d0
0001A934 9068 0032                  		sub.w	$32(a0),d0
0001A938 6A00                       		bpl.s	loc_1884A
0001A93A 4440                       		neg.w	d0
0001A93C                            
0001A93C                            loc_1884A:
0001A93C 0C40 0012                  		cmpi.w	#$12,d0
0001A940 6600                       		bne.s	loc_18856
0001A942 08A8 0007 0002             		bclr	#7,2(a0)
0001A948                            
0001A948                            loc_18856:
0001A948 6100 C4E2                  		bsr.w	ObjHitFloor
0001A94C 4A41                       		tst.w	d1
0001A94E 6A00                       		bpl.s	locret_1887E
0001A950 5328 0029                  		subq.b	#1,$29(a0)
0001A954 6700                       		beq.s	Obj74_Delete2
0001A956 4268 0012                  		clr.w	$12(a0)
0001A95A 3168 0032 0008             		move.w	$32(a0),8(a0)
0001A960 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A966 08E8 0007 0002             		bset	#7,2(a0)
0001A96C 5528 0025                  		subq.b	#2,$25(a0)
0001A970                            
0001A970                            locret_1887E:
0001A970 4E75                       		rts	
0001A972                            ; ===========================================================================
0001A972                            
0001A972                            Obj74_Delete2:
0001A972 4EF9 0000 E980             		jmp	DeleteObject
0001A978                            ; ===========================================================================
0001A978                            
0001A978                            loc_18886:				; XREF: Obj74_Index
0001A978 08E8 0007 0002             		bset	#7,2(a0)
0001A97E 5328 0029                  		subq.b	#1,$29(a0)
0001A982 6600                       		bne.s	Obj74_Animate
0001A984 117C 0001 001C             		move.b	#1,$1C(a0)
0001A98A 5968 000C                  		subq.w	#4,$C(a0)
0001A98E 4228 0020                  		clr.b	$20(a0)
0001A992                            
0001A992                            Obj74_Animate:
0001A992 43F9 0000 FD40             		lea	(Ani_obj14).l,a1
0001A998 4EF9 0000 B990             		jmp	AnimateSprite
0001A99E                            ; ===========================================================================
0001A99E                            
0001A99E                            Obj74_Delete3:				; XREF: Obj74_Index
0001A99E 4EF9 0000 E980             		jmp	DeleteObject
0001A9A4                            ; ===========================================================================
0001A9A4                            
0001A9A4                            Obj7A_Delete:
0001A9A4 4EF9 0000 E980             		jmp	DeleteObject
0001A9AA                            ; ===========================================================================
0001A9AA                            ; ---------------------------------------------------------------------------
0001A9AA                            ; Object 7A - Eggman (SLZ)
0001A9AA                            ; ---------------------------------------------------------------------------
0001A9AA                            
0001A9AA                            Obj7A:					; XREF: Obj_Index
0001A9AA 7000                       		moveq	#0,d0
0001A9AC 1028 0024                  		move.b	$24(a0),d0
0001A9B0 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001A9B4 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001A9B8                            ; ===========================================================================
0001A9B8 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001A9BA 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001A9BC 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001A9BE 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001A9C0 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001A9C2                            
0001A9C2 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A9C5 0401 04                    		dc.b 4,	1, 4
0001A9C8 0607 04                    		dc.b 6,	7, 4
0001A9CB 0800 03                    		dc.b 8,	0, 3
0001A9CE                            ; ===========================================================================
0001A9CE                            
0001A9CE                            Obj7A_Main:				; XREF: Obj7A_Index
0001A9CE 317C 2188 0008             		move.w	#$2188,8(a0)
0001A9D4 317C 0228 000C             		move.w	#$228,$C(a0)
0001A9DA 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A9E0 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A9E6 117C 000F 0020             		move.b	#$F,$20(a0)
0001A9EC 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A9F2 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001A9F6 2248                       		movea.l	a0,a1
0001A9F8 7203                       		moveq	#3,d1
0001A9FA 6000                       		bra.s	Obj7A_LoadBoss
0001A9FC                            ; ===========================================================================
0001A9FC                            
0001A9FC                            Obj7A_Loop:
0001A9FC 4EB9 0000 F09C             		jsr	SingleObjLoad2
0001AA02 6600                       		bne.s	loc_1895C
0001AA04 12BC 007A                  		move.b	#$7A,0(a1)
0001AA08 3368 0008 0008             		move.w	8(a0),8(a1)
0001AA0E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AA14                            
0001AA14                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001AA14 08A8 0000 0022             		bclr	#0,$22(a0)
0001AA1A 4229 0025                  		clr.b	$25(a1)
0001AA1E 135A 0024                  		move.b	(a2)+,$24(a1)
0001AA22 135A 001C                  		move.b	(a2)+,$1C(a1)
0001AA26 135A 0018                  		move.b	(a2)+,$18(a1)
0001AA2A 237C 0001 9D54 0004        		move.l	#Map_Eggman,4(a1)
0001AA32 337C 0400 0002             		move.w	#$400,2(a1)
0001AA38 137C 0004 0001             		move.b	#4,1(a1)
0001AA3E 137C 0020 0019             		move.b	#$20,$19(a1)
0001AA44 2348 0034                  		move.l	a0,$34(a1)
0001AA48 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001AA4C                            
0001AA4C                            loc_1895C:
0001AA4C 43F8 D040                  		lea	($FFFFD040).w,a1
0001AA50 45E8 002A                  		lea	$2A(a0),a2
0001AA54 705E                       		moveq	#$5E,d0
0001AA56 723E                       		moveq	#$3E,d1
0001AA58                            
0001AA58                            loc_18968:
0001AA58 B011                       		cmp.b	(a1),d0
0001AA5A 6600                       		bne.s	loc_18974
0001AA5C 4A29 0028                  		tst.b	$28(a1)
0001AA60 6700                       		beq.s	loc_18974
0001AA62 34C9                       		move.w	a1,(a2)+
0001AA64                            
0001AA64                            loc_18974:
0001AA64 D2FC 0040                  		adda.w	#$40,a1
0001AA68 51C9 FFEE                  		dbf	d1,loc_18968
0001AA6C                            
0001AA6C                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001AA6C 7000                       		moveq	#0,d0
0001AA6E 1028 0025                  		move.b	$25(a0),d0
0001AA72 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001AA76 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001AA7A 43F9 0001 9D04             		lea	(Ani_Eggman).l,a1
0001AA80 4EB9 0000 B990             		jsr	AnimateSprite
0001AA86 7003                       		moveq	#3,d0
0001AA88 C028 0022                  		and.b	$22(a0),d0
0001AA8C 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001AA92 8128 0001                  		or.b	d0,1(a0)
0001AA96 4EF9 0000 E930             		jmp	DisplaySprite
0001AA9C                            ; ===========================================================================
0001AA9C 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001AA9E 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001AAA0 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001AAA2 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001AAA4 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001AAA6 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001AAA8                            ; ===========================================================================
0001AAA8                            
0001AAA8                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001AAA8 317C FF00 0010             		move.w	#-$100,$10(a0)
0001AAAE 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001AAB4 6400                       		bcc.s	loc_189CA
0001AAB6 5428 0025                  		addq.b	#2,$25(a0)
0001AABA                            
0001AABA                            loc_189CA:
0001AABA 6100 EDDE                  		bsr.w	BossMove
0001AABE 1028 003F                  		move.b	$3F(a0),d0
0001AAC2 5428 003F                  		addq.b	#2,$3F(a0)
0001AAC6 4EB9 0000 29F6             		jsr	(CalcSine).l
0001AACC EC40                       		asr.w	#6,d0
0001AACE D068 0038                  		add.w	$38(a0),d0
0001AAD2 3140 000C                  		move.w	d0,$C(a0)
0001AAD6 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AADC 6000                       		bra.s	loc_189FE
0001AADE                            ; ===========================================================================
0001AADE                            
0001AADE                            loc_189EE:
0001AADE 6100 EDBA                  		bsr.w	BossMove
0001AAE2 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001AAE8 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AAEE                            
0001AAEE                            loc_189FE:
0001AAEE 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001AAF4 6400                       		bcc.s	locret_18A44
0001AAF6 4A28 0022                  		tst.b	$22(a0)
0001AAFA 6B00                       		bmi.s	loc_18A46
0001AAFC 4A28 0020                  		tst.b	$20(a0)
0001AB00 6600                       		bne.s	locret_18A44
0001AB02 4A28 003E                  		tst.b	$3E(a0)
0001AB06 6600                       		bne.s	loc_18A28
0001AB08 117C 0020 003E             		move.b	#$20,$3E(a0)
0001AB0E 303C 00AC                  		move.w	#$AC,d0
0001AB12 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AB18                            
0001AB18                            loc_18A28:
0001AB18 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001AB1C 7000                       		moveq	#0,d0
0001AB1E 4A51                       		tst.w	(a1)
0001AB20 6600                       		bne.s	loc_18A36
0001AB22 303C 0EEE                  		move.w	#$EEE,d0
0001AB26                            
0001AB26                            loc_18A36:
0001AB26 3280                       		move.w	d0,(a1)
0001AB28 5328 003E                  		subq.b	#1,$3E(a0)
0001AB2C 6600                       		bne.s	locret_18A44
0001AB2E 117C 000F 0020             		move.b	#$F,$20(a0)
0001AB34                            
0001AB34                            locret_18A44:
0001AB34 4E75                       		rts	
0001AB36                            ; ===========================================================================
0001AB36                            
0001AB36                            loc_18A46:
0001AB36 7064                       		moveq	#100,d0
0001AB38 6100 0000                  		bsr.w	AddPoints
0001AB3C 117C 0006 0025             		move.b	#6,$25(a0)
0001AB42 117C 0078 003C             		move.b	#$78,$3C(a0)
0001AB48 4268 0010                  		clr.w	$10(a0)
0001AB4C 4E75                       		rts	
0001AB4E                            ; ===========================================================================
0001AB4E                            
0001AB4E                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001AB4E 3028 0030                  		move.w	$30(a0),d0
0001AB52 317C 0200 0010             		move.w	#$200,$10(a0)
0001AB58 0828 0000 0022             		btst	#0,$22(a0)
0001AB5E 6600                       		bne.s	loc_18A7C
0001AB60 4468 0010                  		neg.w	$10(a0)
0001AB64 0C40 2008                  		cmpi.w	#$2008,d0
0001AB68 6E00                       		bgt.s	loc_18A88
0001AB6A 6000                       		bra.s	loc_18A82
0001AB6C                            ; ===========================================================================
0001AB6C                            
0001AB6C                            loc_18A7C:
0001AB6C 0C40 2138                  		cmpi.w	#$2138,d0
0001AB70 6D00                       		blt.s	loc_18A88
0001AB72                            
0001AB72                            loc_18A82:
0001AB72 0868 0000 0022             		bchg	#0,$22(a0)
0001AB78                            
0001AB78                            loc_18A88:
0001AB78 3028 0008                  		move.w	8(a0),d0
0001AB7C 72FF                       		moveq	#-1,d1
0001AB7E 7402                       		moveq	#2,d2
0001AB80 45E8 002A                  		lea	$2A(a0),a2
0001AB84 7828                       		moveq	#$28,d4
0001AB86 4A68 0010                  		tst.w	$10(a0)
0001AB8A 6A00                       		bpl.s	loc_18A9E
0001AB8C 4444                       		neg.w	d4
0001AB8E                            
0001AB8E                            loc_18A9E:
0001AB8E 321A                       		move.w	(a2)+,d1
0001AB90 2641                       		movea.l	d1,a3
0001AB92 082B 0003 0022             		btst	#3,$22(a3)
0001AB98 6600                       		bne.s	loc_18AB4
0001AB9A 362B 0008                  		move.w	8(a3),d3
0001AB9E D644                       		add.w	d4,d3
0001ABA0 9640                       		sub.w	d0,d3
0001ABA2 6700                       		beq.s	loc_18AC0
0001ABA4                            
0001ABA4                            loc_18AB4:
0001ABA4 51CA FFE8                  		dbf	d2,loc_18A9E
0001ABA8                            
0001ABA8 1142 0028                  		move.b	d2,$28(a0)
0001ABAC 6000 FF0C                  		bra.w	loc_189CA
0001ABB0                            ; ===========================================================================
0001ABB0                            
0001ABB0                            loc_18AC0:
0001ABB0 1142 0028                  		move.b	d2,$28(a0)
0001ABB4 5428 0025                  		addq.b	#2,$25(a0)
0001ABB8 117C 0028 003C             		move.b	#$28,$3C(a0)
0001ABBE 6000 FEFA                  		bra.w	loc_189CA
0001ABC2                            ; ===========================================================================
0001ABC2                            
0001ABC2                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001ABC2 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001ABC8 6600                       		bne.s	loc_18B36
0001ABCA 70FF                       		moveq	#-1,d0
0001ABCC 1028 0028                  		move.b	$28(a0),d0
0001ABD0 4880                       		ext.w	d0
0001ABD2 6B00                       		bmi.s	loc_18B40
0001ABD4 5540                       		subq.w	#2,d0
0001ABD6 4440                       		neg.w	d0
0001ABD8 D040                       		add.w	d0,d0
0001ABDA 43E8 002A                  		lea	$2A(a0),a1
0001ABDE 3031 0000                  		move.w	(a1,d0.w),d0
0001ABE2 2440                       		movea.l	d0,a2
0001ABE4 43F8 D040                  		lea	($FFFFD040).w,a1
0001ABE8 723E                       		moveq	#$3E,d1
0001ABEA                            
0001ABEA                            loc_18AFA:
0001ABEA B0A9 003C                  		cmp.l	$3C(a1),d0
0001ABEE 6700                       		beq.s	loc_18B40
0001ABF0 D2FC 0040                  		adda.w	#$40,a1
0001ABF4 51C9 FFF4                  		dbf	d1,loc_18AFA
0001ABF8                            
0001ABF8 2F08                       		move.l	a0,-(sp)
0001ABFA 41D2                       		lea	(a2),a0
0001ABFC 4EB9 0000 F09C             		jsr	SingleObjLoad2
0001AC02 205F                       		movea.l	(sp)+,a0
0001AC04 6600                       		bne.s	loc_18B40
0001AC06 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001AC0A 3368 0008 0008             		move.w	8(a0),8(a1)
0001AC10 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AC16 0669 0020 000C             		addi.w	#$20,$C(a1)
0001AC1C 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001AC22 234A 003C                  		move.l	a2,$3C(a1)
0001AC26                            
0001AC26                            loc_18B36:
0001AC26 5328 003C                  		subq.b	#1,$3C(a0)
0001AC2A 6700                       		beq.s	loc_18B40
0001AC2C 6000 FEC0                  		bra.w	loc_189FE
0001AC30                            ; ===========================================================================
0001AC30                            
0001AC30                            loc_18B40:
0001AC30 5528 0025                  		subq.b	#2,$25(a0)
0001AC34 6000 FE84                  		bra.w	loc_189CA
0001AC38                            ; ===========================================================================
0001AC38                            
0001AC38                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001AC38 5328 003C                  		subq.b	#1,$3C(a0)
0001AC3C 6B00                       		bmi.s	loc_18B52
0001AC3E 6000 EC0C                  		bra.w	BossDefeated
0001AC42                            ; ===========================================================================
0001AC42                            
0001AC42                            loc_18B52:
0001AC42 5428 0025                  		addq.b	#2,$25(a0)
0001AC46 4268 0012                  		clr.w	$12(a0)
0001AC4A 08E8 0000 0022             		bset	#0,$22(a0)
0001AC50 08A8 0007 0022             		bclr	#7,$22(a0)
0001AC56 4268 0010                  		clr.w	$10(a0)
0001AC5A 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001AC60 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001AC64 6600                       		bne.s	loc_18B7C
0001AC66 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001AC6C                            
0001AC6C                            loc_18B7C:
0001AC6C 6000 FE80                  		bra.w	loc_189FE
0001AC70                            ; ===========================================================================
0001AC70                            
0001AC70                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001AC70 5228 003C                  		addq.b	#1,$3C(a0)
0001AC74 6700                       		beq.s	loc_18B90
0001AC76 6A00                       		bpl.s	loc_18B96
0001AC78 0668 0018 0012             		addi.w	#$18,$12(a0)
0001AC7E 6000 0000                  		bra.w	loc_18BC2
0001AC82                            ; ===========================================================================
0001AC82                            
0001AC82                            loc_18B90:
0001AC82 4268 0012                  		clr.w	$12(a0)
0001AC86 6000 0000                  		bra.w	loc_18BC2
0001AC8A                            ; ===========================================================================
0001AC8A                            
0001AC8A                            loc_18B96:
0001AC8A 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001AC90 6500                       		bcs.s	loc_18BAE
0001AC92 6700                       		beq.s	loc_18BB4
0001AC94 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001AC9A 6500                       		bcs.s	loc_18BC2
0001AC9C 5428 0025                  		addq.b	#2,$25(a0)
0001ACA0 6000                       		bra.s	loc_18BC2
0001ACA2                            ; ===========================================================================
0001ACA2                            
0001ACA2                            loc_18BAE:
0001ACA2 5168 0012                  		subq.w	#8,$12(a0)
0001ACA6 6000                       		bra.s	loc_18BC2
0001ACA8                            ; ===========================================================================
0001ACA8                            
0001ACA8                            loc_18BB4:
0001ACA8 4268 0012                  		clr.w	$12(a0)
0001ACAC 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeBossDefeated			
0001AD02 303C 0084                  		move.w	#$84,d0
0001AD06 4EB9 0000 121A             		jsr	(PlaySound).l	; play SLZ music
0001AD0C                            
0001AD0C                            loc_18BC2:
0001AD0C 6000 FDD0                  		bra.w	loc_189EE
0001AD10                            ; ===========================================================================
0001AD10                            
0001AD10                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001AD10 317C 0400 0010             		move.w	#$400,$10(a0)
0001AD16 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AD1C 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001AD22 6400                       		bcc.s	loc_18BE0
0001AD24 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AD28 6000                       		bra.s	loc_18BE8
0001AD2A                            ; ===========================================================================
0001AD2A                            
0001AD2A                            loc_18BE0:
0001AD2A 4A28 0001                  		tst.b	1(a0)
0001AD2E 6A00 FC74                  		bpl.w	Obj7A_Delete
0001AD32                            
0001AD32                            loc_18BE8:
0001AD32 6100 EB66                  		bsr.w	BossMove
0001AD36 6000 FD82                  		bra.w	loc_189CA
0001AD3A                            ; ===========================================================================
0001AD3A                            
0001AD3A                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001AD3A 7000                       		moveq	#0,d0
0001AD3C 7201                       		moveq	#1,d1
0001AD3E 2268 0034                  		movea.l	$34(a0),a1
0001AD42 1029 0025                  		move.b	$25(a1),d0
0001AD46 0C00 0006                  		cmpi.b	#6,d0
0001AD4A 6B00                       		bmi.s	loc_18C06
0001AD4C 720A                       		moveq	#$A,d1
0001AD4E 6000                       		bra.s	loc_18C1A
0001AD50                            ; ===========================================================================
0001AD50                            
0001AD50                            loc_18C06:
0001AD50 4A29 0020                  		tst.b	$20(a1)
0001AD54 6600                       		bne.s	loc_18C10
0001AD56 7205                       		moveq	#5,d1
0001AD58 6000                       		bra.s	loc_18C1A
0001AD5A                            ; ===========================================================================
0001AD5A                            
0001AD5A                            loc_18C10:
0001AD5A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001AD60 6500                       		bcs.s	loc_18C1A
0001AD62 7204                       		moveq	#4,d1
0001AD64                            
0001AD64                            loc_18C1A:
0001AD64 1141 001C                  		move.b	d1,$1C(a0)
0001AD68 0C00 000A                  		cmpi.b	#$A,d0
0001AD6C 6600                       		bne.s	loc_18C32
0001AD6E 117C 0006 001C             		move.b	#6,$1C(a0)
0001AD74 4A28 0001                  		tst.b	1(a0)
0001AD78 6A00 FC2A                  		bpl.w	Obj7A_Delete
0001AD7C                            
0001AD7C                            loc_18C32:
0001AD7C 6000                       		bra.s	loc_18C6C
0001AD7E                            ; ===========================================================================
0001AD7E                            
0001AD7E                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001AD7E 117C 0008 001C             		move.b	#8,$1C(a0)
0001AD84 2268 0034                  		movea.l	$34(a0),a1
0001AD88 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AD8E 6600                       		bne.s	loc_18C56
0001AD90 4A28 0001                  		tst.b	1(a0)
0001AD94 6A00 FC0E                  		bpl.w	Obj7A_Delete
0001AD98 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AD9E 6000                       		bra.s	loc_18C6C
0001ADA0                            ; ===========================================================================
0001ADA0                            
0001ADA0                            loc_18C56:
0001ADA0 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001ADA6 6E00                       		bgt.s	loc_18C6C
0001ADA8 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001ADAE 6D00                       		blt.s	loc_18C6C
0001ADB0 117C 0007 001C             		move.b	#7,$1C(a0)
0001ADB6                            
0001ADB6                            loc_18C6C:
0001ADB6 43F9 0001 9D04             		lea	(Ani_Eggman).l,a1
0001ADBC 4EB9 0000 B990             		jsr	AnimateSprite
0001ADC2                            
0001ADC2                            loc_18C78:
0001ADC2 2268 0034                  		movea.l	$34(a0),a1
0001ADC6 3169 0008 0008             		move.w	8(a1),8(a0)
0001ADCC 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001ADD2 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001ADD8 7003                       		moveq	#3,d0
0001ADDA C028 0022                  		and.b	$22(a0),d0
0001ADDE 0228 00FC 0001             		andi.b	#-4,1(a0)
0001ADE4 8128 0001                  		or.b	d0,1(a0)
0001ADE8 4EF9 0000 E930             		jmp	DisplaySprite
0001ADEE                            ; ===========================================================================
0001ADEE                            
0001ADEE                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001ADEE 2268 0034                  		movea.l	$34(a0),a1
0001ADF2 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001ADF8 6600                       		bne.s	loc_18CB8
0001ADFA 4A28 0001                  		tst.b	1(a0)
0001ADFE 6A00 FBA4                  		bpl.w	Obj7A_Delete
0001AE02                            
0001AE02                            loc_18CB8:
0001AE02 217C 0001 9E1C 0004        		move.l	#Map_BossItems,4(a0)
0001AE0A 317C 246C 0002             		move.w	#$246C,2(a0)
0001AE10 117C 0003 001A             		move.b	#3,$1A(a0)
0001AE16 60AA                       		bra.s	loc_18C78
0001AE18                            ; ===========================================================================
0001AE18                            ; ---------------------------------------------------------------------------
0001AE18                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001AE18                            ; ---------------------------------------------------------------------------
0001AE18                            
0001AE18                            Obj7B:					; XREF: Obj_Index
0001AE18 7000                       		moveq	#0,d0
0001AE1A 1028 0024                  		move.b	$24(a0),d0
0001AE1E 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001AE22 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001AE26 3028 0030                  		move.w	$30(a0),d0
0001AE2A 0240 FF80                  		andi.w	#$FF80,d0
0001AE2E 3238 F700                  		move.w	($FFFFF700).w,d1
0001AE32 0441 0080                  		subi.w	#$80,d1
0001AE36 0241 FF80                  		andi.w	#$FF80,d1
0001AE3A 9041                       		sub.w	d1,d0
0001AE3C 6B00 FB66                  		bmi.w	Obj7A_Delete
0001AE40 0C40 0280                  		cmpi.w	#$280,d0
0001AE44 6300                       		bls.s	Obj7B_NoDel
0001AE46                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
0001AE46                            	;	beq.s	Obj7B_Delete		; if it's zero, don't remember object
0001AE46                            	;	movea.w	d0,a2	; load address into a2
0001AE46                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001AE46                            
0001AE46                            Obj7B_Delete:
0001AE46 4EF9 0000 E980             		jmp	DeleteObject	; and delete object
0001AE4C                            
0001AE4C                            Obj7B_NoDel:
0001AE4C 4EF9 0000 E930             		jmp	DisplaySprite
0001AE52                            ; ===========================================================================
0001AE52 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001AE54 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001AE56 0000                       		dc.w loc_18DC6-Obj7B_Index
0001AE58 0000                       		dc.w loc_18EAA-Obj7B_Index
0001AE5A 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001AE5C 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001AE5E                            ; ===========================================================================
0001AE5E                            
0001AE5E                            Obj7B_Main:				; XREF: Obj7B_Index
0001AE5E 217C 0001 332C 0004        		move.l	#Map_obj5Ea,4(a0)
0001AE66 317C 0518 0002             		move.w	#$518,2(a0)
0001AE6C 117C 0001 001A             		move.b	#1,$1A(a0)
0001AE72 0028 0004 0001             		ori.b	#4,1(a0)
0001AE78 117C 0004 0018             		move.b	#4,$18(a0)
0001AE7E 117C 008B 0020             		move.b	#$8B,$20(a0)
0001AE84 117C 000C 0019             		move.b	#$C,$19(a0)
0001AE8A 2268 003C                  		movea.l	$3C(a0),a1
0001AE8E 3169 0008 0030             		move.w	8(a1),$30(a0)
0001AE94 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001AE9A 08E8 0000 0022             		bset	#0,$22(a0)
0001AEA0 3028 0008                  		move.w	8(a0),d0
0001AEA4 B069 0008                  		cmp.w	8(a1),d0
0001AEA8 6E00                       		bgt.s	loc_18D68
0001AEAA 08A8 0000 0022             		bclr	#0,$22(a0)
0001AEB0 117C 0002 003A             		move.b	#2,$3A(a0)
0001AEB6                            
0001AEB6                            loc_18D68:
0001AEB6 5428 0024                  		addq.b	#2,$24(a0)
0001AEBA                            
0001AEBA                            Obj7B_Fall:				; XREF: Obj7B_Index
0001AEBA 4EB9 0000 E8F6             		jsr	ObjectFall
0001AEC0 2268 003C                  		movea.l	$3C(a0),a1
0001AEC4 45F9 0000 0000             		lea	(word_19018).l,a2
0001AECA 7000                       		moveq	#0,d0
0001AECC 1029 001A                  		move.b	$1A(a1),d0
0001AED0 3228 0008                  		move.w	8(a0),d1
0001AED4 9268 0030                  		sub.w	$30(a0),d1
0001AED8 6400                       		bcc.s	loc_18D8E
0001AEDA 5440                       		addq.w	#2,d0
0001AEDC                            
0001AEDC                            loc_18D8E:
0001AEDC D040                       		add.w	d0,d0
0001AEDE 3228 0034                  		move.w	$34(a0),d1
0001AEE2 D272 0000                  		add.w	(a2,d0.w),d1
0001AEE6 B268 000C                  		cmp.w	$C(a0),d1
0001AEEA 6E00                       		bgt.s	locret_18DC4
0001AEEC 2268 003C                  		movea.l	$3C(a0),a1
0001AEF0 7202                       		moveq	#2,d1
0001AEF2 0828 0000 0022             		btst	#0,$22(a0)
0001AEF8 6700                       		beq.s	loc_18DAE
0001AEFA 7200                       		moveq	#0,d1
0001AEFC                            
0001AEFC                            loc_18DAE:
0001AEFC 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001AF02 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001AF08 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001AF0E 6000 0000                  		bra.w	loc_18FA2
0001AF12                            ; ===========================================================================
0001AF12                            
0001AF12                            locret_18DC4:
0001AF12 4E75                       		rts	
0001AF14                            ; ===========================================================================
0001AF14                            
0001AF14                            loc_18DC6:				; XREF: Obj7B_Index
0001AF14 2268 003C                  		movea.l	$3C(a0),a1
0001AF18 7000                       		moveq	#0,d0
0001AF1A 1028 003A                  		move.b	$3A(a0),d0
0001AF1E 9029 003A                  		sub.b	$3A(a1),d0
0001AF22 6700                       		beq.s	loc_18E2A
0001AF24 6400                       		bcc.s	loc_18DDA
0001AF26 4400                       		neg.b	d0
0001AF28                            
0001AF28                            loc_18DDA:
0001AF28 323C F7E8                  		move.w	#-$818,d1
0001AF2C 343C FEEC                  		move.w	#-$114,d2
0001AF30 0C00 0001                  		cmpi.b	#1,d0
0001AF34 6700                       		beq.s	loc_18E00
0001AF36 323C F6A0                  		move.w	#-$960,d1
0001AF3A 343C FF0C                  		move.w	#-$F4,d2
0001AF3E 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001AF44 6D00                       		blt.s	loc_18E00
0001AF46 323C F5E0                  		move.w	#-$A20,d1
0001AF4A 343C FF80                  		move.w	#-$80,d2
0001AF4E                            
0001AF4E                            loc_18E00:
0001AF4E 3141 0012                  		move.w	d1,$12(a0)
0001AF52 3142 0010                  		move.w	d2,$10(a0)
0001AF56 3028 0008                  		move.w	8(a0),d0
0001AF5A 9068 0030                  		sub.w	$30(a0),d0
0001AF5E 6400                       		bcc.s	loc_18E16
0001AF60 4468 0010                  		neg.w	$10(a0)
0001AF64                            
0001AF64                            loc_18E16:
0001AF64 117C 0001 001A             		move.b	#1,$1A(a0)
0001AF6A 317C 0020 0028             		move.w	#$20,$28(a0)
0001AF70 5428 0024                  		addq.b	#2,$24(a0)
0001AF74 6000 0000                  		bra.w	loc_18EAA
0001AF78                            ; ===========================================================================
0001AF78                            
0001AF78                            loc_18E2A:				; XREF: loc_18DC6
0001AF78 45F9 0000 0000             		lea	(word_19018).l,a2
0001AF7E 7000                       		moveq	#0,d0
0001AF80 1029 001A                  		move.b	$1A(a1),d0
0001AF84 343C 0028                  		move.w	#$28,d2
0001AF88 3228 0008                  		move.w	8(a0),d1
0001AF8C 9268 0030                  		sub.w	$30(a0),d1
0001AF90 6400                       		bcc.s	loc_18E48
0001AF92 4442                       		neg.w	d2
0001AF94 5440                       		addq.w	#2,d0
0001AF96                            
0001AF96                            loc_18E48:
0001AF96 D040                       		add.w	d0,d0
0001AF98 3228 0034                  		move.w	$34(a0),d1
0001AF9C D272 0000                  		add.w	(a2,d0.w),d1
0001AFA0 3141 000C                  		move.w	d1,$C(a0)
0001AFA4 D468 0030                  		add.w	$30(a0),d2
0001AFA8 3142 0008                  		move.w	d2,8(a0)
0001AFAC 4268 000E                  		clr.w	$E(a0)
0001AFB0 4268 000A                  		clr.w	$A(a0)
0001AFB4 5368 0028                  		subq.w	#1,$28(a0)
0001AFB8 6600                       		bne.s	loc_18E7A
0001AFBA 317C 0020 0028             		move.w	#$20,$28(a0)
0001AFC0 117C 0008 0024             		move.b	#8,$24(a0)
0001AFC6 4E75                       		rts	
0001AFC8                            ; ===========================================================================
0001AFC8                            
0001AFC8                            loc_18E7A:
0001AFC8 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001AFCE 6600                       		bne.s	loc_18E88
0001AFD0 117C 0005 001F             		move.b	#5,$1F(a0)
0001AFD6                            
0001AFD6                            loc_18E88:
0001AFD6 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001AFDC 6600                       		bne.s	loc_18E96
0001AFDE 117C 0002 001F             		move.b	#2,$1F(a0)
0001AFE4                            
0001AFE4                            loc_18E96:
0001AFE4 5328 001E                  		subq.b	#1,$1E(a0)
0001AFE8 6E00                       		bgt.s	locret_18EA8
0001AFEA 0868 0000 001A             		bchg	#0,$1A(a0)
0001AFF0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001AFF6                            
0001AFF6                            locret_18EA8:
0001AFF6 4E75                       		rts	
0001AFF8                            ; ===========================================================================
0001AFF8                            
0001AFF8                            loc_18EAA:				; XREF: Obj7B_Index
0001AFF8 43F8 D040                  		lea	($FFFFD040).w,a1
0001AFFC 707A                       		moveq	#$7A,d0
0001AFFE 7240                       		moveq	#$40,d1
0001B000 743E                       		moveq	#$3E,d2
0001B002                            
0001B002                            loc_18EB4:
0001B002 B011                       		cmp.b	(a1),d0
0001B004 6700                       		beq.s	loc_18EC0
0001B006 D2C1                       		adda.w	d1,a1
0001B008 51CA FFF8                  		dbf	d2,loc_18EB4
0001B00C                            
0001B00C 6000                       		bra.s	loc_18F38
0001B00E                            ; ===========================================================================
0001B00E                            
0001B00E                            loc_18EC0:
0001B00E 3029 0008                  		move.w	8(a1),d0
0001B012 3229 000C                  		move.w	$C(a1),d1
0001B016 3428 0008                  		move.w	8(a0),d2
0001B01A 3628 000C                  		move.w	$C(a0),d3
0001B01E 45FA 0000                  		lea	byte_19022(pc),a2
0001B022 47FA 0000                  		lea	byte_19026(pc),a3
0001B026 181A                       		move.b	(a2)+,d4
0001B028 4884                       		ext.w	d4
0001B02A D044                       		add.w	d4,d0
0001B02C 181B                       		move.b	(a3)+,d4
0001B02E 4884                       		ext.w	d4
0001B030 D444                       		add.w	d4,d2
0001B032 B440                       		cmp.w	d0,d2
0001B034 6500                       		bcs.s	loc_18F38
0001B036 181A                       		move.b	(a2)+,d4
0001B038 4884                       		ext.w	d4
0001B03A D044                       		add.w	d4,d0
0001B03C 181B                       		move.b	(a3)+,d4
0001B03E 4884                       		ext.w	d4
0001B040 D444                       		add.w	d4,d2
0001B042 B042                       		cmp.w	d2,d0
0001B044 6500                       		bcs.s	loc_18F38
0001B046 181A                       		move.b	(a2)+,d4
0001B048 4884                       		ext.w	d4
0001B04A D244                       		add.w	d4,d1
0001B04C 181B                       		move.b	(a3)+,d4
0001B04E 4884                       		ext.w	d4
0001B050 D644                       		add.w	d4,d3
0001B052 B641                       		cmp.w	d1,d3
0001B054 6500                       		bcs.s	loc_18F38
0001B056 181A                       		move.b	(a2)+,d4
0001B058 4884                       		ext.w	d4
0001B05A D244                       		add.w	d4,d1
0001B05C 181B                       		move.b	(a3)+,d4
0001B05E 4884                       		ext.w	d4
0001B060 D644                       		add.w	d4,d3
0001B062 B243                       		cmp.w	d3,d1
0001B064 6500                       		bcs.s	loc_18F38
0001B066 5428 0024                  		addq.b	#2,$24(a0)
0001B06A 4268 0028                  		clr.w	$28(a0)
0001B06E 4229 0020                  		clr.b	$20(a1)
0001B072 5329 0021                  		subq.b	#1,$21(a1)
0001B076 6600                       		bne.s	loc_18F38
0001B078 08E9 0007 0022             		bset	#7,$22(a1)
0001B07E 4268 0010                  		clr.w	$10(a0)
0001B082 4268 0012                  		clr.w	$12(a0)
0001B086                            
0001B086                            loc_18F38:
0001B086 4A68 0012                  		tst.w	$12(a0)
0001B08A 6A00                       		bpl.s	loc_18F5C
0001B08C 4EB9 0000 E8F6             		jsr	ObjectFall
0001B092 3028 0034                  		move.w	$34(a0),d0
0001B096 0440 002F                  		subi.w	#$2F,d0
0001B09A B068 000C                  		cmp.w	$C(a0),d0
0001B09E 6E00                       		bgt.s	loc_18F58
0001B0A0 4EB9 0000 E8F6             		jsr	ObjectFall
0001B0A6                            
0001B0A6                            loc_18F58:
0001B0A6 6000 FF20                  		bra.w	loc_18E7A
0001B0AA                            ; ===========================================================================
0001B0AA                            
0001B0AA                            loc_18F5C:
0001B0AA 4EB9 0000 E8F6             		jsr	ObjectFall
0001B0B0 2268 003C                  		movea.l	$3C(a0),a1
0001B0B4 45F9 0000 0000             		lea	(word_19018).l,a2
0001B0BA 7000                       		moveq	#0,d0
0001B0BC 1029 001A                  		move.b	$1A(a1),d0
0001B0C0 3228 0008                  		move.w	8(a0),d1
0001B0C4 9268 0030                  		sub.w	$30(a0),d1
0001B0C8 6400                       		bcc.s	loc_18F7E
0001B0CA 5440                       		addq.w	#2,d0
0001B0CC                            
0001B0CC                            loc_18F7E:
0001B0CC D040                       		add.w	d0,d0
0001B0CE 3228 0034                  		move.w	$34(a0),d1
0001B0D2 D272 0000                  		add.w	(a2,d0.w),d1
0001B0D6 B268 000C                  		cmp.w	$C(a0),d1
0001B0DA 6ECA                       		bgt.s	loc_18F58
0001B0DC 2268 003C                  		movea.l	$3C(a0),a1
0001B0E0 7202                       		moveq	#2,d1
0001B0E2 4A68 0010                  		tst.w	$10(a0)
0001B0E6 6B00                       		bmi.s	loc_18F9C
0001B0E8 7200                       		moveq	#0,d1
0001B0EA                            
0001B0EA                            loc_18F9C:
0001B0EA 317C 0000 0028             		move.w	#0,$28(a0)
0001B0F0                            
0001B0F0                            loc_18FA2:
0001B0F0 1341 003A                  		move.b	d1,$3A(a1)
0001B0F4 1141 003A                  		move.b	d1,$3A(a0)
0001B0F8 B229 001A                  		cmp.b	$1A(a1),d1
0001B0FC 6700                       		beq.s	loc_19008
0001B0FE 08A9 0003 0022             		bclr	#3,$22(a1)
0001B104 6700                       		beq.s	loc_19008
0001B106 4229 0025                  		clr.b	$25(a1)
0001B10A 137C 0002 0024             		move.b	#2,$24(a1)
0001B110 45F8 D000                  		lea	($FFFFD000).w,a2
0001B114 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001B11A 446A 0012                  		neg.w	$12(a2)
0001B11E 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001B124 6600                       		bne.s	loc_18FDC
0001B126 E0EA 0012                  		asr	$12(a2)
0001B12A                            
0001B12A                            loc_18FDC:
0001B12A 08EA 0001 0022             		bset	#1,$22(a2)
0001B130 08AA 0003 0022             		bclr	#3,$22(a2)
0001B136 422A 003C                  		clr.b	$3C(a2)
0001B13A 2F08                       		move.l	a0,-(sp)
0001B13C 41D2                       		lea	(a2),a0
0001B13E 4EBA 9C94                  		jsr	Obj01_ChkRoll
0001B142 205F                       		movea.l	(sp)+,a0
0001B144 157C 0002 0024             		move.b	#2,$24(a2)
0001B14A 303C 00CC                  		move.w	#$CC,d0
0001B14E 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001B154                            
0001B154                            loc_19008:
0001B154 4268 0010                  		clr.w	$10(a0)
0001B158 4268 0012                  		clr.w	$12(a0)
0001B15C 5428 0024                  		addq.b	#2,$24(a0)
0001B160 6000 FE66                  		bra.w	loc_18E7A
0001B164                            ; ===========================================================================
0001B164 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001B16E                            		even
0001B16E E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001B172                            		even
0001B172 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001B176                            		even
0001B176                            ; ===========================================================================
0001B176                            
0001B176                            Obj7B_Explode:				; XREF: Obj7B_Index
0001B176 10BC 003F                  		move.b	#$3F,(a0)
0001B17A 4228 0024                  		clr.b	$24(a0)
0001B17E 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001B184 6700                       		beq.s	Obj7B_MakeFrag
0001B186 4E75                       		rts	
0001B188                            ; ===========================================================================
0001B188                            
0001B188                            Obj7B_MakeFrag:
0001B188 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001B18E 7203                       		moveq	#3,d1
0001B190 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001B194                            
0001B194                            Obj7B_Loop:
0001B194 4EB9 0000 F086             		jsr	SingleObjLoad
0001B19A 6600                       		bne.s	loc_1909A
0001B19C 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001B1A0 137C 000A 0024             		move.b	#$A,$24(a1)
0001B1A6 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001B1AE 137C 0003 0018             		move.b	#3,$18(a1)
0001B1B4 337C 0518 0002             		move.w	#$518,2(a1)
0001B1BA 3368 0008 0008             		move.w	8(a0),8(a1)
0001B1C0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B1C6 335A 0010                  		move.w	(a2)+,$10(a1)
0001B1CA 335A 0012                  		move.w	(a2)+,$12(a1)
0001B1CE 137C 0098 0020             		move.b	#$98,$20(a1)
0001B1D4 0029 0004 0001             		ori.b	#4,1(a1)
0001B1DA 08E9 0007 0001             		bset	#7,1(a1)
0001B1E0 137C 000C 0019             		move.b	#$C,$19(a1)
0001B1E6                            
0001B1E6                            loc_1909A:
0001B1E6 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001B1EA                            
0001B1EA 4E75                       		rts	
0001B1EC                            ; ===========================================================================
0001B1EC FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001B1F0 FF60 FDC0                  		dc.w $FF60, $FDC0
0001B1F4 0100 FCC0                  		dc.w $100, $FCC0
0001B1F8 00A0 FDC0                  		dc.w $A0, $FDC0
0001B1FC                            ; ===========================================================================
0001B1FC                            
0001B1FC                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001B1FC 4EB9 0000 E916             		jsr	SpeedToPos
0001B202 3168 0008 0030             		move.w	8(a0),$30(a0)
0001B208 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001B20E 0668 0018 0012             		addi.w	#$18,$12(a0)
0001B214 7004                       		moveq	#4,d0
0001B216 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001B21A E448                       		lsr.w	#2,d0
0001B21C 1140 001A                  		move.b	d0,$1A(a0)
0001B220 4A28 0001                  		tst.b	1(a0)
0001B224 6A00 F77E                  		bpl.w	Obj7A_Delete
0001B228 4E75                       		rts	
0001B22A                            ; ===========================================================================
0001B22A                            ; ---------------------------------------------------------------------------
0001B22A                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001B22A                            ; ---------------------------------------------------------------------------
0001B22A                            Map_obj7B:
0001B22A                            	include "_maps\obj7B.asm"
0001B22A                            ; ---------------------------------------------------------------------------
0001B22A                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001B22A                            ; ---------------------------------------------------------------------------
0001B22A 0000                       		dc.w byte_190E2-Map_obj7B
0001B22C 0000                       		dc.w byte_190E8-Map_obj7B
0001B22E 01                         byte_190E2:	dc.b 1
0001B22F FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001B234 01                         byte_190E8:	dc.b 1
0001B235 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001B23A                            		even
0001B23A                            		even
0001B23A                            
0001B23A                            ; ===========================================================================
0001B23A                            ; ---------------------------------------------------------------------------
0001B23A                            ; Object 75 - Eggman (SYZ)
0001B23A                            ; ---------------------------------------------------------------------------
0001B23A                            
0001B23A                            Obj75:					; XREF: Obj_Index
0001B23A 7000                       		moveq	#0,d0
0001B23C 1028 0024                  		move.b	$24(a0),d0
0001B240 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001B244 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001B248                            ; ===========================================================================
0001B248 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001B24A 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001B24C 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001B24E 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001B250 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001B252                            
0001B252 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001B255 0401 05                    		dc.b 4,	1, 5
0001B258 0607 05                    		dc.b 6,	7, 5
0001B25B 0800 05                    		dc.b 8,	0, 5
0001B25E                            ; ===========================================================================
0001B25E                            
0001B25E                            Obj75_Main:				; XREF: Obj75_Index
0001B25E 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001B264 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001B26A 3168 0008 0030             		move.w	8(a0),$30(a0)
0001B270 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B276 117C 000F 0020             		move.b	#$F,$20(a0)
0001B27C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001B282 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001B286 2248                       		movea.l	a0,a1
0001B288 7203                       		moveq	#3,d1
0001B28A 6000                       		bra.s	Obj75_LoadBoss
0001B28C                            ; ===========================================================================
0001B28C                            
0001B28C                            Obj75_Loop:
0001B28C 4EB9 0000 F09C             		jsr	SingleObjLoad2
0001B292 6600                       		bne.s	Obj75_ShipMain
0001B294 12BC 0075                  		move.b	#$75,(a1)
0001B298 3368 0008 0008             		move.w	8(a0),8(a1)
0001B29E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B2A4                            
0001B2A4                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001B2A4 08A8 0000 0022             		bclr	#0,$22(a0)
0001B2AA 4229 0025                  		clr.b	$25(a1)
0001B2AE 135A 0024                  		move.b	(a2)+,$24(a1)
0001B2B2 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B2B6 135A 0018                  		move.b	(a2)+,$18(a1)
0001B2BA 237C 0001 9D54 0004        		move.l	#Map_Eggman,4(a1)
0001B2C2 337C 0400 0002             		move.w	#$400,2(a1)
0001B2C8 137C 0004 0001             		move.b	#4,1(a1)
0001B2CE 137C 0020 0019             		move.b	#$20,$19(a1)
0001B2D4 2348 0034                  		move.l	a0,$34(a1)
0001B2D8 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001B2DC                            
0001B2DC                            Obj75_ShipMain:				; XREF: Obj75_Index
0001B2DC 7000                       		moveq	#0,d0
0001B2DE 1028 0025                  		move.b	$25(a0),d0
0001B2E2 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001B2E6 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001B2EA 43F9 0001 9D04             		lea	(Ani_Eggman).l,a1
0001B2F0 4EB9 0000 B990             		jsr	AnimateSprite
0001B2F6 7003                       		moveq	#3,d0
0001B2F8 C028 0022                  		and.b	$22(a0),d0
0001B2FC 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B302 8128 0001                  		or.b	d0,1(a0)
0001B306 4EF9 0000 E930             		jmp	DisplaySprite
0001B30C                            ; ===========================================================================
0001B30C 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001B310 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001B314 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001B318                            ; ===========================================================================
0001B318                            
0001B318                            loc_191CC:				; XREF: Obj75_ShipIndex
0001B318 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B31E 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001B324 6400                       		bcc.s	loc_191DE
0001B326 5428 0025                  		addq.b	#2,$25(a0)
0001B32A                            
0001B32A                            loc_191DE:
0001B32A 1028 003F                  		move.b	$3F(a0),d0
0001B32E 5428 003F                  		addq.b	#2,$3F(a0)
0001B332 4EB9 0000 29F6             		jsr	(CalcSine).l
0001B338 E440                       		asr.w	#2,d0
0001B33A 3140 0012                  		move.w	d0,$12(a0)
0001B33E                            
0001B33E                            loc_191F2:
0001B33E 6100 E55A                  		bsr.w	BossMove
0001B342 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001B348 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B34E                            
0001B34E                            loc_19202:
0001B34E 3028 0008                  		move.w	8(a0),d0
0001B352 0440 2C00                  		subi.w	#$2C00,d0
0001B356 EA48                       		lsr.w	#5,d0
0001B358 1140 0034                  		move.b	d0,$34(a0)
0001B35C 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001B362 6400                       		bcc.s	locret_19256
0001B364 4A28 0022                  		tst.b	$22(a0)
0001B368 6B00                       		bmi.s	loc_19258
0001B36A 4A28 0020                  		tst.b	$20(a0)
0001B36E 6600                       		bne.s	locret_19256
0001B370 4A28 003E                  		tst.b	$3E(a0)
0001B374 6600                       		bne.s	loc_1923A
0001B376 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B37C 303C 00AC                  		move.w	#$AC,d0
0001B380 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B386                            
0001B386                            loc_1923A:
0001B386 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001B38A 7000                       		moveq	#0,d0
0001B38C 4A51                       		tst.w	(a1)
0001B38E 6600                       		bne.s	loc_19248
0001B390 303C 0EEE                  		move.w	#$EEE,d0
0001B394                            
0001B394                            loc_19248:
0001B394 3280                       		move.w	d0,(a1)
0001B396 5328 003E                  		subq.b	#1,$3E(a0)
0001B39A 6600                       		bne.s	locret_19256
0001B39C 117C 000F 0020             		move.b	#$F,$20(a0)
0001B3A2                            
0001B3A2                            locret_19256:
0001B3A2 4E75                       		rts	
0001B3A4                            ; ===========================================================================
0001B3A4                            
0001B3A4                            loc_19258:				; XREF: loc_19202
0001B3A4 7064                       		moveq	#100,d0
0001B3A6 6100 0000                  		bsr.w	AddPoints
0001B3AA 117C 0006 0025             		move.b	#6,$25(a0)
0001B3B0 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B3B6 4268 0010                  		clr.w	$10(a0)
0001B3BA 4E75                       		rts	
0001B3BC                            ; ===========================================================================
0001B3BC                            
0001B3BC                            loc_19270:				; XREF: Obj75_ShipIndex
0001B3BC 3028 0030                  		move.w	$30(a0),d0
0001B3C0 317C 0140 0010             		move.w	#$140,$10(a0)
0001B3C6 0828 0000 0022             		btst	#0,$22(a0)
0001B3CC 6600                       		bne.s	loc_1928E
0001B3CE 4468 0010                  		neg.w	$10(a0)
0001B3D2 0C40 2C08                  		cmpi.w	#$2C08,d0
0001B3D6 6E00                       		bgt.s	loc_1929E
0001B3D8 6000                       		bra.s	loc_19294
0001B3DA                            ; ===========================================================================
0001B3DA                            
0001B3DA                            loc_1928E:
0001B3DA 0C40 2D38                  		cmpi.w	#$2D38,d0
0001B3DE 6D00                       		blt.s	loc_1929E
0001B3E0                            
0001B3E0                            loc_19294:
0001B3E0 0868 0000 0022             		bchg	#0,$22(a0)
0001B3E6 4228 003D                  		clr.b	$3D(a0)
0001B3EA                            
0001B3EA                            loc_1929E:
0001B3EA 0440 2C10                  		subi.w	#$2C10,d0
0001B3EE 0240 001F                  		andi.w	#$1F,d0
0001B3F2 0440 001F                  		subi.w	#$1F,d0
0001B3F6 6A00                       		bpl.s	loc_192AE
0001B3F8 4440                       		neg.w	d0
0001B3FA                            
0001B3FA                            loc_192AE:
0001B3FA 5340                       		subq.w	#1,d0
0001B3FC 6E00                       		bgt.s	loc_192E8
0001B3FE 4A28 003D                  		tst.b	$3D(a0)
0001B402 6600                       		bne.s	loc_192E8
0001B404 3238 D008                  		move.w	($FFFFD008).w,d1
0001B408 0441 2C00                  		subi.w	#$2C00,d1
0001B40C EA41                       		asr.w	#5,d1
0001B40E B228 0034                  		cmp.b	$34(a0),d1
0001B412 6600                       		bne.s	loc_192E8
0001B414 7000                       		moveq	#0,d0
0001B416 1028 0034                  		move.b	$34(a0),d0
0001B41A EB40                       		asl.w	#5,d0
0001B41C 0640 2C10                  		addi.w	#$2C10,d0
0001B420 3140 0030                  		move.w	d0,$30(a0)
0001B424 6100 0000                  		bsr.w	Obj75_FindBlocks
0001B428 5428 0025                  		addq.b	#2,$25(a0)
0001B42C 4268 0028                  		clr.w	$28(a0)
0001B430 4268 0010                  		clr.w	$10(a0)
0001B434                            
0001B434                            loc_192E8:
0001B434 6000 FEF4                  		bra.w	loc_191DE
0001B438                            ; ===========================================================================
0001B438                            
0001B438                            loc_192EC:				; XREF: Obj75_ShipIndex
0001B438 7000                       		moveq	#0,d0
0001B43A 1028 0028                  		move.b	$28(a0),d0
0001B43E 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001B442 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001B446                            ; ===========================================================================
0001B446 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001B448 0000                       		dc.w loc_19348-off_192FA
0001B44A 0000                       		dc.w loc_1938E-off_192FA
0001B44C 0000                       		dc.w loc_193D0-off_192FA
0001B44E                            ; ===========================================================================
0001B44E                            
0001B44E                            loc_19302:				; XREF: off_192FA
0001B44E 317C 0180 0012             		move.w	#$180,$12(a0)
0001B454 3028 0038                  		move.w	$38(a0),d0
0001B458 0C40 0556                  		cmpi.w	#$556,d0
0001B45C 6500                       		bcs.s	loc_19344
0001B45E 317C 0556 0038             		move.w	#$556,$38(a0)
0001B464 4268 003C                  		clr.w	$3C(a0)
0001B468 70FF                       		moveq	#-1,d0
0001B46A 3028 0036                  		move.w	$36(a0),d0
0001B46E 6700                       		beq.s	loc_1933C
0001B470 2240                       		movea.l	d0,a1
0001B472 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B478 117C 00FF 0029             		move.b	#-1,$29(a0)
0001B47E 2348 0034                  		move.l	a0,$34(a1)
0001B482 317C 0032 003C             		move.w	#$32,$3C(a0)
0001B488                            
0001B488                            loc_1933C:
0001B488 4268 0012                  		clr.w	$12(a0)
0001B48C 5428 0028                  		addq.b	#2,$28(a0)
0001B490                            
0001B490                            loc_19344:
0001B490 6000 FEAC                  		bra.w	loc_191F2
0001B494                            ; ===========================================================================
0001B494                            
0001B494                            loc_19348:				; XREF: off_192FA
0001B494 5368 003C                  		subq.w	#1,$3C(a0)
0001B498 6A00                       		bpl.s	loc_19366
0001B49A 5428 0028                  		addq.b	#2,$28(a0)
0001B49E 317C F800 0012             		move.w	#-$800,$12(a0)
0001B4A4 4A68 0036                  		tst.w	$36(a0)
0001B4A8 6600                       		bne.s	loc_19362
0001B4AA E0E8 0012                  		asr	$12(a0)
0001B4AE                            
0001B4AE                            loc_19362:
0001B4AE 7000                       		moveq	#0,d0
0001B4B0 6000                       		bra.s	loc_1937C
0001B4B2                            ; ===========================================================================
0001B4B2                            
0001B4B2                            loc_19366:
0001B4B2 7000                       		moveq	#0,d0
0001B4B4 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001B4BA 6E00                       		bgt.s	loc_1937C
0001B4BC 7002                       		moveq	#2,d0
0001B4BE 0828 0001 003D             		btst	#1,$3D(a0)
0001B4C4 6700                       		beq.s	loc_1937C
0001B4C6 4440                       		neg.w	d0
0001B4C8                            
0001B4C8                            loc_1937C:
0001B4C8 D068 0038                  		add.w	$38(a0),d0
0001B4CC 3140 000C                  		move.w	d0,$C(a0)
0001B4D0 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B4D6 6000 FE76                  		bra.w	loc_19202
0001B4DA                            ; ===========================================================================
0001B4DA                            
0001B4DA                            loc_1938E:				; XREF: off_192FA
0001B4DA 303C 04DA                  		move.w	#$4DA,d0
0001B4DE 4A68 0036                  		tst.w	$36(a0)
0001B4E2 6700                       		beq.s	loc_1939C
0001B4E4 0440 0018                  		subi.w	#$18,d0
0001B4E8                            
0001B4E8                            loc_1939C:
0001B4E8 B068 0038                  		cmp.w	$38(a0),d0
0001B4EC 6D00                       		blt.s	loc_193BE
0001B4EE 317C 0008 003C             		move.w	#8,$3C(a0)
0001B4F4 4A68 0036                  		tst.w	$36(a0)
0001B4F8 6700                       		beq.s	loc_193B4
0001B4FA 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001B500                            
0001B500                            loc_193B4:
0001B500 5428 0028                  		addq.b	#2,$28(a0)
0001B504 4268 0012                  		clr.w	$12(a0)
0001B508 6000                       		bra.s	loc_193CC
0001B50A                            ; ===========================================================================
0001B50A                            
0001B50A                            loc_193BE:
0001B50A 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001B510 6C00                       		bge.s	loc_193CC
0001B512 0668 000C 0012             		addi.w	#$C,$12(a0)
0001B518                            
0001B518                            loc_193CC:
0001B518 6000 FE24                  		bra.w	loc_191F2
0001B51C                            ; ===========================================================================
0001B51C                            
0001B51C                            loc_193D0:				; XREF: off_192FA
0001B51C 5368 003C                  		subq.w	#1,$3C(a0)
0001B520 6E00                       		bgt.s	loc_19406
0001B522 6B00                       		bmi.s	loc_193EE
0001B524 70FF                       		moveq	#-1,d0
0001B526 3028 0036                  		move.w	$36(a0),d0
0001B52A 6700                       		beq.s	loc_193E8
0001B52C 2240                       		movea.l	d0,a1
0001B52E 137C 000A 0029             		move.b	#$A,$29(a1)
0001B534                            
0001B534                            loc_193E8:
0001B534 4268 0036                  		clr.w	$36(a0)
0001B538 6000                       		bra.s	loc_19406
0001B53A                            ; ===========================================================================
0001B53A                            
0001B53A                            loc_193EE:
0001B53A 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001B540 6600                       		bne.s	loc_19406
0001B542 4228 0029                  		clr.b	$29(a0)
0001B546 5528 0025                  		subq.b	#2,$25(a0)
0001B54A 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001B550 6000                       		bra.s	loc_19446
0001B552                            ; ===========================================================================
0001B552                            
0001B552                            loc_19406:
0001B552 7001                       		moveq	#1,d0
0001B554 4A68 0036                  		tst.w	$36(a0)
0001B558 6700                       		beq.s	loc_19410
0001B55A 7002                       		moveq	#2,d0
0001B55C                            
0001B55C                            loc_19410:
0001B55C 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001B562 6700                       		beq.s	loc_19424
0001B564 6D00                       		blt.s	loc_1941C
0001B566 4440                       		neg.w	d0
0001B568                            
0001B568                            loc_1941C:
0001B568 4A68 0036                  		tst.w	$36(a0)
0001B56C D168 0038                  		add.w	d0,$38(a0)
0001B570                            
0001B570                            loc_19424:
0001B570 7000                       		moveq	#0,d0
0001B572 4A68 0036                  		tst.w	$36(a0)
0001B576 6700                       		beq.s	loc_19438
0001B578 7002                       		moveq	#2,d0
0001B57A 0828 0000 003D             		btst	#0,$3D(a0)
0001B580 6700                       		beq.s	loc_19438
0001B582 4440                       		neg.w	d0
0001B584                            
0001B584                            loc_19438:
0001B584 D068 0038                  		add.w	$38(a0),d0
0001B588 3140 000C                  		move.w	d0,$C(a0)
0001B58C 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B592                            
0001B592                            loc_19446:
0001B592 6000 FDBA                  		bra.w	loc_19202
0001B596                            
0001B596                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B596                            
0001B596                            
0001B596                            Obj75_FindBlocks:			; XREF: loc_192AE
0001B596 4268 0036                  		clr.w	$36(a0)
0001B59A 43F8 D040                  		lea	($FFFFD040).w,a1
0001B59E 703E                       		moveq	#$3E,d0
0001B5A0 7276                       		moveq	#$76,d1
0001B5A2 1428 0034                  		move.b	$34(a0),d2
0001B5A6                            
0001B5A6                            Obj75_FindLoop:
0001B5A6 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001B5A8 6600                       		bne.s	loc_1946A	; if not, branch
0001B5AA B429 0028                  		cmp.b	$28(a1),d2
0001B5AE 6600                       		bne.s	loc_1946A
0001B5B0 3149 0036                  		move.w	a1,$36(a0)
0001B5B4 6000                       		bra.s	locret_19472
0001B5B6                            ; ===========================================================================
0001B5B6                            
0001B5B6                            loc_1946A:
0001B5B6 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001B5BA 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001B5BE                            
0001B5BE                            locret_19472:
0001B5BE 4E75                       		rts	
0001B5C0                            ; End of function Obj75_FindBlocks
0001B5C0                            
0001B5C0                            ; ===========================================================================
0001B5C0                            
0001B5C0                            loc_19474:				; XREF: Obj75_ShipIndex
0001B5C0 5368 003C                  		subq.w	#1,$3C(a0)
0001B5C4 6B00                       		bmi.s	loc_1947E
0001B5C6 6000 E284                  		bra.w	BossDefeated
0001B5CA                            ; ===========================================================================
0001B5CA                            
0001B5CA                            loc_1947E:
0001B5CA 5428 0025                  		addq.b	#2,$25(a0)
0001B5CE 4268 0012                  		clr.w	$12(a0)
0001B5D2 08E8 0000 0022             		bset	#0,$22(a0)
0001B5D8 08A8 0007 0022             		bclr	#7,$22(a0)
0001B5DE 4268 0010                  		clr.w	$10(a0)
0001B5E2 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001B5E8 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001B5EC 6600                       		bne.s	loc_194A8
0001B5EE 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001B5F4                            
0001B5F4                            loc_194A8:
0001B5F4 6000 FD58                  		bra.w	loc_19202
0001B5F8                            ; ===========================================================================
0001B5F8                            
0001B5F8                            loc_194AC:				; XREF: Obj75_ShipIndex
0001B5F8 5268 003C                  		addq.w	#1,$3C(a0)
0001B5FC 6700                       		beq.s	loc_194BC
0001B5FE 6A00                       		bpl.s	loc_194C2
0001B600 0668 0018 0012             		addi.w	#$18,$12(a0)
0001B606 6000 0000                  		bra.w	loc_194EE
0001B60A                            ; ===========================================================================
0001B60A                            
0001B60A                            loc_194BC:
0001B60A 4268 0012                  		clr.w	$12(a0)
0001B60E 6000 0000                  		bra.w	loc_194EE
0001B612                            ; ===========================================================================
0001B612                            
0001B612                            loc_194C2:
0001B612 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001B618 6500                       		bcs.s	loc_194DA
0001B61A 6700                       		beq.s	loc_194E0
0001B61C 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001B622 6500                       		bcs.s	loc_194EE
0001B624 5428 0025                  		addq.b	#2,$25(a0)
0001B628 6000                       		bra.s	loc_194EE
0001B62A                            ; ===========================================================================
0001B62A                            
0001B62A                            loc_194DA:
0001B62A 5168 0012                  		subq.w	#8,$12(a0)
0001B62E 6000                       		bra.s	loc_194EE
0001B630                            ; ===========================================================================
0001B630                            
0001B630                            loc_194E0:
0001B630 4268 0012                  		clr.w	$12(a0)
0001B634 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeBossDefeated			
0001B68A 303C 0085                  		move.w	#$85,d0
0001B68E 4EB9 0000 121A             		jsr	(PlaySound).l	; play SYZ music
0001B694                            
0001B694                            loc_194EE:
0001B694 6000 FCA8                  		bra.w	loc_191F2
0001B698                            ; ===========================================================================
0001B698                            
0001B698                            loc_194F2:				; XREF: Obj75_ShipIndex
0001B698 317C 0400 0010             		move.w	#$400,$10(a0)
0001B69E 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001B6A4 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001B6AA 6400                       		bcc.s	loc_1950C
0001B6AC 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001B6B0 6000                       		bra.s	loc_19512
0001B6B2                            ; ===========================================================================
0001B6B2                            
0001B6B2                            loc_1950C:
0001B6B2 4A28 0001                  		tst.b	1(a0)
0001B6B6 6A00                       		bpl.s	Obj75_ShipDelete
0001B6B8                            
0001B6B8                            loc_19512:
0001B6B8 6100 E1E0                  		bsr.w	BossMove
0001B6BC 6000 FC6C                  		bra.w	loc_191DE
0001B6C0                            ; ===========================================================================
0001B6C0                            
0001B6C0                            Obj75_ShipDelete:
0001B6C0 4EF9 0000 E980             		jmp	DeleteObject
0001B6C6                            ; ===========================================================================
0001B6C6                            
0001B6C6                            Obj75_FaceMain:				; XREF: Obj75_Index
0001B6C6 7201                       		moveq	#1,d1
0001B6C8 2268 0034                  		movea.l	$34(a0),a1
0001B6CC 7000                       		moveq	#0,d0
0001B6CE 1029 0025                  		move.b	$25(a1),d0
0001B6D2 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001B6D6 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001B6DA 1141 001C                  		move.b	d1,$1C(a0)
0001B6DE 1010                       		move.b	(a0),d0
0001B6E0 B011                       		cmp.b	(a1),d0
0001B6E2 6600                       		bne.s	Obj75_FaceDelete
0001B6E4 6000                       		bra.s	loc_195BE
0001B6E6                            ; ===========================================================================
0001B6E6                            
0001B6E6                            Obj75_FaceDelete:
0001B6E6 4EF9 0000 E980             		jmp	DeleteObject
0001B6EC                            ; ===========================================================================
0001B6EC 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001B6F0 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001B6F4 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001B6F8                            ; ===========================================================================
0001B6F8                            
0001B6F8                            loc_19552:				; XREF: off_19546
0001B6F8 720A                       		moveq	#$A,d1
0001B6FA 4E75                       		rts	
0001B6FC                            ; ===========================================================================
0001B6FC                            
0001B6FC                            loc_19556:				; XREF: off_19546
0001B6FC 7206                       		moveq	#6,d1
0001B6FE 4E75                       		rts	
0001B700                            ; ===========================================================================
0001B700                            
0001B700                            loc_1955A:				; XREF: off_19546
0001B700 7000                       		moveq	#0,d0
0001B702 1029 0028                  		move.b	$28(a1),d0
0001B706 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001B70A 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001B70E                            ; ===========================================================================
0001B70E 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001B712 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001B716                            ; ===========================================================================
0001B716                            
0001B716                            loc_19570:				; XREF: off_19568
0001B716 6000                       		bra.s	loc_19574
0001B718                            ; ===========================================================================
0001B718                            
0001B718                            loc_19572:				; XREF: off_19568
0001B718 7206                       		moveq	#6,d1
0001B71A                            
0001B71A                            loc_19574:				; XREF: off_19546
0001B71A 4A29 0020                  		tst.b	$20(a1)
0001B71E 6600                       		bne.s	loc_1957E
0001B720 7205                       		moveq	#5,d1
0001B722 4E75                       		rts	
0001B724                            ; ===========================================================================
0001B724                            
0001B724                            loc_1957E:
0001B724 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001B72A 6500                       		bcs.s	locret_19588
0001B72C 7204                       		moveq	#4,d1
0001B72E                            
0001B72E                            locret_19588:
0001B72E 4E75                       		rts	
0001B730                            ; ===========================================================================
0001B730                            
0001B730                            Obj75_FlameMain:			; XREF: Obj75_Index
0001B730 117C 0007 001C             		move.b	#7,$1C(a0)
0001B736 2268 0034                  		movea.l	$34(a0),a1
0001B73A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B740 6600                       		bne.s	loc_195AA
0001B742 117C 000B 001C             		move.b	#$B,$1C(a0)
0001B748 4A28 0001                  		tst.b	1(a0)
0001B74C 6A00                       		bpl.s	Obj75_FlameDelete
0001B74E 6000                       		bra.s	loc_195B6
0001B750                            ; ===========================================================================
0001B750                            
0001B750                            loc_195AA:
0001B750 4A69 0010                  		tst.w	$10(a1)
0001B754 6700                       		beq.s	loc_195B6
0001B756 117C 0008 001C             		move.b	#8,$1C(a0)
0001B75C                            
0001B75C                            loc_195B6:
0001B75C 6000                       		bra.s	loc_195BE
0001B75E                            ; ===========================================================================
0001B75E                            
0001B75E                            Obj75_FlameDelete:
0001B75E 4EF9 0000 E980             		jmp	DeleteObject
0001B764                            ; ===========================================================================
0001B764                            
0001B764                            loc_195BE:
0001B764 43F9 0001 9D04             		lea	(Ani_Eggman).l,a1
0001B76A 4EB9 0000 B990             		jsr	AnimateSprite
0001B770 2268 0034                  		movea.l	$34(a0),a1
0001B774 3169 0008 0008             		move.w	8(a1),8(a0)
0001B77A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B780                            
0001B780                            loc_195DA:
0001B780 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001B786 7003                       		moveq	#3,d0
0001B788 C028 0022                  		and.b	$22(a0),d0
0001B78C 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B792 8128 0001                  		or.b	d0,1(a0)
0001B796 4EF9 0000 E930             		jmp	DisplaySprite
0001B79C                            ; ===========================================================================
0001B79C                            
0001B79C                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001B79C 217C 0001 9E1C 0004        		move.l	#Map_BossItems,4(a0)
0001B7A4 317C 246C 0002             		move.w	#$246C,2(a0)
0001B7AA 117C 0005 001A             		move.b	#5,$1A(a0)
0001B7B0 2268 0034                  		movea.l	$34(a0),a1
0001B7B4 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B7BA 6600                       		bne.s	loc_1961C
0001B7BC 4A28 0001                  		tst.b	1(a0)
0001B7C0 6A00                       		bpl.s	Obj75_SpikeDelete
0001B7C2                            
0001B7C2                            loc_1961C:
0001B7C2 3169 0008 0008             		move.w	8(a1),8(a0)
0001B7C8 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B7CE 3028 003C                  		move.w	$3C(a0),d0
0001B7D2 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001B7D8 6600                       		bne.s	loc_19652
0001B7DA 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001B7E0 6700                       		beq.s	loc_1964C
0001B7E2 4A29 0028                  		tst.b	$28(a1)
0001B7E6 6600                       		bne.s	loc_19658
0001B7E8 0C40 0094                  		cmpi.w	#$94,d0
0001B7EC 6C00                       		bge.s	loc_19658
0001B7EE 5E40                       		addq.w	#7,d0
0001B7F0 6000                       		bra.s	loc_19658
0001B7F2                            ; ===========================================================================
0001B7F2                            
0001B7F2                            loc_1964C:
0001B7F2 4A69 003C                  		tst.w	$3C(a1)
0001B7F6 6A00                       		bpl.s	loc_19658
0001B7F8                            
0001B7F8                            loc_19652:
0001B7F8 4A40                       		tst.w	d0
0001B7FA 6F00                       		ble.s	loc_19658
0001B7FC 5B40                       		subq.w	#5,d0
0001B7FE                            
0001B7FE                            loc_19658:
0001B7FE 3140 003C                  		move.w	d0,$3C(a0)
0001B802 E440                       		asr.w	#2,d0
0001B804 D168 000C                  		add.w	d0,$C(a0)
0001B808 117C 0008 0019             		move.b	#8,$19(a0)
0001B80E 117C 000C 0016             		move.b	#$C,$16(a0)
0001B814 4228 0020                  		clr.b	$20(a0)
0001B818 2268 0034                  		movea.l	$34(a0),a1
0001B81C 4A29 0020                  		tst.b	$20(a1)
0001B820 6700                       		beq.s	loc_19688
0001B822 4A29 0029                  		tst.b	$29(a1)
0001B826 6600                       		bne.s	loc_19688
0001B828 117C 0084 0020             		move.b	#$84,$20(a0)
0001B82E                            
0001B82E                            loc_19688:
0001B82E 6000 FF50                  		bra.w	loc_195DA
0001B832                            ; ===========================================================================
0001B832                            
0001B832                            Obj75_SpikeDelete:
0001B832 4EF9 0000 E980             		jmp	DeleteObject
0001B838                            ; ===========================================================================
0001B838                            ; ---------------------------------------------------------------------------
0001B838                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001B838                            ; ---------------------------------------------------------------------------
0001B838                            
0001B838                            Obj76:					; XREF: Obj_Index
0001B838 7000                       		moveq	#0,d0
0001B83A 1028 0024                  		move.b	$24(a0),d0
0001B83E 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001B842 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001B846                            ; ===========================================================================
0001B846 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001B848 0000                       		dc.w Obj76_Action-Obj76_Index
0001B84A 0000                       		dc.w loc_19762-Obj76_Index
0001B84C                            ; ===========================================================================
0001B84C                            
0001B84C                            Obj76_Main:				; XREF: Obj76_Index
0001B84C 7800                       		moveq	#0,d4
0001B84E 3A3C 2C10                  		move.w	#$2C10,d5
0001B852 7C09                       		moveq	#9,d6
0001B854 43D0                       		lea	(a0),a1
0001B856 6000                       		bra.s	Obj76_MakeBlock
0001B858                            ; ===========================================================================
0001B858                            
0001B858                            Obj76_Loop:
0001B858 4EB9 0000 F086             		jsr	SingleObjLoad
0001B85E 6600                       		bne.s	Obj76_ExitLoop
0001B860                            
0001B860                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001B860 12BC 0076                  		move.b	#$76,(a1)
0001B864 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001B86C 337C 4000 0002             		move.w	#$4000,2(a1)
0001B872 137C 0004 0001             		move.b	#4,1(a1)
0001B878 137C 0010 0019             		move.b	#$10,$19(a1)
0001B87E 137C 0010 0016             		move.b	#$10,$16(a1)
0001B884 137C 0003 0018             		move.b	#3,$18(a1)
0001B88A 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001B88E 337C 0582 000C             		move.w	#$582,$C(a1)
0001B894 3344 0028                  		move.w	d4,$28(a1)
0001B898 0644 0101                  		addi.w	#$101,d4
0001B89C 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001B8A0 5429 0024                  		addq.b	#2,$24(a1)
0001B8A4 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001B8A8                            
0001B8A8                            Obj76_ExitLoop:
0001B8A8 4E75                       		rts	
0001B8AA                            ; ===========================================================================
0001B8AA                            
0001B8AA                            Obj76_Action:				; XREF: Obj76_Index
0001B8AA 1028 0029                  		move.b	$29(a0),d0
0001B8AE B028 0028                  		cmp.b	$28(a0),d0
0001B8B2 6700                       		beq.s	Obj76_Solid
0001B8B4 4A00                       		tst.b	d0
0001B8B6 6B00                       		bmi.s	loc_19718
0001B8B8                            
0001B8B8                            loc_19712:
0001B8B8 6100 0000                  		bsr.w	Obj76_Break
0001B8BC 6000                       		bra.s	Obj76_Display
0001B8BE                            ; ===========================================================================
0001B8BE                            
0001B8BE                            loc_19718:
0001B8BE 2268 0034                  		movea.l	$34(a0),a1
0001B8C2 4A29 0021                  		tst.b	$21(a1)
0001B8C6 67F0                       		beq.s	loc_19712
0001B8C8 3169 0008 0008             		move.w	8(a1),8(a0)
0001B8CE 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B8D4 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001B8DA B2C8                       		cmpa.w	a0,a1
0001B8DC 6500                       		bcs.s	Obj76_Display
0001B8DE 3029 0012                  		move.w	$12(a1),d0
0001B8E2 48C0                       		ext.l	d0
0001B8E4 E080                       		asr.l	#8,d0
0001B8E6 D168 000C                  		add.w	d0,$C(a0)
0001B8EA 6000                       		bra.s	Obj76_Display
0001B8EC                            ; ===========================================================================
0001B8EC                            
0001B8EC                            Obj76_Solid:				; XREF: Obj76_Action
0001B8EC 323C 001B                  		move.w	#$1B,d1
0001B8F0 343C 0010                  		move.w	#$10,d2
0001B8F4 363C 0011                  		move.w	#$11,d3
0001B8F8 3828 0008                  		move.w	8(a0),d4
0001B8FC 4EB9 0001 129E             		jsr	SolidObject
0001B902                            
0001B902                            Obj76_Display:				; XREF: Obj76_Action
0001B902 4EF9 0000 E930             		jmp	DisplaySprite
0001B908                            ; ===========================================================================
0001B908                            
0001B908                            loc_19762:				; XREF: Obj76_Index
0001B908 4A28 0001                  		tst.b	1(a0)
0001B90C 6A00                       		bpl.s	Obj76_Delete
0001B90E 4EB9 0000 E8F6             		jsr	ObjectFall
0001B914 4EF9 0000 E930             		jmp	DisplaySprite
0001B91A                            ; ===========================================================================
0001B91A                            
0001B91A                            Obj76_Delete:
0001B91A 4EF9 0000 E980             		jmp	DeleteObject
0001B920                            
0001B920                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B920                            
0001B920                            
0001B920                            Obj76_Break:				; XREF: Obj76_Action
0001B920 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001B924 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001B928 7801                       		moveq	#1,d4
0001B92A 7203                       		moveq	#3,d1
0001B92C 7438                       		moveq	#$38,d2
0001B92E 5428 0024                  		addq.b	#2,$24(a0)
0001B932 117C 0008 0019             		move.b	#8,$19(a0)
0001B938 117C 0008 0016             		move.b	#8,$16(a0)
0001B93E 43D0                       		lea	(a0),a1
0001B940 6000                       		bra.s	Obj76_MakeFrag
0001B942                            ; ===========================================================================
0001B942                            
0001B942                            Obj76_LoopFrag:
0001B942 4EB9 0000 F09C             		jsr	SingleObjLoad2
0001B948 6600                       		bne.s	loc_197D4
0001B94A                            
0001B94A                            Obj76_MakeFrag:
0001B94A 45D0                       		lea	(a0),a2
0001B94C 47D1                       		lea	(a1),a3
0001B94E 7603                       		moveq	#3,d3
0001B950                            
0001B950                            loc_197AA:
0001B950 26DA                       		move.l	(a2)+,(a3)+
0001B952 26DA                       		move.l	(a2)+,(a3)+
0001B954 26DA                       		move.l	(a2)+,(a3)+
0001B956 26DA                       		move.l	(a2)+,(a3)+
0001B958 51CB FFF6                  		dbf	d3,loc_197AA
0001B95C                            
0001B95C 335C 0010                  		move.w	(a4)+,$10(a1)
0001B960 335C 0012                  		move.w	(a4)+,$12(a1)
0001B964 361D                       		move.w	(a5)+,d3
0001B966 D769 0008                  		add.w	d3,8(a1)
0001B96A 361D                       		move.w	(a5)+,d3
0001B96C D769 000C                  		add.w	d3,$C(a1)
0001B970 1344 001A                  		move.b	d4,$1A(a1)
0001B974 5244                       		addq.w	#1,d4
0001B976 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001B97A                            
0001B97A                            loc_197D4:
0001B97A 303C 00CB                  		move.w	#$CB,d0
0001B97E 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play smashing sound
0001B984                            ; End of function Obj76_Break
0001B984                            
0001B984                            ; ===========================================================================
0001B984 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001B988 0180 FE00                  		dc.w $180, $FE00
0001B98C FF00 FF00                  		dc.w $FF00, $FF00
0001B990 0100 FF00                  		dc.w $100, $FF00
0001B994 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001B998 0010 0000                  		dc.w $10, 0
0001B99C 0000 0010                  		dc.w 0,	$10
0001B9A0 0010 0010                  		dc.w $10, $10
0001B9A4                            ; ---------------------------------------------------------------------------
0001B9A4                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001B9A4                            ; ---------------------------------------------------------------------------
0001B9A4                            Map_obj76:
0001B9A4                            	include "_maps\obj76.asm"
0001B9A4                            ; ---------------------------------------------------------------------------
0001B9A4                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001B9A4                            ; ---------------------------------------------------------------------------
0001B9A4 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001B9A8 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001B9AC 0000                       		dc.w byte_19826-Map_obj76
0001B9AE 02                         byte_19808:	dc.b 2
0001B9AF F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001B9B4 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001B9B9 00                         		dc.b 0
0001B9BA 01                         byte_19814:	dc.b 1
0001B9BB F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001B9C0 01                         byte_1981A:	dc.b 1
0001B9C1 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001B9C6 01                         byte_19820:	dc.b 1
0001B9C7 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001B9CC 01                         byte_19826:	dc.b 1
0001B9CD F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001B9D2                            		even
0001B9D2                            		even
0001B9D2                            
0001B9D2                            ; ===========================================================================
0001B9D2                            
0001B9D2                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001B9D2 4EF9 0000 E980             		jmp	DeleteObject
0001B9D8                            ; ===========================================================================
0001B9D8                            ; ---------------------------------------------------------------------------
0001B9D8                            ; Object 82 - Eggman (SBZ2)
0001B9D8                            ; ---------------------------------------------------------------------------
0001B9D8                            
0001B9D8                            Obj82:					; XREF: Obj_Index
0001B9D8 7000                       		moveq	#0,d0
0001B9DA 1028 0024                  		move.b	$24(a0),d0
0001B9DE 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001B9E2 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001B9E6                            ; ===========================================================================
0001B9E6 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001B9E8 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001B9EA 0000                       		dc.w Obj82_Switch-Obj82_Index
0001B9EC                            
0001B9EC 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001B9EF 0400 03                    		dc.b 4,	0, 3
0001B9F2                            ; ===========================================================================
0001B9F2                            
0001B9F2                            Obj82_Main:				; XREF: Obj82_Index
0001B9F2 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001B9F6 317C 2160 0008             		move.w	#$2160,8(a0)
0001B9FC 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001BA02 117C 000F 0020             		move.b	#$F,$20(a0)
0001BA08 117C 0010 0021             		move.b	#$10,$21(a0)
0001BA0E 08A8 0000 0022             		bclr	#0,$22(a0)
0001BA14 4228 0025                  		clr.b	$25(a0)
0001BA18 115A 0024                  		move.b	(a2)+,$24(a0)
0001BA1C 115A 001C                  		move.b	(a2)+,$1C(a0)
0001BA20 115A 0018                  		move.b	(a2)+,$18(a0)
0001BA24 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001BA2C 317C 0400 0002             		move.w	#$400,2(a0)
0001BA32 117C 0004 0001             		move.b	#4,1(a0)
0001BA38 08E8 0007 0001             		bset	#7,1(a0)
0001BA3E 117C 0020 0019             		move.b	#$20,$19(a0)
0001BA44 4EB9 0000 F09C             		jsr	SingleObjLoad2
0001BA4A 6600                       		bne.s	Obj82_Eggman
0001BA4C 2348 0034                  		move.l	a0,$34(a1)
0001BA50 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001BA54 337C 2130 0008             		move.w	#$2130,8(a1)
0001BA5A 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001BA60 4228 0025                  		clr.b	$25(a0)
0001BA64 135A 0024                  		move.b	(a2)+,$24(a1)
0001BA68 135A 001C                  		move.b	(a2)+,$1C(a1)
0001BA6C 135A 0018                  		move.b	(a2)+,$18(a1)
0001BA70 237C 0000 D19A 0004        		move.l	#Map_obj32,4(a1)
0001BA78 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001BA7E 137C 0004 0001             		move.b	#4,1(a1)
0001BA84 08E9 0007 0001             		bset	#7,1(a1)
0001BA8A 137C 0010 0019             		move.b	#$10,$19(a1)
0001BA90 137C 0000 001A             		move.b	#0,$1A(a1)
0001BA96                            
0001BA96                            Obj82_Eggman:				; XREF: Obj82_Index
0001BA96 7000                       		moveq	#0,d0
0001BA98 1028 0025                  		move.b	$25(a0),d0
0001BA9C 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001BAA0 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001BAA4 43FA 0000                  		lea	Ani_obj82(pc),a1
0001BAA8 4EB9 0000 B990             		jsr	AnimateSprite
0001BAAE 4EF9 0000 E930             		jmp	DisplaySprite
0001BAB4                            ; ===========================================================================
0001BAB4 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001BAB6 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001BAB8 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001BABA 0000                       		dc.w loc_19934-Obj82_EggIndex
0001BABC                            ; ===========================================================================
0001BABC                            
0001BABC                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001BABC 3028 0008                  		move.w	8(a0),d0
0001BAC0 9078 D008                  		sub.w	($FFFFD008).w,d0
0001BAC4 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001BAC8 6400                       		bcc.s	loc_19934	; if not, branch
0001BACA 5428 0025                  		addq.b	#2,$25(a0)
0001BACE 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001BAD4 117C 0001 001C             		move.b	#1,$1C(a0)
0001BADA                            
0001BADA                            loc_19934:				; XREF: Obj82_EggIndex
0001BADA 4EF9 0000 E916             		jmp	SpeedToPos
0001BAE0                            ; ===========================================================================
0001BAE0                            
0001BAE0                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001BAE0 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001BAE4 6600                       		bne.s	loc_19954	; if time remains, branch
0001BAE6 5428 0025                  		addq.b	#2,$25(a0)
0001BAEA 117C 0002 001C             		move.b	#2,$1C(a0)
0001BAF0 5868 000C                  		addq.w	#4,$C(a0)
0001BAF4 317C 000F 003C             		move.w	#15,$3C(a0)
0001BAFA                            
0001BAFA                            loc_19954:
0001BAFA 60DE                       		bra.s	loc_19934
0001BAFC                            ; ===========================================================================
0001BAFC                            
0001BAFC                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001BAFC 5368 003C                  		subq.w	#1,$3C(a0)
0001BB00 6E00                       		bgt.s	loc_199D0
0001BB02 6600                       		bne.s	loc_1996A
0001BB04 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001BB0A 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001BB10                            
0001BB10                            loc_1996A:
0001BB10 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001BB16 6E00                       		bgt.s	loc_19976
0001BB18 4268 0010                  		clr.w	$10(a0)
0001BB1C                            
0001BB1C                            loc_19976:
0001BB1C 0668 0024 0012             		addi.w	#$24,$12(a0)
0001BB22 4A68 0012                  		tst.w	$12(a0)
0001BB26 6B00                       		bmi.s	Obj82_FindBlocks
0001BB28 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001BB2E 6500                       		bcs.s	Obj82_FindBlocks
0001BB30 317C 5357 0028             		move.w	#$5357,$28(a0)
0001BB36 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001BB3C 6500                       		bcs.s	Obj82_FindBlocks
0001BB3E 317C 059B 000C             		move.w	#$59B,$C(a0)
0001BB44 4268 0012                  		clr.w	$12(a0)
0001BB48                            
0001BB48                            Obj82_FindBlocks:
0001BB48 3028 0010                  		move.w	$10(a0),d0
0001BB4C 8068 0012                  		or.w	$12(a0),d0
0001BB50 6600                       		bne.s	loc_199D0
0001BB52 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001BB56 703E                       		moveq	#$3E,d0
0001BB58 7240                       		moveq	#$40,d1
0001BB5A                            
0001BB5A                            Obj82_FindLoop:	
0001BB5A D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001BB5C 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001BB60 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001BB64                            
0001BB64 6600                       		bne.s	loc_199D0
0001BB66 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001BB6C 5428 0025                  		addq.b	#2,$25(a0)
0001BB70 117C 0001 001C             		move.b	#1,$1C(a0)
0001BB76                            
0001BB76                            loc_199D0:
0001BB76 6000 FF62                  		bra.w	loc_19934
0001BB7A                            ; ===========================================================================
0001BB7A                            
0001BB7A                            Obj82_Switch:				; XREF: Obj82_Index
0001BB7A 7000                       		moveq	#0,d0
0001BB7C 1028 0025                  		move.b	$25(a0),d0
0001BB80 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001BB84 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001BB88                            ; ===========================================================================
0001BB88 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001BB8A 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001BB8C                            ; ===========================================================================
0001BB8C                            
0001BB8C                            loc_199E6:				; XREF: Obj82_SwIndex
0001BB8C 2268 0034                  		movea.l	$34(a0),a1
0001BB90 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001BB96 6600                       		bne.s	Obj82_SwDisplay
0001BB98 117C 0001 001A             		move.b	#1,$1A(a0)
0001BB9E 5428 0025                  		addq.b	#2,$25(a0)
0001BBA2                            
0001BBA2                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001BBA2 4EF9 0000 E930             		jmp	DisplaySprite
0001BBA8                            ; ===========================================================================
0001BBA8                            Ani_obj82:
0001BBA8                            	include "_anim\obj82.asm"
0001BBA8                            ; ---------------------------------------------------------------------------
0001BBA8                            ; Animation script - Eggman (SBZ2)
0001BBA8                            ; ---------------------------------------------------------------------------
0001BBA8 0000                       		dc.w byte_19A10-Ani_obj82
0001BBAA 0000                       		dc.w byte_19A14-Ani_obj82
0001BBAC 0000                       		dc.w byte_19A18-Ani_obj82
0001BBAE 0000                       		dc.w byte_19A20-Ani_obj82
0001BBB0 0000                       		dc.w byte_19A24-Ani_obj82
0001BBB2 0000                       		dc.w byte_19A2A-Ani_obj82
0001BBB4 0000                       		dc.w byte_19A30-Ani_obj82
0001BBB6 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001BBBA 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001BBBE 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001BBC6 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001BBCA 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001BBD0 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001BBD6 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001BBDA                            		even
0001BBDA                            		even
0001BBDA                            
0001BBDA                            ; ---------------------------------------------------------------------------
0001BBDA                            ; Sprite mappings - Eggman (SBZ2)
0001BBDA                            ; ---------------------------------------------------------------------------
0001BBDA                            Map_obj82:
0001BBDA                            	include "_maps\obj82.asm"
0001BBDA                            ; ---------------------------------------------------------------------------
0001BBDA                            ; Sprite mappings - Eggman (SBZ2)
0001BBDA                            ; ---------------------------------------------------------------------------
0001BBDA 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0001BBDE 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
0001BBE2 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
0001BBE6 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001BBEA 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0001BBEE 0000                       		dc.w byte_19B4F-Map_obj82
0001BBF0 03                         byte_19A4A:	dc.b 3
0001BBF1 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001BBF6 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BBFB 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BC00 04                         byte_19A5A:	dc.b 4
0001BC01 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001BC06 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BC0B 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BC10 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001BC15 00                         		dc.b 0
0001BC16 04                         byte_19A70:	dc.b 4
0001BC17 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001BC1C E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001BC21 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001BC26 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001BC2B 00                         		dc.b 0
0001BC2C 04                         byte_19A86:	dc.b 4
0001BC2D F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001BC32 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001BC37 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001BC3C EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001BC41 00                         		dc.b 0
0001BC42 04                         byte_19A9C:	dc.b 4
0001BC43 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BC48 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001BC4D 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001BC52 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BC57 00                         		dc.b 0
0001BC58 04                         byte_19AB2:	dc.b 4
0001BC59 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BC5E E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BC63 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BC68 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BC6D 00                         		dc.b 0
0001BC6E 07                         byte_19AC8:	dc.b 7
0001BC6F E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BC74 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BC79 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001BC7E 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001BC83 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BC88 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001BC8D F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001BC92 05                         byte_19AEC:	dc.b 5
0001BC93 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BC98 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001BC9D 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001BCA2 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001BCA7 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BCAC 06                         byte_19B06:	dc.b 6
0001BCAD EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001BCB2 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001BCB7 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001BCBC 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001BCC1 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001BCC6 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001BCCB 00                         		dc.b 0
0001BCCC 08                         byte_19B26:	dc.b 8
0001BCCD E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BCD2 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BCD7 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BCDC 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BCE1 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001BCE6 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001BCEB 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001BCF0 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001BCF5 03                         byte_19B4F:	dc.b 3
0001BCF6 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
0001BCFB F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001BD00 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001BD06 00                         		even
0001BD06 00                         		even
0001BD06                            
0001BD06                            ; ===========================================================================
0001BD06                            ; ---------------------------------------------------------------------------
0001BD06                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001BD06                            ; ---------------------------------------------------------------------------
0001BD06                            
0001BD06                            Obj83:					; XREF: Obj_Index
0001BD06 7000                       		moveq	#0,d0
0001BD08 1028 0024                  		move.b	$24(a0),d0
0001BD0C 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001BD10 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001BD14                            ; ===========================================================================
0001BD14 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001BD16 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001BD18 0000                       		dc.w loc_19C36-Obj83_Index
0001BD1A 0000                       		dc.w loc_19C62-Obj83_Index
0001BD1C 0000                       		dc.w loc_19C72-Obj83_Index
0001BD1E 0000                       		dc.w loc_19C80-Obj83_Index
0001BD20                            ; ===========================================================================
0001BD20                            
0001BD20                            Obj83_Main:				; XREF: Obj83_Index
0001BD20 317C 2080 0008             		move.w	#$2080,8(a0)
0001BD26 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001BD2C 117C 0080 0019             		move.b	#$80,$19(a0)
0001BD32 117C 0010 0016             		move.b	#$10,$16(a0)
0001BD38 117C 0004 0001             		move.b	#4,1(a0)
0001BD3E 08E8 0007 0001             		bset	#7,1(a0)
0001BD44 7800                       		moveq	#0,d4
0001BD46 3A3C 2010                  		move.w	#$2010,d5
0001BD4A 7C07                       		moveq	#7,d6
0001BD4C 45E8 0030                  		lea	$30(a0),a2
0001BD50                            
0001BD50                            Obj83_MakeBlock:
0001BD50 4EB9 0000 F086             		jsr	SingleObjLoad
0001BD56 6600                       		bne.s	Obj83_ExitMake
0001BD58 34C9                       		move.w	a1,(a2)+
0001BD5A 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001BD5E 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001BD66 337C 4518 0002             		move.w	#$4518,2(a1)
0001BD6C 137C 0004 0001             		move.b	#4,1(a1)
0001BD72 137C 0010 0019             		move.b	#$10,$19(a1)
0001BD78 137C 0010 0016             		move.b	#$10,$16(a1)
0001BD7E 137C 0003 0018             		move.b	#3,$18(a1)
0001BD84 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001BD88 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001BD8E 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001BD92 137C 0008 0024             		move.b	#8,$24(a1)
0001BD98 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001BD9C                            
0001BD9C                            Obj83_ExitMake:
0001BD9C 5428 0024                  		addq.b	#2,$24(a0)
0001BDA0 4E75                       		rts	
0001BDA2                            ; ===========================================================================
0001BDA2                            
0001BDA2                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001BDA2 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001BDA8 6600                       		bne.s	Obj83_Solid	; if not, branch
0001BDAA 4228 001A                  		clr.b	$1A(a0)
0001BDAE 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001BDB2                            
0001BDB2                            Obj83_Solid:
0001BDB2 7000                       		moveq	#0,d0
0001BDB4 1028 001A                  		move.b	$1A(a0),d0
0001BDB8 4400                       		neg.b	d0
0001BDBA 4880                       		ext.w	d0
0001BDBC 5040                       		addq.w	#8,d0
0001BDBE E940                       		asl.w	#4,d0
0001BDC0 383C 2100                  		move.w	#$2100,d4
0001BDC4 9840                       		sub.w	d0,d4
0001BDC6 1140 0019                  		move.b	d0,$19(a0)
0001BDCA 3144 0008                  		move.w	d4,8(a0)
0001BDCE 720B                       		moveq	#$B,d1
0001BDD0 D240                       		add.w	d0,d1
0001BDD2 7410                       		moveq	#$10,d2
0001BDD4 7611                       		moveq	#$11,d3
0001BDD6 4EF9 0001 129E             		jmp	SolidObject
0001BDDC                            ; ===========================================================================
0001BDDC                            
0001BDDC                            loc_19C36:				; XREF: Obj83_Index
0001BDDC 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001BDE2 6400                       		bcc.s	Obj83_Solid2
0001BDE4 70FF                       		moveq	#-1,d0
0001BDE6 1028 001A                  		move.b	$1A(a0),d0
0001BDEA 4880                       		ext.w	d0
0001BDEC D040                       		add.w	d0,d0
0001BDEE 3030 0030                  		move.w	$30(a0,d0.w),d0
0001BDF2 2240                       		movea.l	d0,a1
0001BDF4 337C 474F 0028             		move.w	#$474F,$28(a1)
0001BDFA 5228 001A                  		addq.b	#1,$1A(a0)
0001BDFE 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001BE04 6700                       		beq.s	loc_19C62
0001BE06                            
0001BE06                            Obj83_Solid2:
0001BE06 60AA                       		bra.s	Obj83_Solid
0001BE08                            ; ===========================================================================
0001BE08                            
0001BE08                            loc_19C62:				; XREF: Obj83_Index
0001BE08 08A8 0003 0022             		bclr	#3,$22(a0)
0001BE0E 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001BE14 6000 FBBC                  		bra.w	loc_1982C
0001BE18                            ; ===========================================================================
0001BE18                            
0001BE18                            loc_19C72:				; XREF: Obj83_Index
0001BE18 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001BE1E 6700                       		beq.s	Obj83_Break	; if yes, branch
0001BE20 4EF9 0000 E930             		jmp	DisplaySprite
0001BE26                            ; ===========================================================================
0001BE26                            
0001BE26                            loc_19C80:				; XREF: Obj83_Index
0001BE26 4A28 0001                  		tst.b	1(a0)
0001BE2A 6A00 FBA6                  		bpl.w	loc_1982C
0001BE2E 4EB9 0000 E8F6             		jsr	ObjectFall
0001BE34 4EF9 0000 E930             		jmp	DisplaySprite
0001BE3A                            ; ===========================================================================
0001BE3A                            
0001BE3A                            Obj83_Break:				; XREF: loc_19C72
0001BE3A 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001BE3E 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001BE42 7801                       		moveq	#1,d4
0001BE44 7203                       		moveq	#3,d1
0001BE46 7438                       		moveq	#$38,d2
0001BE48 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001BE4E 31FC 0200 F5D0             		move.w	#$200,(SonimeSST+sonime_facetimer).w
0001BE54 5428 0024                  		addq.b	#2,$24(a0)
0001BE58 117C 0008 0019             		move.b	#8,$19(a0)
0001BE5E 117C 0008 0016             		move.b	#8,$16(a0)
0001BE64 43D0                       		lea	(a0),a1
0001BE66 6000                       		bra.s	Obj83_MakeFrag
0001BE68                            ; ===========================================================================
0001BE68                            
0001BE68                            Obj83_LoopFrag:
0001BE68 4EB9 0000 F09C             		jsr	SingleObjLoad2
0001BE6E 6600                       		bne.s	Obj83_BreakSnd
0001BE70                            
0001BE70                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001BE70 45D0                       		lea	(a0),a2
0001BE72 47D1                       		lea	(a1),a3
0001BE74 7603                       		moveq	#3,d3
0001BE76                            
0001BE76                            loc_19CC4:
0001BE76 26DA                       		move.l	(a2)+,(a3)+
0001BE78 26DA                       		move.l	(a2)+,(a3)+
0001BE7A 26DA                       		move.l	(a2)+,(a3)+
0001BE7C 26DA                       		move.l	(a2)+,(a3)+
0001BE7E 51CB FFF6                  		dbf	d3,loc_19CC4
0001BE82                            
0001BE82 335C 0012                  		move.w	(a4)+,$12(a1)
0001BE86 361D                       		move.w	(a5)+,d3
0001BE88 D769 0008                  		add.w	d3,8(a1)
0001BE8C 361D                       		move.w	(a5)+,d3
0001BE8E D769 000C                  		add.w	d3,$C(a1)
0001BE92 1344 001A                  		move.b	d4,$1A(a1)
0001BE96 5244                       		addq.w	#1,d4
0001BE98 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001BE9C                            
0001BE9C                            Obj83_BreakSnd:
0001BE9C 303C 00CB                  		move.w	#$CB,d0
0001BEA0 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play smashing sound
0001BEA6 4EF9 0000 E930             		jmp	DisplaySprite
0001BEAC                            ; ===========================================================================
0001BEAC 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001BEB0 0120 00C0                  		dc.w $120, $C0
0001BEB4 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001BEB8 0010 0000                  		dc.w $10, 0
0001BEBC 0000 0010                  		dc.w 0,	$10
0001BEC0 0010 0010                  		dc.w $10, $10
0001BEC4                            ; ---------------------------------------------------------------------------
0001BEC4                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001BEC4                            ; ---------------------------------------------------------------------------
0001BEC4                            Map_obj83:
0001BEC4                            	include "_maps\obj83.asm"
0001BEC4                            ; ---------------------------------------------------------------------------
0001BEC4                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001BEC4                            ; ---------------------------------------------------------------------------
0001BEC4 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001BEC8 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001BECC 0000                       		dc.w byte_19D46-Map_obj83
0001BECE 01                         byte_19D1C:	dc.b 1
0001BECF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001BED4 02                         byte_19D22:	dc.b 2
0001BED5 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001BEDA F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001BEDF 00                         		dc.b 0
0001BEE0 02                         byte_19D2E:	dc.b 2
0001BEE1 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001BEE6 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001BEEB 00                         		dc.b 0
0001BEEC 02                         byte_19D3A:	dc.b 2
0001BEED F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001BEF2 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001BEF7 00                         		dc.b 0
0001BEF8 02                         byte_19D46:	dc.b 2
0001BEF9 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001BEFE F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001BF04 00                         		even
0001BF04 00                         		even
0001BF04                            
0001BF04                            ; ===========================================================================
0001BF04                            ; ---------------------------------------------------------------------------
0001BF04                            ; Object 85 - Eggman (FZ)
0001BF04                            ; ---------------------------------------------------------------------------
0001BF04                            
0001BF04                            Obj85_Delete:
0001BF04 4EF9 0000 E980             		jmp	DeleteObject
0001BF0A                            ; ===========================================================================
0001BF0A                            
0001BF0A                            Obj85:					; XREF: Obj_Index
0001BF0A 7000                       		moveq	#0,d0
0001BF0C 1028 0024                  		move.b	$24(a0),d0
0001BF10 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001BF14 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001BF18                            ; ===========================================================================
0001BF18 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001BF1A 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001BF1C 0000                       		dc.w loc_1A38E-Obj85_Index
0001BF1E 0000                       		dc.w loc_1A346-Obj85_Index
0001BF20 0000                       		dc.w loc_1A2C6-Obj85_Index
0001BF22 0000                       		dc.w loc_1A3AC-Obj85_Index
0001BF24 0000                       		dc.w loc_1A264-Obj85_Index
0001BF26                            
0001BF26 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001BF2C 0001 BBDA                  		dc.l Map_obj82		; mappings pointer
0001BF30 25B0 0590 0300             		dc.w $25B0, $590, $300
0001BF36 0000 0000                  		dc.l Map_obj84
0001BF3A 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001BF40 0000 0000                  		dc.l Map_FZBoss
0001BF44 26E0 0596 0470             		dc.w $26E0, $596, $470
0001BF4A 0001 BBDA                  		dc.l Map_obj82
0001BF4E 26E0 0596 0400             		dc.w $26E0, $596, $400
0001BF54 0001 9D54                  		dc.l Map_Eggman
0001BF58 26E0 0596 0400             		dc.w $26E0, $596, $400
0001BF5E 0001 9D54                  		dc.l Map_Eggman
0001BF62                            
0001BF62 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001BF67 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001BF6C 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001BF71 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001BF76 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001BF7B 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001BF80                            ; ===========================================================================
0001BF80                            
0001BF80                            Obj85_Main:				; XREF: Obj85_Index
0001BF80 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001BF84 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001BF88 2248                       		movea.l	a0,a1
0001BF8A 7205                       		moveq	#5,d1
0001BF8C 6000                       		bra.s	Obj85_LoadBoss
0001BF8E                            ; ===========================================================================
0001BF8E                            
0001BF8E                            Obj85_Loop:
0001BF8E 4EB9 0000 F09C             		jsr	SingleObjLoad2
0001BF94 6600                       		bne.s	loc_19E20
0001BF96                            
0001BF96                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001BF96 12BC 0085                  		move.b	#$85,(a1)
0001BF9A 335A 0008                  		move.w	(a2)+,8(a1)
0001BF9E 335A 000C                  		move.w	(a2)+,$C(a1)
0001BFA2 335A 0002                  		move.w	(a2)+,2(a1)
0001BFA6 235A 0004                  		move.l	(a2)+,4(a1)
0001BFAA 135B 0024                  		move.b	(a3)+,$24(a1)
0001BFAE 135B 001C                  		move.b	(a3)+,$1C(a1)
0001BFB2 135B 0018                  		move.b	(a3)+,$18(a1)
0001BFB6 135B 0017                  		move.b	(a3)+,$17(a1)
0001BFBA 135B 0016                  		move.b	(a3)+,$16(a1)
0001BFBE 137C 0004 0001             		move.b	#4,1(a1)
0001BFC4 08E8 0007 0001             		bset	#7,1(a0)
0001BFCA 2348 0034                  		move.l	a0,$34(a1)
0001BFCE 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001BFD2                            
0001BFD2                            loc_19E20:
0001BFD2 45E8 0036                  		lea	$36(a0),a2
0001BFD6 4EB9 0000 F086             		jsr	SingleObjLoad
0001BFDC 6600                       		bne.s	loc_19E5A
0001BFDE 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001BFE2 3489                       		move.w	a1,(a2)
0001BFE4 2348 0034                  		move.l	a0,$34(a1)
0001BFE8 45E8 0038                  		lea	$38(a0),a2
0001BFEC 7400                       		moveq	#0,d2
0001BFEE 7203                       		moveq	#3,d1
0001BFF0                            
0001BFF0                            loc_19E3E:
0001BFF0 4EB9 0000 F09C             		jsr	SingleObjLoad2
0001BFF6 6600                       		bne.s	loc_19E5A
0001BFF8 34C9                       		move.w	a1,(a2)+
0001BFFA 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001BFFE 2348 0034                  		move.l	a0,$34(a1)
0001C002 1342 0028                  		move.b	d2,$28(a1)
0001C006 5442                       		addq.w	#2,d2
0001C008 51C9 FFE6                  		dbf	d1,loc_19E3E
0001C00C                            
0001C00C                            loc_19E5A:
0001C00C 317C 0000 0034             		move.w	#0,$34(a0)
0001C012 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001C018 317C FFFF 0030             		move.w	#-1,$30(a0)
0001C01E                            
0001C01E                            Obj85_Eggman:				; XREF: Obj85_Index
0001C01E 7000                       		moveq	#0,d0
0001C020 1028 0034                  		move.b	$34(a0),d0
0001C024 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001C028 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001C02C 4EF9 0000 E930             		jmp	DisplaySprite
0001C032                            ; ===========================================================================
0001C032 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001C036 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001C03A 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001C03E 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001C042                            ; ===========================================================================
0001C042                            
0001C042                            loc_19E90:				; XREF: off_19E80
0001C042 4AB8 F680                  		tst.l	($FFFFF680).w
0001C046 6600                       		bne.s	loc_19EA2
0001C048 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001C04E 6500                       		bcs.s	loc_19EA2
0001C050 5428 0034                  		addq.b	#2,$34(a0)
0001C054                            
0001C054                            loc_19EA2:
0001C054 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001C058 4E75                       		rts	
0001C05A                            ; ===========================================================================
0001C05A                            
0001C05A                            loc_19EA8:				; XREF: off_19E80
0001C05A 4A68 0030                  		tst.w	$30(a0)
0001C05E 6A00                       		bpl.s	loc_19F10
0001C060 4268 0030                  		clr.w	$30(a0)
0001C064 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001C06A 0240 000C                  		andi.w	#$C,d0
0001C06E 3200                       		move.w	d0,d1
0001C070 5441                       		addq.w	#2,d1
0001C072 4A80                       		tst.l	d0
0001C074 6A00                       		bpl.s	loc_19EC6
0001C076 C141                       		exg	d1,d0
0001C078                            
0001C078                            loc_19EC6:
0001C078 43FA 0000                  		lea	word_19FD6(pc),a1
0001C07C 3031 0000                  		move.w	(a1,d0.w),d0
0001C080 3231 1000                  		move.w	(a1,d1.w),d1
0001C084 3140 0030                  		move.w	d0,$30(a0)
0001C088 74FF                       		moveq	#-1,d2
0001C08A 3430 0038                  		move.w	$38(a0,d0.w),d2
0001C08E 2242                       		movea.l	d2,a1
0001C090 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C096 337C FFFF 0030             		move.w	#-1,$30(a1)
0001C09C 3430 1038                  		move.w	$38(a0,d1.w),d2
0001C0A0 2242                       		movea.l	d2,a1
0001C0A2 137C 0001 0029             		move.b	#1,$29(a1)
0001C0A8 337C 0000 0030             		move.w	#0,$30(a1)
0001C0AE 317C 0001 0032             		move.w	#1,$32(a0)
0001C0B4 4228 0035                  		clr.b	$35(a0)
0001C0B8 303C 00B7                  		move.w	#$B7,d0
0001C0BC 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001C0C2                            
0001C0C2                            loc_19F10:
0001C0C2 4A68 0032                  		tst.w	$32(a0)
0001C0C6 6B00 0000                  		bmi.w	loc_19FA6
0001C0CA 08A8 0000 0022             		bclr	#0,$22(a0)
0001C0D0 3038 D008                  		move.w	($FFFFD008).w,d0
0001C0D4 9068 0008                  		sub.w	8(a0),d0
0001C0D8 6500                       		bcs.s	loc_19F2E
0001C0DA 08E8 0000 0022             		bset	#0,$22(a0)
0001C0E0                            
0001C0E0                            loc_19F2E:
0001C0E0 323C 002B                  		move.w	#$2B,d1
0001C0E4 343C 0014                  		move.w	#$14,d2
0001C0E8 363C 0014                  		move.w	#$14,d3
0001C0EC 3828 0008                  		move.w	8(a0),d4
0001C0F0 4EB9 0001 129E             		jsr	SolidObject
0001C0F6 4A44                       		tst.w	d4
0001C0F8 6E00                       		bgt.s	loc_19F50
0001C0FA                            
0001C0FA                            loc_19F48:
0001C0FA 4A28 0035                  		tst.b	$35(a0)
0001C0FE 6600                       		bne.s	loc_19F88
0001C100 6000                       		bra.s	loc_19F96
0001C102                            ; ===========================================================================
0001C102                            
0001C102                            loc_19F50:
0001C102 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001C106 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001C10C 66EC                       		bne.s	loc_19F48
0001C10E 303C 0300                  		move.w	#$300,d0
0001C112 0828 0000 0022             		btst	#0,$22(a0)
0001C118 6600                       		bne.s	loc_19F6A
0001C11A 4440                       		neg.w	d0
0001C11C                            
0001C11C                            loc_19F6A:
0001C11C 31C0 D010                  		move.w	d0,($FFFFD010).w
0001C120 4A28 0035                  		tst.b	$35(a0)
0001C124 6600                       		bne.s	loc_19F88
0001C126 4A28 0021                  		tst.b	$21(a0)	;has the boss been defeated?
0001C12A 6700                       		beq.s	loc_19F9C	;if so, don't let it be hit again.		
0001C12C 5328 0021                  		subq.b	#1,$21(a0)
0001C130 117C 00FF 0035             		move.b	#255,$35(a0)
0001C136 303C 00AC                  		move.w	#$AC,d0
0001C13A 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001C140                            
0001C140                            loc_19F88:
0001C140 5328 0035                  		subq.b	#1,$35(a0)
0001C144 6700                       		beq.s	loc_19F96
0001C146 117C 0003 001C             		move.b	#3,$1C(a0)
0001C14C 6000                       		bra.s	loc_19F9C
0001C14E                            ; ===========================================================================
0001C14E                            
0001C14E                            loc_19F96:
0001C14E 117C 0001 001C             		move.b	#1,$1C(a0)
0001C154                            
0001C154                            loc_19F9C:
0001C154 43FA FA52                  		lea	Ani_obj82(pc),a1
0001C158 4EF9 0000 B990             		jmp	AnimateSprite
0001C15E                            ; ===========================================================================
0001C15E                            
0001C15E                            loc_19FA6:
0001C15E 4A28 0021                  		tst.b	$21(a0)
0001C162 6700                       		beq.s	loc_19FBC
0001C164 5428 0034                  		addq.b	#2,$34(a0)
0001C168 317C FFFF 0030             		move.w	#-1,$30(a0)
0001C16E 4268 0032                  		clr.w	$32(a0)
0001C172 4E75                       		rts	
0001C174                            ; ===========================================================================
0001C174                            
0001C174                            loc_19FBC:
0001C174 117C 0006 0034             		move.b	#6,$34(a0)
0001C17A 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001C180 317C 053C 000C             		move.w	#$53C,$C(a0)
0001C186 117C 0014 0016             		move.b	#$14,$16(a0)
0001C18C 4E75                       		rts	
0001C18E                            ; ===========================================================================
0001C18E 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001C19E                            ; ===========================================================================
0001C19E                            
0001C19E                            loc_19FE6:				; XREF: off_19E80
0001C19E 70FF                       		moveq	#-1,d0
0001C1A0 3028 0036                  		move.w	$36(a0),d0
0001C1A4 2240                       		movea.l	d0,a1
0001C1A6 4A68 0030                  		tst.w	$30(a0)
0001C1AA 6A00                       		bpl.s	loc_1A000
0001C1AC 4268 0030                  		clr.w	$30(a0)
0001C1B0 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C1B6 6100                       		bsr.s	loc_1A020
0001C1B8                            
0001C1B8                            loc_1A000:
0001C1B8 700F                       		moveq	#$F,d0
0001C1BA C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001C1BE 6600                       		bne.s	loc_1A00A
0001C1C0 6100                       		bsr.s	loc_1A020
0001C1C2                            
0001C1C2                            loc_1A00A:
0001C1C2 4A68 0032                  		tst.w	$32(a0)
0001C1C6 6700                       		beq.s	locret_1A01E
0001C1C8 5528 0034                  		subq.b	#2,$34(a0)
0001C1CC 317C FFFF 0030             		move.w	#-1,$30(a0)
0001C1D2 4268 0032                  		clr.w	$32(a0)
0001C1D6                            
0001C1D6                            locret_1A01E:
0001C1D6 4E75                       		rts	
0001C1D8                            ; ===========================================================================
0001C1D8                            
0001C1D8                            loc_1A020:
0001C1D8 303C 00B1                  		move.w	#$B1,d0
0001C1DC 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play electricity sound
0001C1E2                            ; ===========================================================================
0001C1E2                            
0001C1E2                            loc_1A02A:				; XREF: off_19E80
0001C1E2 117C 0030 0017             		move.b	#$30,$17(a0)
0001C1E8 08E8 0000 0022             		bset	#0,$22(a0)
0001C1EE 4EB9 0000 E916             		jsr	SpeedToPos
0001C1F4 117C 0006 001A             		move.b	#6,$1A(a0)
0001C1FA 0668 0010 0012             		addi.w	#$10,$12(a0)
0001C200 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001C206 6500                       		bcs.s	loc_1A070
0001C208 317C 059C 000C             		move.w	#$59C,$C(a0)
0001C20E 5428 0034                  		addq.b	#2,$34(a0)
0001C212 117C 0020 0017             		move.b	#$20,$17(a0)
0001C218 317C 0100 0010             		move.w	#$100,$10(a0)
0001C21E 317C FF00 0012             		move.w	#-$100,$12(a0)
0001C224 5438 F742                  		addq.b	#2,($FFFFF742).w
0001C228                            
0001C228                            loc_1A070:
0001C228 6000 0000                  		bra.w	loc_1A166
0001C22C                            ; ===========================================================================
0001C22C                            
0001C22C                            loc_1A074:				; XREF: off_19E80
0001C22C 08E8 0000 0022             		bset	#0,$22(a0)
0001C232 117C 0004 001C             		move.b	#4,$1C(a0)
0001C238 4EB9 0000 E916             		jsr	SpeedToPos
0001C23E 0668 0010 0012             		addi.w	#$10,$12(a0)
0001C244 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001C24A 6500                       		bcs.s	loc_1A09A
0001C24C 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001C252                            
0001C252                            loc_1A09A:
0001C252 317C 0400 0010             		move.w	#$400,$10(a0)
0001C258 3028 0008                  		move.w	8(a0),d0
0001C25C 9078 D008                  		sub.w	($FFFFD008).w,d0
0001C260 6A00                       		bpl.s	loc_1A0B4
0001C262 317C 0500 0010             		move.w	#$500,$10(a0)
0001C268 6000 0000                  		bra.w	loc_1A0F2
0001C26C                            ; ===========================================================================
0001C26C                            
0001C26C                            loc_1A0B4:
0001C26C 0440 0070                  		subi.w	#$70,d0
0001C270 6500                       		bcs.s	loc_1A0F2
0001C272 0468 0100 0010             		subi.w	#$100,$10(a0)
0001C278 5140                       		subq.w	#8,d0
0001C27A 6500                       		bcs.s	loc_1A0F2
0001C27C 0468 0100 0010             		subi.w	#$100,$10(a0)
0001C282 5140                       		subq.w	#8,d0
0001C284 6500                       		bcs.s	loc_1A0F2
0001C286 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C28C 5140                       		subq.w	#8,d0
0001C28E 6500                       		bcs.s	loc_1A0F2
0001C290 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C296 5140                       		subq.w	#8,d0
0001C298 6500                       		bcs.s	loc_1A0F2
0001C29A 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C2A0 0440 0038                  		subi.w	#$38,d0
0001C2A4 6500                       		bcs.s	loc_1A0F2
0001C2A6 4268 0010                  		clr.w	$10(a0)
0001C2AA                            
0001C2AA                            loc_1A0F2:
0001C2AA 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001C2B0 6500                       		bcs.s	loc_1A110
0001C2B2 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001C2B8 317C 0240 0010             		move.w	#$240,$10(a0)
0001C2BE 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001C2C4 5428 0034                  		addq.b	#2,$34(a0)
0001C2C8                            
0001C2C8                            loc_1A110:
0001C2C8 6000                       		bra.s	loc_1A15C
0001C2CA                            ; ===========================================================================
0001C2CA                            
0001C2CA                            loc_1A112:				; XREF: off_19E80
0001C2CA 4EB9 0000 E916             		jsr	SpeedToPos
0001C2D0 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001C2D6 6500                       		bcs.s	loc_1A124
0001C2D8 4268 0010                  		clr.w	$10(a0)
0001C2DC                            
0001C2DC                            loc_1A124:
0001C2DC 0668 0034 0012             		addi.w	#$34,$12(a0)
0001C2E2 4A68 0012                  		tst.w	$12(a0)
0001C2E6 6B00                       		bmi.s	loc_1A142
0001C2E8 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001C2EE 6500                       		bcs.s	loc_1A142
0001C2F0 317C 0592 000C             		move.w	#$592,$C(a0)
0001C2F6 4268 0012                  		clr.w	$12(a0)
0001C2FA                            
0001C2FA                            loc_1A142:
0001C2FA 3028 0010                  		move.w	$10(a0),d0
0001C2FE 8068 0012                  		or.w	$12(a0),d0
0001C302 6600                       		bne.s	loc_1A15C
0001C304 5428 0034                  		addq.b	#2,$34(a0)
0001C308 317C FE80 0012             		move.w	#-$180,$12(a0)
0001C30E 117C 0001 0021             		move.b	#1,$21(a0)
0001C314                            
0001C314                            loc_1A15C:
0001C314 43FA F892                  		lea	Ani_obj82(pc),a1
0001C318 4EB9 0000 B990             		jsr	AnimateSprite
0001C31E                            
0001C31E                            loc_1A166:
0001C31E 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001C324 6C00                       		bge.s	loc_1A172
0001C326 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001C32A                            
0001C32A                            loc_1A172:
0001C32A 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001C330 6C00                       		bge.s	locret_1A190
0001C332 323C 001B                  		move.w	#$1B,d1
0001C336 343C 0070                  		move.w	#$70,d2
0001C33A 363C 0071                  		move.w	#$71,d3
0001C33E 3828 0008                  		move.w	8(a0),d4
0001C342 4EF9 0001 129E             		jmp	SolidObject
0001C348                            ; ===========================================================================
0001C348                            
0001C348                            locret_1A190:
0001C348 4E75                       		rts	
0001C34A                            ; ===========================================================================
0001C34A                            
0001C34A                            loc_1A192:				; XREF: off_19E80
0001C34A 217C 0001 9D54 0004        		move.l	#Map_Eggman,4(a0)
0001C352 317C 0400 0002             		move.w	#$400,2(a0)
0001C358 117C 0000 001C             		move.b	#0,$1C(a0)
0001C35E 08E8 0000 0022             		bset	#0,$22(a0)
0001C364 4EB9 0000 E916             		jsr	SpeedToPos
0001C36A 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001C370 6400                       		bcc.s	loc_1A1D0
0001C372 317C 0180 0010             		move.w	#$180,$10(a0)
0001C378 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001C37E 117C 000F 0020             		move.b	#$F,$20(a0)
0001C384 5428 0034                  		addq.b	#2,$34(a0)
0001C388                            
0001C388                            loc_1A1D0:
0001C388 6000 FF8A                  		bra.w	loc_1A15C
0001C38C                            ; ===========================================================================
0001C38C                            
0001C38C                            loc_1A1D4:				; XREF: off_19E80
0001C38C 08E8 0000 0022             		bset	#0,$22(a0)
0001C392 4EB9 0000 E916             		jsr	SpeedToPos
0001C398 4A68 0030                  		tst.w	$30(a0)
0001C39C 6600                       		bne.s	loc_1A1FC
0001C39E 4A28 0020                  		tst.b	$20(a0)
0001C3A2 6600                       		bne.s	loc_1A216
0001C3A4 317C 001E 0030             		move.w	#$1E,$30(a0)
0001C3AA 303C 00AC                  		move.w	#$AC,d0
0001C3AE 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001C3B4                            
0001C3B4                            loc_1A1FC:
0001C3B4 5368 0030                  		subq.w	#1,$30(a0)
0001C3B8 6600                       		bne.s	loc_1A216
0001C3BA 4A28 0022                  		tst.b	$22(a0)
0001C3BE 6A00                       		bpl.s	loc_1A210
0001C3C0 317C 0060 0012             		move.w	#$60,$12(a0)
0001C3C6 6000                       		bra.s	loc_1A216
0001C3C8                            ; ===========================================================================
0001C3C8                            
0001C3C8                            loc_1A210:
0001C3C8 117C 000F 0020             		move.b	#$F,$20(a0)
0001C3CE                            
0001C3CE                            loc_1A216:
0001C3CE 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001C3D4 6D00                       		blt.s	loc_1A23A
0001C3D6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001C3DC 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001C3E2 4278 D020                  		clr.w	($FFFFD020).w
0001C3E6 4A68 0012                  		tst.w	$12(a0)
0001C3EA 6A00                       		bpl.s	loc_1A248
0001C3EC 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001C3F2                            
0001C3F2                            loc_1A23A:
0001C3F2 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001C3F8 6D00                       		blt.s	loc_1A248
0001C3FA 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001C400                            
0001C400                            loc_1A248:
0001C400 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001C406 6500                       		bcs.s	loc_1A260
0001C408 4A28 0001                  		tst.b	1(a0)
0001C40C 6B00                       		bmi.s	loc_1A260
0001C40E 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001C414 6000 FAEE                  		bra.w	Obj85_Delete
0001C418                            ; ===========================================================================
0001C418                            
0001C418                            loc_1A260:
0001C418 6000 FEFA                  		bra.w	loc_1A15C
0001C41C                            ; ===========================================================================
0001C41C                            
0001C41C                            loc_1A264:				; XREF: Obj85_Index
0001C41C 2268 0034                  		movea.l	$34(a0),a1
0001C420 1011                       		move.b	(a1),d0
0001C422 B010                       		cmp.b	(a0),d0
0001C424 6600 FADE                  		bne.w	Obj85_Delete
0001C428 117C 0007 001C             		move.b	#7,$1C(a0)
0001C42E 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C434 6C00                       		bge.s	loc_1A280
0001C436 6000                       		bra.s	loc_1A2A6
0001C438                            ; ===========================================================================
0001C438                            
0001C438                            loc_1A280:
0001C438 4A69 0010                  		tst.w	$10(a1)
0001C43C 6700                       		beq.s	loc_1A28C
0001C43E 117C 000B 001C             		move.b	#$B,$1C(a0)
0001C444                            
0001C444                            loc_1A28C:
0001C444 43FA D8BE                  		lea	Ani_Eggman(pc),a1
0001C448 4EB9 0000 B990             		jsr	AnimateSprite
0001C44E                            
0001C44E                            loc_1A296:
0001C44E 2268 0034                  		movea.l	$34(a0),a1
0001C452 3169 0008 0008             		move.w	8(a1),8(a0)
0001C458 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C45E                            
0001C45E                            loc_1A2A6:
0001C45E 2268 0034                  		movea.l	$34(a0),a1
0001C462 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001C468 7003                       		moveq	#3,d0
0001C46A C028 0022                  		and.b	$22(a0),d0
0001C46E 0228 00FC 0001             		andi.b	#-4,1(a0)
0001C474 8128 0001                  		or.b	d0,1(a0)
0001C478 4EF9 0000 E930             		jmp	DisplaySprite
0001C47E                            ; ===========================================================================
0001C47E                            
0001C47E                            loc_1A2C6:				; XREF: Obj85_Index
0001C47E 2268 0034                  		movea.l	$34(a0),a1
0001C482 1011                       		move.b	(a1),d0
0001C484 B010                       		cmp.b	(a0),d0
0001C486 6600 FA7C                  		bne.w	Obj85_Delete
0001C48A 0CA9 0001 9D54 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C492 6700                       		beq.s	loc_1A2E4
0001C494 117C 000A 001A             		move.b	#$A,$1A(a0)
0001C49A 60C2                       		bra.s	loc_1A2A6
0001C49C                            ; ===========================================================================
0001C49C                            
0001C49C                            loc_1A2E4:
0001C49C 117C 0001 001C             		move.b	#1,$1C(a0)
0001C4A2 4A29 0021                  		tst.b	$21(a1)
0001C4A6 6F00                       		ble.s	loc_1A312
0001C4A8 117C 0006 001C             		move.b	#6,$1C(a0)
0001C4AE 217C 0001 9D54 0004        		move.l	#Map_Eggman,4(a0)
0001C4B6 317C 0400 0002             		move.w	#$400,2(a0)
0001C4BC 43FA D846                  		lea	Ani_Eggman(pc),a1
0001C4C0 4EB9 0000 B990             		jsr	AnimateSprite
0001C4C6 6000 FF86                  		bra.w	loc_1A296
0001C4CA                            ; ===========================================================================
0001C4CA                            
0001C4CA                            loc_1A312:
0001C4CA 4A28 0001                  		tst.b	1(a0)
0001C4CE 6A00 FA34                  		bpl.w	Obj85_Delete
0001C4D2 6100 D378                  		bsr.w	BossDefeated
0001C4D6 117C 0002 0018             		move.b	#2,$18(a0)
0001C4DC 117C 0000 001C             		move.b	#0,$1C(a0)
0001C4E2 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001C4EA 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001C4F0 43FA 0000                  		lea	Ani_obj85(pc),a1
0001C4F4 4EB9 0000 B990             		jsr	AnimateSprite
0001C4FA 6000 FF52                  		bra.w	loc_1A296
0001C4FE                            ; ===========================================================================
0001C4FE                            
0001C4FE                            loc_1A346:				; XREF: Obj85_Index
0001C4FE 08E8 0000 0022             		bset	#0,$22(a0)
0001C504 2268 0034                  		movea.l	$34(a0),a1
0001C508 0CA9 0001 9D54 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C510 6700                       		beq.s	loc_1A35E
0001C512 6000 FF4A                  		bra.w	loc_1A2A6
0001C516                            ; ===========================================================================
0001C516                            
0001C516                            loc_1A35E:
0001C516 3169 0008 0008             		move.w	8(a1),8(a0)
0001C51C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C522 4A28 001E                  		tst.b	$1E(a0)
0001C526 6600                       		bne.s	loc_1A376
0001C528 117C 0014 001E             		move.b	#$14,$1E(a0)
0001C52E                            
0001C52E                            loc_1A376:
0001C52E 5328 001E                  		subq.b	#1,$1E(a0)
0001C532 6E00                       		bgt.s	loc_1A38A
0001C534 5228 001A                  		addq.b	#1,$1A(a0)
0001C538 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001C53E 6E00 F9C4                  		bgt.w	Obj85_Delete
0001C542                            
0001C542                            loc_1A38A:
0001C542 6000 FF0A                  		bra.w	loc_1A296
0001C546                            ; ===========================================================================
0001C546                            
0001C546                            loc_1A38E:				; XREF: Obj85_Index
0001C546 117C 000B 001A             		move.b	#$B,$1A(a0)
0001C54C 3038 D008                  		move.w	($FFFFD008).w,d0
0001C550 9068 0008                  		sub.w	8(a0),d0
0001C554 6500                       		bcs.s	loc_1A3A6
0001C556 4A28 0001                  		tst.b	1(a0)
0001C55A 6A00 F9A8                  		bpl.w	Obj85_Delete
0001C55E                            
0001C55E                            loc_1A3A6:
0001C55E 4EF9 0000 E930             		jmp	DisplaySprite
0001C564                            ; ===========================================================================
0001C564                            
0001C564                            loc_1A3AC:				; XREF: Obj85_Index
0001C564 117C 0000 001A             		move.b	#0,$1A(a0)
0001C56A 08E8 0000 0022             		bset	#0,$22(a0)
0001C570 2268 0034                  		movea.l	$34(a0),a1
0001C574 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C57A 6600                       		bne.s	loc_1A3D0
0001C57C 0CA9 0001 9D54 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C584 6700 F97E                  		beq.w	Obj85_Delete
0001C588                            
0001C588                            loc_1A3D0:
0001C588 6000 FED4                  		bra.w	loc_1A2A6
0001C58C                            ; ===========================================================================
0001C58C                            Ani_obj85:
0001C58C                            	include "_anim\obj85.asm"
0001C58C                            ; ---------------------------------------------------------------------------
0001C58C                            ; Animation script - Eggman (FZ)
0001C58C                            ; ---------------------------------------------------------------------------
0001C58C 0000                       		dc.w byte_1A3D6-Ani_obj85
0001C58E 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001C592                            		even
0001C592                            		even
0001C592                            
0001C592                            Map_Eggman2:
0001C592                            	include "_maps\Eggman2.asm"
0001C592                            ; ---------------------------------------------------------------------------
0001C592                            ; Sprite mappings - Eggman (FZ)
0001C592                            ; ---------------------------------------------------------------------------
0001C592 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001C594 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001C596 06                         byte_1A3DE:	dc.b 6
0001C597 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001C59C EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001C5A1 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C5A6 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C5AB FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C5B0 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C5B5 06                         byte_1A3FD:	dc.b 6
0001C5B6 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001C5BB EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001C5C0 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C5C5 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C5CA FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C5CF 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C5D4                            		even
0001C5D4                            		even
0001C5D4                            
0001C5D4                            Map_FZBoss:
0001C5D4                            	include "_maps\FZ boss.asm"
0001C5D4                            ; ---------------------------------------------------------------------------
0001C5D4                            ; Sprite mappings - boss (FZ)
0001C5D4                            ; ---------------------------------------------------------------------------
0001C5D4 0000                       		dc.w byte_1A422-Map_FZBoss
0001C5D6 0000                       		dc.w byte_1A42D-Map_FZBoss
0001C5D8 0000                       		dc.w byte_1A43D-Map_FZBoss
0001C5DA 02                         byte_1A422:	dc.b 2
0001C5DB 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001C5E0 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001C5E5 03                         byte_1A42D:	dc.b 3
0001C5E6 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001C5EB 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001C5F0 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001C5F5 02                         byte_1A43D:	dc.b 2
0001C5F6 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001C5FB 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001C600                            		even
0001C600                            		even
0001C600                            
0001C600                            ; ===========================================================================
0001C600                            
0001C600                            Obj84_Delete:
0001C600 4EF9 0000 E980             		jmp	DeleteObject
0001C606                            ; ===========================================================================
0001C606                            ; ---------------------------------------------------------------------------
0001C606                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001C606                            ; ---------------------------------------------------------------------------
0001C606                            
0001C606                            Obj84:					; XREF: Obj_Index
0001C606 7000                       		moveq	#0,d0
0001C608 1028 0024                  		move.b	$24(a0),d0
0001C60C 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001C610 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001C614                            ; ===========================================================================
0001C614 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001C616 0000                       		dc.w loc_1A4CE-Obj84_Index
0001C618 0000                       		dc.w loc_1A57E-Obj84_Index
0001C61A                            
0001C61A 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001C61E 2550 0620                  		dc.w $2550, $620
0001C622 2490 04C0                  		dc.w $2490, $4C0
0001C626 2510 04C0                  		dc.w $2510, $4C0
0001C62A                            ; ===========================================================================
0001C62A                            
0001C62A                            Obj84_Main:				; XREF: Obj84_Index
0001C62A 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001C62E 7000                       		moveq	#0,d0
0001C630 1028 0028                  		move.b	$28(a0),d0
0001C634 D040                       		add.w	d0,d0
0001C636 D2C0                       		adda.w	d0,a1
0001C638 117C 0004 0001             		move.b	#4,1(a0)
0001C63E 08E8 0007 0001             		bset	#7,1(a0)
0001C644 08E8 0004 0001             		bset	#4,1(a0)
0001C64A 317C 0300 0002             		move.w	#$300,2(a0)
0001C650 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001C658 3159 0008                  		move.w	(a1)+,8(a0)
0001C65C 3151 000C                  		move.w	(a1),$C(a0)
0001C660 3159 0038                  		move.w	(a1)+,$38(a0)
0001C664 117C 0020 0016             		move.b	#$20,$16(a0)
0001C66A 117C 0060 0017             		move.b	#$60,$17(a0)
0001C670 117C 0020 0019             		move.b	#$20,$19(a0)
0001C676 117C 0060 0016             		move.b	#$60,$16(a0)
0001C67C 117C 0003 0018             		move.b	#3,$18(a0)
0001C682 5428 0024                  		addq.b	#2,$24(a0)
0001C686                            
0001C686                            loc_1A4CE:				; XREF: Obj84_Index
0001C686 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C68C 6F00                       		ble.s	loc_1A4DC
0001C68E 08E8 0001 0001             		bset	#1,1(a0)
0001C694                            
0001C694                            loc_1A4DC:
0001C694 42A8 003C                  		clr.l	$3C(a0)
0001C698 4A28 0029                  		tst.b	$29(a0)
0001C69C 6700                       		beq.s	loc_1A4EA
0001C69E 5428 0024                  		addq.b	#2,$24(a0)
0001C6A2                            
0001C6A2                            loc_1A4EA:
0001C6A2 2028 003C                  		move.l	$3C(a0),d0
0001C6A6 2228 0038                  		move.l	$38(a0),d1
0001C6AA D280                       		add.l	d0,d1
0001C6AC 4841                       		swap	d1
0001C6AE 3141 000C                  		move.w	d1,$C(a0)
0001C6B2 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001C6B8 6600                       		bne.s	loc_1A524
0001C6BA 4A68 0030                  		tst.w	$30(a0)
0001C6BE 6A00                       		bpl.s	loc_1A524
0001C6C0 70F6                       		moveq	#-$A,d0
0001C6C2 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C6C8 6F00                       		ble.s	loc_1A514
0001C6CA 700E                       		moveq	#$E,d0
0001C6CC                            
0001C6CC                            loc_1A514:
0001C6CC D240                       		add.w	d0,d1
0001C6CE 2268 0034                  		movea.l	$34(a0),a1
0001C6D2 3341 000C                  		move.w	d1,$C(a1)
0001C6D6 3368 0008 0008             		move.w	8(a0),8(a1)
0001C6DC                            
0001C6DC                            loc_1A524:
0001C6DC 323C 002B                  		move.w	#$2B,d1
0001C6E0 343C 0060                  		move.w	#$60,d2
0001C6E4 363C 0061                  		move.w	#$61,d3
0001C6E8 3828 0008                  		move.w	8(a0),d4
0001C6EC 4EB9 0001 129E             		jsr	SolidObject
0001C6F2 7000                       		moveq	#0,d0
0001C6F4 3228 003C                  		move.w	$3C(a0),d1
0001C6F8 6A00                       		bpl.s	loc_1A550
0001C6FA 4441                       		neg.w	d1
0001C6FC 5141                       		subq.w	#8,d1
0001C6FE 6500                       		bcs.s	loc_1A55C
0001C700 5200                       		addq.b	#1,d0
0001C702 E841                       		asr.w	#4,d1
0001C704 D041                       		add.w	d1,d0
0001C706 6000                       		bra.s	loc_1A55C
0001C708                            ; ===========================================================================
0001C708                            
0001C708                            loc_1A550:
0001C708 0441 0027                  		subi.w	#$27,d1
0001C70C 6500                       		bcs.s	loc_1A55C
0001C70E 5200                       		addq.b	#1,d0
0001C710 E841                       		asr.w	#4,d1
0001C712 D041                       		add.w	d1,d0
0001C714                            
0001C714                            loc_1A55C:
0001C714 1140 001A                  		move.b	d0,$1A(a0)
0001C718 3038 D008                  		move.w	($FFFFD008).w,d0
0001C71C 9068 0008                  		sub.w	8(a0),d0
0001C720 6B00                       		bmi.s	loc_1A578
0001C722 0440 0140                  		subi.w	#$140,d0
0001C726 6B00                       		bmi.s	loc_1A578
0001C728 4A28 0001                  		tst.b	1(a0)
0001C72C 6A00 FED2                  		bpl.w	Obj84_Delete
0001C730                            
0001C730                            loc_1A578:
0001C730 4EF9 0000 E930             		jmp	DisplaySprite
0001C736                            ; ===========================================================================
0001C736                            
0001C736                            loc_1A57E:				; XREF: Obj84_Index
0001C736 7000                       		moveq	#0,d0
0001C738 1028 0028                  		move.b	$28(a0),d0
0001C73C 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001C740 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001C744 6000 FF5C                  		bra.w	loc_1A4EA
0001C748                            ; ===========================================================================
0001C748 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001C74A 0000                       		dc.w loc_1A598-off_1A590
0001C74C 0000                       		dc.w loc_1A604-off_1A590
0001C74E 0000                       		dc.w loc_1A604-off_1A590
0001C750                            ; ===========================================================================
0001C750                            
0001C750                            loc_1A598:				; XREF: off_1A590
0001C750 4A28 0029                  		tst.b	$29(a0)
0001C754 6600                       		bne.s	loc_1A5D4
0001C756 2268 0034                  		movea.l	$34(a0),a1
0001C75A 4A29 0021                  		tst.b	$21(a1)
0001C75E 6600                       		bne.s	loc_1A5B4
0001C760 6100 D0EA                  		bsr.w	BossDefeated
0001C764 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001C76C                            
0001C76C                            loc_1A5B4:
0001C76C 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001C774 6400                       		bcc.s	locret_1A602
0001C776 42A8 003C                  		clr.l	$3C(a0)
0001C77A 2268 0034                  		movea.l	$34(a0),a1
0001C77E 5369 0032                  		subq.w	#1,$32(a1)
0001C782 4269 0030                  		clr.w	$30(a1)
0001C786 5528 0024                  		subq.b	#2,$24(a0)
0001C78A 4E75                       		rts	
0001C78C                            ; ===========================================================================
0001C78C                            
0001C78C                            loc_1A5D4:
0001C78C 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001C792 6C00                       		bge.s	loc_1A5E4
0001C794 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001C79C                            
0001C79C                            loc_1A5E4:
0001C79C 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001C7A4 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001C7AA 6E00                       		bgt.s	locret_1A602
0001C7AC 4268 003E                  		clr.w	$3E(a0)
0001C7B0 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001C7B6 4228 0029                  		clr.b	$29(a0)
0001C7BA                            
0001C7BA                            locret_1A602:
0001C7BA 4E75                       		rts	
0001C7BC                            ; ===========================================================================
0001C7BC                            
0001C7BC                            loc_1A604:				; XREF: off_1A590
0001C7BC 08E8 0001 0001             		bset	#1,1(a0)
0001C7C2 4A28 0029                  		tst.b	$29(a0)
0001C7C6 6600                       		bne.s	loc_1A646
0001C7C8 2268 0034                  		movea.l	$34(a0),a1
0001C7CC 4A29 0021                  		tst.b	$21(a1)
0001C7D0 6600                       		bne.s	loc_1A626
0001C7D2 6100 D078                  		bsr.w	BossDefeated
0001C7D6 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001C7DE                            
0001C7DE                            loc_1A626:
0001C7DE 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001C7E6 6400                       		bcc.s	locret_1A674
0001C7E8 42A8 003C                  		clr.l	$3C(a0)
0001C7EC 2268 0034                  		movea.l	$34(a0),a1
0001C7F0 5369 0032                  		subq.w	#1,$32(a1)
0001C7F4 4269 0030                  		clr.w	$30(a1)
0001C7F8 5528 0024                  		subq.b	#2,$24(a0)
0001C7FC 4E75                       		rts	
0001C7FE                            ; ===========================================================================
0001C7FE                            
0001C7FE                            loc_1A646:
0001C7FE 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001C804 6D00                       		blt.s	loc_1A656
0001C806 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001C80E                            
0001C80E                            loc_1A656:
0001C80E 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001C816 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001C81C 6D00                       		blt.s	locret_1A674
0001C81E 4268 003E                  		clr.w	$3E(a0)
0001C822 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001C828 4228 0029                  		clr.b	$29(a0)
0001C82C                            
0001C82C                            locret_1A674:
0001C82C 4E75                       		rts	
0001C82E                            ; ===========================================================================
0001C82E                            ; ---------------------------------------------------------------------------
0001C82E                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C82E                            ; ---------------------------------------------------------------------------
0001C82E                            Map_obj84:
0001C82E                            	include "_maps\obj84.asm"
0001C82E                            ; ---------------------------------------------------------------------------
0001C82E                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C82E                            ; ---------------------------------------------------------------------------
0001C82E 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001C832 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001C836 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001C83A 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C83E 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C842 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001C846 06                         byte_1A68E:	dc.b 6
0001C847 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C84C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C851 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C856 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C85B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C860 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C865 08                         byte_1A6AD:	dc.b 8
0001C866 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C86B A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C870 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C875 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C87A B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C87F B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C884 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C889 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C88E 0A                         byte_1A6D6:	dc.b $A
0001C88F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C894 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C899 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C89E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C8A3 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C8A8 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C8AD D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C8B2 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C8B7 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C8BC F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C8C1 0C                         byte_1A709:	dc.b $C
0001C8C2 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C8C7 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C8CC B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C8D1 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C8D6 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C8DB B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C8E0 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C8E5 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C8EA F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C8EF F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C8F4 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C8F9 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C8FE 0D                         byte_1A746:	dc.b $D
0001C8FF A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C904 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C909 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C90E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C913 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C918 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C91D D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C922 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C927 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C92C F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C931 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C936 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C93B 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C940 0E                         byte_1A788:	dc.b $E
0001C941 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C946 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C94B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C950 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C955 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C95A B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C95F D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C964 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C969 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C96E F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C973 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C978 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C97D 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C982 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001C987 02                         byte_1A7CF:	dc.b 2
0001C988 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001C98D 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001C992                            		even
0001C992                            		even
0001C992                            
0001C992                            ; ===========================================================================
0001C992                            ; ---------------------------------------------------------------------------
0001C992                            ; Object 86 - energy balls (FZ)
0001C992                            ; ---------------------------------------------------------------------------
0001C992                            
0001C992                            Obj86:					; XREF: Obj_Index
0001C992 7000                       		moveq	#0,d0
0001C994 1028 0024                  		move.b	$24(a0),d0
0001C998 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001C99C 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001C9A0                            ; ===========================================================================
0001C9A0 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001C9A2 0000                       		dc.w Obj86_Generator-Obj86_Index
0001C9A4 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001C9A6 0000                       		dc.w loc_1A962-Obj86_Index
0001C9A8 0000                       		dc.w loc_1A982-Obj86_Index
0001C9AA                            ; ===========================================================================
0001C9AA                            
0001C9AA                            Obj86_Main:				; XREF: Obj86_Index
0001C9AA 317C 2588 0008             		move.w	#$2588,8(a0)
0001C9B0 317C 053C 000C             		move.w	#$53C,$C(a0)
0001C9B6 317C 0300 0002             		move.w	#$300,2(a0)
0001C9BC 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001C9C4 117C 0000 001C             		move.b	#0,$1C(a0)
0001C9CA 117C 0003 0018             		move.b	#3,$18(a0)
0001C9D0 117C 0008 0017             		move.b	#8,$17(a0)
0001C9D6 117C 0008 0016             		move.b	#8,$16(a0)
0001C9DC 117C 0004 0001             		move.b	#4,1(a0)
0001C9E2 08E8 0007 0001             		bset	#7,1(a0)
0001C9E8 5428 0024                  		addq.b	#2,$24(a0)
0001C9EC                            
0001C9EC                            Obj86_Generator:			; XREF: Obj86_Index
0001C9EC 2268 0034                  		movea.l	$34(a0),a1
0001C9F0 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001C9F6 6600                       		bne.s	loc_1A850
0001C9F8 10BC 003F                  		move.b	#$3F,(a0)
0001C9FC 117C 0000 0024             		move.b	#0,$24(a0)
0001CA02 4EF9 0000 E930             		jmp	DisplaySprite
0001CA08                            ; ===========================================================================
0001CA08                            
0001CA08                            loc_1A850:
0001CA08 117C 0000 001C             		move.b	#0,$1C(a0)
0001CA0E 4A28 0029                  		tst.b	$29(a0)
0001CA12 6700                       		beq.s	loc_1A86C
0001CA14 5428 0024                  		addq.b	#2,$24(a0)
0001CA18 117C 0001 001C             		move.b	#1,$1C(a0)
0001CA1E 117C 003E 0028             		move.b	#$3E,$28(a0)
0001CA24                            
0001CA24                            loc_1A86C:
0001CA24 323C 0013                  		move.w	#$13,d1
0001CA28 343C 0008                  		move.w	#8,d2
0001CA2C 363C 0011                  		move.w	#$11,d3
0001CA30 3828 0008                  		move.w	8(a0),d4
0001CA34 4EB9 0001 129E             		jsr	SolidObject
0001CA3A 3038 D008                  		move.w	($FFFFD008).w,d0
0001CA3E 9068 0008                  		sub.w	8(a0),d0
0001CA42 6B00                       		bmi.s	loc_1A89A
0001CA44 0440 0140                  		subi.w	#$140,d0
0001CA48 6B00                       		bmi.s	loc_1A89A
0001CA4A 4A28 0001                  		tst.b	1(a0)
0001CA4E 6A00 FBB0                  		bpl.w	Obj84_Delete
0001CA52                            
0001CA52                            loc_1A89A:
0001CA52 43FA 0000                  		lea	Ani_obj86(pc),a1
0001CA56 4EB9 0000 B990             		jsr	AnimateSprite
0001CA5C 4EF9 0000 E930             		jmp	DisplaySprite
0001CA62                            ; ===========================================================================
0001CA62                            
0001CA62                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001CA62 4A28 0029                  		tst.b	$29(a0)
0001CA66 6700 0000                  		beq.w	loc_1A954
0001CA6A 4228 0029                  		clr.b	$29(a0)
0001CA6E D068 0030                  		add.w	$30(a0),d0
0001CA72 0240 001E                  		andi.w	#$1E,d0
0001CA76 D4C0                       		adda.w	d0,a2
0001CA78 5868 0030                  		addq.w	#4,$30(a0)
0001CA7C 4268 0032                  		clr.w	$32(a0)
0001CA80 7403                       		moveq	#3,d2
0001CA82                            
0001CA82                            Obj86_Loop:
0001CA82 4EB9 0000 F09C             		jsr	SingleObjLoad2
0001CA88 6600 0000                  		bne.w	loc_1A954
0001CA8C 12BC 0086                  		move.b	#$86,(a1)
0001CA90 3368 0008 0008             		move.w	8(a0),8(a1)
0001CA96 337C 053C 000C             		move.w	#$53C,$C(a1)
0001CA9C 137C 0008 0024             		move.b	#8,$24(a1)
0001CAA2 337C 2300 0002             		move.w	#$2300,2(a1)
0001CAA8 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001CAB0 137C 000C 0016             		move.b	#$C,$16(a1)
0001CAB6 137C 000C 0017             		move.b	#$C,$17(a1)
0001CABC 137C 0000 0020             		move.b	#0,$20(a1)
0001CAC2 137C 0003 0018             		move.b	#3,$18(a1)
0001CAC8 337C 003E 0028             		move.w	#$3E,$28(a1)
0001CACE 137C 0004 0001             		move.b	#4,1(a1)
0001CAD4 08E9 0007 0001             		bset	#7,1(a1)
0001CADA 2348 0034                  		move.l	a0,$34(a1)
0001CADE 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001CAE4 3228 0032                  		move.w	$32(a0),d1
0001CAE8 C3FC FFB1                  		muls.w	#-$4F,d1
0001CAEC 0641 2578                  		addi.w	#$2578,d1
0001CAF0 0240 001F                  		andi.w	#$1F,d0
0001CAF4 0440 0010                  		subi.w	#$10,d0
0001CAF8 D041                       		add.w	d1,d0
0001CAFA 3340 0030                  		move.w	d0,$30(a1)
0001CAFE 5268 0032                  		addq.w	#1,$32(a0)
0001CB02 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001CB08 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001CB0C                            
0001CB0C                            loc_1A954:
0001CB0C 4A68 0032                  		tst.w	$32(a0)
0001CB10 6600                       		bne.s	loc_1A95E
0001CB12 5428 0024                  		addq.b	#2,$24(a0)
0001CB16                            
0001CB16                            loc_1A95E:
0001CB16 6000 FF0C                  		bra.w	loc_1A86C
0001CB1A                            ; ===========================================================================
0001CB1A                            
0001CB1A                            loc_1A962:				; XREF: Obj86_Index
0001CB1A 117C 0002 001C             		move.b	#2,$1C(a0)
0001CB20 4A68 0038                  		tst.w	$38(a0)
0001CB24 6600                       		bne.s	loc_1A97E
0001CB26 117C 0002 0024             		move.b	#2,$24(a0)
0001CB2C 2268 0034                  		movea.l	$34(a0),a1
0001CB30 337C FFFF 0032             		move.w	#-1,$32(a1)
0001CB36                            
0001CB36                            loc_1A97E:
0001CB36 6000 FEEC                  		bra.w	loc_1A86C
0001CB3A                            ; ===========================================================================
0001CB3A                            
0001CB3A                            loc_1A982:				; XREF: Obj86_Index
0001CB3A 7000                       		moveq	#0,d0
0001CB3C 1028 0025                  		move.b	$25(a0),d0
0001CB40 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001CB44 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001CB48 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001CB4C 4EB9 0000 B990             		jsr	AnimateSprite
0001CB52 4EF9 0000 E930             		jmp	DisplaySprite
0001CB58                            ; ===========================================================================
0001CB58 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001CB5A 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001CB5C 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001CB5E                            ; ===========================================================================
0001CB5E                            
0001CB5E                            loc_1A9A6:				; XREF: Obj86_Index2
0001CB5E 3028 0030                  		move.w	$30(a0),d0
0001CB62 9068 0008                  		sub.w	8(a0),d0
0001CB66 E940                       		asl.w	#4,d0
0001CB68 3140 0010                  		move.w	d0,$10(a0)
0001CB6C 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001CB72 5428 0025                  		addq.b	#2,$25(a0)
0001CB76 4E75                       		rts	
0001CB78                            ; ===========================================================================
0001CB78                            
0001CB78                            loc_1A9C0:				; XREF: Obj86_Index2
0001CB78 4A68 0010                  		tst.w	$10(a0)
0001CB7C 6700                       		beq.s	loc_1A9E6
0001CB7E 4EB9 0000 E916             		jsr	SpeedToPos
0001CB84 3028 0008                  		move.w	8(a0),d0
0001CB88 9068 0030                  		sub.w	$30(a0),d0
0001CB8C 6400                       		bcc.s	loc_1A9E6
0001CB8E 4268 0010                  		clr.w	$10(a0)
0001CB92 D168 0008                  		add.w	d0,8(a0)
0001CB96 2268 0034                  		movea.l	$34(a0),a1
0001CB9A 5369 0032                  		subq.w	#1,$32(a1)
0001CB9E                            
0001CB9E                            loc_1A9E6:
0001CB9E 117C 0000 001C             		move.b	#0,$1C(a0)
0001CBA4 5368 0028                  		subq.w	#1,$28(a0)
0001CBA8 6600                       		bne.s	locret_1AA1C
0001CBAA 5428 0025                  		addq.b	#2,$25(a0)
0001CBAE 117C 0001 001C             		move.b	#1,$1C(a0)
0001CBB4 117C 009A 0020             		move.b	#$9A,$20(a0)
0001CBBA 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001CBC0 7000                       		moveq	#0,d0
0001CBC2 3038 D008                  		move.w	($FFFFD008).w,d0
0001CBC6 9068 0008                  		sub.w	8(a0),d0
0001CBCA 3140 0010                  		move.w	d0,$10(a0)
0001CBCE 317C 0140 0012             		move.w	#$140,$12(a0)
0001CBD4                            
0001CBD4                            locret_1AA1C:
0001CBD4 4E75                       		rts	
0001CBD6                            ; ===========================================================================
0001CBD6                            
0001CBD6                            loc_1AA1E:				; XREF: Obj86_Index2
0001CBD6 4EB9 0000 E916             		jsr	SpeedToPos
0001CBDC 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001CBE2 6400                       		bcc.s	loc_1AA34
0001CBE4 5368 0028                  		subq.w	#1,$28(a0)
0001CBE8 6700                       		beq.s	loc_1AA34
0001CBEA 4E75                       		rts	
0001CBEC                            ; ===========================================================================
0001CBEC                            
0001CBEC                            loc_1AA34:
0001CBEC 2268 0034                  		movea.l	$34(a0),a1
0001CBF0 5369 0038                  		subq.w	#1,$38(a1)
0001CBF4 6000 FA0A                  		bra.w	Obj84_Delete
0001CBF8                            ; ===========================================================================
0001CBF8                            Ani_obj86:
0001CBF8                            	include "_anim\obj86.asm"
0001CBF8                            ; ---------------------------------------------------------------------------
0001CBF8                            ; Animation script - energy ball launcher (FZ)
0001CBF8                            ; ---------------------------------------------------------------------------
0001CBF8 0000                       		dc.w byte_1AA46-Ani_obj86
0001CBFA 0000                       		dc.w byte_1AA4A-Ani_obj86
0001CBFC 0000                       		dc.w byte_1AA50-Ani_obj86
0001CBFE 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001CC02 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001CC08 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001CC0E                            		even
0001CC0E                            		even
0001CC0E                            
0001CC0E                            ; ---------------------------------------------------------------------------
0001CC0E                            ; Sprite mappings - energy ball	launcher (FZ)
0001CC0E                            ; ---------------------------------------------------------------------------
0001CC0E                            Map_obj86:
0001CC0E                            	include "_maps\obj86.asm"
0001CC0E                            ; ---------------------------------------------------------------------------
0001CC0E                            ; Sprite mappings - energy ball	launcher (FZ)
0001CC0E                            ; ---------------------------------------------------------------------------
0001CC0E 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001CC12 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001CC16 01                         byte_1AA5E:	dc.b 1
0001CC17 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001CC1C 01                         byte_1AA64:	dc.b 1
0001CC1D F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001CC22 01                         byte_1AA6A:	dc.b 1
0001CC23 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001CC28 01                         byte_1AA70:	dc.b 1
0001CC29 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001CC2E                            		even
0001CC2E                            		even
0001CC2E                            
0001CC2E                            Ani_obj86a:
0001CC2E                            	include "_anim\obj86a.asm"
0001CC2E                            ; ---------------------------------------------------------------------------
0001CC2E                            ; Animation script - energy balls (FZ)
0001CC2E                            ; ---------------------------------------------------------------------------
0001CC2E 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001CC30 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001CC32 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001CC41 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001CC50 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001CC54 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001CC5E                            		even
0001CC5E                            		even
0001CC5E                            
0001CC5E                            ; ---------------------------------------------------------------------------
0001CC5E                            ; Sprite mappings - energy balls (FZ)
0001CC5E                            ; ---------------------------------------------------------------------------
0001CC5E                            Map_obj86a:
0001CC5E                            	include "_maps\obj86a.asm"
0001CC5E                            ; ---------------------------------------------------------------------------
0001CC5E                            ; Sprite mappings - energy balls (FZ)
0001CC5E                            ; ---------------------------------------------------------------------------
0001CC5E 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001CC62 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001CC66 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001CC6A 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001CC6E 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001CC72 0000                       		dc.w byte_1AB20-Map_obj86a
0001CC74 02                         byte_1AABC:	dc.b 2
0001CC75 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001CC7A 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001CC7F 02                         byte_1AAC7:	dc.b 2
0001CC80 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001CC85 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001CC8A 02                         byte_1AAD2:	dc.b 2
0001CC8B F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001CC90 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001CC95 02                         byte_1AADD:	dc.b 2
0001CC96 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001CC9B 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001CCA0 02                         byte_1AAE8:	dc.b 2
0001CCA1 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001CCA6 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001CCAB 02                         byte_1AAF3:	dc.b 2
0001CCAC F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001CCB1 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001CCB6 01                         byte_1AAFE:	dc.b 1
0001CCB7 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001CCBC 01                         byte_1AB04:	dc.b 1
0001CCBD F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001CCC2 02                         byte_1AB0A:	dc.b 2
0001CCC3 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001CCC8 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001CCCD 02                         byte_1AB15:	dc.b 2
0001CCCE F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001CCD3 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001CCD8 00                         byte_1AB20:	dc.b 0
0001CCDA 00                         		even
0001CCDA 00                         		even
0001CCDA                            
0001CCDA                            ; ===========================================================================
0001CCDA                            ; ---------------------------------------------------------------------------
0001CCDA                            ; Object 3E - prison capsule
0001CCDA                            ; ---------------------------------------------------------------------------
0001CCDA                            
0001CCDA                            Obj3E:					; XREF: Obj_Index
0001CCDA 7000                       		moveq	#0,d0
0001CCDC 1028 0024                  		move.b	$24(a0),d0
0001CCE0 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001CCE4 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001CCE8 3028 0008                  		move.w	8(a0),d0
0001CCEC 0240 FF80                  		andi.w	#$FF80,d0
0001CCF0 3238 F700                  		move.w	($FFFFF700).w,d1
0001CCF4 0441 0080                  		subi.w	#$80,d1
0001CCF8 0241 FF80                  		andi.w	#$FF80,d1
0001CCFC 9041                       		sub.w	d1,d0
0001CCFE 0C40 0280                  		cmpi.w	#$280,d0
0001CD02 6300                       		bls.s	Obj3E_NoDel
0001CD04 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001CD08 6700                       		beq.s	Obj3E_Delete		; if it's zero, don't remember object
0001CD0A 3440                       		movea.w	d0,a2	; load address into a2
0001CD0C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001CD10 6000                       		bra.s	Obj3E_Delete	; and delete object
0001CD12                            
0001CD12                            Obj3E_NoDel:
0001CD12 4EF9 0000 E930             		jmp	DisplaySprite
0001CD18                            ; ===========================================================================
0001CD18                            
0001CD18                            Obj3E_Delete:
0001CD18 4EF9 0000 E980             		jmp	DeleteObject
0001CD1E                            ; ===========================================================================
0001CD1E 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001CD20 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001CD22 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001CD24 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CD26 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CD28 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CD2A 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001CD2C 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001CD2E                            
0001CD2E 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001CD32 040C 0501                  		dc.b 4,	$C, 5, 1
0001CD36 0610 0403                  		dc.b 6,	$10, 4,	3
0001CD3A 0810 0305                  		dc.b 8,	$10, 3,	5
0001CD3E                            ; ===========================================================================
0001CD3E                            
0001CD3E                            Obj3E_Main:				; XREF: Obj3E_Index
0001CD3E 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001CD46 317C 049D 0002             		move.w	#$49D,2(a0)
0001CD4C 117C 0004 0001             		move.b	#4,1(a0)
0001CD52 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001CD58 7000                       		moveq	#0,d0
0001CD5A 1028 0028                  		move.b	$28(a0),d0
0001CD5E E548                       		lsl.w	#2,d0
0001CD60 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001CD64 1159 0024                  		move.b	(a1)+,$24(a0)
0001CD68 1159 0019                  		move.b	(a1)+,$19(a0)
0001CD6C 1159 0018                  		move.b	(a1)+,$18(a0)
0001CD70 1159 001A                  		move.b	(a1)+,$1A(a0)
0001CD74 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001CD78 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001CD7A 117C 0006 0020             		move.b	#6,$20(a0)
0001CD80 117C 0008 0021             		move.b	#8,$21(a0)
0001CD86                            
0001CD86                            Obj3E_Not02:
0001CD86 4E75                       		rts	
0001CD88                            ; ===========================================================================
0001CD88                            
0001CD88                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001CD88 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001CD8E 6700                       		beq.s	Obj3E_ChkOpened
0001CD90 323C 002B                  		move.w	#$2B,d1
0001CD94 343C 0018                  		move.w	#$18,d2
0001CD98 363C 0018                  		move.w	#$18,d3
0001CD9C 3828 0008                  		move.w	8(a0),d4
0001CDA0 4EF9 0001 129E             		jmp	SolidObject
0001CDA6                            ; ===========================================================================
0001CDA6                            
0001CDA6                            Obj3E_ChkOpened:
0001CDA6 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001CDAA 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001CDAC 4228 0025                  		clr.b	$25(a0)
0001CDB0 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001CDB6 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001CDBC                            
0001CDBC                            Obj3E_DoOpen:
0001CDBC 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001CDC2 4E75                       		rts	
0001CDC4                            ; ===========================================================================
0001CDC4                            
0001CDC4                            Obj3E_Switched:				; XREF: Obj3E_Index
0001CDC4 323C 0017                  		move.w	#$17,d1
0001CDC8 343C 0008                  		move.w	#8,d2
0001CDCC 363C 0008                  		move.w	#8,d3
0001CDD0 3828 0008                  		move.w	8(a0),d4
0001CDD4 4EB9 0001 129E             		jsr	SolidObject
0001CDDA 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001CDE0 4EB9 0000 B990             		jsr	AnimateSprite
0001CDE6 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001CDEC 4A28 0025                  		tst.b	$25(a0)
0001CDF0 6700                       		beq.s	locret_1AC60
0001CDF2 5068 000C                  		addq.w	#8,$C(a0)
0001CDF6 117C 000A 0024             		move.b	#$A,$24(a0)
0001CDFC 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001CE02 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001CE06 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001CE0A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001CE10 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001CE16 4228 0025                  		clr.b	$25(a0)
0001CE1A 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001CE20 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001CE26                            
0001CE26                            locret_1AC60:
0001CE26 4E75                       		rts	
0001CE28                            ; ===========================================================================
0001CE28                            
0001CE28                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001CE28 7007                       		moveq	#7,d0
0001CE2A C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001CE2E 6600                       		bne.s	loc_1ACA0
0001CE30 4EB9 0000 F086             		jsr	SingleObjLoad
0001CE36 6600                       		bne.s	loc_1ACA0
0001CE38 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001CE3C 3368 0008 0008             		move.w	8(a0),8(a1)
0001CE42 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CE48 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001CE4E 7200                       		moveq	#0,d1
0001CE50 1200                       		move.b	d0,d1
0001CE52 E409                       		lsr.b	#2,d1
0001CE54 0441 0020                  		subi.w	#$20,d1
0001CE58 D369 0008                  		add.w	d1,8(a1)
0001CE5C E048                       		lsr.w	#8,d0
0001CE5E E608                       		lsr.b	#3,d0
0001CE60 D169 000C                  		add.w	d0,$C(a1)
0001CE64                            
0001CE64                            loc_1ACA0:
0001CE64 5368 001E                  		subq.w	#1,$1E(a0)
0001CE68 6700                       		beq.s	Obj3E_MakeAnimal
0001CE6A 4E75                       		rts	
0001CE6C                            ; ===========================================================================
0001CE6C                            
0001CE6C                            Obj3E_MakeAnimal:
0001CE6C 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001CE72 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001CE78 117C 0006 001A             		move.b	#6,$1A(a0)
0001CE7E 317C 0096 001E             		move.w	#$96,$1E(a0)
0001CE84 0668 0020 000C             		addi.w	#$20,$C(a0)
0001CE8A 7C07                       		moveq	#7,d6
0001CE8C 3A3C 009A                  		move.w	#$9A,d5
0001CE90 78E4                       		moveq	#-$1C,d4
0001CE92                            
0001CE92                            Obj3E_Loop:
0001CE92 4EB9 0000 F086             		jsr	SingleObjLoad
0001CE98 6600                       		bne.s	locret_1ACF8
0001CE9A 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001CE9E 3368 0008 0008             		move.w	8(a0),8(a1)
0001CEA4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CEAA D969 0008                  		add.w	d4,8(a1)
0001CEAE 5E44                       		addq.w	#7,d4
0001CEB0 3345 0036                  		move.w	d5,$36(a1)
0001CEB4 5145                       		subq.w	#8,d5
0001CEB6 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001CEBA                            
0001CEBA                            locret_1ACF8:
0001CEBA 4E75                       		rts	
0001CEBC                            ; ===========================================================================
0001CEBC                            
0001CEBC                            Obj3E_Animals:				; XREF: Obj3E_Index
0001CEBC 7007                       		moveq	#7,d0
0001CEBE C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001CEC2 6600                       		bne.s	loc_1AD38
0001CEC4 4EB9 0000 F086             		jsr	SingleObjLoad
0001CECA 6600                       		bne.s	loc_1AD38
0001CECC 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001CED0 3368 0008 0008             		move.w	8(a0),8(a1)
0001CED6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CEDC 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001CEE2 0240 001F                  		andi.w	#$1F,d0
0001CEE6 5D40                       		subq.w	#6,d0
0001CEE8 4A41                       		tst.w	d1
0001CEEA 6A00                       		bpl.s	loc_1AD2E
0001CEEC 4440                       		neg.w	d0
0001CEEE                            
0001CEEE                            loc_1AD2E:
0001CEEE D169 0008                  		add.w	d0,8(a1)
0001CEF2 337C 000C 0036             		move.w	#$C,$36(a1)
0001CEF8                            
0001CEF8                            loc_1AD38:
0001CEF8 5368 001E                  		subq.w	#1,$1E(a0)
0001CEFC 6600                       		bne.s	locret_1AD48
0001CEFE 5428 0024                  		addq.b	#2,$24(a0)
0001CF02 317C 00B4 001E             		move.w	#180,$1E(a0)
0001CF08                            
0001CF08                            locret_1AD48:
0001CF08 4E75                       		rts	
0001CF0A                            ; ===========================================================================
0001CF0A                            
0001CF0A                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001CF0A 703E                       		moveq	#$3E,d0
0001CF0C 7228                       		moveq	#$28,d1
0001CF0E 7440                       		moveq	#$40,d2
0001CF10 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001CF14                            
0001CF14                            Obj3E_FindObj28:
0001CF14 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001CF16 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001CF18 D2C2                       		adda.w	d2,a1		; next object RAM
0001CF1A 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001CF1E                            
0001CF1E 4EB9 0001 053C             		jsr	GotThroughAct
0001CF24 4EF9 0000 E980             		jmp	DeleteObject
0001CF2A                            ; ===========================================================================
0001CF2A                            
0001CF2A                            Obj3E_Obj28Found:
0001CF2A 4E75                       		rts	
0001CF2C                            ; ===========================================================================
0001CF2C                            Ani_obj3E:
0001CF2C                            	include "_anim\obj3E.asm"
0001CF2C                            ; ---------------------------------------------------------------------------
0001CF2C                            ; Animation script - prison capsule
0001CF2C                            ; ---------------------------------------------------------------------------
0001CF2C 0000                       		dc.w byte_1AD70-Ani_obj3E
0001CF2E 0000                       		dc.w byte_1AD70-Ani_obj3E
0001CF30 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001CF34                            		even
0001CF34                            		even
0001CF34                            
0001CF34                            ; ---------------------------------------------------------------------------
0001CF34                            ; Sprite mappings - prison capsule
0001CF34                            ; ---------------------------------------------------------------------------
0001CF34                            Map_obj3E:
0001CF34                            	include "_maps\obj3E.asm"
0001CF34                            ; ---------------------------------------------------------------------------
0001CF34                            ; Sprite mappings - prison capsule
0001CF34                            ; ---------------------------------------------------------------------------
0001CF34 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001CF38 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001CF3C 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001CF40 0000                       		dc.w byte_1ADE2-Map_obj3E
0001CF42 07                         byte_1AD82:	dc.b 7
0001CF43 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001CF48 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001CF4D E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001CF52 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001CF57 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001CF5C 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001CF61 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001CF66 01                         byte_1ADA6:	dc.b 1
0001CF67 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001CF6C 06                         byte_1ADAC:	dc.b 6
0001CF6D 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001CF72 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001CF77 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001CF7C 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001CF81 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001CF86 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001CF8B 01                         byte_1ADCB:	dc.b 1
0001CF8C F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001CF91 02                         byte_1ADD1:	dc.b 2
0001CF92 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001CF97 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001CF9C 01                         byte_1ADDC:	dc.b 1
0001CF9D F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001CFA2 00                         byte_1ADE2:	dc.b 0
0001CFA4 00                         		even
0001CFA4 00                         		even
0001CFA4                            
0001CFA4                            ; ---------------------------------------------------------------------------
0001CFA4                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001CFA4                            ; ---------------------------------------------------------------------------
0001CFA4                            
0001CFA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFA4                            
0001CFA4                            
0001CFA4                            TouchResponse:				; XREF: Obj01
0001CFA4 4E71                       		nop	
0001CFA6 4EB9 0000 F18E             		jsr	(Touch_Rings).l
0001CFAC 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001CFB0 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001CFB4 5142                       		subq.w	#8,d2
0001CFB6 7A00                       		moveq	#0,d5
0001CFB8 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001CFBC 5705                       		subq.b	#3,d5
0001CFBE 9645                       		sub.w	d5,d3
0001CFC0 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001CFC6 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001CFC8 0643 000C                  		addi.w	#$C,d3
0001CFCC 7A0A                       		moveq	#$A,d5
0001CFCE                            
0001CFCE                            Touch_NoDuck:
0001CFCE 383C 0010                  		move.w	#$10,d4
0001CFD2 DA45                       		add.w	d5,d5
0001CFD4 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001CFD8 3C3C 005F                  		move.w	#$5F,d6
0001CFDC                            
0001CFDC                            Touch_Loop:
0001CFDC 4A29 0001                  		tst.b	1(a1)
0001CFE0 6A00                       		bpl.s	Touch_NextObj
0001CFE2 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001CFE6 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001CFE8                            
0001CFE8                            Touch_NextObj:
0001CFE8 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001CFEC 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001CFF0                            
0001CFF0 7000                       		moveq	#0,d0
0001CFF2 4E75                       		rts	
0001CFF4                            ; ===========================================================================
0001CFF4 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001CFF6 0C14                       		dc.b   $C, $14
0001CFF8 140C                       		dc.b  $14,  $C
0001CFFA 0410                       		dc.b	4, $10
0001CFFC 0C12                       		dc.b   $C, $12
0001CFFE 1010                       		dc.b  $10, $10
0001D000 0606                       		dc.b	6,   6
0001D002 180C                       		dc.b  $18,  $C
0001D004 0C10                       		dc.b   $C, $10
0001D006 100C                       		dc.b  $10,  $C
0001D008 0808                       		dc.b	8,   8
0001D00A 1410                       		dc.b  $14, $10
0001D00C 1408                       		dc.b  $14,   8
0001D00E 0E0E                       		dc.b   $E,  $E
0001D010 1818                       		dc.b  $18, $18
0001D012 2810                       		dc.b  $28, $10
0001D014 1018                       		dc.b  $10, $18
0001D016 0810                       		dc.b	8, $10
0001D018 2070                       		dc.b  $20, $70
0001D01A 4020                       		dc.b  $40, $20
0001D01C 8020                       		dc.b  $80, $20
0001D01E 2020                       		dc.b  $20, $20
0001D020 0808                       		dc.b	8,   8
0001D022 0404                       		dc.b	4,   4
0001D024 2008                       		dc.b  $20,   8
0001D026 0C0C                       		dc.b   $C,  $C
0001D028 0804                       		dc.b	8,   4
0001D02A 1804                       		dc.b  $18,   4
0001D02C 2804                       		dc.b  $28,   4
0001D02E 0408                       		dc.b	4,   8
0001D030 0418                       		dc.b	4, $18
0001D032 0428                       		dc.b	4, $28
0001D034 0420                       		dc.b	4, $20
0001D036 1818                       		dc.b  $18, $18
0001D038 0C18                       		dc.b   $C, $18
0001D03A 4808                       		dc.b  $48,   8
0001D03C                            ; ===========================================================================
0001D03C                            
0001D03C                            Touch_Height:				; XREF: TouchResponse
0001D03C 0240 003F                  		andi.w	#$3F,d0
0001D040 D040                       		add.w	d0,d0
0001D042 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001D046 7200                       		moveq	#0,d1
0001D048 121A                       		move.b	(a2)+,d1
0001D04A 3029 0008                  		move.w	8(a1),d0
0001D04E 9041                       		sub.w	d1,d0
0001D050 9042                       		sub.w	d2,d0
0001D052 6400                       		bcc.s	loc_1AE98
0001D054 D241                       		add.w	d1,d1
0001D056 D041                       		add.w	d1,d0
0001D058 6500                       		bcs.s	Touch_Width
0001D05A 6000 FF8C                  		bra.w	Touch_NextObj
0001D05E                            ; ===========================================================================
0001D05E                            
0001D05E                            loc_1AE98:
0001D05E B044                       		cmp.w	d4,d0
0001D060 6200 FF86                  		bhi.w	Touch_NextObj
0001D064                            
0001D064                            Touch_Width:
0001D064 7200                       		moveq	#0,d1
0001D066 121A                       		move.b	(a2)+,d1
0001D068 3029 000C                  		move.w	$C(a1),d0
0001D06C 9041                       		sub.w	d1,d0
0001D06E 9043                       		sub.w	d3,d0
0001D070 6400                       		bcc.s	loc_1AEB6
0001D072 D241                       		add.w	d1,d1
0001D074 D240                       		add.w	d0,d1
0001D076 6500                       		bcs.s	Touch_ChkValue
0001D078 6000 FF6E                  		bra.w	Touch_NextObj
0001D07C                            ; ===========================================================================
0001D07C                            
0001D07C                            loc_1AEB6:
0001D07C B045                       		cmp.w	d5,d0
0001D07E 6200 FF68                  		bhi.w	Touch_NextObj
0001D082                            
0001D082                            Touch_ChkValue:
0001D082 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001D086 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001D08A 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001D08E 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001D092 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001D096 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001D098 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001D09C                            
0001D09C                            ; touch	response is $40-$7F
0001D09C                            
0001D09C 1029 0020                  		move.b	$20(a1),d0
0001D0A0 0200 003F                  		andi.b	#$3F,d0
0001D0A4 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001D0A8 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001D0AA 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001D0B0 6400 0000                  		bcc.w	locret_1AEF2
0001D0B4 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001D0B8                            
0001D0B8                            locret_1AEF2:
0001D0B8 4E75                       		rts	
0001D0BA                            ; ===========================================================================
0001D0BA                            
0001D0BA                            Touch_Monitor:
0001D0BA 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001D0BE 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001D0C0 3028 000C                  		move.w	$C(a0),d0
0001D0C4 0440 0010                  		subi.w	#$10,d0
0001D0C8 B069 000C                  		cmp.w	$C(a1),d0
0001D0CC 6500 0000                  		bcs.w	locret_1AF2E
0001D0D0 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001D0D4 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001D0D8 337C FE80 0012             		move.w	#-$180,$12(a1)
0001D0DE 4A29 0025                  		tst.b	$25(a1)
0001D0E2 6600 0000                  		bne.w	locret_1AF2E
0001D0E6 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001D0EA 4E75                       		rts	
0001D0EC                            ; ===========================================================================
0001D0EC                            
0001D0EC                            loc_1AF1E:
0001D0EC 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001D0F2 6600 0000                  		bne.w	locret_1AF2E
0001D0F6 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001D0FA 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001D0FE 0C68 0400 0010             		cmpi.w	#$400,$10(a0)
0001D104 6E00                       		bgt.s	@happy
0001D106 0C68 FC00 0010             		cmpi.w	#-$400,$10(a0)
0001D10C 6D00                       		blt.s	@happy
0001D10E 0C68 0800 0012             		cmpi.w	#$800,$12(a0)
0001D114 6E00                       		bgt.s	@happy
0001D116 0C68 F800 0012             		cmpi.w	#-$800,$12(a0)
0001D11C 6C00                       		bge.s	locret_1AF2E
0001D11E                            
0001D11E                            	@happy:
0001D11E 0828 0001 0022             		btst	#1,$22(a0)
0001D124 6700                       		beq.s	locret_1AF2E
0001D126 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001D12C 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001D132 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeHappy2
0001D188                            
0001D188                            locret_1AF2E:
0001D188 4E75                       		rts	
0001D18A                            ; ===========================================================================
0001D18A                            
0001D18A                            Touch_Enemy:				; XREF: Touch_ChkValue
0001D18A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001D18E 6600                       		bne.s	loc_1AF40	; if yes, branch
0001D190 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001D196 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001D19A                            
0001D19A                            loc_1AF40:
0001D19A 4A29 0021                  		tst.b	$21(a1)
0001D19E 6700                       		beq.s	Touch_KillEnemy
0001D1A0 4468 0010                  		neg.w	$10(a0)
0001D1A4 4468 0012                  		neg.w	$12(a0)
0001D1A8 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001D1AC E0E8 0010                  		asr	$10(a0)
0001D1B0 E0E8 0012                  		asr	$12(a0)
0001D1B4 137C 0000 0020             		move.b	#0,$20(a1)
0001D1BA 5329 0021                  		subq.b	#1,$21(a1)
0001D1BE 6600                       		bne.s	locret_1AF68
0001D1C0 08E9 0007 0022             		bset	#7,$22(a1)
0001D1C6                            
0001D1C6                            locret_1AF68:
0001D1C6 4E75                       		rts	
0001D1C8                            ; ===========================================================================
0001D1C8                            
0001D1C8                            Touch_KillEnemy:
0001D1C8 0C68 0400 0010             		cmpi.w	#$400,$10(a0)
0001D1CE 6E00                       		bgt.s	@happy
0001D1D0 0C68 FC00 0010             		cmpi.w	#-$400,$10(a0)
0001D1D6 6D00                       		blt.s	@happy
0001D1D8 0C68 0800 0012             		cmpi.w	#$800,$12(a0)
0001D1DE 6E00                       		bgt.s	@happy
0001D1E0 0C68 F800 0012             		cmpi.w	#-$800,$12(a0)
0001D1E6 6C00                       		bge.s	@nothappy
0001D1E8                            
0001D1E8                            	@happy:
0001D1E8 0828 0001 0022             		btst	#1,$22(a0)
0001D1EE 6700                       		beq.s	@nothappy
0001D1F0 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001D1F6 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001D1FC                            
0001D1FC                            	@nothappy:
0001D1FC 08E9 0007 0022             		bset	#7,$22(a1)
0001D202 7000                       		moveq	#0,d0
0001D204 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001D208 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001D20C 0C40 0006                  		cmpi.w	#6,d0
0001D210 6500                       		bcs.s	loc_1AF82
0001D212 7006                       		moveq	#6,d0
0001D214                            
0001D214                            loc_1AF82:
0001D214 3340 003E                  		move.w	d0,$3E(a1)
0001D218 4A40                       		tst.w	d0
0001D21A 6700                       		beq.s	@nocombo
0001D21C 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001D222 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001D228                            
0001D228                            	@nocombo:
0001D228 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001D22C 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001D232 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001D234 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001D238 337C 000A 003E             		move.w	#$A,$3E(a1)
0001D23E                            
0001D23E                            loc_1AF9C:
0001D23E 6100 0000                  		bsr.w	AddPoints
0001D242 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001D246 137C 0000 0024             		move.b	#0,$24(a1)
0001D24C 4A68 0012                  		tst.w	$12(a0)
0001D250 6B00                       		bmi.s	loc_1AFC2
0001D252 3028 000C                  		move.w	$C(a0),d0
0001D256 B069 000C                  		cmp.w	$C(a1),d0
0001D25A 6400                       		bcc.s	loc_1AFCA
0001D25C 4468 0012                  		neg.w	$12(a0)
0001D260 4E75                       		rts	
0001D262                            ; ===========================================================================
0001D262                            
0001D262                            loc_1AFC2:
0001D262 0668 0100 0012             		addi.w	#$100,$12(a0)
0001D268 4E75                       		rts	
0001D26A                            ; ===========================================================================
0001D26A                            
0001D26A                            loc_1AFCA:
0001D26A 0468 0100 0012             		subi.w	#$100,$12(a0)
0001D270 4E75                       		rts	
0001D272                            ; ===========================================================================
0001D272 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001D27A                            ; ===========================================================================
0001D27A                            
0001D27A                            loc_1AFDA:				; XREF: Touch_CatKiller
0001D27A 08E9 0007 0022             		bset	#7,$22(a1)
0001D280                            
0001D280                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001D280 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001D284 6700                       		beq.s	Touch_Hurt	; if not, branch
0001D286                            
0001D286                            loc_1AFE6:				; XREF: Touch_Hurt
0001D286 0C78 0100 D032             		cmpi.w	#$100,($FFFFD032).w
0001D28C 6E00                       		bgt.s	locret_1AFE6
0001D28E                            
0001D28E                            loc2_1AFE6:				; XREF: Touch_Hurt
0001D28E 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
0001D294 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001D29A                            
0001D29A                            locret_1AFE6:
0001D29A 70FF                       		moveq	#-1,d0
0001D29C 4E75                       		rts	
0001D29E                            ; ===========================================================================
0001D29E                            
0001D29E                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001D29E 4E71                       		nop	
0001D2A0 4A68 0030                  		tst.w	$30(a0)
0001D2A4 66E8                       		bne.s	loc2_1AFE6
0001D2A6 2449                       		movea.l	a1,a2
0001D2A8                            
0001D2A8                            ; End of function TouchResponse
0001D2A8                            ; continue straight to HurtSonic
0001D2A8                            
0001D2A8                            ; ---------------------------------------------------------------------------
0001D2A8                            ; Hurting Sonic	subroutine
0001D2A8                            ; ---------------------------------------------------------------------------
0001D2A8                            
0001D2A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2A8                            
0001D2A8                            
0001D2A8                            HurtSonic:
0001D2A8 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
0001D2AE 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0001D2B4 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeHurt
0001D30A 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001D30E 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001D310 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001D314 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001D318 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0001D31E 6500                       		bcs.s	@notbad
0001D320 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001D326                            
0001D326                            	@notbad:
0001D326 4EB9 0000 F086             		jsr	SingleObjLoad
0001D32C 6600                       		bne.s	Hurt_Shield
0001D32E 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001D332 3368 0008 0008             		move.w	8(a0),8(a1)
0001D338 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D33E                            
0001D33E                            Hurt_Shield:
0001D33E 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001D344 117C 0004 0024             		move.b	#4,$24(a0)
0001D34A 4EB9 0001 51DC             		jsr	(Sonic_ResetOnFloor).l
0001D350 08E8 0001 0022             		bset	#1,$22(a0)
0001D356 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001D35C 317C FE00 0010             		move.w	#-$200,$10(a0)
0001D362 0828 0006 0022             		btst	#6,$22(a0)
0001D368 6700                       		beq.s	Hurt_Reverse
0001D36A 317C FE00 0012             		move.w	#-$200,$12(a0)
0001D370 317C FF00 0010             		move.w	#-$100,$10(a0)
0001D376                            
0001D376                            Hurt_Reverse:
0001D376 3028 0008                  		move.w	8(a0),d0
0001D37A B06A 0008                  		cmp.w	8(a2),d0
0001D37E 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001D380 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001D384                            
0001D384                            Hurt_ChkSpikes:
0001D384 317C 0000 0020             		move.w	#0,$20(a0)
0001D38A 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001D390 317C 0078 0030             		move.w	#$78,$30(a0)
0001D396 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001D39A 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001D39E 6600                       		bne.s	Hurt_Sound	; if not, branch
0001D3A0 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001D3A4 6600                       		bne.s	Hurt_Sound	; if not, branch
0001D3A6 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001D3AA                            
0001D3AA                            Hurt_Sound:
0001D3AA 4EB9 0000 1220             		jsr	(PlaySound_Special).l
0001D3B0 70FF                       		moveq	#-1,d0
0001D3B2 4E75                       		rts	
0001D3B4                            ; ===========================================================================
0001D3B4                            
0001D3B4                            Hurt_NoRings:
0001D3B4 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001D3B8 6600 FF84                  		bne.w	Hurt_Shield	; if yes, branch
0001D3BC 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeDies
0001D412                            ; End of function HurtSonic
0001D412                            
0001D412                            ; ---------------------------------------------------------------------------
0001D412                            ; Subroutine to	kill Sonic
0001D412                            ; ---------------------------------------------------------------------------
0001D412                            
0001D412                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D412                            
0001D412                            
0001D412                            KillSonic:
0001D412 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001D416 6600 0000                  		bne.w	Kill_NoDeath	; if yes, branch
0001D41A 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001D420 117C 0006 0024             		move.b	#6,$24(a0)
0001D426 4EB9 0001 51DC             		jsr	(Sonic_ResetOnFloor).l
0001D42C 08E8 0001 0022             		bset	#1,$22(a0)
0001D432 317C F900 0012             		move.w	#-$700,$12(a0)
0001D438 317C 0000 0010             		move.w	#0,$10(a0)
0001D43E 317C 0000 0020             		move.w	#0,$20(a0)
0001D444 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001D44A 117C 0018 001C             		move.b	#$18,$1C(a0)
0001D450 08E8 0007 0002             		bset	#7,2(a0)
0001D456 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001D45A 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeFrustrated		
0001D4B0 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001D4B4 6600                       		bne.s	Kill_Sound
0001D4B6 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001D4BA 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeSpikey
0001D510                            
0001D510                            Kill_Sound:
0001D510 4EB9 0000 1220             		jsr	(PlaySound_Special).l
0001D516                            
0001D516                            Kill_NoDeath:
0001D516 70FF                       		moveq	#-1,d0
0001D518 4E75                       		rts	
0001D51A                            ; End of function KillSonic
0001D51A                            
0001D51A                            
0001D51A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D51A                            
0001D51A                            
0001D51A                            Touch_Special:				; XREF: Touch_ChkValue
0001D51A 1229 0020                  		move.b	$20(a1),d1
0001D51E 0201 003F                  		andi.b	#$3F,d1
0001D522 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001D526 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001D528 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001D52C 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001D52E 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001D532 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001D534 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001D538 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001D53A 4E75                       		rts	
0001D53C                            ; ===========================================================================
0001D53C                            
0001D53C                            Touch_CatKiller:			; XREF: Touch_Special
0001D53C 6000 FD3C                  		bra.w	loc_1AFDA
0001D540                            ; ===========================================================================
0001D540                            
0001D540                            Touch_Yadrin:				; XREF: Touch_Special
0001D540 9A40                       		sub.w	d0,d5
0001D542 0C45 0008                  		cmpi.w	#8,d5
0001D546 6400                       		bcc.s	loc_1B144
0001D548 3029 0008                  		move.w	8(a1),d0
0001D54C 5940                       		subq.w	#4,d0
0001D54E 0829 0000 0022             		btst	#0,$22(a1)
0001D554 6700                       		beq.s	loc_1B130
0001D556 0440 0010                  		subi.w	#$10,d0
0001D55A                            
0001D55A                            loc_1B130:
0001D55A 9042                       		sub.w	d2,d0
0001D55C 6400                       		bcc.s	loc_1B13C
0001D55E 0640 0018                  		addi.w	#$18,d0
0001D562 6500                       		bcs.s	loc_1B140
0001D564 6000                       		bra.s	loc_1B144
0001D566                            ; ===========================================================================
0001D566                            
0001D566                            loc_1B13C:
0001D566 B044                       		cmp.w	d4,d0
0001D568 6200                       		bhi.s	loc_1B144
0001D56A                            
0001D56A                            loc_1B140:
0001D56A 6000 FD14                  		bra.w	Touch_ChkHurt
0001D56E                            ; ===========================================================================
0001D56E                            
0001D56E                            loc_1B144:
0001D56E 6000 FC1A                  		bra.w	Touch_Enemy
0001D572                            ; ===========================================================================
0001D572                            
0001D572                            Touch_D7orE1:				; XREF: Touch_Special
0001D572 5229 0021                  		addq.b	#1,$21(a1)
0001D576 4E75                       		rts	
0001D578                            ; End of function Touch_Special
0001D578                            
0001D578                            ; ---------------------------------------------------------------------------
0001D578                            ; Subroutine to	show the special stage layout
0001D578                            ; ---------------------------------------------------------------------------
0001D578                            
0001D578                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D578                            
0001D578                            
0001D578                            SS_ShowLayout:				; XREF: SpecialStage
0001D578 4A78 F63A                  		tst.w	($FFFFF63A).w
0001D57C 6600                       		bne.s	@noanimate
0001D57E 6100 0000                  		bsr.w	SS_AniWallsRings
0001D582 6100 0000                  		bsr.w	SS_AniItems
0001D586                            
0001D586                            	@noanimate:
0001D586 3F05                       		move.w	d5,-(sp)
0001D588 43F8 8000                  		lea	($FFFF8000).w,a1
0001D58C 1038 F780                  		move.b	($FFFFF780).w,d0
0001D590 0200 00FC                  		andi.b	#$FC,d0
0001D594 4EB9 0000 29F6             		jsr	(CalcSine).l
0001D59A 3800                       		move.w	d0,d4
0001D59C 3A01                       		move.w	d1,d5
0001D59E C9FC 0018                  		muls.w	#$18,d4
0001D5A2 CBFC 0018                  		muls.w	#$18,d5
0001D5A6 7400                       		moveq	#0,d2
0001D5A8 3438 F700                  		move.w	($FFFFF700).w,d2
0001D5AC 84FC 0018                  		divu.w	#$18,d2
0001D5B0 4842                       		swap	d2
0001D5B2 4442                       		neg.w	d2
0001D5B4 0642 FF4C                  		addi.w	#-$B4,d2
0001D5B8 7600                       		moveq	#0,d3
0001D5BA 3638 F704                  		move.w	($FFFFF704).w,d3
0001D5BE 86FC 0018                  		divu.w	#$18,d3
0001D5C2 4843                       		swap	d3
0001D5C4 4443                       		neg.w	d3
0001D5C6 0643 FF4C                  		addi.w	#-$B4,d3
0001D5CA 3E3C 000F                  		move.w	#$F,d7
0001D5CE                            
0001D5CE                            loc_1B19E:
0001D5CE 48A7 E000                  		movem.w	d0-d2,-(sp)
0001D5D2 48A7 C000                  		movem.w	d0-d1,-(sp)
0001D5D6 4440                       		neg.w	d0
0001D5D8 C3C2                       		muls.w	d2,d1
0001D5DA C1C3                       		muls.w	d3,d0
0001D5DC 2C00                       		move.l	d0,d6
0001D5DE DC81                       		add.l	d1,d6
0001D5E0 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001D5E4 C1C2                       		muls.w	d2,d0
0001D5E6 C3C3                       		muls.w	d3,d1
0001D5E8 D280                       		add.l	d0,d1
0001D5EA 2406                       		move.l	d6,d2
0001D5EC 3C3C 000F                  		move.w	#$F,d6
0001D5F0                            
0001D5F0                            loc_1B1C0:
0001D5F0 2002                       		move.l	d2,d0
0001D5F2 E080                       		asr.l	#8,d0
0001D5F4 32C0                       		move.w	d0,(a1)+
0001D5F6 2001                       		move.l	d1,d0
0001D5F8 E080                       		asr.l	#8,d0
0001D5FA 32C0                       		move.w	d0,(a1)+
0001D5FC D485                       		add.l	d5,d2
0001D5FE D284                       		add.l	d4,d1
0001D600 51CE FFEE                  		dbf	d6,loc_1B1C0
0001D604                            
0001D604 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001D608 0643 0018                  		addi.w	#$18,d3
0001D60C 51CF FFC0                  		dbf	d7,loc_1B19E
0001D610                            
0001D610 3A1F                       		move.w	(sp)+,d5
0001D612 41F9 00FF 0000             		lea	($FF0000).l,a0
0001D618 7000                       		moveq	#0,d0
0001D61A 3038 F704                  		move.w	($FFFFF704).w,d0
0001D61E 80FC 0018                  		divu.w	#$18,d0
0001D622 C0FC 0080                  		mulu.w	#$80,d0
0001D626 D1C0                       		adda.l	d0,a0
0001D628 7000                       		moveq	#0,d0
0001D62A 3038 F700                  		move.w	($FFFFF700).w,d0
0001D62E 80FC 0018                  		divu.w	#$18,d0
0001D632 D0C0                       		adda.w	d0,a0
0001D634 49F8 8000                  		lea	($FFFF8000).w,a4
0001D638 3E3C 000F                  		move.w	#$F,d7
0001D63C                            
0001D63C                            loc_1B20C:
0001D63C 3C3C 000F                  		move.w	#$F,d6
0001D640                            
0001D640                            loc_1B210:
0001D640 7000                       		moveq	#0,d0
0001D642 1018                       		move.b	(a0)+,d0
0001D644 6700                       		beq.s	loc_1B268
0001D646 0C00 004E                  		cmpi.b	#$4E,d0
0001D64A 6200                       		bhi.s	loc_1B268
0001D64C 3614                       		move.w	(a4),d3
0001D64E 0643 0120                  		addi.w	#$120,d3
0001D652 0C43 0070                  		cmpi.w	#$70,d3
0001D656 6500                       		bcs.s	loc_1B268
0001D658 0C43 01D0                  		cmpi.w	#$1D0,d3
0001D65C 6400                       		bcc.s	loc_1B268
0001D65E 342C 0002                  		move.w	2(a4),d2
0001D662 0642 00F0                  		addi.w	#$F0,d2
0001D666 0C42 0070                  		cmpi.w	#$70,d2
0001D66A 6500                       		bcs.s	loc_1B268
0001D66C 0C42 0170                  		cmpi.w	#$170,d2
0001D670 6400                       		bcc.s	loc_1B268
0001D672 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001D678 E748                       		lsl.w	#3,d0
0001D67A 4BF5 0000                  		lea	(a5,d0.w),a5
0001D67E 225D                       		movea.l	(a5)+,a1
0001D680 321D                       		move.w	(a5)+,d1
0001D682 D241                       		add.w	d1,d1
0001D684 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001D688 365D                       		movea.w	(a5)+,a3
0001D68A 7200                       		moveq	#0,d1
0001D68C 1219                       		move.b	(a1)+,d1
0001D68E 5301                       		subq.b	#1,d1
0001D690 6B00                       		bmi.s	loc_1B268
0001D692 4EB9 0000 EBDA             		jsr	sub_D762
0001D698                            
0001D698                            loc_1B268:
0001D698 584C                       		addq.w	#4,a4
0001D69A 51CE FFA4                  		dbf	d6,loc_1B210
0001D69E                            
0001D69E 41E8 0070                  		lea	$70(a0),a0
0001D6A2 51CF FF98                  		dbf	d7,loc_1B20C
0001D6A6                            
0001D6A6 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001D6AA 0C05 0050                  		cmpi.b	#$50,d5
0001D6AE 6700                       		beq.s	loc_1B288
0001D6B0 24BC 0000 0000             		move.l	#0,(a2)
0001D6B6 4E75                       		rts	
0001D6B8                            ; ===========================================================================
0001D6B8                            
0001D6B8                            loc_1B288:
0001D6B8 157C 0000 FFFB             		move.b	#0,-5(a2)
0001D6BE 4E75                       		rts	
0001D6C0                            ; End of function SS_ShowLayout
0001D6C0                            
0001D6C0                            ; ---------------------------------------------------------------------------
0001D6C0                            ; Subroutine to	animate	walls and rings	in the special stage
0001D6C0                            ; ---------------------------------------------------------------------------
0001D6C0                            
0001D6C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6C0                            
0001D6C0                            
0001D6C0                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001D6C0 43F9 00FF 4005             		lea	($FF4005).l,a1
0001D6C6 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001D6CA 6A00                       		bpl.s	loc_1B2C8
0001D6CC 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001D6D2 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001D6D6 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001D6DC                            
0001D6DC                            loc_1B2C8:
0001D6DC 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001D6E2 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001D6E6 6A00                       		bpl.s	loc_1B2E4
0001D6E8 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001D6EE 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001D6F2 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001D6F8                            
0001D6F8                            loc_1B2E4:
0001D6F8 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001D6FC 1340 0138                  		move.b	d0,$138(a1)
0001D700 1340 0160                  		move.b	d0,$160(a1)
0001D704 1340 0148                  		move.b	d0,$148(a1)
0001D708 1340 0150                  		move.b	d0,$150(a1)
0001D70C 1340 01D8                  		move.b	d0,$1D8(a1)
0001D710 1340 01E0                  		move.b	d0,$1E0(a1)
0001D714 1340 01E8                  		move.b	d0,$1E8(a1)
0001D718 1340 01F0                  		move.b	d0,$1F0(a1)
0001D71C 1340 01F8                  		move.b	d0,$1F8(a1)
0001D720 1340 0200                  		move.b	d0,$200(a1)
0001D724 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001D728 6A00                       		bpl.s	loc_1B326
0001D72A 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001D730 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001D734 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001D73A                            
0001D73A                            loc_1B326:
0001D73A 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001D73E 1340 0168                  		move.b	d0,$168(a1)
0001D742 1340 0170                  		move.b	d0,$170(a1)
0001D746 1340 0178                  		move.b	d0,$178(a1)
0001D74A 1340 0180                  		move.b	d0,$180(a1)
0001D74E 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001D752 6A00                       		bpl.s	loc_1B350
0001D754 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001D75A 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001D75E 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001D764                            
0001D764                            loc_1B350:
0001D764 43F9 00FF 4016             		lea	($FF4016).l,a1
0001D76A 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001D770 7000                       		moveq	#0,d0
0001D772 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001D776 D040                       		add.w	d0,d0
0001D778 41F0 0000                  		lea	(a0,d0.w),a0
0001D77C 3290                       		move.w	(a0),(a1)
0001D77E 3368 0002 0008             		move.w	2(a0),8(a1)
0001D784 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D78A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D790 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D796 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D79C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D7A2 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D7A8 D0FC 0020                  		adda.w	#$20,a0
0001D7AC D2FC 0048                  		adda.w	#$48,a1
0001D7B0 3290                       		move.w	(a0),(a1)
0001D7B2 3368 0002 0008             		move.w	2(a0),8(a1)
0001D7B8 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D7BE 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D7C4 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D7CA 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D7D0 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D7D6 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D7DC D0FC 0020                  		adda.w	#$20,a0
0001D7E0 D2FC 0048                  		adda.w	#$48,a1
0001D7E4 3290                       		move.w	(a0),(a1)
0001D7E6 3368 0002 0008             		move.w	2(a0),8(a1)
0001D7EC 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D7F2 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D7F8 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D7FE 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D804 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D80A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D810 D0FC 0020                  		adda.w	#$20,a0
0001D814 D2FC 0048                  		adda.w	#$48,a1
0001D818 3290                       		move.w	(a0),(a1)
0001D81A 3368 0002 0008             		move.w	2(a0),8(a1)
0001D820 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D826 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D82C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D832 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D838 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D83E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D844 D0FC 0020                  		adda.w	#$20,a0
0001D848 D2FC 0048                  		adda.w	#$48,a1
0001D84C 4E75                       		rts	
0001D84E                            ; End of function SS_AniWallsRings
0001D84E                            
0001D84E                            SS_LoadWalls:
0001D84E 7000                       		moveq	#0,d0
0001D850 1038 F780                  		move.b	($FFFFF780).w,d0	; get the Special Stage angle
0001D854 E408                       		lsr.b	#2,d0			; modify so it can be used as a frame ID
0001D856 0240 000F                  		andi.w	#$F,d0
0001D85A B038 FFF9                  		cmp.b	(v_ssangleprev).w,d0	; does the modified angle match the recorded value?
0001D85E 6700                       		beq.s	@return			; if so, branch
0001D860                            
0001D860 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D866 43F9 0000 0000             		lea	(Art_SSWalls).l,a1	; load wall art
0001D86C 3200                       		move.w	d0,d1
0001D86E E149                       		lsl.w	#8,d1
0001D870 D241                       		add.w	d1,d1
0001D872 D2C1                       		add.w	d1,a1
0001D874                            
0001D87E                            
0001D87E 323C 000F                  		move.w	#$F,d1			; number of 8x8 tiles
0001D882 4EB9 0000 0000             		jsr	LoadTiles
0001D888 11C0 FFF9                  		move.b	d0,(v_ssangleprev).w	; record the modified angle for comparison
0001D88C                            
0001D88C                            	@return:
0001D88C 4E75                       		rts
0001D88E                            
0001D88E                            ; ===========================================================================
0001D88E 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001D89E 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001D8AE 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001D8BE 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001D8CE 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001D8DE 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001D8EE 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001D8FE 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001D90E                            ; ---------------------------------------------------------------------------
0001D90E                            ; Subroutine to	remove items when you collect them in the special stage
0001D90E                            ; ---------------------------------------------------------------------------
0001D90E                            
0001D90E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D90E                            
0001D90E                            
0001D90E                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001D90E 45F9 00FF 4400             		lea	($FF4400).l,a2
0001D914 303C 001F                  		move.w	#$1F,d0
0001D918                            
0001D918                            loc_1B4C4:
0001D918 4A12                       		tst.b	(a2)
0001D91A 6700                       		beq.s	locret_1B4CE
0001D91C 504A                       		addq.w	#8,a2
0001D91E 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001D922                            
0001D922                            locret_1B4CE:
0001D922 4E75                       		rts	
0001D924                            ; End of function SS_RemoveCollectedItem
0001D924                            
0001D924                            ; ---------------------------------------------------------------------------
0001D924                            ; Subroutine to	animate	special	stage items when you touch them
0001D924                            ; ---------------------------------------------------------------------------
0001D924                            
0001D924                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D924                            
0001D924                            
0001D924                            SS_AniItems:				; XREF: SS_ShowLayout
0001D924 41F9 00FF 4400             		lea	($FF4400).l,a0
0001D92A 3E3C 001F                  		move.w	#$1F,d7
0001D92E                            
0001D92E                            loc_1B4DA:
0001D92E 7000                       		moveq	#0,d0
0001D930 1010                       		move.b	(a0),d0
0001D932 6700                       		beq.s	loc_1B4E8
0001D934 E548                       		lsl.w	#2,d0
0001D936 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001D93A 4E91                       		jsr	(a1)
0001D93C                            
0001D93C                            loc_1B4E8:
0001D93C 5048                       		addq.w	#8,a0
0001D93E                            
0001D93E                            loc_1B4EA:
0001D93E 51CF FFEE                  		dbf	d7,loc_1B4DA
0001D942                            
0001D942 4E75                       		rts	
0001D944                            ; End of function SS_AniItems
0001D944                            
0001D944                            ; ===========================================================================
0001D944 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001D948 0000 0000                  		dc.l SS_AniBumper
0001D94C 0000 0000                  		dc.l SS_Ani1Up
0001D950 0000 0000                  		dc.l SS_AniReverse
0001D954 0000 0000                  		dc.l SS_AniEmeraldSparks
0001D958 0000 0000                  		dc.l SS_AniGlassBlock
0001D95C                            ; ===========================================================================
0001D95C                            
0001D95C                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001D95C 5328 0002                  		subq.b	#1,2(a0)
0001D960 6A00                       		bpl.s	locret_1B530
0001D962 117C 0005 0002             		move.b	#5,2(a0)
0001D968 7000                       		moveq	#0,d0
0001D96A 1028 0003                  		move.b	3(a0),d0
0001D96E 5228 0003                  		addq.b	#1,3(a0)
0001D972 2268 0004                  		movea.l	4(a0),a1
0001D976 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001D97A 1280                       		move.b	d0,(a1)
0001D97C 6600                       		bne.s	locret_1B530
0001D97E 4290                       		clr.l	(a0)
0001D980 42A8 0004                  		clr.l	4(a0)
0001D984                            
0001D984                            locret_1B530:
0001D984 4E75                       		rts	
0001D986                            ; ===========================================================================
0001D986 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001D98C                            ; ===========================================================================
0001D98C                            
0001D98C                            SS_AniBumper:				; XREF: SS_AniIndex
0001D98C 5328 0002                  		subq.b	#1,2(a0)
0001D990 6A00                       		bpl.s	locret_1B566
0001D992 117C 0007 0002             		move.b	#7,2(a0)
0001D998 7000                       		moveq	#0,d0
0001D99A 1028 0003                  		move.b	3(a0),d0
0001D99E 5228 0003                  		addq.b	#1,3(a0)
0001D9A2 2268 0004                  		movea.l	4(a0),a1
0001D9A6 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001D9AA 6600                       		bne.s	loc_1B564
0001D9AC 4290                       		clr.l	(a0)
0001D9AE 42A8 0004                  		clr.l	4(a0)
0001D9B2 12BC 0025                  		move.b	#$25,(a1)
0001D9B6 4E75                       		rts	
0001D9B8                            ; ===========================================================================
0001D9B8                            
0001D9B8                            loc_1B564:
0001D9B8 1280                       		move.b	d0,(a1)
0001D9BA                            
0001D9BA                            locret_1B566:
0001D9BA 4E75                       		rts	
0001D9BC                            ; ===========================================================================
0001D9BC 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001D9C2                            ; ===========================================================================
0001D9C2                            
0001D9C2                            SS_Ani1Up:				; XREF: SS_AniIndex
0001D9C2 5328 0002                  		subq.b	#1,2(a0)
0001D9C6 6A00                       		bpl.s	locret_1B596
0001D9C8 117C 0005 0002             		move.b	#5,2(a0)
0001D9CE 7000                       		moveq	#0,d0
0001D9D0 1028 0003                  		move.b	3(a0),d0
0001D9D4 5228 0003                  		addq.b	#1,3(a0)
0001D9D8 2268 0004                  		movea.l	4(a0),a1
0001D9DC 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001D9E0 1280                       		move.b	d0,(a1)
0001D9E2 6600                       		bne.s	locret_1B596
0001D9E4 4290                       		clr.l	(a0)
0001D9E6 42A8 0004                  		clr.l	4(a0)
0001D9EA                            
0001D9EA                            locret_1B596:
0001D9EA 4E75                       		rts	
0001D9EC                            ; ===========================================================================
0001D9EC 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001D9F2                            ; ===========================================================================
0001D9F2                            
0001D9F2                            SS_AniReverse:				; XREF: SS_AniIndex
0001D9F2 5328 0002                  		subq.b	#1,2(a0)
0001D9F6 6A00                       		bpl.s	locret_1B5CC
0001D9F8 117C 0007 0002             		move.b	#7,2(a0)
0001D9FE 7000                       		moveq	#0,d0
0001DA00 1028 0003                  		move.b	3(a0),d0
0001DA04 5228 0003                  		addq.b	#1,3(a0)
0001DA08 2268 0004                  		movea.l	4(a0),a1
0001DA0C 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001DA10 6600                       		bne.s	loc_1B5CA
0001DA12 4290                       		clr.l	(a0)
0001DA14 42A8 0004                  		clr.l	4(a0)
0001DA18 12BC 002B                  		move.b	#$2B,(a1)
0001DA1C 4E75                       		rts	
0001DA1E                            ; ===========================================================================
0001DA1E                            
0001DA1E                            loc_1B5CA:
0001DA1E 1280                       		move.b	d0,(a1)
0001DA20                            
0001DA20                            locret_1B5CC:
0001DA20 4E75                       		rts	
0001DA22                            ; ===========================================================================
0001DA22 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001DA28                            ; ===========================================================================
0001DA28                            
0001DA28                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001DA28 5328 0002                  		subq.b	#1,2(a0)
0001DA2C 6A00                       		bpl.s	locret_1B60C
0001DA2E 117C 0005 0002             		move.b	#5,2(a0)
0001DA34 7000                       		moveq	#0,d0
0001DA36 1028 0003                  		move.b	3(a0),d0
0001DA3A 5228 0003                  		addq.b	#1,3(a0)
0001DA3E 2268 0004                  		movea.l	4(a0),a1
0001DA42 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001DA46 1280                       		move.b	d0,(a1)
0001DA48 6600                       		bne.s	locret_1B60C
0001DA4A 4290                       		clr.l	(a0)
0001DA4C 42A8 0004                  		clr.l	4(a0)
0001DA50 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001DA56 303C 00A8                  		move.w	#$A8,d0
0001DA5A 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001DA60                            
0001DA60                            locret_1B60C:
0001DA60 4E75                       		rts	
0001DA62                            ; ===========================================================================
0001DA62 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001DA68                            ; ===========================================================================
0001DA68                            
0001DA68                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001DA68 5328 0002                  		subq.b	#1,2(a0)
0001DA6C 6A00                       		bpl.s	locret_1B640
0001DA6E 117C 0001 0002             		move.b	#1,2(a0)
0001DA74 7000                       		moveq	#0,d0
0001DA76 1028 0003                  		move.b	3(a0),d0
0001DA7A 5228 0003                  		addq.b	#1,3(a0)
0001DA7E 2268 0004                  		movea.l	4(a0),a1
0001DA82 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001DA86 1280                       		move.b	d0,(a1)
0001DA88 6600                       		bne.s	locret_1B640
0001DA8A 12A8 0004                  		move.b	4(a0),(a1)
0001DA8E 4290                       		clr.l	(a0)
0001DA90 42A8 0004                  		clr.l	4(a0)
0001DA94                            
0001DA94                            locret_1B640:
0001DA94 4E75                       		rts	
0001DA96                            ; ===========================================================================
0001DA96 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001DAA0                            ; ---------------------------------------------------------------------------
0001DAA0                            ; Special stage	layout pointers
0001DAA0                            ; ---------------------------------------------------------------------------
0001DAA0                            SS_LayoutIndex:
0001DAA0                            	include "_inc\Special stage layout pointers.asm"
0001DAA0                            ; ---------------------------------------------------------------------------
0001DAA0                            ; Special stage	layout pointers
0001DAA0                            ; ---------------------------------------------------------------------------
0001DAA0 0000 0000                  	dc.l SS_1
0001DAA4 0000 0000                  	dc.l SS_2
0001DAA8 0000 0000                  	dc.l SS_3
0001DAAC 0000 0000                  	dc.l SS_4
0001DAB0 0000 0000                  	dc.l SS_5
0001DAB4 0000 0000                  	dc.l SS_6
0001DAB8                            	even
0001DAB8                            	even
0001DAB8                            
0001DAB8                            ; ---------------------------------------------------------------------------
0001DAB8                            ; Special stage	start locations
0001DAB8                            ; ---------------------------------------------------------------------------
0001DAB8                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001DAD0                            		even
0001DAD0                            
0001DAD0                            ; ---------------------------------------------------------------------------
0001DAD0                            ; Subroutine to	load special stage layout
0001DAD0                            ; ---------------------------------------------------------------------------
0001DAD0                            
0001DAD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DAD0                            
0001DAD0                            
0001DAD0                            SS_Load:				; XREF: SpecialStage
0001DAD0 7000                       		moveq	#0,d0
0001DAD2 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001DAD6 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001DADA 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001DAE0 6500                       		bcs.s	SS_ChkEmldNum
0001DAE2 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001DAE8                            
0001DAE8                            SS_ChkEmldNum:
0001DAE8 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001DAEE 6700                       		beq.s	SS_LoadData	; if yes, branch
0001DAF0 7200                       		moveq	#0,d1
0001DAF2 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001DAF6 5301                       		subq.b	#1,d1
0001DAF8 6500                       		bcs.s	SS_LoadData
0001DAFA 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001DAFE                            
0001DAFE                            SS_ChkEmldLoop:	
0001DAFE B033 1000                  		cmp.b	(a3,d1.w),d0
0001DB02 6600                       		bne.s	SS_ChkEmldRepeat
0001DB04 60CA                       		bra.s	SS_Load
0001DB06                            ; ===========================================================================
0001DB06                            
0001DB06                            SS_ChkEmldRepeat:
0001DB06 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001DB0A                            
0001DB0A                            SS_LoadData:
0001DB0A E548                       		lsl.w	#2,d0
0001DB0C 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001DB10 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001DB14 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001DB18 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001DB1C 43F9 00FF 4000             		lea	($FF4000).l,a1
0001DB22 303C 0000                  		move.w	#0,d0
0001DB26 4EB9 0000 15FC             		jsr	(EniDec).l
0001DB2C 43F9 00FF 0000             		lea	($FF0000).l,a1
0001DB32 303C 0FFF                  		move.w	#$FFF,d0
0001DB36                            
0001DB36                            SS_ClrRAM3:
0001DB36 4299                       		clr.l	(a1)+
0001DB38 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001DB3C                            
0001DB3C 43F9 00FF 1020             		lea	($FF1020).l,a1
0001DB42 41F9 00FF 4000             		lea	($FF4000).l,a0
0001DB48 723F                       		moveq	#$3F,d1
0001DB4A                            
0001DB4A                            loc_1B6F6:
0001DB4A 743F                       		moveq	#$3F,d2
0001DB4C                            
0001DB4C                            loc_1B6F8:
0001DB4C 12D8                       		move.b	(a0)+,(a1)+
0001DB4E 51CA FFFC                  		dbf	d2,loc_1B6F8
0001DB52                            
0001DB52 43E9 0040                  		lea	$40(a1),a1
0001DB56 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001DB5A                            
0001DB5A 43F9 00FF 4008             		lea	($FF4008).l,a1
0001DB60 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001DB66 724D                       		moveq	#$4D,d1
0001DB68                            
0001DB68                            loc_1B714:
0001DB68 22D8                       		move.l	(a0)+,(a1)+
0001DB6A 32FC 0000                  		move.w	#0,(a1)+
0001DB6E 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001DB74 32D8                       		move.w	(a0)+,(a1)+
0001DB76 51C9 FFF0                  		dbf	d1,loc_1B714
0001DB7A                            
0001DB7A 43F9 00FF 4400             		lea	($FF4400).l,a1
0001DB80 323C 003F                  		move.w	#$3F,d1
0001DB84                            
0001DB84                            loc_1B730:
0001DB84                            
0001DB84 4299                       		clr.l	(a1)+
0001DB86 51C9 FFFC                  		dbf	d1,loc_1B730
0001DB8A                            
0001DB8A 4E75                       		rts	
0001DB8C                            ; End of function SS_Load
0001DB8C                            
0001DB8C                            ; ===========================================================================
0001DB8C                            ; ---------------------------------------------------------------------------
0001DB8C                            ; Special stage	mappings and VRAM pointers
0001DB8C                            ; ---------------------------------------------------------------------------
0001DB8C                            SS_MapIndex:
0001DB8C                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001DB8C                            ; ---------------------------------------------------------------------------
0001DB8C                            ; Special stage	mappings and VRAM pointers
0001DB8C                            ; ---------------------------------------------------------------------------
0001DB8C 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001DB90 0142                       	dc.w $142		; VRAM setting
0001DB92 0000 0000                  	dc.l Map_SSWalls
0001DB96 0142                       	dc.w $142
0001DB98 0000 0000                  	dc.l Map_SSWalls
0001DB9C 0142                       	dc.w $142
0001DB9E 0000 0000                  	dc.l Map_SSWalls
0001DBA2 0142                       	dc.w $142
0001DBA4 0000 0000                  	dc.l Map_SSWalls
0001DBA8 0142                       	dc.w $142
0001DBAA 0000 0000                  	dc.l Map_SSWalls
0001DBAE 0142                       	dc.w $142
0001DBB0 0000 0000                  	dc.l Map_SSWalls
0001DBB4 0142                       	dc.w $142
0001DBB6 0000 0000                  	dc.l Map_SSWalls
0001DBBA 0142                       	dc.w $142
0001DBBC 0000 0000                  	dc.l Map_SSWalls
0001DBC0 0142                       	dc.w $142
0001DBC2 0000 0000                  	dc.l Map_SSWalls
0001DBC6 2142                       	dc.w $2142
0001DBC8 0000 0000                  	dc.l Map_SSWalls
0001DBCC 2142                       	dc.w $2142
0001DBCE 0000 0000                  	dc.l Map_SSWalls
0001DBD2 2142                       	dc.w $2142
0001DBD4 0000 0000                  	dc.l Map_SSWalls
0001DBD8 2142                       	dc.w $2142
0001DBDA 0000 0000                  	dc.l Map_SSWalls
0001DBDE 2142                       	dc.w $2142
0001DBE0 0000 0000                  	dc.l Map_SSWalls
0001DBE4 2142                       	dc.w $2142
0001DBE6 0000 0000                  	dc.l Map_SSWalls
0001DBEA 2142                       	dc.w $2142
0001DBEC 0000 0000                  	dc.l Map_SSWalls
0001DBF0 2142                       	dc.w $2142
0001DBF2 0000 0000                  	dc.l Map_SSWalls
0001DBF6 2142                       	dc.w $2142
0001DBF8 0000 0000                  	dc.l Map_SSWalls
0001DBFC 4142                       	dc.w $4142
0001DBFE 0000 0000                  	dc.l Map_SSWalls
0001DC02 4142                       	dc.w $4142
0001DC04 0000 0000                  	dc.l Map_SSWalls
0001DC08 4142                       	dc.w $4142
0001DC0A 0000 0000                  	dc.l Map_SSWalls
0001DC0E 4142                       	dc.w $4142
0001DC10 0000 0000                  	dc.l Map_SSWalls
0001DC14 4142                       	dc.w $4142
0001DC16 0000 0000                  	dc.l Map_SSWalls
0001DC1A 4142                       	dc.w $4142
0001DC1C 0000 0000                  	dc.l Map_SSWalls
0001DC20 4142                       	dc.w $4142
0001DC22 0000 0000                  	dc.l Map_SSWalls
0001DC26 4142                       	dc.w $4142
0001DC28 0000 0000                  	dc.l Map_SSWalls
0001DC2C 4142                       	dc.w $4142
0001DC2E 0000 0000                  	dc.l Map_SSWalls
0001DC32 6142                       	dc.w $6142
0001DC34 0000 0000                  	dc.l Map_SSWalls
0001DC38 6142                       	dc.w $6142
0001DC3A 0000 0000                  	dc.l Map_SSWalls
0001DC3E 6142                       	dc.w $6142
0001DC40 0000 0000                  	dc.l Map_SSWalls
0001DC44 6142                       	dc.w $6142
0001DC46 0000 0000                  	dc.l Map_SSWalls
0001DC4A 6142                       	dc.w $6142
0001DC4C 0000 0000                  	dc.l Map_SSWalls
0001DC50 6142                       	dc.w $6142
0001DC52 0000 0000                  	dc.l Map_SSWalls
0001DC56 6142                       	dc.w $6142
0001DC58 0000 0000                  	dc.l Map_SSWalls
0001DC5C 6142                       	dc.w $6142
0001DC5E 0000 0000                  	dc.l Map_SSWalls
0001DC62 6142                       	dc.w $6142
0001DC64 0001 03A4                  	dc.l Map_obj47
0001DC68 023B                       	dc.w $23B
0001DC6A 0000 0000                  	dc.l Map_SS_R
0001DC6E 0570                       	dc.w $570
0001DC70 0000 0000                  	dc.l Map_SS_R
0001DC74 0251                       	dc.w $251
0001DC76 0000 0000                  	dc.l Map_SS_R
0001DC7A 0370                       	dc.w $370
0001DC7C 0000 0000                  	dc.l Map_SS_Up
0001DC80 0263                       	dc.w $263
0001DC82 0000 0000                  	dc.l Map_SS_Down
0001DC86 0263                       	dc.w $263
0001DC88 0000 0000                  	dc.l Map_SS_R
0001DC8C 22F0                       	dc.w $22F0
0001DC8E 0000 0000                  	dc.l Map_SS_Glass
0001DC92 0470                       	dc.w $470
0001DC94 0000 0000                  	dc.l Map_SS_Glass
0001DC98 05F0                       	dc.w $5F0
0001DC9A 0000 0000                  	dc.l Map_SS_Glass
0001DC9E 65F0                       	dc.w $65F0
0001DCA0 0000 0000                  	dc.l Map_SS_Glass
0001DCA4 25F0                       	dc.w $25F0
0001DCA6 0000 0000                  	dc.l Map_SS_Glass
0001DCAA 45F0                       	dc.w $45F0
0001DCAC 0000 0000                  	dc.l Map_SS_R
0001DCB0 02F0                       	dc.w $2F0
0001DCB2 0101 03A4                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001DCB6 023B                       	dc.w $23B
0001DCB8 0201 03A4                  	dc.l Map_obj47+$2000000
0001DCBC 023B                       	dc.w $23B
0001DCBE 0000 0000                  	dc.l Map_SS_R
0001DCC2 0797                       	dc.w $797
0001DCC4 0000 0000                  	dc.l Map_SS_R
0001DCC8 07A0                       	dc.w $7A0
0001DCCA 0000 0000                  	dc.l Map_SS_R
0001DCCE 07A9                       	dc.w $7A9
0001DCD0 0000 0000                  	dc.l Map_SS_R
0001DCD4 0797                       	dc.w $797
0001DCD6 0000 0000                  	dc.l Map_SS_R
0001DCDA 07A0                       	dc.w $7A0
0001DCDC 0000 0000                  	dc.l Map_SS_R
0001DCE0 07A9                       	dc.w $7A9
0001DCE2 0000 B23A                  	dc.l Map_obj25
0001DCE6 222D                       	dc.w $2000+ssringart
0001DCE8 0000 0000                  	dc.l Map_SS_Chaos3
0001DCEC 0770                       	dc.w $770
0001DCEE 0000 0000                  	dc.l Map_SS_Chaos3
0001DCF2 2770                       	dc.w $2770
0001DCF4 0000 0000                  	dc.l Map_SS_Chaos3
0001DCF8 4770                       	dc.w $4770
0001DCFA 0000 0000                  	dc.l Map_SS_Chaos3
0001DCFE 6770                       	dc.w $6770
0001DD00 0000 0000                  	dc.l Map_SS_Chaos1
0001DD04 0770                       	dc.w $770
0001DD06 0000 0000                  	dc.l Map_SS_Chaos2
0001DD0A 0770                       	dc.w $770
0001DD0C 0000 0000                  	dc.l Map_SS_R
0001DD10 04F0                       	dc.w $4F0
0001DD12 0400 B23A                  	dc.l Map_obj25+$4000000
0001DD16 222D                       	dc.w $2000+ssringart
0001DD18 0500 B23A                  	dc.l Map_obj25+$5000000
0001DD1C 222D                       	dc.w $2000+ssringart
0001DD1E 0600 B23A                  	dc.l Map_obj25+$6000000
0001DD22 222D                       	dc.w $2000+ssringart
0001DD24 0700 B23A                  	dc.l Map_obj25+$7000000
0001DD28 222D                       	dc.w $2000+ssringart
0001DD2A 0000 0000                  	dc.l Map_SS_Glass
0001DD2E 23F0                       	dc.w $23F0
0001DD30 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001DD34 23F0                       	dc.w $23F0
0001DD36 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001DD3A 23F0                       	dc.w $23F0
0001DD3C 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001DD40 23F0                       	dc.w $23F0
0001DD42 0000 0000                  	dc.l Map_SS_R+$2000000
0001DD46 04F0                       	dc.w $4F0
0001DD48 0000 0000                  	dc.l Map_SS_Glass
0001DD4C 05F0                       	dc.w $5F0
0001DD4E 0000 0000                  	dc.l Map_SS_Glass
0001DD52 65F0                       	dc.w $65F0
0001DD54 0000 0000                  	dc.l Map_SS_Glass
0001DD58 25F0                       	dc.w $25F0
0001DD5A 0000 0000                  	dc.l Map_SS_Glass
0001DD5E 45F0                       	dc.w $45F0
0001DD5E 45F0                       	dc.w $45F0
0001DD60                            
0001DD60                            ; ---------------------------------------------------------------------------
0001DD60                            ; Sprite mappings - special stage "R" block
0001DD60                            ; ---------------------------------------------------------------------------
0001DD60                            Map_SS_R:
0001DD60                            	include "_maps\SSRblock.asm"
0001DD60                            ; ---------------------------------------------------------------------------
0001DD60                            ; Sprite mappings - special stage "R" block
0001DD60                            ; ---------------------------------------------------------------------------
0001DD60 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001DD64 0000                       		dc.w byte_1B91E-Map_SS_R
0001DD66 01                         byte_1B912:	dc.b 1
0001DD67 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001DD6C 01                         byte_1B918:	dc.b 1
0001DD6D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001DD72 00                         byte_1B91E:	dc.b 0
0001DD74 00                         		even
0001DD74 00                         		even
0001DD74                            
0001DD74                            ; ---------------------------------------------------------------------------
0001DD74                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001DD74                            ; ---------------------------------------------------------------------------
0001DD74                            Map_SS_Glass:
0001DD74                            	include "_maps\SSglassblock.asm"
0001DD74                            ; ---------------------------------------------------------------------------
0001DD74                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001DD74                            ; ---------------------------------------------------------------------------
0001DD74 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001DD78 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001DD7C 01                         byte_1B928:	dc.b 1
0001DD7D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001DD82 01                         byte_1B92E:	dc.b 1
0001DD83 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001DD88 01                         byte_1B934:	dc.b 1
0001DD89 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001DD8E 01                         byte_1B93A:	dc.b 1
0001DD8F F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001DD94                            		even
0001DD94                            		even
0001DD94                            
0001DD94                            ; ---------------------------------------------------------------------------
0001DD94                            ; Sprite mappings - special stage "UP" block
0001DD94                            ; ---------------------------------------------------------------------------
0001DD94                            Map_SS_Up:
0001DD94                            	include "_maps\SSUPblock.asm"
0001DD94                            ; ---------------------------------------------------------------------------
0001DD94                            ; Sprite mappings - special stage "UP" block
0001DD94                            ; ---------------------------------------------------------------------------
0001DD94 0000                       		dc.w byte_1B944-Map_SS_Up
0001DD96 0000                       		dc.w byte_1B94A-Map_SS_Up
0001DD98 01                         byte_1B944:	dc.b 1
0001DD99 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001DD9E 01                         byte_1B94A:	dc.b 1
0001DD9F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001DDA4                            		even
0001DDA4                            		even
0001DDA4                            
0001DDA4                            ; ---------------------------------------------------------------------------
0001DDA4                            ; Sprite mappings - special stage "DOWN" block
0001DDA4                            ; ---------------------------------------------------------------------------
0001DDA4                            Map_SS_Down:
0001DDA4                            	include "_maps\SSDOWNblock.asm"
0001DDA4                            ; ---------------------------------------------------------------------------
0001DDA4                            ; Sprite mappings - special stage "DOWN" block
0001DDA4                            ; ---------------------------------------------------------------------------
0001DDA4 0000                       		dc.w byte_1B954-Map_SS_Down
0001DDA6 0000                       		dc.w byte_1B95A-Map_SS_Down
0001DDA8 01                         byte_1B954:	dc.b 1
0001DDA9 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001DDAE 01                         byte_1B95A:	dc.b 1
0001DDAF F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001DDB4                            		even
0001DDB4                            		even
0001DDB4                            
0001DDB4                            ; ---------------------------------------------------------------------------
0001DDB4                            ; Sprite mappings - special stage chaos	emeralds
0001DDB4                            ; ---------------------------------------------------------------------------
0001DDB4 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001DDB6 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001DDB8 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001DDBA 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001DDBC 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001DDBE 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001DDC0 01                         byte_1B96C:	dc.b 1
0001DDC1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001DDC6 01                         byte_1B972:	dc.b 1
0001DDC7 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001DDCC 01                         byte_1B978:	dc.b 1
0001DDCD F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001DDD2 01                         byte_1B97E:	dc.b 1
0001DDD3 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001DDD8                            		even
0001DDD8                            ; ===========================================================================
0001DDD8                            ; ---------------------------------------------------------------------------
0001DDD8                            ; Object 09 - Sonic (special stage)
0001DDD8                            ; ---------------------------------------------------------------------------
0001DDD8                            
0001DDD8                            Obj09:					; XREF: Obj_Index
0001DDD8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001DDDC 6700                       		beq.s	Obj09_Normal	; if not, branch
0001DDDE 6100 0000                  		bsr.w	SS_FixCamera
0001DDE2 6000 0000                  		bra.w	DebugMode
0001DDE6                            ; ===========================================================================
0001DDE6                            
0001DDE6                            Obj09_Normal:
0001DDE6 7000                       		moveq	#0,d0
0001DDE8 1028 0024                  		move.b	$24(a0),d0
0001DDEC 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001DDF0 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001DDF4                            ; ===========================================================================
0001DDF4 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001DDF6 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001DDF8 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001DDFA 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001DDFC                            ; ===========================================================================
0001DDFC                            
0001DDFC                            Obj09_Main:				; XREF: Obj09_Index
0001DDFC 5428 0024                  		addq.b	#2,$24(a0)
0001DE00 117C 000E 0016             		move.b	#$E,$16(a0)
0001DE06 117C 0007 0017             		move.b	#7,$17(a0)
0001DE0C 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001DE14 317C 0780 0002             		move.w	#$780,2(a0)
0001DE1A 117C 0004 0001             		move.b	#4,1(a0)
0001DE20 117C 0000 0018             		move.b	#0,$18(a0)
0001DE26 117C 0002 001C             		move.b	#2,$1C(a0)
0001DE2C 08E8 0002 0022             		bset	#2,$22(a0)
0001DE32 08E8 0001 0022             		bset	#1,$22(a0)
0001DE38                            
0001DE38                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001DE38 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001DE3C 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001DE3E 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DE44 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001DE46 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001DE4C                            
0001DE4C                            Obj09_NoDebug:
0001DE4C 117C 0000 0030             		move.b	#0,$30(a0)
0001DE52 7000                       		moveq	#0,d0
0001DE54 1028 0022                  		move.b	$22(a0),d0
0001DE58 0240 0002                  		andi.w	#2,d0
0001DE5C 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001DE60 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001DE64 4EB9 0001 569A             		jsr	LoadSonicDynPLC
0001DE6A 4EF9 0000 E930             		jmp	DisplaySprite
0001DE70                            ; ===========================================================================
0001DE70 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001DE72 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001DE74                            ; ===========================================================================
0001DE74                            
0001DE74                            Obj09_OnWall:				; XREF: Obj09_Modes
0001DE74 6100 0000                  		bsr.w	Obj09_Jump
0001DE78 6100 0000                  		bsr.w	Obj09_Move
0001DE7C 6100 0000                  		bsr.w	Obj09_Fall
0001DE80 6000                       		bra.s	Obj09_Display
0001DE82                            ; ===========================================================================
0001DE82                            
0001DE82                            Obj09_InAir:				; XREF: Obj09_Modes
0001DE82 6100 0000                  		bsr.w	nullsub_2
0001DE86 6100 0000                  		bsr.w	Obj09_Move
0001DE8A 6100 0000                  		bsr.w	Obj09_Fall
0001DE8E                            
0001DE8E                            Obj09_Display:				; XREF: Obj09_OnWall
0001DE8E 6100 0000                  		bsr.w	Obj09_ChkItems
0001DE92 6100 0000                  		bsr.w	Obj09_ChkItems2
0001DE96 4EB9 0000 E916             		jsr	SpeedToPos
0001DE9C 6100 0000                  		bsr.w	SS_FixCamera
0001DEA0 3038 F780                  		move.w	($FFFFF780).w,d0
0001DEA4 D078 F782                  		add.w	($FFFFF782).w,d0
0001DEA8 31C0 F780                  		move.w	d0,($FFFFF780).w
0001DEAC 4EB9 0001 5420             		jsr	Sonic_Animate
0001DEB2 4E75                       		rts	
0001DEB4                            
0001DEB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DEB4                            
0001DEB4                            
0001DEB4                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001DEB4 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001DEBA 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001DEBC 6100 0000                  		bsr.w	Obj09_MoveLeft
0001DEC0                            
0001DEC0                            Obj09_ChkRight:
0001DEC0 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001DEC6 6700                       		beq.s	loc_1BA78	; if not, branch
0001DEC8 6100 0000                  		bsr.w	Obj09_MoveRight
0001DECC                            
0001DECC                            loc_1BA78:
0001DECC 1038 F602                  		move.b	($FFFFF602).w,d0
0001DED0 0200 000C                  		andi.b	#$C,d0
0001DED4 6600                       		bne.s	loc_1BAA8
0001DED6 3028 0020                  		move.w	$20(a0),d0
0001DEDA 6700                       		beq.s	loc_1BAA8
0001DEDC 6B00                       		bmi.s	loc_1BA9A
0001DEDE 0440 000C                  		subi.w	#$C,d0
0001DEE2 6400                       		bcc.s	loc_1BA94
0001DEE4 303C 0000                  		move.w	#0,d0
0001DEE8                            
0001DEE8                            loc_1BA94:
0001DEE8 3140 0020                  		move.w	d0,$20(a0)
0001DEEC 6000                       		bra.s	loc_1BAA8
0001DEEE                            ; ===========================================================================
0001DEEE                            
0001DEEE                            loc_1BA9A:
0001DEEE 0640 000C                  		addi.w	#$C,d0
0001DEF2 6400                       		bcc.s	loc_1BAA4
0001DEF4 303C 0000                  		move.w	#0,d0
0001DEF8                            
0001DEF8                            loc_1BAA4:
0001DEF8 3140 0020                  		move.w	d0,$20(a0)
0001DEFC                            
0001DEFC                            loc_1BAA8:
0001DEFC 1038 F780                  		move.b	($FFFFF780).w,d0
0001DF00 0600 0020                  		addi.b	#$20,d0
0001DF04 0200 00C0                  		andi.b	#$C0,d0
0001DF08 4400                       		neg.b	d0
0001DF0A 4EB9 0000 29F6             		jsr	(CalcSine).l
0001DF10 C3E8 0020                  		muls.w	$20(a0),d1
0001DF14 D3A8 0008                  		add.l	d1,8(a0)
0001DF18 C1E8 0020                  		muls.w	$20(a0),d0
0001DF1C D1A8 000C                  		add.l	d0,$C(a0)
0001DF20 48E7 C000                  		movem.l	d0-d1,-(sp)
0001DF24 2428 000C                  		move.l	$C(a0),d2
0001DF28 2628 0008                  		move.l	8(a0),d3
0001DF2C 6100 0000                  		bsr.w	sub_1BCE8
0001DF30 6700                       		beq.s	loc_1BAF2
0001DF32 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001DF36 93A8 0008                  		sub.l	d1,8(a0)
0001DF3A 91A8 000C                  		sub.l	d0,$C(a0)
0001DF3E 317C 0000 0020             		move.w	#0,$20(a0)
0001DF44 4E75                       		rts	
0001DF46                            ; ===========================================================================
0001DF46                            
0001DF46                            loc_1BAF2:
0001DF46 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001DF4A 4E75                       		rts	
0001DF4C                            ; End of function Obj09_Move
0001DF4C                            
0001DF4C                            
0001DF4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DF4C                            
0001DF4C                            
0001DF4C                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001DF4C 08E8 0000 0022             		bset	#0,$22(a0)
0001DF52 3028 0020                  		move.w	$20(a0),d0
0001DF56 6700                       		beq.s	loc_1BB06
0001DF58 6A00                       		bpl.s	loc_1BB1A
0001DF5A                            
0001DF5A                            loc_1BB06:
0001DF5A 0440 000C                  		subi.w	#$C,d0
0001DF5E 0C40 F800                  		cmpi.w	#-$800,d0
0001DF62 6E00                       		bgt.s	loc_1BB14
0001DF64 303C F800                  		move.w	#-$800,d0
0001DF68                            
0001DF68                            loc_1BB14:
0001DF68 3140 0020                  		move.w	d0,$20(a0)
0001DF6C 4E75                       		rts	
0001DF6E                            ; ===========================================================================
0001DF6E                            
0001DF6E                            loc_1BB1A:
0001DF6E 0440 0040                  		subi.w	#$40,d0
0001DF72 6400                       		bcc.s	loc_1BB22
0001DF74 4E71                       		nop	
0001DF76                            
0001DF76                            loc_1BB22:
0001DF76 3140 0020                  		move.w	d0,$20(a0)
0001DF7A 4E75                       		rts	
0001DF7C                            ; End of function Obj09_MoveLeft
0001DF7C                            
0001DF7C                            
0001DF7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DF7C                            
0001DF7C                            
0001DF7C                            Obj09_MoveRight:			; XREF: Obj09_Move
0001DF7C 08A8 0000 0022             		bclr	#0,$22(a0)
0001DF82 3028 0020                  		move.w	$20(a0),d0
0001DF86 6B00                       		bmi.s	loc_1BB48
0001DF88 0640 000C                  		addi.w	#$C,d0
0001DF8C 0C40 0800                  		cmpi.w	#$800,d0
0001DF90 6D00                       		blt.s	loc_1BB42
0001DF92 303C 0800                  		move.w	#$800,d0
0001DF96                            
0001DF96                            loc_1BB42:
0001DF96 3140 0020                  		move.w	d0,$20(a0)
0001DF9A 6000                       		bra.s	locret_1BB54
0001DF9C                            ; ===========================================================================
0001DF9C                            
0001DF9C                            loc_1BB48:
0001DF9C 0640 0040                  		addi.w	#$40,d0
0001DFA0 6400                       		bcc.s	loc_1BB50
0001DFA2 4E71                       		nop	
0001DFA4                            
0001DFA4                            loc_1BB50:
0001DFA4 3140 0020                  		move.w	d0,$20(a0)
0001DFA8                            
0001DFA8                            locret_1BB54:
0001DFA8 4E75                       		rts	
0001DFAA                            ; End of function Obj09_MoveRight
0001DFAA                            
0001DFAA                            
0001DFAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DFAA                            
0001DFAA                            
0001DFAA                            Obj09_Jump:				; XREF: Obj09_OnWall
0001DFAA 1038 F603                  		move.b	($FFFFF603).w,d0
0001DFAE 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001DFB2 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001DFB4 1038 F780                  		move.b	($FFFFF780).w,d0
0001DFB8 0200 00FC                  		andi.b	#$FC,d0
0001DFBC 4400                       		neg.b	d0
0001DFBE 0400 0040                  		subi.b	#$40,d0
0001DFC2 4EB9 0000 29F6             		jsr	(CalcSine).l
0001DFC8 C3FC 0680                  		muls.w	#$680,d1
0001DFCC E081                       		asr.l	#8,d1
0001DFCE 3141 0010                  		move.w	d1,$10(a0)
0001DFD2 C1FC 0680                  		muls.w	#$680,d0
0001DFD6 E080                       		asr.l	#8,d0
0001DFD8 3140 0012                  		move.w	d0,$12(a0)
0001DFDC 08E8 0001 0022             		bset	#1,$22(a0)
0001DFE2 303C 00A0                  		move.w	#$A0,d0
0001DFE6 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play jumping sound
0001DFEC                            
0001DFEC                            Obj09_NoJump:
0001DFEC 4E75                       		rts	
0001DFEE                            ; End of function Obj09_Jump
0001DFEE                            
0001DFEE                            
0001DFEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DFEE                            
0001DFEE                            
0001DFEE                            nullsub_2:				; XREF: Obj09_InAir
0001DFEE 4E75                       		rts	
0001DFF0                            ; End of function nullsub_2
0001DFF0                            
0001DFF0                            ; ===========================================================================
0001DFF0                            ; ---------------------------------------------------------------------------
0001DFF0                            ; unused subroutine to limit Sonic's upward vertical speed
0001DFF0                            ; ---------------------------------------------------------------------------
0001DFF0 323C FC00                  		move.w	#-$400,d1
0001DFF4 B268 0012                  		cmp.w	$12(a0),d1
0001DFF8 6F00                       		ble.s	locret_1BBB4
0001DFFA 1038 F602                  		move.b	($FFFFF602).w,d0
0001DFFE 0200 0070                  		andi.b	#$70,d0
0001E002 6600                       		bne.s	locret_1BBB4
0001E004 3141 0012                  		move.w	d1,$12(a0)
0001E008                            
0001E008                            locret_1BBB4:
0001E008 4E75                       		rts	
0001E00A                            ; ---------------------------------------------------------------------------
0001E00A                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001E00A                            ; ---------------------------------------------------------------------------
0001E00A                            
0001E00A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E00A                            
0001E00A                            
0001E00A                            SS_FixCamera:				; XREF: Obj09
0001E00A 3428 000C                  		move.w	$C(a0),d2
0001E00E 3628 0008                  		move.w	8(a0),d3
0001E012 3038 F700                  		move.w	($FFFFF700).w,d0
0001E016 0443 00A0                  		subi.w	#$A0,d3
0001E01A 6500                       		bcs.s	loc_1BBCE
0001E01C 9043                       		sub.w	d3,d0
0001E01E 9178 F700                  		sub.w	d0,($FFFFF700).w
0001E022                            
0001E022                            loc_1BBCE:
0001E022 3038 F704                  		move.w	($FFFFF704).w,d0
0001E026 0442 0070                  		subi.w	#$70,d2
0001E02A 6500                       		bcs.s	locret_1BBDE
0001E02C 9042                       		sub.w	d2,d0
0001E02E 9178 F704                  		sub.w	d0,($FFFFF704).w
0001E032                            
0001E032                            locret_1BBDE:
0001E032 4E75                       		rts	
0001E034                            ; End of function SS_FixCamera
0001E034                            
0001E034                            ; ===========================================================================
0001E034                            
0001E034                            Obj09_ExitStage:			; XREF: Obj09_Index
0001E034 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001E03A 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001E040 6600                       		bne.s	loc_1BBF4
0001E042 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001E048                            
0001E048                            loc_1BBF4:
0001E048 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001E04E 6D00                       		blt.s	loc_1BC12
0001E050 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001E056 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001E05C 5428 0024                  		addq.b	#2,$24(a0)
0001E060 317C 003C 0038             		move.w	#$3C,$38(a0)
0001E066                            
0001E066                            loc_1BC12:
0001E066 3038 F780                  		move.w	($FFFFF780).w,d0
0001E06A D078 F782                  		add.w	($FFFFF782).w,d0
0001E06E 31C0 F780                  		move.w	d0,($FFFFF780).w
0001E072 4EB9 0001 5420             		jsr	Sonic_Animate
0001E078 4EB9 0001 569A             		jsr	LoadSonicDynPLC
0001E07E 6100 FF8A                  		bsr.w	SS_FixCamera
0001E082 4EF9 0000 E930             		jmp	DisplaySprite
0001E088                            ; ===========================================================================
0001E088                            
0001E088                            Obj09_Exit2:				; XREF: Obj09_Index
0001E088 5368 0038                  		subq.w	#1,$38(a0)
0001E08C 6600                       		bne.s	loc_1BC40
0001E08E 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001E094                            
0001E094                            loc_1BC40:
0001E094 4EB9 0001 5420             		jsr	Sonic_Animate
0001E09A 4EB9 0001 569A             		jsr	LoadSonicDynPLC
0001E0A0 6100 FF68                  		bsr.w	SS_FixCamera
0001E0A4 4EF9 0000 E930             		jmp	DisplaySprite
0001E0AA                            
0001E0AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E0AA                            
0001E0AA                            
0001E0AA                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001E0AA 2428 000C                  		move.l	$C(a0),d2
0001E0AE 2628 0008                  		move.l	8(a0),d3
0001E0B2 1038 F780                  		move.b	($FFFFF780).w,d0
0001E0B6 0200 00FC                  		andi.b	#$FC,d0
0001E0BA 4EB9 0000 29F6             		jsr	(CalcSine).l
0001E0C0 3828 0010                  		move.w	$10(a0),d4
0001E0C4 48C4                       		ext.l	d4
0001E0C6 E184                       		asl.l	#8,d4
0001E0C8 C1FC 002A                  		muls.w	#$2A,d0
0001E0CC D084                       		add.l	d4,d0
0001E0CE 3828 0012                  		move.w	$12(a0),d4
0001E0D2 48C4                       		ext.l	d4
0001E0D4 E184                       		asl.l	#8,d4
0001E0D6 C3FC 002A                  		muls.w	#$2A,d1
0001E0DA D284                       		add.l	d4,d1
0001E0DC D680                       		add.l	d0,d3
0001E0DE 6100 0000                  		bsr.w	sub_1BCE8
0001E0E2 6700                       		beq.s	loc_1BCB0
0001E0E4 9680                       		sub.l	d0,d3
0001E0E6 7000                       		moveq	#0,d0
0001E0E8 3140 0010                  		move.w	d0,$10(a0)
0001E0EC 08A8 0001 0022             		bclr	#1,$22(a0)
0001E0F2 D481                       		add.l	d1,d2
0001E0F4 6100 0000                  		bsr.w	sub_1BCE8
0001E0F8 6700                       		beq.s	loc_1BCC6
0001E0FA 9481                       		sub.l	d1,d2
0001E0FC 7200                       		moveq	#0,d1
0001E0FE 3141 0012                  		move.w	d1,$12(a0)
0001E102 4E75                       		rts	
0001E104                            ; ===========================================================================
0001E104                            
0001E104                            loc_1BCB0:
0001E104 D481                       		add.l	d1,d2
0001E106 6100 0000                  		bsr.w	sub_1BCE8
0001E10A 6700                       		beq.s	loc_1BCD4
0001E10C 9481                       		sub.l	d1,d2
0001E10E 7200                       		moveq	#0,d1
0001E110 3141 0012                  		move.w	d1,$12(a0)
0001E114 08A8 0001 0022             		bclr	#1,$22(a0)
0001E11A                            
0001E11A                            loc_1BCC6:
0001E11A E080                       		asr.l	#8,d0
0001E11C E081                       		asr.l	#8,d1
0001E11E 3140 0010                  		move.w	d0,$10(a0)
0001E122 3141 0012                  		move.w	d1,$12(a0)
0001E126 4E75                       		rts	
0001E128                            ; ===========================================================================
0001E128                            
0001E128                            loc_1BCD4:
0001E128 E080                       		asr.l	#8,d0
0001E12A E081                       		asr.l	#8,d1
0001E12C 3140 0010                  		move.w	d0,$10(a0)
0001E130 3141 0012                  		move.w	d1,$12(a0)
0001E134 08E8 0001 0022             		bset	#1,$22(a0)
0001E13A 4E75                       		rts	
0001E13C                            ; End of function Obj09_Fall
0001E13C                            
0001E13C                            
0001E13C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E13C                            
0001E13C                            
0001E13C                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001E13C 43F9 00FF 0000             		lea	($FF0000).l,a1
0001E142 7800                       		moveq	#0,d4
0001E144 4842                       		swap	d2
0001E146 3802                       		move.w	d2,d4
0001E148 4842                       		swap	d2
0001E14A 0644 0044                  		addi.w	#$44,d4
0001E14E 88FC 0018                  		divu.w	#$18,d4
0001E152 C8FC 0080                  		mulu.w	#$80,d4
0001E156 D3C4                       		adda.l	d4,a1
0001E158 7800                       		moveq	#0,d4
0001E15A 4843                       		swap	d3
0001E15C 3803                       		move.w	d3,d4
0001E15E 4843                       		swap	d3
0001E160 0644 0014                  		addi.w	#$14,d4
0001E164 88FC 0018                  		divu.w	#$18,d4
0001E168 D2C4                       		adda.w	d4,a1
0001E16A 7A00                       		moveq	#0,d5
0001E16C 1819                       		move.b	(a1)+,d4
0001E16E 6100                       		bsr.s	sub_1BD30
0001E170 1819                       		move.b	(a1)+,d4
0001E172 6100                       		bsr.s	sub_1BD30
0001E174 D2FC 007E                  		adda.w	#$7E,a1
0001E178 1819                       		move.b	(a1)+,d4
0001E17A 6100                       		bsr.s	sub_1BD30
0001E17C 1819                       		move.b	(a1)+,d4
0001E17E 6100                       		bsr.s	sub_1BD30
0001E180 4A05                       		tst.b	d5
0001E182 4E75                       		rts	
0001E184                            ; End of function sub_1BCE8
0001E184                            
0001E184                            
0001E184                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E184                            
0001E184                            
0001E184                            sub_1BD30:				; XREF: sub_1BCE8
0001E184 6700                       		beq.s	locret_1BD44
0001E186 0C04 0028                  		cmpi.b	#$28,d4
0001E18A 6700                       		beq.s	locret_1BD44
0001E18C 0C04 003A                  		cmpi.b	#$3A,d4
0001E190 6500                       		bcs.s	loc_1BD46
0001E192 0C04 004B                  		cmpi.b	#$4B,d4
0001E196 6400                       		bcc.s	loc_1BD46
0001E198                            
0001E198                            locret_1BD44:
0001E198 4E75                       		rts	
0001E19A                            ; ===========================================================================
0001E19A                            
0001E19A                            loc_1BD46:
0001E19A 1144 0030                  		move.b	d4,$30(a0)
0001E19E 2149 0032                  		move.l	a1,$32(a0)
0001E1A2 7AFF                       		moveq	#-1,d5
0001E1A4 4E75                       		rts	
0001E1A6                            ; End of function sub_1BD30
0001E1A6                            
0001E1A6                            
0001E1A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E1A6                            
0001E1A6                            
0001E1A6                            Obj09_ChkItems:				; XREF: Obj09_Display
0001E1A6 43F9 00FF 0000             		lea	($FF0000).l,a1
0001E1AC 7800                       		moveq	#0,d4
0001E1AE 3828 000C                  		move.w	$C(a0),d4
0001E1B2 0644 0050                  		addi.w	#$50,d4
0001E1B6 88FC 0018                  		divu.w	#$18,d4
0001E1BA C8FC 0080                  		mulu.w	#$80,d4
0001E1BE D3C4                       		adda.l	d4,a1
0001E1C0 7800                       		moveq	#0,d4
0001E1C2 3828 0008                  		move.w	8(a0),d4
0001E1C6 0644 0020                  		addi.w	#$20,d4
0001E1CA 88FC 0018                  		divu.w	#$18,d4
0001E1CE D2C4                       		adda.w	d4,a1
0001E1D0 1811                       		move.b	(a1),d4
0001E1D2 6600                       		bne.s	Obj09_ChkCont
0001E1D4 4A28 003A                  		tst.b	$3A(a0)
0001E1D8 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001E1DC 7800                       		moveq	#0,d4
0001E1DE 4E75                       		rts	
0001E1E0                            ; ===========================================================================
0001E1E0                            
0001E1E0                            Obj09_ChkCont:
0001E1E0 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001E1E4 6600                       		bne.s	Obj09_Chk1Up
0001E1E6 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001E1EA 6600                       		bne.s	Obj09_GetCont
0001E1EC 14BC 0001                  		move.b	#1,(a2)
0001E1F0 2549 0004                  		move.l	a1,4(a2)
0001E1F4                            
0001E1F4                            Obj09_GetCont:
0001E1F4 4EB9 0000 AEE2             		jsr	CollectRing
0001E1FA 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001E200 6500                       		bcs.s	Obj09_NoCont
0001E202 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001E208 6600                       		bne.s	Obj09_NoCont
0001E20A 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001E210 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001E216 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001E21A 303C 00BF                  		move.w	#$BF,d0
0001E21E 4EB9 0000 121A             		jsr	(PlaySound).l	; play extra continue sound
0001E224                            
0001E224                            Obj09_NoCont:
0001E224 7800                       		moveq	#0,d4
0001E226 4E75                       		rts	
0001E228                            ; ===========================================================================
0001E228                            
0001E228                            Obj09_Chk1Up:
0001E228 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001E22C 6600                       		bne.s	Obj09_ChkEmer
0001E22E 6100 F6DE                  		bsr.w	SS_RemoveCollectedItem
0001E232 6600                       		bne.s	Obj09_Get1Up
0001E234 14BC 0003                  		move.b	#3,(a2)
0001E238 2549 0004                  		move.l	a1,4(a2)
0001E23C                            
0001E23C                            Obj09_Get1Up:
0001E23C 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001E240 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001E244 303C 0088                  		move.w	#$88,d0
0001E248 4EB9 0000 121A             		jsr	(PlaySound).l	; play extra life music
0001E24E 7800                       		moveq	#0,d4
0001E250 4E75                       		rts	
0001E252                            ; ===========================================================================
0001E252                            
0001E252                            Obj09_ChkEmer:
0001E252 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001E256 6500                       		bcs.s	Obj09_ChkGhost
0001E258 0C04 0040                  		cmpi.b	#$40,d4
0001E25C 6200                       		bhi.s	Obj09_ChkGhost
0001E25E 6100 F6AE                  		bsr.w	SS_RemoveCollectedItem
0001E262 6600                       		bne.s	Obj09_GetEmer
0001E264 14BC 0005                  		move.b	#5,(a2)
0001E268 2549 0004                  		move.l	a1,4(a2)
0001E26C                            
0001E26C                            Obj09_GetEmer:
0001E26C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001E272 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001E274 0404 003B                  		subi.b	#$3B,d4
0001E278 7000                       		moveq	#0,d0
0001E27A 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001E27E 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001E282 1584 0000                  		move.b	d4,(a2,d0.w)
0001E286 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001E28A 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001E290 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001E296                            
0001E296                            Obj09_NoEmer:
0001E296 303C 0093                  		move.w	#$93,d0
0001E29A 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play emerald music
0001E2A0 7800                       		moveq	#0,d4
0001E2A2 4E75                       		rts	
0001E2A4                            ; ===========================================================================
0001E2A4                            
0001E2A4                            Obj09_ChkGhost:
0001E2A4 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001E2A8 6600                       		bne.s	Obj09_ChkGhostTag
0001E2AA 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001E2B0                            
0001E2B0                            Obj09_ChkGhostTag:
0001E2B0 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001E2B4 6600                       		bne.s	Obj09_NoGhost
0001E2B6 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001E2BC 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001E2BE 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001E2C4                            
0001E2C4                            Obj09_NoGhost:
0001E2C4 78FF                       		moveq	#-1,d4
0001E2C6 4E75                       		rts	
0001E2C8                            ; ===========================================================================
0001E2C8                            
0001E2C8                            Obj09_MakeGhostSolid:
0001E2C8 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001E2CE 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001E2D0 43F9 00FF 1020             		lea	($FF1020).l,a1
0001E2D6 723F                       		moveq	#$3F,d1
0001E2D8                            
0001E2D8                            Obj09_GhostLoop2:
0001E2D8 743F                       		moveq	#$3F,d2
0001E2DA                            
0001E2DA                            Obj09_GhostLoop:
0001E2DA 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001E2DE 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001E2E0 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001E2E4                            
0001E2E4                            Obj09_NoReplace:
0001E2E4 5249                       		addq.w	#1,a1
0001E2E6 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001E2EA 43E9 0040                  		lea	$40(a1),a1
0001E2EE 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001E2F2                            
0001E2F2                            Obj09_GhostNotSolid:
0001E2F2 4228 003A                  		clr.b	$3A(a0)
0001E2F6 7800                       		moveq	#0,d4
0001E2F8 4E75                       		rts	
0001E2FA                            ; End of function Obj09_ChkItems
0001E2FA                            
0001E2FA                            
0001E2FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E2FA                            
0001E2FA                            
0001E2FA                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001E2FA 1028 0030                  		move.b	$30(a0),d0
0001E2FE 6600                       		bne.s	Obj09_ChkBumper
0001E300 5328 0036                  		subq.b	#1,$36(a0)
0001E304 6A00                       		bpl.s	loc_1BEA0
0001E306 117C 0000 0036             		move.b	#0,$36(a0)
0001E30C                            
0001E30C                            loc_1BEA0:
0001E30C 5328 0037                  		subq.b	#1,$37(a0)
0001E310 6A00                       		bpl.s	locret_1BEAC
0001E312 117C 0000 0037             		move.b	#0,$37(a0)
0001E318                            
0001E318                            locret_1BEAC:
0001E318 4E75                       		rts	
0001E31A                            ; ===========================================================================
0001E31A                            
0001E31A                            Obj09_ChkBumper:
0001E31A 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001E31E 6600                       		bne.s	Obj09_GOAL	
0001E320 11FC 0008 F5CE             		move.b	#face_confused,(SonimeSST+sonime_face).w
0001E326 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0001E32C 2228 0032                  		move.l	$32(a0),d1
0001E330 0481 00FF 0001             		subi.l	#$FF0001,d1
0001E336 3401                       		move.w	d1,d2
0001E338 0241 007F                  		andi.w	#$7F,d1
0001E33C C2FC 0018                  		mulu.w	#$18,d1
0001E340 0441 0014                  		subi.w	#$14,d1
0001E344 EE4A                       		lsr.w	#7,d2
0001E346 0242 007F                  		andi.w	#$7F,d2
0001E34A C4FC 0018                  		mulu.w	#$18,d2
0001E34E 0442 0044                  		subi.w	#$44,d2
0001E352 9268 0008                  		sub.w	8(a0),d1
0001E356 9468 000C                  		sub.w	$C(a0),d2
0001E35A 4EB9 0000 2CBE             		jsr	(CalcAngle).l
0001E360 4EB9 0000 29F6             		jsr	(CalcSine).l
0001E366 C3FC F900                  		muls.w	#-$700,d1
0001E36A E081                       		asr.l	#8,d1
0001E36C 3141 0010                  		move.w	d1,$10(a0)
0001E370 C1FC F900                  		muls.w	#-$700,d0
0001E374 E080                       		asr.l	#8,d0
0001E376 3140 0012                  		move.w	d0,$12(a0)
0001E37A 08E8 0001 0022             		bset	#1,$22(a0)
0001E380 6100 F58C                  		bsr.w	SS_RemoveCollectedItem
0001E384 6600                       		bne.s	Obj09_BumpSnd
0001E386 14BC 0002                  		move.b	#2,(a2)
0001E38A 2028 0032                  		move.l	$32(a0),d0
0001E38E 5380                       		subq.l	#1,d0
0001E390 2540 0004                  		move.l	d0,4(a2)
0001E394                            
0001E394                            Obj09_BumpSnd:
0001E394 303C 00B4                  		move.w	#$B4,d0
0001E398 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play bumper sound
0001E39E                            ; ===========================================================================
0001E39E                            
0001E39E                            Obj09_GOAL:
0001E39E 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001E3A2 6600                       		bne.s	Obj09_UPblock
0001E3A4 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001E3A8 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
0001E3AE 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001E3B4 303C 00A8                  		move.w	#$A8,d0		; change item
0001E3B8 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001E3BE 4E75                       		rts	
0001E3C0                            ; ===========================================================================
0001E3C0                            
0001E3C0                            Obj09_UPblock:
0001E3C0 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001E3C4 6600                       		bne.s	Obj09_DOWNblock
0001E3C6 4A28 0036                  		tst.b	$36(a0)
0001E3CA 6600 0000                  		bne.w	Obj09_NoGlass
0001E3CE 117C 001E 0036             		move.b	#$1E,$36(a0)
0001E3D4 0838 0006 F783             		btst	#6,($FFFFF783).w
0001E3DA 6700                       		beq.s	Obj09_UPsnd
0001E3DC E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001E3E0 2268 0032                  		movea.l	$32(a0),a1
0001E3E4 5389                       		subq.l	#1,a1
0001E3E6 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001E3EA                            
0001E3EA                            Obj09_UPsnd:
0001E3EA 303C 00A9                  		move.w	#$A9,d0
0001E3EE 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play up/down sound
0001E3F4                            ; ===========================================================================
0001E3F4                            
0001E3F4                            Obj09_DOWNblock:
0001E3F4 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001E3F8 6600                       		bne.s	Obj09_Rblock
0001E3FA 4A28 0036                  		tst.b	$36(a0)
0001E3FE 6600 0000                  		bne.w	Obj09_NoGlass
0001E402 117C 001E 0036             		move.b	#$1E,$36(a0)
0001E408 0838 0006 F783             		btst	#6,($FFFFF783).w
0001E40E 6600                       		bne.s	Obj09_DOWNsnd
0001E410 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001E414 2268 0032                  		movea.l	$32(a0),a1
0001E418 5389                       		subq.l	#1,a1
0001E41A 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001E41E                            
0001E41E                            Obj09_DOWNsnd:
0001E41E 303C 00A9                  		move.w	#$A9,d0
0001E422 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play up/down sound
0001E428                            ; ===========================================================================
0001E428                            
0001E428                            Obj09_Rblock:
0001E428 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001E42C 6600                       		bne.s	Obj09_ChkGlass
0001E42E 4A28 0037                  		tst.b	$37(a0)
0001E432 6600 0000                  		bne.w	Obj09_NoGlass
0001E436 117C 001E 0037             		move.b	#$1E,$37(a0)
0001E43C 6100 F4D0                  		bsr.w	SS_RemoveCollectedItem
0001E440 6600                       		bne.s	Obj09_RevStage
0001E442 14BC 0004                  		move.b	#4,(a2)
0001E446 2028 0032                  		move.l	$32(a0),d0
0001E44A 5380                       		subq.l	#1,d0
0001E44C 2540 0004                  		move.l	d0,4(a2)
0001E450                            
0001E450                            Obj09_RevStage:
0001E450 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001E454 303C 00A9                  		move.w	#$A9,d0
0001E458 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play sound
0001E45E                            ; ===========================================================================
0001E45E                            
0001E45E                            Obj09_ChkGlass:
0001E45E 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001E462 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001E464 0C00 002E                  		cmpi.b	#$2E,d0
0001E468 6700                       		beq.s	Obj09_Glass
0001E46A 0C00 002F                  		cmpi.b	#$2F,d0
0001E46E 6700                       		beq.s	Obj09_Glass
0001E470 0C00 0030                  		cmpi.b	#$30,d0
0001E474 6600 0000                  		bne.w	Obj09_NoGlass	; if not, branch
0001E478                            
0001E478                            Obj09_Glass:
0001E478 0C38 0007 F5CE             		cmpi.b	#face_happy,(SonimeSST+sonime_face).w
0001E47E 6700                       		beq.s	@happy
0001E480 11FC 000B F5CE             		move.b	#face_impatient,(SonimeSST+sonime_face).w
0001E486 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0001E48C 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeImpatient		
0001E4E2                            
0001E4E2                            	@happy:
0001E4E2 6100 F42A                  		bsr.w	SS_RemoveCollectedItem
0001E4E6 6600                       		bne.s	Obj09_GlassSnd
0001E4E8 14BC 0006                  		move.b	#6,(a2)
0001E4EC 2268 0032                  		movea.l	$32(a0),a1
0001E4F0 5389                       		subq.l	#1,a1
0001E4F2 2549 0004                  		move.l	a1,4(a2)
0001E4F6 1011                       		move.b	(a1),d0
0001E4F8 5200                       		addq.b	#1,d0		; change glass type when touched
0001E4FA 0C00 0030                  		cmpi.b	#$30,d0
0001E4FE 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001E500 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001E502                            
0001E502                            Obj09_GlassUpdate:
0001E502 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001E506                            
0001E506                            Obj09_GlassSnd:
0001E506 303C 00BA                  		move.w	#$BA,d0
0001E50A 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play glass block sound
0001E510                            ; ===========================================================================
0001E510                            
0001E510                            Obj09_NoGlass:
0001E510 4E75                       		rts	
0001E512                            ; End of function Obj09_ChkItems2
0001E512                            
0001E512                            ; ===========================================================================
0001E512                            ; ---------------------------------------------------------------------------
0001E512                            ; Object 10 - blank
0001E512                            ; ---------------------------------------------------------------------------
0001E512                            
0001E512                            Obj10:					; XREF: Obj_Index
0001E512 4E75                       		rts	
0001E514                            ; ---------------------------------------------------------------------------
0001E514                            ; Subroutine to	animate	level graphics
0001E514                            ; ---------------------------------------------------------------------------
0001E514                            
0001E514                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E514                            
0001E514                            
0001E514                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001E514 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001E518 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001E51A 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E520 6100 0000                  		bsr.w	AniArt_GiantRing
0001E524 7000                       		moveq	#0,d0
0001E526 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001E52A D040                       		add.w	d0,d0
0001E52C 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001E530 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001E534                            ; ===========================================================================
0001E534                            
0001E534                            AniArt_Pause:
0001E534 4E75                       		rts	
0001E536                            ; End of function AniArt_Load
0001E536                            
0001E536                            ; ===========================================================================
0001E536 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001E53A 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001E53E 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001E542 0000                       		dc.w AniArt_Ending-AniArt_Index
0001E544                            ; ===========================================================================
0001E544                            ; ---------------------------------------------------------------------------
0001E544                            ; Animated pattern routine - Green Hill
0001E544                            ; ---------------------------------------------------------------------------
0001E544                            
0001E544                            AniArt_GHZ:				; XREF: AniArt_Index
0001E544 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E548 6A00                       		bpl.s	loc_1C08A
0001E54A 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001E550 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001E556 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E55A 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E55E 0240 0001                  		andi.w	#1,d0
0001E562 6700                       		beq.s	loc_1C078
0001E564 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001E568                            
0001E568                            loc_1C078:
0001E568 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001E572 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001E576 6000 0000                  		bra.w	LoadTiles
0001E57A                            ; ===========================================================================
0001E57A                            
0001E57A                            loc_1C08A:
0001E57A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E57E 6A00                       		bpl.s	loc_1C0C0
0001E580 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001E586 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001E58C 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E590 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E594 0240 0001                  		andi.w	#1,d0
0001E598 6700                       		beq.s	loc_1C0AE
0001E59A 43E9 0200                  		lea	$200(a1),a1
0001E59E                            
0001E59E                            loc_1C0AE:
0001E59E 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001E5A8 323C 000F                  		move.w	#$F,d1
0001E5AC 6000 0000                  		bra.w	LoadTiles
0001E5B0                            ; ===========================================================================
0001E5B0                            
0001E5B0                            loc_1C0C0:
0001E5B0 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E5B4 6A00                       		bpl.s	locret_1C10C
0001E5B6 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E5BC 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001E5C0 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001E5C4 0240 0003                  		andi.w	#3,d0
0001E5C8 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001E5CC 0800 0000                  		btst	#0,d0
0001E5D0 6600                       		bne.s	loc_1C0E8
0001E5D2 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001E5D8                            
0001E5D8                            loc_1C0E8:
0001E5D8 EF48                       		lsl.w	#7,d0
0001E5DA 3200                       		move.w	d0,d1
0001E5DC D040                       		add.w	d0,d0
0001E5DE D041                       		add.w	d1,d0
0001E5E0 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001E5EA 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001E5F0 43F1 0000                  		lea	(a1,d0.w),a1
0001E5F4 323C 000B                  		move.w	#$B,d1
0001E5F8 6100 0000                  		bsr.w	LoadTiles
0001E5FC                            
0001E5FC                            locret_1C10C:
0001E5FC 4E75                       		rts	
0001E5FE                            ; ===========================================================================
0001E5FE 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001E602                            ; ===========================================================================
0001E602                            ; ---------------------------------------------------------------------------
0001E602                            ; Animated pattern routine - Marble
0001E602                            ; ---------------------------------------------------------------------------
0001E602                            
0001E602                            AniArt_MZ:				; XREF: AniArt_Index
0001E602 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E606 6A00                       		bpl.s	loc_1C150
0001E608 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001E60E 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001E614 7000                       		moveq	#0,d0
0001E616 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E61A 5200                       		addq.b	#1,d0
0001E61C 0C00 0003                  		cmpi.b	#3,d0
0001E620 6600                       		bne.s	loc_1C134
0001E622 7000                       		moveq	#0,d0
0001E624                            
0001E624                            loc_1C134:
0001E624 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001E628 C0FC 0100                  		mulu.w	#$100,d0
0001E62C D2C0                       		adda.w	d0,a1
0001E62E 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001E638 323C 0007                  		move.w	#7,d1
0001E63C 6100 0000                  		bsr.w	LoadTiles
0001E640                            
0001E640                            loc_1C150:
0001E640 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E644 6A00                       		bpl.s	loc_1C1AE
0001E646 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001E64C 7000                       		moveq	#0,d0
0001E64E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E652 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001E658 EE58                       		ror.w	#7,d0
0001E65A D8C0                       		adda.w	d0,a4
0001E65C 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001E666 7600                       		moveq	#0,d3
0001E668 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001E66C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E670 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001E674 343C 0003                  		move.w	#3,d2
0001E678                            
0001E678                            loc_1C188:
0001E678 3003                       		move.w	d3,d0
0001E67A D040                       		add.w	d0,d0
0001E67C 0240 001E                  		andi.w	#$1E,d0
0001E680 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001E686 3033 0000                  		move.w	(a3,d0.w),d0
0001E68A 47F3 0000                  		lea	(a3,d0.w),a3
0001E68E 224C                       		movea.l	a4,a1
0001E690 323C 001F                  		move.w	#$1F,d1
0001E694 4E93                       		jsr	(a3)
0001E696 5843                       		addq.w	#4,d3
0001E698 51CA FFDE                  		dbf	d2,loc_1C188
0001E69C 4E75                       		rts	
0001E69E                            ; ===========================================================================
0001E69E                            
0001E69E                            loc_1C1AE:
0001E69E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E6A2 6A00 0000                  		bpl.w	locret_1C1EA
0001E6A6 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E6AC 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001E6B2 7000                       		moveq	#0,d0
0001E6B4 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001E6B8 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001E6BC 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001E6C2 C0FC 00C0                  		mulu.w	#$C0,d0
0001E6C6 D2C0                       		adda.w	d0,a1
0001E6C8 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001E6D2 323C 0005                  		move.w	#5,d1
0001E6D6 6000 0000                  		bra.w	LoadTiles
0001E6DA                            ; ===========================================================================
0001E6DA                            
0001E6DA                            locret_1C1EA:
0001E6DA 4E75                       		rts	
0001E6DC                            ; ===========================================================================
0001E6DC                            ; ---------------------------------------------------------------------------
0001E6DC                            ; Animated pattern routine - Scrap Brain
0001E6DC                            ; ---------------------------------------------------------------------------
0001E6DC                            
0001E6DC                            AniArt_SBZ:				; XREF: AniArt_Index
0001E6DC 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001E6E0 6700                       		beq.s	loc_1C1F8
0001E6E2 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001E6E6 6000                       		bra.s	loc_1C250
0001E6E8                            ; ===========================================================================
0001E6E8                            
0001E6E8                            loc_1C1F8:
0001E6E8 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E6EC 6A00                       		bpl.s	loc_1C250
0001E6EE 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001E6F4 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001E6FA 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001E704 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E708 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E70C 0240 0007                  		andi.w	#7,d0
0001E710 6700                       		beq.s	loc_1C234
0001E712 5340                       		subq.w	#1,d0
0001E714 C0FC 0180                  		mulu.w	#$180,d0
0001E718 43F1 0000                  		lea	(a1,d0.w),a1
0001E71C 323C 000B                  		move.w	#$B,d1
0001E720 6000 0000                  		bra.w	LoadTiles
0001E724                            ; ===========================================================================
0001E724                            
0001E724                            loc_1C234:
0001E724 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001E72A                            
0001E72A                            loc_1C23A:
0001E72A 323C 0005                  		move.w	#5,d1
0001E72E 6100 0000                  		bsr.w	LoadTiles
0001E732 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001E738 323C 0005                  		move.w	#5,d1
0001E73C 6000 0000                  		bra.w	LoadTiles
0001E740                            ; ===========================================================================
0001E740                            
0001E740                            loc_1C250:
0001E740 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001E744 6700                       		beq.s	loc_1C25C
0001E746 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E74A 6000                       		bra.s	locret_1C2A0
0001E74C                            ; ===========================================================================
0001E74C                            
0001E74C                            loc_1C25C:
0001E74C 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E750 6A00                       		bpl.s	locret_1C2A0
0001E752 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001E758 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001E75E 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001E768 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E76C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E770 0240 0007                  		andi.w	#7,d0
0001E774 6700                       		beq.s	loc_1C298
0001E776 5340                       		subq.w	#1,d0
0001E778 C0FC 0180                  		mulu.w	#$180,d0
0001E77C 43F1 0000                  		lea	(a1,d0.w),a1
0001E780 323C 000B                  		move.w	#$B,d1
0001E784 6000 0000                  		bra.w	LoadTiles
0001E788                            ; ===========================================================================
0001E788                            
0001E788                            loc_1C298:
0001E788 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001E78E 609A                       		bra.s	loc_1C23A
0001E790                            ; ===========================================================================
0001E790                            
0001E790                            locret_1C2A0:
0001E790 4E75                       		rts	
0001E792                            ; ===========================================================================
0001E792                            ; ---------------------------------------------------------------------------
0001E792                            ; Animated pattern routine - ending sequence
0001E792                            ; ---------------------------------------------------------------------------
0001E792                            
0001E792                            AniArt_Ending:				; XREF: AniArt_Index
0001E792 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E796 6A00                       		bpl.s	loc_1C2F4
0001E798 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001E79E 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001E7A4 45F8 9400                  		lea	($FFFF9400).w,a2
0001E7A8 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E7AC 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E7B0 0240 0001                  		andi.w	#1,d0
0001E7B4 6700                       		beq.s	loc_1C2CE
0001E7B6 43E9 0200                  		lea	$200(a1),a1
0001E7BA 45EA 0200                  		lea	$200(a2),a2
0001E7BE                            
0001E7BE                            loc_1C2CE:
0001E7BE 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001E7C8 323C 000F                  		move.w	#$F,d1
0001E7CC 6100 0000                  		bsr.w	LoadTiles
0001E7D0 224A                       		movea.l	a2,a1
0001E7D2 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001E7DC 323C 000F                  		move.w	#$F,d1
0001E7E0 6000 0000                  		bra.w	LoadTiles
0001E7E4                            ; ===========================================================================
0001E7E4                            
0001E7E4                            loc_1C2F4:
0001E7E4 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E7E8 6A00                       		bpl.s	loc_1C33C
0001E7EA 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E7F0 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001E7F4 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001E7F8 0240 0007                  		andi.w	#7,d0
0001E7FC 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001E800 EF48                       		lsl.w	#7,d0
0001E802 3200                       		move.w	d0,d1
0001E804 D040                       		add.w	d0,d0
0001E806 D041                       		add.w	d1,d0
0001E808 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001E812 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001E818 43F1 0000                  		lea	(a1,d0.w),a1
0001E81C 323C 000B                  		move.w	#$B,d1
0001E820 6000 0000                  		bra.w	LoadTiles
0001E824                            ; ===========================================================================
0001E824 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001E82C                            ; ===========================================================================
0001E82C                            
0001E82C                            loc_1C33C:
0001E82C 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001E830 6A00                       		bpl.s	loc_1C37A
0001E832 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001E838 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001E83C 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001E840 0240 0003                  		andi.w	#3,d0
0001E844 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001E848 E148                       		lsl.w	#8,d0
0001E84A D040                       		add.w	d0,d0
0001E84C 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001E856 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001E85A 43F1 0000                  		lea	(a1,d0.w),a1
0001E85E 323C 000F                  		move.w	#$F,d1
0001E862 6000 0000                  		bra.w	LoadTiles
0001E866                            ; ===========================================================================
0001E866 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001E86A                            ; ===========================================================================
0001E86A                            
0001E86A                            loc_1C37A:
0001E86A 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001E86E 6A00                       		bpl.s	locret_1C3B4
0001E870 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001E876 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001E87A 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001E87E 0240 0003                  		andi.w	#3,d0
0001E882 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001E886 E148                       		lsl.w	#8,d0
0001E888 D040                       		add.w	d0,d0
0001E88A 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001E894 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001E898 43F1 0000                  		lea	(a1,d0.w),a1
0001E89C 323C 000F                  		move.w	#$F,d1
0001E8A0 6000 0000                  		bra.w	LoadTiles
0001E8A4                            ; ===========================================================================
0001E8A4                            
0001E8A4                            locret_1C3B4:
0001E8A4 4E75                       		rts	
0001E8A6                            ; ===========================================================================
0001E8A6                            
0001E8A6                            AniArt_none:				; XREF: AniArt_Index
0001E8A6 4E75                       		rts	
0001E8A8                            
0001E8A8                            ; ---------------------------------------------------------------------------
0001E8A8                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001E8A8                            ; ---------------------------------------------------------------------------
0001E8A8                            
0001E8A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E8A8                            
0001E8A8                            
0001E8A8                            LoadTiles:
0001E8A8 2C99                       		move.l	(a1)+,(a6)
0001E8AA 2C99                       		move.l	(a1)+,(a6)
0001E8AC 2C99                       		move.l	(a1)+,(a6)
0001E8AE 2C99                       		move.l	(a1)+,(a6)
0001E8B0 2C99                       		move.l	(a1)+,(a6)
0001E8B2 2C99                       		move.l	(a1)+,(a6)
0001E8B4 2C99                       		move.l	(a1)+,(a6)
0001E8B6 2C99                       		move.l	(a1)+,(a6)
0001E8B8 51C9 FFEE                  		dbf	d1,LoadTiles
0001E8BC 4E75                       		rts	
0001E8BE                            ; End of function LoadTiles
0001E8BE                            
0001E8BE                            ; ===========================================================================
0001E8BE                            ; ---------------------------------------------------------------------------
0001E8BE                            ; Animated pattern routine - more Marble Zone
0001E8BE                            ; ---------------------------------------------------------------------------
0001E8BE 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001E8C2 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001E8C6 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001E8CA 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001E8CE 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001E8D2 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001E8D6 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001E8DA 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001E8DE                            ; ===========================================================================
0001E8DE                            
0001E8DE                            loc_1C3EE:				; XREF: AniArt_MZextra
0001E8DE 2C91                       		move.l	(a1),(a6)
0001E8E0 43E9 0010                  		lea	$10(a1),a1
0001E8E4 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001E8E8 4E75                       		rts	
0001E8EA                            ; ===========================================================================
0001E8EA                            
0001E8EA                            loc_1C3FA:				; XREF: AniArt_MZextra
0001E8EA 2029 0002                  		move.l	2(a1),d0
0001E8EE 1029 0001                  		move.b	1(a1),d0
0001E8F2 E098                       		ror.l	#8,d0
0001E8F4 2C80                       		move.l	d0,(a6)
0001E8F6 43E9 0010                  		lea	$10(a1),a1
0001E8FA 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001E8FE 4E75                       		rts	
0001E900                            ; ===========================================================================
0001E900                            
0001E900                            loc_1C410:				; XREF: AniArt_MZextra
0001E900 2CA9 0002                  		move.l	2(a1),(a6)
0001E904 43E9 0010                  		lea	$10(a1),a1
0001E908 51C9 FFF6                  		dbf	d1,loc_1C410
0001E90C 4E75                       		rts	
0001E90E                            ; ===========================================================================
0001E90E                            
0001E90E                            loc_1C41E:				; XREF: AniArt_MZextra
0001E90E 2029 0004                  		move.l	4(a1),d0
0001E912 1029 0003                  		move.b	3(a1),d0
0001E916 E098                       		ror.l	#8,d0
0001E918 2C80                       		move.l	d0,(a6)
0001E91A 43E9 0010                  		lea	$10(a1),a1
0001E91E 51C9 FFEE                  		dbf	d1,loc_1C41E
0001E922 4E75                       		rts	
0001E924                            ; ===========================================================================
0001E924                            
0001E924                            loc_1C434:				; XREF: AniArt_MZextra
0001E924 2CA9 0004                  		move.l	4(a1),(a6)
0001E928 43E9 0010                  		lea	$10(a1),a1
0001E92C 51C9 FFF6                  		dbf	d1,loc_1C434
0001E930 4E75                       		rts	
0001E932                            ; ===========================================================================
0001E932                            
0001E932                            loc_1C442:				; XREF: AniArt_MZextra
0001E932 2029 0006                  		move.l	6(a1),d0
0001E936 1029 0005                  		move.b	5(a1),d0
0001E93A E098                       		ror.l	#8,d0
0001E93C 2C80                       		move.l	d0,(a6)
0001E93E 43E9 0010                  		lea	$10(a1),a1
0001E942 51C9 FFEE                  		dbf	d1,loc_1C442
0001E946 4E75                       		rts	
0001E948                            ; ===========================================================================
0001E948                            
0001E948                            loc_1C458:				; XREF: AniArt_MZextra
0001E948 2CA9 0006                  		move.l	6(a1),(a6)
0001E94C 43E9 0010                  		lea	$10(a1),a1
0001E950 51C9 FFF6                  		dbf	d1,loc_1C458
0001E954 4E75                       		rts	
0001E956                            ; ===========================================================================
0001E956                            
0001E956                            loc_1C466:				; XREF: AniArt_MZextra
0001E956 2029 0008                  		move.l	8(a1),d0
0001E95A 1029 0007                  		move.b	7(a1),d0
0001E95E E098                       		ror.l	#8,d0
0001E960 2C80                       		move.l	d0,(a6)
0001E962 43E9 0010                  		lea	$10(a1),a1
0001E966 51C9 FFEE                  		dbf	d1,loc_1C466
0001E96A 4E75                       		rts	
0001E96C                            ; ===========================================================================
0001E96C                            
0001E96C                            loc_1C47C:				; XREF: AniArt_MZextra
0001E96C 2CA9 0008                  		move.l	8(a1),(a6)
0001E970 43E9 0010                  		lea	$10(a1),a1
0001E974 51C9 FFF6                  		dbf	d1,loc_1C47C
0001E978 4E75                       		rts	
0001E97A                            ; ===========================================================================
0001E97A                            
0001E97A                            loc_1C48A:				; XREF: AniArt_MZextra
0001E97A 2029 000A                  		move.l	$A(a1),d0
0001E97E 1029 0009                  		move.b	9(a1),d0
0001E982 E098                       		ror.l	#8,d0
0001E984 2C80                       		move.l	d0,(a6)
0001E986 43E9 0010                  		lea	$10(a1),a1
0001E98A 51C9 FFEE                  		dbf	d1,loc_1C48A
0001E98E 4E75                       		rts	
0001E990                            ; ===========================================================================
0001E990                            
0001E990                            loc_1C4A0:				; XREF: AniArt_MZextra
0001E990 2CA9 000A                  		move.l	$A(a1),(a6)
0001E994 43E9 0010                  		lea	$10(a1),a1
0001E998 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001E99C 4E75                       		rts	
0001E99E                            ; ===========================================================================
0001E99E                            
0001E99E                            loc_1C4AE:				; XREF: AniArt_MZextra
0001E99E 2029 000C                  		move.l	$C(a1),d0
0001E9A2 1029 000B                  		move.b	$B(a1),d0
0001E9A6 E098                       		ror.l	#8,d0
0001E9A8 2C80                       		move.l	d0,(a6)
0001E9AA 43E9 0010                  		lea	$10(a1),a1
0001E9AE 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001E9B2 4E75                       		rts	
0001E9B4                            ; ===========================================================================
0001E9B4                            
0001E9B4                            loc_1C4C4:				; XREF: AniArt_MZextra
0001E9B4 2CA9 000C                  		move.l	$C(a1),(a6)
0001E9B8 43E9 0010                  		lea	$10(a1),a1
0001E9BC 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001E9C0 4E75                       		rts	
0001E9C2                            ; ===========================================================================
0001E9C2                            
0001E9C2                            loc_1C4D2:				; XREF: AniArt_MZextra
0001E9C2 2029 000C                  		move.l	$C(a1),d0
0001E9C6 E198                       		rol.l	#8,d0
0001E9C8 1011                       		move.b	0(a1),d0
0001E9CA 2C80                       		move.l	d0,(a6)
0001E9CC 43E9 0010                  		lea	$10(a1),a1
0001E9D0 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001E9D4 4E75                       		rts	
0001E9D6                            ; ===========================================================================
0001E9D6                            
0001E9D6                            loc_1C4E8:				; XREF: AniArt_MZextra
0001E9D6 3CA9 000E                  		move.w	$E(a1),(a6)
0001E9DA 3C91                       		move.w	0(a1),(a6)
0001E9DC 43E9 0010                  		lea	$10(a1),a1
0001E9E0 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001E9E4 4E75                       		rts	
0001E9E6                            ; ===========================================================================
0001E9E6                            
0001E9E6                            loc_1C4FA:				; XREF: AniArt_MZextra
0001E9E6 2011                       		move.l	0(a1),d0
0001E9E8 1029 000F                  		move.b	$F(a1),d0
0001E9EC E098                       		ror.l	#8,d0
0001E9EE 2C80                       		move.l	d0,(a6)
0001E9F0 43E9 0010                  		lea	$10(a1),a1
0001E9F4 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001E9F8 4E75                       		rts	
0001E9FA                            
0001E9FA                            ; ---------------------------------------------------------------------------
0001E9FA                            ; Animated pattern routine - giant ring
0001E9FA                            ; ---------------------------------------------------------------------------
0001E9FA                            
0001E9FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E9FA                            
0001E9FA                            
0001E9FA                            AniArt_GiantRing:			; XREF: AniArt_Load
0001E9FA 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001E9FE 6600                       		bne.s	loc_1C518
0001EA00 4E75                       		rts	
0001EA02                            ; ===========================================================================
0001EA02                            
0001EA02                            loc_1C518:
0001EA02 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001EA08 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001EA0E 7000                       		moveq	#0,d0
0001EA10 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001EA14 43F1 0000                  		lea	(a1,d0.w),a1
0001EA18 0640 8000                  		addi.w	#$8000,d0
0001EA1C E588                       		lsl.l	#2,d0
0001EA1E E448                       		lsr.w	#2,d0
0001EA20 0040 4000                  		ori.w	#$4000,d0
0001EA24 4840                       		swap	d0
0001EA26 2D40 0004                  		move.l	d0,4(a6)
0001EA2A 323C 000D                  		move.w	#$D,d1
0001EA2E 6000 FE78                  		bra.w	LoadTiles
0001EA32                            ; End of function AniArt_GiantRing
0001EA32                            
0001EA32                            ; ===========================================================================
0001EA32                            Obj21:                    ; XREF: Obj_Index
0001EA32 4E75                               rts
0001EA34                            ; ===========================================================================
0001EA34                            ; ---------------------------------------------------------------------------
0001EA34                            ; HUD Object code - SCORE, TIME, RINGS
0001EA34                            ; ---------------------------------------------------------------------------
0001EA34                            loc_40804:
0001EA34 4A78 FE20                      tst.w    ($FFFFFE20).w
0001EA38 6700                           beq.s    loc_40820
0001EA3A 7200                           moveq    #0,d1
0001EA3C 0838 0003 FE05                 btst    #3,($FFFFFE05).w
0001EA42 6600                           bne.s    BranchTo_loc_40836
0001EA44 0C38 0009 FE23                 cmpi.b    #9,($FFFFFE23).w
0001EA4A 6600                           bne.s    BranchTo_loc_40836
0001EA4C 5441                           addq.w    #2,d1
0001EA4E                            
0001EA4E                            BranchTo_loc_40836
0001EA4E 6000                           bra.s    loc_40836
0001EA50                            ; ===========================================================================
0001EA50                            
0001EA50                            loc_40820:
0001EA50 7200                           moveq    #0,d1
0001EA52 0838 0003 FE05                 btst    #3,($FFFFFE05).w
0001EA58 6600                           bne.s    loc_40836
0001EA5A 5241                           addq.w    #1,d1
0001EA5C 0C38 0009 FE23                 cmpi.b    #9,($FFFFFE23).w
0001EA62 6600                           bne.s    loc_40836
0001EA64 5441                           addq.w    #2,d1
0001EA66                            
0001EA66                            loc_40836:
0001EA66 363C 0090                      move.w    #$90,d3
0001EA6A 343C 0108                      move.w    #$108,d2
0001EA6E 43F9 0000 0000                 lea    (Map_Obj21).l,a1
0001EA74 367C 06CA                      movea.w    #$6CA,a3
0001EA78 D241                           add.w    d1,d1
0001EA7A D2F1 1000                      adda.w    (a1,d1.w),a1
0001EA7E 7200                           moveq    #0,d1
0001EA80 1219                           move.b    (a1)+,d1
0001EA82 5301                           subq.b    #1,d1
0001EA84 6B00                           bmi.s    return_40858
0001EA86 4EB9 0000 EBDA                 jsr    sub_D762
0001EA8C                            
0001EA8C                            return_40858:
0001EA8C 4E75                           rts
0001EA8E                            ; End of function h
0001EA8E                            ; ===========================================================================
0001EA8E                            ; ---------------------------------------------------------------------------
0001EA8E                            ; Sprite mappings - SCORE, TIME, RINGS
0001EA8E                            ; ---------------------------------------------------------------------------
0001EA8E                            Map_obj21:
0001EA8E                            	include "_maps\obj21.asm"
0001EA8E                            ; ---------------------------------------------------------------------------
0001EA8E                            ; Sprite mappings - SCORE, TIME, RINGS
0001EA8E                            ; ---------------------------------------------------------------------------
0001EA8E 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001EA92 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001EA96 0A                         byte_1C5BC:	dc.b $A
0001EA97 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001EA9C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001EAA1 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001EAA6 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001EAAB 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001EAB0 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001EAB5 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001EABA A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001EABF 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001EAC4 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001EAC9 00                         		dc.b 0
0001EACA 0A                         byte_1C5F0:	dc.b $A
0001EACB 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001EAD0 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001EAD5 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001EADA 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001EADF 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001EAE4 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001EAE9 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001EAEE A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001EAF3 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001EAF8 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001EAFD 00                         		dc.b 0
0001EAFE 0A                         byte_1C624:	dc.b $A
0001EAFF 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001EB04 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001EB09 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001EB0E 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001EB13 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001EB18 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001EB1D A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001EB22 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001EB27 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001EB2C 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001EB31 00                         		dc.b 0
0001EB32 0A                         byte_1C658:	dc.b $A
0001EB33 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001EB38 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001EB3D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001EB42 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001EB47 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001EB4C A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001EB51 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001EB56 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001EB5B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001EB60 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001EB66 00                         		even
0001EB66 00                         		even
0001EB66                            
0001EB66                            ; ---------------------------------------------------------------------------
0001EB66                            ; Add points subroutine
0001EB66                            ; ---------------------------------------------------------------------------
0001EB66                            
0001EB66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB66                            
0001EB66                            
0001EB66                            AddPoints:                      ; ...
0001EB66 11FC 0001 FE1F                     move.b    #1,($FFFFFE1F).w
0001EB6C 47F8 FE26                          lea    ($FFFFFE26).w,a3
0001EB70 D193                               add.l    d0,(a3)
0001EB72 223C 000F 423F                     move.l    #999999,d1
0001EB78 B293                               cmp.l    (a3),d1
0001EB7A 6200                               bhi.s    loc_1C6AC
0001EB7C 2681                               move.l    d1,(a3)
0001EB7E                            
0001EB7E                            loc_1C6AC:                      ; ...
0001EB7E 2013                               move.l    (a3),d0
0001EB80 B0B8 FFC0                          cmp.l    ($FFFFFFC0).w,d0
0001EB84 6500                               blo.s    locret_1C6B6
0001EB86 06B8 0000 1388 FFC0                add.l    #$1388,($FFFFFFC0).w
0001EB8E 4EF9 0000 B60E                     jmp        ExtraLife
0001EB94                            
0001EB94                            locret_1C6B6:
0001EB94 4E75                       		rts
0001EB96                            ; End of function AddPoints
0001EB96                            
0001EB96                            ; ---------------------------------------------------------------------------
0001EB96                            ; Subroutine to	update the HUD
0001EB96                            ; ---------------------------------------------------------------------------
0001EB96                            
0001EB96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB96                            
0001EB96                            
0001EB96                            HudUpdate:
0001EB96 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001EB9A 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001EB9E 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001EBA2 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001EBA4 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001EBA8 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001EBAE 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001EBB2 6100 0000                  		bsr.w	Hud_Score
0001EBB6                            
0001EBB6                            Hud_ChkRings:
0001EBB6 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001EBBA 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001EBBC 6A00                       		bpl.s	loc_1C6E4
0001EBBE 6100 0000                  		bsr.w	Hud_LoadZero
0001EBC2                            
0001EBC2                            loc_1C6E4:
0001EBC2 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001EBC6 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001EBCC 7200                       		moveq	#0,d1
0001EBCE 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001EBD2 6100 0000                  		bsr.w	Hud_Rings
0001EBD6                            
0001EBD6                            Hud_ChkTime:
0001EBD6 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001EBDA 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001EBDC 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001EBE0 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001EBE2 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001EBE6 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001EBEC 6700                       		beq.s	TimeOver	; if yes, branch
0001EBEE 5221                       		addq.b	#1,-(a1)
0001EBF0 0C11 003C                  		cmpi.b	#60,(a1)
0001EBF4 6500                       		bcs.s	Hud_ChkLives
0001EBF6 12BC 0000                  		move.b	#0,(a1)
0001EBFA 5221                       		addq.b	#1,-(a1)
0001EBFC 0C11 003C                  		cmpi.b	#60,(a1)
0001EC00 6500                       		bcs.s	loc_1C734
0001EC02 12BC 0000                  		move.b	#0,(a1)
0001EC06 5221                       		addq.b	#1,-(a1)
0001EC08 0C11 0009                  		cmpi.b	#9,(a1)
0001EC0C 6500                       		bcs.s	loc_1C734
0001EC0E 12BC 0009                  		move.b	#9,(a1)
0001EC12                            
0001EC12                            loc_1C734:
0001EC12 203C 5E40 0003             		move.l	#$5E400003,d0
0001EC18 7200                       		moveq	#0,d1
0001EC1A 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001EC1E 6100 0000                  		bsr.w	Hud_Mins
0001EC22 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001EC28 7200                       		moveq	#0,d1
0001EC2A 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001EC2E 6100 0000                  		bsr.w	Hud_Secs
0001EC32                            
0001EC32                            Hud_ChkLives:
0001EC32 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001EC36 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001EC38 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001EC3C 6100 0000                  		bsr.w	Hud_Lives
0001EC40                            
0001EC40                            Hud_ChkBonus:
0001EC40 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001EC44 6700                       		beq.s	Hud_End		; if not, branch
0001EC46 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001EC4A 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001EC54 7200                       		moveq	#0,d1
0001EC56 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001EC5A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EC5E 7200                       		moveq	#0,d1
0001EC60 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001EC64 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EC68                            
0001EC68                            Hud_End:
0001EC68 4E75                       		rts	
0001EC6A                            ; ===========================================================================
0001EC6A                            
0001EC6A                            TimeOver:				; XREF: Hud_ChkTime
0001EC6A 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001EC6E 41F8 D000                  		lea	($FFFFD000).w,a0
0001EC72 2448                       		movea.l	a0,a2
0001EC74 6100 E79C                  		bsr.w	KillSonic
0001EC78 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001EC7E 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0001EC84 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001EC8A 4E75                       		rts	
0001EC8C                            ; ===========================================================================
0001EC8C                            
0001EC8C                            HudDebug:				; XREF: HudUpdate
0001EC8C 6100 0000                  		bsr.w	HudDb_XY
0001EC90 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001EC94 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001EC96 6A00                       		bpl.s	HudDb_Rings
0001EC98 6100 0000                  		bsr.w	Hud_LoadZero
0001EC9C                            
0001EC9C                            HudDb_Rings:
0001EC9C 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001ECA0 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001ECA6 7200                       		moveq	#0,d1
0001ECA8 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001ECAC 6100 0000                  		bsr.w	Hud_Rings
0001ECB0                            
0001ECB0                            HudDb_ObjCount:
0001ECB0 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001ECB6 7200                       		moveq	#0,d1
0001ECB8 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001ECBC 6100 0000                  		bsr.w	Hud_Secs
0001ECC0 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001ECC4 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001ECC6 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001ECCA 6100 0000                  		bsr.w	Hud_Lives
0001ECCE                            
0001ECCE                            HudDb_ChkBonus:
0001ECCE 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001ECD2 6700                       		beq.s	HudDb_End	; if not, branch
0001ECD4 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001ECD8 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001ECE2 7200                       		moveq	#0,d1
0001ECE4 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001ECE8 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001ECEC 7200                       		moveq	#0,d1
0001ECEE 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001ECF2 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001ECF6                            
0001ECF6                            HudDb_End:
0001ECF6 4E75                       		rts	
0001ECF8                            ; End of function HudUpdate
0001ECF8                            
0001ECF8                            ; ---------------------------------------------------------------------------
0001ECF8                            ; Subroutine to	load "0" on the	HUD
0001ECF8                            ; ---------------------------------------------------------------------------
0001ECF8                            
0001ECF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ECF8                            
0001ECF8                            
0001ECF8                            Hud_LoadZero:				; XREF: HudUpdate
0001ECF8 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001ED02 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001ED06 343C 0002                  		move.w	#2,d2
0001ED0A 6000                       		bra.s	loc_1C83E
0001ED0C                            ; End of function Hud_LoadZero
0001ED0C                            
0001ED0C                            ; ---------------------------------------------------------------------------
0001ED0C                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001ED0C                            ; ---------------------------------------------------------------------------
0001ED0C                            
0001ED0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ED0C                            
0001ED0C                            
0001ED0C                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001ED0C 4DF9 00C0 0000             		lea	($C00000).l,a6
0001ED12 6100 0000                  		bsr.w	Hud_Lives
0001ED16 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001ED20 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001ED24 343C 000E                  		move.w	#$E,d2
0001ED28                            
0001ED28                            loc_1C83E:				; XREF: Hud_LoadZero
0001ED28 43FA 0000                  		lea	Art_Hud(pc),a1
0001ED2C                            
0001ED2C                            loc_1C842:
0001ED2C 323C 000F                  		move.w	#$F,d1
0001ED30 101A                       		move.b	(a2)+,d0
0001ED32 6B00                       		bmi.s	loc_1C85E
0001ED34 4880                       		ext.w	d0
0001ED36 EB48                       		lsl.w	#5,d0
0001ED38 47F1 0000                  		lea	(a1,d0.w),a3
0001ED3C                            
0001ED3C                            loc_1C852:
0001ED3C 2C9B                       		move.l	(a3)+,(a6)
0001ED3E 51C9 FFFC                  		dbf	d1,loc_1C852
0001ED42                            
0001ED42                            loc_1C858:
0001ED42 51CA FFE8                  		dbf	d2,loc_1C842
0001ED46                            
0001ED46 4E75                       		rts	
0001ED48                            ; ===========================================================================
0001ED48                            
0001ED48                            loc_1C85E:
0001ED48 2CBC 0000 0000             		move.l	#0,(a6)
0001ED4E 51C9 FFF8                  		dbf	d1,loc_1C85E
0001ED52                            
0001ED52 60EE                       		bra.s	loc_1C858
0001ED54                            ; End of function Hud_Base
0001ED54                            
0001ED54                            ; ===========================================================================
0001ED54 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001ED60 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001ED64                            ; ---------------------------------------------------------------------------
0001ED64                            ; Subroutine to	load debug mode	numbers	patterns
0001ED64                            ; ---------------------------------------------------------------------------
0001ED64                            
0001ED64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ED64                            
0001ED64                            
0001ED64                            HudDb_XY:				; XREF: HudDebug
0001ED64 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001ED6E 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001ED72 4841                       		swap	d1
0001ED74 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001ED78 6100                       		bsr.s	HudDb_XY2
0001ED7A 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001ED7E 4841                       		swap	d1
0001ED80 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001ED84                            ; End of function HudDb_XY
0001ED84                            
0001ED84                            
0001ED84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ED84                            
0001ED84                            
0001ED84                            HudDb_XY2:
0001ED84 7C07                       		moveq	#7,d6
0001ED86 43F9 0000 0550             		lea	(Art_Text).l,a1
0001ED8C                            
0001ED8C                            HudDb_XYLoop:
0001ED8C E959                       		rol.w	#4,d1
0001ED8E 3401                       		move.w	d1,d2
0001ED90 0242 000F                  		andi.w	#$F,d2
0001ED94 0C42 000A                  		cmpi.w	#$A,d2
0001ED98 6500                       		bcs.s	loc_1C8B2
0001ED9A 5E42                       		addq.w	#7,d2
0001ED9C                            
0001ED9C                            loc_1C8B2:
0001ED9C EB4A                       		lsl.w	#5,d2
0001ED9E 47F1 2000                  		lea	(a1,d2.w),a3
0001EDA2 2C9B                       		move.l	(a3)+,(a6)
0001EDA4 2C9B                       		move.l	(a3)+,(a6)
0001EDA6 2C9B                       		move.l	(a3)+,(a6)
0001EDA8 2C9B                       		move.l	(a3)+,(a6)
0001EDAA 2C9B                       		move.l	(a3)+,(a6)
0001EDAC 2C9B                       		move.l	(a3)+,(a6)
0001EDAE 2C9B                       		move.l	(a3)+,(a6)
0001EDB0 2C9B                       		move.l	(a3)+,(a6)
0001EDB2 4841                       		swap	d1
0001EDB4 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001EDB8                            
0001EDB8 4E75                       		rts	
0001EDBA                            ; End of function HudDb_XY2
0001EDBA                            
0001EDBA                            ; ---------------------------------------------------------------------------
0001EDBA                            ; Subroutine to	load rings numbers patterns
0001EDBA                            ; ---------------------------------------------------------------------------
0001EDBA                            
0001EDBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EDBA                            
0001EDBA                            
0001EDBA                            Hud_Rings:				; XREF: HudUpdate
0001EDBA 45F9 0000 0000             		lea	(Hud_100).l,a2
0001EDC0 7C02                       		moveq	#2,d6
0001EDC2 6000                       		bra.s	Hud_LoadArt
0001EDC4                            ; End of function Hud_Rings
0001EDC4                            
0001EDC4                            ; ---------------------------------------------------------------------------
0001EDC4                            ; Subroutine to	load score numbers patterns
0001EDC4                            ; ---------------------------------------------------------------------------
0001EDC4                            
0001EDC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EDC4                            
0001EDC4                            
0001EDC4                            Hud_Score:				; XREF: HudUpdate
0001EDC4 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001EDCA 7C05                       		moveq	#5,d6
0001EDCC                            
0001EDCC                            Hud_LoadArt:
0001EDCC 7800                       		moveq	#0,d4
0001EDCE 43FA 0000                  		lea	Art_Hud(pc),a1
0001EDD2                            
0001EDD2                            Hud_ScoreLoop:
0001EDD2 7400                       		moveq	#0,d2
0001EDD4 261A                       		move.l	(a2)+,d3
0001EDD6                            
0001EDD6                            loc_1C8EC:
0001EDD6 9283                       		sub.l	d3,d1
0001EDD8 6500                       		bcs.s	loc_1C8F4
0001EDDA 5242                       		addq.w	#1,d2
0001EDDC 60F8                       		bra.s	loc_1C8EC
0001EDDE                            ; ===========================================================================
0001EDDE                            
0001EDDE                            loc_1C8F4:
0001EDDE D283                       		add.l	d3,d1
0001EDE0 4A42                       		tst.w	d2
0001EDE2 6700                       		beq.s	loc_1C8FE
0001EDE4 383C 0001                  		move.w	#1,d4
0001EDE8                            
0001EDE8                            loc_1C8FE:
0001EDE8 4A44                       		tst.w	d4
0001EDEA 6700                       		beq.s	loc_1C92C
0001EDEC ED4A                       		lsl.w	#6,d2
0001EDEE 2D40 0004                  		move.l	d0,4(a6)
0001EDF2 47F1 2000                  		lea	(a1,d2.w),a3
0001EDF6 2C9B                       		move.l	(a3)+,(a6)
0001EDF8 2C9B                       		move.l	(a3)+,(a6)
0001EDFA 2C9B                       		move.l	(a3)+,(a6)
0001EDFC 2C9B                       		move.l	(a3)+,(a6)
0001EDFE 2C9B                       		move.l	(a3)+,(a6)
0001EE00 2C9B                       		move.l	(a3)+,(a6)
0001EE02 2C9B                       		move.l	(a3)+,(a6)
0001EE04 2C9B                       		move.l	(a3)+,(a6)
0001EE06 2C9B                       		move.l	(a3)+,(a6)
0001EE08 2C9B                       		move.l	(a3)+,(a6)
0001EE0A 2C9B                       		move.l	(a3)+,(a6)
0001EE0C 2C9B                       		move.l	(a3)+,(a6)
0001EE0E 2C9B                       		move.l	(a3)+,(a6)
0001EE10 2C9B                       		move.l	(a3)+,(a6)
0001EE12 2C9B                       		move.l	(a3)+,(a6)
0001EE14 2C9B                       		move.l	(a3)+,(a6)
0001EE16                            
0001EE16                            loc_1C92C:
0001EE16 0680 0040 0000             		addi.l	#$400000,d0
0001EE1C 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001EE20                            
0001EE20 4E75                       		rts	
0001EE22                            ; End of function Hud_Score
0001EE22                            
0001EE22                            ; ---------------------------------------------------------------------------
0001EE22                            ; Subroutine to	load countdown numbers on the continue screen
0001EE22                            ; ---------------------------------------------------------------------------
0001EE22                            
0001EE22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE22                            
0001EE22                            
0001EE22                            ContScrCounter:				; XREF: ContinueScreen
0001EE22 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001EE2C 4DF9 00C0 0000             		lea	($C00000).l,a6
0001EE32 45F9 0000 0000             		lea	(Hud_10).l,a2
0001EE38 7C01                       		moveq	#1,d6
0001EE3A 7800                       		moveq	#0,d4
0001EE3C 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001EE40                            
0001EE40                            ContScr_Loop:
0001EE40 7400                       		moveq	#0,d2
0001EE42 261A                       		move.l	(a2)+,d3
0001EE44                            
0001EE44                            loc_1C95A:
0001EE44 9283                       		sub.l	d3,d1
0001EE46 6500                       		bcs.s	loc_1C962
0001EE48 5242                       		addq.w	#1,d2
0001EE4A 60F8                       		bra.s	loc_1C95A
0001EE4C                            ; ===========================================================================
0001EE4C                            
0001EE4C                            loc_1C962:
0001EE4C D283                       		add.l	d3,d1
0001EE4E ED4A                       		lsl.w	#6,d2
0001EE50 47F1 2000                  		lea	(a1,d2.w),a3
0001EE54 2C9B                       		move.l	(a3)+,(a6)
0001EE56 2C9B                       		move.l	(a3)+,(a6)
0001EE58 2C9B                       		move.l	(a3)+,(a6)
0001EE5A 2C9B                       		move.l	(a3)+,(a6)
0001EE5C 2C9B                       		move.l	(a3)+,(a6)
0001EE5E 2C9B                       		move.l	(a3)+,(a6)
0001EE60 2C9B                       		move.l	(a3)+,(a6)
0001EE62 2C9B                       		move.l	(a3)+,(a6)
0001EE64 2C9B                       		move.l	(a3)+,(a6)
0001EE66 2C9B                       		move.l	(a3)+,(a6)
0001EE68 2C9B                       		move.l	(a3)+,(a6)
0001EE6A 2C9B                       		move.l	(a3)+,(a6)
0001EE6C 2C9B                       		move.l	(a3)+,(a6)
0001EE6E 2C9B                       		move.l	(a3)+,(a6)
0001EE70 2C9B                       		move.l	(a3)+,(a6)
0001EE72 2C9B                       		move.l	(a3)+,(a6)
0001EE74 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001EE78                            
0001EE78 4E75                       		rts	
0001EE7A                            ; End of function ContScrCounter
0001EE7A                            
0001EE7A                            ; ===========================================================================
0001EE7A                            ; ---------------------------------------------------------------------------
0001EE7A                            ; HUD counter sizes
0001EE7A                            ; ---------------------------------------------------------------------------
0001EE7A 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001EE7E 0000 2710                  Hud_10000:	dc.l 10000
0001EE82 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001EE86 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001EE8A 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001EE8E 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001EE92                            
0001EE92                            ; ---------------------------------------------------------------------------
0001EE92                            ; Subroutine to	load time numbers patterns
0001EE92                            ; ---------------------------------------------------------------------------
0001EE92                            
0001EE92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE92                            
0001EE92                            
0001EE92                            Hud_Mins:				; XREF: Hud_ChkTime
0001EE92 45F9 0001 EE8E             		lea	(Hud_1).l,a2
0001EE98 7C00                       		moveq	#0,d6
0001EE9A 6000                       		bra.s	loc_1C9BA
0001EE9C                            ; End of function Hud_Mins
0001EE9C                            
0001EE9C                            
0001EE9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE9C                            
0001EE9C                            
0001EE9C                            Hud_Secs:				; XREF: Hud_ChkTime
0001EE9C 45F9 0001 EE8A             		lea	(Hud_10).l,a2
0001EEA2 7C01                       		moveq	#1,d6
0001EEA4                            
0001EEA4                            loc_1C9BA:
0001EEA4 7800                       		moveq	#0,d4
0001EEA6 43FA 0000                  		lea	Art_Hud(pc),a1
0001EEAA                            
0001EEAA                            Hud_TimeLoop:
0001EEAA 7400                       		moveq	#0,d2
0001EEAC 261A                       		move.l	(a2)+,d3
0001EEAE                            
0001EEAE                            loc_1C9C4:
0001EEAE 9283                       		sub.l	d3,d1
0001EEB0 6500                       		bcs.s	loc_1C9CC
0001EEB2 5242                       		addq.w	#1,d2
0001EEB4 60F8                       		bra.s	loc_1C9C4
0001EEB6                            ; ===========================================================================
0001EEB6                            
0001EEB6                            loc_1C9CC:
0001EEB6 D283                       		add.l	d3,d1
0001EEB8 4A42                       		tst.w	d2
0001EEBA 6700                       		beq.s	loc_1C9D6
0001EEBC 383C 0001                  		move.w	#1,d4
0001EEC0                            
0001EEC0                            loc_1C9D6:
0001EEC0 ED4A                       		lsl.w	#6,d2
0001EEC2 2D40 0004                  		move.l	d0,4(a6)
0001EEC6 47F1 2000                  		lea	(a1,d2.w),a3
0001EECA 2C9B                       		move.l	(a3)+,(a6)
0001EECC 2C9B                       		move.l	(a3)+,(a6)
0001EECE 2C9B                       		move.l	(a3)+,(a6)
0001EED0 2C9B                       		move.l	(a3)+,(a6)
0001EED2 2C9B                       		move.l	(a3)+,(a6)
0001EED4 2C9B                       		move.l	(a3)+,(a6)
0001EED6 2C9B                       		move.l	(a3)+,(a6)
0001EED8 2C9B                       		move.l	(a3)+,(a6)
0001EEDA 2C9B                       		move.l	(a3)+,(a6)
0001EEDC 2C9B                       		move.l	(a3)+,(a6)
0001EEDE 2C9B                       		move.l	(a3)+,(a6)
0001EEE0 2C9B                       		move.l	(a3)+,(a6)
0001EEE2 2C9B                       		move.l	(a3)+,(a6)
0001EEE4 2C9B                       		move.l	(a3)+,(a6)
0001EEE6 2C9B                       		move.l	(a3)+,(a6)
0001EEE8 2C9B                       		move.l	(a3)+,(a6)
0001EEEA 0680 0040 0000             		addi.l	#$400000,d0
0001EEF0 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001EEF4                            
0001EEF4 4E75                       		rts	
0001EEF6                            ; End of function Hud_Secs
0001EEF6                            
0001EEF6                            ; ---------------------------------------------------------------------------
0001EEF6                            ; Subroutine to	load time/ring bonus numbers patterns
0001EEF6                            ; ---------------------------------------------------------------------------
0001EEF6                            
0001EEF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EEF6                            
0001EEF6                            
0001EEF6                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001EEF6 45F9 0001 EE82             		lea	(Hud_1000).l,a2
0001EEFC 7C03                       		moveq	#3,d6
0001EEFE 7800                       		moveq	#0,d4
0001EF00 43FA 0000                  		lea	Art_Hud(pc),a1
0001EF04                            
0001EF04                            Hud_BonusLoop:
0001EF04 7400                       		moveq	#0,d2
0001EF06 261A                       		move.l	(a2)+,d3
0001EF08                            
0001EF08                            loc_1CA1E:
0001EF08 9283                       		sub.l	d3,d1
0001EF0A 6500                       		bcs.s	loc_1CA26
0001EF0C 5242                       		addq.w	#1,d2
0001EF0E 60F8                       		bra.s	loc_1CA1E
0001EF10                            ; ===========================================================================
0001EF10                            
0001EF10                            loc_1CA26:
0001EF10 D283                       		add.l	d3,d1
0001EF12 4A42                       		tst.w	d2
0001EF14 6700                       		beq.s	loc_1CA30
0001EF16 383C 0001                  		move.w	#1,d4
0001EF1A                            
0001EF1A                            loc_1CA30:
0001EF1A 4A44                       		tst.w	d4
0001EF1C 6700                       		beq.s	Hud_ClrBonus
0001EF1E ED4A                       		lsl.w	#6,d2
0001EF20 47F1 2000                  		lea	(a1,d2.w),a3
0001EF24 2C9B                       		move.l	(a3)+,(a6)
0001EF26 2C9B                       		move.l	(a3)+,(a6)
0001EF28 2C9B                       		move.l	(a3)+,(a6)
0001EF2A 2C9B                       		move.l	(a3)+,(a6)
0001EF2C 2C9B                       		move.l	(a3)+,(a6)
0001EF2E 2C9B                       		move.l	(a3)+,(a6)
0001EF30 2C9B                       		move.l	(a3)+,(a6)
0001EF32 2C9B                       		move.l	(a3)+,(a6)
0001EF34 2C9B                       		move.l	(a3)+,(a6)
0001EF36 2C9B                       		move.l	(a3)+,(a6)
0001EF38 2C9B                       		move.l	(a3)+,(a6)
0001EF3A 2C9B                       		move.l	(a3)+,(a6)
0001EF3C 2C9B                       		move.l	(a3)+,(a6)
0001EF3E 2C9B                       		move.l	(a3)+,(a6)
0001EF40 2C9B                       		move.l	(a3)+,(a6)
0001EF42 2C9B                       		move.l	(a3)+,(a6)
0001EF44                            
0001EF44                            loc_1CA5A:
0001EF44 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001EF48                            
0001EF48 4E75                       		rts	
0001EF4A                            ; ===========================================================================
0001EF4A                            
0001EF4A                            Hud_ClrBonus:
0001EF4A 7A0F                       		moveq	#$F,d5
0001EF4C                            
0001EF4C                            Hud_ClrBonusLoop:
0001EF4C 2CBC 0000 0000             		move.l	#0,(a6)
0001EF52 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001EF56                            
0001EF56 60EC                       		bra.s	loc_1CA5A
0001EF58                            ; End of function Hud_TimeRingBonus
0001EF58                            
0001EF58                            ; ---------------------------------------------------------------------------
0001EF58                            ; Subroutine to	load uncompressed lives	counter	patterns
0001EF58                            ; ---------------------------------------------------------------------------
0001EF58                            
0001EF58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF58                            
0001EF58                            
0001EF58                            Hud_Lives:				; XREF: Hud_ChkLives
0001EF58 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001EF5E 7200                       		moveq	#0,d1
0001EF60 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001EF64 45F9 0001 EE8A             		lea	(Hud_10).l,a2
0001EF6A 7C01                       		moveq	#1,d6
0001EF6C 7800                       		moveq	#0,d4
0001EF6E 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001EF72                            
0001EF72                            Hud_LivesLoop:
0001EF72 2D40 0004                  		move.l	d0,4(a6)
0001EF76 7400                       		moveq	#0,d2
0001EF78 261A                       		move.l	(a2)+,d3
0001EF7A                            
0001EF7A                            loc_1CA90:
0001EF7A 9283                       		sub.l	d3,d1
0001EF7C 6500                       		bcs.s	loc_1CA98
0001EF7E 5242                       		addq.w	#1,d2
0001EF80 60F8                       		bra.s	loc_1CA90
0001EF82                            ; ===========================================================================
0001EF82                            
0001EF82                            loc_1CA98:
0001EF82 D283                       		add.l	d3,d1
0001EF84 4A42                       		tst.w	d2
0001EF86 6700                       		beq.s	loc_1CAA2
0001EF88 383C 0001                  		move.w	#1,d4
0001EF8C                            
0001EF8C                            loc_1CAA2:
0001EF8C 4A44                       		tst.w	d4
0001EF8E 6700                       		beq.s	Hud_ClrLives
0001EF90                            
0001EF90                            loc_1CAA6:
0001EF90 EB4A                       		lsl.w	#5,d2
0001EF92 47F1 2000                  		lea	(a1,d2.w),a3
0001EF96 2C9B                       		move.l	(a3)+,(a6)
0001EF98 2C9B                       		move.l	(a3)+,(a6)
0001EF9A 2C9B                       		move.l	(a3)+,(a6)
0001EF9C 2C9B                       		move.l	(a3)+,(a6)
0001EF9E 2C9B                       		move.l	(a3)+,(a6)
0001EFA0 2C9B                       		move.l	(a3)+,(a6)
0001EFA2 2C9B                       		move.l	(a3)+,(a6)
0001EFA4 2C9B                       		move.l	(a3)+,(a6)
0001EFA6                            
0001EFA6                            loc_1CABC:
0001EFA6 0680 0040 0000             		addi.l	#$400000,d0
0001EFAC 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001EFB0                            
0001EFB0 4E75                       		rts	
0001EFB2                            ; ===========================================================================
0001EFB2                            
0001EFB2                            Hud_ClrLives:
0001EFB2 4A46                       		tst.w	d6
0001EFB4 67DA                       		beq.s	loc_1CAA6
0001EFB6 7A07                       		moveq	#7,d5
0001EFB8                            
0001EFB8                            Hud_ClrLivesLoop:
0001EFB8 2CBC 0000 0000             		move.l	#0,(a6)
0001EFBE 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001EFC2 60E2                       		bra.s	loc_1CABC
0001EFC4                            ; End of function Hud_Lives
0001EFC4                            
0001EFC4                            ; ===========================================================================
0001EFC4                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001F2C4                            		even
0001F2C4                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001F404                            		even
0001F404                            ; ===========================================================================
0001F404                            ; ---------------------------------------------------------------------------
0001F404                            ; When debug mode is currently in use
0001F404                            ; ---------------------------------------------------------------------------
0001F404                            
0001F404                            DebugMode:				; XREF: Obj01; Obj09
0001F404 7000                       		moveq	#0,d0
0001F406 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001F40A 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001F40E 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001F412                            ; ===========================================================================
0001F412 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001F414 0000                       		dc.w Debug_Skip-Debug_Index
0001F416                            ; ===========================================================================
0001F416                            
0001F416                            Debug_Main:				; XREF: Debug_Index
0001F416 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001F41A 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001F420 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001F426 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001F42C 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001F432 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001F438 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001F43E 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001F444 117C 0000 001A             		move.b	#0,$1A(a0)
0001F44A 117C 0000 001C             		move.b	#0,$1C(a0)
0001F450 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001F456 6600                       		bne.s	Debug_Zone	; if not, branch
0001F458 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001F45E 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001F464 7006                       		moveq	#6,d0		; use 6th debug	item list
0001F466 6000                       		bra.s	Debug_UseList
0001F468                            ; ===========================================================================
0001F468                            
0001F468                            Debug_Zone:
0001F468 7000                       		moveq	#0,d0
0001F46A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001F46E                            
0001F46E                            Debug_UseList:
0001F46E 45F9 0000 0000             		lea	(DebugList).l,a2
0001F474 D040                       		add.w	d0,d0
0001F476 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001F47A 3C1A                       		move.w	(a2)+,d6
0001F47C BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001F480 6200                       		bhi.s	loc_1CF9E
0001F482 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001F488                            
0001F488                            loc_1CF9E:
0001F488 6100 0000                  		bsr.w	Debug_ShowItem
0001F48C 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001F492 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001F498                            
0001F498                            Debug_Skip:				; XREF: Debug_Index
0001F498 7006                       		moveq	#6,d0
0001F49A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001F4A0 6700                       		beq.s	loc_1CFBE
0001F4A2 7000                       		moveq	#0,d0
0001F4A4 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001F4A8                            
0001F4A8                            loc_1CFBE:
0001F4A8 45F9 0000 0000             		lea	(DebugList).l,a2
0001F4AE D040                       		add.w	d0,d0
0001F4B0 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001F4B4 3C1A                       		move.w	(a2)+,d6
0001F4B6 6100 0000                  		bsr.w	Debug_Control
0001F4BA 4EF9 0000 E930             		jmp	DisplaySprite
0001F4C0                            
0001F4C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F4C0                            
0001F4C0                            
0001F4C0                            Debug_Control:
0001F4C0 7800                       		moveq	#0,d4
0001F4C2 323C 0001                  		move.w	#1,d1
0001F4C6 1838 F605                  		move.b	($FFFFF605).w,d4
0001F4CA 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001F4CE 6600                       		bne.s	loc_1D018	; if yes, branch
0001F4D0 1038 F604                  		move.b	($FFFFF604).w,d0
0001F4D4 0240 000F                  		andi.w	#$F,d0
0001F4D8 6600                       		bne.s	loc_1D000
0001F4DA 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001F4E0 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001F4E6 6000 0000                  		bra.w	Debug_BackItem
0001F4EA                            ; ===========================================================================
0001F4EA                            
0001F4EA                            loc_1D000:
0001F4EA 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001F4EE 6600                       		bne.s	loc_1D01C
0001F4F0 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001F4F6 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001F4FA 6600                       		bne.s	loc_1D018
0001F4FC 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001F502                            
0001F502                            loc_1D018:
0001F502 1838 F604                  		move.b	($FFFFF604).w,d4
0001F506                            
0001F506                            loc_1D01C:
0001F506 7200                       		moveq	#0,d1
0001F508 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001F50C 5241                       		addq.w	#1,d1
0001F50E 4841                       		swap	d1
0001F510 E881                       		asr.l	#4,d1
0001F512 2428 000C                  		move.l	$C(a0),d2
0001F516 2628 0008                  		move.l	8(a0),d3
0001F51A 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001F51E 6700                       		beq.s	loc_1D03C	; if not, branch
0001F520 9481                       		sub.l	d1,d2
0001F522 6400                       		bcc.s	loc_1D03C
0001F524 7400                       		moveq	#0,d2
0001F526                            
0001F526                            loc_1D03C:
0001F526 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001F52A 6700                       		beq.s	loc_1D052	; if not, branch
0001F52C D481                       		add.l	d1,d2
0001F52E 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001F534 6500                       		bcs.s	loc_1D052
0001F536 243C 07FF 0000             		move.l	#$7FF0000,d2
0001F53C                            
0001F53C                            loc_1D052:
0001F53C 0804 0002                  		btst	#2,d4
0001F540 6700                       		beq.s	loc_1D05E
0001F542 9681                       		sub.l	d1,d3
0001F544 6400                       		bcc.s	loc_1D05E
0001F546 7600                       		moveq	#0,d3
0001F548                            
0001F548                            loc_1D05E:
0001F548 0804 0003                  		btst	#3,d4
0001F54C 6700                       		beq.s	loc_1D066
0001F54E D681                       		add.l	d1,d3
0001F550                            
0001F550                            loc_1D066:
0001F550 2142 000C                  		move.l	d2,$C(a0)
0001F554 2143 0008                  		move.l	d3,8(a0)
0001F558                            
0001F558                            Debug_BackItem:
0001F558 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001F55E 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001F560 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001F566 6700                       		beq.s	Debug_NextItem	; if not, branch
0001F568 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001F56C 6400                       		bcc.s	Debug_NoLoop
0001F56E DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001F572 6000                       		bra.s	Debug_NoLoop
0001F574                            ; ===========================================================================
0001F574                            
0001F574                            Debug_NextItem:
0001F574 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001F57A 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001F57C 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001F580 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001F584 6200                       		bhi.s	Debug_NoLoop
0001F586 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001F58C                            
0001F58C                            Debug_NoLoop:
0001F58C 6000 0000                  		bra.w	Debug_ShowItem
0001F590                            ; ===========================================================================
0001F590                            
0001F590                            Debug_MakeItem:
0001F590 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001F596 6700                       		beq.s	Debug_Exit	; if not, branch
0001F598 4EB9 0000 F086             		jsr	SingleObjLoad
0001F59E 6600                       		bne.s	Debug_Exit
0001F5A0 3368 0008 0008             		move.w	8(a0),8(a1)
0001F5A6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001F5AC 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001F5B0 1368 0001 0001             		move.b	1(a0),1(a1)
0001F5B6 1368 0001 0022             		move.b	1(a0),$22(a1)
0001F5BC 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001F5C2 7000                       		moveq	#0,d0
0001F5C4 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001F5C8 E748                       		lsl.w	#3,d0
0001F5CA 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001F5D0 4E75                       		rts	
0001F5D2                            ; ===========================================================================
0001F5D2                            
0001F5D2                            Debug_Exit:
0001F5D2 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001F5D8 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001F5DA 7000                       		moveq	#0,d0
0001F5DC 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001F5E0 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001F5E8 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001F5EE 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001F5F2 3140 000A                  		move.w	d0,$A(a0)
0001F5F6 3140 000E                  		move.w	d0,$E(a0)
0001F5FA 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001F600 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001F606 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001F60C 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001F60E 4278 F780                  		clr.w	($FFFFF780).w
0001F612 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001F618 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001F620 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001F626 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001F62C 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001F632 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001F638                            
0001F638                            Debug_DoNothing:
0001F638 4E75                       		rts	
0001F63A                            ; End of function Debug_Control
0001F63A                            
0001F63A                            
0001F63A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F63A                            
0001F63A                            
0001F63A                            Debug_ShowItem:				; XREF: Debug_Main
0001F63A 7000                       		moveq	#0,d0
0001F63C 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001F640 E748                       		lsl.w	#3,d0
0001F642 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001F648 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001F64E 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001F654 4E75                       		rts	
0001F656                            ; End of function Debug_ShowItem
0001F656                            
0001F656                            ; ===========================================================================
0001F656                            ; ---------------------------------------------------------------------------
0001F656                            ; Debug	list pointers
0001F656                            ; ---------------------------------------------------------------------------
0001F656                            DebugList:
0001F656                            	include "_inc\Debug list pointers.asm"
0001F656                            ; ---------------------------------------------------------------------------
0001F656                            ; Debug	list pointers
0001F656                            ; ---------------------------------------------------------------------------
0001F656 0000                       	dc.w Debug_GHZ-DebugList
0001F658 0000                       	dc.w Debug_LZ-DebugList
0001F65A 0000                       	dc.w Debug_MZ-DebugList
0001F65C 0000                       	dc.w Debug_SLZ-DebugList
0001F65E 0000                       	dc.w Debug_SYZ-DebugList
0001F660 0000                       	dc.w Debug_SBZ-DebugList
0001F662 0000                       	dc.w Debug_Ending-DebugList
0001F662 0000                       	dc.w Debug_Ending-DebugList
0001F664                            
0001F664                            ; ---------------------------------------------------------------------------
0001F664                            ; Debug	list - Green Hill
0001F664                            ; ---------------------------------------------------------------------------
0001F664                            Debug_GHZ:
0001F664                            	include "_inc\Debug list - GHZ.asm"
0001F664                            ; ---------------------------------------------------------------------------
0001F664                            ; Debug	list - Green Hill
0001F664                            ; ---------------------------------------------------------------------------
0001F664 0010                       	dc.w $10			; number of items in list
0001F666 2500 B23A                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001F66A 0000 26BA                  	dc.w 0, ringart+$2000		; subtype, frame, VRAM setting (2 bytes)
0001F66E 2600 B820                  	dc.l Map_obj26+$26000000
0001F672 0000 0680                  	dc.b 0,	0, 6, $80
0001F676 1F00 AA9A                  	dc.l Map_obj1F+$1F000000
0001F67A 0000 0400                  	dc.b 0,	0, 4, 0
0001F67E 2200 AD7A                  	dc.l Map_obj22+$22000000
0001F682 0000 0444                  	dc.b 0,	0, 4, $44
0001F686 2B00 BE42                  	dc.l Map_obj2B+$2B000000
0001F68A 0000 047B                  	dc.b 0,	0, 4, $7B
0001F68E 3600 E308                  	dc.l Map_obj36+$36000000
0001F692 0000 051B                  	dc.b 0,	0, 5, $1B
0001F696 1800 9290                  	dc.l Map_obj18+$18000000
0001F69A 0000 4000                  	dc.b 0,	0, $40,	0
0001F69E 3B00 E44E                  	dc.l Map_obj3B+$3B000000
0001F6A2 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001F6A6 4001 1068                  	dc.l Map_obj40+$40000000
0001F6AA 0000 04F0                  	dc.b 0,	0, 4, $F0
0001F6AE 4100 F580                  	dc.l Map_obj41+$41000000
0001F6B2 0000 0523                  	dc.b 0,	0, 5, $23
0001F6B6 4200 F7A6                  	dc.l Map_obj42+$42000000
0001F6BA 0000 249B                  	dc.b 0,	0, $24,	$9B
0001F6BE 4400 FABE                  	dc.l Map_obj44+$44000000
0001F6C2 0000 434C                  	dc.b 0,	0, $43,	$4C
0001F6C6 1900 92FE                  	dc.l Map_obj48+$19000000
0001F6CA 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001F6CE 7901 90D8                  	dc.l Map_obj79+$79000000
0001F6D2 0100 0571                  	dc.w $100, lamppostart
0001F6D6 4B00 B27A                  	dc.l Map_obj4B+$4B000000
0001F6DA 0000 222D                  	dc.w 0, ssringart+$2000
0001F6DE 7D01 9236                  	dc.l Map_obj7D+$7D000000
0001F6E2 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001F6E6                            	even
0001F6E6                            	even
0001F6E6                            
0001F6E6                            ; ---------------------------------------------------------------------------
0001F6E6                            ; Debug	list - Labyrinth
0001F6E6                            ; ---------------------------------------------------------------------------
0001F6E6                            Debug_LZ:
0001F6E6                            	include "_inc\Debug list - LZ.asm"
0001F6E6                            ; ---------------------------------------------------------------------------
0001F6E6                            ; Debug	list - Labyrinth
0001F6E6                            ; ---------------------------------------------------------------------------
0001F6E6 0019                       	dc.w $19
0001F6E8 2500 B23A                  	dc.l Map_obj25+$25000000
0001F6EC 0000 26BA                  	dc.w 0, ringart+$2000
0001F6F0 2600 B820                  	dc.l Map_obj26+$26000000
0001F6F4 0000 0680                  	dc.b 0,	0, 6, $80
0001F6F8 4100 F580                  	dc.l Map_obj41+$41000000
0001F6FC 0000 0523                  	dc.b 0,	0, 5, $23
0001F700 2C00 BEE8                  	dc.l Map_obj2C+$2C000000
0001F704 0800 2486                  	dc.b 8,	0, $24,	$86
0001F708 2D00 C0FC                  	dc.l Map_obj2D+$2D000000
0001F70C 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001F710 1601 38CE                  	dc.l Map_obj16+$16000000
0001F714 0000 03CC                  	dc.b 0,	0, 3, $CC
0001F718 1601 38CE                  	dc.l Map_obj16+$16000000
0001F71C 0203 03CC                  	dc.b 2,	3, 3, $CC
0001F720 3300 D5D6                  	dc.l Map_obj33+$33000000
0001F724 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001F728 3200 D19A                  	dc.l Map_obj32+$32000000
0001F72C 0000 0513                  	dc.b 0,	0, 5, $13
0001F730 3600 E308                  	dc.l Map_obj36+$36000000
0001F734 0000 051B                  	dc.b 0,	0, 5, $1B
0001F738 5201 199C                  	dc.l Map_obj52a+$52000000
0001F73C 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001F740 6101 3B04                  	dc.l Map_obj61+$61000000
0001F744 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001F748 6101 3B04                  	dc.l Map_obj61+$61000000
0001F74C 1301 43E6                  	dc.b $13, 1, $43, $E6
0001F750 6101 3B04                  	dc.l Map_obj61+$61000000
0001F754 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001F758 6201 3C58                  	dc.l Map_obj62+$62000000
0001F75C 0000 443E                  	dc.b 0,	0, $44,	$3E
0001F760 6101 3B04                  	dc.l Map_obj61+$61000000
0001F764 2702 43E6                  	dc.b $27, 2, $43, $E6
0001F768 6101 3B04                  	dc.l Map_obj61+$61000000
0001F76C 3003 43E6                  	dc.b $30, 3, $43, $E6
0001F770 6301 3FC8                  	dc.l Map_obj63+$63000000
0001F774 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001F778 6001 3818                  	dc.l Map_obj60+$60000000
0001F77C 0000 0467                  	dc.b 0,	0, 4, $67
0001F780 6401 4380                  	dc.l Map_obj64+$64000000
0001F784 8413 8348                  	dc.b $84, $13, $83, $48
0001F788 6501 4508                  	dc.l Map_obj65+$65000000
0001F78C 0202 C259                  	dc.b 2,	2, $C2,	$59
0001F790 6501 4508                  	dc.l Map_obj65+$65000000
0001F794 0909 C259                  	dc.b 9,	9, $C2,	$59
0001F798 0B01 2C42                  	dc.l Map_obj0B+$B000000
0001F79C 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001F7A0 0C01 2D12                  	dc.l Map_obj0C+$C000000
0001F7A4 0200 4328                  	dc.b 2,	0, $43,	$28
0001F7A8 7901 90D8                  	dc.l Map_obj79+$79000000
0001F7AC 0100 0571                  	dc.w $100, lamppostart
0001F7B0                            	even
0001F7B0                            	even
0001F7B0                            
0001F7B0                            ; ---------------------------------------------------------------------------
0001F7B0                            ; Debug	list - Marble
0001F7B0                            ; ---------------------------------------------------------------------------
0001F7B0                            Debug_MZ:
0001F7B0                            	include "_inc\Debug list - MZ.asm"
0001F7B0                            ; ---------------------------------------------------------------------------
0001F7B0                            ; Debug	list - Marble
0001F7B0                            ; ---------------------------------------------------------------------------
0001F7B0 0012                       	dc.w $12
0001F7B2 2500 B23A                  	dc.l Map_obj25+$25000000
0001F7B6 0000 26BA                  	dc.w 0, ringart+$2000
0001F7BA 2600 B820                  	dc.l Map_obj26+$26000000
0001F7BE 0000 0680                  	dc.b 0,	0, 6, $80
0001F7C2 2200 AD7A                  	dc.l Map_obj22+$22000000
0001F7C6 0000 0444                  	dc.b 0,	0, 4, $44
0001F7CA 3600 E308                  	dc.l Map_obj36+$36000000
0001F7CE 0000 051B                  	dc.b 0,	0, 5, $1B
0001F7D2 4100 F580                  	dc.l Map_obj41+$41000000
0001F7D6 0000 0523                  	dc.b 0,	0, 5, $23
0001F7DA 1300 C62A                  	dc.l Map_obj14+$13000000
0001F7DE 0000 0345                  	dc.b 0,	0, 3, $45
0001F7E2 4601 019E                  	dc.l Map_obj46+$46000000
0001F7E6 0000 4000                  	dc.b 0,	0, $40,	0
0001F7EA 4C01 0B18                  	dc.l Map_obj4C+$4C000000
0001F7EE 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001F7F2 4E01 0DFC                  	dc.l Map_obj4E+$4E000000
0001F7F6 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001F7FA 3300 D5D6                  	dc.l Map_obj33+$33000000
0001F7FE 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001F802 5001 11F6                  	dc.l Map_obj50+$50000000
0001F806 0000 247B                  	dc.b 0,	0, $24,	$7B
0001F80A 5101 16C2                  	dc.l Map_obj51+$51000000
0001F80E 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001F812 5201 1946                  	dc.l Map_obj52+$52000000
0001F816 0000 02B8                  	dc.b 0,	0, 2, $B8
0001F81A 5300 9896                  	dc.l Map_obj53+$53000000
0001F81E 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001F822 5401 0ADE                  	dc.l Map_obj54+$54000000
0001F826 0000 8680                  	dc.b 0,	0, $86,	$80
0001F82A 5501 1B3A                  	dc.l Map_obj55+$55000000
0001F82E 0000 04B8                  	dc.b 0,	0, 4, $B8
0001F832 7801 8D6C                  	dc.l Map_obj78+$78000000
0001F836 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001F83A 7901 90D8                  	dc.l Map_obj79+$79000000
0001F83E 0100 0571                  	dc.w $100, lamppostart
0001F842                            	even
0001F842                            	even
0001F842                            
0001F842                            ; ---------------------------------------------------------------------------
0001F842                            ; Debug	list - Star Light
0001F842                            ; ---------------------------------------------------------------------------
0001F842                            Debug_SLZ:
0001F842                            	include "_inc\Debug list - SLZ.asm"
0001F842                            ; ---------------------------------------------------------------------------
0001F842                            ; Debug	list - Star Light
0001F842                            ; ---------------------------------------------------------------------------
0001F842 000F                       	dc.w $F
0001F844 2500 B23A                  	dc.l Map_obj25+$25000000
0001F848 0000 26BA                  	dc.w 0, ringart+$2000
0001F84C 2600 B820                  	dc.l Map_obj26+$26000000
0001F850 0000 0680                  	dc.b 0,	0, 6, $80
0001F854 5901 264E                  	dc.l Map_obj59+$59000000
0001F858 0000 4000                  	dc.b 0,	0, $40,	0
0001F85C 5300 9896                  	dc.l Map_obj53+$53000000
0001F860 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001F864 1800 92EE                  	dc.l Map_obj18b+$18000000
0001F868 0000 4000                  	dc.b 0,	0, $40,	0
0001F86C 5A01 2796                  	dc.l Map_obj5A+$5A000000
0001F870 0000 4000                  	dc.b 0,	0, $40,	0
0001F874 5B01 295C                  	dc.l Map_obj5B+$5B000000
0001F878 0000 4000                  	dc.b 0,	0, $40,	0
0001F87C 5D01 2F4A                  	dc.l Map_obj5D+$5D000000
0001F880 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001F884 5E01 32EA                  	dc.l Map_obj5E+$5E000000
0001F888 0000 0374                  	dc.b 0,	0, 3, $74
0001F88C 4100 F580                  	dc.l Map_obj41+$41000000
0001F890 0000 0523                  	dc.b 0,	0, 5, $23
0001F894 1300 C62A                  	dc.l Map_obj14+$13000000
0001F898 0000 0480                  	dc.b 0,	0, 4, $80
0001F89C 1C00 99DC                  	dc.l Map_obj1C+$1C000000
0001F8A0 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001F8A4 5F01 3568                  	dc.l Map_obj5F+$5F000000
0001F8A8 0000 0400                  	dc.b 0,	0, 4, 0
0001F8AC 6001 3818                  	dc.l Map_obj60+$60000000
0001F8B0 0000 2429                  	dc.b 0,	0, $24,	$29
0001F8B4 7901 90D8                  	dc.l Map_obj79+$79000000
0001F8B8 0100 0571                  	dc.w $100, lamppostart
0001F8BC                            	even
0001F8BC                            	even
0001F8BC                            
0001F8BC                            ; ---------------------------------------------------------------------------
0001F8BC                            ; Debug	list - Spring Yard
0001F8BC                            ; ---------------------------------------------------------------------------
0001F8BC                            Debug_SYZ:
0001F8BC                            	include "_inc\Debug list - SYZ.asm"
0001F8BC                            ; ---------------------------------------------------------------------------
0001F8BC                            ; Debug	list - Spring Yard
0001F8BC                            ; ---------------------------------------------------------------------------
0001F8BC 000F                       	dc.w $F
0001F8BE 2500 B23A                  	dc.l Map_obj25+$25000000
0001F8C2 0000 26BA                  	dc.w 0, ringart+$2000
0001F8C6 2600 B820                  	dc.l Map_obj26+$26000000
0001F8CA 0000 0680                  	dc.b 0,	0, 6, $80
0001F8CE 3600 E308                  	dc.l Map_obj36+$36000000
0001F8D2 0000 051B                  	dc.b 0,	0, 5, $1B
0001F8D6 4100 F580                  	dc.l Map_obj41+$41000000
0001F8DA 0000 0523                  	dc.b 0,	0, 5, $23
0001F8DE 4300 FA00                  	dc.l Map_obj43+$43000000
0001F8E2 0000 04B8                  	dc.b 0,	0, 4, $B8
0001F8E6 1201 022A                  	dc.l Map_obj12+$12000000
0001F8EA 0000 0000                  	dc.b 0,	0, 0, 0
0001F8EE 4701 03A4                  	dc.l Map_obj47+$47000000
0001F8F2 0000 0380                  	dc.b 0,	0, 3, $80
0001F8F6 1F00 AA9A                  	dc.l Map_obj1F+$1F000000
0001F8FA 0000 0400                  	dc.b 0,	0, 4, 0
0001F8FE 2200 AD7A                  	dc.l Map_obj22+$22000000
0001F902 0000 0444                  	dc.b 0,	0, 4, $44
0001F906 5001 11F6                  	dc.l Map_obj50+$50000000
0001F90A 0000 247B                  	dc.b 0,	0, $24,	$7B
0001F90E 1800 92DC                  	dc.l Map_obj18a+$18000000
0001F912 0000 4000                  	dc.b 0,	0, $40,	0
0001F916 5601 1FEA                  	dc.l Map_obj56+$56000000
0001F91A 0000 4000                  	dc.b 0,	0, $40,	0
0001F91E 3200 D19A                  	dc.l Map_obj32+$32000000
0001F922 0000 0513                  	dc.b 0,	0, 5, $13
0001F926 7801 8D6C                  	dc.l Map_obj78+$78000000
0001F92A 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001F92E 7901 90D8                  	dc.l Map_obj79+$79000000
0001F932 0100 0571                  	dc.w $100, lamppostart
0001F936                            	even
0001F936                            	even
0001F936                            
0001F936                            ; ---------------------------------------------------------------------------
0001F936                            ; Debug	list - Scrap Brain
0001F936                            ; ---------------------------------------------------------------------------
0001F936                            Debug_SBZ:
0001F936                            	include "_inc\Debug list - SBZ.asm"
0001F936                            ; ---------------------------------------------------------------------------
0001F936                            ; Debug	list - Scrap Brain
0001F936                            ; ---------------------------------------------------------------------------
0001F936 001D                       	dc.w $1D
0001F938 2500 B23A                  	dc.l Map_obj25+$25000000
0001F93C 0000 26BA                  	dc.w 0, ringart+$2000
0001F940 2600 B820                  	dc.l Map_obj26+$26000000
0001F944 0000 0680                  	dc.b 0,	0, 6, $80
0001F948 5F01 3568                  	dc.l Map_obj5F+$5F000000
0001F94C 0000 0400                  	dc.b 0,	0, 4, 0
0001F950 6001 3818                  	dc.l Map_obj60+$60000000
0001F954 0000 0429                  	dc.b 0,	0, 4, $29
0001F958 7801 8D6C                  	dc.l Map_obj78+$78000000
0001F95C 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001F960 1501 239C                  	dc.l Map_obj15b+$15000000
0001F964 0702 4391                  	dc.b 7,	2, $43,	$91
0001F968 6701 769A                  	dc.l Map_obj67+$67000000
0001F96C E000 C344                  	dc.b $E0, 0, $C3, $44
0001F970 5201 1946                  	dc.l Map_obj52+$52000000
0001F974 2802 22C0                  	dc.b $28, 2, $22, $C0
0001F978 3200 D19A                  	dc.l Map_obj32+$32000000
0001F97C 0000 0513                  	dc.b 0,	0, 5, $13
0001F980 6901 7902                  	dc.l Map_obj69+$69000000
0001F984 0300 4492                  	dc.b 3,	0, $44,	$92
0001F988 6901 795C                  	dc.l Map_obj69a+$69000000
0001F98C 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001F990 6A01 7BBC                  	dc.l Map_obj6A+$6A000000
0001F994 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001F998 5300 9896                  	dc.l Map_obj53+$53000000
0001F99C 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001F9A0 5201 1946                  	dc.l Map_obj52+$52000000
0001F9A4 3903 4460                  	dc.b $39, 3, $44, $60
0001F9A8 6B01 7F62                  	dc.l Map_obj6B+$6B000000
0001F9AC 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001F9B0 2A00 9D44                  	dc.l Map_obj2A+$2A000000
0001F9B4 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001F9B8 6B01 7F62                  	dc.l Map_obj6B+$6B000000
0001F9BC 1301 22C0                  	dc.b $13, 1, $22, $C0
0001F9C0 6A01 7BBC                  	dc.l Map_obj6A+$6A000000
0001F9C4 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001F9C8 6B01 7F62                  	dc.l Map_obj6B+$6B000000
0001F9CC 2401 22C0                  	dc.b $24, 1, $22, $C0
0001F9D0 6A01 7BBC                  	dc.l Map_obj6A+$6A000000
0001F9D4 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001F9D8 6B01 7F62                  	dc.l Map_obj6B+$6B000000
0001F9DC 3401 22C0                  	dc.b $34, 1, $22, $C0
0001F9E0 6C01 8124                  	dc.l Map_obj6C+$6C000000
0001F9E4 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001F9E8 6D00 FE7E                  	dc.l Map_obj6D+$6D000000
0001F9EC 6400 83D9                  	dc.b $64, 0, $83, $D9
0001F9F0 6D00 FE7E                  	dc.l Map_obj6D+$6D000000
0001F9F4 640B 83D9                  	dc.b $64, $B, $83, $D9
0001F9F8 6E01 81DA                  	dc.l Map_obj6E+$6E000000
0001F9FC 0400 047E                  	dc.b 4,	0, 4, $7E
0001FA00 7001 8624                  	dc.l Map_obj70+$70000000
0001FA04 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001FA08 7101 2DE0                  	dc.l Map_obj71+$71000000
0001FA0C 1100 8680                  	dc.b $11, 0, $86, $80
0001FA10 1E00 A1B2                  	dc.l Map_obj1E+$1E000000
0001FA14 0400 2302                  	dc.b 4,	0, $23,	2
0001FA18 7901 90D8                  	dc.l Map_obj79+$79000000
0001FA1C 0100 0571                  	dc.w $100, lamppostart
0001FA20                            	even
0001FA20                            	even
0001FA20                            
0001FA20                            ; ---------------------------------------------------------------------------
0001FA20                            ; Debug	list - ending sequence / special stage
0001FA20                            ; ---------------------------------------------------------------------------
0001FA20                            Debug_Ending:
0001FA20                            	include "_inc\Debug list - Ending and SS.asm"
0001FA20                            ; ---------------------------------------------------------------------------
0001FA20                            ; Debug	list - ending sequence / special stage
0001FA20                            ; ---------------------------------------------------------------------------
0001FA20 000D                       	dc.w $D
0001FA22 2500 B23A                  	dc.l Map_obj25+$25000000
0001FA26 0000 26BA                  	dc.w 0, ringart+$2000
0001FA2A 4701 03A4                  	dc.l Map_obj47+$47000000
0001FA2E 0000 0380                  	dc.b 0,	0, 3, $80
0001FA32 2800 A7CC                  	dc.l Map_obj28a+$28000000
0001FA36 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001FA3A 2800 A7CC                  	dc.l Map_obj28a+$28000000
0001FA3E 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001FA42 2800 A7CC                  	dc.l Map_obj28a+$28000000
0001FA46 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001FA4A 2800 A7B4                  	dc.l Map_obj28+$28000000
0001FA4E 0D00 0553                  	dc.b $D, 0, 5, $53
0001FA52 2800 A7B4                  	dc.l Map_obj28+$28000000
0001FA56 0E00 0553                  	dc.b $E, 0, 5, $53
0001FA5A 2800 A7B4                  	dc.l Map_obj28+$28000000
0001FA5E 0F00 0573                  	dc.b $F, 0, 5, $73
0001FA62 2800 A7B4                  	dc.l Map_obj28+$28000000
0001FA66 1000 0573                  	dc.b $10, 0, 5,	$73
0001FA6A 2800 A7CC                  	dc.l Map_obj28a+$28000000
0001FA6E 1100 0585                  	dc.b $11, 0, 5,	$85
0001FA72 2800 A7E4                  	dc.l Map_obj28b+$28000000
0001FA76 1200 0593                  	dc.b $12, 0, 5,	$93
0001FA7A 2800 A7CC                  	dc.l Map_obj28a+$28000000
0001FA7E 1300 0565                  	dc.b $13, 0, 5,	$65
0001FA82 2800 A7E4                  	dc.l Map_obj28b+$28000000
0001FA86 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001FA8A                            	even
0001FA8A                            	even
0001FA8A                            
0001FA8A                            ; ---------------------------------------------------------------------------
0001FA8A                            ; Main level load blocks
0001FA8A                            ; ---------------------------------------------------------------------------
0001FA8A                            MainLoadBlocks:
0001FA8A                            	include "_inc\Main level load blocks.asm"
0001FA8A                            ; ---------------------------------------------------------------------------
0001FA8A                            ; Main level load blocks
0001FA8A                            ;
0001FA8A                            ; ===FORMAT===
0001FA8A                            ; level	patterns + (1st	PLC num	* 10^6)
0001FA8A                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001FA8A                            ; 256x256 mappings
0001FA8A                            ; blank, music (unused), pal index (unused), pal index
0001FA8A                            ; ---------------------------------------------------------------------------
0001FA8A 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001FA8E 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001FA92 0000 0000                  	dc.l Blk256_GHZ
0001FA96 0081 0404                  	dc.b 0,	$81, 4,	4
0001FA9A 0000 0000                  	dc.l Nem_LZ+$6000000
0001FA9E 0000 0000                  	dc.l Blk16_LZ+$7000000
0001FAA2 0000 0000                  	dc.l Blk256_LZ
0001FAA6 0082 0505                  	dc.b 0,	$82, 5,	5
0001FAAA 0000 0000                  	dc.l Nem_MZ+$8000000
0001FAAE 0000 0000                  	dc.l Blk16_MZ+$9000000
0001FAB2 0000 0000                  	dc.l Blk256_MZ
0001FAB6 0083 0606                  	dc.b 0,	$83, 6,	6
0001FABA 0000 0000                  	dc.l Nem_SLZ+$A000000
0001FABE 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001FAC2 0000 0000                  	dc.l Blk256_SLZ
0001FAC6 0084 0707                  	dc.b 0,	$84, 7,	7
0001FACA 0000 0000                  	dc.l Nem_SYZ+$C000000
0001FACE 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001FAD2 0000 0000                  	dc.l Blk256_SYZ
0001FAD6 0085 0808                  	dc.b 0,	$85, 8,	8
0001FADA 0000 0000                  	dc.l Nem_SBZ+$E000000
0001FADE 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001FAE2 0000 0000                  	dc.l Blk256_SBZ
0001FAE6 0086 0909                  	dc.b 0,	$86, 9,	9
0001FAEA 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001FAEE 0000 0000                  	dc.l Blk16_GHZ
0001FAF2 0000 0000                  	dc.l Blk256_GHZ
0001FAF6 0086 1313                  	dc.b 0,	$86, $13, $13
0001FAFA                            	even
0001FAFA                            	even
0001FAFA                            
0001FAFA                            ; ---------------------------------------------------------------------------
0001FAFA                            ; Pattern load cues
0001FAFA                            ; ---------------------------------------------------------------------------
0001FAFA                            ArtLoadCues:
0001FAFA                            	include "_inc\Pattern load cues.asm"
0001FAFA                            ; ---------------------------------------------------------------------------
0001FAFA                            ; Pattern load cues - index
0001FAFA                            ; ---------------------------------------------------------------------------
0001FAFA 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001FAFE 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001FB02 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001FB06 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001FB0A 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001FB0E 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001FB12 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001FB16 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001FB1A 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001FB1E 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001FB22 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001FB26 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001FB2A 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001FB2E 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001FB32 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001FB36 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001FB3A                            ; ---------------------------------------------------------------------------
0001FB3A                            ; Pattern load cues - standard block 1
0001FB3A                            ; ---------------------------------------------------------------------------
0001FB3A 0002                       PLC_Main:	dc.w 2
0001FB3C 0000 0000                  		dc.l Nem_Hud		; HUD
0001FB40 D940                       		dc.w $D940
0001FB42 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001FB46 FA80                       		dc.w $FA80
0001FB48 0000 0000                  		dc.l Nem_Ring		; rings
0001FB4C D740                       		dc.w ringart*$20
0001FB4E                            ; ---------------------------------------------------------------------------
0001FB4E                            ; Pattern load cues - standard block 2
0001FB4E                            ; ---------------------------------------------------------------------------
0001FB4E 0002                       PLC_Main2:	dc.w 2
0001FB50 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001FB54 AE20                       		dc.w lamppostart*$20
0001FB56 0000 0000                  		dc.l Nem_Points		; points from enemy
0001FB5A AD00                       		dc.w pointsart*$20
0001FB5C 0000 0000                  		dc.l Nem_Monitors	; monitors
0001FB60 D000                       		dc.w $D000
0001FB62                            ; ---------------------------------------------------------------------------
0001FB62                            ; Pattern load cues - explosion
0001FB62                            ; ---------------------------------------------------------------------------
0001FB62 0000                       PLC_Explode:	dc.w 0
0001FB64 0000 0000                  		dc.l Nem_Explode	; explosion
0001FB68 B400                       		dc.w $B400
0001FB6A                            ; ---------------------------------------------------------------------------
0001FB6A                            ; Pattern load cues - game/time	over
0001FB6A                            ; ---------------------------------------------------------------------------
0001FB6A 0000                       PLC_GameOver:	dc.w 0
0001FB6C 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001FB70 ABC0                       		dc.w $ABC0
0001FB72                            ; ---------------------------------------------------------------------------
0001FB72                            ; Pattern load cues - Green Hill
0001FB72                            ; ---------------------------------------------------------------------------
0001FB72 0009                       PLC_GHZ:	dc.w $9
0001FB74 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001FB78 6B00                       		dc.w $6B00
0001FB7A 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001FB7E 7A00                       		dc.w $7A00
0001FB80 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001FB84 8000                       		dc.w $8000
0001FB86 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FB8A 8880                       		dc.w $8880
0001FB8C 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001FB90 8F60                       		dc.w $8F60
0001FB92 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001FB96 9360                       		dc.w $9360
0001FB98 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001FB9C 9E00                       		dc.w $9E00
0001FB9E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FBA2 A360                       		dc.w $A360
0001FBA4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FBA8 A460                       		dc.w $A460
0001FBAA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FBAE A660                       		dc.w $A660
0001FBB0 0005                       PLC_GHZ2:	dc.w 5
0001FBB2 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001FBB6 7000                       		dc.w $7000
0001FBB8 0000 0000                  		dc.l Nem_Bridge		; bridge
0001FBBC 71C0                       		dc.w $71C0
0001FBBE 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001FBC2 7300                       		dc.w $7300
0001FBC4 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001FBC8 7540                       		dc.w $7540
0001FBCA 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001FBCE A1E0                       		dc.w $A1E0
0001FBD0 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001FBD4 6980                       		dc.w $6980
0001FBD6                            ; ---------------------------------------------------------------------------
0001FBD6                            ; Pattern load cues - Labyrinth
0001FBD6                            ; ---------------------------------------------------------------------------
0001FBD6 000A                       PLC_LZ:		dc.w $A
0001FBD8 0000 0000                  		dc.l Nem_LzBlock1	; block
0001FBDC 3C00                       		dc.w $3C00
0001FBDE 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001FBE2 3E00                       		dc.w $3E00
0001FBE4 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001FBE8 4B20                       		dc.w $4B20
0001FBEA 0000 0000                  		dc.l Nem_Water		; water	surface
0001FBEE 6000                       		dc.w $6000
0001FBF0 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001FBF4 6200                       		dc.w $6200
0001FBF6 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001FBFA 6500                       		dc.w $6500
0001FBFC 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001FC00 6900                       		dc.w $6900
0001FC02 0000 0000                  		dc.l Nem_LzBlock3	; block
0001FC06 7780                       		dc.w $7780
0001FC08 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001FC0C 7880                       		dc.w $7880
0001FC0E 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001FC12 7980                       		dc.w $7980
0001FC14 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001FC18 94C0                       		dc.w $94C0
0001FC1A 000C                       PLC_LZ2:	dc.w $C
0001FC1C 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001FC20 7BC0                       		dc.w $7BC0
0001FC22 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001FC26 7CC0                       		dc.w $7CC0
0001FC28 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001FC2C 7EC0                       		dc.w $7EC0
0001FC2E 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001FC32 5D20                       		dc.w $5D20
0001FC34 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001FC38 8800                       		dc.w $8800
0001FC3A 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001FC3E 89E0                       		dc.w $89E0
0001FC40 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FC44 8CE0                       		dc.w $8CE0
0001FC46 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001FC4A 90C0                       		dc.w $90C0
0001FC4C 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FC50 A1E0                       		dc.w $A1E0
0001FC52 0000 0000                  		dc.l Nem_Cork		; cork block
0001FC56 A000                       		dc.w $A000
0001FC58 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FC5C A360                       		dc.w $A360
0001FC5E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FC62 A460                       		dc.w $A460
0001FC64 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FC68 A660                       		dc.w $A660
0001FC6A                            ; ---------------------------------------------------------------------------
0001FC6A                            ; Pattern load cues - Marble
0001FC6A                            ; ---------------------------------------------------------------------------
0001FC6A 0008                       PLC_MZ:		dc.w 8
0001FC6C 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001FC70 6000                       		dc.w $6000
0001FC72 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001FC76 68A0                       		dc.w $68A0
0001FC78 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001FC7C 7000                       		dc.w $7000
0001FC7E 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001FC82 71C0                       		dc.w $71C0
0001FC84 0000 0000                  		dc.l Nem_Lava		; lava
0001FC88 7500                       		dc.w $7500
0001FC8A 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FC8E 8880                       		dc.w $8880
0001FC90 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001FC94 8F60                       		dc.w $8F60
0001FC96 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001FC9A 9700                       		dc.w $9700
0001FC9C 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FCA0 9FE0                       		dc.w $9FE0
0001FCA2 0004                       PLC_MZ2:	dc.w 4
0001FCA4 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001FCA8 A260                       		dc.w $A260
0001FCAA 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FCAE A360                       		dc.w $A360
0001FCB0 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FCB4 A460                       		dc.w $A460
0001FCB6 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FCBA A660                       		dc.w $A660
0001FCBC 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001FCC0 5700                       		dc.w $5700
0001FCC2                            ; ---------------------------------------------------------------------------
0001FCC2                            ; Pattern load cues - Star Light
0001FCC2                            ; ---------------------------------------------------------------------------
0001FCC2 0007                       PLC_SLZ:	dc.w 7
0001FCC4 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001FCC8 8000                       		dc.w $8000
0001FCCA 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FCCE 8520                       		dc.w $8520
0001FCD0 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001FCD4 9000                       		dc.w $9000
0001FCD6 0000 0000                  		dc.l Nem_SlzBlock	; block
0001FCDA 9C00                       		dc.w $9C00
0001FCDC 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001FCE0 A260                       		dc.w $A260
0001FCE2 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FCE6 A360                       		dc.w $A360
0001FCE8 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FCEC A460                       		dc.w $A460
0001FCEE 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FCF2 A660                       		dc.w $A660
0001FCF4 0005                       PLC_SLZ2:	dc.w 5
0001FCF6 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001FCFA 6E80                       		dc.w $6E80
0001FCFC 0000 0000                  		dc.l Nem_Fan		; fan
0001FD00 7400                       		dc.w $7400
0001FD02 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001FD06 7980                       		dc.w $7980
0001FD08 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001FD0C 7B80                       		dc.w $7B80
0001FD0E 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001FD12 9B00                       		dc.w $9B00
0001FD14 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001FD18 9E00                       		dc.w $9E00
0001FD1A                            ; ---------------------------------------------------------------------------
0001FD1A                            ; Pattern load cues - Spring Yard
0001FD1A                            ; ---------------------------------------------------------------------------
0001FD1A 0003                       PLC_SYZ:	dc.w 3
0001FD1C 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001FD20 8000                       		dc.w $8000
0001FD22 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FD26 8880                       		dc.w $8880
0001FD28 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001FD2C 8F60                       		dc.w $8F60
0001FD2E 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001FD32 9700                       		dc.w $9700
0001FD34 0006                       PLC_SYZ2:	dc.w 6
0001FD36 0000 0000                  		dc.l Nem_Bumper		; bumper
0001FD3A 7000                       		dc.w $7000
0001FD3C 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001FD40 72C0                       		dc.w $72C0
0001FD42 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001FD46 7740                       		dc.w $7740
0001FD48 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FD4C A1E0                       		dc.w $A1E0
0001FD4E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FD52 A360                       		dc.w $A360
0001FD54 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FD58 A460                       		dc.w $A460
0001FD5A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FD5E A660                       		dc.w $A660
0001FD60                            ; ---------------------------------------------------------------------------
0001FD60                            ; Pattern load cues - Scrap Brain
0001FD60                            ; ---------------------------------------------------------------------------
0001FD60 000A                       PLC_SBZ:	dc.w $A
0001FD62 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001FD66 5800                       		dc.w $5800
0001FD68 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001FD6C 5D00                       		dc.w $5D00
0001FD6E 0000 0000                  		dc.l Nem_Girder		; girder
0001FD72 5E00                       		dc.w $5E00
0001FD74 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001FD78 6040                       		dc.w $6040
0001FD7A 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001FD7E 6880                       		dc.w $6880
0001FD80 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001FD84 6900                       		dc.w $6900
0001FD86 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001FD8A 7220                       		dc.w $7220
0001FD8C 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001FD90 76A0                       		dc.w $76A0
0001FD92 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001FD96 7B20                       		dc.w $7B20
0001FD98 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001FD9C 7EA0                       		dc.w $7EA0
0001FD9E 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001FDA2 9860                       		dc.w $9860
0001FDA4 000C                       PLC_SBZ2:	dc.w $C
0001FDA6 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FDAA 5600                       		dc.w $5600
0001FDAC 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001FDB0 8000                       		dc.w $8000
0001FDB2 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FDB6 8520                       		dc.w $8520
0001FDB8 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001FDBC 8C00                       		dc.w $8C00
0001FDBE 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001FDC2 8DE0                       		dc.w $8DE0
0001FDC4 0000 0000                  		dc.l Nem_Electric	; electric orb
0001FDC8 8FC0                       		dc.w $8FC0
0001FDCA 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001FDCE 9240                       		dc.w $9240
0001FDD0 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001FDD4 7F20                       		dc.w $7F20
0001FDD6 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001FDDA 9BE0                       		dc.w $9BE0
0001FDDC 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FDE0 A1E0                       		dc.w $A1E0
0001FDE2 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FDE6 A360                       		dc.w $A360
0001FDE8 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FDEC A460                       		dc.w $A460
0001FDEE 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FDF2 A660                       		dc.w $A660
0001FDF4                            ; ---------------------------------------------------------------------------
0001FDF4                            ; Pattern load cues - title card
0001FDF4                            ; ---------------------------------------------------------------------------
0001FDF4 0000                       PLC_TitleCard:	dc.w 0
0001FDF6 0000 0000                  		dc.l Nem_TitleCard
0001FDFA B000                       		dc.w $B000
0001FDFC                            ; ---------------------------------------------------------------------------
0001FDFC                            ; Pattern load cues - act 3 boss
0001FDFC                            ; ---------------------------------------------------------------------------
0001FDFC 0005                       PLC_Boss:	dc.w 5
0001FDFE 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001FE02 8000                       		dc.w $8000
0001FE04 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001FE08 8D80                       		dc.w $8D80
0001FE0A 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001FE0E 93A0                       		dc.w $93A0
0001FE10 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001FE14 A300                       		dc.w $A300
0001FE16 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001FE1A A300                       		dc.w $A300
0001FE1C 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001FE20 A540                       		dc.w $A540
0001FE22                            ; ---------------------------------------------------------------------------
0001FE22                            ; Pattern load cues - act 1/2 signpost
0001FE22                            ; ---------------------------------------------------------------------------
0001FE22 0002                       PLC_Signpost:	dc.w 2
0001FE24 0000 0000                  		dc.l Nem_SignPost	; signpost
0001FE28 D000                       		dc.w $D000
0001FE2A 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001FE2E 96C0                       		dc.w $96C0
0001FE30 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001FE34 8C40                       		dc.w $8C40
0001FE36                            ; ---------------------------------------------------------------------------
0001FE36                            ; Pattern load cues - beta special stage warp effect
0001FE36                            ; ---------------------------------------------------------------------------
0001FE36 0000                       PLC_Warp:	dc.w 0
0001FE38 0000 0000                  		dc.l Nem_Warp
0001FE3C A820                       		dc.w $A820
0001FE3E                            ; ---------------------------------------------------------------------------
0001FE3E                            ; Pattern load cues - special stage
0001FE3E                            ; ---------------------------------------------------------------------------
0001FE3E 000C                       PLC_SpeStage:	dc.w $C
0001FE40 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001FE44 0000                       		dc.w 0
0001FE46 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001FE4A 0A20                       		dc.w $A20
0001FE4C 0000 0000                  		dc.l Nem_Bumper		; bumper
0001FE50 4760                       		dc.w $4760
0001FE52 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001FE56 4A20                       		dc.w $4A20
0001FE58 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001FE5C 4C60                       		dc.w $4C60
0001FE5E 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001FE62 5E00                       		dc.w $5E00
0001FE64 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001FE68 6E00                       		dc.w $6E00
0001FE6A 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001FE6E 7E00                       		dc.w $7E00
0001FE70 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001FE74 8E00                       		dc.w $8E00
0001FE76 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001FE7A 9E00                       		dc.w $9E00
0001FE7C 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001FE80 BE00                       		dc.w $BE00
0001FE82 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001FE86 EE00                       		dc.w $EE00
0001FE88 0000 0000                  		dc.l Nem_Ring		; rings
0001FE8C 45A0                       		dc.w ssringart*$20
0001FE8E                            ; ---------------------------------------------------------------------------
0001FE8E                            ; Pattern load cues - GHZ animals
0001FE8E                            ; ---------------------------------------------------------------------------
0001FE8E 0001                       PLC_GHZAnimals:	dc.w 1
0001FE90 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FE94 B000                       		dc.w $B000
0001FE96 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FE9A B240                       		dc.w $B240
0001FE9C                            ; ---------------------------------------------------------------------------
0001FE9C                            ; Pattern load cues - LZ animals
0001FE9C                            ; ---------------------------------------------------------------------------
0001FE9C 0001                       PLC_LZAnimals:	dc.w 1
0001FE9E 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001FEA2 B000                       		dc.w $B000
0001FEA4 0000 0000                  		dc.l Nem_Seal		; seal
0001FEA8 B240                       		dc.w $B240
0001FEAA                            ; ---------------------------------------------------------------------------
0001FEAA                            ; Pattern load cues - MZ animals
0001FEAA                            ; ---------------------------------------------------------------------------
0001FEAA 0001                       PLC_MZAnimals:	dc.w 1
0001FEAC 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001FEB0 B000                       		dc.w $B000
0001FEB2 0000 0000                  		dc.l Nem_Seal		; seal
0001FEB6 B240                       		dc.w $B240
0001FEB8                            ; ---------------------------------------------------------------------------
0001FEB8                            ; Pattern load cues - SLZ animals
0001FEB8                            ; ---------------------------------------------------------------------------
0001FEB8 0001                       PLC_SLZAnimals:	dc.w 1
0001FEBA 0000 0000                  		dc.l Nem_Pig		; pig
0001FEBE B000                       		dc.w $B000
0001FEC0 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FEC4 B240                       		dc.w $B240
0001FEC6                            ; ---------------------------------------------------------------------------
0001FEC6                            ; Pattern load cues - SYZ animals
0001FEC6                            ; ---------------------------------------------------------------------------
0001FEC6 0001                       PLC_SYZAnimals:	dc.w 1
0001FEC8 0000 0000                  		dc.l Nem_Pig		; pig
0001FECC B000                       		dc.w $B000
0001FECE 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FED2 B240                       		dc.w $B240
0001FED4                            ; ---------------------------------------------------------------------------
0001FED4                            ; Pattern load cues - SBZ animals
0001FED4                            ; ---------------------------------------------------------------------------
0001FED4 0001                       PLC_SBZAnimals:	dc.w 1
0001FED6 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FEDA B000                       		dc.w $B000
0001FEDC 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FEE0 B240                       		dc.w $B240
0001FEE2                            ; ---------------------------------------------------------------------------
0001FEE2                            ; Pattern load cues - special stage results screen
0001FEE2                            ; ---------------------------------------------------------------------------
0001FEE2 0001                       PLC_SpeStResult:dc.w 1
0001FEE4 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001FEE8 A820                       		dc.w $A820
0001FEEA 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001FEEE AA20                       		dc.w $AA20
0001FEF0                            ; ---------------------------------------------------------------------------
0001FEF0                            ; Pattern load cues - ending sequence
0001FEF0                            ; ---------------------------------------------------------------------------
0001FEF0 000C                       PLC_Ending:	dc.w $C
0001FEF2 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001FEF6 6B00                       		dc.w $6B00
0001FEF8 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001FEFC 7400                       		dc.w $7400
0001FEFE 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001FF02 78A0                       		dc.w $78A0
0001FF04 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001FF08 7C20                       		dc.w $7C20
0001FF0A 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001FF0E A480                       		dc.w $A480
0001FF10 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FF14 AA60                       		dc.w $AA60
0001FF16 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FF1A ACA0                       		dc.w $ACA0
0001FF1C 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001FF20 AE60                       		dc.w $AE60
0001FF22 0000 0000                  		dc.l Nem_Seal		; seal
0001FF26 B0A0                       		dc.w $B0A0
0001FF28 0000 0000                  		dc.l Nem_Pig		; pig
0001FF2C B260                       		dc.w $B260
0001FF2E 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FF32 B4A0                       		dc.w $B4A0
0001FF34 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001FF38 B660                       		dc.w $B660
0001FF3A 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001FF3E B8A0                       		dc.w $B8A0
0001FF40                            ; ---------------------------------------------------------------------------
0001FF40                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001FF40                            ; ---------------------------------------------------------------------------
0001FF40 0002                       PLC_TryAgain:	dc.w 2
0001FF42 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001FF46 78A0                       		dc.w $78A0
0001FF48 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001FF4C 7C20                       		dc.w $7C20
0001FF4E 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001FF52 B400                       		dc.w $B400
0001FF54                            ; ---------------------------------------------------------------------------
0001FF54                            ; Pattern load cues - Eggman on SBZ 2
0001FF54                            ; ---------------------------------------------------------------------------
0001FF54 0002                       PLC_EggmanSBZ2:	dc.w 2
0001FF56 0000 0000                  		dc.l Nem_SbzBlock	; block
0001FF5A A300                       		dc.w $A300
0001FF5C 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001FF60 8000                       		dc.w $8000
0001FF62 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FF66 9400                       		dc.w $9400
0001FF68                            ; ---------------------------------------------------------------------------
0001FF68                            ; Pattern load cues - final boss
0001FF68                            ; ---------------------------------------------------------------------------
0001FF68 0004                       PLC_FZBoss:	dc.w 4
0001FF6A 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001FF6E 7400                       		dc.w $7400
0001FF70 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001FF74 6000                       		dc.w $6000
0001FF76 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001FF7A 8000                       		dc.w $8000
0001FF7C 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001FF80 8E00                       		dc.w $8E00
0001FF82 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001FF86 A540                       		dc.w $A540
0001FF88                            		even
0001FF88                            		even
0001FF88                            
0001FF88                            		incbin	misc\padding.bin
00020076                            		even
00020076                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
000204D8                            		even
000204D8                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
000205D0                            		even
000205D0                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
000206CA                            		even
000206CA                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
00021696                            		even
00021696                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023040 00                         		even
00023040                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00023082                            		even
00023082                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023140                            		even
00023140                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
000235E8                            		even
000235E8                            ; ---------------------------------------------------------------------------
000235E8                            ; Sprite mappings - Sonic
000235E8                            ; ---------------------------------------------------------------------------
000235E8                            Map_Sonic:
000235E8                            	include "_maps\Sonic.asm"
000235E8                            ; ---------------------------------------------------------------------------
000235E8                            ; Sprite mappings - Sonic
000235E8                            ; ---------------------------------------------------------------------------
000235E8 0000 0000                  		dc.w byte_21292-Map_Sonic, byte_21293-Map_Sonic
000235EC 0000 0000                  		dc.w byte_212A8-Map_Sonic, byte_212B8-Map_Sonic
000235F0 0000 0000                  		dc.w byte_212C8-Map_Sonic, byte_212D8-Map_Sonic
000235F4 0000 0000                  		dc.w byte_212E8-Map_Sonic, byte_212FD-Map_Sonic
000235F8 0000 0000                  		dc.w byte_21308-Map_Sonic, byte_21313-Map_Sonic
000235FC 0000 0000                  		dc.w byte_21328-Map_Sonic, byte_21333-Map_Sonic
00023600 0000 0000                  		dc.w byte_21343-Map_Sonic, byte_2135D-Map_Sonic
00023604 0000 0000                  		dc.w byte_2137C-Map_Sonic, byte_21391-Map_Sonic
00023608 0000 0000                  		dc.w byte_213AB-Map_Sonic, byte_213C0-Map_Sonic
0002360C 0000 0000                  		dc.w byte_213DA-Map_Sonic, byte_213EF-Map_Sonic
00023610 0000 0000                  		dc.w byte_213FA-Map_Sonic, byte_21405-Map_Sonic
00023614 0000 0000                  		dc.w byte_2141A-Map_Sonic, byte_21425-Map_Sonic
00023618 0000 0000                  		dc.w byte_21435-Map_Sonic, byte_21454-Map_Sonic
0002361C 0000 0000                  		dc.w byte_21473-Map_Sonic, byte_21488-Map_Sonic
00023620 0000 0000                  		dc.w byte_214A2-Map_Sonic, byte_214B7-Map_Sonic
00023624 0000 0000                  		dc.w byte_214D1-Map_Sonic, byte_214DC-Map_Sonic
00023628 0000 0000                  		dc.w byte_214E7-Map_Sonic, byte_214F2-Map_Sonic
0002362C 0000 0000                  		dc.w byte_214FD-Map_Sonic, byte_21512-Map_Sonic
00023630 0000 0000                  		dc.w byte_21522-Map_Sonic, byte_21537-Map_Sonic
00023634 0000 0000                  		dc.w byte_21547-Map_Sonic, byte_21552-Map_Sonic
00023638 0000 0000                  		dc.w byte_2155D-Map_Sonic, byte_21568-Map_Sonic
0002363C 0000 0000                  		dc.w byte_21573-Map_Sonic, byte_21588-Map_Sonic
00023640 0000 0000                  		dc.w byte_21593-Map_Sonic, byte_215A8-Map_Sonic
00023644 0000 0000                  		dc.w byte_215B3-Map_Sonic, byte_215B9-Map_Sonic
00023648 0000 0000                  		dc.w byte_215BF-Map_Sonic, byte_215C5-Map_Sonic
0002364C 0000 0000                  		dc.w byte_215CB-Map_Sonic, byte_215D1-Map_Sonic
00023650 0000 0000                  		dc.w byte_215DC-Map_Sonic, byte_215E2-Map_Sonic
00023654 0000 0000                  		dc.w byte_215ED-Map_Sonic, byte_215F3-Map_Sonic
00023658 0000 0000                  		dc.w byte_215FE-Map_Sonic, byte_21613-Map_Sonic
0002365C 0000 0000                  		dc.w byte_21628-Map_Sonic, byte_21638-Map_Sonic
00023660 0000 0000                  		dc.w byte_21648-Map_Sonic, byte_21658-Map_Sonic
00023664 0000 0000                  		dc.w byte_21663-Map_Sonic, byte_21673-Map_Sonic
00023668 0000 0000                  		dc.w byte_21683-Map_Sonic, byte_21693-Map_Sonic
0002366C 0000 0000                  		dc.w byte_216A8-Map_Sonic, byte_216BD-Map_Sonic
00023670 0000 0000                  		dc.w byte_216D7-Map_Sonic, byte_216F1-Map_Sonic
00023674 0000 0000                  		dc.w byte_216FC-Map_Sonic, byte_2170C-Map_Sonic
00023678 0000 0000                  		dc.w byte_21717-Map_Sonic, byte_21727-Map_Sonic
0002367C 0000 0000                  		dc.w byte_21732-Map_Sonic, byte_21742-Map_Sonic
00023680 0000 0000                  		dc.w byte_21752-Map_Sonic, byte_2176C-Map_Sonic
00023684 0000 0000                  		dc.w byte_21786-Map_Sonic, byte_21791-Map_Sonic
00023688 0000 0000                  		dc.w byte_217A1-Map_Sonic, byte_217A7-Map_Sonic
0002368C 0000 0000                  		dc.w byte_217AD-Map_Sonic, byte_217B3-Map_Sonic
00023690 0000 0000                  		dc.w byte_217C3-Map_Sonic, byte_217D3-Map_Sonic
00023694 0000 0000                  		dc.w byte_217E3-Map_Sonic, byte_217F3-Map_Sonic
00023698 00                         byte_21292:	dc.b 0
00023699 04                         byte_21293:	dc.b 4			; standing
0002369A EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
0002369F F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0
000236A4 0408 000B F0               		dc.b 4,	8, 0, $B, $F0
000236A9 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8
000236AE 03                         byte_212A8:	dc.b 3			; waiting 1
000236AF EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
000236B4 FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
000236B9 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
000236BE 03                         byte_212B8:	dc.b 3			; waiting 2
000236BF EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
000236C4 FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
000236C9 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
000236CE 03                         byte_212C8:	dc.b 3			; waiting 3
000236CF EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
000236D4 FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
000236D9 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
000236DE 03                         byte_212D8:	dc.b 3			; looking up
000236DF EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
000236E4 0408 0009 F0               		dc.b 4,	8, 0, 9, $F0
000236E9 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
000236EE 04                         byte_212E8:	dc.b 4			; walking 1-1
000236EF EB0D 0000 EC               		dc.b $EB, $D, 0, 0, $EC
000236F4 FB09 0008 EC               		dc.b $FB, 9, 0,	8, $EC
000236F9 FB06 000E 04               		dc.b $FB, 6, 0,	$E, 4
000236FE 0B04 0014 EC               		dc.b $B, 4, 0, $14, $EC
00023703 02                         byte_212FD:	dc.b 2			; walking 1-2
00023704 EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED
00023709 FC0E 0008 F5               		dc.b $FC, $E, 0, 8, $F5
0002370E 02                         byte_21308:	dc.b 2			; walking 1-3
0002370F ED09 0000 F3               		dc.b $ED, 9, 0,	0, $F3
00023714 FD0A 0006 F3               		dc.b $FD, $A, 0, 6, $F3
00023719 04                         byte_21313:	dc.b 4			; walking 1-4
0002371A EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
0002371F FB09 0006 EC               		dc.b $FB, 9, 0,	6, $EC
00023724 FB06 000C 04               		dc.b $FB, 6, 0,	$C, 4
00023729 0B04 0012 EC               		dc.b $B, 4, 0, $12, $EC
0002372E 02                         byte_21328:	dc.b 2			; walking 1-5
0002372F EC09 0000 F3               		dc.b $EC, 9, 0,	0, $F3
00023734 FC0E 0006 EB               		dc.b $FC, $E, 0, 6, $EB
00023739 03                         byte_21333:	dc.b 3			; walking 1-6
0002373A ED0D 0000 EC               		dc.b $ED, $D, 0, 0, $EC
0002373F FD0C 0008 F4               		dc.b $FD, $C, 0, 8, $F4
00023744 0509 000C F4               		dc.b 5,	9, 0, $C, $F4
00023749 05                         byte_21343:	dc.b 5			; walking 2-1
0002374A EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
0002374F EB06 0006 03               		dc.b $EB, 6, 0,	6, 3
00023754 FB08 000C EB               		dc.b $FB, 8, 0,	$C, $EB
00023759 0309 000F F3               		dc.b 3,	9, 0, $F, $F3
0002375E 1300 0015 FB               		dc.b $13, 0, 0,	$15, $FB
00023763 06                         byte_2135D:	dc.b 6			; walking 2-2
00023764 EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
00023769 EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
0002376E FC0C 0008 EC               		dc.b $FC, $C, 0, 8, $EC
00023773 0409 000C F4               		dc.b 4,	9, 0, $C, $F4
00023778 FC05 0012 0C               		dc.b $FC, 5, 0,	$12, $C
0002377D F400 0016 14               		dc.b $F4, 0, 0,	$16, $14
00023782 04                         byte_2137C:	dc.b 4			; walking 2-3
00023783 ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
00023788 ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
0002378D FD0D 0008 F5               		dc.b $FD, $D, 0, 8, $F5
00023792 0D08 0010 FD               		dc.b $D, 8, 0, $10, $FD
00023797 05                         byte_21391:	dc.b 5			; walking 2-4
00023798 EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
0002379D EB05 0006 03               		dc.b $EB, 5, 0,	6, 3
000237A2 FB0D 000A F3               		dc.b $FB, $D, 0, $A, $F3
000237A7 0B08 0012 F3               		dc.b $B, 8, 0, $12, $F3
000237AC 1304 0015 FB               		dc.b $13, 4, 0,	$15, $FB
000237B1 04                         byte_213AB:	dc.b 4			; walking 2-5
000237B2 EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
000237B7 EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
000237BC FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4
000237C1 0C08 0010 FC               		dc.b $C, 8, 0, $10, $FC
000237C6 05                         byte_213C0:	dc.b 5			; walking 2-6
000237C7 ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
000237CC ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
000237D1 FD00 0008 ED               		dc.b $FD, 0, 0,	8, $ED
000237D6 FD0D 0009 F5               		dc.b $FD, $D, 0, 9, $F5
000237DB 0D08 0011 FD               		dc.b $D, 8, 0, $11, $FD
000237E0 04                         byte_213DA:	dc.b 4			; walking 3-1
000237E1 F407 0000 EB               		dc.b $F4, 7, 0,	0, $EB
000237E6 EC09 0008 FB               		dc.b $EC, 9, 0,	8, $FB
000237EB FC04 000E FB               		dc.b $FC, 4, 0,	$E, $FB
000237F0 0409 0010 FB               		dc.b 4,	9, 0, $10, $FB
000237F5 02                         byte_213EF:	dc.b 2			; walking 3-2
000237F6 F407 0000 EC               		dc.b $F4, 7, 0,	0, $EC
000237FB EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC
00023800 02                         byte_213FA:	dc.b 2			; walking 3-3
00023801 F406 0000 ED               		dc.b $F4, 6, 0,	0, $ED
00023806 F40A 0006 FD               		dc.b $F4, $A, 0, 6, $FD
0002380B 04                         byte_21405:	dc.b 4			; walking 3-4
0002380C F406 0000 EB               		dc.b $F4, 6, 0,	0, $EB
00023811 EC09 0006 FB               		dc.b $EC, 9, 0,	6, $FB
00023816 FC04 000C FB               		dc.b $FC, 4, 0,	$C, $FB
0002381B 0409 000E FB               		dc.b 4,	9, 0, $E, $FB
00023820 02                         byte_2141A:	dc.b 2			; walking 3-5
00023821 F406 0000 EC               		dc.b $F4, 6, 0,	0, $EC
00023826 F40B 0006 FC               		dc.b $F4, $B, 0, 6, $FC
0002382B 03                         byte_21425:	dc.b 3			; walking 3-6
0002382C F407 0000 ED               		dc.b $F4, 7, 0,	0, $ED
00023831 EC00 0008 FD               		dc.b $EC, 0, 0,	8, $FD
00023836 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD
0002383B 06                         byte_21435:	dc.b 6			; walking 4-1
0002383C FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
00023841 ED04 0006 F3               		dc.b $ED, 4, 0,	6, $F3
00023846 F504 0008 EB               		dc.b $F5, 4, 0,	8, $EB
0002384B F50A 000A FB               		dc.b $F5, $A, 0, $A, $FB
00023850 0D00 0013 FB               		dc.b $D, 0, 0, $13, $FB
00023855 FD00 0014 13               		dc.b $FD, 0, 0,	$14, $13
0002385A 06                         byte_21454:	dc.b 6			; walking 4-2
0002385B FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
00023860 E408 0006 F4               		dc.b $E4, 8, 0,	6, $F4
00023865 EC04 0009 FC               		dc.b $EC, 4, 0,	9, $FC
0002386A F404 000B EC               		dc.b $F4, 4, 0,	$B, $EC
0002386F F40A 000D FC               		dc.b $F4, $A, 0, $D, $FC
00023874 0C00 0016 FC               		dc.b $C, 0, 0, $16, $FC
00023879 04                         byte_21473:	dc.b 4			; walking 4-3
0002387A FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
0002387F F304 0006 ED               		dc.b $F3, 4, 0,	6, $ED
00023884 EB0A 0008 FD               		dc.b $EB, $A, 0, 8, $FD
00023889 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
0002388E 05                         byte_21488:	dc.b 5			; walking 4-4
0002388F FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
00023894 ED08 0006 F3               		dc.b $ED, 8, 0,	6, $F3
00023899 F504 0009 EB               		dc.b $F5, 4, 0,	9, $EB
0002389E F50D 000B FB               		dc.b $F5, $D, 0, $B, $FB
000238A3 0508 0013 FB               		dc.b 5,	8, 0, $13, $FB
000238A8 04                         byte_214A2:	dc.b 4			; walking 4-5
000238A9 FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
000238AE F404 0006 EC               		dc.b $F4, 4, 0,	6, $EC
000238B3 EC0A 0008 FC               		dc.b $EC, $A, 0, 8, $FC
000238B8 0404 0011 FC               		dc.b 4,	4, 0, $11, $FC
000238BD 05                         byte_214B7:	dc.b 5			; walking 4-6
000238BE FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
000238C3 EB0A 0006 FD               		dc.b $EB, $A, 0, 6, $FD
000238C8 F304 000F ED               		dc.b $F3, 4, 0,	$F, $ED
000238CD 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
000238D2 0B00 0013 FD               		dc.b $B, 0, 0, $13, $FD
000238D7 02                         byte_214D1:	dc.b 2			; running 1-1
000238D8 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
000238DD FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
000238E2 02                         byte_214DC:	dc.b 2			; running 1-2
000238E3 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
000238E8 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
000238ED 02                         byte_214E7:	dc.b 2			; running 1-3
000238EE EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
000238F3 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
000238F8 02                         byte_214F2:	dc.b 2			; running 1-4
000238F9 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
000238FE FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00023903 04                         byte_214FD:	dc.b 4			; running 2-1
00023904 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
00023909 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
0002390E FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00023913 FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
00023918 03                         byte_21512:	dc.b 3			; running 2-2
00023919 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
0002391E EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00023923 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00023928 04                         byte_21522:	dc.b 4			; running 2-3
00023929 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
0002392E EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00023933 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00023938 FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
0002393D 03                         byte_21537:	dc.b 3			; running 2-4
0002393E EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
00023943 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00023948 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
0002394D 02                         byte_21547:	dc.b 2			; running 3-1
0002394E F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00023953 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00023958 02                         byte_21552:	dc.b 2			; running 3-2
00023959 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
0002395E F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00023963 02                         byte_2155D:	dc.b 2			; running 3-3
00023964 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00023969 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
0002396E 02                         byte_21568:	dc.b 2			; running 3-4
0002396F F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00023974 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00023979 04                         byte_21573:	dc.b 4			; running 4-1
0002397A FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
0002397F F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
00023984 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00023989 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
0002398E 02                         byte_21588:	dc.b 2			; running 4-2
0002398F F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
00023994 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00023999 04                         byte_21593:	dc.b 4			; running 4-3
0002399A FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
0002399F F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
000239A4 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
000239A9 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
000239AE 02                         byte_215A8:	dc.b 2			; running 4-4
000239AF F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
000239B4 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
000239B9 01                         byte_215B3:	dc.b 1			; rolling 1
000239BA F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000239BF 01                         byte_215B9:	dc.b 1			; rolling 2
000239C0 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000239C5 01                         byte_215BF:	dc.b 1			; rolling 3
000239C6 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000239CB 01                         byte_215C5:	dc.b 1			; rolling 4
000239CC F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000239D1 01                         byte_215CB:	dc.b 1			; rolling 5
000239D2 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000239D7 02                         byte_215D1:	dc.b 2			; warped 1 (unused)
000239D8 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC
000239DD F402 000C 0C               		dc.b $F4, 2, 0,	$C, $C
000239E2 01                         byte_215DC:	dc.b 1			; warped 2 (unused)
000239E3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000239E8 02                         byte_215E2:	dc.b 2			; warped 3 (unused)
000239E9 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4
000239EE 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4
000239F3 01                         byte_215ED:	dc.b 1			; warped 4 (unused)
000239F4 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000239F9 02                         byte_215F3:	dc.b 2			; stopping 1
000239FA ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
000239FF FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0
00023A04 04                         byte_215FE:	dc.b 4			; stopping 2
00023A05 ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
00023A0A FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0
00023A0F 0D04 000E 00               		dc.b $D, 4, 0, $E, 0
00023A14 0500 0010 E8               		dc.b 5,	0, 0, $10, $E8
00023A19 04                         byte_21613:	dc.b 4			; ducking
00023A1A F404 0000 FC               		dc.b $F4, 4, 0,	0, $FC
00023A1F FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4
00023A24 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4
00023A29 0400 000D EC               		dc.b 4,	0, 0, $D, $EC
00023A2E 03                         byte_21628:	dc.b 3			; balancing 1
00023A2F EC08 0800 E8               		dc.b $EC, 8, 8,	0, $E8
00023A34 F402 0803 00               		dc.b $F4, 2, 8,	3, 0
00023A39 F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0
00023A3E 03                         byte_21638:	dc.b 3			; balancing 2
00023A3F EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8
00023A44 040D 080C E0               		dc.b 4,	$D, 8, $C, $E0
00023A49 0C00 1814 00               		dc.b $C, 0, $18, $14, 0
00023A4E 03                         byte_21648:	dc.b 3			; spinning 1 (LZ)
00023A4F F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
00023A54 FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
00023A59 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
00023A5E 02                         byte_21658:	dc.b 2			; spinning 2 (LZ)
00023A5F F40A 0000 E8               		dc.b $F4, $A, 0, 0, $E8
00023A64 F40A 0800 00               		dc.b $F4, $A, 8, 0, 0
00023A69 03                         byte_21663:	dc.b 3			; spinning 3 (LZ)
00023A6A F40D 0000 E4               		dc.b $F4, $D, 0, 0, $E4
00023A6F FC00 0008 04               		dc.b $FC, 0, 0,	8, 4
00023A74 040C 0009 EC               		dc.b 4,	$C, 0, 9, $EC
00023A79 03                         byte_21673:	dc.b 3			; spinning 4 (LZ)
00023A7A F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
00023A7F FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
00023A84 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
00023A89 03                         byte_21683:	dc.b 3			; bouncing
00023A8A E80B 0000 F0               		dc.b $E8, $B, 0, 0, $F0
00023A8F 0804 000C F8               		dc.b 8,	4, 0, $C, $F8
00023A94 1000 000E F8               		dc.b $10, 0, 0,	$E, $F8
00023A99 04                         byte_21693:	dc.b 4			; hanging 1 (LZ)
00023A9A F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
00023A9F 0005 000C 08               		dc.b 0,	5, 0, $C, 8
00023AA4 F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
00023AA9 F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
00023AAE 04                         byte_216A8:	dc.b 4			; hanging 2 (LZ)
00023AAF F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
00023AB4 0005 000C 08               		dc.b 0,	5, 0, $C, 8
00023AB9 F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
00023ABE F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
00023AC3 05                         byte_216BD:	dc.b 5			; celebration leap 1 (unused)
00023AC4 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
00023AC9 F001 0009 0C               		dc.b $F0, 1, 0,	9, $C
00023ACE 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
00023AD3 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
00023AD8 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
00023ADD 05                         byte_216D7:	dc.b 5			; celebration leap 2 (unused)
00023ADE E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
00023AE3 E801 0009 0C               		dc.b $E8, 1, 0,	9, $C
00023AE8 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
00023AED 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
00023AF2 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
00023AF7 02                         byte_216F1:	dc.b 2			; pushing 1
00023AF8 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
00023AFD 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
00023B02 03                         byte_216FC:	dc.b 3			; pushing 2
00023B03 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
00023B08 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
00023B0D 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
00023B12 02                         byte_2170C:	dc.b 2			; pushing 3
00023B13 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
00023B18 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
00023B1D 03                         byte_21717:	dc.b 3			; pushing 4
00023B1E EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
00023B23 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
00023B28 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
00023B2D 02                         byte_21727:	dc.b 2			; surfing or sliding (unused)
00023B2E EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00023B33 FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0
00023B38 03                         byte_21732:	dc.b 3			; collecting bubble (unused)
00023B39 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
00023B3E 0405 0009 F8               		dc.b 4,	5, 0, 9, $F8
00023B43 E400 000D F8               		dc.b $E4, 0, 0,	$D, $F8
00023B48 03                         byte_21742:	dc.b 3			; death	1
00023B49 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
00023B4E E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
00023B53 F80B 000A F4               		dc.b $F8, $B, 0, $A, $F4
00023B58 05                         byte_21752:	dc.b 5			; drowning
00023B59 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
00023B5E E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
00023B63 F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
00023B68 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
00023B6D 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
00023B72 05                         byte_2176C:	dc.b 5			; death	2
00023B73 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
00023B78 E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
00023B7D F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
00023B82 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
00023B87 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
00023B8C 02                         byte_21786:	dc.b 2			; shrinking 1 (unused)
00023B8D EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00023B92 F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0
00023B97 03                         byte_21791:	dc.b 3			; shrinking 2 (unused)
00023B98 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00023B9D F40E 0003 F0               		dc.b $F4, $E, 0, 3, $F0
00023BA2 0C08 000F F8               		dc.b $C, 8, 0, $F, $F8
00023BA7 01                         byte_217A1:	dc.b 1			; shrinking 3 (unused)
00023BA8 F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4
00023BAD 01                         byte_217A7:	dc.b 1			; shrinking 4 (unused)
00023BAE F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00023BB3 01                         byte_217AD:	dc.b 1			; shrinking 5 (unused)
00023BB4 F801 0000 FC               		dc.b $F8, 1, 0,	0, $FC
00023BB9 03                         byte_217B3:	dc.b 3			; injury
00023BBA F40D 0800 E4               		dc.b $F4, $D, 8, 0, $E4
00023BBF FC05 0808 04               		dc.b $FC, 5, 8,	8, 4
00023BC4 0408 080C EC               		dc.b 4,	8, 8, $C, $EC
00023BC9 03                         byte_217C3:	dc.b 3			; spinning 5 (LZ)
00023BCA F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC
00023BCF FC00 0808 F4               		dc.b $FC, 0, 8,	8, $F4
00023BD4 040C 0809 F4               		dc.b 4,	$C, 8, 9, $F4
00023BD9 03                         byte_217D3:	dc.b 3			; spinning 6 (LZ)
00023BDA F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC
00023BDF F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00023BE4 080C 000E F4               		dc.b 8,	$C, 0, $E, $F4
00023BE9 03                         byte_217E3:	dc.b 3			; collecting bubble (LZ)
00023BEA EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
00023BEF FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC
00023BF4 0301 0012 0C               		dc.b 3,	1, 0, $12, $C
00023BF9 02                         byte_217F3:	dc.b 2			; water	slide (LZ)
00023BFA F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC
00023BFF F802 0010 0C               		dc.b $F8, 2, 0,	$10, $C
00023C04                            		even
00023C04                            		even
00023C04                            
00023C04                            ; ---------------------------------------------------------------------------
00023C04                            ; Uncompressed graphics	loading	array for Sonic
00023C04                            ; ---------------------------------------------------------------------------
00023C04                            SonicDynPLC:
00023C04                            	include "_inc\Sonic dynamic pattern load cues.asm"
00023C04                            ; ---------------------------------------------------------------------------
00023C04                            ; Uncompressed graphics	loading	array for Sonic
00023C04                            ; ---------------------------------------------------------------------------
00023C04 0000                       		dc.w SonPLC_Blank-SonicDynPLC
00023C06 0000                       		dc.w SonPLC_Stand-SonicDynPLC
00023C08 0000                       		dc.w SonPLC_Wait1-SonicDynPLC
00023C0A 0000                       		dc.w SonPLC_Wait2-SonicDynPLC
00023C0C 0000                       		dc.w SonPLC_Wait3-SonicDynPLC
00023C0E 0000                       		dc.w SonPLC_LookUp-SonicDynPLC
00023C10 0000                       		dc.w SonPLC_Walk11-SonicDynPLC
00023C12 0000                       		dc.w SonPLC_Walk12-SonicDynPLC
00023C14 0000                       		dc.w SonPLC_Walk13-SonicDynPLC
00023C16 0000                       		dc.w SonPLC_Walk14-SonicDynPLC
00023C18 0000                       		dc.w SonPLC_Walk15-SonicDynPLC
00023C1A 0000                       		dc.w SonPLC_Walk16-SonicDynPLC
00023C1C 0000                       		dc.w SonPLC_Walk21-SonicDynPLC
00023C1E 0000                       		dc.w SonPLC_Walk22-SonicDynPLC
00023C20 0000                       		dc.w SonPLC_Walk23-SonicDynPLC
00023C22 0000                       		dc.w SonPLC_Walk24-SonicDynPLC
00023C24 0000                       		dc.w SonPLC_Walk25-SonicDynPLC
00023C26 0000                       		dc.w SonPLC_Walk26-SonicDynPLC
00023C28 0000                       		dc.w SonPLC_Walk31-SonicDynPLC
00023C2A 0000                       		dc.w SonPLC_Walk32-SonicDynPLC
00023C2C 0000                       		dc.w SonPLC_Walk33-SonicDynPLC
00023C2E 0000                       		dc.w SonPLC_Walk34-SonicDynPLC
00023C30 0000                       		dc.w SonPLC_Walk35-SonicDynPLC
00023C32 0000                       		dc.w SonPLC_Walk36-SonicDynPLC
00023C34 0000                       		dc.w SonPLC_Walk41-SonicDynPLC
00023C36 0000                       		dc.w SonPLC_Walk42-SonicDynPLC
00023C38 0000                       		dc.w SonPLC_Walk43-SonicDynPLC
00023C3A 0000                       		dc.w SonPLC_Walk44-SonicDynPLC
00023C3C 0000                       		dc.w SonPLC_Walk45-SonicDynPLC
00023C3E 0000                       		dc.w SonPLC_Walk46-SonicDynPLC
00023C40 0000                       		dc.w SonPLC_Run11-SonicDynPLC
00023C42 0000                       		dc.w SonPLC_Run12-SonicDynPLC
00023C44 0000                       		dc.w SonPLC_Run13-SonicDynPLC
00023C46 0000                       		dc.w SonPLC_Run14-SonicDynPLC
00023C48 0000                       		dc.w SonPLC_Run21-SonicDynPLC
00023C4A 0000                       		dc.w SonPLC_Run22-SonicDynPLC
00023C4C 0000                       		dc.w SonPLC_Run23-SonicDynPLC
00023C4E 0000                       		dc.w SonPLC_Run24-SonicDynPLC
00023C50 0000                       		dc.w SonPLC_Run31-SonicDynPLC
00023C52 0000                       		dc.w SonPLC_Run32-SonicDynPLC
00023C54 0000                       		dc.w SonPLC_Run33-SonicDynPLC
00023C56 0000                       		dc.w SonPLC_Run34-SonicDynPLC
00023C58 0000                       		dc.w SonPLC_Run41-SonicDynPLC
00023C5A 0000                       		dc.w SonPLC_Run42-SonicDynPLC
00023C5C 0000                       		dc.w SonPLC_Run43-SonicDynPLC
00023C5E 0000                       		dc.w SonPLC_Run44-SonicDynPLC
00023C60 0000                       		dc.w SonPLC_Roll1-SonicDynPLC
00023C62 0000                       		dc.w SonPLC_Roll2-SonicDynPLC
00023C64 0000                       		dc.w SonPLC_Roll3-SonicDynPLC
00023C66 0000                       		dc.w SonPLC_Roll4-SonicDynPLC
00023C68 0000                       		dc.w SonPLC_Roll5-SonicDynPLC
00023C6A 0000                       		dc.w SonPLC_Warp1-SonicDynPLC
00023C6C 0000                       		dc.w SonPLC_Warp2-SonicDynPLC
00023C6E 0000                       		dc.w SonPLC_Warp3-SonicDynPLC
00023C70 0000                       		dc.w SonPLC_Warp4-SonicDynPLC
00023C72 0000                       		dc.w SonPLC_Stop1-SonicDynPLC
00023C74 0000                       		dc.w SonPLC_Stop2-SonicDynPLC
00023C76 0000                       		dc.w SonPLC_Duck-SonicDynPLC
00023C78 0000                       		dc.w SonPLC_Balance1-SonicDynPLC
00023C7A 0000                       		dc.w SonPLC_Balance2-SonicDynPLC
00023C7C 0000                       		dc.w SonPLC_Float1-SonicDynPLC
00023C7E 0000                       		dc.w SonPLC_Float2-SonicDynPLC
00023C80 0000                       		dc.w SonPLC_Float3-SonicDynPLC
00023C82 0000                       		dc.w SonPLC_Float4-SonicDynPLC
00023C84 0000                       		dc.w SonPLC_Spring-SonicDynPLC
00023C86 0000                       		dc.w SonPLC_Hang1-SonicDynPLC
00023C88 0000                       		dc.w SonPLC_Hang2-SonicDynPLC
00023C8A 0000                       		dc.w SonPLC_Leap1-SonicDynPLC
00023C8C 0000                       		dc.w SonPLC_Leap2-SonicDynPLC
00023C8E 0000                       		dc.w SonPLC_Push1-SonicDynPLC
00023C90 0000                       		dc.w SonPLC_Push2-SonicDynPLC
00023C92 0000                       		dc.w SonPLC_Push3-SonicDynPLC
00023C94 0000                       		dc.w SonPLC_Push4-SonicDynPLC
00023C96 0000                       		dc.w SonPLC_Slide-SonicDynPLC
00023C98 0000                       		dc.w SonPLC_BblUnk-SonicDynPLC
00023C9A 0000                       		dc.w SonPLC_Death1-SonicDynPLC
00023C9C 0000                       		dc.w SonPLC_Drown-SonicDynPLC
00023C9E 0000                       		dc.w SonPLC_Burnt-SonicDynPLC
00023CA0 0000                       		dc.w SonPLC_Shrink1-SonicDynPLC
00023CA2 0000                       		dc.w SonPLC_Shrink2-SonicDynPLC
00023CA4 0000                       		dc.w SonPLC_Shrink3-SonicDynPLC
00023CA6 0000                       		dc.w SonPLC_Shrink4-SonicDynPLC
00023CA8 0000                       		dc.w SonPLC_Shrink5-SonicDynPLC
00023CAA 0000                       		dc.w SonPLC_Float1-SonicDynPLC
00023CAC 0000                       		dc.w SonPLC_Float3-SonicDynPLC
00023CAE 0000                       		dc.w SonPLC_Injury1-SonicDynPLC
00023CB0 0000                       		dc.w SonPLC_Bubble-SonicDynPLC
00023CB2 0000                       		dc.w SonPLC_Injury2-SonicDynPLC
00023CB4 00                         SonPLC_Blank:	dc.b 0
00023CB5 0420 0070 0320 0B20 0E     SonPLC_Stand:	dc.b 4,	$20, 0,	$70, 3,	$20, $B, $20, $E
00023CBE 0350 1150 1720 1D          SonPLC_Wait1:	dc.b 3,	$50, $11, $50, $17, $20, $1D
00023CC5 0350 2050 1720 1D          SonPLC_Wait2:	dc.b 3,	$50, $20, $50, $17, $20, $1D
00023CCC 0350 2050 1720 26          SonPLC_Wait3:	dc.b 3,	$50, $20, $50, $17, $20, $26
00023CD3 0380 2920 0B20 0E          SonPLC_LookUp:	dc.b 3,	$80, $29, $20, $B, $20,	$E
00023CDA 0470 3250 3A50 4010 46     SonPLC_Walk11:	dc.b 4,	$70, $32, $50, $3A, $50, $40, $10, $46
00023CE3 0270 32B0 48               SonPLC_Walk12:	dc.b 2,	$70, $32, $B0, $48
00023CE8 0250 5480 5A               SonPLC_Walk13:	dc.b 2,	$50, $54, $80, $5A
00023CED 0450 5450 6350 6910 6F     SonPLC_Walk14:	dc.b 4,	$50, $54, $50, $63, $50, $69, $10, $6F
00023CF6 0250 54B0 71               SonPLC_Walk15:	dc.b 2,	$50, $54, $B0, $71
00023CFB 0370 3230 7D50 81          SonPLC_Walk16:	dc.b 3,	$70, $32, $30, $7D, $50, $81
00023D02 0550 8750 8D20 9350 9600+  SonPLC_Walk21:	dc.b 5,	$50, $87, $50, $8D, $20, $93, $50, $96,	0, $9C
00023D0D 0650 8710 9D30 9F50 A330+  SonPLC_Walk22:	dc.b 6,	$50, $87, $10, $9D, $30, $9F, $50, $A3,	$30, $A9, 0, $AD
00023D1A 0450 AE10 B470 B620 BE     SonPLC_Walk23:	dc.b 4,	$50, $AE, $10, $B4, $70, $B6, $20, $BE
00023D23 0550 C130 C770 CB20 D310+  SonPLC_Walk24:	dc.b 5,	$50, $C1, $30, $C7, $70, $CB, $20, $D3,	$10, $D6
00023D2E 0450 C110 D870 DA20 E2     SonPLC_Walk25:	dc.b 4,	$50, $C1, $10, $D8, $70, $DA, $20, $E2
00023D37 0550 8710 9D00 9370 E520+  SonPLC_Walk26:	dc.b 5,	$50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED
00023D42 0470 F050 F810 FE51 00     SonPLC_Walk31:	dc.b 4,	$70, $F0, $50, $F8, $10, $FE, $51, 0
00023D4B 0270 F0B1 06               SonPLC_Walk32:	dc.b 2,	$70, $F0, $B1, 6
00023D50 0251 1281 18               SonPLC_Walk33:	dc.b 2,	$51, $12, $81, $18
00023D55 0451 1251 2111 2751 29     SonPLC_Walk34:	dc.b 4,	$51, $12, $51, $21, $11, $27, $51, $29
00023D5E 0251 12B1 2F               SonPLC_Walk35:	dc.b 2,	$51, $12, $B1, $2F
00023D63 0370 F001 0681 3B          SonPLC_Walk36:	dc.b 3,	$70, $F0, 1, 6,	$81, $3B
00023D6A 0651 4411 4A11 4C81 4E01+  SonPLC_Walk41:	dc.b 6,	$51, $44, $11, $4A, $11, $4C, $81, $4E,	1, $57,	1, $58
00023D77 0651 4421 5911 5C11 5E81+  SonPLC_Walk42:	dc.b 6,	$51, $44, $21, $59, $11, $5C, $11, $5E,	$81, $60, 1, $57
00023D84 0451 6911 6F81 7111 7A     SonPLC_Walk43:	dc.b 4,	$51, $69, $11, $6F, $81, $71, $11, $7A
00023D8D 0551 7C21 8211 8571 8721+  SonPLC_Walk44:	dc.b 5,	$51, $7C, $21, $82, $11, $85, $71, $87,	$21, $8F
00023D98 0451 7C11 9281 9411 9D     SonPLC_Walk45:	dc.b 4,	$51, $7C, $11, $92, $81, $94, $11, $9D
00023DA1 0551 4481 9F11 5E11 A801+  SonPLC_Walk46:	dc.b 5,	$51, $44, $81, $9F, $11, $5E, $11, $A8,	1, $57
00023DAC 0251 AAB1 B0               SonPLC_Run11:	dc.b 2,	$51, $AA, $B1, $B0
00023DB1 0250 54B1 BC               SonPLC_Run12:	dc.b 2,	$50, $54, $B1, $BC
00023DB6 0251 AAB1 C8               SonPLC_Run13:	dc.b 2,	$51, $AA, $B1, $C8
00023DBB 0250 54B1 D4               SonPLC_Run14:	dc.b 2,	$50, $54, $B1, $D4
00023DC0 0451 E011 E6B1 E801 F4     SonPLC_Run21:	dc.b 4,	$51, $E0, $11, $E6, $B1, $E8, 1, $F4
00023DC9 0351 F511 FBB1 FD          SonPLC_Run22:	dc.b 3,	$51, $F5, $11, $FB, $B1, $FD
00023DD0 0451 E012 09B2 0B01 F4     SonPLC_Run23:	dc.b 4,	$51, $E0, $12, 9, $B2, $B, 1, $F4
00023DD9 0351 F511 FBB2 17          SonPLC_Run24:	dc.b 3,	$51, $F5, $11, $FB, $B2, $17
00023DE0 0252 23B2 29               SonPLC_Run31:	dc.b 2,	$52, $23, $B2, $29
00023DE5 0251 12B2 35               SonPLC_Run32:	dc.b 2,	$51, $12, $B2, $35
00023DEA 0252 23B2 41               SonPLC_Run33:	dc.b 2,	$52, $23, $B2, $41
00023DEF 0251 12B2 4D               SonPLC_Run34:	dc.b 2,	$51, $12, $B2, $4D
00023DF4 0452 5912 5FB2 6102 6D     SonPLC_Run41:	dc.b 4,	$52, $59, $12, $5F, $B2, $61, 2, $6D
00023DFD 0272 6EB2 76               SonPLC_Run42:	dc.b 2,	$72, $6E, $B2, $76
00023E02 0452 5912 82B2 8402 6D     SonPLC_Run43:	dc.b 4,	$52, $59, $12, $82, $B2, $84, 2, $6D
00023E0B 0272 6EB2 90               SonPLC_Run44:	dc.b 2,	$72, $6E, $B2, $90
00023E10 01F2 9C                    SonPLC_Roll1:	dc.b 1,	$F2, $9C
00023E13 01F2 AC                    SonPLC_Roll2:	dc.b 1,	$F2, $AC
00023E16 01F2 BC                    SonPLC_Roll3:	dc.b 1,	$F2, $BC
00023E19 01F2 CC                    SonPLC_Roll4:	dc.b 1,	$F2, $CC
00023E1C 01F2 DC                    SonPLC_Roll5:	dc.b 1,	$F2, $DC
00023E1F 02B2 EC22 F8               SonPLC_Warp1:	dc.b 2,	$B2, $EC, $22, $F8
00023E24 01F2 FB                    SonPLC_Warp2:	dc.b 1,	$F2, $FB
00023E27 02B3 0B23 17               SonPLC_Warp3:	dc.b 2,	$B3, $B, $23, $17
00023E2C 01F3 1A                    SonPLC_Warp4:	dc.b 1,	$F3, $1A
00023E2F 0253 2AB3 30               SonPLC_Stop1:	dc.b 2,	$53, $2A, $B3, $30
00023E34 0453 3C73 4213 4A03 4C     SonPLC_Stop2:	dc.b 4,	$53, $3C, $73, $42, $13, $4A, 3, $4C
00023E3D 0413 4D73 4F23 5703 5A     SonPLC_Duck:	dc.b 4,	$13, $4D, $73, $4F, $23, $57, 3, $5A
00023E46 0323 5B23 5EF3 61          SonPLC_Balance1:dc.b 3,	$23, $5B, $23, $5E, $F3, $61
00023E4D 03B3 7173 7D00 71          SonPLC_Balance2:dc.b 3,	$B3, $71, $73, $7D, 0, $71
00023E54 0373 8533 8D23 91          SonPLC_Float1:	dc.b 3,	$73, $85, $33, $8D, $23, $91
00023E5B 0183 94                    SonPLC_Float2:	dc.b 1,	$83, $94
00023E5E 0373 9D03 A533 A6          SonPLC_Float3:	dc.b 3,	$73, $9D, 3, $A5, $33, $A6
00023E65 0373 AA33 B223 B6          SonPLC_Float4:	dc.b 3,	$73, $AA, $33, $B2, $23, $B6
00023E6C 03B3 B913 C503 C7          SonPLC_Spring:	dc.b 3,	$B3, $B9, $13, $C5, 3, $C7
00023E73 04B3 C833 D403 D803 D9     SonPLC_Hang1:	dc.b 4,	$B3, $C8, $33, $D4, 3, $D8, 3, $D9
00023E7C 04B3 DA33 E603 EA03 EB     SonPLC_Hang2:	dc.b 4,	$B3, $DA, $33, $E6, 3, $EA, 3, $EB
00023E85 0583 EC13 F553 F713 FD03+  SonPLC_Leap1:	dc.b 5,	$83, $EC, $13, $F5, $53, $F7, $13, $FD,	3, $FF
00023E90 0584 0014 0953 F713 FD03+  SonPLC_Leap2:	dc.b 5,	$84, 0,	$14, 9,	$53, $F7, $13, $FD, 3, $FF
00023E9B 0284 0B74 14               SonPLC_Push1:	dc.b 2,	$84, $B, $74, $14
00023EA0 0384 1C24 2514 28          SonPLC_Push2:	dc.b 3,	$84, $1C, $24, $25, $14, $28
00023EA7 0284 2A74 33               SonPLC_Push3:	dc.b 2,	$84, $2A, $74, $33
00023EAC 0384 1C24 3B14 3E          SonPLC_Push4:	dc.b 3,	$84, $1C, $24, $3B, $14, $3E
00023EB3 0254 40B4 46               SonPLC_Slide:	dc.b 2,	$54, $40, $B4, $46
00023EB8 0384 5234 5B04 5F          SonPLC_BblUnk:	dc.b 3,	$84, $52, $34, $5B, 4, $5F
00023EBF 0374 6014 68B4 6A          SonPLC_Death1:	dc.b 3,	$74, $60, $14, $68, $B4, $6A
00023EC6 0574 7614 7E54 8034 8604+  SonPLC_Drown:	dc.b 5,	$74, $76, $14, $7E, $54, $80, $34, $86,	4, $8A
00023ED1 0574 8B14 7E54 9334 8604+  SonPLC_Burnt:	dc.b 5,	$74, $8B, $14, $7E, $54, $93, $34, $86,	4, $8A
00023EDC 0224 99F4 9C               SonPLC_Shrink1:	dc.b 2,	$24, $99, $F4, $9C
00023EE1 0324 ACB4 AF24 BB          SonPLC_Shrink2:	dc.b 3,	$24, $AC, $B4, $AF, $24, $BB
00023EE8 01B4 BE                    SonPLC_Shrink3:	dc.b 1,	$B4, $BE
00023EEB 0154 CA                    SonPLC_Shrink4:	dc.b 1,	$54, $CA
00023EEE 0114 D0                    SonPLC_Shrink5:	dc.b 1,	$14, $D0
00023EF1 03B4 D214 DE34 E0          SonPLC_Injury1:	dc.b 3,	$B4, $D2, $14, $DE, $34, $E0
00023EF8 0354 E4B4 EA10 6D          SonPLC_Bubble:	dc.b 3,	$54, $E4, $B4, $EA, $10, $6D
00023EFF 02F4 F625 06               SonPLC_Injury2:	dc.b 2,	$F4, $F6, $25, 6
00023F04                            		even
00023F04                            		even
00023F04                            
00023F04                            ; ---------------------------------------------------------------------------
00023F04                            ; Uncompressed graphics	- Sonic
00023F04                            ; ---------------------------------------------------------------------------
00023F04                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002E024                            		even
0002E024                            
0002E024                            ; ---------------------------------------------------------------------------
0002E024                            ; Uncompressed graphics	- Sonime
0002E024                            ; ---------------------------------------------------------------------------
0002E024                            Art_Sonime_Torso:	incbin	artunc\sonime_torso.bin
0002E1A4                            		even
0002E1A4                            Art_Sonime_Head:	incbin	artunc\sonime_head.bin
0002E424                            		even
0002E424                            Art_Sonime_Hair:	incbin	artunc\sonime_hair.bin
0002E524                            		even
0002E524                            Art_Sonime_Faces:	incbin	artunc\sonime_faces.bin
0002EE24                            		even
0002EE24                            Art_Sonime_LeftEar:	incbin	artunc\sonime_leftear.bin
0002EE64                            		even
0002EE64                            Art_Sonime_RightEar:	incbin	artunc\sonime_rightear.bin
0002EEE4                            		even
0002EEE4                            
0002EEE4                            ; ---------------------------------------------------------------------------
0002EEE4                            ; Compressed graphics - various
0002EEE4                            ; ---------------------------------------------------------------------------
0002EEE4                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002EFE8                            		even
0002EFE8                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002F022                            		even
0002F022                            UnC_Shield:	incbin	artunc\shield.bin	; shield
0002F382                            		even
0002F382                            ArtUnc_InvStars:	incbin	artunc\invstars.bin	; invincibility stars
0002F782                            		even
0002F782                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002F88C                            		even
0002F88C                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002F8DE                            		even
0002F8DE                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002FB26                            		even
0002FB26                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002FCAC                            		even
0002FCAC                            ; ---------------------------------------------------------------------------
0002FCAC                            ; Sprite mappings - walls of the special stage
0002FCAC                            ; ---------------------------------------------------------------------------
0002FCAC                            Map_SSWalls:
0002FCAC                            	include "_maps\SSwalls.asm"
0002FCAC                            ; ---------------------------------------------------------------------------
0002FCAC                            ; Sprite mappings - walls of the special stage
0002FCAC                            ; ---------------------------------------------------------------------------
0002FCAC 0000                       Map_SSWalls2:	dc.w byte_2C584-Map_SSWalls2
0002FCAE 01                         byte_2C584:	dc.b 1
0002FCAF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002FCB4                            		even
0002FCB4                            		even
0002FCB4                            ; ---------------------------------------------------------------------------
0002FCB4                            ; Compressed graphics - special stage
0002FCB4                            ; ---------------------------------------------------------------------------
0002FCB4                            Art_SSWalls:	incbin	artunc\sswalls.bin	; special stage walls
00031CB4                            		even
00031CB4                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00031DE8                            		even
00031DE8                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00032A78                            		even
00032A78                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00032D78                            		even
00032D78                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0003326C                            		even
0003326C                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0003335A                            		even
0003335A                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0003342A                            		even
0003342A                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00033520                            		even
00033520                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0003357E                            		even
0003357E                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00033610                            		even
00033610                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
000336D2                            		even
000336D2                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
000337A0                            		even
000337A0                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0003386C                            		even
0003386C                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00033934                            		even
00033934                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
000339FE                            		even
000339FE                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00033ACE                            		even
00033ACE                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00033CC2                            		even
00033CC2                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00033E2A                            		even
00033E2A                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00033EDA                            		even
00033EDA                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00033FB4                            		even
00033FB4                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00034038                            		even
00034038                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
000341B6                            		even
000341B6                            ; ---------------------------------------------------------------------------
000341B6                            ; Compressed graphics - GHZ stuff
000341B6                            ; ---------------------------------------------------------------------------
000341B6                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00034200                            		even
00034200                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
0003431A                            		even
0003431A                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00034406                            		even
00034406                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
0003444E                            		even
0003444E                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
000345EC                            		even
000345EC                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00034668                            		even
00034668                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
0003487C                            		even
0003487C                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
000349A8                            		even
000349A8                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00034AD6                            		even
00034AD6                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00034B74                            		even
00034B74                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00034BD4                            		even
00034BD4                            ; ---------------------------------------------------------------------------
00034BD4                            ; Compressed graphics - LZ stuff
00034BD4                            ; ---------------------------------------------------------------------------
00034BD4                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00034CF8                            		even
00034CF8                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
000354EC                            		even
000354EC                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
0003566C                            		even
0003566C                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
000357D6                            		even
000357D6                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00035DC0 00                         		even
00035DC0                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00035E76                            		even
00035E76                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00035F18                            		even
00035F18                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00036074                            		even
00036074                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000360D8                            		even
000360D8                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0003622A                            		even
0003622A                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0003670C                            		even
0003670C                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0003687C                            		even
0003687C                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00036B34                            		even
00036B34                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00036C6C                            		even
00036C6C                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00036D96                            		even
00036D96                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00036EA6                            		even
00036EA6                            ; ---------------------------------------------------------------------------
00036EA6                            ; Compressed graphics - MZ stuff
00036EA6                            ; ---------------------------------------------------------------------------
00036EA6                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00037134                            		even
00037134                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
000371F2                            		even
000371F2                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
000372AA                            		even
000372AA                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
000372FE                            		even
000372FE                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
000375DC                            		even
000375DC                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00037EF2                            		even
00037EF2                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00038056                            		even
00038056                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000380DE                            		even
000380DE                            ; ---------------------------------------------------------------------------
000380DE                            ; Compressed graphics - SLZ stuff
000380DE                            ; ---------------------------------------------------------------------------
000380DE                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0003831A                            		even
0003831A                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00038460                            		even
00038460                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
000386A4                            		even
000386A4                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00038706                            		even
00038706                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
000387E8                            		even
000387E8                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
000389CA                            		even
000389CA                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00038AD6                            		even
00038AD6                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00038B7A                            		even
00038B7A                            ; ---------------------------------------------------------------------------
00038B7A                            ; Compressed graphics - SYZ stuff
00038B7A                            ; ---------------------------------------------------------------------------
00038B7A                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00038CE4                            		even
00038CE4                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00038D46                            		even
00038D46                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00038E28                            		even
00038E28                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000390B6                            		even
000390B6                            ; ---------------------------------------------------------------------------
000390B6                            ; Compressed graphics - SBZ stuff
000390B6                            ; ---------------------------------------------------------------------------
000390B6                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0003910A                            		even
0003910A                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
000393A6                            		even
000393A6                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
000395AA                            		even
000395AA                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00039748                            		even
00039748                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00039A78                            		even
00039A78                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00039C56                            		even
00039C56                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00039CAE                            		even
00039CAE                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00039E2E                            		even
00039E2E                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
00039F2C                            		even
00039F2C                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003A0B8                            		even
0003A0B8                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003A108                            		even
0003A108                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003A160                            		even
0003A160                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003A25C                            		even
0003A25C                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003A372                            		even
0003A372                            ; ---------------------------------------------------------------------------
0003A372                            ; Compressed graphics - enemies
0003A372                            ; ---------------------------------------------------------------------------
0003A372                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003A732                            		even
0003A732                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003AC20                            		even
0003AC20                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003AFC6                            		even
0003AFC6                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003B1AE                            		even
0003B1AE                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B898                            		even
0003B898                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003BB00                            		even
0003BB00                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003BD7C 00                         		even
0003BD7C                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003C2A0                            		even
0003C2A0                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003C52A                            		even
0003C52A                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003CB48                            		even
0003CB48                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003CF30                            		even
0003CF30                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003D22C                            		even
0003D22C                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003D474                            		even
0003D474                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D70C                            		even
0003D70C                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D8EA                            		even
0003D8EA                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003DA78                            		even
0003DA78                            ; ---------------------------------------------------------------------------
0003DA78                            ; Compressed graphics - various
0003DA78                            ; ---------------------------------------------------------------------------
0003DA78                            Nem_TitleCard:      incbin  artnem\ttlcards.bin ; title cards
0003EA78                            Nem_TitleCard_End:  even
0003EA78                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003EB6E                            		even
0003EB6E                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003EC74                            		even
0003EC74                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003ED68                            		even
0003ED68                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003F11A 00                         		even
0003F11A                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003F780                            		even
0003F780                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003F830                            		even
0003F830                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003F9C2                            		even
0003F9C2                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003FAC4                            		even
0003FAC4                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003FBA0                            		even
0003FBA0                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0004001C                            		even
0004001C                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
000400DC                            		even
000400DC                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
00040250                            		even
00040250                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
00040552                            		even
00040552                            ; ---------------------------------------------------------------------------
00040552                            ; Compressed graphics - continue screen
00040552                            ; ---------------------------------------------------------------------------
00040552                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
00040802                            		even
00040802                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
00040A3C                            		even
00040A3C                            ; ---------------------------------------------------------------------------
00040A3C                            ; Compressed graphics - animals
00040A3C                            ; ---------------------------------------------------------------------------
00040A3C                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00040B94                            		even
00040B94                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
00040CF0                            		even
00040CF0                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00040E6C                            		even
00040E6C                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00040F88                            		even
00040F88                            Nem_Pig:	incbin	artnem\pig.bin		; pig
000410BE                            		even
000410BE                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
000411F8                            		even
000411F8                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
00041354                            		even
00041354                            ; ---------------------------------------------------------------------------
00041354                            ; Compressed graphics - primary patterns and block mappings
00041354                            ; ---------------------------------------------------------------------------
00041354                            Blk16_GHZ:	incbin	map16\ghz.bin
00041C68                            		even
00041C68                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
000432C8                            		even
000432C8                            Nem_GHZ_2nd:	incbin	artkos\8x8ghz.kos	; GHZ secondary patterns
0004584E                            		even
0004584E                            Blk256_GHZ:	incbin	map256_u\ghz.bin
0004FC4E                            		even
0004FC4E                            Blk16_LZ:	incbin	map16\lz.bin
00050024                            		even
00050024                            Nem_LZ:		incbin	artkos\8x8lz.kos	; LZ primary patterns
00051B94                            		even
00051B94                            Blk256_LZ:	incbin	map256_u\lz.bin
0005B994                            		even
0005B994                            Blk16_MZ:	incbin	map16\mz.bin
0005C19E                            		even
0005C19E                            Nem_MZ:		incbin	artkos\8x8mz.kos	; MZ primary patterns
0005E158                            		even
0005E158                            Blk256_MZ:	incbin	map256_u\mz.bin
00068558                            		even
00068558                            Blk16_SLZ:	incbin	map16\slz.bin
00068D3C                            		even
00068D3C                            Nem_SLZ:	incbin	artkos\8x8slz.kos	; SLZ primary patterns
0006B436                            		even
0006B436                            Blk256_SLZ:	incbin	map256_u\slz.bin
00075836                            		even
00075836                            Blk16_SYZ:	incbin	map16\syz.bin
000760E4                            		even
000760E4                            Nem_SYZ:	incbin	artkos\8x8syz.kos	; SYZ primary patterns
00078758                            		even
00078758                            Blk256_SYZ:	incbin	map256_u\syz.bin
00082B58                            		even
00082B58                            Blk16_SBZ:	incbin	map16\sbz.bin
00083918                            		even
00083918                            Nem_SBZ:	incbin	artkos\8x8sbz.kos	; SBZ primary patterns
00085B46                            		even
00085B46                            Blk256_SBZ:	incbin	map256_u\sbz.bin
0008FF46                            		even
0008FF46                            ; ---------------------------------------------------------------------------
0008FF46                            ; Compressed graphics - bosses and ending sequence
0008FF46                            ; ---------------------------------------------------------------------------
0008FF46                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
000907AA                            		even
000907AA                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00090A94                            		even
00090A94                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
00091318                            		even
00091318                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00091B44                            		even
00091B44                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
000922AC                            		even
000922AC                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0009282C                            		even
0009282C                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0009294C                            		even
0009294C                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00092B4A                            		even
00092B4A                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00093D28                            		even
00093D28                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0009466C                            		even
0009466C                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00094A42                            		even
00094A42                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00094FD2                            		even
00094FD2                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0009525A                            		even
0009525A                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00095858                            		even
00095858                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00095AE0                            		even
00095AE0                            		incbin	misc\padding2.bin
00095BE4                            		even
00095BE4                            ; ---------------------------------------------------------------------------
00095BE4                            ; Collision data
00095BE4                            ; ---------------------------------------------------------------------------
00095BE4                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00095CE4                            		even
00095CE4                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00096CE4                            		even
00096CE4                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00097CE4                            		even
00097CE4                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00097E9C 00                         		even
00097E9C                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00097F7C 00                         		even
00097F7C                            Col_MZ:		incbin	collide\mz.bin		; MZ index
0009810C                            		even
0009810C                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00098300                            		even
00098300                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
000984F4                            		even
000984F4                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0009874C                            		even
0009874C                            ; ---------------------------------------------------------------------------
0009874C                            ; Special layouts
0009874C                            ; ---------------------------------------------------------------------------
0009874C                            SS_1:		incbin	sslayout\1.bin
000989C6                            		even
000989C6                            SS_2:		incbin	sslayout\2.bin
00098DD8                            		even
00098DD8                            SS_3:		incbin	sslayout\3.bin
00099134                            		even
00099134                            SS_4:		incbin	sslayout\4.bin
0009960E                            		even
0009960E                            SS_5:		incbin	sslayout\5.bin
00099AE0                            		even
00099AE0                            SS_6:		incbin	sslayout\6.bin
00099DF0                            		even
00099DF0                            ; ---------------------------------------------------------------------------
00099DF0                            ; Animated uncompressed graphics
00099DF0                            ; ---------------------------------------------------------------------------
00099DF0                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00099FF0                            		even
00099FF0                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0009A3F0                            		even
0009A3F0                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0009A870                            		even
0009A870                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0009AB70                            		even
0009AB70                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0009B170                            		even
0009B170                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0009B470                            		even
0009B470                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0009BEF0                            		even
0009BEF0                            
0009BEF0                            ; ---------------------------------------------------------------------------
0009BEF0                            ; Level	layout index
0009BEF0                            ; ---------------------------------------------------------------------------
0009BEF0 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0009BEF6 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0009BEFC 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0009BF02 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0009BF08 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0009BF0E 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0009BF14 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0009BF1A 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0009BF20 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0009BF26 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0009BF2C 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0009BF32 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0009BF38 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0009BF3E 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0009BF44 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0009BF4A 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0009BF50 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0009BF56 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0009BF5C 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0009BF62 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0009BF68 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0009BF6E 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0009BF74 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0009BF7A 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0009BF80 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0009BF86 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0009BF8C 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0009BF92 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0009BF98                            
0009BF98                            Level_GHZ1:	incbin	levels\ghz1.bin
0009C08A                            		even
0009C08A 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0009C08E                            Level_GHZ2:	incbin	levels\ghz2.bin
0009C156                            		even
0009C156 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0009C15A                            Level_GHZ3:	incbin	levels\ghz3.bin
0009C27C                            		even
0009C27C                            Level_GHZbg:	incbin	levels\ghzbg.bin
0009C29E                            		even
0009C29E 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0009C2A2 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0009C2A6                            
0009C2A6                            Level_LZ1:	incbin	levels\lz1.bin
0009C3A8                            		even
0009C3A8                            Level_LZbg:	incbin	levels\lzbg.bin
0009C4AA                            		even
0009C4AA 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0009C4AE                            Level_LZ2:	incbin	levels\lz2.bin
0009C548                            		even
0009C548 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0009C54C                            Level_LZ3:	incbin	levels\lz3.bin
0009C666                            		even
0009C666 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0009C66A                            Level_SBZ3:	incbin	levels\sbz3.bin
0009C724                            		even
0009C724 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0009C728                            
0009C728                            Level_MZ1:	incbin	levels\mz1.bin
0009C7C6                            		even
0009C7C6                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0009C840                            		even
0009C840                            Level_MZ2:	incbin	levels\mz2.bin
0009C8E4                            		even
0009C8E4                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0009C976                            		even
0009C976 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0009C97A                            Level_MZ3:	incbin	levels\mz3.bin
0009CA5C                            		even
0009CA5C                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0009CB00                            		even
0009CB00 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0009CB04 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0009CB08                            
0009CB08                            Level_SLZ1:	incbin	levels\slz1.bin
0009CC1A                            		even
0009CC1A                            Level_SLZbg:	incbin	levels\slzbg.bin
0009CC94                            		even
0009CC94                            Level_SLZ2:	incbin	levels\slz2.bin
0009CD84                            		even
0009CD84                            Level_SLZ3:	incbin	levels\slz3.bin
0009CE9E                            		even
0009CE9E 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0009CEA2                            
0009CEA2                            Level_SYZ1:	incbin	levels\syz1.bin
0009CF5E                            		even
0009CF5E                            Level_SYZbg:	incbin	levels\syzbg.bin
0009CF98                            		even
0009CF98 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0009CF9C                            Level_SYZ2:	incbin	levels\syz2.bin
0009D0A0                            		even
0009D0A0 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0009D0A4                            Level_SYZ3:	incbin	levels\syz3.bin
0009D1FE                            		even
0009D1FE 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0009D202 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0009D206                            
0009D206                            Level_SBZ1:	incbin	levels\sbz1.bin
0009D328                            		even
0009D328                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0009D366                            		even
0009D366                            Level_SBZ2:	incbin	levels\sbz2.bin
0009D4A8                            		even
0009D4A8                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0009D612                            		even
0009D612 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0009D616 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0009D61A                            Level_End:	incbin	levels\ending.bin
0009D64A 00                         		even
0009D64A 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0009D64E                            
0009D64E                            ; ---------------------------------------------------------------------------
0009D64E                            ; Animated uncompressed giant ring graphics
0009D64E                            ; ---------------------------------------------------------------------------
0009D64E                            Art_BigRing:	incbin	artunc\bigring.bin
0009E28E                            		even
0009E28E                            
0009E28E                            		incbin	misc\padding3.bin
0009E32A                            		even
0009E32A                            
0009E32A                            ; ---------------------------------------------------------------------------
0009E32A                            ; Sprite locations index
0009E32A                            ; ---------------------------------------------------------------------------
0009E32A 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E32E 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E332 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E336 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E33A 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E33E 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E342 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E346 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E34A 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E34E 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E352 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E356 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E35A 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E35E 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E362 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E366 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E36A 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E36E 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E372 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E376 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E37A 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E37E 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E382 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E386 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E38A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E38E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E392 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E396 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E39A 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0009E39E 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0009E3A2 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0009E3A6 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0009E3AA 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0009E3AE 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0009E3B2 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0009E3B6 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0009E3BA FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0009E3C0                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0009E6DE                            		even
0009E6DE                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0009EAE0                            		even
0009EAE0                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0009EFDE                            		even
0009EFDE                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0009F3C2                            		even
0009F3C2                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0009F662                            		even
0009F662                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0009FBC6                            		even
0009FBC6                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0009FF86                            		even
0009FF86                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0009FFB8                            		even
0009FFB8                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0009FFEA                            		even
0009FFEA                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
000A001C                            		even
000A001C                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
000A004E                            		even
000A004E                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000A0098                            		even
000A0098                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
000A00D6                            		even
000A00D6                            ObjPos_MZ1:	incbin	objpos\mz1.bin
000A0370                            		even
000A0370                            ObjPos_MZ2:	incbin	objpos\mz2.bin
000A0790                            		even
000A0790                            ObjPos_MZ3:	incbin	objpos\mz3.bin
000A0C4C                            		even
000A0C4C                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
000A1048                            		even
000A1048                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
000A132A                            		even
000A132A                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
000A1786                            		even
000A1786                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000A1B16                            		even
000A1B16                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
000A1EEE                            		even
000A1EEE                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
000A23E0                            		even
000A23E0                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
000A2A10                            		even
000A2A10                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
000A2F8C                            		even
000A2F8C                            ObjPos_FZ:	incbin	objpos\fz.bin
000A2F9E                            		even
000A2F9E                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
000A2FD0                            		even
000A2FD0                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
000A3002                            		even
000A3002                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
000A3034                            		even
000A3034                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
000A3066                            		even
000A3066                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
000A3098                            		even
000A3098                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
000A30D0                            		even
000A30D0                            ObjPos_End:	incbin	objpos\ending.bin
000A322C                            		even
000A322C FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000A3232                            ; ---------------------------------------------------------------------------
000A3232                            ; Sprite locations index
000A3232                            ; ---------------------------------------------------------------------------
000A3232 0000 0000                  RingPos_Index:	dc.w Rings_GHZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3236 0000 0000                  		dc.w Rings_GHZ2-RingPos_Index, Rings_Null-RingPos_Index
000A323A 0000 0000                  		dc.w Rings_GHZ3-RingPos_Index, Rings_Null-RingPos_Index
000A323E 0000 0000                  		dc.w Rings_GHZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3242 0000 0000                  		dc.w Rings_LZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3246 0000 0000                  		dc.w Rings_LZ2-RingPos_Index, Rings_Null-RingPos_Index
000A324A 0000 0000                  		dc.w Rings_LZ3-RingPos_Index, Rings_Null-RingPos_Index
000A324E 0000 0000                  		dc.w Rings_SBZ3-RingPos_Index, Rings_Null-RingPos_Index
000A3252 0000 0000                  		dc.w Rings_MZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3256 0000 0000                  		dc.w Rings_MZ2-RingPos_Index, Rings_Null-RingPos_Index
000A325A 0000 0000                  		dc.w Rings_MZ3-RingPos_Index, Rings_Null-RingPos_Index
000A325E 0000 0000                  		dc.w Rings_MZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3262 0000 0000                  		dc.w Rings_SLZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3266 0000 0000                  		dc.w Rings_SLZ2-RingPos_Index, Rings_Null-RingPos_Index
000A326A 0000 0000                  		dc.w Rings_SLZ3-RingPos_Index, Rings_Null-RingPos_Index
000A326E 0000 0000                  		dc.w Rings_SLZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3272 0000 0000                  		dc.w Rings_SYZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3276 0000 0000                  		dc.w Rings_SYZ2-RingPos_Index, Rings_Null-RingPos_Index
000A327A 0000 0000                  		dc.w Rings_SYZ3-RingPos_Index, Rings_Null-RingPos_Index
000A327E 0000 0000                  		dc.w Rings_SYZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3282 0000 0000                  		dc.w Rings_SBZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3286 0000 0000                  		dc.w Rings_SBZ2-RingPos_Index, Rings_Null-RingPos_Index
000A328A 0000 0000                  		dc.w Rings_FZ-RingPos_Index, Rings_Null-RingPos_Index
000A328E 0000 0000                  		dc.w Rings_SBZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3292 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A3296 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A329A 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A329E 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A32A2                            Rings_GHZ1:	incbin	rings\ghz1_INDIVIDUAL.bin
000A3514                            		even
000A3514                            Rings_GHZ2:	incbin	rings\ghz2_INDIVIDUAL.bin
000A3706                            		even
000A3706                            Rings_GHZ3:	incbin	rings\ghz3_INDIVIDUAL.bin
000A38F8                            		even
000A38F8                            Rings_LZ1:	incbin	rings\lz1_INDIVIDUAL.bin
000A3A12                            		even
000A3A12                            Rings_LZ2:	incbin	rings\lz2_INDIVIDUAL.bin
000A3AFC                            		even
000A3AFC                            Rings_LZ3:	incbin	rings\lz3_INDIVIDUAL.bin
000A3B72                            		even
000A3B72                            Rings_SBZ3:	incbin	rings\sbz3_INDIVIDUAL.bin
000A3D28                            		even
000A3D28                            Rings_MZ1:	incbin	rings\mz1_INDIVIDUAL.bin
000A3E26                            		even
000A3E26                            Rings_MZ2:	incbin	rings\mz2_INDIVIDUAL.bin
000A3F08                            		even
000A3F08                            Rings_MZ3:	incbin	rings\mz3_INDIVIDUAL.bin
000A402E                            		even
000A402E                            Rings_SLZ1:	incbin	rings\slz1_INDIVIDUAL.bin
000A4270                            		even
000A4270                            Rings_SLZ2:	incbin	rings\slz2_INDIVIDUAL.bin
000A4542                            		even
000A4542                            Rings_SLZ3:	incbin	rings\slz3_INDIVIDUAL.bin
000A4814                            		even
000A4814                            Rings_SYZ1:	incbin	rings\syz1_INDIVIDUAL.bin
000A4A8E                            		even
000A4A8E                            Rings_SYZ2:	incbin	rings\syz2_INDIVIDUAL.bin
000A4E0C                            		even
000A4E0C                            Rings_SYZ3:	incbin	rings\syz3_INDIVIDUAL.bin
000A509E                            		even
000A509E                            Rings_SBZ1:	incbin	rings\sbz1_INDIVIDUAL.bin
000A53B8                            		even
000A53B8                            Rings_SBZ2:	incbin	rings\sbz2_INDIVIDUAL.bin
000A5622                            		even
000A5622                            Rings_FZ:	incbin	rings\fz_INDIVIDUAL.bin
000A5628                            		even
000A5628                            Rings_End:	incbin	rings\ending_INDIVIDUAL.bin
000A562E                            		even
000A562E FFFF 0000                  Rings_Null:	dc.b $FF, $FF, 0, 0
000A5632                            ; ---------------------------------------------------------------------------
000A5632                            ; ---------------------------------------------------------------------------
000A5632                            		incbin	misc\padding4.bin
000A5C5C                            		even
000A5C5C 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
000A5C60 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
000A5C64 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
000A5C68 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
000A5C6C 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
000A5C70 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
000A5C74                            ; ---------------------------------------------------------------------------
000A5C74                            ; PSG instruments used in music
000A5C74                            ; ---------------------------------------------------------------------------
000A5C74 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
000A5C80 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
000A5C8C 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000A5C98                            PSG1:		incbin	sound\psg1.bin
000A5CAF                            PSG2:		incbin	sound\psg2.bin
000A5CB6                            PSG3:		incbin	sound\psg3.bin
000A5CC7                            PSG4:		incbin	sound\psg4.bin
000A5CD2                            PSG6:		incbin	sound\psg6.bin
000A5CE1                            PSG5:		incbin	sound\psg5.bin
000A5D0B                            PSG7:		incbin	sound\psg7.bin
000A5D27                            PSG8:		incbin	sound\psg8.bin
000A5D4F                            PSG9:		incbin	sound\psg9.bin
000A5D60                            
000A5D60 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
000A5D68                            ; ---------------------------------------------------------------------------
000A5D68                            ; Music	Pointers
000A5D68                            ; ---------------------------------------------------------------------------
000A5D68 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
000A5D70 0000 0000 0000 0000        		dc.l Music83, Music84
000A5D78 0000 0000 0000 0000        		dc.l Music85, Music86
000A5D80 0000 0000 0000 0000        		dc.l Music87, Music88
000A5D88 0000 0000 0000 0000        		dc.l Music89, Music8A
000A5D90 0000 0000 0000 0000        		dc.l Music8B, Music8C
000A5D98 0000 0000 0000 0000        		dc.l Music8D, Music8E
000A5DA0 0000 0000 0000 0000        		dc.l Music8F, Music90
000A5DA8 0000 0000 0000 0000        		dc.l Music91, Music92
000A5DB0 0000 0000                  		dc.l Music93
000A5DB4                            ; ---------------------------------------------------------------------------
000A5DB4                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
000A5DB4                            ; ---------------------------------------------------------------------------
000A5DB4 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
000A5DC4 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
000A5DD4 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
000A5DE4 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
000A5DF4 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
000A5E04 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
000A5E14 9090 9090                  		dc.b $90, $90, $90, $90
000A5E18                            
000A5E18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A5E18                            
000A5E18                            sub_71B4C:	
000A5E18 4DF9 00FF F000             		lea	($FFF000).l,a6
000A5E1E                            
000A5E1E 41F9 00A0 0C68             		lea	($A00000+YM_Buffer).l,a0		; CHG: load buffer ID address
000A5E24 33FC 0100 00A1 1100 0839+  		StopZ80						; CHG: request Z80 stop on
000A5E36 1010                       		move.b	(a0),d0					; CHG: load buffer ID
000A5E38 33FC 0000 00A1 1100        		StartZ80					; CHG: request Z80 stop off
000A5E40 B02E 0010                  		cmp.b	$10(a6),d0				; CHG: has the 68k recently written to this buffer?
000A5E44 6600                       		bne.s	SD_ValidList				; CHG: if not, branch
000A5E46 4E75                       		rts						; CHG: return (cannot write to YM cue until Z80 is finished with it)
000A5E48                            
000A5E48                            SD_ValidList:
000A5E48 2D7C 00A0 1000 0010        		move.l	#$A00000+YM_Buffer1,$10(a6)		; set the cue address to buffer 1
000A5E50 4A00                       		tst.b	d0					; is the Z80 accessing buffer 1?
000A5E52 6600                       		bne.s	SD_WriteBuffer1				; if not, branch
000A5E54 2D7C 00A0 1400 0010        		move.l	#$A00000+YM_Buffer2,$10(a6)		; set the cue address to buffer 2
000A5E5C                            
000A5E5C                            SD_WriteBuffer1:
000A5E5C 1D40 0010                  		move.b	d0,$10(a6)				; set buffer ID the 68k is writing to
000A5E60 422E 000E                  		clr.b	$E(a6)
000A5E64 4A2E 0003                  		tst.b	3(a6)		; is music paused?
000A5E68 6600 0000                  		bne.w	loc_71E50	; if yes, branch
000A5E6C 532E 0001                  		subq.b	#1,1(a6)
000A5E70 6600                       		bne.s	loc_71B9E
000A5E72 4EBA 0000                  		jsr	sub_7260C(pc)
000A5E76                            
000A5E76                            loc_71B9E:
000A5E76 102E 0004                  		move.b	4(a6),d0
000A5E7A 6700                       		beq.s	loc_71BA8
000A5E7C 4EBA 0000                  		jsr	sub_72504(pc)
000A5E80                            
000A5E80                            loc_71BA8:
000A5E80 4A2E 0024                  		tst.b	$24(a6)
000A5E84 6700                       		beq.s	loc_71BB2
000A5E86 4EBA 0000                  		jsr	sub_7267C(pc)
000A5E8A                            
000A5E8A                            loc_71BB2:
000A5E8A 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
000A5E8E 6700                       		beq.s	loc_71BBC	; if not, branch
000A5E90 4EBA 0000                  		jsr	Sound_Play(pc)
000A5E94                            
000A5E94                            loc_71BBC:
000A5E94 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000A5E9A 6700                       		beq.s	loc_71BC8
000A5E9C 4EBA 0000                  		jsr	Sound_ChkValue(pc)
000A5EA0                            
000A5EA0                            loc_71BC8:
000A5EA0 4BEE 0010                  		lea	$40-$30(a6),a5			; MJ: making correction for flow below
000A5EA4 7E01                       		moveq	#2-1,d7				; MJ: set number of PCM channels to run
000A5EA6 1D7C 007F 0008             		move.b	#$80-1,$08(a6)			; MJ: reset as PCM channel
000A5EAC                            
000A5EAC                            SD_NextPCM:
000A5EAC 522E 0008                  		addq.b	#$01,$08(a6)			; MJ: advance PCM channel ID
000A5EB0 4BED 0030                  		lea	$30(a5),a5			; MJ: advance to next channel
000A5EB4 4A15                       		tst.b	(a5)
000A5EB6 6A00                       		bpl.s	loc_71BD4
000A5EB8 4EBA 0000                  		jsr	sub_71C4E(pc)
000A5EBC                            
000A5EBC                            loc_71BD4:
000A5EBC 51CF FFEE                  		dbf	d7,SD_NextPCM			; MJ: repeat for number of PCM channels available
000A5EC0 422E 0008                  		clr.b	8(a6)
000A5EC4 7E05                       		moveq	#5,d7
000A5EC6                            
000A5EC6                            loc_71BDA:
000A5EC6 DAFC 0030                  		adda.w	#$30,a5
000A5ECA 4A15                       		tst.b	(a5)
000A5ECC 6A00                       		bpl.s	loc_71BE6
000A5ECE 4EBA 0000                  		jsr	sub_71CCA(pc)
000A5ED2                            
000A5ED2                            loc_71BE6:
000A5ED2 51CF FFF2                  		dbf	d7,loc_71BDA
000A5ED6                            
000A5ED6 7E02                       		moveq	#2,d7
000A5ED8                            
000A5ED8                            loc_71BEC:
000A5ED8 DAFC 0030                  		adda.w	#$30,a5
000A5EDC 4A15                       		tst.b	(a5)
000A5EDE 6A00                       		bpl.s	loc_71BF8
000A5EE0 4EBA 0000                  		jsr	sub_72850(pc)
000A5EE4                            
000A5EE4                            loc_71BF8:
000A5EE4 51CF FFF2                  		dbf	d7,loc_71BEC
000A5EE8                            
000A5EE8 1D7C 0080 000E             		move.b	#$80,$E(a6)
000A5EEE 7E02                       		moveq	#2,d7
000A5EF0                            
000A5EF0                            loc_71C04:
000A5EF0 DAFC 0030                  		adda.w	#$30,a5
000A5EF4 4A15                       		tst.b	(a5)
000A5EF6 6A00                       		bpl.s	loc_71C10
000A5EF8 4EBA 0000                  		jsr	sub_71CCA(pc)
000A5EFC                            
000A5EFC                            loc_71C10:
000A5EFC 51CF FFF2                  		dbf	d7,loc_71C04
000A5F00                            
000A5F00 7E02                       		moveq	#2,d7
000A5F02                            
000A5F02                            loc_71C16:
000A5F02 DAFC 0030                  		adda.w	#$30,a5
000A5F06 4A15                       		tst.b	(a5)
000A5F08 6A00                       		bpl.s	loc_71C22
000A5F0A 4EBA 0000                  		jsr	sub_72850(pc)
000A5F0E                            
000A5F0E                            loc_71C22:
000A5F0E 51CF FFF2                  		dbf	d7,loc_71C16
000A5F12 1D7C 0040 000E             		move.b	#$40,$E(a6)
000A5F18 DAFC 0030                  		adda.w	#$30,a5
000A5F1C 4A15                       		tst.b	(a5)
000A5F1E 6A00                       		bpl.s	loc_71C38
000A5F20 4EBA 0000                  		jsr	sub_71CCA(pc)
000A5F24                            
000A5F24                            loc_71C38:
000A5F24 DAFC 0030                  		adda.w	#$30,a5
000A5F28 4A15                       		tst.b	(a5)
000A5F2A 6A00                       		bpl.s	loc_71C44
000A5F2C 4EBA 0000                  		jsr	sub_72850(pc)
000A5F30                            
000A5F30                            loc_71C44:
000A5F30 4E75                       		rts	
000A5F32                            
000A5F32                            ; End of function sub_71B4C
000A5F32                            
000A5F32                            
000A5F32                            ; ===========================================================================
000A5F32                            ; ---------------------------------------------------------------------------
000A5F32                            ; Subroutine to run an FM channel ; EXTRA - ON/OFF
000A5F32                            ; ---------------------------------------------------------------------------
000A5F32                            
000A5F32                            SDAC_CheckMute:
000A5F32 102D 0021                  	move.b	$21(a5),d0
000A5F36 B02D 0022                  	cmp.b	$22(a5),d0
000A5F3A 6700                       	beq.s	S71C4E_NoCHG
000A5F3C 4A00                       	tst.b	d0
000A5F3E 6A00                       	bpl.s	S71C4E_NoMute
000A5F40                            
000A5F40 70DA                       		moveq	#%11011010|$FFFFFF00,d0			; prepare "JP Z" instruction
000A5F42 49F9 0000 0000             		lea	(StopSample).l,a4		; MUTE
000A5F48 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1		; load PCM 2 slot address
000A5F4E 41F9 00A0 0651             		lea	($A00000+PCM2_NewRET).l,a0		; ''
000A5F54 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A5F5A 6600                       		bne.s	SDAC_CM_NotePCM2				; if not, branch for PCM 2 writing
000A5F5C 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1		; load PCM 1 slot address
000A5F62 41F9 00A0 064E             		lea	($A00000+PCM1_NewRET).l,a0		; ''
000A5F68                            
000A5F68                            SDAC_CM_NotePCM2:
000A5F68 33FC 0100 00A1 1100 0839+  		StopZ80
000A5F7A 12DC                       		move.b	(a4)+,(a1)+				; set address of sample
000A5F7C 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5F7E 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5F80 12DC                       		move.b	(a4)+,(a1)+				; set address of reverse sample
000A5F82 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5F84 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5F86 12DC                       		move.b	(a4)+,(a1)+				; set address of next sample
000A5F88 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5F8A 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5F8C 12DC                       		move.b	(a4)+,(a1)+				; set address of next reverse sample
000A5F8E 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5F90 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5F92 1080                       		move.b	d0,(a0)					; change "JP NC" to "JP C"
000A5F94 33FC 0000 00A1 1100        		StartZ80
000A5F9C                            
000A5F9C                            ;	jsr	sub_726FE(pc)
000A5F9C                            ;	move.b	$0A(a5),d1
000A5F9C                            ;	andi.b	#%00111111,d1
000A5F9C                            ;	move.b	#$B4,d0
000A5F9C                            ;	jsr	loc_72716
000A5F9C 08D5 0006                  	bset.b	#$06,(a5)
000A5FA0 1B6D 0021 0022             	move.b	$21(a5),$22(a5)
000A5FA6                            
000A5FA6                            S71C4E_NoCHG:
000A5FA6 4E75                       	rts
000A5FA8                            
000A5FA8                            S71C4E_NoMute:
000A5FA8 1B40 0022                  	move.b	d0,$22(a5)
000A5FAC                            ;	move.b	$0B(a5),d0
000A5FAC                            ;	jsr	SFM_UpdateVoice(pc)
000A5FAC                            ;	move.b	$0A(a5),d1
000A5FAC                            ;	move.b	#$B4,d0
000A5FAC                            ;	jsr	loc_72716
000A5FAC 08D5 0006                  	bset.b	#$06,(a5)
000A5FB0 4E75                       	rts
000A5FB2                            
000A5FB2                            ; ===========================================================================
000A5FB2                            ; ---------------------------------------------------------------------------
000A5FB2                            ; Subroutine to run a DAC channel ; CHG: The entire routine...
000A5FB2                            ; ---------------------------------------------------------------------------
000A5FB2                            
000A5FB2                            sub_71C4E:
000A5FB2 6100 FF7E                  	bsr.w	SDAC_CheckMute			; EXTRA - ON/OFF
000A5FB6                            
000A5FB6                            	; Volume is being done first, as it'll update with a single
000A5FB6                            	; frame delay, the PCM playback is a frame behind, as is the
000A5FB6                            	; pitch control, but the volume change happens immediately,
000A5FB6                            	; thus, a delay is needed.
000A5FB6                            
000A5FB6                            	; *VOLUME DELAY WAS HERE*
000A5FB6                            
000A5FB6                            		; And now back to the normal DAC
000A5FB6                            		; SMPS routine
000A5FB6                            
000A5FB6 532D 000E                  		subq.b	#$01,$0E(a5)				; decrease note timer
000A5FBA 6600 0000                  		bne.w	SDAC_HoldNote				; if still running, branch
000A5FBE 0895 0004                  		bclr.b	#$04,(a5)				; disable softkey
000A5FC2 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A5FC6 286D 0004                  		movea.l	$04(a5),a4				; load tracker address
000A5FCA 6000                       		bra.s	SDAC_ReadTracker			; continue into loop
000A5FCC                            
000A5FCC                            SDAC_ReadFlag:
000A5FCC 4EBA 0000                  		jsr	sub_72A5A(pc)				; run flags subroutine
000A5FD0                            
000A5FD0                            SDAC_ReadTracker:
000A5FD0 7A00                       		moveq	#$00,d5					; clear d5
000A5FD2 1A1C                       		move.b	(a4)+,d5				; load byte from SMPS track
000A5FD4 6A00 0000                  		bpl.w	SDAC_Timer				; if it's a timer, branch
000A5FD8 0C05 00E0                  		cmpi.b	#$E0,d5					; is it a flag?
000A5FDC 64EE                       		bcc.s	SDAC_ReadFlag				; if so, branch
000A5FDE 1B45 0020                  	move.b	d5,$20(a5)			; EXTRA
000A5FE2                            
000A5FE2                            	SDAC_Update:				; EXTRA
000A5FE2 08D5 0001                  		bset.b	#$01,(a5)				; set channel as resting
000A5FE6 0405 0080                  		subi.b	#$80,d5					; minus starting note
000A5FEA 6700                       		beq.s	SDAC_NoFrequency			; if it's mute, branch
000A5FEC 5515                       		subq.b	#$02,(a5)				; set channel as NOT resting
000A5FEE DA2D 0008                  		add.b	$08(a5),d5				; add pitch to it
000A5FF2 DA2E 0014                  	add.b	$14(a6),d5			; EXTRA
000A5FF6 DA45                       		add.w	d5,d5					; multiply by size of word
000A5FF8 3B7B 5000 0010             		move.w	(FrequenciesPCM-2)(pc,d5.w),$10(a5)	; save frequency to use
000A5FFE                            
000A5FFE                            SDAC_NoFrequency:
000A5FFE                            
000A5FFE 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A6002 6600 0000                  	bne.w	SDAC_Frequency			; EXTRA
000A6006 1A1C                       		move.b	(a4)+,d5				; load next note
000A6008 6A00 0000                  		bpl.w	SDAC_Timer				; if it's a timer, branch
000A600C 534C                       		subq.w	#$01,a4					; move back (it's not a timer after all)
000A600E 1B6D 000F 000E             		move.b	$0F(a5),$0E(a5)				; reset timer
000A6014 6000 0000                  		bra.w	SDAC_PlayNote				; continue
000A6018                            
000A6018                            ; ---------------------------------------------------------------------------
000A6018                            ; Note to PCM frequency conversion table
000A6018                            ; ---------------------------------------------------------------------------
000A6018                            ; The octave numbers below assume the samples are playing a default pitch/note
000A6018                            ; of C3 (A5)
000A6018                            ; ---------------------------------------------------------------------------
000A6018                            
000A6018                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000A6018                            
000A6018 0010 0011 0012 0013 0014+  FrequenciesPCM:	dc.w	$0010,$0011,$0012,$0013,$0014,$0015,$0017,$0018,$0019,$001B,$001D,$001E   ; Octave 0 - (81 - 8C)
000A6030 0020 0022 0024 0026 0028+  		dc.w	$0020,$0022,$0024,$0026,$0028,$002B,$002D,$0030,$0033,$0036,$0039,$003C   ; Octave 1 - (8D - 98)
000A6048 0040 0044 0048 004C 0051+  		dc.w	$0040,$0044,$0048,$004C,$0051,$0055,$005B,$0060,$0066,$006C,$0072,$0079   ; Octave 2 - (99 - A4)
000A6060 0080 0088 0090 0098 00A1+  		dc.w	$0080,$0088,$0090,$0098,$00A1,$00AB,$00B5,$00C0,$00CB,$00D7,$00E4,$00F2   ; Octave 3 - (A5 - B0)
000A6078 0100 010F 011F 0130 0143+  		dc.w	$0100,$010F,$011F,$0130,$0143,$0156,$016A,$0180,$0196,$01AF,$01C8,$01E3   ; Octave 4 - (B1 - BC)
000A6090 0200 021E 023F 0261 0285+  		dc.w	$0200,$021E,$023F,$0261,$0285,$02AB,$02D4,$02FF,$032D,$035D,$0390,$03C7   ; Octave 5 - (BD - C8)
000A60A8 0400 043D 047D 04C2 050A+  		dc.w	$0400,$043D,$047D,$04C2,$050A,$0557,$05A8,$05FE,$0659,$06BA,$0721,$078D   ; Octave 6 - (C9 - D4)
000A60C0 0800 087A 08FB 0983 0A14+  		dc.w	$0800,$087A,$08FB,$0983,$0A14,$0AAE,$0B50,$0BFD,$0CB3,$0D74,$0E41,$0F1A   ; Octave 7 - (D5 - DF)
000A60D8                            
000A60D8                            ; ---------------------------------------------------------------------------
000A60D8                            ; Writing the sample to Dual PCM
000A60D8                            ; ---------------------------------------------------------------------------
000A60D8                            
000A60D8                            SDAC_Timer:
000A60D8 4EBA 0000                  		jsr	sub_71D40(pc)				; correct timer
000A60DC                            
000A60DC                            SDAC_PlayNote:
000A60DC 2B4C 0004                  		move.l	a4,$04(a5)				; update tracker address
000A60E0                            
000A60E0                            	SDAC_MuteNote:
000A60E0 49F9 0000 0000             		lea	(StopSample).l,a4			; load "stop sample" address
000A60E6 4A2D 0022                  	tst.b	$22(a5)
000A60EA 6B00                       	bmi.s	SDAC_Rest
000A60EC 1015                       		move.b	(a5),d0					; load flags
000A60EE 0800 0004                  		btst	#$04,d0					; is soft key set?
000A60F2 6600                       		bne.s	SDAC_SoftKey				; if so, branch
000A60F4 E610                       		roxr.b	#$03,d0					; rotate around
000A60F6 6500 0000                  		bcs.w	SDAC_Return				; if the channel is being interrupted (bit 2), branch
000A60FA 6B00                       		bmi.s	SDAC_Rest				; if the rest bit was set, branch
000A60FC 7000                       		moveq	#$00,d0					; clear d0
000A60FE 102D 000B                  		move.b	$0B(a5),d0				; load sample ID
000A6102 D040                       		add.w	d0,d0					; multiply by 4 (long-word size)
000A6104 D040                       		add.w	d0,d0					; ''
000A6106 49F9 0000 0000             		lea	(SampleList).l,a4			; load sample list
000A610C 2874 0000                  		move.l	(a4,d0.w),a4				; load correct sample z80 pointer address
000A6110                            
000A6110                            SDAC_Rest:
000A6110 70DA                       		moveq	#%11011010|$FFFFFF00,d0			; prepare "JP Z" instruction
000A6112 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1		; load PCM 2 slot address
000A6118 41F9 00A0 0651             		lea	($A00000+PCM2_NewRET).l,a0		; ''
000A611E 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A6124 6600                       		bne.s	SDAC_NotePCM2				; if not, branch for PCM 2 writing
000A6126 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1		; load PCM 1 slot address
000A612C 41F9 00A0 064E             		lea	($A00000+PCM1_NewRET).l,a0		; ''
000A6132                            
000A6132                            SDAC_NotePCM2:
000A6132 33FC 0100 00A1 1100 0839+  		StopZ80
000A6144 12DC                       		move.b	(a4)+,(a1)+				; set address of sample
000A6146 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6148 12DC                       		move.b	(a4)+,(a1)+				; ''
000A614A 12DC                       		move.b	(a4)+,(a1)+				; set address of reverse sample
000A614C 12DC                       		move.b	(a4)+,(a1)+				; ''
000A614E 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6150 12DC                       		move.b	(a4)+,(a1)+				; set address of next sample
000A6152 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6154 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6156 12DC                       		move.b	(a4)+,(a1)+				; set address of next reverse sample
000A6158 12DC                       		move.b	(a4)+,(a1)+				; ''
000A615A 12DC                       		move.b	(a4)+,(a1)+				; ''
000A615C 1080                       		move.b	d0,(a0)					; change "JP NC" to "JP C"
000A615E 33FC 0000 00A1 1100        		StartZ80
000A6166                            
000A6166                            SDAC_SoftKey:
000A6166                            
000A6166                            	SDAC_Frequency:
000A6166                            
000A6166 102D 0009                  		move.b	$09(a5),d0				; load current volume
000A616A 7200                       	moveq	#$00,d1				; EXTRA
000A616C 122E 0016                  	move.b	$16(a6),d1			; EXTRA
000A6170                            ;	lea	(FOP_VolumeList).l,a0		; EXTRA
000A6170                            ;	move.b	(a0,d1.w),d1			; EXTRA
000A6170 D201                       	add.b	d1,d1
000A6172 D001                       	add.b	d1,d0
000A6174                            
000A6174 1200                       		move.b	d0,d1					; copy volume to d1
000A6176 6A00                       		bpl.s	SDAC_ValidVolume			; if it is between 00 and 80, branch
000A6178 7080                       		moveq	#$FFFFFF80,d0				; set volume to mute (81 - FF is out of bounds)
000A617A                            
000A617A                            SDAC_ValidVolume:
000A617A B02D 000C                  		cmp.b	$0C(a5),d0				; has the volume changed?
000A617E 6700                       		beq.s	SDAC_NoVolume				; if not, branch (don't bother)
000A6180 1B40 000C                  		move.b	d0,$0C(a5)				; update volume
000A6184 72D2                       		moveq	#($FFFFFF00|%11010010),d1		; prepare Z80 "JP NC" instruction
000A6186 43F9 00A0 0634             		lea	($A00000+PCM_ChangeVolume).l,a1		; load volume change instruction address
000A618C 41F9 00A0 0647             		lea	($A00000+PCM2_Volume+1).l,a0		; load PCM 2 volume address
000A6192 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A6198 6600                       		bne.s	SDAC_VolumePCM2				; if not, branch for PCM 2 writing
000A619A 41F9 00A0 0642             		lea	($A00000+PCM1_Volume+1).l,a0		; load PCM 1 volume address
000A61A0                            
000A61A0                            SDAC_VolumePCM2:
000A61A0 33FC 0100 00A1 1100 0839+  		StopZ80
000A61B2 1080                       		move.b	d0,(a0)					; change PCM volume
000A61B4 1281                       		move.b	d1,(a1)					; change "JP C" to "JP NC"
000A61B6 33FC 0000 00A1 1100        		StartZ80
000A61BE                            
000A61BE                            SDAC_NoVolume:
000A61BE                            
000A61BE 3C2D 0010                  		move.w	$10(a5),d6				; load frequency
000A61C2 0815 0003                  		btst	#$03,(a5)				; is modulation turned on?
000A61C6 6700                       		beq.s	SDAC_WriteFrequency			; if not, branch
000A61C8 286D 0014                  		movea.l	$14(a5),a4				; load modulation address
000A61CC 43ED 0018                  		lea	$18(a5),a1				; load modulation settings RAM
000A61D0 0815 0004                  		btst.b	#$04,(a5)				; is soft key set?
000A61D4 6600                       		bne.s	SDAC_NoResetModulation			; if so, branch
000A61D6 12DC                       		move.b	(a4)+,(a1)+				; reset settings...
000A61D8 12DC                       		move.b	(a4)+,(a1)+				; ''
000A61DA 12DC                       		move.b	(a4)+,(a1)+				; ''
000A61DC 101C                       		move.b	(a4)+,d0				; ''
000A61DE E208                       		lsr.b	#$01,d0					; ''
000A61E0 12C0                       		move.b	d0,(a1)+				; ''
000A61E2 4259                       		clr.w	(a1)+					; clear modulation frequency
000A61E4                            
000A61E4                            SDAC_NoResetModulation:
000A61E4 DC6D 001C                  		add.w	$1C(a5),d6				; add modulation pitch
000A61E8 6000                       		bra.s	SDAC_WriteFrequency			; continue
000A61EA                            
000A61EA                            ; ---------------------------------------------------------------------------
000A61EA                            ; Holding a note...
000A61EA                            ; ---------------------------------------------------------------------------
000A61EA                            
000A61EA                            SDAC_HoldNote:
000A61EA 1015                       		move.b	(a5),d0					; load flags
000A61EC 0200 0003                  		andi.b	#%00000011,d0				; is the channel being interrupted by an SFX, or is resting?
000A61F0 6600 0000                  		bne.w	SDAC_Return				; if so, branch
000A61F4                            
000A61F4 0815 0006                  	btst.b	#$06,(a5)			; EXTRA
000A61F8 6700                       	beq.s	SDAC_NoUpdate			; EXTRA
000A61FA 7A00                       	moveq	#$00,d5				; EXTRA
000A61FC 1A2D 0020                  	move.b	$20(a5),d5			; EXTRA
000A6200 6000 FDE0                  	bra.w	SDAC_Update			; EXTRA
000A6204                            
000A6204                            	SDAC_NoUpdate:				; EXTRA
000A6204 4EBA 0000                  		jsr	sub_71D9E(pc)				; check for release
000A6208 4EBA 0000                  		jsr	sub_71DC6(pc)				; run modulation and get right frequency to d6
000A620C                            
000A620C                            	; d6 = frequency
000A620C                            
000A620C                            SDAC_WriteFrequency:
000A620C 102D 001E                  		move.b	$1E(a5),d0				; load detune
000A6210 4880                       		ext.w	d0					; sign extend to word
000A6212 D046                       		add.w	d6,d0					; add to frequency (move it up or down subtly)
000A6214 0815 0005                  		btst.b	#$05,(a5)				; is the reverse flag set?
000A6218 6700                       		beq.s	SDAC_NoReverse				; if not, branch
000A621A 4440                       		neg.w	d0					; reverse
000A621C                            	;	subi.w	#$0100*2,d0				; move back to Dual PCM's neutral
000A621C                            
000A621C                            SDAC_NoReverse:
000A621C                            	;	move.w	d0,d3					; copy to d3
000A621C                            	;	smi	d2					; set extend byte if value is negative
000A621C                            	;	addi.w	#$0100,d3				; convert to true neutral (for overflow)
000A621C                            	;	muls.w	#Z80E_Read,d3				; multiply by number of reads the Z80 performs (read 18 vs playback 10)
000A621C                            	;	move.b	d3,d5					; load fraction to d5
000A621C                            	;	asr.l	#$08,d3					; divide by 100
000A621C                            	;	move.w	d3,-(sp)				; get upper byte of overflow value
000A621C                            	;	move.b	(sp),d4					; ''
000A621C                            	;	move.w	d0,(sp)					; get upper byte of pitch/frequency
000A621C                            	;	move.b	(sp),d1					; ''
000A621C                            	;	addq.w	#$02,sp					; move stack forwards (would've done via increment and back...
000A621C                            								; ...index, but interrupts could be a problem).
000A621C                            	; d0 = XXXX.DD
000A621C                            	; d1 = XXQQ.XX
000A621C                            	; d2 = QQXX.XX
000A621C                            	; d3 = XXVV.XX
000A621C                            	; d4 = VVXX.XX
000A621C                            	; d5 = XXXX.OO
000A621C                            
000A621C 74D2                       		moveq	#$FFFFFF00|%11010010,d2
000A621E 1200                       		move.b	d0,d1
000A6220 E048                       		lsr.w	#$08,d0
000A6222 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A6228 6600                       		bne.s	SDAC_FrequePCM2				; if not, branch for PCM 2 writing
000A622A 33FC 0100 00A1 1100 0839+  		StopZ80
000A623C                            	;	move.b	d0,($A00000+PCM1_RateDiv+1)		; write pitch main dividend
000A623C                            	;	move.b	d1,($A00000+PCM1_RateQuo+1)		; write pitch quotient low
000A623C                            	;	move.b	d2,($A00000+PCM1_RateQuo+2)		; write pitch quotient high
000A623C                            	;	move.b	d3,($A00000+PCM1_Overflow+1)		; write low overflow
000A623C                            	;	move.b	d4,($A00000+PCM1_Overflow+2)		; write high overflow
000A623C                            	;	move.b	d5,($A00000+PCM1_OverDiv+1)		; write dividend overflow
000A623C                            	;	move.b	#%11010010,($A00000+PCM_ChangePitch)	; change "JP C" to "JP NC"
000A623C                            
000A623C 13C0 00A0 05DD             		move.b	d0,($A00000+PCM1_PitchHigh+1)
000A6242 13C1 00A0 05E8             		move.b	d1,($A00000+PCM1_PitchLow+1)
000A6248 13C2 00A0 05D2             		move.b	d2,($A00000+PCM1_ChangePitch)		; change "JP C" to "JP NC"
000A624E 33FC 0000 00A1 1100        		StartZ80
000A6256                            
000A6256                            SDAC_Return:
000A6256 4E75                       		rts						; return
000A6258                            
000A6258                            SDAC_FrequePCM2:
000A6258 33FC 0100 00A1 1100 0839+  		StopZ80
000A626A                            	;	move.b	d0,($A00000+PCM2_RateDiv+1)		; write pitch main dividend
000A626A                            	;	move.b	d1,($A00000+PCM2_RateQuo+1)		; write pitch quotient low
000A626A                            	;	move.b	d2,($A00000+PCM2_RateQuo+2)		; write pitch quotient high
000A626A                            	;	move.b	d3,($A00000+PCM2_Overflow+1)		; write low overflow
000A626A                            	;	move.b	d4,($A00000+PCM2_Overflow+2)		; write high overflow
000A626A                            	;	move.b	d5,($A00000+PCM2_OverDiv+1)		; write dividend overflow
000A626A                            	;	move.b	#%11010010,($A00000+PCM_ChangePitch)	; change "JP C" to "JP NC"
000A626A                            
000A626A 13C0 00A0 060E             		move.b	d0,($A00000+PCM2_PitchHigh+1)
000A6270 13C1 00A0 0619             		move.b	d1,($A00000+PCM2_PitchLow+1)
000A6276 13C2 00A0 0603             		move.b	d2,($A00000+PCM2_ChangePitch)		; change "JP C" to "JP NC"
000A627C 33FC 0000 00A1 1100        		StartZ80
000A6284 4E75                       		rts						; return
000A6286                            
000A6286                            ; ===========================================================================
000A6286                            ; ---------------------------------------------------------------------------
000A6286                            ; Subroutine to run an FM channel ; EXTRA - ON/OFF
000A6286                            ; ---------------------------------------------------------------------------
000A6286                            
000A6286                            SFM_CheckMute:
000A6286 4A2E 000E                  	tst.b	$0E(a6)
000A628A 6600                       	bne.s	S71CCA_NoCHG
000A628C 102D 0021                  	move.b	$21(a5),d0
000A6290 B02D 0022                  	cmp.b	$22(a5),d0
000A6294 6700                       	beq.s	S71CCA_NoCHG
000A6296 4A00                       	tst.b	d0
000A6298 6A00                       	bpl.s	S71CCA_NoMute
000A629A 4EBA 0000                  	jsr	sub_726FE(pc)
000A629E 122D 000A                  	move.b	$0A(a5),d1
000A62A2 0201 003F                  	andi.b	#%00111111,d1
000A62A6 103C 00B4                  	move.b	#$B4,d0
000A62AA 4EB9 0000 0000             	jsr	loc_72716
000A62B0 08D5 0006                  	bset.b	#$06,(a5)
000A62B4 1B6D 0021 0022             	move.b	$21(a5),$22(a5)
000A62BA                            
000A62BA                            S71CCA_NoCHG:
000A62BA 4E75                       	rts
000A62BC                            
000A62BC                            S71CCA_NoMute:
000A62BC 1B40 0022                  	move.b	d0,$22(a5)
000A62C0 102D 000B                  	move.b	$0B(a5),d0
000A62C4 4EBA 0000                  	jsr	SFM_UpdateVoice(pc)
000A62C8                            ;	jsr	loc_726E2(pc)
000A62C8 122D 000A                  	move.b	$0A(a5),d1
000A62CC 103C 00B4                  	move.b	#$B4,d0
000A62D0 4EB9 0000 0000             	jsr	loc_72716
000A62D6 08D5 0006                  	bset.b	#$06,(a5)
000A62DA 4E75                       	rts
000A62DC                            
000A62DC                            ; ===========================================================================
000A62DC                            ; ---------------------------------------------------------------------------
000A62DC                            ; Subroutine to run an FM channel
000A62DC                            ; ---------------------------------------------------------------------------
000A62DC                            
000A62DC                            sub_71CCA:				; XREF: sub_71B4C
000A62DC 61A8                       	bsr.s	SFM_CheckMute			; EXTRA - ON/OFF
000A62DE                            
000A62DE 532D 000E                  		subq.b	#1,$E(a5)
000A62E2 6600                       		bne.s	loc_71CE0
000A62E4 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A62E8 0895 0004                  		bclr	#4,(a5)
000A62EC 4EBA 0000                  		jsr	sub_71CEC(pc)
000A62F0 4EBA 0000                  		jsr	sub_71E18(pc)
000A62F4 6000 0000                  		bra.w	loc_726E2
000A62F8                            ; ===========================================================================
000A62F8                            
000A62F8                            loc_71CE0:
000A62F8 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A62FC 6700                       	beq.s	SFM_NoUpdate			; EXTRA
000A62FE 4EB9 0000 0000             	jsr	sub_72CB4			; EXTRA
000A6304 7A00                       	moveq	#$00,d5				; EXTRA
000A6306 1A2D 0020                  	move.b	$20(a5),d5			; EXTRA
000A630A 0405 0080                  	subi.b	#$80,d5				; EXTRA
000A630E 6700                       	beq.s	SFM_NoUpdate			; EXTRA
000A6310 4EB9 0000 0000             	jsr	SFM_UpdateFreque		; EXTRA
000A6316 6000 0000                  	bra.w	loc_71E24			; EXTRA
000A631A                            
000A631A                            	SFM_NoUpdate:				; EXTRA
000A631A 4EBA 0000                  		jsr	sub_71D9E(pc)
000A631E 4EBA 0000                  		jsr	sub_71DC6(pc)
000A6322 6000 0000                  		bra.w	loc_71E24
000A6326                            ; End of function sub_71CCA
000A6326                            
000A6326                            
000A6326                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6326                            
000A6326                            
000A6326                            sub_71CEC:				; XREF: sub_71CCA
000A6326 286D 0004                  		movea.l	4(a5),a4
000A632A 0895 0001                  		bclr	#1,(a5)
000A632E                            
000A632E                            loc_71CF4:
000A632E 7A00                       		moveq	#0,d5
000A6330 1A1C                       		move.b	(a4)+,d5
000A6332 0C05 00E0                  		cmpi.b	#-$20,d5
000A6336 6500                       		bcs.s	loc_71D04
000A6338 4EBA 0000                  		jsr	sub_72A5A(pc)
000A633C 60F0                       		bra.s	loc_71CF4
000A633E                            ; ===========================================================================
000A633E                            
000A633E                            loc_71D04:
000A633E 4EBA 0000                  		jsr	sub_726FE(pc)
000A6342 4A05                       		tst.b	d5
000A6344 6A00                       		bpl.s	loc_71D1A
000A6346 1B45 0020                  	move.b	d5,$20(a5)			; EXTRA
000A634A 4EBA 0000                  		jsr	sub_71D22(pc)
000A634E 1A1C                       		move.b	(a4)+,d5
000A6350 6A00                       		bpl.s	loc_71D1A
000A6352 534C                       		subq.w	#1,a4
000A6354 6000 0000                  		bra.w	sub_71D60
000A6358                            ; ===========================================================================
000A6358                            
000A6358                            loc_71D1A:
000A6358 4EBA 0000                  		jsr	sub_71D40(pc)
000A635C 6000 0000                  		bra.w	sub_71D60
000A6360                            ; End of function sub_71CEC
000A6360                            
000A6360                            
000A6360                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6360                            
000A6360                            
000A6360                            sub_71D22:				; XREF: sub_71CEC
000A6360 0405 0080                  		subi.b	#$80,d5
000A6364 6700                       		beq.s	loc_71D58
000A6366                            
000A6366                            	SFM_UpdateFreque:			; EXTRA
000A6366 DA2D 0008                  		add.b	8(a5),d5
000A636A DA2E 0014                  	add.b	$14(a6),d5			; EXTRA
000A636E 0245 007F                  		andi.w	#$7F,d5
000A6372 E34D                       		lsl.w	#1,d5
000A6374 41FA 0000                  		lea	word_72790(pc),a0
000A6378 3C30 5000                  		move.w	(a0,d5.w),d6
000A637C 3B46 0010                  		move.w	d6,$10(a5)
000A6380 4E75                       		rts	
000A6382                            ; End of function sub_71D22
000A6382                            
000A6382                            
000A6382                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6382                            
000A6382                            
000A6382                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000A6382 1005                       		move.b	d5,d0
000A6384 122D 0002                  		move.b	2(a5),d1
000A6388                            
000A6388                            loc_71D46:
000A6388 5301                       		subq.b	#1,d1
000A638A 6700                       		beq.s	loc_71D4E
000A638C D005                       		add.b	d5,d0
000A638E 60F8                       		bra.s	loc_71D46
000A6390                            ; ===========================================================================
000A6390                            
000A6390                            loc_71D4E:
000A6390 1B40 000F                  		move.b	d0,$F(a5)
000A6394 1B40 000E                  		move.b	d0,$E(a5)
000A6398 4E75                       		rts	
000A639A                            ; End of function sub_71D40
000A639A                            
000A639A                            ; ===========================================================================
000A639A                            
000A639A                            loc_71D58:				; XREF: sub_71D22
000A639A 08D5 0001                  		bset	#1,(a5)
000A639E 426D 0010                  		clr.w	$10(a5)
000A63A2                            
000A63A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A63A2                            
000A63A2                            
000A63A2                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
000A63A2 2B4C 0004                  		move.l	a4,4(a5)
000A63A6 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000A63AC 0815 0004                  		btst	#4,(a5)
000A63B0 6600                       		bne.s	locret_71D9C
000A63B2 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
000A63B8 422D 000C                  		clr.b	$C(a5)
000A63BC 0815 0003                  		btst	#3,(a5)
000A63C0 6700                       		beq.s	locret_71D9C
000A63C2 206D 0014                  		movea.l	$14(a5),a0
000A63C6 1B58 0018                  		move.b	(a0)+,$18(a5)
000A63CA 1B58 0019                  		move.b	(a0)+,$19(a5)
000A63CE 1B58 001A                  		move.b	(a0)+,$1A(a5)
000A63D2 1018                       		move.b	(a0)+,d0
000A63D4 E208                       		lsr.b	#1,d0
000A63D6 1B40 001B                  		move.b	d0,$1B(a5)
000A63DA 426D 001C                  		clr.w	$1C(a5)
000A63DE                            
000A63DE                            locret_71D9C:
000A63DE 4E75                       		rts	
000A63E0                            ; End of function sub_71D60
000A63E0                            
000A63E0                            
000A63E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A63E0                            
000A63E0                            
000A63E0                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000A63E0 4A2D 0012                  		tst.b	$12(a5)
000A63E4 6700                       		beq.s	locret_71DC4
000A63E6 532D 0012                  		subq.b	#1,$12(a5)
000A63EA 6600                       		bne.s	locret_71DC4
000A63EC 4A2E 0008                  		tst.b	$08(a6)						; CHG: is this a PCM channel?
000A63F0 6B00                       		bmi.s	SDCR_StopPCM					; if so, branch (skipping rest flag setting)
000A63F2 08D5 0001                  		bset	#1,(a5)
000A63F6 4A2D 0001                  		tst.b	1(a5)
000A63FA 6B00 0000                  		bmi.w	loc_71DBE
000A63FE 4EBA 0000                  		jsr	sub_726FE(pc)
000A6402 584F                       		addq.w	#4,sp
000A6404 4E75                       		rts	
000A6406                            ; ===========================================================================
000A6406                            
000A6406                            loc_71DBE:
000A6406 4EBA 0000                  		jsr	sub_729A0(pc)
000A640A 584F                       		addq.w	#4,sp
000A640C                            
000A640C                            locret_71DC4:
000A640C 4E75                       		rts	
000A640E                            ; End of function sub_71D9E
000A640E                            
000A640E                            SDCR_StopPCM:
000A640E 33FC 0100 00A1 1100 0839+  		StopZ80
000A6420 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A6426 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A642C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A642E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6430 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6432 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6434 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6436 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6438 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A643A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A643C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A643E 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6440 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6442 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6444 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A644C 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A6452 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 2 slot address
000A6458 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A645A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A645C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A645E 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6460 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6462 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6464 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6466 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6468 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A646A 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A646C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A646E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6470 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A6478 33FC 0000 00A1 1100        		StartZ80
000A6480 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A6482 4E75                       		rts							; CHG: return
000A6484                            
000A6484                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6484                            
000A6484                            
000A6484                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
000A6484 0815 0003                  		btst	#3,(a5)
000A6488 6700                       		beq.s	locret_71E16
000A648A 4A2D 0018                  		tst.b	$18(a5)
000A648E 6700                       		beq.s	loc_71DDA
000A6490 532D 0018                  		subq.b	#1,$18(a5)
000A6494 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A6496 4E75                       		rts	
000A6498                            ; ===========================================================================
000A6498                            
000A6498                            loc_71DDA:
000A6498 532D 0019                  		subq.b	#1,$19(a5)
000A649C 6700                       		beq.s	loc_71DE2
000A649E 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A64A0 4E75                       		rts	
000A64A2                            ; ===========================================================================
000A64A2                            
000A64A2                            loc_71DE2:
000A64A2 206D 0014                  		movea.l	$14(a5),a0
000A64A6 1B68 0001 0019             		move.b	1(a0),$19(a5)
000A64AC 4A2D 001B                  		tst.b	$1B(a5)
000A64B0 6600                       		bne.s	loc_71DFE
000A64B2 1B68 0003 001B             		move.b	3(a0),$1B(a5)
000A64B8 442D 001A                  		neg.b	$1A(a5)
000A64BC 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A64BE 4E75                       		rts	
000A64C0                            ; ===========================================================================
000A64C0                            
000A64C0                            loc_71DFE:
000A64C0 532D 001B                  		subq.b	#1,$1B(a5)
000A64C4 1C2D 001A                  		move.b	$1A(a5),d6
000A64C8 4886                       		ext.w	d6
000A64CA DC6D 001C                  		add.w	$1C(a5),d6
000A64CE 3B46 001C                  		move.w	d6,$1C(a5)
000A64D2 DC6D 0010                  		add.w	$10(a5),d6
000A64D6 4E75                       		rts							; CHG: return (don't skip)
000A64D8                            
000A64D8                            locret_71E16:
000A64D8 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A64DA 4E75                       		rts	
000A64DC                            ; End of function sub_71DC6
000A64DC                            
000A64DC                            
000A64DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A64DC                            
000A64DC                            
000A64DC                            sub_71E18:				; XREF: sub_71CCA
000A64DC 0815 0001                  		btst	#1,(a5)
000A64E0 6600                       		bne.s	locret_71E48
000A64E2 3C2D 0010                  		move.w	$10(a5),d6
000A64E6 6700                       		beq.s	loc_71E4A
000A64E8                            
000A64E8                            loc_71E24:				; XREF: sub_71CCA
000A64E8 102D 001E                  		move.b	$1E(a5),d0
000A64EC 4880                       		ext.w	d0
000A64EE DC40                       		add.w	d0,d6
000A64F0 0815 0002                  		btst	#2,(a5)
000A64F4 6600                       		bne.s	locret_71E48
000A64F6 4A2E 000E                  	tst.b	$0E(a6)
000A64FA 6600                       	bne.s	locret_71E48_2
000A64FC 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6500 6600                       	bne.s	locret_71E48
000A6502                            
000A6502                            	locret_71E48_2:
000A6502 3206                       		move.w	d6,d1
000A6504 E049                       		lsr.w	#8,d1
000A6506 103C 00A4                  		move.b	#-$5C,d0
000A650A 4EBA 0000                  		jsr	sub_72722(pc)
000A650E 1206                       		move.b	d6,d1
000A6510 103C 00A0                  		move.b	#-$60,d0
000A6514 4EBA 0000                  		jsr	sub_72722(pc)
000A6518                            
000A6518                            locret_71E48:
000A6518 4E75                       		rts	
000A651A                            ; ===========================================================================
000A651A                            
000A651A                            loc_71E4A:
000A651A 08D5 0001                  		bset	#1,(a5)
000A651E 4E75                       		rts	
000A6520                            ; End of function sub_71E18
000A6520                            
000A6520                            ; ===========================================================================
000A6520                            
000A6520                            loc_71E50:				; XREF: sub_71B4C
000A6520 6B00                       		bmi.s	loc_71E94
000A6522 0C2E 0002 0003             		cmpi.b	#2,3(a6)
000A6528 6700 0000                  		beq.w	loc_71EFE
000A652C 1D7C 0002 0003             		move.b	#2,3(a6)
000A6532 7602                       		moveq	#2,d3
000A6534 103C 00B4                  		move.b	#-$4C,d0
000A6538 7200                       		moveq	#0,d1
000A653A                            
000A653A                            loc_71E6A:
000A653A 4EBA 0000                  		jsr	sub_7272E(pc)
000A653E 4EBA 0000                  		jsr	sub_72764(pc)
000A6542 5200                       		addq.b	#1,d0
000A6544 51CB FFF4                  		dbf	d3,loc_71E6A
000A6548                            
000A6548 7602                       		moveq	#2,d3
000A654A 7028                       		moveq	#$28,d0
000A654C                            
000A654C                            loc_71E7C:
000A654C 1203                       		move.b	d3,d1
000A654E 4EBA 0000                  		jsr	sub_7272E(pc)
000A6552 5801                       		addq.b	#4,d1
000A6554 4EBA 0000                  		jsr	sub_7272E(pc)
000A6558 51CB FFF2                  		dbf	d3,loc_71E7C
000A655C                            
000A655C 4EBA 0000                  		jsr	sub_729B6(pc)
000A6560 6000 F9CE                  		bra.w	loc_71C44
000A6564                            ; ===========================================================================
000A6564                            
000A6564                            loc_71E94:				; XREF: loc_71E50
000A6564 422E 0003                  		clr.b	3(a6)
000A6568 7630                       		moveq	#$30,d3
000A656A 4BEE 0040                  		lea	$40(a6),a5
000A656E 7807                       		moveq	#7,d4					; MJ: number of YM2612 based channels
000A6570                            
000A6570                            loc_71EA0:
000A6570 0815 0007                  		btst	#7,(a5)
000A6574 6700                       		beq.s	loc_71EB8
000A6576 0815 0002                  		btst	#2,(a5)
000A657A 6600                       		bne.s	loc_71EB8
000A657C 4A2E 000E                  	tst.b	$0E(a6)
000A6580 6600                       	bne.s	loc_71EB8_2
000A6582 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6586 6600                       	bne.s	loc_71EB8
000A6588                            
000A6588                            	loc_71EB8_2:
000A6588 103C 00B4                  		move.b	#-$4C,d0
000A658C 122D 000A                  		move.b	$A(a5),d1
000A6590 4EBA 0000                  		jsr	sub_72722(pc)
000A6594                            
000A6594                            loc_71EB8:
000A6594 DAC3                       		adda.w	d3,a5
000A6596 51CC FFD8                  		dbf	d4,loc_71EA0
000A659A                            
000A659A 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000A659E 7802                       		moveq	#2,d4
000A65A0                            
000A65A0                            loc_71EC4:
000A65A0 0815 0007                  		btst	#7,(a5)
000A65A4 6700                       		beq.s	loc_71EDC
000A65A6 0815 0002                  		btst	#2,(a5)
000A65AA 6600                       		bne.s	loc_71EDC
000A65AC 4A2E 000E                  	tst.b	$0E(a6)
000A65B0 6600                       	bne.s	loc_71EDC_2
000A65B2 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A65B6 6600                       	bne.s	loc_71EDC
000A65B8                            
000A65B8                            	loc_71EDC_2:
000A65B8 103C 00B4                  		move.b	#-$4C,d0
000A65BC 122D 000A                  		move.b	$A(a5),d1
000A65C0 4EBA 0000                  		jsr	sub_72722(pc)
000A65C4                            
000A65C4                            loc_71EDC:
000A65C4 DAC3                       		adda.w	d3,a5
000A65C6 51CC FFD8                  		dbf	d4,loc_71EC4
000A65CA                            
000A65CA 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A65CE 0815 0007                  		btst	#7,(a5)
000A65D2 6700                       		beq.s	loc_71EFE
000A65D4 0815 0002                  		btst	#2,(a5)
000A65D8 6600                       		bne.s	loc_71EFE
000A65DA 4A2E 000E                  	tst.b	$0E(a6)
000A65DE 6600                       	bne.s	loc_71EFE_2
000A65E0 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A65E4 6600                       	bne.s	loc_71EFE
000A65E6                            
000A65E6                            	loc_71EFE_2:
000A65E6 103C 00B4                  		move.b	#-$4C,d0
000A65EA 122D 000A                  		move.b	$A(a5),d1
000A65EE 4EBA 0000                  		jsr	sub_72722(pc)
000A65F2                            
000A65F2                            loc_71EFE:
000A65F2 6000 F93C                  		bra.w	loc_71C44
000A65F6                            
000A65F6                            ; ---------------------------------------------------------------------------
000A65F6                            ; Subroutine to	play a sound or	music track
000A65F6                            ; ---------------------------------------------------------------------------
000A65F6                            
000A65F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A65F6                            
000A65F6                            
000A65F6                            Sound_Play:				; XREF: sub_71B4C
000A65F6 2079 000A 5C5C             		movea.l	(Go_SoundTypes).l,a0
000A65FC 43EE 000A                  		lea	$A(a6),a1	; load music track number
000A6600 1616                       		move.b	0(a6),d3
000A6602 7802                       		moveq	#2,d4
000A6604                            
000A6604                            loc_71F12:
000A6604 1011                       		move.b	(a1),d0		; move track number to d0
000A6606 1200                       		move.b	d0,d1
000A6608 4219                       		clr.b	(a1)+
000A660A 0400 0081                  		subi.b	#$81,d0
000A660E 6500                       		bcs.s	loc_71F3E
000A6610 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000A6616 6700                       		beq.s	loc_71F2C
000A6618 1D41 000A                  		move.b	d1,$A(a6)
000A661C 6000                       		bra.s	loc_71F3E
000A661E                            ; ===========================================================================
000A661E                            
000A661E                            loc_71F2C:
000A661E 0240 007F                  		andi.w	#$7F,d0
000A6622 1430 0000                  		move.b	(a0,d0.w),d2
000A6626 B403                       		cmp.b	d3,d2
000A6628 6500                       		bcs.s	loc_71F3E
000A662A 1602                       		move.b	d2,d3
000A662C 1D41 0009                  		move.b	d1,9(a6)	; set music flag
000A6630                            
000A6630                            loc_71F3E:
000A6630 51CC FFD2                  		dbf	d4,loc_71F12
000A6634                            
000A6634 4A03                       		tst.b	d3
000A6636 6B00                       		bmi.s	locret_71F4A
000A6638 1C83                       		move.b	d3,0(a6)
000A663A                            
000A663A                            locret_71F4A:
000A663A 4E75                       		rts	
000A663C                            ; End of function Sound_Play
000A663C                            
000A663C                            
000A663C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A663C                            
000A663C                            
000A663C                            Sound_ChkValue:				; XREF: sub_71B4C
000A663C 7E00                       		moveq	#0,d7
000A663E 1E2E 0009                  		move.b	9(a6),d7
000A6642 6700 0000                  		beq.w	Sound_E4
000A6646 6A00                       		bpl.s	locret_71F8C
000A6648 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
000A664E 0C07 009F                  		cmpi.b	#$9F,d7
000A6652 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
000A6656 0C07 00A0                  		cmpi.b	#$A0,d7
000A665A 6500 0000                  		bcs.w	locret_71F8C
000A665E 0C07 00CF                  		cmpi.b	#$CF,d7
000A6662 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
000A6666 0C07 00D0                  		cmpi.b	#$D0,d7
000A666A 6500 0000                  		bcs.w	locret_71F8C
000A666E 0C07 00E0                  		cmpi.b	#$E0,d7
000A6672 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
000A6676 0C07 00E4                  		cmpi.b	#$E4,d7
000A667A 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
000A667C                            
000A667C                            locret_71F8C:
000A667C 4E75                       		rts	
000A667E                            ; ===========================================================================
000A667E                            
000A667E                            Sound_E0toE4:				; XREF: Sound_ChkValue
000A667E 0407 00E0                  		subi.b	#$E0,d7
000A6682 E54F                       		lsl.w	#2,d7
000A6684 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000A6688                            ; ===========================================================================
000A6688                            
000A6688                            Sound_ExIndex:
000A6688 6000 0000                  		bra.w	Sound_E0
000A668C                            ; ===========================================================================
000A668C 6000 0000                  		bra.w	Sound_E1
000A6690                            ; ===========================================================================
000A6690 6000 0000                  		bra.w	Sound_E2
000A6694                            ; ===========================================================================
000A6694 6000 0000                  		bra.w	Sound_E3
000A6698                            ; ===========================================================================
000A6698 6000 0000                  		bra.w	Sound_E4
000A669C                            ; ===========================================================================
000A669C                            ; ---------------------------------------------------------------------------
000A669C                            ; Play "Say-gaa" PCM sound
000A669C                            ; ---------------------------------------------------------------------------
000A669C                            
000A669C                            Sound_E1:
000A669C 33FC 0100 00A1 1100 0839+  		StopZ80						; MJ: request Z80 stop "ON"
000A66AE 45F9 0000 0000             		lea	(SegaPCM).l,a2				; MJ: load sample address
000A66B4 47F9 00A0 4000             		lea	($A04000).l,a3				; MJ: load YM2612 port
000A66BA 16FC 002A                  		move.b	#$2A,(a3)+				; MJ: set YM2612 address to the PCM data port
000A66BE 283C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM)-$01,d4		; MJ: prepare size
000A66C4 3604                       		move.w	d4,d3					; MJ: get lower word size
000A66C6 4844                       		swap	d4					; MJ: get upper word size
000A66C8                            
000A66C8                            PlayPCM_Loop:
000A66C8 169A                       		move.b	(a2)+,(a3)				; MJ: save sample data to port
000A66CA 702B                       		moveq	#$2B,d0					; MJ: set delay time
000A66CC 51C8 FFFE                  		dbf	d0,*					; MJ: delay...
000A66D0 51CB FFF6                  		dbf	d3,PlayPCM_Loop				; MJ: repeat til done
000A66D4 51CC FFF2                  		dbf	d4,PlayPCM_Loop				; MJ: ''
000A66D8 16BC 0080                  		move.b	#$80,(a3)				; MJ: save mute data to port
000A66DC 584F                       		addq.w	#$04,sp					; MJ: skip return address
000A66DE 534B                       		subq.w	#$01,a3					; MJ: move back to address port
000A66E0 4A13                       		tst.b	(a3)					; MJ: is the YM2612 busy?
000A66E2 6BFC                       		bmi.s	*-$02					; MJ: if so, branch and recheck
000A66E4 16BC 002A                  		move.b	#$2A,(a3)				; MJ: write address (set it back to DAC port for the Z80)
000A66E8 33FC 0000 00A1 1100        		StartZ80					; MJ: request Z80 stop "OFF"
000A66F0 4E75                       		rts						; MJ: return
000A66F2                            
000A66F2                            ; ===========================================================================
000A66F2                            ; ---------------------------------------------------------------------------
000A66F2                            ; Play music track $81-$9F
000A66F2                            ; ---------------------------------------------------------------------------
000A66F2                            
000A66F2                            Sound_81to9F:
000A66F2 33FC 0100 00A1 1100 0839+  		StopZ80
000A6704 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A670A 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A6710 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6712 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6714 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6716 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6718 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A671A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A671C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A671E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6720 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6722 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6724 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6726 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6728 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A6730 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A6736 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 2 slot address
000A673C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A673E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6740 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6742 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6744 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6746 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6748 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A674A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A674C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A674E 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6750 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6752 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6754 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A675C 33FC 0000 00A1 1100        		StartZ80
000A6764                            
000A6764 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
000A6768 6600                       		bne.s	loc_72024	; if not, branch
000A676A 4A2E 0027                  		tst.b	$27(a6)
000A676E 6600 0000                  		bne.w	loc_721B6
000A6772 4BEE 0040                  		lea	$40(a6),a5
000A6776 700A                       		moveq	#10,d0					; MJ: number of channels in total
000A6778                            
000A6778                            loc_71FE6:
000A6778 0895 0002                  		bclr	#2,(a5)
000A677C DAFC 0030                  		adda.w	#$30,a5
000A6780 51C8 FFF6                  		dbf	d0,loc_71FE6
000A6784                            
000A6784 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000A6788 7005                       		moveq	#5,d0
000A678A                            
000A678A                            loc_71FF8:
000A678A 0895 0007                  		bclr	#7,(a5)
000A678E DAFC 0030                  		adda.w	#$30,a5
000A6792 51C8 FFF6                  		dbf	d0,loc_71FF8
000A6796 4216                       		clr.b	0(a6)
000A6798 204E                       		movea.l	a6,a0
000A679A 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
000A679E 303C 0087                  		move.w	#$87,d0
000A67A2                            
000A67A2                            loc_72012:
000A67A2 22D8                       		move.l	(a0)+,(a1)+
000A67A4 51C8 FFFC                  		dbf	d0,loc_72012
000A67A8                            
000A67A8 1D7C 0080 0027             		move.b	#$80,$27(a6)
000A67AE 4216                       		clr.b	0(a6)
000A67B0 6000                       		bra.s	loc_7202C
000A67B2                            ; ===========================================================================
000A67B2                            
000A67B2                            loc_72024:
000A67B2 422E 0027                  		clr.b	$27(a6)
000A67B6 422E 0026                  		clr.b	$26(a6)
000A67BA                            
000A67BA                            loc_7202C:
000A67BA 4EBA 0000                  		jsr	sub_725CA(pc)
000A67BE                            
000A67BE 2879 000A 5C6C             		movea.l	(off_719A0).l,a4
000A67C4 0407 0081                  		subi.b	#$81,d7
000A67C8 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000A67CE 2879 000A 5C64             		movea.l	(Go_MusicIndex).l,a4
000A67D4 E54F                       		lsl.w	#2,d7
000A67D6 2874 7000                  		movea.l	(a4,d7.w),a4
000A67DA 7000                       		moveq	#0,d0
000A67DC 3014                       		move.w	(a4),d0
000A67DE D08C                       		add.l	a4,d0
000A67E0 2D40 0018                  		move.l	d0,$18(a6)
000A67E4 102C 0005                  		move.b	5(a4),d0
000A67E8 1D40 0028                  		move.b	d0,$28(a6)
000A67EC 4A2E 002A                  		tst.b	$2A(a6)
000A67F0 6700                       		beq.s	loc_72068
000A67F2 102E 0029                  		move.b	$29(a6),d0
000A67F6                            
000A67F6                            loc_72068:
000A67F6 1D40 0002                  		move.b	d0,2(a6)
000A67FA 1D40 0001                  		move.b	d0,1(a6)
000A67FE 7200                       		moveq	#0,d1
000A6800 264C                       		movea.l	a4,a3
000A6802 5C4C                       		addq.w	#6,a4
000A6804 7E00                       		moveq	#0,d7
000A6806 1E2B 0002                  		move.b	2(a3),d7
000A680A 6700 0000                  		beq.w	loc_72114
000A680E 5307                       		subq.b	#1,d7
000A6810 123C 00C0                  		move.b	#-$40,d1
000A6814 182B 0004                  		move.b	4(a3),d4
000A6818 7C30                       		moveq	#$30,d6
000A681A 1A3C 0001                  		move.b	#1,d5
000A681E 43EE 0040                  		lea	$40(a6),a1
000A6822 45FA 0000                  		lea	byte_721BA(pc),a2
000A6826                            
000A6826                            loc_72098:
000A6826 08D1 0007                  		bset	#7,(a1)
000A682A 135A 0001                  		move.b	(a2)+,1(a1)
000A682E 1344 0002                  		move.b	d4,2(a1)
000A6832 1346 000D                  		move.b	d6,$D(a1)
000A6836 1341 000A                  		move.b	d1,$A(a1)
000A683A 1345 000E                  		move.b	d5,$E(a1)
000A683E 7000                       		moveq	#0,d0
000A6840 3340 0010                  		move.w	d0,$10(a1)				; MJ: clear FM's frequency (ensures no frequency writing)
000A6844 137C 0080 000C             		move.b	#$80,$0C(a1)				; MJ: set last frame's volume to something impossible (volume is from C0 - 40)
000A684A 301C                       		move.w	(a4)+,d0
000A684C D08B                       		add.l	a3,d0
000A684E 2340 0004                  		move.l	d0,4(a1)
000A6852 335C 0008                  		move.w	(a4)+,8(a1)
000A6856 D2C6                       		adda.w	d6,a1
000A6858 51CF FFCC                  		dbf	d7,loc_72098
000A685C 702B                       		moveq	#$2B,d0					; MJ: set YM2612 address to DAC/FM6 switch
000A685E 123C 0080                  		move.b	#%10000000,d1				; MJ: set to turn DAC on
000A6862 0C2B 0008 0002             		cmpi.b	#8,2(a3)				; MJ: changed to 8 (8 = 6FM channels, no DAC)
000A6868 6600                       		bne.s	loc_720D8
000A686A                            	;	moveq	#$2B,d0					; MJ: removed...
000A686A 7200                       		moveq	#0,d1
000A686C 4EBA 0000                  		jsr	sub_7272E(pc)
000A6870 6000 0000                  		bra.w	loc_72114
000A6874                            ; ===========================================================================
000A6874                            
000A6874                            loc_720D8:
000A6874 4EBA 0000                  		jsr	sub_7272E(pc)				; MJ: added... (turn DAC on)
000A6878                            
000A6878                            	; --- Key off FM 6 ---
000A6878                            
000A6878 7028                       		moveq	#$28,d0
000A687A 7206                       		moveq	#6,d1
000A687C 4EBA 0000                  		jsr	sub_7272E(pc)
000A6880                            
000A6880                            	; --- Sets FM 6 to mute ---
000A6880                            
000A6880 103C 0042                  		move.b	#$42,d0
000A6884 727F                       		moveq	#$7F,d1
000A6886 4EBA 0000                  		jsr	sub_72764(pc)
000A688A 103C 004A                  		move.b	#$4A,d0
000A688E 727F                       		moveq	#$7F,d1
000A6890 4EBA 0000                  		jsr	sub_72764(pc)
000A6894 103C 0046                  		move.b	#$46,d0
000A6898 727F                       		moveq	#$7F,d1
000A689A 4EBA 0000                  		jsr	sub_72764(pc)
000A689E 103C 004E                  		move.b	#$4E,d0
000A68A2 727F                       		moveq	#$7F,d1
000A68A4 4EBA 0000                  		jsr	sub_72764(pc)
000A68A8 103C 00B6                  		move.b	#-$4A,d0
000A68AC 123C 00C0                  		move.b	#-$40,d1
000A68B0 4EBA 0000                  		jsr	sub_72764(pc)
000A68B4                            
000A68B4                            loc_72114:
000A68B4 7A02                       		moveq	#$02,d5					; EXT: set PSG to delay for 1 extra frame (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
000A68B6 7E00                       		moveq	#0,d7
000A68B8 1E2B 0003                  		move.b	3(a3),d7
000A68BC 6700                       		beq.s	loc_72154
000A68BE 5307                       		subq.b	#1,d7
000A68C0 43EE 01C0                  		lea	$1C0(a6),a1				; MJ: new BGM/SFX location
000A68C4 45FA 0000                  		lea	byte_721C2(pc),a2
000A68C8                            
000A68C8                            loc_72126:
000A68C8 08D1 0007                  		bset	#7,(a1)
000A68CC 135A 0001                  		move.b	(a2)+,1(a1)
000A68D0 1344 0002                  		move.b	d4,2(a1)
000A68D4 1346 000D                  		move.b	d6,$D(a1)
000A68D8 1345 000E                  		move.b	d5,$E(a1)
000A68DC 337C FFFF 0010             		move.w	#$FFFF,$10(a1)				; MJ: clear PSG's frequency (ensures no frequency writing)
000A68E2 137C 0001 0012             		move.b	#$01,$12(a1)				; MJ: set key release rate to 1
000A68E8 7000                       		moveq	#0,d0
000A68EA 301C                       		move.w	(a4)+,d0
000A68EC D08B                       		add.l	a3,d0
000A68EE 2340 0004                  		move.l	d0,4(a1)
000A68F2 335C 0008                  		move.w	(a4)+,8(a1)
000A68F6 101C                       		move.b	(a4)+,d0
000A68F8 135C 000B                  		move.b	(a4)+,$B(a1)
000A68FC D2C6                       		adda.w	d6,a1
000A68FE 51CF FFC8                  		dbf	d7,loc_72126
000A6902                            
000A6902                            loc_72154:
000A6902 43EE 0250                  		lea	$250(a6),a1				; MJ: new SFX location
000A6906 7E05                       		moveq	#5,d7
000A6908                            
000A6908                            loc_7215A:
000A6908 4A11                       		tst.b	(a1)
000A690A 6A00 0000                  		bpl.w	loc_7217C
000A690E 7000                       		moveq	#0,d0
000A6910 1029 0001                  		move.b	1(a1),d0
000A6914 6B00                       		bmi.s	loc_7216E
000A6916 5500                       		subq.b	#2,d0
000A6918 E508                       		lsl.b	#2,d0
000A691A 6000                       		bra.s	loc_72170
000A691C                            ; ===========================================================================
000A691C                            
000A691C                            loc_7216E:
000A691C E608                       		lsr.b	#3,d0
000A691E                            
000A691E                            loc_72170:
000A691E 41FA 0000                  		lea	dword_722CC(pc),a0
000A6922 2070 0000                  		movea.l	(a0,d0.w),a0
000A6926 08D0 0002                  		bset	#2,(a0)
000A692A                            
000A692A                            loc_7217C:
000A692A D2C6                       		adda.w	d6,a1
000A692C 51CF FFDA                  		dbf	d7,loc_7215A
000A6930                            
000A6930 4A6E 0370                  		tst.w	$370(a6)				; MJ: new SFX location
000A6934 6A00                       		bpl.s	loc_7218E
000A6936 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
000A693C                            
000A693C                            loc_7218E:
000A693C 4A6E 03A0                  		tst.w	$3A0(a6)				; MJ: new SFX location
000A6940 6A00                       		bpl.s	loc_7219A
000A6942 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
000A6948                            
000A6948                            
000A6948                            loc_7219A:
000A6948 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
000A694C 7805                       		moveq	#5,d4
000A694E                            
000A694E                            loc_721A0:
000A694E 4EBA 0000                  		jsr	sub_726FE(pc)
000A6952 DAC6                       		adda.w	d6,a5
000A6954 51CC FFF8                  		dbf	d4,loc_721A0
000A6958 7802                       		moveq	#2,d4
000A695A                            
000A695A                            loc_721AC:
000A695A 4EBA 0000                  		jsr	sub_729A0(pc)
000A695E DAC6                       		adda.w	d6,a5
000A6960 51CC FFF8                  		dbf	d4,loc_721AC
000A6964                            
000A6964                            loc_721B6:
000A6964 584F                       		addq.w	#4,sp
000A6966 4E75                       		rts	
000A6968                            ; ===========================================================================
000A6968 0606 0001 0204 0506 00     byte_721BA:	dc.b 6,	6, 0, 1, 2, 4, 5, 6, 0			; MJ: extra 6 (for PCM 2)
000A6972 00                         		even
000A6972 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
000A6976                            		even
000A6976                            ; ===========================================================================
000A6976                            ; ---------------------------------------------------------------------------
000A6976                            ; Play normal sound effect
000A6976                            ; ---------------------------------------------------------------------------
000A6976                            
000A6976                            Sound_A0toCF:				; XREF: Sound_ChkValue
000A6976 4A2E 0027                  		tst.b	$27(a6)
000A697A 6600 0000                  		bne.w	loc_722C6
000A697E 4A2E 0004                  		tst.b	4(a6)
000A6982 6600 0000                  		bne.w	loc_722C6
000A6986 4A2E 0024                  		tst.b	$24(a6)
000A698A 6600 0000                  		bne.w	loc_722C6
000A698E 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000A6992 6600                       		bne.s	Sound_notB5	; if not, branch
000A6994 4A2E 002B                  		tst.b	$2B(a6)
000A6998 6600                       		bne.s	loc_721EE
000A699A 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000A699E                            
000A699E                            loc_721EE:
000A699E 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000A69A4                            
000A69A4                            Sound_notB5:
000A69A4 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000A69A8 6600                       		bne.s	Sound_notA7	; if not, branch
000A69AA 4A2E 002C                  		tst.b	$2C(a6)
000A69AE 6600 0000                  		bne.w	locret_722C4
000A69B2 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000A69B8                            
000A69B8                            Sound_notA7:
000A69B8 2079 000A 5C68             		movea.l	(Go_SoundIndex).l,a0
000A69BE 0407 00A0                  		subi.b	#$A0,d7
000A69C2 E54F                       		lsl.w	#2,d7
000A69C4 2670 7000                  		movea.l	(a0,d7.w),a3
000A69C8 224B                       		movea.l	a3,a1
000A69CA 7200                       		moveq	#0,d1
000A69CC 3219                       		move.w	(a1)+,d1
000A69CE D28B                       		add.l	a3,d1
000A69D0 1A19                       		move.b	(a1)+,d5
000A69D2 1E19                       		move.b	(a1)+,d7
000A69D4 5307                       		subq.b	#1,d7
000A69D6 7C30                       		moveq	#$30,d6
000A69D8                            
000A69D8                            loc_72228:
000A69D8 7600                       		moveq	#0,d3
000A69DA 1629 0001                  		move.b	1(a1),d3
000A69DE 7403                       		moveq	#$03,d2					; EXT: set PSG to delay for 2 extra frames (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
000A69E0 1803                       		move.b	d3,d4
000A69E2 6B00                       		bmi.s	loc_72244
000A69E4 143C 0001                  		move.b	#$01,d2					; EXT: set DAC/FM to delay for 0 frames like normal (these have an auto delay of 1 frame in the Z80)
000A69E8 5543                       		subq.w	#2,d3
000A69EA E54B                       		lsl.w	#2,d3
000A69EC 4BFA 0000                  		lea	dword_722CC(pc),a5
000A69F0 2A75 3000                  		movea.l	(a5,d3.w),a5
000A69F4 08D5 0002                  		bset	#2,(a5)
000A69F8 6000                       		bra.s	loc_7226E
000A69FA                            ; ===========================================================================
000A69FA                            
000A69FA                            loc_72244:
000A69FA E64B                       		lsr.w	#3,d3
000A69FC 4BFA 0000                  		lea	dword_722CC(pc),a5
000A6A00 2A75 3000                  		movea.l	(a5,d3.w),a5
000A6A04 08D5 0002                  		bset	#2,(a5)
000A6A08 0C04 00C0                  		cmpi.b	#$C0,d4
000A6A0C 6600                       		bne.s	loc_7226E
000A6A0E 1004                       		move.b	d4,d0
000A6A10 0000 001F                  		ori.b	#$1F,d0
000A6A14 13C0 00C0 0011             		move.b	d0,($C00011).l
000A6A1A 0840 0005                  		bchg	#5,d0
000A6A1E 13C0 00C0 0011             		move.b	d0,($C00011).l
000A6A24                            
000A6A24                            loc_7226E:
000A6A24 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
000A6A28 244D                       		movea.l	a5,a2
000A6A2A 700B                       		moveq	#$B,d0
000A6A2C                            
000A6A2C                            loc_72276:
000A6A2C 429A                       		clr.l	(a2)+
000A6A2E 51C8 FFFC                  		dbf	d0,loc_72276
000A6A32                            
000A6A32 3A99                       		move.w	(a1)+,(a5)
000A6A34 1B45 0002                  		move.b	d5,2(a5)
000A6A38 7000                       		moveq	#0,d0
000A6A3A 3019                       		move.w	(a1)+,d0
000A6A3C D08B                       		add.l	a3,d0
000A6A3E 2B40 0004                  		move.l	d0,4(a5)
000A6A42 3B59 0008                  		move.w	(a1)+,8(a5)
000A6A46 1B42 000E                  		move.b	d2,$E(a5)				; EXT: moving d2 contents (1 for FM/4 for PSG)
000A6A4A 1B46 000D                  		move.b	d6,$D(a5)
000A6A4E 3B7C FFFF 0010             		move.w	#$FFFF,$10(a5)				; CHG: clear PSG's frequency (ensures no frequency writing)
000A6A54 4A04                       		tst.b	d4
000A6A56 6B00                       		bmi.s	loc_722A8
000A6A58 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000A6A5E 2B41 0020                  		move.l	d1,$20(a5)
000A6A62                            
000A6A62                            loc_722A8:
000A6A62 51CF FF74                  		dbf	d7,loc_72228
000A6A66                            
000A6A66 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000A6A6A 6A00                       		bpl.s	loc_722B8
000A6A6C 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
000A6A72                            
000A6A72                            loc_722B8:
000A6A72 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
000A6A76 6A00                       		bpl.s	locret_722C4
000A6A78 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
000A6A7E                            
000A6A7E                            locret_722C4:
000A6A7E 4E75                       		rts	
000A6A80                            ; ===========================================================================
000A6A80                            
000A6A80                            loc_722C6:
000A6A80 4216                       		clr.b	0(a6)
000A6A82 4E75                       		rts	
000A6A84                            ; ===========================================================================
000A6A84 00FF F100                  dword_722CC:	dc.l $FFF0D0+$30				; MJ: new locations (see all +$30)
000A6A88 0000 0000                  		dc.l 0
000A6A8C 00FF F130                  		dc.l $FFF100+$30
000A6A90 00FF F160                  		dc.l $FFF130+$30
000A6A94 00FF F1C0                  		dc.l $FFF190+$30
000A6A98 00FF F1F0                  		dc.l $FFF1C0+$30
000A6A9C 00FF F220                  		dc.l $FFF1F0+$30
000A6AA0 00FF F220                  		dc.l $FFF1F0+$30
000A6AA4 00FF F250                  dword_722EC:	dc.l $FFF220+$30
000A6AA8 0000 0000                  		dc.l 0
000A6AAC 00FF F280                  		dc.l $FFF250+$30
000A6AB0 00FF F2B0                  		dc.l $FFF280+$30
000A6AB4 00FF F2E0                  		dc.l $FFF2B0+$30
000A6AB8 00FF F310                  		dc.l $FFF2E0+$30
000A6ABC 00FF F340                  		dc.l $FFF310+$30
000A6AC0 00FF F340                  		dc.l $FFF310+$30
000A6AC4                            ; ===========================================================================
000A6AC4                            ; ---------------------------------------------------------------------------
000A6AC4                            ; Play GHZ waterfall sound
000A6AC4                            ; ---------------------------------------------------------------------------
000A6AC4                            
000A6AC4                            Sound_D0toDF:				; XREF: Sound_ChkValue
000A6AC4 4A2E 0027                  		tst.b	$27(a6)
000A6AC8 6600 0000                  		bne.w	locret_723C6
000A6ACC 4A2E 0004                  		tst.b	4(a6)
000A6AD0 6600 0000                  		bne.w	locret_723C6
000A6AD4 4A2E 0024                  		tst.b	$24(a6)
000A6AD8 6600 0000                  		bne.w	locret_723C6
000A6ADC 2079 000A 5C60             		movea.l	(Go_SoundD0).l,a0
000A6AE2 0407 00D0                  		subi.b	#$D0,d7
000A6AE6 E54F                       		lsl.w	#2,d7
000A6AE8 2670 7000                  		movea.l	(a0,d7.w),a3
000A6AEC 224B                       		movea.l	a3,a1
000A6AEE 7000                       		moveq	#0,d0
000A6AF0 3019                       		move.w	(a1)+,d0
000A6AF2 D08B                       		add.l	a3,d0
000A6AF4 2D40 0020                  		move.l	d0,$20(a6)
000A6AF8 1A19                       		move.b	(a1)+,d5
000A6AFA 1E19                       		move.b	(a1)+,d7
000A6AFC 5307                       		subq.b	#1,d7
000A6AFE 7C30                       		moveq	#$30,d6
000A6B00                            
000A6B00                            loc_72348:
000A6B00 1829 0001                  		move.b	1(a1),d4
000A6B04 6B00                       		bmi.s	loc_7235A
000A6B06 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
000A6B0C 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A6B10 6000                       		bra.s	loc_72364
000A6B12                            ; ===========================================================================
000A6B12                            
000A6B12                            loc_7235A:
000A6B12 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
000A6B18 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
000A6B1C                            
000A6B1C                            loc_72364:
000A6B1C 244D                       		movea.l	a5,a2
000A6B1E 700B                       		moveq	#$B,d0
000A6B20                            
000A6B20                            loc_72368:
000A6B20 429A                       		clr.l	(a2)+
000A6B22 51C8 FFFC                  		dbf	d0,loc_72368
000A6B26                            
000A6B26 3A99                       		move.w	(a1)+,(a5)
000A6B28 1B45 0002                  		move.b	d5,2(a5)
000A6B2C 7000                       		moveq	#0,d0
000A6B2E 3019                       		move.w	(a1)+,d0
000A6B30 D08B                       		add.l	a3,d0
000A6B32 2B40 0004                  		move.l	d0,4(a5)
000A6B36 3B59 0008                  		move.w	(a1)+,8(a5)
000A6B3A 1B7C 0001 000E             		move.b	#1,$E(a5)
000A6B40 1B46 000D                  		move.b	d6,$D(a5)
000A6B44 4A04                       		tst.b	d4
000A6B46 6B00                       		bmi.s	loc_72396
000A6B48 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000A6B4E                            
000A6B4E                            loc_72396:
000A6B4E 51CF FFB0                  		dbf	d7,loc_72348
000A6B52                            
000A6B52 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000A6B56 6A00                       		bpl.s	loc_723A6
000A6B58 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
000A6B5E                            
000A6B5E                            loc_723A6:
000A6B5E 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
000A6B62 6A00                       		bpl.s	locret_723C6
000A6B64 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
000A6B6A 0004 001F                  		ori.b	#$1F,d4
000A6B6E 13C4 00C0 0011             		move.b	d4,($C00011).l
000A6B74 0844 0005                  		bchg	#5,d4
000A6B78 13C4 00C0 0011             		move.b	d4,($C00011).l
000A6B7E                            
000A6B7E                            locret_723C6:
000A6B7E 4E75                       		rts	
000A6B80                            ; End of function Sound_ChkValue
000A6B80                            
000A6B80                            ; ===========================================================================
000A6B80 00FF F130                  		dc.l $FFF100+$30				; MJ: new channel locations (see +$30)
000A6B84 00FF F220                  		dc.l $FFF1F0+$30
000A6B88 00FF F280                  		dc.l $FFF250+$30
000A6B8C 00FF F340                  		dc.l $FFF310+$30
000A6B90 00FF F370                  		dc.l $FFF340+$30
000A6B94 00FF F3A0                  		dc.l $FFF370+$30
000A6B98                            
000A6B98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6B98                            
000A6B98                            
000A6B98                            Snd_FadeOut1:				; XREF: Sound_E0
000A6B98 4216                       		clr.b	0(a6)
000A6B9A 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000A6B9E 7E05                       		moveq	#5,d7
000A6BA0                            
000A6BA0                            loc_723EA:
000A6BA0 4A15                       		tst.b	(a5)
000A6BA2 6A00 0000                  		bpl.w	loc_72472
000A6BA6 0895 0007                  		bclr	#7,(a5)
000A6BAA 7600                       		moveq	#0,d3
000A6BAC 162D 0001                  		move.b	1(a5),d3
000A6BB0 6B00                       		bmi.s	loc_7243C
000A6BB2 4EBA 0000                  		jsr	sub_726FE(pc)
000A6BB6 0C03 0004                  		cmpi.b	#4,d3
000A6BBA 6600                       		bne.s	loc_72416
000A6BBC 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
000A6BC0 6A00                       		bpl.s	loc_72416
000A6BC2 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A6BC6 226E 0020                  		movea.l	$20(a6),a1
000A6BCA 6000                       		bra.s	loc_72428
000A6BCC                            ; ===========================================================================
000A6BCC                            
000A6BCC                            loc_72416:
000A6BCC 5503                       		subq.b	#2,d3
000A6BCE E50B                       		lsl.b	#2,d3
000A6BD0 41FA FEB2                  		lea	dword_722CC(pc),a0
000A6BD4 264D                       		movea.l	a5,a3
000A6BD6 2A70 3000                  		movea.l	(a0,d3.w),a5
000A6BDA 226E 0018                  		movea.l	$18(a6),a1
000A6BDE                            
000A6BDE                            loc_72428:
000A6BDE 0895 0002                  		bclr	#2,(a5)
000A6BE2 08D5 0001                  		bset	#1,(a5)
000A6BE6 102D 000B                  		move.b	$B(a5),d0
000A6BEA 4EBA 0000                  		jsr	sub_72C4E(pc)
000A6BEE 2A4B                       		movea.l	a3,a5
000A6BF0 6000                       		bra.s	loc_72472
000A6BF2                            ; ===========================================================================
000A6BF2                            
000A6BF2                            loc_7243C:
000A6BF2 4EBA 0000                  		jsr	sub_729A0(pc)
000A6BF6 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
000A6BFA 0C03 00E0                  		cmpi.b	#$E0,d3
000A6BFE 6700                       		beq.s	loc_7245A
000A6C00 0C03 00C0                  		cmpi.b	#$C0,d3
000A6C04 6700                       		beq.s	loc_7245A
000A6C06 E60B                       		lsr.b	#3,d3
000A6C08 41FA FE7A                  		lea	dword_722CC(pc),a0
000A6C0C 2070 3000                  		movea.l	(a0,d3.w),a0
000A6C10                            
000A6C10                            loc_7245A:
000A6C10 0890 0002                  		bclr	#2,(a0)
000A6C14 08D0 0001                  		bset	#1,(a0)
000A6C18 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000A6C1E 6600                       		bne.s	loc_72472
000A6C20 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000A6C28                            
000A6C28                            loc_72472:
000A6C28 DAFC 0030                  		adda.w	#$30,a5
000A6C2C 51CF FF72                  		dbf	d7,loc_723EA
000A6C30                            
000A6C30 4E75                       		rts	
000A6C32                            ; End of function Snd_FadeOut1
000A6C32                            
000A6C32                            
000A6C32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6C32                            
000A6C32                            
000A6C32                            Snd_FadeOut2:				; XREF: Sound_E0
000A6C32 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A6C36 4A15                       		tst.b	(a5)
000A6C38 6A00                       		bpl.s	loc_724AE
000A6C3A 0895 0007                  		bclr	#7,(a5)
000A6C3E 0815 0002                  		btst	#2,(a5)
000A6C42 6600                       		bne.s	loc_724AE
000A6C44 4A2E 000E                  	tst.b	$0E(a6)
000A6C48 6600                       	bne.s	loc_724AE_2
000A6C4A 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6C4E 6600                       	bne.s	loc_724AE
000A6C50                            
000A6C50                            	loc_724AE_2:
000A6C50 4EBA 0000                  		jsr	loc_7270A(pc)
000A6C54 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
000A6C58 0895 0002                  		bclr	#2,(a5)
000A6C5C 08D5 0001                  		bset	#1,(a5)
000A6C60 4A15                       		tst.b	(a5)
000A6C62 6A00                       		bpl.s	loc_724AE
000A6C64 226E 0018                  		movea.l	$18(a6),a1
000A6C68 102D 000B                  		move.b	$B(a5),d0
000A6C6C 4EBA 0000                  		jsr	sub_72C4E(pc)
000A6C70                            
000A6C70                            loc_724AE:
000A6C70 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
000A6C74 4A15                       		tst.b	(a5)
000A6C76 6A00                       		bpl.s	locret_724E4
000A6C78 0895 0007                  		bclr	#7,(a5)
000A6C7C 0815 0002                  		btst	#2,(a5)
000A6C80 6600                       		bne.s	locret_724E4
000A6C82 4A2E 000E                  	tst.b	$0E(a6)
000A6C86 6600                       	bne.s	locret_724E4_2
000A6C88 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6C8C 6600                       	bne.s	locret_724E4
000A6C8E                            
000A6C8E                            	locret_724E4_2:
000A6C8E 4EBA 0000                  		jsr	loc_729A6(pc)
000A6C92 4BEE 0220                  		lea	$220(a6),a5				; MJ: new BGM location
000A6C96 0895 0002                  		bclr	#2,(a5)
000A6C9A 08D5 0001                  		bset	#1,(a5)
000A6C9E 4A15                       		tst.b	(a5)
000A6CA0 6A00                       		bpl.s	locret_724E4
000A6CA2 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000A6CA8 6600                       		bne.s	locret_724E4
000A6CAA 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000A6CB2                            
000A6CB2                            locret_724E4:
000A6CB2 4E75                       		rts	
000A6CB4                            ; End of function Snd_FadeOut2
000A6CB4                            
000A6CB4                            ; ===========================================================================
000A6CB4                            ; ---------------------------------------------------------------------------
000A6CB4                            ; Fade out music
000A6CB4                            ; ---------------------------------------------------------------------------
000A6CB4                            
000A6CB4                            Sound_E0:				; XREF: Sound_ExIndex
000A6CB4 4EBA FEE2                  		jsr	Snd_FadeOut1(pc)
000A6CB8 4EBA FF78                  		jsr	Snd_FadeOut2(pc)
000A6CBC 1D7C 0003 0006             		move.b	#3,6(a6)
000A6CC2 1D7C 0028 0004             		move.b	#$28,4(a6)
000A6CC8                            	;	clr.b	$40(a6)
000A6CC8                            	;	clr.b	$70(a6)					; MJ: stop PCM 2 as well
000A6CC8 422E 002A                  		clr.b	$2A(a6)
000A6CCC 4E75                       		rts	
000A6CCE                            
000A6CCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6CCE                            
000A6CCE                            
000A6CCE                            sub_72504:				; XREF: sub_71B4C
000A6CCE 102E 0006                  		move.b	6(a6),d0
000A6CD2 6700                       		beq.s	loc_72510
000A6CD4 532E 0006                  		subq.b	#1,6(a6)
000A6CD8 4E75                       		rts	
000A6CDA                            ; ===========================================================================
000A6CDA                            
000A6CDA                            loc_72510:
000A6CDA 532E 0004                  		subq.b	#1,4(a6)
000A6CDE 6700 0000                  		beq.w	Sound_E4
000A6CE2 1D7C 0003 0006             		move.b	#3,6(a6)
000A6CE8                            
000A6CE8                            
000A6CE8 43F9 00A0 0634             		lea	($A00000+PCM_ChangeVolume).l,a1		; CHG: load volume change instruction address
000A6CEE 7C00                       		moveq	#$00,d6					; CHG: clear d6
000A6CF0 1C2E 0004                  		move.b	$04(a6),d6				; CHG: load fade counter
000A6CF4 72D2                       		moveq	#($FFFFFF00|%11010010),d1		; prepare Z80 "JP NC" instruction
000A6CF6 4BEE 0040                  		lea	$40(a6),a5				; CHG: load PCM 1 address
000A6CFA 41F9 00A0 0642             		lea	($A00000+PCM1_Volume+1).l,a0		; CHG: load PCM 1 volume address
000A6D00 6100                       		bsr.s	FadeOut_PCM				; CHG: do PCM 1
000A6D02 41F9 00A0 0647             		lea	($A00000+PCM2_Volume+1).l,a0		; CHG: load PCM 2 volume address
000A6D08 6100                       		bsr.s	FadeOut_PCM				; CHG: do PCM 2
000A6D0A 6000 0000                  		bra.w	FadeOut_FM				; CHG: continue to FM fade out
000A6D0E                            
000A6D0E                            FadeOut_PCM:
000A6D0E 4A15                       		tst.b	(a5)					; CHG: is the channel running?
000A6D10 6A00                       		bpl.s	FOP_NotRunning				; CHG: if not, branch
000A6D12 7000                       		moveq	#$00,d0					; CHG: clear d0
000A6D14 102D 0009                  		move.b	$09(a5),d0				; CHG: load volume
000A6D18 6A00                       		bpl.s	FOP_NoMute				; CHG: if the channel is not mute (not from 80 - FF), branch
000A6D1A 7080                       		moveq	#$FFFFFF80,d0				; CHG: force volume 80 (mute)
000A6D1C 0895 0007                  		bclr	#$07,(a5)				; CHG: stop PCM channel
000A6D20 6000                       		bra.s	FOP_Mute				; CHG: continue to mute the channel
000A6D22                            
000A6D22                            FOP_NoMute:
000A6D22                            	;	add.b	FOP_FadeList(pc,d0.w),d0		; CHG: reduce the volume
000A6D22 5400                       	addq.b	#$02,d0					; reduce the volume
000A6D24                            
000A6D24                            FOP_Mute:
000A6D24 1B40 0009                  		move.b	d0,$09(a5)				; CHG: update
000A6D28 B02D 000C                  		cmp.b	$0C(a5),d0				; CHG: has the volume changed?
000A6D2C 6700                       		beq.s	FOP_NotRunning				; CHG: if not, branch
000A6D2E 1B40 000C                  		move.b	d0,$0C(a5)				; CHG: update volume
000A6D32 142E 0004                  	move.b	$04(a6),d2				; CHG: load fade timer
000A6D36 0202 0003                  	andi.b	#$03,d2					; CHG: has it been four frames?
000A6D3A 6600                       	bne.s	FOP_NotRunning				; CHG: if not, branch (temp until Z80 volume struggling is fixed)
000A6D3C 33FC 0100 00A1 1100 0839+  		StopZ80
000A6D4E 1080                       		move.b	d0,(a0)					; change PCM volume
000A6D50 1281                       		move.b	d1,(a1)					; change "JP C" to "JP NC"
000A6D52 33FC 0000 00A1 1100        		StartZ80
000A6D5A                            
000A6D5A                            FOP_NotRunning:
000A6D5A 4BED 0030                  		lea	$30(a5),a5				; CHG: advance to next channel
000A6D5E 4E75                       		rts						; CHG: return
000A6D60                            
000A6D60                            ;FOP_FadeList:	dc.b	$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
000A6D60                            ;		dc.b	$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
000A6D60                            ;		dc.b	$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08
000A6D60                            ;		dc.b	$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08
000A6D60                            ;		dc.b	$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
000A6D60                            ;		dc.b	$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
000A6D60                            ;		dc.b	$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000A6D60                            ;		dc.b	$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
000A6D60                            
000A6D60                            ;FOP_VolumeList:	dc.b	$00,$0C,$18,$20,$28,$30,$34,$38,$3C,$40,$44,$48,$4C,$50,$56,$5A
000A6D60                            ;		dc.b	$60,$63,$66,$69,$6B,$6D,$6F,$70,$71,$72,$73,$74,$75,$76,$76,$77
000A6D60                            ;		dc.b	$77,$78,$78,$79,$79,$79,$7A,$7A,$7A,$7B,$7B,$7B,$7C,$7C,$7C,$7C
000A6D60                            ;		dc.b	$7D,$7D,$7D,$7D,$7D,$7D,$7D,$7D,$7E,$7E,$7E,$7E,$7E,$7E,$7E,$7E
000A6D60                            ;		dc.b	$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
000A6D60                            ;		dc.b	$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
000A6D60                            ;		dc.b	$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000A6D60                            ;		dc.b	$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000A6D60                            
000A6D60                            ; ===========================================================================
000A6D60                            
000A6D60                            FadeOut_FM:
000A6D60 7E05                       		moveq	#5,d7
000A6D62                            
000A6D62                            loc_72524:
000A6D62 4A15                       		tst.b	(a5)
000A6D64 6A00                       		bpl.s	loc_72538
000A6D66 522D 0009                  		addq.b	#1,9(a5)
000A6D6A 6A00                       		bpl.s	loc_72534
000A6D6C 0895 0007                  		bclr	#7,(a5)
000A6D70 6000                       		bra.s	loc_72538
000A6D72                            ; ===========================================================================
000A6D72                            
000A6D72                            loc_72534:
000A6D72 4EBA 0000                  		jsr	sub_72CB4(pc)
000A6D76                            
000A6D76                            loc_72538:
000A6D76 DAFC 0030                  		adda.w	#$30,a5
000A6D7A 51CF FFE6                  		dbf	d7,loc_72524
000A6D7E                            
000A6D7E 7E02                       		moveq	#2,d7
000A6D80                            
000A6D80                            loc_72542:
000A6D80 4A15                       		tst.b	(a5)
000A6D82 6A00                       		bpl.s	loc_72560
000A6D84 522D 0009                  		addq.b	#1,9(a5)
000A6D88 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
000A6D8E 6500                       		bcs.s	loc_72558
000A6D90 0895 0007                  		bclr	#7,(a5)
000A6D94 6000                       		bra.s	loc_72560
000A6D96                            ; ===========================================================================
000A6D96                            
000A6D96                            loc_72558:
000A6D96 1C2D 0009                  		move.b	9(a5),d6
000A6D9A DC2E 0016                  	add.b	$16(a6),d6			; EXTRA
000A6D9E 4EBA 0000                  		jsr	sub_7296A(pc)
000A6DA2                            
000A6DA2                            loc_72560:
000A6DA2 DAFC 0030                  		adda.w	#$30,a5
000A6DA6 51CF FFD8                  		dbf	d7,loc_72542
000A6DAA                            
000A6DAA 4E75                       		rts	
000A6DAC                            ; End of function sub_72504
000A6DAC                            
000A6DAC                            
000A6DAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6DAC                            
000A6DAC                            
000A6DAC                            sub_7256A:				; XREF: Sound_E4; sub_725CA
000A6DAC 7602                       		moveq	#2,d3
000A6DAE 7028                       		moveq	#$28,d0
000A6DB0                            
000A6DB0                            loc_7256E:
000A6DB0 1203                       		move.b	d3,d1
000A6DB2 4EBA 0000                  		jsr	sub_7272E(pc)
000A6DB6 5801                       		addq.b	#4,d1
000A6DB8 4EBA 0000                  		jsr	sub_7272E(pc)
000A6DBC 51CB FFF2                  		dbf	d3,loc_7256E
000A6DC0                            
000A6DC0 7040                       		moveq	#$40,d0
000A6DC2 727F                       		moveq	#$7F,d1
000A6DC4 7802                       		moveq	#2,d4
000A6DC6                            
000A6DC6                            loc_72584:
000A6DC6 7603                       		moveq	#3,d3
000A6DC8                            
000A6DC8                            loc_72586:
000A6DC8 4EBA 0000                  		jsr	sub_7272E(pc)
000A6DCC 4EBA 0000                  		jsr	sub_72764(pc)
000A6DD0 5840                       		addq.w	#4,d0
000A6DD2 51CB FFF4                  		dbf	d3,loc_72586
000A6DD6                            
000A6DD6 0400 000F                  		subi.b	#$F,d0
000A6DDA 51CC FFEA                  		dbf	d4,loc_72584
000A6DDE                            
000A6DDE 4E75                       		rts	
000A6DE0                            ; End of function sub_7256A
000A6DE0                            
000A6DE0                            ; ===========================================================================
000A6DE0                            ; ---------------------------------------------------------------------------
000A6DE0                            ; Stop music
000A6DE0                            ; ---------------------------------------------------------------------------
000A6DE0                            
000A6DE0                            Sound_E4:
000A6DE0 33FC 0100 00A1 1100 0839+  		StopZ80
000A6DF2 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A6DF8 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A6DFE 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6E00 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6E02 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6E04 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6E06 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6E08 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6E0A 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6E0C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6E0E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6E10 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6E12 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6E14 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6E16 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A6E1E 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A6E24 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 2 slot address
000A6E2A 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6E2C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6E2E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6E30 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6E32 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6E34 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6E36 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6E38 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6E3A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6E3C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6E3E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6E40 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6E42 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A6E4A 33FC 0000 00A1 1100        		StartZ80
000A6E52                            
000A6E52 702B                       		moveq	#$2B,d0
000A6E54 123C 0080                  		move.b	#$80,d1
000A6E58 4EBA 0000                  		jsr	sub_7272E(pc)
000A6E5C 7027                       		moveq	#$27,d0
000A6E5E 7200                       		moveq	#0,d1
000A6E60 4EBA 0000                  		jsr	sub_7272E(pc)
000A6E64 204E                       		movea.l	a6,a0
000A6E66 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
000A6E6A 2F2E 0014                  	move.l	$14(a6),-(sp)			; EXTRA
000A6E6E 303C 00EF                  		move.w	#$EF,d0						; MJ: new size of data to clear
000A6E72                            
000A6E72                            loc_725B6:
000A6E72 4298                       		clr.l	(a0)+
000A6E74 51C8 FFFC                  		dbf	d0,loc_725B6
000A6E78                            
000A6E78 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
000A6E7C 2D5F 0014                  	move.l	(sp)+,$14(a6)			; EXTRA
000A6E80 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
000A6E86 4EBA FF24                  		jsr	sub_7256A(pc)
000A6E8A 6000 0000                  		bra.w	sub_729B6
000A6E8E                            
000A6E8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6E8E                            
000A6E8E                            
000A6E8E                            sub_725CA:				; XREF: Sound_ChkValue
000A6E8E 204E                       		movea.l	a6,a0
000A6E90 1216                       		move.b	0(a6),d1
000A6E92 142E 0027                  		move.b	$27(a6),d2
000A6E96 162E 002A                  		move.b	$2A(a6),d3
000A6E9A 182E 0026                  		move.b	$26(a6),d4
000A6E9E 3A2E 000A                  		move.w	$A(a6),d5
000A6EA2 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
000A6EA6 2F2E 0014                  	move.l	$14(a6),-(sp)			; EXTRA
000A6EAA 303C 0093                  		move.w	#$93,d0						; MJ: new size
000A6EAE                            
000A6EAE                            loc_725E4:
000A6EAE 4298                       		clr.l	(a0)+
000A6EB0 51C8 FFFC                  		dbf	d0,loc_725E4
000A6EB4                            
000A6EB4 1C81                       		move.b	d1,0(a6)
000A6EB6 1D42 0027                  		move.b	d2,$27(a6)
000A6EBA 1D43 002A                  		move.b	d3,$2A(a6)
000A6EBE 1D44 0026                  		move.b	d4,$26(a6)
000A6EC2 3D45 000A                  		move.w	d5,$A(a6)
000A6EC6 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
000A6ECA 2D5F 0014                  	move.l	(sp)+,$14(a6)			; EXTRA
000A6ECE 1D7C 0080 0009             		move.b	#$80,9(a6)
000A6ED4 4EBA FED6                  		jsr	sub_7256A(pc)
000A6ED8 6000 0000                  		bra.w	sub_729B6
000A6EDC                            ; End of function sub_725CA
000A6EDC                            
000A6EDC                            
000A6EDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6EDC                            
000A6EDC                            
000A6EDC                            sub_7260C:				; XREF: sub_71B4C
000A6EDC                            	;	move.b	2(a6),1(a6)
000A6EDC 102E 0015                  	move.b	$15(a6),d0			; EXTRA
000A6EE0 6A00                       	bpl.s	STempo_CheckMax			; EXTRA
000A6EE2 D02E 0002                  	add.b	$02(a6),d0			; EXTRA
000A6EE6 0C00 0002                  	cmpi.b	#$02,d0				; EXTRA
000A6EEA 6A00                       	bpl.s	STempo_Valid			; EXTRA
000A6EEC 7002                       	moveq	#$02,d0				; EXTRA
000A6EEE 6000                       	bra.s	STempo_Valid			; EXTRA
000A6EF0                            
000A6EF0                            STempo_CheckMax:
000A6EF0 D02E 0002                  	add.b	$02(a6),d0			; EXTRA
000A6EF4                            
000A6EF4                            STempo_Valid:
000A6EF4 1D40 0001                  	move.b	d0,$01(a6)			; EXTRA
000A6EF8                            
000A6EF8 41EE 004E                  		lea	$4E(a6),a0
000A6EFC 7030                       		moveq	#$30,d0
000A6EFE 720A                       		moveq	#10,d1						; MJ: new number of channels
000A6F00                            
000A6F00                            loc_7261A:
000A6F00 5210                       		addq.b	#1,(a0)
000A6F02 D0C0                       		adda.w	d0,a0
000A6F04 51C9 FFFA                  		dbf	d1,loc_7261A
000A6F08                            
000A6F08 4E75                       		rts	
000A6F0A                            ; End of function sub_7260C
000A6F0A                            
000A6F0A                            ; ===========================================================================
000A6F0A                            ; ---------------------------------------------------------------------------
000A6F0A                            ; Speed	up music
000A6F0A                            ; ---------------------------------------------------------------------------
000A6F0A                            
000A6F0A                            Sound_E2:				; XREF: Sound_ExIndex
000A6F0A 4A2E 0027                  		tst.b	$27(a6)
000A6F0E 6600                       		bne.s	loc_7263E
000A6F10 1D6E 0029 0002             		move.b	$29(a6),2(a6)
000A6F16 1D6E 0029 0001             		move.b	$29(a6),1(a6)
000A6F1C 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000A6F22 4E75                       		rts	
000A6F24                            ; ===========================================================================
000A6F24                            
000A6F24                            loc_7263E:
000A6F24 1D6E 03F9 03D2             		move.b	$3F9(a6),$3D2(a6)			; MJ: new location
000A6F2A 1D6E 03F9 03D1             		move.b	$3F9(a6),$3D1(a6)			; MJ: new location
000A6F30 1D7C 0080 03FA             		move.b	#$80,$3FA(a6)
000A6F36 4E75                       		rts	
000A6F38                            ; ===========================================================================
000A6F38                            ; ---------------------------------------------------------------------------
000A6F38                            ; Change music back to normal speed
000A6F38                            ; ---------------------------------------------------------------------------
000A6F38                            
000A6F38                            Sound_E3:				; XREF: Sound_ExIndex
000A6F38 4A2E 0027                  		tst.b	$27(a6)
000A6F3C 6600                       		bne.s	loc_7266A
000A6F3E 1D6E 0028 0002             		move.b	$28(a6),2(a6)
000A6F44 1D6E 0028 0001             		move.b	$28(a6),1(a6)
000A6F4A 422E 002A                  		clr.b	$2A(a6)
000A6F4E 4E75                       		rts	
000A6F50                            ; ===========================================================================
000A6F50                            
000A6F50                            loc_7266A:
000A6F50 1D6E 03F8 03D2             		move.b	$3F8(a6),$3D2(a6)
000A6F56 1D6E 03F8 03D1             		move.b	$3F8(a6),$3D1(a6)
000A6F5C 422E 03FA                  		clr.b	$3FA(a6)
000A6F60 4E75                       		rts	
000A6F62                            
000A6F62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6F62                            
000A6F62                            
000A6F62                            sub_7267C:				; XREF: sub_71B4C
000A6F62 4A2E 0025                  		tst.b	$25(a6)
000A6F66 6700                       		beq.s	loc_72688
000A6F68 532E 0025                  		subq.b	#1,$25(a6)
000A6F6C 4E75                       		rts	
000A6F6E                            ; ===========================================================================
000A6F6E                            
000A6F6E                            loc_72688:
000A6F6E 4A2E 0026                  		tst.b	$26(a6)
000A6F72 6700                       		beq.s	loc_726D6
000A6F74 532E 0026                  		subq.b	#1,$26(a6)
000A6F78 1D7C 0002 0025             		move.b	#2,$25(a6)
000A6F7E                            
000A6F7E 4BEE 0040                  		lea	$40(a6),a5				; CHG: load starting from PCM channels
000A6F82 7E01                       		moveq	#$02-1,d7				; CHG: set number of PCM channels to alter
000A6F84                            
000A6F84                            FadeIn_NextPCM:
000A6F84 4A15                       		tst.b	(a5)					; CHG: is this channel running?
000A6F86 6A00                       		bpl.s	FadeIn_NoPCM				; CHG: if not, branch
000A6F88 572D 0009                  		subq.b	#$03,$09(a5)				; CHG: increase volume
000A6F8C                            
000A6F8C                            FadeIn_NoPCM:
000A6F8C 4BED 0030                  		lea	$30(a5),a5				; CHG: advance to next channel
000A6F90 51CF FFF2                  		dbf	d7,FadeIn_NextPCM			; CHG: repeat for all channels
000A6F94                            
000A6F94                            	;	lea	$A0(a6),a5				; MJ: new SFX location
000A6F94                            
000A6F94 7E05                       		moveq	#5,d7
000A6F96                            
000A6F96                            loc_7269E:
000A6F96 4A15                       		tst.b	(a5)
000A6F98 6A00                       		bpl.s	loc_726AA
000A6F9A 532D 0009                  		subq.b	#1,9(a5)
000A6F9E 4EBA 0000                  		jsr	sub_72CB4(pc)
000A6FA2                            
000A6FA2                            loc_726AA:
000A6FA2 DAFC 0030                  		adda.w	#$30,a5
000A6FA6 51CF FFEE                  		dbf	d7,loc_7269E
000A6FAA 7E02                       		moveq	#2,d7
000A6FAC                            
000A6FAC                            loc_726B4:
000A6FAC 4A15                       		tst.b	(a5)
000A6FAE 6A00                       		bpl.s	loc_726CC
000A6FB0 532D 0009                  		subq.b	#1,9(a5)
000A6FB4 1C2D 0009                  		move.b	9(a5),d6
000A6FB8 0C06 0010                  		cmpi.b	#$10,d6
000A6FBC 6500                       		bcs.s	loc_726C8
000A6FBE 7C0F                       		moveq	#$F,d6
000A6FC0                            
000A6FC0                            loc_726C8:
000A6FC0 4EBA 0000                  		jsr	sub_7296A(pc)
000A6FC4                            
000A6FC4                            loc_726CC:
000A6FC4 DAFC 0030                  		adda.w	#$30,a5
000A6FC8 51CF FFE2                  		dbf	d7,loc_726B4
000A6FCC 4E75                       		rts	
000A6FCE                            ; ===========================================================================
000A6FCE                            
000A6FCE                            loc_726D6:
000A6FCE                            	;	bclr	#2,$40(a6)
000A6FCE                            	;	bclr	#2,$70(a6)				; MJ: do PCM 2 as well...
000A6FCE 422E 0024                  		clr.b	$24(a6)
000A6FD2 4E75                       		rts	
000A6FD4                            ; End of function sub_7267C
000A6FD4                            
000A6FD4                            ; ===========================================================================
000A6FD4                            
000A6FD4                            loc_726E2:				; XREF: sub_71CCA
000A6FD4 0815 0001                  		btst	#1,(a5)
000A6FD8 6600                       		bne.s	locret_726FC
000A6FDA 0815 0002                  		btst	#2,(a5)
000A6FDE 6600                       		bne.s	locret_726FC
000A6FE0 4A2E 000E                  	tst.b	$0E(a6)
000A6FE4 6600                       	bne.s	locret_726FC_2
000A6FE6 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6FEA 6600                       	bne.s	locret_726FC
000A6FEC                            
000A6FEC                            	locret_726FC_2:
000A6FEC 7028                       		moveq	#$28,d0
000A6FEE 122D 0001                  		move.b	1(a5),d1
000A6FF2 0001 00F0                  		ori.b	#-$10,d1
000A6FF6 6000 0000                  		bra.w	sub_7272E
000A6FFA                            ; ===========================================================================
000A6FFA                            
000A6FFA                            locret_726FC:
000A6FFA 4E75                       		rts	
000A6FFC                            
000A6FFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6FFC                            
000A6FFC                            
000A6FFC                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000A6FFC 0815 0004                  		btst	#4,(a5)
000A7000 6600                       		bne.s	locret_72714
000A7002 0815 0002                  		btst	#2,(a5)
000A7006 6600                       		bne.s	locret_72714
000A7008 4A2E 000E                  	tst.b	$0E(a6)
000A700C 6600                       	bne.s	loc_7270A
000A700E 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7012 6600                       	bne.s	locret_72714
000A7014                            
000A7014                            loc_7270A:				; XREF: Snd_FadeOut2
000A7014 7028                       		moveq	#$28,d0
000A7016 122D 0001                  		move.b	1(a5),d1
000A701A 6000 0000                  		bra.w	sub_7272E
000A701E                            ; ===========================================================================
000A701E                            
000A701E                            locret_72714:
000A701E 4E75                       		rts	
000A7020                            ; End of function sub_726FE
000A7020                            
000A7020                            ; ===========================================================================
000A7020                            
000A7020                            loc_72716:				; XREF: sub_72A5A
000A7020 0815 0002                  		btst	#2,(a5)
000A7024 6600                       		bne.s	locret_72720
000A7026 4A2E 000E                  	tst.b	$0E(a6)
000A702A 6600                       	bne.s	sub_72722
000A702C 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7030 6600                       	bne.s	locret_72720
000A7032 6000 0000                  		bra.w	sub_72722
000A7036                            ; ===========================================================================
000A7036                            
000A7036                            locret_72720:
000A7036 4E75                       		rts	
000A7038                            
000A7038                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7038                            
000A7038                            
000A7038                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000A7038 082D 0002 0001             		btst	#2,1(a5)
000A703E 6600                       		bne.s	loc_7275A
000A7040 D02D 0001                  		add.b	1(a5),d0
000A7044                            ; End of function sub_72722
000A7044                            
000A7044                            
000A7044                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7044                            
000A7044                            sub_7272E:
000A7044 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
000A7048 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
000A704C 143C 0000                  		move.b	#$00,d2					; EXT: prepare d2 for YM2612 port address ($4000 - $4001)
000A7050 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
000A7062 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
000A7064 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
000A7066 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
000A7068 50D0                       		st.b	(a0)					; EXT: set end of list marker
000A706A 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
000A7072 2D48 0010                  		move.l	a0,$10(a6)				; EXT: store cue address
000A7076 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
000A707A 4E75                       		rts						; EXT: return
000A707C                            
000A707C                            ; ===========================================================================
000A707C                            
000A707C                            loc_7275A:				; XREF: sub_72722
000A707C 142D 0001                  		move.b	1(a5),d2
000A7080 0882 0002                  		bclr	#2,d2
000A7084 D002                       		add.b	d2,d0
000A7086                            
000A7086                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7086                            
000A7086                            
000A7086                            sub_72764:
000A7086 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
000A708A 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
000A708E 143C 0002                  		move.b	#$02,d2					; EXT: prepare d2 for YM2612 port address ($4002 - $4003)
000A7092 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
000A70A4 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
000A70A6 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
000A70A8 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
000A70AA 50D0                       		st.b	(a0)					; EXT: set end of list marker
000A70AC 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
000A70B4 2D48 0010                  		move.l	a0,$10(a6)				; EXT: store cue address
000A70B8 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
000A70BC 4E75                       		rts						; EXT: return
000A70BE                            
000A70BE                            ; ===========================================================================
000A70BE 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
000A70D0 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
000A70E2 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
000A70F2 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
000A7102 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000A7112 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000A7122 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000A7132 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000A7142 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000A7152 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
000A7162 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
000A7172 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
000A717E                            
000A717E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A717E                            
000A717E                            
000A717E                            ; ===========================================================================
000A717E                            ; ---------------------------------------------------------------------------
000A717E                            ; Subroutine to run an FM channel ; EXTRA - ON/OFF
000A717E                            ; ---------------------------------------------------------------------------
000A717E                            
000A717E                            SPSG_CheckMute:
000A717E 4A2E 000E                  	tst.b	$0E(a6)
000A7182 6600                       	bne.s	S72850_NoCHG
000A7184 102D 0021                  	move.b	$21(a5),d0
000A7188 B02D 0022                  	cmp.b	$22(a5),d0
000A718C 6700                       	beq.s	S72850_NoCHG
000A718E 4A00                       	tst.b	d0
000A7190 6A00                       	bpl.s	S72850_NoMute
000A7192 08D5 0006                  	bset.b	#$06,(a5)
000A7196 1B6D 0021 0022             	move.b	$21(a5),$22(a5)
000A719C 4EB9 0000 0000             	jsr	SPSG_UpdateTone
000A71A2                            
000A71A2                            S72850_NoCHG:
000A71A2 4E75                       	rts
000A71A4                            
000A71A4                            S72850_NoMute:
000A71A4 1B40 0022                  	move.b	d0,$22(a5)
000A71A8 08D5 0006                  	bset.b	#$06,(a5)
000A71AC 4EB9 0000 0000             	jsr	loc_7292E
000A71B2 4E75                       	rts
000A71B4                            
000A71B4                            ; ===========================================================================
000A71B4                            ; ---------------------------------------------------------------------------
000A71B4                            ; Subroutine to run a PSG channel
000A71B4                            ; ---------------------------------------------------------------------------
000A71B4                            
000A71B4                            sub_72850:				; XREF: sub_71B4C
000A71B4 61C8                       	bsr.s	SPSG_CheckMute			; EXTRA - ON/OFF
000A71B6 532D 000E                  		subq.b	#1,$E(a5)
000A71BA 6600                       		bne.s	loc_72866
000A71BC 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A71C0 0895 0004                  		bclr	#4,(a5)
000A71C4 4EBA 0000                  		jsr	sub_72878(pc)
000A71C8 4EBA 0000                  		jsr	sub_728DC(pc)
000A71CC 6000 0000                  		bra.w	loc_7292E
000A71D0                            ; ===========================================================================
000A71D0                            
000A71D0                            loc_72866:
000A71D0 0815 0006                  	btst.b	#$06,(a5)			; EXTRA
000A71D4 6700                       	beq.s	SPSG_NoUpdate			; EXTRA
000A71D6 7A00                       	moveq	#$00,d5				; EXTRA
000A71D8 1A2D 0020                  	move.b	$20(a5),d5			; EXTRA
000A71DC 0405 0081                  	subi.b	#$81,d5				; EXTRA
000A71E0 6500                       	bcs.s	SPSG_NoUpdate			; EXTRA
000A71E2 4EB9 0000 0000             	jsr	SPSG_UpdateFreque		; EXTRA
000A71E8 3C2D 0010                  	move.w	$10(a5),d6			; EXTRA
000A71EC 6000 0000                  	bra.w	SPSG_Update			; EXTRA
000A71F0                            
000A71F0                            	SPSG_NoUpdate:				; EXTRA
000A71F0 4EBA F1EE                  		jsr	sub_71D9E(pc)
000A71F4 4EBA 0000                  		jsr	sub_72926(pc)
000A71F8 4EBA F28A                  		jsr	sub_71DC6(pc)
000A71FC                            
000A71FC                            	SPSG_Update:				; EXTRA
000A71FC 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A7200 4EBA 0000                  		jsr	sub_728E2(pc)
000A7204 4E75                       		rts	
000A7206                            ; End of function sub_72850
000A7206                            
000A7206                            
000A7206                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7206                            
000A7206                            
000A7206                            sub_72878:				; XREF: sub_72850
000A7206 0895 0001                  		bclr	#1,(a5)
000A720A 286D 0004                  		movea.l	4(a5),a4
000A720E                            
000A720E                            loc_72880:
000A720E 7A00                       		moveq	#0,d5
000A7210 1A1C                       		move.b	(a4)+,d5
000A7212 0C05 00E0                  		cmpi.b	#$E0,d5
000A7216 6500                       		bcs.s	loc_72890
000A7218 4EBA 0000                  		jsr	sub_72A5A(pc)
000A721C 60F0                       		bra.s	loc_72880
000A721E                            ; ===========================================================================
000A721E                            
000A721E                            loc_72890:
000A721E 4A05                       		tst.b	d5
000A7220 6A00                       		bpl.s	loc_728A4
000A7222 1B45 0020                  	move.b	d5,$20(a5)			; EXTRA
000A7226 4EBA 0000                  		jsr	sub_728AC(pc)
000A722A 1A1C                       		move.b	(a4)+,d5
000A722C 4A05                       		tst.b	d5
000A722E 6A00                       		bpl.s	loc_728A4
000A7230 534C                       		subq.w	#1,a4
000A7232 6000 F16E                  		bra.w	sub_71D60
000A7236                            ; ===========================================================================
000A7236                            
000A7236                            loc_728A4:
000A7236 4EBA F14A                  		jsr	sub_71D40(pc)
000A723A 6000 F166                  		bra.w	sub_71D60
000A723E                            ; End of function sub_72878
000A723E                            
000A723E                            
000A723E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A723E                            
000A723E                            
000A723E                            sub_728AC:				; XREF: sub_72878
000A723E 0405 0081                  		subi.b	#$81,d5
000A7242 6500                       		bcs.s	loc_728CA
000A7244                            
000A7244                            	SPSG_UpdateFreque:			; EXTRA
000A7244 DA2D 0008                  		add.b	8(a5),d5
000A7248 DA2E 0014                  	add.b	$14(a6),d5			; EXTRA
000A724C 0245 007F                  		andi.w	#$7F,d5
000A7250 E34D                       		lsl.w	#1,d5
000A7252 41FA 0000                  		lea	word_729CE(pc),a0
000A7256 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
000A725C 0815 0006                  	btst.b	#$06,(a5)			; EXTRA
000A7260 669A                       	bne.s	SPSG_Update			; EXTRA
000A7262 6000 F13E                  		bra.w	sub_71D60
000A7266                            ; ===========================================================================
000A7266                            
000A7266                            loc_728CA:
000A7266 08D5 0001                  		bset	#1,(a5)
000A726A 3B7C FFFF 0010             		move.w	#-1,$10(a5)
000A7270 4EBA F130                  		jsr	sub_71D60(pc)
000A7274 6000 0000                  		bra.w	sub_729A0
000A7278                            ; End of function sub_728AC
000A7278                            
000A7278                            
000A7278                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7278                            
000A7278                            
000A7278                            sub_728DC:				; XREF: sub_72850
000A7278 3C2D 0010                  		move.w	$10(a5),d6
000A727C 6B00                       		bmi.s	loc_72920
000A727E                            ; End of function sub_728DC
000A727E                            
000A727E                            
000A727E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A727E                            
000A727E                            
000A727E                            sub_728E2:				; XREF: sub_72850
000A727E 102D 001E                  		move.b	$1E(a5),d0
000A7282 4880                       		ext.w	d0
000A7284 DC40                       		add.w	d0,d6
000A7286 0815 0002                  		btst	#2,(a5)
000A728A 6600                       		bne.s	locret_7291E
000A728C 4A2E 000E                  	tst.b	$0E(a6)
000A7290 6600                       	bne.s	locret_7291E_2
000A7292 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7296 6600                       	bne.s	locret_7291E
000A7298                            
000A7298                            	locret_7291E_2:
000A7298 0815 0001                  		btst	#1,(a5)
000A729C 6600                       		bne.s	locret_7291E
000A729E 102D 0001                  		move.b	1(a5),d0
000A72A2 0C00 00E0                  		cmpi.b	#$E0,d0
000A72A6 6600                       		bne.s	loc_72904
000A72A8 103C 00C0                  		move.b	#$C0,d0
000A72AC                            
000A72AC                            loc_72904:
000A72AC 3206                       		move.w	d6,d1
000A72AE 0201 000F                  		andi.b	#$F,d1
000A72B2 8001                       		or.b	d1,d0
000A72B4 E84E                       		lsr.w	#4,d6
000A72B6 0206 003F                  		andi.b	#$3F,d6
000A72BA 13C0 00C0 0011             		move.b	d0,($C00011).l
000A72C0 13C6 00C0 0011             		move.b	d6,($C00011).l
000A72C6                            
000A72C6                            locret_7291E:
000A72C6 4E75                       		rts	
000A72C8                            ; End of function sub_728E2
000A72C8                            
000A72C8                            ; ===========================================================================
000A72C8                            
000A72C8                            loc_72920:				; XREF: sub_728DC
000A72C8 08D5 0001                  		bset	#1,(a5)
000A72CC 4E75                       		rts	
000A72CE                            
000A72CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A72CE                            
000A72CE                            
000A72CE                            sub_72926:				; XREF: sub_72850
000A72CE 4A2D 000B                  		tst.b	$B(a5)
000A72D2 6700 0000                  		beq.w	locret_7298A
000A72D6                            
000A72D6                            loc_7292E:				; XREF: sub_72850
000A72D6                            	;	move.b	9(a5),d6
000A72D6 1C2E 0016                  	move.b	$16(a6),d6			; EXTRA
000A72DA E406                       	asr.b	#$02,d6				; EXTRA
000A72DC DC2D 0009                  	add.b	$09(a5),d6			; EXTRA
000A72E0 7000                       		moveq	#0,d0
000A72E2 102D 000B                  		move.b	$B(a5),d0
000A72E6 6700                       		beq.s	sub_7296A
000A72E8 2079 000A 5C70             		movea.l	(Go_PSGIndex).l,a0
000A72EE 5340                       		subq.w	#1,d0
000A72F0 E548                       		lsl.w	#2,d0
000A72F2 2070 0000                  		movea.l	(a0,d0.w),a0
000A72F6 102D 000C                  		move.b	$C(a5),d0
000A72FA 1030 0000                  		move.b	(a0,d0.w),d0
000A72FE 522D 000C                  		addq.b	#1,$C(a5)
000A7302 0800 0007                  		btst	#7,d0
000A7306 6700                       		beq.s	loc_72960
000A7308 0C00 0080                  		cmpi.b	#$80,d0
000A730C 6700                       		beq.s	loc_7299A
000A730E                            
000A730E                            loc_72960:
000A730E DC40                       		add.w	d0,d6
000A7310 0C06 0010                  		cmpi.b	#$10,d6
000A7314 6500                       		bcs.s	sub_7296A
000A7316 7C0F                       		moveq	#$F,d6
000A7318                            ; End of function sub_72926
000A7318                            
000A7318                            
000A7318                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7318                            
000A7318                            
000A7318                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
000A7318 0815 0001                  		btst	#1,(a5)
000A731C 6600                       		bne.s	locret_7298A
000A731E                            
000A731E                            	SPSG_UpdateTone:
000A731E 0815 0002                  		btst	#2,(a5)
000A7322 6600                       		bne.s	locret_7298A
000A7324 4A2E 000E                  	tst.b	$0E(a6)
000A7328 6600                       	bne.s	locret_7298A_2
000A732A 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A732E 6700                       	beq.s	locret_7298A_2
000A7330 1C2D 0001                  	move.b	$01(a5),d6
000A7334 0606 0010                  	addi.b	#$10,d6
000A7338 0006 000F                  	ori.b	#$0F,d6
000A733C 13C6 00C0 0011             	move.b	d6,($C00011).l
000A7342 4E75                       	rts
000A7344                            
000A7344                            	locret_7298A_2:
000A7344 0815 0004                  		btst	#4,(a5)
000A7348 6600                       		bne.s	loc_7298C
000A734A                            
000A734A                            loc_7297C:
000A734A 8C2D 0001                  		or.b	1(a5),d6
000A734E 0606 0010                  		addi.b	#$10,d6
000A7352 13C6 00C0 0011             		move.b	d6,($C00011).l
000A7358                            
000A7358                            locret_7298A:
000A7358 4E75                       		rts	
000A735A                            ; ===========================================================================
000A735A                            
000A735A                            loc_7298C:
000A735A 4A2D 0013                  		tst.b	$13(a5)
000A735E 67EA                       		beq.s	loc_7297C
000A7360 4A2D 0012                  		tst.b	$12(a5)
000A7364 66E4                       		bne.s	loc_7297C
000A7366 4E75                       		rts	
000A7368                            ; End of function sub_7296A
000A7368                            
000A7368                            ; ===========================================================================
000A7368                            
000A7368                            loc_7299A:				; XREF: sub_72926
000A7368 532D 000C                  		subq.b	#1,$C(a5)
000A736C 4E75                       		rts	
000A736E                            
000A736E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A736E                            
000A736E                            
000A736E                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
000A736E 0815 0002                  		btst	#2,(a5)
000A7372 6600                       		bne.s	locret_729B4
000A7374 4A2E 000E                  	tst.b	$0E(a6)
000A7378 6600                       	bne.s	loc_729A6
000A737A 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A737E 6600                       	bne.s	locret_729B4
000A7380                            
000A7380                            loc_729A6:				; XREF: Snd_FadeOut2
000A7380 102D 0001                  		move.b	1(a5),d0
000A7384 0000 001F                  		ori.b	#$1F,d0
000A7388 13C0 00C0 0011             		move.b	d0,($C00011).l
000A738E                            
000A738E                            locret_729B4:
000A738E 4E75                       		rts	
000A7390                            ; End of function sub_729A0
000A7390                            
000A7390                            
000A7390                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7390                            
000A7390                            
000A7390                            sub_729B6:				; XREF: loc_71E7C
000A7390 41F9 00C0 0011             		lea	($C00011).l,a0
000A7396 10BC 009F                  		move.b	#$9F,(a0)
000A739A 10BC 00BF                  		move.b	#$BF,(a0)
000A739E 10BC 00DF                  		move.b	#$DF,(a0)
000A73A2 10BC 00FF                  		move.b	#$FF,(a0)
000A73A6 4E75                       		rts	
000A73A8                            ; End of function sub_729B6
000A73A8                            
000A73A8                            ; ===========================================================================
000A73A8 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
000A73BA 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000A73CC 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000A73E0 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000A73F4 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
000A7408 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
000A741C 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
000A7430 0011 0000                  		dc.w $11, 0
000A7434                            
000A7434                            	; PSG can overflow here by accident (SYZ does when it plays low notes
000A7434                            	; but the pitch of the channel is low, and wraps to high).
000A7434                            
000A7434                            	; The flag pointers have been altered slightly, causing the frequencies
000A7434                            	; to be different, even though it's wrong in the first place, this
000A7434                            	; table will ensure it's put back the original way (not correct, just
000A7434                            	; original).
000A7434                            
000A7434 0445 00E0 E54D 4EFB 5002+  		dc.w	$0445,$00E0,$E54D,$4EFB,$5002,$6000,$0066,$6000	; CHG: end of table
000A7444 0082 6000 0084 6000 0086+  		dc.w	$0082,$6000,$0084,$6000,$0086,$6000,$009E,$6000
000A7454 0124 6000 0126 6000 012C+  		dc.w	$0124,$6000,$0126,$6000,$012C,$6000,$012E,$6000
000A7464 0134 6000 0138 6000 013E+  		dc.w	$0134,$6000,$0138,$6000,$013E,$6000,$0150,$6000
000A7474 0154 6000 0156 6000 0184+  		dc.w	$0154,$6000,$0156,$6000,$0184,$6000,$028A,$6000
000A7484 02A8 6000 02AA 6000 0354+  		dc.w	$02A8,$6000,$02AA,$6000,$0354,$6000,$036A,$6000
000A7494 036C 6000 036E 6000 0376+  		dc.w	$036C,$6000,$036E,$6000,$0376,$6000,$038C,$6000
000A74A4 039A 121C                  		dc.w	$039A,$121C
000A74A8                            
000A74A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A74A8                            
000A74A8                            
000A74A8                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000A74A8 0445 00E0                  		subi.w	#$E0,d5
000A74AC E54D                       		lsl.w	#2,d5
000A74AE 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
000A74B2                            ; End of function sub_72A5A
000A74B2                            
000A74B2                            ; ===========================================================================
000A74B2                            
000A74B2                            loc_72A64:
000A74B2 6000 0000                  		bra.w	loc_72ACC			; E0
000A74B6                            ; ===========================================================================
000A74B6 6000 0000                  		bra.w	loc_72AEC			; E1
000A74BA                            ; ===========================================================================
000A74BA 6000 0000                  		bra.w	loc_72AF2			; E2
000A74BE                            ; ===========================================================================
000A74BE 6000 0000                  		bra.w	loc_72AF8			; E3
000A74C2                            ; ===========================================================================
000A74C2 6000 0000                  		bra.w	loc_72B14			; E4
000A74C6                            ; ===========================================================================
000A74C6 6000 0000                  		bra.w	loc_72B9E			; E5
000A74CA                            ; ===========================================================================
000A74CA 6000 0000                  		bra.w	loc_72BA4			; E6
000A74CE                            ; ===========================================================================
000A74CE 6000 0000                  		bra.w	loc_72BAE			; E7
000A74D2                            ; ===========================================================================
000A74D2 6000 0000                  		bra.w	loc_72BB4			; E8
000A74D6                            ; ===========================================================================
000A74D6 6000 0000                  		bra.w	loc_72BBE			; E9
000A74DA                            ; ===========================================================================
000A74DA 6000 0000                  		bra.w	loc_72BC6			; EA
000A74DE                            ; ===========================================================================
000A74DE 6000 0000                  		bra.w	loc_72BD0			; EB
000A74E2                            ; ===========================================================================
000A74E2 6000 0000                  		bra.w	loc_72BE6			; EC
000A74E6                            ; ===========================================================================
000A74E6 6000 0000                  		bra.w	loc_72BEE			; ED
000A74EA                            ; ===========================================================================
000A74EA 6000 0000                  		bra.w	loc_72BF4			; EE
000A74EE                            ; ===========================================================================
000A74EE 6000 0000                  		bra.w	loc_72C26			; EF
000A74F2                            ; ===========================================================================
000A74F2 6000 0000                  		bra.w	loc_72D30			; F0
000A74F6                            ; ===========================================================================
000A74F6 6000 0000                  		bra.w	loc_72D52			; F1
000A74FA                            ; ===========================================================================
000A74FA 6000 0000                  		bra.w	loc_72D58			; F2
000A74FE                            ; ===========================================================================
000A74FE 6000 0000                  		bra.w	loc_72E06			; F3
000A7502                            ; ===========================================================================
000A7502 6000 0000                  		bra.w	loc_72E20			; F4
000A7506                            ; ===========================================================================
000A7506 6000 0000                  		bra.w	loc_72E26			; F5
000A750A                            ; ===========================================================================
000A750A 6000 0000                  		bra.w	loc_72E2C			; F6
000A750E                            ; ===========================================================================
000A750E 6000 0000                  		bra.w	loc_72E38			; F7
000A7512                            ; ===========================================================================
000A7512 6000 0000                  		bra.w	loc_72E52			; F8
000A7516                            ; ===========================================================================
000A7516 6000 0000                  		bra.w	loc_72E64			; F9
000A751A                            ; ===========================================================================
000A751A                            ; ---------------------------------------------------------------------------
000A751A                            ; Flag FA - Reverse flag
000A751A                            ; ---------------------------------------------------------------------------
000A751A                            
000A751A                            FlagFA:
000A751A 0855 0005                  		bchg.b	#$05,(a5)			; CHG: change reverse flag
000A751E 4E75                       		rts					; CHG: return
000A7520                            
000A7520                            ; ===========================================================================
000A7520                            
000A7520                            loc_72ACC:				; XREF: loc_72A64
000A7520 121C                       		move.b	(a4)+,d1
000A7522 4A2D 0001                  		tst.b	1(a5)
000A7526 6B00                       		bmi.s	locret_72AEA
000A7528 102D 000A                  		move.b	$A(a5),d0
000A752C 0200 0037                  		andi.b	#$37,d0
000A7530 8200                       		or.b	d0,d1
000A7532 1B41 000A                  		move.b	d1,$A(a5)
000A7536 103C 00B4                  		move.b	#$B4,d0
000A753A 6000 FAE4                  		bra.w	loc_72716
000A753E                            ; ===========================================================================
000A753E                            
000A753E                            locret_72AEA:
000A753E 4E75                       		rts	
000A7540                            ; ===========================================================================
000A7540                            
000A7540                            loc_72AEC:				; XREF: loc_72A64
000A7540 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000A7544 4E75                       		rts	
000A7546                            ; ===========================================================================
000A7546                            
000A7546                            loc_72AF2:				; XREF: loc_72A64
000A7546 1D5C 0007                  		move.b	(a4)+,7(a6)
000A754A 4E75                       		rts	
000A754C                            ; ===========================================================================
000A754C                            
000A754C                            loc_72AF8:				; XREF: loc_72A64
000A754C 7000                       		moveq	#0,d0
000A754E 102D 000D                  		move.b	$D(a5),d0
000A7552 2875 0000                  		movea.l	(a5,d0.w),a4
000A7556 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000A755E 544C                       		addq.w	#2,a4
000A7560 5800                       		addq.b	#4,d0
000A7562 1B40 000D                  		move.b	d0,$D(a5)
000A7566 4E75                       		rts	
000A7568                            ; ===========================================================================
000A7568                            
000A7568                            loc_72B14:				; XREF: loc_72A64
000A7568 204E                       		movea.l	a6,a0
000A756A 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
000A756E 236E 0010 0010             	move.l	$10(a6),$10(a1)				; CHG: copy buffer address across
000A7574 303C 0093                  		move.w	#$93,d0					; MJ: new size to store
000A7578                            
000A7578                            loc_72B1E:
000A7578 20D9                       		move.l	(a1)+,(a0)+
000A757A 51C8 FFFC                  		dbf	d0,loc_72B1E
000A757E                            
000A757E                            	;	bset	#2,$40(a6)
000A757E                            	;	bset	#2,$70(a6)				; MJ: enable PCM 2
000A757E 264D                       		movea.l	a5,a3
000A7580 1C3C 0028                  		move.b	#$28,d6
000A7584 9C2E 0026                  		sub.b	$26(a6),d6
000A7588 1A06                       	move.b	d6,d5
000A758A DA05                       	add.b	d5,d5
000A758C DA06                       	add.b	d6,d5
000A758E                            
000A758E 7E01                       		moveq	#$02-1,d7				; CHG: set number of PCM channels to do
000A7590 4BEE 0040                  		lea	$40(a6),a5				; CHG: start from PCM 1
000A7594                            
000A7594                            FE4_NextPCM:
000A7594 0815 0007                  		btst	#$07,(a5)				; CHG: is the channel running?
000A7598 6700                       		beq.s	FE4_NoPCM				; CHG: if not, branch
000A759A                            	;	bset	#$01,(a5)				; CHG: set the channel as resting
000A759A DB2D 0009                  		add.b	d5,$09(a5)				; CHG: reduce its volume
000A759E                            
000A759E                            FE4_NoPCM:
000A759E 4BED 0030                  		lea	$30(a5),a5				; CHG: advance to next channel
000A75A2 51CF FFF0                  		dbf	d7,FE4_NextPCM				; CHG: repeat for all channels
000A75A6                            
000A75A6 7E05                       		moveq	#5,d7
000A75A8                            	;	lea	$A0(a6),a5				; MJ: new FM location
000A75A8                            
000A75A8                            loc_72B3A:
000A75A8 0815 0007                  		btst	#7,(a5)
000A75AC 6700                       		beq.s	loc_72B5C
000A75AE 08D5 0001                  		bset	#1,(a5)
000A75B2 DD2D 0009                  		add.b	d6,9(a5)
000A75B6 0815 0002                  		btst	#2,(a5)
000A75BA 6600                       		bne.s	loc_72B5C
000A75BC 4A2E 000E                  	tst.b	$0E(a6)
000A75C0 6600                       	bne.s	locret_72B5C_2
000A75C2 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A75C6 6600                       	bne.s	loc_72B5C
000A75C8                            
000A75C8                            	locret_72B5C_2:
000A75C8 7000                       		moveq	#0,d0
000A75CA 102D 000B                  		move.b	$B(a5),d0
000A75CE 226E 0018                  		movea.l	$18(a6),a1
000A75D2 4EBA 0000                  		jsr	sub_72C4E(pc)
000A75D6                            
000A75D6                            loc_72B5C:
000A75D6 DAFC 0030                  		adda.w	#$30,a5
000A75DA 51CF FFCC                  		dbf	d7,loc_72B3A
000A75DE                            
000A75DE 7E02                       		moveq	#2,d7
000A75E0                            
000A75E0                            loc_72B66:
000A75E0 0815 0007                  		btst	#7,(a5)
000A75E4 6700                       		beq.s	loc_72B78
000A75E6 08D5 0001                  		bset	#1,(a5)
000A75EA 4EBA FD82                  		jsr	sub_729A0(pc)
000A75EE DD2D 0009                  		add.b	d6,9(a5)
000A75F2                            
000A75F2                            loc_72B78:
000A75F2 DAFC 0030                  		adda.w	#$30,a5
000A75F6 51CF FFE8                  		dbf	d7,loc_72B66
000A75FA 2A4B                       		movea.l	a3,a5
000A75FC 1D7C 0080 0024             		move.b	#$80,$24(a6)
000A7602 1D7C 0028 0026             		move.b	#$28,$26(a6)
000A7608 422E 0027                  		clr.b	$27(a6)
000A760C 504F                       		addq.w	#8,sp
000A760E 4E75                       		rts	
000A7610                            ; ===========================================================================
000A7610                            
000A7610                            loc_72B9E:				; XREF: loc_72A64
000A7610 1B5C 0002                  		move.b	(a4)+,2(a5)
000A7614 4E75                       		rts	
000A7616                            ; ===========================================================================
000A7616                            
000A7616                            loc_72BA4:				; XREF: loc_72A64
000A7616 101C                       		move.b	(a4)+,d0
000A7618 D12D 0009                  		add.b	d0,9(a5)
000A761C 6000 0000                  		bra.w	sub_72CB4
000A7620                            ; ===========================================================================
000A7620                            
000A7620                            loc_72BAE:				; XREF: loc_72A64
000A7620 08D5 0004                  		bset	#4,(a5)
000A7624 4E75                       		rts	
000A7626                            ; ===========================================================================
000A7626                            
000A7626                            loc_72BB4:				; XREF: loc_72A64
000A7626 1B54 0012                  		move.b	(a4),$12(a5)
000A762A 1B5C 0013                  		move.b	(a4)+,$13(a5)
000A762E 4E75                       		rts	
000A7630                            ; ===========================================================================
000A7630                            
000A7630                            loc_72BBE:				; XREF: loc_72A64
000A7630 101C                       		move.b	(a4)+,d0
000A7632 D12D 0008                  		add.b	d0,8(a5)
000A7636 4E75                       		rts	
000A7638                            ; ===========================================================================
000A7638                            
000A7638                            loc_72BC6:				; XREF: loc_72A64
000A7638 1D54 0002                  		move.b	(a4),2(a6)
000A763C 1D5C 0001                  		move.b	(a4)+,1(a6)
000A7640 4E75                       		rts	
000A7642                            ; ===========================================================================
000A7642                            
000A7642                            loc_72BD0:				; XREF: loc_72A64
000A7642 41EE 0040                  		lea	$40(a6),a0
000A7646 101C                       		move.b	(a4)+,d0
000A7648 7230                       		moveq	#$30,d1
000A764A 740A                       		moveq	#10,d2				; MJ: extra channel
000A764C                            
000A764C                            loc_72BDA:
000A764C 1140 0002                  		move.b	d0,2(a0)
000A7650 D0C1                       		adda.w	d1,a0
000A7652 51CA FFF8                  		dbf	d2,loc_72BDA
000A7656                            
000A7656 4E75                       		rts	
000A7658                            ; ===========================================================================
000A7658                            
000A7658                            loc_72BE6:				; XREF: loc_72A64
000A7658 101C                       		move.b	(a4)+,d0
000A765A D12D 0009                  		add.b	d0,9(a5)
000A765E 4E75                       		rts	
000A7660                            ; ===========================================================================
000A7660                            
000A7660                            loc_72BEE:				; XREF: loc_72A64
000A7660 422E 002C                  		clr.b	$2C(a6)
000A7664 4E75                       		rts	
000A7666                            ; ===========================================================================
000A7666                            
000A7666                            loc_72BF4:				; XREF: loc_72A64
000A7666 0895 0007                  		bclr	#7,(a5)
000A766A 0895 0004                  		bclr	#4,(a5)
000A766E 4EBA F98C                  		jsr	sub_726FE(pc)
000A7672 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000A7676 6B00                       		bmi.s	loc_72C22
000A7678 264D                       		movea.l	a5,a3
000A767A 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
000A767E 226E 0018                  		movea.l	$18(a6),a1
000A7682 0895 0002                  		bclr	#2,(a5)
000A7686 08D5 0001                  		bset	#1,(a5)
000A768A 102D 000B                  		move.b	$B(a5),d0
000A768E 4EBA 0000                  		jsr	sub_72C4E(pc)
000A7692 2A4B                       		movea.l	a3,a5
000A7694                            
000A7694                            loc_72C22:
000A7694 504F                       		addq.w	#8,sp
000A7696 4E75                       		rts	
000A7698                            ; ===========================================================================
000A7698                            
000A7698                            loc_72C26:				; XREF: loc_72A64
000A7698 7000                       		moveq	#0,d0
000A769A 101C                       		move.b	(a4)+,d0
000A769C 1B40 000B                  		move.b	d0,$B(a5)
000A76A0                            
000A76A0                            SFM_UpdateVoice:
000A76A0 0815 0002                  		btst	#2,(a5)
000A76A4 6600 0000                  		bne.w	locret_72CAA
000A76A8 4A2E 000E                  	tst.b	$0E(a6)
000A76AC 6600                       	bne.s	locret_72CAA_2
000A76AE 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A76B2 6600                       	bne.s	locret_72CAA
000A76B4                            
000A76B4                            	locret_72CAA_2:
000A76B4                            
000A76B4 226E 0018                  		movea.l	$18(a6),a1
000A76B8 4A2E 000E                  		tst.b	$E(a6)
000A76BC 6700                       		beq.s	sub_72C4E
000A76BE 226D 0020                  		movea.l	$20(a5),a1	; ERROR HERE...
000A76C2 4A2E 000E                  		tst.b	$E(a6)
000A76C6 6B00                       		bmi.s	sub_72C4E
000A76C8 226E 0020                  		movea.l	$20(a6),a1
000A76CC                            
000A76CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A76CC                            
000A76CC                            
000A76CC                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
000A76CC 5340                       		subq.w	#1,d0
000A76CE 6B00                       		bmi.s	loc_72C5C
000A76D0 323C 0019                  		move.w	#$19,d1
000A76D4                            
000A76D4                            loc_72C56:
000A76D4 D2C1                       		adda.w	d1,a1
000A76D6 51C8 FFFC                  		dbf	d0,loc_72C56
000A76DA                            
000A76DA                            loc_72C5C:
000A76DA 1219                       		move.b	(a1)+,d1
000A76DC 1B41 001F                  		move.b	d1,$1F(a5)
000A76E0 1801                       		move.b	d1,d4
000A76E2 103C 00B0                  		move.b	#$B0,d0
000A76E6 4EBA F950                  		jsr	sub_72722(pc)
000A76EA 45FA 0000                  		lea	byte_72D18(pc),a2
000A76EE 7613                       		moveq	#$13,d3
000A76F0                            
000A76F0                            loc_72C72:
000A76F0 101A                       		move.b	(a2)+,d0
000A76F2 1219                       		move.b	(a1)+,d1
000A76F4 4EBA F942                  		jsr	sub_72722(pc)
000A76F8 51CB FFF6                  		dbf	d3,loc_72C72
000A76FC 7A03                       		moveq	#3,d5
000A76FE 0244 0007                  		andi.w	#7,d4
000A7702 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
000A7706 162D 0009                  		move.b	9(a5),d3
000A770A D62E 0016                  	add.b	$16(a6),d3			; EXTRA
000A770E                            
000A770E                            loc_72C8C:
000A770E 101A                       		move.b	(a2)+,d0
000A7710 1219                       		move.b	(a1)+,d1
000A7712 E20C                       		lsr.b	#1,d4
000A7714 6400                       		bcc.s	loc_72C96
000A7716 D203                       		add.b	d3,d1
000A7718                            
000A7718                            loc_72C96:
000A7718 4EBA F91E                  		jsr	sub_72722(pc)
000A771C 51CD FFF0                  		dbf	d5,loc_72C8C
000A7720 103C 00B4                  		move.b	#$B4,d0
000A7724 122D 000A                  		move.b	$A(a5),d1
000A7728 4EBA F90E                  		jsr	sub_72722(pc)
000A772C                            
000A772C                            locret_72CAA:
000A772C 4E75                       		rts	
000A772E                            ; End of function sub_72C4E
000A772E                            
000A772E                            ; ===========================================================================
000A772E 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000A7736                            
000A7736                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7736                            
000A7736                            
000A7736                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
000A7736 0815 0002                  		btst	#2,(a5)
000A773A 6600                       		bne.s	locret_72D16
000A773C                            
000A773C 4A2E 000E                  	tst.b	$0E(a6)
000A7740 6600                       	bne.s	locret_72D16_2
000A7742 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7746 6600                       	bne.s	locret_72D16
000A7748                            
000A7748                            	locret_72D16_2:
000A7748 7000                       		moveq	#0,d0
000A774A 102D 000B                  		move.b	$B(a5),d0
000A774E 226E 0018                  		movea.l	$18(a6),a1
000A7752 4A2E 000E                  		tst.b	$E(a6)
000A7756 6700                       		beq.s	loc_72CD8
000A7758 226D 0020                  		movea.l	$20(a5),a1
000A775C 4A2E 000E                  		tst.b	$E(a6)
000A7760 6B00                       		bmi.s	loc_72CD8
000A7762 226E 0020                  		movea.l	$20(a6),a1
000A7766                            
000A7766                            loc_72CD8:
000A7766 5340                       		subq.w	#1,d0
000A7768 6B00                       		bmi.s	loc_72CE6
000A776A 323C 0019                  		move.w	#$19,d1
000A776E                            
000A776E                            loc_72CE0:
000A776E D2C1                       		adda.w	d1,a1
000A7770 51C8 FFFC                  		dbf	d0,loc_72CE0
000A7774                            
000A7774                            loc_72CE6:
000A7774 D2FC 0015                  		adda.w	#$15,a1
000A7778 45FA 0000                  		lea	byte_72D2C(pc),a2
000A777C 102D 001F                  		move.b	$1F(a5),d0
000A7780 0240 0007                  		andi.w	#7,d0
000A7784 183B 00A8                  		move.b	byte_72CAC(pc,d0.w),d4
000A7788 162D 0009                  		move.b	9(a5),d3
000A778C D62E 0016                  	add.b	$16(a6),d3			; EXTRA
000A7790 6B00                       		bmi.s	locret_72D16
000A7792 7A03                       		moveq	#3,d5
000A7794                            
000A7794                            loc_72D02:
000A7794 101A                       		move.b	(a2)+,d0
000A7796 1219                       		move.b	(a1)+,d1
000A7798 E20C                       		lsr.b	#1,d4
000A779A 6400                       		bcc.s	loc_72D12
000A779C D203                       		add.b	d3,d1
000A779E 6500                       		bcs.s	loc_72D12
000A77A0 4EBA F896                  		jsr	sub_72722(pc)
000A77A4                            
000A77A4                            loc_72D12:
000A77A4 51CD FFEE                  		dbf	d5,loc_72D02
000A77A8                            
000A77A8                            locret_72D16:
000A77A8 4E75                       		rts	
000A77AA                            ; End of function sub_72CB4
000A77AA                            
000A77AA                            ; ===========================================================================
000A77AA 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
000A77B4 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
000A77BE 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
000A77C2                            ; ===========================================================================
000A77C2                            
000A77C2                            loc_72D30:				; XREF: loc_72A64
000A77C2 08D5 0003                  		bset	#3,(a5)
000A77C6 2B4C 0014                  		move.l	a4,$14(a5)
000A77CA 1B5C 0018                  		move.b	(a4)+,$18(a5)
000A77CE 1B5C 0019                  		move.b	(a4)+,$19(a5)
000A77D2 1B5C 001A                  		move.b	(a4)+,$1A(a5)
000A77D6 101C                       		move.b	(a4)+,d0
000A77D8 E208                       		lsr.b	#1,d0
000A77DA 1B40 001B                  		move.b	d0,$1B(a5)
000A77DE 426D 001C                  		clr.w	$1C(a5)
000A77E2 4E75                       		rts	
000A77E4                            ; ===========================================================================
000A77E4                            
000A77E4                            loc_72D52:				; XREF: loc_72A64
000A77E4 08D5 0003                  		bset	#3,(a5)
000A77E8 206D 0014                  		movea.l	$14(a5),a0				; CHG: load modulation address
000A77EC 43ED 0018                  		lea	$18(a5),a1				; CHG: load modulation settings RAM
000A77F0 12D8                       		move.b	(a0)+,(a1)+				; CHG: reset settings...
000A77F2 12D8                       		move.b	(a0)+,(a1)+				; CHG: ''
000A77F4 12D8                       		move.b	(a0)+,(a1)+				; CHG: ''
000A77F6 1018                       		move.b	(a0)+,d0				; CHG: ''
000A77F8 E208                       		lsr.b	#$01,d0					; CHG: ''
000A77FA 12C0                       		move.b	d0,(a1)+				; CHG: ''
000A77FC 4259                       		clr.w	(a1)+					; CHG: clear modulation frequency
000A77FE 4E75                       		rts	
000A7800                            ; ===========================================================================
000A7800                            
000A7800                            loc_72D58:				; XREF: loc_72A64
000A7800 0895 0007                  		bclr	#7,(a5)
000A7804 0895 0004                  		bclr	#4,(a5)
000A7808 4A2D 0001                  		tst.b	1(a5)
000A780C 6B00                       		bmi.s	loc_72D74
000A780E 4A2E 0008                  		tst.b	8(a6)
000A7812 6B00 0000                  		bmi.w	SF2_MutePCM				; CHG: for PCM, branch to a differen mute routine
000A7816 4EBA F7E4                  		jsr	sub_726FE(pc)
000A781A 6000                       		bra.s	loc_72D78
000A781C                            ; ===========================================================================
000A781C                            
000A781C                            loc_72D74:
000A781C 4EBA FB50                  		jsr	sub_729A0(pc)
000A7820                            
000A7820                            loc_72D78:
000A7820 4A2E 000E                  		tst.b	$E(a6)
000A7824 6A00 0000                  		bpl.w	loc_72E02
000A7828 4216                       		clr.b	0(a6)
000A782A 7000                       		moveq	#0,d0
000A782C 102D 0001                  		move.b	1(a5),d0
000A7830 6B00                       		bmi.s	loc_72DCC
000A7832 41FA F250                  		lea	dword_722CC(pc),a0
000A7836 264D                       		movea.l	a5,a3
000A7838 0C00 0004                  		cmpi.b	#4,d0
000A783C 6600                       		bne.s	loc_72DA8
000A783E 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
000A7842 6A00                       		bpl.s	loc_72DA8
000A7844 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A7848 226E 0020                  		movea.l	$20(a6),a1
000A784C 6000                       		bra.s	loc_72DB8
000A784E                            ; ===========================================================================
000A784E                            
000A784E                            loc_72DA8:
000A784E 5500                       		subq.b	#2,d0
000A7850 E508                       		lsl.b	#2,d0
000A7852 2A70 0000                  		movea.l	(a0,d0.w),a5
000A7856 4A15                       		tst.b	(a5)
000A7858 6A00                       		bpl.s	loc_72DC8
000A785A 226E 0018                  		movea.l	$18(a6),a1
000A785E                            
000A785E                            loc_72DB8:
000A785E 0895 0002                  		bclr	#2,(a5)
000A7862 08D5 0001                  		bset	#1,(a5)
000A7866 102D 000B                  		move.b	$B(a5),d0
000A786A 4EBA FE60                  		jsr	sub_72C4E(pc)
000A786E                            
000A786E                            loc_72DC8:
000A786E 2A4B                       		movea.l	a3,a5
000A7870 6000                       		bra.s	loc_72E02
000A7872                            ; ===========================================================================
000A7872                            
000A7872                            loc_72DCC:
000A7872 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
000A7876 4A10                       		tst.b	(a0)
000A7878 6A00                       		bpl.s	loc_72DE0
000A787A 0C00 00E0                  		cmpi.b	#$E0,d0
000A787E 6700                       		beq.s	loc_72DEA
000A7880 0C00 00C0                  		cmpi.b	#$C0,d0
000A7884 6700                       		beq.s	loc_72DEA
000A7886                            
000A7886                            loc_72DE0:
000A7886 41FA F1FC                  		lea	dword_722CC(pc),a0
000A788A E608                       		lsr.b	#3,d0
000A788C 2070 0000                  		movea.l	(a0,d0.w),a0
000A7890                            
000A7890                            loc_72DEA:
000A7890 0890 0002                  		bclr	#2,(a0)
000A7894 08D0 0001                  		bset	#1,(a0)
000A7898 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000A789E 6600                       		bne.s	loc_72E02
000A78A0 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000A78A8                            
000A78A8                            loc_72E02:
000A78A8 504F                       		addq.w	#$04*2,sp					; CHG: skip return addresses (returns back outside of the sound driver)
000A78AA 4E75                       		rts	
000A78AC                            
000A78AC                            SF2_MutePCM:
000A78AC 584F                       		addq.w	#4,sp						; CHG: go back, but not out of sound driver
000A78AE 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)					; CHG: is this PCM 1?
000A78B4 6600                       		bne.s	SF2_MutePCM2					; CHG: if not, branch to mute PCM 2
000A78B6 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A78BC 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A78C2 33FC 0100 00A1 1100 0839+  		StopZ80
000A78D4 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A78D6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A78D8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A78DA 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A78DC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A78DE 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A78E0 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A78E2 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A78E4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A78E6 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A78E8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A78EA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A78EC 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A78F4 33FC 0000 00A1 1100        		StartZ80
000A78FC 4E75                       		rts							; CHG: return
000A78FE                            
000A78FE                            SF2_MutePCM2:
000A78FE 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A7904 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 1 slot address
000A790A 33FC 0100 00A1 1100 0839+  		StopZ80
000A791C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A791E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7920 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7922 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7924 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7926 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7928 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A792A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A792C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A792E 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7930 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7932 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7934 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A793C 33FC 0000 00A1 1100        		StartZ80
000A7944 4E75                       		rts							; CHG: return
000A7946                            
000A7946                            ; ===========================================================================
000A7946                            
000A7946                            loc_72E06:				; XREF: loc_72A64
000A7946 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000A794C 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000A7950 0815 0002                  		btst	#2,(a5)
000A7954 6600                       		bne.s	locret_72E1E 
000A7956 4A2E 000E                  	tst.b	$0E(a6)
000A795A 6600                       	bne.s	locret_72E1E_2
000A795C 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7960 6600                       	bne.s	locret_72E1E 
000A7962                            
000A7962                            	locret_72E1E_2:
000A7962 102C FFFF                  		move.b	-1(a4),d0				; MJ: reload F3 setting to d0
000A7966 13C0 00C0 0011             		move.b	d0,($C00011).l				; MJ: save F3 setting (should be EX (PSG 4) related)
000A796C 0200 0003                  		andi.b	#%00000011,d0				; MJ: get only frequency mode bits
000A7970 0C00 0003                  		cmpi.b	#%00000011,d0				; MJ: has it been set to use PSG 3's frequency?
000A7974 6600                       		bne.s	locret_72E1E				; MJ: if not, branch
000A7976 13FC 00DF 00C0 0011        		move.b	#%11011111,($C00011).l			; MJ: mute PSG 3's volume
000A797E                            
000A797E                            locret_72E1E:
000A797E 4E75                       		rts	
000A7980                            ; ===========================================================================
000A7980                            
000A7980                            loc_72E20:				; XREF: loc_72A64
000A7980 0895 0003                  		bclr	#3,(a5)
000A7984 4E75                       		rts	
000A7986                            ; ===========================================================================
000A7986                            
000A7986                            loc_72E26:				; XREF: loc_72A64
000A7986 1B5C 000B                  		move.b	(a4)+,$B(a5)
000A798A 4E75                       		rts	
000A798C                            ; ===========================================================================
000A798C                            
000A798C                            loc_72E2C:				; XREF: loc_72A64
000A798C 101C                       		move.b	(a4)+,d0
000A798E E148                       		lsl.w	#8,d0
000A7990 101C                       		move.b	(a4)+,d0
000A7992 D8C0                       		adda.w	d0,a4
000A7994 534C                       		subq.w	#1,a4
000A7996 4E75                       		rts	
000A7998                            ; ===========================================================================
000A7998                            
000A7998                            loc_72E38:				; XREF: loc_72A64
000A7998 7000                       		moveq	#0,d0
000A799A 101C                       		move.b	(a4)+,d0
000A799C 121C                       		move.b	(a4)+,d1
000A799E 4A35 0024                  		tst.b	$24(a5,d0.w)
000A79A2 6600                       		bne.s	loc_72E48
000A79A4 1B81 0024                  		move.b	d1,$24(a5,d0.w)
000A79A8                            
000A79A8                            loc_72E48:
000A79A8 5335 0024                  		subq.b	#1,$24(a5,d0.w)
000A79AC 66DE                       		bne.s	loc_72E2C
000A79AE 544C                       		addq.w	#2,a4
000A79B0 4E75                       		rts	
000A79B2                            ; ===========================================================================
000A79B2                            
000A79B2                            loc_72E52:				; XREF: loc_72A64
000A79B2 7000                       		moveq	#0,d0
000A79B4 102D 000D                  		move.b	$D(a5),d0
000A79B8 5900                       		subq.b	#4,d0
000A79BA 2B8C 0000                  		move.l	a4,(a5,d0.w)
000A79BE 1B40 000D                  		move.b	d0,$D(a5)
000A79C2 60C8                       		bra.s	loc_72E2C
000A79C4                            ; ===========================================================================
000A79C4                            
000A79C4                            loc_72E64:				; XREF: loc_72A64
000A79C4 103C 0088                  		move.b	#$88,d0
000A79C8 123C 000F                  		move.b	#$F,d1
000A79CC 4EBA F676                  		jsr	sub_7272E(pc)
000A79D0 103C 008C                  		move.b	#$8C,d0
000A79D4 123C 000F                  		move.b	#$F,d1
000A79D8 6000 F66A                  		bra.w	sub_7272E
000A79DC                            ; ===========================================================================
000A79DC                            Music81:	incbin	sound\music81.bin
000A81BA 00                         		even
000A81BA                            Music82:	incbin	sound\music82.bin
000A86E8 00                         		even
000A86E8                            Music83:	incbin	sound\music83.bin
000A8B62 00                         		even
000A8B62                            Music84:	incbin	sound\music84.bin
000A8FE0 00                         		even
000A8FE0                            Music85:	incbin	sound\music85.bin
000A9538 00                         		even
000A9538                            Music86:	incbin	sound\music86.bin
000A9C6C                            		even
000A9C6C                            Music87:	incbin	sound\music87.bin
000A9F12 00                         		even
000A9F12                            Music88:	incbin	sound\music88.bin
000AA01E 00                         		even
000AA01E                            Music89:	incbin	sound\music89.bin
000AA352 00                         		even
000AA352                            Music8A:	incbin	sound\music8A.bin
000AA56A                            		even
000AA56A                            Music8B:	incbin	sound\music8B.bin
000AA896                            		even
000AA896                            Music8C:	incbin	sound\music8C.bin
000AAB54 00                         		even
000AAB54                            Music8D:	incbin	sound\music8D.bin
000AADF6                            		even
000AADF6                            Music8E:	incbin	sound\music8E.bin
000AAF8C 00                         		even
000AAF8C                            Music8F:	incbin	sound\music8F.bin
000AB0EE 00                         		even
000AB0EE                            Music90:	incbin	sound\music90.bin
000AB26E 00                         		even
000AB26E                            Music91:	incbin	sound\music91.bin
000AC896 00                         		even
000AC896                            Music92:	incbin	sound\music92.bin
000AC9DE 00                         		even
000AC9DE                            Music93:	incbin	sound\music93.bin
000ACAB6 00                         		even
000ACAB6                            ; ---------------------------------------------------------------------------
000ACAB6                            ; Sound	effect pointers
000ACAB6                            ; ---------------------------------------------------------------------------
000ACAB6 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000ACAC2 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000ACACE 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000ACADA 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000ACAE6 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000ACAF2 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000ACAFE 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000ACB0A 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000ACB16 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000ACB22 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000ACB2E 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000ACB3A 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000ACB46 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000ACB52 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000ACB5E 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000ACB6A 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000ACB76 0000 0000                  SoundD0Index:	dc.l SoundD0
000ACB7A                            SoundA0:	incbin	sound\soundA0.bin
000ACB90                            		even
000ACB90                            SoundA1:	incbin	sound\soundA1.bin
000ACBBA                            		even
000ACBBA                            SoundA2:	incbin	sound\soundA2.bin
000ACBDA                            		even
000ACBDA                            SoundA3:	incbin	sound\soundA3.bin
000ACC0C                            		even
000ACC0C                            SoundA4:	incbin	sound\soundA4.bin
000ACC42                            		even
000ACC42                            SoundA5:	incbin	sound\soundA5.bin
000ACC6E                            		even
000ACC6E                            SoundA6:	incbin	sound\soundA6.bin
000ACC9E                            		even
000ACC9E                            SoundA7:	incbin	sound\soundA7.bin
000ACCCE                            		even
000ACCCE                            SoundA8:	incbin	sound\soundA8.bin
000ACD02                            		even
000ACD02                            SoundA9:	incbin	sound\soundA9.bin
000ACD14                            		even
000ACD14                            SoundAA:	incbin	sound\soundAA.bin
000ACD56                            		even
000ACD56                            SoundAB:	incbin	sound\soundAB.bin
000ACD76                            		even
000ACD76                            SoundAC:	incbin	sound\soundAC.bin
000ACDAA                            		even
000ACDAA                            SoundAD:	incbin	sound\soundAD.bin
000ACDE0                            		even
000ACDE0                            SoundAE:	incbin	sound\soundAE.bin
000ACE2A                            		even
000ACE2A                            SoundAF:	incbin	sound\soundAF.bin
000ACE58                            		even
000ACE58                            SoundB0:	incbin	sound\soundB0.bin
000ACE8A                            		even
000ACE8A                            SoundB1:	incbin	sound\soundB1.bin
000ACEB6                            		even
000ACEB6                            SoundB2:	incbin	sound\soundB2.bin
000ACF06                            		even
000ACF06                            SoundB3:	incbin	sound\soundB3.bin
000ACF50                            		even
000ACF50                            SoundB4:	incbin	sound\soundB4.bin
000ACFAC                            		even
000ACFAC                            SoundB5:	incbin	sound\soundB5.bin
000ACFDA                            		even
000ACFDA                            SoundB6:	incbin	sound\soundB6.bin
000ACFF8                            		even
000ACFF8                            SoundB7:	incbin	sound\soundB7.bin
000AD034                            		even
000AD034                            SoundB8:	incbin	sound\soundB8.bin
000AD052                            		even
000AD052                            SoundB9:	incbin	sound\soundB9.bin
000AD0B6                            		even
000AD0B6                            SoundBA:	incbin	sound\soundBA.bin
000AD0DE                            		even
000AD0DE                            SoundBB:	incbin	sound\soundBB.bin
000AD10A                            		even
000AD10A                            SoundBC:	incbin	sound\soundBC.bin
000AD14C                            		even
000AD14C                            SoundBD:	incbin	sound\soundBD.bin
000AD1A0                            		even
000AD1A0                            SoundBE:	incbin	sound\soundBE.bin
000AD1DA                            		even
000AD1DA                            SoundBF:	incbin	sound\soundBF.bin
000AD24C                            		even
000AD24C                            SoundC0:	incbin	sound\soundC0.bin
000AD27A                            		even
000AD27A                            SoundC1:	incbin	sound\soundC1.bin
000AD2B4                            		even
000AD2B4                            SoundC2:	incbin	sound\soundC2.bin
000AD2DE                            		even
000AD2DE                            SoundC3:	incbin	sound\soundC3.bin
000AD358                            		even
000AD358                            SoundC4:	incbin	sound\soundC4.bin
000AD380                            		even
000AD380                            SoundC5:	incbin	sound\soundC5.bin
000AD3E8                            		even
000AD3E8                            SoundC6:	incbin	sound\soundC6.bin
000AD42A                            		even
000AD42A                            SoundC7:	incbin	sound\soundC7.bin
000AD458                            		even
000AD458                            SoundC8:	incbin	sound\soundC8.bin
000AD46A                            		even
000AD46A                            SoundC9:	incbin	sound\soundC9.bin
000AD498                            		even
000AD498                            SoundCA:	incbin	sound\soundCA.bin
000AD4C6                            		even
000AD4C6                            SoundCB:	incbin	sound\soundCB.bin
000AD512                            		even
000AD512                            SoundCC:	incbin	sound\soundCC.bin
000AD54C                            		even
000AD54C                            SoundCD:	incbin	sound\soundCD.bin
000AD55A                            		even
000AD55A                            SoundCE:	incbin	sound\soundCE.bin
000AD588                            		even
000AD588                            SoundCF:	incbin	sound\soundCF.bin
000AD5C0                            		even
000AD5C0                            SoundD0:	incbin	sound\soundD0.bin
000AD5FA                            		even
000AD5FA                            SegaPCM:	incbin	"Dual PCM\Samples\incswf\Sega.swf",$3A
000B3440                            SegaPCM_End:	even
000B3440                            
000B3440                            ; ===========================================================================
000B3440                            ; ---------------------------------------------------------------------------
000B3440                            ; Z80 ROM address
000B3440                            ; ---------------------------------------------------------------------------
000B3440                            
000B3440                            Z80ROM:		incbin	"Dual PCM\Z80.bin"
000B4F78 00                         Z80ROM_End:	even
000B4F78                            
000B4F78                            ; ===========================================================================
000B4F78                            ; ---------------------------------------------------------------------------
000B4F78                            ; Sample 68k PCM list
000B4F78                            ; ---------------------------------------------------------------------------
000B4F78                            ; SampleList:
000B4F78                            		include	"Dual PCM\Samples.asm"
000B4F78                            ; ===========================================================================
000B4F78                            ; ---------------------------------------------------------------------------
000B4F78                            ; Sample 68k PCM list
000B4F78                            ; ---------------------------------------------------------------------------
000B4F78                            
000B4F78                            SampleList:
000B4F78                            
000B4F78                            	; --- Sonic 1 Samples ---
000B4F78                            
000B4F78 0000 0000                  		dc.l	Sonic1Kick			; 00
000B4F7C 0000 0000                  		dc.l	Sonic1Snare			; 01
000B4F80 0000 0000                  		dc.l	Sonic1Timpani		; 02
000B4F84 0000 0000                  		dc.l	SonimeDies			; 03
000B4F88 0000 0000                  		dc.l	SonimeFrustrated	; 04
000B4F8C 0000 0000                  		dc.l	SonimeHappy			; 05
000B4F90 0000 0000                  		dc.l	SonimeHappy2		; 06
000B4F94 0000 0000                  		dc.l	SonimeHurt			; 07
000B4F98 0000 0000                  		dc.l	SonimeImpatient		; 08
000B4F9C 0000 0000                  		dc.l	SonimeInvincibility	; 09
000B4FA0 0000 0000                  		dc.l	SonimeSpikey	; 0A
000B4FA4 0000 0000                  		dc.l	SonimeSpeed	; 0B
000B4FA8 0000 0000                  		dc.l	SonimeBossDefeated	; 0C
000B4FAC                            		
000B4FAC                            ; ---------------------------------------------------------------------------
000B4FAC                            ; Sample z80 pointers
000B4FAC                            ; ---------------------------------------------------------------------------
000B4FAC =000036B0                  Sec	=	14000	; Hz per second
000B4FAC =000003E8                  Mil	=	1000	; centi-seconds per second
000B4FAC                            
000B4FAC                            	; --- Stop Sample (used by note 80) ---
000B4FAC                            
000B4FAC 0000 0000 0000 0000 0000+  StopSample:				dcz80	SWF_StopSample,		SWF_StopSample_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B4FB8                            
000B4FB8                            	; --- Sonic 1 Samples ---
000B4FB8                            
000B4FB8 0000 0000 0000 0000 0000+  Sonic1Kick:				dcz80	SWF_S1_Kick,		SWF_S1_Kick_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B4FC4 0000 0000 0000 0000 0000+  Sonic1Snare:			dcz80	SWF_S1_Snare,		SWF_S1_Snare_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B4FD0 0000 0000 0000 0000 0000+  Sonic1Timpani:			dcz80	SWF_S1_Timpani,		SWF_S1_Timpani,			SWF_StopSample,		SWF_StopSample_Rev
000B4FDC 0000 0000 0000 0000 0000+  SonimeDies:				dcz80	SWF_Dies,			SWF_Dies_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B4FE8 0000 0000 0000 0000 0000+  SonimeFrustrated:		dcz80	SWF_Frustrated,		SWF_Frustrated_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B4FF4 0000 0000 0000 0000 0000+  SonimeHappy:			dcz80	SWF_Happy,			SWF_Happy_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B5000 0000 0000 0000 0000 0000+  SonimeHappy2:			dcz80	SWF_Happy2,			SWF_Happy2_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B500C 0000 0000 0000 0000 0000+  SonimeHurt:				dcz80	SWF_Hurt,			SWF_Hurt_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B5018 0000 0000 0000 0000 0000+  SonimeImpatient:		dcz80	SWF_Impatient,		SWF_Impatient_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B5024 0000 0000 0000 0000 0000+  SonimeInvincibility:	dcz80	SWF_Invincibility,	SWF_Invincibility_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000B5030 0000 0000 0000 0000 0000+  SonimeSpikey:	dcz80	SWF_Spikey,	SWF_Spikey_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000B503C 0000 0000 0000 0000 0000+  SonimeSpeed:		dcz80	SWF_Speed,		SWF_Speed_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B5048 0000 0000 0000 0000 0000+  SonimeBossDefeated:		dcz80	SWF_BossDefeated,		SWF_BossDefeated_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B5054                            ; ---------------------------------------------------------------------------
000B5054                            ; Sample file includes
000B5054                            ; ---------------------------------------------------------------------------
000B5054                            			align	$8000,$FF
000B8000                            ; ---------------------------------------------------------------------------
000B8000                            
000B8000                            	; --- Volume tables ---
000B8000                            
000B8000                            PCM_Volumes:		incbin	"Dual PCM\Volume Maker\Volumes.bin"
000C0000                            
000C0000                            	; --- Stop Sample (used by note 80) ---
000C0000                            
000C0000                            			EndMarker
000C0198                            SWF_StopSample:		dcb.b	$8000-((Z80E_Read*(($1000+$100)/$100))*2),$80
000C7E68                            SWF_StopSample_Rev:	EndMarker
000C8000                            
000C8000                            	; --- Sonic 1 Samples ---
000C8000                            
000C8000                            SWF_S1_Kick:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Kick.swf"
000C8894                            SWF_S1_Kick_Rev:	EndMarker
000C8A2C                            SWF_S1_Snare:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare.swf"
000C9303                            SWF_S1_Snare_Rev:	EndMarker
000C949B                            SWF_S1_Timpani:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani.swf"
000CC41F                            SWF_S1_Timpani_Rev:	EndMarker
000CC5B7                            SWF_Dies:			incbin	"Dual PCM\Samples\incswf\dies.swf"
000D0D24                            SWF_Dies_Rev:		EndMarker
000D0EBC                            SWF_Frustrated:		incbin	"Dual PCM\Samples\incswf\frustrated.swf"
000D8283                            SWF_Frustrated_Rev:	EndMarker
000D841B                            SWF_Happy:			incbin	"Dual PCM\Samples\incswf\happy.swf"
000DF3D3                            SWF_Happy_Rev:		EndMarker
000DF56B                            SWF_Happy2:			incbin	"Dual PCM\Samples\incswf\happy 2.swf"
000ECBB7                            SWF_Happy2_Rev:		EndMarker
000ECD4F                            SWF_Hurt:			incbin	"Dual PCM\Samples\incswf\hurt.swf"
000EF942                            SWF_Hurt_Rev:		EndMarker
000EFADA                            SWF_Impatient:		incbin	"Dual PCM\Samples\incswf\impatient.swf"
000F922E                            SWF_Impatient_Rev:	EndMarker
000F93C6                            SWF_Invincibility:	incbin	"Dual PCM\Samples\incswf\invincibility.swf"
001107C1                            SWF_Invincibility_Rev:	EndMarker
00110959                            SWF_Spikey:	incbin	"Dual PCM\Samples\incswf\spikey.swf"
00114934                            SWF_Spikey_Rev:	EndMarker
00114ACC                            SWF_Speed:	incbin	"Dual PCM\Samples\incswf\goingatsupersonicspeed.swf"
0011F331                            SWF_Speed_Rev:	EndMarker
0011F4C9                            SWF_BossDefeated:	incbin	"Dual PCM\Samples\incswf\bossdefeated.swf"
0012783F                            SWF_BossDefeated_Rev:	EndMarker
001279D7                            ; ===========================================================================
001279D7                            ; ===========================================================================
001279D8 00                         		even
001279D8                            
001279D8                            ; ===========================================================================
001279D8                            
001279D8                            SHC2021:    incbin "SHC21_Lite_Sonic12.bin"
0012DC3C                                        even
0012DC3C                            
0012DC3C                            ; ===============================================================
0012DC3C                            ; ---------------------------------------------------------------
0012DC3C                            ; Error handling module
0012DC3C                            ; ---------------------------------------------------------------
0012DC3C                            
0012DC3C 4EBA 0000                  BusError:	jsr	ErrorHandler(pc)
0012DC40 4255 5320 4552 524F 5200   		dc.b	"BUS ERROR",0			; text
0012DC4A 01                         		dc.b	1				; extended stack frame
0012DC4C 00                         		even
0012DC4C                            
0012DC4C 4EBA 0000                  AddressError:	jsr	ErrorHandler(pc)
0012DC50 4144 4452 4553 5320 4552+  		dc.b	"ADDRESS ERROR",0		; text
0012DC5E 01                         		dc.b	1				; extended stack frame
0012DC60 00                         		even
0012DC60                            
0012DC60 4EBA 0000                  IllegalInstr:	jsr	ErrorHandler(pc)
0012DC64 494C 4C45 4741 4C20 494E+  		dc.b	"ILLEGAL INSTRUCTION",0		; text
0012DC78 00                         		dc.b	0				; extended stack frame
0012DC7A 00                         		even
0012DC7A                            
0012DC7A 4EBA 0000                  ZeroDivide:	jsr	ErrorHandler(pc)
0012DC7E 5A45 524F 2044 4956 4944+  		dc.b	"ZERO DIVIDE",0  		; text
0012DC8A 00                         		dc.b	0				; extended stack frame
0012DC8C 00                         		even
0012DC8C                            
0012DC8C 4EBA 0000                  ChkInstr:	jsr	ErrorHandler(pc)
0012DC90 4348 4B20 494E 5354 5255+  		dc.b	"CHK INSTRUCTION",0  		; text
0012DCA0 00                         		dc.b	0				; extended stack frame
0012DCA2 00                         		even
0012DCA2                            
0012DCA2 4EBA 0000                  TrapvInstr:	jsr	ErrorHandler(pc)
0012DCA6 5452 4150 5620 494E 5354+  		dc.b	"TRAPV INSTRUCTION",0  		; text
0012DCB8 00                         		dc.b	0				; extended stack frame
0012DCBA 00                         		even
0012DCBA                            
0012DCBA 4EBA 0000                  PrivilegeViol:	jsr	ErrorHandler(pc)
0012DCBE 5052 4956 494C 4547 4520+  		dc.b	"PRIVILEGE VIOLATION",0  	; text
0012DCD2 00                         		dc.b	0				; extended stack frame
0012DCD4 00                         		even
0012DCD4                            
0012DCD4 4EBA 0000                  Trace:		jsr	ErrorHandler(pc)
0012DCD8 5452 4143 4500             		dc.b	"TRACE",0 	  		; text
0012DCDE 00                         		dc.b	0				; extended stack frame
0012DCE0 00                         		even
0012DCE0                            
0012DCE0 4EBA 0000                  Line1010Emu:	jsr	ErrorHandler(pc)
0012DCE4 4C49 4E45 2031 3031 3020+  		dc.b	"LINE 1010 EMULATOR",0  	; text
0012DCF7 00                         		dc.b	0				; extended stack frame
0012DCF8                            		even
0012DCF8                            
0012DCF8 4EBA 0000                  Line1111Emu:	jsr	ErrorHandler(pc)
0012DCFC 4C49 4E45 2031 3131 3120+  		dc.b	"LINE 1111 EMULATOR",0  	; text
0012DD0F 00                         		dc.b	0				; extended stack frame
0012DD10                            		even
0012DD10                            
0012DD10 4EBA 0000                  ErrorExcept:	jsr	ErrorHandler(pc)
0012DD14 4552 524F 5220 4558 4345+  		dc.b	"ERROR EXCEPTION",0    		; text
0012DD24 00                         		dc.b	0				; extended stack frame
0012DD26 00                         		even
0012DD26                            
0012DD26                            ErrorHandler:	incbin	"ErrorHandler.bin"
0012F73A                            
0012F73A                            ; end of 'ROM'
0012F73A                            EndOfRom:
0012F73A                            
0012F73A                            
