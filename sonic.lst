00000000                            ; /=========================================================================\
00000000                            ; º	This file is generated by The Interactive Disassembler (IDA)	    º
00000000                            ; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            		include	"Equates.asm"
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Equates
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =FFFFFF90                  HBlankRAM	=	$FFFFFF90		; word	; jmp $00000000
00000000 =FFFFFF92                  HBlankRout	=	HBlankRAM+$02		; long	; ''
00000000 =FFFFFF96                  VBlankRAM	=	HBlankRout+$04		; word	; jmp $00000000
00000000 =FFFFFF98                  VBlankRout	=	VBlankRAM+$02		; long	; ''
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                            		include	"Equz80.asm"
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; ListEqu.exe generated from "Dual PCM\Z80.lst"
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00000018                  Z80E_Read = $18 
00000000 =000000DD                  x = $DD 
00000000 =000000FD                  y = $FD 
00000000 =00000000                  ldin = $0 
00000000 =00000000                  deci = $0 
00000000 =00000000                  inci = $0 
00000000 =00000000                  M_Read = $0 
00000000 =00000000                  M_CapPCM = $0 
00000000 =00000000                  M_Flush01 = $0 
00000000 =00000000                  M_Flush02 = $0 
00000000 =00000000                  M_Revert01 = $0 
00000000 =00000000                  M_Revert02 = $0 
00000000 =00000000                  M_Wrap = $0 
00000000 =00000000                  M_WrapCondition = $0 
00000000 =00000000                  Z80_Start = $0 
00000000 =00000010                  Z80_Stack = $10 
00000000 =00000010                  BreakLate = $10 
00000000 =00000028                  PCM1_ResetJmp = $28 
00000000 =00000030                  PCM2_ResetJmp = $30 
00000000 =00000038                  BreakVBlank = $38 
00000000 =00000040                  BVB_Check = $40 
00000000 =00000046                  BreakPrep = $46 
00000000 =00000063                  BreakDMA = $63 
00000000 =00000074                  BDMA_NoExchange = $74 
00000000 =00000082                  BDMA_NoFixVolume = $82 
00000000 =00000083                  BDMA_NoFixFlush = $83 
00000000 =00000084                  BDMA_ReadSet = $84 
00000000 =00000084                  BreakBank = $84 
00000000 =00000090                  BDMA_NoMax = $90 
00000000 =0000009A                  BDMA_FlushLoop = $9A 
00000000 =0000009A                  Z80_VBlank2 = $9A 
00000000 =0000009E                  BDMA_Flush02 = $9E 
00000000 =000000B3                  Z80_VBlank1 = $B3 
00000000 =000000B7                  BDMA_Flush01 = $B7 
00000000 =00000107                  BDMA_NoRestore = $107 
00000000 =00000107                  YM_FlushTimer = $107 
00000000 =00000116                  YMF_Buff1 = $116 
00000000 =00000120                  YM_Flush = $120 
00000000 =00000123                  YMF_NextByte = $123 
00000000 =00000142                  Z80_DelayYM1 = $142 
00000000 =00000169                  Z80_DelayYM2 = $169 
00000000 =00000189                  YMF_Finish02 = $189 
00000000 =0000018E                  Z80_DelayYM3 = $18E 
00000000 =00000192                  YMF_Finish01 = $192 
00000000 =00000197                  Z80_DelayYM4 = $197 
00000000 =0000019B                  PCM_Flush_exx = $19B 
00000000 =0000019C                  PCM_Flush = $19C 
00000000 =0000019F                  PCM_NextByte = $19F 
00000000 =000001B3                  Z80_DelayEnd1 = $1B3 
00000000 =000001B5                  YMF_Enter02 = $1B5 
00000000 =000001CC                  Z80_DelayEnd2 = $1CC 
00000000 =000001CE                  YMF_Enter01 = $1CE 
00000000 =000001F6                  YMF_SetBuff1 = $1F6 
00000000 =00000202                  VB_PCM1_VolOK = $202 
00000000 =0000020C                  VB_PCM2_VolOK = $20C 
00000000 =0000020D                  PCM_VolChangeDel = $20D 
00000000 =00000218                  PCM1_VolumeNext = $218 
00000000 =0000021D                  PCM2_VolumeNext = $21D 
00000000 =00000222                  PCM_VolChangeNo = $222 
00000000 =00000229                  Z80_Int1 = $229 
00000000 =0000022D                  Z80_Init = $22D 
00000000 =00000291                  CatchUp = $291 
00000000 =00000292                  CatchUp_Exx = $292 
00000000 =000002A6                  Z80_Int2 = $2A6 
00000000 =000002A7                  PCM1_MuteRet = $2A7 
00000000 =000002AC                  Int1_nop = $2AC 
00000000 =000002AD                  PCM1_Switch = $2AD 
00000000 =000002B8                  PCM1_OverflwCur = $2B8 
00000000 =000002C1                  PCM1_OverflwDiv = $2C1 
00000000 =000002DF                  Int1_lda = $2DF 
00000000 =000002E4                  PCM1_PrepRet = $2E4 
00000000 =000002E4                  PCM1_SampCur = $2E4 
00000000 =000002E7                  PCM1_Buffer = $2E7 
00000000 =000002EA                  PCM1_PitchQuo = $2EA 
00000000 =000002ED                  PCM1_PitchDiv = $2ED 
00000000 =000002F0                  PCM1_PitchCur = $2F0 
00000000 =000002F2                  PCM1_PreInst01 = $2F2 
00000000 =000002F7                  PCM1_PreInst02 = $2F7 
00000000 =000002FC                  PCM1_PreInst03 = $2FC 
00000000 =00000318                  PCM1_PreInst04 = $318 
00000000 =0000031D                  PCM1_PreInst05 = $31D 
00000000 =00000322                  PCM1_PreInst06 = $322 
00000000 =00000327                  PCM1_PreInst07 = $327 
00000000 =00000343                  PCM1_PreInst08 = $343 
00000000 =00000348                  PCM1_PreInst09 = $348 
00000000 =0000034D                  PCM1_PreInst0A = $34D 
00000000 =00000352                  PCM1_PreInst0B = $352 
00000000 =00000357                  PCM1_PreInst0C = $357 
00000000 =00000373                  PCM1_PreInst0D = $373 
00000000 =00000378                  PCM1_PreInst0E = $378 
00000000 =0000037D                  PCM1_PreInst0F = $37D 
00000000 =00000382                  PCM1_PreInst10 = $382 
00000000 =0000039E                  PCM1_PreInst11 = $39E 
00000000 =000003A3                  PCM1_PreInst12 = $3A3 
00000000 =000003A8                  PCM1_PreInst13 = $3A8 
00000000 =000003AD                  PCM1_PreInst14 = $3AD 
00000000 =000003B2                  PCM1_PreInst15 = $3B2 
00000000 =000003CE                  PCM1_PreInst16 = $3CE 
00000000 =000003D3                  PCM1_PreInst17 = $3D3 
00000000 =000003D8                  PCM1_PreInst18 = $3D8 
00000000 =00000403                  PCM2_MuteRet = $403 
00000000 =00000408                  Int2_nop = $408 
00000000 =00000409                  PCM2_Switch = $409 
00000000 =00000414                  PCM2_OverflwCur = $414 
00000000 =00000432                  PCM2_OverflwDiv = $432 
00000000 =0000043B                  Int2_lda = $43B 
00000000 =00000440                  PCM2_PrepRet = $440 
00000000 =00000440                  PCM2_SampCur = $440 
00000000 =00000443                  PCM2_Buffer = $443 
00000000 =00000446                  PCM2_PitchQuo = $446 
00000000 =00000449                  PCM2_PitchDiv = $449 
00000000 =0000044C                  PCM2_PitchCur = $44C 
00000000 =0000044E                  PCM2_PreInst01 = $44E 
00000000 =0000046A                  PCM2_PreInst02 = $46A 
00000000 =0000046F                  PCM2_PreInst03 = $46F 
00000000 =00000474                  PCM2_PreInst04 = $474 
00000000 =00000479                  PCM2_PreInst05 = $479 
00000000 =0000047E                  PCM2_PreInst06 = $47E 
00000000 =0000049A                  PCM2_PreInst07 = $49A 
00000000 =0000049F                  PCM2_PreInst08 = $49F 
00000000 =000004A4                  PCM2_PreInst09 = $4A4 
00000000 =000004A9                  PCM2_PreInst0A = $4A9 
00000000 =000004C5                  PCM2_PreInst0B = $4C5 
00000000 =000004CA                  PCM2_PreInst0C = $4CA 
00000000 =000004CF                  PCM2_PreInst0D = $4CF 
00000000 =000004D4                  PCM2_PreInst0E = $4D4 
00000000 =000004D9                  PCM2_PreInst0F = $4D9 
00000000 =000004F5                  PCM2_PreInst10 = $4F5 
00000000 =000004FA                  PCM2_PreInst11 = $4FA 
00000000 =000004FF                  PCM2_PreInst12 = $4FF 
00000000 =00000504                  PCM2_PreInst13 = $504 
00000000 =00000520                  PCM2_PreInst14 = $520 
00000000 =00000525                  PCM2_PreInst15 = $525 
00000000 =0000052A                  PCM2_PreInst16 = $52A 
00000000 =0000052F                  PCM2_PreInst17 = $52F 
00000000 =00000534                  PCM2_PreInst18 = $534 
00000000 =0000055F                  UPD1_Buffer = $55F 
00000000 =00000565                  UPD1_SampCur = $565 
00000000 =0000056B                  UPD1_PitchCur = $56B 
00000000 =000005A3                  PCM_BuffNoReset = $5A3 
00000000 =000005A4                  PCM1_ChangeBank = $5A4 
00000000 =000005BB                  PCM1_IgnoreBank = $5BB 
00000000 =000005BB                  PCM2_ChangeBank = $5BB 
00000000 =000005D2                  PCM2_IgnoreBank = $5D2 
00000000 =000005D2                  PCM1_ChangePitch = $5D2 
00000000 =000005DC                  PCM1_PitchHigh = $5DC 
00000000 =000005E7                  PCM1_PitchLow = $5E7 
00000000 =00000603                  PCM1_IgnorePitch = $603 
00000000 =00000603                  PCM2_ChangePitch = $603 
00000000 =0000060D                  PCM2_PitchHigh = $60D 
00000000 =00000618                  PCM2_PitchLow = $618 
00000000 =00000634                  PCM2_IgnorePitch = $634 
00000000 =00000634                  PCM_ChangeVolume = $634 
00000000 =00000641                  PCM1_Volume = $641 
00000000 =00000646                  PCM2_Volume = $646 
00000000 =0000064B                  PCM_VolumeAlter = $64B 
00000000 =0000064E                  PCM_VolumeRet = $64E 
00000000 =0000064E                  PCM1_NewRET = $64E 
00000000 =00000651                  PCM2_NewRET = $651 
00000000 =00000654                  PCM_NoUpdate = $654 
00000000 =0000066A                  CU_ValidDist = $66A 
00000000 =0000066F                  CU_Flush = $66F 
00000000 =00000673                  FL_NextByte = $673 
00000000 =00000687                  Z80_Flush1 = $687 
00000000 =000006A1                  Z80_Flush2 = $6A1 
00000000 =000006BC                  PCM1_Mute = $6BC 
00000000 =000006CE                  PCM1_Normal = $6CE 
00000000 =000006D4                  PCM1_Reverse = $6D4 
00000000 =000006ED                  PCM1_PrepReset = $6ED 
00000000 =000006FC                  PCM1_PrepCount = $6FC 
00000000 =0000070A                  PCM1_PrepLoc = $70A 
00000000 =0000072E                  Int1_jp = $72E 
00000000 =00000731                  PCM1_Reset = $731 
00000000 =00000745                  PCM1_ValueAdd = $745 
00000000 =00000770                  Int1_ldhl = $770 
00000000 =00000782                  PCM1_ResInst = $782 
00000000 =00000787                  PCM1_ResSamp = $787 
00000000 =0000078A                  PCM1_ResBuff = $78A 
00000000 =0000078D                  PCM1_ResDiv = $78D 
00000000 =00000790                  PCM1_ResPitCur = $790 
00000000 =00000794                  PCM1_ResQuo = $794 
00000000 =00000797                  PCM1_ResJump = $797 
00000000 =0000079A                  PCM1_NewSample = $79A 
00000000 =000007AA                  PCM1_NewNormal = $7AA 
00000000 =000007B0                  PCM1_NewReverse = $7B0 
00000000 =000007C7                  PCM2_Mute = $7C7 
00000000 =000007D9                  PCM2_Normal = $7D9 
00000000 =000007DF                  PCM2_Reverse = $7DF 
00000000 =000007F8                  PCM2_PrepReset = $7F8 
00000000 =00000807                  PCM2_PrepCount = $807 
00000000 =00000815                  PCM2_PrepLoc = $815 
00000000 =00000824                  Int2_jp = $824 
00000000 =00000827                  PCM2_Reset = $827 
00000000 =0000083B                  PCM2_ValueAdd = $83B 
00000000 =00000866                  Int2_ldhl = $866 
00000000 =00000878                  PCM2_ResInst = $878 
00000000 =0000087D                  PCM2_ResSamp = $87D 
00000000 =00000880                  PCM2_ResBuff = $880 
00000000 =00000883                  PCM2_ResDiv = $883 
00000000 =00000886                  PCM2_ResPitCur = $886 
00000000 =0000088A                  PCM2_ResQuo = $88A 
00000000 =0000088D                  PCM2_ResJump = $88D 
00000000 =00000890                  PCM2_NewSample = $890 
00000000 =000008A0                  PCM2_NewNormal = $8A0 
00000000 =000008A6                  PCM2_NewReverse = $8A6 
00000000 =00000A00                  PCM_Volume1 = $A00 
00000000 =00000B00                  PCM_Volume2 = $B00 
00000000 =00000C00                  PCM1_PrepTable = $C00 
00000000 =00000C30                  PCM2_PrepTable = $C30 
00000000 =00000C60                  PCM1_BankCur = $C60 
00000000 =00000C61                  PCM2_BankCur = $C61 
00000000 =00000C62                  MuteSample = $C62 
00000000 =00000C64                  MuteBank = $C64 
00000000 =00000C65                  MuteSample_Rev = $C65 
00000000 =00000C67                  MuteBank_Rev = $C67 
00000000 =00000C68                  YM_Buffer = $C68 
00000000 =00000C69                  PCM1_Sample = $C69 
00000000 =00000C6B                  PCM1_Bank = $C6B 
00000000 =00000C6C                  PCM1_Sample_Rev = $C6C 
00000000 =00000C6E                  PCM1_Bank_Rev = $C6E 
00000000 =00000C6F                  PCM1_SampleNext = $C6F 
00000000 =00000C71                  PCM1_BankNext = $C71 
00000000 =00000C72                  PCM1_SampleNext_Rev = $C72 
00000000 =00000C74                  PCM1_BankNext_Rev = $C74 
00000000 =00000C75                  PCM2_Sample = $C75 
00000000 =00000C77                  PCM2_Bank = $C77 
00000000 =00000C78                  PCM2_Sample_Rev = $C78 
00000000 =00000C7A                  PCM2_Bank_Rev = $C7A 
00000000 =00000C7B                  PCM2_SampleNext = $C7B 
00000000 =00000C7D                  PCM2_BankNext = $C7D 
00000000 =00000C7E                  PCM2_SampleNext_Rev = $C7E 
00000000 =00000C80                  PCM2_BankNext_Rev = $C80 
00000000 =00000CB0                  PCM_Buffer1 = $CB0 
00000000 =00000EB0                  PCM_Buffer2 = $EB0 
00000000 =00001000                  YM_Buffer1 = $1000 
00000000 =00001400                  YM_Buffer2 = $1400 
00000000 =00001800                  PCM_OverflwCalc = $1800 
00000000 =00001A00                  PCM_VolumeControl = $1A00 
00000000 =00001A06                  PCM1_VolumeNew = $1A06 
00000000 =00001A08                  PCM1_VolumeCur = $1A08 
00000000 =00001A13                  PCM1_VolTimer = $1A13 
00000000 =00001A1B                  PCM1_NoVolume = $1A1B 
00000000 =00001A1B                  PCM2_VolumeNew = $1A1B 
00000000 =00001A1D                  PCM2_VolumeCur = $1A1D 
00000000 =00001A28                  PCM2_VolTimer = $1A28 
00000000 =00001A30                  PCM2_NoVolume = $1A30 
00000000 =00001A35                  SwitchVolume = $1A35 
00000000 =00001A38                  SV_VolumeBank = $1A38 
00000000 =00001A55                  SV_NoMute = $1A55 
00000000 =00001A5A                  SV_LoadVolume = $1A5A 
00000000 =00001A6E                  SV_Flush = $1A6E 
00000000 =00001A91                  SVF_NoMute = $1A91 
00000000 =00001A96                  SVF_LoadVolume = $1A96 
00000000 =00001AAB                  SVF_StartVolume = $1AAB 
00000000 =00001AFC                  SwitchBank = $1AFC 
00000000 =00001B03                  SetBank = $1B03 
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                            		include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),($C00004).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000 =000007A0                  torsoart = $7A0 ($C tiles)
00000000 =000007AC                  headart = $7AC ($14 tiles)
00000000 =00000798                  hairart = $798 (8 tiles)
00000000 =000006BA                  ringart = $6BA ($E tiles)
00000000 =00000568                  pointsart = $568 (9 tiles)
00000000 =00000571                  lamppostart = $571 ($A tiles)
00000000                            
00000000 =0000022D                  ssringart = $22D ($E tiles)
00000000                            
00000000 =FFFFF5C0                  SonimeSST = $FFFFF5C0
00000000 =FFFFFFF9                  v_ssangleprev = $FFFFFFF9
00000000 =FFFFF601                  FromSEGA = $FFFFF601
00000000                            
00000000 =00000000                  sonime_headtimer = 0
00000000 =00000002                  sonime_headx = 2
00000000 =00000003                  sonime_heady = 3
00000000 =00000004                  sonime_routine = 4
00000000 =00000005                  sonime_routine2 = 5
00000000 =00000006                  sonime_headx2 = 6
00000000 =00000007                  sonime_headx3 = 7
00000000 =00000009                  sonime_hairx = 9
00000000 =0000000A                  sonime_heady2 = $A
00000000 =0000000B                  sonime_heady3 = $B
00000000 =0000000D                  sonime_hairy = $D
00000000 =0000000E                  sonime_face = $E
00000000 =0000000F                  sonime_faceold = $F
00000000 =00000010                  sonime_facetimer = $10
00000000 =00000012                  sonime_ear = $12
00000000 =00000013                  sonime_earold = $13
00000000 =00000014                  sonime_eartimer = $14
00000000 =00000016                  sonime_torsox = $16
00000000 =00000017                  sonime_movein = $17
00000000 =00000018                  sonime_waittimer = $18
00000000 =00000019                  sonime_waittimer2 = $19
00000000 =00000020                  sonime_pausetimer = $20
00000000 =00000022                  sonime_airtimer = $22
00000000                            
00000000 =00000000                  face_neutrall = 0
00000000 =00000001                  face_blink = 1
00000000 =00000002                  face_neutrallm = 2
00000000 =00000003                  face_neutralm = 3
00000000 =00000004                  face_neutralr = 4
00000000 =00000005                  face_frustrated = 5
00000000 =00000006                  face_surprised = 6
00000000 =00000007                  face_happy = 7
00000000 =00000008                  face_confused = 8
00000000 =00000009                  face_meltdown = 9
00000000 =0000000A                  face_panic = $A
00000000 =0000000B                  face_impatient = $B
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            	; --- Alignment ---
00000000                            
00000000                            align		macro	Size,Value
00000000                            		dcb.b	Size-(*%Size),Value
00000000                            		endm
00000000                            
00000000                            	; --- Stop Z80 ---
00000000                            
00000000                            StopZ80		macro
00000000                            		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
00000000                            		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
00000000                            		bne.s	*-$08					; if not, branch
00000000                            		endm
00000000                            
00000000                            	; --- Start Z80 ---
00000000                            
00000000                            StartZ80	macro
00000000                            		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
00000000                            		endm
00000000                            
00000000                            ResetZ80	macro
00000000                            		move.w	#$0000,($A11200).l			; request Z80 reset (ON)
00000000                            		endm
00000000                            
00000000                            NeglectZ80	macro
00000000                            		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
00000000                            		endm
00000000                            
00000000                            	; --- DMA to (a6) containing C00004 ---
00000000                            
00000000                            DMA:		macro	Size, Source, Destination
00000000                            		move.l	#(((((Size/$02)<<$08)&$FF0000)+((Size/$02)&$FF))+$94009300),(a6)
00000000                            		move.l	#((((((Source&$FFFFFF)/$02)<<$08)&$FF0000)+(((Source&$FFFFFF)/$02)&$FF))+$96009500),(a6)
00000000                            		move.l	#(((((Source&$FFFFFF)/$02)&$7F0000)+$97000000)+((Destination>>$10)&$FFFF)),(a6)
00000000                            		move.w	#((Destination&$FF7F)|$80),(a6)
00000000                            		endm
00000000                            
00000000                            	; --- Storing 68k address for Z80 as dc ---
00000000                            
00000000                            dcz80		macro	Sample, SampleRev, SampleLoop, SampleLoopRev
00000000                            		dc.b	((Sample)&$FF)
00000000                            		dc.b	((((Sample)>>$08)&$7F)|$80)
00000000                            		dc.b	(((Sample)&$7F8000)>>$0F)
00000000                            		dc.b	(((SampleRev)-1)&$FF)
00000000                            		dc.b	(((((SampleRev)-1)>>$08)&$7F)|$80)
00000000                            		dc.b	((((SampleRev)-1)&$7F8000)>>$0F)
00000000                            		dc.b	((SampleLoop)&$FF)
00000000                            		dc.b	((((SampleLoop)>>$08)&$7F)|$80)
00000000                            		dc.b	(((SampleLoop)&$7F8000)>>$0F)
00000000                            		dc.b	(((SampleLoopRev)-1)&$FF)
00000000                            		dc.b	(((((SampleLoopRev)-1)>>$08)&$7F)|$80)
00000000                            		dc.b	((((SampleLoopRev)-1)&$7F8000)>>$0F)
00000000                            		endm
00000000                            
00000000                            	; --- End marker for PCM samples ---
00000000                            
00000000                            EndMarker	macro
00000000                            		dcb.b	Z80E_Read*(($1000+$100)/$100),$00
00000000                            		endm
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            PlayPCM2	macro	Sample
00000000                            		move.l	a0,-(sp)
00000000                            		move.l	a1,-(sp)
00000000                            		lea (Sample).l,a0 ; load sample pointers
00000000                            		lea ($A00C75).l,a1 ; load PCM2 pointers
00000000                            		move.w #$0100,($A11100).l ; request Z80 stop (ON)
00000000                            		btst.b #$00,($A11100).l ; has the Z80 stopped yet?
00000000                            		bne.s *-$08 ; if not, branch
00000000                            		move.b #1,($A0060E).l ; set pitch quotient
00000000                            		move.b #0,($A00619).l ; set pitch fraction
00000000                            		move.b #%11010010,($A00603).l ; set request
00000000                            		move.b (a0)+,(a1)+ ; set address of sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; set address of reverse sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; set address of loop sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; set address of loop reverse sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b #%11011010,($A00651).l ; set request
00000000                            		move.w #$0000,($A11100).l ; request Z80 stop (OFF)
00000000                            		move.l	(sp)+,a1
00000000                            		move.l	(sp)+,a0
00000000                            		endm
00000000                            
00000000 =000001FF                  Max_Rings = 511 ; default. maximum number possible is 759
00000000 =00000400                  Rings_Space = (Max_Rings+1)*2
00000000                            
00000000 =FFFF8000                  Object_Respawn_Table = $FFFF8000
00000000 =FFFFFE2A                  Camera_X_pos_last = $FFFFFE2A
00000000 =FFFFF76E                  Camera_Y_pos_last = $FFFFF76E
00000000                            
00000000 =FFFF8300                  Ring_Positions = $FFFF8300
00000000 =FFFF8700                  Ring_start_addr_ROM = Ring_Positions+Rings_Space
00000000 =FFFF8704                  Ring_end_addr_ROM = Ring_Positions+Rings_Space+4
00000000 =FFFF8708                  Ring_start_addr_RAM = Ring_Positions+Rings_Space+8
00000000 =FFFF870A                  Perfect_rings_left = Ring_Positions+Rings_Space+$A
00000000 =FFFF870C                  Rings_manager_routine = Ring_Positions+Rings_Space+$C
00000000 =FFFF870D                  Level_started_flag = Ring_Positions+Rings_Space+$D
00000000 =FFFF870E                  Ring_consumption_table = Ring_Positions+Rings_Space+$E
00000000 =00000014                  respawn_index = $14	
00000000                            
00000000 =FFFFF60E                  v_pocketbottom = $FFFFF60E
00000000 =FFFFF610                  v_pocketx = $FFFFF610
00000000 =FFFFF612                  f_insidepocket = $FFFFF612
00000000                            
00000000 =0000000B                  mainspr_mapframe    = $B
00000000 =0000000E                  mainspr_width        = $E
00000000 =0000000F                  mainspr_childsprites     = $F    ; amount of child sprites
00000000 =00000014                  mainspr_height        = $14
00000000 =00000010                  sub2_x_pos        = $10    ;x_vel
00000000 =00000012                  sub2_y_pos        = $12    ;y_vel
00000000 =00000015                  sub2_mapframe        = $15
00000000 =00000016                  sub3_x_pos        = $16    ;y_radius
00000000 =00000018                  sub3_y_pos        = $18    ;priority
00000000 =0000001B                  sub3_mapframe        = $1B    ;anim_frame
00000000 =0000001C                  sub4_x_pos        = $1C    ;anim
00000000 =0000001E                  sub4_y_pos        = $1E    ;anim_frame_duration
00000000 =00000021                  sub4_mapframe        = $21    ;collision_property
00000000 =00000022                  sub5_x_pos        = $22    ;status
00000000 =00000024                  sub5_y_pos        = $24    ;routine
00000000 =00000027                  sub5_mapframe        = $27
00000000 =00000028                  sub6_x_pos        = $28    ;subtype
00000000 =0000002A                  sub6_y_pos        = $2A
00000000 =0000002D                  sub6_mapframe        = $2D
00000000 =0000002E                  sub7_x_pos        = $2E
00000000 =00000030                  sub7_y_pos        = $30
00000000 =00000033                  sub7_mapframe        = $33
00000000 =00000034                  sub8_x_pos        = $34
00000000 =00000036                  sub8_y_pos        = $36
00000000 =00000039                  sub8_mapframe        = $39
00000000 =0000003A                  sub9_x_pos        = $3A
00000000 =0000003C                  sub9_y_pos        = $3C
00000000 =0000003F                  sub9_mapframe        = $3F
00000000 =00000006                  next_subspr       = $6	
00000000                            	
00000000 =00000001                  Yes		=	1
00000000 =00000000                  No		=	0
00000000                            
00000000 =00000000                  MUTEDAC		=	No
00000000 =00000000                  MUTEFM		=	No
00000000 =00000000                  MUTEPSG		=	No
00000000 =00000000                  MUTEPSG		=	No
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3139+  Date:		dc.b '(C)SEGA 1991.APR' ; Release date
00000120 5654 5542 4552 2049 4E20+  Title_Local:	dc.b 'VTUBER IN SONIC 1                               ' ; Domestic name
00000150 5654 5542 4552 2049 4E20+  Title_Int:	dc.b 'VTUBER IN SONIC 1                               ' ; International name
00000180 474D 2030 3030 3034 3034+  Serial:					dc.b "GM 00004049-01" ; Serial/version number (Rev01)
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E                            
0000030E                            loc_348:
0000030E 2CC7                       		move.l	d7,(a6)+
00000310 51CE FFFC                  		dbf	d6,loc_348
00000314 1039 00A1 0001             		move.b	($A10001).l,d0
0000031A 0200 00C0                  		andi.b	#$C0,d0
0000031E 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000322 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
0000032A                            
0000032A                            GameInit:
0000032A 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000330 7E00                       		moveq	#0,d7
00000332 3C3C 3F7F                  		move.w	#$3F7F,d6
00000336                            
00000336                            GameClrRAM:
00000336 2CC7                       		move.l	d7,(a6)+
00000338 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
0000033C 6100 0000                  		bsr.w	VDPSetupGame
00000340 6100 0000                  		bsr.w	SoundDriverLoad
00000344 6100 0000                  		bsr.w	JoypadInit
00000348 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000034E                            
0000034E 41FA 0000                  		lea	GML_Int(pc),a0				; load interrupt list
00000352 3258                       		movea.w	(a0)+,a1				; load dump address
00000354 22D8                       		move.l	(a0)+,(a1)+				; jmp $0000
00000356 22D8                       		move.l	(a0)+,(a1)+				; $0000 jmp
00000358 22D8                       		move.l	(a0)+,(a1)+				; $00000000
0000035A                            
0000035A                            MainGameLoop:
0000035A 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000035E 0240 001C                  		andi.w	#$1C,d0
00000362 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000366 60F2                       		bra.s	MainGameLoop
00000368                            
00000368 FF90                       GML_Int:	dc.w	HBlankRAM&$FFFF
0000036A 4EF9 0000 0000             		jmp	PalToCRAM
00000370 4EF9 0000 0000             		jmp	loc_B10
00000376                            
00000376 4E73                       NullBlank:	rte
00000378                            
00000378                            ; ===========================================================================
00000378                            ; ---------------------------------------------------------------------------
00000378                            ; Main game mode array
00000378                            ; ---------------------------------------------------------------------------
00000378                            
00000378                            GameModeArray:
00000378 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000037C                            ; ===========================================================================
0000037C 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
00000380                            ; ===========================================================================
00000380 6000 0000                  		bra.w	Level		; Demo Mode ($08)
00000384                            ; ===========================================================================
00000384 6000 0000                  		bra.w	Level		; Normal Level ($0C)
00000388                            ; ===========================================================================
00000388 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
0000038C                            ; ===========================================================================
0000038C 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
00000390                            ; ===========================================================================
00000390 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
00000394                            ; ===========================================================================
00000394 6000 0000                  		bra.w	Credits		; Credits ($1C)
00000398                            ; ===========================================================================
00000398 4E75                       		rts	
0000039A                            ; ===========================================================================
0000039A                            
0000039A                            loc_43A:
0000039A 46FC 2700                  		move	#$2700,sr
0000039E 544F                       		addq.w	#2,sp
000003A0 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
000003A4 544F                       		addq.w	#2,sp
000003A6 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003AC 6100 0000                  		bsr.w	ShowErrorMsg
000003B0 202F 0002                  		move.l	2(sp),d0
000003B4 6100 0000                  		bsr.w	sub_5BA
000003B8 2038 FC40                  		move.l	($FFFFFC40).w,d0
000003BC 6100 0000                  		bsr.w	sub_5BA
000003C0 6000                       		bra.s	loc_478
000003C2                            ; ===========================================================================
000003C2                            
000003C2                            loc_462:
000003C2 46FC 2700                  		move	#$2700,sr
000003C6 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003CC 6100 0000                  		bsr.w	ShowErrorMsg
000003D0 202F 0002                  		move.l	2(sp),d0
000003D4 6100 0000                  		bsr.w	sub_5BA
000003D8                            
000003D8                            loc_478:
000003D8 6100 0000                  		bsr.w	ErrorWaitForC
000003DC 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
000003E2 46FC 2300                  		move	#$2300,sr
000003E6 4E73                       		rte	
000003E8                            
000003E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000003E8                            
000003E8                            
000003E8                            ShowErrorMsg:				; XREF: loc_43A; loc_462
000003E8 4DF9 00C0 0000             		lea	($C00000).l,a6
000003EE 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000003F8 41F9 0000 0000             		lea	(Art_Text).l,a0
000003FE 323C 027F                  		move.w	#$27F,d1
00000402                            
00000402                            Error_LoadGfx:
00000402 3C98                       		move.w	(a0)+,(a6)
00000404 51C9 FFFC                  		dbf	d1,Error_LoadGfx
00000408 7000                       		moveq	#0,d0		; clear	d0
0000040A 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
0000040E 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000412 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000416 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
00000420 7212                       		moveq	#$12,d1		; number of characters
00000422                            
00000422                            Error_LoopChars:
00000422 7000                       		moveq	#0,d0
00000424 1018                       		move.b	(a0)+,d0
00000426 0640 0790                  		addi.w	#$790,d0
0000042A 3C80                       		move.w	d0,(a6)
0000042C 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
00000430 4E75                       		rts	
00000432                            ; End of function ShowErrorMsg
00000432                            
00000432                            ; ===========================================================================
00000432 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
00000436 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
0000043A 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
0000043E 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
00000442 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
00000446 0000                       		dc.w asc_5A6-ErrorText
00000448 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
0000045B 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000046E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000481 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000494 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
000004A7 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
000004BA 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
000004CD 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
000004E0 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
000004F3 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
00000506 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
0000051A 00                         		even
0000051A                            
0000051A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000051A                            
0000051A                            
0000051A                            sub_5BA:				; XREF: loc_43A; loc_462
0000051A 3CBC 07CA                  		move.w	#$7CA,(a6)
0000051E 7407                       		moveq	#7,d2
00000520                            
00000520                            loc_5C0:
00000520 E998                       		rol.l	#4,d0
00000522 6100                       		bsr.s	sub_5CA
00000524 51CA FFFA                  		dbf	d2,loc_5C0
00000528 4E75                       		rts	
0000052A                            ; End of function sub_5BA
0000052A                            
0000052A                            
0000052A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000052A                            
0000052A                            
0000052A                            sub_5CA:				; XREF: sub_5BA
0000052A 3200                       		move.w	d0,d1
0000052C 0241 000F                  		andi.w	#$F,d1
00000530 0C41 000A                  		cmpi.w	#$A,d1
00000534 6500                       		bcs.s	loc_5D8
00000536 5E41                       		addq.w	#7,d1
00000538                            
00000538                            loc_5D8:
00000538 0641 07C0                  		addi.w	#$7C0,d1
0000053C 3C81                       		move.w	d1,(a6)
0000053E 4E75                       		rts	
00000540                            ; End of function sub_5CA
00000540                            
00000540                            
00000540                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000540                            
00000540                            
00000540                            ErrorWaitForC:				; XREF: loc_478
00000540 6100 0000                  		bsr.w	ReadJoypads
00000544 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
0000054A 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000054E 4E75                       		rts	
00000550                            ; End of function ErrorWaitForC
00000550                            
00000550                            ; ===========================================================================
00000550                            
00000550                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000A70                            		even
00000A70                            
00000A70                            ; ===========================================================================
00000A70                            
00000A70                            DetectPAL:
00000A70 4EB9 0000 0000             		jsr	(sub_71B4C).l
00000A76 0839 0006 00A1 0001        		btst    #6,($A10001).l
00000A7E 6700 0000                  		beq.w   @ret
00000A82 5238 FFBF                  		addq.b  #1,($FFFFFFBF).w
00000A86 0C38 0005 FFBF             		cmpi.b  #5,($FFFFFFBF).w
00000A8C 6500                       		blo.s   @ret
00000A8E 4238 FFBF                  		clr.b   ($FFFFFFBF).w
00000A92 4EB9 0000 0000             		jsr	sub_71B4C
00000A98                            @ret
00000A98 4E75                       		rts
00000A9A                            ; End of function DetectPAL
00000A9A                            
00000A9A                            loc_B10:				; XREF: Vectors
00000A9A 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000A9E 4A38 F62A                  		tst.b	($FFFFF62A).w
00000AA2 6700                       		beq.s	loc_B88
00000AA4 3039 00C0 0004             		move.w	($C00004).l,d0
00000AAA 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000AB4 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000ABC 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000AC2 6700                       		beq.s	loc_B42
00000AC4 303C 0700                  		move.w	#$700,d0
00000AC8                            
00000AC8                            loc_B3E:
00000AC8 51C8 FFFE                  		dbf	d0,loc_B3E
00000ACC                            
00000ACC                            loc_B42:
00000ACC 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000AD0 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000AD6 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000ADC 0240 003E                  		andi.w	#$3E,d0
00000AE0 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000AE4 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000AE8                            
00000AE8                            loc_B5E:				; XREF: loc_B88
00000AE8 4EB9 0000 0A70             		jsr		(DetectPAL).l
00000AEE                            
00000AEE                            loc_B64:				; XREF: loc_D50
00000AEE 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000AF2 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000AF6 4E73                       		rte	
00000AF8                            ; ===========================================================================
00000AF8 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000AFC 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000B00 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000B04 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000B08 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000B0C 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000B10 0000                       		dc.w loc_E72-off_B6E
00000B12                            ; ===========================================================================
00000B12                            
00000B12                            loc_B88:				; XREF: loc_B10; off_B6E
00000B12 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000B18 6700                       		beq.s	loc_B9A
00000B1A 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000B20 6600 FFC6                  		bne.w	loc_B5E
00000B24                            
00000B24                            loc_B9A:
00000B24 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000B2A 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000B2E 3039 00C0 0004             		move.w	($C00004).l,d0
00000B34 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B3A 6700                       		beq.s	loc_BBA
00000B3C 303C 0700                  		move.w	#$700,d0
00000B40                            
00000B40                            loc_BB6:
00000B40 51C8 FFFE                  		dbf	d0,loc_BB6
00000B44                            
00000B44                            loc_BBA:
00000B44 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B4A 4A38 F64E                  		tst.b	($FFFFF64E).w
00000B4E 6600                       		bne.s	loc_BFE
00000B50 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B56 3ABC 8C81                  		move.w	#$8C81,(a5)
00000B5A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B60 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000B66 3ABC 977F                  		move.w	#$977F,(a5)
00000B6A 3ABC C000                  		move.w	#$C000,(a5)
00000B6E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B74 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B78 6000                       		bra.s	loc_C22
00000B7A                            ; ===========================================================================
00000B7A                            
00000B7A                            loc_BFE:				; XREF: loc_BC8
00000B7A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B80 3ABC 8C89                  		move.w	#$8C89,(a5)
00000B84 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B8A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000B90 3ABC 977F                  		move.w	#$977F,(a5)
00000B94 3ABC C000                  		move.w	#$C000,(a5)
00000B98 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B9E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BA2                            
00000BA2                            loc_C22:				; XREF: loc_BC8
00000BA2 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000BA6 6000 FF40                  		bra.w	loc_B5E
00000BAA                            ; ===========================================================================
00000BAA                            
00000BAA                            loc_C32:				; XREF: off_B6E
00000BAA 6100 0000                  		bsr.w	sub_106E
00000BAE                            
00000BAE                            loc_C36:				; XREF: off_B6E
00000BAE 4A78 F614                  		tst.w	($FFFFF614).w
00000BB2 6700 0000                  		beq.w	locret_C42
00000BB6 5378 F614                  		subq.w	#1,($FFFFF614).w
00000BBA                            
00000BBA                            locret_C42:
00000BBA 4E75                       		rts	
00000BBC                            ; ===========================================================================
00000BBC                            
00000BBC                            loc_C44:				; XREF: off_B6E
00000BBC 6100 0000                  		bsr.w	sub_106E
00000BC0 6100 0000                  		bsr.w	sub_6886
00000BC4 6100 0000                  		bsr.w	sub_1642
00000BC8 4A78 F614                  		tst.w	($FFFFF614).w
00000BCC 6700 0000                  		beq.w	locret_C5C
00000BD0 5378 F614                  		subq.w	#1,($FFFFF614).w
00000BD4                            
00000BD4                            locret_C5C:
00000BD4 4E75                       		rts	
00000BD6                            ; ===========================================================================
00000BD6                            
00000BD6                            loc_C5E:				; XREF: off_B6E
00000BD6 6100 0000                  		bsr.w	sub_106E
00000BDA 4E75                       		rts
00000BDC                            
00000BDC                            ; Return:
00000BDC 6100 0000                  		bsr.w	ReadJoypads
00000BE0 4E75                       		rts	
00000BE2                            ; ===========================================================================
00000BE2                            
00000BE2                            loc_C64:				; XREF: off_B6E
00000BE2 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000BE8 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000BEC                            
00000BEC                            loc_C6E:				; XREF: off_B6E
00000BEC 6100 0000                  		bsr.w	ReadJoypads
00000BF0 4A38 F64E                  		tst.b	($FFFFF64E).w
00000BF4 6600                       		bne.s	loc_CB0
00000BF6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BFC 3ABC 8C81                  		move.w	#$8C81,(a5)
00000C00 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C06 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C0C 3ABC 977F                  		move.w	#$977F,(a5)
00000C10 3ABC C000                  		move.w	#$C000,(a5)
00000C14 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C1A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C1E 6000                       		bra.s	loc_CD4
00000C20                            ; ===========================================================================
00000C20                            
00000C20                            loc_CB0:				; XREF: loc_C76
00000C20 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C26 3ABC 8C89                  		move.w	#$8C89,(a5)
00000C2A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C30 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C36 3ABC 977F                  		move.w	#$977F,(a5)
00000C3A 3ABC C000                  		move.w	#$C000,(a5)
00000C3E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C44 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C48                            
00000C48                            loc_CD4:				; XREF: loc_C76
00000C48 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C4C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C52 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000C58 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000C5E 3ABC 977F                  		move.w	#$977F,(a5)
00000C62 3ABC 7C00                  		move.w	#$7C00,(a5)
00000C66 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C6C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C70 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C76 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000C7C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000C82 3ABC 977F                  		move.w	#$977F,(a5)
00000C86 3ABC 7800                  		move.w	#$7800,(a5)
00000C8A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C90 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C94 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000C9A                            
00000C9A                            loc_D50:
00000C9A 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000CA0 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000CA6 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000CAC 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000CB2 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000CB8 6400                       		bcc.s	Demo_Time
00000CBA 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000CC0 588F                       		addq.l	#4,sp
00000CC2 6000 FE2A                  		bra.w	loc_B64
00000CC6                            
00000CC6                            ; ---------------------------------------------------------------------------
00000CC6                            ; Subroutine to	run a demo for an amount of time
00000CC6                            ; ---------------------------------------------------------------------------
00000CC6                            
00000CC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000CC6                            
00000CC6                            
00000CC6                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000CC6 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000CCA 4EB9 0000 0000             		jsr	AniArt_Load
00000CD0 4EB9 0000 0000             		jsr	HudUpdate
00000CD6 6100 0000                  		bsr.w	sub_165E
00000CDA 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000CDE 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000CE2 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000CE6                            
00000CE6                            Demo_TimeEnd:
00000CE6 4E75                       		rts	
00000CE8                            ; End of function Demo_Time
00000CE8                            
00000CE8                            ; ===========================================================================
00000CE8                            
00000CE8                            loc_DA6:				; XREF: off_B6E
00000CE8 6100 0000                  		bsr.w	ReadJoypads
00000CEC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CF2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CF8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000CFE 3ABC 977F                  		move.w	#$977F,(a5)
00000D02 3ABC C000                  		move.w	#$C000,(a5)
00000D06 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000D0C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D10 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D16 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D1C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D22 3ABC 977F                  		move.w	#$977F,(a5)
00000D26 3ABC 7800                  		move.w	#$7800,(a5)
00000D2A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D30 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D34 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D3A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000D40 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000D46 3ABC 977F                  		move.w	#$977F,(a5)
00000D4A 3ABC 7C00                  		move.w	#$7C00,(a5)
00000D4E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D54 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D58 6100 0000                  		bsr.w	PalCycle_SS
00000D5C 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000D62                            
00000D62                            loc_E64:
00000D62 0C38 0060 F625             		cmpi.b	#96,($FFFFF625).w
00000D68 6400                       		bcc.s	@update
00000D6A 6000 0000                  		bra.w	locret_E70
00000D6E                            
00000D6E                            	@update:
00000D6E 4EB9 0000 0000             		jsr	SS_LoadWalls
00000D74 4A78 F614                  		tst.w	($FFFFF614).w
00000D78 6700 0000                  		beq.w	locret_E70
00000D7C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000D80                            
00000D80                            locret_E70:
00000D80 4E75                       		rts	
00000D82                            ; ===========================================================================
00000D82                            
00000D82                            loc_E72:				; XREF: off_B6E
00000D82 6100 0000                  		bsr.w	ReadJoypads
00000D86 4A38 F64E                  		tst.b	($FFFFF64E).w
00000D8A 6600                       		bne.s	loc_EB4
00000D8C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D92 3ABC 8C81                  		move.w	#$8C81,(a5)
00000D96 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000D9C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DA2 3ABC 977F                  		move.w	#$977F,(a5)
00000DA6 3ABC C000                  		move.w	#$C000,(a5)
00000DAA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DB0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DB4 6000                       		bra.s	loc_ED8
00000DB6                            ; ===========================================================================
00000DB6                            
00000DB6                            loc_EB4:				; XREF: loc_E7A
00000DB6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DBC 3ABC 8C89                  		move.w	#$8C89,(a5)
00000DC0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DC6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DCC 3ABC 977F                  		move.w	#$977F,(a5)
00000DD0 3ABC C000                  		move.w	#$C000,(a5)
00000DD4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DDA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DDE                            
00000DDE                            loc_ED8:				; XREF: loc_E7A
00000DDE 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000DE2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DE8 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000DEE 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000DF4                            
00000DF4                            loc_EEE:
00000DF4 3ABC 977F                  		move.w	#$977F,(a5)
00000DF8 3ABC 7C00                  		move.w	#$7C00,(a5)
00000DFC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E02 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E06 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E0C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000E12 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000E18 3ABC 977F                  		move.w	#$977F,(a5)
00000E1C 3ABC 7800                  		move.w	#$7800,(a5)
00000E20 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E26 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E2A 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E30                            
00000E30                            loc_F54:
00000E30 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000E36 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000E3C 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000E42 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000E48 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000E4C 4EB9 0000 0000             		jsr	AniArt_Load
00000E52 4EB9 0000 0000             		jsr	HudUpdate
00000E58 6100 0000                  		bsr.w	sub_1642
00000E5C 4E75                       		rts	
00000E5E                            ; ===========================================================================
00000E5E                            
00000E5E                            loc_F8A:				; XREF: off_B6E
00000E5E 6100 0000                  		bsr.w	sub_106E
00000E62 5238 F628                  		addq.b	#1,($FFFFF628).w
00000E66 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000E6C 4E75                       		rts	
00000E6E                            ; ===========================================================================
00000E6E                            
00000E6E                            loc_F9A:				; XREF: off_B6E
00000E6E 6100 0000                  		bsr.w	sub_106E
00000E72 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E76 6000 0000                  		bra.w	sub_1642
00000E7A                            ; ===========================================================================
00000E7A                            
00000E7A                            loc_FA6:				; XREF: off_B6E
00000E7A 6100 0000                  		bsr.w	ReadJoypads
00000E7E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E84 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E8A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E90 3ABC 977F                  		move.w	#$977F,(a5)
00000E94 3ABC C000                  		move.w	#$C000,(a5)
00000E98 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E9E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EA2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EA8 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000EAE 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000EB4 3ABC 977F                  		move.w	#$977F,(a5)
00000EB8 3ABC 7800                  		move.w	#$7800,(a5)
00000EBC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EC2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EC6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ECC 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000ED2 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000ED8 3ABC 977F                  		move.w	#$977F,(a5)
00000EDC 3ABC 7C00                  		move.w	#$7C00,(a5)
00000EE0 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EE6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EEA 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000EF0                            
00000EF0                            loc_1060:
00000EF0 4A78 F614                  		tst.w	($FFFFF614).w
00000EF4 6700 0000                  		beq.w	locret_106C
00000EF8 5378 F614                  		subq.w	#1,($FFFFF614).w
00000EFC                            
00000EFC                            locret_106C:
00000EFC 4E75                       		rts	
00000EFE                            
00000EFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000EFE                            
00000EFE                            
00000EFE                            sub_106E:				; XREF: loc_C32; et al
00000EFE 6100 0000                  		bsr.w	ReadJoypads
00000F02 4A38 F64E                  		tst.b	($FFFFF64E).w
00000F06 6600                       		bne.s	loc_10B0
00000F08 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F0E 3ABC 8C81                  		move.w	#$8C81,(a5)
00000F12 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000F18 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000F1E 3ABC 977F                  		move.w	#$977F,(a5)
00000F22 3ABC C000                  		move.w	#$C000,(a5)
00000F26 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F2C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F30                            
00000F30                            PAL1_LOAD:
00000F30 6000                       		bra.s	loc_10D4
00000F32                            ; ===========================================================================
00000F32                            
00000F32                            loc_10B0:
00000F32 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F38 3ABC 8C89                  		move.w	#$8C89,(a5)
00000F3C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000F42 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000F48 3ABC 977F                  		move.w	#$977F,(a5)
00000F4C 3ABC C000                  		move.w	#$C000,(a5)
00000F50 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F56 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F5A                            loc_10D4:
00000F5A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F60 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F66 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F6C 3ABC 977F                  		move.w	#$977F,(a5)
00000F70 3ABC 7800                  		move.w	#$7800,(a5)
00000F74 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F7A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F7E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F84 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F8A 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F90 3ABC 977F                  		move.w	#$977F,(a5)
00000F94 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F98 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F9E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FA2 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000FA8 4E75                       		rts	
00000FAA                            ; End of function sub_106E
00000FAA                            
00000FAA                            ; ---------------------------------------------------------------------------
00000FAA                            ; Subroutine to	move pallets from the RAM to CRAM
00000FAA                            ; ---------------------------------------------------------------------------
00000FAA                            
00000FAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FAA                            
00000FAA                            
00000FAA                            PalToCRAM:
00000FAA 46FC 2700                  		move	#$2700,sr
00000FAE 4A78 F644                  		tst.w	($FFFFF644).w
00000FB2 6700                       		beq.s	locret_119C
00000FB4 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00000FBA 2F08                       		move.l	a0,-(sp)
00000FBC 41F9 00C0 0004             		lea	($C00004).l,a0
00000FC2 30BC 8C89                  		move.w	#$8C89,(a0)
00000FC6 30BC 8ADF                  		move.w	#$8ADF,(a0)
00000FCA 205F                       		move.l	(sp)+,a0
00000FCC 4A38 F64F                  		tst.b	($FFFFF64F).w
00000FD0 6600                       		bne.s	loc_119E
00000FD2                            
00000FD2                            locret_119C:
00000FD2 4E73                       		rte	
00000FD4                            ; ===========================================================================
00000FD4                            
00000FD4                            loc_119E:				; XREF: PalToCRAM
00000FD4 4238 F64F                  		clr.b	($FFFFF64F).w
00000FD8 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000FDC 6100 FCE8                  		bsr.w	Demo_Time
00000FE0 4EB9 0000 0A70             		jsr		(DetectPAL).l
00000FE6 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000FEA 4E73                       		rte	
00000FEC                            ; End of function PalToCRAM
00000FEC                            
00000FEC                            ; ---------------------------------------------------------------------------
00000FEC                            ; Subroutine to	initialise joypads
00000FEC                            ; ---------------------------------------------------------------------------
00000FEC                            
00000FEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FEC                            
00000FEC                            
00000FEC                            JoypadInit:				; XREF: GameClrRAM
00000FEC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FF4                            
00000FF4                            Joypad_WaitZ80:
00000FF4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
00000FFC 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
00000FFE 7040                       		moveq	#$40,d0
00001000 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00001006 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
0000100C 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001012 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000101A 4E75                       		rts	
0000101C                            ; End of function JoypadInit
0000101C                            
0000101C                            ; ---------------------------------------------------------------------------
0000101C                            ; Subroutine to	read joypad input, and send it to the RAM
0000101C                            ; ---------------------------------------------------------------------------
0000101C                            
0000101C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000101C                            
0000101C                            
0000101C                            ReadJoypads:
0000101C 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00001020 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001026 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001028 5449                       		addq.w	#2,a1		; do the second	joypad
0000102A                            
0000102A                            Joypad_Read:
0000102A 12BC 0000                  		move.b	#0,(a1)
0000102E 4E71                       		nop	
00001030 4E71                       		nop	
00001032 1011                       		move.b	(a1),d0
00001034 E508                       		lsl.b	#2,d0
00001036 0200 00C0                  		andi.b	#$C0,d0
0000103A 12BC 0040                  		move.b	#$40,(a1)
0000103E 4E71                       		nop	
00001040 4E71                       		nop	
00001042 1211                       		move.b	(a1),d1
00001044 0201 003F                  		andi.b	#$3F,d1
00001048 8001                       		or.b	d1,d0
0000104A 4600                       		not.b	d0
0000104C 1210                       		move.b	(a0),d1
0000104E B101                       		eor.b	d0,d1
00001050 10C0                       		move.b	d0,(a0)+
00001052 C200                       		and.b	d0,d1
00001054 10C1                       		move.b	d1,(a0)+
00001056 4E75                       		rts	
00001058                            ; End of function ReadJoypads
00001058                            
00001058                            
00001058                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001058                            
00001058                            
00001058                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001058 41F9 00C0 0004             		lea	($C00004).l,a0
0000105E 43F9 00C0 0000             		lea	($C00000).l,a1
00001064 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
0000106A 7E12                       		moveq	#$12,d7
0000106C                            
0000106C                            VDP_Loop:
0000106C 309A                       		move.w	(a2)+,(a0)
0000106E 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001072                            
00001072 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001078 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000107C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001082 7000                       		moveq	#0,d0
00001084 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000108E 3E3C 003F                  		move.w	#$3F,d7
00001092                            
00001092                            VDP_ClrCRAM:
00001092 3280                       		move.w	d0,(a1)
00001094 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001098                            
00001098 42B8 F616                  		clr.l	($FFFFF616).w
0000109C 42B8 F61A                  		clr.l	($FFFFF61A).w
000010A0 2F01                       		move.l	d1,-(sp)
000010A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000010A8 3ABC 8F01                  		move.w	#$8F01,(a5)
000010AC 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000010B2 3ABC 9780                  		move.w	#$9780,(a5)
000010B6 2ABC 4000 0080             		move.l	#$40000080,(a5)
000010BC 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000010C4                            
000010C4                            loc_128E:
000010C4 3215                       		move.w	(a5),d1
000010C6 0801 0001                  		btst	#1,d1
000010CA 66F8                       		bne.s	loc_128E
000010CC                            
000010CC 3ABC 8F02                  		move.w	#$8F02,(a5)
000010D0 221F                       		move.l	(sp)+,d1
000010D2 4E75                       		rts	
000010D4                            ; End of function VDPSetupGame
000010D4                            
000010D4                            ; ===========================================================================
000010D4 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000010DC 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000010E4 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000010EC 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000010F4 9001 9100 9200             		dc.w $9001, $9100, $9200
000010FA                            
000010FA                            ; ---------------------------------------------------------------------------
000010FA                            ; Subroutine to	clear the screen
000010FA                            ; ---------------------------------------------------------------------------
000010FA                            
000010FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010FA                            
000010FA                            
000010FA                            ClearScreen:
000010FA 4BF9 00C0 0004             		lea	($C00004).l,a5
00001100 3ABC 8F01                  		move.w	#$8F01,(a5)
00001104 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
0000110A 3ABC 9780                  		move.w	#$9780,(a5)
0000110E 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001114 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000111C                            
0000111C                            loc_12E6:
0000111C 3215                       		move.w	(a5),d1
0000111E 0801 0001                  		btst	#1,d1
00001122 66F8                       		bne.s	loc_12E6
00001124                            
00001124 3ABC 8F02                  		move.w	#$8F02,(a5)
00001128 4BF9 00C0 0004             		lea	($C00004).l,a5
0000112E 3ABC 8F01                  		move.w	#$8F01,(a5)
00001132 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001138 3ABC 9780                  		move.w	#$9780,(a5)
0000113C 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001142 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000114A                            
0000114A                            loc_1314:
0000114A 3215                       		move.w	(a5),d1
0000114C 0801 0001                  		btst	#1,d1
00001150 66F8                       		bne.s	loc_1314
00001152                            
00001152 3ABC 8F02                  		move.w	#$8F02,(a5)
00001156 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000115E 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001166 43F8 F838                  		lea	($FFFFF838).w,a1
0000116A 7000                       		moveq	#0,d0
0000116C 323C 0092                  		move.w	#$92,d1
00001170                            
00001170                            loc_133A:
00001170 22C0                       		move.l	d0,(a1)+
00001172 51C9 FFFC                  		dbf	d1,loc_133A
00001176                            
00001176 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000117A 7000                       		moveq	#0,d0
0000117C 323C 0100                  		move.w	#$100,d1
00001180                            
00001180                            loc_134A:
00001180 22C0                       		move.l	d0,(a1)+
00001182 51C9 FFFC                  		dbf	d1,loc_134A
00001186 4E75                       		rts	
00001188                            ; End of function ClearScreen
00001188                            
00001188                            ; ---------------------------------------------------------------------------
00001188                            ; Subroutine to	load the sound driver
00001188                            ; ---------------------------------------------------------------------------
00001188                            
00001188                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001188                            
00001188                            
00001188                            SoundDriverLoad:
00001188 41F9 0000 0000             		lea	(Z80ROM).l,a0				; load Z80 ROM data
0000118E 43F9 00A0 0000             		lea	($A00000).l,a1				; load Z80 RAM space address
00001194 323C 0000                  		move.w	#(Z80ROM_End-Z80ROM)-$01,d1		; set repeat times
00001198 33FC 0100 00A1 1100        		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
000011A0 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
000011A8 0839 0000 00A1 1100        		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
000011B0 66F6                       		bne.s	*-$08					; if not, branch
000011B2                            
000011B2                            SM_LoadZ80:
000011B2 12D8                       		move.b	(a0)+,(a1)+				; dump Z80 data to Z80 space
000011B4 51C9 FFFC                  		dbf	d1,SM_LoadZ80				; repeat til done
000011B8 41F9 0000 0000             		lea	(StopSample).l,a0			; load stop/mute sample address
000011BE 43F9 00A0 0C62             		lea	($A00000+MuteSample).l,a1		; load Z80 RAM space where the pointer is to be stored
000011C4 12D8                       		move.b	(a0)+,(a1)+				; copy pointer over into Z80
000011C6 12D8                       		move.b	(a0)+,(a1)+				; ''
000011C8 12D8                       		move.b	(a0)+,(a1)+				; ''
000011CA 12D8                       		move.b	(a0)+,(a1)+				; CHG: copy "reverse" pointer over into Z80
000011CC 12D8                       		move.b	(a0)+,(a1)+				; ''
000011CE 12D8                       		move.b	(a0)+,(a1)+				; ''
000011D0 43F9 00A0 1A38             		lea	($A00000+SV_VolumeBank).l,a1		; load volume bank address write routine
000011D6 12FC 0000                  		move.b 	#$74|((PCM_Volumes>>$0F)&1),(a1)+	; write "ld  (hl),?" instructions
000011DA 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$10)&1),(a1)+	; ''
000011DE 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$11)&1),(a1)+	; ''
000011E2 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$12)&1),(a1)+	; ''
000011E6 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$13)&1),(a1)+	; ''
000011EA 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$14)&1),(a1)+	; ''
000011EE 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$15)&1),(a1)+	; ''
000011F2 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$16)&1),(a1)+	; ''
000011F6 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$17)&1),(a1)+	; ''
000011FA 33FC 0000 00A1 1200        		move.w	#$0000,($A11200).l			; request Z80 reset (ON)
00001202 727F                       		moveq	#$7F,d1					; set repeat times
00001204 51C9 FFFE                  		dbf	d1,*					; there's no way of checking for reset, so a manual delay is necessary
00001208 33FC 0000 00A1 1100        		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
00001210 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
00001218 4E75                       		rts						; return
0000121A                            ; End of function SoundDriverLoad
0000121A                            
0000121A                            ; ---------------------------------------------------------------------------
0000121A                            ; Subroutine to	play a sound or	music track
0000121A                            ; ---------------------------------------------------------------------------
0000121A                            
0000121A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000121A                            
0000121A                            
0000121A                            PlaySound:
0000121A 11C0 F00A                  		move.b	d0,($FFFFF00A).w
0000121E 4E75                       		rts	
00001220                            ; End of function PlaySound
00001220                            
00001220                            ; ---------------------------------------------------------------------------
00001220                            ; Subroutine to	play a special sound/music (E0-E4)
00001220                            ;
00001220                            ; E0 - Fade out
00001220                            ; E1 - Sega
00001220                            ; E2 - Speed up
00001220                            ; E3 - Normal speed
00001220                            ; E4 - Stop
00001220                            ; ---------------------------------------------------------------------------
00001220                            
00001220                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001220                            
00001220                            
00001220                            PlaySound_Special:
00001220 11C0 F00B                  		move.b	d0,($FFFFF00B).w
00001224 4E75                       		rts	
00001226                            ; End of function PlaySound_Special
00001226                            
00001226                            ; ===========================================================================
00001226                            ; ---------------------------------------------------------------------------
00001226                            ; Unused sound/music subroutine
00001226                            ; ---------------------------------------------------------------------------
00001226                            
00001226                            PlaySound_Unk:
00001226 11C0 F00C                  		move.b	d0,($FFFFF00C).w
0000122A 4E75                       		rts	
0000122C                            
0000122C                            ; ---------------------------------------------------------------------------
0000122C                            ; Subroutine to	pause the game
0000122C                            ; ---------------------------------------------------------------------------
0000122C                            
0000122C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000122C                            
0000122C                            
0000122C                            PauseGame:				; XREF: Level_MainLoop; et al
0000122C 4E71                       		nop	
0000122E 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
00001232 6700 0000                  		beq.w	Unpause		; if not, branch
00001236 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
0000123A 6600                       		bne.s	loc_13BE	; if yes, branch
0000123C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001242 6700 0000                  		beq.w	Pause_DoNothing	; if not, branch
00001246                            
00001246                            loc_13BE:
00001246 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
0000124C 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001252                            
00001252                            loc_13CA:
00001252 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
00001258 6100 0000                  		bsr.w	DelayProgram
0000125C 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
00001260 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001262 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001268 6700                       		beq.s	Pause_ChkBC	; if not, branch
0000126A 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001270 4E71                       		nop	
00001272 6000                       		bra.s	loc_1404
00001274                            ; ===========================================================================
00001274                            
00001274                            Pause_ChkBC:				; XREF: PauseGame
00001274 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
0000127A 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000127C 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001282 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001284                            
00001284                            Pause_ChkStart:				; XREF: PauseGame
00001284 4A78 F5E0                  		tst.w	(SonimeSST+sonime_pausetimer).w
00001288 6600                       		bne.s	@waitlonger
0000128A 11FC 0001 F5CE             		move.b	#face_blink,(SonimeSST+sonime_face).w
00001290 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00001296 6000                       		bra.s	@cont
00001298                            
00001298                            	@waitlonger:
00001298 5378 F5E0                  		subi.w	#1,(SonimeSST+sonime_pausetimer).w
0000129C                            
0000129C                            	@cont:
0000129C 41F8 D000                  		lea	($FFFFD000).w,a0 ; a0=object
000012A0 7000                       		moveq	#0,d0
000012A2 7E7F                       		moveq	#$7F,d7 ; run the first $80 objects out of levels
000012A4 4EB9 0000 0000             		jsr		loc_D368
000012AA 4EB9 0000 0000             		jsr		BuildSprites
000012B0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000012B6 6600                       		bne.s	@notss
000012B8 4EB9 0000 0000             		jsr	SS_ShowLayout
000012BE                            
000012BE                            	@notss:
000012BE 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000012C4 678C                       		beq.s	loc_13CA	; if not, branch
000012C6 31FC 0200 F5E0             		move.w	#$200,(SonimeSST+sonime_pausetimer).w
000012CC                            
000012CC                            loc_1404:				; XREF: PauseGame
000012CC 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000012D2                            
000012D2                            Unpause:				; XREF: PauseGame
000012D2 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
000012D8                            
000012D8                            Pause_DoNothing:			; XREF: PauseGame
000012D8 4E75                       		rts	
000012DA                            ; ===========================================================================
000012DA                            
000012DA                            Pause_SlowMo:				; XREF: PauseGame
000012DA 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
000012E0 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000012E6 4E75                       		rts	
000012E8                            ; End of function PauseGame
000012E8                            
000012E8                            ; ---------------------------------------------------------------------------
000012E8                            ; Subroutine to	display	patterns via the VDP
000012E8                            ; ---------------------------------------------------------------------------
000012E8                            
000012E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012E8                            
000012E8                            
000012E8                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
000012E8 4DF9 00C0 0000             		lea	($C00000).l,a6
000012EE 283C 0080 0000             		move.l	#$800000,d4
000012F4                            
000012F4                            loc_142C:
000012F4 2D40 0004                  		move.l	d0,4(a6)
000012F8 3601                       		move.w	d1,d3
000012FA                            
000012FA                            loc_1432:
000012FA 3C99                       		move.w	(a1)+,(a6)
000012FC 51CB FFFC                  		dbf	d3,loc_1432
00001300 D084                       		add.l	d4,d0
00001302 51CA FFF0                  		dbf	d2,loc_142C
00001306 4E75                       		rts	
00001308                            ; End of function ShowVDPGraphics
00001308                            
00001308                            ; ==============================================================================
00001308                            ; ------------------------------------------------------------------------------
00001308                            ; Nemesis decompression routine
00001308                            ; ------------------------------------------------------------------------------
00001308                            ; Optimized by vladikcomper
00001308                            ; ------------------------------------------------------------------------------
00001308                             
00001308                            NemDec_RAM:
00001308 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
0000130C 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
00001310 6000                           bra.s   NemDec_Main
00001312                             
00001312                            ; ------------------------------------------------------------------------------
00001312                            NemDec:
00001312 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001316 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
0000131C 47FA 0000                      lea NemDec_WriteRowToVDP(pc),a3
00001320                             
00001320                            NemDec_Main:
00001320 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
00001324 3418                           move.w  (a0)+,d2        ; get number of patterns
00001326 6A00                           bpl.s   @0          ; are we in Mode 0?
00001328 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
0000132C E74A                       @0  lsl.w   #3,d2
0000132E 3A42                           movea.w d2,a5
00001330 7607                           moveq   #7,d3
00001332 7400                           moveq   #0,d2
00001334 7800                           moveq   #0,d4
00001336 6100 0000                      bsr.w   NemDec4
0000133A 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
0000133C E145                           asl.w   #8,d5           ; shift up by a byte
0000133E 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
00001340 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
00001344 6100                           bsr.s   NemDec2
00001346 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
0000134A 4E75                           rts
0000134C                             
0000134C                            ; ---------------------------------------------------------------------------
0000134C                            ; Part of the Nemesis decompressor, processes the actual compressed data
0000134C                            ; ---------------------------------------------------------------------------
0000134C                             
0000134C                            NemDec2:
0000134C 3E06                           move.w  d6,d7
0000134E 5147                           subq.w  #8,d7           ; get shift value
00001350 3205                           move.w  d5,d1
00001352 EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
00001354 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
00001358 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
0000135A 0241 00FF                      andi.w  #$FF,d1
0000135E D241                           add.w   d1,d1
00001360 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
00001364 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
00001368 6400                           bcc.s   @0          ; if not, branch
0000136A 5046                           addq.w  #8,d6
0000136C E145                           asl.w   #8,d5
0000136E 1A18                           move.b  (a0)+,d5        ; read next byte
00001370 1231 1001                  @0  move.b  1(a1,d1.w),d1
00001374 3001                           move.w  d1,d0
00001376 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
0000137A 0240 00F0                      andi.w  #$F0,d0
0000137E                             
0000137E                            NemDec_GetRepeatCount:
0000137E E848                           lsr.w   #4,d0           ; get repeat count
00001380                             
00001380                            NemDec_WritePixel:
00001380 E98C                           lsl.l   #4,d4           ; shift up by a nybble
00001382 8801                           or.b    d1,d4           ; write pixel
00001384 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
00001388 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
0000138A                            ; ---------------------------------------------------------------------------
0000138A                             
0000138A                            NemDec3:
0000138A 7800                           moveq   #0,d4           ; reset row
0000138C 7607                           moveq   #7,d3           ; reset nybble counter
0000138E                             
0000138E                            NemDec_WritePixelLoop:
0000138E 51C8 FFF0                      dbf d0,NemDec_WritePixel
00001392 60B8                           bra.s   NemDec2
00001394                            ; ---------------------------------------------------------------------------
00001394                             
00001394                            NemDec_InlineData:
00001394 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
00001396 0C46 0009                      cmpi.w  #9,d6
0000139A 6400                           bcc.s   @0
0000139C 5046                           addq.w  #8,d6
0000139E E145                           asl.w   #8,d5
000013A0 1A18                           move.b  (a0)+,d5
000013A2 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
000013A4 3205                           move.w  d5,d1
000013A6 EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
000013A8 3001                           move.w  d1,d0
000013AA 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000013AE 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
000013B2 0C46 0009                      cmpi.w  #9,d6
000013B6 64C6                           bcc.s   NemDec_GetRepeatCount
000013B8 5046                           addq.w  #8,d6
000013BA E145                           asl.w   #8,d5
000013BC 1A18                           move.b  (a0)+,d5
000013BE 60BE                           bra.s   NemDec_GetRepeatCount
000013C0                             
000013C0                            ; ---------------------------------------------------------------------------
000013C0                            ; Subroutines to output decompressed entry
000013C0                            ; Selected depending on current decompression mode
000013C0                            ; ---------------------------------------------------------------------------
000013C0                             
000013C0                            NemDec_WriteRowToVDP:
000013C0                            loc_1502:
000013C0 2884                           move.l  d4,(a4)         ; write 8-pixel row
000013C2 534D                           subq.w  #1,a5
000013C4 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013C6 66C2                           bne.s   NemDec3         ; if not, branch
000013C8 4E75                           rts
000013CA                            ; ---------------------------------------------------------------------------
000013CA                             
000013CA                            NemDec_WriteRowToVDP_XOR:
000013CA B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013CC 2882                           move.l  d2,(a4)         ; and write the result
000013CE 534D                           subq.w  #1,a5
000013D0 380D                           move.w  a5,d4
000013D2 66B6                           bne.s   NemDec3
000013D4 4E75                           rts
000013D6                            ; ---------------------------------------------------------------------------
000013D6                             
000013D6                            NemDec_WriteRowToRAM:
000013D6 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
000013D8 534D                           subq.w  #1,a5
000013DA 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013DC 66AC                           bne.s   NemDec3         ; if not, branch
000013DE 4E75                           rts
000013E0                            ; ---------------------------------------------------------------------------
000013E0                             
000013E0                            NemDec_WriteRowToRAM_XOR:
000013E0 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013E2 28C2                           move.l  d2,(a4)+        ; and write the result
000013E4 534D                           subq.w  #1,a5
000013E6 380D                           move.w  a5,d4
000013E8 66A0                           bne.s   NemDec3
000013EA 4E75                           rts
000013EC                             
000013EC                            ; ---------------------------------------------------------------------------
000013EC                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
000013EC                            ; ---------------------------------------------------------------------------
000013EC                             
000013EC                            NemDec4:
000013EC 1018                           move.b  (a0)+,d0        ; read first byte
000013EE                             
000013EE                            @ChkEnd:
000013EE 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
000013F2 6600                           bne.s   @NewPalIndex        ; if not, branch
000013F4 4E75                           rts
000013F6                            ; ---------------------------------------------------------------------------
000013F6                             
000013F6                            @NewPalIndex:
000013F6 3E00                           move.w  d0,d7
000013F8                             
000013F8                            @ItemLoop:
000013F8 1018                           move.b  (a0)+,d0        ; read next byte
000013FA 6BF2                           bmi.s   @ChkEnd         ; ~~
000013FC 1200                           move.b  d0,d1
000013FE 0247 000F                      andi.w  #$F,d7          ; get palette index
00001402 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
00001406 8E41                           or.w    d1,d7           ; combine the two
00001408 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
0000140C 1200                           move.b  d0,d1
0000140E E149                           lsl.w   #8,d1
00001410 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
00001412 7208                           moveq   #8,d1
00001414 9240                           sub.w   d0,d1           ; is the code 8 bits long?
00001416 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
00001418 1018                           move.b  (a0)+,d0        ; get code
0000141A D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
0000141C 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
00001420 60D6                           bra.s   @ItemLoop       ; repeat
00001422                            ; ---------------------------------------------------------------------------
00001422                             
00001422                            @ItemShortCode:
00001422 1018                           move.b  (a0)+,d0        ; get code
00001424 E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
00001426 D040                           add.w   d0,d0           ; get index into code table
00001428 7A01                           moveq   #1,d5
0000142A E36D                           lsl.w   d1,d5
0000142C 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
0000142E 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
00001432                             
00001432                            @ItemShortCodeLoop:
00001432 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
00001434 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001438 60BE                           bra.s   @ItemLoop
0000143A                            
0000143A                            ; ===============================================================
0000143A                            ; ---------------------------------------------------------------
0000143A                            ; uncompressed art to VRAM loader
0000143A                            ; ---------------------------------------------------------------
0000143A                            ; INPUT:
0000143A                            ;       a0      - Source Offset
0000143A                            ;   d0  - length in tiles
0000143A                            ; ---------------------------------------------------------------
0000143A                            LoadUncArt:
0000143A 46FC 2700                          move    #$2700,sr   ; disable interrupts
0000143E 4DF9 00C0 0000                     lea $C00000.l,a6    ; get VDP data port
00001444                             
00001444                            LoadArt_Loop:
00001444 2C98                               move.l  (a0)+,(a6)  ; transfer 4 bytes
00001446 2C98                               move.l  (a0)+,(a6)  ; transfer 4 more bytes
00001448 2C98                               move.l  (a0)+,(a6)  ; and so on and so forth
0000144A 2C98                               move.l  (a0)+,(a6)  ;
0000144C 2C98                               move.l  (a0)+,(a6)  ;
0000144E 2C98                               move.l  (a0)+,(a6)  ;
00001450 2C98                               move.l  (a0)+,(a6)  ; in total transfer 32 bytes
00001452 2C98                               move.l  (a0)+,(a6)  ; which is 1 full tile
00001454                             
00001454 51C8 FFEE                          dbf d0, LoadArt_Loop; loop until d0 = 0
00001458 46FC 2300                          move    #$2300,sr   ; enable interrupts
0000145C 4E75                               rts	
0000145E                            
0000145E                            ; ---------------------------------------------------------------------------
0000145E                            ; Subroutine to	load pattern load cues
0000145E                            ; ---------------------------------------------------------------------------
0000145E                            
0000145E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000145E                            
0000145E                            
0000145E                            LoadPLC:
0000145E 48E7 0060                  		movem.l	a1-a2,-(sp)
00001462 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001468 D040                       		add.w	d0,d0
0000146A 3031 0000                  		move.w	(a1,d0.w),d0
0000146E 43F1 0000                  		lea	(a1,d0.w),a1
00001472 45F8 F680                  		lea	($FFFFF680).w,a2
00001476                            
00001476                            loc_1598:
00001476 4A92                       		tst.l	(a2)
00001478 6700                       		beq.s	loc_15A0
0000147A 5C4A                       		addq.w	#6,a2
0000147C 60F8                       		bra.s	loc_1598
0000147E                            ; ===========================================================================
0000147E                            
0000147E                            loc_15A0:				; XREF: LoadPLC
0000147E 3019                       		move.w	(a1)+,d0
00001480 6B00                       		bmi.s	loc_15AC
00001482                            
00001482                            loc_15A4:
00001482 24D9                       		move.l	(a1)+,(a2)+
00001484 34D9                       		move.w	(a1)+,(a2)+
00001486 51C8 FFFA                  		dbf	d0,loc_15A4
0000148A                            
0000148A                            loc_15AC:
0000148A 4CDF 0600                  		movem.l	(sp)+,a1-a2
0000148E 4E75                       		rts	
00001490                            ; End of function LoadPLC
00001490                            
00001490                            
00001490                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001490                            
00001490                            
00001490                            LoadPLC2:
00001490 48E7 0060                  		movem.l	a1-a2,-(sp)
00001494 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000149A D040                       		add.w	d0,d0
0000149C 3031 0000                  		move.w	(a1,d0.w),d0
000014A0 43F1 0000                  		lea	(a1,d0.w),a1
000014A4 6100                       		bsr.s	ClearPLC
000014A6 45F8 F680                  		lea	($FFFFF680).w,a2
000014AA 3019                       		move.w	(a1)+,d0
000014AC 6B00                       		bmi.s	loc_15D8
000014AE                            
000014AE                            loc_15D0:
000014AE 24D9                       		move.l	(a1)+,(a2)+
000014B0 34D9                       		move.w	(a1)+,(a2)+
000014B2 51C8 FFFA                  		dbf	d0,loc_15D0
000014B6                            
000014B6                            loc_15D8:
000014B6 4CDF 0600                  		movem.l	(sp)+,a1-a2
000014BA 4E75                       		rts	
000014BC                            ; End of function LoadPLC2
000014BC                            
000014BC                            ; ---------------------------------------------------------------------------
000014BC                            ; Subroutine to	clear the pattern load cues
000014BC                            ; ---------------------------------------------------------------------------
000014BC                            
000014BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014BC                            
000014BC                            
000014BC                            ClearPLC:				; XREF: LoadPLC2
000014BC 45F8 F680                  		lea	($FFFFF680).w,a2
000014C0 701F                       		moveq	#$1F,d0
000014C2                            
000014C2                            ClearPLC_Loop:
000014C2 429A                       		clr.l	(a2)+
000014C4 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
000014C8 4E75                       		rts	
000014CA                            ; End of function ClearPLC
000014CA                            
000014CA                            ; ---------------------------------------------------------------------------
000014CA                            ; Subroutine to	use graphics listed in a pattern load cue
000014CA                            ; ---------------------------------------------------------------------------
000014CA                            
000014CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014CA                            
000014CA                            
000014CA                            RunPLC_RAM:				; XREF: Pal_FadeTo
000014CA 4AB8 F680                  		tst.l	($FFFFF680).w
000014CE 6700                       		beq.s	locret_1640
000014D0 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000014D4 6600                       		bne.s	locret_1640
000014D6 2078 F680                  		movea.l	($FFFFF680).w,a0
000014DA 47F9 0000 13C0             		lea	(loc_1502).l,a3
000014E0 43F8 AA00                  		lea	($FFFFAA00).w,a1
000014E4 3418                       		move.w	(a0)+,d2
000014E6 6A00                       		bpl.s	loc_160E
000014E8 D6FC 000A                  		adda.w	#$A,a3
000014EC                            
000014EC                            loc_160E:
000014EC 0242 7FFF                  		andi.w	#$7FFF,d2
000014F0 6100 FEFA                  		bsr.w	NemDec4
000014F4 1A18                       		move.b	(a0)+,d5
000014F6 E145                       		asl.w	#8,d5
000014F8 1A18                       		move.b	(a0)+,d5
000014FA 7C10                       		moveq	#$10,d6
000014FC 7000                       		moveq	#0,d0
000014FE 21C8 F680                  		move.l	a0,($FFFFF680).w
00001502 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001506 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000150A 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000150E 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001512 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001516 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000151A 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
0000151E                            		
0000151E                            locret_1640:
0000151E 4E75                       		rts	
00001520                            ; End of function RunPLC_RAM
00001520                            
00001520                            
00001520                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001520                            
00001520                            
00001520                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001520 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001524 6700 0000                  		beq.w	locret_16DA
00001528 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
0000152E 7000                       		moveq	#0,d0
00001530 3038 F684                  		move.w	($FFFFF684).w,d0
00001534 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000153A 6000                       		bra.s	loc_1676
0000153C                            ; End of function sub_1642
0000153C                            
0000153C                            
0000153C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000153C                            
0000153C                            
0000153C                            sub_165E:				; XREF: Demo_Time
0000153C 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001540 6700                       		beq.s	locret_16DA
00001542 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001548 7000                       		moveq	#0,d0
0000154A 3038 F684                  		move.w	($FFFFF684).w,d0
0000154E 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001554                            
00001554                            loc_1676:				; XREF: sub_1642
00001554 49F9 00C0 0004             		lea	($C00004).l,a4
0000155A E588                       		lsl.l	#2,d0
0000155C E448                       		lsr.w	#2,d0
0000155E 0040 4000                  		ori.w	#$4000,d0
00001562 4840                       		swap	d0
00001564 2880                       		move.l	d0,(a4)
00001566 594C                       		subq.w	#4,a4
00001568 2078 F680                  		movea.l	($FFFFF680).w,a0
0000156C 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001570 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001574 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001578 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
0000157C 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001580 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001584 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001588                            
00001588                            loc_16AA:				; XREF: sub_165E
00001588 3A7C 0008                  		movea.w	#8,a5
0000158C 6100 FDFC                  		bsr.w	NemDec3
00001590 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
00001594 6700                       		beq.s	loc_16DC
00001596 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
0000159A 66EC                       		bne.s	loc_16AA
0000159C 21C8 F680                  		move.l	a0,($FFFFF680).w
000015A0 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000015A4 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000015A8 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000015AC 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000015B0 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000015B4 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000015B8                            
000015B8                            locret_16DA:				; XREF: sub_1642
000015B8 4E75                       		rts	
000015BA                            ; ===========================================================================
000015BA                            
000015BA                            loc_16DC:				; XREF: sub_165E
000015BA 41F8 F680                  		lea	($FFFFF680).w,a0
000015BE 7015                       		moveq	#$15,d0
000015C0                            
000015C0                            loc_16E2:				; XREF: sub_165E
000015C0 20E8 0006                  		move.l	6(a0),(a0)+
000015C4 51C8 FFFA                  		dbf	d0,loc_16E2
000015C8 4E75                       		rts	
000015CA                            ; End of function sub_165E
000015CA                            
000015CA                            ; ---------------------------------------------------------------------------
000015CA                            ; Subroutine to	execute	the pattern load cue
000015CA                            ; ---------------------------------------------------------------------------
000015CA                            
000015CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015CA                            
000015CA                            
000015CA                            RunPLC_ROM:
000015CA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000015D0 D040                       		add.w	d0,d0
000015D2 3031 0000                  		move.w	(a1,d0.w),d0
000015D6 43F1 0000                  		lea	(a1,d0.w),a1
000015DA 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
000015DC                            
000015DC                            RunPLC_Loop:
000015DC 2059                       		movea.l	(a1)+,a0	; get art pointer
000015DE 7000                       		moveq	#0,d0
000015E0 3019                       		move.w	(a1)+,d0	; get VRAM address
000015E2 E588                       		lsl.l	#2,d0		; divide address by $20
000015E4 E448                       		lsr.w	#2,d0
000015E6 0040 4000                  		ori.w	#$4000,d0
000015EA 4840                       		swap	d0
000015EC 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
000015F2 6100 FD1E                  		bsr.w	NemDec		; decompress
000015F6 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
000015FA 4E75                       		rts	
000015FC                            ; End of function RunPLC_ROM
000015FC                            
000015FC                            ; ---------------------------------------------------------------------------
000015FC                            ; Enigma decompression algorithm
000015FC                            ; ---------------------------------------------------------------------------
000015FC                            
000015FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015FC                            
000015FC                            
000015FC                            EniDec:
000015FC 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001600 3640                       		movea.w	d0,a3
00001602 1018                       		move.b	(a0)+,d0
00001604 4880                       		ext.w	d0
00001606 3A40                       		movea.w	d0,a5
00001608 1818                       		move.b	(a0)+,d4
0000160A E70C                       		lsl.b	#3,d4
0000160C 3458                       		movea.w	(a0)+,a2
0000160E D4CB                       		adda.w	a3,a2
00001610 3858                       		movea.w	(a0)+,a4
00001612 D8CB                       		adda.w	a3,a4
00001614 1A18                       		move.b	(a0)+,d5
00001616 E145                       		asl.w	#8,d5
00001618 1A18                       		move.b	(a0)+,d5
0000161A 7C10                       		moveq	#$10,d6
0000161C                            
0000161C                            loc_173E:				; XREF: loc_1768
0000161C 7007                       		moveq	#7,d0
0000161E 3E06                       		move.w	d6,d7
00001620 9E40                       		sub.w	d0,d7
00001622 3205                       		move.w	d5,d1
00001624 EE69                       		lsr.w	d7,d1
00001626 0241 007F                  		andi.w	#$7F,d1
0000162A 3401                       		move.w	d1,d2
0000162C 0C41 0040                  		cmpi.w	#$40,d1
00001630 6400                       		bcc.s	loc_1758
00001632 7006                       		moveq	#6,d0
00001634 E24A                       		lsr.w	#1,d2
00001636                            
00001636                            loc_1758:
00001636 6100 0000                  		bsr.w	sub_188C
0000163A 0242 000F                  		andi.w	#$F,d2
0000163E E849                       		lsr.w	#4,d1
00001640 D241                       		add.w	d1,d1
00001642 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001646                            ; End of function EniDec
00001646                            
00001646                            ; ===========================================================================
00001646                            
00001646                            loc_1768:				; XREF: loc_17B4
00001646 32CA                       		move.w	a2,(a1)+
00001648 524A                       		addq.w	#1,a2
0000164A 51CA FFFA                  		dbf	d2,loc_1768
0000164E 60CC                       		bra.s	loc_173E
00001650                            ; ===========================================================================
00001650                            
00001650                            loc_1772:				; XREF: loc_17B4
00001650 32CC                       		move.w	a4,(a1)+
00001652 51CA FFFC                  		dbf	d2,loc_1772
00001656 60C4                       		bra.s	loc_173E
00001658                            ; ===========================================================================
00001658                            
00001658                            loc_177A:				; XREF: loc_17B4
00001658 6100 0000                  		bsr.w	loc_17DC
0000165C                            
0000165C                            loc_177E:
0000165C 32C1                       		move.w	d1,(a1)+
0000165E 51CA FFFC                  		dbf	d2,loc_177E
00001662 60B8                       		bra.s	loc_173E
00001664                            ; ===========================================================================
00001664                            
00001664                            loc_1786:				; XREF: loc_17B4
00001664 6100 0000                  		bsr.w	loc_17DC
00001668                            
00001668                            loc_178A:
00001668 32C1                       		move.w	d1,(a1)+
0000166A 5241                       		addq.w	#1,d1
0000166C 51CA FFFA                  		dbf	d2,loc_178A
00001670 60AA                       		bra.s	loc_173E
00001672                            ; ===========================================================================
00001672                            
00001672                            loc_1794:				; XREF: loc_17B4
00001672 6100 0000                  		bsr.w	loc_17DC
00001676                            
00001676                            loc_1798:
00001676 32C1                       		move.w	d1,(a1)+
00001678 5341                       		subq.w	#1,d1
0000167A 51CA FFFA                  		dbf	d2,loc_1798
0000167E 609C                       		bra.s	loc_173E
00001680                            ; ===========================================================================
00001680                            
00001680                            loc_17A2:				; XREF: loc_17B4
00001680 0C42 000F                  		cmpi.w	#$F,d2
00001684 6700                       		beq.s	loc_17C4
00001686                            
00001686                            loc_17A8:
00001686 6100 0000                  		bsr.w	loc_17DC
0000168A 32C1                       		move.w	d1,(a1)+
0000168C 51CA FFF8                  		dbf	d2,loc_17A8
00001690 608A                       		bra.s	loc_173E
00001692                            ; ===========================================================================
00001692                            
00001692                            loc_17B4:				; XREF: EniDec
00001692 60B2                       		bra.s	loc_1768
00001694                            ; ===========================================================================
00001694 60B0                       		bra.s	loc_1768
00001696                            ; ===========================================================================
00001696 60B8                       		bra.s	loc_1772
00001698                            ; ===========================================================================
00001698 60B6                       		bra.s	loc_1772
0000169A                            ; ===========================================================================
0000169A 60BC                       		bra.s	loc_177A
0000169C                            ; ===========================================================================
0000169C 60C6                       		bra.s	loc_1786
0000169E                            ; ===========================================================================
0000169E 60D2                       		bra.s	loc_1794
000016A0                            ; ===========================================================================
000016A0 60DE                       		bra.s	loc_17A2
000016A2                            ; ===========================================================================
000016A2                            
000016A2                            loc_17C4:				; XREF: loc_17A2
000016A2 5348                       		subq.w	#1,a0
000016A4 0C46 0010                  		cmpi.w	#$10,d6
000016A8 6600                       		bne.s	loc_17CE
000016AA 5348                       		subq.w	#1,a0
000016AC                            
000016AC                            loc_17CE:
000016AC 3008                       		move.w	a0,d0
000016AE E248                       		lsr.w	#1,d0
000016B0 6400                       		bcc.s	loc_17D6
000016B2 5248                       		addq.w	#1,a0
000016B4                            
000016B4                            loc_17D6:
000016B4 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000016B8 4E75                       		rts	
000016BA                            ; ===========================================================================
000016BA                            
000016BA                            loc_17DC:				; XREF: loc_17A2
000016BA 360B                       		move.w	a3,d3
000016BC 1204                       		move.b	d4,d1
000016BE D201                       		add.b	d1,d1
000016C0 6400                       		bcc.s	loc_17EE
000016C2 5346                       		subq.w	#1,d6
000016C4 0D05                       		btst	d6,d5
000016C6 6700                       		beq.s	loc_17EE
000016C8 0043 8000                  		ori.w	#-$8000,d3
000016CC                            
000016CC                            loc_17EE:
000016CC D201                       		add.b	d1,d1
000016CE 6400                       		bcc.s	loc_17FC
000016D0 5346                       		subq.w	#1,d6
000016D2 0D05                       		btst	d6,d5
000016D4 6700                       		beq.s	loc_17FC
000016D6 0643 4000                  		addi.w	#$4000,d3
000016DA                            
000016DA                            loc_17FC:
000016DA D201                       		add.b	d1,d1
000016DC 6400                       		bcc.s	loc_180A
000016DE 5346                       		subq.w	#1,d6
000016E0 0D05                       		btst	d6,d5
000016E2 6700                       		beq.s	loc_180A
000016E4 0643 2000                  		addi.w	#$2000,d3
000016E8                            
000016E8                            loc_180A:
000016E8 D201                       		add.b	d1,d1
000016EA 6400                       		bcc.s	loc_1818
000016EC 5346                       		subq.w	#1,d6
000016EE 0D05                       		btst	d6,d5
000016F0 6700                       		beq.s	loc_1818
000016F2 0043 1000                  		ori.w	#$1000,d3
000016F6                            
000016F6                            loc_1818:
000016F6 D201                       		add.b	d1,d1
000016F8 6400                       		bcc.s	loc_1826
000016FA 5346                       		subq.w	#1,d6
000016FC 0D05                       		btst	d6,d5
000016FE 6700                       		beq.s	loc_1826
00001700 0043 0800                  		ori.w	#$800,d3
00001704                            
00001704                            loc_1826:
00001704 3205                       		move.w	d5,d1
00001706 3E06                       		move.w	d6,d7
00001708 9E4D                       		sub.w	a5,d7
0000170A 6400                       		bcc.s	loc_1856
0000170C 3C07                       		move.w	d7,d6
0000170E 0646 0010                  		addi.w	#$10,d6
00001712 4447                       		neg.w	d7
00001714 EF69                       		lsl.w	d7,d1
00001716 1A10                       		move.b	(a0),d5
00001718 EF3D                       		rol.b	d7,d5
0000171A DE47                       		add.w	d7,d7
0000171C CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001720 D245                       		add.w	d5,d1
00001722                            
00001722                            loc_1844:				; XREF: loc_1868
00001722 300D                       		move.w	a5,d0
00001724 D040                       		add.w	d0,d0
00001726 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
0000172A D243                       		add.w	d3,d1
0000172C 1A18                       		move.b	(a0)+,d5
0000172E E14D                       		lsl.w	#8,d5
00001730 1A18                       		move.b	(a0)+,d5
00001732 4E75                       		rts	
00001734                            ; ===========================================================================
00001734                            
00001734                            loc_1856:				; XREF: loc_1826
00001734 6700                       		beq.s	loc_1868
00001736 EE69                       		lsr.w	d7,d1
00001738 300D                       		move.w	a5,d0
0000173A D040                       		add.w	d0,d0
0000173C C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001740 D243                       		add.w	d3,d1
00001742 300D                       		move.w	a5,d0
00001744 6000                       		bra.s	sub_188C
00001746                            ; ===========================================================================
00001746                            
00001746                            loc_1868:				; XREF: loc_1856
00001746 7C10                       		moveq	#$10,d6
00001748                            
00001748                            loc_186A:
00001748 60D8                       		bra.s	loc_1844
0000174A                            ; ===========================================================================
0000174A 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001760 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
0000176A                            
0000176A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000176A                            
0000176A                            
0000176A                            sub_188C:				; XREF: EniDec
0000176A 9C40                       		sub.w	d0,d6
0000176C 0C46 0009                  		cmpi.w	#9,d6
00001770 6400                       		bcc.s	locret_189A
00001772 5046                       		addq.w	#8,d6
00001774 E145                       		asl.w	#8,d5
00001776 1A18                       		move.b	(a0)+,d5
00001778                            
00001778                            locret_189A:
00001778 4E75                       		rts	
0000177A                            ; End of function sub_188C
0000177A                            
0000177A                            ; ===========================================================================
0000177A                            ; ---------------------------------------------------------------------------
0000177A                            ; Kosinski decompression routine
0000177A                            ;
0000177A                            ; Created by vladikcomper
0000177A                            ; Special thanks to flamewing and MarkeyJester
0000177A                            ; ---------------------------------------------------------------------------
0000177A                             
0000177A                            _Kos_RunBitStream macro
0000177A                                dbf d2,@skip\@
0000177A                                moveq   #7,d2
0000177A                                move.b  d1,d0
0000177A                                swap    d3
0000177A                                bpl.s   @skip\@
0000177A                                move.b  (a0)+,d0            ; get desc. bitfield
0000177A                                move.b  (a0)+,d1            ;
0000177A                                move.b  (a4,d0.w),d0            ; reload converted desc. bitfield from a LUT
0000177A                                move.b  (a4,d1.w),d1            ;
0000177A                            @skip\@
0000177A                                endm
0000177A                            ; ---------------------------------------------------------------------------
0000177A                             
0000177A                            KosDec:
0000177A 7E07                           moveq   #7,d7
0000177C 7000                           moveq   #0,d0
0000177E 7200                           moveq   #0,d1
00001780 49FA 0000                      lea KosDec_ByteMap(pc),a4
00001784 1018                           move.b  (a0)+,d0            ; get desc field low-byte
00001786 1218                           move.b  (a0)+,d1            ; get desc field hi-byte
00001788 1034 0000                      move.b  (a4,d0.w),d0            ; reload converted desc. bitfield from a LUT
0000178C 1234 1000                      move.b  (a4,d1.w),d1            ;
00001790 7407                           moveq   #7,d2               ; set repeat count to 8
00001792 76FF                           moveq   #-1,d3              ; d3 will be desc field switcher
00001794 4243                           clr.w   d3              ;
00001796 6000                           bra.s   KosDec_FetchNewCode
00001798                             
00001798                            KosDec_FetchCodeLoop:
00001798                                ; code 1 (Uncompressed byte)
00001798 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017B0 12D8                           move.b  (a0)+,(a1)+
000017B2                             
000017B2                            KosDec_FetchNewCode:
000017B2 D000                           add.b   d0,d0               ; get a bit from the bitstream
000017B4 65E2                           bcs.s   KosDec_FetchCodeLoop        ; if code = 0, branch
000017B6                             
000017B6                                ; codes 00 and 01
000017B6 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017CE 7800                           moveq   #0,d4               ; d4 will contain copy count
000017D0 D000                           add.b   d0,d0               ; get a bit from the bitstream
000017D2 6500                           bcs.s   KosDec_Code_01
000017D4                             
000017D4                                ; code 00 (Dictionary ref. short)
000017D4 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017EC D000                           add.b   d0,d0               ; get a bit from the bitstream
000017EE D944                           addx.w  d4,d4
000017F0 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
00001808 D000                           add.b   d0,d0               ; get a bit from the bitstream
0000180A D944                           addx.w  d4,d4
0000180C 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
00001824 7AFF                           moveq   #-1,d5
00001826 1A18                           move.b  (a0)+,d5            ; d5 = displacement
00001828                             
00001828                            KosDec_StreamCopy:
00001828 47F1 5000                      lea (a1,d5),a3
0000182C 12DB                           move.b  (a3)+,(a1)+         ; do 1 extra copy (to compensate for +1 to copy counter)
0000182E                             
0000182E                            KosDec_copy:
0000182E 12DB                           move.b  (a3)+,(a1)+
00001830 51CC FFFC                      dbf d4,KosDec_copy
00001834 6000 FF7C                      bra.w   KosDec_FetchNewCode
00001838                            ; ---------------------------------------------------------------------------
00001838                            KosDec_Code_01:
00001838                                ; code 01 (Dictionary ref. long / special)
00001838 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
00001850 1C18                           move.b  (a0)+,d6            ; d6 = %LLLLLLLL
00001852 1818                           move.b  (a0)+,d4            ; d4 = %HHHHHCCC
00001854 7AFF                           moveq   #-1,d5
00001856 1A04                           move.b  d4,d5               ; d5 = %11111111 HHHHHCCC
00001858 EB4D                           lsl.w   #5,d5               ; d5 = %111HHHHH CCC00000
0000185A 1A06                           move.b  d6,d5               ; d5 = %111HHHHH LLLLLLLL
0000185C C847                           and.w   d7,d4               ; d4 = %00000CCC
0000185E 66C8                           bne.s   KosDec_StreamCopy       ; if CCC=0, branch
00001860                             
00001860                                ; special mode (extended counter)
00001860 1818                           move.b  (a0)+,d4            ; read cnt
00001862 6700                           beq.s   KosDec_Quit         ; if cnt=0, quit decompression
00001864 5304                           subq.b  #1,d4
00001866 6700 FF4A                      beq.w   KosDec_FetchNewCode     ; if cnt=1, fetch a new code
0000186A                             
0000186A 47F1 5000                      lea (a1,d5),a3
0000186E 12DB                           move.b  (a3)+,(a1)+         ; do 1 extra copy (to compensate for +1 to copy counter)
00001870 3C04                           move.w  d4,d6
00001872 4646                           not.w   d6
00001874 CC47                           and.w   d7,d6
00001876 DC46                           add.w   d6,d6
00001878 E64C                           lsr.w   #3,d4
0000187A 4EFB 6000                      jmp KosDec_largecopy(pc,d6.w)
0000187E                             
0000187E                            KosDec_largecopy:
0000187E                                rept 8
0000187E                                move.b  (a3)+,(a1)+
0000187E 12DB 12DB 12DB 12DB 12DB+      endr
0000188E 51CC FFEE                      dbf d4,KosDec_largecopy
00001892 6000 FF1E                      bra.w   KosDec_FetchNewCode
00001896                             
00001896                            KosDec_Quit:
00001896 4E75                           rts
00001898                             
00001898                            ; ---------------------------------------------------------------------------
00001898                            ; A look-up table to invert bits order in desc. field bytes
00001898                            ; ---------------------------------------------------------------------------
00001898                             
00001898                            KosDec_ByteMap:
00001898 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
000018A8 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
000018B8 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
000018C8 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
000018D8 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
000018E8 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
000018F8 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001908 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001918 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001928 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001938 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001948 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001958 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001968 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001978 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001988 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001998                             
00001998                            ; ===========================================================================
00001998                            
00001998                            ; ---------------------------------------------------------------------------
00001998                            ; Pallet cycling routine loading subroutine
00001998                            ; ---------------------------------------------------------------------------
00001998                            
00001998                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001998                            
00001998                            
00001998                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001998 7400                       		moveq	#0,d2
0000199A 7000                       		moveq	#0,d0
0000199C 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
000019A0 D040                       		add.w	d0,d0		; multiply by 2
000019A2 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
000019A6 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
000019AA                            ; End of function PalCycle_Load
000019AA                            
000019AA                            ; ===========================================================================
000019AA                            ; ---------------------------------------------------------------------------
000019AA                            ; Pallet cycling routines
000019AA                            ; ---------------------------------------------------------------------------
000019AA 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
000019AC 0000                       		dc.w PalCycle_LZ-PalCycle
000019AE 0000                       		dc.w PalCycle_MZ-PalCycle
000019B0 0000                       		dc.w PalCycle_SLZ-PalCycle
000019B2 0000                       		dc.w PalCycle_SYZ-PalCycle
000019B4 0000                       		dc.w PalCycle_SBZ-PalCycle
000019B6 0000                       		dc.w PalCycle_GHZ-PalCycle
000019B8                            
000019B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019B8                            
000019B8                            
000019B8                            PalCycle_Title:				; XREF: TitleScreen
000019B8 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
000019BE 6000                       		bra.s	loc_196A
000019C0                            ; ===========================================================================
000019C0                            
000019C0                            PalCycle_GHZ:				; XREF: PalCycle
000019C0 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
000019C6                            
000019C6                            loc_196A:				; XREF: PalCycle_Title
000019C6 5378 F634                  		subq.w	#1,($FFFFF634).w
000019CA 6A00                       		bpl.s	locret_1990
000019CC 31FC 0005 F634             		move.w	#5,($FFFFF634).w
000019D2 3038 F632                  		move.w	($FFFFF632).w,d0
000019D6 5278 F632                  		addq.w	#1,($FFFFF632).w
000019DA 0240 0003                  		andi.w	#3,d0
000019DE E748                       		lsl.w	#3,d0
000019E0 43F8 FB50                  		lea	($FFFFFB50).w,a1
000019E4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019E8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019EC                            
000019EC                            locret_1990:
000019EC 4E75                       		rts	
000019EE                            ; End of function PalCycle_Title
000019EE                            
000019EE                            
000019EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019EE                            
000019EE                            
000019EE                            PalCycle_LZ:				; XREF: PalCycle
000019EE 5378 F634                  		subq.w	#1,($FFFFF634).w
000019F2 6A00                       		bpl.s	loc_19D8
000019F4 31FC 0002 F634             		move.w	#2,($FFFFF634).w
000019FA 3038 F632                  		move.w	($FFFFF632).w,d0
000019FE 5278 F632                  		addq.w	#1,($FFFFF632).w
00001A02 0240 0003                  		andi.w	#3,d0
00001A06 E748                       		lsl.w	#3,d0
00001A08 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001A0E 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001A14 6600                       		bne.s	loc_19C0
00001A16 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001A1C                            
00001A1C                            loc_19C0:
00001A1C 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001A20 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A24 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001A28 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001A2C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A30 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001A34                            
00001A34                            loc_19D8:
00001A34 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001A38 0240 0007                  		andi.w	#7,d0
00001A3C 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001A40 6700                       		beq.s	locret_1A3A
00001A42 7201                       		moveq	#1,d1
00001A44 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001A48 6700                       		beq.s	loc_19F0
00001A4A 4441                       		neg.w	d1
00001A4C                            
00001A4C                            loc_19F0:
00001A4C 3038 F650                  		move.w	($FFFFF650).w,d0
00001A50 0240 0003                  		andi.w	#3,d0
00001A54 D041                       		add.w	d1,d0
00001A56 0C40 0003                  		cmpi.w	#3,d0
00001A5A 6500                       		bcs.s	loc_1A0A
00001A5C 3200                       		move.w	d0,d1
00001A5E 7000                       		moveq	#0,d0
00001A60 4A41                       		tst.w	d1
00001A62 6A00                       		bpl.s	loc_1A0A
00001A64 7002                       		moveq	#2,d0
00001A66                            
00001A66                            loc_1A0A:
00001A66 31C0 F650                  		move.w	d0,($FFFFF650).w
00001A6A D040                       		add.w	d0,d0
00001A6C 3200                       		move.w	d0,d1
00001A6E D040                       		add.w	d0,d0
00001A70 D041                       		add.w	d1,d0
00001A72 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001A78 43F8 FB78                  		lea	($FFFFFB78).w,a1
00001A7C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A80 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A84 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001A8A 43F8 FAF8                  		lea	($FFFFFAF8).w,a1
00001A8E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A92 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A96                            
00001A96                            locret_1A3A:
00001A96 4E75                       		rts	
00001A98                            ; End of function PalCycle_LZ
00001A98                            
00001A98                            ; ===========================================================================
00001A98 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001AA0                            ; ===========================================================================
00001AA0                            
00001AA0                            PalCycle_MZ:				; XREF: PalCycle
00001AA0 4E75                       		rts	
00001AA2                            
00001AA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AA2                            
00001AA2                            
00001AA2                            PalCycle_SLZ:				; XREF: PalCycle
00001AA2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001AA6 6A00                       		bpl.s	locret_1A80
00001AA8 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001AAE 3038 F632                  		move.w	($FFFFF632).w,d0
00001AB2 5240                       		addq.w	#1,d0
00001AB4 0C40 0006                  		cmpi.w	#6,d0
00001AB8 6500                       		bcs.s	loc_1A60
00001ABA 7000                       		moveq	#0,d0
00001ABC                            
00001ABC                            loc_1A60:
00001ABC 31C0 F632                  		move.w	d0,($FFFFF632).w
00001AC0 3200                       		move.w	d0,d1
00001AC2 D241                       		add.w	d1,d1
00001AC4 D041                       		add.w	d1,d0
00001AC6 D040                       		add.w	d0,d0
00001AC8 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001ACE 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001AD2 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001AD6 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001ADC                            
00001ADC                            locret_1A80:
00001ADC 4E75                       		rts	
00001ADE                            ; End of function PalCycle_SLZ
00001ADE                            
00001ADE                            
00001ADE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ADE                            
00001ADE                            
00001ADE                            PalCycle_SYZ:				; XREF: PalCycle
00001ADE 5378 F634                  		subq.w	#1,($FFFFF634).w
00001AE2 6A00                       		bpl.s	locret_1AC6
00001AE4 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001AEA 3038 F632                  		move.w	($FFFFF632).w,d0
00001AEE 5278 F632                  		addq.w	#1,($FFFFF632).w
00001AF2 0240 0003                  		andi.w	#3,d0
00001AF6 E548                       		lsl.w	#2,d0
00001AF8 3200                       		move.w	d0,d1
00001AFA D040                       		add.w	d0,d0
00001AFC 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001B02 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001B06 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B0A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B0E 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001B14 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001B18 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001B1C 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001B22                            
00001B22                            locret_1AC6:
00001B22 4E75                       		rts	
00001B24                            ; End of function PalCycle_SYZ
00001B24                            
00001B24                            
00001B24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B24                            
00001B24                            
00001B24                            PalCycle_SBZ:				; XREF: PalCycle
00001B24 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001B2A 4A38 FE11                  		tst.b	($FFFFFE11).w
00001B2E 6700                       		beq.s	loc_1ADA
00001B30 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001B36                            
00001B36                            loc_1ADA:
00001B36 43F8 F650                  		lea	($FFFFF650).w,a1
00001B3A 321A                       		move.w	(a2)+,d1
00001B3C                            
00001B3C                            loc_1AE0:
00001B3C 5311                       		subq.b	#1,(a1)
00001B3E 6B00                       		bmi.s	loc_1AEA
00001B40 5489                       		addq.l	#2,a1
00001B42 5C8A                       		addq.l	#6,a2
00001B44 6000                       		bra.s	loc_1B06
00001B46                            ; ===========================================================================
00001B46                            
00001B46                            loc_1AEA:				; XREF: PalCycle_SBZ
00001B46 12DA                       		move.b	(a2)+,(a1)+
00001B48 1011                       		move.b	(a1),d0
00001B4A 5200                       		addq.b	#1,d0
00001B4C B01A                       		cmp.b	(a2)+,d0
00001B4E 6500                       		bcs.s	loc_1AF6
00001B50 7000                       		moveq	#0,d0
00001B52                            
00001B52                            loc_1AF6:
00001B52 12C0                       		move.b	d0,(a1)+
00001B54 0240 000F                  		andi.w	#$F,d0
00001B58 D040                       		add.w	d0,d0
00001B5A 305A                       		movea.w	(a2)+,a0
00001B5C 365A                       		movea.w	(a2)+,a3
00001B5E 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001B62                            
00001B62                            loc_1B06:				; XREF: PalCycle_SBZ
00001B62 51C9 FFD8                  		dbf	d1,loc_1AE0
00001B66 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B6A 6A00                       		bpl.s	locret_1B64
00001B6C 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001B72 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001B78 4A38 FE11                  		tst.b	($FFFFFE11).w
00001B7C 6700                       		beq.s	loc_1B2E
00001B7E 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001B84 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001B8A                            
00001B8A                            loc_1B2E:
00001B8A 72FF                       		moveq	#-1,d1
00001B8C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B90 6700                       		beq.s	loc_1B38
00001B92 4441                       		neg.w	d1
00001B94                            
00001B94                            loc_1B38:
00001B94 3038 F632                  		move.w	($FFFFF632).w,d0
00001B98 0240 0003                  		andi.w	#3,d0
00001B9C D041                       		add.w	d1,d0
00001B9E 0C40 0003                  		cmpi.w	#3,d0
00001BA2 6500                       		bcs.s	loc_1B52
00001BA4 3200                       		move.w	d0,d1
00001BA6 7000                       		moveq	#0,d0
00001BA8 4A41                       		tst.w	d1
00001BAA 6A00                       		bpl.s	loc_1B52
00001BAC 7002                       		moveq	#2,d0
00001BAE                            
00001BAE                            loc_1B52:
00001BAE 31C0 F632                  		move.w	d0,($FFFFF632).w
00001BB2 D040                       		add.w	d0,d0
00001BB4 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001BB8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BBC 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001BC0                            
00001BC0                            locret_1B64:
00001BC0 4E75                       		rts	
00001BC2                            ; End of function PalCycle_SBZ
00001BC2                            
00001BC2                            ; ===========================================================================
00001BC2                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001BE2                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001C02                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001C22                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001C34                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001C46                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001CAE                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001CD2                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001CF2                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001D02                            
00001D02                            Pal_SBZCycList:
00001D02                            	include "_inc\SBZ pallet script 1.asm"
00001D02                            ; ---------------------------------------------------------------------------
00001D02                            ; Scrap Brain Zone 1 pallet cycling script
00001D02                            ; ---------------------------------------------------------------------------
00001D02 0008                       	dc.w 8			; number of entries - 1
00001D04 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001D06 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001D08 FB50                       	dc.w $FB50		; RAM address
00001D0A 0D08                       	dc.b $D, 8
00001D0C 0000                       	dc.w Pal_SBZCyc2
00001D0E FB52                       	dc.w $FB52
00001D10 0E08                       	dc.b $E, 8
00001D12 0000                       	dc.w Pal_SBZCyc3
00001D14 FB6E                       	dc.w $FB6E
00001D16 0B08                       	dc.b $B, 8
00001D18 0000                       	dc.w Pal_SBZCyc5
00001D1A FB70                       	dc.w $FB70
00001D1C 0708                       	dc.b 7,	8
00001D1E 0000                       	dc.w Pal_SBZCyc6
00001D20 FB72                       	dc.w $FB72
00001D22 1C10                       	dc.b $1C, $10
00001D24 0000                       	dc.w Pal_SBZCyc7
00001D26 FB7E                       	dc.w $FB7E
00001D28 0303                       	dc.b 3,	3
00001D2A 0000                       	dc.w Pal_SBZCyc8
00001D2C FB78                       	dc.w $FB78
00001D2E 0303                       	dc.b 3,	3
00001D30 0000                       	dc.w Pal_SBZCyc8+2
00001D32 FB7A                       	dc.w $FB7A
00001D34 0303                       	dc.b 3,	3
00001D36 0000                       	dc.w Pal_SBZCyc8+4
00001D38 FB7C                       	dc.w $FB7C
00001D3A                            	even
00001D3A                            	even
00001D3A                            
00001D3A                            Pal_SBZCycList2:
00001D3A                            	include "_inc\SBZ pallet script 2.asm"
00001D3A                            ; ---------------------------------------------------------------------------
00001D3A                            ; Scrap Brain Zone 2 pallet cycling script
00001D3A                            ; ---------------------------------------------------------------------------
00001D3A 0006                       	dc.w 6
00001D3C 0708                       	dc.b 7,	8
00001D3E 0000                       	dc.w Pal_SBZCyc1
00001D40 FB50                       	dc.w $FB50
00001D42 0D08                       	dc.b $D, 8
00001D44 0000                       	dc.w Pal_SBZCyc2
00001D46 FB52                       	dc.w $FB52
00001D48 0908                       	dc.b 9,	8
00001D4A 0000                       	dc.w Pal_SBZCyc9
00001D4C FB70                       	dc.w $FB70
00001D4E 0708                       	dc.b 7,	8
00001D50 0000                       	dc.w Pal_SBZCyc6
00001D52 FB72                       	dc.w $FB72
00001D54 0303                       	dc.b 3,	3
00001D56 0000                       	dc.w Pal_SBZCyc8
00001D58 FB78                       	dc.w $FB78
00001D5A 0303                       	dc.b 3,	3
00001D5C 0000                       	dc.w Pal_SBZCyc8+2
00001D5E FB7A                       	dc.w $FB7A
00001D60 0303                       	dc.b 3,	3
00001D62 0000                       	dc.w Pal_SBZCyc8+4
00001D64 FB7C                       	dc.w $FB7C
00001D66                            	even
00001D66                            	even
00001D66                            
00001D66                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001D76                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001D86                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001D96                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001DA2                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001DB2                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001DC2                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001DE2                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001DEC                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001DFC                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001E08                            ; ---------------------------------------------------------------------------
00001E08                            ; Subroutine to	fade out and fade in
00001E08                            ; ---------------------------------------------------------------------------
00001E08                            
00001E08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E08                            
00001E08                            
00001E08                            Pal_FadeTo:
00001E08 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001E0E                            
00001E0E                            Pal_FadeTo2:
00001E0E 7000                       		moveq	#0,d0
00001E10 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E14 1038 F626                  		move.b	($FFFFF626).w,d0
00001E18 D0C0                       		adda.w	d0,a0
00001E1A 7200                       		moveq	#0,d1
00001E1C 1038 F627                  		move.b	($FFFFF627).w,d0
00001E20                            
00001E20                            Pal_ToBlack:
00001E20 30C1                       		move.w	d1,(a0)+
00001E22 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001E26                            
00001E26 383C 0015                  		move.w	#$15,d4
00001E2A                            
00001E2A                            loc_1DCE:
00001E2A 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E30 6100 0000                  		bsr.w	DelayProgram
00001E34 6100                       		bsr.s	Pal_FadeIn
00001E36 6100 F692                  		bsr.w	RunPLC_RAM
00001E3A 51CC FFEE                  		dbf	d4,loc_1DCE
00001E3E 4E75                       		rts	
00001E40                            ; End of function Pal_FadeTo
00001E40                            
00001E40                            ; ---------------------------------------------------------------------------
00001E40                            ; Pallet fade-in subroutine
00001E40                            ; ---------------------------------------------------------------------------
00001E40                            
00001E40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E40                            
00001E40                            
00001E40                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001E40 7000                       		moveq	#0,d0
00001E42 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E46 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001E4A 1038 F626                  		move.b	($FFFFF626).w,d0
00001E4E D0C0                       		adda.w	d0,a0
00001E50 D2C0                       		adda.w	d0,a1
00001E52 1038 F627                  		move.b	($FFFFF627).w,d0
00001E56                            
00001E56                            loc_1DFA:
00001E56 6100                       		bsr.s	Pal_AddColor
00001E58 51C8 FFFC                  		dbf	d0,loc_1DFA
00001E5C                            
00001E5C                            locret_1E24:
00001E5C 4E75                       		rts	
00001E5E                            ; End of function Pal_FadeIn
00001E5E                            
00001E5E                            
00001E5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E5E                            
00001E5E                            
00001E5E                            Pal_AddColor:				; XREF: Pal_FadeIn
00001E5E 3419                       		move.w	(a1)+,d2
00001E60 3610                       		move.w	(a0),d3
00001E62 B642                       		cmp.w	d2,d3
00001E64 6700                       		beq.s	loc_1E4E
00001E66 3203                       		move.w	d3,d1
00001E68 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001E6C B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001E6E 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00001E70 30C1                       		move.w	d1,(a0)+	; update pallet
00001E72 4E75                       		rts	
00001E74                            ; ===========================================================================
00001E74                            
00001E74                            Pal_AddGreen:				; XREF: Pal_AddColor
00001E74 3203                       		move.w	d3,d1
00001E76 0641 0020                  		addi.w	#$20,d1		; increase green value
00001E7A B242                       		cmp.w	d2,d1
00001E7C 6200                       		bhi.s	Pal_AddRed
00001E7E 30C1                       		move.w	d1,(a0)+	; update pallet
00001E80 4E75                       		rts	
00001E82                            ; ===========================================================================
00001E82                            
00001E82                            Pal_AddRed:				; XREF: Pal_AddGreen
00001E82 5458                       		addq.w	#2,(a0)+	; increase red value
00001E84 4E75                       		rts	
00001E86                            ; ===========================================================================
00001E86                            
00001E86                            loc_1E4E:				; XREF: Pal_AddColor
00001E86 5448                       		addq.w	#2,a0
00001E88 4E75                       		rts	
00001E8A                            ; End of function Pal_AddColor
00001E8A                            
00001E8A                            
00001E8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E8A                            
00001E8A                            
00001E8A                            Pal_FadeFrom:
00001E8A 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001E90                            
00001E90                            Pal_FadeFrom2:
00001E90 383C 0015                  		move.w	#$15,d4
00001E94                            
00001E94                            loc_1E5C:
00001E94 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E9A 6100 0000                  		bsr.w	DelayProgram
00001E9E 6100                       		bsr.s	Pal_FadeOut
00001EA0 6100 F628                  		bsr.w	RunPLC_RAM
00001EA4 51CC FFEE                  		dbf	d4,loc_1E5C
00001EA8 4E75                       		rts	
00001EAA                            ; End of function Pal_FadeFrom
00001EAA                            
00001EAA                            ; ---------------------------------------------------------------------------
00001EAA                            ; Pallet fade-out subroutine
00001EAA                            ; ---------------------------------------------------------------------------
00001EAA                            
00001EAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EAA                            
00001EAA                            
00001EAA                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001EAA 7000                       		moveq	#0,d0
00001EAC 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001EB0 1038 F626                  		move.b	($FFFFF626).w,d0
00001EB4 D0C0                       		adda.w	d0,a0
00001EB6 1038 F627                  		move.b	($FFFFF627).w,d0
00001EBA                            
00001EBA                            loc_1E82:
00001EBA 6100                       		bsr.s	Pal_DecColor
00001EBC 51C8 FFFC                  		dbf	d0,loc_1E82
00001EC0                            
00001EC0 7000                       		moveq	#0,d0
00001EC2 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001EC6 1038 F626                  		move.b	($FFFFF626).w,d0
00001ECA D0C0                       		adda.w	d0,a0
00001ECC 1038 F627                  		move.b	($FFFFF627).w,d0
00001ED0                            
00001ED0                            loc_1E98:
00001ED0 6100                       		bsr.s	Pal_DecColor
00001ED2 51C8 FFFC                  		dbf	d0,loc_1E98
00001ED6 4E75                       		rts	
00001ED8                            ; End of function Pal_FadeOut
00001ED8                            
00001ED8                            
00001ED8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ED8                            
00001ED8                            
00001ED8                            Pal_DecColor:				; XREF: Pal_FadeOut
00001ED8 3410                       		move.w	(a0),d2
00001EDA 6700                       		beq.s	loc_1ECC
00001EDC 3202                       		move.w	d2,d1
00001EDE 0241 000E                  		andi.w	#$E,d1
00001EE2 6700                       		beq.s	Pal_DecGreen
00001EE4 5558                       		subq.w	#2,(a0)+	; decrease red value
00001EE6 4E75                       		rts	
00001EE8                            ; ===========================================================================
00001EE8                            
00001EE8                            Pal_DecGreen:				; XREF: Pal_DecColor
00001EE8 3202                       		move.w	d2,d1
00001EEA 0241 00E0                  		andi.w	#$E0,d1
00001EEE 6700                       		beq.s	Pal_DecBlue
00001EF0 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001EF4 4E75                       		rts	
00001EF6                            ; ===========================================================================
00001EF6                            
00001EF6                            Pal_DecBlue:				; XREF: Pal_DecGreen
00001EF6 3202                       		move.w	d2,d1
00001EF8 0241 0E00                  		andi.w	#$E00,d1
00001EFC 6700                       		beq.s	loc_1ECC
00001EFE 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001F02 4E75                       		rts	
00001F04                            ; ===========================================================================
00001F04                            
00001F04                            loc_1ECC:				; XREF: Pal_DecColor
00001F04 5448                       		addq.w	#2,a0
00001F06 4E75                       		rts	
00001F08                            ; End of function Pal_DecColor
00001F08                            
00001F08                            ; ---------------------------------------------------------------------------
00001F08                            ; Subroutine to	fill the pallet	with white (special stage)
00001F08                            ; ---------------------------------------------------------------------------
00001F08                            
00001F08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F08                            
00001F08                            
00001F08                            Pal_MakeWhite:				; XREF: SpecialStage
00001F08 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001F0E 7000                       		moveq	#0,d0
00001F10 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F14 1038 F626                  		move.b	($FFFFF626).w,d0
00001F18 D0C0                       		adda.w	d0,a0
00001F1A 323C 0EEE                  		move.w	#$EEE,d1
00001F1E 1038 F627                  		move.b	($FFFFF627).w,d0
00001F22                            
00001F22                            PalWhite_Loop:
00001F22 30C1                       		move.w	d1,(a0)+
00001F24 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00001F28 383C 0015                  		move.w	#$15,d4
00001F2C                            
00001F2C                            loc_1EF4:
00001F2C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F32 6100 0000                  		bsr.w	DelayProgram
00001F36 6100                       		bsr.s	Pal_WhiteToBlack
00001F38 6100 F590                  		bsr.w	RunPLC_RAM
00001F3C 51CC FFEE                  		dbf	d4,loc_1EF4
00001F40 4E75                       		rts	
00001F42                            ; End of function Pal_MakeWhite
00001F42                            
00001F42                            
00001F42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F42                            
00001F42                            
00001F42                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00001F42 7000                       		moveq	#0,d0
00001F44 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F48 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001F4C 1038 F626                  		move.b	($FFFFF626).w,d0
00001F50 D0C0                       		adda.w	d0,a0
00001F52 D2C0                       		adda.w	d0,a1
00001F54 1038 F627                  		move.b	($FFFFF627).w,d0
00001F58                            
00001F58                            loc_1F20:
00001F58 6100                       		bsr.s	Pal_DecColor2
00001F5A 51C8 FFFC                  		dbf	d0,loc_1F20
00001F5E                            
00001F5E                            locret_1F4A:
00001F5E 4E75                       		rts	
00001F60                            ; End of function Pal_WhiteToBlack
00001F60                            
00001F60                            
00001F60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F60                            
00001F60                            
00001F60                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00001F60 3419                       		move.w	(a1)+,d2
00001F62 3610                       		move.w	(a0),d3
00001F64 B642                       		cmp.w	d2,d3
00001F66 6700                       		beq.s	loc_1F78
00001F68 3203                       		move.w	d3,d1
00001F6A 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001F6E 6500                       		bcs.s	loc_1F64
00001F70 B242                       		cmp.w	d2,d1
00001F72 6500                       		bcs.s	loc_1F64
00001F74 30C1                       		move.w	d1,(a0)+
00001F76 4E75                       		rts	
00001F78                            ; ===========================================================================
00001F78                            
00001F78                            loc_1F64:				; XREF: Pal_DecColor2
00001F78 3203                       		move.w	d3,d1
00001F7A 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001F7E 6500                       		bcs.s	loc_1F74
00001F80 B242                       		cmp.w	d2,d1
00001F82 6500                       		bcs.s	loc_1F74
00001F84 30C1                       		move.w	d1,(a0)+
00001F86 4E75                       		rts	
00001F88                            ; ===========================================================================
00001F88                            
00001F88                            loc_1F74:				; XREF: loc_1F64
00001F88 5558                       		subq.w	#2,(a0)+	; decrease red value
00001F8A 4E75                       		rts	
00001F8C                            ; ===========================================================================
00001F8C                            
00001F8C                            loc_1F78:				; XREF: Pal_DecColor2
00001F8C 5448                       		addq.w	#2,a0
00001F8E 4E75                       		rts	
00001F90                            ; End of function Pal_DecColor2
00001F90                            
00001F90                            ; ---------------------------------------------------------------------------
00001F90                            ; Subroutine to	make a white flash when	you enter a special stage
00001F90                            ; ---------------------------------------------------------------------------
00001F90                            
00001F90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F90                            
00001F90                            
00001F90                            Pal_MakeFlash:				; XREF: SpecialStage
00001F90 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001F96 383C 0015                  		move.w	#$15,d4
00001F9A                            
00001F9A                            loc_1F86:
00001F9A 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FA0 6100 0000                  		bsr.w	DelayProgram
00001FA4 6100                       		bsr.s	Pal_ToWhite
00001FA6 6100 F522                  		bsr.w	RunPLC_RAM
00001FAA 51CC FFEE                  		dbf	d4,loc_1F86
00001FAE 4E75                       		rts	
00001FB0                            ; End of function Pal_MakeFlash
00001FB0                            
00001FB0                            
00001FB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FB0                            
00001FB0                            
00001FB0                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00001FB0 7000                       		moveq	#0,d0
00001FB2 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FB6 1038 F626                  		move.b	($FFFFF626).w,d0
00001FBA D0C0                       		adda.w	d0,a0
00001FBC 1038 F627                  		move.b	($FFFFF627).w,d0
00001FC0                            
00001FC0                            loc_1FAC:
00001FC0 6100                       		bsr.s	Pal_AddColor2
00001FC2 51C8 FFFC                  		dbf	d0,loc_1FAC
00001FC6 7000                       		moveq	#0,d0
00001FC8 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FCC 1038 F626                  		move.b	($FFFFF626).w,d0
00001FD0 D0C0                       		adda.w	d0,a0
00001FD2 1038 F627                  		move.b	($FFFFF627).w,d0
00001FD6                            
00001FD6                            loc_1FC2:
00001FD6 6100                       		bsr.s	Pal_AddColor2
00001FD8 51C8 FFFC                  		dbf	d0,loc_1FC2
00001FDC 4E75                       		rts	
00001FDE                            ; End of function Pal_ToWhite
00001FDE                            
00001FDE                            
00001FDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FDE                            
00001FDE                            
00001FDE                            Pal_AddColor2:				; XREF: Pal_ToWhite
00001FDE 3410                       		move.w	(a0),d2
00001FE0 0C42 0EEE                  		cmpi.w	#$EEE,d2
00001FE4 6700                       		beq.s	loc_2006
00001FE6 3202                       		move.w	d2,d1
00001FE8 0241 000E                  		andi.w	#$E,d1
00001FEC 0C41 000E                  		cmpi.w	#$E,d1
00001FF0 6700                       		beq.s	loc_1FE2
00001FF2 5458                       		addq.w	#2,(a0)+	; increase red value
00001FF4 4E75                       		rts	
00001FF6                            ; ===========================================================================
00001FF6                            
00001FF6                            loc_1FE2:				; XREF: Pal_AddColor2
00001FF6 3202                       		move.w	d2,d1
00001FF8 0241 00E0                  		andi.w	#$E0,d1
00001FFC 0C41 00E0                  		cmpi.w	#$E0,d1
00002000 6700                       		beq.s	loc_1FF4
00002002 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002006 4E75                       		rts	
00002008                            ; ===========================================================================
00002008                            
00002008                            loc_1FF4:				; XREF: loc_1FE2
00002008 3202                       		move.w	d2,d1
0000200A 0241 0E00                  		andi.w	#$E00,d1
0000200E 0C41 0E00                  		cmpi.w	#$E00,d1
00002012 6700                       		beq.s	loc_2006
00002014 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002018 4E75                       		rts	
0000201A                            ; ===========================================================================
0000201A                            
0000201A                            loc_2006:				; XREF: Pal_AddColor2
0000201A 5448                       		addq.w	#2,a0
0000201C 4E75                       		rts	
0000201E                            ; End of function Pal_AddColor2
0000201E                            
0000201E                            ; ---------------------------------------------------------------------------
0000201E                            ; Pallet cycling routine - Sega	logo
0000201E                            ; ---------------------------------------------------------------------------
0000201E                            
0000201E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000201E                            
0000201E                            
0000201E                            PalCycle_Sega:				; XREF: SegaScreen
0000201E 4A38 F635                  		tst.b	($FFFFF635).w
00002022 6600                       		bne.s	loc_206A
00002024 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002028 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000202E 7205                       		moveq	#5,d1
00002030 3038 F632                  		move.w	($FFFFF632).w,d0
00002034                            
00002034                            loc_2020:
00002034 6A00                       		bpl.s	loc_202A
00002036 5448                       		addq.w	#2,a0
00002038 5341                       		subq.w	#1,d1
0000203A 5440                       		addq.w	#2,d0
0000203C 60F6                       		bra.s	loc_2020
0000203E                            ; ===========================================================================
0000203E                            
0000203E                            loc_202A:				; XREF: PalCycle_Sega
0000203E 3400                       		move.w	d0,d2
00002040 0242 001E                  		andi.w	#$1E,d2
00002044 6600                       		bne.s	loc_2034
00002046 5440                       		addq.w	#2,d0
00002048                            
00002048                            loc_2034:
00002048 0C40 0060                  		cmpi.w	#$60,d0
0000204C 6400                       		bcc.s	loc_203E
0000204E 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002052                            
00002052                            loc_203E:
00002052 5440                       		addq.w	#2,d0
00002054 51C9 FFE8                  		dbf	d1,loc_202A
00002058 3038 F632                  		move.w	($FFFFF632).w,d0
0000205C 5440                       		addq.w	#2,d0
0000205E 3400                       		move.w	d0,d2
00002060 0242 001E                  		andi.w	#$1E,d2
00002064 6600                       		bne.s	loc_2054
00002066 5440                       		addq.w	#2,d0
00002068                            
00002068                            loc_2054:
00002068 0C40 0064                  		cmpi.w	#$64,d0
0000206C 6D00                       		blt.s	loc_2062
0000206E 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002074 70F4                       		moveq	#-$C,d0
00002076                            
00002076                            loc_2062:
00002076 31C0 F632                  		move.w	d0,($FFFFF632).w
0000207A 7001                       		moveq	#1,d0
0000207C 4E75                       		rts	
0000207E                            ; ===========================================================================
0000207E                            
0000207E                            loc_206A:				; XREF: loc_202A
0000207E 5338 F634                  		subq.b	#1,($FFFFF634).w
00002082 6A00                       		bpl.s	loc_20BC
00002084 11FC 0004 F634             		move.b	#4,($FFFFF634).w
0000208A 3038 F632                  		move.w	($FFFFF632).w,d0
0000208E 0640 000C                  		addi.w	#$C,d0
00002092 0C40 0030                  		cmpi.w	#$30,d0
00002096 6500                       		bcs.s	loc_2088
00002098 7000                       		moveq	#0,d0
0000209A 4E75                       		rts	
0000209C                            ; ===========================================================================
0000209C                            
0000209C                            loc_2088:				; XREF: loc_206A
0000209C 31C0 F632                  		move.w	d0,($FFFFF632).w
000020A0 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000020A6 41F0 0000                  		lea	(a0,d0.w),a0
000020AA 43F8 FB04                  		lea	($FFFFFB04).w,a1
000020AE 22D8                       		move.l	(a0)+,(a1)+
000020B0 22D8                       		move.l	(a0)+,(a1)+
000020B2 3298                       		move.w	(a0)+,(a1)
000020B4 43F8 FB20                  		lea	($FFFFFB20).w,a1
000020B8 7000                       		moveq	#0,d0
000020BA 722C                       		moveq	#$2C,d1
000020BC                            
000020BC                            loc_20A8:
000020BC 3400                       		move.w	d0,d2
000020BE 0242 001E                  		andi.w	#$1E,d2
000020C2 6600                       		bne.s	loc_20B2
000020C4 5440                       		addq.w	#2,d0
000020C6                            
000020C6                            loc_20B2:
000020C6 3390 0000                  		move.w	(a0),(a1,d0.w)
000020CA 5440                       		addq.w	#2,d0
000020CC 51C9 FFEE                  		dbf	d1,loc_20A8
000020D0                            
000020D0                            loc_20BC:
000020D0 7001                       		moveq	#1,d0
000020D2 4E75                       		rts	
000020D4                            ; End of function PalCycle_Sega
000020D4                            
000020D4                            ; ===========================================================================
000020D4                            
000020D4                            Pal_Sega1:	incbin	pallet\sega1.bin
000020E0                            Pal_Sega2:	incbin	pallet\sega2.bin
00002110                            
00002110                            ; ---------------------------------------------------------------------------
00002110                            ; Subroutines to load pallets
00002110                            ; ---------------------------------------------------------------------------
00002110                            
00002110                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002110                            
00002110                            
00002110                            PalLoad1:
00002110 43F9 0000 0000             		lea	(PalPointers).l,a1
00002116 E748                       		lsl.w	#3,d0
00002118 D2C0                       		adda.w	d0,a1
0000211A 2459                       		movea.l	(a1)+,a2
0000211C 3659                       		movea.w	(a1)+,a3
0000211E D6FC 0080                  		adda.w	#$80,a3
00002122 3E19                       		move.w	(a1)+,d7
00002124                            
00002124                            loc_2110:
00002124 26DA                       		move.l	(a2)+,(a3)+
00002126 51CF FFFC                  		dbf	d7,loc_2110
0000212A 4E75                       		rts	
0000212C                            ; End of function PalLoad1
0000212C                            
0000212C                            
0000212C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000212C                            
0000212C                            
0000212C                            PalLoad2:
0000212C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002132 E748                       		lsl.w	#3,d0
00002134 D2C0                       		adda.w	d0,a1
00002136 2459                       		movea.l	(a1)+,a2
00002138 3659                       		movea.w	(a1)+,a3
0000213A 3E19                       		move.w	(a1)+,d7
0000213C                            
0000213C                            loc_2128:
0000213C 26DA                       		move.l	(a2)+,(a3)+
0000213E 51CF FFFC                  		dbf	d7,loc_2128
00002142 4E75                       		rts	
00002144                            ; End of function PalLoad2
00002144                            
00002144                            ; ---------------------------------------------------------------------------
00002144                            ; Underwater pallet loading subroutine
00002144                            ; ---------------------------------------------------------------------------
00002144                            
00002144                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002144                            
00002144                            
00002144                            PalLoad3_Water:
00002144 43F9 0000 0000             		lea	(PalPointers).l,a1
0000214A E748                       		lsl.w	#3,d0
0000214C D2C0                       		adda.w	d0,a1
0000214E 2459                       		movea.l	(a1)+,a2
00002150 3659                       		movea.w	(a1)+,a3
00002152 96FC 0080                  		suba.w	#$80,a3
00002156 3E19                       		move.w	(a1)+,d7
00002158                            
00002158                            loc_2144:
00002158 26DA                       		move.l	(a2)+,(a3)+
0000215A 51CF FFFC                  		dbf	d7,loc_2144
0000215E 4E75                       		rts	
00002160                            ; End of function PalLoad3_Water
00002160                            
00002160                            
00002160                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002160                            
00002160                            
00002160                            PalLoad4_Water:
00002160 43F9 0000 0000             		lea	(PalPointers).l,a1
00002166 E748                       		lsl.w	#3,d0
00002168 D2C0                       		adda.w	d0,a1
0000216A 2459                       		movea.l	(a1)+,a2
0000216C 3659                       		movea.w	(a1)+,a3
0000216E 96FC 0100                  		suba.w	#$100,a3
00002172 3E19                       		move.w	(a1)+,d7
00002174                            
00002174                            loc_2160:
00002174 26DA                       		move.l	(a2)+,(a3)+
00002176 51CF FFFC                  		dbf	d7,loc_2160
0000217A 4E75                       		rts	
0000217C                            ; End of function PalLoad4_Water
0000217C                            
0000217C                            ; ===========================================================================
0000217C                            ; ---------------------------------------------------------------------------
0000217C                            ; Pallet pointers
0000217C                            ; ---------------------------------------------------------------------------
0000217C                            PalPointers:
0000217C                            	include "_inc\Pallet pointers.asm"
0000217C                            ; ---------------------------------------------------------------------------
0000217C                            ; Pallet pointers
0000217C                            ; ---------------------------------------------------------------------------
0000217C 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002180 FB00                       	dc.w $FB00		; RAM address
00002182 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002184 0000 0000                  	dc.l Pal_Title
00002188 FB00                       	dc.w $FB00
0000218A 001F                       	dc.w $1F
0000218C 0000 0000                  	dc.l Pal_LevelSel
00002190 FB00                       	dc.w $FB00
00002192 001F                       	dc.w $1F
00002194 0000 0000                  	dc.l Pal_Sonic
00002198 FB00                       	dc.w $FB00
0000219A 0007                       	dc.w 7
0000219C 0000 0000                  	dc.l Pal_GHZ
000021A0 FB20                       	dc.w $FB20
000021A2 0017                       	dc.w $17
000021A4 0000 0000                  	dc.l Pal_LZ
000021A8 FB20                       	dc.w $FB20
000021AA 0017                       	dc.w $17
000021AC 0000 0000                  	dc.l Pal_MZ
000021B0 FB20                       	dc.w $FB20
000021B2 0017                       	dc.w $17
000021B4 0000 0000                  	dc.l Pal_SLZ
000021B8 FB20                       	dc.w $FB20
000021BA 0017                       	dc.w $17
000021BC 0000 0000                  	dc.l Pal_SYZ
000021C0 FB20                       	dc.w $FB20
000021C2 0017                       	dc.w $17
000021C4 0000 0000                  	dc.l Pal_SBZ1
000021C8 FB20                       	dc.w $FB20
000021CA 0017                       	dc.w $17
000021CC 0000 0000                  	dc.l Pal_Special
000021D0 FB00                       	dc.w $FB00
000021D2 001F                       	dc.w $1F
000021D4 0000 0000                  	dc.l Pal_LZWater
000021D8 FB00                       	dc.w $FB00
000021DA 001F                       	dc.w $1F
000021DC 0000 0000                  	dc.l Pal_SBZ3
000021E0 FB20                       	dc.w $FB20
000021E2 0017                       	dc.w $17
000021E4 0000 0000                  	dc.l Pal_SBZ3Water
000021E8 FB00                       	dc.w $FB00
000021EA 001F                       	dc.w $1F
000021EC 0000 0000                  	dc.l Pal_SBZ2
000021F0 FB20                       	dc.w $FB20
000021F2 0017                       	dc.w $17
000021F4 0000 0000                  	dc.l Pal_LZSonWater
000021F8 FB00                       	dc.w $FB00
000021FA 0007                       	dc.w 7
000021FC 0000 0000                  	dc.l Pal_SBZ3SonWat
00002200 FB00                       	dc.w $FB00
00002202 0007                       	dc.w 7
00002204 0000 0000                  	dc.l Pal_SpeResult
00002208 FB00                       	dc.w $FB00
0000220A 001F                       	dc.w $1F
0000220C 0000 0000                  	dc.l Pal_SpeContinue
00002210 FB00                       	dc.w $FB00
00002212 000F                       	dc.w $F
00002214 0000 0000                  	dc.l Pal_Ending
00002218 FB00                       	dc.w $FB00
0000221A 001F                       	dc.w $1F
0000221C 0000 0000                  	dc.l Pal_Sonic
00002220 FB20                       	dc.w $FB20
00002222 0007                       	dc.w 7
00002222 0007                       	dc.w 7
00002224                            
00002224                            ; ---------------------------------------------------------------------------
00002224                            ; Pallet data
00002224                            ; ---------------------------------------------------------------------------
00002224                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
000022A4                            Pal_Title:	incbin	pallet\title.bin
00002324                            Pal_LevelSel:	incbin	pallet\levelsel.bin
000023A4                            Pal_Sonic:	incbin	pallet\sonic.bin
000023C4                            Pal_GHZ:	incbin	pallet\ghz.bin
00002424                            Pal_LZ:		incbin	pallet\lz.bin
00002484                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002504                            Pal_MZ:		incbin	pallet\mz.bin
00002564                            Pal_SLZ:	incbin	pallet\slz.bin
000025C4                            Pal_SYZ:	incbin	pallet\syz.bin
00002624                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002684                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000026E4                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002764                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000027C4                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002844                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002864                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002884                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002904                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002944                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
000029C4                            
000029C4                            ; ---------------------------------------------------------------------------
000029C4                            ; Subroutine to	delay the program by ($FFFFF62A) frames
000029C4                            ; ---------------------------------------------------------------------------
000029C4                            
000029C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029C4                            
000029C4                            WaitVBlank:
000029C4                            DelayProgram:				; XREF: PauseGame
000029C4 46FC 2300                  		move	#$2300,sr
000029C8                            
000029C8                            loc_29AC:
000029C8 4A38 F62A                  		tst.b	($FFFFF62A).w
000029CC 66FA                       		bne.s	loc_29AC
000029CE 4E75                       		rts	
000029D0                            ; End of function DelayProgram
000029D0                            
000029D0                            ; ---------------------------------------------------------------------------
000029D0                            ; Subroutine to	generate a pseudo-random number	in d0
000029D0                            ; ---------------------------------------------------------------------------
000029D0                            
000029D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029D0                            
000029D0                            
000029D0                            RandomNumber:
000029D0 2238 F636                  		move.l	($FFFFF636).w,d1
000029D4 6600                       		bne.s	loc_29C0
000029D6 223C 2A6D 365A             		move.l	#$2A6D365A,d1
000029DC                            
000029DC                            loc_29C0:
000029DC 2001                       		move.l	d1,d0
000029DE E581                       		asl.l	#2,d1
000029E0 D280                       		add.l	d0,d1
000029E2 E781                       		asl.l	#3,d1
000029E4 D280                       		add.l	d0,d1
000029E6 3001                       		move.w	d1,d0
000029E8 4841                       		swap	d1
000029EA D041                       		add.w	d1,d0
000029EC 3200                       		move.w	d0,d1
000029EE 4841                       		swap	d1
000029F0 21C1 F636                  		move.l	d1,($FFFFF636).w
000029F4 4E75                       		rts	
000029F6                            ; End of function RandomNumber
000029F6                            
000029F6                            
000029F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029F6                            
000029F6                            
000029F6                            CalcSine:
000029F6 0240 00FF                          andi.w  #$FF,d0
000029FA 5040                               addq.w  #8,d0
000029FC D040                               add.w   d0,d0
000029FE 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
00002A02 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
00002A06 4E75                               rts
00002A08                            ; End of function CalcSine
00002A08                            
00002A08                            ; ===========================================================================
00002A08                            
00002A08                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360º sine wave
00002C88                            
00002C88                            ; ===========================================================================
00002C88 48E7 6000                  		movem.l	d1-d2,-(sp)
00002C8C 3200                       		move.w	d0,d1
00002C8E 4841                       		swap	d1
00002C90 7000                       		moveq	#0,d0
00002C92 3200                       		move.w	d0,d1
00002C94 7407                       		moveq	#7,d2
00002C96                            
00002C96                            loc_2C80:
00002C96 E599                       		rol.l	#2,d1
00002C98 D040                       		add.w	d0,d0
00002C9A 5240                       		addq.w	#1,d0
00002C9C 9240                       		sub.w	d0,d1
00002C9E 6400                       		bcc.s	loc_2C9A
00002CA0 D240                       		add.w	d0,d1
00002CA2 5340                       		subq.w	#1,d0
00002CA4 51CA FFF0                  		dbf	d2,loc_2C80
00002CA8 E248                       		lsr.w	#1,d0
00002CAA 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002CAE 4E75                       		rts	
00002CB0                            ; ===========================================================================
00002CB0                            
00002CB0                            loc_2C9A:
00002CB0 5240                       		addq.w	#1,d0
00002CB2 51CA FFE2                  		dbf	d2,loc_2C80
00002CB6 E248                       		lsr.w	#1,d0
00002CB8 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002CBC 4E75                       		rts	
00002CBE                            
00002CBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CBE                            
00002CBE                            
00002CBE                            CalcAngle:
00002CBE 48E7 1800                  		movem.l	d3-d4,-(sp)
00002CC2 7600                       		moveq	#0,d3
00002CC4 7800                       		moveq	#0,d4
00002CC6 3601                       		move.w	d1,d3
00002CC8 3802                       		move.w	d2,d4
00002CCA 8843                       		or.w	d3,d4
00002CCC 6700                       		beq.s	loc_2D04
00002CCE 3802                       		move.w	d2,d4
00002CD0 4A43                       		tst.w	d3
00002CD2 6A00 0000                  		bpl.w	loc_2CC2
00002CD6 4443                       		neg.w	d3
00002CD8                            
00002CD8                            loc_2CC2:
00002CD8 4A44                       		tst.w	d4
00002CDA 6A00 0000                  		bpl.w	loc_2CCA
00002CDE 4444                       		neg.w	d4
00002CE0                            
00002CE0                            loc_2CCA:
00002CE0 B843                       		cmp.w	d3,d4
00002CE2 6400 0000                  		bcc.w	loc_2CDC
00002CE6 E18C                       		lsl.l	#8,d4
00002CE8 88C3                       		divu.w	d3,d4
00002CEA 7000                       		moveq	#0,d0
00002CEC 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002CF0 6000                       		bra.s	loc_2CE6
00002CF2                            ; ===========================================================================
00002CF2                            
00002CF2                            loc_2CDC:				; XREF: CalcAngle
00002CF2 E18B                       		lsl.l	#8,d3
00002CF4 86C4                       		divu.w	d4,d3
00002CF6 7040                       		moveq	#$40,d0
00002CF8 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002CFC                            
00002CFC                            loc_2CE6:
00002CFC 4A41                       		tst.w	d1
00002CFE 6A00 0000                  		bpl.w	loc_2CF2
00002D02 4440                       		neg.w	d0
00002D04 0640 0080                  		addi.w	#$80,d0
00002D08                            
00002D08                            loc_2CF2:
00002D08 4A42                       		tst.w	d2
00002D0A 6A00 0000                  		bpl.w	loc_2CFE
00002D0E 4440                       		neg.w	d0
00002D10 0640 0100                  		addi.w	#$100,d0
00002D14                            
00002D14                            loc_2CFE:
00002D14 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002D18 4E75                       		rts	
00002D1A                            ; ===========================================================================
00002D1A                            
00002D1A                            loc_2D04:				; XREF: CalcAngle
00002D1A 303C 0040                  		move.w	#$40,d0
00002D1E 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002D22 4E75                       		rts	
00002D24                            ; End of function CalcAngle
00002D24                            
00002D24                            ; ===========================================================================
00002D24                            
00002D24                            Angle_Data:	incbin	misc\angles.bin
00002E26                            
00002E26                            ; ===========================================================================
00002E26                            
00002E26                            ; ---------------------------------------------------------------------------
00002E26                            ; Sega screen
00002E26                            ; ---------------------------------------------------------------------------
00002E26                            
00002E26                            SegaScreen:				; XREF: GameModeArray
00002E26 103C 00E4                  		move.b	#$E4,d0
00002E2A 6100 E3F4                  		bsr.w	PlaySound_Special ; stop music
00002E2E 6100 E68C                  		bsr.w	ClearPLC
00002E32 6100 F056                  		bsr.w	Pal_FadeFrom
00002E36 4DF9 00C0 0004             		lea	($C00004).l,a6
00002E3C 3CBC 8004                  		move.w	#$8004,(a6)
00002E40 3CBC 8230                  		move.w	#$8230,(a6)
00002E44 3CBC 8407                  		move.w	#$8407,(a6)
00002E48 3CBC 8700                  		move.w	#$8700,(a6)
00002E4C 3CBC 8B00                  		move.w	#$8B00,(a6)
00002E50 4238 F64E                  		clr.b	($FFFFF64E).w
00002E54 46FC 2700                  		move	#$2700,sr
00002E58 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002E5C 0200 00BF                  		andi.b	#$BF,d0
00002E60 33C0 00C0 0004             		move.w	d0,($C00004).l
00002E66 6100 E292                  		bsr.w	ClearScreen
00002E6A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002E74 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00002E7A 6100 E496                  		bsr.w	NemDec
00002E7E 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E84 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00002E8A 303C 0000                  		move.w	#0,d0
00002E8E 6100 E76C                  		bsr.w	EniDec
00002E92 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E98 203C 6510 0003             		move.l	#$65100003,d0
00002E9E 7217                       		moveq	#$17,d1
00002EA0 7407                       		moveq	#7,d2
00002EA2 6100 E444                  		bsr.w	ShowVDPGraphics
00002EA6 43F9 00FF 0180             		lea	($FF0180).l,a1
00002EAC 203C 4000 0003             		move.l	#$40000003,d0
00002EB2 7227                       		moveq	#$27,d1
00002EB4 741B                       		moveq	#$1B,d2
00002EB6 6100 E430                  		bsr.w	ShowVDPGraphics
00002EBA 7000                       		moveq	#0,d0
00002EBC 6100 F26E                  		bsr.w	PalLoad2	; load Sega logo pallet
00002EC0 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00002EC6 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00002ECC 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00002ED2 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00002ED8 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w		
00002EDE 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002EE2 0000 0040                  		ori.b	#$40,d0
00002EE6 33C0 00C0 0004             		move.w	d0,($C00004).l
00002EEC                            
00002EEC                            Sega_WaitPallet:
00002EEC 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002EF2 6100 FAD0                  		bsr.w	DelayProgram
00002EF6 6100 F126                  		bsr.w	PalCycle_Sega
00002EFA 66F0                       		bne.s	Sega_WaitPallet
00002EFC                            
00002EFC 103C 00E1                  		move.b	#$E1,d0
00002F00 6100 E31E                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00002F04 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00002F0A 6100 FAB8                  		bsr.w	DelayProgram
00002F0E 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00002F14                            
00002F14                            Sega_WaitEnd:
00002F14 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002F1A 6100 FAA8                  		bsr.w	DelayProgram
00002F1E 4A78 F614                  		tst.w	($FFFFF614).w
00002F22 6700                       		beq.s	Sega_GotoTitle
00002F24 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00002F2A 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00002F2C                            
00002F2C                            Sega_GotoTitle:
00002F2C 11FC 0001 F601             		move.b	#1,(FromSEGA).w
00002F32 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00002F38 103C 00E4                  		move.b	#$E4,d0
00002F3C 6100 E2E2                  		bsr.w	PlaySound_Special ; stop music
00002F40 6100 E57A                  		bsr.w	ClearPLC
00002F44 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002F4A 6100 EF44                  		bsr.w	Pal_FadeFrom2
00002F4E 46FC 2700                  		move	#$2700,sr
00002F52 6100 E234                  		bsr.w	SoundDriverLoad
00002F56 4DF9 00C0 0004             		lea	($C00004).l,a6
00002F5C 3CBC 8004                  		move.w	#$8004,(a6)
00002F60 3CBC 8230                  		move.w	#$8230,(a6)
00002F64 3CBC 8407                  		move.w	#$8407,(a6)
00002F68 3CBC 9001                  		move.w	#$9001,(a6)
00002F6C 3CBC 9200                  		move.w	#$9200,(a6)
00002F70 3CBC 8B03                  		move.w	#$8B03,(a6)
00002F74 3CBC 8720                  		move.w	#$8720,(a6)
00002F78 4238 F64E                  		clr.b	($FFFFF64E).w
00002F7C 6100 E17C                  		bsr.w	ClearScreen
00002F80 4EB9 0000 0000             		jsr SHC2021
00002F86 6000                       		bra.s	TitleSkip
00002F88                            ; ===========================================================================
00002F88                            
00002F88                            ; ---------------------------------------------------------------------------
00002F88                            ; Title	screen
00002F88                            ; ---------------------------------------------------------------------------
00002F88                            
00002F88                            TitleScreen:				; XREF: GameModeArray
00002F88 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00002F8E 103C 00E4                  		move.b	#$E4,d0
00002F92 6100 E28C                  		bsr.w	PlaySound_Special ; stop music
00002F96 6100 E524                  		bsr.w	ClearPLC
00002F9A 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00002FA0 6100 EEEE                  		bsr.w	Pal_FadeFrom2
00002FA4 46FC 2700                  		move	#$2700,sr
00002FA8 6100 E1DE                  		bsr.w	SoundDriverLoad
00002FAC 4DF9 00C0 0004             		lea	($C00004).l,a6
00002FB2 3CBC 8004                  		move.w	#$8004,(a6)
00002FB6 3CBC 8230                  		move.w	#$8230,(a6)
00002FBA 3CBC 8407                  		move.w	#$8407,(a6)
00002FBE 3CBC 9001                  		move.w	#$9001,(a6)
00002FC2 3CBC 9200                  		move.w	#$9200,(a6)
00002FC6 3CBC 8B03                  		move.w	#$8B03,(a6)
00002FCA 3CBC 8720                  		move.w	#$8720,(a6)
00002FCE 4238 F64E                  		clr.b	($FFFFF64E).w
00002FD2 6100 E126                  		bsr.w	ClearScreen
00002FD6                            
00002FD6                            TitleSkip:
00002FD6 43F8 D000                  		lea	($FFFFD000).w,a1
00002FDA 7000                       		moveq	#0,d0
00002FDC 323C 07FF                  		move.w	#$7FF,d1
00002FE0                            
00002FE0                            Title_ClrObjRam:
00002FE0 22C0                       		move.l	d0,(a1)+
00002FE2 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00002FE6                            
00002FE6 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002FF0 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00002FF6 6100 E31A                  		bsr.w	NemDec
00002FFA 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003004 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
0000300A 6100 E306                  		bsr.w	NemDec
0000300E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003014 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
0000301A 303C 0000                  		move.w	#0,d0
0000301E 6100 E5DC                  		bsr.w	EniDec
00003022 43F9 00FF 0000             		lea	($FF0000).l,a1
00003028 203C 4000 0003             		move.l	#$40000003,d0
0000302E 7227                       		moveq	#$27,d1
00003030 741B                       		moveq	#$1B,d2
00003032 6100 E2B4                  		bsr.w	ShowVDPGraphics
00003036                            
00003036 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000303A 7000                       		moveq	#0,d0
0000303C 323C 001F                  		move.w	#$1F,d1
00003040                            
00003040                            Title_ClrPallet:
00003040 22C0                       		move.l	d0,(a1)+
00003042 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003046                            
00003046 7014                       		moveq	#$14,d0		; load Sonic's pallet
00003048 6100 F0C6                  		bsr.w	PalLoad1
0000304C 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00003052 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w		
00003058 4EB9 0000 0000             		jsr	ObjectsLoad
0000305E 4EB9 0000 0000             		jsr	BuildSprites
00003064 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000306A 4A38 F601                  		tst.b	(FromSEGA).w
0000306E 6700 0000                  		beq.w	@skip
00003072 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003078                            
00003078                            	@skip:
00003078 6100 ED94                  		bsr.w	Pal_FadeTo2
0000307C 46FC 2700                  		move	#$2700,sr
00003080 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
0000308A 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003090 6100 E280                  		bsr.w	NemDec
00003094 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
0000309E 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
000030A4 6100 E26C                  		bsr.w	NemDec
000030A8 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
000030B2 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
000030B8 6100 E258                  		bsr.w	NemDec
000030BC 4DF9 00C0 0000             		lea	($C00000).l,a6
000030C2 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000030CA 4BF9 0000 0550             		lea	(Art_Text).l,a5
000030D0 323C 028F                  		move.w	#$28F,d1
000030D4                            
000030D4                            Title_LoadText:
000030D4 3C9D                       		move.w	(a5)+,(a6)
000030D6 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
000030DA                            
000030DA 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
000030E0 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
000030E6 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
000030EC 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000030F2 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000030F8 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000030FE 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
00003104 6100 0000                  		bsr.w	LevelSizeLoad
00003108 6100 0000                  		bsr.w	DeformBgLayer
0000310C 43F8 B000                  		lea	($FFFFB000).w,a1
00003110 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003116 303C 0000                  		move.w	#0,d0
0000311A 6100 E4E0                  		bsr.w	EniDec
0000311E 6100 0000                  		bsr.w	LevelLayoutLoad
00003122 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003128 4A38 F601                  		tst.b	(FromSEGA).w
0000312C 6700                       		beq.s	@notSEGA
0000312E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003134                            
00003134                            	@notSEGA:
00003134 6100 ED5A                  		bsr.w	Pal_FadeFrom2
00003138 46FC 2700                  		move	#$2700,sr
0000313C 6100 DFBC                  		bsr.w	ClearScreen
00003140 4BF9 00C0 0004             		lea	($C00004).l,a5
00003146 4DF9 00C0 0000             		lea	($C00000).l,a6
0000314C 47F8 F708                  		lea	($FFFFF708).w,a3
00003150 49F8 A440                  		lea	($FFFFA440).w,a4
00003154 343C 6000                  		move.w	#$6000,d2
00003158 6100 0000                  		bsr.w	LoadTilesFromStart2
0000315C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003162 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003168 303C 0000                  		move.w	#0,d0
0000316C 6100 E48E                  		bsr.w	EniDec
00003170 43F9 00FF 0000             		lea	($FF0000).l,a1
00003176 203C 4206 0003             		move.l	#$42060003,d0
0000317C 7221                       		moveq	#$21,d1
0000317E 7415                       		moveq	#$15,d2
00003180 6100 E166                  		bsr.w	ShowVDPGraphics
00003184 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000318E 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
00003194 6100 E17C                  		bsr.w	NemDec
00003198 7001                       		moveq	#1,d0		; load title screen pallet
0000319A 6100 EF74                  		bsr.w	PalLoad1
0000319E 103C 008A                  		move.b	#$8A,d0		; play title screen music
000031A2 6100 E07C                  		bsr.w	PlaySound_Special
000031A6 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
000031AC                            		;move.b	#1,($FFFFFFE1).w ; enable slow-mo mode
000031AC 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
000031B2 43F8 D080                  		lea	($FFFFD080).w,a1
000031B6 7000                       		moveq	#0,d0
000031B8 323C 0007                  		move.w	#7,d1
000031BC                            
000031BC                            Title_ClrObjRam2:
000031BC 22C0                       		move.l	d0,(a1)+
000031BE 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
000031C2                            
000031C2 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
000031C8 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000031CE 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000031D4 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000031DA 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000031E0 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
000031E6 4EB9 0000 0000             		jsr	ObjectsLoad
000031EC 6100 0000                  		bsr.w	DeformBgLayer
000031F0 4EB9 0000 0000             		jsr	BuildSprites
000031F6 7000                       		moveq	#0,d0
000031F8 6100 E296                  		bsr.w	LoadPLC2
000031FC 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003202 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003208 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000320C 0000 0040                  		ori.b	#$40,d0
00003210 33C0 00C0 0004             		move.w	d0,($C00004).l
00003216 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000321C 4A38 F601                  		tst.b	(FromSEGA).w
00003220 6700                       		beq.s	@notSEGA
00003222 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003228 11FC 0000 F5C4             		move.b	#0,(SonimeSST+sonime_routine).w
0000322E 11FC 0000 F601             		move.b	#0,(FromSEGA).w
00003234                            
00003234                            	@notSEGA:
00003234 6100 EBD8                  		bsr.w	Pal_FadeTo2
00003238                            
00003238                            loc_317C:
00003238 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000323E 6100 F784                  		bsr.w	DelayProgram
00003242 4EB9 0000 0000             		jsr	ObjectsLoad
00003248 6100 0000                  		bsr.w	DeformBgLayer
0000324C 4EB9 0000 0000             		jsr	BuildSprites
00003252 6100 E764                  		bsr.w	PalCycle_Title
00003256 6100 E272                  		bsr.w	RunPLC_RAM
0000325A 3038 D008                  		move.w	($FFFFD008).w,d0
0000325E 5440                       		addq.w	#2,d0
00003260 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003264 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003268 6500                       		bcs.s	Title_ChkRegion	; if not, branch
0000326A 6000 FD1C                  		bra.w	TitleScreen
0000326E                            ; ===========================================================================
0000326E                            
0000326E                            Title_ChkRegion:
0000326E 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003272 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003274 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
0000327A 6000                       		bra.s	Title_EnterCheat
0000327C                            ; ===========================================================================
0000327C                            
0000327C                            Title_RegionJ:				; XREF: Title_ChkRegion
0000327C 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003282                            
00003282                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003282 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003286 D0C0                       		adda.w	d0,a0
00003288 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
0000328C 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003290 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003292 6600                       		bne.s	loc_3210	; if not, branch
00003294 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003298 4A00                       		tst.b	d0
0000329A 6600                       		bne.s	Title_CountC
0000329C 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000032A0 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000032A4 E249                       		lsr.w	#1,d1
000032A6 0241 0003                  		andi.w	#3,d1
000032AA 6700                       		beq.s	Title_PlayRing
000032AC 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000032B0 6A00                       		bpl.s	Title_PlayRing
000032B2 7201                       		moveq	#1,d1
000032B4 1181 1001                  		move.b	d1,1(a0,d1.w)
000032B8                            
000032B8                            Title_PlayRing:
000032B8 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000032BE 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000032C2 6100 DF5C                  		bsr.w	PlaySound_Special
000032C6 6000                       		bra.s	Title_CountC
000032C8                            ; ===========================================================================
000032C8                            
000032C8                            loc_3210:				; XREF: Title_EnterCheat
000032C8 4A00                       		tst.b	d0
000032CA 6700                       		beq.s	Title_CountC
000032CC 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000032D2 6700                       		beq.s	Title_CountC
000032D4 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000032DA                            
000032DA                            Title_CountC:
000032DA 1038 F605                  		move.b	($FFFFF605).w,d0
000032DE 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000032E2 6700                       		beq.s	loc_3230	; if not, branch
000032E4 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000032E8                            
000032E8                            loc_3230:
000032E8 4A78 F614                  		tst.w	($FFFFF614).w
000032EC 6700 0000                  		beq.w	Demo
000032F0 0838 0005 F605             		btst	#5,($FFFFF605).w	; has C been pressed?
000032F6 6700                       		beq.s	Title_StartCheck		; if not, branch
000032F8 33FC 0100 00A1 1100        		move.w #$0100,($A11100).l ; request Z80 stop (ON)
00003300 0839 0000 00A1 1100        		btst.b #$00,($A11100).l ; has the Z80 stopped yet?
00003308 66F6                       		bne.s *-$08 ; if not, branch
0000330A 0879 0007 00A0 0647        		bchg #7,($A00647).l ; set volume
00003312 13FC 00DA 00A0 0651        		move.b #%11011010,($A00651).l ; set request
0000331A 33FC 0000 00A1 1100        		move.w #$0000,($A11100).l ; request Z80 stop (OFF)
00003322 103C 00B5                  		move.b	#$B5,d0
00003326 6100 DEF8                  		bsr.w	PlaySound_Special
0000332A                            
0000332A                            Title_StartCheck:
0000332A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003330 6700 FF06                  		beq.w	loc_317C	; if not, branch
00003334                            
00003334                            Title_ChkLevSel:
00003334 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003338 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000333C 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003342 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003346 7002                       		moveq	#2,d0
00003348 6100 EDE2                  		bsr.w	PalLoad2	; load level select pallet
0000334C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003350 7000                       		moveq	#0,d0
00003352 323C 00DF                  		move.w	#$DF,d1
00003356                            
00003356                            Title_ClrScroll:
00003356 22C0                       		move.l	d0,(a1)+
00003358 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
0000335C                            
0000335C 21C0 F616                  		move.l	d0,($FFFFF616).w
00003360 46FC 2700                  		move	#$2700,sr
00003364 4DF9 00C0 0000             		lea	($C00000).l,a6
0000336A 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003374 323C 03FF                  		move.w	#$3FF,d1
00003378                            
00003378                            Title_ClrVram:
00003378 2C80                       		move.l	d0,(a6)
0000337A 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000337E                            
0000337E 6100 0000                  		bsr.w	LevSelTextLoad
00003382                            
00003382                            ; ---------------------------------------------------------------------------
00003382                            ; Level	Select
00003382                            ; ---------------------------------------------------------------------------
00003382                            
00003382                            LevelSelect:
00003382 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003388 6100 F63A                  		bsr.w	DelayProgram
0000338C 4EB9 0000 0000             		jsr		BuildSprites
00003392 6100 0000                  		bsr.w	LevSelControls
00003396 6100 E132                  		bsr.w	RunPLC_RAM
0000339A 4AB8 F680                  		tst.l	($FFFFF680).w
0000339E 66E2                       		bne.s	LevelSelect
000033A0 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000033A6 67DA                       		beq.s	LevelSelect	; if not, branch
000033A8 3038 FF82                  		move.w	($FFFFFF82).w,d0
000033AC 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
000033B0 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000033B2 3038 FF84                  		move.w	($FFFFFF84).w,d0
000033B6 0640 0080                  		addi.w	#$80,d0
000033BA 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
000033BE 6700                       		beq.s	LevSel_NoCheat	; if not, branch
000033C0 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
000033C4 6700                       		beq.s	LevSel_Ending	; if yes, branch
000033C6 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
000033CA 6700                       		beq.s	LevSel_Credits	; if yes, branch
000033CC                            
000033CC                            LevSel_NoCheat:
000033CC 0C40 0094                  		cmpi.w	#$94,d0		; is sound $80-$94 being played?
000033D0 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
000033D2 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
000033D6 65AA                       		bcs.s	LevelSelect	; if yes, branch
000033D8                            
000033D8                            LevSel_PlaySnd:
000033D8 6100 DE46                  		bsr.w	PlaySound_Special
000033DC 60A4                       		bra.s	LevelSelect
000033DE                            ; ===========================================================================
000033DE                            
000033DE                            LevSel_Ending:				; XREF: LevelSelect
000033DE 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000033E4 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000033EA                            	;	move.b	#0,($FFFFFE57).w ; clear emeralds
000033EA 4E75                       		rts	
000033EC                            ; ===========================================================================
000033EC                            
000033EC                            LevSel_Credits:				; XREF: LevelSelect
000033EC 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000033F2 103C 0091                  		move.b	#$91,d0
000033F6 6100 DE28                  		bsr.w	PlaySound_Special ; play credits music
000033FA 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003400 4E75                       		rts	
00003402                            ; ===========================================================================
00003402                            
00003402                            LevSel_Level_SS:			; XREF: LevelSelect
00003402 D040                       		add.w	d0,d0
00003404 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003408 6B00 FF78                  		bmi.w	LevelSelect
0000340C 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003410 6600                       		bne.s	LevSel_Level	; if not, branch
00003412 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003418 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
0000341C 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003422 7000                       		moveq	#0,d0
00003424 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003428 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000342C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003430 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003434                            	;	move.l	#$00010203,($FFFFFE58).w ; clear emeralds
00003434                            	;	move.l	#$04050000,($FFFFFE5C).w ; clear emeralds
00003434 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)	
0000343C 4E75                       		rts	
0000343E                            ; ===========================================================================
0000343E                            ; ---------------------------------------------------------------------------
0000343E                            ; Level	select - level pointers
0000343E                            ; ---------------------------------------------------------------------------
0000343E                            LSelectPointers:
0000343E                            		incbin	misc\ls_point.bin
00003468                            		even
00003468                            
00003468                            LevSel_Level:				; XREF: LevSel_Level_SS
00003468 0240 3FFF                  		andi.w	#$3FFF,d0
0000346C 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003470                            
00003470                            PlayLevel:				; XREF: ROM:00003246j ...
00003470 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003476 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000347C 7000                       		moveq	#0,d0
0000347E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003482 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003486 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000348A 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
0000348E 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003492                            	;	move.l	#$01020304,($FFFFFE58).w ; clear emeralds
00003492                            	;	move.l	#$05000000,($FFFFFE5C).w ; clear emeralds
00003492 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003496 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)			
0000349E 103C 00E0                  		move.b	#$E0,d0
000034A2 6100 DD7C                  		bsr.w	PlaySound_Special ; fade out music
000034A6 4E75                       		rts	
000034A8                            ; ===========================================================================
000034A8                            ; ---------------------------------------------------------------------------
000034A8                            ; Level	select codes
000034A8                            ; ---------------------------------------------------------------------------
000034A8                            LevelSelectCode_J:
000034A8                            		incbin	misc\ls_jcode.bin
000034AE                            		even
000034AE                            
000034AE                            LevelSelectCode_US:
000034AE                            		incbin	misc\ls_ucode.bin
000034B4                            		even
000034B4                            ; ===========================================================================
000034B4                            
000034B4                            ; ---------------------------------------------------------------------------
000034B4                            ; Demo mode
000034B4                            ; ---------------------------------------------------------------------------
000034B4                            
000034B4                            Demo:					; XREF: TitleScreen
000034B4 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000034BA                            
000034BA                            loc_33B6:				; XREF: loc_33E4
000034BA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000034C0 6100 F502                  		bsr.w	DelayProgram
000034C4 6100 0000                  		bsr.w	DeformBgLayer
000034C8 6100 E4CE                  		bsr.w	PalCycle_Load
000034CC 6100 DFFC                  		bsr.w	RunPLC_RAM
000034D0 3038 D008                  		move.w	($FFFFD008).w,d0
000034D4 5440                       		addq.w	#2,d0
000034D6 31C0 D008                  		move.w	d0,($FFFFD008).w
000034DA 0C40 1C00                  		cmpi.w	#$1C00,d0
000034DE 6500                       		bcs.s	loc_33E4
000034E0 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set screen mode to 0
000034E6 4E75                       		rts	
000034E8                            ; ===========================================================================
000034E8                            
000034E8                            loc_33E4:				; XREF: Demo
000034E8 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000034EE 6600 FE44                  		bne.w	Title_ChkLevSel	; if yes, branch
000034F2 4A78 F614                  		tst.w	($FFFFF614).w
000034F6 6600 FFC2                  		bne.w	loc_33B6
000034FA 103C 00E0                  		move.b	#$E0,d0
000034FE 6100 DD20                  		bsr.w	PlaySound_Special ; fade out music
00003502 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003506 0240 0007                  		andi.w	#7,d0
0000350A D040                       		add.w	d0,d0
0000350C 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003510 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003514 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003518 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
0000351E 6500                       		bcs.s	loc_3422	; if yes, branch
00003520 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003526                            
00003526                            loc_3422:
00003526 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
0000352C 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003532 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003536 6600                       		bne.s	Demo_Level	; if not, branch
00003538 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000353E 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003542 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003546                            
00003546                            Demo_Level:
00003546 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000354C 7000                       		moveq	#0,d0
0000354E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003552 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003556 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000355A 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)		
00003562 4E75                       		rts	
00003564                            ; ===========================================================================
00003564                            ; ---------------------------------------------------------------------------
00003564                            ; Levels used in demos
00003564                            ; ---------------------------------------------------------------------------
00003564                            Demo_Levels:	incbin	misc\dm_ord1.bin
0000356C                            		even
0000356C                            
0000356C                            ; ---------------------------------------------------------------------------
0000356C                            ; Subroutine to	change what you're selecting in the level select
0000356C                            ; ---------------------------------------------------------------------------
0000356C                            
0000356C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000356C                            
0000356C                            
0000356C                            LevSelControls:				; XREF: LevelSelect
0000356C 1238 F605                  		move.b	($FFFFF605).w,d1
00003570 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003574 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003576 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
0000357A 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
0000357C                            
0000357C                            LevSel_UpDown:
0000357C 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003582 1238 F604                  		move.b	($FFFFF604).w,d1
00003586 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
0000358A 6700                       		beq.s	LevSel_SndTest	; if not, branch
0000358C 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003590 0801 0000                  		btst	#0,d1		; is up	pressed?
00003594 6700                       		beq.s	LevSel_Down	; if not, branch
00003596 5340                       		subq.w	#1,d0		; move up 1 selection
00003598 6400                       		bcc.s	LevSel_Down
0000359A 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
0000359C                            
0000359C                            LevSel_Down:
0000359C 0801 0001                  		btst	#1,d1		; is down pressed?
000035A0 6700                       		beq.s	LevSel_Refresh	; if not, branch
000035A2 5240                       		addq.w	#1,d0		; move down 1 selection
000035A4 0C40 0015                  		cmpi.w	#$15,d0
000035A8 6500                       		bcs.s	LevSel_Refresh
000035AA 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
000035AC                            
000035AC                            LevSel_Refresh:
000035AC 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
000035B0 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000035B4 4E75                       		rts	
000035B6                            ; ===========================================================================
000035B6                            
000035B6                            LevSel_SndTest:				; XREF: LevSelControls
000035B6 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
000035BC 6600                       		bne.s	LevSel_NoMove	; if not, branch
000035BE 1238 F605                  		move.b	($FFFFF605).w,d1
000035C2 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
000035C6 6700                       		beq.s	LevSel_NoMove	; if not, branch
000035C8 3038 FF84                  		move.w	($FFFFFF84).w,d0
000035CC 0801 0002                  		btst	#2,d1		; is left pressed?
000035D0 6700                       		beq.s	LevSel_Right	; if not, branch
000035D2 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000035D4 6400                       		bcc.s	LevSel_Right
000035D6 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
000035D8                            
000035D8                            LevSel_Right:
000035D8 0801 0003                  		btst	#3,d1		; is right pressed?
000035DC 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000035DE 5240                       		addq.w	#1,d0		; add 1	to sound test
000035E0 0C40 0050                  		cmpi.w	#$50,d0
000035E4 6500                       		bcs.s	LevSel_Refresh2
000035E6 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000035E8                            
000035E8                            LevSel_Refresh2:
000035E8 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
000035EC 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000035F0                            
000035F0                            LevSel_NoMove:
000035F0 4E75                       		rts	
000035F2                            ; End of function LevSelControls
000035F2                            
000035F2                            ; ---------------------------------------------------------------------------
000035F2                            ; Subroutine to load level select text
000035F2                            ; ---------------------------------------------------------------------------
000035F2                            
000035F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000035F2                            
000035F2                            
000035F2                            LevSelTextLoad:				; XREF: TitleScreen
000035F2 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000035F8 4DF9 00C0 0000             		lea	($C00000).l,a6
000035FE 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
00003604 363C E680                  		move.w	#$E680,d3	; VRAM setting
00003608 7214                       		moveq	#$14,d1		; number of lines of text
0000360A                            
0000360A                            loc_34FE:				; XREF: LevSelTextLoad+26j
0000360A 2D44 0004                  		move.l	d4,4(a6)
0000360E 6100 0000                  		bsr.w	LevSel_ChgLine
00003612 0684 0080 0000             		addi.l	#$800000,d4
00003618 51C9 FFF0                  		dbf	d1,loc_34FE
0000361C 7000                       		moveq	#0,d0
0000361E 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003622 3200                       		move.w	d0,d1
00003624 283C 6210 0003             		move.l	#$62100003,d4
0000362A EF48                       		lsl.w	#7,d0
0000362C 4840                       		swap	d0
0000362E D880                       		add.l	d0,d4
00003630 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003636 E749                       		lsl.w	#3,d1
00003638 3001                       		move.w	d1,d0
0000363A D241                       		add.w	d1,d1
0000363C D240                       		add.w	d0,d1
0000363E D2C1                       		adda.w	d1,a1
00003640 363C C680                  		move.w	#$C680,d3
00003644 2D44 0004                  		move.l	d4,4(a6)
00003648 6100 0000                  		bsr.w	LevSel_ChgLine
0000364C 363C E680                  		move.w	#$E680,d3
00003650 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00003656 6600                       		bne.s	loc_3550
00003658 363C C680                  		move.w	#$C680,d3
0000365C                            
0000365C                            loc_3550:
0000365C 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00003666 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000366A 0640 0080                  		addi.w	#$80,d0
0000366E                            
0000366E                            DRAWNUMBER:
0000366E 1400                       		move.b	d0,d2
00003670 E808                       		lsr.b	#4,d0
00003672 6100 0000                  		bsr.w	LevSel_ChgSnd
00003676 1002                       		move.b	d2,d0
00003678 6100 0000                  		bsr.w	LevSel_ChgSnd
0000367C 4E75                       		rts	
0000367E                            ; End of function LevSelTextLoad
0000367E                            
0000367E                            
0000367E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000367E                            
0000367E                            
0000367E                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
0000367E 0240 000F                  		andi.w	#$F,d0
00003682 0C00 000A                  		cmpi.b	#$A,d0
00003686 6500                       		bcs.s	loc_3580
00003688 5E00                       		addi.b	#7,d0
0000368A                            
0000368A                            loc_3580:
0000368A D043                       		add.w	d3,d0
0000368C 3C80                       		move.w	d0,(a6)
0000368E 4E75                       		rts	
00003690                            ; End of function LevSel_ChgSnd
00003690                            
00003690                            
00003690                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003690                            
00003690                            
00003690                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003690 7417                       		moveq	#$17,d2		; number of characters per line
00003692                            
00003692                            loc_3588:
00003692 7000                       		moveq	#0,d0
00003694 1019                       		move.b	(a1)+,d0
00003696 6A00                       		bpl.s	loc_3598
00003698 3CBC 0000                  		move.w	#0,(a6)
0000369C 51CA FFF4                  		dbf	d2,loc_3588
000036A0 4E75                       		rts	
000036A2                            ; ===========================================================================
000036A2                            
000036A2                            loc_3598:				; XREF: LevSel_ChgLine
000036A2 D043                       		add.w	d3,d0
000036A4 3C80                       		move.w	d0,(a6)
000036A6 51CA FFEA                  		dbf	d2,loc_3588
000036AA 4E75                       		rts	
000036AC                            ; End of function LevSel_ChgLine
000036AC                            
000036AC                            ; ===========================================================================
000036AC                            ; ---------------------------------------------------------------------------
000036AC                            ; Level	select menu text
000036AC                            ; ---------------------------------------------------------------------------
000036AC                            LevelMenuText:	incbin	misc\menutext.bin
000038A4                            		even
000038A4                            ; ---------------------------------------------------------------------------
000038A4                            ; Music	playlist
000038A4                            ; ---------------------------------------------------------------------------
000038A4                            MusicList:	incbin	misc\muslist1.bin
000038AC                            		even
000038AC                            ; ===========================================================================
000038AC                            
000038AC                            ; ---------------------------------------------------------------------------
000038AC                            ; Level
000038AC                            ; ---------------------------------------------------------------------------
000038AC                            
000038AC                            Level:					; XREF: GameModeArray
000038AC 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
000038B2 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w		
000038B8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000038BC 6B00                       		bmi.s	loc_37B6
000038BE 103C 00E0                  		move.b	#$E0,d0
000038C2 6100 D95C                  		bsr.w	PlaySound_Special ; fade out music
000038C6                            
000038C6                            loc_37B6:
000038C6 6100 DBF4                  		bsr.w	ClearPLC
000038CA 6100 E5BE                  		bsr.w	Pal_FadeFrom
000038CE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000038D2 6B00                       		bmi.s	Level_ClrRam
000038D4 46FC 2700                  		move	#$2700,sr
000038D8 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
000038E2 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
000038E8 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
000038EE 4EB8 143A                          jsr LoadUncArt          ; load uncompressed art
000038F2 46FC 2300                  		move	#$2300,sr
000038F6 7000                       		moveq	#0,d0
000038F8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000038FC E948                       		lsl.w	#4,d0
000038FE 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003904 45F2 0000                  		lea	(a2,d0.w),a2
00003908 7000                       		moveq	#0,d0
0000390A 1012                       		move.b	(a2),d0
0000390C 6700                       		beq.s	loc_37FC
0000390E 6100 DB4E                  		bsr.w	LoadPLC		; load level patterns
00003912                            
00003912                            loc_37FC:
00003912 7001                       		moveq	#1,d0
00003914 6100 DB48                  		bsr.w	LoadPLC		; load standard	patterns
00003918                            
00003918                            Level_ClrRam:
00003918 43F8 D000                  		lea	($FFFFD000).w,a1
0000391C 7000                       		moveq	#0,d0
0000391E 323C 07FF                  		move.w	#$7FF,d1
00003922                            
00003922                            Level_ClrObjRam:
00003922 22C0                       		move.l	d0,(a1)+
00003924 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003928                            
00003928 43F8 F628                  		lea	($FFFFF628).w,a1
0000392C 7000                       		moveq	#0,d0
0000392E 323C 0015                  		move.w	#$15,d1
00003932                            
00003932                            Level_ClrVars:
00003932 22C0                       		move.l	d0,(a1)+
00003934 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003938                            
00003938 43F8 F700                  		lea	($FFFFF700).w,a1
0000393C 7000                       		moveq	#0,d0
0000393E 323C 003F                  		move.w	#$3F,d1
00003942                            
00003942                            Level_ClrVars2:
00003942 22C0                       		move.l	d0,(a1)+
00003944 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003948                            
00003948 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000394C 7000                       		moveq	#0,d0
0000394E 323C 0047                  		move.w	#$47,d1
00003952                            
00003952                            Level_ClrVars3:
00003952 22C0                       		move.l	d0,(a1)+
00003954 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003958 46FC 2700                  		move	#$2700,sr
0000395C 6100 D79C                  		bsr.w	ClearScreen
00003960 4DF9 00C0 0004             		lea	($C00004).l,a6
00003966 3CBC 8B03                  		move.w	#$8B03,(a6)
0000396A 3CBC 8230                  		move.w	#$8230,(a6)
0000396E 3CBC 8407                  		move.w	#$8407,(a6)
00003972 3CBC 857C                  		move.w	#$857C,(a6)
00003976 3CBC 9001                  		move.w	#$9001,(a6)
0000397A 3CBC 8004                  		move.w	#$8004,(a6)
0000397E 3CBC 8720                  		move.w	#$8720,(a6)
00003982 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003988 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000398C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003992 6600                       		bne.s	Level_LoadPal	; if not, branch
00003994 3CBC 8014                  		move.w	#$8014,(a6)
00003998 7000                       		moveq	#0,d0
0000399A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000399E D040                       		add.w	d0,d0
000039A0 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
000039A6 3031 0000                  		move.w	(a1,d0.w),d0
000039AA 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
000039AE 31C0 F648                  		move.w	d0,($FFFFF648).w
000039B2 31C0 F64A                  		move.w	d0,($FFFFF64A).w
000039B6 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
000039BA 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
000039BE 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
000039C4                            
000039C4                            Level_LoadPal:
000039C4 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000039CA 46FC 2300                  		move	#$2300,sr
000039CE 7003                       		moveq	#3,d0
000039D0 6100 E75A                  		bsr.w	PalLoad2	; load Sonic's pallet line
000039D4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000039DA 6600                       		bne.s	Level_GetBgm	; if not, branch
000039DC 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
000039DE 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
000039E4 6600                       		bne.s	Level_WaterPal	; if not, branch
000039E6 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
000039E8                            
000039E8                            Level_WaterPal:
000039E8 6100 E75A                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
000039EC 4A38 FE30                  		tst.b	($FFFFFE30).w
000039F0 6700                       		beq.s	Level_GetBgm
000039F2 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000039F8                            
000039F8                            Level_GetBgm:
000039F8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000039FC 6B00                       		bmi.s	loc_3946
000039FE 7000                       		moveq	#0,d0
00003A00 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003A04 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3?
00003A0A 6600                       		bne.s	Level_BgmNotLZ4	; if not, branch
00003A0C 7005                       		moveq	#5,d0		; move 5 to d0
00003A0E                            
00003A0E                            Level_BgmNotLZ4:
00003A0E 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00003A14 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003A16 7006                       		moveq	#6,d0		; move 6 to d0
00003A18                            
00003A18                            Level_PlayBgm:
00003A18                            ;		lea	(MusicList).l,a1 ; load	music playlist
00003A18                            ;		move.b	(a1,d0.w),d0	; add d0 to a1
00003A18                            ;		bsr.w	PlaySound	; play music
00003A18 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003A1E                            
00003A1E                            Level_TtlCard:
00003A1E 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003A24 6100 EF9E                  		bsr.w	DelayProgram
00003A28 4EB9 0000 0000             		jsr	ObjectsLoad
00003A2E 4EB9 0000 0000             		jsr	BuildSprites
00003A34 6100 DA94                  		bsr.w	RunPLC_RAM
00003A38 3038 D108                  		move.w	($FFFFD108).w,d0
00003A3C B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003A40 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003A42 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003A46 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003A48 4EB9 0000 0000             		jsr	Hud_Base
00003A4E                            
00003A4E                            loc_3946:
00003A4E 7003                       		moveq	#3,d0
00003A50 6100 E6BE                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003A54 6100 0000                  		bsr.w	LevelSizeLoad
00003A58 6100 0000                  		bsr.w	DeformBgLayer
00003A5C 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003A62 6100 0000                  		bsr.w	LoadZoneTiles	; load level art			
00003A66 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003A6A 6100 0000                  		bsr.w	LoadTilesFromStart
00003A6E 4EB9 0000 0000             		jsr	FloorLog_Unk
00003A74 6100 0000                  		bsr.w	ColIndexLoad
00003A78 6100 0000                  		bsr.w	LZWaterEffects
00003A7C 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003A82 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003A86 6B00                       		bmi.s	Level_ChkDebug
00003A88 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003A8E 11FC 0001 FFD0                     move.b    #1,($FFFFFFD0).w
00003A94                            		
00003A94                            Level_ChkDebug:
00003A94 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003A98 6700                       		beq.s	Level_ChkWater	; if not, branch
00003A9A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003AA0 6700                       		beq.s	Level_ChkWater	; if not, branch
00003AA2 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003AA8                            
00003AA8                            Level_ChkWater:
00003AA8 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003AAE 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003AB4 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
00003ABA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003AC0 6600                       		bne.s	Level_LoadObj	; if not, branch
00003AC2 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003AC8 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003ACE 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003AD4 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003ADA                            
00003ADA                            Level_LoadObj:
00003ADA 4EB9 0000 0000             		jsr	ObjPosLoad
00003AE0 11FC 0000 870C             		move.b	#0,(Rings_manager_routine).w
00003AE6 4EB9 0000 0000             		jsr	RingsManager				
00003AEC 4EB9 0000 0000             		jsr	ObjectsLoad
00003AF2 4EB9 0000 0000             		jsr	BuildSprites
00003AF8 7000                       		moveq	#0,d0
00003AFA 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003AFE 6600                       		bne.s	loc_39E8	; if yes, branch
00003B00 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003B04 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003B08 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003B0C                            
00003B0C                            loc_39E8:
00003B0C 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003B10 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003B14 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003B18 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003B1C 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00003B20 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003B24 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003B28 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003B2C 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
00003B30 6100 0000                  		bsr.w	OscillateNumInit
00003B34 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003B3A 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003B40 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003B46 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003B4C 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003B52 7000                       		moveq	#0,d0
00003B54 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003B58 E548                       		lsl.w	#2,d0
00003B5A 2271 0000                  		movea.l	(a1,d0.w),a1
00003B5E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003B62 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003B64 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003B6A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003B6E 5340                       		subq.w	#1,d0
00003B70 E548                       		lsl.w	#2,d0
00003B72 2271 0000                  		movea.l	(a1,d0.w),a1
00003B76                            
00003B76                            Level_Demo:
00003B76 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003B7C 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003B80 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003B86 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003B8A 6A00                       		bpl.s	Level_ChkWaterPal
00003B8C 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003B92 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003B98 6600                       		bne.s	Level_ChkWaterPal
00003B9A 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003BA0                            
00003BA0                            Level_ChkWaterPal:
00003BA0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003BA6 6600                       		bne.s	Level_Delay	; if not, branch
00003BA8 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003BAA 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003BB0 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003BB2 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003BB4                            
00003BB4                            Level_WaterPal2:
00003BB4 6100 E5AA                  		bsr.w	PalLoad4_Water
00003BB8                            
00003BB8                            Level_Delay:
00003BB8 323C 0003                  		move.w	#3,d1
00003BBC                            
00003BBC                            Level_DelayLoop:
00003BBC 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003BC2 6100 EE00                  		bsr.w	DelayProgram
00003BC6 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003BCA                            
00003BCA 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003BD0 6100 E23C                  		bsr.w	Pal_FadeTo2
00003BD4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003BD8 6B00                       		bmi.s	Level_ClrCardArt
00003BDA 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003BDE 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003BE2 5838 D124                  		addq.b	#4,($FFFFD124).w
00003BE6 5838 D164                  		addq.b	#4,($FFFFD164).w
00003BEA 6000                       		bra.s	Level_StartGame
00003BEC                            ; ===========================================================================
00003BEC                            
00003BEC                            Level_ClrCardArt:
00003BEC 7002                       		moveq	#2,d0
00003BEE 4EB9 0000 145E             		jsr	(LoadPLC).l	; load explosion patterns
00003BF4 7000                       		moveq	#0,d0
00003BF6 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003BFA 0640 0015                  		addi.w	#$15,d0
00003BFE 4EB9 0000 145E             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003C04                            
00003C04                            Level_StartGame:
00003C04 11FC 0001 870D             		move.b	#1,(Level_started_flag).w
00003C0A 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003C10                            
00003C10                            ; ---------------------------------------------------------------------------
00003C10                            ; Main level loop (when	all title card and loading sequences are finished)
00003C10                            ; ---------------------------------------------------------------------------
00003C10                            
00003C10                            Level_MainLoop:
00003C10 6100 D61A                  		bsr.w	PauseGame
00003C14 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003C1A 6100 EDA8                  		bsr.w	DelayProgram
00003C1E 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003C22 6100 0000                  		bsr.w	MoveSonicInDemo
00003C26 6100 0000                  		bsr.w	LZWaterEffects
00003C2A 4EB9 0000 0000             		jsr	ObjectsLoad
00003C30 4A78 FE08                  		tst.w	($FFFFFE08).w
00003C34 6600                       		bne.s	loc_3B10
00003C36 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003C3C 6400                       		bcc.s	loc_3B14
00003C3E                            
00003C3E                            loc_3B10:
00003C3E 6100 0000                  		bsr.w	DeformBgLayer
00003C42                            
00003C42                            loc_3B14:
00003C42 4EB9 0000 0000             		jsr	BuildSprites
00003C48 4EB9 0000 0000             		jsr	ObjPosLoad
00003C4E 4EB9 0000 0000             		jsr	RingsManager
00003C54 6100 DD42                  		bsr.w	PalCycle_Load
00003C58 6100 D870                  		bsr.w	RunPLC_RAM
00003C5C 6100 0000                  		bsr.w	OscillateNumDo
00003C60 6100 0000                  		bsr.w	ChangeRingFrame
00003C64 6100 0000                  		bsr.w	SignpostArtLoad
00003C68 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003C6E 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003C70 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003C74 6600 FC36                  		bne.w	Level		; if yes, branch
00003C78 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003C7E 6700 FF90                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003C82 4E75                       		rts	
00003C84                            ; ===========================================================================
00003C84                            
00003C84                            Level_ChkDemo:				; XREF: Level_MainLoop
00003C84 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003C88 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003C8A 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003C8E 6700                       		beq.s	Level_EndDemo	; if not, branch
00003C90 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003C96 6700 FF78                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003C9A 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00003CA0 4E75                       		rts	
00003CA2                            ; ===========================================================================
00003CA2                            
00003CA2                            Level_EndDemo:				; XREF: Level_ChkDemo
00003CA2 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003CA8 6600                       		bne.s	loc_3B88	; if not, branch
00003CAA 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00003CB0 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003CB4 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003CB6 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003CBC                            
00003CBC                            loc_3B88:
00003CBC 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003CC2 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003CC8 4278 F794                  		clr.w	($FFFFF794).w
00003CCC                            
00003CCC                            loc_3B98:
00003CCC 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003CD2 6100 ECF0                  		bsr.w	DelayProgram
00003CD6 6100 0000                  		bsr.w	MoveSonicInDemo
00003CDA 4EB9 0000 0000             		jsr	ObjectsLoad
00003CE0 4EB9 0000 0000             		jsr	BuildSprites
00003CE6 4EB9 0000 0000             		jsr	ObjPosLoad
00003CEC 5378 F794                  		subq.w	#1,($FFFFF794).w
00003CF0 6A00                       		bpl.s	loc_3BC8
00003CF2 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003CF8 6100 E1B0                  		bsr.w	Pal_FadeOut
00003CFC                            
00003CFC                            loc_3BC8:
00003CFC 4A78 F614                  		tst.w	($FFFFF614).w
00003D00 66CA                       		bne.s	loc_3B98
00003D02 4E75                       		rts	
00003D04                            ; ===========================================================================
00003D04                            ; ---------------------------------------------------------------------------
00003D04                            ; Subroutine to	do special water effects in Labyrinth Zone
00003D04                            ; ---------------------------------------------------------------------------
00003D04                            
00003D04                            LZWaterEffects:				; XREF: Level
00003D04 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003D0A 6600                       		bne.s	locret_3C28	; if not, branch
00003D0C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003D12 6400                       		bcc.s	LZMoveWater
00003D14 6100 0000                  		bsr.w	LZWindTunnels
00003D18 6100 0000                  		bsr.w	LZWaterSlides
00003D1C 6100 0000                  		bsr.w	LZDynamicWater
00003D20                            
00003D20                            LZMoveWater:
00003D20 4238 F64E                  		clr.b	($FFFFF64E).w
00003D24 7000                       		moveq	#0,d0
00003D26 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003D2A E248                       		lsr.w	#1,d0
00003D2C D078 F648                  		add.w	($FFFFF648).w,d0
00003D30 31C0 F646                  		move.w	d0,($FFFFF646).w
00003D34 3038 F646                  		move.w	($FFFFF646).w,d0
00003D38 9078 F704                  		sub.w	($FFFFF704).w,d0
00003D3C 6400                       		bcc.s	loc_3C1A
00003D3E 4A40                       		tst.w	d0
00003D40 6A00                       		bpl.s	loc_3C1A
00003D42 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003D48 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003D4E                            
00003D4E                            loc_3C1A:
00003D4E 0C40 00DF                  		cmpi.w	#$DF,d0
00003D52 6500                       		bcs.s	loc_3C24
00003D54 303C 00DF                  		move.w	#$DF,d0
00003D58                            
00003D58                            loc_3C24:
00003D58 11C0 F625                  		move.b	d0,($FFFFF625).w
00003D5C                            
00003D5C                            locret_3C28:
00003D5C 4E75                       		rts	
00003D5E                            ; ===========================================================================
00003D5E                            ; ---------------------------------------------------------------------------
00003D5E                            ; Labyrinth default water heights
00003D5E                            ; ---------------------------------------------------------------------------
00003D5E                            WaterHeight:	incbin	misc\lz_heigh.bin
00003D66                            		even
00003D66                            ; ===========================================================================
00003D66                            
00003D66                            ; ---------------------------------------------------------------------------
00003D66                            ; Labyrinth dynamic water routines
00003D66                            ; ---------------------------------------------------------------------------
00003D66                            
00003D66                            LZDynamicWater:				; XREF: LZWaterEffects
00003D66 7000                       		moveq	#0,d0
00003D68 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003D6C D040                       		add.w	d0,d0
00003D6E 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003D72 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003D76 7200                       		moveq	#0,d1
00003D78 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003D7C 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003D80 9078 F648                  		sub.w	($FFFFF648).w,d0
00003D84 6700                       		beq.s	locret_3C5A
00003D86 6400                       		bcc.s	loc_3C56
00003D88 4441                       		neg.w	d1
00003D8A                            
00003D8A                            loc_3C56:
00003D8A D378 F648                  		add.w	d1,($FFFFF648).w
00003D8E                            
00003D8E                            locret_3C5A:
00003D8E 4E75                       		rts	
00003D90                            ; ===========================================================================
00003D90 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003D92 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003D94 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003D96 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003D98                            ; ===========================================================================
00003D98                            
00003D98                            DynWater_LZ1:				; XREF: DynWater_Index
00003D98 3038 F700                  		move.w	($FFFFF700).w,d0
00003D9C 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003DA0 6600                       		bne.s	loc_3CD0
00003DA2 323C 00B8                  		move.w	#$B8,d1
00003DA6 0C40 0600                  		cmpi.w	#$600,d0
00003DAA 6500                       		bcs.s	loc_3CB4
00003DAC 323C 0108                  		move.w	#$108,d1
00003DB0 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003DB6 6500                       		bcs.s	loc_3CBA
00003DB8 0C40 0C00                  		cmpi.w	#$C00,d0
00003DBC 6500                       		bcs.s	loc_3CB4
00003DBE 323C 0318                  		move.w	#$318,d1
00003DC2 0C40 1080                  		cmpi.w	#$1080,d0
00003DC6 6500                       		bcs.s	loc_3CB4
00003DC8 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003DCE 323C 05C8                  		move.w	#$5C8,d1
00003DD2 0C40 1380                  		cmpi.w	#$1380,d0
00003DD6 6500                       		bcs.s	loc_3CB4
00003DD8 323C 03A8                  		move.w	#$3A8,d1
00003DDC B278 F648                  		cmp.w	($FFFFF648).w,d1
00003DE0 6600                       		bne.s	loc_3CB4
00003DE2 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003DE8                            
00003DE8                            loc_3CB4:
00003DE8 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DEC 4E75                       		rts	
00003DEE                            ; ===========================================================================
00003DEE                            
00003DEE                            loc_3CBA:				; XREF: DynWater_LZ1
00003DEE 0C40 0C80                  		cmpi.w	#$C80,d0
00003DF2 65F4                       		bcs.s	loc_3CB4
00003DF4 323C 00E8                  		move.w	#$E8,d1
00003DF8 0C40 1500                  		cmpi.w	#$1500,d0
00003DFC 65EA                       		bcs.s	loc_3CB4
00003DFE 323C 0108                  		move.w	#$108,d1
00003E02 60E4                       		bra.s	loc_3CB4
00003E04                            ; ===========================================================================
00003E04                            
00003E04                            loc_3CD0:				; XREF: DynWater_LZ1
00003E04 5302                       		subq.b	#1,d2
00003E06 6600                       		bne.s	locret_3CF4
00003E08 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00003E0E 6400                       		bcc.s	locret_3CF4
00003E10 323C 03A8                  		move.w	#$3A8,d1
00003E14 0C40 1300                  		cmpi.w	#$1300,d0
00003E18 6500                       		bcs.s	loc_3CF0
00003E1A 323C 0108                  		move.w	#$108,d1
00003E1E 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003E24                            
00003E24                            loc_3CF0:
00003E24 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E28                            
00003E28                            locret_3CF4:
00003E28 4E75                       		rts	
00003E2A                            ; ===========================================================================
00003E2A                            
00003E2A                            DynWater_LZ2:				; XREF: DynWater_Index
00003E2A 3038 F700                  		move.w	($FFFFF700).w,d0
00003E2E 323C 0328                  		move.w	#$328,d1
00003E32 0C40 0500                  		cmpi.w	#$500,d0
00003E36 6500                       		bcs.s	loc_3D12
00003E38 323C 03C8                  		move.w	#$3C8,d1
00003E3C 0C40 0B00                  		cmpi.w	#$B00,d0
00003E40 6500                       		bcs.s	loc_3D12
00003E42 323C 0428                  		move.w	#$428,d1
00003E46                            
00003E46                            loc_3D12:
00003E46 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E4A 4E75                       		rts	
00003E4C                            ; ===========================================================================
00003E4C                            
00003E4C                            DynWater_LZ3:				; XREF: DynWater_Index
00003E4C 3038 F700                  		move.w	($FFFFF700).w,d0
00003E50 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003E54 6600                       		bne.s	loc_3D5E
00003E56 323C 0900                  		move.w	#$900,d1
00003E5A 0C40 0600                  		cmpi.w	#$600,d0
00003E5E 6500                       		bcs.s	loc_3D54
00003E60 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00003E66 6500                       		bcs.s	loc_3D54
00003E68 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003E6E 6400                       		bcc.s	loc_3D54
00003E70 323C 04C8                  		move.w	#$4C8,d1
00003E74 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00003E7A 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003E80 303C 00B7                  		move.w	#$B7,d0
00003E84 6100 D39A                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00003E88                            
00003E88                            loc_3D54:
00003E88 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E8C 31C1 F648                  		move.w	d1,($FFFFF648).w
00003E90 4E75                       		rts	
00003E92                            ; ===========================================================================
00003E92                            
00003E92                            loc_3D5E:				; XREF: DynWater_LZ3
00003E92 5302                       		subq.b	#1,d2
00003E94 6600                       		bne.s	loc_3DA8
00003E96 323C 04C8                  		move.w	#$4C8,d1
00003E9A 0C40 0770                  		cmpi.w	#$770,d0
00003E9E 6500                       		bcs.s	loc_3DA2
00003EA0 323C 0308                  		move.w	#$308,d1
00003EA4 0C40 1400                  		cmpi.w	#$1400,d0
00003EA8 6500                       		bcs.s	loc_3DA2
00003EAA 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00003EB0 6700                       		beq.s	loc_3D8E
00003EB2 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003EB8 6400                       		bcc.s	loc_3D8E
00003EBA 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00003EC0 6400                       		bcc.s	loc_3DA2
00003EC2                            
00003EC2                            loc_3D8E:
00003EC2 323C 0508                  		move.w	#$508,d1
00003EC6 31C1 F648                  		move.w	d1,($FFFFF648).w
00003ECA 0C40 1770                  		cmpi.w	#$1770,d0
00003ECE 6500                       		bcs.s	loc_3DA2
00003ED0 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003ED6                            
00003ED6                            loc_3DA2:
00003ED6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003EDA 4E75                       		rts	
00003EDC                            ; ===========================================================================
00003EDC                            
00003EDC                            loc_3DA8:
00003EDC 5302                       		subq.b	#1,d2
00003EDE 6600                       		bne.s	loc_3DD2
00003EE0 323C 0508                  		move.w	#$508,d1
00003EE4 0C40 1860                  		cmpi.w	#$1860,d0
00003EE8 6500                       		bcs.s	loc_3DCC
00003EEA 323C 0188                  		move.w	#$188,d1
00003EEE 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003EF2 6400                       		bcc.s	loc_3DC6
00003EF4 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003EF8 6600                       		bne.s	loc_3DCC
00003EFA                            
00003EFA                            loc_3DC6:
00003EFA 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00003F00                            
00003F00                            loc_3DCC:
00003F00 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003F04 4E75                       		rts	
00003F06                            ; ===========================================================================
00003F06                            
00003F06                            loc_3DD2:
00003F06 5302                       		subq.b	#1,d2
00003F08 6600                       		bne.s	loc_3E0E
00003F0A 323C 0188                  		move.w	#$188,d1
00003F0E 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003F12 6500                       		bcs.s	loc_3E04
00003F14 323C 0900                  		move.w	#$900,d1
00003F18 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00003F1C 6500                       		bcs.s	loc_3E04
00003F1E 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00003F24 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00003F2A 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00003F30 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00003F36 4E75                       		rts	
00003F38                            ; ===========================================================================
00003F38                            
00003F38                            loc_3E04:
00003F38 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003F3C 31C1 F648                  		move.w	d1,($FFFFF648).w
00003F40 4E75                       		rts	
00003F42                            ; ===========================================================================
00003F42                            
00003F42                            loc_3E0E:
00003F42 0C40 1E00                  		cmpi.w	#$1E00,d0
00003F46 6500                       		bcs.s	locret_3E1A
00003F48 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00003F4E                            
00003F4E                            locret_3E1A:
00003F4E 4E75                       		rts	
00003F50                            ; ===========================================================================
00003F50                            
00003F50                            DynWater_SBZ3:				; XREF: DynWater_Index
00003F50 323C 0228                  		move.w	#$228,d1
00003F54 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00003F5A 6500                       		bcs.s	loc_3E2C
00003F5C 323C 04C8                  		move.w	#$4C8,d1
00003F60                            
00003F60                            loc_3E2C:
00003F60 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003F64 4E75                       		rts
00003F66                            
00003F66                            ; ---------------------------------------------------------------------------
00003F66                            ; Labyrinth Zone "wind tunnels"	subroutine
00003F66                            ; ---------------------------------------------------------------------------
00003F66                            
00003F66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F66                            
00003F66                            
00003F66                            LZWindTunnels:				; XREF: LZWaterEffects
00003F66 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00003F6A 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00003F6E 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00003F74 7000                       		moveq	#0,d0
00003F76 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003F7A E748                       		lsl.w	#3,d0
00003F7C D4C0                       		adda.w	d0,a2
00003F7E 7200                       		moveq	#0,d1
00003F80 4A38 FE11                  		tst.b	($FFFFFE11).w
00003F84 6600                       		bne.s	loc_3E56
00003F86 7201                       		moveq	#1,d1
00003F88 514A                       		subq.w	#8,a2
00003F8A                            
00003F8A                            loc_3E56:
00003F8A 43F8 D000                  		lea	($FFFFD000).w,a1
00003F8E                            
00003F8E                            LZWind_Loop:
00003F8E 3029 0008                  		move.w	8(a1),d0
00003F92 B052                       		cmp.w	(a2),d0
00003F94 6500 0000                  		bcs.w	loc_3EF4
00003F98 B06A 0004                  		cmp.w	4(a2),d0
00003F9C 6400 0000                  		bcc.w	loc_3EF4
00003FA0 3429 000C                  		move.w	$C(a1),d2
00003FA4 B46A 0002                  		cmp.w	2(a2),d2
00003FA8 6500                       		bcs.s	loc_3EF4
00003FAA B46A 0006                  		cmp.w	6(a2),d2
00003FAE 6400                       		bcc.s	loc_3EF4
00003FB0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003FB4 0200 003F                  		andi.b	#$3F,d0
00003FB8 6600                       		bne.s	loc_3E90
00003FBA 303C 00D0                  		move.w	#$D0,d0
00003FBE 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play rushing water sound
00003FC4                            
00003FC4                            loc_3E90:
00003FC4 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00003FC8 6600 0000                  		bne.w	locret_3F0A
00003FCC 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00003FD2 6400                       		bcc.s	loc_3F06
00003FD4 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00003FDA 0440 0080                  		subi.w	#$80,d0
00003FDE B052                       		cmp.w	(a2),d0
00003FE0 6400                       		bcc.s	LZWind_Move
00003FE2 7002                       		moveq	#2,d0
00003FE4 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00003FEA 6600                       		bne.s	loc_3EBA
00003FEC 4440                       		neg.w	d0
00003FEE                            
00003FEE                            loc_3EBA:
00003FEE D169 000C                  		add.w	d0,$C(a1)
00003FF2                            
00003FF2                            LZWind_Move:
00003FF2 5869 0008                  		addq.w	#4,8(a1)
00003FF6 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00003FFC 337C 0000 0012             		move.w	#0,$12(a1)
00004002 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004008 08E9 0001 0022             		bset	#1,$22(a1)
0000400E 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004014 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004016 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0000401A                            
0000401A                            LZWind_MoveDown:
0000401A 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004020 6700                       		beq.s	locret_3EF2	; if not, branch
00004022 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004026                            
00004026                            locret_3EF2:
00004026 4E75                       		rts	
00004028                            ; ===========================================================================
00004028                            
00004028                            loc_3EF4:				; XREF: LZWindTunnels
00004028 504A                       		addq.w	#8,a2
0000402A 51C9 FF62                  		dbf	d1,LZWind_Loop
0000402E 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004032 6700                       		beq.s	locret_3F0A
00004034 137C 0000 001C             		move.b	#0,$1C(a1)
0000403A                            
0000403A                            loc_3F06:
0000403A 4238 F7C7                  		clr.b	($FFFFF7C7).w
0000403E                            
0000403E                            locret_3F0A:
0000403E 4E75                       		rts	
00004040                            ; End of function LZWindTunnels
00004040                            
00004040                            ; ===========================================================================
00004040 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004048 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
0000405A 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004068                            					; XREF: LZWindTunnels
00004068                            		even
00004068                            
00004068                            ; ---------------------------------------------------------------------------
00004068                            ; Labyrinth Zone water slide subroutine
00004068                            ; ---------------------------------------------------------------------------
00004068                            
00004068                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004068                            
00004068                            
00004068                            LZWaterSlides:				; XREF: LZWaterEffects
00004068 43F8 D000                  		lea	($FFFFD000).w,a1
0000406C 0829 0001 0022             		btst	#1,$22(a1)
00004072 6600                       		bne.s	loc_3F6A
00004074 3029 000C                  		move.w	$C(a1),d0
00004078 E248                       		lsr.w	#1,d0
0000407A 0240 0380                  		andi.w	#$380,d0
0000407E 1229 0008                  		move.b	8(a1),d1
00004082 0241 007F                  		andi.w	#$7F,d1
00004086 D041                       		add.w	d1,d0
00004088 45F8 A400                  		lea	($FFFFA400).w,a2
0000408C 1032 0000                  		move.b	(a2,d0.w),d0
00004090 45FA 0000                  		lea	byte_3FCF(pc),a2
00004094 7206                       		moveq	#6,d1
00004096                            
00004096                            loc_3F62:
00004096 B022                       		cmp.b	-(a2),d0
00004098 57C9 FFFC                  		dbeq	d1,loc_3F62
0000409C 6700                       		beq.s	LZSlide_Move
0000409E                            
0000409E                            loc_3F6A:
0000409E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000040A2 6700                       		beq.s	locret_3F7A
000040A4 337C 0005 003E             		move.w	#5,$3E(a1)
000040AA 4238 F7CA                  		clr.b	($FFFFF7CA).w
000040AE                            
000040AE                            locret_3F7A:
000040AE 4E75                       		rts	
000040B0                            ; ===========================================================================
000040B0                            
000040B0                            LZSlide_Move:				; XREF: LZWaterSlides
000040B0 0C41 0003                  		cmpi.w	#3,d1
000040B4 6400                       		bcc.s	loc_3F84
000040B6 4E71                       		nop	
000040B8                            
000040B8                            loc_3F84:
000040B8 08A9 0000 0022             		bclr	#0,$22(a1)
000040BE 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000040C2 1340 0020                  		move.b	d0,$20(a1)
000040C6 6A00                       		bpl.s	loc_3F9A
000040C8 08E9 0000 0022             		bset	#0,$22(a1)
000040CE                            
000040CE                            loc_3F9A:
000040CE 4229 0021                  		clr.b	$21(a1)
000040D2 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000040D8 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000040DE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000040E2 0200 001F                  		andi.b	#$1F,d0
000040E6 6600                       		bne.s	locret_3FBE
000040E8 303C 00D0                  		move.w	#$D0,d0
000040EC 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play water sound
000040F2                            
000040F2                            locret_3FBE:
000040F2 4E75                       		rts	
000040F4                            ; End of function LZWaterSlides
000040F4                            
000040F4                            ; ===========================================================================
000040F4 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004103 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004104                            		even
00004104                            
00004104                            ; ---------------------------------------------------------------------------
00004104                            ; Subroutine to	move Sonic in demo mode
00004104                            ; ---------------------------------------------------------------------------
00004104                            
00004104                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004104                            
00004104                            
00004104                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004104 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004108 6600                       		bne.s	MoveDemo_On	; if yes, branch
0000410A 4E75                       		rts	
0000410C                            ; ===========================================================================
0000410C                            
0000410C                            ; This is an unused subroutine for recording a demo
0000410C                            
0000410C                            MoveDemo_Record:
0000410C 43F9 0008 0000             		lea	($80000).l,a1
00004112 3038 F790                  		move.w	($FFFFF790).w,d0
00004116 D2C0                       		adda.w	d0,a1
00004118 1038 F604                  		move.b	($FFFFF604).w,d0
0000411C B011                       		cmp.b	(a1),d0
0000411E 6600                       		bne.s	loc_3FFA
00004120 5229 0001                  		addq.b	#1,1(a1)
00004124 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
0000412A 6700                       		beq.s	loc_3FFA
0000412C 4E75                       		rts	
0000412E                            ; ===========================================================================
0000412E                            
0000412E                            loc_3FFA:				; XREF: MoveDemo_Record
0000412E 1340 0002                  		move.b	d0,2(a1)
00004132 137C 0000 0003             		move.b	#0,3(a1)
00004138 5478 F790                  		addq.w	#2,($FFFFF790).w
0000413C 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004142 4E75                       		rts	
00004144                            ; ===========================================================================
00004144                            
00004144                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004144 4A38 F604                  		tst.b	($FFFFF604).w
00004148 6A00                       		bpl.s	loc_4022
0000414A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000414E 6B00                       		bmi.s	loc_4022
00004150 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004156                            
00004156                            loc_4022:
00004156 43F9 0000 0000             		lea	(Demo_Index).l,a1
0000415C 7000                       		moveq	#0,d0
0000415E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004162 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004168 6600                       		bne.s	loc_4038
0000416A 7006                       		moveq	#6,d0
0000416C                            
0000416C                            loc_4038:
0000416C E548                       		lsl.w	#2,d0
0000416E 2271 0000                  		movea.l	(a1,d0.w),a1
00004172 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004176 6A00                       		bpl.s	loc_4056
00004178 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
0000417E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004182 5340                       		subq.w	#1,d0
00004184 E548                       		lsl.w	#2,d0
00004186 2271 0000                  		movea.l	(a1,d0.w),a1
0000418A                            
0000418A                            loc_4056:
0000418A 3038 F790                  		move.w	($FFFFF790).w,d0
0000418E D2C0                       		adda.w	d0,a1
00004190 1011                       		move.b	(a1),d0
00004192 41F8 F604                  		lea	($FFFFF604).w,a0
00004196 1200                       		move.b	d0,d1
00004198 1428 FFFE                  		move.b	-2(a0),d2
0000419C B500                       		eor.b	d2,d0
0000419E 10C1                       		move.b	d1,(a0)+
000041A0 C001                       		and.b	d1,d0
000041A2 10C0                       		move.b	d0,(a0)+
000041A4 5338 F792                  		subq.b	#1,($FFFFF792).w
000041A8 6400                       		bcc.s	locret_407E
000041AA 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000041B0 5478 F790                  		addq.w	#2,($FFFFF790).w
000041B4                            
000041B4                            locret_407E:
000041B4 4E75                       		rts	
000041B6                            ; End of function MoveSonicInDemo
000041B6                            
000041B6                            ; ===========================================================================
000041B6                            ; ---------------------------------------------------------------------------
000041B6                            ; Demo sequence	pointers
000041B6                            ; ---------------------------------------------------------------------------
000041B6                            Demo_Index:
000041B6                            	include "_inc\Demo pointers for intro.asm"
000041B6                            ; ---------------------------------------------------------------------------
000041B6                            ; Demo sequence	pointers
000041B6                            ; ---------------------------------------------------------------------------
000041B6 0000 0000                  	dc.l Demo_GHZ
000041BA 0000 0000                  	dc.l Demo_GHZ
000041BE 0000 0000                  	dc.l Demo_MZ
000041C2 0000 0000                  	dc.l Demo_MZ
000041C6 0000 0000                  	dc.l Demo_SYZ
000041CA 0000 0000                  	dc.l Demo_SYZ
000041CE 0000 0000                  	dc.l Demo_SS
000041D2 0000 0000                  	dc.l Demo_SS
000041D2 0000 0000                  	dc.l Demo_SS
000041D6                            
000041D6                            Demo_EndIndex:
000041D6                            	include "_inc\Demo pointers for ending.asm"
000041D6                            ; ---------------------------------------------------------------------------
000041D6                            ; Demo (ending) sequence pointers
000041D6                            ; ---------------------------------------------------------------------------
000041D6 0000 0000                  	dc.l Demo_EndGHZ1
000041DA 0000 0000                  	dc.l Demo_EndMZ
000041DE 0000 0000                  	dc.l Demo_EndSYZ
000041E2 0000 0000                  	dc.l Demo_EndLZ
000041E6 0000 0000                  	dc.l Demo_EndSLZ
000041EA 0000 0000                  	dc.l Demo_EndSBZ1
000041EE 0000 0000                  	dc.l Demo_EndSBZ2
000041F2 0000 0000                  	dc.l Demo_EndGHZ2
000041F2 0000 0000                  	dc.l Demo_EndGHZ2
000041F6                            
000041F6 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004206 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004216 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004226                            		even
00004226                            
00004226                            ; ---------------------------------------------------------------------------
00004226                            ; Collision index loading subroutine
00004226                            ; ---------------------------------------------------------------------------
00004226                            
00004226                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004226                            
00004226                            
00004226                            ColIndexLoad:				; XREF: Level
00004226 7000                       		moveq	#0,d0
00004228 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000422C E548                       		lsl.w	#2,d0
0000422E 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004234 4E75                       		rts	
00004236                            ; End of function ColIndexLoad
00004236                            
00004236                            ; ===========================================================================
00004236                            ; ---------------------------------------------------------------------------
00004236                            ; Collision index pointers
00004236                            ; ---------------------------------------------------------------------------
00004236                            ColPointers:
00004236                            	include "_inc\Collision index pointers.asm"
00004236                            ; ---------------------------------------------------------------------------
00004236                            ; Collision index pointers
00004236                            ; ---------------------------------------------------------------------------
00004236 0000 0000                  	dc.l Col_GHZ
0000423A 0000 0000                  	dc.l Col_LZ
0000423E 0000 0000                  	dc.l Col_MZ
00004242 0000 0000                  	dc.l Col_SLZ
00004246 0000 0000                  	dc.l Col_SYZ
0000424A 0000 0000                  	dc.l Col_SBZ
0000424A 0000 0000                  	dc.l Col_SBZ
0000424E                            
0000424E                            ; ---------------------------------------------------------------------------
0000424E                            ; Oscillating number subroutine
0000424E                            ; ---------------------------------------------------------------------------
0000424E                            
0000424E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000424E                            
0000424E                            
0000424E                            OscillateNumInit:			; XREF: Level
0000424E 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004252 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004258 7220                       		moveq	#$20,d1
0000425A                            
0000425A                            Osc_Loop:
0000425A 32DA                       		move.w	(a2)+,(a1)+
0000425C 51C9 FFFC                  		dbf	d1,Osc_Loop
00004260 4E75                       		rts	
00004262                            ; End of function OscillateNumInit
00004262                            
00004262                            ; ===========================================================================
00004262 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004266 0000 0080                  		dc.w 0,	$80
0000426A 0000 0080                  		dc.w 0,	$80
0000426E 0000 0080                  		dc.w 0,	$80
00004272 0000 0080                  		dc.w 0,	$80
00004276 0000 0080                  		dc.w 0,	$80
0000427A 0000 0080                  		dc.w 0,	$80
0000427E 0000 0080                  		dc.w 0,	$80
00004282 0000 0080                  		dc.w 0,	$80
00004286 0000 50F0                  		dc.w 0,	$50F0
0000428A 011E 2080                  		dc.w $11E, $2080
0000428E 00B4 3080                  		dc.w $B4, $3080
00004292 010E 5080                  		dc.w $10E, $5080
00004296 01C2 7080                  		dc.w $1C2, $7080
0000429A 0276 0080                  		dc.w $276, $80
0000429E 0000 0080                  		dc.w 0,	$80
000042A2 0000                       		dc.w 0
000042A4                            		even
000042A4                            
000042A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000042A4                            
000042A4                            
000042A4                            OscillateNumDo:				; XREF: Level
000042A4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000042AA 6400                       		bcc.s	locret_41C4
000042AC 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000042B0 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000042B6 3619                       		move.w	(a1)+,d3
000042B8 720F                       		moveq	#$F,d1
000042BA                            
000042BA                            loc_4184:
000042BA 341A                       		move.w	(a2)+,d2
000042BC 381A                       		move.w	(a2)+,d4
000042BE 0303                       		btst	d1,d3
000042C0 6600                       		bne.s	loc_41A4
000042C2 3029 0002                  		move.w	2(a1),d0
000042C6 D042                       		add.w	d2,d0
000042C8 3340 0002                  		move.w	d0,2(a1)
000042CC D151                       		add.w	d0,0(a1)
000042CE B811                       		cmp.b	0(a1),d4
000042D0 6200                       		bhi.s	loc_41BA
000042D2 03C3                       		bset	d1,d3
000042D4 6000                       		bra.s	loc_41BA
000042D6                            ; ===========================================================================
000042D6                            
000042D6                            loc_41A4:				; XREF: OscillateNumDo
000042D6 3029 0002                  		move.w	2(a1),d0
000042DA 9042                       		sub.w	d2,d0
000042DC 3340 0002                  		move.w	d0,2(a1)
000042E0 D151                       		add.w	d0,0(a1)
000042E2 B811                       		cmp.b	0(a1),d4
000042E4 6300                       		bls.s	loc_41BA
000042E6 0383                       		bclr	d1,d3
000042E8                            
000042E8                            loc_41BA:
000042E8 5849                       		addq.w	#4,a1
000042EA 51C9 FFCE                  		dbf	d1,loc_4184
000042EE 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
000042F2                            
000042F2                            locret_41C4:
000042F2 4E75                       		rts	
000042F4                            ; End of function OscillateNumDo
000042F4                            
000042F4                            ; ===========================================================================
000042F4 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
000042F8 0002 0018                  		dc.w 2,	$18
000042FC 0002 0020                  		dc.w 2,	$20
00004300 0002 0030                  		dc.w 2,	$30
00004304 0004 0020                  		dc.w 4,	$20
00004308 0008 0008                  		dc.w 8,	8
0000430C 0008 0040                  		dc.w 8,	$40
00004310 0004 0040                  		dc.w 4,	$40
00004314 0002 0050                  		dc.w 2,	$50
00004318 0002 0050                  		dc.w 2,	$50
0000431C 0002 0020                  		dc.w 2,	$20
00004320 0003 0030                  		dc.w 3,	$30
00004324 0005 0050                  		dc.w 5,	$50
00004328 0007 0070                  		dc.w 7,	$70
0000432C 0002 0010                  		dc.w 2,	$10
00004330 0002 0010                  		dc.w 2,	$10
00004334                            		even
00004334                            
00004334                            ; ---------------------------------------------------------------------------
00004334                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004334                            ; ---------------------------------------------------------------------------
00004334                            
00004334                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004334                            
00004334                            
00004334                            ChangeRingFrame:			; XREF: Level
00004334 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004338 6A00                       		bpl.s	loc_421C
0000433A 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004340 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004344 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0000434A                            
0000434A                            loc_421C:
0000434A 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0000434E 6A00                       		bpl.s	loc_4232
00004350 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004356 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0000435A 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004360                            
00004360                            loc_4232:
00004360 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004364 6A00                       		bpl.s	loc_4250
00004366 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0000436C 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004370 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004376 6500                       		bcs.s	loc_4250
00004378 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
0000437E                            
0000437E                            loc_4250:
0000437E 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004382 6700                       		beq.s	locret_4272
00004384 7000                       		moveq	#0,d0
00004386 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
0000438A D078 FEC8                  		add.w	($FFFFFEC8).w,d0
0000438E 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004392 EF58                       		rol.w	#7,d0
00004394 0240 0003                  		andi.w	#3,d0
00004398 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
0000439C 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000043A0                            
000043A0                            locret_4272:
000043A0 4E75                       		rts	
000043A2                            ; End of function ChangeRingFrame
000043A2                            
000043A2                            ; ---------------------------------------------------------------------------
000043A2                            ; End-of-act signpost pattern loading subroutine
000043A2                            ; ---------------------------------------------------------------------------
000043A2                            
000043A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000043A2                            
000043A2                            
000043A2                            SignpostArtLoad:			; XREF: Level
000043A2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000043A6 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000043AA 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000043B0 6700                       		beq.s	Signpost_Exit	; if yes, branch
000043B2 3038 F700                  		move.w	($FFFFF700).w,d0
000043B6 3238 F72A                  		move.w	($FFFFF72A).w,d1
000043BA 0441 0100                  		subi.w	#$100,d1
000043BE B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000043C0 6D00                       		blt.s	Signpost_Exit	; if not, branch
000043C2 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000043C6 6700                       		beq.s	Signpost_Exit
000043C8 B278 F728                  		cmp.w	($FFFFF728).w,d1
000043CC 6700                       		beq.s	Signpost_Exit
000043CE 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000043D2 7012                       		moveq	#$12,d0
000043D4 6000 D0BA                  		bra.w	LoadPLC2	; load signpost	patterns
000043D8                            ; ===========================================================================
000043D8                            
000043D8                            Signpost_Exit:
000043D8 4E75                       		rts	
000043DA                            ; End of function SignpostArtLoad
000043DA                            
000043DA                            ; ===========================================================================
000043DA                            Demo_GHZ:	incbin	demodata\i_ghz.bin
0000445A                            Demo_MZ:	incbin	demodata\i_mz.bin
0000458A                            Demo_SYZ:	incbin	demodata\i_syz.bin
0000460A                            Demo_SS:	incbin	demodata\i_ss.bin
0000470A                            ; ===========================================================================
0000470A                            
0000470A                            ; ---------------------------------------------------------------------------
0000470A                            ; Special Stage
0000470A                            ; ---------------------------------------------------------------------------
0000470A                            
0000470A                            SpecialStage:				; XREF: GameModeArray
0000470A 303C 00CA                  		move.w	#$CA,d0
0000470E 6100 CB10                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004712 4EB9 0000 0000             		jsr	BuildSprites
00004718 6100 D876                  		bsr.w	Pal_MakeFlash
0000471C 46FC 2700                  		move	#$2700,sr
00004720 4DF9 00C0 0004             		lea	($C00004).l,a6
00004726 3CBC 8B03                  		move.w	#$8B03,(a6)
0000472A 3CBC 8004                  		move.w	#$8004,(a6)
0000472E 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004734 3CBC 9011                  		move.w	#$9011,(a6)
00004738 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000473C 0200 00BF                  		andi.b	#$BF,d0
00004740 33C0 00C0 0004             		move.w	d0,($C00004).l
00004746 6100 C9B2                  		bsr.w	ClearScreen
0000474A 46FC 2300                  		move	#$2300,sr
0000474E 4BF9 00C0 0004             		lea	($C00004).l,a5
00004754 3ABC 8F01                  		move.w	#$8F01,(a5)
00004758 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
0000475E 3ABC 9780                  		move.w	#$9780,(a5)
00004762 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004768 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004770                            
00004770                            loc_463C:
00004770 3215                       		move.w	(a5),d1
00004772 0801 0001                  		btst	#1,d1
00004776 66F8                       		bne.s	loc_463C
00004778 3ABC 8F02                  		move.w	#$8F02,(a5)
0000477C 6100 0000                  		bsr.w	SS_BGLoad
00004780 7014                       		moveq	#$14,d0
00004782 6100 CE46                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004786                            
00004786 43F8 D000                  		lea	($FFFFD000).w,a1
0000478A 7000                       		moveq	#0,d0
0000478C 323C 07FF                  		move.w	#$7FF,d1
00004790                            
00004790                            SS_ClrObjRam:
00004790 22C0                       		move.l	d0,(a1)+
00004792 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004796                            
00004796 43F8 F700                  		lea	($FFFFF700).w,a1
0000479A 7000                       		moveq	#0,d0
0000479C 323C 003F                  		move.w	#$3F,d1
000047A0                            
000047A0                            SS_ClrRam:
000047A0 22C0                       		move.l	d0,(a1)+
000047A2 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
000047A6                            
000047A6 43F8 FE60                  		lea	($FFFFFE60).w,a1
000047AA 7000                       		moveq	#0,d0
000047AC 323C 0027                  		move.w	#$27,d1
000047B0                            
000047B0                            SS_ClrRam2:
000047B0 22C0                       		move.l	d0,(a1)+
000047B2 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
000047B6                            
000047B6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000047BA 7000                       		moveq	#0,d0
000047BC 323C 007F                  		move.w	#$7F,d1
000047C0                            
000047C0                            SS_ClrNemRam:
000047C0 22C0                       		move.l	d0,(a1)+
000047C2 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000047C6 4238 F64E                  		clr.b	($FFFFF64E).w
000047CA 4278 FE02                  		clr.w	($FFFFFE02).w
000047CE 700A                       		moveq	#$A,d0
000047D0 6100 D93E                  		bsr.w	PalLoad1	; load special stage pallet
000047D4 4EB9 0000 0000             		jsr	SS_Load
000047DA 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
000047E0 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000047E8 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000047F0 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
000047F6 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w
000047FC 6100 0000                  		bsr.w	PalCycle_SS
00004800 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w		
00004804 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004808 11FC 00FF FFF9             		move.b	#$FF,(v_ssangleprev).w	; fill previous angle with obviously false value to force an update
0000480E 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004814 303C 0089                  		move.w	#$89,d0
00004818 6100 CA00                  		bsr.w	PlaySound	; play special stage BG	music
0000481C 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004822 43F9 0000 41B6             		lea	(Demo_Index).l,a1
00004828 7006                       		moveq	#6,d0
0000482A E548                       		lsl.w	#2,d0
0000482C 2271 0000                  		movea.l	(a1,d0.w),a1
00004830 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004836 5338 F792                  		subq.b	#1,($FFFFF792).w
0000483A 4278 FE20                  		clr.w	($FFFFFE20).w
0000483E 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004842 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004848 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000484E 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004852 6700                       		beq.s	SS_NoDebug	; if not, branch
00004854 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
0000485A 6700                       		beq.s	SS_NoDebug	; if not, branch
0000485C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004862                            
00004862                            SS_NoDebug:
00004862 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004866 0000 0040                  		ori.b	#$40,d0
0000486A 33C0 00C0 0004             		move.w	d0,($C00004).l
00004870 6100 D696                  		bsr.w	Pal_MakeWhite
00004874                            
00004874                            ; ---------------------------------------------------------------------------
00004874                            ; Main Special Stage loop
00004874                            ; ---------------------------------------------------------------------------
00004874                            
00004874                            SS_MainLoop:
00004874 6100 C9B6                  		bsr.w	PauseGame
00004878 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
0000487E 6100 E144                  		bsr.w	DelayProgram
00004882 6100 F880                  		bsr.w	MoveSonicInDemo
00004886 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
0000488C 4EB9 0000 0000             		jsr	ObjectsLoad
00004892 4EB9 0000 0000             		jsr	BuildSprites
00004898 4EB9 0000 0000             		jsr	SS_ShowLayout
0000489E 6100 0000                  		bsr.w	SS_BGAnimate
000048A2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000048A6 6700                       		beq.s	SS_ChkEnd	; if not, branch
000048A8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000048AC 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
000048B0                            
000048B0                            SS_ChkEnd:
000048B0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
000048B6 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
000048BA                            
000048BA 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000048BE 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
000048C2 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000048C8 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
000048CE 6500                       		bcs.s	SS_End		; if not, branch
000048D0 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
000048D4                            
000048D4                            SS_End:
000048D4 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
000048DA 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000048E0 4278 F794                  		clr.w	($FFFFF794).w
000048E4                            
000048E4                            SS_EndLoop:
000048E4 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000048EA 6100 E0D8                  		bsr.w	DelayProgram
000048EE 6100 F814                  		bsr.w	MoveSonicInDemo
000048F2 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000048F8 4EB9 0000 0000             		jsr	ObjectsLoad
000048FE 4EB9 0000 0000             		jsr	BuildSprites
00004904 4EB9 0000 0000             		jsr	SS_ShowLayout
0000490A 6100 0000                  		bsr.w	SS_BGAnimate
0000490E 5378 F794                  		subq.w	#1,($FFFFF794).w
00004912 6A00                       		bpl.s	loc_47D4
00004914 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000491A 6100 D694                  		bsr.w	Pal_ToWhite
0000491E                            
0000491E                            loc_47D4:
0000491E 4A78 F614                  		tst.w	($FFFFF614).w
00004922 66C0                       		bne.s	SS_EndLoop
00004924                            
00004924 46FC 2700                  		move	#$2700,sr
00004928 4DF9 00C0 0004             		lea	($C00004).l,a6
0000492E 3CBC 8230                  		move.w	#$8230,(a6)
00004932 3CBC 8407                  		move.w	#$8407,(a6)
00004936 3CBC 9001                  		move.w	#$9001,(a6)
0000493A 6100 C7BE                  		bsr.w	ClearScreen
0000493E 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
00004948 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
0000494E 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
00004954 4EB8 143A                          jsr LoadUncArt          ; load uncompressed art
00004958 4EB9 0000 0000             		jsr	Hud_Base
0000495E 46FC 2300                  		move	#$2300,sr
00004962 7011                       		moveq	#$11,d0
00004964 6100 D7C6                  		bsr.w	PalLoad2	; load results screen pallet
00004968 7000                       		moveq	#0,d0
0000496A 6100 CB24                  		bsr.w	LoadPLC2
0000496E 701B                       		moveq	#$1B,d0
00004970 6100 CAEC                  		bsr.w	LoadPLC		; load results screen patterns
00004974 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
0000497A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004980 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004984 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004988 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
0000498C 303C 008E                  		move.w	#$8E,d0
00004990 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004996 43F8 D000                  		lea	($FFFFD000).w,a1
0000499A 7000                       		moveq	#0,d0
0000499C 323C 07FF                  		move.w	#$7FF,d1
000049A0                            
000049A0                            SS_EndClrObjRam:
000049A0 22C0                       		move.l	d0,(a1)+
000049A2 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
000049A6                            
000049A6 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
000049AC                            
000049AC                            SS_NormalExit:
000049AC 6100 C87E                  		bsr.w	PauseGame
000049B0 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
000049B6 6100 E00C                  		bsr.w	DelayProgram
000049BA 4EB9 0000 0000             		jsr	ObjectsLoad
000049C0 4EB9 0000 0000             		jsr	BuildSprites
000049C6 6100 CB02                  		bsr.w	RunPLC_RAM
000049CA 4A78 FE02                  		tst.w	($FFFFFE02).w
000049CE 67DC                       		beq.s	SS_NormalExit
000049D0 4AB8 F680                  		tst.l	($FFFFF680).w
000049D4 66D6                       		bne.s	SS_NormalExit
000049D6 303C 00CA                  		move.w	#$CA,d0
000049DA 6100 C844                  		bsr.w	PlaySound_Special ; play special stage exit sound
000049DE 6100 D5B0                  		bsr.w	Pal_MakeFlash
000049E2 4E75                       		rts	
000049E4                            ; ===========================================================================
000049E4                            
000049E4                            SS_ToSegaScreen:
000049E4 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set screen mode to 00 (Sega screen)
000049EA 4E75                       		rts
000049EC                            
000049EC                            ; ---------------------------------------------------------------------------
000049EC                            ; Special stage	background loading subroutine
000049EC                            ; ---------------------------------------------------------------------------
000049EC                            
000049EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000049EC                            
000049EC                            
000049EC                            SS_BGLoad:				; XREF: SpecialStage
000049EC 43F9 00FF 0000             		lea	($FF0000).l,a1
000049F2 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000049F8 303C 4051                  		move.w	#$4051,d0
000049FC 6100 CBFE                  		bsr.w	EniDec
00004A00 263C 5000 0001             		move.l	#$50000001,d3
00004A06 45F9 00FF 0080             		lea	($FF0080).l,a2
00004A0C 7E06                       		moveq	#6,d7
00004A0E                            
00004A0E                            loc_48BE:
00004A0E 2003                       		move.l	d3,d0
00004A10 7C03                       		moveq	#3,d6
00004A12 7800                       		moveq	#0,d4
00004A14 0C47 0003                  		cmpi.w	#3,d7
00004A18 6400                       		bcc.s	loc_48CC
00004A1A 7801                       		moveq	#1,d4
00004A1C                            
00004A1C                            loc_48CC:
00004A1C 7A07                       		moveq	#7,d5
00004A1E                            
00004A1E                            loc_48CE:
00004A1E 224A                       		movea.l	a2,a1
00004A20 0A04 0001                  		eori.b	#1,d4
00004A24 6600                       		bne.s	loc_48E2
00004A26 0C47 0006                  		cmpi.w	#6,d7
00004A2A 6600                       		bne.s	loc_48F2
00004A2C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004A32                            
00004A32                            loc_48E2:
00004A32 48E7 F800                  		movem.l	d0-d4,-(sp)
00004A36 7207                       		moveq	#7,d1
00004A38 7407                       		moveq	#7,d2
00004A3A 6100 C8AC                  		bsr.w	ShowVDPGraphics
00004A3E 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004A42                            
00004A42                            loc_48F2:
00004A42 0680 0010 0000             		addi.l	#$100000,d0
00004A48 51CD FFD4                  		dbf	d5,loc_48CE
00004A4C 0680 0380 0000             		addi.l	#$3800000,d0
00004A52 0A04 0001                  		eori.b	#1,d4
00004A56 51CE FFC4                  		dbf	d6,loc_48CC
00004A5A 0683 1000 0000             		addi.l	#$10000000,d3
00004A60 6A00                       		bpl.s	loc_491C
00004A62 4843                       		swap	d3
00004A64 0683 0000 C000             		addi.l	#$C000,d3
00004A6A 4843                       		swap	d3
00004A6C                            
00004A6C                            loc_491C:
00004A6C D4FC 0080                  		adda.w	#$80,a2
00004A70 51CF FF9C                  		dbf	d7,loc_48BE
00004A74 43F9 00FF 0000             		lea	($FF0000).l,a1
00004A7A 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004A80 303C 4000                  		move.w	#$4000,d0
00004A84 6100 CB76                  		bsr.w	EniDec
00004A88 43F9 00FF 0000             		lea	($FF0000).l,a1
00004A8E 203C 4000 0003             		move.l	#$40000003,d0
00004A94 723F                       		moveq	#$3F,d1
00004A96 741F                       		moveq	#$1F,d2
00004A98 6100 C84E                  		bsr.w	ShowVDPGraphics
00004A9C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004AA2 203C 5000 0003             		move.l	#$50000003,d0
00004AA8 723F                       		moveq	#$3F,d1
00004AAA 743F                       		moveq	#$3F,d2
00004AAC 6100 C83A                  		bsr.w	ShowVDPGraphics
00004AB0 4E75                       		rts	
00004AB2                            ; End of function SS_BGLoad
00004AB2                            
00004AB2                            ; ---------------------------------------------------------------------------
00004AB2                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
00004AB2                            ; to be issued the next time ProcessDMAQueue is called.
00004AB2                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
00004AB2                            ; by issuing the commands (this subroutine DOES check for overflow)
00004AB2                            ; ---------------------------------------------------------------------------
00004AB2                            ; In case you wish to use this queue system outside of the spin dash, this is the
00004AB2                            ; registers in which it expects data in:
00004AB2                            ; d1.l: Address to data (In 68k address space)
00004AB2                            ; d2.w: Destination in VRAM
00004AB2                            ; d3.w: Length of data
00004AB2                            ; ---------------------------------------------------------------------------
00004AB2                            
00004AB2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00004AB2                            
00004AB2                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
00004AB2                            QueueDMATransfer:
00004AB2 2278 C8FC                  		movea.l ($FFFFC8FC).w,a1
00004AB6 B2FC C8FC                  		cmpa.w #$C8FC,a1
00004ABA 6700                       		beq.s QueueDMATransfer_Done ; return if there's no more room in the buffer
00004ABC                            
00004ABC                            ; piece together some VDP commands and store them for later...
00004ABC 303C 9300                  		move.w #$9300,d0 ; command to specify DMA transfer length & $00FF
00004AC0 1003                       		move.b d3,d0
00004AC2 32C0                       		move.w d0,(a1)+ ; store command
00004AC4                            
00004AC4 303C 9400                  		move.w #$9400,d0 ; command to specify DMA transfer length & $FF00
00004AC8 E04B                       		lsr.w #8,d3
00004ACA 1003                       		move.b d3,d0
00004ACC 32C0                       		move.w d0,(a1)+ ; store command
00004ACE                            
00004ACE 303C 9500                  		move.w #$9500,d0 ; command to specify source address & $0001FE
00004AD2 E289                       		lsr.l #1,d1
00004AD4 1001                       		move.b d1,d0
00004AD6 32C0                       		move.w d0,(a1)+ ; store command
00004AD8                            
00004AD8 303C 9600                  		move.w #$9600,d0 ; command to specify source address & $01FE00
00004ADC E089                       		lsr.l #8,d1
00004ADE 1001                       		move.b d1,d0
00004AE0 32C0                       		move.w d0,(a1)+ ; store command
00004AE2                            
00004AE2 303C 9700                  		move.w #$9700,d0 ; command to specify source address & $FE0000
00004AE6 E089                       		lsr.l #8,d1
00004AE8 1001                       		move.b d1,d0
00004AEA 32C0                       		move.w d0,(a1)+ ; store command
00004AEC                            
00004AEC 0282 0000 FFFF             		andi.l #$FFFF,d2 ; command to specify destination address and begin DMA
00004AF2 E58A                       		lsl.l #2,d2
00004AF4 E44A                       		lsr.w #2,d2
00004AF6 4842                       		swap d2
00004AF8 0082 4000 0080             		ori.l #$40000080,d2 ; set bits to specify VRAM transfer
00004AFE 22C2                       		move.l d2,(a1)+ ; store command
00004B00                            
00004B00 21C9 C8FC                  		move.l a1,($FFFFC8FC).w ; set the next free slot address
00004B04 B2FC C8FC                  		cmpa.w #$C8FC,a1
00004B08 6700                       		beq.s QueueDMATransfer_Done ; return if there's no more room in the buffer
00004B0A 32BC 0000                  		move.w #0,(a1) ; put a stop token at the end of the used part of the buffer
00004B0E                            ; return_14AA:
00004B0E                            QueueDMATransfer_Done:
00004B0E 4E75                       		rts
00004B10                            ; End of function QueueDMATransfer
00004B10                            
00004B10                            ; ---------------------------------------------------------------------------
00004B10                            ; Subroutine for issuing all VDP commands that were queued
00004B10                            ; (by earlier calls to QueueDMATransfer)
00004B10                            ; Resets the queue when it's done
00004B10                            ; ---------------------------------------------------------------------------
00004B10                            
00004B10                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00004B10                            
00004B10                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
00004B10                            ProcessDMAQueue:
00004B10 4BF9 00C0 0004             		lea ($C00004).l,a5
00004B16 43F8 C800                  		lea ($FFFFC800).w,a1
00004B1A                            ; loc_14B6:
00004B1A                            ProcessDMAQueue_Loop:
00004B1A 3019                       		move.w (a1)+,d0
00004B1C 6700                       		beq.s ProcessDMAQueue_Done ; branch if we reached a stop token
00004B1E                            		; issue a set of VDP commands...
00004B1E 3A80                       		move.w d0,(a5) ; transfer length
00004B20 3A99                       		move.w (a1)+,(a5) ; transfer length
00004B22 3A99                       		move.w (a1)+,(a5) ; source address
00004B24 3A99                       		move.w (a1)+,(a5) ; source address
00004B26 3A99                       		move.w (a1)+,(a5) ; source address
00004B28 3A99                       		move.w (a1)+,(a5) ; destination
00004B2A 3A99                       		move.w (a1)+,(a5) ; destination
00004B2C B2FC C8FC                  		cmpa.w #$C8FC,a1
00004B30 66E8                       		bne.s ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
00004B32                            ; loc_14CE:
00004B32                            ProcessDMAQueue_Done:
00004B32 31FC 0000 C800             		move.w #0,($FFFFC800).w
00004B38 21FC FFFF C800 C8FC        		move.l #$FFFFC800,($FFFFC8FC).w
00004B40 4E75                       		rts
00004B42                            ; End of function ProcessDMAQueue
00004B42                            
00004B42                            ; ---------------------------------------------------------------------------
00004B42                            ; Pallet cycling routine - special stage
00004B42                            ; ---------------------------------------------------------------------------
00004B42                            
00004B42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B42                            
00004B42                            
00004B42                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004B42 4A78 F63A                  		tst.w	($FFFFF63A).w
00004B46 6600                       		bne.s	locret_49E6
00004B48 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004B4C 6A00                       		bpl.s	locret_49E6
00004B4E 4DF9 00C0 0004             		lea	($C00004).l,a6
00004B54 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004B58 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004B5C 0240 001F                  		andi.w	#$1F,d0
00004B60 E548                       		lsl.w	#2,d0
00004B62 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004B68 D0C0                       		adda.w	d0,a0
00004B6A 1018                       		move.b	(a0)+,d0
00004B6C 6A00                       		bpl.s	loc_4992
00004B6E 303C 01FF                  		move.w	#$1FF,d0
00004B72                            
00004B72                            loc_4992:
00004B72 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004B76 7000                       		moveq	#0,d0
00004B78 1018                       		move.b	(a0)+,d0
00004B7A 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004B7E 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004B84 43F1 0000                  		lea	(a1,d0.w),a1
00004B88 303C 8200                  		move.w	#-$7E00,d0
00004B8C 1019                       		move.b	(a1)+,d0
00004B8E 3C80                       		move.w	d0,(a6)
00004B90 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004B94 303C 8400                  		move.w	#-$7C00,d0
00004B98 1018                       		move.b	(a0)+,d0
00004B9A 3C80                       		move.w	d0,(a6)
00004B9C 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004BA6 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004BAE 7000                       		moveq	#0,d0
00004BB0 1018                       		move.b	(a0)+,d0
00004BB2 6B00                       		bmi.s	loc_49E8
00004BB4 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004BBA D2C0                       		adda.w	d0,a1
00004BBC 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004BC0 24D9                       		move.l	(a1)+,(a2)+
00004BC2 24D9                       		move.l	(a1)+,(a2)+
00004BC4 24D9                       		move.l	(a1)+,(a2)+
00004BC6                            
00004BC6                            locret_49E6:
00004BC6 4E75                       		rts	
00004BC8                            ; ===========================================================================
00004BC8                            
00004BC8                            loc_49E8:				; XREF: PalCycle_SS
00004BC8 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004BCC 0C40 008A                  		cmpi.w	#$8A,d0
00004BD0 6500                       		bcs.s	loc_49F4
00004BD2 5241                       		addq.w	#1,d1
00004BD4                            
00004BD4                            loc_49F4:
00004BD4 C2FC 002A                  		mulu.w	#$2A,d1
00004BD8 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004BDE D2C1                       		adda.w	d1,a1
00004BE0 0240 007F                  		andi.w	#$7F,d0
00004BE4 0880 0000                  		bclr	#0,d0
00004BE8 6700                       		beq.s	loc_4A18
00004BEA 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004BEE 24D1                       		move.l	(a1),(a2)+
00004BF0 24E9 0004                  		move.l	4(a1),(a2)+
00004BF4 24E9 0008                  		move.l	8(a1),(a2)+
00004BF8                            
00004BF8                            loc_4A18:
00004BF8 D2FC 000C                  		adda.w	#$C,a1
00004BFC 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004C00 0C40 000A                  		cmpi.w	#$A,d0
00004C04 6500                       		bcs.s	loc_4A2E
00004C06 0440 000A                  		subi.w	#$A,d0
00004C0A 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004C0E                            
00004C0E                            loc_4A2E:
00004C0E 3200                       		move.w	d0,d1
00004C10 D040                       		add.w	d0,d0
00004C12 D041                       		add.w	d1,d0
00004C14 D2C0                       		adda.w	d0,a1
00004C16 24D9                       		move.l	(a1)+,(a2)+
00004C18 34D9                       		move.w	(a1)+,(a2)+
00004C1A 4E75                       		rts	
00004C1C                            ; End of function PalCycle_SS
00004C1C                            
00004C1C                            ; ===========================================================================
00004C1C 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004C2C                            					; XREF: PalCycle_SS
00004C2C 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004C3C 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004C4C FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004C5C 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004C6C 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004C7C 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004C8C FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004C9C                            		even
00004C9C 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004CAA                            					; XREF: PalCycle_SS
00004CAA                            		even
00004CAA                            
00004CAA                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004CF2                            		even
00004CF2                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004DC4                            		even
00004DC4                            
00004DC4                            ; ---------------------------------------------------------------------------
00004DC4                            ; Subroutine to	make the special stage background animated
00004DC4                            ; ---------------------------------------------------------------------------
00004DC4                            
00004DC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004DC4                            
00004DC4                            
00004DC4                            SS_BGAnimate:				; XREF: SpecialStage
00004DC4 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004DC8 6600                       		bne.s	loc_4BF6
00004DCA 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004DD0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004DD6                            
00004DD6                            loc_4BF6:
00004DD6 0C40 0008                  		cmpi.w	#8,d0
00004DDA 6400                       		bcc.s	loc_4C4E
00004DDC 0C40 0006                  		cmpi.w	#6,d0
00004DE0 6600                       		bne.s	loc_4C10
00004DE2 5278 F718                  		addq.w	#1,($FFFFF718).w
00004DE6 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004DEA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004DF0                            
00004DF0                            loc_4C10:
00004DF0 7000                       		moveq	#0,d0
00004DF2 3038 F708                  		move.w	($FFFFF708).w,d0
00004DF6 4440                       		neg.w	d0
00004DF8 4840                       		swap	d0
00004DFA 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004E00 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004E04 7609                       		moveq	#9,d3
00004E06                            
00004E06                            loc_4C26:
00004E06 302B 0002                  		move.w	2(a3),d0
00004E0A 6100 DBEA                  		bsr.w	CalcSine
00004E0E 7400                       		moveq	#0,d2
00004E10 1419                       		move.b	(a1)+,d2
00004E12 C1C2                       		muls.w	d2,d0
00004E14 E080                       		asr.l	#8,d0
00004E16 36C0                       		move.w	d0,(a3)+
00004E18 1419                       		move.b	(a1)+,d2
00004E1A 4882                       		ext.w	d2
00004E1C D55B                       		add.w	d2,(a3)+
00004E1E 51CB FFE6                  		dbf	d3,loc_4C26
00004E22 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004E26 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004E2C 6000                       		bra.s	loc_4C7E
00004E2E                            ; ===========================================================================
00004E2E                            
00004E2E                            loc_4C4E:				; XREF: SS_BGAnimate
00004E2E 0C40 000C                  		cmpi.w	#$C,d0
00004E32 6600                       		bne.s	loc_4C74
00004E34 5378 F718                  		subq.w	#1,($FFFFF718).w
00004E38 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004E3C 243C 0001 8000             		move.l	#$18000,d2
00004E42 7206                       		moveq	#6,d1
00004E44                            
00004E44                            loc_4C64:
00004E44 2013                       		move.l	(a3),d0
00004E46 9082                       		sub.l	d2,d0
00004E48 26C0                       		move.l	d0,(a3)+
00004E4A 0482 0000 2000             		subi.l	#$2000,d2
00004E50 51C9 FFF2                  		dbf	d1,loc_4C64
00004E54                            
00004E54                            loc_4C74:
00004E54 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004E58 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004E5E                            
00004E5E                            loc_4C7E:
00004E5E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004E62 3038 F718                  		move.w	($FFFFF718).w,d0
00004E66 4440                       		neg.w	d0
00004E68 4840                       		swap	d0
00004E6A 7600                       		moveq	#0,d3
00004E6C 161A                       		move.b	(a2)+,d3
00004E6E 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004E72 4442                       		neg.w	d2
00004E74 0242 00FF                  		andi.w	#$FF,d2
00004E78 E54A                       		lsl.w	#2,d2
00004E7A                            
00004E7A                            loc_4C9A:
00004E7A 301B                       		move.w	(a3)+,d0
00004E7C 544B                       		addq.w	#2,a3
00004E7E 7200                       		moveq	#0,d1
00004E80 121A                       		move.b	(a2)+,d1
00004E82 5341                       		subq.w	#1,d1
00004E84                            
00004E84                            loc_4CA4:
00004E84 2380 2000                  		move.l	d0,(a1,d2.w)
00004E88 5842                       		addq.w	#4,d2
00004E8A 0242 03FC                  		andi.w	#$3FC,d2
00004E8E 51C9 FFF4                  		dbf	d1,loc_4CA4
00004E92 51CB FFE6                  		dbf	d3,loc_4C9A
00004E96 4E75                       		rts	
00004E98                            ; End of function SS_BGAnimate
00004E98                            
00004E98                            ; ===========================================================================
00004E98 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00004EA4                            		even
00004EA4 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00004EAC                            		even
00004EAC 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00004EC0                            		even
00004EC0                            					; XREF: SS_BGAnimate
00004EC0                            ; ===========================================================================
00004EC0                            
00004EC0                            ; ---------------------------------------------------------------------------
00004EC0                            ; Continue screen
00004EC0                            ; ---------------------------------------------------------------------------
00004EC0                            
00004EC0                            ContinueScreen:				; XREF: GameModeArray
00004EC0 6100 CFC8                  		bsr.w	Pal_FadeFrom
00004EC4 46FC 2700                  		move	#$2700,sr
00004EC8 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004ECC 0200 00BF                  		andi.b	#$BF,d0
00004ED0 33C0 00C0 0004             		move.w	d0,($C00004).l
00004ED6 4DF9 00C0 0004             		lea	($C00004).l,a6
00004EDC 3CBC 8004                  		move.w	#$8004,(a6)
00004EE0 3CBC 8700                  		move.w	#$8700,(a6)
00004EE4 6100 C214                  		bsr.w	ClearScreen
00004EE8 43F8 D000                  		lea	($FFFFD000).w,a1
00004EEC 7000                       		moveq	#0,d0
00004EEE 323C 07FF                  		move.w	#$7FF,d1
00004EF2                            
00004EF2                            Cont_ClrObjRam:
00004EF2 22C0                       		move.l	d0,(a1)+
00004EF4 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00004EF8                            
00004EF8 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
00004F02 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
00004F08 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
00004F0E 4EB8 143A                          jsr LoadUncArt          ; load uncompressed art
00004F12 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00004F1C 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00004F22 6100 C3EE                  		bsr.w	NemDec
00004F26 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00004F30 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00004F36 6100 C3DA                  		bsr.w	NemDec
00004F3A 720A                       		moveq	#10,d1
00004F3C 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00004F42 7012                       		moveq	#$12,d0
00004F44 6100 D1CA                  		bsr.w	PalLoad1	; load continue	screen pallet
00004F48 103C 0090                  		move.b	#$90,d0
00004F4C 6100 C2CC                  		bsr.w	PlaySound	; play continue	music
00004F50 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00004F56 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
00004F5C 42B8 F700                  		clr.l	($FFFFF700).w
00004F60 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00004F68 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00004F6E 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00004F74 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00004F7A 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00004F80 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00004F86 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00004F8C 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00004F92 11FC 0000 FFD0             		move.b    #0,($FFFFFFD0).w
00004F98 4EB9 0000 0000             		jsr	ObjectsLoad
00004F9E 4EB9 0000 0000             		jsr	BuildSprites
00004FA4 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004FA8 0000 0040                  		ori.b	#$40,d0
00004FAC 33C0 00C0 0004             		move.w	d0,($C00004).l
00004FB2 6100 CE54                  		bsr.w	Pal_FadeTo
00004FB6                            
00004FB6                            ; ---------------------------------------------------------------------------
00004FB6                            ; Continue screen main loop
00004FB6                            ; ---------------------------------------------------------------------------
00004FB6                            
00004FB6                            Cont_MainLoop:
00004FB6 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004FBC 6100 DA06                  		bsr.w	DelayProgram
00004FC0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004FC6 6400                       		bcc.s	loc_4DF2
00004FC8 46FC 2700                  		move	#$2700,sr
00004FCC 3238 F614                  		move.w	($FFFFF614).w,d1
00004FD0 82FC 003C                  		divu.w	#$3C,d1
00004FD4 0281 0000 000F             		andi.l	#$F,d1
00004FDA 4EB9 0000 0000             		jsr	ContScrCounter
00004FE0 46FC 2300                  		move	#$2300,sr
00004FE4                            
00004FE4                            loc_4DF2:
00004FE4 4EB9 0000 0000             		jsr	ObjectsLoad
00004FEA 4EB9 0000 0000             		jsr	BuildSprites
00004FF0 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00004FF6 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00004FF8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004FFE 64B6                       		bcc.s	Cont_MainLoop
00005000 0C78 0100 F614             		cmpi.w	#$100,($FFFFF614).w
00005006 6E00 FFAE                  		bgt.w	Cont_MainLoop
0000500A 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00005010 0C78 0040 F614             		cmpi.w	#$40,($FFFFF614).w
00005016 6E00 FF9E                  		bgt.w	Cont_MainLoop
0000501A 11FC 0009 F5CE             		move.b	#face_meltdown,(SonimeSST+sonime_face).w
00005020 4A78 F614                  		tst.w	($FFFFF614).w
00005024 6600 FF90                  		bne.w	Cont_MainLoop
00005028 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
0000502E 4E75                       		rts	
00005030                            ; ===========================================================================
00005030                            
00005030                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005030 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005036 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000503C 7000                       		moveq	#0,d0
0000503E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005042 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005046 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000504A 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
0000504E 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005052 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)			
0000505A 4E75                       		rts	
0000505C                            ; ===========================================================================
0000505C                            
0000505C                            ; ---------------------------------------------------------------------------
0000505C                            ; Object 80 - Continue screen elements
0000505C                            ; ---------------------------------------------------------------------------
0000505C                            
0000505C                            Obj80:					; XREF: Obj_Index
0000505C 7000                       		moveq	#0,d0
0000505E 1028 0024                  		move.b	$24(a0),d0
00005062 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005066 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
0000506A                            ; ===========================================================================
0000506A 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
0000506C 0000                       		dc.w Obj80_Display-Obj80_Index
0000506E 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005070 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005072                            ; ===========================================================================
00005072                            
00005072                            Obj80_Main:				; XREF: Obj80_Index
00005072 5428 0024                  		addq.b	#2,$24(a0)
00005076 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
0000507E 317C 8500 0002             		move.w	#$8500,2(a0)
00005084 117C 0000 0001             		move.b	#0,1(a0)
0000508A 117C 003C 0019             		move.b	#$3C,$19(a0)
00005090 317C 0120 0008             		move.w	#$120,8(a0)
00005096 317C 00C0 000A             		move.w	#$C0,$A(a0)
0000509C 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000050A2                            
000050A2                            Obj80_Display:				; XREF: Obj80_Index
000050A2 4EF9 0000 0000             		jmp	DisplaySprite
000050A8                            ; ===========================================================================
000050A8                            Obj80_MiniSonicPos:
000050A8 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000050BA 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000050C6                            ; ===========================================================================
000050C6                            
000050C6                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000050C6 2248                       		movea.l	a0,a1
000050C8 45F9 0000 50A8             		lea	(Obj80_MiniSonicPos).l,a2
000050CE 7200                       		moveq	#0,d1
000050D0 1238 FE18                  		move.b	($FFFFFE18).w,d1
000050D4 5501                       		subq.b	#2,d1
000050D6 6400                       		bcc.s	loc_4EC4
000050D8 4EF9 0000 0000             		jmp	DeleteObject
000050DE                            ; ===========================================================================
000050DE                            
000050DE                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
000050DE 7601                       		moveq	#1,d3
000050E0 0C01 000E                  		cmpi.b	#$E,d1
000050E4 6500                       		bcs.s	loc_4ED0
000050E6 7600                       		moveq	#0,d3
000050E8 720E                       		moveq	#$E,d1
000050EA                            
000050EA                            loc_4ED0:
000050EA 1401                       		move.b	d1,d2
000050EC 0202 0001                  		andi.b	#1,d2
000050F0                            
000050F0                            Obj80_MiniSonLoop:
000050F0 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
000050F4 335A 0008                  		move.w	(a2)+,8(a1)
000050F8 4A02                       		tst.b	d2
000050FA 6700                       		beq.s	loc_4EEA
000050FC 0469 000A 0008             		subi.w	#$A,8(a1)
00005102                            
00005102                            loc_4EEA:
00005102 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005108 137C 0006 001A             		move.b	#6,$1A(a1)
0000510E 137C 0006 0024             		move.b	#6,$24(a1)
00005114 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
0000511C 337C 8551 0002             		move.w	#$8551,2(a1)
00005122 137C 0000 0001             		move.b	#0,1(a1)
00005128 43E9 0040                  		lea	$40(a1),a1
0000512C 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005130 43E9 FFC0                  		lea	-$40(a1),a1
00005134 1343 0028                  		move.b	d3,$28(a1)
00005138                            
00005138                            Obj80_ChkType:				; XREF: Obj80_Index
00005138 4A28 0028                  		tst.b	$28(a0)
0000513C 6700                       		beq.s	loc_4F40
0000513E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005144 6500                       		bcs.s	loc_4F40
00005146 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000514A 0200 0001                  		andi.b	#1,d0
0000514E 6600                       		bne.s	loc_4F40
00005150 4A78 D010                  		tst.w	($FFFFD010).w
00005154 6600                       		bne.s	Obj80_Delete
00005156 4E75                       		rts	
00005158                            ; ===========================================================================
00005158                            
00005158                            loc_4F40:				; XREF: Obj80_ChkType
00005158 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000515C 0200 000F                  		andi.b	#$F,d0
00005160 6600                       		bne.s	Obj80_Display2
00005162 0868 0000 001A             		bchg	#0,$1A(a0)
00005168                            
00005168                            Obj80_Display2:
00005168 4EF9 0000 0000             		jmp	DisplaySprite
0000516E                            ; ===========================================================================
0000516E                            
0000516E                            Obj80_Delete:				; XREF: Obj80_ChkType
0000516E 4EF9 0000 0000             		jmp	DeleteObject
00005174                            ; ===========================================================================
00005174                            
00005174                            ; ---------------------------------------------------------------------------
00005174                            ; Object 81 - Sonic on the continue screen
00005174                            ; ---------------------------------------------------------------------------
00005174                            
00005174                            Obj81:					; XREF: Obj_Index
00005174 7000                       		moveq	#0,d0
00005176 1028 0024                  		move.b	$24(a0),d0
0000517A 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
0000517E 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005182 4EF9 0000 0000             		jmp	DisplaySprite
00005188                            ; ===========================================================================
00005188 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
0000518A 0000                       		dc.w Obj81_ChkLand-Obj81_Index
0000518C 0000                       		dc.w Obj81_Animate-Obj81_Index
0000518E 0000                       		dc.w Obj81_Run-Obj81_Index
00005190                            ; ===========================================================================
00005190                            
00005190                            Obj81_Main:				; XREF: Obj81_Index
00005190 5428 0024                  		addq.b	#2,$24(a0)
00005194 317C 00A0 0008             		move.w	#$A0,8(a0)
0000519A 317C 00C0 000C             		move.w	#$C0,$C(a0)
000051A0 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000051A8 317C 0780 0002             		move.w	#$780,2(a0)
000051AE 117C 0004 0001             		move.b	#4,1(a0)
000051B4 117C 0002 0018             		move.b	#2,$18(a0)
000051BA 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000051C0 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000051C6                            
000051C6                            Obj81_ChkLand:				; XREF: Obj81_Index
000051C6 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000051CC 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000051CE 5428 0024                  		addq.b	#2,$24(a0)
000051D2 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
000051D6 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000051DE 317C 8500 0002             		move.w	#$8500,2(a0)
000051E4 117C 0000 001C             		move.b	#0,$1C(a0)
000051EA 6000                       		bra.s	Obj81_Animate
000051EC                            ; ===========================================================================
000051EC                            
000051EC                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
000051EC 4EB9 0000 0000             		jsr	SpeedToPos
000051F2 4EB9 0000 0000             		jsr	Sonic_Animate
000051F8 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000051FE                            ; ===========================================================================
000051FE                            
000051FE                            Obj81_Animate:				; XREF: Obj81_Index
000051FE 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005202 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005204 43F9 0000 0000             		lea	(Ani_obj81).l,a1
0000520A 4EF9 0000 0000             		jmp	AnimateSprite
00005210                            ; ===========================================================================
00005210                            
00005210                            Obj81_GetUp:				; XREF: Obj81_Animate
00005210 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00005216 5428 0024                  		addq.b	#2,$24(a0)
0000521A 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005222 317C 0780 0002             		move.w	#$780,2(a0)
00005228 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
0000522E 4268 0020                  		clr.w	$20(a0)
00005232 5168 000C                  		subq.w	#8,$C(a0)
00005236 103C 00E0                  		move.b	#$E0,d0
0000523A 6100 BFE4                  		bsr.w	PlaySound_Special ; fade out music
0000523E                            
0000523E                            Obj81_Run:				; XREF: Obj81_Index
0000523E 0C68 0800 0020             		cmpi.w	#$800,$20(a0)	; check	Sonic's "run speed" (not moving)
00005244 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005246 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
0000524C 6000                       		bra.s	Obj81_ShowRun
0000524E                            ; ===========================================================================
0000524E                            
0000524E                            Obj81_AddSpeed:				; XREF: Obj81_Run
0000524E 0668 0020 0020             		addi.w	#$20,$20(a0)	; increase "run	speed"
00005254                            
00005254                            Obj81_ShowRun:				; XREF: Obj81_Run
00005254 4EB9 0000 0000             		jsr	SpeedToPos
0000525A 4EB9 0000 0000             		jsr	Sonic_Animate
00005260 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005266                            ; ===========================================================================
00005266                            Ani_obj81:
00005266                            	include "_anim\obj81.asm"
00005266                            ; ---------------------------------------------------------------------------
00005266                            ; Animation script - Sonic on the continue screen
00005266                            ; ---------------------------------------------------------------------------
00005266 0000                       		dc.w byte_504A-Ani_obj81
00005268 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005274 00                         		even
00005274 00                         		even
00005274                            
00005274                            ; ---------------------------------------------------------------------------
00005274                            ; Sprite mappings - Continue screen
00005274                            ; ---------------------------------------------------------------------------
00005274                            Map_obj80:
00005274                            	include "_maps\obj80.asm"
00005274                            ; ---------------------------------------------------------------------------
00005274                            ; Sprite mappings - Continue screen
00005274                            ; ---------------------------------------------------------------------------
00005274 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005278 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
0000527C 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005280 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005284 0B                         byte_5066:	dc.b $B
00005285 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
0000528A F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
0000528F F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005294 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005299 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
0000529E F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000052A3 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000052A8 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000052AD 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000052B2 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000052B7 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000052BC 03                         byte_509E:	dc.b 3
000052BD 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000052C2 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000052C7 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000052CC 03                         byte_50AE:	dc.b 3
000052CD 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000052D2 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000052D7 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000052DC 03                         byte_50BE:	dc.b 3
000052DD 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000052E2 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000052E7 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000052EC 02                         byte_50CE:	dc.b 2
000052ED 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000052F2 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000052F7 01                         byte_50D9:	dc.b 1
000052F8 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000052FD 01                         byte_50DF:	dc.b 1
000052FE 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005304 00                         		even
00005304 00                         		even
00005304                            
00005304                            ; ===========================================================================
00005304                            ; ---------------------------------------------------------------------------
00005304                            ; Ending sequence in Green Hill	Zone
00005304                            ; ---------------------------------------------------------------------------
00005304                            
00005304                            EndingSequence:				; XREF: GameModeArray
00005304 103C 00E4                  		move.b	#$E4,d0
00005308 6100 BF16                  		bsr.w	PlaySound_Special ; stop music
0000530C 6100 CB7C                  		bsr.w	Pal_FadeFrom
00005310 43F8 D000                  		lea	($FFFFD000).w,a1
00005314 7000                       		moveq	#0,d0
00005316 323C 07FF                  		move.w	#$7FF,d1
0000531A                            
0000531A                            End_ClrObjRam:
0000531A 22C0                       		move.l	d0,(a1)+
0000531C 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005320                            
00005320 43F8 F628                  		lea	($FFFFF628).w,a1
00005324 7000                       		moveq	#0,d0
00005326 323C 0015                  		move.w	#$15,d1
0000532A                            
0000532A                            End_ClrRam:
0000532A 22C0                       		move.l	d0,(a1)+
0000532C 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005330                            
00005330 43F8 F700                  		lea	($FFFFF700).w,a1
00005334 7000                       		moveq	#0,d0
00005336 323C 003F                  		move.w	#$3F,d1
0000533A                            
0000533A                            End_ClrRam2:
0000533A 22C0                       		move.l	d0,(a1)+
0000533C 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005340                            
00005340 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005344 7000                       		moveq	#0,d0
00005346 323C 0047                  		move.w	#$47,d1
0000534A                            
0000534A                            End_ClrRam3:
0000534A 22C0                       		move.l	d0,(a1)+
0000534C 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005350                            
00005350 46FC 2700                  		move	#$2700,sr
00005354 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005358 33C0 00C0 0004             		move.w	d0,($C00004).l
0000535E 6100 BD9A                  		bsr.w	ClearScreen
00005362 4DF9 00C0 0004             		lea	($C00004).l,a6
00005368 3CBC 8B03                  		move.w	#$8B03,(a6)
0000536C 3CBC 8230                  		move.w	#$8230,(a6)
00005370 3CBC 8407                  		move.w	#$8407,(a6)
00005374 3CBC 857C                  		move.w	#$857C,(a6)
00005378 3CBC 9001                  		move.w	#$9001,(a6)
0000537C 3CBC 8004                  		move.w	#$8004,(a6)
00005380 3CBC 8720                  		move.w	#$8720,(a6)
00005384 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000538A 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000538E 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005394 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
0000539A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000053A0 6700                       		beq.s	End_LoadData	; if yes, branch
000053A2 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000053A8                            
000053A8                            End_LoadData:
000053A8 701C                       		moveq	#$1C,d0
000053AA 6100 C21E                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000053AE 4EB9 0000 0000             		jsr	Hud_Base
000053B4 6100 0000                  		bsr.w	LevelSizeLoad
000053B8 6100 0000                  		bsr.w	DeformBgLayer
000053BC 08F8 0002 F754             		bset	#2,($FFFFF754).w
000053C2 6100 0000                  		bsr.w	LoadZoneTiles	; load level art			
000053C6 6100 0000                  		bsr.w	MainLoadBlockLoad
000053CA 6100 0000                  		bsr.w	LoadTilesFromStart
000053CE 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000053D6 46FC 2300                  		move	#$2300,sr
000053DA 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000053E0 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000053E4 6100 C394                  		bsr.w	KosDec
000053E8 7003                       		moveq	#3,d0
000053EA 6100 CD24                  		bsr.w	PalLoad1	; load Sonic's pallet
000053EE 303C 008B                  		move.w	#$8B,d0
000053F2 6100 BE26                  		bsr.w	PlaySound	; play ending sequence music
000053F6 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
000053FC 6700                       		beq.s	End_LoadSonic	; if not, branch
000053FE 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005404                            
00005404                            End_LoadSonic:
00005404 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000540A 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005410 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005416 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
0000541C 31FC F800 D020             		move.w	#$F800,($FFFFD020).w ; set Sonic's speed
00005422 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005428 11FC 0001 FFD0                     move.b    #1,($FFFFFFD0).w
0000542E 4EB9 0000 0000             		jsr	ObjPosLoad
00005434 4EB9 0000 0000             		jsr	ObjectsLoad
0000543A 4EB9 0000 0000             		jsr	BuildSprites
00005440 7000                       		moveq	#0,d0
00005442 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005446 21C0 FE22                  		move.l	d0,($FFFFFE22).w
0000544A 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000544E 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005452 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005456 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
0000545A 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000545E 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005462 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005466 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000546A 6100 EDE2                  		bsr.w	OscillateNumInit
0000546E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005474 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
0000547A 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005480 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005486 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000548C 6100 D536                  		bsr.w	DelayProgram
00005490 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005494 0000 0040                  		ori.b	#$40,d0
00005498 33C0 00C0 0004             		move.w	d0,($C00004).l
0000549E 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000054A4 6100 C962                  		bsr.w	Pal_FadeTo
000054A8                            
000054A8                            ; ---------------------------------------------------------------------------
000054A8                            ; Main ending sequence loop
000054A8                            ; ---------------------------------------------------------------------------
000054A8                            
000054A8                            End_MainLoop:
000054A8 6100 BD82                  		bsr.w	PauseGame
000054AC 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000054B2 6100 D510                  		bsr.w	DelayProgram
000054B6 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000054BA 6100 0000                  		bsr.w	End_MoveSonic
000054BE 4EB9 0000 0000             		jsr	ObjectsLoad
000054C4 6100 0000                  		bsr.w	DeformBgLayer
000054C8 4EB9 0000 0000             		jsr	BuildSprites
000054CE 4EB9 0000 0000             		jsr	ObjPosLoad
000054D4 6100 C4C2                  		bsr.w	PalCycle_Load
000054D8 6100 EDCA                  		bsr.w	OscillateNumDo
000054DC 6100 EE56                  		bsr.w	ChangeRingFrame
000054E0 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
000054E6 6700                       		beq.s	loc_52DA	; if yes, branch
000054E8 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
000054EE 103C 0091                  		move.b	#$91,d0
000054F2 6100 BD2C                  		bsr.w	PlaySound_Special ; play credits music
000054F6 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
000054FC 4E75                       		rts	
000054FE                            ; ===========================================================================
000054FE                            
000054FE                            loc_52DA:
000054FE 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005502 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005506                            
00005506 4278 FE02                  		clr.w	($FFFFFE02).w
0000550A 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00005510 4278 F794                  		clr.w	($FFFFF794).w
00005514                            
00005514                            End_AllEmlds:				; XREF: loc_5334
00005514 6100 BD16                  		bsr.w	PauseGame
00005518 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000551E 6100 D4A4                  		bsr.w	DelayProgram
00005522 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005526 6100 0000                  		bsr.w	End_MoveSonic
0000552A 4EB9 0000 0000             		jsr	ObjectsLoad
00005530 6100 0000                  		bsr.w	DeformBgLayer
00005534 4EB9 0000 0000             		jsr	BuildSprites
0000553A 4EB9 0000 0000             		jsr	ObjPosLoad
00005540 6100 ED62                  		bsr.w	OscillateNumDo
00005544 6100 EDEE                  		bsr.w	ChangeRingFrame
00005548 5378 F794                  		subq.w	#1,($FFFFF794).w
0000554C 6A00                       		bpl.s	loc_5334
0000554E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005554 6100 CA5A                  		bsr.w	Pal_ToWhite
00005558                            
00005558                            loc_5334:
00005558 4A78 FE02                  		tst.w	($FFFFFE02).w
0000555C 6700 FFB6                  		beq.w	End_AllEmlds
00005560 4278 FE02                  		clr.w	($FFFFFE02).w
00005564 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
0000556A 4BF9 00C0 0004             		lea	($C00004).l,a5
00005570 4DF9 00C0 0000             		lea	($C00000).l,a6
00005576 47F8 F700                  		lea	($FFFFF700).w,a3
0000557A 49F8 A400                  		lea	($FFFFA400).w,a4
0000557E 343C 4000                  		move.w	#$4000,d2
00005582 6100 0000                  		bsr.w	LoadTilesFromStart2
00005586 7013                       		moveq	#$13,d0
00005588 6100 CB86                  		bsr.w	PalLoad1	; load ending pallet
0000558C 6100 C97A                  		bsr.w	Pal_MakeWhite
00005590 6000 FF16                  		bra.w	End_MainLoop
00005594                            
00005594                            ; ---------------------------------------------------------------------------
00005594                            ; Subroutine controlling Sonic on the ending sequence
00005594                            ; ---------------------------------------------------------------------------
00005594                            
00005594                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005594                            
00005594                            
00005594                            End_MoveSonic:				; XREF: End_MainLoop
00005594 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00005598 6600                       		bne.s	End_MoveSonic2
0000559A 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000055A0 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000055A2 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000055A6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000055AC 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000055B2 4E75                       		rts	
000055B4                            ; ===========================================================================
000055B4                            
000055B4                            End_MoveSonic2:				; XREF: End_MoveSonic
000055B4 5500                       		subq.b	#2,d0
000055B6 6600                       		bne.s	End_MoveSonic3
000055B8 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000055BE 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000055C0 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000055C4 7000                       		moveq	#0,d0
000055C6 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000055CA 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000055CE 31C0 D020                  		move.w	d0,($FFFFD020).w
000055D2 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000055D8 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000055DE 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
000055E4 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
000055EA 4E75                       		rts	
000055EC                            ; ===========================================================================
000055EC                            
000055EC                            End_MoveSonic3:				; XREF: End_MoveSonic
000055EC 5500                       		subq.b	#2,d0
000055EE 6600                       		bne.s	End_MoveSonExit
000055F0 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000055F4 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
000055FA 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005600 4278 D024                  		clr.w	($FFFFD024).w
00005604                            
00005604                            End_MoveSonExit:
00005604 4E75                       		rts	
00005606                            ; End of function End_MoveSonic
00005606                            
00005606                            ; ===========================================================================
00005606                            ; ---------------------------------------------------------------------------
00005606                            ; Object 87 - Sonic on ending sequence
00005606                            ; ---------------------------------------------------------------------------
00005606                            
00005606                            Obj87:					; XREF: Obj_Index
00005606 7000                       		moveq	#0,d0
00005608 1028 0025                  		move.b	$25(a0),d0
0000560C 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005610 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005614 4EF9 0000 0000             		jmp	DisplaySprite
0000561A                            ; ===========================================================================
0000561A 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
0000561E 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005622 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005626 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
0000562A 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
0000562E                            ; ===========================================================================
0000562E                            
0000562E                            Obj87_Main:				; XREF: Obj87_Index
0000562E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005634 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005636 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
0000563C 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005642 4E75                       		rts	
00005644                            ; ===========================================================================
00005644                            
00005644                            Obj87_Main2:				; XREF: Obj87_Main
00005644 5428 0025                  		addq.b	#2,$25(a0)
00005648 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005650 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005656 117C 0004 0001             		move.b	#4,1(a0)
0000565C 4228 0022                  		clr.b	$22(a0)
00005660 117C 0002 0018             		move.b	#2,$18(a0)
00005666 117C 0000 001A             		move.b	#0,$1A(a0)
0000566C 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005672                            
00005672                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005672 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005676 6600                       		bne.s	Obj87_Wait
00005678 5428 0025                  		addq.b	#2,$25(a0)
0000567C 317C 0001 001C             		move.w	#1,$1C(a0)
00005682 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005688                            
00005688                            Obj87_Wait:
00005688 4E75                       		rts	
0000568A                            ; ===========================================================================
0000568A                            
0000568A                            Obj87_LookUp:				; XREF: Obj87_Index
0000568A 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005692 6600                       		bne.s	locret_5480
00005694 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
0000569A 317C 005A 0030             		move.w	#$5A,$30(a0)
000056A0 5428 0025                  		addq.b	#2,$25(a0)
000056A4                            
000056A4                            locret_5480:
000056A4 4E75                       		rts	
000056A6                            ; ===========================================================================
000056A6                            
000056A6                            Obj87_ClrObjRam:			; XREF: Obj87_Index
000056A6 5368 0030                  		subq.w	#1,$30(a0)
000056AA 6600                       		bne.s	Obj87_Wait2
000056AC 43F8 D400                  		lea	($FFFFD400).w,a1
000056B0 323C 00FF                  		move.w	#$FF,d1
000056B4                            
000056B4                            Obj87_ClrLoop:
000056B4 4299                       		clr.l	(a1)+
000056B6 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000056BA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000056C0 5428 0025                  		addq.b	#2,$25(a0)
000056C4 117C 0001 001C             		move.b	#1,$1C(a0)
000056CA 317C 003C 0030             		move.w	#$3C,$30(a0)
000056D0                            
000056D0                            Obj87_Wait2:
000056D0 4E75                       		rts	
000056D2                            ; ===========================================================================
000056D2                            
000056D2                            Obj87_MakeLogo:				; XREF: Obj87_Index
000056D2 5368 0030                  		subq.w	#1,$30(a0)
000056D6 6600                       		bne.s	Obj87_Wait3
000056D8 5428 0025                  		addq.b	#2,$25(a0)
000056DC 317C 00B4 0030             		move.w	#$B4,$30(a0)
000056E2 117C 0002 001C             		move.b	#2,$1C(a0)
000056E8 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000056EE                            
000056EE                            Obj87_Wait3:
000056EE 4E75                       		rts	
000056F0                            ; ===========================================================================
000056F0                            
000056F0                            Obj87_Animate:				; XREF: Obj87_Index
000056F0 43F9 0000 0000             		lea	(Ani_obj87).l,a1
000056F6 4EF9 0000 0000             		jmp	AnimateSprite
000056FC                            ; ===========================================================================
000056FC                            
000056FC                            Obj87_Leap:				; XREF: Obj87_Index
000056FC 5368 0030                  		subq.w	#1,$30(a0)
00005700 6600                       		bne.s	Obj87_Wait4
00005702 5428 0025                  		addq.b	#2,$25(a0)
00005706 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000570E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005714 117C 0004 0001             		move.b	#4,1(a0)
0000571A 4228 0022                  		clr.b	$22(a0)
0000571E 117C 0002 0018             		move.b	#2,$18(a0)
00005724 117C 0005 001A             		move.b	#5,$1A(a0)
0000572A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005730 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005736 60B8                       		bra.s	Obj87_Animate
00005738                            ; ===========================================================================
00005738                            
00005738                            Obj87_Wait4:				; XREF: Obj87_Leap
00005738 4E75                       		rts	
0000573A                            ; ===========================================================================
0000573A                            Ani_obj87:
0000573A                            	include "_anim\obj87.asm"
0000573A                            ; ---------------------------------------------------------------------------
0000573A                            ; Animation script - Sonic on the ending sequence
0000573A                            ; ---------------------------------------------------------------------------
0000573A 0000                       		dc.w byte_551C-Ani_obj87
0000573C 0000                       		dc.w byte_552A-Ani_obj87
0000573E 0000                       		dc.w byte_5534-Ani_obj87
00005740 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
0000574E 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005758 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005760                            		even
00005760                            		even
00005760                            
00005760                            ; ===========================================================================
00005760                            ; ---------------------------------------------------------------------------
00005760                            ; Object 88 - chaos emeralds on	the ending sequence
00005760                            ; ---------------------------------------------------------------------------
00005760                            
00005760                            Obj88:					; XREF: Obj_Index
00005760 7000                       		moveq	#0,d0
00005762 1028 0024                  		move.b	$24(a0),d0
00005766 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
0000576A 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
0000576E 4EF9 0000 0000             		jmp	DisplaySprite
00005774                            ; ===========================================================================
00005774 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005776 0000                       		dc.w Obj88_Move-Obj88_Index
00005778                            ; ===========================================================================
00005778                            
00005778                            Obj88_Main:				; XREF: Obj88_Index
00005778 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
0000577E 6700                       		beq.s	Obj88_Main2
00005780 588F                       		addq.l	#4,sp
00005782 4E75                       		rts	
00005784                            ; ===========================================================================
00005784                            
00005784                            Obj88_Main2:				; XREF: Obj88_Main
00005784 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
0000578A 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005790 2248                       		movea.l	a0,a1
00005792 7600                       		moveq	#0,d3
00005794 7401                       		moveq	#1,d2
00005796 7205                       		moveq	#5,d1
00005798                            
00005798                            Obj88_MainLoop:
00005798 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
0000579C 5429 0024                  		addq.b	#2,$24(a1)
000057A0 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
000057A8 337C 03C5 0002             		move.w	#$3C5,2(a1)
000057AE 137C 0004 0001             		move.b	#4,1(a1)
000057B4 137C 0001 0018             		move.b	#1,$18(a1)
000057BA 3368 0008 0038             		move.w	8(a0),$38(a1)
000057C0 3368 000C 003A             		move.w	$C(a0),$3A(a1)
000057C6 1342 001C                  		move.b	d2,$1C(a1)
000057CA 1342 001A                  		move.b	d2,$1A(a1)
000057CE 5202                       		addq.b	#1,d2
000057D0 1343 0026                  		move.b	d3,$26(a1)
000057D4 0603 002A                  		addi.b	#$2A,d3
000057D8 43E9 0040                  		lea	$40(a1),a1
000057DC 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000057E0                            
000057E0                            Obj88_Move:				; XREF: Obj88_Index
000057E0 3028 003E                  		move.w	$3E(a0),d0
000057E4 D168 0026                  		add.w	d0,$26(a0)
000057E8 1028 0026                  		move.b	$26(a0),d0
000057EC 4EB9 0000 29F6             		jsr	(CalcSine).l
000057F2 7800                       		moveq	#0,d4
000057F4 1828 003C                  		move.b	$3C(a0),d4
000057F8 C3C4                       		muls.w	d4,d1
000057FA E081                       		asr.l	#8,d1
000057FC C1C4                       		muls.w	d4,d0
000057FE E080                       		asr.l	#8,d0
00005800 D268 0038                  		add.w	$38(a0),d1
00005804 D068 003A                  		add.w	$3A(a0),d0
00005808 3141 0008                  		move.w	d1,8(a0)
0000580C 3140 000C                  		move.w	d0,$C(a0)
00005810 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005816 6700                       		beq.s	loc_55FA
00005818 0668 0020 003C             		addi.w	#$20,$3C(a0)
0000581E                            
0000581E                            loc_55FA:
0000581E 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005824 6700                       		beq.s	loc_5608
00005826 0668 0020 003E             		addi.w	#$20,$3E(a0)
0000582C                            
0000582C                            loc_5608:
0000582C 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005832 6700                       		beq.s	locret_5614
00005834 5368 003A                  		subq.w	#1,$3A(a0)
00005838                            
00005838                            locret_5614:
00005838 4E75                       		rts	
0000583A                            ; ===========================================================================
0000583A                            ; ---------------------------------------------------------------------------
0000583A                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
0000583A                            ; ---------------------------------------------------------------------------
0000583A                            
0000583A                            Obj89:					; XREF: Obj_Index
0000583A 7000                       		moveq	#0,d0
0000583C 1028 0024                  		move.b	$24(a0),d0
00005840 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005844 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005848                            ; ===========================================================================
00005848 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
0000584A 0000                       		dc.w Obj89_Move-Obj89_Index
0000584C 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
0000584E                            ; ===========================================================================
0000584E                            
0000584E                            Obj89_Main:				; XREF: Obj89_Index
0000584E 5428 0024                  		addq.b	#2,$24(a0)
00005852 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005858 317C 00D8 000A             		move.w	#$D8,$A(a0)
0000585E 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005866 317C 05C5 0002             		move.w	#$5C5,2(a0)
0000586C 117C 0000 0001             		move.b	#0,1(a0)
00005872 117C 0000 0018             		move.b	#0,$18(a0)
00005878                            
00005878                            Obj89_Move:				; XREF: Obj89_Index
00005878 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
0000587E 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005880 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005886 4EF9 0000 0000             		jmp	DisplaySprite
0000588C                            ; ===========================================================================
0000588C                            
0000588C                            Obj89_Delay:				; XREF: Obj89_Move
0000588C 5428 0024                  		addq.b	#2,$24(a0)
00005890 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005896                            
00005896                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005896 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000589A 6A00                       		bpl.s	Obj89_Display
0000589C 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
000058A2                            
000058A2                            Obj89_Display:
000058A2 4EF9 0000 0000             		jmp	(DisplaySprite).l
000058A8                            ; ===========================================================================
000058A8                            ; ---------------------------------------------------------------------------
000058A8                            ; Sprite mappings - Sonic on the ending	sequence
000058A8                            ; ---------------------------------------------------------------------------
000058A8                            Map_obj87:
000058A8                            	include "_maps\obj87.asm"
000058A8                            ; ---------------------------------------------------------------------------
000058A8                            ; Sprite mappings - Sonic on the ending	sequence
000058A8                            ; ---------------------------------------------------------------------------
000058A8 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
000058AC 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
000058B0 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
000058B4 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
000058B8 02                         byte_5690:	dc.b 2
000058B9 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000058BE 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000058C3 03                         byte_569B:	dc.b 3
000058C4 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000058C9 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000058CE 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000058D3 02                         byte_56AB:	dc.b 2
000058D4 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000058D9 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000058DE 02                         byte_56B6:	dc.b 2
000058DF EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000058E4 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000058E9 02                         byte_56C1:	dc.b 2
000058EA EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000058EF FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000058F4 03                         byte_56CC:	dc.b 3
000058F5 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000058FA EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000058FF 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005904 07                         byte_56DC:	dc.b 7
00005905 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
0000590A BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
0000590F BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005914 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005919 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
0000591E E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005923 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005928 18                         byte_5700:	dc.b $18
00005929 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
0000592E 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005933 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005938 980B 0098 30               		dc.b $98, $B, 0, $98, $30
0000593D A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005942 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005947 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
0000594C A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005951 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005956 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
0000595B A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005960 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005965 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
0000596A B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
0000596F B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005974 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005979 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
0000597E D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005983 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005988 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
0000598D D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005992 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005997 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
0000599C F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
000059A2 00                         		even
000059A2 00                         		even
000059A2                            
000059A2                            ; ---------------------------------------------------------------------------
000059A2                            ; Sprite mappings - chaos emeralds on the ending sequence
000059A2                            ; ---------------------------------------------------------------------------
000059A2                            Map_obj88:
000059A2                            	include "_maps\obj88.asm"
000059A2                            ; ---------------------------------------------------------------------------
000059A2                            ; Sprite mappings - chaos emeralds on the ending sequence
000059A2                            ; ---------------------------------------------------------------------------
000059A2 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
000059A6 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
000059AA 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
000059AE 0000                       		dc.w byte_57AC-Map_obj88
000059B0 01                         byte_5788:	dc.b 1
000059B1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000059B6 01                         byte_578E:	dc.b 1
000059B7 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
000059BC 01                         byte_5794:	dc.b 1
000059BD F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
000059C2 01                         byte_579A:	dc.b 1
000059C3 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
000059C8 01                         byte_57A0:	dc.b 1
000059C9 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
000059CE 01                         byte_57A6:	dc.b 1
000059CF F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000059D4 01                         byte_57AC:	dc.b 1
000059D5 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000059DA                            		even
000059DA                            		even
000059DA                            
000059DA                            ; ---------------------------------------------------------------------------
000059DA                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000059DA                            ; ---------------------------------------------------------------------------
000059DA                            Map_obj89:
000059DA                            	include "_maps\obj89.asm"
000059DA                            ; ---------------------------------------------------------------------------
000059DA                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000059DA                            ; ---------------------------------------------------------------------------
000059DA 0000                       		dc.w byte_57B4-Map_obj89
000059DC 03                         byte_57B4:	dc.b 3
000059DD F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000059E2 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000059E7 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000059EC                            		even
000059EC                            		even
000059EC                            
000059EC                            ; ===========================================================================
000059EC                            ; ---------------------------------------------------------------------------
000059EC                            ; Credits ending sequence
000059EC                            ; ---------------------------------------------------------------------------
000059EC                            
000059EC                            Credits:				; XREF: GameModeArray
000059EC 6100 BACE                  		bsr.w	ClearPLC
000059F0 6100 C498                  		bsr.w	Pal_FadeFrom
000059F4 4DF9 00C0 0004             		lea	($C00004).l,a6
000059FA 3CBC 8004                  		move.w	#$8004,(a6)
000059FE 3CBC 8230                  		move.w	#$8230,(a6)
00005A02 3CBC 8407                  		move.w	#$8407,(a6)
00005A06 3CBC 9001                  		move.w	#$9001,(a6)
00005A0A 3CBC 9200                  		move.w	#$9200,(a6)
00005A0E 3CBC 8B03                  		move.w	#$8B03,(a6)
00005A12 3CBC 8720                  		move.w	#$8720,(a6)
00005A16 4238 F64E                  		clr.b	($FFFFF64E).w
00005A1A 6100 B6DE                  		bsr.w	ClearScreen
00005A1E 43F8 D000                  		lea	($FFFFD000).w,a1
00005A22 7000                       		moveq	#0,d0
00005A24 323C 07FF                  		move.w	#$7FF,d1
00005A28                            
00005A28                            Cred_ClrObjRam:
00005A28 22C0                       		move.l	d0,(a1)+
00005A2A 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005A2E                            
00005A2E 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005A38 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005A3E 6100 B8D2                  		bsr.w	NemDec
00005A42 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005A46 7000                       		moveq	#0,d0
00005A48 323C 001F                  		move.w	#$1F,d1
00005A4C                            
00005A4C                            Cred_ClrPallet:
00005A4C 22C0                       		move.l	d0,(a1)+
00005A4E 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005A52                            
00005A52 7014                       		moveq	#$14,d0
00005A54 6100 C6BA                  		bsr.w	PalLoad1	; load Sonic's pallet
00005A58 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005A5E 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w
00005A64 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00005A6A 4EB9 0000 0000             		jsr	ObjectsLoad
00005A70 4EB9 0000 0000             		jsr	BuildSprites
00005A76 6100 0000                  		bsr.w	EndingDemoLoad
00005A7A 7000                       		moveq	#0,d0
00005A7C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005A80 E948                       		lsl.w	#4,d0
00005A82 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005A88 45F2 0000                  		lea	(a2,d0.w),a2
00005A8C 7000                       		moveq	#0,d0
00005A8E 1012                       		move.b	(a2),d0
00005A90 6700                       		beq.s	loc_5862
00005A92 6100 B9CA                  		bsr.w	LoadPLC		; load level patterns
00005A96                            
00005A96                            loc_5862:
00005A96 7001                       		moveq	#1,d0
00005A98 6100 B9C4                  		bsr.w	LoadPLC		; load standard	level patterns
00005A9C 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005AA2 6100 C364                  		bsr.w	Pal_FadeTo
00005AA6                            
00005AA6                            Cred_WaitLoop:
00005AA6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005AAC 6100 CF16                  		bsr.w	DelayProgram
00005AB0 6100 BA18                  		bsr.w	RunPLC_RAM
00005AB4 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005AB8 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005ABA 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005ABE 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005AC0 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005AC6 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005ACA 4E75                       		rts	
00005ACC                            
00005ACC                            ; ---------------------------------------------------------------------------
00005ACC                            ; Ending sequence demo loading subroutine
00005ACC                            ; ---------------------------------------------------------------------------
00005ACC                            
00005ACC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005ACC                            
00005ACC                            
00005ACC                            EndingDemoLoad:				; XREF: Credits
00005ACC 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005AD0 0240 000F                  		andi.w	#$F,d0
00005AD4 D040                       		add.w	d0,d0
00005AD6 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005ADA 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005ADE 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005AE2 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005AE8 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005AEA 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005AF0 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005AF6 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005AFC 7000                       		moveq	#0,d0
00005AFE 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005B02 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005B06 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005B0A 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005B0E 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005B14 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005B16 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005B1C 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005B20 303C 0008                  		move.w	#8,d0
00005B24                            
00005B24                            EndDemo_LampLoad:
00005B24 24D9                       		move.l	(a1)+,(a2)+
00005B26 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005B2A                            
00005B2A                            EndDemo_Exit:
00005B2A 4E75                       		rts	
00005B2C                            ; End of function EndingDemoLoad
00005B2C                            
00005B2C                            ; ===========================================================================
00005B2C                            ; ---------------------------------------------------------------------------
00005B2C                            ; Levels used in the end sequence demos
00005B2C                            ; ---------------------------------------------------------------------------
00005B2C                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005B3C                            
00005B3C                            ; ---------------------------------------------------------------------------
00005B3C                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005B3C                            ; ---------------------------------------------------------------------------
00005B3C                            EndDemo_LampVar:
00005B3C 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005B3E 0A00 062C 000D             		dc.w $A00, $62C, $D
00005B44 0000 0000                  		dc.l 0
00005B48 0000                       		dc.b 0,	0
00005B4A 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005B5E 0101                       		dc.b 1,	1
00005B60                            ; ===========================================================================
00005B60                            ; ---------------------------------------------------------------------------
00005B60                            ; "TRY AGAIN" and "END"	screens
00005B60                            ; ---------------------------------------------------------------------------
00005B60                            
00005B60                            TryAgainEnd:				; XREF: Credits
00005B60 6100 B95A                  		bsr.w	ClearPLC
00005B64 6100 C324                  		bsr.w	Pal_FadeFrom
00005B68 4DF9 00C0 0004             		lea	($C00004).l,a6
00005B6E 3CBC 8004                  		move.w	#$8004,(a6)
00005B72 3CBC 8230                  		move.w	#$8230,(a6)
00005B76 3CBC 8407                  		move.w	#$8407,(a6)
00005B7A 3CBC 9001                  		move.w	#$9001,(a6)
00005B7E 3CBC 9200                  		move.w	#$9200,(a6)
00005B82 3CBC 8B03                  		move.w	#$8B03,(a6)
00005B86 3CBC 8720                  		move.w	#$8720,(a6)
00005B8A 4238 F64E                  		clr.b	($FFFFF64E).w
00005B8E 6100 B56A                  		bsr.w	ClearScreen
00005B92 43F8 D000                  		lea	($FFFFD000).w,a1
00005B96 7000                       		moveq	#0,d0
00005B98 323C 07FF                  		move.w	#$7FF,d1
00005B9C                            
00005B9C                            TryAg_ClrObjRam:
00005B9C 22C0                       		move.l	d0,(a1)+
00005B9E 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005BA2                            
00005BA2 701D                       		moveq	#$1D,d0
00005BA4 6100 BA24                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005BA8 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005BAC 7000                       		moveq	#0,d0
00005BAE 323C 001F                  		move.w	#$1F,d1
00005BB2                            
00005BB2                            TryAg_ClrPallet:
00005BB2 22C0                       		move.l	d0,(a1)+
00005BB4 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005BB8                            
00005BB8 7013                       		moveq	#$13,d0
00005BBA 6100 C554                  		bsr.w	PalLoad1	; load ending pallet
00005BBE 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005BC2 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005BC8 4EB9 0000 0000             		jsr	ObjectsLoad
00005BCE 4EB9 0000 0000             		jsr	BuildSprites
00005BD4 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005BDA 6100 C22C                  		bsr.w	Pal_FadeTo
00005BDE                            
00005BDE                            ; ---------------------------------------------------------------------------
00005BDE                            ; "TRY AGAIN" and "END"	screen main loop
00005BDE                            ; ---------------------------------------------------------------------------
00005BDE                            TryAg_MainLoop:
00005BDE 6100 B64C                  		bsr.w	PauseGame
00005BE2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005BE8 6100 CDDA                  		bsr.w	DelayProgram
00005BEC 4EB9 0000 0000             		jsr	ObjectsLoad
00005BF2 4EB9 0000 0000             		jsr	BuildSprites
00005BF8 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005BFE 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005C00 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005C04 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005C06 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005C0C 67D0                       		beq.s	TryAg_MainLoop
00005C0E                            
00005C0E                            TryAg_Exit:
00005C0E 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00005C14 4E75                       		rts	
00005C16                            
00005C16                            ; ===========================================================================
00005C16                            ; ---------------------------------------------------------------------------
00005C16                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005C16                            ; ---------------------------------------------------------------------------
00005C16                            
00005C16                            Obj8B:					; XREF: Obj_Index
00005C16 7000                       		moveq	#0,d0
00005C18 1028 0024                  		move.b	$24(a0),d0
00005C1C 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005C20 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005C24 4EF9 0000 0000             		jmp	DisplaySprite
00005C2A                            ; ===========================================================================
00005C2A 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005C2C 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005C2E 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005C30 0000                       		dc.w loc_5A8E-Obj8B_Index
00005C32                            ; ===========================================================================
00005C32                            
00005C32                            Obj8B_Main:				; XREF: Obj8B_Index
00005C32 5428 0024                  		addq.b	#2,$24(a0)
00005C36 317C 0120 0008             		move.w	#$120,8(a0)
00005C3C 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005C42 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005C4A 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005C50 117C 0000 0001             		move.b	#0,1(a0)
00005C56 117C 0002 0018             		move.b	#2,$18(a0)
00005C5C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005C62 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00005C68 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005C6E 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005C70 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
00005C76 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005C7C 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005C82 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005C88 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005C8E                            
00005C8E                            Obj8B_Animate:				; XREF: Obj8B_Index
00005C8E 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005C94 4EF9 0000 0000             		jmp	AnimateSprite
00005C9A                            ; ===========================================================================
00005C9A                            
00005C9A                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005C9A 5428 0024                  		addq.b	#2,$24(a0)
00005C9E 7002                       		moveq	#2,d0
00005CA0 0828 0000 001C             		btst	#0,$1C(a0)
00005CA6 6700                       		beq.s	loc_5A6A
00005CA8 4440                       		neg.w	d0
00005CAA                            
00005CAA                            loc_5A6A:
00005CAA 43F8 D800                  		lea	($FFFFD800).w,a1
00005CAE 7205                       		moveq	#5,d1
00005CB0                            
00005CB0                            loc_5A70:
00005CB0 1340 003E                  		move.b	d0,$3E(a1)
00005CB4 3400                       		move.w	d0,d2
00005CB6 E742                       		asl.w	#3,d2
00005CB8 D529 0026                  		add.b	d2,$26(a1)
00005CBC 43E9 0040                  		lea	$40(a1),a1
00005CC0 51C9 FFEE                  		dbf	d1,loc_5A70
00005CC4 5228 001A                  		addq.b	#1,$1A(a0)
00005CC8 317C 0070 0030             		move.w	#112,$30(a0)
00005CCE                            
00005CCE                            loc_5A8E:				; XREF: Obj8B_Index
00005CCE 5368 0030                  		subq.w	#1,$30(a0)
00005CD2 6A00                       		bpl.s	locret_5AA0
00005CD4 0868 0000 001C             		bchg	#0,$1C(a0)
00005CDA 117C 0002 0024             		move.b	#2,$24(a0)
00005CE0                            
00005CE0                            locret_5AA0:
00005CE0 4E75                       		rts	
00005CE2                            ; ===========================================================================
00005CE2                            Ani_obj8B:
00005CE2                            	include "_anim\obj8B.asm"
00005CE2                            ; ---------------------------------------------------------------------------
00005CE2                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005CE2                            ; ---------------------------------------------------------------------------
00005CE2 0000                       		dc.w byte_5AA8-Ani_obj8B
00005CE4 0000                       		dc.w byte_5AAC-Ani_obj8B
00005CE6 0000                       		dc.w byte_5AB0-Ani_obj8B
00005CE8 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005CEC 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005CF0 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005D02                            		even
00005D02                            		even
00005D02                            
00005D02                            ; ===========================================================================
00005D02                            ; ---------------------------------------------------------------------------
00005D02                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005D02                            ; ---------------------------------------------------------------------------
00005D02                            
00005D02                            Obj8C:					; XREF: Obj_Index
00005D02 7000                       		moveq	#0,d0
00005D04 1028 0024                  		move.b	$24(a0),d0
00005D08 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005D0C 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005D10 4EF9 0000 0000             		jmp	DisplaySprite
00005D16                            ; ===========================================================================
00005D16 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005D18 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005D1A                            ; ===========================================================================
00005D1A                            
00005D1A                            Obj8C_Main:				; XREF: Obj8C_Index
00005D1A 2248                       		movea.l	a0,a1
00005D1C 7400                       		moveq	#0,d2
00005D1E 7600                       		moveq	#0,d3
00005D20 7205                       		moveq	#5,d1
00005D22 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005D26                            
00005D26                            Obj8C_MakeEms:				; XREF: loc_5B42
00005D26 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005D2A 5429 0024                  		addq.b	#2,$24(a1)
00005D2E 237C 0000 59A2 0004        		move.l	#Map_obj88,4(a1)
00005D36 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005D3C 137C 0000 0001             		move.b	#0,1(a1)
00005D42 137C 0001 0018             		move.b	#1,$18(a1)
00005D48 337C 0104 0008             		move.w	#$104,8(a1)
00005D4E 337C 0120 0038             		move.w	#$120,$38(a1)
00005D54 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005D5A 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005D60 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005D66 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005D6A                            
00005D6A                            Obj8C_ChkEms:
00005D6A 7000                       		moveq	#0,d0
00005D6C 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005D70 5340                       		subq.w	#1,d0
00005D72 6500                       		bcs.s	loc_5B42
00005D74                            
00005D74                            Obj8C_ChkEmLoop:
00005D74 B433 0000                  		cmp.b	(a3,d0.w),d2
00005D78 6600                       		bne.s	loc_5B3E
00005D7A 5202                       		addq.b	#1,d2
00005D7C 60EC                       		bra.s	Obj8C_ChkEms
00005D7E                            ; ===========================================================================
00005D7E                            
00005D7E                            loc_5B3E:
00005D7E 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005D82                            
00005D82                            loc_5B42:
00005D82 1342 001A                  		move.b	d2,$1A(a1)
00005D86 5229 001A                  		addq.b	#1,$1A(a1)
00005D8A 5202                       		addq.b	#1,d2
00005D8C 137C 0080 0026             		move.b	#$80,$26(a1)
00005D92 1343 001E                  		move.b	d3,$1E(a1)
00005D96 1343 001F                  		move.b	d3,$1F(a1)
00005D9A 0643 000A                  		addi.w	#$A,d3
00005D9E 43E9 0040                  		lea	$40(a1),a1
00005DA2 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005DA6                            
00005DA6                            Obj8C_Move:				; XREF: Obj8C_Index
00005DA6 4A68 003E                  		tst.w	$3E(a0)
00005DAA 6700                       		beq.s	locret_5BBA
00005DAC 4A28 001E                  		tst.b	$1E(a0)
00005DB0 6700                       		beq.s	loc_5B78
00005DB2 5328 001E                  		subq.b	#1,$1E(a0)
00005DB6 6600                       		bne.s	loc_5B80
00005DB8                            
00005DB8                            loc_5B78:
00005DB8 3028 003E                  		move.w	$3E(a0),d0
00005DBC D168 0026                  		add.w	d0,$26(a0)
00005DC0                            
00005DC0                            loc_5B80:
00005DC0 1028 0026                  		move.b	$26(a0),d0
00005DC4 6700                       		beq.s	loc_5B8C
00005DC6 0C00 0080                  		cmpi.b	#$80,d0
00005DCA 6600                       		bne.s	loc_5B96
00005DCC                            
00005DCC                            loc_5B8C:
00005DCC 4268 003E                  		clr.w	$3E(a0)
00005DD0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005DD6                            
00005DD6                            loc_5B96:
00005DD6 4EB9 0000 29F6             		jsr	(CalcSine).l
00005DDC 7800                       		moveq	#0,d4
00005DDE 1828 003C                  		move.b	$3C(a0),d4
00005DE2 C3C4                       		muls.w	d4,d1
00005DE4 E081                       		asr.l	#8,d1
00005DE6 C1C4                       		muls.w	d4,d0
00005DE8 E080                       		asr.l	#8,d0
00005DEA D268 0038                  		add.w	$38(a0),d1
00005DEE D068 003A                  		add.w	$3A(a0),d0
00005DF2 3141 0008                  		move.w	d1,8(a0)
00005DF6 3140 000A                  		move.w	d0,$A(a0)
00005DFA                            
00005DFA                            locret_5BBA:
00005DFA 4E75                       		rts	
00005DFC                            ; ===========================================================================
00005DFC                            ; ---------------------------------------------------------------------------
00005DFC                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005DFC                            ; ---------------------------------------------------------------------------
00005DFC                            Map_obj8B:
00005DFC                            	include "_maps\obj8B.asm"
00005DFC                            ; ---------------------------------------------------------------------------
00005DFC                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005DFC                            ; ---------------------------------------------------------------------------
00005DFC 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005E00 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005E04 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005E08 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005E0C 08                         byte_5BCC:	dc.b 8
00005E0D E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005E12 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005E17 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005E1C F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005E21 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005E26 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005E2B 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005E30 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E35 08                         byte_5BF5:	dc.b 8
00005E36 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005E3B F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005E40 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005E45 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005E4A 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005E4F 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005E54 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005E59 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E5E 08                         byte_5C1E:	dc.b 8
00005E5F E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005E64 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005E69 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005E6E F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005E73 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005E78 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005E7D 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005E82 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E87 08                         byte_5C47:	dc.b 8
00005E88 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005E8D F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005E92 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005E97 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005E9C 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005EA1 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005EA6 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005EAB 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005EB0 0C                         byte_5C70:	dc.b $C
00005EB1 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005EB6 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005EBB 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005EC0 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005EC5 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005ECA F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005ECF 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005ED4 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005ED9 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005EDE 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005EE3 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005EE8 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005EED 0A                         byte_5CAD:	dc.b $A
00005EEE D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005EF3 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005EF8 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00005EFD D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00005F02 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00005F07 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00005F0C 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005F11 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005F16 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00005F1B 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00005F20 0A                         byte_5CE0:	dc.b $A
00005F21 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00005F26 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00005F2B EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00005F30 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00005F35 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00005F3A EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00005F3F 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005F44 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005F49 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00005F4E 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00005F53 0C                         byte_5D13:	dc.b $C
00005F54 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00005F59 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00005F5E 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00005F63 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00005F68 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00005F6D FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00005F72 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00005F77 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00005F7C 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00005F81 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00005F86 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005F8B 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005F90                            		even
00005F90                            		even
00005F90                            
00005F90                            ; ---------------------------------------------------------------------------
00005F90                            ; Ending sequence demos
00005F90                            ; ---------------------------------------------------------------------------
00005F90                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00005FBE                            		even
00005FBE                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00005FFE                            		even
00005FFE                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
0000602E                            		even
0000602E                            Demo_EndLZ:	incbin	demodata\e_lz.bin
0000605E                            		even
0000605E                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
0000607E                            		even
0000607E                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
0000609E                            		even
0000609E                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000060CE                            		even
000060CE                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
000060FE                            		even
000060FE                            
000060FE                            ; ---------------------------------------------------------------------------
000060FE                            ; Subroutine to	load level boundaries and start	locations
000060FE                            ; ---------------------------------------------------------------------------
000060FE                            
000060FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000060FE                            
000060FE                            
000060FE                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
000060FE 7000                       		moveq	#0,d0
00006100 11C0 F740                  		move.b	d0,($FFFFF740).w
00006104 11C0 F741                  		move.b	d0,($FFFFF741).w
00006108 11C0 F746                  		move.b	d0,($FFFFF746).w
0000610C 11C0 F748                  		move.b	d0,($FFFFF748).w
00006110 11C0 F742                  		move.b	d0,($FFFFF742).w
00006114 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006118 ED08                       		lsl.b	#6,d0
0000611A E848                       		lsr.w	#4,d0
0000611C 3200                       		move.w	d0,d1
0000611E D040                       		add.w	d0,d0
00006120 D041                       		add.w	d1,d0
00006122 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006126 3018                       		move.w	(a0)+,d0
00006128 31C0 F730                  		move.w	d0,($FFFFF730).w
0000612C 2018                       		move.l	(a0)+,d0
0000612E 21C0 F728                  		move.l	d0,($FFFFF728).w
00006132 21C0 F720                  		move.l	d0,($FFFFF720).w
00006136 2018                       		move.l	(a0)+,d0
00006138 21C0 F72C                  		move.l	d0,($FFFFF72C).w
0000613C 21C0 F724                  		move.l	d0,($FFFFF724).w
00006140 3038 F728                  		move.w	($FFFFF728).w,d0
00006144 0640 0240                  		addi.w	#$240,d0
00006148 31C0 F732                  		move.w	d0,($FFFFF732).w
0000614C 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006152 3018                       		move.w	(a0)+,d0
00006154 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006158 6000 0000                  		bra.w	LevSz_ChkLamp
0000615C                            ; ===========================================================================
0000615C                            ; ---------------------------------------------------------------------------
0000615C                            ; Level size array and ending start location array
0000615C                            ; ---------------------------------------------------------------------------
0000615C                            LevelSizeArray:	incbin	misc\lvl_size.bin
000062AC                            		even
000062AC                            
000062AC                            EndingStLocArray:
000062AC                            		incbin	misc\sloc_end.bin
000062CC                            		even
000062CC                            
000062CC                            ; ===========================================================================
000062CC                            
000062CC                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000062CC 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000062D0 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000062D2 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000062D8 3238 D008                  		move.w	($FFFFD008).w,d1
000062DC 3038 D00C                  		move.w	($FFFFD00C).w,d0
000062E0 6000                       		bra.s	loc_60D0
000062E2                            ; ===========================================================================
000062E2                            
000062E2                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000062E2 3038 FE10                  		move.w	($FFFFFE10).w,d0
000062E6 ED08                       		lsl.b	#6,d0
000062E8 E848                       		lsr.w	#4,d0
000062EA 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000062EE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000062F2 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000062F4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000062F8 5340                       		subq.w	#1,d0
000062FA E548                       		lsl.w	#2,d0
000062FC 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006300                            
00006300                            LevSz_SonicPos:
00006300 7200                       		moveq	#0,d1
00006302 3219                       		move.w	(a1)+,d1
00006304 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006308 7000                       		moveq	#0,d0
0000630A 3011                       		move.w	(a1),d0
0000630C 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006310                            
00006310                            loc_60D0:				; XREF: LevSz_ChkLamp
00006310 0441 00A0                  		subi.w	#$A0,d1
00006314 6400                       		bcc.s	loc_60D8
00006316 7200                       		moveq	#0,d1
00006318                            
00006318                            loc_60D8:
00006318 3438 F72A                  		move.w	($FFFFF72A).w,d2
0000631C B242                       		cmp.w	d2,d1
0000631E 6500                       		bcs.s	loc_60E2
00006320 3202                       		move.w	d2,d1
00006322                            
00006322                            loc_60E2:
00006322 31C1 F700                  		move.w	d1,($FFFFF700).w
00006326 0440 0060                  		subi.w	#$60,d0
0000632A 6400                       		bcc.s	loc_60EE
0000632C 7000                       		moveq	#0,d0
0000632E                            
0000632E                            loc_60EE:
0000632E B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006332 6D00                       		blt.s	loc_60F8
00006334 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006338                            
00006338                            loc_60F8:
00006338 31C0 F704                  		move.w	d0,($FFFFF704).w
0000633C 6100 0000                  		bsr.w	BgScrollSpeed
00006340 7000                       		moveq	#0,d0
00006342 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006346 E508                       		lsl.b	#2,d0
00006348 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
0000634E 6000 0000                  		bra.w	LevSz_Unk
00006352                            ; ===========================================================================
00006352                            ; ---------------------------------------------------------------------------
00006352                            ; Sonic	start location array
00006352                            ; ---------------------------------------------------------------------------
00006352                            StartLocArray:	incbin	misc\sloc_lev.bin
000063C2                            		even
000063C2                            
000063C2                            ; ---------------------------------------------------------------------------
000063C2                            ; Which	256x256	tiles contain loops or roll-tunnels
000063C2                            ; ---------------------------------------------------------------------------
000063C2                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
000063C2                            ; loop,	loop, tunnel, tunnel
000063C2                            ; ---------------------------------------------------------------------------
000063C2                            LoopTileNums:	incbin	misc\loopnums.bin
000063DE                            		even
000063DE                            
000063DE                            ; ===========================================================================
000063DE                            
000063DE                            LevSz_Unk:				; XREF: LevelSizeLoad
000063DE 7000                       		moveq	#0,d0
000063E0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000063E4 E748                       		lsl.w	#3,d0
000063E6 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000063EA 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000063EE 24D9                       		move.l	(a1)+,(a2)+
000063F0 24D9                       		move.l	(a1)+,(a2)+
000063F2 4E75                       		rts	
000063F4                            ; End of function LevelSizeLoad
000063F4                            
000063F4                            ; ===========================================================================
000063F4 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000063FC 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006404 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000640C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006414 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000641C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006424 0070 0100 0100 0100        		dc.l $700100, $1000100
0000642C                            
0000642C                            ; ---------------------------------------------------------------------------
0000642C                            ; Subroutine to	set scroll speed of some backgrounds
0000642C                            ; ---------------------------------------------------------------------------
0000642C                            
0000642C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000642C                            
0000642C                            
0000642C                            BgScrollSpeed:				; XREF: LevelSizeLoad
0000642C 4A38 FE30                  		tst.b	($FFFFFE30).w
00006430 6600                       		bne.s	loc_6206
00006432 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006436 31C0 F714                  		move.w	d0,($FFFFF714).w
0000643A 31C1 F708                  		move.w	d1,($FFFFF708).w
0000643E 31C1 F710                  		move.w	d1,($FFFFF710).w
00006442 31C1 F718                  		move.w	d1,($FFFFF718).w
00006446                            
00006446                            loc_6206:
00006446 7400                       		moveq	#0,d2
00006448 1438 FE10                  		move.b	($FFFFFE10).w,d2
0000644C D442                       		add.w	d2,d2
0000644E 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006452 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006456                            ; End of function BgScrollSpeed
00006456                            
00006456                            ; ===========================================================================
00006456 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
0000645A 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
0000645E 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006462 0000                       		dc.w BgScroll_End-BgScroll_Index
00006464                            ; ===========================================================================
00006464                            
00006464                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006464 42B8 F708                  		clr.l	($FFFFF708).w
00006468 42B8 F70C                  		clr.l	($FFFFF70C).w
0000646C 42B8 F714                  		clr.l	($FFFFF714).w
00006470 42B8 F71C                  		clr.l	($FFFFF71C).w
00006474 45F8 A800                  		lea	($FFFFA800).w,a2
00006478 429A                       		clr.l	(a2)+
0000647A 429A                       		clr.l	(a2)+
0000647C 429A                       		clr.l	(a2)+
0000647E 4E75                       		rts 
00006480                            ; ===========================================================================
00006480                            
00006480                            BgScroll_LZ:				; XREF: BgScroll_Index
00006480 E280                       		asr.l	#1,d0
00006482 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006486 4E75                       		rts	
00006488                            ; ===========================================================================
00006488                            
00006488                            BgScroll_MZ:				; XREF: BgScroll_Index
00006488 4E75                       		rts	
0000648A                            ; ===========================================================================
0000648A                            
0000648A                            BgScroll_SLZ:				; XREF: BgScroll_Index
0000648A E280                       		asr.l	#1,d0
0000648C 0640 00C0                  		addi.w	#$C0,d0
00006490 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006494 42B8 F708                  		clr.l	($FFFFF708).w
00006498 4E75                       		rts	
0000649A                            ; ===========================================================================
0000649A                            
0000649A                            BgScroll_SYZ:				; XREF: BgScroll_Index
0000649A E980                       		asl.l	#4,d0
0000649C 2400                       		move.l	d0,d2
0000649E E380                       		asl.l	#1,d0
000064A0 D082                       		add.l	d2,d0
000064A2 E080                       		asr.l	#8,d0
000064A4 5240                       		addq.w	#1,d0
000064A6 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000064AA 42B8 F708                  		clr.l	($FFFFF708).w
000064AE 4E75                       		rts	
000064B0                            ; ===========================================================================
000064B0                            
000064B0                            BgScroll_SBZ:				; XREF: BgScroll_Index
000064B0 0240 07F8                  		andi.w	#$7F8,d0
000064B4 E640                       		asr.w	#3,d0
000064B6 5240                       		addq.w	#1,d0
000064B8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000064BC 4E75                       		rts	
000064BE                            ; ===========================================================================
000064BE                            
000064BE                            BgScroll_End:				; XREF: BgScroll_Index
000064BE 3038 F700                  		move.w	($FFFFF700).w,d0
000064C2 E240                       		asr.w	#1,d0
000064C4 31C0 F708                  		move.w	d0,($FFFFF708).w
000064C8 31C0 F710                  		move.w	d0,($FFFFF710).w
000064CC E440                       		asr.w	#2,d0
000064CE 3200                       		move.w	d0,d1
000064D0 D040                       		add.w	d0,d0
000064D2 D041                       		add.w	d1,d0
000064D4 31C0 F718                  		move.w	d0,($FFFFF718).w
000064D8 42B8 F70C                  		clr.l	($FFFFF70C).w
000064DC 42B8 F714                  		clr.l	($FFFFF714).w
000064E0 42B8 F71C                  		clr.l	($FFFFF71C).w
000064E4 45F8 A800                  		lea	($FFFFA800).w,a2
000064E8 429A                       		clr.l	(a2)+
000064EA 429A                       		clr.l	(a2)+
000064EC 429A                       		clr.l	(a2)+
000064EE 4E75                       		rts
000064F0                            
000064F0                            ; ---------------------------------------------------------------------------
000064F0                            ; Background layer deformation subroutines
000064F0                            ; ---------------------------------------------------------------------------
000064F0                            
000064F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000064F0                            
000064F0                            
000064F0                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
000064F0 4A38 F744                  		tst.b	($FFFFF744).w
000064F4 6700                       		beq.s	loc_628E
000064F6 4E75                       		rts	
000064F8                            ; ===========================================================================
000064F8                            
000064F8                            loc_628E:
000064F8 4278 F754                  		clr.w	($FFFFF754).w
000064FC 4278 F756                  		clr.w	($FFFFF756).w
00006500 4278 F758                  		clr.w	($FFFFF758).w
00006504 4278 F75A                  		clr.w	($FFFFF75A).w
00006508 6100 0000                  		bsr.w	ScrollHoriz
0000650C 6100 0000                  		bsr.w	ScrollVertical
00006510 6100 0000                  		bsr.w	DynScrResizeLoad
00006514 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
0000651A 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006520 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006526 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000652C 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00006532 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006538 7000                       		moveq	#0,d0
0000653A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000653E D040                       		add.w	d0,d0
00006540 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006544 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006548                            ; End of function DeformBgLayer
00006548                            
00006548                            ; ===========================================================================
00006548                            ; ---------------------------------------------------------------------------
00006548                            ; Offset index for background layer deformation	code
00006548                            ; ---------------------------------------------------------------------------
00006548 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
0000654C 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006550 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006554 0000                       		dc.w Deform_GHZ-Deform_Index
00006556                            ; ---------------------------------------------------------------------------
00006556                            ; Green	Hill Zone background layer deformation code
00006556                            ; ---------------------------------------------------------------------------
00006556                            
00006556                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006556                            
00006556                            
00006556                            Deform_GHZ:
00006556 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000655A 48C4                       		ext.l	d4
0000655C EB84                       		asl.l	#5,d4
0000655E 2204                       		move.l	d4,d1
00006560 E384                       		asl.l	#1,d4
00006562 D881                       		add.l	d1,d4
00006564 7C00                       		moveq	#0,d6
00006566 6100 0000                  		bsr.w	ScrollBlock6
0000656A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000656E 48C4                       		ext.l	d4
00006570 EF84                       		asl.l	#7,d4
00006572 7C00                       		moveq	#0,d6
00006574 6100 0000                  		bsr.w	ScrollBlock5
00006578 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000657C 3038 F704                  		move.w	($FFFFF704).w,d0
00006580 0240 07FF                  		andi.w	#$7FF,d0
00006584 EA48                       		lsr.w	#5,d0
00006586 4440                       		neg.w	d0
00006588 0640 0020                  		addi.w	#$20,d0	; ' '
0000658C 6A00                       		bpl.s	Deform_GHZ_1
0000658E 7000                       		moveq	#0,d0
00006590                            
00006590                            Deform_GHZ_1:				; XREF: Deform_GHZ
00006590 3800                       		move.w	d0,d4
00006592 31C0 F618                  		move.w	d0,($FFFFF618).w
00006596 3038 F700                  		move.w	($FFFFF700).w,d0
0000659A 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000065A0 6600                       		bne.s	Deform_GHZ_2
000065A2 7000                       		moveq	#0,d0
000065A4                            
000065A4                            Deform_GHZ_2:				; XREF: Deform_GHZ
000065A4 4440                       		neg.w	d0
000065A6 4840                       		swap	d0
000065A8 45F8 A800                  		lea	($FFFFA800).w,a2
000065AC 069A 0001 0000             		addi.l	#$10000,(a2)+
000065B2 069A 0000 C000             		addi.l	#$C000,(a2)+
000065B8 069A 0000 8000             		addi.l	#$8000,(a2)+
000065BE 3038 A800                  		move.w	($FFFFA800).w,d0
000065C2 D078 F718                  		add.w	($FFFFF718).w,d0
000065C6 4440                       		neg.w	d0
000065C8 323C 001F                  		move.w	#$1F,d1
000065CC 9244                       		sub.w	d4,d1
000065CE 6500                       		bcs.s	Deform_GHZ_4
000065D0                            
000065D0                            Deform_GHZ_3:				; XREF: Deform_GHZ
000065D0 22C0                       		move.l	d0,(a1)+
000065D2 51C9 FFFC                  		dbf	d1,Deform_GHZ_3
000065D6                            
000065D6                            Deform_GHZ_4:				; XREF: Deform_GHZ
000065D6 3038 A804                  		move.w	($FFFFA804).w,d0
000065DA D078 F718                  		add.w	($FFFFF718).w,d0
000065DE 4440                       		neg.w	d0
000065E0 323C 000F                  		move.w	#$F,d1
000065E4                            
000065E4                            Deform_GHZ_5:				; XREF: Deform_GHZ
000065E4 22C0                       		move.l	d0,(a1)+
000065E6 51C9 FFFC                  		dbf	d1,Deform_GHZ_5
000065EA 3038 A808                  		move.w	($FFFFA808).w,d0
000065EE D078 F718                  		add.w	($FFFFF718).w,d0
000065F2 4440                       		neg.w	d0
000065F4 323C 000F                  		move.w	#$F,d1
000065F8                            
000065F8                            Deform_GHZ_6:				; XREF: Deform_GHZ
000065F8 22C0                       		move.l	d0,(a1)+
000065FA 51C9 FFFC                  		dbf	d1,Deform_GHZ_6
000065FE 323C 002F                  		move.w	#$2F,d1	; '/'
00006602 3038 F718                  		move.w	($FFFFF718).w,d0
00006606 4440                       		neg.w	d0
00006608                            
00006608                            Deform_GHZ_7:				; XREF: Deform_GHZ
00006608 22C0                       		move.l	d0,(a1)+
0000660A 51C9 FFFC                  		dbf	d1,Deform_GHZ_7
0000660E 323C 0027                  		move.w	#$27,d1	; '''
00006612 3038 F710                  		move.w	($FFFFF710).w,d0
00006616 4440                       		neg.w	d0
00006618                            
00006618                            Deform_GHZ_8:				; XREF: Deform_GHZ
00006618 22C0                       		move.l	d0,(a1)+
0000661A 51C9 FFFC                  		dbf	d1,Deform_GHZ_8
0000661E 3038 F710                  		move.w	($FFFFF710).w,d0
00006622 3438 F700                  		move.w	($FFFFF700).w,d2
00006626 9440                       		sub.w	d0,d2
00006628 48C2                       		ext.l	d2
0000662A E182                       		asl.l	#8,d2
0000662C 85FC 0068                  		divs.w	#$68,d2	; 'h'
00006630 48C2                       		ext.l	d2
00006632 E182                       		asl.l	#8,d2
00006634 7600                       		moveq	#0,d3
00006636 3600                       		move.w	d0,d3
00006638 323C 0047                  		move.w	#$47,d1	; 'G'
0000663C D244                       		add.w	d4,d1
0000663E                            
0000663E                            Deform_GHZ_9:				; XREF: Deform_GHZ
0000663E 3003                       		move.w	d3,d0
00006640 4440                       		neg.w	d0
00006642 22C0                       		move.l	d0,(a1)+
00006644 4843                       		swap	d3
00006646 D682                       		add.l	d2,d3
00006648 4843                       		swap	d3
0000664A 51C9 FFF2                  		dbf	d1,Deform_GHZ_9
0000664E 4E75                       		rts	
00006650                            ; End of function Deform_GHZ
00006650                            
00006650                            ; ===========================================================================
00006650                            ; ---------------------------------------------------------------------------
00006650                            ; Scroll routine for Labyrinth Zone - optimised by MarkeyJester
00006650                            ; ---------------------------------------------------------------------------
00006650                            
00006650                            Deform_LZ:
00006650 7007                       		moveq	#$07,d0					; prepare multiplication 100 / 2 for BG scrolling
00006652 3838 F73A                  		move.w	($FFFFF73A).w,d4			; load horizontal movement distance (Since last frame)
00006656 48C4                       		ext.l	d4					; extend to long-word signed
00006658 E1A4                       		asl.l	d0,d4					; align as fixed point 16, but divide by 2 for BG
0000665A 3A38 F73C                  		move.w	($FFFFF73C).w,d5			; load vertical movement distance (Since last frame)
0000665E 48C5                       		ext.l	d5					; extend to long-word signed
00006660 E1A5                       		asl.l	d0,d5					; align as fixed point 16, but divide by 2 for BG
00006662 6100 0000                  		bsr.w	ScrollBlock1				; adjust BG scroll positions (and set draw code direction flags)
00006666 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w		; set BG V-scroll position
0000666C 43F8 CC00                  		lea	($FFFFCC00).w,a1			; load H-scroll buffer
00006670 3038 F700                  		move.w	($FFFFF700).w,d0			; load FG X position
00006674 4440                       		neg.w	d0					; reverse
00006676 4840                       		swap	d0					; send to upper word
00006678 3038 F708                  		move.w	($FFFFF708).w,d0			; load BG X position
0000667C 4440                       		neg.w	d0					; reverse
0000667E 7600                       		moveq	#$00,d3					; clear d3
00006680 1638 F7D8                  		move.b	($FFFFF7D8).w,d3			; load wave-scroll timer
00006684 0678 0080 F7D8             		addi.w	#$0080,($FFFFF7D8).w			; increase wave-scroll timer
0000668A 343C 00E0                  		move.w	#$00E0,d2				; prepare water-line count
0000668E 3238 F646                  		move.w	($FFFFF646).w,d1			; load water line position
00006692 9278 F704                  		sub.w	($FFFFF704).w,d1			; minus FG Y position
00006696 6B00                       		bmi.s	DLZ_Water				; if the screen is already underwater, branch
00006698 B242                       		cmp.w	d2,d1					; is the water line below the screen?
0000669A 6F00                       		ble.s	DLZ_NoWater				; if not, branch
0000669C 3202                       		move.w	d2,d1					; set at maximum
0000669E                            
0000669E                            DLZ_NoWater:
0000669E 9441                       		sub.w	d1,d2					; subtract from water-line count
000066A0 D601                       		add.b	d1,d3					; advance scroll wave timer to correct amount
000066A2 5301                       		subq.b	#$01,d1					; decrease above water count
000066A4 6500                       		bcs.s	DLZ_Water				; if finished, branch
000066A6                            
000066A6                            DLZ_Above:
000066A6 22C0                       		move.l	d0,(a1)+				; save scroll position to buffer
000066A8 51C9 FFFC                  		dbf	d1,DLZ_Above				; repeat for all above water lines
000066AC                            
000066AC                            DLZ_Water:
000066AC 5302                       		subq.b	#$01,d2					; decrease below water count
000066AE 6500                       		bcs.s	DLZ_Finish				; if finished, branch
000066B0 3200                       		move.w	d0,d1					; copy BG position back to d1
000066B2 4840                       		swap	d0					; move FG position back to lower word in d0
000066B4 3803                       		move.w	d3,d4					; copy sroll timer for BG use
000066B6 D638 F705                  		add.b	($FFFFF704+$01).w,d3			; add FG Y position
000066BA D838 F70D                  		add.b	($FFFFF70C+$01).w,d4			; add BG Y position
000066BE D643                       		add.w	d3,d3					; multiply by word size (2)
000066C0 D844                       		add.w	d4,d4					; ''
000066C2 47F9 0000 0000             		lea	(DLZ_WaveBG).l,a3			; load beginning of BG wave data
000066C8 D6C4                       		adda.w	d4,a3					; advance to correct starting point
000066CA 1813                       		move.b	(a3),d4					; get current position byte
000066CC E404                       		asr.b	#$02,d4					; get only the position bits
000066CE 4884                       		ext.w	d4					; extend to word
000066D0 D244                       		add.w	d4,d1					; adjust BG's current position
000066D2 45FB 3000                  		lea	DLZ_WaveFG(pc,d3.w),a2			; load correct starting point of FG wave data
000066D6 1812                       		move.b	(a2),d4					; get current position byte
000066D8 E404                       		asr.b	#$02,d4					; get only the position bits
000066DA 4884                       		ext.w	d4					; extend to word
000066DC D044                       		add.w	d4,d0					; adjust FG's current position
000066DE                            
000066DE                            DLZ_Below:
000066DE D05A                       		add.w	(a2)+,d0				; alter FG horizontal position
000066E0 32C0                       		move.w	d0,(a1)+				; save to scroll buffer
000066E2 D25B                       		add.w	(a3)+,d1				; alter BG horizontal position
000066E4 32C1                       		move.w	d1,(a1)+				; save to scroll buffer
000066E6 51CA FFF6                  		dbf	d2,DLZ_Below				; repeat for all below water lines
000066EA                            
000066EA                            DLZ_Finish:
000066EA 4E75                       		rts						; return
000066EC                            
000066EC                            ; ---------------------------------------------------------------------------
000066EC                            ; Scroll data for the FG
000066EC                            ; ---------------------------------------------------------------------------
000066EC                            
000066EC                            DLZ_WaveFG:
000066EC                            		rept	$02
000066EC                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC                            		dc.w	$03FF,$FC00,$FFFF,$F800,$FBFF,$F400,$F400,$F400,$F401,$F800,$F801,$FC00,$FC01,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000066EC 0001 0400 0401 0800 0801+  		endr
00006AEC                            
00006AEC                            ; ---------------------------------------------------------------------------
00006AEC                            ; Scroll data for the BG
00006AEC                            ; ---------------------------------------------------------------------------
00006AEC                            
00006AEC                            DLZ_WaveBG:	rept	$04
00006AEC                            		dc.w	$FC01,$0000,$0000,$0000,$0000,$0000,$0001,$0400,$0400,$0400,$0400,$0401,$0800,$0800,$0800,$0800
00006AEC                            		dc.w	$0800,$0800,$0801,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00
00006AEC                            		dc.w	$0C01,$13FF,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0FFF
00006AEC                            		dc.w	$0800,$0800,$0800,$0800,$0800,$0800,$0BFF,$0400,$0400,$0400,$0400,$07FF,$0000,$0000,$0000,$0000
00006AEC                            		dc.w	$0000,$03FF,$FC00,$FC00,$FC00,$FC00,$FFFF,$F800,$F800,$F800,$F800,$FBFF,$F400,$F400,$F400,$F400
00006AEC                            		dc.w	$F400,$F400,$F7FF,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000
00006AEC                            		dc.w	$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F001
00006AEC                            		dc.w	$F400,$F400,$F400,$F400,$F400,$F400,$F401,$F800,$F800,$F800,$F800,$F801,$FC00,$FC00,$FC00,$FC00
00006AEC FC01 0000 0000 0000 0000+  		endr
00006EEC                            
00006EEC                            ; ===========================================================================
00006EEC                            
00006EEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EEC                            
00006EEC                            
00006EEC                            Deform_MZ:
00006EEC 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006EF0 48C4                       		ext.l	d4
00006EF2 ED84                       		asl.l	#6,d4
00006EF4 2204                       		move.l	d4,d1
00006EF6 E384                       		asl.l	#1,d4
00006EF8 D881                       		add.l	d1,d4
00006EFA 7C02                       		moveq	#2,d6
00006EFC 6100 0000                  		bsr.w	ScrollBlock4
00006F00 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006F04 48C4                       		ext.l	d4
00006F06 ED84                       		asl.l	#6,d4
00006F08 7C06                       		moveq	#6,d6
00006F0A 6100 0000                  		bsr.w	ScrollBlock6
00006F0E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006F12 48C4                       		ext.l	d4
00006F14 EF84                       		asl.l	#7,d4
00006F16 7C04                       		moveq	#4,d6
00006F18 6100 0000                  		bsr.w	ScrollBlock5
00006F1C 303C 0200                  		move.w	#$200,d0
00006F20 3238 F704                  		move.w	($FFFFF704).w,d1
00006F24 0441 01C8                  		subi.w	#$1C8,d1
00006F28 6500                       		bcs.s	Deform_MZ_1
00006F2A 3401                       		move.w	d1,d2
00006F2C D241                       		add.w	d1,d1
00006F2E D242                       		add.w	d2,d1
00006F30 E441                       		asr.w	#2,d1
00006F32 D041                       		add.w	d1,d0
00006F34                            
00006F34                            Deform_MZ_1:				; XREF: Deform_MZ
00006F34 31C0 F714                  		move.w	d0,($FFFFF714).w
00006F38 31C0 F71C                  		move.w	d0,($FFFFF71C).w
00006F3C 6100 0000                  		bsr.w	ScrollBlock3
00006F40 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006F46 1038 F756                  		move.b	($FFFFF756).w,d0
00006F4A 8038 F758                  		or.b	($FFFFF758).w,d0
00006F4E 8138 F75A                  		or.b	d0,($FFFFF75A).w
00006F52 4238 F756                  		clr.b	($FFFFF756).w
00006F56 4238 F758                  		clr.b	($FFFFF758).w
00006F5A 43F8 A800                  		lea	($FFFFA800).w,a1
00006F5E 3438 F700                  		move.w	($FFFFF700).w,d2
00006F62 4442                       		neg.w	d2
00006F64 3002                       		move.w	d2,d0
00006F66 E440                       		asr.w	#2,d0
00006F68 9042                       		sub.w	d2,d0
00006F6A 48C0                       		ext.l	d0
00006F6C E780                       		asl.l	#3,d0
00006F6E 81FC 0005                  		divs.w	#5,d0
00006F72 48C0                       		ext.l	d0
00006F74 E980                       		asl.l	#4,d0
00006F76 E180                       		asl.l	#8,d0
00006F78 7600                       		moveq	#0,d3
00006F7A 3602                       		move.w	d2,d3
00006F7C E243                       		asr.w	#1,d3
00006F7E 323C 0004                  		move.w	#4,d1
00006F82                            
00006F82                            Deform_MZ_2:				; XREF: Deform_MZ
00006F82 32C3                       		move.w	d3,(a1)+
00006F84 4843                       		swap	d3
00006F86 D680                       		add.l	d0,d3
00006F88 4843                       		swap	d3
00006F8A 51C9 FFF6                  		dbf	d1,Deform_MZ_2
00006F8E 3038 F718                  		move.w	($FFFFF718).w,d0
00006F92 4440                       		neg.w	d0
00006F94 323C 0001                  		move.w	#1,d1
00006F98                            
00006F98                            Deform_MZ_3:				; XREF: Deform_MZ
00006F98 32C0                       		move.w	d0,(a1)+
00006F9A 51C9 FFFC                  		dbf	d1,Deform_MZ_3
00006F9E 3038 F710                  		move.w	($FFFFF710).w,d0
00006FA2 4440                       		neg.w	d0
00006FA4 323C 0008                  		move.w	#8,d1
00006FA8                            
00006FA8                            Deform_MZ_4:				; XREF: Deform_MZ
00006FA8 32C0                       		move.w	d0,(a1)+
00006FAA 51C9 FFFC                  		dbf	d1,Deform_MZ_4
00006FAE 3038 F708                  		move.w	($FFFFF708).w,d0
00006FB2 4440                       		neg.w	d0
00006FB4 323C 000F                  		move.w	#$F,d1
00006FB8                            
00006FB8                            Deform_MZ_5:				; XREF: Deform_MZ
00006FB8 32C0                       		move.w	d0,(a1)+
00006FBA 51C9 FFFC                  		dbf	d1,Deform_MZ_5
00006FBE 45F8 A800                  		lea	($FFFFA800).w,a2
00006FC2 3038 F70C                  		move.w	($FFFFF70C).w,d0
00006FC6 0440 0200                  		subi.w	#$200,d0
00006FCA 3400                       		move.w	d0,d2
00006FCC 0C40 0100                  		cmpi.w	#$100,d0
00006FD0 6500                       		bcs.s	Deform_MZ_6
00006FD2 303C 0100                  		move.w	#$100,d0
00006FD6                            
00006FD6                            Deform_MZ_6:				; XREF: Deform_MZ
00006FD6 0240 01F0                  		andi.w	#$1F0,d0
00006FDA E648                       		lsr.w	#3,d0
00006FDC 45F2 0000                  		lea	(a2,d0.w),a2
00006FE0 6000 0000                  		bra.w	Deform_All
00006FE4                            ; ===========================================================================
00006FE4                            
00006FE4                            Deform_SLZ:
00006FE4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006FE8 48C5                       		ext.l	d5
00006FEA EF85                       		asl.l	#7,d5
00006FEC 6100 0000                  		bsr.w	ScrollBlock2
00006FF0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006FF6 43F8 A800                  		lea	($FFFFA800).w,a1
00006FFA 3438 F700                  		move.w	($FFFFF700).w,d2
00006FFE 4442                       		neg.w	d2
00007000 3002                       		move.w	d2,d0
00007002 E640                       		asr.w	#3,d0
00007004 9042                       		sub.w	d2,d0
00007006 48C0                       		ext.l	d0
00007008 E980                       		asl.l	#4,d0
0000700A 81FC 001C                  		divs.w	#$1C,d0
0000700E 48C0                       		ext.l	d0
00007010 E980                       		asl.l	#4,d0
00007012 E180                       		asl.l	#8,d0
00007014 7600                       		moveq	#0,d3
00007016 3602                       		move.w	d2,d3
00007018 323C 001B                  		move.w	#$1B,d1
0000701C                            
0000701C                            Deform_SLZ_1:				; XREF: Deform_MZ
0000701C 32C3                       		move.w	d3,(a1)+
0000701E 4843                       		swap	d3
00007020 D680                       		add.l	d0,d3
00007022 4843                       		swap	d3
00007024 51C9 FFF6                  		dbf	d1,Deform_SLZ_1
00007028 3002                       		move.w	d2,d0
0000702A E640                       		asr.w	#3,d0
0000702C 3200                       		move.w	d0,d1
0000702E E241                       		asr.w	#1,d1
00007030 D041                       		add.w	d1,d0
00007032 323C 0004                  		move.w	#4,d1
00007036                            
00007036                            Deform_SLZ_2:				; XREF: Deform_MZ
00007036 32C0                       		move.w	d0,(a1)+
00007038 51C9 FFFC                  		dbf	d1,Deform_SLZ_2
0000703C 3002                       		move.w	d2,d0
0000703E E440                       		asr.w	#2,d0
00007040 323C 0004                  		move.w	#4,d1
00007044                            
00007044                            Deform_SLZ_3:				; XREF: Deform_MZ
00007044 32C0                       		move.w	d0,(a1)+
00007046 51C9 FFFC                  		dbf	d1,Deform_SLZ_3
0000704A 3002                       		move.w	d2,d0
0000704C E240                       		asr.w	#1,d0
0000704E 323C 001D                  		move.w	#$1D,d1
00007052                            
00007052                            Deform_SLZ_4:				; XREF: Deform_MZ
00007052 32C0                       		move.w	d0,(a1)+
00007054 51C9 FFFC                  		dbf	d1,Deform_SLZ_4
00007058 45F8 A800                  		lea	($FFFFA800).w,a2
0000705C 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007060 3400                       		move.w	d0,d2
00007062 0440 00C0                  		subi.w	#$C0,d0	; 'À'
00007066 0240 03F0                  		andi.w	#$3F0,d0
0000706A E648                       		lsr.w	#3,d0
0000706C 45F2 0000                  		lea	(a2,d0.w),a2
00007070                            
00007070                            Deform_All:				; XREF: Deform_MZ, Deform_SYZ, ...
00007070 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007074 323C 000E                  		move.w	#$E,d1
00007078 3038 F700                  		move.w	($FFFFF700).w,d0
0000707C 4440                       		neg.w	d0
0000707E 4840                       		swap	d0
00007080 0242 000F                  		andi.w	#$F,d2
00007084 D442                       		add.w	d2,d2
00007086 301A                       		move.w	(a2)+,d0
00007088 4EFB 2000                  		jmp	Deform_All_2(pc,d2.w)
0000708C                            ; End of function Deform_MZ
0000708C                            
0000708C                            ; ===========================================================================
0000708C                            
0000708C                            Deform_All_1:				; XREF: Deform_All
0000708C 301A                       		move.w	(a2)+,d0
0000708E                            
0000708E                            Deform_All_2:
0000708E 22C0                       		move.l	d0,(a1)+
00007090 22C0                       		move.l	d0,(a1)+
00007092 22C0                       		move.l	d0,(a1)+
00007094 22C0                       		move.l	d0,(a1)+
00007096 22C0                       		move.l	d0,(a1)+
00007098 22C0                       		move.l	d0,(a1)+
0000709A 22C0                       		move.l	d0,(a1)+
0000709C 22C0                       		move.l	d0,(a1)+
0000709E 22C0                       		move.l	d0,(a1)+
000070A0 22C0                       		move.l	d0,(a1)+
000070A2 22C0                       		move.l	d0,(a1)+
000070A4 22C0                       		move.l	d0,(a1)+
000070A6 22C0                       		move.l	d0,(a1)+
000070A8 22C0                       		move.l	d0,(a1)+
000070AA 22C0                       		move.l	d0,(a1)+
000070AC 22C0                       		move.l	d0,(a1)+
000070AE 51C9 FFDC                  		dbf	d1,Deform_All_1
000070B2 4E75                       		rts	
000070B4                            
000070B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070B4                            
000070B4                            
000070B4                            Deform_SYZ:
000070B4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000070B8 48C5                       		ext.l	d5
000070BA E985                       		asl.l	#4,d5
000070BC 2205                       		move.l	d5,d1
000070BE E385                       		asl.l	#1,d5
000070C0 DA81                       		add.l	d1,d5
000070C2 6100 0000                  		bsr.w	ScrollBlock2
000070C6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000070CC 43F8 A800                  		lea	($FFFFA800).w,a1
000070D0 3438 F700                  		move.w	($FFFFF700).w,d2
000070D4 4442                       		neg.w	d2
000070D6 3002                       		move.w	d2,d0
000070D8 E640                       		asr.w	#3,d0
000070DA 9042                       		sub.w	d2,d0
000070DC 48C0                       		ext.l	d0
000070DE E780                       		asl.l	#3,d0
000070E0 81FC 0008                  		divs.w	#8,d0
000070E4 48C0                       		ext.l	d0
000070E6 E980                       		asl.l	#4,d0
000070E8 E180                       		asl.l	#8,d0
000070EA 7600                       		moveq	#0,d3
000070EC 3602                       		move.w	d2,d3
000070EE E243                       		asr.w	#1,d3
000070F0 323C 0007                  		move.w	#7,d1
000070F4                            
000070F4                            Deform_SYZ_1:				; XREF: Deform_SYZ
000070F4 32C3                       		move.w	d3,(a1)+
000070F6 4843                       		swap	d3
000070F8 D680                       		add.l	d0,d3
000070FA 4843                       		swap	d3
000070FC 51C9 FFF6                  		dbf	d1,Deform_SYZ_1
00007100 3002                       		move.w	d2,d0
00007102 E640                       		asr.w	#3,d0
00007104 323C 0004                  		move.w	#4,d1
00007108                            
00007108                            Deform_SYZ_2:				; XREF: Deform_SYZ
00007108 32C0                       		move.w	d0,(a1)+
0000710A 51C9 FFFC                  		dbf	d1,Deform_SYZ_2
0000710E 3002                       		move.w	d2,d0
00007110 E440                       		asr.w	#2,d0
00007112 323C 0005                  		move.w	#5,d1
00007116                            
00007116                            Deform_SYZ_3:				; XREF: Deform_SYZ
00007116 32C0                       		move.w	d0,(a1)+
00007118 51C9 FFFC                  		dbf	d1,Deform_SYZ_3
0000711C 3002                       		move.w	d2,d0
0000711E 3202                       		move.w	d2,d1
00007120 E241                       		asr.w	#1,d1
00007122 9041                       		sub.w	d1,d0
00007124 48C0                       		ext.l	d0
00007126 E980                       		asl.l	#4,d0
00007128 81FC 000E                  		divs.w	#$E,d0
0000712C 48C0                       		ext.l	d0
0000712E E980                       		asl.l	#4,d0
00007130 E180                       		asl.l	#8,d0
00007132 7600                       		moveq	#0,d3
00007134 3602                       		move.w	d2,d3
00007136 E243                       		asr.w	#1,d3
00007138 323C 000D                  		move.w	#$D,d1
0000713C                            
0000713C                            Deform_SYZ_4:				; XREF: Deform_SYZ
0000713C 32C3                       		move.w	d3,(a1)+
0000713E 4843                       		swap	d3
00007140 D680                       		add.l	d0,d3
00007142 4843                       		swap	d3
00007144 51C9 FFF6                  		dbf	d1,Deform_SYZ_4
00007148 45F8 A800                  		lea	($FFFFA800).w,a2
0000714C 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007150 3400                       		move.w	d0,d2
00007152 0240 01F0                  		andi.w	#$1F0,d0
00007156 E648                       		lsr.w	#3,d0
00007158 45F2 0000                  		lea	(a2,d0.w),a2
0000715C 6000 FF12                  		bra.w	Deform_All
00007160                            ; End of function Deform_SYZ
00007160                            
00007160                            
00007160                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007160                            
00007160                            
00007160                            Deform_SBZ:
00007160 4A38 FE11                  		tst.b	($FFFFFE11).w
00007164 6600 0000                  		bne.w	Deform_SBZ_Act2
00007168 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000716C 48C4                       		ext.l	d4
0000716E EF84                       		asl.l	#7,d4
00007170 7C02                       		moveq	#2,d6
00007172 6100 0000                  		bsr.w	ScrollBlock4
00007176 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000717A 48C4                       		ext.l	d4
0000717C ED84                       		asl.l	#6,d4
0000717E 7C06                       		moveq	#6,d6
00007180 6100 0000                  		bsr.w	ScrollBlock6
00007184 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007188 48C4                       		ext.l	d4
0000718A EB84                       		asl.l	#5,d4
0000718C 2204                       		move.l	d4,d1
0000718E E384                       		asl.l	#1,d4
00007190 D881                       		add.l	d1,d4
00007192 7C04                       		moveq	#4,d6
00007194 6100 0000                  		bsr.w	ScrollBlock5
00007198 7800                       		moveq	#0,d4
0000719A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000719E 48C5                       		ext.l	d5
000071A0 EB85                       		asl.l	#5,d5
000071A2 6100 0000                  		bsr.w	ScrollBlock1_2
000071A6 3038 F70C                  		move.w	($FFFFF70C).w,d0
000071AA 31C0 F714                  		move.w	d0,($FFFFF714).w
000071AE 31C0 F71C                  		move.w	d0,($FFFFF71C).w
000071B2 31C0 F618                  		move.w	d0,($FFFFF618).w
000071B6 1038 F756                  		move.b	($FFFFF756).w,d0
000071BA 8038 F75A                  		or.b	($FFFFF75A).w,d0
000071BE 8138 F758                  		or.b	d0,($FFFFF758).w
000071C2 4238 F756                  		clr.b	($FFFFF756).w
000071C6 4238 F75A                  		clr.b	($FFFFF75A).w
000071CA 43F8 A800                  		lea	($FFFFA800).w,a1
000071CE 3438 F700                  		move.w	($FFFFF700).w,d2
000071D2 4442                       		neg.w	d2
000071D4 E442                       		asr.w	#2,d2
000071D6 3002                       		move.w	d2,d0
000071D8 E240                       		asr.w	#1,d0
000071DA 9042                       		sub.w	d2,d0
000071DC 48C0                       		ext.l	d0
000071DE E780                       		asl.l	#3,d0
000071E0 81FC 0004                  		divs.w	#4,d0
000071E4 48C0                       		ext.l	d0
000071E6 E980                       		asl.l	#4,d0
000071E8 E180                       		asl.l	#8,d0
000071EA 7600                       		moveq	#0,d3
000071EC 3602                       		move.w	d2,d3
000071EE 323C 0003                  		move.w	#3,d1
000071F2                            
000071F2                            Deform_SBZ_1:				; XREF: Deform_SBZ
000071F2 32C3                       		move.w	d3,(a1)+
000071F4 4843                       		swap	d3
000071F6 D680                       		add.l	d0,d3
000071F8 4843                       		swap	d3
000071FA 51C9 FFF6                  		dbf	d1,Deform_SBZ_1
000071FE 3038 F718                  		move.w	($FFFFF718).w,d0
00007202 4440                       		neg.w	d0
00007204 323C 0009                  		move.w	#9,d1
00007208                            
00007208                            Deform_SBZ_2:				; XREF: Deform_SBZ
00007208 32C0                       		move.w	d0,(a1)+
0000720A 51C9 FFFC                  		dbf	d1,Deform_SBZ_2
0000720E 3038 F710                  		move.w	($FFFFF710).w,d0
00007212 4440                       		neg.w	d0
00007214 323C 0006                  		move.w	#6,d1
00007218                            
00007218                            Deform_SBZ_3:				; XREF: Deform_SBZ
00007218 32C0                       		move.w	d0,(a1)+
0000721A 51C9 FFFC                  		dbf	d1,Deform_SBZ_3
0000721E 3038 F708                  		move.w	($FFFFF708).w,d0
00007222 4440                       		neg.w	d0
00007224 323C 000A                  		move.w	#$A,d1
00007228                            
00007228                            Deform_SBZ_4:				; XREF: Deform_SBZ
00007228 32C0                       		move.w	d0,(a1)+
0000722A 51C9 FFFC                  		dbf	d1,Deform_SBZ_4
0000722E 45F8 A800                  		lea	($FFFFA800).w,a2
00007232 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007236 3400                       		move.w	d0,d2
00007238 0240 01F0                  		andi.w	#$1F0,d0
0000723C E648                       		lsr.w	#3,d0
0000723E 45F2 0000                  		lea	(a2,d0.w),a2
00007242 6000 FE2C                  		bra.w	Deform_All
00007246                            ; ===========================================================================
00007246                            
00007246                            Deform_SBZ_Act2:			; XREF: Deform_SBZ
00007246 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000724A 48C4                       		ext.l	d4
0000724C ED84                       		asl.l	#6,d4
0000724E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007252 48C5                       		ext.l	d5
00007254 EB85                       		asl.l	#5,d5
00007256 6100 0000                  		bsr.w	ScrollBlock1
0000725A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007260 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007264 323C 00DF                  		move.w	#$DF,d1	; 'ß'
00007268 3038 F700                  		move.w	($FFFFF700).w,d0
0000726C 4440                       		neg.w	d0
0000726E 4840                       		swap	d0
00007270 3038 F708                  		move.w	($FFFFF708).w,d0
00007274 4440                       		neg.w	d0
00007276                            
00007276                            Deform_SBZ_Act2_1:			; XREF: Deform_SBZ
00007276 22C0                       		move.l	d0,(a1)+
00007278 51C9 FFFC                  		dbf	d1,Deform_SBZ_Act2_1
0000727C 4E75                       		rts	
0000727E                            ; End of function Deform_SBZ
0000727E                            
0000727E                            ; ---------------------------------------------------------------------------
0000727E                            ; Subroutine to	scroll the level horizontally as Sonic moves
0000727E                            ; ---------------------------------------------------------------------------
0000727E                            
0000727E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000727E                            
0000727E                            
0000727E                            ScrollHoriz:				; XREF: DeformBgLayer
0000727E 3838 F700                  		move.w	($FFFFF700).w,d4
00007282 6100                       		bsr.s	ScrollHoriz2
00007284 3038 F700                  		move.w	($FFFFF700).w,d0
00007288 0240 0010                  		andi.w	#$10,d0
0000728C 1238 F74A                  		move.b	($FFFFF74A).w,d1
00007290 B300                       		eor.b	d1,d0
00007292 6600                       		bne.s	locret_65B0
00007294 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
0000729A 3038 F700                  		move.w	($FFFFF700).w,d0
0000729E 9044                       		sub.w	d4,d0
000072A0 6A00                       		bpl.s	loc_65AA
000072A2 08F8 0002 F754             		bset	#2,($FFFFF754).w
000072A8 4E75                       		rts	
000072AA                            ; ===========================================================================
000072AA                            
000072AA                            loc_65AA:
000072AA 08F8 0003 F754             		bset	#3,($FFFFF754).w
000072B0                            
000072B0                            locret_65B0:
000072B0 4E75                       		rts	
000072B2                            ; End of function ScrollHoriz
000072B2                            
000072B2                            
000072B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072B2                            
000072B2                            
000072B2                            ScrollHoriz2:				; XREF: ScrollHoriz
000072B2 3038 D008                  		move.w	($FFFFD008).w,d0
000072B6 9078 F700                  		sub.w	($FFFFF700).w,d0
000072BA 0440 0090                  		subi.w	#$90,d0
000072BE 6B00                       		bmi.s	loc_65F6				; cs to mi (for negative)
000072C0 0440 0010                  		subi.w	#$10,d0
000072C4 6A00                       		bpl.s	loc_65CC				; cc to pl (for negative)
000072C6 4278 F73A                  		clr.w	($FFFFF73A).w
000072CA 4E75                       		rts
000072CC                            ; ===========================================================================
000072CC                            
000072CC                            loc_65CC:
000072CC 0C40 0010                  		cmpi.w	#$10,d0
000072D0 6500                       		bcs.s	loc_65D6
000072D2 303C 0010                  		move.w	#$10,d0
000072D6                            
000072D6                            loc_65D6:
000072D6 D078 F700                  		add.w	($FFFFF700).w,d0
000072DA B078 F72A                  		cmp.w	($FFFFF72A).w,d0
000072DE 6D00                       		blt.s	loc_65E4
000072E0 3038 F72A                  		move.w	($FFFFF72A).w,d0
000072E4                            
000072E4                            loc_65E4:
000072E4 3200                       		move.w	d0,d1
000072E6 9278 F700                  		sub.w	($FFFFF700).w,d1
000072EA E141                       		asl.w	#8,d1
000072EC 31C0 F700                  		move.w	d0,($FFFFF700).w
000072F0 31C1 F73A                  		move.w	d1,($FFFFF73A).w
000072F4 4E75                       		rts	
000072F6                            ; ===========================================================================
000072F6                            
000072F6                            loc_65F6:				; XREF: ScrollHoriz2
000072F6 D078 F700                  		add.w	($FFFFF700).w,d0
000072FA B078 F728                  		cmp.w	($FFFFF728).w,d0
000072FE 6EE4                       		bgt.s	loc_65E4
00007300 3038 F728                  		move.w	($FFFFF728).w,d0
00007304 60DE                       		bra.s	loc_65E4
00007306                            ; End of function ScrollHoriz2
00007306                            
00007306                            ; ===========================================================================
00007306 4A40                       		tst.w	d0
00007308 6A00                       		bpl.s	loc_6610
0000730A 303C FFFE                  		move.w	#-2,d0
0000730E 60E6                       		bra.s	loc_65F6
00007310                            ; ===========================================================================
00007310                            
00007310                            loc_6610:
00007310 303C 0002                  		move.w	#2,d0
00007314 60B6                       		bra.s	loc_65CC
00007316                            
00007316                            ; ---------------------------------------------------------------------------
00007316                            ; Subroutine to	scroll the level vertically as Sonic moves
00007316                            ; ---------------------------------------------------------------------------
00007316                            
00007316                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007316                            
00007316                            
00007316                            ScrollVertical:				; XREF: DeformBgLayer
00007316 7200                       		moveq	#0,d1
00007318 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000731C 9078 F704                  		sub.w	($FFFFF704).w,d0
00007320 0838 0002 D022             		btst	#2,($FFFFD022).w
00007326 6700                       		beq.s	loc_662A
00007328 5B40                       		subq.w	#5,d0
0000732A                            
0000732A                            loc_662A:
0000732A 0838 0001 D022             		btst	#1,($FFFFD022).w
00007330 6700                       		beq.s	loc_664A
00007332 0640 0020                  		addi.w	#$20,d0
00007336 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000733A 6500                       		bcs.s	loc_6696
0000733C 0440 0040                  		subi.w	#$40,d0
00007340 6400                       		bcc.s	loc_6696
00007342 4A38 F75C                  		tst.b	($FFFFF75C).w
00007346 6600                       		bne.s	loc_66A8
00007348 6000                       		bra.s	loc_6656
0000734A                            ; ===========================================================================
0000734A                            
0000734A                            loc_664A:
0000734A 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000734E 6600                       		bne.s	loc_665C
00007350 4A38 F75C                  		tst.b	($FFFFF75C).w
00007354 6600                       		bne.s	loc_66A8
00007356                            
00007356                            loc_6656:
00007356 4278 F73C                  		clr.w	($FFFFF73C).w
0000735A 4E75                       		rts	
0000735C                            ; ===========================================================================
0000735C                            
0000735C                            loc_665C:
0000735C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00007362 6600                       		bne.s	loc_6684
00007364 3238 D020                  		move.w	($FFFFD020).w,d1
00007368 6A00                       		bpl.s	loc_666C
0000736A 4441                       		neg.w	d1
0000736C                            
0000736C                            loc_666C:
0000736C 0C41 0800                  		cmpi.w	#$800,d1
00007370 6400                       		bcc.s	loc_6696
00007372 323C 0600                  		move.w	#$600,d1
00007376 0C40 0006                  		cmpi.w	#6,d0
0000737A 6E00                       		bgt.s	loc_66F6
0000737C 0C40 FFFA                  		cmpi.w	#-6,d0
00007380 6D00                       		blt.s	loc_66C0
00007382 6000                       		bra.s	loc_66AE
00007384                            ; ===========================================================================
00007384                            
00007384                            loc_6684:
00007384 323C 0200                  		move.w	#$200,d1
00007388 0C40 0002                  		cmpi.w	#2,d0
0000738C 6E00                       		bgt.s	loc_66F6
0000738E 0C40 FFFE                  		cmpi.w	#-2,d0
00007392 6D00                       		blt.s	loc_66C0
00007394 6000                       		bra.s	loc_66AE
00007396                            ; ===========================================================================
00007396                            
00007396                            loc_6696:
00007396 323C 1000                  		move.w	#$1000,d1
0000739A 0C40 0010                  		cmpi.w	#$10,d0
0000739E 6E00                       		bgt.s	loc_66F6
000073A0 0C40 FFF0                  		cmpi.w	#-$10,d0
000073A4 6D00                       		blt.s	loc_66C0
000073A6 6000                       		bra.s	loc_66AE
000073A8                            ; ===========================================================================
000073A8                            
000073A8                            loc_66A8:
000073A8 7000                       		moveq	#0,d0
000073AA 11C0 F75C                  		move.b	d0,($FFFFF75C).w
000073AE                            
000073AE                            loc_66AE:
000073AE 7200                       		moveq	#0,d1
000073B0 3200                       		move.w	d0,d1
000073B2 D278 F704                  		add.w	($FFFFF704).w,d1
000073B6 4A40                       		tst.w	d0
000073B8 6A00 0000                  		bpl.w	loc_6700
000073BC 6000 0000                  		bra.w	loc_66CC
000073C0                            ; ===========================================================================
000073C0                            
000073C0                            loc_66C0:
000073C0 4441                       		neg.w	d1
000073C2 48C1                       		ext.l	d1
000073C4 E181                       		asl.l	#8,d1
000073C6 D2B8 F704                  		add.l	($FFFFF704).w,d1
000073CA 4841                       		swap	d1
000073CC                            
000073CC                            loc_66CC:
000073CC B278 F72C                  		cmp.w	($FFFFF72C).w,d1
000073D0 6E00                       		bgt.s	loc_6724
000073D2 0C41 FF00                  		cmpi.w	#-$100,d1
000073D6 6E00                       		bgt.s	loc_66F0
000073D8 0241 07FF                  		andi.w	#$7FF,d1
000073DC 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000073E2 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
000073E8 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000073EE 6000                       		bra.s	loc_6724
000073F0                            ; ===========================================================================
000073F0                            
000073F0                            loc_66F0:
000073F0 3238 F72C                  		move.w	($FFFFF72C).w,d1
000073F4 6000                       		bra.s	loc_6724
000073F6                            ; ===========================================================================
000073F6                            
000073F6                            loc_66F6:
000073F6 48C1                       		ext.l	d1
000073F8 E181                       		asl.l	#8,d1
000073FA D2B8 F704                  		add.l	($FFFFF704).w,d1
000073FE 4841                       		swap	d1
00007400                            
00007400                            loc_6700:
00007400 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00007404 6D00                       		blt.s	loc_6724
00007406 0441 0800                  		subi.w	#$800,d1
0000740A 6500                       		bcs.s	loc_6720
0000740C 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00007412 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00007418 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0000741E 6000                       		bra.s	loc_6724
00007420                            ; ===========================================================================
00007420                            
00007420                            loc_6720:
00007420 3238 F72E                  		move.w	($FFFFF72E).w,d1
00007424                            
00007424                            loc_6724:
00007424 3838 F704                  		move.w	($FFFFF704).w,d4
00007428 4841                       		swap	d1
0000742A 2601                       		move.l	d1,d3
0000742C 96B8 F704                  		sub.l	($FFFFF704).w,d3
00007430 E09B                       		ror.l	#8,d3
00007432 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00007436 21C1 F704                  		move.l	d1,($FFFFF704).w
0000743A 3038 F704                  		move.w	($FFFFF704).w,d0
0000743E 0240 0010                  		andi.w	#$10,d0
00007442 1238 F74B                  		move.b	($FFFFF74B).w,d1
00007446 B300                       		eor.b	d1,d0
00007448 6600                       		bne.s	locret_6766
0000744A 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00007450 3038 F704                  		move.w	($FFFFF704).w,d0
00007454 9044                       		sub.w	d4,d0
00007456 6A00                       		bpl.s	loc_6760
00007458 08F8 0000 F754             		bset	#0,($FFFFF754).w
0000745E 4E75                       		rts	
00007460                            ; ===========================================================================
00007460                            
00007460                            loc_6760:
00007460 08F8 0001 F754             		bset	#1,($FFFFF754).w
00007466                            
00007466                            locret_6766:
00007466 4E75                       		rts	
00007468                            ; End of function ScrollVertical
00007468                            
00007468                            
00007468                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007468                            
00007468                            
00007468                            ScrollBlock1:				; XREF: Deform_LZ, Deform_SBZ
00007468 2438 F708                  		move.l	($FFFFF708).w,d2
0000746C 2002                       		move.l	d2,d0
0000746E D084                       		add.l	d4,d0
00007470 21C0 F708                  		move.l	d0,($FFFFF708).w
00007474 2200                       		move.l	d0,d1
00007476 4841                       		swap	d1
00007478 0241 0010                  		andi.w	#$10,d1
0000747C 1638 F74C                  		move.b	($FFFFF74C).w,d3
00007480 B701                       		eor.b	d3,d1
00007482 6600                       		bne.s	ScrollBlock1_2
00007484 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
0000748A 9082                       		sub.l	d2,d0
0000748C 6A00                       		bpl.s	ScrollBlock1_1
0000748E 08F8 0002 F756             		bset	#2,($FFFFF756).w
00007494 6000                       		bra.s	ScrollBlock1_2
00007496                            ; ===========================================================================
00007496                            
00007496                            ScrollBlock1_1:				; XREF: ScrollBlock1
00007496 08F8 0003 F756             		bset	#3,($FFFFF756).w
0000749C                            
0000749C                            ScrollBlock1_2:				; XREF: ScrollBlock1, Deform_SBZ, ...
0000749C 2638 F70C                  		move.l	($FFFFF70C).w,d3
000074A0 2003                       		move.l	d3,d0
000074A2 D085                       		add.l	d5,d0
000074A4 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000074A8 2200                       		move.l	d0,d1
000074AA 4841                       		swap	d1
000074AC 0241 0010                  		andi.w	#$10,d1
000074B0 1438 F74D                  		move.b	($FFFFF74D).w,d2
000074B4 B501                       		eor.b	d2,d1
000074B6 6600                       		bne.s	ScrollBlock1_End
000074B8 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000074BE 9083                       		sub.l	d3,d0
000074C0 6A00                       		bpl.s	ScrollBlock1_3
000074C2 08F8 0000 F756             		bset	#0,($FFFFF756).w
000074C8 4E75                       		rts	
000074CA                            ; ===========================================================================
000074CA                            
000074CA                            ScrollBlock1_3:				; XREF: ScrollBlock1
000074CA 08F8 0001 F756             		bset	#1,($FFFFF756).w
000074D0                            
000074D0                            ScrollBlock1_End:			; XREF: ScrollBlock1
000074D0 4E75                       		rts	
000074D2                            ; End of function ScrollBlock1
000074D2                            
000074D2                            
000074D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074D2                            
000074D2                            
000074D2                            ScrollBlock2:				; XREF: Deform_MZ, Deform_SYZ
000074D2 2638 F70C                  		move.l	($FFFFF70C).w,d3
000074D6 2003                       		move.l	d3,d0
000074D8 D085                       		add.l	d5,d0
000074DA 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000074DE 2200                       		move.l	d0,d1
000074E0 4841                       		swap	d1
000074E2 0241 0010                  		andi.w	#$10,d1
000074E6 1438 F74D                  		move.b	($FFFFF74D).w,d2
000074EA B501                       		eor.b	d2,d1
000074EC 6600                       		bne.s	ScrollBlock2_End
000074EE 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000074F4 9083                       		sub.l	d3,d0
000074F6 6A00                       		bpl.s	ScrollBlock2_1
000074F8 08F8 0004 F756             		bset	#4,($FFFFF756).w
000074FE 4E75                       		rts	
00007500                            ; ===========================================================================
00007500                            
00007500                            ScrollBlock2_1:				; XREF: ScrollBlock2
00007500 08F8 0005 F756             		bset	#5,($FFFFF756).w
00007506                            
00007506                            ScrollBlock2_End:			; XREF: ScrollBlock2
00007506 4E75                       		rts	
00007508                            ; End of function ScrollBlock2
00007508                            
00007508                            
00007508                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007508                            
00007508                            
00007508                            ScrollBlock3:				; XREF: Deform_MZ
00007508 3638 F70C                  		move.w	($FFFFF70C).w,d3
0000750C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007510 3200                       		move.w	d0,d1
00007512 0241 0010                  		andi.w	#$10,d1
00007516 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000751A B501                       		eor.b	d2,d1
0000751C 6600                       		bne.s	ScrollBlock3_End
0000751E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007524 9043                       		sub.w	d3,d0
00007526 6A00                       		bpl.s	ScrollBlock3_1
00007528 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000752E 4E75                       		rts	
00007530                            ; ===========================================================================
00007530                            
00007530                            ScrollBlock3_1:				; XREF: ScrollBlock3
00007530 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007536                            
00007536                            ScrollBlock3_End:			; XREF: ScrollBlock3
00007536 4E75                       		rts	
00007538                            ; End of function ScrollBlock3
00007538                            
00007538                            
00007538                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007538                            
00007538                            
00007538                            ScrollBlock4:				; XREF: Deform_MZ, Deform_SBZ
00007538 2438 F708                  		move.l	($FFFFF708).w,d2
0000753C 2002                       		move.l	d2,d0
0000753E D084                       		add.l	d4,d0
00007540 21C0 F708                  		move.l	d0,($FFFFF708).w
00007544 2200                       		move.l	d0,d1
00007546 4841                       		swap	d1
00007548 0241 0010                  		andi.w	#$10,d1
0000754C 1638 F74C                  		move.b	($FFFFF74C).w,d3
00007550 B701                       		eor.b	d3,d1
00007552 6600                       		bne.s	ScrollBlock4_End
00007554 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
0000755A 9082                       		sub.l	d2,d0
0000755C 6A00                       		bpl.s	ScrollBlock4_1
0000755E 0DF8 F756                  		bset	d6,($FFFFF756).w
00007562 6000                       		bra.s	ScrollBlock4_End
00007564                            ; ===========================================================================
00007564                            
00007564                            ScrollBlock4_1:				; XREF: ScrollBlock4
00007564 5206                       		addq.b	#1,d6
00007566 0DF8 F756                  		bset	d6,($FFFFF756).w
0000756A                            
0000756A                            ScrollBlock4_End:			; XREF: ScrollBlock4
0000756A 4E75                       		rts	
0000756C                            ; End of function ScrollBlock4
0000756C                            
0000756C                            
0000756C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000756C                            
0000756C                            
0000756C                            ScrollBlock5:				; XREF: Deform_GHZ, Deform_MZ, ...
0000756C 2438 F710                  		move.l	($FFFFF710).w,d2
00007570 2002                       		move.l	d2,d0
00007572 D084                       		add.l	d4,d0
00007574 21C0 F710                  		move.l	d0,($FFFFF710).w
00007578 2200                       		move.l	d0,d1
0000757A 4841                       		swap	d1
0000757C 0241 0010                  		andi.w	#$10,d1
00007580 1638 F74E                  		move.b	($FFFFF74E).w,d3
00007584 B701                       		eor.b	d3,d1
00007586 6600                       		bne.s	ScrollBlock5_End
00007588 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
0000758E 9082                       		sub.l	d2,d0
00007590 6A00                       		bpl.s	ScrollBlock5_1
00007592 0DF8 F758                  		bset	d6,($FFFFF758).w
00007596 6000                       		bra.s	ScrollBlock5_End
00007598                            ; ===========================================================================
00007598                            
00007598                            ScrollBlock5_1:				; XREF: ScrollBlock5
00007598 5206                       		addq.b	#1,d6
0000759A 0DF8 F758                  		bset	d6,($FFFFF758).w
0000759E                            
0000759E                            ScrollBlock5_End:			; XREF: ScrollBlock5
0000759E 4E75                       		rts	
000075A0                            ; End of function ScrollBlock5
000075A0                            
000075A0                            
000075A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075A0                            
000075A0                            
000075A0                            ScrollBlock6:				; XREF: Deform_GHZ, Deform_MZ, ...
000075A0 2438 F718                  		move.l	($FFFFF718).w,d2
000075A4 2002                       		move.l	d2,d0
000075A6 D084                       		add.l	d4,d0
000075A8 21C0 F718                  		move.l	d0,($FFFFF718).w
000075AC 2200                       		move.l	d0,d1
000075AE 4841                       		swap	d1
000075B0 0241 0010                  		andi.w	#$10,d1
000075B4 1638 F750                  		move.b	($FFFFF750).w,d3
000075B8 B701                       		eor.b	d3,d1
000075BA 6600                       		bne.s	ScrollBlock6_End
000075BC 0A38 0010 F750             		eori.b	#$10,($FFFFF750).w
000075C2 9082                       		sub.l	d2,d0
000075C4 6A00                       		bpl.s	ScrollBlock6_1
000075C6 0DF8 F75A                  		bset	d6,($FFFFF75A).w
000075CA 6000                       		bra.s	ScrollBlock6_End
000075CC                            ; ===========================================================================
000075CC                            
000075CC                            ScrollBlock6_1:				; XREF: ScrollBlock6
000075CC 5206                       		addq.b	#1,d6
000075CE 0DF8 F75A                  		bset	d6,($FFFFF75A).w
000075D2                            
000075D2                            ScrollBlock6_End:			; XREF: ScrollBlock6
000075D2 4E75                       		rts	
000075D4                            ; End of function ScrollBlock6
000075D4                            
000075D4                            
000075D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075D4                            
000075D4                            
000075D4                            sub_6886:		
000075D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000075DA 4DF9 00C0 0000             		lea	($C00000).l,a6
000075E0 45F8 F756                  		lea	($FFFFF756).w,a2
000075E4 47F8 F708                  		lea	($FFFFF708).w,a3
000075E8 49F8 A440                  		lea	($FFFFA440).w,a4
000075EC 343C 6000                  		move.w	#$6000,d2
000075F0 6100 0000                  		bsr.w	sub_6D0A
000075F4 45F8 F758                  		lea	($FFFFF758).w,a2
000075F8 47F8 F710                  		lea	($FFFFF710).w,a3
000075FC 6000 0000                  		bra.w	sub_6DA6
00007600                            ; End of function sub_6886
00007600                            
00007600                            ; ---------------------------------------------------------------------------
00007600                            ; Subroutine to	display	correct	tiles as you move
00007600                            ; ---------------------------------------------------------------------------
00007600                            
00007600                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007600                            
00007600                            
00007600                            LoadTilesAsYouMove:			; XREF: Demo_Time
00007600 4BF9 00C0 0004             		lea	($C00004).l,a5
00007606 4DF9 00C0 0000             		lea	($C00000).l,a6
0000760C 45F8 FF32                  		lea	($FFFFFF32).w,a2
00007610 47F8 FF18                  		lea	($FFFFFF18).w,a3
00007614 49F8 A440                  		lea	($FFFFA440).w,a4
00007618 343C 6000                  		move.w	#$6000,d2
0000761C 6100 0000                  		bsr.w	sub_6D0A
00007620 45F8 FF34                  		lea	($FFFFFF34).w,a2
00007624 47F8 FF20                  		lea	($FFFFFF20).w,a3
00007628 6100 0000                  		bsr.w	sub_6DA6
0000762C 45F8 FF36                  		lea	($FFFFFF36).w,a2
00007630 47F8 FF28                  		lea	($FFFFFF28).w,a3
00007634 6100 0000                  		bsr.w	sub_6EA4
00007638 45F8 FF30                  		lea	($FFFFFF30).w,a2
0000763C 47F8 FF10                  		lea	($FFFFFF10).w,a3
00007640 49F8 A400                  		lea	($FFFFA400).w,a4
00007644 343C 4000                  		move.w	#$4000,d2
00007648 4A38 F745                  		tst.b	($FFFFF745).w
0000764C 6700                       		beq.s	Draw_FG
0000764E 11FC 0000 F745             		move.b	#0,($FFFFF745).w	;Reset the redraw flag
00007654 78F0                       		moveq	#-$10,d4			;Go to top line oflevel data relative camera position
00007656 7C0F                       		moveq	#$F,d6				;
00007658                            
00007658                            Draw_All:
00007658 48E7 0E00                  		movem.l	d4-d6,-(sp)			; This whole routine basically redraws the whole
0000765C 7AF0                       		moveq	#-$10,d5			; area instead of merely a line of tiles
0000765E 3204                       		move.w	d4,d1
00007660 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007664 3801                       		move.w	d1,d4
00007666 7AF0                       		moveq	#-$10,d5
00007668 6100 0000                  		bsr.w	DrawTiles_LR
0000766C 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007670 0644 0010                  		addi.w	#$10,d4
00007674 51CE FFE2                  		dbf	d6,Draw_All
00007678 4E75                       		rts	
0000767A                            
0000767A                            Draw_FG:
0000767A 4A12                       		tst.b	(a2)
0000767C 6700                       		beq.s	locret_6D08
0000767E 0892 0000                  		bclr	#0,(a2)
00007682 6700                       		beq.s	loc_6CBE
00007684 78F0                       		moveq	#-$10,d4
00007686 7AF0                       		moveq	#-$10,d5
00007688 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000768C 78F0                       		moveq	#-$10,d4
0000768E 7AF0                       		moveq	#-$10,d5
00007690 6100 0000                  		bsr.w	DrawTiles_LR
00007694                            
00007694                            loc_6CBE:
00007694 0892 0001                  		bclr	#1,(a2)
00007698 6700                       		beq.s	loc_6CD8
0000769A 383C 00E0                  		move.w	#$E0,d4	; 'à'
0000769E 7AF0                       		moveq	#-$10,d5
000076A0 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076A4 383C 00E0                  		move.w	#$E0,d4	; 'à'
000076A8 7AF0                       		moveq	#-$10,d5
000076AA 6100 0000                  		bsr.w	DrawTiles_LR
000076AE                            
000076AE                            loc_6CD8:
000076AE 0892 0002                  		bclr	#2,(a2)
000076B2 6700                       		beq.s	loc_6CEE
000076B4 78F0                       		moveq	#-$10,d4
000076B6 7AF0                       		moveq	#-$10,d5
000076B8 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076BC 78F0                       		moveq	#-$10,d4
000076BE 7AF0                       		moveq	#-$10,d5
000076C0 6100 0000                  		bsr.w	DrawTiles_TB
000076C4                            
000076C4                            loc_6CEE:
000076C4 0892 0003                  		bclr	#3,(a2)
000076C8 6700                       		beq.s	locret_6D08
000076CA 78F0                       		moveq	#-$10,d4
000076CC 3A3C 0140                  		move.w	#$140,d5
000076D0 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076D4 78F0                       		moveq	#-$10,d4
000076D6 3A3C 0140                  		move.w	#$140,d5
000076DA 6100 0000                  		bsr.w	DrawTiles_TB
000076DE                            
000076DE                            locret_6D08:
000076DE 4E75                       		rts	
000076E0                            
000076E0                            ; End of function LoadTilesAsYouMove
000076E0                            
000076E0                            
000076E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076E0                            
000076E0                            
000076E0                            sub_6D0A:
000076E0 4A12                       		tst.b	(a2)
000076E2 6700 0000                  		beq.w	locret_6DA4
000076E6 0892 0000                  		bclr	#0,(a2)
000076EA 6700                       		beq.s	loc_6D26
000076EC 78F0                       		moveq	#-$10,d4
000076EE 7AF0                       		moveq	#-$10,d5
000076F0 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076F4 78F0                       		moveq	#-$10,d4
000076F6 7AF0                       		moveq	#-$10,d5
000076F8 6100 0000                  		bsr.w	DrawTiles_LR
000076FC                            
000076FC                            loc_6D26:
000076FC 0892 0001                  		bclr	#1,(a2)
00007700 6700                       		beq.s	loc_6D40
00007702 383C 00E0                  		move.w	#$E0,d4	; 'à'
00007706 7AF0                       		moveq	#-$10,d5
00007708 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000770C 383C 00E0                  		move.w	#$E0,d4	; 'à'
00007710 7AF0                       		moveq	#-$10,d5
00007712 6100 0000                  		bsr.w	DrawTiles_LR
00007716                            
00007716                            loc_6D40:
00007716 0892 0002                  		bclr	#2,(a2)
0000771A 6700                       		beq.s	loc_6D56
0000771C 78F0                       		moveq	#-$10,d4
0000771E 7AF0                       		moveq	#-$10,d5
00007720 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007724 78F0                       		moveq	#-$10,d4
00007726 7AF0                       		moveq	#-$10,d5
00007728 6100 0000                  		bsr.w	DrawTiles_TB
0000772C                            
0000772C                            loc_6D56:
0000772C 0892 0003                  		bclr	#3,(a2)
00007730 6700                       		beq.s	loc_6D70
00007732 78F0                       		moveq	#-$10,d4
00007734 3A3C 0140                  		move.w	#$140,d5
00007738 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000773C 78F0                       		moveq	#-$10,d4
0000773E 3A3C 0140                  		move.w	#$140,d5
00007742 6100 0000                  		bsr.w	DrawTiles_TB
00007746                            
00007746                            loc_6D70:
00007746 0892 0004                  		bclr	#4,(a2)
0000774A 6700                       		beq.s	loc_6D88
0000774C 78F0                       		moveq	#-$10,d4
0000774E 7A00                       		moveq	#0,d5
00007750 6100 0000                  		bsr.w	loc_7176
00007754 78F0                       		moveq	#-$10,d4
00007756 7A00                       		moveq	#0,d5
00007758 7C1F                       		moveq	#$1F,d6
0000775A 6100 0000                  		bsr.w	DrawTiles_LR3
0000775E                            
0000775E                            loc_6D88:
0000775E 0892 0005                  		bclr	#5,(a2)
00007762 6700                       		beq.s	locret_6DA4
00007764 383C 00E0                  		move.w	#$E0,d4	; 'à'
00007768 7A00                       		moveq	#0,d5
0000776A 6100 0000                  		bsr.w	loc_7176
0000776E 383C 00E0                  		move.w	#$E0,d4	; 'à'
00007772 7A00                       		moveq	#0,d5
00007774 7C1F                       		moveq	#$1F,d6
00007776 6100 0000                  		bsr.w	DrawTiles_LR3
0000777A                            
0000777A                            locret_6DA4:
0000777A 4E75                       		rts	
0000777C                            ; End of function sub_6D0A
0000777C                            
0000777C                            
0000777C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000777C                            
0000777C                            
0000777C                            sub_6DA6:
0000777C 4A12                       		tst.b	(a2)
0000777E 6700 0000                  		beq.w	locret_6DF2
00007782 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w
00007788 6700 0000                  		beq.w	loc_6E16
0000778C 0892 0000                  		bclr	#0,(a2)
00007790 6700                       		beq.s	loc_6DD2
00007792 383C 0070                  		move.w	#$70,d4	; 'p'
00007796 7AF0                       		moveq	#-$10,d5
00007798 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000779C 383C 0070                  		move.w	#$70,d4	; 'p'
000077A0 7AF0                       		moveq	#-$10,d5
000077A2 7C02                       		moveq	#2,d6
000077A4 6100 0000                  		bsr.w	DrawTiles_TB2
000077A8                            
000077A8                            loc_6DD2:
000077A8 0892 0001                  		bclr	#1,(a2)
000077AC 6700                       		beq.s	locret_6DF2
000077AE 383C 0070                  		move.w	#$70,d4	; 'p'
000077B2 3A3C 0140                  		move.w	#$140,d5
000077B6 6100 0000                  		bsr.w	Calc_VRAM_Pos
000077BA 383C 0070                  		move.w	#$70,d4	; 'p'
000077BE 3A3C 0140                  		move.w	#$140,d5
000077C2 7C02                       		moveq	#2,d6
000077C4 6100 0000                  		bsr.w	DrawTiles_TB2
000077C8                            
000077C8                            locret_6DF2:
000077C8 4E75                       		rts	
000077CA                            ; ===========================================================================
000077CA 00                         unk_6DF4:	dc.b   0 ;	 
000077CB 00                         unk_6DF5:	dc.b   0 ;	 
000077CC 00                         		dc.b   0 ;  
000077CD 00                         		dc.b   0 ;  
000077CE 00                         		dc.b   0 ;  
000077CF 06                         		dc.b   6 ;  
000077D0 06                         		dc.b   6 ;  
000077D1 06                         		dc.b   6 ;  
000077D2 06                         		dc.b   6 ;  
000077D3 06                         		dc.b   6 ;  
000077D4 06                         		dc.b   6 ;  
000077D5 06                         		dc.b   6 ;  
000077D6 06                         		dc.b   6 ;  
000077D7 06                         		dc.b   6 ;  
000077D8 06                         		dc.b   6 ;  
000077D9 04                         		dc.b   4 ;  
000077DA 04                         		dc.b   4 ;  
000077DB 04                         		dc.b   4 ;  
000077DC 04                         		dc.b   4 ;  
000077DD 04                         		dc.b   4 ;  
000077DE 04                         		dc.b   4 ;  
000077DF 04                         		dc.b   4 ;  
000077E0 02                         		dc.b   2 ;  
000077E1 02                         		dc.b   2 ;  
000077E2 02                         		dc.b   2 ;  
000077E3 02                         		dc.b   2 ;  
000077E4 02                         		dc.b   2 ;  
000077E5 02                         		dc.b   2 ;  
000077E6 02                         		dc.b   2 ;  
000077E7 02                         		dc.b   2 ;  
000077E8 02                         		dc.b   2 ;  
000077E9 02                         		dc.b   2 ;  
000077EA 02                         		dc.b   2 ;  
000077EB 00                         		dc.b   0 ;  
000077EC                            ; ===========================================================================
000077EC                            
000077EC                            loc_6E16:
000077EC 78F0                       		moveq	#-$10,d4
000077EE 0892 0000                  		bclr	#0,(a2)
000077F2 6600                       		bne.s	loc_6E28
000077F4 0892 0001                  		bclr	#1,(a2)
000077F8 6700                       		beq.s	loc_6E72
000077FA 383C 00E0                  		move.w	#$E0,d4	; 'à'
000077FE                            
000077FE                            loc_6E28:
000077FE 41F9 0000 77CB             		lea	(unk_6DF5).l,a0
00007804 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007808 D044                       		add.w	d4,d0
0000780A 0240 01F0                  		andi.w	#$1F0,d0
0000780E E848                       		lsr.w	#4,d0
00007810 1030 0000                  		move.b	(a0,d0.w),d0
00007814 47F9 0000 0000             		lea	(unk_6FE4).l,a3
0000781A 3673 0000                  		movea.w	(a3,d0.w),a3
0000781E 6700                       		beq.s	loc_6E5E
00007820 7AF0                       		moveq	#-$10,d5
00007822 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007826 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000782A 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000782E 6100 0000                  		bsr.w	DrawTiles_LR
00007832 6000                       		bra.s	loc_6E72
00007834                            ; ===========================================================================
00007834                            
00007834                            loc_6E5E:
00007834 7A00                       		moveq	#0,d5
00007836 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000783A 6100 0000                  		bsr.w	loc_7176
0000783E 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007842 7C1F                       		moveq	#$1F,d6
00007844 6100 0000                  		bsr.w	DrawTiles_LR3
00007848                            
00007848                            loc_6E72:
00007848 4A12                       		tst.b	(a2)
0000784A 6600                       		bne.s	loc_6E78
0000784C 4E75                       		rts	
0000784E                            ; ===========================================================================
0000784E                            
0000784E                            loc_6E78:
0000784E 78F0                       		moveq	#-$10,d4
00007850 7AF0                       		moveq	#-$10,d5
00007852 1012                       		move.b	(a2),d0
00007854 0200 00A8                  		andi.b	#-$58,d0
00007858 6700                       		beq.s	loc_6E8C
0000785A E208                       		lsr.b	#1,d0
0000785C 1480                       		move.b	d0,(a2)
0000785E 3A3C 0140                  		move.w	#$140,d5
00007862                            
00007862                            loc_6E8C:
00007862 41F9 0000 77CA             		lea	(unk_6DF4).l,a0
00007868 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000786C 0240 01F0                  		andi.w	#$1F0,d0
00007870 E848                       		lsr.w	#4,d0
00007872 41F0 0000                  		lea	(a0,d0.w),a0
00007876 6000 0000                  		bra.w	loc_6FEC
0000787A                            ; End of function sub_6DA6
0000787A                            
0000787A                            
0000787A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000787A                            
0000787A                            
0000787A                            sub_6EA4:
0000787A 4A12                       		tst.b	(a2)
0000787C 6700 0000                  		beq.w	locret_6EF0
00007880 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
00007886 6700 0000                  		beq.w	loc_6F54
0000788A 0892 0000                  		bclr	#0,(a2)
0000788E 6700                       		beq.s	loc_6ED0_2
00007890 383C 0040                  		move.w	#$40,d4	; '@'
00007894 7AF0                       		moveq	#-$10,d5
00007896 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000789A 383C 0040                  		move.w	#$40,d4	; '@'
0000789E 7AF0                       		moveq	#-$10,d5
000078A0 7C02                       		moveq	#2,d6
000078A2 6100 0000                  		bsr.w	DrawTiles_TB2
000078A6                            
000078A6                            loc_6ED0_2:
000078A6 0892 0001                  		bclr	#1,(a2)
000078AA 6700                       		beq.s	locret_6EF0
000078AC 383C 0040                  		move.w	#$40,d4	; '@'
000078B0 3A3C 0140                  		move.w	#$140,d5
000078B4 6100 0000                  		bsr.w	Calc_VRAM_Pos
000078B8 383C 0040                  		move.w	#$40,d4	; '@'
000078BC 3A3C 0140                  		move.w	#$140,d5
000078C0 7C02                       		moveq	#2,d6
000078C2 6100 0000                  		bsr.w	DrawTiles_TB2
000078C6                            
000078C6                            locret_6EF0:
000078C6 4E75                       		rts	
000078C8                            ; ===========================================================================
000078C8 00                         unk_6EF2:	dc.b   0 ;	 
000078C9 00                         unk_6EF3:	dc.b   0 ;	 
000078CA 00                         		dc.b   0 ;  
000078CB 00                         		dc.b   0 ;  
000078CC 00                         		dc.b   0 ;  
000078CD 00                         		dc.b   0 ;  
000078CE 06                         		dc.b   6 ;  
000078CF 06                         		dc.b   6 ;  
000078D0 04                         		dc.b   4 ;  
000078D1 04                         		dc.b   4 ;  
000078D2 04                         		dc.b   4 ;  
000078D3 04                         		dc.b   4 ;  
000078D4 04                         		dc.b   4 ;  
000078D5 04                         		dc.b   4 ;  
000078D6 04                         		dc.b   4 ;  
000078D7 04                         		dc.b   4 ;  
000078D8 04                         		dc.b   4 ;  
000078D9 02                         		dc.b   2 ;  
000078DA 02                         		dc.b   2 ;  
000078DB 02                         		dc.b   2 ;  
000078DC 02                         		dc.b   2 ;  
000078DD 02                         		dc.b   2 ;  
000078DE 02                         		dc.b   2 ;  
000078DF 02                         		dc.b   2 ;  
000078E0 02                         		dc.b   2 ;  
000078E1 02                         		dc.b   2 ;  
000078E2 02                         		dc.b   2 ;  
000078E3 02                         		dc.b   2 ;  
000078E4 02                         		dc.b   2 ;  
000078E5 02                         		dc.b   2 ;  
000078E6 02                         		dc.b   2 ;  
000078E7 02                         		dc.b   2 ;  
000078E8 02                         		dc.b   2 ;  
000078E9 02                         		dc.b   2 ;  
000078EA 02                         		dc.b   2 ;  
000078EB 02                         		dc.b   2 ;  
000078EC 02                         		dc.b   2 ;  
000078ED 02                         		dc.b   2 ;  
000078EE 02                         		dc.b   2 ;  
000078EF 02                         		dc.b   2 ;  
000078F0 02                         		dc.b   2 ;  
000078F1 02                         		dc.b   2 ;  
000078F2 02                         		dc.b   2 ;  
000078F3 02                         		dc.b   2 ;  
000078F4 02                         		dc.b   2 ;  
000078F5 02                         		dc.b   2 ;  
000078F6 02                         		dc.b   2 ;  
000078F7 02                         		dc.b   2 ;  
000078F8 02                         		dc.b   2 ;  
000078F9 02                         		dc.b   2 ;  
000078FA 02                         		dc.b   2 ;  
000078FB 02                         		dc.b   2 ;  
000078FC 02                         		dc.b   2 ;  
000078FD 02                         		dc.b   2 ;  
000078FE 02                         		dc.b   2 ;  
000078FF 02                         		dc.b   2 ;  
00007900 02                         		dc.b   2 ;  
00007901 02                         		dc.b   2 ;  
00007902 02                         		dc.b   2 ;  
00007903 02                         		dc.b   2 ;  
00007904 02                         		dc.b   2 ;  
00007905 02                         		dc.b   2 ;  
00007906 02                         		dc.b   2 ;  
00007907 02                         		dc.b   2 ;  
00007908 02                         		dc.b   2 ;  
00007909 02                         		dc.b   2 ;  
0000790A 02                         		dc.b   2 ;  
0000790B 02                         		dc.b   2 ;  
0000790C 02                         		dc.b   2 ;  
0000790D 02                         		dc.b   2 ;  
0000790E 02                         		dc.b   2 ;  
0000790F 02                         		dc.b   2 ;  
00007910 02                         		dc.b   2 ;  
00007911 02                         		dc.b   2 ;  
00007912 02                         		dc.b   2 ;  
00007913 02                         		dc.b   2 ;  
00007914 02                         		dc.b   2 ;  
00007915 02                         		dc.b   2 ;  
00007916 02                         		dc.b   2 ;  
00007917 02                         		dc.b   2 ;  
00007918 02                         		dc.b   2 ;  
00007919 02                         		dc.b   2 ;  
0000791A 02                         		dc.b   2 ;  
0000791B 02                         		dc.b   2 ;  
0000791C 02                         		dc.b   2 ;  
0000791D 02                         		dc.b   2 ;  
0000791E 02                         		dc.b   2 ;  
0000791F 02                         		dc.b   2 ;  
00007920 02                         		dc.b   2 ;  
00007921 02                         		dc.b   2 ;  
00007922 02                         		dc.b   2 ;  
00007923 02                         		dc.b   2 ;  
00007924 02                         		dc.b   2 ;  
00007925 02                         		dc.b   2 ;  
00007926 02                         		dc.b   2 ;  
00007927 02                         		dc.b   2 ;  
00007928 02                         		dc.b   2 ;  
00007929 00                         		dc.b   0 ;  
0000792A                            ; ===========================================================================
0000792A                            
0000792A                            loc_6F54:
0000792A 78F0                       		moveq	#-$10,d4
0000792C 0892 0000                  		bclr	#0,(a2)
00007930 6600                       		bne.s	loc_6F66
00007932 0892 0001                  		bclr	#1,(a2)
00007936 6700                       		beq.s	loc_6FAE
00007938 383C 00E0                  		move.w	#$E0,d4	; 'à'
0000793C                            
0000793C                            loc_6F66:
0000793C 41F9 0000 78C9             		lea	(unk_6EF3).l,a0
00007942 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007946 0440 0200                  		subi.w	#$200,d0
0000794A D044                       		add.w	d4,d0
0000794C 0240 07F0                  		andi.w	#$7F0,d0
00007950 E848                       		lsr.w	#4,d0
00007952 1030 0000                  		move.b	(a0,d0.w),d0
00007956 367B 0000                  		movea.w	unk_6FE4(pc,d0.w),a3
0000795A 6700                       		beq.s	loc_6F9A
0000795C 7AF0                       		moveq	#-$10,d5
0000795E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007962 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007966 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000796A 6100 0000                  		bsr.w	DrawTiles_LR
0000796E 6000                       		bra.s	loc_6FAE
00007970                            ; ===========================================================================
00007970                            
00007970                            loc_6F9A:
00007970 7A00                       		moveq	#0,d5
00007972 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007976 6100 0000                  		bsr.w	loc_7176
0000797A 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000797E 7C1F                       		moveq	#$1F,d6
00007980 6100 0000                  		bsr.w	DrawTiles_LR3
00007984                            
00007984                            loc_6FAE:
00007984 4A12                       		tst.b	(a2)
00007986 6600                       		bne.s	loc_6FB4
00007988 4E75                       		rts	
0000798A                            ; ===========================================================================
0000798A                            
0000798A                            loc_6FB4:
0000798A 78F0                       		moveq	#-$10,d4
0000798C 7AF0                       		moveq	#-$10,d5
0000798E 1012                       		move.b	(a2),d0
00007990 0200 00A8                  		andi.b	#-$58,d0
00007994 6700                       		beq.s	loc_6FC8
00007996 E208                       		lsr.b	#1,d0
00007998 1480                       		move.b	d0,(a2)
0000799A 3A3C 0140                  		move.w	#$140,d5
0000799E                            
0000799E                            loc_6FC8:
0000799E 41F9 0000 78C8             		lea	(unk_6EF2).l,a0
000079A4 3038 F70C                  		move.w	($FFFFF70C).w,d0
000079A8 0440 0200                  		subi.w	#$200,d0
000079AC 0240 07F0                  		andi.w	#$7F0,d0
000079B0 E848                       		lsr.w	#4,d0
000079B2 41F0 0000                  		lea	(a0,d0.w),a0
000079B6 6000 0000                  		bra.w	loc_6FEC
000079BA                            ; ===========================================================================
000079BA FF                         unk_6FE4:	dc.b $FF ;  
000079BB 18                         		dc.b $18 ;  
000079BC FF                         		dc.b $FF ;  
000079BD 18                         		dc.b $18 ;  
000079BE FF                         		dc.b $FF ;  
000079BF 20                         		dc.b $20 ;  
000079C0 FF                         		dc.b $FF ;  
000079C1 28                         		dc.b $28 ; (
000079C2                            ; ===========================================================================
000079C2                            
000079C2                            loc_6FEC:
000079C2 7C0F                       		moveq	#$F,d6
000079C4 2E3C 0080 0000             		move.l	#$800000,d7
000079CA                            
000079CA                            loc_6FF4:
000079CA 7000                       		moveq	#0,d0
000079CC 1018                       		move.b	(a0)+,d0
000079CE 0112                       		btst	d0,(a2)
000079D0 6700                       		beq.s	loc_701C
000079D2 367B 00E6                  		movea.w	unk_6FE4(pc,d0.w),a3
000079D6 48E7 0C80                  		movem.l	d4-d5/a0,-(sp)
000079DA 48E7 0C00                  		movem.l	d4-d5,-(sp)
000079DE 6100 0000                  		bsr.w	sub_712A
000079E2 4CDF 0030                  		movem.l	(sp)+,d4-d5
000079E6 6100 0000                  		bsr.w	Calc_VRAM_Pos
000079EA 6100 0000                  		bsr.w	sub_70AC
000079EE 4CDF 0130                  		movem.l	(sp)+,d4-d5/a0
000079F2                            
000079F2                            loc_701C:
000079F2 0644 0010                  		addi.w	#$10,d4
000079F6 51CE FFD2                  		dbf	d6,loc_6FF4
000079FA 4212                       		clr.b	(a2)
000079FC 4E75                       		rts	
000079FE                            ; End of function sub_6EA4
000079FE                            
000079FE                            
000079FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079FE                            
000079FE                            
000079FE                            DrawTiles_LR:
000079FE 7C15                       		moveq	#$15,d6
00007A00                            ; End of function DrawTiles_LR
00007A00                            
00007A00                            
00007A00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A00                            
00007A00                            
00007A00                            DrawTiles_LR2:
00007A00 2E3C 0080 0000             		move.l	#$800000,d7
00007A06 2200                       		move.l	d0,d1
00007A08                            
00007A08                            loc_7032:
00007A08 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007A0C 6100 0000                  		bsr.w	sub_712A
00007A10 2001                       		move.l	d1,d0
00007A12 6100 0000                  		bsr.w	sub_70AC
00007A16 5801                       		addq.b	#4,d1
00007A18 0201 007F                  		andi.b	#$7F,d1	; '?'
00007A1C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007A20 0645 0010                  		addi.w	#$10,d5
00007A24 51CE FFE2                  		dbf	d6,loc_7032
00007A28 4E75                       		rts	
00007A2A                            ; End of function DrawTiles_LR2
00007A2A                            
00007A2A                            
00007A2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A2A                            
00007A2A                            
00007A2A                            DrawTiles_LR3:
00007A2A 2E3C 0080 0000             		move.l	#$800000,d7
00007A30 2200                       		move.l	d0,d1
00007A32                            
00007A32                            loc_705C:
00007A32 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007A36 6100 0000                  		bsr.w	loc_712C
00007A3A 2001                       		move.l	d1,d0
00007A3C 6100 0000                  		bsr.w	sub_70AC
00007A40 5801                       		addq.b	#4,d1
00007A42 0201 007F                  		andi.b	#$7F,d1	; '?'
00007A46 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007A4A 0645 0010                  		addi.w	#$10,d5
00007A4E 51CE FFE2                  		dbf	d6,loc_705C
00007A52 4E75                       		rts	
00007A54                            ; End of function DrawTiles_LR3
00007A54                            
00007A54                            
00007A54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A54                            
00007A54                            
00007A54                            DrawTiles_TB:
00007A54 7C0F                       		moveq	#$F,d6
00007A56                            ; End of function DrawTiles_TB
00007A56                            
00007A56                            
00007A56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A56                            
00007A56                            
00007A56                            DrawTiles_TB2:
00007A56 2E3C 0080 0000             		move.l	#$800000,d7
00007A5C 2200                       		move.l	d0,d1
00007A5E                            
00007A5E                            loc_7088:
00007A5E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007A62 6100 0000                  		bsr.w	sub_712A
00007A66 2001                       		move.l	d1,d0
00007A68 6100 0000                  		bsr.w	sub_70AC
00007A6C 0641 0100                  		addi.w	#$100,d1
00007A70 0241 0FFF                  		andi.w	#$FFF,d1
00007A74 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007A78 0644 0010                  		addi.w	#$10,d4
00007A7C 51CE FFE0                  		dbf	d6,loc_7088
00007A80 4E75                       		rts	
00007A82                            ; End of function DrawTiles_TB2
00007A82                            
00007A82                            
00007A82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A82                            
00007A82                            
00007A82                            sub_70AC:
00007A82 8042                       		or.w	d2,d0
00007A84 4840                       		swap	d0
00007A86 0810 0004                  		btst	#4,(a0)
00007A8A 6600                       		bne.s	loc_70E8
00007A8C 0810 0003                  		btst	#3,(a0)
00007A90 6600                       		bne.s	loc_70C8
00007A92 2A80                       		move.l	d0,(a5)
00007A94 2C99                       		move.l	(a1)+,(a6)
00007A96 D087                       		add.l	d7,d0
00007A98 2A80                       		move.l	d0,(a5)
00007A9A 2C99                       		move.l	(a1)+,(a6)
00007A9C 4E75                       		rts	
00007A9E                            ; ===========================================================================
00007A9E                            
00007A9E                            loc_70C8:
00007A9E 2A80                       		move.l	d0,(a5)
00007AA0 2819                       		move.l	(a1)+,d4
00007AA2 0A84 0800 0800             		eori.l	#$8000800,d4
00007AA8 4844                       		swap	d4
00007AAA 2C84                       		move.l	d4,(a6)
00007AAC D087                       		add.l	d7,d0
00007AAE 2A80                       		move.l	d0,(a5)
00007AB0 2819                       		move.l	(a1)+,d4
00007AB2 0A84 0800 0800             		eori.l	#$8000800,d4
00007AB8 4844                       		swap	d4
00007ABA 2C84                       		move.l	d4,(a6)
00007ABC 4E75                       		rts	
00007ABE                            ; ===========================================================================
00007ABE                            
00007ABE                            loc_70E8:
00007ABE 0810 0003                  		btst	#3,(a0)
00007AC2 6600                       		bne.s	loc_710A
00007AC4 2A80                       		move.l	d0,(a5)
00007AC6 2A19                       		move.l	(a1)+,d5
00007AC8 2819                       		move.l	(a1)+,d4
00007ACA 0A84 1000 1000             		eori.l	#$10001000,d4
00007AD0 2C84                       		move.l	d4,(a6)
00007AD2 D087                       		add.l	d7,d0
00007AD4 2A80                       		move.l	d0,(a5)
00007AD6 0A85 1000 1000             		eori.l	#$10001000,d5
00007ADC 2C85                       		move.l	d5,(a6)
00007ADE 4E75                       		rts	
00007AE0                            ; ===========================================================================
00007AE0                            
00007AE0                            loc_710A:
00007AE0 2A80                       		move.l	d0,(a5)
00007AE2 2A19                       		move.l	(a1)+,d5
00007AE4 2819                       		move.l	(a1)+,d4
00007AE6 0A84 1800 1800             		eori.l	#$18001800,d4
00007AEC 4844                       		swap	d4
00007AEE 2C84                       		move.l	d4,(a6)
00007AF0 D087                       		add.l	d7,d0
00007AF2 2A80                       		move.l	d0,(a5)
00007AF4 0A85 1800 1800             		eori.l	#$18001800,d5
00007AFA 4845                       		swap	d5
00007AFC 2C85                       		move.l	d5,(a6)
00007AFE 4E75                       		rts	
00007B00                            ; End of function sub_70AC
00007B00                            
00007B00                            
00007B00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B00                            
00007B00                            
00007B00                            sub_712A:
00007B00 DA53                       		add.w	(a3),d5
00007B02                            
00007B02                            loc_712C:
00007B02 D86B 0004                  		add.w	4(a3),d4
00007B06 43F8 B000                  		lea	($FFFFB000).w,a1
00007B0A 3604                       		move.w	d4,d3
00007B0C E24B                       		lsr.w	#1,d3
00007B0E 0243 0380                  		andi.w	#$380,d3
00007B12 E64D                       		lsr.w	#3,d5
00007B14 3005                       		move.w	d5,d0
00007B16 EA48                       		lsr.w	#5,d0
00007B18 0240 007F                  		andi.w	#$7F,d0	; '?'
00007B1C D043                       		add.w	d3,d0
00007B1E 4A38 FE10                  		tst.b	($FFFFFE10).w	
00007B22 6700                       		beq.s	@ghz		
00007B24 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w	
00007B2A 6700                       		beq.s	@lz		
00007B2C 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w	
00007B32 6700                       		beq.s	@mz		
00007B34 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w	
00007B3A 6700                       		beq.s	@slz		
00007B3C 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w	
00007B42 6700                       		beq.s	@syz		
00007B44 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w	
00007B4A 6700                       		beq.s	@sbz				
00007B4C 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
00007B52 6700                       		beq.s	@ghz		; if yes, branch
00007B54 76FF                       		moveq	#-1,d3		; load chunks from RAM
00007B56 6100                       		bsr.s	LocateBlock
00007B58 6000                       		bra.s	@continue
00007B5A                            
00007B5A                            @ghz:
00007B5A 7600                       		moveq	#0,d3
00007B5C 6100                       		bsr.s	LocateBlock
00007B5E 0683 0000 0000             		add.l	#Blk256_GHZ,d3
00007B64 6000 0000                  		bra.w	@continue
00007B68                            	
00007B68                            @lz:
00007B68 7600                       		moveq	#0,d3
00007B6A 6100                       		bsr.s	LocateBlock
00007B6C 0683 0000 0000             		add.l	#Blk256_LZ,d3
00007B72 6000 0000                  		bra.w	@continue
00007B76                            		
00007B76                            @mz:
00007B76 7600                       		moveq	#0,d3
00007B78 6100                       		bsr.s	LocateBlock
00007B7A 0683 0000 0000             		add.l	#Blk256_MZ,d3
00007B80 6000 0000                  		bra.w	@continue
00007B84                            		
00007B84                            @slz:
00007B84 7600                       		moveq	#0,d3
00007B86 6100                       		bsr.s	LocateBlock
00007B88 0683 0000 0000             		add.l	#Blk256_SLZ,d3
00007B8E 6000 0000                  		bra.w	@continue
00007B92                            		
00007B92                            @syz:
00007B92 7600                       		moveq	#0,d3
00007B94 6100                       		bsr.s	LocateBlock
00007B96 0683 0000 0000             		add.l	#Blk256_SYZ,d3
00007B9C 6000 0000                  		bra.w	@continue
00007BA0                            		
00007BA0                            @sbz:
00007BA0 7600                       		moveq	#0,d3
00007BA2 6100                       		bsr.s	LocateBlock
00007BA4 0683 0000 0000             		add.l	#Blk256_SBZ,d3		
00007BAA 6000 0000                  		bra.w	@continue
00007BAE                            		
00007BAE                            @continue:
00007BAE 2043                       		movea.l	d3,a0
00007BB0 3610                       		move.w	(a0),d3
00007BB2 0243 03FF                  		andi.w	#$3FF,d3
00007BB6 E74B                       		lsl.w	#3,d3
00007BB8 D2C3                       		adda.w	d3,a1
00007BBA 4E75                       		rts	
00007BBC                            ; ---------------------------------------------------------------------------
00007BBC                            
00007BBC                            LocateBlock:
00007BBC 1634 0000                  		move.b	(a4,d0.w),d3	; load chunk ID in d3
00007BC0 6700                       		beq.s	LocateBlock_EmptyChunk
00007BC2 5303                       		subq.b	#1,d3
00007BC4 0243 007F                  		andi.w	#$7F,d3	; '?'
00007BC8 EE5B                       		ror.w	#7,d3
00007BCA D844                       		add.w	d4,d4
00007BCC 0244 01E0                  		andi.w	#$1E0,d4
00007BD0 0245 001E                  		andi.w	#$1E,d5
00007BD4 D644                       		add.w	d4,d3
00007BD6 D645                       		add.w	d5,d3
00007BD8 4E75                       		rts
00007BDA                            ; ---------------------------------------------------------------------------
00007BDA                            
00007BDA                            LocateBlock_EmptyChunk:
00007BDA 584F                       		addq.w	#4,sp	; pop a stack frame to leave a1 pointing at the first tile
00007BDC 4E75                       		rts
00007BDE                            ; End of function sub_712A
00007BDE                            
00007BDE                            
00007BDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BDE                            
00007BDE                            
00007BDE                            Calc_VRAM_Pos:
00007BDE DA53                       		add.w	(a3),d5
00007BE0                            
00007BE0                            loc_7176:
00007BE0 D86B 0004                  		add.w	4(a3),d4
00007BE4 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
00007BE8 0245 01F0                  		andi.w	#$1F0,d5
00007BEC E94C                       		lsl.w	#4,d4
00007BEE E44D                       		lsr.w	#2,d5
00007BF0 D845                       		add.w	d5,d4
00007BF2 7003                       		moveq	#3,d0
00007BF4 4840                       		swap	d0
00007BF6 3004                       		move.w	d4,d0
00007BF8 4E75                       		rts	
00007BFA                            ; End of function Calc_VRAM_Pos
00007BFA                            
00007BFA                            ; ===========================================================================
00007BFA D86B 0004                  		add.w	4(a3),d4
00007BFE DA53                       		add.w	(a3),d5
00007C00 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
00007C04 0245 01F0                  		andi.w	#$1F0,d5
00007C08 E94C                       		lsl.w	#4,d4
00007C0A E44D                       		lsr.w	#2,d5
00007C0C D845                       		add.w	d5,d4
00007C0E 7002                       		moveq	#2,d0
00007C10 4840                       		swap	d0
00007C12 3004                       		move.w	d4,d0
00007C14 4E75                       		rts	
00007C16                            
00007C16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C16                            
00007C16                            
00007C16                            LoadTilesFromStart:
00007C16 4BF9 00C0 0004             		lea	($C00004).l,a5
00007C1C 4DF9 00C0 0000             		lea	($C00000).l,a6
00007C22 47F8 F700                  		lea	($FFFFF700).w,a3
00007C26 49F8 A400                  		lea	($FFFFA400).w,a4
00007C2A 343C 4000                  		move.w	#$4000,d2
00007C2E 6100                       		bsr.s	LoadTilesFromStart2
00007C30 47F8 F708                  		lea	($FFFFF708).w,a3
00007C34 49F8 A440                  		lea	($FFFFA440).w,a4
00007C38 343C 6000                  		move.w	#$6000,d2
00007C3C 4A38 FE10                  		tst.b	($FFFFFE10).w
00007C40 6700 0000                  		beq.w	loc_7220
00007C44 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
00007C4A 6700 0000                  		beq.w	loc_725A
00007C4E 0C78 0500 FE10             		cmpi.w	#$500,($FFFFFE10).w
00007C54 6700 0000                  		beq.w	loc_7288
00007C58 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w
00007C5E 6700 0000                  		beq.w	loc_7220
00007C62                            ; End of function LoadTilesFromStart
00007C62                            
00007C62                            
00007C62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C62                            
00007C62                            
00007C62                            LoadTilesFromStart2:
00007C62 78F0                       		moveq	#-$10,d4
00007C64 7C0F                       		moveq	#$F,d6
00007C66                            
00007C66                            loc_71FC:
00007C66 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007C6A 7A00                       		moveq	#0,d5
00007C6C 3204                       		move.w	d4,d1
00007C6E 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
00007C72 3801                       		move.w	d1,d4
00007C74 7A00                       		moveq	#0,d5
00007C76 7C1F                       		moveq	#$1F,d6
00007C78 6100 FD86                  		bsr.w	DrawTiles_LR2
00007C7C 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007C80 0644 0010                  		addi.w	#$10,d4
00007C84 51CE FFE0                  		dbf	d6,loc_71FC
00007C88 4E75                       		rts	
00007C8A                            ; End of function LoadTilesFromStart2
00007C8A                            
00007C8A                            ; ===========================================================================
00007C8A                            
00007C8A                            loc_7220:
00007C8A 7800                       		moveq	#0,d4
00007C8C 7C0F                       		moveq	#$F,d6
00007C8E                            
00007C8E                            loc_7224:
00007C8E 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007C92 41F9 0000 0000             		lea	(unk_724A).l,a0
00007C98 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007C9C D044                       		add.w	d4,d0
00007C9E 0240 00F0                  		andi.w	#$F0,d0	; 'ð'
00007CA2 6100 0000                  		bsr.w	sub_72BA
00007CA6 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007CAA 0644 0010                  		addi.w	#$10,d4
00007CAE 51CE FFDE                  		dbf	d6,loc_7224
00007CB2 4E75                       		rts	
00007CB4                            ; ===========================================================================
00007CB4 00                         unk_724A:	dc.b   0 ;	 
00007CB5 00                         		dc.b   0 ;  
00007CB6 00                         		dc.b   0 ;  
00007CB7 00                         		dc.b   0 ;  
00007CB8 06                         		dc.b   6 ;  
00007CB9 06                         		dc.b   6 ;  
00007CBA 06                         		dc.b   6 ;  
00007CBB 04                         		dc.b   4 ;  
00007CBC 04                         		dc.b   4 ;  
00007CBD 04                         		dc.b   4 ;  
00007CBE 00                         		dc.b   0 ;  
00007CBF 00                         		dc.b   0 ;  
00007CC0 00                         		dc.b   0 ;  
00007CC1 00                         		dc.b   0 ;  
00007CC2 00                         		dc.b   0 ;  
00007CC3 00                         		dc.b   0 ;  
00007CC4                            ; ===========================================================================
00007CC4                            
00007CC4                            loc_725A:
00007CC4 78F0                       		moveq	#-$10,d4
00007CC6 7C0F                       		moveq	#$F,d6
00007CC8                            
00007CC8                            loc_725E:
00007CC8 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007CCC 41F9 0000 78C9             		lea	(unk_6EF3).l,a0
00007CD2 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007CD6 0440 0200                  		subi.w	#$200,d0
00007CDA D044                       		add.w	d4,d0
00007CDC 0240 07F0                  		andi.w	#$7F0,d0
00007CE0 6100 0000                  		bsr.w	sub_72BA
00007CE4 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007CE8 0644 0010                  		addi.w	#$10,d4
00007CEC 51CE FFDA                  		dbf	d6,loc_725E
00007CF0 4E75                       		rts	
00007CF2                            ; ===========================================================================
00007CF2                            
00007CF2                            loc_7288:
00007CF2 78F0                       		moveq	#-$10,d4
00007CF4 7C0F                       		moveq	#$F,d6
00007CF6                            
00007CF6                            loc_728C:
00007CF6 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007CFA 41F9 0000 77CB             		lea	(unk_6DF5).l,a0
00007D00 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007D04 D044                       		add.w	d4,d0
00007D06 0240 01F0                  		andi.w	#$1F0,d0
00007D0A 6100 0000                  		bsr.w	sub_72BA
00007D0E 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007D12 0644 0010                  		addi.w	#$10,d4
00007D16 51CE FFDE                  		dbf	d6,loc_728C
00007D1A 4E75                       		rts	
00007D1C                            ; ===========================================================================
00007D1C F7                         unk_72B2:	dc.b $F7 ; ÷
00007D1D 08                         		dc.b   8 ;  
00007D1E F7                         		dc.b $F7 ; ÷
00007D1F 08                         		dc.b   8 ;  
00007D20 F7                         		dc.b $F7 ; ÷
00007D21 10                         		dc.b $10 ;  
00007D22 F7                         		dc.b $F7 ; ÷
00007D23 18                         		dc.b $18 ;  
00007D24                            
00007D24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D24                            
00007D24                            
00007D24                            sub_72BA:
00007D24 E848                       		lsr.w	#4,d0
00007D26 1030 0000                  		move.b	(a0,d0.w),d0
00007D2A 367B 00F0                  		movea.w	unk_72B2(pc,d0.w),a3
00007D2E 6700                       		beq.s	loc_72DA
00007D30 7AF0                       		moveq	#-$10,d5
00007D32 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007D36 6100 FEA6                  		bsr.w	Calc_VRAM_Pos
00007D3A 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007D3E 6100 FCBE                  		bsr.w	DrawTiles_LR
00007D42 6000                       		bra.s	locret_72EE
00007D44                            ; ===========================================================================
00007D44                            
00007D44                            loc_72DA:
00007D44 7A00                       		moveq	#0,d5
00007D46 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007D4A 6100 FE94                  		bsr.w	loc_7176
00007D4E 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007D52 7C1F                       		moveq	#$1F,d6
00007D54 6100 FCD4                  		bsr.w	DrawTiles_LR3
00007D58                            
00007D58                            locret_72EE:
00007D58 4E75                       		rts	
00007D5A                            ; End of function sub_72BA
00007D5A                            
00007D5A                            LoadZoneTiles:
00007D5A 7000                       		moveq	#0,d0			; Clear d0
00007D5C 1038 FE10                  		move.b	($FFFFFE10).w,d0		; Load number of current zone to d0
00007D60 E948                       		lsl.w	#4,d0			; Multiply by $10, converting the zone ID into an offset
00007D62 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2	; Load LevelHeaders's address into a2
00007D68 45F2 0000                  		lea	(a2,d0.w),a2		; Offset LevelHeaders by the zone-offset, and load the resultant address to a2
00007D6C 201A                       		move.l	(a2)+,d0		; Move the first longword of data that a2 points to to d0, this contains the zone's first PLC ID and its art's address.
00007D6E                            						; The auto increment is pointless as a2 is overwritten later, and nothing reads from a2 before then
00007D6E 0280 00FF FFFF             		andi.l	#$FFFFFF,d0    		; Filter out the first byte, which contains the first PLC ID, leaving the address of the zone's art in d0
00007D74 2040                       		movea.l	d0,a0			; Load the address of the zone's art into a0 (source)
00007D76 43F9 00FF 0000             		lea	($FF0000).l,a1		; Load v_256x256/StartOfRAM (in this context, an art buffer) into a1 (destination)
00007D7C 6100 99FC                  		bsr.w	KosDec			; Decompress a0 to a1 (Kosinski compression)
00007D80                            
00007D80 3609                       		move.w	a1,d3			; Move a word of a1 to d3, note that a1 doesn't exactly contain the address of v_256x256/StartOfRAM anymore, after KosDec, a1 now contains v_256x256/StartOfRAM + the size of the file decompressed to it, d3 now contains the length of the file that was decompressed
00007D82 3E03                       		move.w	d3,d7			; Move d3 to d7, for use in seperate calculations
00007D84                            
00007D84 0243 0FFF                  		andi.w	#$FFF,d3		; Remove the high nibble of the high byte of the length of decompressed file, this nibble is how many $1000 bytes the decompressed art is
00007D88 E24B                       		lsr.w	#1,d3			; Half the value of 'length of decompressed file', d3 becomes the 'DMA transfer length'
00007D8A                            
00007D8A E95F                       		rol.w	#4,d7			; Rotate (left) length of decompressed file by one nibble
00007D8C 0247 000F                  		andi.w	#$F,d7			; Only keep the low nibble of low byte (the same one filtered out of d3 above), this nibble is how many $1000 bytes the decompressed art is
00007D90                            
00007D90 3407                       @loop:		move.w	d7,d2			; Move d7 to d2, note that the ahead dbf removes 1 byte from d7 each time it loops, meaning that the following calculations will have different results each time
00007D92 EF4A                       		lsl.w	#7,d2
00007D94 EB4A                       		lsl.w	#5,d2			; Shift (left) d2 by $C, making it high nibble of the high byte, d2 is now the size of the decompressed file rounded down to the nearest $1000 bytes, d2 becomes the 'destination address'
00007D96                            
00007D96 223C 00FF FFFF             		move.l	#$FFFFFF,d1		; Fill d1 with $FF
00007D9C 3202                       		move.w	d2,d1			; Move d2 to d1, overwriting the last word of $FF's with d2, this turns d1 into 'StartOfRAM'+'However many $1000 bytes the decompressed art is', d1 becomes the 'source address'
00007D9E                            
00007D9E 4EB9 0000 4AB2             		jsr	(QueueDMATransfer).l	; Use d1, d2, and d3 to locate the decompressed art and ready for transfer to VRAM
00007DA4 3F07                       		move.w	d7,-(sp)		; Store d7 in the Stack
00007DA6 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00007DAC 6100 AC16                  		bsr.w	DelayProgram
00007DB0 6100 9718                  		bsr.w	RunPLC_RAM
00007DB4 3E1F                       		move.w	(sp)+,d7		; Restore d7 from the Stack
00007DB6 363C 0800                  		move.w	#$800,d3		; Force the DMA transfer length to be $1000/2 (the first cycle is dynamic because the art's DMA'd backwards)
00007DBA 51CF FFD4                  		dbf	d7,@loop		; Loop for each $1000 bytes the decompressed art is
00007DBE                            
00007DBE 4E75                       		rts
00007DC0                            ; End of function LoadZoneTiles
00007DC0                            
00007DC0                            ; ---------------------------------------------------------------------------
00007DC0                            ; Main Load Block loading subroutine
00007DC0                            ; ---------------------------------------------------------------------------
00007DC0                            
00007DC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DC0                            
00007DC0                            
00007DC0                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007DC0 7000                       		moveq	#0,d0
00007DC2 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007DC6 E948                       		lsl.w	#4,d0
00007DC8 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007DCE 45F2 0000                  		lea	(a2,d0.w),a2
00007DD2 2F0A                       		move.l	a2,-(sp)
00007DD4 588A                       		addq.l	#4,a2
00007DD6 205A                       		movea.l	(a2)+,a0
00007DD8 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007DDC 303C 0000                  		move.w	#0,d0
00007DE0 6100 981A                  		bsr.w	EniDec
00007DE4 205A                       		movea.l	(a2)+,a0
00007DE6 4A38 FE10                  		tst.b	($FFFFFE10).w	; are we in Green Hill Zone?
00007DEA 6700                       		beq.s	@no_dec		; if yes, branch
00007DEC 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
00007DF2 6700                       		beq.s	@no_dec		; if yes, branch
00007DF4 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007DFA 6100 997E                  		bsr.w	KosDec
00007DFE                            
00007DFE                            @no_dec:		
00007DFE 6100 0000                  		bsr.w	LevelLayoutLoad
00007E02 301A                       		move.w	(a2)+,d0
00007E04 3012                       		move.w	(a2),d0
00007E06 0240 00FF                  		andi.w	#$FF,d0
00007E0A 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007E10 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007E12 700C                       		moveq	#$C,d0		; use SB3 pallet
00007E14                            
00007E14                            MLB_ChkSBZPal:
00007E14 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007E1A 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007E1C 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007E22 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007E24                            
00007E24                            MLB_UsePal0E:
00007E24 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00007E26                            
00007E26                            MLB_NormalPal:
00007E26 6100 A2E8                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007E2A 245F                       		movea.l	(sp)+,a2
00007E2C 584A                       		addq.w	#4,a2
00007E2E 7000                       		moveq	#0,d0
00007E30 1012                       		move.b	(a2),d0
00007E32 6700                       		beq.s	locret_6D10
00007E34 6100 9628                  		bsr.w	LoadPLC		; load pattern load cues
00007E38                            
00007E38                            locret_6D10:
00007E38 4E75                       		rts	
00007E3A                            ; End of function MainLoadBlockLoad
00007E3A                            
00007E3A                            ; ---------------------------------------------------------------------------
00007E3A                            ; Level	layout loading subroutine
00007E3A                            ; ---------------------------------------------------------------------------
00007E3A                            
00007E3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E3A                            
00007E3A                            
00007E3A                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007E3A 47F8 A400                  		lea	($FFFFA400).w,a3
00007E3E 323C 01FF                  		move.w	#$1FF,d1
00007E42 7000                       		moveq	#0,d0
00007E44                            
00007E44                            LevLoad_ClrRam:
00007E44 26C0                       		move.l	d0,(a3)+
00007E46 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007E4A                            
00007E4A 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007E4E 7200                       		moveq	#0,d1
00007E50 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007E54 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007E58 7202                       		moveq	#2,d1
00007E5A                            ; End of function LevelLayoutLoad
00007E5A                            
00007E5A                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007E5A                            
00007E5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E5A                            
00007E5A                            
00007E5A                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007E5A 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007E5E ED08                       		lsl.b	#6,d0
00007E60 EA48                       		lsr.w	#5,d0
00007E62 3400                       		move.w	d0,d2
00007E64 D040                       		add.w	d0,d0
00007E66 D042                       		add.w	d2,d0
00007E68 D041                       		add.w	d1,d0
00007E6A 43F9 0000 0000             		lea	(Level_Index).l,a1
00007E70 3031 0000                  		move.w	(a1,d0.w),d0
00007E74 43F1 0000                  		lea	(a1,d0.w),a1
00007E78 7200                       		moveq	#0,d1
00007E7A 3401                       		move.w	d1,d2
00007E7C 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007E7E 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007E80                            
00007E80                            LevLoad_NumRows:
00007E80 3001                       		move.w	d1,d0
00007E82 204B                       		movea.l	a3,a0
00007E84                            
00007E84                            LevLoad_Row:
00007E84 10D9                       		move.b	(a1)+,(a0)+
00007E86 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007E8A 47EB 0080                  		lea	$80(a3),a3	; do next row
00007E8E 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007E92 4E75                       		rts	
00007E94                            ; End of function LevelLayoutLoad2
00007E94                            
00007E94                            ; ---------------------------------------------------------------------------
00007E94                            ; Dynamic screen resize	loading	subroutine
00007E94                            ; ---------------------------------------------------------------------------
00007E94                            
00007E94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E94                            
00007E94                            
00007E94                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007E94 7000                       		moveq	#0,d0
00007E96 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007E9A D040                       		add.w	d0,d0
00007E9C 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007EA0 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007EA4 7202                       		moveq	#2,d1
00007EA6 3038 F726                  		move.w	($FFFFF726).w,d0
00007EAA 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007EAE 6700                       		beq.s	locret_6DAA
00007EB0 6400                       		bcc.s	loc_6DAC
00007EB2 4441                       		neg.w	d1
00007EB4 3038 F704                  		move.w	($FFFFF704).w,d0
00007EB8 B078 F726                  		cmp.w	($FFFFF726).w,d0
00007EBC 6300                       		bls.s	loc_6DA0
00007EBE 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007EC2 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007EC8                            
00007EC8                            loc_6DA0:
00007EC8 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007ECC 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007ED2                            
00007ED2                            locret_6DAA:
00007ED2 4E75                       		rts	
00007ED4                            ; ===========================================================================
00007ED4                            
00007ED4                            loc_6DAC:				; XREF: DynScrResizeLoad
00007ED4 3038 F704                  		move.w	($FFFFF704).w,d0
00007ED8 5040                       		addq.w	#8,d0
00007EDA B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007EDE 6500                       		bcs.s	loc_6DC4
00007EE0 0838 0001 D022             		btst	#1,($FFFFD022).w
00007EE6 6700                       		beq.s	loc_6DC4
00007EE8 D241                       		add.w	d1,d1
00007EEA D241                       		add.w	d1,d1
00007EEC                            
00007EEC                            loc_6DC4:
00007EEC D378 F72E                  		add.w	d1,($FFFFF72E).w
00007EF0 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007EF6 4E75                       		rts	
00007EF8                            ; End of function DynScrResizeLoad
00007EF8                            
00007EF8                            ; ===========================================================================
00007EF8                            ; ---------------------------------------------------------------------------
00007EF8                            ; Offset index for dynamic screen resizing
00007EF8                            ; ---------------------------------------------------------------------------
00007EF8 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007EFC 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007F00 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007F04 0000                       		dc.w Resize_Ending-Resize_Index
00007F06                            ; ===========================================================================
00007F06                            ; ---------------------------------------------------------------------------
00007F06                            ; Green	Hill Zone dynamic screen resizing
00007F06                            ; ---------------------------------------------------------------------------
00007F06                            
00007F06                            Resize_GHZ:				; XREF: Resize_Index
00007F06 7000                       		moveq	#0,d0
00007F08 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007F0C D040                       		add.w	d0,d0
00007F0E 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007F12 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007F16                            ; ===========================================================================
00007F16 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007F18 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007F1A 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007F1C                            ; ===========================================================================
00007F1C                            
00007F1C                            Resize_GHZ1:
00007F1C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007F22 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007F28 6500                       		bcs.s	locret_6E08	; if not, branch
00007F2A 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007F30                            
00007F30                            locret_6E08:
00007F30 4E75                       		rts	
00007F32                            ; ===========================================================================
00007F32                            
00007F32                            Resize_GHZ2:
00007F32 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007F38 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007F3E 6500                       		bcs.s	locret_6E3A
00007F40 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007F46 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007F4C 6500                       		bcs.s	locret_6E3A
00007F4E 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007F54 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00007F5A 6500                       		bcs.s	locret_6E3A
00007F5C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007F62                            
00007F62                            locret_6E3A:
00007F62 4E75                       		rts	
00007F64                            ; ===========================================================================
00007F64                            
00007F64                            Resize_GHZ3:
00007F64 7000                       		moveq	#0,d0
00007F66 1038 F742                  		move.b	($FFFFF742).w,d0
00007F6A 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007F6E 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007F72                            ; ===========================================================================
00007F72 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007F74 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007F76 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007F78                            ; ===========================================================================
00007F78                            
00007F78                            Resize_GHZ3main:
00007F78 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007F7E 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007F84 6500                       		bcs.s	locret_6E96
00007F86 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007F8C 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007F92 6500                       		bcs.s	locret_6E96
00007F94 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007F9A 6500                       		bcs.s	loc_6E98
00007F9C 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007FA2 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007FA8 6400                       		bcc.s	loc_6E8E
00007FAA 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007FB0 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007FB6                            
00007FB6                            loc_6E8E:
00007FB6 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007FBC 6400                       		bcc.s	loc_6E98
00007FBE                            
00007FBE                            locret_6E96:
00007FBE 4E75                       		rts	
00007FC0                            ; ===========================================================================
00007FC0                            
00007FC0                            loc_6E98:
00007FC0 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007FC6 5438 F742                  		addq.b	#2,($FFFFF742).w
00007FCA 4E75                       		rts	
00007FCC                            ; ===========================================================================
00007FCC                            
00007FCC                            Resize_GHZ3boss:
00007FCC 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007FD2 6400                       		bcc.s	loc_6EB0
00007FD4 5538 F742                  		subq.b	#2,($FFFFF742).w
00007FD8                            
00007FD8                            loc_6EB0:
00007FD8 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007FDE 6500                       		bcs.s	locret_6EE8
00007FE0 6100 0000                  		bsr.w	SingleObjLoad
00007FE4 6600                       		bne.s	loc_6ED0
00007FE6 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007FEA 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007FF0 337C 0280 000C             		move.w	#$280,$C(a1)
00007FF6                            
00007FF6                            loc_6ED0:
00007FF6 303C 008C                  		move.w	#$8C,d0
00007FFA 6100 921E                  		bsr.w	PlaySound	; play boss music
00007FFE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008004 5438 F742                  		addq.b	#2,($FFFFF742).w
00008008 7011                       		moveq	#$11,d0
0000800A 6000 9452                  		bra.w	LoadPLC		; load boss patterns
0000800E                            ; ===========================================================================
0000800E                            
0000800E                            locret_6EE8:
0000800E 4E75                       		rts	
00008010                            ; ===========================================================================
00008010                            
00008010                            Resize_GHZ3end:
00008010 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008016 4E75                       		rts	
00008018                            ; ===========================================================================
00008018                            ; ---------------------------------------------------------------------------
00008018                            ; Labyrinth Zone dynamic screen	resizing
00008018                            ; ---------------------------------------------------------------------------
00008018                            
00008018                            Resize_LZ:				; XREF: Resize_Index
00008018 7000                       		moveq	#0,d0
0000801A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000801E D040                       		add.w	d0,d0
00008020 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00008024 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00008028                            ; ===========================================================================
00008028 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
0000802A 0000                       		dc.w Resize_LZ12-Resize_LZx
0000802C 0000                       		dc.w Resize_LZ3-Resize_LZx
0000802E 0000                       		dc.w Resize_SBZ3-Resize_LZx
00008030                            ; ===========================================================================
00008030                            
00008030                            Resize_LZ12:
00008030 4E75                       		rts	
00008032                            ; ===========================================================================
00008032                            
00008032                            Resize_LZ3:
00008032 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
00008036 6700                       		beq.s	loc_6F28	; if not, branch
00008038 43F8 A506                  		lea	($FFFFA506).w,a1
0000803C 0C11 0007                  		cmpi.b	#7,(a1)
00008040 6700                       		beq.s	loc_6F28
00008042 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00008046 303C 00B7                  		move.w	#$B7,d0
0000804A 6100 91D4                  		bsr.w	PlaySound_Special ; play rumbling sound
0000804E                            
0000804E                            loc_6F28:
0000804E 4A38 F742                  		tst.b	($FFFFF742).w
00008052 6600                       		bne.s	locret_6F64
00008054 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000805A 6500                       		bcs.s	locret_6F62
0000805C 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00008062 6400                       		bcc.s	locret_6F62
00008064 6100 0000                  		bsr.w	SingleObjLoad
00008068 6600                       		bne.s	loc_6F4A
0000806A 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
0000806E                            
0000806E                            loc_6F4A:
0000806E 303C 008C                  		move.w	#$8C,d0
00008072 6100 91A6                  		bsr.w	PlaySound	; play boss music
00008076 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000807C 5438 F742                  		addq.b	#2,($FFFFF742).w
00008080 7011                       		moveq	#$11,d0
00008082 6000 93DA                  		bra.w	LoadPLC		; load boss patterns
00008086                            ; ===========================================================================
00008086                            
00008086                            locret_6F62:
00008086 4E75                       		rts	
00008088                            ; ===========================================================================
00008088                            
00008088                            locret_6F64:
00008088 4E75                       		rts	
0000808A                            ; ===========================================================================
0000808A                            
0000808A                            Resize_SBZ3:
0000808A 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00008090 6500                       		bcs.s	locret_6F8C
00008092 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00008098 6400                       		bcc.s	locret_6F8C	; if not, branch
0000809A 4238 FE30                  		clr.b	($FFFFFE30).w
0000809E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000080A4 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000080AA 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000080B0                            
000080B0                            locret_6F8C:
000080B0 4E75                       		rts	
000080B2                            ; ===========================================================================
000080B2                            ; ---------------------------------------------------------------------------
000080B2                            ; Marble Zone dynamic screen resizing
000080B2                            ; ---------------------------------------------------------------------------
000080B2                            
000080B2                            Resize_MZ:				; XREF: Resize_Index
000080B2 7000                       		moveq	#0,d0
000080B4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000080B8 D040                       		add.w	d0,d0
000080BA 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000080BE 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000080C2                            ; ===========================================================================
000080C2 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000080C4 0000                       		dc.w Resize_MZ2-Resize_MZx
000080C6 0000                       		dc.w Resize_MZ3-Resize_MZx
000080C8                            ; ===========================================================================
000080C8                            
000080C8                            Resize_MZ1:
000080C8 7000                       		moveq	#0,d0
000080CA 1038 F742                  		move.b	($FFFFF742).w,d0
000080CE 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000080D2 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000080D6                            ; ===========================================================================
000080D6 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000080D8 0000                       		dc.w loc_6FEA-off_6FB2
000080DA 0000                       		dc.w loc_702E-off_6FB2
000080DC 0000                       		dc.w loc_7050-off_6FB2
000080DE                            ; ===========================================================================
000080DE                            
000080DE                            loc_6FBA:
000080DE 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000080E4 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000080EA 6500                       		bcs.s	locret_6FE8
000080EC 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000080F2 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000080F8 6500                       		bcs.s	locret_6FE8
000080FA 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00008100 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00008106 6500                       		bcs.s	locret_6FE8
00008108 5438 F742                  		addq.b	#2,($FFFFF742).w
0000810C                            
0000810C                            locret_6FE8:
0000810C 4E75                       		rts	
0000810E                            ; ===========================================================================
0000810E                            
0000810E                            loc_6FEA:
0000810E 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00008114 6400                       		bcc.s	loc_6FF8
00008116 5538 F742                  		subq.b	#2,($FFFFF742).w
0000811A 4E75                       		rts	
0000811C                            ; ===========================================================================
0000811C                            
0000811C                            loc_6FF8:
0000811C 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00008122 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00008128 6400                       		bcc.s	locret_702C
0000812A 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00008130 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00008136 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
0000813C 6400                       		bcc.s	locret_702C
0000813E 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00008144 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000814A 6500                       		bcs.s	locret_702C
0000814C 5438 F742                  		addq.b	#2,($FFFFF742).w
00008150                            
00008150                            locret_702C:
00008150 4E75                       		rts	
00008152                            ; ===========================================================================
00008152                            
00008152                            loc_702E:
00008152 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00008158 6400                       		bcc.s	loc_703C
0000815A 5538 F742                  		subq.b	#2,($FFFFF742).w
0000815E 4E75                       		rts	
00008160                            ; ===========================================================================
00008160                            
00008160                            loc_703C:
00008160 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00008166 6500                       		bcs.s	locret_704E
00008168 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
0000816E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008172                            
00008172                            locret_704E:
00008172 4E75                       		rts	
00008174                            ; ===========================================================================
00008174                            
00008174                            loc_7050:
00008174 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
0000817A 6500                       		bcs.s	locret_7072
0000817C 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00008182 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00008188 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
0000818E 6500                       		bcs.s	locret_7072
00008190 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00008196                            
00008196                            locret_7072:
00008196 4E75                       		rts	
00008198                            ; ===========================================================================
00008198                            
00008198                            Resize_MZ2:
00008198 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000819E 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000081A4 6500                       		bcs.s	locret_7088
000081A6 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000081AC                            
000081AC                            locret_7088:
000081AC 4E75                       		rts	
000081AE                            ; ===========================================================================
000081AE                            
000081AE                            Resize_MZ3:
000081AE 7000                       		moveq	#0,d0
000081B0 1038 F742                  		move.b	($FFFFF742).w,d0
000081B4 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000081B8 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000081BC                            ; ===========================================================================
000081BC 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000081BE 0000                       		dc.w Resize_MZ3end-off_7098
000081C0                            ; ===========================================================================
000081C0                            
000081C0                            Resize_MZ3boss:
000081C0 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000081C6 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000081CC 6500                       		bcs.s	locret_70E8
000081CE 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000081D4 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000081DA 6500                       		bcs.s	locret_70E8
000081DC 6100 0000                  		bsr.w	SingleObjLoad
000081E0 6600                       		bne.s	loc_70D0
000081E2 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
000081E6 337C 19F0 0008             		move.w	#$19F0,8(a1)
000081EC 337C 022C 000C             		move.w	#$22C,$C(a1)
000081F2                            
000081F2                            loc_70D0:
000081F2 303C 008C                  		move.w	#$8C,d0
000081F6 6100 9022                  		bsr.w	PlaySound	; play boss music
000081FA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008200 5438 F742                  		addq.b	#2,($FFFFF742).w
00008204 7011                       		moveq	#$11,d0
00008206 6000 9256                  		bra.w	LoadPLC		; load boss patterns
0000820A                            ; ===========================================================================
0000820A                            
0000820A                            locret_70E8:
0000820A 4E75                       		rts	
0000820C                            ; ===========================================================================
0000820C                            
0000820C                            Resize_MZ3end:
0000820C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008212 4E75                       		rts	
00008214                            ; ===========================================================================
00008214                            ; ---------------------------------------------------------------------------
00008214                            ; Star Light Zone dynamic screen resizing
00008214                            ; ---------------------------------------------------------------------------
00008214                            
00008214                            Resize_SLZ:				; XREF: Resize_Index
00008214 7000                       		moveq	#0,d0
00008216 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000821A D040                       		add.w	d0,d0
0000821C 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00008220 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00008224                            ; ===========================================================================
00008224 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
00008226 0000                       		dc.w Resize_SLZ12-Resize_SLZx
00008228 0000                       		dc.w Resize_SLZ3-Resize_SLZx
0000822A                            ; ===========================================================================
0000822A                            
0000822A                            Resize_SLZ12:
0000822A 4E75                       		rts	
0000822C                            ; ===========================================================================
0000822C                            
0000822C                            Resize_SLZ3:
0000822C 7000                       		moveq	#0,d0
0000822E 1038 F742                  		move.b	($FFFFF742).w,d0
00008232 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008236 4EFB 0000                  		jmp	off_7118(pc,d0.w)
0000823A                            ; ===========================================================================
0000823A 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
0000823C 0000                       		dc.w Resize_SLZ3boss-off_7118
0000823E 0000                       		dc.w Resize_SLZ3end-off_7118
00008240                            ; ===========================================================================
00008240                            
00008240                            Resize_SLZ3main:
00008240 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00008246 6500                       		bcs.s	locret_7130
00008248 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000824E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008252                            
00008252                            locret_7130:
00008252 4E75                       		rts	
00008254                            ; ===========================================================================
00008254                            
00008254                            Resize_SLZ3boss:
00008254 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000825A 6500                       		bcs.s	locret_715C
0000825C 6100 0000                  		bsr.w	SingleObjLoad
00008260 6600                       		bne.s	loc_7144
00008262 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00008266                            
00008266                            loc_7144:
00008266 303C 008C                  		move.w	#$8C,d0
0000826A 6100 8FAE                  		bsr.w	PlaySound	; play boss music
0000826E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008274 5438 F742                  		addq.b	#2,($FFFFF742).w
00008278 7011                       		moveq	#$11,d0
0000827A 6000 91E2                  		bra.w	LoadPLC		; load boss patterns
0000827E                            ; ===========================================================================
0000827E                            
0000827E                            locret_715C:
0000827E 4E75                       		rts	
00008280                            ; ===========================================================================
00008280                            
00008280                            Resize_SLZ3end:
00008280 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008286 4E75                       		rts
00008288 4E75                       		rts
0000828A                            ; ===========================================================================
0000828A                            ; ---------------------------------------------------------------------------
0000828A                            ; Spring Yard Zone dynamic screen resizing
0000828A                            ; ---------------------------------------------------------------------------
0000828A                            
0000828A                            Resize_SYZ:				; XREF: Resize_Index
0000828A 7000                       		moveq	#0,d0
0000828C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008290 D040                       		add.w	d0,d0
00008292 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00008296 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
0000829A                            ; ===========================================================================
0000829A 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
0000829C 0000                       		dc.w Resize_SYZ2-Resize_SYZx
0000829E 0000                       		dc.w Resize_SYZ3-Resize_SYZx
000082A0                            ; ===========================================================================
000082A0                            
000082A0                            Resize_SYZ1:
000082A0 4E75                       		rts	
000082A2                            ; ===========================================================================
000082A2                            
000082A2                            Resize_SYZ2:
000082A2 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000082A8 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000082AE 6500                       		bcs.s	locret_71A2
000082B0 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000082B6 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000082BC 6500                       		bcs.s	locret_71A2
000082BE 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000082C4                            
000082C4                            locret_71A2:
000082C4 4E75                       		rts	
000082C6                            ; ===========================================================================
000082C6                            
000082C6                            Resize_SYZ3:
000082C6 7000                       		moveq	#0,d0
000082C8 1038 F742                  		move.b	($FFFFF742).w,d0
000082CC 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000082D0 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000082D4                            ; ===========================================================================
000082D4 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000082D6 0000                       		dc.w Resize_SYZ3boss-off_71B2
000082D8 0000                       		dc.w Resize_SYZ3end-off_71B2
000082DA                            ; ===========================================================================
000082DA                            
000082DA                            Resize_SYZ3main:
000082DA 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000082E0 6500                       		bcs.s	locret_71CE
000082E2 6100 0000                  		bsr.w	SingleObjLoad
000082E6 6600                       		bne.s	locret_71CE
000082E8 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000082EC 5438 F742                  		addq.b	#2,($FFFFF742).w
000082F0                            
000082F0                            locret_71CE:
000082F0 4E75                       		rts	
000082F2                            ; ===========================================================================
000082F2                            
000082F2                            Resize_SYZ3boss:
000082F2 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000082F8 6500                       		bcs.s	locret_7200
000082FA 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00008300 6100 0000                  		bsr.w	SingleObjLoad
00008304 6600                       		bne.s	loc_71EC
00008306 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
0000830A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000830E                            
0000830E                            loc_71EC:
0000830E 303C 008C                  		move.w	#$8C,d0
00008312 6100 8F06                  		bsr.w	PlaySound	; play boss music
00008316 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000831C 7011                       		moveq	#$11,d0
0000831E 6000 913E                  		bra.w	LoadPLC		; load boss patterns
00008322                            ; ===========================================================================
00008322                            
00008322                            locret_7200:
00008322 4E75                       		rts	
00008324                            ; ===========================================================================
00008324                            
00008324                            Resize_SYZ3end:
00008324 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000832A 4E75                       		rts	
0000832C                            ; ===========================================================================
0000832C                            ; ---------------------------------------------------------------------------
0000832C                            ; Scrap	Brain Zone dynamic screen resizing
0000832C                            ; ---------------------------------------------------------------------------
0000832C                            
0000832C                            Resize_SBZ:				; XREF: Resize_Index
0000832C 7000                       		moveq	#0,d0
0000832E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008332 D040                       		add.w	d0,d0
00008334 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00008338 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
0000833C                            ; ===========================================================================
0000833C 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
0000833E 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00008340 0000                       		dc.w Resize_FZ-Resize_SBZx
00008342                            ; ===========================================================================
00008342                            
00008342                            Resize_SBZ1:
00008342 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00008348 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
0000834E 6500                       		bcs.s	locret_7242
00008350 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00008356 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000835C 6500                       		bcs.s	locret_7242
0000835E 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00008364                            
00008364                            locret_7242:
00008364 4E75                       		rts	
00008366                            ; ===========================================================================
00008366                            
00008366                            Resize_SBZ2:
00008366 7000                       		moveq	#0,d0
00008368 1038 F742                  		move.b	($FFFFF742).w,d0
0000836C 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008370 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008374                            ; ===========================================================================
00008374 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00008376 0000                       		dc.w Resize_SBZ2boss-off_7252
00008378 0000                       		dc.w Resize_SBZ2boss2-off_7252
0000837A 0000                       		dc.w Resize_SBZ2end-off_7252
0000837C                            ; ===========================================================================
0000837C                            
0000837C                            Resize_SBZ2main:
0000837C 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00008382 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00008388 6500                       		bcs.s	locret_727A
0000838A 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00008390 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00008396 6500                       		bcs.s	locret_727A
00008398 5438 F742                  		addq.b	#2,($FFFFF742).w
0000839C                            
0000839C                            locret_727A:
0000839C 4E75                       		rts	
0000839E                            ; ===========================================================================
0000839E                            
0000839E                            Resize_SBZ2boss:
0000839E 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
000083A4 6500                       		bcs.s	locret_7298
000083A6 6100 0000                  		bsr.w	SingleObjLoad
000083AA 6600                       		bne.s	locret_7298
000083AC 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000083B0 5438 F742                  		addq.b	#2,($FFFFF742).w
000083B4 701E                       		moveq	#$1E,d0
000083B6 6000 90A6                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000083BA                            ; ===========================================================================
000083BA                            
000083BA                            locret_7298:
000083BA 4E75                       		rts	
000083BC                            ; ===========================================================================
000083BC                            
000083BC                            Resize_SBZ2boss2:
000083BC 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000083C2 6500                       		bcs.s	loc_72B6
000083C4 6100 0000                  		bsr.w	SingleObjLoad
000083C8 6600                       		bne.s	loc_72B0
000083CA 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000083CE 5438 F742                  		addq.b	#2,($FFFFF742).w
000083D2                            
000083D2                            loc_72B0:
000083D2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000083D8                            
000083D8                            loc_72B6:
000083D8 6000                       		bra.s	loc_72C2
000083DA                            ; ===========================================================================
000083DA                            
000083DA                            Resize_SBZ2end:
000083DA 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000083E0 6500                       		bcs.s	loc_72C2
000083E2 4E75                       		rts	
000083E4                            ; ===========================================================================
000083E4                            
000083E4                            loc_72C2:
000083E4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000083EA 4E75                       		rts	
000083EC                            ; ===========================================================================
000083EC                            
000083EC                            Resize_FZ:
000083EC 7000                       		moveq	#0,d0
000083EE 1038 F742                  		move.b	($FFFFF742).w,d0
000083F2 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
000083F6 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000083FA                            ; ===========================================================================
000083FA 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
000083FE 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00008402 0000                       		dc.w Resize_FZend2-off_72D8
00008404                            ; ===========================================================================
00008404                            
00008404                            Resize_FZmain:
00008404 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
0000840A 6500                       		bcs.s	loc_72F4
0000840C 5438 F742                  		addq.b	#2,($FFFFF742).w
00008410 701F                       		moveq	#$1F,d0
00008412 6100 904A                  		bsr.w	LoadPLC		; load FZ boss patterns
00008416                            
00008416                            loc_72F4:
00008416 60CC                       		bra.s	loc_72C2
00008418                            ; ===========================================================================
00008418                            
00008418                            Resize_FZboss:
00008418 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
0000841E 6500                       		bcs.s	loc_7312
00008420 6100 0000                  		bsr.w	SingleObjLoad
00008424 6600                       		bne.s	loc_7312
00008426 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
0000842A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000842E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008434                            
00008434                            loc_7312:
00008434 60AE                       		bra.s	loc_72C2
00008436                            ; ===========================================================================
00008436                            
00008436                            Resize_FZend:
00008436 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0000843C 6500                       		bcs.s	loc_7320
0000843E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008442                            
00008442                            loc_7320:
00008442 60A0                       		bra.s	loc_72C2
00008444                            ; ===========================================================================
00008444                            
00008444                            locret_7322:
00008444 4E75                       		rts	
00008446                            ; ===========================================================================
00008446                            
00008446                            Resize_FZend2:
00008446 609C                       		bra.s	loc_72C2
00008448                            ; ===========================================================================
00008448                            ; ---------------------------------------------------------------------------
00008448                            ; Ending sequence dynamic screen resizing (empty)
00008448                            ; ---------------------------------------------------------------------------
00008448                            
00008448                            Resize_Ending:				; XREF: Resize_Index
00008448 4E75                       		rts	
0000844A                            ; ===========================================================================
0000844A                            ; ---------------------------------------------------------------------------
0000844A                            ; Object 11 - GHZ bridge
0000844A                            ; ---------------------------------------------------------------------------
0000844A                            
0000844A                            Obj11:					; XREF: Obj_Index
0000844A 7000                       		moveq	#0,d0
0000844C 1028 0024                  		move.b	$24(a0),d0
00008450 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00008454 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00008458                            ; ===========================================================================
00008458 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
0000845C 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00008460 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00008464                            ; ===========================================================================
00008464                            
00008464                            Obj11_Main:				; XREF: Obj11_Index
00008464 5428 0024                  		addq.b	#2,$24(a0)
00008468 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00008470 317C 438E 0002             		move.w	#$438E,2(a0)
00008476 117C 0004 0001             		move.b	#4,1(a0)
0000847C 117C 0003 0018             		move.b	#3,$18(a0)
00008482 117C 0080 0019             		move.b	#$80,$19(a0)
00008488 3428 000C                  		move.w	$C(a0),d2
0000848C 3628 0008                  		move.w	8(a0),d3
00008490 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008492 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00008496 7200                       		moveq	#0,d1
00008498 1212                       		move.b	(a2),d1		; copy a2 to d1
0000849A 14FC 0000                  		move.b	#0,(a2)+
0000849E 3001                       		move.w	d1,d0
000084A0 E248                       		lsr.w	#1,d0
000084A2 E948                       		lsl.w	#4,d0
000084A4 9640                       		sub.w	d0,d3
000084A6 5501                       		subq.b	#2,d1
000084A8 6500                       		bcs.s	Obj11_Action
000084AA                            
000084AA                            Obj11_MakeBdg:
000084AA 6100 0000                  		bsr.w	SingleObjLoad
000084AE 6600                       		bne.s	Obj11_Action
000084B0 5228 0028                  		addq.b	#1,$28(a0)
000084B4 B668 0008                  		cmp.w	8(a0),d3
000084B8 6600                       		bne.s	loc_73B8
000084BA 0643 0010                  		addi.w	#$10,d3
000084BE 3142 000C                  		move.w	d2,$C(a0)
000084C2 3142 003C                  		move.w	d2,$3C(a0)
000084C6 3A08                       		move.w	a0,d5
000084C8 0445 D000                  		subi.w	#-$3000,d5
000084CC EC4D                       		lsr.w	#6,d5
000084CE 0245 007F                  		andi.w	#$7F,d5
000084D2 14C5                       		move.b	d5,(a2)+
000084D4 5228 0028                  		addq.b	#1,$28(a0)
000084D8                            
000084D8                            loc_73B8:				; XREF: ROM:00007398j
000084D8 3A09                       		move.w	a1,d5
000084DA 0445 D000                  		subi.w	#-$3000,d5
000084DE EC4D                       		lsr.w	#6,d5
000084E0 0245 007F                  		andi.w	#$7F,d5
000084E4 14C5                       		move.b	d5,(a2)+
000084E6 137C 000A 0024             		move.b	#$A,$24(a1)
000084EC 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
000084EE 3342 000C                  		move.w	d2,$C(a1)
000084F2 3342 003C                  		move.w	d2,$3C(a1)
000084F6 3343 0008                  		move.w	d3,8(a1)
000084FA 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00008502 337C 438E 0002             		move.w	#$438E,2(a1)
00008508 137C 0004 0001             		move.b	#4,1(a1)
0000850E 137C 0003 0018             		move.b	#3,$18(a1)
00008514 137C 0008 0019             		move.b	#8,$19(a1)
0000851A 0643 0010                  		addi.w	#$10,d3
0000851E 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00008522                            
00008522                            Obj11_Action:				; XREF: Obj11_Index
00008522 6100                       		bsr.s	Obj11_Solid
00008524 4A28 003E                  		tst.b	$3E(a0)
00008528 6700                       		beq.s	Obj11_Display
0000852A 5928 003E                  		subq.b	#4,$3E(a0)
0000852E 6100 0000                  		bsr.w	Obj11_Bend
00008532                            
00008532                            Obj11_Display:
00008532 6100 0000                  		bsr.w	DisplaySprite
00008536 6000 0000                  		bra.w	Obj11_ChkDel
0000853A                            
0000853A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000853A                            
0000853A                            
0000853A                            Obj11_Solid:				; XREF: Obj11_Action
0000853A 7200                       		moveq	#0,d1
0000853C 1228 0028                  		move.b	$28(a0),d1
00008540 E749                       		lsl.w	#3,d1
00008542 3401                       		move.w	d1,d2
00008544 5041                       		addq.w	#8,d1
00008546 D442                       		add.w	d2,d2
00008548 43F8 D000                  		lea	($FFFFD000).w,a1
0000854C 4A69 0012                  		tst.w	$12(a1)
00008550 6B00 0000                  		bmi.w	locret_751E
00008554 3029 0008                  		move.w	8(a1),d0
00008558 9068 0008                  		sub.w	8(a0),d0
0000855C D041                       		add.w	d1,d0
0000855E 6B00 0000                  		bmi.w	locret_751E
00008562 B042                       		cmp.w	d2,d0
00008564 6400 0000                  		bcc.w	locret_751E
00008568 6000                       		bra.s	Platform2
0000856A                            ; End of function Obj11_Solid
0000856A                            
0000856A                            ; ---------------------------------------------------------------------------
0000856A                            ; Platform subroutine
0000856A                            ; ---------------------------------------------------------------------------
0000856A                            
0000856A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000856A                            
0000856A                            
0000856A                            PlatformObject:
0000856A 43F8 D000                  		lea	($FFFFD000).w,a1
0000856E 4A69 0012                  		tst.w	$12(a1)
00008572 6B00 0000                  		bmi.w	locret_751E
00008576 3029 0008                  		move.w	8(a1),d0
0000857A 9068 0008                  		sub.w	8(a0),d0
0000857E D041                       		add.w	d1,d0
00008580 6B00 0000                  		bmi.w	locret_751E
00008584 D241                       		add.w	d1,d1
00008586 B041                       		cmp.w	d1,d0
00008588 6400 0000                  		bcc.w	locret_751E
0000858C                            
0000858C                            Platform2:
0000858C 3028 000C                  		move.w	$C(a0),d0
00008590 5140                       		subq.w	#8,d0
00008592                            
00008592                            Platform3:
00008592 3429 000C                  		move.w	$C(a1),d2
00008596 1229 0016                  		move.b	$16(a1),d1
0000859A 4881                       		ext.w	d1
0000859C D242                       		add.w	d2,d1
0000859E 5841                       		addq.w	#4,d1
000085A0 9041                       		sub.w	d1,d0
000085A2 6200 0000                  		bhi.w	locret_751E
000085A6 0C40 FFF0                  		cmpi.w	#-$10,d0
000085AA 6500 0000                  		bcs.w	locret_751E
000085AE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000085B2 6B00 0000                  		bmi.w	locret_751E
000085B6 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000085BC 6400 0000                  		bcc.w	locret_751E
000085C0 D440                       		add.w	d0,d2
000085C2 5642                       		addq.w	#3,d2
000085C4 3342 000C                  		move.w	d2,$C(a1)
000085C8 5428 0024                  		addq.b	#2,$24(a0)
000085CC                            
000085CC                            loc_74AE:
000085CC 0829 0003 0022             		btst	#3,$22(a1)
000085D2 6700                       		beq.s	loc_74DC
000085D4 7000                       		moveq	#0,d0
000085D6 1029 003D                  		move.b	$3D(a1),d0
000085DA ED48                       		lsl.w	#6,d0
000085DC 0680 00FF D000             		addi.l	#$FFD000,d0
000085E2 2440                       		movea.l	d0,a2
000085E4 08AA 0003 0022             		bclr	#3,$22(a2)
000085EA 422A 0025                  		clr.b	$25(a2)
000085EE 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
000085F4 6600                       		bne.s	loc_74DC
000085F6 552A 0024                  		subq.b	#2,$24(a2)
000085FA                            
000085FA                            loc_74DC:
000085FA 3008                       		move.w	a0,d0
000085FC 0440 D000                  		subi.w	#-$3000,d0
00008600 EC48                       		lsr.w	#6,d0
00008602 0240 007F                  		andi.w	#$7F,d0
00008606 1340 003D                  		move.b	d0,$3D(a1)
0000860A 137C 0000 0026             		move.b	#0,$26(a1)
00008610 337C 0000 0012             		move.w	#0,$12(a1)
00008616 3369 0010 0020             		move.w	$10(a1),$20(a1)
0000861C 0829 0001 0022             		btst	#1,$22(a1)
00008622 6700                       		beq.s	loc_7512
00008624 2F08                       		move.l	a0,-(sp)
00008626 2049                       		movea.l	a1,a0
00008628 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0000862E 205F                       		movea.l	(sp)+,a0
00008630                            
00008630                            loc_7512:
00008630 08E9 0003 0022             		bset	#3,$22(a1)
00008636 08E8 0003 0022             		bset	#3,$22(a0)
0000863C                            
0000863C                            locret_751E:
0000863C 4E75                       		rts	
0000863E                            ; End of function PlatformObject
0000863E                            
0000863E                            ; ---------------------------------------------------------------------------
0000863E                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
0000863E                            ; ---------------------------------------------------------------------------
0000863E                            
0000863E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000863E                            
0000863E                            
0000863E                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
0000863E 43F8 D000                  		lea	($FFFFD000).w,a1
00008642 4A69 0012                  		tst.w	$12(a1)
00008646 6B00 FFF4                  		bmi.w	locret_751E
0000864A 3029 0008                  		move.w	8(a1),d0
0000864E 9068 0008                  		sub.w	8(a0),d0
00008652 D041                       		add.w	d1,d0
00008654 6BE6                       		bmi.s	locret_751E
00008656 D241                       		add.w	d1,d1
00008658 B041                       		cmp.w	d1,d0
0000865A 64E0                       		bcc.s	locret_751E
0000865C 0828 0000 0001             		btst	#0,1(a0)
00008662 6700                       		beq.s	loc_754A
00008664 4640                       		not.w	d0
00008666 D041                       		add.w	d1,d0
00008668                            
00008668                            loc_754A:
00008668 E248                       		lsr.w	#1,d0
0000866A 7600                       		moveq	#0,d3
0000866C 1632 0000                  		move.b	(a2,d0.w),d3
00008670 3028 000C                  		move.w	$C(a0),d0
00008674 9043                       		sub.w	d3,d0
00008676 6000 FF1A                  		bra.w	Platform3
0000867A                            ; End of function SlopeObject
0000867A                            
0000867A                            
0000867A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000867A                            
0000867A                            
0000867A                            Obj15_Solid:				; XREF: Obj15_SetSolid
0000867A 43F8 D000                  		lea	($FFFFD000).w,a1
0000867E 4A69 0012                  		tst.w	$12(a1)
00008682 6B00 FFB8                  		bmi.w	locret_751E
00008686 3029 0008                  		move.w	8(a1),d0
0000868A 9068 0008                  		sub.w	8(a0),d0
0000868E D041                       		add.w	d1,d0
00008690 6B00 FFAA                  		bmi.w	locret_751E
00008694 D241                       		add.w	d1,d1
00008696 B041                       		cmp.w	d1,d0
00008698 6400 FFA2                  		bcc.w	locret_751E
0000869C 3028 000C                  		move.w	$C(a0),d0
000086A0 9043                       		sub.w	d3,d0
000086A2 6000 FEEE                  		bra.w	Platform3
000086A6                            ; End of function Obj15_Solid
000086A6                            
000086A6                            ; ===========================================================================
000086A6                            
000086A6                            Obj11_Action2:				; XREF: Obj11_Index
000086A6 6100                       		bsr.s	Obj11_WalkOff
000086A8 6100 0000                  		bsr.w	DisplaySprite
000086AC 6000 0000                  		bra.w	Obj11_ChkDel
000086B0                            
000086B0                            ; ---------------------------------------------------------------------------
000086B0                            ; Subroutine allowing Sonic to walk off a bridge
000086B0                            ; ---------------------------------------------------------------------------
000086B0                            
000086B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086B0                            
000086B0                            
000086B0                            Obj11_WalkOff:				; XREF: Obj11_Action2
000086B0 7200                       		moveq	#0,d1
000086B2 1228 0028                  		move.b	$28(a0),d1
000086B6 E749                       		lsl.w	#3,d1
000086B8 3401                       		move.w	d1,d2
000086BA 5041                       		addq.w	#8,d1
000086BC 6100                       		bsr.s	ExitPlatform2
000086BE 6400                       		bcc.s	locret_75BE
000086C0 E848                       		lsr.w	#4,d0
000086C2 1140 003F                  		move.b	d0,$3F(a0)
000086C6 1028 003E                  		move.b	$3E(a0),d0
000086CA 0C00 0040                  		cmpi.b	#$40,d0
000086CE 6700                       		beq.s	loc_75B6
000086D0 5828 003E                  		addq.b	#4,$3E(a0)
000086D4                            
000086D4                            loc_75B6:
000086D4 6100 0000                  		bsr.w	Obj11_Bend
000086D8 6100 0000                  		bsr.w	Obj11_MoveSonic
000086DC                            
000086DC                            locret_75BE:
000086DC 4E75                       		rts	
000086DE                            ; End of function Obj11_WalkOff
000086DE                            
000086DE                            ; ---------------------------------------------------------------------------
000086DE                            ; Subroutine allowing Sonic to walk or jump off	a platform
000086DE                            ; ---------------------------------------------------------------------------
000086DE                            
000086DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086DE                            
000086DE                            
000086DE                            ExitPlatform:
000086DE 3401                       		move.w	d1,d2
000086E0                            
000086E0                            ExitPlatform2:
000086E0 D442                       		add.w	d2,d2
000086E2 43F8 D000                  		lea	($FFFFD000).w,a1
000086E6 0829 0001 0022             		btst	#1,$22(a1)
000086EC 6600                       		bne.s	loc_75E0
000086EE 3029 0008                  		move.w	8(a1),d0
000086F2 9068 0008                  		sub.w	8(a0),d0
000086F6 D041                       		add.w	d1,d0
000086F8 6B00                       		bmi.s	loc_75E0
000086FA B042                       		cmp.w	d2,d0
000086FC 6500                       		bcs.s	locret_75F2
000086FE                            
000086FE                            loc_75E0:
000086FE 08A9 0003 0022             		bclr	#3,$22(a1)
00008704 117C 0002 0024             		move.b	#2,$24(a0)
0000870A 08A8 0003 0022             		bclr	#3,$22(a0)
00008710                            
00008710                            locret_75F2:
00008710 4E75                       		rts	
00008712                            ; End of function ExitPlatform
00008712                            
00008712                            
00008712                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008712                            
00008712                            
00008712                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00008712 7000                       		moveq	#0,d0
00008714 1028 003F                  		move.b	$3F(a0),d0
00008718 1030 0029                  		move.b	$29(a0,d0.w),d0
0000871C ED48                       		lsl.w	#6,d0
0000871E 0680 00FF D000             		addi.l	#$FFD000,d0
00008724 2440                       		movea.l	d0,a2
00008726 43F8 D000                  		lea	($FFFFD000).w,a1
0000872A 302A 000C                  		move.w	$C(a2),d0
0000872E 5140                       		subq.w	#8,d0
00008730 7200                       		moveq	#0,d1
00008732 1229 0016                  		move.b	$16(a1),d1
00008736 9041                       		sub.w	d1,d0
00008738 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
0000873C 4E75                       		rts	
0000873E                            ; End of function Obj11_MoveSonic
0000873E                            
0000873E                            
0000873E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000873E                            
0000873E                            
0000873E                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
0000873E 1028 003E                  		move.b	$3E(a0),d0
00008742 6100 A2B2                  		bsr.w	CalcSine
00008746 3800                       		move.w	d0,d4
00008748 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
0000874E 7000                       		moveq	#0,d0
00008750 1028 0028                  		move.b	$28(a0),d0
00008754 E948                       		lsl.w	#4,d0
00008756 7600                       		moveq	#0,d3
00008758 1628 003F                  		move.b	$3F(a0),d3
0000875C 3403                       		move.w	d3,d2
0000875E D640                       		add.w	d0,d3
00008760 7A00                       		moveq	#0,d5
00008762 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00008768 1A35 3000                  		move.b	(a5,d3.w),d5
0000876C 0243 000F                  		andi.w	#$F,d3
00008770 E94B                       		lsl.w	#4,d3
00008772 47F4 3000                  		lea	(a4,d3.w),a3
00008776 45E8 0029                  		lea	$29(a0),a2
0000877A                            
0000877A                            loc_765C:
0000877A 7000                       		moveq	#0,d0
0000877C 101A                       		move.b	(a2)+,d0
0000877E ED48                       		lsl.w	#6,d0
00008780 0680 00FF D000             		addi.l	#$FFD000,d0
00008786 2240                       		movea.l	d0,a1
00008788 7000                       		moveq	#0,d0
0000878A 101B                       		move.b	(a3)+,d0
0000878C 5240                       		addq.w	#1,d0
0000878E C0C5                       		mulu.w	d5,d0
00008790 C0C4                       		mulu.w	d4,d0
00008792 4840                       		swap	d0
00008794 D069 003C                  		add.w	$3C(a1),d0
00008798 3340 000C                  		move.w	d0,$C(a1)
0000879C 51CA FFDC                  		dbf	d2,loc_765C
000087A0 7000                       		moveq	#0,d0
000087A2 1028 0028                  		move.b	$28(a0),d0
000087A6 7600                       		moveq	#0,d3
000087A8 1628 003F                  		move.b	$3F(a0),d3
000087AC 5203                       		addq.b	#1,d3
000087AE 9600                       		sub.b	d0,d3
000087B0 4403                       		neg.b	d3
000087B2 6B00                       		bmi.s	locret_76CA
000087B4 3403                       		move.w	d3,d2
000087B6 E94B                       		lsl.w	#4,d3
000087B8 47F4 3000                  		lea	(a4,d3.w),a3
000087BC D6C2                       		adda.w	d2,a3
000087BE 5342                       		subq.w	#1,d2
000087C0 6500                       		bcs.s	locret_76CA
000087C2                            
000087C2                            loc_76A4:
000087C2 7000                       		moveq	#0,d0
000087C4 101A                       		move.b	(a2)+,d0
000087C6 ED48                       		lsl.w	#6,d0
000087C8 0680 00FF D000             		addi.l	#$FFD000,d0
000087CE 2240                       		movea.l	d0,a1
000087D0 7000                       		moveq	#0,d0
000087D2 1023                       		move.b	-(a3),d0
000087D4 5240                       		addq.w	#1,d0
000087D6 C0C5                       		mulu.w	d5,d0
000087D8 C0C4                       		mulu.w	d4,d0
000087DA 4840                       		swap	d0
000087DC D069 003C                  		add.w	$3C(a1),d0
000087E0 3340 000C                  		move.w	d0,$C(a1)
000087E4 51CA FFDC                  		dbf	d2,loc_76A4
000087E8                            
000087E8                            locret_76CA:
000087E8 4E75                       		rts	
000087EA                            ; End of function Obj11_Bend
000087EA                            
000087EA                            ; ===========================================================================
000087EA                            ; ---------------------------------------------------------------------------
000087EA                            ; GHZ bridge-bending data
000087EA                            ; (Defines how the bridge bends	when Sonic walks across	it)
000087EA                            ; ---------------------------------------------------------------------------
000087EA                            Obj11_BendData:	incbin	misc\ghzbend1.bin
000088FA                            		even
000088FA                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000089FA                            		even
000089FA                            
000089FA                            ; ===========================================================================
000089FA                            
000089FA                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000089FA 3028 0008                  		move.w	8(a0),d0
000089FE 0240 FF80                  		andi.w	#$FF80,d0
00008A02 3238 F700                  		move.w	($FFFFF700).w,d1
00008A06 0441 0080                  		subi.w	#$80,d1
00008A0A 0241 FF80                  		andi.w	#$FF80,d1
00008A0E 9041                       		sub.w	d1,d0
00008A10 0C40 0280                  		cmpi.w	#$280,d0
00008A14 6300                       		bls.s	Obj11_NoDel
00008A16 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00008A1A 6700                       		beq.s	Obj11_DelAll		; if it's zero, don't remember object
00008A1C 3440                       		movea.w	d0,a2	; load address into a2
00008A1E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00008A22 6000                       		bra.s	Obj11_DelAll	; and delete object
00008A24                            
00008A24                            Obj11_NoDel:
00008A24 4E75                       		rts	
00008A26                            ; ===========================================================================
00008A26                            
00008A26                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00008A26 7400                       		moveq	#0,d2
00008A28 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00008A2C 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00008A2E 5302                       		subq.b	#1,d2		; subtract 1
00008A30 6500                       		bcs.s	Obj11_Delete
00008A32                            
00008A32                            Obj11_DelLoop:
00008A32 7000                       		moveq	#0,d0
00008A34 101A                       		move.b	(a2)+,d0
00008A36 ED48                       		lsl.w	#6,d0
00008A38 0680 00FF D000             		addi.l	#$FFD000,d0
00008A3E 2240                       		movea.l	d0,a1
00008A40 B048                       		cmp.w	a0,d0
00008A42 6700                       		beq.s	loc_791E
00008A44 6100 0000                  		bsr.w	DeleteObject2
00008A48                            
00008A48                            loc_791E:
00008A48 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00008A4C                            
00008A4C                            Obj11_Delete:
00008A4C 6100 0000                  		bsr.w	DeleteObject
00008A50 4E75                       		rts	
00008A52                            ; ===========================================================================
00008A52                            
00008A52                            Obj11_Delete2:				; XREF: Obj11_Index
00008A52 6100 0000                  		bsr.w	DeleteObject
00008A56 4E75                       		rts	
00008A58                            ; ===========================================================================
00008A58                            
00008A58                            Obj11_Display2:				; XREF: Obj11_Index
00008A58 6100 0000                  		bsr.w	DisplaySprite
00008A5C 4E75                       		rts	
00008A5E                            ; ===========================================================================
00008A5E                            ; ---------------------------------------------------------------------------
00008A5E                            ; Sprite mappings - GHZ	bridge
00008A5E                            ; ---------------------------------------------------------------------------
00008A5E                            Map_obj11:
00008A5E                            	include "_maps\obj11.asm"
00008A5E                            ; ---------------------------------------------------------------------------
00008A5E                            ; Sprite mappings - GHZ	bridge
00008A5E                            ; ---------------------------------------------------------------------------
00008A5E 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00008A62 0000                       		dc.w byte_794B-Map_obj11
00008A64 01                         byte_793A:	dc.b 1
00008A65 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008A6A 02                         byte_7940:	dc.b 2
00008A6B F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00008A70 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00008A75 01                         byte_794B:	dc.b 1
00008A76 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00008A7C 00                         		even
00008A7C 00                         		even
00008A7C                            
00008A7C                            ; ===========================================================================
00008A7C                            ; ---------------------------------------------------------------------------
00008A7C                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00008A7C                            ;	    - spiked ball on a chain (SBZ)
00008A7C                            ; ---------------------------------------------------------------------------
00008A7C                            
00008A7C                            Obj15:					; XREF: Obj_Index
00008A7C 7000                       		moveq	#0,d0
00008A7E 1028 0024                  		move.b	$24(a0),d0
00008A82 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00008A86 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00008A8A                            ; ===========================================================================
00008A8A 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00008A8E 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00008A92 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00008A96 0000                       		dc.w Obj15_Action-Obj15_Index
00008A98                            ; ===========================================================================
00008A98                            
00008A98                            Obj15_Main:				; XREF: Obj15_Index
00008A98 5428 0024                  		addq.b	#2,$24(a0)
00008A9C 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00008AA4 317C 4380 0002             		move.w	#$4380,2(a0)
00008AAA 117C 0004 0001             		move.b	#4,1(a0)
00008AB0 117C 0003 0018             		move.b	#3,$18(a0)
00008AB6 117C 0018 0019             		move.b	#$18,$19(a0)
00008ABC 117C 0008 0016             		move.b	#8,$16(a0)
00008AC2 3168 000C 0038             		move.w	$C(a0),$38(a0)
00008AC8 3168 0008 003A             		move.w	8(a0),$3A(a0)
00008ACE 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008AD4 6600                       		bne.s	Obj15_NotSLZ
00008AD6 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00008ADE 317C 43DC 0002             		move.w	#$43DC,2(a0)
00008AE4 117C 0020 0019             		move.b	#$20,$19(a0)
00008AEA 117C 0010 0016             		move.b	#$10,$16(a0)
00008AF0 117C 0099 0020             		move.b	#$99,$20(a0)
00008AF6                            
00008AF6                            Obj15_NotSLZ:
00008AF6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008AFC 6600                       		bne.s	Obj15_SetLength
00008AFE 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00008B06 317C 0391 0002             		move.w	#$391,2(a0)
00008B0C 117C 0018 0019             		move.b	#$18,$19(a0)
00008B12 117C 0018 0016             		move.b	#$18,$16(a0)
00008B18 117C 0086 0020             		move.b	#$86,$20(a0)
00008B1E 117C 000C 0024             		move.b	#$C,$24(a0)
00008B24                            
00008B24                            Obj15_SetLength:
00008B24 1810                       		move.b	0(a0),d4
00008B26 7200                       		moveq	#0,d1
00008B28 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008B2C 1212                       		move.b	(a2),d1		; move a2 to d1
00008B2E 3F01                       		move.w	d1,-(sp)
00008B30 0241 000F                  		andi.w	#$F,d1
00008B34 14FC 0000                  		move.b	#0,(a2)+
00008B38 3601                       		move.w	d1,d3
00008B3A E94B                       		lsl.w	#4,d3
00008B3C 5003                       		addq.b	#8,d3
00008B3E 1143 003C                  		move.b	d3,$3C(a0)
00008B42 5103                       		subq.b	#8,d3
00008B44 4A28 001A                  		tst.b	$1A(a0)
00008B48 6700                       		beq.s	Obj15_MakeChain
00008B4A 5003                       		addq.b	#8,d3
00008B4C 5341                       		subq.w	#1,d1
00008B4E                            
00008B4E                            Obj15_MakeChain:
00008B4E 6100 0000                  		bsr.w	SingleObjLoad
00008B52 6600                       		bne.s	loc_7A92
00008B54 5228 0028                  		addq.b	#1,$28(a0)
00008B58 3A09                       		move.w	a1,d5
00008B5A 0445 D000                  		subi.w	#-$3000,d5
00008B5E EC4D                       		lsr.w	#6,d5
00008B60 0245 007F                  		andi.w	#$7F,d5
00008B64 14C5                       		move.b	d5,(a2)+
00008B66 137C 000A 0024             		move.b	#$A,$24(a1)
00008B6C 1284                       		move.b	d4,0(a1)	; load swinging	object
00008B6E 2368 0004 0004             		move.l	4(a0),4(a1)
00008B74 3368 0002 0002             		move.w	2(a0),2(a1)
00008B7A 08A9 0006 0002             		bclr	#6,2(a1)
00008B80 137C 0004 0001             		move.b	#4,1(a1)
00008B86 137C 0004 0018             		move.b	#4,$18(a1)
00008B8C 137C 0008 0019             		move.b	#8,$19(a1)
00008B92 137C 0001 001A             		move.b	#1,$1A(a1)
00008B98 1343 003C                  		move.b	d3,$3C(a1)
00008B9C 0403 0010                  		subi.b	#$10,d3
00008BA0 6400                       		bcc.s	loc_7A8E
00008BA2 137C 0002 001A             		move.b	#2,$1A(a1)
00008BA8 137C 0003 0018             		move.b	#3,$18(a1)
00008BAE 08E9 0006 0002             		bset	#6,2(a1)
00008BB4                            
00008BB4                            loc_7A8E:
00008BB4 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00008BB8                            
00008BB8                            loc_7A92:
00008BB8 3A08                       		move.w	a0,d5
00008BBA 0445 D000                  		subi.w	#-$3000,d5
00008BBE EC4D                       		lsr.w	#6,d5
00008BC0 0245 007F                  		andi.w	#$7F,d5
00008BC4 14C5                       		move.b	d5,(a2)+
00008BC6 317C 4080 0026             		move.w	#$4080,$26(a0)
00008BCC 317C FE00 003E             		move.w	#-$200,$3E(a0)
00008BD2 321F                       		move.w	(sp)+,d1
00008BD4 0801 0004                  		btst	#4,d1		; is object type $8X ?
00008BD8 6700                       		beq.s	loc_7AD4	; if not, branch
00008BDA 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00008BE2 317C 43AA 0002             		move.w	#$43AA,2(a0)
00008BE8 117C 0001 001A             		move.b	#1,$1A(a0)
00008BEE 117C 0002 0018             		move.b	#2,$18(a0)
00008BF4 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008BFA                            
00008BFA                            loc_7AD4:
00008BFA 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008C00 6700                       		beq.s	Obj15_Action	; if yes, branch
00008C02                            
00008C02                            Obj15_SetSolid:				; XREF: Obj15_Index
00008C02 7200                       		moveq	#0,d1
00008C04 1228 0019                  		move.b	$19(a0),d1
00008C08 7600                       		moveq	#0,d3
00008C0A 1628 0016                  		move.b	$16(a0),d3
00008C0E 6100 FA6A                  		bsr.w	Obj15_Solid
00008C12                            
00008C12                            Obj15_Action:				; XREF: Obj15_Index
00008C12 6100 0000                  		bsr.w	Obj15_Move
00008C16 6100 0000                  		bsr.w	DisplaySprite
00008C1A 6000 0000                  		bra.w	Obj15_ChkDel
00008C1E                            ; ===========================================================================
00008C1E                            
00008C1E                            Obj15_Action2:				; XREF: Obj15_Index
00008C1E 7200                       		moveq	#0,d1
00008C20 1228 0019                  		move.b	$19(a0),d1
00008C24 6100 FAB8                  		bsr.w	ExitPlatform
00008C28 3F28 0008                  		move.w	8(a0),-(sp)
00008C2C 6100 0000                  		bsr.w	Obj15_Move
00008C30 341F                       		move.w	(sp)+,d2
00008C32 7600                       		moveq	#0,d3
00008C34 1628 0016                  		move.b	$16(a0),d3
00008C38 5203                       		addq.b	#1,d3
00008C3A 6100 0000                  		bsr.w	MvSonicOnPtfm
00008C3E 6100 0000                  		bsr.w	DisplaySprite
00008C42 6000 0000                  		bra.w	Obj15_ChkDel
00008C46                            
00008C46 4E75                       		rts
00008C48                            
00008C48                            ; ---------------------------------------------------------------------------
00008C48                            ; Subroutine to	change Sonic's position with a platform
00008C48                            ; ---------------------------------------------------------------------------
00008C48                            
00008C48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C48                            
00008C48                            
00008C48                            MvSonicOnPtfm:
00008C48 43F8 D000                  		lea	($FFFFD000).w,a1
00008C4C 3028 000C                  		move.w	$C(a0),d0
00008C50 9043                       		sub.w	d3,d0
00008C52 6000                       		bra.s	MvSonic2
00008C54                            ; End of function MvSonicOnPtfm
00008C54                            
00008C54                            ; ---------------------------------------------------------------------------
00008C54                            ; Subroutine to	change Sonic's position with a platform
00008C54                            ; ---------------------------------------------------------------------------
00008C54                            
00008C54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C54                            
00008C54                            
00008C54                            MvSonicOnPtfm2:
00008C54 43F8 D000                  		lea	($FFFFD000).w,a1
00008C58 3028 000C                  		move.w	$C(a0),d0
00008C5C 0440 0009                  		subi.w	#9,d0
00008C60                            
00008C60                            MvSonic2:
00008C60 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008C64 6B00                       		bmi.s	locret_7B62
00008C66 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008C6C 6400                       		bcc.s	locret_7B62
00008C6E 4A78 FE08                  		tst.w	($FFFFFE08).w
00008C72 6600                       		bne.s	locret_7B62
00008C74 9468 0008                  		sub.w	8(a0),d2
00008C78 9569 0008                  		sub.w	d2,8(a1)
00008C7C 7200                       		moveq	#0,d1
00008C7E 1229 0016                  		move.b	$16(a1),d1
00008C82 9041                       		sub.w	d1,d0
00008C84 B069 000C                  		cmp.w	$C(a1),d0
00008C88 6600                       		bne.s	@frustrated
00008C8A 4A42                       		tst.w	d2
00008C8C 6600                       		bne.s	@frustrated
00008C8E 3340 000C                  		move.w	d0,$C(a1)	
00008C92 4A38 F5D9                  		tst.b	(SonimeSST+sonime_waittimer2).w
00008C96 6700                       		beq.s	@resetwaittimer
00008C98 4A38 F5D8                  		tst.b	(SonimeSST+sonime_waittimer).w
00008C9C 6600                       		bne.s	locret_7B62
00008C9E 5338 F5D9                  		subi.b	#1,(SonimeSST+sonime_waittimer2).w
00008CA2 6000                       		bra.s	@frustrated2
00008CA4                            
00008CA4                            	@frustrated:
00008CA4 11FC 0020 F5D9             		move.b	#$20,(SonimeSST+sonime_waittimer2).w
00008CAA 3340 000C                  		move.w	d0,$C(a1)
00008CAE 4A38 F5D8                  		tst.b	(SonimeSST+sonime_waittimer).w
00008CB2 6600                       		bne.s	@subtract
00008CB4                            
00008CB4                            	@frustrated2:
00008CB4 11FC 000B F5CE             		move.b	#face_impatient,(SonimeSST+sonime_face).w
00008CBA 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00008CC0 4E75                       		rts
00008CC2                            
00008CC2                            	@subtract:
00008CC2 5338 F5D8                  		subi.b	#1,(SonimeSST+sonime_waittimer).w
00008CC6 4E75                       		rts
00008CC8                            
00008CC8                            	@resetwaittimer:
00008CC8 11FC 0060 F5D8             		move.b	#$60,(SonimeSST+sonime_waittimer).w
00008CCE                            
00008CCE                            locret_7B62:
00008CCE 4E75                       		rts	
00008CD0                            ; End of function MvSonicOnPtfm2
00008CD0                            
00008CD0                            
00008CD0                            CheckIfMoving:
00008CD0                            
00008CD0                            
00008CD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CD0                            
00008CD0                            
00008CD0                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008CD0 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008CD4 323C 0080                  		move.w	#$80,d1
00008CD8 0828 0000 0022             		btst	#0,$22(a0)
00008CDE 6700                       		beq.s	loc_7B78
00008CE0 4440                       		neg.w	d0
00008CE2 D041                       		add.w	d1,d0
00008CE4                            
00008CE4                            loc_7B78:
00008CE4 6000                       		bra.s	Obj15_Move2
00008CE6                            ; End of function Obj15_Move
00008CE6                            
00008CE6                            
00008CE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CE6                            
00008CE6                            
00008CE6                            Obj48_Move:				; XREF: Obj48_Display2
00008CE6 4A28 003D                  		tst.b	$3D(a0)
00008CEA 6600                       		bne.s	loc_7B9C
00008CEC 3028 003E                  		move.w	$3E(a0),d0
00008CF0 5040                       		addq.w	#8,d0
00008CF2 3140 003E                  		move.w	d0,$3E(a0)
00008CF6 D168 0026                  		add.w	d0,$26(a0)
00008CFA 0C40 0200                  		cmpi.w	#$200,d0
00008CFE 6600                       		bne.s	loc_7BB6
00008D00 117C 0001 003D             		move.b	#1,$3D(a0)
00008D06 6000                       		bra.s	loc_7BB6
00008D08                            ; ===========================================================================
00008D08                            
00008D08                            loc_7B9C:
00008D08 3028 003E                  		move.w	$3E(a0),d0
00008D0C 5140                       		subq.w	#8,d0
00008D0E 3140 003E                  		move.w	d0,$3E(a0)
00008D12 D168 0026                  		add.w	d0,$26(a0)
00008D16 0C40 FE00                  		cmpi.w	#-$200,d0
00008D1A 6600                       		bne.s	loc_7BB6
00008D1C 117C 0000 003D             		move.b	#0,$3D(a0)
00008D22                            
00008D22                            loc_7BB6:
00008D22 1028 0026                  		move.b	$26(a0),d0
00008D26                            ; End of function Obj48_Move
00008D26                            
00008D26                            
00008D26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D26                            
00008D26                            
00008D26                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008D26 6100 9CCE                  		bsr.w	CalcSine
00008D2A 3428 0038                  		move.w	$38(a0),d2
00008D2E 3628 003A                  		move.w	$3A(a0),d3
00008D32 45E8 0028                  		lea	$28(a0),a2
00008D36 7C00                       		moveq	#0,d6
00008D38 1C1A                       		move.b	(a2)+,d6
00008D3A                            
00008D3A                            loc_7BCE:
00008D3A 7800                       		moveq	#0,d4
00008D3C 181A                       		move.b	(a2)+,d4
00008D3E ED4C                       		lsl.w	#6,d4
00008D40 0684 00FF D000             		addi.l	#$FFD000,d4
00008D46 2244                       		movea.l	d4,a1
00008D48 7800                       		moveq	#0,d4
00008D4A 1829 003C                  		move.b	$3C(a1),d4
00008D4E 2A04                       		move.l	d4,d5
00008D50 C9C0                       		muls.w	d0,d4
00008D52 E084                       		asr.l	#8,d4
00008D54 CBC1                       		muls.w	d1,d5
00008D56 E085                       		asr.l	#8,d5
00008D58 D842                       		add.w	d2,d4
00008D5A DA43                       		add.w	d3,d5
00008D5C 3344 000C                  		move.w	d4,$C(a1)
00008D60 3345 0008                  		move.w	d5,8(a1)
00008D64 51CE FFD4                  		dbf	d6,loc_7BCE
00008D68 4E75                       		rts	
00008D6A                            ; End of function Obj15_Move2
00008D6A                            
00008D6A                            ; ===========================================================================
00008D6A                            
00008D6A                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008D6A 3028 003A                  		move.w	$3A(a0),d0
00008D6E 0240 FF80                  		andi.w	#$FF80,d0
00008D72 3238 F700                  		move.w	($FFFFF700).w,d1
00008D76 0441 0080                  		subi.w	#$80,d1
00008D7A 0241 FF80                  		andi.w	#$FF80,d1
00008D7E 9041                       		sub.w	d1,d0
00008D80 0C40 0280                  		cmpi.w	#$280,d0
00008D84 6300                       		bls.s	Obj15_NoDel
00008D86 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00008D8A 6700                       		beq.s	Obj15_DelAll		; if it's zero, don't remember object
00008D8C 3440                       		movea.w	d0,a2	; load address into a2
00008D8E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00008D92 6000                       		bra.s	Obj15_DelAll	; and delete object
00008D94                            
00008D94                            Obj15_NoDel:
00008D94 4E75                       		rts	
00008D96                            ; ===========================================================================
00008D96                            
00008D96                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00008D96 7400                       		moveq	#0,d2
00008D98 45E8 0028                  		lea	$28(a0),a2
00008D9C 141A                       		move.b	(a2)+,d2
00008D9E                            
00008D9E                            Obj15_DelLoop:
00008D9E 7000                       		moveq	#0,d0
00008DA0 101A                       		move.b	(a2)+,d0
00008DA2 ED48                       		lsl.w	#6,d0
00008DA4 0680 00FF D000             		addi.l	#$FFD000,d0
00008DAA 2240                       		movea.l	d0,a1
00008DAC 6100 0000                  		bsr.w	DeleteObject2
00008DB0 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008DB4 4E75                       		rts	
00008DB6                            ; ===========================================================================
00008DB6                            
00008DB6                            Obj15_Delete:				; XREF: Obj15_Index
00008DB6 6100 0000                  		bsr.w	DeleteObject
00008DBA 4E75                       		rts	
00008DBC                            ; ===========================================================================
00008DBC                            
00008DBC                            Obj15_Display:				; XREF: Obj15_Index
00008DBC 6000 0000                  		bra.w	DisplaySprite
00008DC0                            ; ===========================================================================
00008DC0                            ; ---------------------------------------------------------------------------
00008DC0                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008DC0                            ; ---------------------------------------------------------------------------
00008DC0                            Map_obj15:
00008DC0                            	include "_maps\obj15ghz.asm"
00008DC0                            ; ---------------------------------------------------------------------------
00008DC0                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008DC0                            ; ---------------------------------------------------------------------------
00008DC0 0000                       		dc.w byte_7C4E-Map_obj15
00008DC2 0000                       		dc.w byte_7C59-Map_obj15
00008DC4 0000                       		dc.w byte_7C5F-Map_obj15
00008DC6 02                         byte_7C4E:	dc.b 2
00008DC7 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008DCC F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008DD1 01                         byte_7C59:	dc.b 1
00008DD2 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008DD7 01                         byte_7C5F:	dc.b 1
00008DD8 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008DDE 00                         		even
00008DDE 00                         		even
00008DDE                            
00008DDE                            ; ---------------------------------------------------------------------------
00008DDE                            ; Sprite mappings - SLZ	swinging platforms
00008DDE                            ; ---------------------------------------------------------------------------
00008DDE                            Map_obj15a:
00008DDE                            	include "_maps\obj15slz.asm"
00008DDE                            ; ---------------------------------------------------------------------------
00008DDE                            ; Sprite mappings - SLZ	swinging platforms
00008DDE                            ; ---------------------------------------------------------------------------
00008DDE 0000                       		dc.w byte_7C6C-Map_obj15a
00008DE0 0000                       		dc.w byte_7C95-Map_obj15a
00008DE2 0000                       		dc.w byte_7C9B-Map_obj15a
00008DE4 08                         byte_7C6C:	dc.b 8
00008DE5 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00008DEA F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008DEF F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008DF4 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008DF9 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008DFE 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008E03 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008E08 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008E0D 01                         byte_7C95:	dc.b 1
00008E0E F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008E13 01                         byte_7C9B:	dc.b 1
00008E14 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008E1A 00                         		even
00008E1A 00                         		even
00008E1A                            
00008E1A                            ; ===========================================================================
00008E1A                            ; ---------------------------------------------------------------------------
00008E1A                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008E1A                            ; ---------------------------------------------------------------------------
00008E1A                            
00008E1A                            Obj17:					; XREF: Obj_Index
00008E1A 7000                       		moveq	#0,d0
00008E1C 1028 0024                  		move.b	$24(a0),d0
00008E20 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008E24 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008E28                            ; ===========================================================================
00008E28 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008E2A 0000                       		dc.w Obj17_Action-Obj17_Index
00008E2C 0000                       		dc.w Obj17_Action-Obj17_Index
00008E2E 0000                       		dc.w Obj17_Delete-Obj17_Index
00008E30 0000                       		dc.w Obj17_Display-Obj17_Index
00008E32                            ; ===========================================================================
00008E32                            
00008E32                            Obj17_Main:				; XREF: Obj17_Index
00008E32 5428 0024                  		addq.b	#2,$24(a0)
00008E36 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008E3E 317C 4398 0002             		move.w	#$4398,2(a0)
00008E44 117C 0007 0022             		move.b	#7,$22(a0)
00008E4A 117C 0004 0001             		move.b	#4,1(a0)
00008E50 117C 0003 0018             		move.b	#3,$18(a0)
00008E56 117C 0008 0019             		move.b	#8,$19(a0)
00008E5C 3428 000C                  		move.w	$C(a0),d2
00008E60 3628 0008                  		move.w	8(a0),d3
00008E64 1810                       		move.b	0(a0),d4
00008E66 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008E6A 7200                       		moveq	#0,d1
00008E6C 1212                       		move.b	(a2),d1		; move a2 to d1
00008E6E 14FC 0000                  		move.b	#0,(a2)+
00008E72 3001                       		move.w	d1,d0
00008E74 E248                       		lsr.w	#1,d0
00008E76 E948                       		lsl.w	#4,d0
00008E78 9640                       		sub.w	d0,d3
00008E7A 5501                       		subq.b	#2,d1
00008E7C 6500                       		bcs.s	Obj17_Action
00008E7E 7C00                       		moveq	#0,d6
00008E80                            
00008E80                            Obj17_MakeHelix:
00008E80 6100 0000                  		bsr.w	SingleObjLoad
00008E84 6600                       		bne.s	Obj17_Action
00008E86 5228 0028                  		addq.b	#1,$28(a0)
00008E8A 3A09                       		move.w	a1,d5
00008E8C 0445 D000                  		subi.w	#$D000,d5
00008E90 EC4D                       		lsr.w	#6,d5
00008E92 0245 007F                  		andi.w	#$7F,d5
00008E96 14C5                       		move.b	d5,(a2)+
00008E98 137C 0008 0024             		move.b	#8,$24(a1)
00008E9E 1284                       		move.b	d4,0(a1)
00008EA0 3342 000C                  		move.w	d2,$C(a1)
00008EA4 3343 0008                  		move.w	d3,8(a1)
00008EA8 2368 0004 0004             		move.l	4(a0),4(a1)
00008EAE 337C 4398 0002             		move.w	#$4398,2(a1)
00008EB4 137C 0004 0001             		move.b	#4,1(a1)
00008EBA 137C 0003 0018             		move.b	#3,$18(a1)
00008EC0 137C 0008 0019             		move.b	#8,$19(a1)
00008EC6 1346 003E                  		move.b	d6,$3E(a1)
00008ECA 5206                       		addq.b	#1,d6
00008ECC 0206 0007                  		andi.b	#7,d6
00008ED0 0643 0010                  		addi.w	#$10,d3
00008ED4 B668 0008                  		cmp.w	8(a0),d3
00008ED8 6600                       		bne.s	loc_7D78
00008EDA 1146 003E                  		move.b	d6,$3E(a0)
00008EDE 5206                       		addq.b	#1,d6
00008EE0 0206 0007                  		andi.b	#7,d6
00008EE4 0643 0010                  		addi.w	#$10,d3
00008EE8 5228 0028                  		addq.b	#1,$28(a0)
00008EEC                            
00008EEC                            loc_7D78:
00008EEC 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008EF0                            
00008EF0                            Obj17_Action:				; XREF: Obj17_Index
00008EF0 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008EF4 6100 0000                  		bsr.w	DisplaySprite
00008EF8 6000 0000                  		bra.w	Obj17_ChkDel
00008EFC                            
00008EFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EFC                            
00008EFC                            
00008EFC                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008EFC 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008F00 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008F06 D028 003E                  		add.b	$3E(a0),d0
00008F0A 0200 0007                  		andi.b	#7,d0
00008F0E 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008F12 6600                       		bne.s	locret_7DA6
00008F14 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008F1A                            
00008F1A                            locret_7DA6:
00008F1A 4E75                       		rts	
00008F1C                            ; End of function Obj17_RotateSpikes
00008F1C                            
00008F1C                            ; ===========================================================================
00008F1C                            
00008F1C                            Obj17_ChkDel:				; XREF: Obj17_Action
00008F1C 3028 0008                  		move.w	8(a0),d0
00008F20 0240 FF80                  		andi.w	#$FF80,d0
00008F24 3238 F700                  		move.w	($FFFFF700).w,d1
00008F28 0441 0080                  		subi.w	#$80,d1
00008F2C 0241 FF80                  		andi.w	#$FF80,d1
00008F30 9041                       		sub.w	d1,d0
00008F32 0C40 0280                  		cmpi.w	#$280,d0
00008F36 6300                       		bls.s	Obj17_NoDel
00008F38 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00008F3C 6700                       		beq.s	Obj17_DelAll		; if it's zero, don't remember object
00008F3E 3440                       		movea.w	d0,a2	; load address into a2
00008F40 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00008F44 6000                       		bra.s	Obj17_DelAll	; and delete object
00008F46                            
00008F46                            Obj17_NoDel:
00008F46 4E75                       		rts	
00008F48                            ; ===========================================================================
00008F48                            
00008F48                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008F48 7400                       		moveq	#0,d2
00008F4A 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008F4E 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008F50 5502                       		subq.b	#2,d2
00008F52 6500                       		bcs.s	Obj17_Delete
00008F54                            
00008F54                            Obj17_DelLoop:
00008F54 7000                       		moveq	#0,d0
00008F56 101A                       		move.b	(a2)+,d0
00008F58 ED48                       		lsl.w	#6,d0
00008F5A 0680 00FF D000             		addi.l	#$FFD000,d0
00008F60 2240                       		movea.l	d0,a1
00008F62 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008F66 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008F6A                            
00008F6A                            Obj17_Delete:				; XREF: Obj17_Index
00008F6A 6100 0000                  		bsr.w	DeleteObject
00008F6E 4E75                       		rts	
00008F70                            ; ===========================================================================
00008F70                            
00008F70                            Obj17_Display:				; XREF: Obj17_Index
00008F70 6100 FF8A                  		bsr.w	Obj17_RotateSpikes
00008F74 6000 0000                  		bra.w	DisplaySprite
00008F78                            ; ===========================================================================
00008F78                            ; ---------------------------------------------------------------------------
00008F78                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008F78                            ; ---------------------------------------------------------------------------
00008F78                            Map_obj17:
00008F78                            	include "_maps\obj17.asm"
00008F78                            ; ---------------------------------------------------------------------------
00008F78                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008F78                            ; ---------------------------------------------------------------------------
00008F78 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008F7C 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008F80 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008F84 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008F88 01                         byte_7E08:	dc.b 1
00008F89 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008F8E 01                         byte_7E0E:	dc.b 1
00008F8F F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008F94 01                         byte_7E14:	dc.b 1
00008F95 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008F9A 01                         byte_7E1A:	dc.b 1
00008F9B FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008FA0 01                         byte_7E20:	dc.b 1
00008FA1 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008FA6 01                         byte_7E26:	dc.b 1
00008FA7 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008FAC 01                         byte_7E2C:	dc.b 1
00008FAD F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008FB2                            		even
00008FB2                            		even
00008FB2                            
00008FB2                            ; ===========================================================================
00008FB2                            ; ---------------------------------------------------------------------------
00008FB2                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008FB2                            ; ---------------------------------------------------------------------------
00008FB2                            
00008FB2                            Obj18:					; XREF: Obj_Index
00008FB2 7000                       		moveq	#0,d0
00008FB4 1028 0024                  		move.b	$24(a0),d0
00008FB8 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008FBC 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008FC0                            ; ===========================================================================
00008FC0 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008FC2 0000                       		dc.w Obj18_Solid-Obj18_Index
00008FC4 0000                       		dc.w Obj18_Action2-Obj18_Index
00008FC6 0000                       		dc.w Obj18_Delete-Obj18_Index
00008FC8 0000                       		dc.w Obj18_Action-Obj18_Index
00008FCA                            ; ===========================================================================
00008FCA                            
00008FCA                            Obj18_Main:				; XREF: Obj18_Index
00008FCA 5428 0024                  		addq.b	#2,$24(a0)
00008FCE 317C 4000 0002             		move.w	#$4000,2(a0)
00008FD4 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008FDC 117C 0020 0019             		move.b	#$20,$19(a0)
00008FE2 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008FE8 6600                       		bne.s	Obj18_NotSYZ
00008FEA 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008FF2 117C 0020 0019             		move.b	#$20,$19(a0)
00008FF8                            
00008FF8                            Obj18_NotSYZ:
00008FF8 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008FFE 6600                       		bne.s	Obj18_NotSLZ
00009000 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00009008 117C 0020 0019             		move.b	#$20,$19(a0)
0000900E 317C 4000 0002             		move.w	#$4000,2(a0)
00009014 117C 0003 0028             		move.b	#3,$28(a0)
0000901A                            
0000901A                            Obj18_NotSLZ:
0000901A 117C 0004 0001             		move.b	#4,1(a0)
00009020 117C 0004 0018             		move.b	#4,$18(a0)
00009026 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000902C 3168 000C 0034             		move.w	$C(a0),$34(a0)
00009032 3168 0008 0032             		move.w	8(a0),$32(a0)
00009038 317C 0080 0026             		move.w	#$80,$26(a0)
0000903E 7200                       		moveq	#0,d1
00009040 1028 0028                  		move.b	$28(a0),d0
00009044 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00009048 6600                       		bne.s	Obj18_SetFrame	; if not, branch
0000904A 5201                       		addq.b	#1,d1		; use frame #1
0000904C 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00009052                            
00009052                            Obj18_SetFrame:
00009052 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00009056                            
00009056                            Obj18_Solid:				; XREF: Obj18_Index
00009056 4A28 0038                  		tst.b	$38(a0)
0000905A 6700                       		beq.s	loc_7EE0
0000905C 5928 0038                  		subq.b	#4,$38(a0)
00009060                            
00009060                            loc_7EE0:
00009060 7200                       		moveq	#0,d1
00009062 1228 0019                  		move.b	$19(a0),d1
00009066 6100 F502                  		bsr.w	PlatformObject
0000906A                            
0000906A                            Obj18_Action:				; XREF: Obj18_Index
0000906A 6100 0000                  		bsr.w	Obj18_Move
0000906E 6100 0000                  		bsr.w	Obj18_Nudge
00009072 6100 0000                  		bsr.w	DisplaySprite
00009076 6000 0000                  		bra.w	Obj18_ChkDel
0000907A                            ; ===========================================================================
0000907A                            
0000907A                            Obj18_Action2:				; XREF: Obj18_Index
0000907A 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00009080 6700                       		beq.s	loc_7F06
00009082 5828 0038                  		addq.b	#4,$38(a0)
00009086                            
00009086                            loc_7F06:
00009086 7200                       		moveq	#0,d1
00009088 1228 0019                  		move.b	$19(a0),d1
0000908C 6100 F650                  		bsr.w	ExitPlatform
00009090 3F28 0008                  		move.w	8(a0),-(sp)
00009094 6100 0000                  		bsr.w	Obj18_Move
00009098 6100 0000                  		bsr.w	Obj18_Nudge
0000909C 341F                       		move.w	(sp)+,d2
0000909E 6100 FBB4                  		bsr.w	MvSonicOnPtfm2
000090A2 6100 0000                  		bsr.w	DisplaySprite
000090A6 6000 0000                  		bra.w	Obj18_ChkDel
000090AA                            
000090AA 4E75                       		rts
000090AC                            
000090AC                            ; ---------------------------------------------------------------------------
000090AC                            ; Subroutine to	move platform slightly when you	stand on it
000090AC                            ; ---------------------------------------------------------------------------
000090AC                            
000090AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000090AC                            
000090AC                            
000090AC                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000090AC 1028 0038                  		move.b	$38(a0),d0
000090B0 6100 9944                  		bsr.w	CalcSine
000090B4 323C 0400                  		move.w	#$400,d1
000090B8 C1C1                       		muls.w	d1,d0
000090BA 4840                       		swap	d0
000090BC D068 002C                  		add.w	$2C(a0),d0
000090C0 3140 000C                  		move.w	d0,$C(a0)
000090C4 4E75                       		rts	
000090C6                            ; End of function Obj18_Nudge
000090C6                            
000090C6                            ; ---------------------------------------------------------------------------
000090C6                            ; Subroutine to	move platforms
000090C6                            ; ---------------------------------------------------------------------------
000090C6                            
000090C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000090C6                            
000090C6                            
000090C6                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
000090C6 7000                       		moveq	#0,d0
000090C8 1028 0028                  		move.b	$28(a0),d0
000090CC 0240 000F                  		andi.w	#$F,d0
000090D0 D040                       		add.w	d0,d0
000090D2 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000090D6 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000090DA                            ; End of function Obj18_Move
000090DA                            
000090DA                            ; ===========================================================================
000090DA 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000090DE 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000090E2 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000090E6 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000090EA 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000090EE 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000090F2 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000090F4                            ; ===========================================================================
000090F4                            
000090F4                            Obj18_Type00:
000090F4 4E75                       		rts			; platform 00 doesn't move
000090F6                            ; ===========================================================================
000090F6                            
000090F6                            Obj18_Type05:
000090F6 3028 0032                  		move.w	$32(a0),d0
000090FA 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000090FE 4401                       		neg.b	d1		; reverse platform-motion
00009100 0601 0040                  		addi.b	#$40,d1
00009104 6000                       		bra.s	Obj18_01_Move
00009106                            ; ===========================================================================
00009106                            
00009106                            Obj18_Type01:
00009106 3028 0032                  		move.w	$32(a0),d0
0000910A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000910E 0401 0040                  		subi.b	#$40,d1
00009112                            
00009112                            Obj18_01_Move:
00009112 4881                       		ext.w	d1
00009114 D041                       		add.w	d1,d0
00009116 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
0000911A 6000 0000                  		bra.w	Obj18_ChgMotion
0000911E                            ; ===========================================================================
0000911E                            
0000911E                            Obj18_Type0C:
0000911E 3028 0034                  		move.w	$34(a0),d0
00009122 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00009126 4401                       		neg.b	d1		; reverse platform-motion
00009128 0601 0030                  		addi.b	#$30,d1
0000912C 6000                       		bra.s	Obj18_02_Move
0000912E                            ; ===========================================================================
0000912E                            
0000912E                            Obj18_Type0B:
0000912E 3028 0034                  		move.w	$34(a0),d0
00009132 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00009136 0401 0030                  		subi.b	#$30,d1
0000913A 6000                       		bra.s	Obj18_02_Move
0000913C                            ; ===========================================================================
0000913C                            
0000913C                            Obj18_Type06:
0000913C 3028 0034                  		move.w	$34(a0),d0
00009140 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00009144 4401                       		neg.b	d1		; reverse platform-motion
00009146 0601 0040                  		addi.b	#$40,d1
0000914A 6000                       		bra.s	Obj18_02_Move
0000914C                            ; ===========================================================================
0000914C                            
0000914C                            Obj18_Type02:
0000914C 3028 0034                  		move.w	$34(a0),d0
00009150 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00009154 0401 0040                  		subi.b	#$40,d1
00009158                            
00009158                            Obj18_02_Move:
00009158 4881                       		ext.w	d1
0000915A D041                       		add.w	d1,d0
0000915C 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009160 6000 0000                  		bra.w	Obj18_ChgMotion
00009164                            ; ===========================================================================
00009164                            
00009164                            Obj18_Type03:
00009164 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009168 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
0000916A 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00009170 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00009172 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00009178                            
00009178                            Obj18_03_NoMove:
00009178 4E75                       		rts	
0000917A                            ; ===========================================================================
0000917A                            
0000917A                            Obj18_03_Wait:
0000917A 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
0000917E 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00009180 317C 0020 003A             		move.w	#32,$3A(a0)
00009186 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
0000918A 4E75                       		rts	
0000918C                            ; ===========================================================================
0000918C                            
0000918C                            Obj18_Type04:
0000918C 4A68 003A                  		tst.w	$3A(a0)
00009190 6700                       		beq.s	loc_8048
00009192 5368 003A                  		subq.w	#1,$3A(a0)
00009196 6600                       		bne.s	loc_8048
00009198 0828 0003 0022             		btst	#3,$22(a0)
0000919E 6700                       		beq.s	loc_8042
000091A0 08E9 0001 0022             		bset	#1,$22(a1)
000091A6 08A9 0003 0022             		bclr	#3,$22(a1)
000091AC 137C 0002 0024             		move.b	#2,$24(a1)
000091B2 08A8 0003 0022             		bclr	#3,$22(a0)
000091B8 4228 0025                  		clr.b	$25(a0)
000091BC 3368 0012 0012             		move.w	$12(a0),$12(a1)
000091C2                            
000091C2                            loc_8042:
000091C2 117C 0008 0024             		move.b	#8,$24(a0)
000091C8                            
000091C8                            loc_8048:
000091C8 2628 002C                  		move.l	$2C(a0),d3
000091CC 3028 0012                  		move.w	$12(a0),d0
000091D0 48C0                       		ext.l	d0
000091D2 E180                       		asl.l	#8,d0
000091D4 D680                       		add.l	d0,d3
000091D6 2143 002C                  		move.l	d3,$2C(a0)
000091DA 0668 0038 0012             		addi.w	#$38,$12(a0)
000091E0 3038 F72E                  		move.w	($FFFFF72E).w,d0
000091E4 0640 00E0                  		addi.w	#$E0,d0
000091E8 B068 002C                  		cmp.w	$2C(a0),d0
000091EC 6400                       		bcc.s	locret_8074
000091EE 117C 0006 0024             		move.b	#6,$24(a0)
000091F4                            
000091F4                            locret_8074:
000091F4 4E75                       		rts	
000091F6                            ; ===========================================================================
000091F6                            
000091F6                            Obj18_Type07:
000091F6 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000091FA 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
000091FC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00009200 7000                       		moveq	#0,d0
00009202 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00009206 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009208 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000920C 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
0000920E 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009214                            
00009214                            Obj18_07_NoMove:
00009214 4E75                       		rts	
00009216                            ; ===========================================================================
00009216                            
00009216                            Obj18_07_Wait:
00009216 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0000921A 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
0000921C 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00009220 4E75                       		rts	
00009222                            ; ===========================================================================
00009222                            
00009222                            Obj18_Type08:
00009222 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009226 3028 0034                  		move.w	$34(a0),d0
0000922A 0440 0200                  		subi.w	#$200,d0
0000922E B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009232 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00009234 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00009238                            
00009238                            Obj18_08_NoStop:
00009238 4E75                       		rts	
0000923A                            ; ===========================================================================
0000923A                            
0000923A                            Obj18_Type0A:
0000923A 3028 0034                  		move.w	$34(a0),d0
0000923E 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00009242 0401 0040                  		subi.b	#$40,d1
00009246 4881                       		ext.w	d1
00009248 E241                       		asr.w	#1,d1
0000924A D041                       		add.w	d1,d0
0000924C 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009250                            
00009250                            Obj18_ChgMotion:
00009250 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00009256 4E75                       		rts	
00009258                            ; ===========================================================================
00009258                            
00009258                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00009258 3028 0032                  		move.w	$32(a0),d0
0000925C 0240 FF80                  		andi.w	#$FF80,d0
00009260 3238 F700                  		move.w	($FFFFF700).w,d1
00009264 0441 0080                  		subi.w	#$80,d1
00009268 0241 FF80                  		andi.w	#$FF80,d1
0000926C 9041                       		sub.w	d1,d0
0000926E 0C40 0280                  		cmpi.w	#$280,d0
00009272 6300                       		bls.s	Obj18_NoDel
00009274 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00009278 6700                       		beq.s	Obj18_Delete		; if it's zero, don't remember object
0000927A 3440                       		movea.w	d0,a2	; load address into a2
0000927C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00009280 6000                       		bra.s	Obj18_Delete	; and delete object
00009282                            
00009282                            Obj18_NoDel:
00009282 4E75                       		rts	
00009284                            ; ===========================================================================
00009284                            
00009284                            Obj18_Delete:				; XREF: Obj18_Index
00009284 6000 0000                  		bra.w	DeleteObject
00009288                            ; ===========================================================================
00009288                            ; ---------------------------------------------------------------------------
00009288                            ; Sprite mappings - unused
00009288                            ; ---------------------------------------------------------------------------
00009288                            Map_obj18x:
00009288                            	include "_maps\obj18x.asm"
00009288                            ; ---------------------------------------------------------------------------
00009288                            ; Sprite mappings - unused
00009288                            ; ---------------------------------------------------------------------------
00009288 0000                       		dc.w byte_80FE-Map_obj18x
0000928A 0000                       		dc.w byte_8109-Map_obj18x
0000928C 02                         byte_80FE:	dc.b 2
0000928D F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009292 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009297 0A                         byte_8109:	dc.b $A
00009298 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
0000929D 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000092A2 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000092A7 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000092AC 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000092B1 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000092B6 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000092BB 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
000092C0 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
000092C5 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
000092CA                            		even
000092CA                            		even
000092CA                            
000092CA                            ; ---------------------------------------------------------------------------
000092CA                            ; Sprite mappings - GHZ	platforms
000092CA                            ; ---------------------------------------------------------------------------
000092CA                            Map_obj18:
000092CA                            	include "_maps\obj18ghz.asm"
000092CA                            ; ---------------------------------------------------------------------------
000092CA                            ; Sprite mappings - GHZ	platforms
000092CA                            ; ---------------------------------------------------------------------------
000092CA 0000                       		dc.w byte_8140-Map_obj18
000092CC 0000                       		dc.w byte_8155-Map_obj18
000092CE 04                         byte_8140:	dc.b 4
000092CF F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
000092D4 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
000092D9 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
000092DE F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
000092E3 0A                         byte_8155:	dc.b $A
000092E4 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000092E9 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
000092EE 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
000092F3 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
000092F8 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000092FD F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009302 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009307 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000930C 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009311 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009316                            		even
00009316                            		even
00009316                            
00009316                            ; ---------------------------------------------------------------------------
00009316                            ; Sprite mappings - SYZ	platforms
00009316                            ; ---------------------------------------------------------------------------
00009316                            Map_obj18a:
00009316                            	include "_maps\obj18syz.asm"
00009316                            ; ---------------------------------------------------------------------------
00009316                            ; Sprite mappings - SYZ	platforms
00009316                            ; ---------------------------------------------------------------------------
00009316 0000                       		dc.w byte_818A-Map_obj18a
00009318 03                         byte_818A:	dc.b 3
00009319 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
0000931E F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009323 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009328                            		even
00009328                            		even
00009328                            
00009328                            ; ---------------------------------------------------------------------------
00009328                            ; Sprite mappings - SLZ	platforms
00009328                            ; ---------------------------------------------------------------------------
00009328                            Map_obj18b:
00009328                            	include "_maps\obj18slz.asm"
00009328                            ; ---------------------------------------------------------------------------
00009328                            ; Sprite mappings - SLZ	platforms
00009328                            ; ---------------------------------------------------------------------------
00009328 0000                       		dc.w byte_819C-Map_obj18b
0000932A 02                         byte_819C:	dc.b 2
0000932B F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009330 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009336 00                         		even
00009336 00                         		even
00009336                            
00009336                            ; ===========================================================================
00009336                            ; ---------------------------------------------------------------------------
00009336                            ; Object 19 - blank
00009336                            ; ---------------------------------------------------------------------------
00009336                            
00009336                            Obj19:					; XREF: Obj_Index
00009336 4E75                       		rts	
00009338                            ; ===========================================================================
00009338                            ; ---------------------------------------------------------------------------
00009338                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009338                            ; ---------------------------------------------------------------------------
00009338                            Map_obj48:
00009338                            	include "_maps\obj48.asm"
00009338                            ; ---------------------------------------------------------------------------
00009338                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009338                            ; ---------------------------------------------------------------------------
00009338 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
0000933C 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00009340 06                         byte_81B2:	dc.b 6
00009341 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009346 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
0000934B E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009350 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009355 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0000935A 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000935F 04                         byte_81D1:	dc.b 4
00009360 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009365 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
0000936A 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000936F 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009374 04                         byte_81E6:	dc.b 4
00009375 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0000937A E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000937F 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009384 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009389 04                         byte_81FB:	dc.b 4
0000938A E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0000938F E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009394 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009399 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000939E                            		even
0000939E                            		even
0000939E                            
0000939E                            ; ===========================================================================
0000939E                            ; ---------------------------------------------------------------------------
0000939E                            ; Object 1A - GHZ collapsing ledge
0000939E                            ; ---------------------------------------------------------------------------
0000939E                            
0000939E                            Obj1A:					; XREF: Obj_Index
0000939E 7000                       		moveq	#0,d0
000093A0 1028 0024                  		move.b	$24(a0),d0
000093A4 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
000093A8 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
000093AC                            ; ===========================================================================
000093AC 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
000093B0 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
000093B4 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
000093B8                            ; ===========================================================================
000093B8                            
000093B8                            Obj1A_Main:				; XREF: Obj1A_Index
000093B8 5428 0024                  		addq.b	#2,$24(a0)
000093BC 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
000093C4 317C 4000 0002             		move.w	#$4000,2(a0)
000093CA 0028 0004 0001             		ori.b	#4,1(a0)
000093D0 117C 0004 0018             		move.b	#4,$18(a0)
000093D6 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
000093DC 117C 0064 0019             		move.b	#$64,$19(a0)
000093E2 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000093E8 117C 0038 0016             		move.b	#$38,$16(a0)
000093EE 08E8 0004 0001             		bset	#4,1(a0)
000093F4                            
000093F4                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
000093F4 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
000093F8 6700                       		beq.s	Obj1A_Slope	; if not, branch
000093FA 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
000093FE 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00009402 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009406                            
00009406                            Obj1A_Slope:
00009406 323C 0030                  		move.w	#$30,d1
0000940A 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00009410 6100 F22C                  		bsr.w	SlopeObject
00009414 6000 0000                  		bra.w	MarkObjGone
00009418                            ; ===========================================================================
00009418                            
00009418                            Obj1A_Touch:				; XREF: Obj1A_Index
00009418 4A28 0038                  		tst.b	$38(a0)
0000941C 6700 0000                  		beq.w	loc_847A
00009420 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009426 5328 0038                  		subq.b	#1,$38(a0)
0000942A                            
0000942A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000942A                            
0000942A                            
0000942A                            Obj1A_WalkOff:				; XREF: Obj1A_Index
0000942A 323C 0030                  		move.w	#$30,d1
0000942E 6100 F2AE                  		bsr.w	ExitPlatform
00009432 323C 0030                  		move.w	#$30,d1
00009436 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000943C 3428 0008                  		move.w	8(a0),d2
00009440 6100 0000                  		bsr.w	SlopeObject2
00009444 6000 0000                  		bra.w	MarkObjGone
00009448                            ; End of function Obj1A_WalkOff
00009448                            
00009448                            ; ===========================================================================
00009448                            
00009448                            Obj1A_Display:				; XREF: Obj1A_Index
00009448 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000944C 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
0000944E 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009452 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009456 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000945A 6000 0000                  		bra.w	DisplaySprite
0000945E                            ; ===========================================================================
0000945E                            
0000945E                            loc_82D0:				; XREF: Obj1A_Display
0000945E 5328 0038                  		subq.b	#1,$38(a0)
00009462 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00009466 43F8 D000                  		lea	($FFFFD000).w,a1
0000946A 0829 0003 0022             		btst	#3,$22(a1)
00009470 6700                       		beq.s	loc_82FC
00009472 4A28 0038                  		tst.b	$38(a0)
00009476 6600                       		bne.s	locret_8308
00009478 08A9 0003 0022             		bclr	#3,$22(a1)
0000947E 08A9 0005 0022             		bclr	#5,$22(a1)
00009484 137C 0001 001D             		move.b	#1,$1D(a1)
0000948A                            
0000948A                            loc_82FC:
0000948A 117C 0000 003A             		move.b	#0,$3A(a0)
00009490 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00009496                            
00009496                            locret_8308:
00009496 4E75                       		rts	
00009498                            ; ===========================================================================
00009498                            
00009498                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00009498 6100 0000                  		bsr.w	ObjectFall
0000949C 6100 0000                  		bsr.w	DisplaySprite
000094A0 4A28 0001                  		tst.b	1(a0)
000094A4 6A00                       		bpl.s	Obj1A_Delete
000094A6 4E75                       		rts	
000094A8                            ; ===========================================================================
000094A8                            
000094A8                            Obj1A_Delete:				; XREF: Obj1A_Index
000094A8 6100 0000                  		bsr.w	DeleteObject
000094AC 4E75                       		rts	
000094AE                            ; ===========================================================================
000094AE                            ; ---------------------------------------------------------------------------
000094AE                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000094AE                            ; ---------------------------------------------------------------------------
000094AE                            
000094AE                            Obj53:					; XREF: Obj_Index
000094AE 7000                       		moveq	#0,d0
000094B0 1028 0024                  		move.b	$24(a0),d0
000094B4 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
000094B8 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
000094BC                            ; ===========================================================================
000094BC 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
000094C0 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
000094C4 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
000094C8                            ; ===========================================================================
000094C8                            
000094C8                            Obj53_Main:				; XREF: Obj53_Index
000094C8 5428 0024                  		addq.b	#2,$24(a0)
000094CC 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
000094D4 317C 42B8 0002             		move.w	#$42B8,2(a0)
000094DA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000094E0 6600                       		bne.s	Obj53_NotSLZ
000094E2 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
000094E8 5428 001A                  		addq.b	#2,$1A(a0)
000094EC                            
000094EC                            Obj53_NotSLZ:
000094EC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000094F2 6600                       		bne.s	Obj53_NotSBZ
000094F4 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
000094FA                            
000094FA                            Obj53_NotSBZ:
000094FA 0028 0004 0001             		ori.b	#4,1(a0)
00009500 117C 0004 0018             		move.b	#4,$18(a0)
00009506 117C 0007 0038             		move.b	#7,$38(a0)
0000950C 117C 0044 0019             		move.b	#$44,$19(a0)
00009512                            
00009512                            Obj53_ChkTouch:				; XREF: Obj53_Index
00009512 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009516 6700                       		beq.s	Obj53_Solid	; if not, branch
00009518 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000951C 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00009520 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009524                            
00009524                            Obj53_Solid:
00009524 323C 0020                  		move.w	#$20,d1
00009528 6100 F040                  		bsr.w	PlatformObject
0000952C 4A28 0028                  		tst.b	$28(a0)
00009530 6A00                       		bpl.s	Obj53_MarkAsGone
00009532 0829 0003 0022             		btst	#3,$22(a1)
00009538 6700                       		beq.s	Obj53_MarkAsGone
0000953A 08A8 0000 0001             		bclr	#0,1(a0)
00009540 3029 0008                  		move.w	8(a1),d0
00009544 9068 0008                  		sub.w	8(a0),d0
00009548 6400                       		bcc.s	Obj53_MarkAsGone
0000954A 08E8 0000 0001             		bset	#0,1(a0)
00009550                            
00009550                            Obj53_MarkAsGone:
00009550 6000 0000                  		bra.w	MarkObjGone
00009554                            ; ===========================================================================
00009554                            
00009554                            Obj53_Touch:				; XREF: Obj53_Index
00009554 4A28 0038                  		tst.b	$38(a0)
00009558 6700 0000                  		beq.w	loc_8458
0000955C 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009562 5328 0038                  		subq.b	#1,$38(a0)
00009566                            
00009566                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009566                            
00009566                            
00009566                            Obj53_WalkOff:				; XREF: Obj53_Index
00009566 323C 0020                  		move.w	#$20,d1
0000956A 6100 F172                  		bsr.w	ExitPlatform
0000956E 3428 0008                  		move.w	8(a0),d2
00009572 6100 F6E0                  		bsr.w	MvSonicOnPtfm2
00009576 6000 0000                  		bra.w	MarkObjGone
0000957A                            ; End of function Obj53_WalkOff
0000957A                            
0000957A                            ; ===========================================================================
0000957A                            
0000957A                            Obj53_Display:				; XREF: Obj53_Index
0000957A 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000957E 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00009580 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009584 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009588 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000958C 6000 0000                  		bra.w	DisplaySprite
00009590                            ; ===========================================================================
00009590                            
00009590                            loc_8402:
00009590 5328 0038                  		subq.b	#1,$38(a0)
00009594 6100 FFD0                  		bsr.w	Obj53_WalkOff
00009598 43F8 D000                  		lea	($FFFFD000).w,a1
0000959C 0829 0003 0022             		btst	#3,$22(a1)
000095A2 6700                       		beq.s	loc_842E
000095A4 4A28 0038                  		tst.b	$38(a0)
000095A8 6600                       		bne.s	locret_843A
000095AA 08A9 0003 0022             		bclr	#3,$22(a1)
000095B0 08A9 0005 0022             		bclr	#5,$22(a1)
000095B6 137C 0001 001D             		move.b	#1,$1D(a1)
000095BC                            
000095BC                            loc_842E:
000095BC 117C 0000 003A             		move.b	#0,$3A(a0)
000095C2 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
000095C8                            
000095C8                            locret_843A:
000095C8 4E75                       		rts	
000095CA                            ; ===========================================================================
000095CA                            
000095CA                            Obj53_TimeZero:				; XREF: Obj53_Display
000095CA 6100 0000                  		bsr.w	ObjectFall
000095CE 6100 0000                  		bsr.w	DisplaySprite
000095D2 4A28 0001                  		tst.b	1(a0)
000095D6 6A00                       		bpl.s	Obj53_Delete
000095D8 4E75                       		rts	
000095DA                            ; ===========================================================================
000095DA                            
000095DA                            Obj53_Delete:				; XREF: Obj53_Index
000095DA 6100 0000                  		bsr.w	DeleteObject
000095DE 4E75                       		rts	
000095E0                            ; ===========================================================================
000095E0                            
000095E0                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
000095E0 117C 0000 003A             		move.b	#0,$3A(a0)
000095E6                            
000095E6                            loc_8458:				; XREF: Obj53_Touch
000095E6 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
000095EC 0828 0000 0028             		btst	#0,$28(a0)
000095F2 6700                       		beq.s	loc_846C
000095F4 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
000095FA                            
000095FA                            loc_846C:
000095FA 7207                       		moveq	#7,d1
000095FC 5228 001A                  		addq.b	#1,$1A(a0)
00009600 6000                       		bra.s	loc_8486
00009602                            ; ===========================================================================
00009602                            
00009602                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00009602 117C 0000 003A             		move.b	#0,$3A(a0)
00009608                            
00009608                            loc_847A:				; XREF: Obj1A_Touch
00009608 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
0000960E 7218                       		moveq	#$18,d1
00009610 5428 001A                  		addq.b	#2,$1A(a0)
00009614                            
00009614                            loc_8486:				; XREF: Obj53_Collapse
00009614 7000                       		moveq	#0,d0
00009616 1028 001A                  		move.b	$1A(a0),d0
0000961A D040                       		add.w	d0,d0
0000961C 2668 0004                  		movea.l	4(a0),a3
00009620 D6F3 0000                  		adda.w	(a3,d0.w),a3
00009624 524B                       		addq.w	#1,a3
00009626 08E8 0005 0001             		bset	#5,1(a0)
0000962C 1810                       		move.b	0(a0),d4
0000962E 1A28 0001                  		move.b	1(a0),d5
00009632 2248                       		movea.l	a0,a1
00009634 6000                       		bra.s	loc_84B2
00009636                            ; ===========================================================================
00009636                            
00009636                            loc_84AA:
00009636 6100 0000                  		bsr.w	SingleObjLoad
0000963A 6600                       		bne.s	loc_84F2
0000963C 5A4B                       		addq.w	#5,a3
0000963E                            
0000963E                            loc_84B2:
0000963E 137C 0006 0024             		move.b	#6,$24(a1)
00009644 1284                       		move.b	d4,0(a1)
00009646 234B 0004                  		move.l	a3,4(a1)
0000964A 1345 0001                  		move.b	d5,1(a1)
0000964E 3368 0008 0008             		move.w	8(a0),8(a1)
00009654 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000965A 3368 0002 0002             		move.w	2(a0),2(a1)
00009660 1368 0018 0018             		move.b	$18(a0),$18(a1)
00009666 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000966C 135C 0038                  		move.b	(a4)+,$38(a1)
00009670 B3C8                       		cmpa.l	a0,a1
00009672 6400                       		bcc.s	loc_84EE
00009674 6100 0000                  		bsr.w	DisplaySprite2
00009678                            
00009678                            loc_84EE:
00009678 51C9 FFBC                  		dbf	d1,loc_84AA
0000967C                            
0000967C                            loc_84F2:
0000967C 6100 0000                  		bsr.w	DisplaySprite
00009680 303C 00B9                  		move.w	#$B9,d0
00009684 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play collapsing	sound
0000968A                            ; ===========================================================================
0000968A                            ; ---------------------------------------------------------------------------
0000968A                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
0000968A                            ; ---------------------------------------------------------------------------
0000968A 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
0000969A 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
000096A4 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
000096AC 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
000096B4                            
000096B4                            ; ---------------------------------------------------------------------------
000096B4                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
000096B4                            ; ---------------------------------------------------------------------------
000096B4                            
000096B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000096B4                            
000096B4                            
000096B4                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
000096B4 43F8 D000                  		lea	($FFFFD000).w,a1
000096B8 0829 0003 0022             		btst	#3,$22(a1)
000096BE 6700                       		beq.s	locret_856E
000096C0 3029 0008                  		move.w	8(a1),d0
000096C4 9068 0008                  		sub.w	8(a0),d0
000096C8 D041                       		add.w	d1,d0
000096CA E248                       		lsr.w	#1,d0
000096CC 0828 0000 0001             		btst	#0,1(a0)
000096D2 6700                       		beq.s	loc_854E
000096D4 4640                       		not.w	d0
000096D6 D041                       		add.w	d1,d0
000096D8                            
000096D8                            loc_854E:
000096D8 7200                       		moveq	#0,d1
000096DA 1232 0000                  		move.b	(a2,d0.w),d1
000096DE 3028 000C                  		move.w	$C(a0),d0
000096E2 9041                       		sub.w	d1,d0
000096E4 7200                       		moveq	#0,d1
000096E6 1229 0016                  		move.b	$16(a1),d1
000096EA 9041                       		sub.w	d1,d0
000096EC 3340 000C                  		move.w	d0,$C(a1)
000096F0 9468 0008                  		sub.w	8(a0),d2
000096F4 9569 0008                  		sub.w	d2,8(a1)
000096F8                            
000096F8                            locret_856E:
000096F8 4E75                       		rts	
000096FA                            ; End of function SlopeObject2
000096FA                            
000096FA                            ; ===========================================================================
000096FA                            ; ---------------------------------------------------------------------------
000096FA                            ; Collision data for GHZ collapsing ledge
000096FA                            ; ---------------------------------------------------------------------------
000096FA                            Obj1A_SlopeData:
000096FA                            		incbin	misc\ghzledge.bin
0000972A                            		even
0000972A                            
0000972A                            ; ---------------------------------------------------------------------------
0000972A                            ; Sprite mappings - GHZ	collapsing ledge
0000972A                            ; ---------------------------------------------------------------------------
0000972A                            Map_obj1A:
0000972A                            	include "_maps\obj1A.asm"
0000972A                            ; ---------------------------------------------------------------------------
0000972A                            ; Sprite mappings - GHZ	collapsing ledge
0000972A                            ; ---------------------------------------------------------------------------
0000972A 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
0000972E 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00009732 10                         byte_85A8:	dc.b $10
00009733 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009738 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000973D E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009742 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009747 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000974C D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009751 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009756 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000975B F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009760 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009765 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000976A 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000976F 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009774 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009779 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000977E 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009783 10                         byte_85F9:	dc.b $10
00009784 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009789 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000978E E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009793 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009798 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000979D D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
000097A2 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000097A7 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000097AC F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000097B1 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000097B6 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000097BB 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000097C0 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000097C5 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000097CA 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000097CF 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000097D4 19                         byte_864A:	dc.b $19
000097D5 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
000097DA C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000097DF D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000097E4 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
000097E9 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
000097EE E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
000097F3 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
000097F8 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000097FD D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009802 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009807 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000980C F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009811 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009816 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000981B F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009820 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009825 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000982A 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000982F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009834 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009839 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000983E 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009843 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009848 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000984D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009852 19                         byte_86C8:	dc.b $19
00009853 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00009858 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000985D D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009862 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009867 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000986C E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009871 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009876 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000987B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009880 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009885 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000988A F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000988F F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009894 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009899 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000989E F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000098A3 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000098A8 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
000098AD 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000098B2 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000098B7 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000098BC 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000098C1 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000098C6 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000098CB 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000098D0                            		even
000098D0                            		even
000098D0                            
000098D0                            ; ---------------------------------------------------------------------------
000098D0                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000098D0                            ; ---------------------------------------------------------------------------
000098D0                            Map_obj53:
000098D0                            	include "_maps\obj53.asm"
000098D0                            ; ---------------------------------------------------------------------------
000098D0                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000098D0                            ; ---------------------------------------------------------------------------
000098D0 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
000098D4 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
000098D8 04                         byte_874E:	dc.b 4
000098D9 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
000098DE 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
000098E3 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
000098E8 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
000098ED 08                         byte_8763:	dc.b 8
000098EE F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
000098F3 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000098F8 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000098FD F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00009902 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00009907 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000990C 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00009911 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00009916 04                         byte_878C:	dc.b 4
00009917 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000991C 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00009921 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00009926 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000992B 08                         byte_87A1:	dc.b 8
0000992C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00009931 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00009936 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000993B F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00009940 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00009945 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000994A 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000994F 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00009954                            		even
00009954                            		even
00009954                            
00009954                            ; ===========================================================================
00009954                            ; ---------------------------------------------------------------------------
00009954                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00009954                            ; ---------------------------------------------------------------------------
00009954                            
00009954                            Obj1C:					; XREF: Obj_Index
00009954 7000                       		moveq	#0,d0
00009956 1028 0024                  		move.b	$24(a0),d0
0000995A 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
0000995E 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00009962                            ; ===========================================================================
00009962 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00009964 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00009966                            ; ===========================================================================
00009966                            
00009966                            Obj1C_Main:				; XREF: Obj1C_Index
00009966 5428 0024                  		addq.b	#2,$24(a0)
0000996A 7000                       		moveq	#0,d0
0000996C 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00009970 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00009974 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00009978 2159 0004                  		move.l	(a1)+,4(a0)
0000997C 3159 0002                  		move.w	(a1)+,2(a0)
00009980 0028 0004 0001             		ori.b	#4,1(a0)
00009986 1159 001A                  		move.b	(a1)+,$1A(a0)
0000998A 1159 0019                  		move.b	(a1)+,$19(a0)
0000998E 1159 0018                  		move.b	(a1)+,$18(a0)
00009992 1159 0020                  		move.b	(a1)+,$20(a0)
00009996                            
00009996                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00009996 3028 0008                  		move.w	8(a0),d0
0000999A 0240 FF80                  		andi.w	#$FF80,d0
0000999E 3238 F700                  		move.w	($FFFFF700).w,d1
000099A2 0441 0080                  		subi.w	#$80,d1
000099A6 0241 FF80                  		andi.w	#$FF80,d1
000099AA 9041                       		sub.w	d1,d0
000099AC 0C40 0280                  		cmpi.w	#$280,d0
000099B0 6300 0000                  		bls.w	DisplaySprite
000099B4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000099B8 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
000099BC 3440                       		movea.w	d0,a2	; load address into a2
000099BE 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000099C2 6000 0000                  		bra.w	DeleteObject	; and delete object
000099C6                            ; ===========================================================================
000099C6                            ; ---------------------------------------------------------------------------
000099C6                            ; Variables for	object $1C are stored in an array
000099C6                            ; ---------------------------------------------------------------------------
000099C6 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
000099CA 44D8                       		dc.w $44D8		; VRAM setting
000099CC 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
000099D0 0000 0000                  		dc.l Map_obj1C
000099D4 44D8                       		dc.w $44D8
000099D6 0008 0200                  		dc.b 0,	8, 2, 0
000099DA 0000 0000                  		dc.l Map_obj1C
000099DE 44D8                       		dc.w $44D8
000099E0 0008 0200                  		dc.b 0,	8, 2, 0
000099E4 0000 8A5E                  		dc.l Map_obj11
000099E8 438E                       		dc.w $438E
000099EA 0110 0100                  		dc.b 1,	$10, 1,	0
000099EE 0000 0000                  		dc.l Map_obj1C
000099F2 4000                       		dc.w $4000
000099F4 0110 0000                  		dc.b 1,	$10, 0, 0
000099F8 0000 0000                  		dc.l Map_obj1C
000099FC 4000                       		dc.w $4000
000099FE 0210 0000                  		dc.b 2,	$10, 0, 0
00009A02 0000 0000                  		dc.l Map_obj1C
00009A06 4000                       		dc.w $4000
00009A08 0310 0000                  		dc.b 3,	$10, 0, 0
00009A0C 0000 0000                  		dc.l Map_obj1C
00009A10 4000                       		dc.w $4000
00009A12 0460 0700                  		dc.b 4,	$60, 7, 0
00009A16                            ; ---------------------------------------------------------------------------
00009A16                            ; Sprite mappings - SLZ	lava thrower
00009A16                            ; ---------------------------------------------------------------------------
00009A16                            Map_obj1C:
00009A16                            	include "_maps\obj1C.asm"
00009A16                            Mappings:
00009A16 0000                       Mappings_0: 	dc.w Mappings_A-Mappings
00009A18 0000                       Mappings_2: 	dc.w Mappings_10-Mappings
00009A1A 0000                       Mappings_4: 	dc.w Mappings_16-Mappings
00009A1C 0000                       Mappings_6: 	dc.w Mappings_1C-Mappings
00009A1E 0000                       Mappings_8: 	dc.w Mappings_22-Mappings
00009A20 01                         Mappings_A: 	dc.b $1
00009A21 F007 0000 F8               	dc.b $F0, $7, $0, $0, $F8
00009A26 01                         Mappings_10: 	dc.b $1
00009A27 F00F 0001 F0               	dc.b $F0, $F, $0, $1, $F0
00009A2C 01                         Mappings_16: 	dc.b $1
00009A2D F00F 0011 F0               	dc.b $F0, $F, $0, $11, $F0
00009A32 01                         Mappings_1C: 	dc.b $1
00009A33 F00F 0042 F0               	dc.b $F0, $F, $0, $42, $F0
00009A38 18                         Mappings_22: 	dc.b $18
00009A39 E00F 01C6 A0               	dc.b $E0, $F, $1, $C6, $A0
00009A3E E00F 01D6 C0               	dc.b $E0, $F, $1, $D6, $C0
00009A43 E00F 01E6 00               	dc.b $E0, $F, $1, $E6, $0
00009A48 E00F 01F6 40               	dc.b $E0, $F, $1, $F6, $40
00009A4D E00F 09D6 E0               	dc.b $E0, $F, $9, $D6, $E0
00009A52 E00F 09C6 20               	dc.b $E0, $F, $9, $C6, $20
00009A57 000F 01C6 A0               	dc.b $0, $F, $1, $C6, $A0
00009A5C 000F 01D6 C0               	dc.b $0, $F, $1, $D6, $C0
00009A61 000F 09D6 E0               	dc.b $0, $F, $9, $D6, $E0
00009A66 000F 01E6 00               	dc.b $0, $F, $1, $E6, $0
00009A6B 000F 09C6 20               	dc.b $0, $F, $9, $C6, $20
00009A70 000F 01F6 40               	dc.b $0, $F, $1, $F6, $40
00009A75 200F 01C6 A0               	dc.b $20, $F, $1, $C6, $A0
00009A7A 200F 01D6 C0               	dc.b $20, $F, $1, $D6, $C0
00009A7F 200F 09D6 E0               	dc.b $20, $F, $9, $D6, $E0
00009A84 200F 01E6 00               	dc.b $20, $F, $1, $E6, $0
00009A89 200F 09C6 20               	dc.b $20, $F, $9, $C6, $20
00009A8E 200F 01F6 40               	dc.b $20, $F, $1, $F6, $40
00009A93 C00F 01D6 C0               	dc.b $C0, $F, $1, $D6, $C0
00009A98 C00F 09D6 E0               	dc.b $C0, $F, $9, $D6, $E0
00009A9D C00F 09CA 00               	dc.b $C0, $F, $9, $CA, $0
00009AA2 C00F 01E6 20               	dc.b $C0, $F, $1, $E6, $20
00009AA7 D00D 01C6 A1               	dc.b $D0, $D, $1, $C6, $A1
00009AAC D00D 01F6 40               	dc.b $D0, $D, $1, $F6, $40
00009AB2 00                         	even
00009AB2 00                         	even
00009AB2                            
00009AB2                            ; ===========================================================================
00009AB2                            ; ---------------------------------------------------------------------------
00009AB2                            ; Object 03 - LZ Air Pockets
00009AB2                            ; ---------------------------------------------------------------------------
00009AB2                            
00009AB2                            Obj03:					; XREF: Obj_Index
00009AB2 7000                       		moveq	#0,d0
00009AB4 1028 0024                  		move.b	$24(a0),d0
00009AB8 323B 0000                  		move.w	Obj03_Index(pc,d0.w),d1
00009ABC 4EFB 1000                  		jmp	Obj03_Index(pc,d1.w)
00009AC0                            ; ===========================================================================
00009AC0 0000                       Obj03_Index:	dc.w Obj03_Main-Obj03_Index
00009AC2 0000                       		dc.w Obj03_ChkDel-Obj03_Index
00009AC4                            ; ===========================================================================
00009AC4                            
00009AC4                            Obj03_Main:				; XREF: Obj03_Index
00009AC4 5428 0024                  		addq.b	#2,$24(a0)
00009AC8 217C 0000 0000 0004        		move.l	#Map_Obj03,4(a0)
00009AD0 317C 4000 0002             		move.w	#$4000,2(a0)
00009AD6 0028 0004 0001             		ori.b	#4,1(a0)
00009ADC 117C 0060 0019             		move.b	#$60,$19(a0)
00009AE2 117C 0007 0018             		move.b	#7,$18(a0)
00009AE8 117C 0000 001A             		move.b	#0,$1A(a0)
00009AEE 3028 0008                  		move.w	8(a0),d0
00009AF2 31C0 F610                  		move.w	d0,(v_pocketx).w
00009AF6 3028 000C                  		move.w	$C(a0),d0
00009AFA 0640 0040                  		addi.w	#$40,d0
00009AFE 31C0 F60E                  		move.w	d0,(v_pocketbottom).w
00009B02                            
00009B02                            Obj03_ChkDel:				; XREF: Obj03_Index
00009B02 43F8 D000                  		lea	($FFFFD000).w,a1
00009B06 3029 0008                  		move.w	8(a1),d0
00009B0A 9068 0008                  		sub.w	8(a0),d0
00009B0E 0640 0060                  		addi.w	#$60,d0
00009B12 6B00                       		bmi.s	@outpocket
00009B14 0C40 00C0                  		cmpi.w	#$C0,d0
00009B18 6400                       		bcc.s	@outpocket
00009B1A 3028 000C                  		move.w	$C(a0),d0
00009B1E 9069 000C                  		sub.w	$C(a1),d0
00009B22 0640 0040                  		addi.w	#$40,d0
00009B26 6B00                       		bmi.s	@outpocket
00009B28 0C40 0080                  		cmpi.w	#$80,d0
00009B2C 6400                       		bcc.s	@outpocket
00009B2E                            
00009B2E 50F8 F612                  		st		(f_insidepocket).w
00009B32 6000                       		bra.s	@chkgone
00009B34                            
00009B34                            	@outpocket:
00009B34 51F8 F612                  		sf		(f_insidepocket).w
00009B38                            
00009B38                            	@chkgone:
00009B38 3028 0008                  		move.w	8(a0),d0
00009B3C 0240 FF80                  		andi.w	#$FF80,d0
00009B40 3238 F700                  		move.w	($FFFFF700).w,d1
00009B44 0441 0080                  		subi.w	#$80,d1
00009B48 0241 FF80                  		andi.w	#$FF80,d1
00009B4C 9041                       		sub.w	d1,d0
00009B4E 0C40 0280                  		cmpi.w	#$280,d0
00009B52 6300 0000                  		bls.w	DisplaySprite
00009B56 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00009B5A 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
00009B5E 3440                       		movea.w	d0,a2	; load address into a2
00009B60 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00009B64 6000 0000                  		bra.w	DeleteObject	; and delete object
00009B68                            ; ---------------------------------------------------------------------------
00009B68                            ; Sprite mappings - LZ Air Pockets
00009B68                            ; ---------------------------------------------------------------------------
00009B68                            Map_Obj03:
00009B68                            	include "_maps\obj03.asm"
00009B68                            obj03map:
00009B68 0000                       obj03map_0: 	dc.w obj03map_2-obj03map
00009B6A 18                         obj03map_2: 	dc.b $18
00009B6B E00F 01C6 A0               	dc.b $E0, $F, $1, $C6, $A0
00009B70 E00F 01D6 C0               	dc.b $E0, $F, $1, $D6, $C0
00009B75 E00F 01E6 00               	dc.b $E0, $F, $1, $E6, $0
00009B7A E00F 01F6 40               	dc.b $E0, $F, $1, $F6, $40
00009B7F E00F 09D6 E0               	dc.b $E0, $F, $9, $D6, $E0
00009B84 E00F 09C6 20               	dc.b $E0, $F, $9, $C6, $20
00009B89 000F 01C6 A0               	dc.b $0, $F, $1, $C6, $A0
00009B8E 000F 01D6 C0               	dc.b $0, $F, $1, $D6, $C0
00009B93 000F 09D6 E0               	dc.b $0, $F, $9, $D6, $E0
00009B98 000F 01E6 00               	dc.b $0, $F, $1, $E6, $0
00009B9D 000F 09C6 20               	dc.b $0, $F, $9, $C6, $20
00009BA2 000F 01F6 40               	dc.b $0, $F, $1, $F6, $40
00009BA7 200F 01C6 A0               	dc.b $20, $F, $1, $C6, $A0
00009BAC 200F 01D6 C0               	dc.b $20, $F, $1, $D6, $C0
00009BB1 200F 09D6 E0               	dc.b $20, $F, $9, $D6, $E0
00009BB6 200F 01E6 00               	dc.b $20, $F, $1, $E6, $0
00009BBB 200F 09C6 20               	dc.b $20, $F, $9, $C6, $20
00009BC0 200F 01F6 40               	dc.b $20, $F, $1, $F6, $40
00009BC5 C00F 01D6 C0               	dc.b $C0, $F, $1, $D6, $C0
00009BCA C00F 09D6 E0               	dc.b $C0, $F, $9, $D6, $E0
00009BCF C00F 09CA 00               	dc.b $C0, $F, $9, $CA, $0
00009BD4 C00F 01E6 20               	dc.b $C0, $F, $1, $E6, $20
00009BD9 D00D 01C6 A1               	dc.b $D0, $D, $1, $C6, $A1
00009BDE D00D 01F6 40               	dc.b $D0, $D, $1, $F6, $40
00009BE4 00                         	even
00009BE4 00                         	even
00009BE4                            
00009BE4                            ; ===========================================================================
00009BE4                            ; ---------------------------------------------------------------------------
00009BE4                            ; Object 1D - switch that activates when Sonic touches it
00009BE4                            ; (this	is not used anywhere in	the game)
00009BE4                            ; ---------------------------------------------------------------------------
00009BE4                            
00009BE4                            Obj1D:					; XREF: Obj_Index
00009BE4 7000                       		moveq	#0,d0
00009BE6 1028 0024                  		move.b	$24(a0),d0
00009BEA 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00009BEE 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00009BF2                            ; ===========================================================================
00009BF2 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00009BF4 0000                       		dc.w Obj1D_Action-Obj1D_Index
00009BF6 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00009BF8                            ; ===========================================================================
00009BF8                            
00009BF8                            Obj1D_Main:				; XREF: Obj1D_Index
00009BF8 5428 0024                  		addq.b	#2,$24(a0)
00009BFC 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00009C04 317C 4000 0002             		move.w	#$4000,2(a0)
00009C0A 117C 0004 0001             		move.b	#4,1(a0)
00009C10 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00009C16 117C 0010 0019             		move.b	#$10,$19(a0)
00009C1C 117C 0005 0018             		move.b	#5,$18(a0)
00009C22                            
00009C22                            Obj1D_Action:				; XREF: Obj1D_Index
00009C22 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00009C28 323C 0010                  		move.w	#$10,d1
00009C2C 6100 0000                  		bsr.w	Obj1D_ChkTouch
00009C30 6700                       		beq.s	Obj1D_ChkDel
00009C32 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00009C36 7001                       		moveq	#1,d0
00009C38 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00009C3C                            
00009C3C                            Obj1D_ChkDel:
00009C3C 6100 0000                  		bsr.w	DisplaySprite
00009C40 3028 0008                  		move.w	8(a0),d0
00009C44 0240 FF80                  		andi.w	#$FF80,d0
00009C48 3238 F700                  		move.w	($FFFFF700).w,d1
00009C4C 0441 0080                  		subi.w	#$80,d1
00009C50 0241 FF80                  		andi.w	#$FF80,d1
00009C54 9041                       		sub.w	d1,d0
00009C56 0C40 0280                  		cmpi.w	#$280,d0
00009C5A 6300                       		bls.s	Obj1D_NoDel
00009C5C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00009C60 6700                       		beq.s	Obj1D_Delete		; if it's zero, don't remember object
00009C62 3440                       		movea.w	d0,a2	; load address into a2
00009C64 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00009C68 6000                       		bra.s	Obj1D_Delete	; and delete object
00009C6A                            
00009C6A                            Obj1D_NoDel:
00009C6A 4E75                       		rts	
00009C6C                            ; ===========================================================================
00009C6C                            
00009C6C                            Obj1D_Delete:				; XREF: Obj1D_Index
00009C6C 6100 0000                  		bsr.w	DeleteObject
00009C70 4E75                       		rts	
00009C72                            ; ---------------------------------------------------------------------------
00009C72                            ; Subroutine to	check if Sonic touches the object
00009C72                            ; ---------------------------------------------------------------------------
00009C72                            
00009C72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C72                            
00009C72                            
00009C72                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00009C72 43F8 D000                  		lea	($FFFFD000).w,a1
00009C76 3029 0008                  		move.w	8(a1),d0
00009C7A 9068 0008                  		sub.w	8(a0),d0
00009C7E D041                       		add.w	d1,d0
00009C80 6B00                       		bmi.s	loc_8918
00009C82 D241                       		add.w	d1,d1
00009C84 B041                       		cmp.w	d1,d0
00009C86 6400                       		bcc.s	loc_8918
00009C88 3429 000C                  		move.w	$C(a1),d2
00009C8C 1229 0016                  		move.b	$16(a1),d1
00009C90 4881                       		ext.w	d1
00009C92 D242                       		add.w	d2,d1
00009C94 3028 000C                  		move.w	$C(a0),d0
00009C98 0440 0010                  		subi.w	#$10,d0
00009C9C 9041                       		sub.w	d1,d0
00009C9E 6200                       		bhi.s	loc_8918
00009CA0 0C40 FFF0                  		cmpi.w	#-$10,d0
00009CA4 6500                       		bcs.s	loc_8918
00009CA6 70FF                       		moveq	#-1,d0
00009CA8 4E75                       		rts	
00009CAA                            ; ===========================================================================
00009CAA                            
00009CAA                            loc_8918:
00009CAA 7000                       		moveq	#0,d0
00009CAC 4E75                       		rts	
00009CAE                            ; End of function Obj1D_ChkTouch
00009CAE                            
00009CAE                            ; ===========================================================================
00009CAE                            ; ---------------------------------------------------------------------------
00009CAE                            ; Sprite mappings - object 1D
00009CAE                            ; ---------------------------------------------------------------------------
00009CAE                            Map_obj1D:
00009CAE                            	include "_maps\obj1D.asm"
00009CAE                            ; ---------------------------------------------------------------------------
00009CAE                            ; Sprite mappings - object 1D
00009CAE                            ; ---------------------------------------------------------------------------
00009CAE 0000                       		dc.w byte_891E-Map_obj1D
00009CB0 04                         byte_891E:	dc.b 4
00009CB1 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00009CB6 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00009CBB E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00009CC0 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00009CC6 00                         		even
00009CC6 00                         		even
00009CC6                            
00009CC6                            ; ===========================================================================
00009CC6                            ; ---------------------------------------------------------------------------
00009CC6                            ; Object 2A - doors (SBZ)
00009CC6                            ; ---------------------------------------------------------------------------
00009CC6                            
00009CC6                            Obj2A:					; XREF: Obj_Index
00009CC6 7000                       		moveq	#0,d0
00009CC8 1028 0024                  		move.b	$24(a0),d0
00009CCC 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00009CD0 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00009CD4                            ; ===========================================================================
00009CD4 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00009CD6 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00009CD8                            ; ===========================================================================
00009CD8                            
00009CD8                            Obj2A_Main:				; XREF: Obj2A_Index
00009CD8 5428 0024                  		addq.b	#2,$24(a0)
00009CDC 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00009CE4 317C 42E8 0002             		move.w	#$42E8,2(a0)
00009CEA 0028 0004 0001             		ori.b	#4,1(a0)
00009CF0 117C 0008 0019             		move.b	#8,$19(a0)
00009CF6 117C 0004 0018             		move.b	#4,$18(a0)
00009CFC                            
00009CFC                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00009CFC 323C 0040                  		move.w	#$40,d1
00009D00 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00009D04 3038 D008                  		move.w	($FFFFD008).w,d0
00009D08 D041                       		add.w	d1,d0
00009D0A B068 0008                  		cmp.w	8(a0),d0
00009D0E 6500                       		bcs.s	Obj2A_Animate
00009D10 9041                       		sub.w	d1,d0
00009D12 9041                       		sub.w	d1,d0
00009D14 B068 0008                  		cmp.w	8(a0),d0
00009D18 6400                       		bcc.s	Obj2A_Animate
00009D1A D041                       		add.w	d1,d0
00009D1C B068 0008                  		cmp.w	8(a0),d0
00009D20 6400                       		bcc.s	loc_899A
00009D22 0828 0000 0022             		btst	#0,$22(a0)
00009D28 6600                       		bne.s	Obj2A_Animate
00009D2A 6000                       		bra.s	Obj2A_Open
00009D2C                            ; ===========================================================================
00009D2C                            
00009D2C                            loc_899A:				; XREF: Obj2A_OpenShut
00009D2C 0828 0000 0022             		btst	#0,$22(a0)
00009D32 6700                       		beq.s	Obj2A_Animate
00009D34                            
00009D34                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009D34 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00009D3A                            
00009D3A                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00009D3A 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00009D40 6100 0000                  		bsr.w	AnimateSprite
00009D44 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00009D48 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00009D4A 323C 0011                  		move.w	#$11,d1
00009D4E 343C 0020                  		move.w	#$20,d2
00009D52 3602                       		move.w	d2,d3
00009D54 5243                       		addq.w	#1,d3
00009D56 3828 0008                  		move.w	8(a0),d4
00009D5A 6100 0000                  		bsr.w	SolidObject
00009D5E                            
00009D5E                            Obj2A_MarkAsUsed:
00009D5E 6000 0000                  		bra.w	MarkObjGone
00009D62                            ; ===========================================================================
00009D62                            Ani_obj2A:
00009D62                            	include "_anim\obj2A.asm"
00009D62                            ; ---------------------------------------------------------------------------
00009D62                            ; Animation script - doors (SBZ)
00009D62                            ; ---------------------------------------------------------------------------
00009D62 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009D64 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009D66 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009D72 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009D7E                            		even
00009D7E                            		even
00009D7E                            
00009D7E                            ; ---------------------------------------------------------------------------
00009D7E                            ; Sprite mappings - doors (SBZ)
00009D7E                            ; ---------------------------------------------------------------------------
00009D7E                            Map_obj2A:
00009D7E                            	include "_maps\obj2A.asm"
00009D7E                            ; ---------------------------------------------------------------------------
00009D7E                            ; Sprite mappings - doors (SBZ)
00009D7E                            ; ---------------------------------------------------------------------------
00009D7E 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009D82 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00009D86 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00009D8A 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00009D8E 0000                       		dc.w byte_8A56-Map_obj2A
00009D90 02                         byte_89FE:	dc.b 2
00009D91 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00009D96 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00009D9B 02                         byte_8A09:	dc.b 2
00009D9C DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00009DA1 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00009DA6 02                         byte_8A14:	dc.b 2
00009DA7 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00009DAC 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00009DB1 02                         byte_8A1F:	dc.b 2
00009DB2 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00009DB7 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00009DBC 02                         byte_8A2A:	dc.b 2
00009DBD D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00009DC2 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00009DC7 02                         byte_8A35:	dc.b 2
00009DC8 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00009DCD 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00009DD2 02                         byte_8A40:	dc.b 2
00009DD3 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00009DD8 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00009DDD 02                         byte_8A4B:	dc.b 2
00009DDE C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00009DE3 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00009DE8 02                         byte_8A56:	dc.b 2
00009DE9 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00009DEE 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00009DF4 00                         		even
00009DF4 00                         		even
00009DF4                            
00009DF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009DF4                            
00009DF4                            
00009DF4                            Obj44_SolidWall:			; XREF: Obj44_Solid
00009DF4 6100 0000                  		bsr.w	Obj44_SolidWall2
00009DF8 6700                       		beq.s	loc_8AA8
00009DFA 6B00 0000                  		bmi.w	loc_8AC4
00009DFE 4A40                       		tst.w	d0
00009E00 6700 0000                  		beq.w	loc_8A92
00009E04 6B00                       		bmi.s	loc_8A7C
00009E06 4A69 0010                  		tst.w	$10(a1)
00009E0A 6B00                       		bmi.s	loc_8A92
00009E0C 6000                       		bra.s	loc_8A82
00009E0E                            ; ===========================================================================
00009E0E                            
00009E0E                            loc_8A7C:
00009E0E 4A69 0010                  		tst.w	$10(a1)
00009E12 6A00                       		bpl.s	loc_8A92
00009E14                            
00009E14                            loc_8A82:
00009E14 9169 0008                  		sub.w	d0,8(a1)
00009E18 337C 0000 0020             		move.w	#0,$20(a1)
00009E1E 337C 0000 0010             		move.w	#0,$10(a1)
00009E24                            
00009E24                            loc_8A92:
00009E24 0829 0001 0022             		btst	#1,$22(a1)
00009E2A 6600                       		bne.s	loc_8AB6
00009E2C 08E9 0005 0022             		bset	#5,$22(a1)
00009E32 08E8 0005 0022             		bset	#5,$22(a0)
00009E38 4E75                       		rts	
00009E3A                            ; ===========================================================================
00009E3A                            
00009E3A                            loc_8AA8:
00009E3A 0828 0005 0022             		btst	#5,$22(a0)
00009E40 6700                       		beq.s	locret_8AC2
00009E42 337C 0001 001C             		move.w	#1,$1C(a1)
00009E48                            
00009E48                            loc_8AB6:
00009E48 08A8 0005 0022             		bclr	#5,$22(a0)
00009E4E 08A9 0005 0022             		bclr	#5,$22(a1)
00009E54                            
00009E54                            locret_8AC2:
00009E54 4E75                       		rts	
00009E56                            ; ===========================================================================
00009E56                            
00009E56                            loc_8AC4:
00009E56 4A69 0012                  		tst.w	$12(a1)
00009E5A 6A00                       		bpl.s	locret_8AD8
00009E5C 4A43                       		tst.w	d3
00009E5E 6A00                       		bpl.s	locret_8AD8
00009E60 9769 000C                  		sub.w	d3,$C(a1)
00009E64 337C 0000 0012             		move.w	#0,$12(a1)
00009E6A                            
00009E6A                            locret_8AD8:
00009E6A 4E75                       		rts	
00009E6C                            ; End of function Obj44_SolidWall
00009E6C                            
00009E6C                            
00009E6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E6C                            
00009E6C                            
00009E6C                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009E6C 43F8 D000                  		lea	($FFFFD000).w,a1
00009E70 3029 0008                  		move.w	8(a1),d0
00009E74 9068 0008                  		sub.w	8(a0),d0
00009E78 D041                       		add.w	d1,d0
00009E7A 6B00                       		bmi.s	loc_8B48
00009E7C 3601                       		move.w	d1,d3
00009E7E D643                       		add.w	d3,d3
00009E80 B043                       		cmp.w	d3,d0
00009E82 6200                       		bhi.s	loc_8B48
00009E84 1629 0016                  		move.b	$16(a1),d3
00009E88 4883                       		ext.w	d3
00009E8A D443                       		add.w	d3,d2
00009E8C 3629 000C                  		move.w	$C(a1),d3
00009E90 9668 000C                  		sub.w	$C(a0),d3
00009E94 D642                       		add.w	d2,d3
00009E96 6B00                       		bmi.s	loc_8B48
00009E98 3802                       		move.w	d2,d4
00009E9A D844                       		add.w	d4,d4
00009E9C B644                       		cmp.w	d4,d3
00009E9E 6400                       		bcc.s	loc_8B48
00009EA0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009EA4 6B00                       		bmi.s	loc_8B48
00009EA6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009EAC 6400                       		bcc.s	loc_8B48
00009EAE 4A78 FE08                  		tst.w	($FFFFFE08).w
00009EB2 6600                       		bne.s	loc_8B48
00009EB4 3A00                       		move.w	d0,d5
00009EB6 B240                       		cmp.w	d0,d1
00009EB8 6400                       		bcc.s	loc_8B30
00009EBA D241                       		add.w	d1,d1
00009EBC 9041                       		sub.w	d1,d0
00009EBE 3A00                       		move.w	d0,d5
00009EC0 4445                       		neg.w	d5
00009EC2                            
00009EC2                            loc_8B30:
00009EC2 3203                       		move.w	d3,d1
00009EC4 B443                       		cmp.w	d3,d2
00009EC6 6400                       		bcc.s	loc_8B3C
00009EC8 9644                       		sub.w	d4,d3
00009ECA 3203                       		move.w	d3,d1
00009ECC 4441                       		neg.w	d1
00009ECE                            
00009ECE                            loc_8B3C:
00009ECE BA41                       		cmp.w	d1,d5
00009ED0 6200                       		bhi.s	loc_8B44
00009ED2 7801                       		moveq	#1,d4
00009ED4 4E75                       		rts	
00009ED6                            ; ===========================================================================
00009ED6                            
00009ED6                            loc_8B44:
00009ED6 78FF                       		moveq	#-1,d4
00009ED8 4E75                       		rts	
00009EDA                            ; ===========================================================================
00009EDA                            
00009EDA                            loc_8B48:
00009EDA 7800                       		moveq	#0,d4
00009EDC 4E75                       		rts	
00009EDE                            ; End of function Obj44_SolidWall2
00009EDE                            
00009EDE                            ; ===========================================================================
00009EDE                            ; ---------------------------------------------------------------------------
00009EDE                            ; Object 1E - Ball Hog enemy (SBZ)
00009EDE                            ; ---------------------------------------------------------------------------
00009EDE                            
00009EDE                            Obj1E:					; XREF: Obj_Index
00009EDE 7000                       		moveq	#0,d0
00009EE0 1028 0024                  		move.b	$24(a0),d0
00009EE4 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00009EE8 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00009EEC                            ; ===========================================================================
00009EEC 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009EEE 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009EF0                            ; ===========================================================================
00009EF0                            
00009EF0                            Obj1E_Main:				; XREF: Obj1E_Index
00009EF0 117C 0013 0016             		move.b	#$13,$16(a0)
00009EF6 117C 0008 0017             		move.b	#8,$17(a0)
00009EFC 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009F04 317C 2302 0002             		move.w	#$2302,2(a0)
00009F0A 117C 0004 0001             		move.b	#4,1(a0)
00009F10 117C 0004 0018             		move.b	#4,$18(a0)
00009F16 117C 0005 0020             		move.b	#5,$20(a0)
00009F1C 117C 000C 0019             		move.b	#$C,$19(a0)
00009F22 6100 0000                  		bsr.w	ObjectFall
00009F26 4EB9 0000 0000             		jsr	ObjHitFloor
00009F2C 4A41                       		tst.w	d1
00009F2E 6A00                       		bpl.s	locret_8BAC
00009F30 D368 000C                  		add.w	d1,$C(a0)
00009F34 317C 0000 0012             		move.w	#0,$12(a0)
00009F3A 5428 0024                  		addq.b	#2,$24(a0)
00009F3E                            
00009F3E                            locret_8BAC:
00009F3E 4E75                       		rts	
00009F40                            ; ===========================================================================
00009F40                            
00009F40                            Obj1E_Action:				; XREF: Obj1E_Index
00009F40 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009F46 6100 0000                  		bsr.w	AnimateSprite
00009F4A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009F50 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009F52 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009F56 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009F58 6000                       		bra.s	Obj1E_MarkAsGone
00009F5A                            ; ===========================================================================
00009F5A                            
00009F5A                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009F5A 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009F5E                            
00009F5E                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009F5E 6000 0000                  		bra.w	MarkObjGone
00009F62                            ; ===========================================================================
00009F62                            
00009F62                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009F62 117C 0001 0032             		move.b	#1,$32(a0)
00009F68 6100 0000                  		bsr.w	SingleObjLoad
00009F6C 6600                       		bne.s	loc_8C1A
00009F6E 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009F72 3368 0008 0008             		move.w	8(a0),8(a1)
00009F78 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009F7E 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009F84 337C 0000 0012             		move.w	#0,$12(a1)
00009F8A 70FC                       		moveq	#-4,d0
00009F8C 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009F92 6700                       		beq.s	loc_8C0A	; if not, branch
00009F94 4440                       		neg.w	d0
00009F96 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00009F9A                            
00009F9A                            loc_8C0A:
00009F9A D169 0008                  		add.w	d0,8(a1)
00009F9E 0669 000C 000C             		addi.w	#$C,$C(a1)
00009FA4 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00009FAA                            
00009FAA                            loc_8C1A:
00009FAA 60B2                       		bra.s	Obj1E_MarkAsGone
00009FAC                            ; ===========================================================================
00009FAC                            ; ---------------------------------------------------------------------------
00009FAC                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009FAC                            ; ---------------------------------------------------------------------------
00009FAC                            
00009FAC                            Obj20:					; XREF: Obj_Index
00009FAC 7000                       		moveq	#0,d0
00009FAE 1028 0024                  		move.b	$24(a0),d0
00009FB2 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00009FB6 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00009FBA                            ; ===========================================================================
00009FBA 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009FBC 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009FBE                            ; ===========================================================================
00009FBE                            
00009FBE                            Obj20_Main:				; XREF: Obj20_Index
00009FBE 5428 0024                  		addq.b	#2,$24(a0)
00009FC2 117C 0007 0016             		move.b	#7,$16(a0)
00009FC8 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009FD0 317C 2302 0002             		move.w	#$2302,2(a0)
00009FD6 117C 0004 0001             		move.b	#4,1(a0)
00009FDC 117C 0003 0018             		move.b	#3,$18(a0)
00009FE2 117C 0087 0020             		move.b	#$87,$20(a0)
00009FE8 117C 0008 0019             		move.b	#8,$19(a0)
00009FEE 7000                       		moveq	#0,d0
00009FF0 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009FF4 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009FF8 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00009FFC 117C 0004 001A             		move.b	#4,$1A(a0)
0000A002                            
0000A002                            Obj20_Bounce:				; XREF: Obj20_Index
0000A002 4EB9 0000 0000             		jsr	ObjectFall
0000A008 4A68 0012                  		tst.w	$12(a0)
0000A00C 6B00                       		bmi.s	Obj20_ChkExplode
0000A00E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A014 4A41                       		tst.w	d1
0000A016 6A00                       		bpl.s	Obj20_ChkExplode
0000A018 D368 000C                  		add.w	d1,$C(a0)
0000A01C 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A022 4A03                       		tst.b	d3
0000A024 6700                       		beq.s	Obj20_ChkExplode
0000A026 6B00                       		bmi.s	loc_8CA4
0000A028 4A68 0010                  		tst.w	$10(a0)
0000A02C 6A00                       		bpl.s	Obj20_ChkExplode
0000A02E 4468 0010                  		neg.w	$10(a0)
0000A032 6000                       		bra.s	Obj20_ChkExplode
0000A034                            ; ===========================================================================
0000A034                            
0000A034                            loc_8CA4:				; XREF: Obj20_Bounce
0000A034 4A68 0010                  		tst.w	$10(a0)
0000A038 6B00                       		bmi.s	Obj20_ChkExplode
0000A03A 4468 0010                  		neg.w	$10(a0)
0000A03E                            
0000A03E                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
0000A03E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
0000A042 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
0000A044 10BC 0024                  		move.b	#$24,0(a0)
0000A048 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
0000A04C 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0000A052 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000A056                            ; ===========================================================================
0000A056                            
0000A056                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000A056 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A05A 6A00                       		bpl.s	Obj20_Display
0000A05C 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
0000A062 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000A068                            
0000A068                            Obj20_Display:
0000A068 6100 0000                  		bsr.w	DisplaySprite
0000A06C 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A070 0640 00E0                  		addi.w	#$E0,d0
0000A074 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000A078 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A07C 4E75                       		rts	
0000A07E                            ; ===========================================================================
0000A07E                            ; ---------------------------------------------------------------------------
0000A07E                            ; Object 24 - explosion	from a destroyed monitor
0000A07E                            ; ---------------------------------------------------------------------------
0000A07E                            
0000A07E                            Obj24:					; XREF: Obj_Index
0000A07E 7000                       		moveq	#0,d0
0000A080 1028 0024                  		move.b	$24(a0),d0
0000A084 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000A088 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000A08C                            ; ===========================================================================
0000A08C 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000A08E 0000                       		dc.w Obj24_Animate-Obj24_Index
0000A090                            ; ===========================================================================
0000A090                            
0000A090                            Obj24_Main:				; XREF: Obj24_Index
0000A090 5428 0024                  		addq.b	#2,$24(a0)
0000A094 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
0000A09C 317C 041C 0002             		move.w	#$41C,2(a0)
0000A0A2 117C 0004 0001             		move.b	#4,1(a0)
0000A0A8 117C 0001 0018             		move.b	#1,$18(a0)
0000A0AE 117C 0000 0020             		move.b	#0,$20(a0)
0000A0B4 117C 000C 0019             		move.b	#$C,$19(a0)
0000A0BA 117C 0009 001E             		move.b	#9,$1E(a0)
0000A0C0 117C 0000 001A             		move.b	#0,$1A(a0)
0000A0C6 303C 00A5                  		move.w	#$A5,d0
0000A0CA 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play explosion sound
0000A0D0                            
0000A0D0                            Obj24_Animate:				; XREF: Obj24_Index
0000A0D0 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A0D4 6A00                       		bpl.s	Obj24_Display
0000A0D6 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
0000A0DC 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000A0E0 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000A0E6 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A0EA                            
0000A0EA                            Obj24_Display:
0000A0EA 6000 0000                  		bra.w	DisplaySprite
0000A0EE                            ; ===========================================================================
0000A0EE                            ; ---------------------------------------------------------------------------
0000A0EE                            ; Object 27 - explosion	from a destroyed enemy
0000A0EE                            ; ---------------------------------------------------------------------------
0000A0EE                            
0000A0EE                            Obj27:					; XREF: Obj_Index
0000A0EE 7000                       		moveq	#0,d0
0000A0F0 1028 0024                  		move.b	$24(a0),d0
0000A0F4 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000A0F8 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000A0FC                            ; ===========================================================================
0000A0FC 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
0000A0FE 0000                       		dc.w Obj27_Main-Obj27_Index
0000A100 0000                       		dc.w Obj27_Animate-Obj27_Index
0000A102                            ; ===========================================================================
0000A102                            
0000A102                            Obj27_LoadAnimal:			; XREF: Obj27_Index
0000A102 5428 0024                  		addq.b	#2,$24(a0)
0000A106 6100 0000                  		bsr.w	SingleObjLoad
0000A10A 6600                       		bne.s	Obj27_Main
0000A10C 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0000A110 3368 0008 0008             		move.w	8(a0),8(a1)
0000A116 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A11C 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A122                            
0000A122                            Obj27_Main:				; XREF: Obj27_Index
0000A122 5428 0024                  		addq.b	#2,$24(a0)
0000A126 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000A12E 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A134 117C 0004 0001             		move.b	#4,1(a0)
0000A13A 117C 0001 0018             		move.b	#1,$18(a0)
0000A140 117C 0000 0020             		move.b	#0,$20(a0)
0000A146 117C 000C 0019             		move.b	#$C,$19(a0)
0000A14C 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000A152 117C 0000 001A             		move.b	#0,$1A(a0)
0000A158 303C 00C1                  		move.w	#$C1,d0
0000A15C 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000A162                            
0000A162                            Obj27_Animate:				; XREF: Obj27_Index
0000A162 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A166 6A00                       		bpl.s	Obj27_Display
0000A168 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000A16E 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000A172 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000A178 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A17C                            
0000A17C                            Obj27_Display:
0000A17C 6000 0000                  		bra.w	DisplaySprite
0000A180                            ; ===========================================================================
0000A180                            ; ---------------------------------------------------------------------------
0000A180                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A180                            ; ---------------------------------------------------------------------------
0000A180                            
0000A180                            Obj3F:					; XREF: Obj_Index
0000A180 7000                       		moveq	#0,d0
0000A182 1028 0024                  		move.b	$24(a0),d0
0000A186 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000A18A 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000A18E                            ; ===========================================================================
0000A18E 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000A190 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
0000A192                            ; ===========================================================================
0000A192                            
0000A192                            Obj3F_Main:				; XREF: Obj3F_Index
0000A192 5428 0024                  		addq.b	#2,$24(a0)
0000A196 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
0000A19E 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A1A4 117C 0004 0001             		move.b	#4,1(a0)
0000A1AA 117C 0001 0018             		move.b	#1,$18(a0)
0000A1B0 117C 0000 0020             		move.b	#0,$20(a0)
0000A1B6 117C 000C 0019             		move.b	#$C,$19(a0)
0000A1BC 117C 0007 001E             		move.b	#7,$1E(a0)
0000A1C2 117C 0000 001A             		move.b	#0,$1A(a0)
0000A1C8 303C 00C4                  		move.w	#$C4,d0
0000A1CC 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
0000A1D2                            ; ===========================================================================
0000A1D2                            Ani_obj1E:
0000A1D2                            	include "_anim\obj1E.asm"
0000A1D2                            ; ---------------------------------------------------------------------------
0000A1D2                            ; Animation script - doors (SBZ)
0000A1D2                            ; ---------------------------------------------------------------------------
0000A1D2 0000                       		dc.w byte_8E4A-Ani_obj1E
0000A1D4 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
0000A1EC 00                         		even
0000A1EC 00                         		even
0000A1EC                            
0000A1EC                            ; ---------------------------------------------------------------------------
0000A1EC                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A1EC                            ; ---------------------------------------------------------------------------
0000A1EC                            Map_obj1E:
0000A1EC                            	include "_maps\obj1E.asm"
0000A1EC                            ; ---------------------------------------------------------------------------
0000A1EC                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A1EC                            ; ---------------------------------------------------------------------------
0000A1EC 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
0000A1F0 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
0000A1F4 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
0000A1F8 02                         byte_8E6E:	dc.b 2
0000A1F9 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A1FE FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
0000A203 02                         byte_8E79:	dc.b 2
0000A204 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A209 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
0000A20E 02                         byte_8E84:	dc.b 2
0000A20F F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
0000A214 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000A219 02                         byte_8E8F:	dc.b 2
0000A21A E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
0000A21F F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
0000A224 01                         byte_8E9A:	dc.b 1
0000A225 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000A22A 01                         byte_8EA0:	dc.b 1
0000A22B F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
0000A230                            		even
0000A230                            		even
0000A230                            
0000A230                            ; ---------------------------------------------------------------------------
0000A230                            ; Sprite mappings - explosion
0000A230                            ; ---------------------------------------------------------------------------
0000A230                            Map_obj24:
0000A230                            	include "_maps\obj24.asm"
0000A230                            ; ---------------------------------------------------------------------------
0000A230                            ; Sprite mappings - explosion
0000A230                            ; ---------------------------------------------------------------------------
0000A230 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
0000A234 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000A238 01                         byte_8EAE:	dc.b 1
0000A239 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A23E 01                         byte_8EB4:	dc.b 1
0000A23F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A244 01                         byte_8EBA:	dc.b 1
0000A245 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A24A 01                         byte_8EC0:	dc.b 1
0000A24B F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A250                            		even
0000A250                            		even
0000A250                            
0000A250                            ; ---------------------------------------------------------------------------
0000A250                            ; Sprite mappings - explosion
0000A250                            ; ---------------------------------------------------------------------------
0000A250 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
0000A254 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000A258 0000                       		dc.w byte_8EF7-Map_obj27
0000A25A 01                         byte_8ED0:	dc.b 1
0000A25B F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A260 01                         byte_8ED6:	dc.b 1
0000A261 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A266 01                         byte_8EDC:	dc.b 1
0000A267 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A26C 04                         byte_8EE2:	dc.b 4
0000A26D EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A272 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A277 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A27C FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A281 04                         byte_8EF7:	dc.b 4
0000A282 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A287 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A28C 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A291 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A296                            		even
0000A296                            ; ---------------------------------------------------------------------------
0000A296                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A296                            ; ---------------------------------------------------------------------------
0000A296 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000A298 0000                       		dc.w byte_8F16-Map_obj3F
0000A29A 0000                       		dc.w byte_8F1C-Map_obj3F
0000A29C FFD6                       		dc.w byte_8EE2-Map_obj3F
0000A29E FFEB                       		dc.w byte_8EF7-Map_obj3F
0000A2A0 01                         byte_8F16:	dc.b 1
0000A2A1 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A2A6 01                         byte_8F1C:	dc.b 1
0000A2A7 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A2AC                            		even
0000A2AC                            ; ===========================================================================
0000A2AC                            ; ---------------------------------------------------------------------------
0000A2AC                            ; Object 28 - animals
0000A2AC                            ; ---------------------------------------------------------------------------
0000A2AC                            
0000A2AC                            Obj28:					; XREF: Obj_Index
0000A2AC 7000                       		moveq	#0,d0
0000A2AE 1028 0024                  		move.b	$24(a0),d0
0000A2B2 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000A2B6 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000A2BA                            ; ===========================================================================
0000A2BA 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000A2BE 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A2C2 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000A2C6 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A2CA 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000A2CE 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000A2D2 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000A2D6 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A2DA 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A2DE 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000A2E2 0000                       		dc.w loc_92D6-Obj28_Index
0000A2E4                            
0000A2E4 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000A2F0                            
0000A2F0 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000A2F4 0000 0000                  		dc.l Map_obj28
0000A2F8 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000A2FC 0000 0000                  		dc.l Map_obj28a		; mappings address
0000A300 FE80 FD00                  		dc.w $FE80, $FD00
0000A304 0000 0000                  		dc.l Map_obj28
0000A308 FEC0 FE80                  		dc.w $FEC0, $FE80
0000A30C 0000 0000                  		dc.l Map_obj28a
0000A310 FE40 FD00                  		dc.w $FE40, $FD00
0000A314 0000 0000                  		dc.l Map_obj28b
0000A318 FD00 FC00                  		dc.w $FD00, $FC00
0000A31C 0000 0000                  		dc.l Map_obj28a
0000A320 FD80 FC80                  		dc.w $FD80, $FC80
0000A324 0000 0000                  		dc.l Map_obj28b
0000A328                            
0000A328 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A338 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000A348 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000A354                            
0000A354 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000A368 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
0000A37C 0000 0000                  		dc.l Map_obj28b
0000A380                            
0000A380 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000A392 0565 05B3                  		dc.w $565, $5B3
0000A396                            ; ===========================================================================
0000A396                            
0000A396                            Obj28_Ending:				; XREF: Obj28_Index
0000A396 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000A39A 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000A39E 7000                       		moveq	#0,d0
0000A3A0 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000A3A4 D040                       		add.w	d0,d0		; multiply d0 by 2
0000A3A6 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000A3AA 0440 0014                  		subi.w	#$14,d0
0000A3AE 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000A3B4 D040                       		add.w	d0,d0
0000A3B6 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000A3BC 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000A3C0 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000A3C6 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000A3CC 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000A3D2 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000A3D8 117C 000C 0016             		move.b	#$C,$16(a0)
0000A3DE 117C 0004 0001             		move.b	#4,1(a0)
0000A3E4 08E8 0000 0001             		bset	#0,1(a0)
0000A3EA 117C 0006 0018             		move.b	#6,$18(a0)
0000A3F0 117C 0008 0019             		move.b	#8,$19(a0)
0000A3F6 117C 0007 001E             		move.b	#7,$1E(a0)
0000A3FC 6000 0000                  		bra.w	DisplaySprite
0000A400                            ; ===========================================================================
0000A400                            
0000A400                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000A400 5428 0024                  		addq.b	#2,$24(a0)
0000A404 6100 85CA                  		bsr.w	RandomNumber
0000A408 0240 0001                  		andi.w	#1,d0
0000A40C 7200                       		moveq	#0,d1
0000A40E 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000A412 D241                       		add.w	d1,d1
0000A414 D240                       		add.w	d0,d1
0000A416 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000A41A 1031 1000                  		move.b	(a1,d1.w),d0
0000A41E 1140 0030                  		move.b	d0,$30(a0)
0000A422 E748                       		lsl.w	#3,d0
0000A424 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000A428 D2C0                       		adda.w	d0,a1
0000A42A 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000A42E 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000A432 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000A436 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000A43C 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000A442 6700                       		beq.s	loc_90C0	; if yes, branch
0000A444 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000A44A                            
0000A44A                            loc_90C0:
0000A44A 117C 000C 0016             		move.b	#$C,$16(a0)
0000A450 117C 0004 0001             		move.b	#4,1(a0)
0000A456 08E8 0000 0001             		bset	#0,1(a0)
0000A45C 117C 0006 0018             		move.b	#6,$18(a0)
0000A462 117C 0008 0019             		move.b	#8,$19(a0)
0000A468 117C 0007 001E             		move.b	#7,$1E(a0)
0000A46E 117C 0002 001A             		move.b	#2,$1A(a0)
0000A474 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A47A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A47E 6600                       		bne.s	loc_911C
0000A480 6100 0000                  		bsr.w	SingleObjLoad
0000A484 6600                       		bne.s	Obj28_Display
0000A486 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000A48A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A490 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A496 3028 003E                  		move.w	$3E(a0),d0
0000A49A E248                       		lsr.w	#1,d0
0000A49C 1340 001A                  		move.b	d0,$1A(a1)
0000A4A0                            
0000A4A0                            Obj28_Display:
0000A4A0 6000 0000                  		bra.w	DisplaySprite
0000A4A4                            ; ===========================================================================
0000A4A4                            
0000A4A4                            loc_911C:
0000A4A4 117C 0012 0024             		move.b	#$12,$24(a0)
0000A4AA 4268 0010                  		clr.w	$10(a0)
0000A4AE 6000 0000                  		bra.w	DisplaySprite
0000A4B2                            ; ===========================================================================
0000A4B2                            
0000A4B2                            loc_912A:				; XREF: Obj28_Index
0000A4B2 4A28 0001                  		tst.b	1(a0)
0000A4B6 6A00 0000                  		bpl.w	DeleteObject
0000A4BA 6100 0000                  		bsr.w	ObjectFall
0000A4BE 4A68 0012                  		tst.w	$12(a0)
0000A4C2 6B00                       		bmi.s	loc_9180
0000A4C4 4EB9 0000 0000             		jsr	ObjHitFloor
0000A4CA 4A41                       		tst.w	d1
0000A4CC 6A00                       		bpl.s	loc_9180
0000A4CE D368 000C                  		add.w	d1,$C(a0)
0000A4D2 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A4D8 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A4DE 117C 0001 001A             		move.b	#1,$1A(a0)
0000A4E4 1028 0030                  		move.b	$30(a0),d0
0000A4E8 D000                       		add.b	d0,d0
0000A4EA 5800                       		addq.b	#4,d0
0000A4EC 1140 0024                  		move.b	d0,$24(a0)
0000A4F0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A4F4 6700                       		beq.s	loc_9180
0000A4F6 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000A4FC 6700                       		beq.s	loc_9180
0000A4FE 4468 0010                  		neg.w	$10(a0)
0000A502 0868 0000 0001             		bchg	#0,1(a0)
0000A508                            
0000A508                            loc_9180:
0000A508 6000 0000                  		bra.w	DisplaySprite
0000A50C                            ; ===========================================================================
0000A50C                            
0000A50C                            loc_9184:				; XREF: Obj28_Index
0000A50C 6100 0000                  		bsr.w	ObjectFall
0000A510 117C 0001 001A             		move.b	#1,$1A(a0)
0000A516 4A68 0012                  		tst.w	$12(a0)
0000A51A 6B00                       		bmi.s	loc_91AE
0000A51C 117C 0000 001A             		move.b	#0,$1A(a0)
0000A522 4EB9 0000 0000             		jsr	ObjHitFloor
0000A528 4A41                       		tst.w	d1
0000A52A 6A00                       		bpl.s	loc_91AE
0000A52C D368 000C                  		add.w	d1,$C(a0)
0000A530 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A536                            
0000A536                            loc_91AE:
0000A536 4A28 0028                  		tst.b	$28(a0)
0000A53A 6600                       		bne.s	loc_9224
0000A53C 4A28 0001                  		tst.b	1(a0)
0000A540 6A00 0000                  		bpl.w	DeleteObject
0000A544 6000 0000                  		bra.w	DisplaySprite
0000A548                            ; ===========================================================================
0000A548                            
0000A548                            loc_91C0:				; XREF: Obj28_Index
0000A548 6100 0000                  		bsr.w	SpeedToPos
0000A54C 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A552 4A68 0012                  		tst.w	$12(a0)
0000A556 6B00                       		bmi.s	loc_91FC
0000A558 4EB9 0000 0000             		jsr	ObjHitFloor
0000A55E 4A41                       		tst.w	d1
0000A560 6A00                       		bpl.s	loc_91FC
0000A562 D368 000C                  		add.w	d1,$C(a0)
0000A566 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A56C 4A28 0028                  		tst.b	$28(a0)
0000A570 6700                       		beq.s	loc_91FC
0000A572 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000A578 6700                       		beq.s	loc_91FC
0000A57A 4468 0010                  		neg.w	$10(a0)
0000A57E 0868 0000 0001             		bchg	#0,1(a0)
0000A584                            
0000A584                            loc_91FC:
0000A584 5328 001E                  		subq.b	#1,$1E(a0)
0000A588 6A00                       		bpl.s	loc_9212
0000A58A 117C 0001 001E             		move.b	#1,$1E(a0)
0000A590 5228 001A                  		addq.b	#1,$1A(a0)
0000A594 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A59A                            
0000A59A                            loc_9212:
0000A59A 4A28 0028                  		tst.b	$28(a0)
0000A59E 6600                       		bne.s	loc_9224
0000A5A0 4A28 0001                  		tst.b	1(a0)
0000A5A4 6A00 0000                  		bpl.w	DeleteObject
0000A5A8 6000 0000                  		bra.w	DisplaySprite
0000A5AC                            ; ===========================================================================
0000A5AC                            
0000A5AC                            loc_9224:				; XREF: Obj28_Index
0000A5AC 3028 0008                  		move.w	8(a0),d0
0000A5B0 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A5B4 6500                       		bcs.s	loc_923C
0000A5B6 0440 0180                  		subi.w	#$180,d0
0000A5BA 6A00                       		bpl.s	loc_923C
0000A5BC 4A28 0001                  		tst.b	1(a0)
0000A5C0 6A00 0000                  		bpl.w	DeleteObject
0000A5C4                            
0000A5C4                            loc_923C:
0000A5C4 6000 0000                  		bra.w	DisplaySprite
0000A5C8                            ; ===========================================================================
0000A5C8                            
0000A5C8                            loc_9240:				; XREF: Obj28_Index
0000A5C8 4A28 0001                  		tst.b	1(a0)
0000A5CC 6A00 0000                  		bpl.w	DeleteObject
0000A5D0 5368 0036                  		subq.w	#1,$36(a0)
0000A5D4 6600 0000                  		bne.w	loc_925C
0000A5D8 117C 0002 0024             		move.b	#2,$24(a0)
0000A5DE 117C 0003 0018             		move.b	#3,$18(a0)
0000A5E4                            
0000A5E4                            loc_925C:
0000A5E4 6000 0000                  		bra.w	DisplaySprite
0000A5E8                            ; ===========================================================================
0000A5E8                            
0000A5E8                            loc_9260:				; XREF: Obj28_Index
0000A5E8 6100 0000                  		bsr.w	sub_9404
0000A5EC 6400                       		bcc.s	loc_927C
0000A5EE 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A5F4 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A5FA 117C 000E 0024             		move.b	#$E,$24(a0)
0000A600 6000 FF46                  		bra.w	loc_91C0
0000A604                            ; ===========================================================================
0000A604                            
0000A604                            loc_927C:
0000A604 6000 FFA6                  		bra.w	loc_9224
0000A608                            ; ===========================================================================
0000A608                            
0000A608                            loc_9280:				; XREF: Obj28_Index
0000A608 6100 0000                  		bsr.w	sub_9404
0000A60C 6A00                       		bpl.s	loc_92B6
0000A60E 4268 0010                  		clr.w	$10(a0)
0000A612 4268 0032                  		clr.w	$32(a0)
0000A616 6100 0000                  		bsr.w	SpeedToPos
0000A61A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A620 6100 0000                  		bsr.w	loc_93C4
0000A624 6100 0000                  		bsr.w	loc_93EC
0000A628 5328 001E                  		subq.b	#1,$1E(a0)
0000A62C 6A00                       		bpl.s	loc_92B6
0000A62E 117C 0001 001E             		move.b	#1,$1E(a0)
0000A634 5228 001A                  		addq.b	#1,$1A(a0)
0000A638 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A63E                            
0000A63E                            loc_92B6:
0000A63E 6000 FF6C                  		bra.w	loc_9224
0000A642                            ; ===========================================================================
0000A642                            
0000A642                            loc_92BA:				; XREF: Obj28_Index
0000A642 6100 0000                  		bsr.w	sub_9404
0000A646 6A00                       		bpl.s	loc_9310
0000A648 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A64E 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A654 117C 0004 0024             		move.b	#4,$24(a0)
0000A65A 6000 FEB0                  		bra.w	loc_9184
0000A65E                            ; ===========================================================================
0000A65E                            
0000A65E                            loc_92D6:				; XREF: Obj28_Index
0000A65E 6100 0000                  		bsr.w	ObjectFall
0000A662 117C 0001 001A             		move.b	#1,$1A(a0)
0000A668 4A68 0012                  		tst.w	$12(a0)
0000A66C 6B00                       		bmi.s	loc_9310
0000A66E 117C 0000 001A             		move.b	#0,$1A(a0)
0000A674 4EB9 0000 0000             		jsr	ObjHitFloor
0000A67A 4A41                       		tst.w	d1
0000A67C 6A00                       		bpl.s	loc_9310
0000A67E 4628 0029                  		not.b	$29(a0)
0000A682 6600                       		bne.s	loc_9306
0000A684 4468 0010                  		neg.w	$10(a0)
0000A688 0868 0000 0001             		bchg	#0,1(a0)
0000A68E                            
0000A68E                            loc_9306:
0000A68E D368 000C                  		add.w	d1,$C(a0)
0000A692 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A698                            
0000A698                            loc_9310:
0000A698 6000 FF12                  		bra.w	loc_9224
0000A69C                            ; ===========================================================================
0000A69C                            
0000A69C                            loc_9314:				; XREF: Obj28_Index
0000A69C 6100 0000                  		bsr.w	sub_9404
0000A6A0 6A00                       		bpl.s	loc_932E
0000A6A2 4268 0010                  		clr.w	$10(a0)
0000A6A6 4268 0032                  		clr.w	$32(a0)
0000A6AA 6100 0000                  		bsr.w	ObjectFall
0000A6AE 6100 0000                  		bsr.w	loc_93C4
0000A6B2 6100 0000                  		bsr.w	loc_93EC
0000A6B6                            
0000A6B6                            loc_932E:
0000A6B6 6000 FEF4                  		bra.w	loc_9224
0000A6BA                            ; ===========================================================================
0000A6BA                            
0000A6BA                            loc_9332:				; XREF: Obj28_Index
0000A6BA 6100 0000                  		bsr.w	sub_9404
0000A6BE 6A00                       		bpl.s	loc_936C
0000A6C0 6100 0000                  		bsr.w	ObjectFall
0000A6C4 117C 0001 001A             		move.b	#1,$1A(a0)
0000A6CA 4A68 0012                  		tst.w	$12(a0)
0000A6CE 6B00                       		bmi.s	loc_936C
0000A6D0 117C 0000 001A             		move.b	#0,$1A(a0)
0000A6D6 4EB9 0000 0000             		jsr	ObjHitFloor
0000A6DC 4A41                       		tst.w	d1
0000A6DE 6A00                       		bpl.s	loc_936C
0000A6E0 4468 0010                  		neg.w	$10(a0)
0000A6E4 0868 0000 0001             		bchg	#0,1(a0)
0000A6EA D368 000C                  		add.w	d1,$C(a0)
0000A6EE 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A6F4                            
0000A6F4                            loc_936C:
0000A6F4 6000 FEB6                  		bra.w	loc_9224
0000A6F8                            ; ===========================================================================
0000A6F8                            
0000A6F8                            loc_9370:				; XREF: Obj28_Index
0000A6F8 6100 0000                  		bsr.w	sub_9404
0000A6FC 6A00                       		bpl.s	loc_93C0
0000A6FE 6100 0000                  		bsr.w	SpeedToPos
0000A702 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A708 4A68 0012                  		tst.w	$12(a0)
0000A70C 6B00                       		bmi.s	loc_93AA
0000A70E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A714 4A41                       		tst.w	d1
0000A716 6A00                       		bpl.s	loc_93AA
0000A718 4628 0029                  		not.b	$29(a0)
0000A71C 6600                       		bne.s	loc_93A0
0000A71E 4468 0010                  		neg.w	$10(a0)
0000A722 0868 0000 0001             		bchg	#0,1(a0)
0000A728                            
0000A728                            loc_93A0:
0000A728 D368 000C                  		add.w	d1,$C(a0)
0000A72C 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A732                            
0000A732                            loc_93AA:
0000A732 5328 001E                  		subq.b	#1,$1E(a0)
0000A736 6A00                       		bpl.s	loc_93C0
0000A738 117C 0001 001E             		move.b	#1,$1E(a0)
0000A73E 5228 001A                  		addq.b	#1,$1A(a0)
0000A742 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A748                            
0000A748                            loc_93C0:
0000A748 6000 FE62                  		bra.w	loc_9224
0000A74C                            ; ===========================================================================
0000A74C                            
0000A74C                            loc_93C4:
0000A74C 117C 0001 001A             		move.b	#1,$1A(a0)
0000A752 4A68 0012                  		tst.w	$12(a0)
0000A756 6B00                       		bmi.s	locret_93EA
0000A758 117C 0000 001A             		move.b	#0,$1A(a0)
0000A75E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A764 4A41                       		tst.w	d1
0000A766 6A00                       		bpl.s	locret_93EA
0000A768 D368 000C                  		add.w	d1,$C(a0)
0000A76C 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A772                            
0000A772                            locret_93EA:
0000A772 4E75                       		rts	
0000A774                            ; ===========================================================================
0000A774                            
0000A774                            loc_93EC:
0000A774 08E8 0000 0001             		bset	#0,1(a0)
0000A77A 3028 0008                  		move.w	8(a0),d0
0000A77E 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A782 6400                       		bcc.s	locret_9402
0000A784 08A8 0000 0001             		bclr	#0,1(a0)
0000A78A                            
0000A78A                            locret_9402:
0000A78A 4E75                       		rts	
0000A78C                            
0000A78C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A78C                            
0000A78C                            
0000A78C                            sub_9404:
0000A78C 3038 D008                  		move.w	($FFFFD008).w,d0
0000A790 9068 0008                  		sub.w	8(a0),d0
0000A794 0440 00B8                  		subi.w	#$B8,d0
0000A798 4E75                       		rts	
0000A79A                            ; End of function sub_9404
0000A79A                            
0000A79A                            ; ===========================================================================
0000A79A                            ; ---------------------------------------------------------------------------
0000A79A                            ; Object 29 - points that appear when you destroy something
0000A79A                            ; ---------------------------------------------------------------------------
0000A79A                            
0000A79A                            Obj29:					; XREF: Obj_Index
0000A79A 7000                       		moveq	#0,d0
0000A79C 1028 0024                  		move.b	$24(a0),d0
0000A7A0 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000A7A4 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000A7A8 6000 0000                  		bra.w	DisplaySprite
0000A7AC                            ; ===========================================================================
0000A7AC 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0000A7AE 0000                       		dc.w Obj29_Slower-Obj29_Index
0000A7B0                            ; ===========================================================================
0000A7B0                            
0000A7B0                            Obj29_Main:				; XREF: Obj29_Index
0000A7B0 5428 0024                  		addq.b	#2,$24(a0)
0000A7B4 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
0000A7BC 317C 2568 0002             		move.w	#($2000+pointsart),2(a0)
0000A7C2 117C 0004 0001             		move.b	#4,1(a0)
0000A7C8 117C 0001 0018             		move.b	#1,$18(a0)
0000A7CE 117C 0008 0019             		move.b	#8,$19(a0)
0000A7D4 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000A7DA                            
0000A7DA                            Obj29_Slower:				; XREF: Obj29_Index
0000A7DA 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A7DE 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000A7E2 6100 0000                  		bsr.w	SpeedToPos
0000A7E6 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A7EC 4E75                       		rts	
0000A7EE                            ; ===========================================================================
0000A7EE                            ; ---------------------------------------------------------------------------
0000A7EE                            ; Sprite mappings - animals
0000A7EE                            ; ---------------------------------------------------------------------------
0000A7EE                            Map_obj28:
0000A7EE                            	include "_maps\obj28.asm"
0000A7EE                            ; ---------------------------------------------------------------------------
0000A7EE                            ; Sprite mappings - animals
0000A7EE                            ; ---------------------------------------------------------------------------
0000A7EE 0000                       		dc.w byte_9472-Map_obj28
0000A7F0 0000                       		dc.w byte_9478-Map_obj28
0000A7F2 0000                       		dc.w byte_946C-Map_obj28
0000A7F4 01                         byte_946C:	dc.b 1
0000A7F5 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A7FA 01                         byte_9472:	dc.b 1
0000A7FB F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000A800 01                         byte_9478:	dc.b 1
0000A801 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000A806                            		even
0000A806                            		even
0000A806                            
0000A806                            Map_obj28a:
0000A806                            	include "_maps\obj28a.asm"
0000A806                            ; ---------------------------------------------------------------------------
0000A806                            ; Sprite mappings - animals
0000A806                            ; ---------------------------------------------------------------------------
0000A806 0000                       		dc.w byte_948A-Map_obj28a
0000A808 0000                       		dc.w byte_9490-Map_obj28a
0000A80A 0000                       		dc.w byte_9484-Map_obj28a
0000A80C 01                         byte_9484:	dc.b 1
0000A80D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A812 01                         byte_948A:	dc.b 1
0000A813 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000A818 01                         byte_9490:	dc.b 1
0000A819 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000A81E                            		even
0000A81E                            		even
0000A81E                            
0000A81E                            Map_obj28b:
0000A81E                            	include "_maps\obj28b.asm"
0000A81E                            ; ---------------------------------------------------------------------------
0000A81E                            ; Sprite mappings - animals
0000A81E                            ; ---------------------------------------------------------------------------
0000A81E 0000                       		dc.w byte_94A2-Map_obj28b
0000A820 0000                       		dc.w byte_94A8-Map_obj28b
0000A822 0000                       		dc.w byte_949C-Map_obj28b
0000A824 01                         byte_949C:	dc.b 1
0000A825 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A82A 01                         byte_94A2:	dc.b 1
0000A82B FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000A830 01                         byte_94A8:	dc.b 1
0000A831 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000A836                            		even
0000A836                            		even
0000A836                            
0000A836                            ; ---------------------------------------------------------------------------
0000A836                            ; Sprite mappings - points that	appear when you	destroy	something
0000A836                            ; ---------------------------------------------------------------------------
0000A836                            Map_obj29:
0000A836                            	include "_maps\obj29.asm"
0000A836                            ; ---------------------------------------------------------------------------
0000A836                            ; Sprite mappings - points that	appear when you	destroy	something
0000A836                            ; ---------------------------------------------------------------------------
0000A836 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000A83A 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
0000A83E 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000A842 0000                       		dc.w byte_94E5-Map_obj29
0000A844 01                         byte_94BC:	dc.b 1
0000A845 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000A84A 01                         byte_94C2:	dc.b 1
0000A84B FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000A850 01                         byte_94C8:	dc.b 1
0000A851 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000A856 01                         byte_94CE:	dc.b 1
0000A857 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
0000A85C 01                         byte_94D4:	dc.b 1
0000A85D FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000A862 02                         byte_94DA:	dc.b 2
0000A863 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000A868 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000A86D 02                         byte_94E5:	dc.b 2
0000A86E FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000A873 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000A878                            		even
0000A878                            		even
0000A878                            
0000A878                            ; ===========================================================================
0000A878                            ; ---------------------------------------------------------------------------
0000A878                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000A878                            ; ---------------------------------------------------------------------------
0000A878                            
0000A878                            Obj1F:					; XREF: Obj_Index
0000A878 7000                       		moveq	#0,d0
0000A87A 1028 0024                  		move.b	$24(a0),d0
0000A87E 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000A882 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000A886                            ; ===========================================================================
0000A886 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000A888 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000A88A 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000A88C 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000A88E 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000A890                            ; ===========================================================================
0000A890                            
0000A890                            Obj1F_Main:				; XREF: Obj1F_Index
0000A890 117C 0010 0016             		move.b	#$10,$16(a0)
0000A896 117C 0008 0017             		move.b	#8,$17(a0)
0000A89C 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A8A4 317C 0400 0002             		move.w	#$400,2(a0)
0000A8AA 117C 0004 0001             		move.b	#4,1(a0)
0000A8B0 117C 0003 0018             		move.b	#3,$18(a0)
0000A8B6 117C 0006 0020             		move.b	#6,$20(a0)
0000A8BC 117C 0015 0019             		move.b	#$15,$19(a0)
0000A8C2 6100 0000                  		bsr.w	ObjectFall
0000A8C6 4EB9 0000 0000             		jsr	ObjHitFloor
0000A8CC 4A41                       		tst.w	d1
0000A8CE 6A00                       		bpl.s	locret_955A
0000A8D0 D368 000C                  		add.w	d1,$C(a0)
0000A8D4 1143 0026                  		move.b	d3,$26(a0)
0000A8D8 317C 0000 0012             		move.w	#0,$12(a0)
0000A8DE 5428 0024                  		addq.b	#2,$24(a0)
0000A8E2                            
0000A8E2                            locret_955A:
0000A8E2 4E75                       		rts	
0000A8E4                            ; ===========================================================================
0000A8E4                            
0000A8E4                            Obj1F_Action:				; XREF: Obj1F_Index
0000A8E4 7000                       		moveq	#0,d0
0000A8E6 1028 0025                  		move.b	$25(a0),d0
0000A8EA 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000A8EE 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000A8F2 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A8F8 6100 0000                  		bsr.w	AnimateSprite
0000A8FC 6000 0000                  		bra.w	MarkObjGone
0000A900                            ; ===========================================================================
0000A900 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000A902 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000A904                            ; ===========================================================================
0000A904                            
0000A904                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000A904 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000A908 6A00                       		bpl.s	locret_95B6
0000A90A 4A28 0001                  		tst.b	1(a0)
0000A90E 6A00                       		bpl.s	Obj1F_Move
0000A910 0868 0001 0032             		bchg	#1,$32(a0)
0000A916 6600                       		bne.s	Obj1F_MakeFire
0000A918                            
0000A918                            Obj1F_Move:
0000A918 5428 0025                  		addq.b	#2,$25(a0)
0000A91C 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000A922 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000A928 6100 0000                  		bsr.w	Obj1F_SetAni
0000A92C 5600                       		addq.b	#3,d0
0000A92E 1140 001C                  		move.b	d0,$1C(a0)
0000A932 0868 0000 0022             		bchg	#0,$22(a0)
0000A938 6600                       		bne.s	locret_95B6
0000A93A 4468 0010                  		neg.w	$10(a0)		; change direction
0000A93E                            
0000A93E                            locret_95B6:
0000A93E 4E75                       		rts	
0000A940                            ; ===========================================================================
0000A940                            
0000A940                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000A940 317C 003B 0030             		move.w	#$3B,$30(a0)
0000A946 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000A94C 6100 0000                  		bsr.w	SingleObjLoad
0000A950 6600                       		bne.s	Obj1F_MakeFire2
0000A952 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000A956 137C 0006 0024             		move.b	#6,$24(a1)
0000A95C 3368 0008 0008             		move.w	8(a0),8(a1)
0000A962 0469 0010 0008             		subi.w	#$10,8(a1)
0000A968 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A96E 337C FF00 0010             		move.w	#-$100,$10(a1)
0000A974                            
0000A974                            Obj1F_MakeFire2:
0000A974 6100 0000                  		bsr.w	SingleObjLoad
0000A978 6600                       		bne.s	locret_9618
0000A97A 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000A97E 137C 0006 0024             		move.b	#6,$24(a1)
0000A984 3368 0008 0008             		move.w	8(a0),8(a1)
0000A98A 0669 0010 0008             		addi.w	#$10,8(a1)
0000A990 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A996 337C 0100 0010             		move.w	#$100,$10(a1)
0000A99C                            
0000A99C                            locret_9618:
0000A99C 4E75                       		rts	
0000A99E                            ; ===========================================================================
0000A99E                            
0000A99E                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000A99E 5368 0030                  		subq.w	#1,$30(a0)
0000A9A2 6B00                       		bmi.s	loc_966E
0000A9A4 6100 0000                  		bsr.w	SpeedToPos
0000A9A8 0868 0000 0032             		bchg	#0,$32(a0)
0000A9AE 6600                       		bne.s	loc_9654
0000A9B0 3628 0008                  		move.w	8(a0),d3
0000A9B4 0643 0010                  		addi.w	#$10,d3
0000A9B8 0828 0000 0022             		btst	#0,$22(a0)
0000A9BE 6700                       		beq.s	loc_9640
0000A9C0 0443 0020                  		subi.w	#$20,d3
0000A9C4                            
0000A9C4                            loc_9640:
0000A9C4 4EB9 0000 0000             		jsr	ObjHitFloor2
0000A9CA 0C41 FFF8                  		cmpi.w	#-8,d1
0000A9CE 6D00                       		blt.s	loc_966E
0000A9D0 0C41 000C                  		cmpi.w	#$C,d1
0000A9D4 6C00                       		bge.s	loc_966E
0000A9D6 4E75                       		rts	
0000A9D8                            ; ===========================================================================
0000A9D8                            
0000A9D8                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000A9D8 4EB9 0000 0000             		jsr	ObjHitFloor
0000A9DE D368 000C                  		add.w	d1,$C(a0)
0000A9E2 1143 0026                  		move.b	d3,$26(a0)
0000A9E6 6100 0000                  		bsr.w	Obj1F_SetAni
0000A9EA 5600                       		addq.b	#3,d0
0000A9EC 1140 001C                  		move.b	d0,$1C(a0)
0000A9F0 4E75                       		rts	
0000A9F2                            ; ===========================================================================
0000A9F2                            
0000A9F2                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000A9F2 5528 0025                  		subq.b	#2,$25(a0)
0000A9F6 317C 003B 0030             		move.w	#59,$30(a0)
0000A9FC 317C 0000 0010             		move.w	#0,$10(a0)
0000AA02 6100 0000                  		bsr.w	Obj1F_SetAni
0000AA06 1140 001C                  		move.b	d0,$1C(a0)
0000AA0A 4E75                       		rts	
0000AA0C                            ; ---------------------------------------------------------------------------
0000AA0C                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000AA0C                            ; ---------------------------------------------------------------------------
0000AA0C                            
0000AA0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AA0C                            
0000AA0C                            
0000AA0C                            Obj1F_SetAni:				; XREF: loc_966E
0000AA0C 7000                       		moveq	#0,d0
0000AA0E 1628 0026                  		move.b	$26(a0),d3
0000AA12 6B00                       		bmi.s	loc_96A4
0000AA14 0C03 0006                  		cmpi.b	#6,d3
0000AA18 6500                       		bcs.s	locret_96A2
0000AA1A 7001                       		moveq	#1,d0
0000AA1C 0828 0000 0022             		btst	#0,$22(a0)
0000AA22 6600                       		bne.s	locret_96A2
0000AA24 7002                       		moveq	#2,d0
0000AA26                            
0000AA26                            locret_96A2:
0000AA26 4E75                       		rts	
0000AA28                            ; ===========================================================================
0000AA28                            
0000AA28                            loc_96A4:				; XREF: Obj1F_SetAni
0000AA28 0C03 00FA                  		cmpi.b	#-6,d3
0000AA2C 6200                       		bhi.s	locret_96B6
0000AA2E 7002                       		moveq	#2,d0
0000AA30 0828 0000 0022             		btst	#0,$22(a0)
0000AA36 6600                       		bne.s	locret_96B6
0000AA38 7001                       		moveq	#1,d0
0000AA3A                            
0000AA3A                            locret_96B6:
0000AA3A 4E75                       		rts	
0000AA3C                            ; End of function Obj1F_SetAni
0000AA3C                            
0000AA3C                            ; ===========================================================================
0000AA3C                            
0000AA3C                            Obj1F_Delete:				; XREF: Obj1F_Index
0000AA3C 6100 0000                  		bsr.w	DeleteObject
0000AA40 4E75                       		rts	
0000AA42                            ; ===========================================================================
0000AA42                            ; ---------------------------------------------------------------------------
0000AA42                            ; Sub-object - missile that the	Crabmeat throws
0000AA42                            ; ---------------------------------------------------------------------------
0000AA42                            
0000AA42                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000AA42 5428 0024                  		addq.b	#2,$24(a0)
0000AA46 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000AA4E 317C 0400 0002             		move.w	#$400,2(a0)
0000AA54 117C 0004 0001             		move.b	#4,1(a0)
0000AA5A 117C 0003 0018             		move.b	#3,$18(a0)
0000AA60 117C 0087 0020             		move.b	#$87,$20(a0)
0000AA66 117C 0008 0019             		move.b	#8,$19(a0)
0000AA6C 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AA72 117C 0007 001C             		move.b	#7,$1C(a0)
0000AA78                            
0000AA78                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000AA78 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000AA7E 6100 0000                  		bsr.w	AnimateSprite
0000AA82 6100 0000                  		bsr.w	ObjectFall
0000AA86 6100 0000                  		bsr.w	DisplaySprite
0000AA8A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000AA8E 0640 00E0                  		addi.w	#$E0,d0
0000AA92 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000AA96 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000AA98 4E75                       		rts	
0000AA9A                            ; ===========================================================================
0000AA9A                            
0000AA9A                            Obj1F_Delete2:
0000AA9A 6000 0000                  		bra.w	DeleteObject
0000AA9E                            ; ===========================================================================
0000AA9E                            Ani_obj1F:
0000AA9E                            	include "_anim\obj1F.asm"
0000AA9E                            ; ---------------------------------------------------------------------------
0000AA9E                            ; Animation script - Crabmeat enemy
0000AA9E                            ; ---------------------------------------------------------------------------
0000AA9E 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000AAA4 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000AAAA 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000AAAE 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000AAB2 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000AAB6 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000AABA 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000AAC0 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000AAC6 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000AACC 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000AAD0 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000AAD4                            		even
0000AAD4                            		even
0000AAD4                            
0000AAD4                            ; ---------------------------------------------------------------------------
0000AAD4                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000AAD4                            ; ---------------------------------------------------------------------------
0000AAD4                            Map_obj1F:
0000AAD4                            	include "_maps\obj1F.asm"
0000AAD4                            ; ---------------------------------------------------------------------------
0000AAD4                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000AAD4                            ; ---------------------------------------------------------------------------
0000AAD4 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000AAD8 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
0000AADC 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
0000AAE0 0000                       		dc.w byte_97D7-Map_obj1F
0000AAE2 04                         byte_975E:	dc.b 4
0000AAE3 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000AAE8 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000AAED 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000AAF2 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000AAF7 04                         byte_9773:	dc.b 4
0000AAF8 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
0000AAFD F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000AB02 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000AB07 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000AB0C 04                         byte_9788:	dc.b 4
0000AB0D EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000AB12 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000AB17 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000AB1C FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000AB21 04                         byte_979D:	dc.b 4
0000AB22 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000AB27 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000AB2C FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000AB31 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000AB36 06                         byte_97B2:	dc.b 6
0000AB37 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0000AB3C F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000AB41 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000AB46 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000AB4B 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000AB50 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000AB55 01                         byte_97D1:	dc.b 1
0000AB56 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0000AB5B 01                         byte_97D7:	dc.b 1
0000AB5C F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
0000AB62 00                         		even
0000AB62 00                         		even
0000AB62                            
0000AB62                            ; ===========================================================================
0000AB62                            ; ---------------------------------------------------------------------------
0000AB62                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000AB62                            ; ---------------------------------------------------------------------------
0000AB62                            
0000AB62                            Obj22:					; XREF: Obj_Index
0000AB62 7000                       		moveq	#0,d0
0000AB64 1028 0024                  		move.b	$24(a0),d0
0000AB68 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000AB6C 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000AB70                            ; ===========================================================================
0000AB70 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000AB72 0000                       		dc.w Obj22_Action-Obj22_Index
0000AB74 0000                       		dc.w Obj22_Delete-Obj22_Index
0000AB76                            ; ===========================================================================
0000AB76                            
0000AB76                            Obj22_Main:				; XREF: Obj22_Index
0000AB76 5428 0024                  		addq.b	#2,$24(a0)
0000AB7A 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000AB82 317C 0444 0002             		move.w	#$444,2(a0)
0000AB88 117C 0004 0001             		move.b	#4,1(a0)
0000AB8E 117C 0003 0018             		move.b	#3,$18(a0)
0000AB94 117C 0008 0020             		move.b	#8,$20(a0)
0000AB9A 117C 0018 0019             		move.b	#$18,$19(a0)
0000ABA0                            
0000ABA0                            Obj22_Action:				; XREF: Obj22_Index
0000ABA0 7000                       		moveq	#0,d0
0000ABA2 1028 0025                  		move.b	$25(a0),d0
0000ABA6 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000ABAA 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000ABAE 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000ABB4 6100 0000                  		bsr.w	AnimateSprite
0000ABB8 6000 0000                  		bra.w	MarkObjGone
0000ABBC                            ; ===========================================================================
0000ABBC 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000ABBE 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000ABC0                            ; ===========================================================================
0000ABC0                            
0000ABC0                            Obj22_Move:				; XREF: Obj22_Index2
0000ABC0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000ABC4 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000ABC6 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000ABCC 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000ABCE 5428 0025                  		addq.b	#2,$25(a0)
0000ABD2 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000ABD8 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000ABDE 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000ABE4 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000ABEA 6600                       		bne.s	locret_986C	; if not, branch
0000ABEC 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000ABF0                            
0000ABF0                            locret_986C:
0000ABF0 4E75                       		rts	
0000ABF2                            ; ===========================================================================
0000ABF2                            
0000ABF2                            Obj22_Fire:				; XREF: Obj22_Move
0000ABF2 6100 0000                  		bsr.w	SingleObjLoad
0000ABF6 6600                       		bne.s	locret_98D0
0000ABF8 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000ABFC 3368 0008 0008             		move.w	8(a0),8(a1)
0000AC02 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AC08 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000AC0E 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000AC14 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000AC1A 303C 0018                  		move.w	#$18,d0
0000AC1E 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000AC24 6600                       		bne.s	loc_98AA	; if not, branch
0000AC26 4440                       		neg.w	d0
0000AC28 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000AC2C                            
0000AC2C                            loc_98AA:
0000AC2C D169 0008                  		add.w	d0,8(a1)
0000AC30 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000AC36 337C 000E 0032             		move.w	#$E,$32(a1)
0000AC3C 2348 003C                  		move.l	a0,$3C(a1)
0000AC40 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000AC46 317C 003B 0032             		move.w	#$3B,$32(a0)
0000AC4C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000AC52                            
0000AC52                            locret_98D0:
0000AC52 4E75                       		rts	
0000AC54                            ; ===========================================================================
0000AC54                            
0000AC54                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000AC54 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000AC58 6B00                       		bmi.s	Obj22_ChgDir
0000AC5A 6100 0000                  		bsr.w	SpeedToPos
0000AC5E 4A28 0034                  		tst.b	$34(a0)
0000AC62 6600                       		bne.s	locret_992A
0000AC64 3038 D008                  		move.w	($FFFFD008).w,d0
0000AC68 9068 0008                  		sub.w	8(a0),d0
0000AC6C 6A00                       		bpl.s	Obj22_SetNrSonic
0000AC6E 4440                       		neg.w	d0
0000AC70                            
0000AC70                            Obj22_SetNrSonic:
0000AC70 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000AC74 6400                       		bcc.s	locret_992A	; if not, branch
0000AC76 4A28 0001                  		tst.b	1(a0)
0000AC7A 6A00                       		bpl.s	locret_992A
0000AC7C 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000AC82 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000AC88 6000                       		bra.s	Obj22_Stop
0000AC8A                            ; ===========================================================================
0000AC8A                            
0000AC8A                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000AC8A 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000AC90 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000AC96 317C 003B 0032             		move.w	#59,$32(a0)
0000AC9C                            
0000AC9C                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000AC9C 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000ACA0 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000ACA6 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000ACAC                            
0000ACAC                            locret_992A:
0000ACAC 4E75                       		rts	
0000ACAE                            ; ===========================================================================
0000ACAE                            
0000ACAE                            Obj22_Delete:				; XREF: Obj22_Index
0000ACAE 6100 0000                  		bsr.w	DeleteObject
0000ACB2 4E75                       		rts	
0000ACB4                            ; ===========================================================================
0000ACB4                            ; ---------------------------------------------------------------------------
0000ACB4                            ; Object 23 - missile that Buzz	Bomber throws
0000ACB4                            ; ---------------------------------------------------------------------------
0000ACB4                            
0000ACB4                            Obj23:					; XREF: Obj_Index
0000ACB4 7000                       		moveq	#0,d0
0000ACB6 1028 0024                  		move.b	$24(a0),d0
0000ACBA 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000ACBE 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000ACC2                            ; ===========================================================================
0000ACC2 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000ACC4 0000                       		dc.w Obj23_Animate-Obj23_Index
0000ACC6 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000ACC8 0000                       		dc.w Obj23_Delete-Obj23_Index
0000ACCA 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000ACCC                            ; ===========================================================================
0000ACCC                            
0000ACCC                            Obj23_Main:				; XREF: Obj23_Index
0000ACCC 5368 0032                  		subq.w	#1,$32(a0)
0000ACD0 6A00                       		bpl.s	Obj23_ChkCancel
0000ACD2 5428 0024                  		addq.b	#2,$24(a0)
0000ACD6 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000ACDE 317C 2444 0002             		move.w	#$2444,2(a0)
0000ACE4 117C 0004 0001             		move.b	#4,1(a0)
0000ACEA 117C 0003 0018             		move.b	#3,$18(a0)
0000ACF0 117C 0008 0019             		move.b	#8,$19(a0)
0000ACF6 0228 0003 0022             		andi.b	#3,$22(a0)
0000ACFC 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000AD00 6700                       		beq.s	Obj23_Animate	; if not, branch
0000AD02 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000AD08 117C 0087 0020             		move.b	#$87,$20(a0)
0000AD0E 117C 0001 001C             		move.b	#1,$1C(a0)
0000AD14 6000                       		bra.s	Obj23_Animate2
0000AD16                            ; ===========================================================================
0000AD16                            
0000AD16                            Obj23_Animate:				; XREF: Obj23_Index
0000AD16 6100                       		bsr.s	Obj23_ChkCancel
0000AD18 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000AD1E 6100 0000                  		bsr.w	AnimateSprite
0000AD22 6000 0000                  		bra.w	DisplaySprite
0000AD26                            ; ---------------------------------------------------------------------------
0000AD26                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000AD26                            ; destroyed, and if it has, then cancel	the missile
0000AD26                            ; ---------------------------------------------------------------------------
0000AD26                            
0000AD26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AD26                            
0000AD26                            
0000AD26                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000AD26 2268 003C                  		movea.l	$3C(a0),a1
0000AD2A 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000AD2E 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000AD30 4E75                       		rts	
0000AD32                            ; End of function Obj23_ChkCancel
0000AD32                            
0000AD32                            ; ===========================================================================
0000AD32                            
0000AD32                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000AD32 0828 0007 0022             		btst	#7,$22(a0)
0000AD38 6600                       		bne.s	Obj23_Explode
0000AD3A 117C 0087 0020             		move.b	#$87,$20(a0)
0000AD40 117C 0001 001C             		move.b	#1,$1C(a0)
0000AD46 6100 0000                  		bsr.w	SpeedToPos
0000AD4A 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000AD50 6100 0000                  		bsr.w	AnimateSprite
0000AD54 6100 0000                  		bsr.w	DisplaySprite
0000AD58 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000AD5C 0640 00E0                  		addi.w	#$E0,d0
0000AD60 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000AD64 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000AD66 4E75                       		rts	
0000AD68                            ; ===========================================================================
0000AD68                            
0000AD68                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000AD68 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000AD6C 117C 0000 0024             		move.b	#0,$24(a0)
0000AD72 6000 F30A                  		bra.w	Obj24
0000AD76                            ; ===========================================================================
0000AD76                            
0000AD76                            Obj23_Delete:				; XREF: Obj23_Index
0000AD76 6100 0000                  		bsr.w	DeleteObject
0000AD7A 4E75                       		rts	
0000AD7C                            ; ===========================================================================
0000AD7C                            
0000AD7C                            Obj23_FromNewt:				; XREF: Obj23_Index
0000AD7C 4A28 0001                  		tst.b	1(a0)
0000AD80 6AF4                       		bpl.s	Obj23_Delete
0000AD82 6100 0000                  		bsr.w	SpeedToPos
0000AD86                            
0000AD86                            Obj23_Animate2:				; XREF: Obj23_Main
0000AD86 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000AD8C 6100 0000                  		bsr.w	AnimateSprite
0000AD90 6100 0000                  		bsr.w	DisplaySprite
0000AD94 4E75                       		rts	
0000AD96                            ; ===========================================================================
0000AD96                            Ani_obj22:
0000AD96                            	include "_anim\obj22.asm"
0000AD96                            ; ---------------------------------------------------------------------------
0000AD96                            ; Animation script - Buzz Bomber enemy
0000AD96                            ; ---------------------------------------------------------------------------
0000AD96 0000                       		dc.w byte_9A1E-Ani_obj22
0000AD98 0000                       		dc.w byte_9A22-Ani_obj22
0000AD9A 0000                       		dc.w byte_9A26-Ani_obj22
0000AD9C 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000ADA0 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000ADA4 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000ADA8                            		even
0000ADA8                            		even
0000ADA8                            
0000ADA8                            Ani_obj23:
0000ADA8                            	include "_anim\obj23.asm"
0000ADA8                            ; ---------------------------------------------------------------------------
0000ADA8                            ; Animation script - missile that Buzz Bomber throws
0000ADA8                            ; ---------------------------------------------------------------------------
0000ADA8 0000                       		dc.w byte_9A2E-Ani_obj23
0000ADAA 0000                       		dc.w byte_9A32-Ani_obj23
0000ADAC 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000ADB0 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000ADB4                            		even
0000ADB4                            		even
0000ADB4                            
0000ADB4                            ; ---------------------------------------------------------------------------
0000ADB4                            ; Sprite mappings - Buzz Bomber	enemy
0000ADB4                            ; ---------------------------------------------------------------------------
0000ADB4                            Map_obj22:
0000ADB4                            	include "_maps\obj22.asm"
0000ADB4                            ; ---------------------------------------------------------------------------
0000ADB4                            ; Sprite mappings - Buzz Bomber	enemy
0000ADB4                            ; ---------------------------------------------------------------------------
0000ADB4 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
0000ADB8 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
0000ADBC 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
0000ADC0 06                         byte_9A42:	dc.b 6
0000ADC1 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000ADC6 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000ADCB 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000ADD0 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000ADD5 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000ADDA F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000ADDF 06                         byte_9A61:	dc.b 6
0000ADE0 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000ADE5 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000ADEA 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000ADEF 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000ADF4 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000ADF9 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000ADFE 07                         byte_9A80:	dc.b 7
0000ADFF 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000AE04 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000AE09 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000AE0E 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000AE13 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000AE18 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000AE1D F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000AE22 07                         byte_9AA4:	dc.b 7
0000AE23 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000AE28 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000AE2D F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000AE32 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000AE37 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000AE3C F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000AE41 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000AE46 06                         byte_9AC8:	dc.b 6
0000AE47 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000AE4C 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000AE51 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000AE56 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000AE5B F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000AE60 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000AE65 04                         byte_9AE7:	dc.b 4
0000AE66 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000AE6B 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000AE70 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000AE75 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000AE7A F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000AE7F F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000AE84                            		even
0000AE84                            		even
0000AE84                            
0000AE84                            ; ---------------------------------------------------------------------------
0000AE84                            ; Sprite mappings - missile that Buzz Bomber throws
0000AE84                            ; ---------------------------------------------------------------------------
0000AE84                            Map_obj23:
0000AE84                            	include "_maps\obj23.asm"
0000AE84                            ; ---------------------------------------------------------------------------
0000AE84                            ; Sprite mappings - missile that Buzz Bomber throws
0000AE84                            ; ---------------------------------------------------------------------------
0000AE84 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000AE88 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000AE8C 01                         byte_9B0E:	dc.b 1
0000AE8D F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000AE92 01                         byte_9B14:	dc.b 1
0000AE93 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000AE98 01                         byte_9B1A:	dc.b 1
0000AE99 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000AE9E 01                         byte_9B20:	dc.b 1
0000AE9F F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000AEA4                            		even
0000AEA4                            		even
0000AEA4                            
0000AEA4                            ; ===========================================================================
0000AEA4                            ; ---------------------------------------------------------------------------
0000AEA4                            ; Object 25 - rings
0000AEA4                            ; ---------------------------------------------------------------------------
0000AEA4                            
0000AEA4                            Obj25:					; XREF: Obj_Index
0000AEA4 7000                       		moveq	#0,d0
0000AEA6 1028 0024                  		move.b	$24(a0),d0
0000AEAA 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000AEAE 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000AEB2                            ; ===========================================================================
0000AEB2 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000AEB4 0000                       		dc.w Obj25_Animate-Obj25_Index
0000AEB6 0000                       		dc.w Obj25_Collect-Obj25_Index
0000AEB8 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000AEBA 0000                       		dc.w Obj25_Delete-Obj25_Index
0000AEBC                            ; ===========================================================================
0000AEBC                            
0000AEBC                            Obj25_Main:				; XREF: Obj25_Index		addq.b	#2,$24(a0)
0000AEBC 3168 0008 0032             		move.w	8(a0),$32(a0)
0000AEC2 217C 0000 0000 0004        		move.l	#Map_obj25,4(a0)
0000AECA 317C 26BA 0002             		move.w	#($2000+ringart),2(a0)
0000AED0 117C 0004 0001             		move.b	#4,1(a0)
0000AED6 117C 0002 0018             		move.b	#2,$18(a0)
0000AEDC 117C 0047 0020             		move.b	#$47,$20(a0)
0000AEE2 117C 0008 0019             		move.b	#8,$19(a0)
0000AEE8                            
0000AEE8                            Obj25_Animate:				; XREF: Obj25_Index
0000AEE8 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000AEEE 3028 0032                  		move.w	$32(a0),d0
0000AEF2 6000 0000                  		bra.w	MarkObjGone
0000AEF6                            ; ===========================================================================
0000AEF6                            
0000AEF6                            Obj25_Collect:				; XREF: Obj25_Index
0000AEF6 5428 0024                  		addq.b	#2,$24(a0)
0000AEFA 117C 0000 0020             		move.b	#0,$20(a0)
0000AF00 317C 0080 0018             		move.w	#$80,$18(a0)
0000AF06 6100 0000                  		bsr.w	CollectRing
0000AF0A                            
0000AF0A                            Obj25_Sparkle:				; XREF: Obj25_Index
0000AF0A 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000AF10 6100 0000                  		bsr.w	AnimateSprite
0000AF14 6000 0000                  		bra.w	DisplaySprite
0000AF18                            ; ===========================================================================
0000AF18                            
0000AF18                            Obj25_Delete:				; XREF: Obj25_Index
0000AF18 6000 0000                  		bra.w	DeleteObject
0000AF1C                            
0000AF1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AF1C                            
0000AF1C                            
0000AF1C                            CollectRing:				; XREF: Obj25_Collect
0000AF1C 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000AF20 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000AF26 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000AF2A 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000AF30 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000AF32 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000AF38 6700                       		beq.s	loc_9CA4
0000AF3A 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000AF40 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000AF42 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000AF48 6600                       		bne.s	Obj25_PlaySnd
0000AF4A                            
0000AF4A                            loc_9CA4:
0000AF4A 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AF4E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AF52 303C 0088                  		move.w	#$88,d0		; play extra life music
0000AF56                            
0000AF56                            Obj25_PlaySnd:
0000AF56 4EF9 0000 1220             		jmp	(PlaySound_Special).l
0000AF5C                            ; End of function CollectRing
0000AF5C                            
0000AF5C                            ; ===========================================================================
0000AF5C                            ; ---------------------------------------------------------------------------
0000AF5C                            ; Object 37 - rings flying out of Sonic	when he's hit
0000AF5C                            ; ---------------------------------------------------------------------------
0000AF5C                            
0000AF5C                            Obj37:					; XREF: Obj_Index
0000AF5C 7000                       		moveq	#0,d0
0000AF5E 1028 0024                  		move.b	$24(a0),d0
0000AF62 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000AF66 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000AF6A                            ; ===========================================================================
0000AF6A 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000AF6C 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000AF6E 0000                       		dc.w Obj37_Collect-Obj37_Index
0000AF70 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000AF72 0000                       		dc.w Obj37_Delete-Obj37_Index
0000AF74                            ; ===========================================================================
0000AF74                            
0000AF74                            Obj37_CountRings:			; XREF: Obj37_Index
0000AF74 2248                       		movea.l	a0,a1
0000AF76 7A00                       		moveq	#0,d5
0000AF78 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000AF7C 7020                       		moveq	#32,d0
0000AF7E BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000AF80 6500                       		bcs.s	loc_9CDE	; if not, branch
0000AF82 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000AF84                            
0000AF84                            loc_9CDE:
0000AF84 5345                       		subq.w	#1,d5
0000AF86 383C 0288                  		move.w	#$288,d4
0000AF8A 6000                       		bra.s	Obj37_MakeRings
0000AF8C                            ; ===========================================================================
0000AF8C                            
0000AF8C                            Obj37_Loop:
0000AF8C 6100 0000                  		bsr.w	SingleObjLoad
0000AF90 6600 0000                  		bne.w	Obj37_ResetCounter
0000AF94                            
0000AF94                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000AF94 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000AF98 5429 0024                  		addq.b	#2,$24(a1)
0000AF9C 137C 0008 0016             		move.b	#8,$16(a1)
0000AFA2 137C 0008 0017             		move.b	#8,$17(a1)
0000AFA8 3368 0008 0008             		move.w	8(a0),8(a1)
0000AFAE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AFB4 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000AFBC 337C 26BA 0002             		move.w	#($2000+ringart),2(a1)
0000AFC2 137C 0004 0001             		move.b	#4,1(a1)
0000AFC8 137C 0003 0018             		move.b	#3,$18(a1)
0000AFCE 137C 0047 0020             		move.b	#$47,$20(a1)
0000AFD4 137C 0008 0019             		move.b	#8,$19(a1)
0000AFDA 4A44                       		tst.w	d4
0000AFDC 6B00                       		bmi.s	loc_9D62
0000AFDE 3004                       		move.w	d4,d0
0000AFE0 4EB9 0000 29F6             		jsr	(CalcSine).l
0000AFE6 3404                       		move.w	d4,d2
0000AFE8 E04A                       		lsr.w	#8,d2
0000AFEA E560                       		asl.w	d2,d0
0000AFEC E561                       		asl.w	d2,d1
0000AFEE 3400                       		move.w	d0,d2
0000AFF0 3601                       		move.w	d1,d3
0000AFF2 0604 0010                  		addi.b	#$10,d4
0000AFF6 6400                       		bcc.s	loc_9D62
0000AFF8 0444 0080                  		subi.w	#$80,d4
0000AFFC 6400                       		bcc.s	loc_9D62
0000AFFE 383C 0288                  		move.w	#$288,d4
0000B002                            
0000B002                            loc_9D62:
0000B002 3342 0010                  		move.w	d2,$10(a1)
0000B006 3343 0012                  		move.w	d3,$12(a1)
0000B00A 4442                       		neg.w	d2
0000B00C 4444                       		neg.w	d4
0000B00E 51CD FF7C                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000B012                            
0000B012                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000B012 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000B018 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000B01E 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000B024 70FF                       		moveq	#-1,d0			; Move #-1 to d0
0000B026 1140 001F                  		move.b	d0,$1F(a0)	; Move d0 to new timer
0000B02A 11C0 FEC6                  		move.b	d0,($FFFFFEC6).w	; Move d0 to old timer (for animated purposes)		
0000B02E 303C 00C6                  		move.w	#$C6,d0
0000B032 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000B038                            
0000B038                            Obj37_Bounce:				; XREF: Obj37_Index
0000B038 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000B03E 6100 0000                  		bsr.w	SpeedToPos
0000B042 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B048 6B00                       		bmi.s	Obj37_ChkDel
0000B04A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B04E D007                       		add.b	d7,d0
0000B050 0200 0003                  		andi.b	#3,d0
0000B054 6600                       		bne.s	Obj37_ChkDel
0000B056 4EB9 0000 0000             		jsr	ObjHitFloor
0000B05C 4A41                       		tst.w	d1
0000B05E 6A00                       		bpl.s	Obj37_ChkDel
0000B060 D368 000C                  		add.w	d1,$C(a0)
0000B064 3028 0012                  		move.w	$12(a0),d0
0000B068 E440                       		asr.w	#2,d0
0000B06A 9168 0012                  		sub.w	d0,$12(a0)
0000B06E 4468 0012                  		neg.w	$12(a0)
0000B072                            
0000B072                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000B072 5328 001F                  		subq.b	#1,$1F(a0)	; Subtract 1
0000B076 6700 0000                  		beq.w	DeleteObject		; If 0, delete
0000B07A 0C78 FF00 F72C             		cmpi.w	#$FF00,($FFFFF72C).w		; is vertical wrapping enabled?
0000B080 6700 0000                  		beq.w	DisplaySprite			; if so, branch
0000B084 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B088 0640 00E0                  		addi.w	#$E0,d0
0000B08C B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000B090 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000B092 6000 0000                  		bra.w	DisplaySprite
0000B096                            ; ===========================================================================
0000B096                            
0000B096                            Obj37_Collect:				; XREF: Obj37_Index
0000B096 5428 0024                  		addq.b	#2,$24(a0)
0000B09A 117C 0000 0020             		move.b	#0,$20(a0)
0000B0A0 117C 0001 0018             		move.b	#1,$18(a0)
0000B0A6 6100 FE74                  		bsr.w	CollectRing
0000B0AA                            
0000B0AA                            Obj37_Sparkle:				; XREF: Obj37_Index
0000B0AA 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000B0B0 6100 0000                  		bsr.w	AnimateSprite
0000B0B4 6000 0000                  		bra.w	DisplaySprite
0000B0B8                            ; ===========================================================================
0000B0B8                            
0000B0B8                            Obj37_Delete:				; XREF: Obj37_Index
0000B0B8 6000 0000                  		bra.w	DeleteObject
0000B0BC                            ; ===========================================================================
0000B0BC                            ; ---------------------------------------------------------------------------
0000B0BC                            ; Object 4B - giant ring for entry to special stage
0000B0BC                            ; ---------------------------------------------------------------------------
0000B0BC                            
0000B0BC                            Obj4B:					; XREF: Obj_Index
0000B0BC 7000                       		moveq	#0,d0
0000B0BE 1028 0024                  		move.b	$24(a0),d0
0000B0C2 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000B0C6 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000B0CA                            ; ===========================================================================
0000B0CA 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000B0CC 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000B0CE 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000B0D0 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000B0D2                            ; ===========================================================================
0000B0D2                            
0000B0D2                            Obj4B_Main:				; XREF: Obj4B_Index
0000B0D2 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000B0DA 317C 2400 0002             		move.w	#$2400,2(a0)
0000B0E0 0028 0004 0001             		ori.b	#4,1(a0)
0000B0E6 117C 0040 0019             		move.b	#$40,$19(a0)
0000B0EC 4A28 0001                  		tst.b	1(a0)
0000B0F0 6A00                       		bpl.s	Obj4B_Animate
0000B0F2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000B0F8 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000B0FC 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000B102 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000B104 4EF9 0000 0000             		jmp	(DeleteObject).l
0000B10A                            
0000B10A                            ; ===========================================================================
0000B10A                            
0000B10A                            Obj4B_Okay:				; XREF: Obj4B_Main
0000B10A 5428 0024                  		addq.b	#2,$24(a0)
0000B10E 117C 0002 0018             		move.b	#2,$18(a0)
0000B114 117C 0052 0020             		move.b	#$52,$20(a0)
0000B11A 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000B120                            
0000B120                            Obj4B_Animate:				; XREF: Obj4B_Index
0000B120 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000B126 3028 0008                  		move.w	8(a0),d0
0000B12A 0240 FF80                  		andi.w	#$FF80,d0
0000B12E 3238 F700                  		move.w	($FFFFF700).w,d1
0000B132 0441 0080                  		subi.w	#$80,d1
0000B136 0241 FF80                  		andi.w	#$FF80,d1
0000B13A 9041                       		sub.w	d1,d0
0000B13C 0C40 0280                  		cmpi.w	#$280,d0
0000B140 6300 0000                  		bls.w	DisplaySprite
0000B144 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B148 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000B14C 3440                       		movea.w	d0,a2	; load address into a2
0000B14E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000B152 6000 0000                  		bra.w	DeleteObject	; and delete object
0000B156                            ; ===========================================================================
0000B156                            
0000B156                            Obj4B_Collect:				; XREF: Obj4B_Index
0000B156 5528 0024                  		subq.b	#2,$24(a0)
0000B15A 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B160 11FC 0040 F5D0             		move.b	#$40,(SonimeSST+sonime_facetimer).w
0000B166 117C 0000 0020             		move.b	#0,$20(a0)
0000B16C 6100 0000                  		bsr.w	SingleObjLoad
0000B170 6600 0000                  		bne.w	Obj4B_PlaySnd
0000B174 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000B178 3368 0008 0008             		move.w	8(a0),8(a1)
0000B17E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B184 2348 003C                  		move.l	a0,$3C(a1)
0000B188 3038 D008                  		move.w	($FFFFD008).w,d0
0000B18C B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000B190 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000B192 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000B198                            
0000B198                            Obj4B_PlaySnd:
0000B198 303C 00C3                  		move.w	#$C3,d0
0000B19C 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000B1A2 6000 FF7C                  		bra.w	Obj4B_Animate
0000B1A6                            ; ===========================================================================
0000B1A6                            
0000B1A6                            Obj4B_Delete:				; XREF: Obj4B_Index
0000B1A6 6000 0000                  		bra.w	DeleteObject
0000B1AA                            ; ===========================================================================
0000B1AA                            ; ---------------------------------------------------------------------------
0000B1AA                            ; Object 7C - flash effect when	you collect the	giant ring
0000B1AA                            ; ---------------------------------------------------------------------------
0000B1AA                            
0000B1AA                            Obj7C:					; XREF: Obj_Index
0000B1AA 7000                       		moveq	#0,d0
0000B1AC 1028 0024                  		move.b	$24(a0),d0
0000B1B0 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000B1B4 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000B1B8                            ; ===========================================================================
0000B1B8 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000B1BA 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000B1BC 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000B1BE                            ; ===========================================================================
0000B1BE                            
0000B1BE                            Obj7C_Main:				; XREF: Obj7C_Index
0000B1BE 5428 0024                  		addq.b	#2,$24(a0)
0000B1C2 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000B1CA 317C 2462 0002             		move.w	#$2462,2(a0)
0000B1D0 0028 0004 0001             		ori.b	#4,1(a0)
0000B1D6 117C 0000 0018             		move.b	#0,$18(a0)
0000B1DC 117C 0020 0019             		move.b	#$20,$19(a0)
0000B1E2 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000B1E8                            
0000B1E8                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000B1E8 6100                       		bsr.s	Obj7C_Collect
0000B1EA 3028 0008                  		move.w	8(a0),d0
0000B1EE 0240 FF80                  		andi.w	#$FF80,d0
0000B1F2 3238 F700                  		move.w	($FFFFF700).w,d1
0000B1F6 0441 0080                  		subi.w	#$80,d1
0000B1FA 0241 FF80                  		andi.w	#$FF80,d1
0000B1FE 9041                       		sub.w	d1,d0
0000B200 0C40 0280                  		cmpi.w	#$280,d0
0000B204 6300 0000                  		bls.w	DisplaySprite
0000B208 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B20C 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000B210 3440                       		movea.w	d0,a2	; load address into a2
0000B212 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000B216 6000 0000                  		bra.w	DeleteObject	; and delete object
0000B21A                            
0000B21A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B21A                            
0000B21A                            
0000B21A                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000B21A 5328 001E                  		subq.b	#1,$1E(a0)
0000B21E 6A00                       		bpl.s	locret_9F76
0000B220 117C 0001 001E             		move.b	#1,$1E(a0)
0000B226 5228 001A                  		addq.b	#1,$1A(a0)
0000B22A 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000B230 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000B232 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000B238 6600                       		bne.s	locret_9F76	; if not, branch
0000B23A 2268 003C                  		movea.l	$3C(a0),a1
0000B23E 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000B244 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000B24A 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000B250 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000B254 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000B258                            
0000B258                            locret_9F76:
0000B258 4E75                       		rts	
0000B25A                            ; ===========================================================================
0000B25A                            
0000B25A                            Obj7C_End:				; XREF: Obj7C_Collect
0000B25A 5428 0024                  		addq.b	#2,$24(a0)
0000B25E 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000B264 588F                       		addq.l	#4,sp
0000B266 4E75                       		rts	
0000B268                            ; End of function Obj7C_Collect
0000B268                            
0000B268                            ; ===========================================================================
0000B268                            
0000B268                            Obj7C_Delete:				; XREF: Obj7C_Index
0000B268 6000 0000                  		bra.w	DeleteObject
0000B26C                            ; ===========================================================================
0000B26C                            Ani_obj25:
0000B26C                            	include "_anim\obj25.asm"
0000B26C                            ; ---------------------------------------------------------------------------
0000B26C                            ; Animation script - ring
0000B26C                            ; ---------------------------------------------------------------------------
0000B26C 0000                       		dc.w byte_9F8C-Ani_obj25
0000B26E 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000B274                            		even
0000B274                            		even
0000B274                            
0000B274                            ; ---------------------------------------------------------------------------
0000B274                            ; Sprite mappings - rings
0000B274                            ; ---------------------------------------------------------------------------
0000B274                            Map_obj25:
0000B274                            	include "_maps\obj25.asm"
0000B274                            ; ---------------------------------------------------------------------------
0000B274                            ; Sprite mappings - rings
0000B274                            ; ---------------------------------------------------------------------------
0000B274 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000B278 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000B27C 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000B280 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000B284 01                         byte_9FA2:	dc.b 1
0000B285 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000B28A 01                         byte_9FA8:	dc.b 1
0000B28B F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000B290 01                         byte_9FAE:	dc.b 1
0000B291 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000B296 01                         byte_9FB4:	dc.b 1
0000B297 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000B29C 01                         byte_9FBA:	dc.b 1
0000B29D F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000B2A2 01                         byte_9FC0:	dc.b 1
0000B2A3 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000B2A8 01                         byte_9FC6:	dc.b 1
0000B2A9 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000B2AE 01                         byte_9FCC:	dc.b 1
0000B2AF F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000B2B4                            		even
0000B2B4                            		even
0000B2B4                            
0000B2B4                            ; ---------------------------------------------------------------------------
0000B2B4                            ; Sprite mappings - giant ring
0000B2B4                            ; ---------------------------------------------------------------------------
0000B2B4                            Map_obj4B:
0000B2B4                            	include "_maps\obj4B.asm"
0000B2B4                            ; ---------------------------------------------------------------------------
0000B2B4                            ; Sprite mappings - giant ring
0000B2B4                            ; ---------------------------------------------------------------------------
0000B2B4 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000B2B8 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000B2BC 0A                         byte_9FDA:	dc.b $A
0000B2BD E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000B2C2 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000B2C7 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000B2CC E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000B2D1 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000B2D6 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000B2DB 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000B2E0 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000B2E5 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000B2EA 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000B2EF 08                         byte_A00D:	dc.b 8
0000B2F0 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000B2F5 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000B2FA E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000B2FF F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000B304 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000B309 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000B30E 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000B313 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000B318 04                         byte_A036:	dc.b 4
0000B319 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000B31E E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000B323 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000B328 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000B32D 08                         byte_A04B:	dc.b 8
0000B32E E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000B333 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000B338 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000B33D F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000B342 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000B347 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000B34C 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000B351 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000B356                            		even
0000B356                            		even
0000B356                            
0000B356                            ; ---------------------------------------------------------------------------
0000B356                            ; Sprite mappings - flash effect when you collect the giant ring
0000B356                            ; ---------------------------------------------------------------------------
0000B356                            Map_obj7C:
0000B356                            	include "_maps\obj7C.asm"
0000B356                            ; ---------------------------------------------------------------------------
0000B356                            ; Sprite mappings - flash effect when you collect the giant ring
0000B356                            ; ---------------------------------------------------------------------------
0000B356 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000B35A 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000B35E 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000B362 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000B366 02                         byte_A084:	dc.b 2
0000B367 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000B36C 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000B371 04                         byte_A08F:	dc.b 4
0000B372 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000B377 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000B37C 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000B381 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000B386 04                         byte_A0A4:	dc.b 4
0000B387 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000B38C E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000B391 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000B396 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000B39B 04                         byte_A0B9:	dc.b 4
0000B39C E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000B3A1 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000B3A6 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000B3AB 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000B3B0 04                         byte_A0CE:	dc.b 4
0000B3B1 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000B3B6 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000B3BB 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000B3C0 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000B3C5 04                         byte_A0E3:	dc.b 4
0000B3C6 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000B3CB E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000B3D0 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000B3D5 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000B3DA 02                         byte_A0F8:	dc.b 2
0000B3DB E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000B3E0 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000B3E5 04                         byte_A103:	dc.b 4
0000B3E6 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000B3EB E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000B3F0 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000B3F5 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000B3FA                            		even
0000B3FA                            		even
0000B3FA                            
0000B3FA                            ; ===========================================================================
0000B3FA                            ; ---------------------------------------------------------------------------
0000B3FA                            ; Object 26 - monitors
0000B3FA                            ; ---------------------------------------------------------------------------
0000B3FA                            
0000B3FA                            Obj26:					; XREF: Obj_Index
0000B3FA 7000                       		moveq	#0,d0
0000B3FC 1028 0024                  		move.b	$24(a0),d0
0000B400 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000B404 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000B408                            ; ===========================================================================
0000B408 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000B40A 0000                       		dc.w Obj26_Solid-Obj26_Index
0000B40C 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000B40E 0000                       		dc.w Obj26_Animate-Obj26_Index
0000B410 0000                       		dc.w Obj26_Display-Obj26_Index
0000B412                            ; ===========================================================================
0000B412                            
0000B412                            Obj26_Main:				; XREF: Obj26_Index
0000B412 5428 0024                  		addq.b	#2,$24(a0)
0000B416 117C 000E 0016             		move.b	#$E,$16(a0)
0000B41C 117C 000E 0017             		move.b	#$E,$17(a0)
0000B422 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000B42A 317C 0680 0002             		move.w	#$680,2(a0)
0000B430 117C 0004 0001             		move.b	#4,1(a0)
0000B436 117C 0003 0018             		move.b	#3,$18(a0)
0000B43C 117C 000F 0019             		move.b	#$F,$19(a0)
0000B442 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B446 3440                       		movea.w	d0,a2	; load address into a2
0000B448 0812 0000                  		btst	#0,(a2)	; has monitor been broken?
0000B44C 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000B44E 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000B454 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000B45A 4E75                       		rts	
0000B45C                            ; ===========================================================================
0000B45C                            
0000B45C                            Obj26_NotBroken:			; XREF: Obj26_Main
0000B45C 117C 0046 0020             		move.b	#$46,$20(a0)
0000B462 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000B468                            
0000B468                            Obj26_Solid:				; XREF: Obj26_Index
0000B468 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000B46C 6700                       		beq.s	loc_A1EC	; if not, branch
0000B46E 5500                       		subq.b	#2,d0
0000B470 6600                       		bne.s	Obj26_Fall
0000B472 7200                       		moveq	#0,d1
0000B474 1228 0019                  		move.b	$19(a0),d1
0000B478 0641 000B                  		addi.w	#$B,d1
0000B47C 6100 D260                  		bsr.w	ExitPlatform
0000B480 0829 0003 0022             		btst	#3,$22(a1)
0000B486 6600 0000                  		bne.w	loc_A1BC
0000B48A 4228 0025                  		clr.b	$25(a0)
0000B48E 6000 0000                  		bra.w	Obj26_Animate
0000B492                            ; ===========================================================================
0000B492                            
0000B492                            loc_A1BC:				; XREF: Obj26_Solid
0000B492 363C 0010                  		move.w	#$10,d3
0000B496 3428 0008                  		move.w	8(a0),d2
0000B49A 6100 D7AC                  		bsr.w	MvSonicOnPtfm
0000B49E 6000 0000                  		bra.w	Obj26_Animate
0000B4A2                            ; ===========================================================================
0000B4A2                            
0000B4A2                            Obj26_Fall:				; XREF: Obj26_Solid
0000B4A2 6100 0000                  		bsr.w	ObjectFall
0000B4A6 4EB9 0000 0000             		jsr	ObjHitFloor
0000B4AC 4A41                       		tst.w	d1
0000B4AE 6A00 0000                  		bpl.w	Obj26_Animate
0000B4B2 D368 000C                  		add.w	d1,$C(a0)
0000B4B6 4268 0012                  		clr.w	$12(a0)
0000B4BA 4228 0025                  		clr.b	$25(a0)
0000B4BE 6000 0000                  		bra.w	Obj26_Animate
0000B4C2                            ; ===========================================================================
0000B4C2                            
0000B4C2                            loc_A1EC:				; XREF: Obj26_Solid
0000B4C2 323C 001A                  		move.w	#$1A,d1
0000B4C6 343C 000F                  		move.w	#$F,d2
0000B4CA 6100 0000                  		bsr.w	Obj26_SolidSides
0000B4CE 6700 0000                  		beq.w	loc_A25C
0000B4D2 4A69 0012                  		tst.w	$12(a1)
0000B4D6 6B00                       		bmi.s	loc_A20A
0000B4D8 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000B4DE 6700                       		beq.s	loc_A25C	; if yes, branch
0000B4E0                            
0000B4E0                            loc_A20A:
0000B4E0 4A41                       		tst.w	d1
0000B4E2 6A00                       		bpl.s	loc_A220
0000B4E4 9769 000C                  		sub.w	d3,$C(a1)
0000B4E8 6100 D0E2                  		bsr.w	loc_74AE
0000B4EC 117C 0002 0025             		move.b	#2,$25(a0)
0000B4F2 6000 0000                  		bra.w	Obj26_Animate
0000B4F6                            ; ===========================================================================
0000B4F6                            
0000B4F6                            loc_A220:
0000B4F6 4A40                       		tst.w	d0
0000B4F8 6700 0000                  		beq.w	loc_A246
0000B4FC 6B00                       		bmi.s	loc_A230
0000B4FE 4A69 0010                  		tst.w	$10(a1)
0000B502 6B00                       		bmi.s	loc_A246
0000B504 6000                       		bra.s	loc_A236
0000B506                            ; ===========================================================================
0000B506                            
0000B506                            loc_A230:
0000B506 4A69 0010                  		tst.w	$10(a1)
0000B50A 6A00                       		bpl.s	loc_A246
0000B50C                            
0000B50C                            loc_A236:
0000B50C 9169 0008                  		sub.w	d0,8(a1)
0000B510 337C 0000 0020             		move.w	#0,$20(a1)
0000B516 337C 0000 0010             		move.w	#0,$10(a1)
0000B51C                            
0000B51C                            loc_A246:
0000B51C 0829 0001 0022             		btst	#1,$22(a1)
0000B522 6600                       		bne.s	loc_A26A
0000B524 08E9 0005 0022             		bset	#5,$22(a1)
0000B52A 08E8 0005 0022             		bset	#5,$22(a0)
0000B530 6000                       		bra.s	Obj26_Animate
0000B532                            ; ===========================================================================
0000B532                            
0000B532                            loc_A25C:
0000B532 0828 0005 0022             		btst	#5,$22(a0)
0000B538 6700                       		beq.s	Obj26_Animate
0000B53A 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0000B540 6700                       		beq.s	loc_A26A
0000B542 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
0000B548 6700                       		beq.s	loc_A26A
0000B54A 337C 0001 001C             		move.w	#1,$1C(a1)
0000B550                            
0000B550                            loc_A26A:
0000B550 08A8 0005 0022             		bclr	#5,$22(a0)
0000B556 08A9 0005 0022             		bclr	#5,$22(a1)
0000B55C                            
0000B55C                            Obj26_Animate:				; XREF: Obj26_Index
0000B55C 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000B562 6100 0000                  		bsr.w	AnimateSprite
0000B566                            
0000B566                            Obj26_Display:				; XREF: Obj26_Index
0000B566 6000 0000                  		bra.w	MarkObjGone
0000B56A                            ; ===========================================================================
0000B56A                            
0000B56A                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000B56A 5428 0024                  		addq.b	#2,$24(a0)
0000B56E 117C 0000 0020             		move.b	#0,$20(a0)
0000B574 6100 0000                  		bsr.w	SingleObjLoad
0000B578 6600                       		bne.s	Obj26_Explode
0000B57A 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000B57E 3368 0008 0008             		move.w	8(a0),8(a1)
0000B584 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B58A 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000B590                            
0000B590                            Obj26_Explode:
0000B590 6100 0000                  		bsr.w	SingleObjLoad
0000B594 6600                       		bne.s	Obj26_SetBroken
0000B596 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000B59A 5429 0024                  		addq.b	#2,$24(a1)
0000B59E 3368 0008 0008             		move.w	8(a0),8(a1)
0000B5A4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B5AA                            
0000B5AA                            Obj26_SetBroken:
0000B5AA 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B5AE 6700                       		beq.s	@notremembered			; If it's zero, it isn't remembered
0000B5B0 3440                       		movea.w	d0,a2	; load address into a2
0000B5B2 08D2 0000                  		bset	#0,(a2)
0000B5B6                            
0000B5B6                            	@notremembered:
0000B5B6 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000B5BC 6000 0000                  		bra.w	DisplaySprite
0000B5C0                            ; ===========================================================================
0000B5C0                            ; ---------------------------------------------------------------------------
0000B5C0                            ; Object 2E - contents of monitors
0000B5C0                            ; ---------------------------------------------------------------------------
0000B5C0                            
0000B5C0                            Obj2E:					; XREF: Obj_Index
0000B5C0 7000                       		moveq	#0,d0
0000B5C2 1028 0024                  		move.b	$24(a0),d0
0000B5C6 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000B5CA 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000B5CE 6000 0000                  		bra.w	DisplaySprite
0000B5D2                            ; ===========================================================================
0000B5D2 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000B5D4 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000B5D6 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000B5D8                            ; ===========================================================================
0000B5D8                            
0000B5D8                            Obj2E_Main:				; XREF: Obj2E_Index
0000B5D8 5428 0024                  		addq.b	#2,$24(a0)
0000B5DC 317C 0680 0002             		move.w	#$680,2(a0)
0000B5E2 117C 0024 0001             		move.b	#$24,1(a0)
0000B5E8 117C 0003 0018             		move.b	#3,$18(a0)
0000B5EE 117C 0008 0019             		move.b	#8,$19(a0)
0000B5F4 317C FD00 0012             		move.w	#-$300,$12(a0)
0000B5FA 7000                       		moveq	#0,d0
0000B5FC 1028 001C                  		move.b	$1C(a0),d0
0000B600 5400                       		addq.b	#2,d0
0000B602 1140 001A                  		move.b	d0,$1A(a0)
0000B606 227C 0000 0000             		movea.l	#Map_obj26,a1
0000B60C D000                       		add.b	d0,d0
0000B60E D2F1 0000                  		adda.w	(a1,d0.w),a1
0000B612 5249                       		addq.w	#1,a1
0000B614 2149 0004                  		move.l	a1,4(a0)
0000B618                            
0000B618                            Obj2E_Move:				; XREF: Obj2E_Index
0000B618 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000B61C 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000B620 6100 0000                  		bsr.w	SpeedToPos
0000B624 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000B62A 4E75                       		rts	
0000B62C                            ; ===========================================================================
0000B62C                            
0000B62C                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000B62C 5428 0024                  		addq.b	#2,$24(a0)
0000B630 317C 001D 001E             		move.w	#29,$1E(a0)
0000B636 1028 001C                  		move.b	$1C(a0),d0
0000B63A 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000B63E 6600                       		bne.s	Obj2E_ChkSonic
0000B640 4E75                       		rts			; Eggman monitor does nothing
0000B642                            ; ===========================================================================
0000B642                            
0000B642                            Obj2E_ChkSonic:
0000B642 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000B646 6600                       		bne.s	Obj2E_ChkShoes
0000B648                            
0000B648                            ExtraLife:
0000B648 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B64E 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000B654 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000B658 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000B65C 303C 0088                  		move.w	#$88,d0
0000B660 4EF9 0000 121A             		jmp	(PlaySound).l	; play extra life music
0000B666                            ; ===========================================================================
0000B666                            
0000B666                            Obj2E_ChkShoes:
0000B666 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000B66A 6600                       		bne.s	Obj2E_ChkShield
0000B66C 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000B672 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000B678 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000B67E 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000B684 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000B68A 303C 00E2                  		move.w	#$E2,d0
0000B68E 4EF9 0000 121A             		jmp	(PlaySound).l	; Speed	up the music
0000B694                            ; ===========================================================================
0000B694                            
0000B694                            Obj2E_ChkShield:
0000B694 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000B698 6600                       		bne.s	Obj2E_ChkInvinc
0000B69A 4A38 FE2C                  		tst.b	($FFFFFE2C).w
0000B69E 6600                       		bne.s	@alreadyshield
0000B6A0 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B6A6 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000B6AC 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000B6B2 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000B6B8                            
0000B6B8                            	@alreadyshield:
0000B6B8 303C 00AF                  		move.w	#$AF,d0
0000B6BC 4EF9 0000 121A             		jmp	(PlaySound).l	; play shield sound
0000B6C2                            ; ===========================================================================
0000B6C2                            
0000B6C2                            Obj2E_ChkInvinc:
0000B6C2 0C00 0005                  		cmpi.b #5,d0 ; does monitor contain invincibility?
0000B6C6 6600 0000                  		bne.w Obj2E_ChkRings
0000B6CA 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B6D0 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000B6D6 11FC 0001 FE2D             		move.b #1,($FFFFFE2D).w ; Set Invisibility to 1
0000B6DC 31FC 04B0 D032             		move.w #$4B0,($FFFFD032).w ; Set Invisibility timer to 4B0
0000B6E2 11FC 004A D200             		move.b #$4A,($FFFFD200).w ; load stars object ($3801)
0000B6E8 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000B6EE 4A38 F7AA                  		tst.b ($FFFFF7AA).w ; is boss mode on?
0000B6F2 6600                       		bne.s DontPlayMusic ; If so, don't play music
0000B6F4 0C78 000C FE14             		cmpi.w #$C,($FFFFFE14).w ; Check if Sonic has air left
0000B6FA 6300                       		bls.s DontPlayMusic ; If so, don't play music
0000B6FC 303C 0087                  		move.w #$87,d0 ; Load Invisibility music
0000B700 4EF9 0000 121A             		jmp (PlaySound).l
0000B706                            
0000B706                            DontPlayMusic:
0000B706 4E75                       		rts
0000B708                            ; ===========================================================================
0000B708                            
0000B708                            Obj2E_NoMusic:
0000B708 4E75                       		rts	
0000B70A                            ; ===========================================================================
0000B70A                            
0000B70A                            Obj2E_ChkRings:
0000B70A 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000B70E 6600                       		bne.s	Obj2E_ChkS
0000B710 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000B716 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000B71C 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000B722 6500                       		bcs.s	Obj2E_RingSound
0000B724 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000B72A 6700 FF1C                  		beq.w	ExtraLife
0000B72E 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000B734 6500                       		bcs.s	Obj2E_RingSound
0000B736 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000B73C 6700 FF0A                  		beq.w	ExtraLife
0000B740                            
0000B740                            Obj2E_RingSound:
0000B740 303C 00B5                  		move.w	#$B5,d0
0000B744 4EF9 0000 121A             		jmp	(PlaySound).l	; play ring sound
0000B74A                            ; ===========================================================================
0000B74A                            
0000B74A                            Obj2E_ChkS:
0000B74A 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000B74E 6600                       		bne.s	Obj2E_ChkEnd
0000B750 4E71                       		nop	
0000B752                            
0000B752                            Obj2E_ChkEnd:
0000B752 4E75                       		rts			; 'S' and goggles monitors do nothing
0000B754                            ; ===========================================================================
0000B754                            
0000B754                            Obj2E_Delete:				; XREF: Obj2E_Index
0000B754 5368 001E                  		subq.w	#1,$1E(a0)
0000B758 6B00 0000                  		bmi.w	DeleteObject
0000B75C 4E75                       		rts	
0000B75E                            ; ---------------------------------------------------------------------------
0000B75E                            ; Subroutine to	make the sides of a monitor solid
0000B75E                            ; ---------------------------------------------------------------------------
0000B75E                            
0000B75E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B75E                            
0000B75E                            
0000B75E                            Obj26_SolidSides:			; XREF: loc_A1EC
0000B75E 43F8 D000                  		lea	($FFFFD000).w,a1
0000B762 3029 0008                  		move.w	8(a1),d0
0000B766 9068 0008                  		sub.w	8(a0),d0
0000B76A D041                       		add.w	d1,d0
0000B76C 6B00                       		bmi.s	loc_A4E6
0000B76E 3601                       		move.w	d1,d3
0000B770 D643                       		add.w	d3,d3
0000B772 B043                       		cmp.w	d3,d0
0000B774 6200                       		bhi.s	loc_A4E6
0000B776 1629 0016                  		move.b	$16(a1),d3
0000B77A 4883                       		ext.w	d3
0000B77C D443                       		add.w	d3,d2
0000B77E 3629 000C                  		move.w	$C(a1),d3
0000B782 9668 000C                  		sub.w	$C(a0),d3
0000B786 D642                       		add.w	d2,d3
0000B788 6B00                       		bmi.s	loc_A4E6
0000B78A D442                       		add.w	d2,d2
0000B78C B642                       		cmp.w	d2,d3
0000B78E 6400                       		bcc.s	loc_A4E6
0000B790 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000B794 6B00                       		bmi.s	loc_A4E6
0000B796 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000B79C 6400                       		bcc.s	loc_A4E6
0000B79E 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B7A2 6600                       		bne.s	loc_A4E6
0000B7A4 B240                       		cmp.w	d0,d1
0000B7A6 6400                       		bcc.s	loc_A4DC
0000B7A8 D241                       		add.w	d1,d1
0000B7AA 9041                       		sub.w	d1,d0
0000B7AC                            
0000B7AC                            loc_A4DC:
0000B7AC 0C43 0010                  		cmpi.w	#$10,d3
0000B7B0 6500                       		bcs.s	loc_A4EA
0000B7B2                            
0000B7B2                            loc_A4E2:
0000B7B2 7201                       		moveq	#1,d1
0000B7B4 4E75                       		rts	
0000B7B6                            ; ===========================================================================
0000B7B6                            
0000B7B6                            loc_A4E6:
0000B7B6 7200                       		moveq	#0,d1
0000B7B8 4E75                       		rts	
0000B7BA                            ; ===========================================================================
0000B7BA                            
0000B7BA                            loc_A4EA:
0000B7BA 7200                       		moveq	#0,d1
0000B7BC 1228 0019                  		move.b	$19(a0),d1
0000B7C0 5841                       		addq.w	#4,d1
0000B7C2 3401                       		move.w	d1,d2
0000B7C4 D442                       		add.w	d2,d2
0000B7C6 D269 0008                  		add.w	8(a1),d1
0000B7CA 9268 0008                  		sub.w	8(a0),d1
0000B7CE 6BE2                       		bmi.s	loc_A4E2
0000B7D0 B242                       		cmp.w	d2,d1
0000B7D2 64DE                       		bcc.s	loc_A4E2
0000B7D4 72FF                       		moveq	#-1,d1
0000B7D6 4E75                       		rts	
0000B7D8                            ; End of function Obj26_SolidSides
0000B7D8                            
0000B7D8                            ; ===========================================================================
0000B7D8                            Ani_obj26:
0000B7D8                            	include "_anim\obj26.asm"
0000B7D8                            ; ---------------------------------------------------------------------------
0000B7D8                            ; Animation script - monitors
0000B7D8                            ; ---------------------------------------------------------------------------
0000B7D8 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000B7DE 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000B7E4 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000B7EA 0000                       		dc.w byte_A582-Ani_obj26
0000B7EC 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000B7F2 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000B7FE 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000B80A 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000B816 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000B822 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000B82E 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000B83A 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000B846 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000B852 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000B85A                            		even
0000B85A                            		even
0000B85A                            
0000B85A                            ; ---------------------------------------------------------------------------
0000B85A                            ; Sprite mappings - monitors
0000B85A                            ; ---------------------------------------------------------------------------
0000B85A                            Map_obj26:
0000B85A                            	include "_maps\obj26.asm"
0000B85A                            ; --------------------------------------------------------------------------------
0000B85A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B85A                            ; --------------------------------------------------------------------------------
0000B85A                            
0000B85A                            SME_XK1AB:	
0000B85A 0000 0000                  		dc.w SME_XK1AB_18-SME_XK1AB, SME_XK1AB_1E-SME_XK1AB	
0000B85E 0000 0000                  		dc.w SME_XK1AB_29-SME_XK1AB, SME_XK1AB_34-SME_XK1AB	
0000B862 0000 0000                  		dc.w SME_XK1AB_35-SME_XK1AB, SME_XK1AB_40-SME_XK1AB	
0000B866 0000 0000                  		dc.w SME_XK1AB_4B-SME_XK1AB, SME_XK1AB_56-SME_XK1AB	
0000B86A 0000 0000                  		dc.w SME_XK1AB_61-SME_XK1AB, SME_XK1AB_6C-SME_XK1AB	
0000B86E 0000 0000                  		dc.w SME_XK1AB_6D-SME_XK1AB, SME_XK1AB_6E-SME_XK1AB	
0000B872 01                         SME_XK1AB_18:	dc.b 1	
0000B873 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B878 02                         SME_XK1AB_1E:	dc.b 2	
0000B879 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000B87E EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B883 02                         SME_XK1AB_29:	dc.b 2	
0000B884 F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000B889 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B88E 00                         SME_XK1AB_34:	dc.b 0	
0000B88F 02                         SME_XK1AB_35:	dc.b 2	
0000B890 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000B895 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B89A 02                         SME_XK1AB_40:	dc.b 2	
0000B89B F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000B8A0 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B8A5 02                         SME_XK1AB_4B:	dc.b 2	
0000B8A6 F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000B8AB EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B8B0 02                         SME_XK1AB_56:	dc.b 2	
0000B8B1 F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000B8B6 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B8BB 02                         SME_XK1AB_61:	dc.b 2	
0000B8BC F505 0028 F8               		dc.b $F5, 5, 0, $28, $F8	
0000B8C1 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B8C6 00                         SME_XK1AB_6C:	dc.b 0	
0000B8C7 00                         SME_XK1AB_6D:	dc.b 0	
0000B8C8 01                         SME_XK1AB_6E:	dc.b 1	
0000B8C9 FF0D 002C F0               		dc.b $FF, $D, 0, $2C, $F0	
0000B8CE                            		even
0000B8CE                            		even
0000B8CE                            
0000B8CE                            ; ===========================================================================
0000B8CE                            ; ---------------------------------------------------------------------------
0000B8CE                            ; Object 0E - Sonic on the title screen
0000B8CE                            ; ---------------------------------------------------------------------------
0000B8CE                            
0000B8CE                            Obj0E:					; XREF: Obj_Index
0000B8CE 7000                       		moveq	#0,d0
0000B8D0 1028 0024                  		move.b	$24(a0),d0
0000B8D4 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000B8D8 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000B8DC                            ; ===========================================================================
0000B8DC 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000B8DE 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000B8E0 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000B8E2 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000B8E4                            ; ===========================================================================
0000B8E4                            
0000B8E4                            Obj0E_Main:				; XREF: Obj0E_Index
0000B8E4 5428 0024                  		addq.b	#2,$24(a0)
0000B8E8 317C 00F0 0008             		move.w	#$F0,8(a0)
0000B8EE 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000B8F4 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000B8FC 317C 0300 0002             		move.w	#$300,2(a0)
0000B902 117C 0001 0018             		move.b	#1,$18(a0)
0000B908 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000B90E 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B914 6100 0000                  		bsr.w	AnimateSprite
0000B918                            
0000B918                            Obj0E_Delay:				; XREF: Obj0E_Index
0000B918 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000B91C 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000B91E 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000B922 6000 0000                  		bra.w	DisplaySprite
0000B926                            ; ===========================================================================
0000B926                            
0000B926                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000B926 4E75                       		rts	
0000B928                            ; ===========================================================================
0000B928                            
0000B928                            Obj0E_Move:				; XREF: Obj0E_Index
0000B928 5168 000A                  		subq.w	#8,$A(a0)
0000B92C 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000B932 6600                       		bne.s	Obj0E_Display
0000B934 5428 0024                  		addq.b	#2,$24(a0)
0000B938                            
0000B938                            Obj0E_Display:
0000B938 6000 0000                  		bra.w	DisplaySprite
0000B93C                            ; ===========================================================================
0000B93C 4E75                       		rts	
0000B93E                            ; ===========================================================================
0000B93E                            
0000B93E                            Obj0E_Animate:				; XREF: Obj0E_Index
0000B93E 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B944 6100 0000                  		bsr.w	AnimateSprite
0000B948 6000 0000                  		bra.w	DisplaySprite
0000B94C                            ; ===========================================================================
0000B94C 4E75                       		rts	
0000B94E                            ; ===========================================================================
0000B94E                            ; ---------------------------------------------------------------------------
0000B94E                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000B94E                            ; ---------------------------------------------------------------------------
0000B94E                            
0000B94E                            Obj0F:					; XREF: Obj_Index
0000B94E 7000                       		moveq	#0,d0
0000B950 1028 0024                  		move.b	$24(a0),d0
0000B954 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000B958 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000B95C 6000 0000                  		bra.w	DisplaySprite
0000B960                            ; ===========================================================================
0000B960 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000B962 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000B964 0000                       		dc.w locret_A6F8-Obj0F_Index
0000B966                            ; ===========================================================================
0000B966                            
0000B966                            Obj0F_Main:				; XREF: Obj0F_Index
0000B966 5428 0024                  		addq.b	#2,$24(a0)
0000B96A 317C 00D0 0008             		move.w	#$D0,8(a0)
0000B970 317C 0130 000A             		move.w	#$130,$A(a0)
0000B976 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B97E 317C 2200 0002             		move.w	#$2200,2(a0)
0000B984 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B98A 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B98C 5428 0024                  		addq.b	#2,$24(a0)
0000B990 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B996 6600                       		bne.s	locret_A6F8	; if not, branch
0000B998 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B99E 317C 0170 0008             		move.w	#$170,8(a0)
0000B9A4 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B9AA                            
0000B9AA                            locret_A6F8:				; XREF: Obj0F_Index
0000B9AA 4E75                       		rts	
0000B9AC                            ; ===========================================================================
0000B9AC                            
0000B9AC                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B9AC 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B9B2 6000 0000                  		bra.w	AnimateSprite
0000B9B6                            ; ===========================================================================
0000B9B6                            Ani_obj0E:
0000B9B6                            	include "_anim\obj0E.asm"
0000B9B6                            ; ---------------------------------------------------------------------------
0000B9B6                            ; Animation script - Sonic on the title screen
0000B9B6                            ; ---------------------------------------------------------------------------
0000B9B6 0000                       		dc.w byte_A706-Ani_obj0E
0000B9B8 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B9C4                            		even
0000B9C4                            		even
0000B9C4                            
0000B9C4                            Ani_obj0F:
0000B9C4                            	include "_anim\obj0F.asm"
0000B9C4                            ; ---------------------------------------------------------------------------
0000B9C4                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B9C4                            ; ---------------------------------------------------------------------------
0000B9C4 0000                       		dc.w byte_A714-Ani_obj0F
0000B9C6 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B9CA                            		even
0000B9CA                            		even
0000B9CA                            
0000B9CA                            ; ---------------------------------------------------------------------------
0000B9CA                            ; Subroutine to	animate	a sprite using an animation script
0000B9CA                            ; ---------------------------------------------------------------------------
0000B9CA                            
0000B9CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B9CA                            
0000B9CA                            
0000B9CA                            AnimateSprite:
0000B9CA 7000                       		moveq	#0,d0
0000B9CC 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B9D0 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B9D4 6700                       		beq.s	Anim_Run	; if not, branch
0000B9D6 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B9DA 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B9E0 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B9E6                            
0000B9E6                            Anim_Run:
0000B9E6 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B9EA 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B9EC D040                       		add.w	d0,d0
0000B9EE D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B9F2 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B9F6 7200                       		moveq	#0,d1
0000B9F8 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B9FC 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000BA00 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000BA02                            
0000BA02                            Anim_Next:
0000BA02 1200                       		move.b	d0,d1
0000BA04 0200 001F                  		andi.b	#$1F,d0
0000BA08 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000BA0C 1028 0022                  		move.b	$22(a0),d0
0000BA10 E719                       		rol.b	#3,d1
0000BA12 B101                       		eor.b	d0,d1
0000BA14 0201 0003                  		andi.b	#3,d1
0000BA18 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000BA1E 8328 0001                  		or.b	d1,1(a0)
0000BA22 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000BA26                            
0000BA26                            Anim_Wait:
0000BA26 4E75                       		rts	
0000BA28                            ; ===========================================================================
0000BA28                            
0000BA28                            Anim_End_FF:
0000BA28 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000BA2A 6600                       		bne.s	Anim_End_FE	; if not, branch
0000BA2C 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000BA32 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000BA36 60CA                       		bra.s	Anim_Next
0000BA38                            ; ===========================================================================
0000BA38                            
0000BA38                            Anim_End_FE:
0000BA38 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000BA3A 6600                       		bne.s	Anim_End_FD	; if not, branch
0000BA3C 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000BA40 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000BA44 9200                       		sub.b	d0,d1
0000BA46 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000BA4A 60B6                       		bra.s	Anim_Next
0000BA4C                            ; ===========================================================================
0000BA4C                            
0000BA4C                            Anim_End_FD:
0000BA4C 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000BA4E 6600                       		bne.s	Anim_End_FC	; if not, branch
0000BA50 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000BA56                            
0000BA56                            Anim_End_FC:
0000BA56 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000BA58 6600                       		bne.s	Anim_End_FB	; if not, branch
0000BA5A 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000BA5E                            
0000BA5E                            Anim_End_FB:
0000BA5E 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000BA60 6600                       		bne.s	Anim_End_FA	; if not, branch
0000BA62 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000BA68 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000BA6C                            
0000BA6C                            Anim_End_FA:
0000BA6C 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000BA6E 6600                       		bne.s	Anim_End	; if not, branch
0000BA70 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000BA74                            
0000BA74                            Anim_End:
0000BA74 4E75                       		rts	
0000BA76                            ; End of function AnimateSprite
0000BA76                            
0000BA76                            ; ===========================================================================
0000BA76                            ; ---------------------------------------------------------------------------
0000BA76                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000BA76                            ; ---------------------------------------------------------------------------
0000BA76                            Map_obj0F:
0000BA76                            	include "_maps\obj0F.asm"
0000BA76                            ; ---------------------------------------------------------------------------
0000BA76                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000BA76                            ; ---------------------------------------------------------------------------
0000BA76 0000                       		dc.w byte_A7CD-Map_obj0F
0000BA78 0000                       		dc.w byte_A7CC-Map_obj0F
0000BA7A 0000                       		dc.w byte_A7EB-Map_obj0F
0000BA7C 0000                       		dc.w byte_A882-Map_obj0F
0000BA7E 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000BA7F 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000BA84 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000BA89 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000BA8E 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000BA93 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000BA98 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000BA9D 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000BA9E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BAA3 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BAA8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BAAD B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BAB2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BAB7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BABC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BAC1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BAC6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BACB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BAD0 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BAD5 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BADA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BADF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BAE4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BAE9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BAEE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BAF3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BAF8 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BAFD D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BB02 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BB07 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BB0C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BB11 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BB16 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BB1B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BB20 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BB25 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BB2A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BB2F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BB34 01                         byte_A882:	dc.b 1			; "TM"
0000BB35 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000BB3A                            		even
0000BB3A                            		even
0000BB3A                            
0000BB3A                            ; ---------------------------------------------------------------------------
0000BB3A                            ; Sprite mappings - Sonic on the title screen
0000BB3A                            ; ---------------------------------------------------------------------------
0000BB3A                            Map_obj0E:
0000BB3A                            	include "_maps\obj0E.asm"
0000BB3A                            ; ---------------------------------------------------------------------------
0000BB3A                            ; Sprite mappings - Sonic on the title screen
0000BB3A                            ; ---------------------------------------------------------------------------
0000BB3A 0000                       		dc.w byte_A898-Map_obj0E
0000BB3C 0000                       		dc.w byte_A8CB-Map_obj0E
0000BB3E 0000                       		dc.w byte_A917-Map_obj0E
0000BB40 0000                       		dc.w byte_A96D-Map_obj0E
0000BB42 0000                       		dc.w byte_A9AF-Map_obj0E
0000BB44 0000                       		dc.w byte_A9E7-Map_obj0E
0000BB46 0000                       		dc.w byte_AA47-Map_obj0E
0000BB48 0000                       		dc.w byte_AAB1-Map_obj0E
0000BB4A 0A                         byte_A898:	dc.b $A
0000BB4B 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000BB50 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000BB55 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000BB5A 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000BB5F 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000BB64 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000BB69 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000BB6E 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000BB73 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000BB78 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000BB7D 0F                         byte_A8CB:	dc.b $F
0000BB7E 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000BB83 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000BB88 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000BB8D 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000BB92 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000BB97 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000BB9C 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000BBA1 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000BBA6 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000BBAB 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000BBB0 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000BBB5 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000BBBA 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000BBBF 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000BBC4 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000BBC9 11                         byte_A917:	dc.b $11
0000BBCA 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000BBCF 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000BBD4 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000BBD9 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000BBDE 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000BBE3 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000BBE8 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000BBED 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000BBF2 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000BBF7 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000BBFC 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000BC01 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000BC06 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000BC0B 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000BC10 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000BC15 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000BC1A 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000BC1F 0D                         byte_A96D:	dc.b $D
0000BC20 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000BC25 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000BC2A 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000BC2F 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000BC34 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000BC39 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000BC3E 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000BC43 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000BC48 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000BC4D 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000BC52 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000BC57 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000BC5C 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000BC61 0B                         byte_A9AF:	dc.b $B
0000BC62 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000BC67 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000BC6C 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000BC71 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000BC76 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000BC7B 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000BC80 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000BC85 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000BC8A 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000BC8F 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000BC94 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000BC99 13                         byte_A9E7:	dc.b $13
0000BC9A 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000BC9F 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000BCA4 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000BCA9 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000BCAE 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000BCB3 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000BCB8 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000BCBD 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000BCC2 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000BCC7 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000BCCC 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000BCD1 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000BCD6 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000BCDB 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000BCE0 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000BCE5 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000BCEA 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000BCEF 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000BCF4 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000BCF9 15                         byte_AA47:	dc.b $15
0000BCFA 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000BCFF 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000BD04 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000BD09 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000BD0E 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000BD13 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000BD18 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000BD1D 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000BD22 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000BD27 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000BD2C 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000BD31 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000BD36 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000BD3B 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000BD40 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000BD45 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000BD4A 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000BD4F 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000BD54 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000BD59 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000BD5E 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000BD63 16                         byte_AAB1:	dc.b $16
0000BD64 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000BD69 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000BD6E 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000BD73 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000BD78 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000BD7D 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000BD82 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000BD87 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000BD8C 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000BD91 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000BD96 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000BD9B 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000BDA0 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000BDA5 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000BDAA 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000BDAF 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000BDB4 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000BDB9 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000BDBE 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000BDC3 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000BDC8 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000BDCD 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000BDD2                            		even
0000BDD2                            		even
0000BDD2                            
0000BDD2                            ; ===========================================================================
0000BDD2                            ; ---------------------------------------------------------------------------
0000BDD2                            ; Object 2B - Chopper enemy (GHZ)
0000BDD2                            ; ---------------------------------------------------------------------------
0000BDD2                            
0000BDD2                            Obj2B:					; XREF: Obj_Index
0000BDD2 7000                       		moveq	#0,d0
0000BDD4 1028 0024                  		move.b	$24(a0),d0
0000BDD8 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000BDDC 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000BDE0 6000 0000                  		bra.w	MarkObjGone
0000BDE4                            ; ===========================================================================
0000BDE4 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000BDE6 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000BDE8                            ; ===========================================================================
0000BDE8                            
0000BDE8                            Obj2B_Main:				; XREF: Obj2B_Index
0000BDE8 5428 0024                  		addq.b	#2,$24(a0)
0000BDEC 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000BDF4 317C 047B 0002             		move.w	#$47B,2(a0)
0000BDFA 117C 0004 0001             		move.b	#4,1(a0)
0000BE00 117C 0004 0018             		move.b	#4,$18(a0)
0000BE06 117C 0009 0020             		move.b	#9,$20(a0)
0000BE0C 117C 0010 0019             		move.b	#$10,$19(a0)
0000BE12 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000BE18 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000BE1E                            
0000BE1E                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000BE1E 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000BE24 6100 FBA4                  		bsr.w	AnimateSprite
0000BE28 6100 0000                  		bsr.w	SpeedToPos
0000BE2C 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000BE32 3028 0030                  		move.w	$30(a0),d0
0000BE36 B068 000C                  		cmp.w	$C(a0),d0
0000BE3A 6400                       		bcc.s	Obj2B_ChgAni
0000BE3C 3140 000C                  		move.w	d0,$C(a0)
0000BE40 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000BE46                            
0000BE46                            Obj2B_ChgAni:
0000BE46 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000BE4C 0440 00C0                  		subi.w	#$C0,d0
0000BE50 B068 000C                  		cmp.w	$C(a0),d0
0000BE54 6400                       		bcc.s	locret_ABB6
0000BE56 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000BE5C 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000BE60 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000BE62 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000BE68                            
0000BE68                            locret_ABB6:
0000BE68 4E75                       		rts	
0000BE6A                            ; ===========================================================================
0000BE6A                            Ani_obj2B:
0000BE6A                            	include "_anim\obj2B.asm"
0000BE6A                            ; ---------------------------------------------------------------------------
0000BE6A                            ; Animation script - Chopper enemy
0000BE6A                            ; ---------------------------------------------------------------------------
0000BE6A 0000                       		dc.w byte_ABBE-Ani_obj2B
0000BE6C 0000                       		dc.w byte_ABC2-Ani_obj2B
0000BE6E 0000                       		dc.w byte_ABC6-Ani_obj2B
0000BE70 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000BE74 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000BE78 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000BE7C 00                         		even
0000BE7C 00                         		even
0000BE7C                            
0000BE7C                            ; ---------------------------------------------------------------------------
0000BE7C                            ; Sprite mappings - Chopper enemy (GHZ)
0000BE7C                            ; ---------------------------------------------------------------------------
0000BE7C                            Map_obj2B:
0000BE7C                            	include "_maps\obj2B.asm"
0000BE7C                            ; ---------------------------------------------------------------------------
0000BE7C                            ; Sprite mappings - Chopper enemy (GHZ)
0000BE7C                            ; ---------------------------------------------------------------------------
0000BE7C 0000                       		dc.w byte_ABCE-Map_obj2B
0000BE7E 0000                       		dc.w byte_ABD4-Map_obj2B
0000BE80 01                         byte_ABCE:	dc.b 1
0000BE81 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000BE86 01                         byte_ABD4:	dc.b 1
0000BE87 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000BE8C                            		even
0000BE8C                            		even
0000BE8C                            
0000BE8C                            ; ===========================================================================
0000BE8C                            ; ---------------------------------------------------------------------------
0000BE8C                            ; Object 2C - Jaws enemy (LZ)
0000BE8C                            ; ---------------------------------------------------------------------------
0000BE8C                            
0000BE8C                            Obj2C:					; XREF: Obj_Index
0000BE8C 7000                       		moveq	#0,d0
0000BE8E 1028 0024                  		move.b	$24(a0),d0
0000BE92 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000BE96 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000BE9A                            ; ===========================================================================
0000BE9A 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000BE9C 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000BE9E                            ; ===========================================================================
0000BE9E                            
0000BE9E                            Obj2C_Main:				; XREF: Obj2C_Index
0000BE9E 5428 0024                  		addq.b	#2,$24(a0)
0000BEA2 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000BEAA 317C 2486 0002             		move.w	#$2486,2(a0)
0000BEB0 0028 0004 0001             		ori.b	#4,1(a0)
0000BEB6 117C 000A 0020             		move.b	#$A,$20(a0)
0000BEBC 117C 0004 0018             		move.b	#4,$18(a0)
0000BEC2 117C 0010 0019             		move.b	#$10,$19(a0)
0000BEC8 7000                       		moveq	#0,d0
0000BECA 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000BECE ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000BED0 5340                       		subq.w	#1,d0
0000BED2 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000BED6 3140 0032                  		move.w	d0,$32(a0)
0000BEDA 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000BEE0 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000BEE6 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000BEE8 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000BEEC                            
0000BEEC                            Obj2C_Turn:				; XREF: Obj2C_Index
0000BEEC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000BEF0 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000BEF2 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000BEF8 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000BEFC 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000BF02 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000BF08                            
0000BF08                            Obj2C_Animate:
0000BF08 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000BF0E 6100 FABA                  		bsr.w	AnimateSprite
0000BF12 6100 0000                  		bsr.w	SpeedToPos
0000BF16 6000 0000                  		bra.w	MarkObjGone
0000BF1A                            ; ===========================================================================
0000BF1A                            Ani_obj2C:
0000BF1A                            	include "_anim\obj2C.asm"
0000BF1A                            ; ---------------------------------------------------------------------------
0000BF1A                            ; Animation script - Jaws enemy
0000BF1A                            ; ---------------------------------------------------------------------------
0000BF1A 0000                       		dc.w byte_AC6A-Ani_obj2C
0000BF1C 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000BF22                            		even
0000BF22                            		even
0000BF22                            
0000BF22                            ; ---------------------------------------------------------------------------
0000BF22                            ; Sprite mappings - Jaws enemy (LZ)
0000BF22                            ; ---------------------------------------------------------------------------
0000BF22                            Map_obj2C:
0000BF22                            	include "_maps\obj2C.asm"
0000BF22                            mapjaws:
0000BF22 0000                       mapjaws_0: 	dc.w mapjaws_8-mapjaws
0000BF24 0000                       mapjaws_2: 	dc.w mapjaws_13-mapjaws
0000BF26 0000                       mapjaws_4: 	dc.w mapjaws_1E-mapjaws
0000BF28 0000                       mapjaws_6: 	dc.w mapjaws_29-mapjaws
0000BF2A 02                         mapjaws_8: 	dc.b $2
0000BF2B F40E 0000 F0               	dc.b $F4, $E, $0, $0, $F0
0000BF30 F505 4018 10               	dc.b $F5, $5, $40, $18, $10
0000BF35 02                         mapjaws_13: 	dc.b $2
0000BF36 F40E 000C F0               	dc.b $F4, $E, $0, $C, $F0
0000BF3B F505 401C 10               	dc.b $F5, $5, $40, $1C, $10
0000BF40 02                         mapjaws_1E: 	dc.b $2
0000BF41 F40E 0000 F0               	dc.b $F4, $E, $0, $0, $F0
0000BF46 F505 5018 10               	dc.b $F5, $5, $50, $18, $10
0000BF4B 02                         mapjaws_29: 	dc.b $2
0000BF4C F40E 000C F0               	dc.b $F4, $E, $0, $C, $F0
0000BF51 F505 501C 10               	dc.b $F5, $5, $50, $1C, $10
0000BF56                            	even
0000BF56                            	even
0000BF56                            
0000BF56                            ; ===========================================================================
0000BF56                            ; ---------------------------------------------------------------------------
0000BF56                            ; Object 2D - Burrobot enemy (LZ)
0000BF56                            ; ---------------------------------------------------------------------------
0000BF56                            
0000BF56                            Obj2D:					; XREF: Obj_Index
0000BF56 7000                       		moveq	#0,d0
0000BF58 1028 0024                  		move.b	$24(a0),d0
0000BF5C 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000BF60 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000BF64                            ; ===========================================================================
0000BF64 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000BF66 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000BF68                            ; ===========================================================================
0000BF68                            
0000BF68                            Obj2D_Main:				; XREF: Obj2D_Index
0000BF68 5428 0024                  		addq.b	#2,$24(a0)
0000BF6C 117C 0013 0016             		move.b	#$13,$16(a0)
0000BF72 117C 0008 0017             		move.b	#8,$17(a0)
0000BF78 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000BF80 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000BF86 0028 0004 0001             		ori.b	#4,1(a0)
0000BF8C 117C 0004 0018             		move.b	#4,$18(a0)
0000BF92 117C 0005 0020             		move.b	#5,$20(a0)
0000BF98 117C 000C 0019             		move.b	#$C,$19(a0)
0000BF9E 5028 0025                  		addq.b	#8,$25(a0)	; run "Obj2D_ChkSonic" routine
0000BFA2 117C 0004 001C             		move.b	#4,$1C(a0)
0000BFA8                            
0000BFA8                            Obj2D_Action:				; XREF: Obj2D_Index
0000BFA8 7000                       		moveq	#0,d0
0000BFAA 1028 0025                  		move.b	$25(a0),d0
0000BFAE 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000BFB2 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000BFB6 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000BFBC 6100 FA0C                  		bsr.w	AnimateSprite
0000BFC0 6000 0000                  		bra.w	MarkObjGone
0000BFC4                            ; ===========================================================================
0000BFC4 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000BFC6 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000BFC8 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000BFCA 0000                       		dc.w Obj2D_Jump2-Obj2D_Index2
0000BFCC 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000BFCE                            ; ===========================================================================
0000BFCE                            
0000BFCE                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000BFCE 5368 0030                  		subq.w	#1,$30(a0)
0000BFD2 6A00                       		bpl.s	locret_AD42
0000BFD4 5428 0025                  		addq.b	#2,$25(a0)
0000BFD8 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000BFDE 317C 0080 0010             		move.w	#$80,$10(a0)
0000BFE4 117C 0001 001C             		move.b	#1,$1C(a0)
0000BFEA 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000BFF0 6700                       		beq.s	locret_AD42
0000BFF2 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000BFF6                            
0000BFF6                            locret_AD42:
0000BFF6 4E75                       		rts	
0000BFF8                            ; ===========================================================================
0000BFF8                            
0000BFF8                            Obj2D_Move:				; XREF: Obj2D_Index2
0000BFF8 5368 0030                  		subq.w	#1,$30(a0)
0000BFFC 6B00                       		bmi.s	loc_AD84
0000BFFE 6100 0000                  		bsr.w	SpeedToPos
0000C002 0868 0000 0032             		bchg	#0,$32(a0)
0000C008 6600                       		bne.s	loc_AD78
0000C00A 3628 0008                  		move.w	8(a0),d3
0000C00E 0643 000C                  		addi.w	#$C,d3
0000C012 0828 0000 0022             		btst	#0,$22(a0)
0000C018 6600                       		bne.s	loc_AD6A
0000C01A 0443 0018                  		subi.w	#$18,d3
0000C01E                            
0000C01E                            loc_AD6A:
0000C01E 4EB9 0000 0000             		jsr	ObjHitFloor2
0000C024 0C41 000C                  		cmpi.w	#$C,d1
0000C028 6C00                       		bge.s	loc_AD84
0000C02A 4E75                       		rts	
0000C02C                            ; ===========================================================================
0000C02C                            
0000C02C                            loc_AD78:				; XREF: Obj2D_Move
0000C02C 4EB9 0000 0000             		jsr	ObjHitFloor
0000C032 D368 000C                  		add.w	d1,$C(a0)
0000C036 4E75                       		rts	
0000C038                            ; ===========================================================================
0000C038                            
0000C038                            loc_AD84:				; XREF: Obj2D_Move
0000C038 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000C03E 6700                       		beq.s	loc_ADA4
0000C040 5528 0025                  		subq.b	#2,$25(a0)
0000C044 317C 003B 0030             		move.w	#$3B,$30(a0)
0000C04A 317C 0000 0010             		move.w	#0,$10(a0)
0000C050 117C 0000 001C             		move.b	#0,$1C(a0)
0000C056 4E75                       		rts	
0000C058                            ; ===========================================================================
0000C058                            
0000C058                            loc_ADA4:
0000C058 5428 0025                  		addq.b	#2,$25(a0)
0000C05C 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C062 117C 0002 001C             		move.b	#2,$1C(a0)
0000C068 4E75                       		rts	
0000C06A                            ; ===========================================================================
0000C06A                            
0000C06A                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000C06A 6100 0000                  		bsr.w	SpeedToPos
0000C06E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C074 6B00                       		bmi.s	locret_ADF0
0000C076 117C 0003 001C             		move.b	#3,$1C(a0)
0000C07C 4EB9 0000 0000             		jsr	ObjHitFloor
0000C082 4A41                       		tst.w	d1
0000C084 6A00                       		bpl.s	locret_ADF0
0000C086 D368 000C                  		add.w	d1,$C(a0)
0000C08A 317C 0000 0012             		move.w	#0,$12(a0)
0000C090 117C 0001 001C             		move.b	#1,$1C(a0)
0000C096 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000C09C 5528 0025                  		subq.b	#2,$25(a0)
0000C0A0 6000 0000                  		bra.w	Obj2D_ChkSonic2
0000C0A4                            ; ===========================================================================
0000C0A4                            
0000C0A4                            Obj2D_Jump2:				; XREF: Obj2D_Index2
0000C0A4 6100 0000                  		bsr.w	SpeedToPos
0000C0A8 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C0AE 5368 0030                  		subq.w	#1,$30(a0)
0000C0B2 6A00                       		bpl.s	locret_ADF0
0000C0B4 117C 0002 001C             		move.b	#2,$1C(a0)
0000C0BA 5528 0025                  		subq.b	#2,$25(a0)
0000C0BE                            
0000C0BE                            locret_ADF0:
0000C0BE 4E75                       		rts	
0000C0C0                            ; ===========================================================================
0000C0C0                            
0000C0C0                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000C0C0 343C 0060                  		move.w	#$60,d2
0000C0C4 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000C0C8 6400                       		bcc.s	locret_AE20
0000C0CA 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000C0CE 9068 000C                  		sub.w	$C(a0),d0
0000C0D2 6400                       		bcc.s	locret_AE20
0000C0D4 0C40 FF80                  		cmpi.w	#-$80,d0
0000C0D8 6500                       		bcs.s	locret_AE20
0000C0DA 4A78 FE08                  		tst.w	($FFFFFE08).w
0000C0DE 6600                       		bne.s	locret_AE20
0000C0E0 5528 0025                  		subq.b	#2,$25(a0)
0000C0E4 317C 0004 0030             		move.w	#4,$30(a0)
0000C0EA 3141 0010                  		move.w	d1,$10(a0)
0000C0EE 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C0F4                            
0000C0F4                            locret_AE20:
0000C0F4 4E75                       		rts	
0000C0F6                            
0000C0F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C0F6                            
0000C0F6                            
0000C0F6                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000C0F6 323C 0080                  		move.w	#$80,d1
0000C0FA 08E8 0000 0022             		bset	#0,$22(a0)
0000C100 3038 D008                  		move.w	($FFFFD008).w,d0
0000C104 9068 0008                  		sub.w	8(a0),d0
0000C108 6400                       		bcc.s	loc_AE40
0000C10A 4440                       		neg.w	d0
0000C10C 4441                       		neg.w	d1
0000C10E 08A8 0000 0022             		bclr	#0,$22(a0)
0000C114                            
0000C114                            loc_AE40:
0000C114 B042                       		cmp.w	d2,d0
0000C116 4E75                       		rts	
0000C118                            ; End of function Obj2D_ChkSonic2
0000C118                            
0000C118                            ; ===========================================================================
0000C118                            Ani_obj2D:
0000C118                            	include "_anim\obj2D.asm"
0000C118                            ; ---------------------------------------------------------------------------
0000C118                            ; Animation script - Burrobot enemy
0000C118                            ; ---------------------------------------------------------------------------
0000C118 0000                       		dc.w byte_AE4C-Ani_obj2D
0000C11A 0000                       		dc.w byte_AE50-Ani_obj2D
0000C11C 0000                       		dc.w byte_AE54-Ani_obj2D
0000C11E 0000                       		dc.w byte_AE58-Ani_obj2D
0000C120 0000                       		dc.w byte_AE542-Ani_obj2D
0000C122 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000C126 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000C12A 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000C12E 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000C131 0307 08FF                  byte_AE542:	dc.b 3,	7, 8, $FF
0000C136 00                         		even
0000C136 00                         		even
0000C136                            
0000C136                            ; ---------------------------------------------------------------------------
0000C136                            ; Sprite mappings - Burrobot enemy (LZ)
0000C136                            ; ---------------------------------------------------------------------------
0000C136                            Map_obj2D:
0000C136                            	include "_maps\obj2D.asm"
0000C136                            burromap:
0000C136 0000                       burromap_0: 	dc.w burromap_12-burromap
0000C138 0000                       burromap_2: 	dc.w burromap_1D-burromap
0000C13A 0000                       burromap_4: 	dc.w burromap_28-burromap
0000C13C 0000                       burromap_6: 	dc.w burromap_33-burromap
0000C13E 0000                       burromap_8: 	dc.w burromap_3E-burromap
0000C140 0000                       burromap_A: 	dc.w burromap_49-burromap
0000C142 0000                       burromap_C: 	dc.w burromap_54-burromap
0000C144 0000                       burromap_E: 	dc.w burromap_5F-burromap
0000C146 0000                       burromap_10: 	dc.w burromap_65-burromap
0000C148 02                         burromap_12: 	dc.b $2
0000C149 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0000C14E 0409 0009 F4               	dc.b $4, $9, $0, $9, $F4
0000C153 02                         burromap_1D: 	dc.b $2
0000C154 EC0A 000F F0               	dc.b $EC, $A, $0, $F, $F0
0000C159 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
0000C15E 02                         burromap_28: 	dc.b $2
0000C15F E80A 001E F4               	dc.b $E8, $A, $0, $1E, $F4
0000C164 000A 0027 F4               	dc.b $0, $A, $0, $27, $F4
0000C169 02                         burromap_33: 	dc.b $2
0000C16A E80A 0030 F4               	dc.b $E8, $A, $0, $30, $F4
0000C16F 000A 0039 F4               	dc.b $0, $A, $0, $39, $F4
0000C174 02                         burromap_3E: 	dc.b $2
0000C175 E80A 000F F0               	dc.b $E8, $A, $0, $F, $F0
0000C17A 000A 0042 F4               	dc.b $0, $A, $0, $42, $F4
0000C17F 02                         burromap_49: 	dc.b $2
0000C180 F406 004B E8               	dc.b $F4, $6, $0, $4B, $E8
0000C185 F40A 0051 F8               	dc.b $F4, $A, $0, $51, $F8
0000C18A 02                         burromap_54: 	dc.b $2
0000C18B EC0A 000F F0               	dc.b $EC, $A, $0, $F, $F0
0000C190 0409 0009 F4               	dc.b $4, $9, $0, $9, $F4
0000C195 01                         burromap_5F: 	dc.b $1
0000C196 E80A 0030 F4               	dc.b $E8, $A, $0, $30, $F4
0000C19B 01                         burromap_65: 	dc.b $1
0000C19C E80A 001E F4               	dc.b $E8, $A, $0, $1E, $F4
0000C1A2 00                         	even
0000C1A2 00                         	even
0000C1A2                            
0000C1A2                            ; ===========================================================================
0000C1A2                            ; ---------------------------------------------------------------------------
0000C1A2                            ; Object 2F - large moving platforms (MZ)
0000C1A2                            ; ---------------------------------------------------------------------------
0000C1A2                            
0000C1A2                            Obj2F:					; XREF: Obj_Index
0000C1A2 7000                       		moveq	#0,d0
0000C1A4 1028 0024                  		move.b	$24(a0),d0
0000C1A8 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000C1AC 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000C1B0                            ; ===========================================================================
0000C1B0 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000C1B2 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000C1B4                            
0000C1B4 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000C1B6 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000C1B8 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000C1BA 0140                       		dc.b 1,	$40
0000C1BC 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000C1BE 0220                       		dc.b 2,	$20
0000C1C0                            ; ===========================================================================
0000C1C0                            
0000C1C0                            Obj2F_Main:				; XREF: Obj2F_Index
0000C1C0 5428 0024                  		addq.b	#2,$24(a0)
0000C1C4 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000C1CC 317C C000 0002             		move.w	#$C000,2(a0)
0000C1D2 117C 0004 0001             		move.b	#4,1(a0)
0000C1D8 117C 0005 0018             		move.b	#5,$18(a0)
0000C1DE 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000C1E4 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C1EA 7000                       		moveq	#0,d0
0000C1EC 1028 0028                  		move.b	$28(a0),d0
0000C1F0 E448                       		lsr.w	#2,d0
0000C1F2 0240 001C                  		andi.w	#$1C,d0
0000C1F6 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000C1FA 3019                       		move.w	(a1)+,d0
0000C1FC 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000C200 214A 0030                  		move.l	a2,$30(a0)
0000C204 1159 001A                  		move.b	(a1)+,$1A(a0)
0000C208 1151 0019                  		move.b	(a1),$19(a0)
0000C20C 0228 000F 0028             		andi.b	#$F,$28(a0)
0000C212 117C 0040 0016             		move.b	#$40,$16(a0)
0000C218 08E8 0004 0001             		bset	#4,1(a0)
0000C21E                            
0000C21E                            Obj2F_Action:				; XREF: Obj2F_Index
0000C21E 6100 0000                  		bsr.w	Obj2F_Types
0000C222 4A28 0025                  		tst.b	$25(a0)
0000C226 6700                       		beq.s	Obj2F_Solid
0000C228 7200                       		moveq	#0,d1
0000C22A 1228 0019                  		move.b	$19(a0),d1
0000C22E 0641 000B                  		addi.w	#$B,d1
0000C232 6100 C4AA                  		bsr.w	ExitPlatform
0000C236 0829 0003 0022             		btst	#3,$22(a1)
0000C23C 6600 0000                  		bne.w	Obj2F_Slope
0000C240 4228 0025                  		clr.b	$25(a0)
0000C244 6000                       		bra.s	Obj2F_Display
0000C246                            ; ===========================================================================
0000C246                            
0000C246                            Obj2F_Slope:				; XREF: Obj2F_Action
0000C246 7200                       		moveq	#0,d1
0000C248 1228 0019                  		move.b	$19(a0),d1
0000C24C 0641 000B                  		addi.w	#$B,d1
0000C250 2468 0030                  		movea.l	$30(a0),a2
0000C254 3428 0008                  		move.w	8(a0),d2
0000C258 6100 D45A                  		bsr.w	SlopeObject2
0000C25C 6000                       		bra.s	Obj2F_Display
0000C25E                            ; ===========================================================================
0000C25E                            
0000C25E                            Obj2F_Solid:				; XREF: Obj2F_Action
0000C25E 7200                       		moveq	#0,d1
0000C260 1228 0019                  		move.b	$19(a0),d1
0000C264 0641 000B                  		addi.w	#$B,d1
0000C268 343C 0020                  		move.w	#$20,d2
0000C26C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000C272 6600                       		bne.s	loc_AF8E
0000C274 343C 0030                  		move.w	#$30,d2
0000C278                            
0000C278                            loc_AF8E:
0000C278 2468 0030                  		movea.l	$30(a0),a2
0000C27C 6100 0000                  		bsr.w	SolidObject2F
0000C280                            
0000C280                            Obj2F_Display:				; XREF: Obj2F_Action
0000C280 6100 0000                  		bsr.w	DisplaySprite
0000C284 6000 0000                  		bra.w	Obj2F_ChkDel
0000C288                            
0000C288                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C288                            
0000C288                            
0000C288                            Obj2F_Types:				; XREF: Obj2F_Action
0000C288 7000                       		moveq	#0,d0
0000C28A 1028 0028                  		move.b	$28(a0),d0
0000C28E 0240 0007                  		andi.w	#7,d0
0000C292 D040                       		add.w	d0,d0
0000C294 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000C298 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000C29C                            ; End of function Obj2F_Types
0000C29C                            
0000C29C                            ; ===========================================================================
0000C29C 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000C29E 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000C2A0 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000C2A2 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000C2A4 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000C2A6 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000C2A8                            ; ===========================================================================
0000C2A8                            
0000C2A8                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000C2A8 4E75                       		rts			; type 00 platform doesn't move
0000C2AA                            ; ===========================================================================
0000C2AA                            
0000C2AA                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000C2AA 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000C2AE 323C 0020                  		move.w	#$20,d1
0000C2B2 6000                       		bra.s	Obj2F_Move
0000C2B4                            ; ===========================================================================
0000C2B4                            
0000C2B4                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000C2B4 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000C2B8 323C 0030                  		move.w	#$30,d1
0000C2BC 6000                       		bra.s	Obj2F_Move
0000C2BE                            ; ===========================================================================
0000C2BE                            
0000C2BE                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000C2BE 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000C2C2 323C 0040                  		move.w	#$40,d1
0000C2C6 6000                       		bra.s	Obj2F_Move
0000C2C8                            ; ===========================================================================
0000C2C8                            
0000C2C8                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000C2C8 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000C2CC 323C 0060                  		move.w	#$60,d1
0000C2D0                            
0000C2D0                            Obj2F_Move:
0000C2D0 0828 0003 0028             		btst	#3,$28(a0)
0000C2D6 6700                       		beq.s	loc_AFF2
0000C2D8 4440                       		neg.w	d0
0000C2DA D041                       		add.w	d1,d0
0000C2DC                            
0000C2DC                            loc_AFF2:
0000C2DC 3228 002C                  		move.w	$2C(a0),d1
0000C2E0 9240                       		sub.w	d0,d1
0000C2E2 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000C2E6 4E75                       		rts	
0000C2E8                            ; ===========================================================================
0000C2E8                            
0000C2E8                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000C2E8 1028 0034                  		move.b	$34(a0),d0
0000C2EC 4A28 0025                  		tst.b	$25(a0)
0000C2F0 6600                       		bne.s	loc_B010
0000C2F2 5500                       		subq.b	#2,d0
0000C2F4 6400                       		bcc.s	loc_B01C
0000C2F6 7000                       		moveq	#0,d0
0000C2F8 6000                       		bra.s	loc_B01C
0000C2FA                            ; ===========================================================================
0000C2FA                            
0000C2FA                            loc_B010:
0000C2FA 5800                       		addq.b	#4,d0
0000C2FC 0C00 0040                  		cmpi.b	#$40,d0
0000C300 6500                       		bcs.s	loc_B01C
0000C302 103C 0040                  		move.b	#$40,d0
0000C306                            
0000C306                            loc_B01C:
0000C306 1140 0034                  		move.b	d0,$34(a0)
0000C30A 4EB9 0000 29F6             		jsr	(CalcSine).l
0000C310 E848                       		lsr.w	#4,d0
0000C312 3200                       		move.w	d0,d1
0000C314 D068 002C                  		add.w	$2C(a0),d0
0000C318 3140 000C                  		move.w	d0,$C(a0)
0000C31C 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000C322 6600                       		bne.s	loc_B07A
0000C324 4A28 0035                  		tst.b	$35(a0)
0000C328 6600                       		bne.s	loc_B07A
0000C32A 117C 0001 0035             		move.b	#1,$35(a0)
0000C330 6100 0000                  		bsr.w	SingleObjLoad2
0000C334 6600                       		bne.s	loc_B07A
0000C336 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000C33A 3368 0008 0008             		move.w	8(a0),8(a1)
0000C340 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000C346 5069 002C                  		addq.w	#8,$2C(a1)
0000C34A 5769 002C                  		subq.w	#3,$2C(a1)
0000C34E 0469 0040 0008             		subi.w	#$40,8(a1)
0000C354 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000C35A 2348 0038                  		move.l	a0,$38(a1)
0000C35E 2448                       		movea.l	a0,a2
0000C360 6100                       		bsr.s	sub_B09C
0000C362                            
0000C362                            loc_B07A:
0000C362 7400                       		moveq	#0,d2
0000C364 45E8 0036                  		lea	$36(a0),a2
0000C368 141A                       		move.b	(a2)+,d2
0000C36A 5302                       		subq.b	#1,d2
0000C36C 6500                       		bcs.s	locret_B09A
0000C36E                            
0000C36E                            loc_B086:
0000C36E 7000                       		moveq	#0,d0
0000C370 101A                       		move.b	(a2)+,d0
0000C372 ED48                       		lsl.w	#6,d0
0000C374 0640 D000                  		addi.w	#-$3000,d0
0000C378 3240                       		movea.w	d0,a1
0000C37A 3341 003C                  		move.w	d1,$3C(a1)
0000C37E 51CA FFEE                  		dbf	d2,loc_B086
0000C382                            
0000C382                            locret_B09A:
0000C382 4E75                       		rts	
0000C384                            
0000C384                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C384                            
0000C384                            
0000C384                            sub_B09C:
0000C384 45EA 0036                  		lea	$36(a2),a2
0000C388 7000                       		moveq	#0,d0
0000C38A 1012                       		move.b	(a2),d0
0000C38C 5212                       		addq.b	#1,(a2)
0000C38E 45F2 0001                  		lea	1(a2,d0.w),a2
0000C392 3009                       		move.w	a1,d0
0000C394 0440 D000                  		subi.w	#-$3000,d0
0000C398 EC48                       		lsr.w	#6,d0
0000C39A 0240 007F                  		andi.w	#$7F,d0
0000C39E 1480                       		move.b	d0,(a2)
0000C3A0 4E75                       		rts	
0000C3A2                            ; End of function sub_B09C
0000C3A2                            
0000C3A2                            ; ===========================================================================
0000C3A2                            
0000C3A2                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000C3A2 4A28 0035                  		tst.b	$35(a0)
0000C3A6 6700                       		beq.s	loc_B0C6
0000C3A8 4A28 0001                  		tst.b	1(a0)
0000C3AC 6A00                       		bpl.s	Obj2F_DelFlames
0000C3AE                            
0000C3AE                            loc_B0C6:
0000C3AE 3028 002A                  		move.w	$2A(a0),d0
0000C3B2 0240 FF80                  		andi.w	#$FF80,d0
0000C3B6 3238 F700                  		move.w	($FFFFF700).w,d1
0000C3BA 0441 0080                  		subi.w	#$80,d1
0000C3BE 0241 FF80                  		andi.w	#$FF80,d1
0000C3C2 9041                       		sub.w	d1,d0
0000C3C4 0C40 0280                  		cmpi.w	#$280,d0
0000C3C8 6300                       		bls.s	Obj2F_NoDel
0000C3CA 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000C3CE 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000C3D2 3440                       		movea.w	d0,a2	; load address into a2
0000C3D4 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000C3D8 6000 0000                  		bra.w	DeleteObject	; and delete object
0000C3DC                            
0000C3DC                            Obj2F_NoDel:
0000C3DC 4E75                       		rts	
0000C3DE                            ; ===========================================================================
0000C3DE                            
0000C3DE                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000C3DE 7400                       		moveq	#0,d2
0000C3E0                            
0000C3E0                            loc_B0E8:
0000C3E0 45E8 0036                  		lea	$36(a0),a2
0000C3E4 1412                       		move.b	(a2),d2
0000C3E6 421A                       		clr.b	(a2)+
0000C3E8 5302                       		subq.b	#1,d2
0000C3EA 6500                       		bcs.s	locret_B116
0000C3EC                            
0000C3EC                            loc_B0F4:
0000C3EC 7000                       		moveq	#0,d0
0000C3EE 1012                       		move.b	(a2),d0
0000C3F0 421A                       		clr.b	(a2)+
0000C3F2 ED48                       		lsl.w	#6,d0
0000C3F4 0640 D000                  		addi.w	#-$3000,d0
0000C3F8 3240                       		movea.w	d0,a1
0000C3FA 6100 0000                  		bsr.w	DeleteObject2
0000C3FE 51CA FFEC                  		dbf	d2,loc_B0F4
0000C402 117C 0000 0035             		move.b	#0,$35(a0)
0000C408 117C 0000 0034             		move.b	#0,$34(a0)
0000C40E                            
0000C40E                            locret_B116:
0000C40E 4E75                       		rts	
0000C410                            ; ===========================================================================
0000C410                            ; ---------------------------------------------------------------------------
0000C410                            ; Collision data for large moving platforms (MZ)
0000C410                            ; ---------------------------------------------------------------------------
0000C410                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000C45C                            		even
0000C45C                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000C488                            		even
0000C488                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000C4D4                            		even
0000C4D4                            ; ===========================================================================
0000C4D4                            ; ---------------------------------------------------------------------------
0000C4D4                            ; Object 35 - fireball that sits on the	floor (MZ)
0000C4D4                            ; (appears when	you walk on sinking platforms)
0000C4D4                            ; ---------------------------------------------------------------------------
0000C4D4                            
0000C4D4                            Obj35:					; XREF: Obj_Index
0000C4D4 7000                       		moveq	#0,d0
0000C4D6 1028 0024                  		move.b	$24(a0),d0
0000C4DA 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000C4DE 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000C4E2                            ; ===========================================================================
0000C4E2 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000C4E4 0000                       		dc.w loc_B238-Obj35_Index
0000C4E6 0000                       		dc.w Obj35_Move-Obj35_Index
0000C4E8                            ; ===========================================================================
0000C4E8                            
0000C4E8                            Obj35_Main:				; XREF: Obj35_Index
0000C4E8 5428 0024                  		addq.b	#2,$24(a0)
0000C4EC 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000C4F4 317C 0345 0002             		move.w	#$345,2(a0)
0000C4FA 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C500 117C 0004 0001             		move.b	#4,1(a0)
0000C506 117C 0001 0018             		move.b	#1,$18(a0)
0000C50C 117C 008B 0020             		move.b	#$8B,$20(a0)
0000C512 117C 0008 0019             		move.b	#8,$19(a0)
0000C518 303C 00C8                  		move.w	#$C8,d0
0000C51C 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play flame sound
0000C522 4A28 0028                  		tst.b	$28(a0)
0000C526 6700                       		beq.s	loc_B238
0000C528 5428 0024                  		addq.b	#2,$24(a0)
0000C52C 6000 0000                  		bra.w	Obj35_Move
0000C530                            ; ===========================================================================
0000C530                            
0000C530                            loc_B238:				; XREF: Obj35_Index
0000C530 2268 0030                  		movea.l	$30(a0),a1
0000C534 3228 0008                  		move.w	8(a0),d1
0000C538 9268 002A                  		sub.w	$2A(a0),d1
0000C53C 0641 000C                  		addi.w	#$C,d1
0000C540 3001                       		move.w	d1,d0
0000C542 E248                       		lsr.w	#1,d0
0000C544 1031 0000                  		move.b	(a1,d0.w),d0
0000C548 4440                       		neg.w	d0
0000C54A D068 002C                  		add.w	$2C(a0),d0
0000C54E 3400                       		move.w	d0,d2
0000C550 D068 003C                  		add.w	$3C(a0),d0
0000C554 3140 000C                  		move.w	d0,$C(a0)
0000C558 0C41 0084                  		cmpi.w	#$84,d1
0000C55C 6400                       		bcc.s	loc_B2B0
0000C55E 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C566 0C41 0080                  		cmpi.w	#$80,d1
0000C56A 6400                       		bcc.s	loc_B2B0
0000C56C 2028 0008                  		move.l	8(a0),d0
0000C570 0680 0008 0000             		addi.l	#$80000,d0
0000C576 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000C57C 6600                       		bne.s	loc_B2B0
0000C57E 6100 0000                  		bsr.w	SingleObjLoad2
0000C582 6600                       		bne.s	loc_B2B0
0000C584 12BC 0035                  		move.b	#$35,0(a1)
0000C588 3368 0008 0008             		move.w	8(a0),8(a1)
0000C58E 3342 002C                  		move.w	d2,$2C(a1)
0000C592 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000C598 137C 0001 0028             		move.b	#1,$28(a1)
0000C59E 2468 0038                  		movea.l	$38(a0),a2
0000C5A2 6100 FDE0                  		bsr.w	sub_B09C
0000C5A6                            
0000C5A6                            loc_B2B0:
0000C5A6 6000                       		bra.s	Obj35_Animate
0000C5A8                            ; ===========================================================================
0000C5A8                            
0000C5A8                            Obj35_Move:				; XREF: Obj35_Index
0000C5A8 3028 002C                  		move.w	$2C(a0),d0
0000C5AC D068 003C                  		add.w	$3C(a0),d0
0000C5B0 3140 000C                  		move.w	d0,$C(a0)
0000C5B4                            
0000C5B4                            Obj35_Animate:				; XREF: loc_B238
0000C5B4 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000C5BA 6100 F40E                  		bsr.w	AnimateSprite
0000C5BE 6000 0000                  		bra.w	DisplaySprite
0000C5C2                            ; ===========================================================================
0000C5C2                            Ani_obj35:
0000C5C2                            	include "_anim\obj35.asm"
0000C5C2                            ; ---------------------------------------------------------------------------
0000C5C2                            ; Animation script - fireball that sits on the	floor (MZ)
0000C5C2                            ; ---------------------------------------------------------------------------
0000C5C2 0000                       		dc.w byte_B2CE-Ani_obj35
0000C5C4 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000C5CA                            		even
0000C5CA                            		even
0000C5CA                            
0000C5CA                            ; ---------------------------------------------------------------------------
0000C5CA                            ; Sprite mappings - large moving platforms (MZ)
0000C5CA                            ; ---------------------------------------------------------------------------
0000C5CA                            Map_obj2F:
0000C5CA                            	include "_maps\obj2F.asm"
0000C5CA                            ; ---------------------------------------------------------------------------
0000C5CA                            ; Sprite mappings - large moving platforms (MZ)
0000C5CA                            ; ---------------------------------------------------------------------------
0000C5CA 0000                       		dc.w byte_B2DA-Map_obj2F
0000C5CC 0000                       		dc.w byte_B31C-Map_obj2F
0000C5CE 0000                       		dc.w byte_B34F-Map_obj2F
0000C5D0 0D                         byte_B2DA:	dc.b $D
0000C5D1 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000C5D6 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000C5DB 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000C5E0 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000C5E5 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000C5EA F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C5EF D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000C5F4 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000C5F9 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000C5FE F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000C603 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000C608 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000C60D F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000C612 0A                         byte_B31C:	dc.b $A
0000C613 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000C618 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000C61D 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000C622 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000C627 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000C62C F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C631 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000C636 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000C63B C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000C640 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000C645 06                         byte_B34F:	dc.b 6
0000C646 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000C64B F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C650 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000C655 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000C65A F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000C65F 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000C664                            		even
0000C664                            		even
0000C664                            
0000C664                            ; ---------------------------------------------------------------------------
0000C664                            ; Sprite mappings - lava balls (MZ, SLZ)
0000C664                            ; ---------------------------------------------------------------------------
0000C664                            Map_obj14:
0000C664                            	include "_maps\obj14.asm"
0000C664                            ; ---------------------------------------------------------------------------
0000C664                            ; Sprite mappings - lava balls (MZ, SLZ)
0000C664                            ; ---------------------------------------------------------------------------
0000C664 0000                       		dc.w byte_B37A-Map_obj14
0000C666 0000                       		dc.w byte_B380-Map_obj14
0000C668 0000                       		dc.w byte_B386-Map_obj14
0000C66A 0000                       		dc.w byte_B38C-Map_obj14
0000C66C 0000                       		dc.w byte_B392-Map_obj14
0000C66E 0000                       		dc.w byte_B398-Map_obj14
0000C670 01                         byte_B37A:	dc.b 1
0000C671 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000C676 01                         byte_B380:	dc.b 1
0000C677 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000C67C 01                         byte_B386:	dc.b 1
0000C67D F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000C682 01                         byte_B38C:	dc.b 1
0000C683 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000C688 01                         byte_B392:	dc.b 1
0000C689 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000C68E 01                         byte_B398:	dc.b 1
0000C68F F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000C694                            		even
0000C694                            		even
0000C694                            
0000C694                            ; ===========================================================================
0000C694                            ; ---------------------------------------------------------------------------
0000C694                            ; Object 30 - large green glassy blocks	(MZ)
0000C694                            ; ---------------------------------------------------------------------------
0000C694                            
0000C694                            Obj30:					; XREF: Obj_Index
0000C694 7000                       		moveq	#0,d0
0000C696 1028 0024                  		move.b	$24(a0),d0
0000C69A 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000C69E 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000C6A2 3028 0008                  		move.w	8(a0),d0
0000C6A6 0240 FF80                  		andi.w	#$FF80,d0
0000C6AA 3238 F700                  		move.w	($FFFFF700).w,d1
0000C6AE 0441 0080                  		subi.w	#$80,d1
0000C6B2 0241 FF80                  		andi.w	#$FF80,d1
0000C6B6 9041                       		sub.w	d1,d0
0000C6B8 0C40 0280                  		cmpi.w	#$280,d0
0000C6BC 6300 0000                  		bls.w	DisplaySprite
0000C6C0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000C6C4 6700                       		beq.s	Obj30_Delete		; if it's zero, don't remember object
0000C6C6 3440                       		movea.w	d0,a2	; load address into a2
0000C6C8 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000C6CC                            
0000C6CC                            Obj30_Delete:
0000C6CC 6000 0000                  		bra.w	DeleteObject
0000C6D0                            ; ===========================================================================
0000C6D0 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000C6D2 0000                       		dc.w Obj30_Block012-Obj30_Index
0000C6D4 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000C6D6 0000                       		dc.w Obj30_Block34-Obj30_Index
0000C6D8 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000C6DA                            
0000C6DA 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000C6DD 0400 01                    		dc.b 4,	0, 1
0000C6E0 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000C6E3 0800 01                    		dc.b 8,	0, 1
0000C6E6                            ; ===========================================================================
0000C6E6                            
0000C6E6                            Obj30_Main:				; XREF: Obj30_Index
0000C6E6 45F9 0000 C6DA             		lea	(Obj30_Vars1).l,a2
0000C6EC 7201                       		moveq	#1,d1
0000C6EE 117C 0048 0016             		move.b	#$48,$16(a0)
0000C6F4 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000C6FA 6500                       		bcs.s	loc_B40C	; if yes, branch
0000C6FC 45F9 0000 C6E0             		lea	(Obj30_Vars2).l,a2
0000C702 7201                       		moveq	#1,d1
0000C704 117C 0038 0016             		move.b	#$38,$16(a0)
0000C70A                            
0000C70A                            loc_B40C:
0000C70A 2248                       		movea.l	a0,a1
0000C70C 6000                       		bra.s	Obj30_Load	; load main object
0000C70E                            ; ===========================================================================
0000C70E                            
0000C70E                            Obj30_Loop:
0000C70E 6100 0000                  		bsr.w	SingleObjLoad2
0000C712 6600                       		bne.s	loc_B480
0000C714                            
0000C714                            Obj30_Load:				; XREF: Obj30_Main
0000C714 135A 0024                  		move.b	(a2)+,$24(a1)
0000C718 12BC 0030                  		move.b	#$30,0(a1)
0000C71C 3368 0008 0008             		move.w	8(a0),8(a1)
0000C722 101A                       		move.b	(a2)+,d0
0000C724 4880                       		ext.w	d0
0000C726 D068 000C                  		add.w	$C(a0),d0
0000C72A 3340 000C                  		move.w	d0,$C(a1)
0000C72E 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000C736 337C C38E 0002             		move.w	#$C38E,2(a1)
0000C73C 137C 0004 0001             		move.b	#4,1(a1)
0000C742 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C748 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C74E 137C 0020 0019             		move.b	#$20,$19(a1)
0000C754 137C 0004 0018             		move.b	#4,$18(a1)
0000C75A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C75E 2348 003C                  		move.l	a0,$3C(a1)
0000C762 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000C766                            
0000C766 137C 0010 0019             		move.b	#$10,$19(a1)
0000C76C 137C 0003 0018             		move.b	#3,$18(a1)
0000C772 5029 0028                  		addq.b	#8,$28(a1)
0000C776 0229 000F 0028             		andi.b	#$F,$28(a1)
0000C77C                            
0000C77C                            loc_B480:
0000C77C 317C 0090 0032             		move.w	#$90,$32(a0)
0000C782 08E8 0004 0001             		bset	#4,1(a0)
0000C788                            
0000C788                            Obj30_Block012:				; XREF: Obj30_Index
0000C788 6100 0000                  		bsr.w	Obj30_Types
0000C78C 323C 002B                  		move.w	#$2B,d1
0000C790 343C 0048                  		move.w	#$48,d2
0000C794 363C 0049                  		move.w	#$49,d3
0000C798 3828 0008                  		move.w	8(a0),d4
0000C79C 6000 0000                  		bra.w	SolidObject
0000C7A0                            ; ===========================================================================
0000C7A0                            
0000C7A0                            Obj30_Reflect012:			; XREF: Obj30_Index
0000C7A0 2268 003C                  		movea.l	$3C(a0),a1
0000C7A4 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C7AA 6000 0000                  		bra.w	Obj30_Types
0000C7AE                            ; ===========================================================================
0000C7AE                            
0000C7AE                            Obj30_Block34:				; XREF: Obj30_Index
0000C7AE 6100 0000                  		bsr.w	Obj30_Types
0000C7B2 323C 002B                  		move.w	#$2B,d1
0000C7B6 343C 0038                  		move.w	#$38,d2
0000C7BA 363C 0039                  		move.w	#$39,d3
0000C7BE 3828 0008                  		move.w	8(a0),d4
0000C7C2 6000 0000                  		bra.w	SolidObject
0000C7C6                            ; ===========================================================================
0000C7C6                            
0000C7C6                            Obj30_Reflect34:			; XREF: Obj30_Index
0000C7C6 2268 003C                  		movea.l	$3C(a0),a1
0000C7CA 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C7D0 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000C7D6 6000 0002                  		bra.w	*+4
0000C7DA                            
0000C7DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C7DA                            
0000C7DA                            
0000C7DA                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000C7DA 7000                       		moveq	#0,d0
0000C7DC 1028 0028                  		move.b	$28(a0),d0
0000C7E0 0240 0007                  		andi.w	#7,d0
0000C7E4 D040                       		add.w	d0,d0
0000C7E6 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000C7EA 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000C7EE                            ; End of function Obj30_Types
0000C7EE                            
0000C7EE                            ; ===========================================================================
0000C7EE 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000C7F0 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000C7F2 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000C7F4 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000C7F6 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000C7F8                            ; ===========================================================================
0000C7F8                            
0000C7F8                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000C7F8 4E75                       		rts	
0000C7FA                            ; ===========================================================================
0000C7FA                            
0000C7FA                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000C7FA 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C7FE 323C 0040                  		move.w	#$40,d1
0000C802 6000                       		bra.s	loc_B514
0000C804                            ; ===========================================================================
0000C804                            
0000C804                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000C804 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C808 323C 0040                  		move.w	#$40,d1
0000C80C 4440                       		neg.w	d0
0000C80E D041                       		add.w	d1,d0
0000C810                            
0000C810                            loc_B514:				; XREF: Obj30_Type01
0000C810 0828 0003 0028             		btst	#3,$28(a0)
0000C816 6700                       		beq.s	loc_B526
0000C818 4440                       		neg.w	d0
0000C81A D041                       		add.w	d1,d0
0000C81C E208                       		lsr.b	#1,d0
0000C81E 0640 0020                  		addi.w	#$20,d0
0000C822                            
0000C822                            loc_B526:
0000C822 6000 0000                  		bra.w	loc_B5EE
0000C826                            ; ===========================================================================
0000C826                            
0000C826                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000C826 0828 0003 0028             		btst	#3,$28(a0)
0000C82C 6700                       		beq.s	loc_B53E
0000C82E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C832 0440 0010                  		subi.w	#$10,d0
0000C836 6000 0000                  		bra.w	loc_B5EE
0000C83A                            ; ===========================================================================
0000C83A                            
0000C83A                            loc_B53E:
0000C83A 0828 0003 0022             		btst	#3,$22(a0)
0000C840 6600                       		bne.s	loc_B54E
0000C842 08A8 0000 0034             		bclr	#0,$34(a0)
0000C848 6000                       		bra.s	loc_B582
0000C84A                            ; ===========================================================================
0000C84A                            
0000C84A                            loc_B54E:
0000C84A 4A28 0034                  		tst.b	$34(a0)
0000C84E 6600                       		bne.s	loc_B582
0000C850 117C 0001 0034             		move.b	#1,$34(a0)
0000C856 08E8 0000 0035             		bset	#0,$35(a0)
0000C85C 6700                       		beq.s	loc_B582
0000C85E 08E8 0007 0034             		bset	#7,$34(a0)
0000C864 317C 0010 0036             		move.w	#$10,$36(a0)
0000C86A 117C 000A 0038             		move.b	#$A,$38(a0)
0000C870 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000C876 6600                       		bne.s	loc_B582
0000C878 317C 0040 0036             		move.w	#$40,$36(a0)
0000C87E                            
0000C87E                            loc_B582:
0000C87E 4A28 0034                  		tst.b	$34(a0)
0000C882 6A00                       		bpl.s	loc_B5AA
0000C884 4A28 0038                  		tst.b	$38(a0)
0000C888 6700                       		beq.s	loc_B594
0000C88A 5328 0038                  		subq.b	#1,$38(a0)
0000C88E 6600                       		bne.s	loc_B5AA
0000C890                            
0000C890                            loc_B594:
0000C890 4A68 0032                  		tst.w	$32(a0)
0000C894 6700                       		beq.s	loc_B5A4
0000C896 5368 0032                  		subq.w	#1,$32(a0)
0000C89A 5368 0036                  		subq.w	#1,$36(a0)
0000C89E 6600                       		bne.s	loc_B5AA
0000C8A0                            
0000C8A0                            loc_B5A4:
0000C8A0 08A8 0007 0034             		bclr	#7,$34(a0)
0000C8A6                            
0000C8A6                            loc_B5AA:
0000C8A6 3028 0032                  		move.w	$32(a0),d0
0000C8AA 6000                       		bra.s	loc_B5EE
0000C8AC                            ; ===========================================================================
0000C8AC                            
0000C8AC                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000C8AC 0828 0003 0028             		btst	#3,$28(a0)
0000C8B2 6700                       		beq.s	Obj30_ChkSwitch
0000C8B4 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C8B8 0440 0010                  		subi.w	#$10,d0
0000C8BC 6000                       		bra.s	loc_B5EE
0000C8BE                            ; ===========================================================================
0000C8BE                            
0000C8BE                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000C8BE 4A28 0034                  		tst.b	$34(a0)
0000C8C2 6600                       		bne.s	loc_B5E0
0000C8C4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000C8C8 7000                       		moveq	#0,d0
0000C8CA 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000C8CE E848                       		lsr.w	#4,d0		; read only the	first nybble
0000C8D0 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000C8D4 6700                       		beq.s	loc_B5EA	; if not, branch
0000C8D6 117C 0001 0034             		move.b	#1,$34(a0)
0000C8DC                            
0000C8DC                            loc_B5E0:
0000C8DC 4A68 0032                  		tst.w	$32(a0)
0000C8E0 6700                       		beq.s	loc_B5EA
0000C8E2 5568 0032                  		subq.w	#2,$32(a0)
0000C8E6                            
0000C8E6                            loc_B5EA:
0000C8E6 3028 0032                  		move.w	$32(a0),d0
0000C8EA                            
0000C8EA                            loc_B5EE:
0000C8EA 3228 0030                  		move.w	$30(a0),d1
0000C8EE 9240                       		sub.w	d0,d1
0000C8F0 3141 000C                  		move.w	d1,$C(a0)
0000C8F4 4E75                       		rts	
0000C8F6                            ; ===========================================================================
0000C8F6                            ; ---------------------------------------------------------------------------
0000C8F6                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C8F6                            ; ---------------------------------------------------------------------------
0000C8F6                            Map_obj30:
0000C8F6                            	include "_maps\obj30.asm"
0000C8F6                            ; ---------------------------------------------------------------------------
0000C8F6                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C8F6                            ; ---------------------------------------------------------------------------
0000C8F6 0000                       		dc.w byte_B600-Map_obj30
0000C8F8 0000                       		dc.w byte_B63D-Map_obj30
0000C8FA 0000                       		dc.w byte_B648-Map_obj30
0000C8FC 0C                         byte_B600:	dc.b $C
0000C8FD B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000C902 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000C907 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000C90C C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000C911 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000C916 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000C91B 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000C920 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000C925 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000C92A 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000C92F 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000C934 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000C939 02                         byte_B63D:	dc.b 2
0000C93A 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000C93F 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000C944 0A                         byte_B648:	dc.b $A
0000C945 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000C94A C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000C94F D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000C954 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000C959 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000C95E F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000C963 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000C968 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000C96D 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000C972 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000C978 00                         		even
0000C978 00                         		even
0000C978                            
0000C978                            ; ===========================================================================
0000C978                            ; ---------------------------------------------------------------------------
0000C978                            ; Object 31 - stomping metal blocks on chains (MZ)
0000C978                            ; ---------------------------------------------------------------------------
0000C978                            
0000C978                            Obj31:					; XREF: Obj_Index
0000C978 7000                       		moveq	#0,d0
0000C97A 1028 0024                  		move.b	$24(a0),d0
0000C97E 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000C982 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000C986                            ; ===========================================================================
0000C986 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000C988 0000                       		dc.w loc_B798-Obj31_Index
0000C98A 0000                       		dc.w loc_B7FE-Obj31_Index
0000C98C 0000                       		dc.w Obj31_Display2-Obj31_Index
0000C98E 0000                       		dc.w loc_B7E2-Obj31_Index
0000C990                            
0000C990 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000C992 0100                       		dc.b 1,	0
0000C994                            
0000C994 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000C997 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000C99A 08CC 03                    		dc.b 8,	$CC, 3
0000C99D 06F0 02                    		dc.b 6,	$F0, 2
0000C9A0                            
0000C9A0 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000C9A4 5000 7800                  		dc.w $5000, $7800
0000C9A8 3800 5800                  		dc.w $3800, $5800
0000C9AC B800                       		dc.w $B800
0000C9AE                            ; ===========================================================================
0000C9AE                            
0000C9AE                            Obj31_Main:				; XREF: Obj31_Index
0000C9AE 7000                       		moveq	#0,d0
0000C9B0 1028 0028                  		move.b	$28(a0),d0
0000C9B4 6A00                       		bpl.s	loc_B6CE
0000C9B6 0240 007F                  		andi.w	#$7F,d0
0000C9BA D040                       		add.w	d0,d0
0000C9BC 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000C9C0 115A 003A                  		move.b	(a2)+,$3A(a0)
0000C9C4 101A                       		move.b	(a2)+,d0
0000C9C6 1140 0028                  		move.b	d0,$28(a0)
0000C9CA                            
0000C9CA                            loc_B6CE:
0000C9CA 0200 000F                  		andi.b	#$F,d0
0000C9CE D040                       		add.w	d0,d0
0000C9D0 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000C9D4 4A40                       		tst.w	d0
0000C9D6 6600                       		bne.s	loc_B6E0
0000C9D8 3142 0032                  		move.w	d2,$32(a0)
0000C9DC                            
0000C9DC                            loc_B6E0:
0000C9DC 45F9 0000 C994             		lea	(Obj31_Var).l,a2
0000C9E2 2248                       		movea.l	a0,a1
0000C9E4 7203                       		moveq	#3,d1
0000C9E6 6000                       		bra.s	Obj31_MakeStomper
0000C9E8                            ; ===========================================================================
0000C9E8                            
0000C9E8                            Obj31_Loop:
0000C9E8 6100 0000                  		bsr.w	SingleObjLoad2
0000C9EC 6600 0000                  		bne.w	Obj31_SetSize
0000C9F0                            
0000C9F0                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000C9F0 135A 0024                  		move.b	(a2)+,$24(a1)
0000C9F4 12BC 0031                  		move.b	#$31,0(a1)
0000C9F8 3368 0008 0008             		move.w	8(a0),8(a1)
0000C9FE 101A                       		move.b	(a2)+,d0
0000CA00 4880                       		ext.w	d0
0000CA02 D068 000C                  		add.w	$C(a0),d0
0000CA06 3340 000C                  		move.w	d0,$C(a1)
0000CA0A 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000CA12 337C 0300 0002             		move.w	#$300,2(a1)
0000CA18 137C 0004 0001             		move.b	#4,1(a1)
0000CA1E 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000CA24 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000CA2A 137C 0010 0019             		move.b	#$10,$19(a1)
0000CA30 3342 0034                  		move.w	d2,$34(a1)
0000CA34 137C 0004 0018             		move.b	#4,$18(a1)
0000CA3A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CA3E 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000CA44 6600                       		bne.s	loc_B76A
0000CA46 5341                       		subq.w	#1,d1
0000CA48 1028 0028                  		move.b	$28(a0),d0
0000CA4C 0240 00F0                  		andi.w	#$F0,d0
0000CA50 0C40 0020                  		cmpi.w	#$20,d0
0000CA54 679A                       		beq.s	Obj31_MakeStomper
0000CA56 137C 0038 0019             		move.b	#$38,$19(a1)
0000CA5C 137C 0090 0020             		move.b	#$90,$20(a1)
0000CA62 5241                       		addq.w	#1,d1
0000CA64                            
0000CA64                            loc_B76A:
0000CA64 2348 003C                  		move.l	a0,$3C(a1)
0000CA68 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000CA6C                            
0000CA6C 137C 0003 0018             		move.b	#3,$18(a1)
0000CA72                            
0000CA72                            Obj31_SetSize:
0000CA72 7000                       		moveq	#0,d0
0000CA74 1028 0028                  		move.b	$28(a0),d0
0000CA78 E648                       		lsr.w	#3,d0
0000CA7A 0200 000E                  		andi.b	#$E,d0
0000CA7E 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000CA82 115A 0019                  		move.b	(a2)+,$19(a0)
0000CA86 115A 001A                  		move.b	(a2)+,$1A(a0)
0000CA8A 6000                       		bra.s	loc_B798
0000CA8C                            ; ===========================================================================
0000CA8C 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000CA8E 3009                       		dc.b $30, 9
0000CA90 100A                       		dc.b $10, $A
0000CA92                            ; ===========================================================================
0000CA92                            
0000CA92                            loc_B798:				; XREF: Obj31_Index
0000CA92 6100 0000                  		bsr.w	Obj31_Types
0000CA96 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000CA9C 7200                       		moveq	#0,d1
0000CA9E 1228 0019                  		move.b	$19(a0),d1
0000CAA2 0641 000B                  		addi.w	#$B,d1
0000CAA6 343C 000C                  		move.w	#$C,d2
0000CAAA 363C 000D                  		move.w	#$D,d3
0000CAAE 3828 0008                  		move.w	8(a0),d4
0000CAB2 6100 0000                  		bsr.w	SolidObject
0000CAB6 0828 0003 0022             		btst	#3,$22(a0)
0000CABC 6700                       		beq.s	Obj31_Display
0000CABE 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000CAC4 6400                       		bcc.s	Obj31_Display
0000CAC6 2448                       		movea.l	a0,a2
0000CAC8 41F8 D000                  		lea	($FFFFD000).w,a0
0000CACC 4EB9 0000 0000             		jsr	KillSonic
0000CAD2 204A                       		movea.l	a2,a0
0000CAD4 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0000CADA 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0000CAE0                            
0000CAE0                            Obj31_Display:
0000CAE0 6100 0000                  		bsr.w	DisplaySprite
0000CAE4 6000 0000                  		bra.w	Obj31_ChkDel
0000CAE8                            ; ===========================================================================
0000CAE8                            
0000CAE8                            loc_B7E2:				; XREF: Obj31_Index
0000CAE8 117C 0080 0016             		move.b	#$80,$16(a0)
0000CAEE 08E8 0004 0001             		bset	#4,1(a0)
0000CAF4 2268 003C                  		movea.l	$3C(a0),a1
0000CAF8 1029 0032                  		move.b	$32(a1),d0
0000CAFC EA08                       		lsr.b	#5,d0
0000CAFE 5600                       		addq.b	#3,d0
0000CB00 1140 001A                  		move.b	d0,$1A(a0)
0000CB04                            
0000CB04                            loc_B7FE:				; XREF: Obj31_Index
0000CB04 2268 003C                  		movea.l	$3C(a0),a1
0000CB08 7000                       		moveq	#0,d0
0000CB0A 1029 0032                  		move.b	$32(a1),d0
0000CB0E D068 0030                  		add.w	$30(a0),d0
0000CB12 3140 000C                  		move.w	d0,$C(a0)
0000CB16                            
0000CB16                            Obj31_Display2:				; XREF: Obj31_Index
0000CB16 6100 0000                  		bsr.w	DisplaySprite
0000CB1A                            
0000CB1A                            Obj31_ChkDel:				; XREF: Obj31_Display
0000CB1A 3028 0008                  		move.w	8(a0),d0
0000CB1E 0240 FF80                  		andi.w	#$FF80,d0
0000CB22 3238 F700                  		move.w	($FFFFF700).w,d1
0000CB26 0441 0080                  		subi.w	#$80,d1
0000CB2A 0241 FF80                  		andi.w	#$FF80,d1
0000CB2E 9041                       		sub.w	d1,d0
0000CB30 0C40 0280                  		cmpi.w	#$280,d0
0000CB34 6300                       		bls.s	Obj31_NoDel
0000CB36 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000CB3A 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000CB3E 3640                       		movea.w	d0,a3	; load address into a2
0000CB40 0893 0007                  		bclr	#7,(a3)	; clear respawn table entry, so object can be loaded again
0000CB44 6000 0000                  		bra.w	DeleteObject	; and delete object
0000CB48                            
0000CB48                            Obj31_NoDel:
0000CB48 4E75                       		rts	
0000CB4A                            ; ===========================================================================
0000CB4A                            
0000CB4A                            Obj31_Types:				; XREF: loc_B798
0000CB4A 1028 0028                  		move.b	$28(a0),d0
0000CB4E 0240 000F                  		andi.w	#$F,d0
0000CB52 D040                       		add.w	d0,d0
0000CB54 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000CB58 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000CB5C                            ; ===========================================================================
0000CB5C 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000CB5E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CB60 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CB62 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000CB64 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CB66 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000CB68 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CB6A                            ; ===========================================================================
0000CB6A                            
0000CB6A                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000CB6A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000CB6E 7000                       		moveq	#0,d0
0000CB70 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000CB74 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000CB78 6700                       		beq.s	loc_B8A8	; if not, branch
0000CB7A 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000CB7E 6A00                       		bpl.s	loc_B872
0000CB80 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000CB86 6700                       		beq.s	loc_B8A0
0000CB88                            
0000CB88                            loc_B872:
0000CB88 4A68 0032                  		tst.w	$32(a0)
0000CB8C 6700                       		beq.s	loc_B8A0
0000CB8E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CB92 0200 000F                  		andi.b	#$F,d0
0000CB96 6600                       		bne.s	loc_B892
0000CB98 4A28 0001                  		tst.b	1(a0)
0000CB9C 6A00                       		bpl.s	loc_B892
0000CB9E 303C 00C7                  		move.w	#$C7,d0
0000CBA2 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000CBA8                            
0000CBA8                            loc_B892:
0000CBA8 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CBAE 6400                       		bcc.s	Obj31_Restart
0000CBB0 317C 0000 0032             		move.w	#0,$32(a0)
0000CBB6                            
0000CBB6                            loc_B8A0:
0000CBB6 317C 0000 0012             		move.w	#0,$12(a0)
0000CBBC 6000                       		bra.s	Obj31_Restart
0000CBBE                            ; ===========================================================================
0000CBBE                            
0000CBBE                            loc_B8A8:				; XREF: Obj31_Type00
0000CBBE 3228 0034                  		move.w	$34(a0),d1
0000CBC2 B268 0032                  		cmp.w	$32(a0),d1
0000CBC6 6700                       		beq.s	Obj31_Restart
0000CBC8 3028 0012                  		move.w	$12(a0),d0
0000CBCC 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000CBD2 D168 0032                  		add.w	d0,$32(a0)
0000CBD6 B268 0032                  		cmp.w	$32(a0),d1
0000CBDA 6200                       		bhi.s	Obj31_Restart
0000CBDC 3141 0032                  		move.w	d1,$32(a0)
0000CBE0 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000CBE6 4A28 0001                  		tst.b	1(a0)
0000CBEA 6A00                       		bpl.s	Obj31_Restart
0000CBEC 303C 00BD                  		move.w	#$BD,d0
0000CBF0 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play stomping sound
0000CBF6                            
0000CBF6                            Obj31_Restart:
0000CBF6 7000                       		moveq	#0,d0
0000CBF8 1028 0032                  		move.b	$32(a0),d0
0000CBFC D068 0030                  		add.w	$30(a0),d0
0000CC00 3140 000C                  		move.w	d0,$C(a0)
0000CC04 4E75                       		rts	
0000CC06                            ; ===========================================================================
0000CC06                            
0000CC06                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000CC06 4A68 0036                  		tst.w	$36(a0)
0000CC0A 6700                       		beq.s	loc_B938
0000CC0C 4A68 0038                  		tst.w	$38(a0)
0000CC10 6700                       		beq.s	loc_B902
0000CC12 5368 0038                  		subq.w	#1,$38(a0)
0000CC16 6000                       		bra.s	loc_B97C
0000CC18                            ; ===========================================================================
0000CC18                            
0000CC18                            loc_B902:
0000CC18 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CC1C 0200 000F                  		andi.b	#$F,d0
0000CC20 6600                       		bne.s	loc_B91C
0000CC22 4A28 0001                  		tst.b	1(a0)
0000CC26 6A00                       		bpl.s	loc_B91C
0000CC28 303C 00C7                  		move.w	#$C7,d0
0000CC2C 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000CC32                            
0000CC32                            loc_B91C:
0000CC32 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CC38 6400                       		bcc.s	loc_B97C
0000CC3A 317C 0000 0032             		move.w	#0,$32(a0)
0000CC40 317C 0000 0012             		move.w	#0,$12(a0)
0000CC46 317C 0000 0036             		move.w	#0,$36(a0)
0000CC4C 6000                       		bra.s	loc_B97C
0000CC4E                            ; ===========================================================================
0000CC4E                            
0000CC4E                            loc_B938:				; XREF: Obj31_Type01
0000CC4E 3228 0034                  		move.w	$34(a0),d1
0000CC52 B268 0032                  		cmp.w	$32(a0),d1
0000CC56 6700                       		beq.s	loc_B97C
0000CC58 3028 0012                  		move.w	$12(a0),d0
0000CC5C 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000CC62 D168 0032                  		add.w	d0,$32(a0)
0000CC66 B268 0032                  		cmp.w	$32(a0),d1
0000CC6A 6200                       		bhi.s	loc_B97C
0000CC6C 3141 0032                  		move.w	d1,$32(a0)
0000CC70 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000CC76 317C 0001 0036             		move.w	#1,$36(a0)
0000CC7C 317C 003C 0038             		move.w	#$3C,$38(a0)
0000CC82 4A28 0001                  		tst.b	1(a0)
0000CC86 6A00                       		bpl.s	loc_B97C
0000CC88 303C 00BD                  		move.w	#$BD,d0
0000CC8C 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play stomping sound
0000CC92                            
0000CC92                            loc_B97C:
0000CC92 6000 FF62                  		bra.w	Obj31_Restart
0000CC96                            ; ===========================================================================
0000CC96                            
0000CC96                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000CC96 3038 D008                  		move.w	($FFFFD008).w,d0
0000CC9A 9068 0008                  		sub.w	8(a0),d0
0000CC9E 6400                       		bcc.s	loc_B98C
0000CCA0 4440                       		neg.w	d0
0000CCA2                            
0000CCA2                            loc_B98C:
0000CCA2 0C40 0090                  		cmpi.w	#$90,d0
0000CCA6 6400                       		bcc.s	loc_B996
0000CCA8 5228 0028                  		addq.b	#1,$28(a0)
0000CCAC                            
0000CCAC                            loc_B996:
0000CCAC 6000 FF48                  		bra.w	Obj31_Restart
0000CCB0                            ; ===========================================================================
0000CCB0                            ; ---------------------------------------------------------------------------
0000CCB0                            ; Object 45 - spiked metal block from beta version (MZ)
0000CCB0                            ; ---------------------------------------------------------------------------
0000CCB0                            
0000CCB0                            Obj45:					; XREF: Obj_Index
0000CCB0 7000                       		moveq	#0,d0
0000CCB2 1028 0024                  		move.b	$24(a0),d0
0000CCB6 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000CCBA 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000CCBE                            ; ===========================================================================
0000CCBE 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000CCC0 0000                       		dc.w Obj45_Solid-Obj45_Index
0000CCC2 0000                       		dc.w loc_BA8E-Obj45_Index
0000CCC4 0000                       		dc.w Obj45_Display-Obj45_Index
0000CCC6 0000                       		dc.w loc_BA7A-Obj45_Index
0000CCC8                            
0000CCC8 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000CCCB 04E4 01                    		dc.b	4, $E4,	  1
0000CCCE 0834 03                    		dc.b	8, $34,	  3
0000CCD1 0628 02                    		dc.b	6, $28,	  2
0000CCD4                            
0000CCD4 3800                       word_B9BE:	dc.w $3800
0000CCD6 A000                       		dc.w -$6000
0000CCD8 5000                       		dc.w $5000
0000CCDA                            ; ===========================================================================
0000CCDA                            
0000CCDA                            Obj45_Main:				; XREF: Obj45_Index
0000CCDA 7000                       		moveq	#0,d0
0000CCDC 1028 0028                  		move.b	$28(a0),d0
0000CCE0 D040                       		add.w	d0,d0
0000CCE2 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000CCE6 45F9 0000 CCC8             		lea	(Obj45_Var).l,a2
0000CCEC 2248                       		movea.l	a0,a1
0000CCEE 7203                       		moveq	#3,d1
0000CCF0 6000                       		bra.s	Obj45_Load
0000CCF2                            ; ===========================================================================
0000CCF2                            
0000CCF2                            Obj45_Loop:
0000CCF2 6100 0000                  		bsr.w	SingleObjLoad2
0000CCF6 6600                       		bne.s	loc_BA52
0000CCF8                            
0000CCF8                            Obj45_Load:				; XREF: Obj45_Main
0000CCF8 135A 0024                  		move.b	(a2)+,$24(a1)
0000CCFC 12BC 0045                  		move.b	#$45,0(a1)
0000CD00 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CD06 101A                       		move.b	(a2)+,d0
0000CD08 4880                       		ext.w	d0
0000CD0A D068 0008                  		add.w	8(a0),d0
0000CD0E 3340 0008                  		move.w	d0,8(a1)
0000CD12 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000CD1A 337C 0300 0002             		move.w	#$300,2(a1)
0000CD20 137C 0004 0001             		move.b	#4,1(a1)
0000CD26 3369 0008 0030             		move.w	8(a1),$30(a1)
0000CD2C 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000CD32 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000CD38 137C 0020 0019             		move.b	#$20,$19(a1)
0000CD3E 3342 0034                  		move.w	d2,$34(a1)
0000CD42 137C 0004 0018             		move.b	#4,$18(a1)
0000CD48 0C12 0001                  		cmpi.b	#1,(a2)
0000CD4C 6600                       		bne.s	loc_BA40
0000CD4E 137C 0091 0020             		move.b	#$91,$20(a1)
0000CD54                            
0000CD54                            loc_BA40:
0000CD54 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CD58 2348 003C                  		move.l	a0,$3C(a1)
0000CD5C 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000CD60                            
0000CD60 137C 0003 0018             		move.b	#3,$18(a1)
0000CD66                            
0000CD66                            loc_BA52:
0000CD66 117C 0010 0019             		move.b	#$10,$19(a0)
0000CD6C                            
0000CD6C                            Obj45_Solid:				; XREF: Obj45_Index
0000CD6C 3F28 0008                  		move.w	8(a0),-(sp)
0000CD70 6100 0000                  		bsr.w	Obj45_Move
0000CD74 323C 0017                  		move.w	#$17,d1
0000CD78 343C 0020                  		move.w	#$20,d2
0000CD7C 363C 0020                  		move.w	#$20,d3
0000CD80 381F                       		move.w	(sp)+,d4
0000CD82 6100 0000                  		bsr.w	SolidObject
0000CD86 6100 0000                  		bsr.w	DisplaySprite
0000CD8A 6000 0000                  		bra.w	Obj45_ChkDel
0000CD8E                            ; ===========================================================================
0000CD8E                            
0000CD8E                            loc_BA7A:				; XREF: Obj45_Index
0000CD8E 2268 003C                  		movea.l	$3C(a0),a1
0000CD92 1029 0032                  		move.b	$32(a1),d0
0000CD96 0600 0010                  		addi.b	#$10,d0
0000CD9A EA08                       		lsr.b	#5,d0
0000CD9C 5600                       		addq.b	#3,d0
0000CD9E 1140 001A                  		move.b	d0,$1A(a0)
0000CDA2                            
0000CDA2                            loc_BA8E:				; XREF: Obj45_Index
0000CDA2 2268 003C                  		movea.l	$3C(a0),a1
0000CDA6 7000                       		moveq	#0,d0
0000CDA8 1029 0032                  		move.b	$32(a1),d0
0000CDAC 4440                       		neg.w	d0
0000CDAE D068 0030                  		add.w	$30(a0),d0
0000CDB2 3140 0008                  		move.w	d0,8(a0)
0000CDB6                            
0000CDB6                            Obj45_Display:				; XREF: Obj45_Index
0000CDB6 6100 0000                  		bsr.w	DisplaySprite
0000CDBA                            
0000CDBA                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000CDBA 3028 003A                  		move.w	$3A(a0),d0
0000CDBE 0240 FF80                  		andi.w	#$FF80,d0
0000CDC2 3238 F700                  		move.w	($FFFFF700).w,d1
0000CDC6 0441 0080                  		subi.w	#$80,d1
0000CDCA 0241 FF80                  		andi.w	#$FF80,d1
0000CDCE 9041                       		sub.w	d1,d0
0000CDD0 0C40 0280                  		cmpi.w	#$280,d0
0000CDD4 6300                       		bls.s	Obj45_NoDel
0000CDD6 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000CDDA 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000CDDE 3440                       		movea.w	d0,a2	; load address into a2
0000CDE0 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000CDE4 6000 0000                  		bra.w	DeleteObject	; and delete object
0000CDE8                            
0000CDE8                            Obj45_NoDel:
0000CDE8 4E75                       		rts	
0000CDEA                            
0000CDEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CDEA                            
0000CDEA                            
0000CDEA                            Obj45_Move:				; XREF: Obj45_Solid
0000CDEA 7000                       		moveq	#0,d0
0000CDEC 1028 0028                  		move.b	$28(a0),d0
0000CDF0 D040                       		add.w	d0,d0
0000CDF2 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000CDF6 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000CDFA                            ; End of function Obj45_Move
0000CDFA                            
0000CDFA                            ; ===========================================================================
0000CDFA 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000CDFC 0000                       		dc.w loc_BADA-off_BAD6
0000CDFE                            ; ===========================================================================
0000CDFE                            
0000CDFE                            loc_BADA:				; XREF: off_BAD6
0000CDFE 4A68 0036                  		tst.w	$36(a0)
0000CE02 6700                       		beq.s	loc_BB08
0000CE04 4A68 0038                  		tst.w	$38(a0)
0000CE08 6700                       		beq.s	loc_BAEC
0000CE0A 5368 0038                  		subq.w	#1,$38(a0)
0000CE0E 6000                       		bra.s	loc_BB3C
0000CE10                            ; ===========================================================================
0000CE10                            
0000CE10                            loc_BAEC:
0000CE10 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CE16 6400                       		bcc.s	loc_BB3C
0000CE18 317C 0000 0032             		move.w	#0,$32(a0)
0000CE1E 317C 0000 0010             		move.w	#0,$10(a0)
0000CE24 317C 0000 0036             		move.w	#0,$36(a0)
0000CE2A 6000                       		bra.s	loc_BB3C
0000CE2C                            ; ===========================================================================
0000CE2C                            
0000CE2C                            loc_BB08:				; XREF: loc_BADA
0000CE2C 3228 0034                  		move.w	$34(a0),d1
0000CE30 B268 0032                  		cmp.w	$32(a0),d1
0000CE34 6700                       		beq.s	loc_BB3C
0000CE36 3028 0010                  		move.w	$10(a0),d0
0000CE3A 0668 0070 0010             		addi.w	#$70,$10(a0)
0000CE40 D168 0032                  		add.w	d0,$32(a0)
0000CE44 B268 0032                  		cmp.w	$32(a0),d1
0000CE48 6200                       		bhi.s	loc_BB3C
0000CE4A 3141 0032                  		move.w	d1,$32(a0)
0000CE4E 317C 0000 0010             		move.w	#0,$10(a0)
0000CE54 317C 0001 0036             		move.w	#1,$36(a0)
0000CE5A 317C 003C 0038             		move.w	#$3C,$38(a0)
0000CE60                            
0000CE60                            loc_BB3C:
0000CE60 7000                       		moveq	#0,d0
0000CE62 1028 0032                  		move.b	$32(a0),d0
0000CE66 4440                       		neg.w	d0
0000CE68 D068 0030                  		add.w	$30(a0),d0
0000CE6C 3140 0008                  		move.w	d0,8(a0)
0000CE70 4E75                       		rts	
0000CE72                            ; ===========================================================================
0000CE72                            ; ---------------------------------------------------------------------------
0000CE72                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000CE72                            ; ---------------------------------------------------------------------------
0000CE72                            Map_obj31:
0000CE72                            	include "_maps\obj31.asm"
0000CE72                            ; ---------------------------------------------------------------------------
0000CE72                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000CE72                            ; ---------------------------------------------------------------------------
0000CE72 0000                       		dc.w byte_BB64-Map_obj31
0000CE74 0000                       		dc.w byte_BB7E-Map_obj31
0000CE76 0000                       		dc.w byte_BB98-Map_obj31
0000CE78 0000                       		dc.w byte_BB9E-Map_obj31
0000CE7A 0000                       		dc.w byte_BBA9-Map_obj31
0000CE7C 0000                       		dc.w byte_BBBE-Map_obj31
0000CE7E 0000                       		dc.w byte_BBDD-Map_obj31
0000CE80 0000                       		dc.w byte_BC06-Map_obj31
0000CE82 0000                       		dc.w byte_BC06-Map_obj31
0000CE84 0000                       		dc.w byte_BC39-Map_obj31
0000CE86 0000                       		dc.w byte_BC53-Map_obj31
0000CE88 05                         byte_BB64:	dc.b 5
0000CE89 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000CE8E F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000CE93 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000CE98 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000CE9D F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000CEA2 05                         byte_BB7E:	dc.b 5
0000CEA3 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000CEA8 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000CEAD F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000CEB2 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000CEB7 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000CEBC 01                         byte_BB98:	dc.b 1
0000CEBD DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000CEC2 02                         byte_BB9E:	dc.b 2
0000CEC3 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CEC8 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CECD 04                         byte_BBA9:	dc.b 4
0000CECE E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CED3 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CED8 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CEDD 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CEE2 06                         byte_BBBE:	dc.b 6
0000CEE3 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CEE8 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CEED E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CEF2 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CEF7 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CEFC 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CF01 08                         byte_BBDD:	dc.b 8
0000CF02 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000CF07 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000CF0C C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CF11 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CF16 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CF1B F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CF20 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CF25 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CF2A 0A                         byte_BC06:	dc.b $A
0000CF2B 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000CF30 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000CF35 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000CF3A B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000CF3F C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CF44 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CF49 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CF4E F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CF53 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CF58 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CF5D 05                         byte_BC39:	dc.b 5
0000CF5E F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000CF63 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000CF68 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000CF6D F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000CF72 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000CF77 01                         byte_BC53:	dc.b 1
0000CF78 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000CF7E 00                         		even
0000CF7E 00                         		even
0000CF7E                            
0000CF7E                            ; ---------------------------------------------------------------------------
0000CF7E                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000CF7E                            ; ---------------------------------------------------------------------------
0000CF7E                            Map_obj45:
0000CF7E                            	include "_maps\obj45.asm"
0000CF7E                            ; ---------------------------------------------------------------------------
0000CF7E                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000CF7E                            ; ---------------------------------------------------------------------------
0000CF7E 0000                       		dc.w byte_BC6C-Map_obj45
0000CF80 0000                       		dc.w byte_BC7C-Map_obj45
0000CF82 0000                       		dc.w byte_BC8C-Map_obj45
0000CF84 0000                       		dc.w byte_BC92-Map_obj45
0000CF86 0000                       		dc.w byte_BC9D-Map_obj45
0000CF88 0000                       		dc.w byte_BCB2-Map_obj45
0000CF8A 0000                       		dc.w byte_BCD1-Map_obj45
0000CF8C 0000                       		dc.w byte_BCFA-Map_obj45
0000CF8E 0000                       		dc.w byte_BCFA-Map_obj45
0000CF90 03                         byte_BC6C:	dc.b 3
0000CF91 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000CF96 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000CF9B F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000CFA0 03                         byte_BC7C:	dc.b 3
0000CFA1 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000CFA6 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000CFAB 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000CFB0 01                         byte_BC8C:	dc.b 1
0000CFB1 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000CFB6 02                         byte_BC92:	dc.b 2
0000CFB7 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CFBC F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CFC1 04                         byte_BC9D:	dc.b 4
0000CFC2 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CFC7 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CFCC F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CFD1 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CFD6 06                         byte_BCB2:	dc.b 6
0000CFD7 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CFDC F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CFE1 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CFE6 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CFEB F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CFF0 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CFF5 08                         byte_BCD1:	dc.b 8
0000CFF6 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CFFB F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D000 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D005 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D00A F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000D00F F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D014 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000D019 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000D01E 08                         byte_BCFA:	dc.b 8
0000D01F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000D024 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000D029 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000D02E F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000D033 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000D038 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000D03D F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000D042 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000D047 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000D04C F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000D052 00                         		even
0000D052 00                         		even
0000D052                            
0000D052                            ; ===========================================================================
0000D052                            ; ---------------------------------------------------------------------------
0000D052                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000D052                            ; ---------------------------------------------------------------------------
0000D052                            
0000D052                            Obj32:					; XREF: Obj_Index
0000D052 7000                       		moveq	#0,d0
0000D054 1028 0024                  		move.b	$24(a0),d0
0000D058 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000D05C 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000D060                            ; ===========================================================================
0000D060 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000D062 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000D064                            ; ===========================================================================
0000D064                            
0000D064                            Obj32_Main:				; XREF: Obj32_Index
0000D064 5428 0024                  		addq.b	#2,$24(a0)
0000D068 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000D070 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000D076 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000D07C 6700                       		beq.s	loc_BD60
0000D07E 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000D084                            
0000D084                            loc_BD60:
0000D084 117C 0004 0001             		move.b	#4,1(a0)
0000D08A 117C 0010 0019             		move.b	#$10,$19(a0)
0000D090 117C 0004 0018             		move.b	#4,$18(a0)
0000D096 5668 000C                  		addq.w	#3,$C(a0)
0000D09A                            
0000D09A                            Obj32_Pressed:				; XREF: Obj32_Index
0000D09A 4A28 0001                  		tst.b	1(a0)
0000D09E 6A00                       		bpl.s	Obj32_Display
0000D0A0 323C 001B                  		move.w	#$1B,d1
0000D0A4 343C 0005                  		move.w	#5,d2
0000D0A8 363C 0005                  		move.w	#5,d3
0000D0AC 3828 0008                  		move.w	8(a0),d4
0000D0B0 6100 0000                  		bsr.w	SolidObject
0000D0B4 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000D0BA 1028 0028                  		move.b	$28(a0),d0
0000D0BE 0240 000F                  		andi.w	#$F,d0
0000D0C2 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000D0C6 47F3 0000                  		lea	(a3,d0.w),a3
0000D0CA 7600                       		moveq	#0,d3
0000D0CC 0828 0006 0028             		btst	#6,$28(a0)
0000D0D2 6700                       		beq.s	loc_BDB2
0000D0D4 7607                       		moveq	#7,d3
0000D0D6                            
0000D0D6                            loc_BDB2:
0000D0D6 4A28 0028                  		tst.b	$28(a0)
0000D0DA 6A00                       		bpl.s	loc_BDBE
0000D0DC 6100 0000                  		bsr.w	Obj32_MZBlock
0000D0E0 6600                       		bne.s	loc_BDC8
0000D0E2                            
0000D0E2                            loc_BDBE:
0000D0E2 4A28 0025                  		tst.b	$25(a0)
0000D0E6 6600                       		bne.s	loc_BDC8
0000D0E8 0793                       		bclr	d3,(a3)
0000D0EA 6000                       		bra.s	loc_BDDE
0000D0EC                            ; ===========================================================================
0000D0EC                            
0000D0EC                            loc_BDC8:
0000D0EC 4A13                       		tst.b	(a3)
0000D0EE 6600                       		bne.s	loc_BDD6
0000D0F0 303C 00CD                  		move.w	#$CD,d0
0000D0F4 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play switch sound
0000D0FA                            
0000D0FA                            loc_BDD6:
0000D0FA 07D3                       		bset	d3,(a3)
0000D0FC 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000D102                            
0000D102                            loc_BDDE:
0000D102 0828 0005 0028             		btst	#5,$28(a0)
0000D108 6700                       		beq.s	Obj32_Display
0000D10A 5328 001E                  		subq.b	#1,$1E(a0)
0000D10E 6A00                       		bpl.s	Obj32_Display
0000D110 117C 0007 001E             		move.b	#7,$1E(a0)
0000D116 0868 0001 001A             		bchg	#1,$1A(a0)
0000D11C                            
0000D11C                            Obj32_Display:
0000D11C 6100 0000                  		bsr.w	DisplaySprite
0000D120 3028 0008                  		move.w	8(a0),d0
0000D124 0240 FF80                  		andi.w	#$FF80,d0
0000D128 3238 F700                  		move.w	($FFFFF700).w,d1
0000D12C 0441 0080                  		subi.w	#$80,d1
0000D130 0241 FF80                  		andi.w	#$FF80,d1
0000D134 9041                       		sub.w	d1,d0
0000D136 0C40 0280                  		cmpi.w	#$280,d0
0000D13A 6300                       		bls.s	Obj32_NoDel
0000D13C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D140 6700                       		beq.s	Obj32_Delete		; if it's zero, don't remember object
0000D142 3440                       		movea.w	d0,a2	; load address into a2
0000D144 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000D148 6000                       		bra.s	Obj32_Delete	; and delete object
0000D14A                            
0000D14A                            Obj32_NoDel:
0000D14A 4E75                       		rts	
0000D14C                            ; ===========================================================================
0000D14C                            
0000D14C                            Obj32_Delete:
0000D14C 6100 0000                  		bsr.w	DeleteObject
0000D150 4E75                       		rts	
0000D152                            
0000D152                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D152                            
0000D152                            
0000D152                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000D152 3F03                       		move.w	d3,-(sp)
0000D154 3428 0008                  		move.w	8(a0),d2
0000D158 3628 000C                  		move.w	$C(a0),d3
0000D15C 0442 0010                  		subi.w	#$10,d2
0000D160 5143                       		subq.w	#8,d3
0000D162 383C 0020                  		move.w	#$20,d4
0000D166 3A3C 0010                  		move.w	#$10,d5
0000D16A 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000D16E 3C3C 005F                  		move.w	#$5F,d6
0000D172                            
0000D172                            Obj32_MZLoop:
0000D172 4A29 0001                  		tst.b	1(a1)
0000D176 6A00                       		bpl.s	loc_BE4E
0000D178 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000D17C 6700                       		beq.s	loc_BE5E	; if yes, branch
0000D17E                            
0000D17E                            loc_BE4E:
0000D17E 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000D182 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000D186                            
0000D186 361F                       		move.w	(sp)+,d3
0000D188 7000                       		moveq	#0,d0
0000D18A                            
0000D18A                            locret_BE5A:
0000D18A 4E75                       		rts	
0000D18C                            ; ===========================================================================
0000D18C 1010                       Obj32_MZData:	dc.b $10, $10
0000D18E                            ; ===========================================================================
0000D18E                            
0000D18E                            loc_BE5E:				; XREF: Obj32_MZBlock
0000D18E 7001                       		moveq	#1,d0
0000D190 0240 003F                  		andi.w	#$3F,d0
0000D194 D040                       		add.w	d0,d0
0000D196 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000D19A 121A                       		move.b	(a2)+,d1
0000D19C 4881                       		ext.w	d1
0000D19E 3029 0008                  		move.w	8(a1),d0
0000D1A2 9041                       		sub.w	d1,d0
0000D1A4 9042                       		sub.w	d2,d0
0000D1A6 6400                       		bcc.s	loc_BE80
0000D1A8 D241                       		add.w	d1,d1
0000D1AA D041                       		add.w	d1,d0
0000D1AC 6500                       		bcs.s	loc_BE84
0000D1AE 60CE                       		bra.s	loc_BE4E
0000D1B0                            ; ===========================================================================
0000D1B0                            
0000D1B0                            loc_BE80:
0000D1B0 B044                       		cmp.w	d4,d0
0000D1B2 62CA                       		bhi.s	loc_BE4E
0000D1B4                            
0000D1B4                            loc_BE84:
0000D1B4 121A                       		move.b	(a2)+,d1
0000D1B6 4881                       		ext.w	d1
0000D1B8 3029 000C                  		move.w	$C(a1),d0
0000D1BC 9041                       		sub.w	d1,d0
0000D1BE 9043                       		sub.w	d3,d0
0000D1C0 6400                       		bcc.s	loc_BE9A
0000D1C2 D241                       		add.w	d1,d1
0000D1C4 D041                       		add.w	d1,d0
0000D1C6 6500                       		bcs.s	loc_BE9E
0000D1C8 60B4                       		bra.s	loc_BE4E
0000D1CA                            ; ===========================================================================
0000D1CA                            
0000D1CA                            loc_BE9A:
0000D1CA B045                       		cmp.w	d5,d0
0000D1CC 62B0                       		bhi.s	loc_BE4E
0000D1CE                            
0000D1CE                            loc_BE9E:
0000D1CE 361F                       		move.w	(sp)+,d3
0000D1D0 7001                       		moveq	#1,d0
0000D1D2 4E75                       		rts	
0000D1D4                            ; End of function Obj32_MZBlock
0000D1D4                            
0000D1D4                            ; ===========================================================================
0000D1D4                            ; ---------------------------------------------------------------------------
0000D1D4                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D1D4                            ; ---------------------------------------------------------------------------
0000D1D4                            Map_obj32:
0000D1D4                            	include "_maps\obj32.asm"
0000D1D4                            ; ---------------------------------------------------------------------------
0000D1D4                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D1D4                            ; ---------------------------------------------------------------------------
0000D1D4 0000                       		dc.w byte_BEAC-Map_obj32
0000D1D6 0000                       		dc.w byte_BEB7-Map_obj32
0000D1D8 0000                       		dc.w byte_BEC2-Map_obj32
0000D1DA 0000                       		dc.w byte_BEB7-Map_obj32
0000D1DC 02                         byte_BEAC:	dc.b 2
0000D1DD F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000D1E2 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000D1E7 02                         byte_BEB7:	dc.b 2
0000D1E8 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000D1ED F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000D1F2 02                         byte_BEC2:	dc.b 2
0000D1F3 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000D1F8 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000D1FD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D202                            		even
0000D202                            		even
0000D202                            
0000D202                            ; ===========================================================================
0000D202                            ; ---------------------------------------------------------------------------
0000D202                            ; Object 33 - pushable blocks (MZ, LZ)
0000D202                            ; ---------------------------------------------------------------------------
0000D202                            
0000D202                            Obj33:					; XREF: Obj_Index
0000D202 7000                       		moveq	#0,d0
0000D204 1028 0024                  		move.b	$24(a0),d0
0000D208 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000D20C 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000D210                            ; ===========================================================================
0000D210 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000D212 0000                       		dc.w loc_BF6E-Obj33_Index
0000D214 0000                       		dc.w loc_C02C-Obj33_Index
0000D216                            
0000D216 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000D218 4001                       		dc.b $40, 1
0000D21A                            ; ===========================================================================
0000D21A                            
0000D21A                            Obj33_Main:				; XREF: Obj33_Index
0000D21A 5428 0024                  		addq.b	#2,$24(a0)
0000D21E 117C 000F 0016             		move.b	#$F,$16(a0)
0000D224 117C 000F 0017             		move.b	#$F,$17(a0)
0000D22A 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000D232 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000D238 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000D23E 6600                       		bne.s	loc_BF16
0000D240 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000D246                            
0000D246                            loc_BF16:
0000D246 117C 0004 0001             		move.b	#4,1(a0)
0000D24C 117C 0003 0018             		move.b	#3,$18(a0)
0000D252 3168 0008 0034             		move.w	8(a0),$34(a0)
0000D258 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000D25E 7000                       		moveq	#0,d0
0000D260 1028 0028                  		move.b	$28(a0),d0
0000D264 D040                       		add.w	d0,d0
0000D266 0240 000E                  		andi.w	#$E,d0
0000D26A 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000D26E 115A 0019                  		move.b	(a2)+,$19(a0)
0000D272 115A 001A                  		move.b	(a2)+,$1A(a0)
0000D276 4A28 0028                  		tst.b	$28(a0)
0000D27A 6700                       		beq.s	Obj33_ChkGone
0000D27C 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000D282                            
0000D282                            Obj33_ChkGone:
0000D282 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D286 6700                       		beq.s	loc_BF6E		; if it's zero, don't remember object
0000D288 3440                       		movea.w	d0,a2	; load address into a2
0000D28A 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000D28E 08D2 0000                  		bset	#0,(a2)
0000D292 6600 0000                  		bne.w	DeleteObject
0000D296                            
0000D296                            loc_BF6E:				; XREF: Obj33_Index
0000D296 4A28 0032                  		tst.b	$32(a0)
0000D29A 6600 0000                  		bne.w	loc_C046
0000D29E 7200                       		moveq	#0,d1
0000D2A0 1228 0019                  		move.b	$19(a0),d1
0000D2A4 0641 000B                  		addi.w	#$B,d1
0000D2A8 343C 0010                  		move.w	#$10,d2
0000D2AC 363C 0011                  		move.w	#$11,d3
0000D2B0 3828 0008                  		move.w	8(a0),d4
0000D2B4 6100 0000                  		bsr.w	loc_C186
0000D2B8 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000D2BE 6600                       		bne.s	loc_BFC6	; if not, branch
0000D2C0 08A8 0007 0028             		bclr	#7,$28(a0)
0000D2C6 3028 0008                  		move.w	8(a0),d0
0000D2CA 0C40 0A20                  		cmpi.w	#$A20,d0
0000D2CE 6500                       		bcs.s	loc_BFC6
0000D2D0 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000D2D4 6400                       		bcc.s	loc_BFC6
0000D2D6 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000D2DA 0440 001C                  		subi.w	#$1C,d0
0000D2DE 3140 000C                  		move.w	d0,$C(a0)
0000D2E2 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000D2E8 08E8 0007 0028             		bset	#7,$28(a0)
0000D2EE                            
0000D2EE                            loc_BFC6:
0000D2EE 3028 0008                  		move.w	8(a0),d0
0000D2F2 0240 FF80                  		andi.w	#$FF80,d0
0000D2F6 3238 F700                  		move.w	($FFFFF700).w,d1
0000D2FA 0441 0080                  		subi.w	#$80,d1
0000D2FE 0241 FF80                  		andi.w	#$FF80,d1
0000D302 9041                       		sub.w	d1,d0
0000D304 0C40 0280                  		cmpi.w	#$280,d0
0000D308 6300 0000                  		bls.w	DisplaySprite
0000D30C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D310 6700                       		beq.s	loc_BFE6	; if it's zero, don't remember object
0000D312 3440                       		movea.w	d0,a2	; load address into a2
0000D314 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000D318                            
0000D318                            loc_BFE6:
0000D318 3028 0034                  		move.w	$34(a0),d0
0000D31C 0240 FF80                  		andi.w	#$FF80,d0
0000D320 3238 F700                  		move.w	($FFFFF700).w,d1
0000D324 0441 0080                  		subi.w	#$80,d1
0000D328 0241 FF80                  		andi.w	#$FF80,d1
0000D32C 9041                       		sub.w	d1,d0
0000D32E 0C40 0280                  		cmpi.w	#$280,d0
0000D332 6200                       		bhi.s	loc_C016
0000D334 3168 0034 0008             		move.w	$34(a0),8(a0)
0000D33A 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000D340 117C 0004 0024             		move.b	#4,$24(a0)
0000D346 6000                       		bra.s	loc_C02C
0000D348                            ; ===========================================================================
0000D348                            
0000D348                            loc_C016:
0000D348 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D34C 6700                       		beq.s	loc_C028		; if it's zero, don't remember object
0000D34E 3440                       		movea.w	d0,a2	; load address into a2
0000D350 0892 0000                  		bclr	#0,(a2)
0000D354                            
0000D354                            loc_C028:
0000D354 6000 0000                  		bra.w	DeleteObject
0000D358                            ; ===========================================================================
0000D358                            
0000D358                            loc_C02C:				; XREF: Obj33_Index
0000D358 6100 0000                  		bsr.w	ChkObjOnScreen2
0000D35C 6700                       		beq.s	locret_C044
0000D35E 117C 0002 0024             		move.b	#2,$24(a0)
0000D364 4228 0032                  		clr.b	$32(a0)
0000D368 4268 0010                  		clr.w	$10(a0)
0000D36C 4268 0012                  		clr.w	$12(a0)
0000D370                            
0000D370                            locret_C044:
0000D370 4E75                       		rts	
0000D372                            ; ===========================================================================
0000D372                            
0000D372                            loc_C046:				; XREF: loc_BF6E
0000D372 3F28 0008                  		move.w	8(a0),-(sp)
0000D376 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000D37C 6400                       		bcc.s	loc_C056
0000D37E 6100 0000                  		bsr.w	SpeedToPos
0000D382                            
0000D382                            loc_C056:
0000D382 0828 0001 0022             		btst	#1,$22(a0)
0000D388 6700                       		beq.s	loc_C0A0
0000D38A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D390 4EB9 0000 0000             		jsr	ObjHitFloor
0000D396 4A41                       		tst.w	d1
0000D398 6A00 0000                  		bpl.w	loc_C09E
0000D39C D368 000C                  		add.w	d1,$C(a0)
0000D3A0 4268 0012                  		clr.w	$12(a0)
0000D3A4 08A8 0001 0022             		bclr	#1,$22(a0)
0000D3AA 3011                       		move.w	(a1),d0
0000D3AC 0240 03FF                  		andi.w	#$3FF,d0
0000D3B0 0C40 016A                  		cmpi.w	#$16A,d0
0000D3B4 6500                       		bcs.s	loc_C09E
0000D3B6 3028 0030                  		move.w	$30(a0),d0
0000D3BA E640                       		asr.w	#3,d0
0000D3BC 3140 0010                  		move.w	d0,$10(a0)
0000D3C0 117C 0001 0032             		move.b	#1,$32(a0)
0000D3C6 4268 000E                  		clr.w	$E(a0)
0000D3CA                            
0000D3CA                            loc_C09E:
0000D3CA 6000                       		bra.s	loc_C0E6
0000D3CC                            ; ===========================================================================
0000D3CC                            
0000D3CC                            loc_C0A0:
0000D3CC 4A68 0010                  		tst.w	$10(a0)
0000D3D0 6700 0000                  		beq.w	loc_C0D6
0000D3D4 6B00                       		bmi.s	loc_C0BC
0000D3D6 7600                       		moveq	#0,d3
0000D3D8 1628 0019                  		move.b	$19(a0),d3
0000D3DC 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D3E2 4A41                       		tst.w	d1		; has block touched a wall?
0000D3E4 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D3E6 6000                       		bra.s	loc_C0E6
0000D3E8                            ; ===========================================================================
0000D3E8                            
0000D3E8                            loc_C0BC:
0000D3E8 7600                       		moveq	#0,d3
0000D3EA 1628 0019                  		move.b	$19(a0),d3
0000D3EE 4643                       		not.w	d3
0000D3F0 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D3F6 4A41                       		tst.w	d1		; has block touched a wall?
0000D3F8 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D3FA 6000                       		bra.s	loc_C0E6
0000D3FC                            ; ===========================================================================
0000D3FC                            
0000D3FC                            Obj33_StopPush:
0000D3FC 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000D400 6000                       		bra.s	loc_C0E6
0000D402                            ; ===========================================================================
0000D402                            
0000D402                            loc_C0D6:
0000D402 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000D40A 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000D410 6400                       		bcc.s	loc_C104
0000D412                            
0000D412                            loc_C0E6:
0000D412 7200                       		moveq	#0,d1
0000D414 1228 0019                  		move.b	$19(a0),d1
0000D418 0641 000B                  		addi.w	#$B,d1
0000D41C 343C 0010                  		move.w	#$10,d2
0000D420 363C 0011                  		move.w	#$11,d3
0000D424 381F                       		move.w	(sp)+,d4
0000D426 6100 0000                  		bsr.w	loc_C186
0000D42A 6100                       		bsr.s	Obj33_ChkLava
0000D42C 6000 FEC0                  		bra.w	loc_BFC6
0000D430                            ; ===========================================================================
0000D430                            
0000D430                            loc_C104:
0000D430 381F                       		move.w	(sp)+,d4
0000D432 43F8 D000                  		lea	($FFFFD000).w,a1
0000D436 08A9 0003 0022             		bclr	#3,$22(a1)
0000D43C 08A8 0003 0022             		bclr	#3,$22(a0)
0000D442 6000 FED4                  		bra.w	loc_BFE6
0000D446                            ; ===========================================================================
0000D446                            
0000D446                            Obj33_ChkLava:
0000D446 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000D44C 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000D44E 343C FFE0                  		move.w	#-$20,d2
0000D452 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000D458 6700                       		beq.s	Obj33_LoadLava
0000D45A 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000D460 6700                       		beq.s	Obj33_LoadLava
0000D462 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000D468 6700                       		beq.s	Obj33_LoadLava
0000D46A 4E75                       		rts	
0000D46C                            ; ===========================================================================
0000D46C                            
0000D46C                            Obj33_ChkLava2:
0000D46C 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000D472 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000D474 343C 0020                  		move.w	#$20,d2
0000D478 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000D47E 6700                       		beq.s	Obj33_LoadLava
0000D480 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000D486 6700                       		beq.s	Obj33_LoadLava
0000D488                            
0000D488                            Obj33_NoLava:
0000D488 4E75                       		rts	
0000D48A                            ; ===========================================================================
0000D48A                            
0000D48A                            Obj33_LoadLava:
0000D48A 6100 0000                  		bsr.w	SingleObjLoad
0000D48E 6600                       		bne.s	locret_C184
0000D490 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000D494 3368 0008 0008             		move.w	8(a0),8(a1)
0000D49A D569 0008                  		add.w	d2,8(a1)
0000D49E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D4A4 0669 0010 000C             		addi.w	#$10,$C(a1)
0000D4AA 2348 003C                  		move.l	a0,$3C(a1)
0000D4AE                            
0000D4AE                            locret_C184:
0000D4AE 4E75                       		rts	
0000D4B0                            ; ===========================================================================
0000D4B0                            
0000D4B0                            loc_C186:				; XREF: loc_BF6E
0000D4B0 1028 0025                  		move.b	$25(a0),d0
0000D4B4 6700 0000                  		beq.w	loc_C218
0000D4B8 5500                       		subq.b	#2,d0
0000D4BA 6600                       		bne.s	loc_C1AA
0000D4BC 6100 B220                  		bsr.w	ExitPlatform
0000D4C0 0829 0003 0022             		btst	#3,$22(a1)
0000D4C6 6600                       		bne.s	loc_C1A4
0000D4C8 4228 0025                  		clr.b	$25(a0)
0000D4CC 4E75                       		rts	
0000D4CE                            ; ===========================================================================
0000D4CE                            
0000D4CE                            loc_C1A4:
0000D4CE 3404                       		move.w	d4,d2
0000D4D0 6000 B776                  		bra.w	MvSonicOnPtfm
0000D4D4                            ; ===========================================================================
0000D4D4                            
0000D4D4                            loc_C1AA:
0000D4D4 5500                       		subq.b	#2,d0
0000D4D6 6600                       		bne.s	loc_C1F2
0000D4D8 6100 0000                  		bsr.w	SpeedToPos
0000D4DC 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D4E2 4EB9 0000 0000             		jsr	ObjHitFloor
0000D4E8 4A41                       		tst.w	d1
0000D4EA 6A00 0000                  		bpl.w	locret_C1F0
0000D4EE D368 000C                  		add.w	d1,$C(a0)
0000D4F2 4268 0012                  		clr.w	$12(a0)
0000D4F6 4228 0025                  		clr.b	$25(a0)
0000D4FA 3011                       		move.w	(a1),d0
0000D4FC 0240 03FF                  		andi.w	#$3FF,d0
0000D500 0C40 016A                  		cmpi.w	#$16A,d0
0000D504 6500                       		bcs.s	locret_C1F0
0000D506 3028 0030                  		move.w	$30(a0),d0
0000D50A E640                       		asr.w	#3,d0
0000D50C 3140 0010                  		move.w	d0,$10(a0)
0000D510 117C 0001 0032             		move.b	#1,$32(a0)
0000D516 4268 000E                  		clr.w	$E(a0)
0000D51A                            
0000D51A                            locret_C1F0:
0000D51A 4E75                       		rts	
0000D51C                            ; ===========================================================================
0000D51C                            
0000D51C                            loc_C1F2:
0000D51C 6100 0000                  		bsr.w	SpeedToPos
0000D520 3028 0008                  		move.w	8(a0),d0
0000D524 0240 000C                  		andi.w	#$C,d0
0000D528 6600 0000                  		bne.w	locret_C2E4
0000D52C 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000D532 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000D538 4268 0010                  		clr.w	$10(a0)
0000D53C 5528 0025                  		subq.b	#2,$25(a0)
0000D540 4E75                       		rts	
0000D542                            ; ===========================================================================
0000D542                            
0000D542                            loc_C218:
0000D542 6100 0000                  		bsr.w	loc_FAC8
0000D546 4A44                       		tst.w	d4
0000D548 6700 0000                  		beq.w	locret_C2E4
0000D54C 6B00 0000                  		bmi.w	locret_C2E4
0000D550 4A28 0032                  		tst.b	$32(a0)
0000D554 6700                       		beq.s	loc_C230
0000D556 6000 0000                  		bra.w	locret_C2E4
0000D55A                            ; ===========================================================================
0000D55A                            
0000D55A                            loc_C230:
0000D55A 4A40                       		tst.w	d0
0000D55C 6700 0000                  		beq.w	locret_C2E4
0000D560 6B00                       		bmi.s	loc_C268
0000D562 0829 0000 0022             		btst	#0,$22(a1)
0000D568 6600 0000                  		bne.w	locret_C2E4
0000D56C 3F00                       		move.w	d0,-(sp)
0000D56E 7600                       		moveq	#0,d3
0000D570 1628 0019                  		move.b	$19(a0),d3
0000D574 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D57A 301F                       		move.w	(sp)+,d0
0000D57C 4A41                       		tst.w	d1
0000D57E 6B00 0000                  		bmi.w	locret_C2E4
0000D582 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000D58A 7001                       		moveq	#1,d0
0000D58C 323C 0040                  		move.w	#$40,d1
0000D590 6000                       		bra.s	loc_C294
0000D592                            ; ===========================================================================
0000D592                            
0000D592                            loc_C268:
0000D592 0829 0000 0022             		btst	#0,$22(a1)
0000D598 6700                       		beq.s	locret_C2E4
0000D59A 3F00                       		move.w	d0,-(sp)
0000D59C 7600                       		moveq	#0,d3
0000D59E 1628 0019                  		move.b	$19(a0),d3
0000D5A2 4643                       		not.w	d3
0000D5A4 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D5AA 301F                       		move.w	(sp)+,d0
0000D5AC 4A41                       		tst.w	d1
0000D5AE 6B00                       		bmi.s	locret_C2E4
0000D5B0 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000D5B8 70FF                       		moveq	#-1,d0
0000D5BA 323C FFC0                  		move.w	#-$40,d1
0000D5BE                            
0000D5BE                            loc_C294:
0000D5BE 43F8 D000                  		lea	($FFFFD000).w,a1
0000D5C2 D169 0008                  		add.w	d0,8(a1)
0000D5C6 3341 0020                  		move.w	d1,$20(a1)
0000D5CA 337C 0000 0010             		move.w	#0,$10(a1)
0000D5D0 3F00                       		move.w	d0,-(sp)
0000D5D2 303C 00A7                  		move.w	#$A7,d0
0000D5D6 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play pushing sound
0000D5DC 301F                       		move.w	(sp)+,d0
0000D5DE 4A28 0028                  		tst.b	$28(a0)
0000D5E2 6B00                       		bmi.s	locret_C2E4
0000D5E4 3F00                       		move.w	d0,-(sp)
0000D5E6 4EB9 0000 0000             		jsr	ObjHitFloor
0000D5EC 301F                       		move.w	(sp)+,d0
0000D5EE 0C41 0004                  		cmpi.w	#4,d1
0000D5F2 6F00                       		ble.s	loc_C2E0
0000D5F4 317C 0400 0010             		move.w	#$400,$10(a0)
0000D5FA 4A40                       		tst.w	d0
0000D5FC 6A00                       		bpl.s	loc_C2D8
0000D5FE 4468 0010                  		neg.w	$10(a0)
0000D602                            
0000D602                            loc_C2D8:
0000D602 117C 0006 0025             		move.b	#6,$25(a0)
0000D608 6000                       		bra.s	locret_C2E4
0000D60A                            ; ===========================================================================
0000D60A                            
0000D60A                            loc_C2E0:
0000D60A D368 000C                  		add.w	d1,$C(a0)
0000D60E                            
0000D60E                            locret_C2E4:
0000D60E 4E75                       		rts	
0000D610                            ; ===========================================================================
0000D610                            ; ---------------------------------------------------------------------------
0000D610                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000D610                            ; ---------------------------------------------------------------------------
0000D610                            Map_obj33:
0000D610                            	include "_maps\obj33.asm"
0000D610                            ; ---------------------------------------------------------------------------
0000D610                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000D610                            ; ---------------------------------------------------------------------------
0000D610 0000                       		dc.w byte_C2EA-Map_obj33
0000D612 0000                       		dc.w byte_C2F0-Map_obj33
0000D614 01                         byte_C2EA:	dc.b 1
0000D615 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000D61A 04                         byte_C2F0:	dc.b 4
0000D61B F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000D620 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000D625 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000D62A F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000D630 00                         		even
0000D630 00                         		even
0000D630                            
0000D630                            ; ===========================================================================
0000D630                            ; ---------------------------------------------------------------------------
0000D630                            ; Object 34 - zone title cards
0000D630                            ; ---------------------------------------------------------------------------
0000D630                            
0000D630                            Obj34:					; XREF: Obj_Index
0000D630 7000                       		moveq	#0,d0
0000D632 1028 0024                  		move.b	$24(a0),d0
0000D636 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000D63A 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000D63E                            ; ===========================================================================
0000D63E 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000D640 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000D642 0000                       		dc.w Obj34_Wait-Obj34_Index
0000D644 0000                       		dc.w Obj34_Wait-Obj34_Index
0000D646                            ; ===========================================================================
0000D646                            
0000D646                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000D646 2248                       		movea.l	a0,a1
0000D648 7000                       		moveq	#0,d0
0000D64A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D64E 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000D654 6600                       		bne.s	Obj34_CheckFZ
0000D656 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000D658                            
0000D658                            Obj34_CheckFZ:
0000D658 3400                       		move.w	d0,d2
0000D65A 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000D660 6600                       		bne.s	Obj34_LoadConfig
0000D662 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000D664 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000D666                            
0000D666                            Obj34_LoadConfig:
0000D666 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000D66C E948                       		lsl.w	#4,d0
0000D66E D6C0                       		adda.w	d0,a3
0000D670 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000D676 7203                       		moveq	#3,d1
0000D678                            
0000D678                            Obj34_Loop:
0000D678 12BC 0034                  		move.b	#$34,0(a1)
0000D67C 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000D680 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000D684 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000D688 335A 000A                  		move.w	(a2)+,$A(a1)
0000D68C 135A 0024                  		move.b	(a2)+,$24(a1)
0000D690 101A                       		move.b	(a2)+,d0
0000D692 6600                       		bne.s	Obj34_ActNumber
0000D694 1002                       		move.b	d2,d0
0000D696                            
0000D696                            Obj34_ActNumber:
0000D696 0C00 0007                  		cmpi.b	#7,d0
0000D69A 6600                       		bne.s	Obj34_MakeSprite
0000D69C D038 FE11                  		add.b	($FFFFFE11).w,d0
0000D6A0 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000D6A6 6600                       		bne.s	Obj34_MakeSprite
0000D6A8 5300                       		subq.b	#1,d0
0000D6AA                            
0000D6AA                            Obj34_MakeSprite:
0000D6AA 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000D6AE 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000D6B6 337C 8580 0002             		move.w	#$8580,2(a1)
0000D6BC 137C 0078 0019             		move.b	#$78,$19(a1)
0000D6C2 137C 0000 0001             		move.b	#0,1(a1)
0000D6C8 137C 0000 0018             		move.b	#0,$18(a1)
0000D6CE 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000D6D4 43E9 0040                  		lea	$40(a1),a1	; next object
0000D6D8 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000D6DC                            
0000D6DC                            Obj34_ChkPos:				; XREF: Obj34_Index
0000D6DC 7210                       		moveq	#$10,d1		; set horizontal speed
0000D6DE 3028 0030                  		move.w	$30(a0),d0
0000D6E2 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000D6E6 6700                       		beq.s	loc_C3C8	; if yes, branch
0000D6E8 6C00                       		bge.s	Obj34_Move
0000D6EA 4441                       		neg.w	d1
0000D6EC                            
0000D6EC                            Obj34_Move:
0000D6EC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D6F0                            
0000D6F0                            loc_C3C8:
0000D6F0 3028 0008                  		move.w	8(a0),d0
0000D6F4 6B00                       		bmi.s	locret_C3D8
0000D6F6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D6FA 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000D6FC 6000 0000                  		bra.w	DisplaySprite
0000D700                            ; ===========================================================================
0000D700                            
0000D700                            locret_C3D8:
0000D700 4E75                       		rts	
0000D702                            ; ===========================================================================
0000D702                            
0000D702                            Obj34_Wait:				; XREF: Obj34_Index
0000D702 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000D706 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000D708 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000D70C 6000 0000                  		bra.w	DisplaySprite
0000D710                            ; ===========================================================================
0000D710                            
0000D710                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000D710 4A28 0001                  		tst.b	1(a0)
0000D714 6A00                       		bpl.s	Obj34_ChangeArt
0000D716 7220                       		moveq	#$20,d1
0000D718 3028 0032                  		move.w	$32(a0),d0
0000D71C B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000D720 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000D722 6C00                       		bge.s	Obj34_Move2
0000D724 4441                       		neg.w	d1
0000D726                            
0000D726                            Obj34_Move2:
0000D726 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D72A 3028 0008                  		move.w	8(a0),d0
0000D72E 6B00                       		bmi.s	locret_C412
0000D730 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D734 6400                       		bcc.s	locret_C412	; if yes, branch
0000D736 6000 0000                  		bra.w	DisplaySprite
0000D73A                            ; ===========================================================================
0000D73A                            
0000D73A                            locret_C412:
0000D73A 4E75                       		rts	
0000D73C                            ; ===========================================================================
0000D73C                            
0000D73C                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000D73C 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D742 6600                       		bne.s	Obj34_Delete
0000D744 7002                       		moveq	#2,d0
0000D746 4EB9 0000 145E             		jsr	(LoadPLC).l	; load explosion patterns
0000D74C 7000                       		moveq	#0,d0
0000D74E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D752 0640 0015                  		addi.w	#$15,d0
0000D756 4EB9 0000 145E             		jsr	(LoadPLC).l	; load animal patterns
0000D75C                            
0000D75C                            Obj34_Delete:
0000D75C 6000 0000                  		bra.w	DeleteObject
0000D760                            ; ===========================================================================
0000D760 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000D762 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000D764 00E4                       		dc.w $E4
0000D766 0206                       		dc.b 2,	6
0000D768 00EA                       		dc.w $EA
0000D76A 0207                       		dc.b 2,	7
0000D76C 00E0                       		dc.w $E0
0000D76E 020A                       		dc.b 2,	$A
0000D770                            ; ---------------------------------------------------------------------------
0000D770                            ; Title	card configuration data
0000D770                            ; Format:
0000D770                            ; 4 bytes per item (YYYY XXXX)
0000D770                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000D770                            ; ---------------------------------------------------------------------------
0000D770 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D780 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000D790 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000D7A0 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000D7B0 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000D7C0 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000D7D0 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000D7E0                            ; ===========================================================================
0000D7E0                            ; ---------------------------------------------------------------------------
0000D7E0                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000D7E0                            ; ---------------------------------------------------------------------------
0000D7E0                            
0000D7E0                            Obj39:					; XREF: Obj_Index
0000D7E0 7000                       		moveq	#0,d0
0000D7E2 1028 0024                  		move.b	$24(a0),d0
0000D7E6 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000D7EA 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000D7EE                            ; ===========================================================================
0000D7EE 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000D7F0 0000                       		dc.w loc_C50C-Obj39_Index
0000D7F2 0000                       		dc.w Obj39_Wait-Obj39_Index
0000D7F4                            ; ===========================================================================
0000D7F4                            
0000D7F4                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000D7F4 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D7F8 6700                       		beq.s	Obj39_Main	; if yes, branch
0000D7FA 4E75                       		rts	
0000D7FC                            ; ===========================================================================
0000D7FC                            
0000D7FC                            Obj39_Main:
0000D7FC 5428 0024                  		addq.b	#2,$24(a0)
0000D800 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000D806 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000D80C 6700                       		beq.s	loc_C4EC	; if not, branch
0000D80E 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000D814                            
0000D814                            loc_C4EC:
0000D814 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000D81A 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000D822 317C 855E 0002             		move.w	#$855E,2(a0)
0000D828 117C 0000 0001             		move.b	#0,1(a0)
0000D82E 117C 0000 0018             		move.b	#0,$18(a0)
0000D834                            
0000D834                            loc_C50C:				; XREF: Obj39_Index
0000D834 7210                       		moveq	#$10,d1		; set horizontal speed
0000D836 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000D83C 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000D83E 6500                       		bcs.s	Obj39_Move
0000D840 4441                       		neg.w	d1
0000D842                            
0000D842                            Obj39_Move:
0000D842 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D846 6000 0000                  		bra.w	DisplaySprite
0000D84A                            ; ===========================================================================
0000D84A                            
0000D84A                            Obj39_SetWait:				; XREF: Obj39_Main
0000D84A 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000D850 5428 0024                  		addq.b	#2,$24(a0)
0000D854 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0000D85A 4A38 FE18                  		tst.b	($FFFFFE18).w
0000D85E 6600                       		bne.s	@nocontinues
0000D860 11FC 0009 F5CE             		move.b	#face_meltdown,(SonimeSST+sonime_face).w
0000D866                            
0000D866                            	@nocontinues:
0000D866 4E75                       		rts	
0000D868                            ; ===========================================================================
0000D868                            
0000D868                            Obj39_Wait:				; XREF: Obj39_Index
0000D868 1038 F605                  		move.b	($FFFFF605).w,d0
0000D86C 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000D870 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000D872 0828 0000 001A             		btst	#0,$1A(a0)
0000D878 6600                       		bne.s	Obj39_Display
0000D87A 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000D87E 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000D880 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D884 6000 0000                  		bra.w	DisplaySprite
0000D888                            ; ===========================================================================
0000D888                            
0000D888                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000D888 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000D88C 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000D88E 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000D894 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000D898 6600                       		bne.s	Obj39_Display	; if yes, branch
0000D89A 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set mode to 0 (Sega screen)
0000D8A0 6000                       		bra.s	Obj39_Display
0000D8A2                            ; ===========================================================================
0000D8A2                            
0000D8A2                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000D8A2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D8A8                            
0000D8A8                            Obj39_Display:				; XREF: Obj39_ChgMode
0000D8A8 6000 0000                  		bra.w	DisplaySprite
0000D8AC                            ; ===========================================================================
0000D8AC                            ; ---------------------------------------------------------------------------
0000D8AC                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000D8AC                            ; ---------------------------------------------------------------------------
0000D8AC                            
0000D8AC                            Obj3A:					; XREF: Obj_Index
0000D8AC 7000                       		moveq	#0,d0
0000D8AE 1028 0024                  		move.b	$24(a0),d0
0000D8B2 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000D8B6 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000D8BA                            ; ===========================================================================
0000D8BA 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000D8BC 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000D8BE 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D8C0 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000D8C2 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D8C4 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000D8C6 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D8C8 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000D8CA 0000                       		dc.w loc_C766-Obj3A_Index
0000D8CC                            ; ===========================================================================
0000D8CC                            
0000D8CC                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000D8CC 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D8D0 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000D8D2 4E75                       		rts	
0000D8D4                            ; ===========================================================================
0000D8D4                            
0000D8D4                            Obj3A_Main:
0000D8D4 2248                       		movea.l	a0,a1
0000D8D6 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000D8DC 7206                       		moveq	#6,d1
0000D8DE                            
0000D8DE                            Obj3A_Loop:
0000D8DE 12BC 003A                  		move.b	#$3A,0(a1)
0000D8E2 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000D8E6 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000D8EA 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D8EE 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D8F2 135A 0024                  		move.b	(a2)+,$24(a1)
0000D8F6 101A                       		move.b	(a2)+,d0
0000D8F8 0C00 0006                  		cmpi.b	#6,d0
0000D8FC 6600                       		bne.s	loc_C5CA
0000D8FE D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000D902                            
0000D902                            loc_C5CA:
0000D902 1340 001A                  		move.b	d0,$1A(a1)
0000D906 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000D90E 337C 8580 0002             		move.w	#$8580,2(a1)
0000D914 137C 0000 0001             		move.b	#0,1(a1)
0000D91A 43E9 0040                  		lea	$40(a1),a1
0000D91E 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000D922                            
0000D922                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000D922 7210                       		moveq	#$10,d1		; set horizontal speed
0000D924 3028 0030                  		move.w	$30(a0),d0
0000D928 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D92C 6700                       		beq.s	loc_C61A	; if yes, branch
0000D92E 6C00                       		bge.s	Obj3A_Move
0000D930 4441                       		neg.w	d1
0000D932                            
0000D932                            Obj3A_Move:
0000D932 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D936                            
0000D936                            loc_C5FE:				; XREF: loc_C61A
0000D936 3028 0008                  		move.w	8(a0),d0
0000D93A 6B00                       		bmi.s	locret_C60E
0000D93C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D940 6400                       		bcc.s	locret_C60E	; if yes, branch
0000D942 6000 0000                  		bra.w	DisplaySprite
0000D946                            ; ===========================================================================
0000D946                            
0000D946                            locret_C60E:
0000D946 4E75                       		rts	
0000D948                            ; ===========================================================================
0000D948                            
0000D948                            loc_C610:				; XREF: loc_C61A
0000D948 117C 000E 0024             		move.b	#$E,$24(a0)
0000D94E 6000 0000                  		bra.w	Obj3A_ChkPos2
0000D952                            ; ===========================================================================
0000D952                            
0000D952                            loc_C61A:				; XREF: Obj3A_ChkPos
0000D952 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000D958 67EE                       		beq.s	loc_C610
0000D95A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D960 66D4                       		bne.s	loc_C5FE
0000D962 5428 0024                  		addq.b	#2,$24(a0)
0000D966 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D96C                            
0000D96C                            Obj3A_Wait:				; XREF: Obj3A_Index
0000D96C 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D970 6600                       		bne.s	Obj3A_Display
0000D972 5428 0024                  		addq.b	#2,$24(a0)
0000D976                            
0000D976                            Obj3A_Display:
0000D976 6000 0000                  		bra.w	DisplaySprite
0000D97A                            ; ===========================================================================
0000D97A                            
0000D97A                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000D97A 6100 0000                  		bsr.w	DisplaySprite
0000D97E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000D984 7000                       		moveq	#0,d0
0000D986 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000D98A 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000D98C 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D990 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000D996                            
0000D996                            Obj3A_RingBonus:
0000D996 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D99A 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000D99C 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D9A0 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D9A6                            
0000D9A6                            Obj3A_ChkBonus:
0000D9A6 4A40                       		tst.w	d0		; is there any bonus?
0000D9A8 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000D9AA 303C 00C5                  		move.w	#$C5,d0
0000D9AE 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D9B4 5428 0024                  		addq.b	#2,$24(a0)
0000D9B8 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000D9BE 6600                       		bne.s	Obj3A_SetDelay
0000D9C0 5828 0024                  		addq.b	#4,$24(a0)
0000D9C4                            
0000D9C4                            Obj3A_SetDelay:
0000D9C4 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D9CA                            
0000D9CA                            locret_C692:
0000D9CA 4E75                       		rts	
0000D9CC                            ; ===========================================================================
0000D9CC                            
0000D9CC                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000D9CC 4EB9 0000 0000             		jsr	AddPoints
0000D9D2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D9D6 0200 0003                  		andi.b	#3,d0
0000D9DA 66EE                       		bne.s	locret_C692
0000D9DC 303C 00CD                  		move.w	#$CD,d0
0000D9E0 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D9E6                            ; ===========================================================================
0000D9E6                            
0000D9E6                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000D9E6 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D9EA 0240 0007                  		andi.w	#7,d0
0000D9EE E748                       		lsl.w	#3,d0
0000D9F0 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000D9F4 0241 0003                  		andi.w	#3,d1
0000D9F8 D241                       		add.w	d1,d1
0000D9FA D041                       		add.w	d1,d0
0000D9FC 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000DA00 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000DA04 4A40                       		tst.w	d0
0000DA06 6600                       		bne.s	Obj3A_ChkSS
0000DA08 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to level (00)
0000DA0E 6000                       		bra.s	Obj3A_Display2
0000DA10                            ; ===========================================================================
0000DA10                            
0000DA10                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000DA10 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000DA14 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000DA18 6700                       		beq.s	loc_C6EA	; if not, branch
0000DA1A 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000DA20 6000                       		bra.s	Obj3A_Display2
0000DA22                            ; ===========================================================================
0000DA22                            
0000DA22                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000DA22 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000DA28                            
0000DA28                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000DA28 6000 0000                  		bra.w	DisplaySprite
0000DA2C                            ; ===========================================================================
0000DA2C                            ; ---------------------------------------------------------------------------
0000DA2C                            ; Level	order array
0000DA2C                            ; ---------------------------------------------------------------------------
0000DA2C                            LevelOrder:	incbin	misc\lvl_ord.bin
0000DA5C                            		even
0000DA5C                            ; ===========================================================================
0000DA5C                            
0000DA5C                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000DA5C 7220                       		moveq	#$20,d1		; set horizontal speed
0000DA5E 3028 0032                  		move.w	$32(a0),d0
0000DA62 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000DA66 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000DA68 6C00                       		bge.s	Obj3A_Move2
0000DA6A 4441                       		neg.w	d1
0000DA6C                            
0000DA6C                            Obj3A_Move2:
0000DA6C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DA70 3028 0008                  		move.w	8(a0),d0
0000DA74 6B00                       		bmi.s	locret_C748
0000DA76 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DA7A 6400                       		bcc.s	locret_C748	; if yes, branch
0000DA7C 6000 0000                  		bra.w	DisplaySprite
0000DA80                            ; ===========================================================================
0000DA80                            
0000DA80                            locret_C748:
0000DA80 4E75                       		rts	
0000DA82                            ; ===========================================================================
0000DA82                            
0000DA82                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000DA82 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000DA88 6600 0000                  		bne.w	DeleteObject
0000DA8C 5428 0024                  		addq.b	#2,$24(a0)
0000DA90 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000DA94 303C 008D                  		move.w	#$8D,d0
0000DA98 4EF9 0000 121A             		jmp	(PlaySound).l	; play FZ music
0000DA9E                            ; ===========================================================================
0000DA9E                            
0000DA9E                            loc_C766:				; XREF: Obj3A_Index
0000DA9E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000DAA2 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000DAA8 6700 0000                  		beq.w	DeleteObject
0000DAAC 4E75                       		rts	
0000DAAE                            ; ===========================================================================
0000DAAE 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000DAB4 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000DAB6 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000DABC 0201                       		dc.b 2,	1
0000DABE 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000DAC4 0206                       		dc.b 2,	6
0000DAC6 0520 0120 00EC             		dc.w $520, $120, $EC
0000DACC 0202                       		dc.b 2,	2
0000DACE 0540 0120 00FC             		dc.w $540, $120, $FC
0000DAD4 0203                       		dc.b 2,	3
0000DAD6 0560 0120 010C             		dc.w $560, $120, $10C
0000DADC 0204                       		dc.b 2,	4
0000DADE 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000DAE4 0205                       		dc.b 2,	5
0000DAE6                            ; ===========================================================================
0000DAE6                            ; ---------------------------------------------------------------------------
0000DAE6                            ; Object 7E - special stage results screen
0000DAE6                            ; ---------------------------------------------------------------------------
0000DAE6                            
0000DAE6                            Obj7E:					; XREF: Obj_Index
0000DAE6 7000                       		moveq	#0,d0
0000DAE8 1028 0024                  		move.b	$24(a0),d0
0000DAEC 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000DAF0 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000DAF4                            ; ===========================================================================
0000DAF4 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000DAF6 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000DAF8 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000DAFA 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000DAFC 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000DAFE 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000DB00 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000DB02 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000DB04 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000DB06 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000DB08 0000                       		dc.w loc_C91A-Obj7E_Index
0000DB0A                            ; ===========================================================================
0000DB0A                            
0000DB0A                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000DB0A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000DB0E 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000DB10 4E75                       		rts	
0000DB12                            ; ===========================================================================
0000DB12                            
0000DB12                            Obj7E_Main:
0000DB12 2248                       		movea.l	a0,a1
0000DB14 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000DB1A 7203                       		moveq	#3,d1
0000DB1C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000DB22 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000DB24 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000DB26                            
0000DB26                            Obj7E_Loop:
0000DB26 12BC 007E                  		move.b	#$7E,0(a1)
0000DB2A 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000DB2E 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000DB32 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000DB36 135A 0024                  		move.b	(a2)+,$24(a1)
0000DB3A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000DB3E 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000DB46 337C A580 0002             		move.w	#$A580,2(a1)
0000DB4C 137C 0000 0001             		move.b	#0,1(a1)
0000DB52 43E9 0040                  		lea	$40(a1),a1
0000DB56 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000DB5A                            
0000DB5A 7007                       		moveq	#7,d0
0000DB5C 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000DB60 6700                       		beq.s	loc_C842
0000DB62 7000                       		moveq	#0,d0
0000DB64 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000DB68 6600                       		bne.s	loc_C842	; if not, branch
0000DB6A 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000DB6C 317C 0018 0008             		move.w	#$18,8(a0)
0000DB72 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000DB78                            
0000DB78                            loc_C842:
0000DB78 1140 001A                  		move.b	d0,$1A(a0)
0000DB7C                            
0000DB7C                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000DB7C 7210                       		moveq	#$10,d1		; set horizontal speed
0000DB7E 3028 0030                  		move.w	$30(a0),d0
0000DB82 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000DB86 6700                       		beq.s	loc_C86C	; if yes, branch
0000DB88 6C00                       		bge.s	Obj7E_Move
0000DB8A 4441                       		neg.w	d1
0000DB8C                            
0000DB8C                            Obj7E_Move:
0000DB8C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DB90                            
0000DB90                            loc_C85A:				; XREF: loc_C86C
0000DB90 3028 0008                  		move.w	8(a0),d0
0000DB94 6B00                       		bmi.s	locret_C86A
0000DB96 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DB9A 6400                       		bcc.s	locret_C86A	; if yes, branch
0000DB9C 6000 0000                  		bra.w	DisplaySprite
0000DBA0                            ; ===========================================================================
0000DBA0                            
0000DBA0                            locret_C86A:
0000DBA0 4E75                       		rts	
0000DBA2                            ; ===========================================================================
0000DBA2                            
0000DBA2                            loc_C86C:				; XREF: Obj7E_ChkPos
0000DBA2 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000DBA8 66E6                       		bne.s	loc_C85A
0000DBAA 5428 0024                  		addq.b	#2,$24(a0)
0000DBAE 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000DBB4 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000DBBA                            
0000DBBA                            Obj7E_Wait:				; XREF: Obj7E_Index
0000DBBA 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000DBBE 6600                       		bne.s	Obj7E_Display
0000DBC0 5428 0024                  		addq.b	#2,$24(a0)
0000DBC4                            
0000DBC4                            Obj7E_Display:
0000DBC4 6000 0000                  		bra.w	DisplaySprite
0000DBC8                            ; ===========================================================================
0000DBC8                            
0000DBC8                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000DBC8 6100 0000                  		bsr.w	DisplaySprite
0000DBCC 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000DBD2 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000DBD6 6700                       		beq.s	loc_C8C4	; if yes, branch
0000DBD8 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000DBDE 700A                       		moveq	#10,d0		; add 10 to score
0000DBE0 4EB9 0000 0000             		jsr	AddPoints
0000DBE6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DBEA 0200 0003                  		andi.b	#3,d0
0000DBEE 6600                       		bne.s	locret_C8EA
0000DBF0 303C 00CD                  		move.w	#$CD,d0
0000DBF4 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000DBFA                            ; ===========================================================================
0000DBFA                            
0000DBFA                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000DBFA 303C 00C5                  		move.w	#$C5,d0
0000DBFE 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000DC04 5428 0024                  		addq.b	#2,$24(a0)
0000DC08 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000DC0E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000DC14 6500                       		bcs.s	locret_C8EA	; if not, branch
0000DC16 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000DC1C 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000DC20                            
0000DC20                            locret_C8EA:
0000DC20 4E75                       		rts	
0000DC22                            ; ===========================================================================
0000DC22                            
0000DC22                            Obj7E_Exit:				; XREF: Obj7E_Index
0000DC22 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000DC28 6000 0000                  		bra.w	DisplaySprite
0000DC2C                            ; ===========================================================================
0000DC2C                            
0000DC2C                            Obj7E_Continue:				; XREF: Obj7E_Index
0000DC2C 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000DC32 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000DC38 303C 00BF                  		move.w	#$BF,d0
0000DC3C 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play continues music
0000DC42 5428 0024                  		addq.b	#2,$24(a0)
0000DC46 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000DC4C 6000 0000                  		bra.w	DisplaySprite
0000DC50                            ; ===========================================================================
0000DC50                            
0000DC50                            loc_C91A:				; XREF: Obj7E_Index
0000DC50 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DC54 0200 000F                  		andi.b	#$F,d0
0000DC58 6600                       		bne.s	Obj7E_Display2
0000DC5A 0868 0000 001A             		bchg	#0,$1A(a0)
0000DC60                            
0000DC60                            Obj7E_Display2:
0000DC60 6000 0000                  		bra.w	DisplaySprite
0000DC64                            ; ===========================================================================
0000DC64 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000DC6A 0200                       		dc.b 2,	0		; rountine number, frame number
0000DC6C 0320 0120 0118             		dc.w $320, $120, $118
0000DC72 0201                       		dc.b 2,	1
0000DC74 0360 0120 0128             		dc.w $360, $120, $128
0000DC7A 0202                       		dc.b 2,	2
0000DC7C 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000DC82 0203                       		dc.b 2,	3
0000DC84 03A0 0120 0138             		dc.w $3A0, $120, $138
0000DC8A 0206                       		dc.b 2,	6
0000DC8C                            ; ===========================================================================
0000DC8C                            ; ---------------------------------------------------------------------------
0000DC8C                            ; Object 7F - chaos emeralds from the special stage results screen
0000DC8C                            ; ---------------------------------------------------------------------------
0000DC8C                            
0000DC8C                            Obj7F:					; XREF: Obj_Index
0000DC8C 7000                       		moveq	#0,d0
0000DC8E 1028 0024                  		move.b	$24(a0),d0
0000DC92 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000DC96 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000DC9A                            ; ===========================================================================
0000DC9A 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000DC9C 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000DC9E                            
0000DC9E                            ; ---------------------------------------------------------------------------
0000DC9E                            ; X-axis positions for chaos emeralds
0000DC9E                            ; ---------------------------------------------------------------------------
0000DC9E 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000DCAA                            ; ===========================================================================
0000DCAA                            
0000DCAA                            Obj7F_Main:				; XREF: Obj7F_Index
0000DCAA 2248                       		movea.l	a0,a1
0000DCAC 45F9 0000 DC9E             		lea	(Obj7F_PosData).l,a2
0000DCB2 7400                       		moveq	#0,d2
0000DCB4 7200                       		moveq	#0,d1
0000DCB6 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000DCBA 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000DCBC 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000DCC0                            
0000DCC0                            Obj7F_Loop:
0000DCC0 12BC 007F                  		move.b	#$7F,0(a1)
0000DCC4 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000DCC8 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000DCCE 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000DCD2 1633 2000                  		move.b	(a3,d2.w),d3
0000DCD6 1343 001A                  		move.b	d3,$1A(a1)
0000DCDA 1343 001C                  		move.b	d3,$1C(a1)
0000DCDE 5202                       		addq.b	#1,d2
0000DCE0 5429 0024                  		addq.b	#2,$24(a1)
0000DCE4 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000DCEC 337C 8541 0002             		move.w	#$8541,2(a1)
0000DCF2 137C 0000 0001             		move.b	#0,1(a1)
0000DCF8 43E9 0040                  		lea	$40(a1),a1	; next object
0000DCFC 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000DD00                            
0000DD00                            Obj7F_Flash:				; XREF: Obj7F_Index
0000DD00 1028 001A                  		move.b	$1A(a0),d0
0000DD04 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000DD0A 0C00 0006                  		cmpi.b	#6,d0
0000DD0E 6600                       		bne.s	Obj7F_Display
0000DD10 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000DD16                            
0000DD16                            Obj7F_Display:
0000DD16 6000 0000                  		bra.w	DisplaySprite
0000DD1A                            ; ===========================================================================
0000DD1A                            ; ---------------------------------------------------------------------------
0000DD1A                            ; Sprite mappings - zone title cards
0000DD1A                            ; ---------------------------------------------------------------------------
0000DD1A 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000DD1C 0000                       		dc.w byte_CA2C-Map_obj34
0000DD1E 0000                       		dc.w byte_CA5A-Map_obj34
0000DD20 0000                       		dc.w byte_CA7A-Map_obj34
0000DD22 0000                       		dc.w byte_CAA8-Map_obj34
0000DD24 0000                       		dc.w byte_CADC-Map_obj34
0000DD26 0000                       		dc.w byte_CB10-Map_obj34
0000DD28 0000                       		dc.w byte_CB26-Map_obj34
0000DD2A 0000                       		dc.w byte_CB31-Map_obj34
0000DD2C 0000                       		dc.w byte_CB3C-Map_obj34
0000DD2E 0000                       		dc.w byte_CB47-Map_obj34
0000DD30 0000                       		dc.w byte_CB8A-Map_obj34
0000DD32 09                         byte_C9FE:	dc.b 9 			; GREEN HILL
0000DD33 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000DD38 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000DD3D F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000DD42 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000DD47 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000DD4C F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000DD51 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000DD56 F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000DD5B F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000DD60 09                         byte_CA2C:	dc.b 9			; LABYRINTH
0000DD61 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000DD66 F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000DD6B F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000DD70 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000DD75 F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000DD7A F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000DD7F F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000DD84 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000DD89 F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000DD8E 06                         byte_CA5A:	dc.b 6			; MARBLE
0000DD8F F805 002A CF               		dc.b $F8, 5, 0,	$2A, $CF
0000DD94 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000DD99 F805 003A F0               		dc.b $F8, 5, 0,	$3A, $F0
0000DD9E F805 0004 00               		dc.b $F8, 5, 0,	4, 0
0000DDA3 F805 0026 10               		dc.b $F8, 5, 0,	$26, $10
0000DDA8 F805 0010 20               		dc.b $F8, 5, 0,	$10, $20
0000DDAD 00                         		dc.b 0
0000DDAE 09                         byte_CA7A:	dc.b 9			; STAR	LIGHT
0000DDAF F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000DDB4 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000DDB9 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000DDBE F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000DDC3 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000DDC8 F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000DDCD F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000DDD2 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000DDD7 F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000DDDC 0A                         byte_CAA8:	dc.b $A			; SPRING YARD
0000DDDD F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000DDE2 F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000DDE7 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000DDEC F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000DDF1 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000DDF6 F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000DDFB F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000DE00 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000DE05 F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000DE0A F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000DE0F 00                         		dc.b 0
0000DE10 0A                         byte_CADC:	dc.b $A			; SCRAP BRAIN
0000DE11 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000DE16 F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000DE1B F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000DE20 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000DE25 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000DE2A F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000DE2F F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000DE34 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000DE39 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000DE3E F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000DE43 00                         		dc.b 0
0000DE44 04                         byte_CB10:	dc.b 4			; ZONE
0000DE45 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000DE4A F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000DE4F F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000DE54 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DE59 00                         		dc.b 0
0000DE5A 02                         byte_CB26:	dc.b 2			; ACT 1
0000DE5B 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000DE60 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000DE65 02                         byte_CB31:	dc.b 2			; ACT 2
0000DE66 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000DE6B F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000DE70 02                         byte_CB3C:	dc.b 2			; ACT 3
0000DE71 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000DE76 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000DE7B 0D                         byte_CB47:	dc.b $D			; Oval
0000DE7C E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000DE81 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000DE86 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000DE8B F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000DE90 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000DE95 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000DE9A 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000DE9F FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000DEA4 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000DEA9 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000DEAE FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000DEB3 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000DEB8 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000DEBD 00                         		dc.b 0
0000DEBE 05                         byte_CB8A:	dc.b 5			; FINAL
0000DEBF F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000DEC4 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000DEC9 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000DECE F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000DED3 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000DED8                            		even
0000DED8                            ; ---------------------------------------------------------------------------
0000DED8                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000DED8                            ; ---------------------------------------------------------------------------
0000DED8                            Map_obj39:
0000DED8                            	include "_maps\obj39.asm"
0000DED8                            ; ---------------------------------------------------------------------------
0000DED8                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000DED8                            ; ---------------------------------------------------------------------------
0000DED8 0000                       		dc.w byte_CBAC-Map_obj39
0000DEDA 0000                       		dc.w byte_CBB7-Map_obj39
0000DEDC 0000                       		dc.w byte_CBC2-Map_obj39
0000DEDE 0000                       		dc.w byte_CBCD-Map_obj39
0000DEE0 02                         byte_CBAC:	dc.b 2
0000DEE1 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000DEE6 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000DEEB 02                         byte_CBB7:	dc.b 2
0000DEEC F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000DEF1 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000DEF6 02                         byte_CBC2:	dc.b 2
0000DEF7 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000DEFC F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000DF01 02                         byte_CBCD:	dc.b 2
0000DF02 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000DF07 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000DF0C                            		even
0000DF0C                            		even
0000DF0C                            
0000DF0C                            ; ---------------------------------------------------------------------------
0000DF0C                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000DF0C                            ; ---------------------------------------------------------------------------
0000DF0C 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000DF0E 0000                       		dc.w byte_CC13-Map_obj3A
0000DF10 0000                       		dc.w byte_CC32-Map_obj3A
0000DF12 0000                       		dc.w byte_CC51-Map_obj3A
0000DF14 0000                       		dc.w byte_CC75-Map_obj3A
0000DF16 FF6F                       		dc.w byte_CB47-Map_obj3A
0000DF18 FF4E                       		dc.w byte_CB26-Map_obj3A
0000DF1A FF59                       		dc.w byte_CB31-Map_obj3A
0000DF1C FF64                       		dc.w byte_CB3C-Map_obj3A
0000DF1E 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000DF1F F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000DF24 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000DF29 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000DF2E F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000DF33 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000DF38 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000DF3D F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000DF42 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000DF47 06                         byte_CC13:	dc.b 6			; PASSED
0000DF48 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000DF4D F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000DF52 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000DF57 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000DF5C F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DF61 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000DF66 06                         byte_CC32:	dc.b 6			; SCORE
0000DF67 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000DF6C F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000DF71 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000DF76 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000DF7B F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000DF80 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000DF85 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000DF86 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000DF8B F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DF90 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DF95 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DF9A FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DF9F F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000DFA4 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DFA9 07                         byte_CC75:	dc.b 7			; RING BONUS
0000DFAA F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000DFAF F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DFB4 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DFB9 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DFBE FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DFC3 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000DFC8 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DFCE 00                         		even
0000DFCE                            ; ---------------------------------------------------------------------------
0000DFCE                            ; Sprite mappings - special stage results screen
0000DFCE                            ; ---------------------------------------------------------------------------
0000DFCE 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000DFD0 0000                       		dc.w byte_CCEE-Map_obj7E
0000DFD2 0000                       		dc.w byte_CD0D-Map_obj7E
0000DFD4 FEAD                       		dc.w byte_CB47-Map_obj7E
0000DFD6 0000                       		dc.w byte_CD31-Map_obj7E
0000DFD8 0000                       		dc.w byte_CD46-Map_obj7E
0000DFDA 0000                       		dc.w byte_CD5B-Map_obj7E
0000DFDC 0000                       		dc.w byte_CD6B-Map_obj7E
0000DFDE 0000                       		dc.w byte_CDA8-Map_obj7E
0000DFE0 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000DFE1 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000DFE6 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000DFEB F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000DFF0 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000DFF5 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000DFFA F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000DFFF F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000E004 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000E009 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000E00E F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000E013 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000E018 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000E01D F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000E022 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000E023 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000E028 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000E02D F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000E032 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000E037 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000E03C FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000E041 07                         byte_CD0D:	dc.b 7
0000E042 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000E047 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000E04C F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000E051 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000E056 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000E05B F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000E060 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000E065 04                         byte_CD31:	dc.b 4
0000E066 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E06B F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E070 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E075 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000E07A 04                         byte_CD46:	dc.b 4
0000E07B F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E080 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E085 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E08A F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000E08F 03                         byte_CD5B:	dc.b 3
0000E090 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E095 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E09A F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E09F 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000E0A0 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000E0A5 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000E0AA F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000E0AF F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000E0B4 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000E0B9 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000E0BE F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000E0C3 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000E0C8 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000E0CD F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000E0D2 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000E0D7 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000E0DC 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000E0DD F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000E0E2 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000E0E7 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000E0EC F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000E0F1 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000E0F6 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000E0FB F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000E100 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000E105 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000E10A F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000E10F F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000E114 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000E119 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000E11E F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000E123 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000E128                            		even
0000E128                            ; ---------------------------------------------------------------------------
0000E128                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000E128                            ; ---------------------------------------------------------------------------
0000E128                            Map_obj7F:
0000E128                            	include "_maps\obj7F.asm"
0000E128                            ; ---------------------------------------------------------------------------
0000E128                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000E128                            ; ---------------------------------------------------------------------------
0000E128 0000                       		dc.w byte_CE02-Map_obj7F
0000E12A 0000                       		dc.w byte_CE08-Map_obj7F
0000E12C 0000                       		dc.w byte_CE0E-Map_obj7F
0000E12E 0000                       		dc.w byte_CE14-Map_obj7F
0000E130 0000                       		dc.w byte_CE1A-Map_obj7F
0000E132 0000                       		dc.w byte_CE20-Map_obj7F
0000E134 0000                       		dc.w byte_CE26-Map_obj7F
0000E136 01                         byte_CE02:	dc.b 1
0000E137 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8
0000E13C 01                         byte_CE08:	dc.b 1
0000E13D F805 2000 F8               		dc.b $F8, 5, $20,	0, $F8
0000E142 01                         byte_CE0E:	dc.b 1
0000E143 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000E148 01                         byte_CE14:	dc.b 1
0000E149 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000E14E 01                         byte_CE1A:	dc.b 1
0000E14F F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8
0000E154 01                         byte_CE20:	dc.b 1
0000E155 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8
0000E15A 00                         byte_CE26:	dc.b 0			; Blank frame
0000E15C 00                         		even
0000E15C 00                         		even
0000E15C                            
0000E15C                            ; ===========================================================================
0000E15C                            ; ---------------------------------------------------------------------------
0000E15C                            ; Object 36 - spikes
0000E15C                            ; ---------------------------------------------------------------------------
0000E15C                            
0000E15C                            Obj36:					; XREF: Obj_Index
0000E15C 7000                       		moveq	#0,d0
0000E15E 1028 0024                  		move.b	$24(a0),d0
0000E162 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000E166 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000E16A                            ; ===========================================================================
0000E16A 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000E16C 0000                       		dc.w Obj36_Solid-Obj36_Index
0000E16E                            
0000E16E 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000E170 0110                       		dc.b 1,	$10
0000E172 0204                       		dc.b 2,	4
0000E174 031C                       		dc.b 3,	$1C
0000E176 0440                       		dc.b 4,	$40
0000E178 0510                       		dc.b 5,	$10
0000E17A                            ; ===========================================================================
0000E17A                            
0000E17A                            Obj36_Main:				; XREF: Obj36_Index
0000E17A 5428 0024                  		addq.b	#2,$24(a0)
0000E17E 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000E186 317C 051B 0002             		move.w	#$51B,2(a0)
0000E18C 0028 0004 0001             		ori.b	#4,1(a0)
0000E192 117C 0004 0018             		move.b	#4,$18(a0)
0000E198 1028 0028                  		move.b	$28(a0),d0
0000E19C 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E1A2 0240 00F0                  		andi.w	#$F0,d0
0000E1A6 43F9 0000 E16E             		lea	(Obj36_Var).l,a1
0000E1AC E648                       		lsr.w	#3,d0
0000E1AE D2C0                       		adda.w	d0,a1
0000E1B0 1159 001A                  		move.b	(a1)+,$1A(a0)
0000E1B4 1159 0019                  		move.b	(a1)+,$19(a0)
0000E1B8 3168 0008 0030             		move.w	8(a0),$30(a0)
0000E1BE 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000E1C4                            
0000E1C4                            Obj36_Solid:				; XREF: Obj36_Index
0000E1C4 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000E1C8 343C 0004                  		move.w	#4,d2
0000E1CC 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000E1D2 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000E1D4 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000E1DA 6600                       		bne.s	Obj36_Upright	; if not, branch
0000E1DC 343C 0014                  		move.w	#$14,d2
0000E1E0                            
0000E1E0                            ; Spikes types $1x and $5x face	sideways
0000E1E0                            
0000E1E0                            Obj36_SideWays:				; XREF: Obj36_Solid
0000E1E0 323C 001B                  		move.w	#$1B,d1
0000E1E4 3602                       		move.w	d2,d3
0000E1E6 5243                       		addq.w	#1,d3
0000E1E8 3828 0008                  		move.w	8(a0),d4
0000E1EC 6100 0000                  		bsr.w	SolidObject
0000E1F0 0828 0003 0022             		btst	#3,$22(a0)
0000E1F6 6600                       		bne.s	Obj36_Display
0000E1F8 0C44 0001                  		cmpi.w	#1,d4
0000E1FC 6700                       		beq.s	Obj36_Hurt
0000E1FE 6000                       		bra.s	Obj36_Display
0000E200                            ; ===========================================================================
0000E200                            
0000E200                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000E200                            
0000E200                            Obj36_Upright:				; XREF: Obj36_Solid
0000E200 7200                       		moveq	#0,d1
0000E202 1228 0019                  		move.b	$19(a0),d1
0000E206 0641 000B                  		addi.w	#$B,d1
0000E20A 343C 0010                  		move.w	#$10,d2
0000E20E 363C 0011                  		move.w	#$11,d3
0000E212 3828 0008                  		move.w	8(a0),d4
0000E216 6100 0000                  		bsr.w	SolidObject
0000E21A 0828 0003 0022             		btst	#3,$22(a0)
0000E220 6600                       		bne.s	Obj36_Hurt
0000E222 4A44                       		tst.w	d4
0000E224 6A00                       		bpl.s	Obj36_Display
0000E226                            
0000E226                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000E226 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000E22A 6600                       		bne.s	Obj36_PreDisplay	; if yes, branch
0000E22C 2F08                       		move.l	a0,-(sp)
0000E22E 2448                       		movea.l	a0,a2
0000E230 41F8 D000                  		lea	($FFFFD000).w,a0
0000E234 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000E23A 6400                       		bcc.s	loc_CF20
0000E23C 2628 000C                  		move.l	$C(a0),d3
0000E240 3028 0012                  		move.w	$12(a0),d0
0000E244 48C0                       		ext.l	d0
0000E246 E180                       		asl.l	#8,d0
0000E248 9680                       		sub.l	d0,d3
0000E24A 2143 000C                  		move.l	d3,$C(a0)
0000E24E 4EB9 0000 0000             		jsr	HurtSonic
0000E254                            
0000E254                            loc_CF20:
0000E254 205F                       		movea.l	(sp)+,a0
0000E256 6000                       		bra.s	Obj36_Display
0000E258                            
0000E258                            Obj36_PreDisplay:
0000E258 0C78 0100 D032             		cmpi.w	#$100,($FFFFD032).w
0000E25E 6E00                       		bgt.s	Obj36_Display
0000E260 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
0000E266 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000E26C                            
0000E26C                            Obj36_Display:
0000E26C 6100 0000                  		bsr.w	DisplaySprite
0000E270 3028 0030                  		move.w	$30(a0),d0
0000E274 0240 FF80                  		andi.w	#$FF80,d0
0000E278 3238 F700                  		move.w	($FFFFF700).w,d1
0000E27C 0441 0080                  		subi.w	#$80,d1
0000E280 0241 FF80                  		andi.w	#$FF80,d1
0000E284 9041                       		sub.w	d1,d0
0000E286 0C40 0280                  		cmpi.w	#$280,d0
0000E28A 6300                       		bls.s	Obj36_NoDel
0000E28C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000E290 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000E294 3440                       		movea.w	d0,a2	; load address into a2
0000E296 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000E29A 6000 0000                  		bra.w	DeleteObject	; and delete object
0000E29E                            
0000E29E                            Obj36_NoDel:
0000E29E 4E75                       		rts	
0000E2A0                            ; ===========================================================================
0000E2A0                            
0000E2A0                            Obj36_Type0x:				; XREF: Obj36_Solid
0000E2A0 7000                       		moveq	#0,d0
0000E2A2 1028 0028                  		move.b	$28(a0),d0
0000E2A6 D040                       		add.w	d0,d0
0000E2A8 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000E2AC 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000E2B0                            ; ===========================================================================
0000E2B0 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000E2B2 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000E2B4 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000E2B6                            ; ===========================================================================
0000E2B6                            
0000E2B6                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000E2B6 4E75                       		rts			; don't move the object
0000E2B8                            ; ===========================================================================
0000E2B8                            
0000E2B8                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000E2B8 6100 0000                  		bsr.w	Obj36_Wait
0000E2BC 7000                       		moveq	#0,d0
0000E2BE 1028 0034                  		move.b	$34(a0),d0
0000E2C2 D068 0032                  		add.w	$32(a0),d0
0000E2C6 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000E2CA 4E75                       		rts	
0000E2CC                            ; ===========================================================================
0000E2CC                            
0000E2CC                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000E2CC 6100 0000                  		bsr.w	Obj36_Wait
0000E2D0 7000                       		moveq	#0,d0
0000E2D2 1028 0034                  		move.b	$34(a0),d0
0000E2D6 D068 0030                  		add.w	$30(a0),d0
0000E2DA 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000E2DE 4E75                       		rts	
0000E2E0                            ; ===========================================================================
0000E2E0                            
0000E2E0                            Obj36_Wait:
0000E2E0 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000E2E4 6700                       		beq.s	loc_CFA4	; if yes, branch
0000E2E6 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000E2EA 6600                       		bne.s	locret_CFE6
0000E2EC 4A28 0001                  		tst.b	1(a0)
0000E2F0 6A00                       		bpl.s	locret_CFE6
0000E2F2 303C 00B6                  		move.w	#$B6,d0
0000E2F6 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000E2FC 6000                       		bra.s	locret_CFE6
0000E2FE                            ; ===========================================================================
0000E2FE                            
0000E2FE                            loc_CFA4:
0000E2FE 4A68 0036                  		tst.w	$36(a0)
0000E302 6700                       		beq.s	loc_CFC6
0000E304 0468 0800 0034             		subi.w	#$800,$34(a0)
0000E30A 6400                       		bcc.s	locret_CFE6
0000E30C 317C 0000 0034             		move.w	#0,$34(a0)
0000E312 317C 0000 0036             		move.w	#0,$36(a0)
0000E318 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E31E 6000                       		bra.s	locret_CFE6
0000E320                            ; ===========================================================================
0000E320                            
0000E320                            loc_CFC6:
0000E320 0668 0800 0034             		addi.w	#$800,$34(a0)
0000E326 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000E32C 6500                       		bcs.s	locret_CFE6
0000E32E 317C 2000 0034             		move.w	#$2000,$34(a0)
0000E334 317C 0001 0036             		move.w	#1,$36(a0)
0000E33A 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E340                            
0000E340                            locret_CFE6:
0000E340 4E75                       		rts	
0000E342                            ; ===========================================================================
0000E342                            ; ---------------------------------------------------------------------------
0000E342                            ; Sprite mappings - spikes
0000E342                            ; ---------------------------------------------------------------------------
0000E342                            Map_obj36:
0000E342                            	include "_maps\obj36.asm"
0000E342                            ; ---------------------------------------------------------------------------
0000E342                            ; Sprite mappings - spikes
0000E342                            ; ---------------------------------------------------------------------------
0000E342 0000                       		dc.w byte_CFF4-Map_obj36
0000E344 0000                       		dc.w byte_D004-Map_obj36
0000E346 0000                       		dc.w byte_D014-Map_obj36
0000E348 0000                       		dc.w byte_D01A-Map_obj36
0000E34A 0000                       		dc.w byte_D02A-Map_obj36
0000E34C 0000                       		dc.w byte_D049-Map_obj36
0000E34E 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000E34F F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000E354 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E359 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000E35E 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000E35F EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000E364 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000E369 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000E36E 01                         byte_D014:	dc.b 1			; 1 spike
0000E36F F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E374 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000E375 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000E37A F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E37F F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000E384 06                         byte_D02A:	dc.b 6			; 6 spikes
0000E385 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000E38A F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000E38F F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000E394 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000E399 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000E39E F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000E3A3 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000E3A4 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000E3AA 00                         		even
0000E3AA 00                         		even
0000E3AA                            
0000E3AA                            ; ===========================================================================
0000E3AA                            ; ---------------------------------------------------------------------------
0000E3AA                            ; Object 3B - purple rock (GHZ)
0000E3AA                            ; ---------------------------------------------------------------------------
0000E3AA                            
0000E3AA                            Obj3B:					; XREF: Obj_Index
0000E3AA 7000                       		moveq	#0,d0
0000E3AC 1028 0024                  		move.b	$24(a0),d0
0000E3B0 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000E3B4 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000E3B8                            ; ===========================================================================
0000E3B8 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000E3BA 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000E3BC                            ; ===========================================================================
0000E3BC                            
0000E3BC                            Obj3B_Main:				; XREF: Obj3B_Index
0000E3BC 5428 0024                  		addq.b	#2,$24(a0)
0000E3C0 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000E3C8 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000E3CE 117C 0004 0001             		move.b	#4,1(a0)
0000E3D4 117C 0013 0019             		move.b	#$13,$19(a0)
0000E3DA 117C 0004 0018             		move.b	#4,$18(a0)
0000E3E0                            
0000E3E0                            Obj3B_Solid:				; XREF: Obj3B_Index
0000E3E0 323C 001B                  		move.w	#$1B,d1
0000E3E4 343C 0010                  		move.w	#$10,d2
0000E3E8 363C 0010                  		move.w	#$10,d3
0000E3EC 3828 0008                  		move.w	8(a0),d4
0000E3F0 6100 0000                  		bsr.w	SolidObject
0000E3F4 6100 0000                  		bsr.w	DisplaySprite
0000E3F8 3028 0008                  		move.w	8(a0),d0
0000E3FC 0240 FF80                  		andi.w	#$FF80,d0
0000E400 3238 F700                  		move.w	($FFFFF700).w,d1
0000E404 0441 0080                  		subi.w	#$80,d1
0000E408 0241 FF80                  		andi.w	#$FF80,d1
0000E40C 9041                       		sub.w	d1,d0
0000E40E 0C40 0280                  		cmpi.w	#$280,d0
0000E412 6300                       		bls.s	Obj3B_NoDel
0000E414 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000E418 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000E41C 3440                       		movea.w	d0,a2	; load address into a2
0000E41E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000E422 6000 0000                  		bra.w	DeleteObject	; and delete object
0000E426                            
0000E426                            Obj3B_NoDel:
0000E426 4E75                       		rts	
0000E428                            ; ===========================================================================
0000E428                            ; ---------------------------------------------------------------------------
0000E428                            ; Object 49 - waterfall	sound effect (GHZ)
0000E428                            ; ---------------------------------------------------------------------------
0000E428                            
0000E428                            Obj49:					; XREF: Obj_Index
0000E428 7000                       		moveq	#0,d0
0000E42A 1028 0024                  		move.b	$24(a0),d0
0000E42E 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000E432 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000E436                            ; ===========================================================================
0000E436 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000E438 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000E43A                            ; ===========================================================================
0000E43A                            
0000E43A                            Obj49_Main:				; XREF: Obj49_Index
0000E43A 5428 0024                  		addq.b	#2,$24(a0)
0000E43E 117C 0004 0001             		move.b	#4,1(a0)
0000E444                            
0000E444                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000E444 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E448 0200 003F                  		andi.b	#$3F,d0
0000E44C 6600                       		bne.s	Obj49_ChkDel
0000E44E 303C 00D0                  		move.w	#$D0,d0
0000E452 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000E458                            
0000E458                            Obj49_ChkDel:
0000E458 3028 0008                  		move.w	8(a0),d0
0000E45C 0240 FF80                  		andi.w	#$FF80,d0
0000E460 3238 F700                  		move.w	($FFFFF700).w,d1
0000E464 0441 0080                  		subi.w	#$80,d1
0000E468 0241 FF80                  		andi.w	#$FF80,d1
0000E46C 9041                       		sub.w	d1,d0
0000E46E 0C40 0280                  		cmpi.w	#$280,d0
0000E472 6300                       		bls.s	Obj49_NoDel
0000E474 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000E478 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000E47C 3440                       		movea.w	d0,a2	; load address into a2
0000E47E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000E482 6000 0000                  		bra.w	DeleteObject	; and delete object
0000E486                            
0000E486                            Obj49_NoDel:
0000E486 4E75                       		rts	
0000E488                            ; ===========================================================================
0000E488                            ; ---------------------------------------------------------------------------
0000E488                            ; Sprite mappings - purple rock	(GHZ)
0000E488                            ; ---------------------------------------------------------------------------
0000E488                            Map_obj3B:
0000E488                            	include "_maps\obj3B.asm"
0000E488                            ; ---------------------------------------------------------------------------
0000E488                            ; Sprite mappings - purple rock	(GHZ)
0000E488                            ; ---------------------------------------------------------------------------
0000E488 0000                       		dc.w byte_D110-Map_obj3B
0000E48A 02                         byte_D110:	dc.b 2
0000E48B F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000E490 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000E496 00                         		even
0000E496 00                         		even
0000E496                            
0000E496                            ; ===========================================================================
0000E496                            ; ---------------------------------------------------------------------------
0000E496                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000E496                            ; ---------------------------------------------------------------------------
0000E496                            
0000E496                            Obj3C:					; XREF: Obj_Index
0000E496 7000                       		moveq	#0,d0
0000E498 1028 0024                  		move.b	$24(a0),d0
0000E49C 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000E4A0 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000E4A4 6000 0000                  		bra.w	MarkObjGone
0000E4A8                            ; ===========================================================================
0000E4A8 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000E4AA 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000E4AC 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000E4AE                            ; ===========================================================================
0000E4AE                            
0000E4AE                            Obj3C_Main:				; XREF: Obj3C_Index
0000E4AE 5428 0024                  		addq.b	#2,$24(a0)
0000E4B2 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000E4BA 317C 450F 0002             		move.w	#$450F,2(a0)
0000E4C0 117C 0004 0001             		move.b	#4,1(a0)
0000E4C6 117C 0010 0019             		move.b	#$10,$19(a0)
0000E4CC 117C 0004 0018             		move.b	#4,$18(a0)
0000E4D2 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000E4D8                            
0000E4D8                            Obj3C_Solid:				; XREF: Obj3C_Index
0000E4D8 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000E4DE 323C 001B                  		move.w	#$1B,d1
0000E4E2 343C 0020                  		move.w	#$20,d2
0000E4E6 363C 0020                  		move.w	#$20,d3
0000E4EA 3828 0008                  		move.w	8(a0),d4
0000E4EE 6100 0000                  		bsr.w	SolidObject
0000E4F2 0828 0005 0022             		btst	#5,$22(a0)
0000E4F8 6600                       		bne.s	Obj3C_ChkRoll
0000E4FA                            
0000E4FA                            locret_D180:
0000E4FA 4E75                       		rts	
0000E4FC                            ; ===========================================================================
0000E4FC                            
0000E4FC                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000E4FC 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000E502 66F6                       		bne.s	locret_D180	; if not, branch
0000E504 3028 0030                  		move.w	$30(a0),d0
0000E508 6A00                       		bpl.s	Obj3C_ChkSpeed
0000E50A 4440                       		neg.w	d0
0000E50C                            
0000E50C                            Obj3C_ChkSpeed:
0000E50C 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000E510 65E8                       		bcs.s	locret_D180	; if not, branch
0000E512 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000E518 5869 0008                  		addq.w	#4,8(a1)
0000E51C 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000E522 3028 0008                  		move.w	8(a0),d0
0000E526 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000E52A 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000E52C 5169 0008                  		subq.w	#8,8(a1)
0000E530 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000E536                            
0000E536                            Obj3C_Smash:
0000E536 3369 0010 0020             		move.w	$10(a1),$20(a1)
0000E53C 08A8 0005 0022             		bclr	#5,$22(a0)
0000E542 08A9 0005 0022             		bclr	#5,$22(a1)
0000E548 7207                       		moveq	#7,d1		; load 8 fragments
0000E54A 343C 0070                  		move.w	#$70,d2
0000E54E 6100                       		bsr.s	SmashObject
0000E550                            
0000E550                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000E550 6100 0000                  		bsr.w	SpeedToPos
0000E554 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000E55A 6100 0000                  		bsr.w	DisplaySprite
0000E55E 4A28 0001                  		tst.b	1(a0)
0000E562 6A00 0000                  		bpl.w	DeleteObject
0000E566 4E75                       		rts	
0000E568                            
0000E568                            ; ---------------------------------------------------------------------------
0000E568                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000E568                            ; ---------------------------------------------------------------------------
0000E568                            
0000E568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E568                            
0000E568                            
0000E568                            SmashObject:				; XREF: Obj3C_Smash
0000E568 7000                       		moveq	#0,d0
0000E56A 1028 001A                  		move.b	$1A(a0),d0
0000E56E D040                       		add.w	d0,d0
0000E570 2668 0004                  		movea.l	4(a0),a3
0000E574 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000E578 524B                       		addq.w	#1,a3
0000E57A 08E8 0005 0001             		bset	#5,1(a0)
0000E580 1810                       		move.b	0(a0),d4
0000E582 1A28 0001                  		move.b	1(a0),d5
0000E586 2248                       		movea.l	a0,a1
0000E588 6000                       		bra.s	Smash_LoadFrag
0000E58A                            ; ===========================================================================
0000E58A                            
0000E58A                            Smash_Loop:
0000E58A 6100 0000                  		bsr.w	SingleObjLoad
0000E58E 6600                       		bne.s	Smash_PlaySnd
0000E590 5A4B                       		addq.w	#5,a3
0000E592                            
0000E592                            Smash_LoadFrag:				; XREF: SmashObject
0000E592 137C 0004 0024             		move.b	#4,$24(a1)
0000E598 1284                       		move.b	d4,0(a1)
0000E59A 234B 0004                  		move.l	a3,4(a1)
0000E59E 1345 0001                  		move.b	d5,1(a1)
0000E5A2 3368 0008 0008             		move.w	8(a0),8(a1)
0000E5A8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E5AE 3368 0002 0002             		move.w	2(a0),2(a1)
0000E5B4 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000E5BA 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000E5C0 335C 0010                  		move.w	(a4)+,$10(a1)
0000E5C4 335C 0012                  		move.w	(a4)+,$12(a1)
0000E5C8 B3C8                       		cmpa.l	a0,a1
0000E5CA 6400                       		bcc.s	loc_D268
0000E5CC 2F08                       		move.l	a0,-(sp)
0000E5CE 2049                       		movea.l	a1,a0
0000E5D0 6100 0000                  		bsr.w	SpeedToPos
0000E5D4 D568 0012                  		add.w	d2,$12(a0)
0000E5D8 205F                       		movea.l	(sp)+,a0
0000E5DA 6100 0000                  		bsr.w	DisplaySprite2
0000E5DE                            
0000E5DE                            loc_D268:
0000E5DE 51C9 FFAA                  		dbf	d1,Smash_Loop
0000E5E2                            
0000E5E2                            Smash_PlaySnd:
0000E5E2 303C 00CB                  		move.w	#$CB,d0
0000E5E6 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play smashing sound
0000E5EC                            ; End of function SmashObject
0000E5EC                            
0000E5EC                            ; ===========================================================================
0000E5EC                            ; Smashed block	fragment speeds
0000E5EC                            ;
0000E5EC 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000E5F0 0600 FF00                  		dc.w $600, $FF00
0000E5F4 0600 0100                  		dc.w $600, $100
0000E5F8 0400 0500                  		dc.w $400, $500
0000E5FC 0600 FA00                  		dc.w $600, $FA00
0000E600 0800 FE00                  		dc.w $800, $FE00
0000E604 0800 0200                  		dc.w $800, $200
0000E608 0600 0600                  		dc.w $600, $600
0000E60C                            
0000E60C FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000E610 F800 FE00                  		dc.w $F800, $FE00
0000E614 F800 0200                  		dc.w $F800, $200
0000E618 FA00 0600                  		dc.w $FA00, $600
0000E61C FC00 FB00                  		dc.w $FC00, $FB00
0000E620 FA00 FF00                  		dc.w $FA00, $FF00
0000E624 FA00 0100                  		dc.w $FA00, $100
0000E628 FC00 0500                  		dc.w $FC00, $500
0000E62C                            ; ---------------------------------------------------------------------------
0000E62C                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000E62C                            ; ---------------------------------------------------------------------------
0000E62C                            Map_obj3C:
0000E62C                            	include "_maps\obj3C.asm"
0000E62C                            ; ---------------------------------------------------------------------------
0000E62C                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000E62C                            ; ---------------------------------------------------------------------------
0000E62C 0000                       		dc.w byte_D2BC-Map_obj3C
0000E62E 0000                       		dc.w byte_D2E5-Map_obj3C
0000E630 0000                       		dc.w byte_D30E-Map_obj3C
0000E632 08                         byte_D2BC:	dc.b 8
0000E633 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000E638 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000E63D 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000E642 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000E647 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000E64C F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000E651 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000E656 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000E65B 08                         byte_D2E5:	dc.b 8
0000E65C E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000E661 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000E666 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000E66B 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000E670 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000E675 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000E67A 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000E67F 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000E684 08                         byte_D30E:	dc.b 8
0000E685 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000E68A F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000E68F 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000E694 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000E699 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000E69E F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000E6A3 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000E6A8 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000E6AE 00                         		even
0000E6AE 00                         		even
0000E6AE                            
0000E6AE                            ; ---------------------------------------------------------------------------
0000E6AE                            ; Object code loading subroutine
0000E6AE                            ; ---------------------------------------------------------------------------
0000E6AE                            
0000E6AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E6AE                            
0000E6AE                            
0000E6AE                            ObjectsLoad:				; XREF: TitleScreen; et al
0000E6AE 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000E6B2 7E7F                       		moveq	#$7F,d7
0000E6B4 7000                       		moveq	#0,d0
0000E6B6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000E6BC 6400                       		bcc.s	loc_D362
0000E6BE                            
0000E6BE                            loc_D348:
0000E6BE 1010                       		move.b	(a0),d0		; load object number from RAM
0000E6C0 6700                       		beq.s	loc_D358
0000E6C2 D040                       		add.w	d0,d0
0000E6C4 D040                       		add.w	d0,d0
0000E6C6 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000E6CA 4E91                       		jsr	(a1)		; run the object's code
0000E6CC 7000                       		moveq	#0,d0
0000E6CE                            
0000E6CE                            loc_D358:
0000E6CE 41E8 0040                  		lea	$40(a0),a0	; next object
0000E6D2 51CF FFEA                  		dbf	d7,loc_D348
0000E6D6 4E75                       		rts
0000E6D8                            ; ===========================================================================
0000E6D8                            
0000E6D8                            loc_D362:
0000E6D8 0C38 000A D024             		cmpi.b	#$A,($FFFFD000+$24).w	; Has Sonic drowned?
0000E6DE 67DE                       		beq.s	loc_D348				; If so, run objects a little longer
0000E6E0 7E1F                       		moveq	#$1F,d7
0000E6E2 61DA                       		bsr.s	loc_D348
0000E6E4 7E5F                       		moveq	#$5F,d7
0000E6E6                            
0000E6E6                            loc_D368:
0000E6E6 7000                       		moveq	#0,d0
0000E6E8 1010                       		move.b	(a0),d0
0000E6EA 6700                       		beq.s	loc_D378
0000E6EC 4A28 0001                  		tst.b	1(a0)
0000E6F0 6A00                       		bpl.s	loc_D378
0000E6F2 6100 0000                  		bsr.w	DisplaySprite
0000E6F6                            
0000E6F6                            loc_D378:
0000E6F6 41E8 0040                  		lea	$40(a0),a0
0000E6FA                            
0000E6FA                            loc_D37C:
0000E6FA 51CF FFEA                  		dbf	d7,loc_D368
0000E6FE 4E75                       		rts
0000E700                            ; End of function ObjectsLoad
0000E700                            
0000E700                            ; ===========================================================================
0000E700                            ; ---------------------------------------------------------------------------
0000E700                            ; Object pointers
0000E700                            ; ---------------------------------------------------------------------------
0000E700                            Obj_Index:
0000E700                            	include "_inc\Object pointers.asm"
0000E700                            ; ---------------------------------------------------------------------------
0000E700                            ; Object pointers
0000E700                            ; ---------------------------------------------------------------------------
0000E700 0000 0000 0000 0000 0000+  	dc.l Obj01, Obj02,	Obj03, ObjectFall
0000E710 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000E720 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000E730 0000 0000 0000 B8CE 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000E740 0000 844A 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000E750 0000 8A7C 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000E760 0000 9336 0000 939E 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000E770 0000 9BE4 0000 9EDE 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000E780 0000 0000 0000 AB62 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000E790 0000 AEA4 0000 B3FA 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000E7A0 0000 A79A 0000 9CC6 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000E7B0 0000 BF56 0000 B5C0 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000E7C0 0000 C978 0000 D052 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000E7D0 0000 C4D4 0000 E15C 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000E7E0 0000 D7E0 0000 D8AC 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000E7F0 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000E800 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000E810 0000 CCB0 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000E820 0000 E428 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000E830 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000E840 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000E850 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000E860 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000E870 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000E880 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000E890 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000E8A0 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000E8B0 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000E8C0 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000E8D0 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000E8E0 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000E8F0 0000 0000 0000 DAE6 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000E900 0000 5174 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000E910 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000E920 0000 583A 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E920 0000 583A 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E930                            
0000E930                            ; ---------------------------------------------------------------------------
0000E930                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E930                            ; ---------------------------------------------------------------------------
0000E930                            
0000E930                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E930                            
0000E930                            
0000E930                            ObjectFall:
0000E930 3028 0010                  		move.w	$10(a0),d0
0000E934 48C0                       		ext.l	d0
0000E936 E188                       		lsl.l	#8,d0
0000E938 D1A8 0008                  		add.l	d0,8(a0)
0000E93C 3028 0012                  		move.w	$12(a0),d0
0000E940 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000E946 48C0                       		ext.l	d0
0000E948 E188                       		lsl.l	#8,d0
0000E94A D1A8 000C                  		add.l	d0,$C(a0)
0000E94E 4E75                       		rts	
0000E950                            
0000E950                            ; End of function ObjectFall
0000E950                            
0000E950                            ; ---------------------------------------------------------------------------
0000E950                            ; Subroutine translating object	speed to update	object position
0000E950                            ; ---------------------------------------------------------------------------
0000E950                            
0000E950                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E950                            
0000E950                            
0000E950                            SpeedToPos:
0000E950 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000E954 48C0                       		ext.l	d0
0000E956 E188                       		lsl.l	#8,d0		; multiply speed by $100
0000E958 D1A8 0008                  		add.l	d0,8(a0)	; add to x-axis	position
0000E95C 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000E960 48C0                       		ext.l	d0
0000E962 E188                       		lsl.l	#8,d0		; multiply by $100
0000E964 D1A8 000C                  		add.l	d0,$C(a0)	; add to y-axis	position
0000E968 4E75                       		rts	
0000E96A                            
0000E96A                            ; End of function SpeedToPos
0000E96A                            
0000E96A                            ; ---------------------------------------------------------------------------
0000E96A                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E96A                            ; ---------------------------------------------------------------------------
0000E96A                            
0000E96A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E96A                            
0000E96A                            
0000E96A                            DisplaySprite:
0000E96A 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E96E 3028 0018                  		move.w	$18(a0),d0
0000E972 E248                       		lsr.w	#1,d0
0000E974 0240 0380                  		andi.w	#$380,d0
0000E978 D2C0                       		adda.w	d0,a1
0000E97A 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E97E 6400                       		bcc.s	locret_D620
0000E980 5451                       		addq.w	#2,(a1)
0000E982 D2D1                       		adda.w	(a1),a1
0000E984 3288                       		move.w	a0,(a1)
0000E986                            
0000E986                            locret_D620:
0000E986 4E75                       		rts	
0000E988                            ; End of function DisplaySprite
0000E988                            
0000E988                            ; ---------------------------------------------------------------------------
0000E988                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E988                            ; ---------------------------------------------------------------------------
0000E988                            
0000E988                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E988                            
0000E988                            
0000E988                            DisplaySprite2:
0000E988 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E98C 3029 0018                  		move.w	$18(a1),d0
0000E990 E248                       		lsr.w	#1,d0
0000E992 0240 0380                  		andi.w	#$380,d0
0000E996 D4C0                       		adda.w	d0,a2
0000E998 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E99C 6400                       		bcc.s	locret_D63E
0000E99E 5452                       		addq.w	#2,(a2)
0000E9A0 D4D2                       		adda.w	(a2),a2
0000E9A2 3489                       		move.w	a1,(a2)
0000E9A4                            
0000E9A4                            locret_D63E:
0000E9A4 4E75                       		rts	
0000E9A6                            ; End of function DisplaySprite2
0000E9A6                            
0000E9A6                            
0000E9A6                            DisplaySprite3:
0000E9A6 43F8 AC00                      lea    ($FFFFAC00).w,a1
0000E9AA D2C0                           adda.w    d0,a1
0000E9AC 0C51 007E                      cmpi.w    #$7E,(a1)
0000E9B0 6400                           bhs.s    return_16542
0000E9B2 5451                           addq.w    #2,(a1)
0000E9B4 D2D1                           adda.w    (a1),a1
0000E9B6 3288                           move.w    a0,(a1)
0000E9B8                            
0000E9B8                            return_16542:
0000E9B8 4E75                           rts
0000E9BA                            ; ---------------------------------------------------------------------------
0000E9BA                            ; Subroutine to	delete an object
0000E9BA                            ; ---------------------------------------------------------------------------
0000E9BA                            
0000E9BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E9BA                            
0000E9BA                            
0000E9BA                            DeleteObject:
0000E9BA 2248                       		movea.l	a0,a1
0000E9BC                            
0000E9BC                            DeleteObject2:
0000E9BC 7200                       		moveq	#0,d1
0000E9BE 700F                       		moveq	#$F,d0
0000E9C0                            
0000E9C0                            loc_D646:
0000E9C0 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E9C2 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E9C6 4E75                       		rts	
0000E9C8                            ; End of function DeleteObject
0000E9C8                            
0000E9C8                            ; ===========================================================================
0000E9C8 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E9CC 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E9D0 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E9D4 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E9D8                            ; ---------------------------------------------------------------------------
0000E9D8                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E9D8                            ; ---------------------------------------------------------------------------
0000E9D8                            
0000E9D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E9D8                            
0000E9D8                            
0000E9D8                            BuildSprites:                ; XREF: TitleScreen; et al
0000E9D8 45F8 F800                          lea    ($FFFFF800).w,a2 ; set address for sprite table
0000E9DC 4EB9 0000 0000                     jsr		Obj02
0000E9E2 4A38 FFD0                          tst.b    ($FFFFFFD0).w ; this was level_started_flag
0000E9E6 6700                               beq.s    BuildSprites_2
0000E9E8 4EB9 0000 0000                     jsr    loc_40804
0000E9EE                            
0000E9EE                            BuildSprites_2:
0000E9EE 49F8 AC00                          lea    ($FFFFAC00).w,a4
0000E9F2 7E07                               moveq    #7,d7
0000E9F4                            
0000E9F4                            loc_D66A:
0000E9F4 0C47 0005                  		cmpi.w	#$07-$02,d7
0000E9F8 6600                       		bne.s	BuildSpritesCont
0000E9FA 4A38 870D                  		tst.b	(Level_started_flag).w
0000E9FE 6700                       		beq.s	BuildSpritesCont
0000EA00 48E7 0108                  		movem.l	d7/a4,-(sp)
0000EA04 6100 0000                  		bsr.w	BuildRings
0000EA08 4CDF 1080                  		movem.l	(sp)+,d7/a4
0000EA0C                            
0000EA0C                            BuildSpritesCont:
0000EA0C 4A54                       		tst.w	(a4)
0000EA0E 6700 0000                  		beq.w	loc_D72E
0000EA12 7C02                       		moveq	#2,d6
0000EA14                            
0000EA14                            loc_D672:
0000EA14 3074 6000                          movea.w    (a4,d6.w),a0
0000EA18 4A10                               tst.b    (a0)
0000EA1A 6700 0000                          beq.w    loc_D726
0000EA1E 08A8 0007 0001                     bclr    #7,1(a0)
0000EA24 1028 0001                          move.b    1(a0),d0
0000EA28 1800                               move.b    d0,d4
0000EA2A 0C10 0001                          cmpi.b    #1,(a0)    ; is this object is Sonic
0000EA2E 6700                               beq.s    @skip    ; if it is, branch
0000EA30 0800 0006                          btst    #6,d0    ; is the multi-draw flag set?
0000EA34 6600 0000                          bne.w   BuildSprites_MultiDraw    ; if it is, branch
0000EA38                               @skip:
0000EA38 0240 000C                  		andi.w	#$C,d0
0000EA3C 6700                       		beq.s	loc_D6DE
0000EA3E 227B 0088                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000EA42 7000                       		moveq	#0,d0
0000EA44 1028 0019                  		move.b	$19(a0),d0
0000EA48 3628 0008                  		move.w	8(a0),d3
0000EA4C 9651                       		sub.w	(a1),d3
0000EA4E 3203                       		move.w	d3,d1
0000EA50 D240                       		add.w	d0,d1
0000EA52 6B00 0000                  		bmi.w	loc_D726
0000EA56 3203                       		move.w	d3,d1
0000EA58 9240                       		sub.w	d0,d1
0000EA5A 0C41 0140                  		cmpi.w	#$140,d1
0000EA5E 6C00                       		bge.s	loc_D726
0000EA60 0643 0080                  		addi.w	#$80,d3
0000EA64 0804 0004                  		btst	#4,d4
0000EA68 6700                       		beq.s	loc_D6E8
0000EA6A 7000                       		moveq	#0,d0
0000EA6C 1028 0016                  		move.b	$16(a0),d0
0000EA70 3428 000C                  		move.w	$C(a0),d2
0000EA74 9469 0004                  		sub.w	4(a1),d2
0000EA78 3202                       		move.w	d2,d1
0000EA7A D240                       		add.w	d0,d1
0000EA7C 6B00                       		bmi.s	loc_D726
0000EA7E 3202                       		move.w	d2,d1
0000EA80 9240                       		sub.w	d0,d1
0000EA82 0C41 00E0                  		cmpi.w	#$E0,d1
0000EA86 6C00                       		bge.s	loc_D726
0000EA88 0642 0080                  		addi.w	#$80,d2
0000EA8C 6000                       		bra.s	loc_D700
0000EA8E                            ; ===========================================================================
0000EA8E                            
0000EA8E                            loc_D6DE:
0000EA8E 3428 000A                  		move.w	$A(a0),d2
0000EA92 3628 0008                  		move.w	8(a0),d3
0000EA96 6000                       		bra.s	loc_D700
0000EA98                            ; ===========================================================================
0000EA98                            
0000EA98                            loc_D6E8:
0000EA98 3428 000C                  		move.w	$C(a0),d2
0000EA9C 9469 0004                  		sub.w	4(a1),d2
0000EAA0 0642 0080                  		addi.w	#$80,d2
0000EAA4 0C42 0060                  		cmpi.w	#$60,d2
0000EAA8 6500                       		bcs.s	loc_D726
0000EAAA 0C42 0180                  		cmpi.w	#$180,d2
0000EAAE 6400                       		bcc.s	loc_D726
0000EAB0                            
0000EAB0                            loc_D700:
0000EAB0 2268 0004                  		movea.l	4(a0),a1
0000EAB4 7200                       		moveq	#0,d1
0000EAB6 0804 0005                  		btst	#5,d4
0000EABA 6600                       		bne.s	loc_D71C
0000EABC 1228 001A                  		move.b	$1A(a0),d1
0000EAC0 D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000EAC2 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000EAC6 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000EAC8 1219                       		move.b	(a1)+,d1
0000EACA 5301                       		subq.b	#1,d1
0000EACC 6B00                       		bmi.s	loc_D720
0000EACE                            
0000EACE                            loc_D71C:
0000EACE 4EB9 0000 0000             		jsr	sub_D750
0000EAD4                            
0000EAD4                            loc_D720:
0000EAD4 08E8 0007 0001             		bset	#7,1(a0)
0000EADA                            
0000EADA                            loc_D726:
0000EADA 5446                       		addq.w	#2,d6
0000EADC 5554                       		subq.w	#2,(a4)
0000EADE 6600 FF34                  		bne.w	loc_D672
0000EAE2                            
0000EAE2                            loc_D72E:
0000EAE2 49EC 0080                  		lea	$80(a4),a4
0000EAE6 51CF FF0C                  		dbf	d7,loc_D66A
0000EAEA 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000EAEE 0C05 0050                  		cmpi.b	#$50,d5
0000EAF2 6700                       		beq.s	loc_D748
0000EAF4 24BC 0000 0000             		move.l	#0,(a2)
0000EAFA 4E75                       		rts	
0000EAFC                            ; ===========================================================================
0000EAFC                            
0000EAFC                            loc_D748:
0000EAFC 157C 0000 FFFB             		move.b	#0,-5(a2)
0000EB02 4E75                       		rts	
0000EB04                            ; End of function BuildSprites
0000EB04                            
0000EB04                            BuildSprites_MultiDraw:
0000EB04 2F0C                       	move.l	a4,-(sp)
0000EB06 49F8 F700                  	lea	($FFFFF700).w,a4
0000EB0A 3668 0002                  	movea.w	2(a0),a3
0000EB0E 2A68 0004                  	movea.l	4(a0),a5
0000EB12 7000                       	moveq	#0,d0
0000EB14                            
0000EB14                            	; check if object is within X bounds
0000EB14 1028 000E                  	move.b	mainspr_width(a0),d0	; load pixel width
0000EB18 3628 0008                  	move.w	8(a0),d3
0000EB1C 9654                       	sub.w	(a4),d3
0000EB1E 3203                       	move.w	d3,d1                            
0000EB20 D240                       	add.w	d0,d1                            ; is the object right edge to the left of the screen? 
0000EB22 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000EB26 3203                       	move.w	d3,d1
0000EB28 9240                       	sub.w	d0,d1
0000EB2A 0C41 0140                  	cmpi.w	#320,d1                          ; is the object left edge to the right of the screen?
0000EB2E 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000EB32 0643 0080                  	addi.w	#128,d3
0000EB36                            
0000EB36                            	; check if object is within Y bounds
0000EB36 0804 0004                  	btst	#4,d4                            ; is the accurate Y check flag set?
0000EB3A 6700                       	beq.s	BuildSpritesMulti_ApproxYCheck
0000EB3C 7000                       	moveq	#0,d0
0000EB3E 1028 0014                  	move.b	mainspr_height(a0),d0	         ; load pixel height
0000EB42 3428 000C                  	move.w	$C(a0),d2
0000EB46 946C 0004                  	sub.w	4(a4),d2
0000EB4A 3202                       	move.w	d2,d1
0000EB4C D240                       	add.w	d0,d1
0000EB4E 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj  ; if the object is above the screen
0000EB52 3202                       	move.w	d2,d1
0000EB54 9240                       	sub.w	d0,d1
0000EB56 0C41 00E0                  	cmpi.w	#224,d1
0000EB5A 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj  ; if the object is below the screen
0000EB5E 0642 0080                  	addi.w	#128,d2
0000EB62 6000                       	bra.s	BuildSpritesMulti_DrawSprite
0000EB64                            BuildSpritesMulti_ApproxYCheck:
0000EB64 3428 000C                  	move.w	$C(a0),d2
0000EB68 946C 0004                  	sub.w	4(a4),d2
0000EB6C 0642 0080                  	addi.w	#128,d2
0000EB70 0242 07FF                  	andi.w	#$7FF,d2
0000EB74 0C42 0060                  	cmpi.w	#-32+128,d2
0000EB78 6500                       	blo.s	BuildSprites_MultiDraw_NextObj
0000EB7A 0C42 0180                  	cmpi.w	#32+128+224,d2
0000EB7E 6400                       	bhs.s	BuildSprites_MultiDraw_NextObj
0000EB80                            BuildSpritesMulti_DrawSprite:
0000EB80 7200                       	moveq	#0,d1
0000EB82 1228 000B                  	move.b	mainspr_mapframe(a0),d1	         ; get current frame
0000EB86 6700                       	beq.s	@noparenttodraw
0000EB88 D241                       	add.w	d1,d1
0000EB8A 224D                       	movea.l	a5,a1                            ; a5 is mappings(a0), copy to a1
0000EB8C D2F1 1000                  	adda.w	(a1,d1.w),a1
0000EB90 7200                       	moveq	#0,d1
0000EB92 1219                       	move.b	(a1)+,d1
0000EB94 5301                       	subq.b	#1,d1                            ; get number of pieces
0000EB96 6B00                       	bmi.s	@noparenttodraw                  ; if there are 0 pieces, branch
0000EB98 3F04                       	move.w	d4,-(sp)
0000EB9A 4EB9 0000 0000             	jsr	ChkDrawSprite	                 ; draw the sprite
0000EBA0 381F                       	move.w	(sp)+,d4
0000EBA2                            @noparenttodraw:
0000EBA2 0028 0080 0001             	ori.b	#$80,1(a0)	         ; set onscreen flag
0000EBA8 4DE8 0010                  	lea	sub2_x_pos(a0),a6                ; address of first child sprite info
0000EBAC 7000                       	moveq	#0,d0
0000EBAE 1028 000F                  	move.b	mainspr_childsprites(a0),d0	 ; get child sprite count
0000EBB2 5340                       	subq.w	#1,d0		                 ; if there are 0, go to next object
0000EBB4 6500                       	bcs.s	BuildSprites_MultiDraw_NextObj
0000EBB6                            
0000EBB6                            @drawchildloop:
0000EBB6 4840                       	swap	d0
0000EBB8 361E                       	move.w	(a6)+,d3	                 ; get X pos
0000EBBA 9654                       	sub.w	(a4),d3                          ; subtract the screen's x position
0000EBBC 0643 0080                  	addi.w	#128,d3
0000EBC0 341E                       	move.w	(a6)+,d2	                 ; get Y pos
0000EBC2 946C 0004                  	sub.w	4(a4),d2   ; subtract the screen's y position
0000EBC6 0642 0080                  	addi.w	#128,d2
0000EBCA 0242 07FF                  	andi.w	#$7FF,d2
0000EBCE 524E                       	addq.w	#1,a6
0000EBD0 7200                       	moveq	#0,d1
0000EBD2 121E                       	move.b	(a6)+,d1	                 ; get mapping frame
0000EBD4 D241                       	add.w	d1,d1
0000EBD6 224D                       	movea.l	a5,a1
0000EBD8 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000EBDC 7200                       	moveq	#0,d1
0000EBDE 1219                       	move.b	(a1)+,d1
0000EBE0 5301                       	subq.b	#1,d1                            ; get number of pieces
0000EBE2 6B00                       	bmi.s	@nochildleft                     ; if there are 0 pieces, branch
0000EBE4 3F04                       	move.w	d4,-(sp)
0000EBE6 4EB9 0000 0000             	jsr	ChkDrawSprite
0000EBEC 381F                       	move.w	(sp)+,d4
0000EBEE                            @nochildleft:
0000EBEE 4840                       	swap	d0
0000EBF0 51C8 FFC4                  	dbf	d0,@drawchildloop	         ; repeat for number of child sprites
0000EBF4                            ; loc_16804:
0000EBF4                            BuildSprites_MultiDraw_NextObj:
0000EBF4 285F                       	movea.l	(sp)+,a4
0000EBF6 6000 FEE2                  	bra.w	loc_D726; End of function BuildSprites
0000EBFA                            
0000EBFA                            
0000EBFA                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000EBFA                            
0000EBFA                            ; sub_1680A:
0000EBFA                            ChkDrawSprite:
0000EBFA 0C05 0050                  	cmpi.b	#80,d5		; has the sprite limit been reached?
0000EBFE 6500                       	blo.s	loc_1681C	; if it hasn't, branch
0000EC00 4E75                       	rts	; otherwise, return
0000EC02                            
0000EC02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EC02                            
0000EC02                            
0000EC02                            sub_D750:				; XREF: BuildSprites
0000EC02 3668 0002                  		movea.w	2(a0),a3
0000EC06                            loc_1681C:
0000EC06 0804 0000                  		btst	#0,d4
0000EC0A 6600                       		bne.s	loc_D796
0000EC0C 0804 0001                  		btst	#1,d4
0000EC10 6600 0000                  		bne.w	loc_D7E4
0000EC14                            ; End of function sub_D750
0000EC14                            
0000EC14                            
0000EC14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EC14                            
0000EC14                            
0000EC14                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000EC14 0C05 0050                  		cmpi.b	#$50,d5
0000EC18 6700                       		beq.s	locret_D794
0000EC1A                            DrawSprite_Loop:				; XREF: sub_D762; SS_ShowLayout	
0000EC1A 1019                       		move.b	(a1)+,d0
0000EC1C 4880                       		ext.w	d0
0000EC1E D042                       		add.w	d2,d0
0000EC20 34C0                       		move.w	d0,(a2)+
0000EC22 14D9                       		move.b	(a1)+,(a2)+
0000EC24 5205                       		addq.b	#1,d5
0000EC26 14C5                       		move.b	d5,(a2)+
0000EC28 1019                       		move.b	(a1)+,d0
0000EC2A E148                       		lsl.w	#8,d0
0000EC2C 1019                       		move.b	(a1)+,d0
0000EC2E D04B                       		add.w	a3,d0
0000EC30 34C0                       		move.w	d0,(a2)+
0000EC32 1019                       		move.b	(a1)+,d0
0000EC34 4880                       		ext.w	d0
0000EC36 D043                       		add.w	d3,d0
0000EC38 0240 01FF                  		andi.w	#$1FF,d0
0000EC3C 6600                       		bne.s	loc_D78E
0000EC3E 5240                       		addq.w	#1,d0
0000EC40                            
0000EC40                            loc_D78E:
0000EC40 34C0                       		move.w	d0,(a2)+
0000EC42 51C9 FFD0                  		dbf	d1,sub_D762
0000EC46                            
0000EC46                            locret_D794:
0000EC46 4E75                       		rts	
0000EC48                            ; End of function sub_D762
0000EC48                            
0000EC48                            ; ===========================================================================
0000EC48                            
0000EC48                            loc_D796:
0000EC48 0804 0001                  		btst	#1,d4
0000EC4C 6600 0000                  		bne.w	loc_D82A
0000EC50                            
0000EC50                            loc_D79E:
0000EC50 0C05 0050                  		cmpi.b	#$50,d5
0000EC54 6700                       		beq.s	locret_D7E2
0000EC56 1019                       		move.b	(a1)+,d0
0000EC58 4880                       		ext.w	d0
0000EC5A D042                       		add.w	d2,d0
0000EC5C 34C0                       		move.w	d0,(a2)+
0000EC5E 1819                       		move.b	(a1)+,d4
0000EC60 14C4                       		move.b	d4,(a2)+
0000EC62 5205                       		addq.b	#1,d5
0000EC64 14C5                       		move.b	d5,(a2)+
0000EC66 1019                       		move.b	(a1)+,d0
0000EC68 E148                       		lsl.w	#8,d0
0000EC6A 1019                       		move.b	(a1)+,d0
0000EC6C D04B                       		add.w	a3,d0
0000EC6E 0A40 0800                  		eori.w	#$800,d0
0000EC72 34C0                       		move.w	d0,(a2)+
0000EC74 1019                       		move.b	(a1)+,d0
0000EC76 4880                       		ext.w	d0
0000EC78 4440                       		neg.w	d0
0000EC7A D804                       		add.b	d4,d4
0000EC7C 0244 0018                  		andi.w	#$18,d4
0000EC80 5044                       		addq.w	#8,d4
0000EC82 9044                       		sub.w	d4,d0
0000EC84 D043                       		add.w	d3,d0
0000EC86 0240 01FF                  		andi.w	#$1FF,d0
0000EC8A 6600                       		bne.s	loc_D7DC
0000EC8C 5240                       		addq.w	#1,d0
0000EC8E                            
0000EC8E                            loc_D7DC:
0000EC8E 34C0                       		move.w	d0,(a2)+
0000EC90 51C9 FFBE                  		dbf	d1,loc_D79E
0000EC94                            
0000EC94                            locret_D7E2:
0000EC94 4E75                       		rts	
0000EC96                            ; ===========================================================================
0000EC96                            
0000EC96                            loc_D7E4:				; XREF: sub_D750
0000EC96 0C05 0050                  		cmpi.b	#$50,d5
0000EC9A 6700                       		beq.s	locret_D828
0000EC9C 1019                       		move.b	(a1)+,d0
0000EC9E 1811                       		move.b	(a1),d4
0000ECA0 4880                       		ext.w	d0
0000ECA2 4440                       		neg.w	d0
0000ECA4 E70C                       		lsl.b	#3,d4
0000ECA6 0244 0018                  		andi.w	#$18,d4
0000ECAA 5044                       		addq.w	#8,d4
0000ECAC 9044                       		sub.w	d4,d0
0000ECAE D042                       		add.w	d2,d0
0000ECB0 34C0                       		move.w	d0,(a2)+
0000ECB2 14D9                       		move.b	(a1)+,(a2)+
0000ECB4 5205                       		addq.b	#1,d5
0000ECB6 14C5                       		move.b	d5,(a2)+
0000ECB8 1019                       		move.b	(a1)+,d0
0000ECBA E148                       		lsl.w	#8,d0
0000ECBC 1019                       		move.b	(a1)+,d0
0000ECBE D04B                       		add.w	a3,d0
0000ECC0 0A40 1000                  		eori.w	#$1000,d0
0000ECC4 34C0                       		move.w	d0,(a2)+
0000ECC6 1019                       		move.b	(a1)+,d0
0000ECC8 4880                       		ext.w	d0
0000ECCA D043                       		add.w	d3,d0
0000ECCC 0240 01FF                  		andi.w	#$1FF,d0
0000ECD0 6600                       		bne.s	loc_D822
0000ECD2 5240                       		addq.w	#1,d0
0000ECD4                            
0000ECD4                            loc_D822:
0000ECD4 34C0                       		move.w	d0,(a2)+
0000ECD6 51C9 FFBE                  		dbf	d1,loc_D7E4
0000ECDA                            
0000ECDA                            locret_D828:
0000ECDA 4E75                       		rts	
0000ECDC                            ; ===========================================================================
0000ECDC                            
0000ECDC                            loc_D82A:
0000ECDC 0C05 0050                  		cmpi.b	#$50,d5
0000ECE0 6700                       		beq.s	locret_D87C
0000ECE2 1019                       		move.b	(a1)+,d0
0000ECE4 1811                       		move.b	(a1),d4
0000ECE6 4880                       		ext.w	d0
0000ECE8 4440                       		neg.w	d0
0000ECEA E70C                       		lsl.b	#3,d4
0000ECEC 0244 0018                  		andi.w	#$18,d4
0000ECF0 5044                       		addq.w	#8,d4
0000ECF2 9044                       		sub.w	d4,d0
0000ECF4 D042                       		add.w	d2,d0
0000ECF6 34C0                       		move.w	d0,(a2)+
0000ECF8 1819                       		move.b	(a1)+,d4
0000ECFA 14C4                       		move.b	d4,(a2)+
0000ECFC 5205                       		addq.b	#1,d5
0000ECFE 14C5                       		move.b	d5,(a2)+
0000ED00 1019                       		move.b	(a1)+,d0
0000ED02 E148                       		lsl.w	#8,d0
0000ED04 1019                       		move.b	(a1)+,d0
0000ED06 D04B                       		add.w	a3,d0
0000ED08 0A40 1800                  		eori.w	#$1800,d0
0000ED0C 34C0                       		move.w	d0,(a2)+
0000ED0E 1019                       		move.b	(a1)+,d0
0000ED10 4880                       		ext.w	d0
0000ED12 4440                       		neg.w	d0
0000ED14 D804                       		add.b	d4,d4
0000ED16 0244 0018                  		andi.w	#$18,d4
0000ED1A 5044                       		addq.w	#8,d4
0000ED1C 9044                       		sub.w	d4,d0
0000ED1E D043                       		add.w	d3,d0
0000ED20 0240 01FF                  		andi.w	#$1FF,d0
0000ED24 6600                       		bne.s	loc_D876
0000ED26 5240                       		addq.w	#1,d0
0000ED28                            
0000ED28                            loc_D876:
0000ED28 34C0                       		move.w	d0,(a2)+
0000ED2A 51C9 FFB0                  		dbf	d1,loc_D82A
0000ED2E                            
0000ED2E                            locret_D87C:
0000ED2E 4E75                       		rts	
0000ED30                            ; ---------------------------------------------------------------------------
0000ED30                            ; Subroutine to	check if an object is on the screen
0000ED30                            ; ---------------------------------------------------------------------------
0000ED30                            
0000ED30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ED30                            
0000ED30                            
0000ED30                            ChkObjOnScreen:
0000ED30 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000ED34 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000ED38 6B00                       		bmi.s	NotOnScreen
0000ED3A 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000ED3E 6C00                       		bge.s	NotOnScreen	; if not, branch
0000ED40                            
0000ED40 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000ED44 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000ED48 6B00                       		bmi.s	NotOnScreen
0000ED4A 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000ED4E 6C00                       		bge.s	NotOnScreen	; if not, branch
0000ED50                            
0000ED50 7000                       		moveq	#0,d0		; set flag to 0
0000ED52 4E75                       		rts	
0000ED54                            ; ===========================================================================
0000ED54                            
0000ED54                            NotOnScreen:				; XREF: ChkObjOnScreen
0000ED54 7001                       		moveq	#1,d0		; set flag to 1
0000ED56 4E75                       		rts	
0000ED58                            ; End of function ChkObjOnScreen
0000ED58                            
0000ED58                            
0000ED58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ED58                            
0000ED58                            
0000ED58                            ChkObjOnScreen2:
0000ED58 7200                       		moveq	#0,d1
0000ED5A 1228 0019                  		move.b	$19(a0),d1
0000ED5E 3028 0008                  		move.w	8(a0),d0
0000ED62 9078 F700                  		sub.w	($FFFFF700).w,d0
0000ED66 D041                       		add.w	d1,d0
0000ED68 6B00                       		bmi.s	NotOnScreen2
0000ED6A D241                       		add.w	d1,d1
0000ED6C 9041                       		sub.w	d1,d0
0000ED6E 0C40 0140                  		cmpi.w	#320,d0
0000ED72 6C00                       		bge.s	NotOnScreen2
0000ED74                            
0000ED74 3228 000C                  		move.w	$C(a0),d1
0000ED78 9278 F704                  		sub.w	($FFFFF704).w,d1
0000ED7C 6B00                       		bmi.s	NotOnScreen2
0000ED7E 0C41 00E0                  		cmpi.w	#224,d1
0000ED82 6C00                       		bge.s	NotOnScreen2
0000ED84                            
0000ED84 7000                       		moveq	#0,d0
0000ED86 4E75                       		rts	
0000ED88                            ; ===========================================================================
0000ED88                            
0000ED88                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000ED88 7001                       		moveq	#1,d0
0000ED8A 4E75                       		rts	
0000ED8C                            ; End of function ChkObjOnScreen2
0000ED8C                            
0000ED8C                            ; ---------------------------------------------------------------------------
0000ED8C                            ; Subroutine to	load a level's objects
0000ED8C                            ; ---------------------------------------------------------------------------
0000ED8C                            
0000ED8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ED8C                            
0000ED8C                            
0000ED8C                            ; ---------------------------------------------------------------------------
0000ED8C                            ; Objects Manager
0000ED8C                            ; Subroutine to load objects whenever they are close to the screen. Unlike in
0000ED8C                            ; normal s2, in this version every object gets an entry in the respawn table.
0000ED8C                            ; This is necessary to get the additional y-range checks to work.
0000ED8C                            ;
0000ED8C                            ; input variables:
0000ED8C                            ;  -none-
0000ED8C                            ;
0000ED8C                            ; writes:
0000ED8C                            ;  d0, d1, d2
0000ED8C                            ;  d3 = upper boundary to load object
0000ED8C                            ;  d4 = lower boundary to load object
0000ED8C                            ;  d5 = #$FFF, used to filter out object's y position
0000ED8C                            ;  d6 = camera position
0000ED8C                            ;
0000ED8C                            ;  a0 = address in object placement list
0000ED8C                            ;  a3 = address in object respawn table
0000ED8C                            ;  a6 = object loading routine
0000ED8C                            ; ---------------------------------------------------------------------------
0000ED8C                             
0000ED8C                            ; loc_17AA4
0000ED8C                            ObjPosLoad:
0000ED8C 7000                       	moveq	#0,d0
0000ED8E 1038 F76C                  	move.b	($FFFFF76C).w,d0
0000ED92 4EFB 0000                  	jmp	ObjPosLoad_States(pc,d0.w)
0000ED96                             
0000ED96                            ; ============== JUMP TABLE	=============================================
0000ED96                            ObjPosLoad_States:
0000ED96 6000 0000                  	bra.w	ObjPosLoad_Init		; 0
0000ED9A 6000 0000                  	bra.w	ObjPosLoad_Main		; 2
0000ED9E                            ; ============== END JUMP TABLE	=============================================
0000ED9E                             
0000ED9E                            ObjPosLoad_Init:
0000ED9E 5838 F76C                  	addq.b	#4,($FFFFF76C).w
0000EDA2                             
0000EDA2 41F8 8000                  	lea     (Object_Respawn_Table).w,a0
0000EDA6 7000                       	moveq   #0,d0
0000EDA8 323C 00BF                  	move.w  #$BF,d1 ; set loop counter
0000EDAC                            OPLBack1:
0000EDAC 20C0                       	move.l  d0,(a0)+
0000EDAE 51C9 FFFC                  	dbf     d1,OPLBack1
0000EDB2                             
0000EDB2 3038 FE10                  	move.w	($FFFFFE10).w,d0
0000EDB6                            ;
0000EDB6                            ;	ror.b	#1,d0			; this is from s3k
0000EDB6                            ;	lsr.w	#5,d0
0000EDB6                            ;	lea	(Off_Objects).l,a0
0000EDB6                            ;	movea.l	(a0,d0.w),a0
0000EDB6                            ;
0000EDB6 ED08                       	lsl.b	#6,d0
0000EDB8 E848                       	lsr.w	#4,d0
0000EDBA 41F9 0000 0000             	lea	(ObjPos_Index).l,a0	; load the first pointer in the object layout list pointer index,
0000EDC0 D0F0 0000                  	adda.w	(a0,d0.w),a0		; load the pointer to the current object layout
0000EDC4                             
0000EDC4                            	; initialize each object load address with the first object in the layout
0000EDC4 21C8 F770                  	move.l	a0,($FFFFF770).w
0000EDC8 21C8 F774                  	move.l	a0,($FFFFF774).w
0000EDCC 47F8 8000                  	lea	(Object_Respawn_Table).w,a3
0000EDD0                             
0000EDD0 3C38 F700                  	move.w	($FFFFF700).w,d6
0000EDD4 0446 0080                  	subi.w	#$80,d6	; look one chunk to the left
0000EDD8 6400                       	bcc.s	OPL1	; if the result was negative,
0000EDDA 7C00                       	moveq	#0,d6	; cap at zero
0000EDDC                            	OPL1:	
0000EDDC 0246 FF80                  	andi.w	#$FF80,d6	; limit to increments of $80 (width of a chunk)
0000EDE0                             
0000EDE0 2078 F770                  	movea.l	($FFFFF770).w,a0	; get first object in layout
0000EDE4                             
0000EDE4                            OPLBack2:	; at the beginning of a level this gives respawn table entries to any object that is one chunk
0000EDE4                            	; behind the left edge of the screen that needs to remember its state (Monitors, Badniks, etc.)
0000EDE4 BC50                       	cmp.w	(a0),d6		; is object's x position >= d6?
0000EDE6 6300                       	bls.s	OPL2		; if yes, branch
0000EDE8 5C48                       	addq.w	#6,a0	; next object
0000EDEA 524B                       	addq.w	#1,a3	; respawn index of next object going right
0000EDEC 60F6                       	bra.s	OPLBack2
0000EDEE                            ; ---------------------------------------------------------------------------
0000EDEE                             
0000EDEE                            OPL2:	
0000EDEE 21C8 F770                  	move.l	a0,($FFFFF770).w	; remember rightmost object that has been processed, so far (we still need to look forward)
0000EDF2 31CB F778                  	move.w	a3,($FFFFF778).w	; and its respawn table index
0000EDF6                             
0000EDF6 47F8 8000                  	lea	(Object_Respawn_Table).w,a3	; reset a3
0000EDFA 2078 F774                  	movea.l	($FFFFF774).w,a0	; reset a0
0000EDFE 0446 0080                  	subi.w	#$80,d6		; look even farther left (any object behind this is out of range)
0000EE02 6500                       	bcs.s	OPL3		; branch, if camera position would be behind level's left boundary
0000EE04                             
0000EE04                             OPLBack3:	; count how many objects are behind the screen that are not in range and need to remember their state
0000EE04 BC50                       	cmp.w	(a0),d6		; is object's x position >= d6?
0000EE06 6300                       	bls.s	OPL3		; if yes, branch
0000EE08 5C48                       	addq.w	#6,a0
0000EE0A 524B                       	addq.w	#1,a3	; respawn index of next object going left
0000EE0C 60F6                       	bra.s	OPLBack3	; continue with next object
0000EE0E                            ; ---------------------------------------------------------------------------
0000EE0E                             
0000EE0E                            OPL3:	
0000EE0E 21C8 F774                  	move.l	a0,($FFFFF774).w	; remember current object from the left
0000EE12 31CB F77C                  	move.w	a3,($FFFFF77C).w	; and its respawn table index
0000EE16                             
0000EE16 31FC FFFF FE2A             	move.w	#-1,(Camera_X_Pos_last).w	; make sure ObjPosLoad_GoingForward is run
0000EE1C                             
0000EE1C 3038 F704                  	move.w	($FFFFF704).w,d0
0000EE20 0240 FF80                  	andi.w	#$FF80,d0
0000EE24 31C0 F76E                  	move.w	d0,(Camera_Y_pos_last).w	; make sure the Y check isn't run unnecessarily during initialization
0000EE28                            ; ---------------------------------------------------------------------------
0000EE28                             
0000EE28                            ObjPosLoad_Main:
0000EE28                            	; get coarse camera position
0000EE28                            ;	move.w	($FFFFF704).w,d1
0000EE28                            ;	subi.w	#$80,d1
0000EE28                            ;	andi.w	#$FF80,d1
0000EE28                            ;	move.w	d1,(Camera_Y_pos_coarse).w
0000EE28                             
0000EE28                            ;	move.w	($FFFFF700).w,d1
0000EE28                            ;	subi.w	#$80,d1
0000EE28                            ;	andi.w	#$FF80,d1
0000EE28                            ;	move.w	d1,(Camera_X_pos_coarse).w
0000EE28                             
0000EE28 4A78 F726                  	tst.w	($FFFFF726).w	; does this level y-wrap?
0000EE2C 6A00                       	bpl.s	ObjMan_Main_NoYWrap	; if not, branch
0000EE2E 4DF9 0000 0000             	lea	(ChkLoadObj_YWrap).l,a6	; set object loading routine
0000EE34 3638 F704                  	move.w	($FFFFF704).w,d3
0000EE38 0243 FF80                  	andi.w	#$FF80,d3	; get coarse value
0000EE3C 3803                       	move.w	d3,d4
0000EE3E 0644 0200                  	addi.w	#$200,d4	; set lower boundary
0000EE42 0443 0080                  	subi.w	#$80,d3		; set upper boundary
0000EE46 6A00                       	bpl.s	OPL4		; branch, if upper boundary > 0
0000EE48 0243 07FF                  	andi.w	#$7FF,d3	; wrap value
0000EE4C 6000                       	bra.s	ObjMan_Main_Cont
0000EE4E                            ; ---------------------------------------------------------------------------
0000EE4E                             
0000EE4E                            OPL4:	
0000EE4E 303C 07FF                  	move.w	#$7FF,d0
0000EE52 5240                       	addq.w	#1,d0
0000EE54 B840                       	cmp.w	d0,d4
0000EE56 6300                       	bls.s	OPL5		; branch, if lower boundary < $7FF
0000EE58 0244 07FF                  	andi.w	#$7FF,d4	; wrap value
0000EE5C 6000                       	bra.s	ObjMan_Main_Cont
0000EE5E                            ; ---------------------------------------------------------------------------
0000EE5E                             
0000EE5E                            ObjMan_Main_NoYWrap:
0000EE5E 3638 F704                  	move.w	($FFFFF704).w,d3
0000EE62 0243 FF80                  	andi.w	#$FF80,d3	; get coarse value
0000EE66 3803                       	move.w	d3,d4
0000EE68 0644 0200                  	addi.w	#$200,d4	; set lower boundary
0000EE6C 0443 0080                  	subi.w	#$80,d3		; set upper boundary
0000EE70 6A00                       	bpl.s	OPL5
0000EE72 7600                       	moveq	#0,d3	; no negative values allowed
0000EE74                             
0000EE74                            OPL5:	
0000EE74 4DF9 0000 0000             	lea	(ChkLoadObj).l,a6	; set object loading routine
0000EE7A                             
0000EE7A                            ObjMan_Main_Cont:
0000EE7A 3A3C 0FFF                  	move.w	#$FFF,d5	; this will be used later when we load objects
0000EE7E 3C38 F700                  	move.w	($FFFFF700).w,d6
0000EE82 0246 FF80                  	andi.w	#$FF80,d6
0000EE86 BC78 FE2A                  	cmp.w	(Camera_X_Pos_last).w,d6	; is the X range the same as last time?
0000EE8A 6700 0000                  	beq.w	ObjPosLoad_SameXRange	; if yes, branch
0000EE8E 6C00                       	bge.s	ObjPosLoad_GoingForward	; if new pos is greater than old pos, branch
0000EE90                             
0000EE90                            	; if the player is moving back
0000EE90 31C6 FE2A                  	move.w	d6,(Camera_X_Pos_last).w	; remember current position for next time
0000EE94                             
0000EE94 2078 F774                  	movea.l	($FFFFF774).w,a0	; get current object going left
0000EE98 3678 F77C                  	movea.w	($FFFFF77C).w,a3	; and its respawn table index
0000EE9C                             
0000EE9C 0446 0080                  	subi.w	#$80,d6			; look one chunk to the left
0000EEA0 6500                       	bcs.s	ObjMan_GoingBack_Part2	; branch, if camera position would be behind level's left boundary
0000EEA2                             
0000EEA2 4EB9 0000 0000             	jsr	(SingleObjLoad).l		; find an empty object slot
0000EEA8 6600                       	bne.s	ObjMan_GoingBack_Part2		; branch, if there are none
0000EEAA                            OPLBack4:	; load all objects left of the screen that are now in range
0000EEAA BC68 FFFA                  	cmp.w	-6(a0),d6		; is the previous object's X pos less than d6?
0000EEAE 6C00                       	bge.s	ObjMan_GoingBack_Part2	; if it is, branch
0000EEB0 5D48                       	subq.w	#6,a0		; get object's address
0000EEB2 534B                       	subq.w	#1,a3		; and respawn table index
0000EEB4 4E96                       	jsr	(a6)		; load object
0000EEB6 6600                       	bne.s	OPL6		; branch, if SST is full
0000EEB8 5D48                       	subq.w	#6,a0
0000EEBA 60EE                       	bra.s	OPLBack4	; continue with previous object
0000EEBC                            ; ---------------------------------------------------------------------------
0000EEBC                             
0000EEBC                            OPL6:	
0000EEBC                            	; undo a few things, if the object couldn't load
0000EEBC 5C48                       	addq.w	#6,a0	; go back to last object
0000EEBE 524B                       	addq.w	#1,a3	; since we didn't load the object, undo last change
0000EEC0                             
0000EEC0                            ObjMan_GoingBack_Part2:
0000EEC0 21C8 F774                  	move.l	a0,($FFFFF774).w	; remember current object going left
0000EEC4 31CB F77C                  	move.w	a3,($FFFFF77C).w	; and its respawn table index
0000EEC8 2078 F770                  	movea.l	($FFFFF770).w,a0	; get next object going right
0000EECC 3678 F778                  	movea.w	($FFFFF778).w,a3	; and its respawn table index
0000EED0 0646 0300                  	addi.w	#$300,d6	; look two chunks beyond the right edge of the screen
0000EED4                             
0000EED4                            OPLBack5:	; subtract number of objects that have been moved out of range (from the right side)
0000EED4 BC68 FFFA                  	cmp.w	-6(a0),d6	; is the previous object's X pos less than d6?
0000EED8 6E00                       	bgt.s	OPL7		; if it is, branch
0000EEDA 5D48                       	subq.w	#6,a0		; get object's address
0000EEDC 534B                       	subq.w	#1,a3		; and respawn table index
0000EEDE 60F4                       	bra.s	OPLBack5	; continue with previous object
0000EEE0                            ; ---------------------------------------------------------------------------
0000EEE0                             
0000EEE0                            OPL7:	
0000EEE0 21C8 F770                  	move.l	a0,($FFFFF770).w	; remember next object going right
0000EEE4 31CB F778                  	move.w	a3,($FFFFF778).w	; and its respawn table index
0000EEE8 6000                       	bra.s	ObjPosLoad_SameXRange
0000EEEA                            ; ---------------------------------------------------------------------------
0000EEEA                             
0000EEEA                            ObjPosLoad_GoingForward:
0000EEEA 31C6 FE2A                  	move.w	d6,(Camera_X_Pos_last).w
0000EEEE                             
0000EEEE 2078 F770                  	movea.l	($FFFFF770).w,a0	; get next object from the right
0000EEF2 3678 F778                  	movea.w ($FFFFF778).w,a3	; and its respawn table index
0000EEF6 0646 0280                  	addi.w	#$280,d6	; look two chunks forward
0000EEFA 4EB9 0000 0000             	jsr	(SingleObjLoad).l		; find an empty object slot
0000EF00 6600                       	bne.s	ObjMan_GoingForward_Part2	; branch, if there are none
0000EF02                             
0000EF02                            OPLBack6:	; load all objects right of the screen that are now in range
0000EF02 BC50                       	cmp.w	(a0),d6				; is object's x position >= d6?
0000EF04 6300                       	bls.s	ObjMan_GoingForward_Part2	; if yes, branch
0000EF06 4E96                       	jsr	(a6)		; load object (and get address of next object)
0000EF08 524B                       	addq.w	#1,a3		; respawn index of next object to the right
0000EF0A 67F6                       	beq.s	OPLBack6	; continue loading objects, if the SST isn't full
0000EF0C                             
0000EF0C                            ObjMan_GoingForward_Part2:
0000EF0C 21C8 F770                  	move.l	a0,($FFFFF770).w	; remember next object from the right
0000EF10 31CB F778                  	move.w	a3,($FFFFF778).w	; and its respawn table index
0000EF14 2078 F774                  	movea.l	($FFFFF774).w,a0	; get current object from the left
0000EF18 3678 F77C                  	movea.w	($FFFFF77C).w,a3	; and its respawn table index
0000EF1C 0446 0300                  	subi.w	#$300,d6		; look one chunk behind the left edge of the screen
0000EF20 6500                       	bcs.s	ObjMan_GoingForward_End	; branch, if camera position would be behind level's left boundary
0000EF22                             
0000EF22                            OPLBack7:	; subtract number of objects that have been moved out of range (from the left)
0000EF22 BC50                       	cmp.w	(a0),d6			; is object's x position >= d6?
0000EF24 6300                       	bls.s	ObjMan_GoingForward_End	; if yes, branch
0000EF26 5C48                       	addq.w	#6,a0	; next object
0000EF28 524B                       	addq.w	#1,a3	; respawn index of next object to the left
0000EF2A 60F6                       	bra.s	OPLBack7	; continue with next object
0000EF2C                            ; ---------------------------------------------------------------------------
0000EF2C                             
0000EF2C                            ObjMan_GoingForward_End:
0000EF2C 21C8 F774                  	move.l	a0,($FFFFF774).w	; remember current object from the left
0000EF30 31CB F77C                  	move.w	a3,($FFFFF77C).w	; and its respawn table index
0000EF34                             
0000EF34                            ObjPosLoad_SameXRange:
0000EF34 3C38 F704                  	move.w	($FFFFF704).w,d6
0000EF38 0246 FF80                  	andi.w	#$FF80,d6
0000EF3C 3606                       	move.w	d6,d3
0000EF3E BC78 F76E                  	cmp.w	(Camera_Y_pos_last).w,d6	; is the y range the same as last time?
0000EF42 6700 0000                  	beq.w	ObjPosLoad_SameYRange	; if yes, branch
0000EF46 6C00                       	bge.s	ObjPosLoad_GoingDown	; if the player is moving down
0000EF48                             
0000EF48                            	; if the player is moving up
0000EF48 4A78 F72C                  	tst.w	($FFFFF72C).w	; does the level y-wrap?
0000EF4C 6A00                       	bpl.s	ObjMan_GoingUp_NoYWrap	; if not, branch
0000EF4E 4A46                       	tst.w	d6
0000EF50 6600                       	bne.s	ObjMan_GoingUp_YWrap
0000EF52 0C78 0080 F76E             	cmpi.w	#$80,(Camera_Y_pos_last).w
0000EF58 6600                       	bne.s	ObjMan_GoingDown_YWrap
0000EF5A                             
0000EF5A                            ObjMan_GoingUp_YWrap:
0000EF5A 0443 0080                  	subi.w	#$80,d3			; look one chunk up
0000EF5E 6A00                       	bpl.s	ObjPosLoad_YCheck	; go to y check, if camera y position >= $80
0000EF60 0243 07FF                  	andi.w	#$7FF,d3		; else, wrap value
0000EF64 6000                       	bra.s	ObjPosLoad_YCheck
0000EF66                             
0000EF66                            ; ---------------------------------------------------------------------------
0000EF66                             
0000EF66                            ObjMan_GoingUp_NoYWrap:
0000EF66 0443 0080                  	subi.w	#$80,d3				; look one chunk up
0000EF6A 6B00 0000                  	bmi.w	ObjPosLoad_SameYRange	; don't do anything if camera y position is < $80
0000EF6E 6000                       	bra.s	ObjPosLoad_YCheck
0000EF70                            ; ---------------------------------------------------------------------------
0000EF70                             
0000EF70                            ObjPosLoad_GoingDown:
0000EF70 4A78 F72C                  	tst.w	($FFFFF72C).w		; does the level y-wrap?
0000EF74 6A00                       	bpl.s	ObjMan_GoingDown_NoYWrap	; if not, branch
0000EF76 4A78 F76E                  	tst.w	(Camera_Y_pos_last).w
0000EF7A 6600                       	bne.s	ObjMan_GoingDown_YWrap
0000EF7C 0C46 0080                  	cmpi.w	#$80,d6
0000EF80 66D8                       	bne.s	ObjMan_GoingUp_YWrap
0000EF82                             
0000EF82                            ObjMan_GoingDown_YWrap:
0000EF82 0643 0180                  	addi.w	#$180,d3		; look one chunk down
0000EF86 0C43 07FF                  	cmpi.w	#$7FF,d3
0000EF8A 6500                       	bcs.s	ObjPosLoad_YCheck	; go to  check, if camera y position < $7FF
0000EF8C 0243 07FF                  	andi.w	#$7FF,d3		; else, wrap value
0000EF90 6000                       	bra.s	ObjPosLoad_YCheck
0000EF92                            ; ---------------------------------------------------------------------------
0000EF92                             
0000EF92                            ObjMan_GoingDown_NoYWrap:
0000EF92 0643 0180                  	addi.w	#$180,d3			; look one chunk down
0000EF96 0C43 07FF                  	cmpi.w	#$7FF,d3
0000EF9A 6200                       	bhi.s	ObjPosLoad_SameYRange	; don't do anything, if camera is too close to bottom
0000EF9C                             
0000EF9C                            ObjPosLoad_YCheck:
0000EF9C 4EB9 0000 0000             	jsr	(SingleObjLoad).l		; get an empty object slot
0000EFA2 6600                       	bne.s	ObjPosLoad_SameYRange	; branch, if there are none
0000EFA4 3803                       	move.w	d3,d4
0000EFA6 0644 0080                  	addi.w	#$80,d4
0000EFAA 3A3C 0FFF                  	move.w	#$FFF,d5	; this will be used later when we load objects
0000EFAE 2078 F774                  	movea.l	($FFFFF774).w,a0	; get next object going left
0000EFB2 3678 F77C                  	movea.w	($FFFFF77C).w,a3	; and its respawn table index
0000EFB6 2E38 F770                  	move.l	($FFFFF770).w,d7	; get next object going right
0000EFBA 9E88                       	sub.l	a0,d7	; d7 = number of objects between the left and right boundaries * 6
0000EFBC 6700                       	beq.s	ObjPosLoad_SameYRange	; branch if there are no objects inbetween
0000EFBE 5448                       	addq.w	#2,a0	; align to object's y position
0000EFC0                             
0000EFC0                            OPLBack8:	; check, if current object needs to be loaded
0000EFC0 4A13                       	tst.b	(a3)	; is object already loaded?
0000EFC2 6B00                       	bmi.s	OPL8	; if yes, branch
0000EFC4 3210                       	move.w	(a0),d1
0000EFC6 C245                       	and.w	d5,d1	; get object's y position
0000EFC8 B243                       	cmp.w	d3,d1
0000EFCA 6500                       	bcs.s	OPL8	; branch, if object is out of range from the top
0000EFCC B244                       	cmp.w	d4,d1
0000EFCE 6200                       	bhi.s	OPL8	; branch, if object is out of range from the bottom
0000EFD0 08D3 0007                  	bset	#7,(a3)	; mark object as loaded
0000EFD4                            	; load object
0000EFD4 3368 FFFE 0008             	move.w	-2(a0),8(a1)
0000EFDA 3210                       	move.w	(a0),d1
0000EFDC 3401                       	move.w	d1,d2
0000EFDE C245                       	and.w	d5,d1	; get object's y position
0000EFE0 3341 000C                  	move.w	d1,$C(a1)
0000EFE4 E75A                       	rol.w	#3,d2
0000EFE6 0242 0003                  	andi.w	#3,d2	; get object's render flags and status
0000EFEA 1342 0001                  	move.b	d2,1(a1)
0000EFEE 1342 0022                  	move.b	d2,$22(a1)
0000EFF2 7000                           moveq	#0,d0
0000EFF4 1028 0002                  	move.b	2(a0),d0
0000EFF8 0200 007F                  	andi.b	#$7F,d0
0000EFFC 1280                       	move.b	d0,0(a1)
0000EFFE 1368 0003 0028             	move.b	3(a0),$28(a1)
0000F004 334B 0014                  	move.w	a3,respawn_index(a1)
0000F008 4EB9 0000 0000             	jsr	(SingleObjLoad).l	; find new object slot
0000F00E 6600                       	bne.s	ObjPosLoad_SameYRange	; brach, if there are none left
0000F010                            OPL8:
0000F010 5C48                       	addq.w	#6,a0	; address of next object
0000F012 524B                       	addq.w	#1,a3	; and its respawn index
0000F014 5D47                       	subq.w	#6,d7	; subtract from size of remaining objects
0000F016 66A8                       	bne.s	OPLBack8	; branch, if there are more
0000F018                             
0000F018                            ObjPosLoad_SameYRange:
0000F018 31C6 F76E                  	move.w	d6,(Camera_Y_pos_last).w
0000F01C 4E75                       	rts		
0000F01E                            ; ===========================================================================
0000F01E                            ; ---------------------------------------------------------------------------
0000F01E                            ; Subroutines to check if an object needs to be loaded,
0000F01E                            ; with and without y-wrapping enabled.
0000F01E                            ;
0000F01E                            ; input variables:
0000F01E                            ;  d3 = upper boundary to load object
0000F01E                            ;  d4 = lower boundary to load object
0000F01E                            ;  d5 = #$FFF, used to filter out object's y position
0000F01E                            ;
0000F01E                            ;  a0 = address in object placement list
0000F01E                            ;  a1 = object
0000F01E                            ;  a3 = address in object respawn table
0000F01E                            ;
0000F01E                            ; writes:
0000F01E                            ;  d1, d2, d7
0000F01E                            ; ---------------------------------------------------------------------------
0000F01E                            ChkLoadObj_YWrap:
0000F01E 4A13                       	tst.b	(a3)	; is object already loaded?
0000F020 6A00                       	bpl.s	OPL9	; if not, branch
0000F022 5C48                       	addq.w	#6,a0	; address of next object
0000F024 7200                       	moveq	#0,d1	; let the objects manager know that it can keep going
0000F026 4E75                       	rts	
0000F028                            ; ---------------------------------------------------------------------------
0000F028                             
0000F028                            OPL9:	
0000F028 3E18                       	move.w	(a0)+,d7	; x_pos
0000F02A 3218                       	move.w	(a0)+,d1	; there are three things stored in this word
0000F02C 3401                       	move.w	d1,d2	; does this object skip y-Checks?
0000F02E 6B00                       	bmi.s	OPL10	; if yes, branch
0000F030 C245                       	and.w	d5,d1	; y_pos
0000F032 B243                       	cmp.w	d3,d1
0000F034 6400                       	bcc.s	LoadObj_YWrap
0000F036 B244                       	cmp.w	d4,d1
0000F038 6300                       	bls.s	LoadObj_YWrap
0000F03A 5448                       	addq.w	#2,a0	; address of next object
0000F03C 7200                       	moveq	#0,d1	; let the objects manager know that it can keep going
0000F03E 4E75                       	rts	
0000F040                            ; ---------------------------------------------------------------------------
0000F040                             
0000F040                            OPL10:	
0000F040 C245                       	and.w	d5,d1	; y_pos
0000F042                             
0000F042                            LoadObj_YWrap:
0000F042 08D3 0007                  	bset	#7,(a3)	; mark object as loaded
0000F046 3347 0008                  	move.w	d7,8(a1)
0000F04A 3341 000C                  	move.w	d1,$C(a1)
0000F04E E75A                       	rol.w	#3,d2	; adjust bits
0000F050 0242 0003                  	andi.w	#3,d2	; get render flags and status
0000F054 1342 0001                  	move.b	d2,1(a1)
0000F058 1342 0022                  	move.b	d2,$22(a1)
0000F05C 7000                           moveq	#0,d0
0000F05E 1018                       	move.b	(a0)+,d0
0000F060 0200 007F                  	andi.b	#$7F,d0
0000F064 1280                       	move.b	d0,0(a1)
0000F066 1358 0028                  	move.b	(a0)+,$28(a1)
0000F06A 334B 0014                  	move.w	a3,respawn_index(a1)
0000F06E 6000                       	bra.s	SingleObjLoad	; find new object slot
0000F070                             
0000F070                            ;loc_17F36
0000F070                            ChkLoadObj:
0000F070 4A13                       	tst.b	(a3)	; is object already loaded?
0000F072 6A00                       	bpl.s	OPL11	; if not, branch
0000F074 5C48                       	addq.w	#6,a0	; address of next object
0000F076 7200                       	moveq	#0,d1	; let the objects manager know that it can keep going
0000F078 4E75                       	rts
0000F07A                            ; ---------------------------------------------------------------------------
0000F07A                             
0000F07A                            OPL11:	
0000F07A 3E18                       	move.w	(a0)+,d7	; x_pos
0000F07C 3218                       	move.w	(a0)+,d1	; there are three things stored in this word
0000F07E 3401                       	move.w	d1,d2	; does this object skip y-Checks?	;*6
0000F080 6B00                       	bmi.s	OPL13	; if yes, branch
0000F082 C245                       	and.w	d5,d1	; y_pos
0000F084 B243                       	cmp.w	d3,d1
0000F086 6500                       	bcs.s	OPL12	; branch, if object is out of range from the top
0000F088 B244                       	cmp.w	d4,d1
0000F08A 6300                       	bls.s	LoadObj	; branch, if object is in range from the bottom
0000F08C                            OPL12:
0000F08C 5448                       	addq.w	#2,a0	; address of next object
0000F08E 7200                       	moveq	#0,d1
0000F090 4E75                       	rts		
0000F092                            ; ---------------------------------------------------------------------------
0000F092                             
0000F092                            OPL13:	
0000F092 C245                       	and.w	d5,d1	; y_pos
0000F094                             
0000F094                            LoadObj:
0000F094 08D3 0007                  	bset	#7,(a3)	; mark object as loaded
0000F098 3347 0008                  	move.w	d7,8(a1)
0000F09C 3341 000C                  	move.w	d1,$C(a1)
0000F0A0 E75A                       	rol.w	#3,d2	; adjust bits
0000F0A2 0242 0003                  	andi.w	#3,d2	; get render flags and status
0000F0A6 1342 0001                  	move.b	d2,1(a1)
0000F0AA 1342 0022                  	move.b	d2,$22(a1)
0000F0AE 7000                           moveq	#0,d0
0000F0B0 1018                           move.b	(a0)+,d0
0000F0B2 0200 007F                  	andi.b	#$7F,d0
0000F0B6 1280                       	move.b	d0,0(a1)
0000F0B8 1358 0028                  	move.b	(a0)+,$28(a1)
0000F0BC 334B 0014                  	move.w	a3,respawn_index(a1)
0000F0C0                            	; continue straight to SingleObjLoad
0000F0C0                            ; End of function ChkLoadObj
0000F0C0                            ; ===========================================================================
0000F0C0                            
0000F0C0                            ; ---------------------------------------------------------------------------
0000F0C0                            ; Single object	loading	subroutine
0000F0C0                            ; ---------------------------------------------------------------------------
0000F0C0                            
0000F0C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F0C0                            
0000F0C0                            
0000F0C0                            SingleObjLoad:
0000F0C0 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000F0C4 303C 005F                  		move.w	#$5F,d0
0000F0C8                            
0000F0C8                            loc_DA94:
0000F0C8 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000F0CA 6700                       		beq.s	locret_DAA0	; if yes, branch
0000F0CC 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000F0D0 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000F0D4                            
0000F0D4                            locret_DAA0:
0000F0D4 4E75                       		rts	
0000F0D6                            ; End of function SingleObjLoad
0000F0D6                            
0000F0D6                            
0000F0D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F0D6                            
0000F0D6                            
0000F0D6                            SingleObjLoad2:
0000F0D6 2248                       		movea.l	a0,a1
0000F0D8 303C F000                  		move.w	#-$1000,d0
0000F0DC 9048                       		sub.w	a0,d0
0000F0DE EC48                       		lsr.w	#6,d0
0000F0E0 5340                       		subq.w	#1,d0
0000F0E2 6500                       		bcs.s	locret_DABC
0000F0E4                            
0000F0E4                            loc_DAB0:
0000F0E4 4A11                       		tst.b	(a1)
0000F0E6 6700                       		beq.s	locret_DABC
0000F0E8 43E9 0040                  		lea	$40(a1),a1
0000F0EC 51C8 FFF6                  		dbf	d0,loc_DAB0
0000F0F0                            
0000F0F0                            locret_DABC:
0000F0F0 4E75                       		rts	
0000F0F2                            ; End of function SingleObjLoad2
0000F0F2                            
0000F0F2                            ; ===========================================================================
0000F0F2                            RingsManager:
0000F0F2 7000                       	moveq	#0,d0
0000F0F4 1038 870C                  	move.b	(Rings_manager_routine).w,d0
0000F0F8 303B 0000                  	move.w	RingsManager_States(pc,d0.w),d0
0000F0FC 4EFB 0000                  	jmp	RingsManager_States(pc,d0.w)
0000F100                            ; ===========================================================================
0000F100                            ; off_16F96:
0000F100                            RingsManager_States:
0000F100 0000                       	dc.w RingsManager_Init-RingsManager_States
0000F102 0000                       	dc.w RingsManager_Main-RingsManager_States
0000F104                            ; ===========================================================================
0000F104                            ; loc_16F9A:
0000F104                            RingsManager_Init:
0000F104 5438 870C                  	addq.b	#2,(Rings_manager_routine).w ; => RingsManager_Main
0000F108 6100 0000                  	bsr.w	RingsManager_Setup
0000F10C 2278 8700                  	movea.l	(Ring_start_addr_ROM).w,a1
0000F110 45F8 8300                  	lea	(Ring_Positions).w,a2
0000F114 3838 F700                  	move.w	($FFFFF700).w,d4
0000F118 5144                       	subq.w	#8,d4
0000F11A 6200                       	bhi.s	loc_16FB6
0000F11C 7801                       	moveq	#1,d4
0000F11E 6000                       	bra.s	loc_16FB6
0000F120                            ; ===========================================================================
0000F120                            
0000F120                            loc_16FB2:
0000F120 5849                       	addq.w	#4,a1
0000F122 544A                       	addq.w	#2,a2
0000F124                            
0000F124                            loc_16FB6:
0000F124 B851                       	cmp.w	(a1),d4
0000F126 62F8                       	bhi.s	loc_16FB2
0000F128 21C9 8700                  	move.l	a1,(Ring_start_addr_ROM).w
0000F12C 31CA 8708                  	move.w	a2,(Ring_start_addr_RAM).w
0000F130 0644 0150                  	addi.w	#$150,d4
0000F134 6000                       	bra.s	loc_16FCE
0000F136                            ; ===========================================================================
0000F136                            
0000F136                            loc_16FCA:
0000F136 5849                       	addq.w	#4,a1
0000F138                            
0000F138                            loc_16FCE:
0000F138 B851                       	cmp.w	(a1),d4
0000F13A 62FA                       	bhi.s	loc_16FCA
0000F13C 21C9 8704                  	move.l	a1,(Ring_end_addr_ROM).w
0000F140 4E75                       	rts
0000F142                            ; ===========================================================================
0000F142                            ; loc_16FDE:
0000F142                            RingsManager_Main:
0000F142 45F8 870E                  	lea	(Ring_consumption_table).w,a2
0000F146 321A                       	move.w	(a2)+,d1
0000F148 5341                       	subq.w	#1,d1
0000F14A 6500                       	bcs.s	loc_17014
0000F14C                            
0000F14C                            loc_16FE8:
0000F14C 301A                       	move.w	(a2)+,d0
0000F14E 67FC                       	beq.s	loc_16FE8
0000F150 3240                       	movea.w	d0,a1
0000F152 5311                       	subq.b	#1,(a1)
0000F154 6600                       	bne.s	loc_17010
0000F156 12BC 0006                  	move.b	#6,(a1)
0000F15A 5229 0001                  	addq.b	#1,1(a1)
0000F15E 0C29 0008 0001             	cmpi.b	#8,1(a1)
0000F164 6600                       	bne.s	loc_17010
0000F166 32BC FFFF                  	move.w	#-1,(a1)
0000F16A 357C 0000 FFFE             	move.w	#0,-2(a2)
0000F170 5378 870E                  	subq.w	#1,(Ring_consumption_table).w
0000F174                            
0000F174                            loc_17010:
0000F174 51C9 FFD6                  	dbf	d1,loc_16FE8
0000F178                            
0000F178                            loc_17014:
0000F178 2278 8700                  	movea.l	(Ring_start_addr_ROM).w,a1
0000F17C 3478 8708                  	movea.w	(Ring_start_addr_RAM).w,a2
0000F180 3838 F700                  	move.w	($FFFFF700).w,d4
0000F184 5144                       	subq.w	#8,d4
0000F186 6200                       	bhi.s	loc_17028
0000F188 7801                       	moveq	#1,d4
0000F18A 6000                       	bra.s	loc_17028
0000F18C                            ; ===========================================================================
0000F18C                            
0000F18C                            loc_17024:
0000F18C 5849                       	addq.w	#4,a1
0000F18E 544A                       	addq.w	#2,a2
0000F190                            
0000F190                            loc_17028:
0000F190 B851                       	cmp.w	(a1),d4
0000F192 62F8                       	bhi.s	loc_17024
0000F194 6000                       	bra.s	loc_17032
0000F196                            ; ===========================================================================
0000F196                            
0000F196                            loc_17030:
0000F196 5949                       	subq.w	#4,a1
0000F198 554A                       	subq.w	#2,a2
0000F19A                            
0000F19A                            loc_17032:
0000F19A B869 FFFC                  	cmp.w	-4(a1),d4
0000F19E 63F6                       	bls.s	loc_17030
0000F1A0 21C9 8700                  	move.l	a1,(Ring_start_addr_ROM).w
0000F1A4 31CA 8708                  	move.w	a2,(Ring_start_addr_RAM).w
0000F1A8 2478 8704                  	movea.l	(Ring_end_addr_ROM).w,a2
0000F1AC 0644 0150                  	addi.w	#$150,d4
0000F1B0 6000                       	bra.s	loc_1704A
0000F1B2                            ; ===========================================================================
0000F1B2                            
0000F1B2                            loc_17046:
0000F1B2 584A                       	addq.w	#4,a2
0000F1B4                            
0000F1B4                            loc_1704A:
0000F1B4 B852                       	cmp.w	(a2),d4
0000F1B6 62FA                       	bhi.s	loc_17046
0000F1B8 6000                       	bra.s	loc_17054
0000F1BA                            ; ===========================================================================
0000F1BA                            
0000F1BA                            loc_17052:
0000F1BA 594A                       	subq.w	#4,a2
0000F1BC                            
0000F1BC                            loc_17054:
0000F1BC B86A FFFC                  	cmp.w	-4(a2),d4
0000F1C0 63F8                       	bls.s	loc_17052
0000F1C2 21CA 8704                  	move.l	a2,(Ring_end_addr_ROM).w
0000F1C6 4E75                       	rts
0000F1C8                            
0000F1C8                            ; ===========================================================================
0000F1C8                            
0000F1C8                            Touch_Rings:
0000F1C8 2278 8700                  	movea.l	(Ring_start_addr_ROM).w,a1
0000F1CC 2478 8704                  	movea.l	(Ring_end_addr_ROM).w,a2
0000F1D0                            
0000F1D0                            loc_170D0:
0000F1D0 B5C9                       	cmpa.l	a1,a2
0000F1D2 6700 0000                  	beq.w	return_17166
0000F1D6 3878 8708                  	movea.w	(Ring_start_addr_RAM).w,a4
0000F1DA 0C68 005A 0030             	cmpi.w	#$5A,$30(a0)
0000F1E0 6400 0000                  	bcc.w	return_17166
0000F1E4                            	
0000F1E4                            Touch_Rings_NoAttraction:
0000F1E4 3428 0008                  	move.w	8(a0),d2
0000F1E8 3628 000C                  	move.w	$C(a0),d3
0000F1EC 5142                       	subi.w	#8,d2
0000F1EE 7A00                       	moveq	#0,d5
0000F1F0 1A28 0016                  	move.b	$16(a0),d5
0000F1F4 5705                       	subq.b	#3,d5
0000F1F6 9645                       	sub.w	d5,d3
0000F1F8 0C28 004D 0004             	cmpi.b	#$4D,4(a0)
0000F1FE 6600                       	bne.s	RM1
0000F200 0643 000C                  	addi.w	#$C,d3
0000F204 7A0A                       	moveq	#$A,d5
0000F206                            RM1:
0000F206 323C 0006                  	move.w	#6,d1
0000F20A 3C3C 000C                  	move.w	#$C,d6
0000F20E 383C 0010                  	move.w	#$10,d4
0000F212 DA45                       	add.w	d5,d5
0000F214                            
0000F214                            loc_17112:
0000F214 4A54                       	tst.w	(a4)
0000F216 6600 0000                  	bne.w	loc_1715C
0000F21A 3011                       	move.w	(a1),d0
0000F21C 9041                       	sub.w	d1,d0
0000F21E 9042                       	sub.w	d2,d0
0000F220 6400                       	bcc.s	loc_1712A
0000F222 D046                       	add.w	d6,d0
0000F224 6500                       	bcs.s	loc_17130
0000F226 6000 0000                  	bra.w	loc_1715C
0000F22A                            ; ===========================================================================
0000F22A                            
0000F22A                            loc_1712A:
0000F22A B044                       	cmp.w	d4,d0
0000F22C 6200 0000                  	bhi.w	loc_1715C
0000F230                            
0000F230                            loc_17130:
0000F230 3029 0002                  	move.w	2(a1),d0
0000F234 9041                       	sub.w	d1,d0
0000F236 9043                       	sub.w	d3,d0
0000F238 6400                       	bcc.s	loc_17142
0000F23A D046                       	add.w	d6,d0
0000F23C 6500                       	bcs.s	loc_17148
0000F23E 6000 0000                  	bra.w	loc_1715C
0000F242                            ; ===========================================================================
0000F242                            
0000F242                            loc_17142:
0000F242 B045                       	cmp.w	d5,d0
0000F244 6200 0000                  	bhi.w	loc_1715C
0000F248                            
0000F248                            loc_17148:
0000F248 38BC 0604                  	move.w	#$604,(a4)
0000F24C 6100                       	bsr.s	loc_17168
0000F24E 47F8 8710                  	lea	(Ring_consumption_table+2).w,a3
0000F252                            
0000F252                            loc_17152:
0000F252 4A5B                       	tst.w	(a3)+
0000F254 66FC                       	bne.s	loc_17152
0000F256 370C                       	move.w	a4,-(a3)
0000F258 5278 870E                  	addq.w	#1,(Ring_consumption_table).w
0000F25C                            
0000F25C                            loc_1715C:
0000F25C 5849                       	addq.w	#4,a1
0000F25E 544C                       	addq.w	#2,a4
0000F260 B5C9                       	cmpa.l	a1,a2
0000F262 6600 FFB0                  	bne.w	loc_17112
0000F266                            
0000F266                            return_17166:
0000F266 4E75                       	rts
0000F268                            ; ===========================================================================
0000F268                            
0000F268                            loc_17168:
0000F268 5378 870A                  	subq.w	#1,(Perfect_rings_left).w
0000F26C 6000 BCAE                  	bra.w	CollectRing
0000F270                            ; ===========================================================================
0000F270                            
0000F270                            BuildRings:
0000F270 2078 8700                  	movea.l	(Ring_start_addr_ROM).w,a0
0000F274 2E38 8704                  	move.l	(Ring_end_addr_ROM).w,d7
0000F278 9E88                       	sub.l	a0,d7
0000F27A 6600                       	bne.s	loc_17186
0000F27C 4E75                       	rts
0000F27E                            ; ===========================================================================
0000F27E                            
0000F27E                            loc_17186:
0000F27E 3878 8708                  	movea.w	(Ring_start_addr_RAM).w,a4
0000F282 47F8 F700                  	lea	($FFFFF700).w,a3
0000F286                            
0000F286                            loc_1718A:
0000F286 4A5C                       	tst.w	(a4)+
0000F288 6B00 0000                  	bmi.w	loc_171EC
0000F28C 3610                       	move.w	(a0),d3
0000F28E 9653                       	sub.w	(a3),d3
0000F290 0643 0080                  	addi.w	#$80,d3
0000F294 3428 0002                  	move.w	2(a0),d2
0000F298 946B 0004                  	sub.w	4(a3),d2
0000F29C 0242 07FF                  	andi.w	#$7FF,d2
0000F2A0 5042                       	addi.w	#8,d2
0000F2A2 6B00                       	bmi.s	loc_171EC
0000F2A4 0C42 00F0                  	cmpi.w	#$F0,d2
0000F2A8 6C00                       	bge.s	loc_171EC
0000F2AA 0642 0078                  	addi.w	#$78,d2
0000F2AE 43F9 0000 B274             	lea	(Map_Obj25).l,a1
0000F2B4 7200                       	moveq	#0,d1
0000F2B6 122C FFFF                  	move.b	-1(a4),d1
0000F2BA 6600                       	bne.s	loc_171C8
0000F2BC 1238 FEC3                  	move.b	($FFFFFEC3).w,d1
0000F2C0                            
0000F2C0                            loc_171C8:
0000F2C0 D241                       	add.w	d1,d1
0000F2C2 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000F2C6 7200                       	moveq	#$00,d1
0000F2C8 1219                       	move.b	(a1)+,d1
0000F2CA 5301                       	subq.b	#1,d1
0000F2CC 6B00                       	bmi.s	loc_171EC
0000F2CE 1019                       	move.b	(a1)+,d0
0000F2D0 4880                       	ext.w	d0
0000F2D2 D042                       	add.w	d2,d0
0000F2D4 34C0                       	move.w	d0,(a2)+
0000F2D6 14D9                       	move.b	(a1)+,(a2)+
0000F2D8 5205                       	addq.b	#1,d5
0000F2DA 14C5                       	move.b	d5,(a2)+
0000F2DC 1019                       	move.b	(a1)+,d0
0000F2DE E148                       	lsl.w	#8,d0
0000F2E0 1019                       	move.b	(a1)+,d0
0000F2E2 0640 26BA                  	addi.w	#($2000+ringart),d0
0000F2E6 34C0                       	move.w	d0,(a2)+
0000F2E8 1019                       	move.b	(a1)+,d0
0000F2EA 4880                       	ext.w	d0
0000F2EC D043                       	add.w	d3,d0
0000F2EE 34C0                       	move.w	d0,(a2)+
0000F2F0                            
0000F2F0                            loc_171EC:
0000F2F0 5848                       	addq.w	#4,a0
0000F2F2 5947                       	subq.w	#4,d7
0000F2F4 6600 FF90                  	bne.w	loc_1718A
0000F2F8 4E75                       	rts
0000F2FA                            ; ===========================================================================
0000F2FA                            
0000F2FA                            RingsManager_Setup:
0000F2FA 43F8 8300                  	lea	(Ring_Positions).w,a1
0000F2FE 7000                       	moveq	#0,d0
0000F300 323C 00FF                  	move.w	#Rings_Space/4-1,d1
0000F304                            
0000F304                            loc_172AE:				; CODE XREF: h+33Cj
0000F304 22C0                       	move.l	d0,(a1)+
0000F306 51C9 FFFC                  	dbf	d1,loc_172AE
0000F30A                            
0000F30A                            	; d0 = 0
0000F30A 43F8 870E                  	lea	(Ring_consumption_table).w,a1
0000F30E 323C 001F                  	move.w	#$1F,d1
0000F312                            RMBack1:
0000F312 22C0                       	move.l	d0,(a1)+
0000F314 51C9 FFFC                  	dbf	d1,RMBack1
0000F318                            
0000F318 7A00                       	moveq	#0,d5
0000F31A 7000                       	moveq	#0,d0
0000F31C 3038 FE10                  	move.w	($FFFFFE10).w,d0
0000F320 ED08                       	lsl.b	#6,d0
0000F322 E848                       	lsr.w	#4,d0
0000F324 43F9 0000 0000             	lea	(RingPos_Index).l,a1
0000F32A 3031 0000                  	move.w	(a1,d0.w),d0
0000F32E 43F1 0000                  	lea	(a1,d0.w),a1
0000F332 21C9 8700                  	move.l	a1,(Ring_start_addr_ROM).w
0000F336 5849                       	addq.w	#4,a1
0000F338 7A00                       	moveq	#0,d5
0000F33A 303C 01FE                  	move.w	#(Max_Rings-1),d0	
0000F33E                            	
0000F33E                            RMBack2:
0000F33E 4A99                       	tst.l	(a1)+
0000F340 6B00                       	bmi.s	RM2
0000F342 5245                       	addq.w	#1,d5
0000F344 51C8 FFF8                  	dbf	d0,RMBack2
0000F348                            RM2:
0000F348 31C5 870A                  	move.w	d5,(Perfect_rings_left).w
0000F34C 4E75                       	rts
0000F34E                            ; ===========================================================================
0000F34E                            
0000F34E                            ; ===========================================================================
0000F34E                            ; ---------------------------------------------------------------------------
0000F34E                            ; Object 41 - springs
0000F34E                            ; ---------------------------------------------------------------------------
0000F34E                            
0000F34E                            Obj41:					; XREF: Obj_Index
0000F34E 7000                       		moveq	#0,d0
0000F350 1028 0024                  		move.b	$24(a0),d0
0000F354 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000F358 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000F35C 6100 F60C                  		bsr.w	DisplaySprite
0000F360 3028 0008                  		move.w	8(a0),d0
0000F364 0240 FF80                  		andi.w	#$FF80,d0
0000F368 3238 F700                  		move.w	($FFFFF700).w,d1
0000F36C 0441 0080                  		subi.w	#$80,d1
0000F370 0241 FF80                  		andi.w	#$FF80,d1
0000F374 9041                       		sub.w	d1,d0
0000F376 0C40 0280                  		cmpi.w	#$280,d0
0000F37A 6300                       		bls.s	Obj41_NoDel
0000F37C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000F380 6700 F638                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000F384 3440                       		movea.w	d0,a2	; load address into a2
0000F386 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000F38A 6000 F62E                  		bra.w	DeleteObject	; and delete object
0000F38E                            
0000F38E                            Obj41_NoDel:
0000F38E 4E75                       		rts	
0000F390                            ; ===========================================================================
0000F390 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000F392 0000                       		dc.w Obj41_Up-Obj41_Index
0000F394 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000F396 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000F398 0000                       		dc.w Obj41_LR-Obj41_Index
0000F39A 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000F39C 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000F39E 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000F3A0 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000F3A2 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000F3A4                            
0000F3A4 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000F3A6 F600                       		dc.w -$A00		; power	of yellow spring
0000F3A8                            ; ===========================================================================
0000F3A8                            
0000F3A8                            Obj41_Main:				; XREF: Obj41_Index
0000F3A8 5428 0024                  		addq.b	#2,$24(a0)
0000F3AC 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000F3B4 317C 0523 0002             		move.w	#$523,2(a0)
0000F3BA 0028 0004 0001             		ori.b	#4,1(a0)
0000F3C0 117C 0010 0019             		move.b	#$10,$19(a0)
0000F3C6 117C 0004 0018             		move.b	#4,$18(a0)
0000F3CC 1028 0028                  		move.b	$28(a0),d0
0000F3D0 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000F3D4 6700                       		beq.s	loc_DB54	; if not, branch
0000F3D6 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000F3DC 117C 0001 001C             		move.b	#1,$1C(a0)
0000F3E2 117C 0003 001A             		move.b	#3,$1A(a0)
0000F3E8 317C 0533 0002             		move.w	#$533,2(a0)
0000F3EE 117C 0008 0019             		move.b	#8,$19(a0)
0000F3F4                            
0000F3F4                            loc_DB54:
0000F3F4 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000F3F8 6700                       		beq.s	loc_DB66	; if not, branch
0000F3FA 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000F400 08E8 0001 0022             		bset	#1,$22(a0)
0000F406                            
0000F406                            loc_DB66:
0000F406 0800 0001                  		btst	#1,d0
0000F40A 6700                       		beq.s	loc_DB72
0000F40C 08E8 0005 0002             		bset	#5,2(a0)
0000F412                            
0000F412                            loc_DB72:
0000F412 0240 000F                  		andi.w	#$F,d0
0000F416 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000F41C 4E75                       		rts	
0000F41E                            ; ===========================================================================
0000F41E                            
0000F41E                            Obj41_Up:				; XREF: Obj41_Index
0000F41E 323C 001B                  		move.w	#$1B,d1
0000F422 343C 0008                  		move.w	#8,d2
0000F426 363C 0010                  		move.w	#$10,d3
0000F42A 3828 0008                  		move.w	8(a0),d4
0000F42E 6100 0000                  		bsr.w	SolidObject
0000F432 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000F436 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000F438 4E75                       		rts	
0000F43A                            ; ===========================================================================
0000F43A                            
0000F43A                            Obj41_BounceUp:				; XREF: Obj41_Up
0000F43A 5428 0024                  		addq.b	#2,$24(a0)
0000F43E 5069 000C                  		addq.w	#8,$C(a1)
0000F442 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000F448 08E9 0001 0022             		bset	#1,$22(a1)
0000F44E 08A9 0003 0022             		bclr	#3,$22(a1)
0000F454 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000F45A 137C 0002 0024             		move.b	#2,$24(a1)
0000F460 08A8 0003 0022             		bclr	#3,$22(a0)
0000F466 4228 0025                  		clr.b	$25(a0)
0000F46A 303C 00CC                  		move.w	#$CC,d0
0000F46E 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play spring sound
0000F474                            
0000F474                            Obj41_AniUp:				; XREF: Obj41_Index
0000F474 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F47A 6000 C54E                  		bra.w	AnimateSprite
0000F47E                            ; ===========================================================================
0000F47E                            
0000F47E                            Obj41_ResetUp:				; XREF: Obj41_Index
0000F47E 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F484 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000F488 4E75                       		rts	
0000F48A                            ; ===========================================================================
0000F48A                            
0000F48A                            Obj41_LR:				; XREF: Obj41_Index
0000F48A 323C 0013                  		move.w	#$13,d1
0000F48E 343C 000E                  		move.w	#$E,d2
0000F492 363C 000F                  		move.w	#$F,d3
0000F496 3828 0008                  		move.w	8(a0),d4
0000F49A 6100 0000                  		bsr.w	SolidObject
0000F49E 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F4A4 6600                       		bne.s	loc_DC0C
0000F4A6 117C 0008 0024             		move.b	#8,$24(a0)
0000F4AC                            
0000F4AC                            loc_DC0C:
0000F4AC 0828 0005 0022             		btst	#5,$22(a0)
0000F4B2 6600                       		bne.s	Obj41_BounceLR
0000F4B4 4E75                       		rts	
0000F4B6                            ; ===========================================================================
0000F4B6                            
0000F4B6                            Obj41_BounceLR:				; XREF: Obj41_LR
0000F4B6 5428 0024                  		addq.b	#2,$24(a0)
0000F4BA 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000F4C0 5069 0008                  		addq.w	#8,8(a1)
0000F4C4 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000F4CA 6600                       		bne.s	loc_DC36	; if yes, branch
0000F4CC 0469 0010 0008             		subi.w	#$10,8(a1)
0000F4D2 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000F4D6                            
0000F4D6                            loc_DC36:
0000F4D6 337C 000F 003E             		move.w	#$F,$3E(a1)
0000F4DC 3369 0010 0020             		move.w	$10(a1),$20(a1)
0000F4E2 0869 0000 0022             		bchg	#0,$22(a1)
0000F4E8 0829 0002 0022             		btst	#2,$22(a1)
0000F4EE 6600                       		bne.s	loc_DC56
0000F4F0 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000F4F6                            
0000F4F6                            loc_DC56:
0000F4F6 08A8 0005 0022             		bclr	#5,$22(a0)
0000F4FC 08A9 0005 0022             		bclr	#5,$22(a1)
0000F502 303C 00CC                  		move.w	#$CC,d0
0000F506 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play spring sound
0000F50C                            
0000F50C                            Obj41_AniLR:				; XREF: Obj41_Index
0000F50C 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F512 6000 C4B6                  		bra.w	AnimateSprite
0000F516                            ; ===========================================================================
0000F516                            
0000F516                            Obj41_ResetLR:				; XREF: Obj41_Index
0000F516 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000F51C 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000F520 4E75                       		rts	
0000F522                            ; ===========================================================================
0000F522                            
0000F522                            Obj41_Dwn:				; XREF: Obj41_Index
0000F522 323C 001B                  		move.w	#$1B,d1
0000F526 343C 0008                  		move.w	#8,d2
0000F52A 363C 0010                  		move.w	#$10,d3
0000F52E 3828 0008                  		move.w	8(a0),d4
0000F532 6100 0000                  		bsr.w	SolidObject
0000F536 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F53C 6600                       		bne.s	loc_DCA4
0000F53E 117C 000E 0024             		move.b	#$E,$24(a0)
0000F544                            
0000F544                            loc_DCA4:
0000F544 4A28 0025                  		tst.b	$25(a0)
0000F548 6600                       		bne.s	locret_DCAE
0000F54A 4A44                       		tst.w	d4
0000F54C 6B00                       		bmi.s	Obj41_BounceDwn
0000F54E                            
0000F54E                            locret_DCAE:
0000F54E 4E75                       		rts	
0000F550                            ; ===========================================================================
0000F550                            
0000F550                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000F550 5428 0024                  		addq.b	#2,$24(a0)
0000F554 5169 000C                  		subq.w	#8,$C(a1)
0000F558 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000F55E 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000F562 08E9 0001 0022             		bset	#1,$22(a1)
0000F568 08A9 0003 0022             		bclr	#3,$22(a1)
0000F56E 137C 0002 0024             		move.b	#2,$24(a1)
0000F574 08A8 0003 0022             		bclr	#3,$22(a0)
0000F57A 4228 0025                  		clr.b	$25(a0)
0000F57E 303C 00CC                  		move.w	#$CC,d0
0000F582 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play spring sound
0000F588                            
0000F588                            Obj41_AniDwn:				; XREF: Obj41_Index
0000F588 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F58E 6000 C43A                  		bra.w	AnimateSprite
0000F592                            ; ===========================================================================
0000F592                            
0000F592                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000F592 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F598 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000F59C 4E75                       		rts	
0000F59E                            ; ===========================================================================
0000F59E                            Ani_obj41:
0000F59E                            	include "_anim\obj41.asm"
0000F59E                            ; ---------------------------------------------------------------------------
0000F59E                            ; Animation script - springs
0000F59E                            ; ---------------------------------------------------------------------------
0000F59E 0000                       		dc.w byte_DD02-Ani_obj41
0000F5A0 0000                       		dc.w byte_DD0E-Ani_obj41
0000F5A2 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000F5AE 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000F5BA                            		even
0000F5BA                            		even
0000F5BA                            
0000F5BA                            ; ---------------------------------------------------------------------------
0000F5BA                            ; Sprite mappings - springs
0000F5BA                            ; ---------------------------------------------------------------------------
0000F5BA                            Map_obj41:
0000F5BA                            	include "_maps\obj41.asm"
0000F5BA                            ; ---------------------------------------------------------------------------
0000F5BA                            ; Sprite mappings - springs
0000F5BA                            ; ---------------------------------------------------------------------------
0000F5BA 0000                       		dc.w byte_DD26-Map_obj41
0000F5BC 0000                       		dc.w byte_DD31-Map_obj41
0000F5BE 0000                       		dc.w byte_DD37-Map_obj41
0000F5C0 0000                       		dc.w byte_DD47-Map_obj41
0000F5C2 0000                       		dc.w byte_DD4D-Map_obj41
0000F5C4 0000                       		dc.w byte_DD53-Map_obj41
0000F5C6 02                         byte_DD26:	dc.b 2
0000F5C7 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000F5CC 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000F5D1 01                         byte_DD31:	dc.b 1
0000F5D2 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000F5D7 03                         byte_DD37:	dc.b 3
0000F5D8 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000F5DD F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F5E2 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000F5E7 01                         byte_DD47:	dc.b 1
0000F5E8 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000F5ED 01                         byte_DD4D:	dc.b 1
0000F5EE F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000F5F3 04                         byte_DD53:	dc.b 4
0000F5F4 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000F5F9 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000F5FE F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000F603 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000F608                            		even
0000F608                            		even
0000F608                            
0000F608                            ; ===========================================================================
0000F608                            ; ---------------------------------------------------------------------------
0000F608                            ; Object 42 - Newtron enemy (GHZ)
0000F608                            ; ---------------------------------------------------------------------------
0000F608                            
0000F608                            Obj42:					; XREF: Obj_Index
0000F608 7000                       		moveq	#0,d0
0000F60A 1028 0024                  		move.b	$24(a0),d0
0000F60E 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000F612 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000F616                            ; ===========================================================================
0000F616 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000F618 0000                       		dc.w Obj42_Action-Obj42_Index
0000F61A 0000                       		dc.w Obj42_Delete-Obj42_Index
0000F61C                            ; ===========================================================================
0000F61C                            
0000F61C                            Obj42_Main:				; XREF: Obj42_Index
0000F61C 5428 0024                  		addq.b	#2,$24(a0)
0000F620 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000F628 317C 049B 0002             		move.w	#$49B,2(a0)
0000F62E 117C 0004 0001             		move.b	#4,1(a0)
0000F634 117C 0004 0018             		move.b	#4,$18(a0)
0000F63A 117C 0014 0019             		move.b	#$14,$19(a0)
0000F640 117C 0010 0016             		move.b	#$10,$16(a0)
0000F646 117C 0008 0017             		move.b	#8,$17(a0)
0000F64C                            
0000F64C                            Obj42_Action:				; XREF: Obj42_Index
0000F64C 7000                       		moveq	#0,d0
0000F64E 1028 0025                  		move.b	$25(a0),d0
0000F652 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000F656 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000F65A 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000F660 6100 C368                  		bsr.w	AnimateSprite
0000F664 6000 0000                  		bra.w	MarkObjGone
0000F668                            ; ===========================================================================
0000F668 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000F66A 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000F66C 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000F66E 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000F670 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000F672                            ; ===========================================================================
0000F672                            
0000F672                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000F672 08E8 0000 0022             		bset	#0,$22(a0)
0000F678 3038 D008                  		move.w	($FFFFD008).w,d0
0000F67C 9068 0008                  		sub.w	8(a0),d0
0000F680 6400                       		bcc.s	loc_DDEA
0000F682 4440                       		neg.w	d0
0000F684 08A8 0000 0022             		bclr	#0,$22(a0)
0000F68A                            
0000F68A                            loc_DDEA:
0000F68A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000F68E 6400                       		bcc.s	locret_DE12	; if not, branch
0000F690 5428 0025                  		addq.b	#2,$25(a0)
0000F694 117C 0001 001C             		move.b	#1,$1C(a0)
0000F69A 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000F69E 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000F6A0 317C 249B 0002             		move.w	#$249B,2(a0)
0000F6A6 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000F6AC 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000F6B2                            
0000F6B2                            locret_DE12:
0000F6B2 4E75                       		rts	
0000F6B4                            ; ===========================================================================
0000F6B4                            
0000F6B4                            Obj42_Type00:				; XREF: Obj42_Index2
0000F6B4 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000F6BA 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000F6BC 08E8 0000 0022             		bset	#0,$22(a0)
0000F6C2 3038 D008                  		move.w	($FFFFD008).w,d0
0000F6C6 9068 0008                  		sub.w	8(a0),d0
0000F6CA 6400                       		bcc.s	locret_DE32
0000F6CC 08A8 0000 0022             		bclr	#0,$22(a0)
0000F6D2                            
0000F6D2                            locret_DE32:
0000F6D2 4E75                       		rts	
0000F6D4                            ; ===========================================================================
0000F6D4                            
0000F6D4                            Obj42_Fall:				; XREF: Obj42_Type00
0000F6D4 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F6DA 6600                       		bne.s	loc_DE42
0000F6DC 117C 000C 0020             		move.b	#$C,$20(a0)
0000F6E2                            
0000F6E2                            loc_DE42:
0000F6E2 6100 F24C                  		bsr.w	ObjectFall
0000F6E6 6100 0000                  		bsr.w	ObjHitFloor
0000F6EA 4A41                       		tst.w	d1		; has newtron hit the floor?
0000F6EC 6A00                       		bpl.s	locret_DE86	; if not, branch
0000F6EE D368 000C                  		add.w	d1,$C(a0)
0000F6F2 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000F6F8 5428 0025                  		addq.b	#2,$25(a0)
0000F6FC 117C 0002 001C             		move.b	#2,$1C(a0)
0000F702 0828 0005 0002             		btst	#5,2(a0)
0000F708 6700                       		beq.s	Obj42_Move
0000F70A 5228 001C                  		addq.b	#1,$1C(a0)
0000F70E                            
0000F70E                            Obj42_Move:
0000F70E 117C 000D 0020             		move.b	#$D,$20(a0)
0000F714 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000F71A 0828 0000 0022             		btst	#0,$22(a0)
0000F720 6600                       		bne.s	locret_DE86
0000F722 4468 0010                  		neg.w	$10(a0)
0000F726                            
0000F726                            locret_DE86:
0000F726 4E75                       		rts	
0000F728                            ; ===========================================================================
0000F728                            
0000F728                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000F728 6100 F226                  		bsr.w	SpeedToPos
0000F72C 6100 0000                  		bsr.w	ObjHitFloor
0000F730 0C41 FFF8                  		cmpi.w	#-8,d1
0000F734 6D00                       		blt.s	loc_DEA2
0000F736 0C41 000C                  		cmpi.w	#$C,d1
0000F73A 6C00                       		bge.s	loc_DEA2
0000F73C D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000F740 4E75                       		rts	
0000F742                            ; ===========================================================================
0000F742                            
0000F742                            loc_DEA2:
0000F742 5428 0025                  		addq.b	#2,$25(a0)
0000F746 4E75                       		rts	
0000F748                            ; ===========================================================================
0000F748                            
0000F748                            Obj42_Speed:				; XREF: Obj42_Index2
0000F748 6100 F206                  		bsr.w	SpeedToPos
0000F74C 4E75                       		rts	
0000F74E                            ; ===========================================================================
0000F74E                            
0000F74E                            Obj42_Type01:				; XREF: Obj42_Index2
0000F74E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F754 6600                       		bne.s	Obj42_FireMissile
0000F756 117C 000C 0020             		move.b	#$C,$20(a0)
0000F75C                            
0000F75C                            Obj42_FireMissile:
0000F75C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000F762 6600                       		bne.s	locret_DF14
0000F764 4A28 0032                  		tst.b	$32(a0)
0000F768 6600                       		bne.s	locret_DF14
0000F76A 117C 0001 0032             		move.b	#1,$32(a0)
0000F770 6100 F94E                  		bsr.w	SingleObjLoad
0000F774 6600                       		bne.s	locret_DF14
0000F776 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000F77A 3368 0008 0008             		move.w	8(a0),8(a1)
0000F780 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F786 5169 000C                  		subq.w	#8,$C(a1)
0000F78A 337C 0200 0010             		move.w	#$200,$10(a1)
0000F790 303C 0014                  		move.w	#$14,d0
0000F794 0828 0000 0022             		btst	#0,$22(a0)
0000F79A 6600                       		bne.s	loc_DF04
0000F79C 4440                       		neg.w	d0
0000F79E 4469 0010                  		neg.w	$10(a1)
0000F7A2                            
0000F7A2                            loc_DF04:
0000F7A2 D169 0008                  		add.w	d0,8(a1)
0000F7A6 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F7AC 137C 0001 0028             		move.b	#1,$28(a1)
0000F7B2                            
0000F7B2                            locret_DF14:
0000F7B2 4E75                       		rts	
0000F7B4                            ; ===========================================================================
0000F7B4                            
0000F7B4                            Obj42_Delete:				; XREF: Obj42_Index
0000F7B4 6000 F204                  		bra.w	DeleteObject
0000F7B8                            ; ===========================================================================
0000F7B8                            Ani_obj42:
0000F7B8                            	include "_anim\obj42.asm"
0000F7B8                            ; ---------------------------------------------------------------------------
0000F7B8                            ; Animation script - Newtron enemy
0000F7B8                            ; ---------------------------------------------------------------------------
0000F7B8 0000                       		dc.w byte_DF24-Ani_obj42
0000F7BA 0000                       		dc.w byte_DF28-Ani_obj42
0000F7BC 0000                       		dc.w byte_DF30-Ani_obj42
0000F7BE 0000                       		dc.w byte_DF34-Ani_obj42
0000F7C0 0000                       		dc.w byte_DF38-Ani_obj42
0000F7C2 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000F7C6 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000F7CE 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000F7D2 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000F7D6 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000F7E0                            		even
0000F7E0                            		even
0000F7E0                            
0000F7E0                            ; ---------------------------------------------------------------------------
0000F7E0                            ; Sprite mappings - Newtron enemy (GHZ)
0000F7E0                            ; ---------------------------------------------------------------------------
0000F7E0                            Map_obj42:
0000F7E0                            	include "_maps\obj42.asm"
0000F7E0                            ; ---------------------------------------------------------------------------
0000F7E0                            ; Sprite mappings - Newtron enemy (GHZ)
0000F7E0                            ; ---------------------------------------------------------------------------
0000F7E0 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000F7E4 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000F7E8 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000F7EC 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000F7F0 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000F7F4 0000                       		dc.w byte_DFF8-Map_obj42
0000F7F6 03                         byte_DF58:	dc.b 3
0000F7F7 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000F7FC F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000F801 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000F806 03                         byte_DF68:	dc.b 3
0000F807 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000F80C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F811 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F816 03                         byte_DF78:	dc.b 3
0000F817 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000F81C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F821 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F826 04                         byte_DF88:	dc.b 4
0000F827 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000F82C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F831 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000F836 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000F83B 03                         byte_DF9D:	dc.b 3
0000F83C F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000F841 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000F846 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000F84B 02                         byte_DFAD:	dc.b 2
0000F84C F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F851 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F856 03                         byte_DFB8:	dc.b 3
0000F857 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F85C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F861 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000F866 03                         byte_DFC8:	dc.b 3
0000F867 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F86C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F871 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000F876 03                         byte_DFD8:	dc.b 3
0000F877 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F87C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F881 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000F886 03                         byte_DFE8:	dc.b 3
0000F887 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F88C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F891 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000F896 00                         byte_DFF8:	dc.b 0
0000F898 00                         		even
0000F898 00                         		even
0000F898                            
0000F898                            ; ===========================================================================
0000F898                            ; ---------------------------------------------------------------------------
0000F898                            ; Object 43 - Roller enemy (SYZ)
0000F898                            ; ---------------------------------------------------------------------------
0000F898                            
0000F898                            Obj43:					; XREF: Obj_Index
0000F898 7000                       		moveq	#0,d0
0000F89A 1028 0024                  		move.b	$24(a0),d0
0000F89E 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000F8A2 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000F8A6                            ; ===========================================================================
0000F8A6 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000F8A8 0000                       		dc.w Obj43_Action-Obj43_Index
0000F8AA                            ; ===========================================================================
0000F8AA                            
0000F8AA                            Obj43_Main:				; XREF: Obj43_Index
0000F8AA 117C 000E 0016             		move.b	#$E,$16(a0)
0000F8B0 117C 0008 0017             		move.b	#8,$17(a0)
0000F8B6 6100 F078                  		bsr.w	ObjectFall
0000F8BA 6100 0000                  		bsr.w	ObjHitFloor
0000F8BE 4A41                       		tst.w	d1
0000F8C0 6A00                       		bpl.s	locret_E052
0000F8C2 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000F8C6 317C 0000 0012             		move.w	#0,$12(a0)
0000F8CC 5428 0024                  		addq.b	#2,$24(a0)
0000F8D0 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000F8D8 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000F8DE 117C 0004 0001             		move.b	#4,1(a0)
0000F8E4 117C 0004 0018             		move.b	#4,$18(a0)
0000F8EA 117C 0010 0019             		move.b	#$10,$19(a0)
0000F8F0                            
0000F8F0                            locret_E052:
0000F8F0 4E75                       		rts	
0000F8F2                            ; ===========================================================================
0000F8F2                            
0000F8F2                            Obj43_Action:				; XREF: Obj43_Index
0000F8F2 7000                       		moveq	#0,d0
0000F8F4 1028 0025                  		move.b	$25(a0),d0
0000F8F8 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000F8FC 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000F900 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000F906 6100 C0C2                  		bsr.w	AnimateSprite
0000F90A 3028 0008                  		move.w	8(a0),d0
0000F90E 0240 FF80                  		andi.w	#$FF80,d0
0000F912 3238 F700                  		move.w	($FFFFF700).w,d1
0000F916 0441 0080                  		subi.w	#$80,d1
0000F91A 0241 FF80                  		andi.w	#$FF80,d1
0000F91E 9041                       		sub.w	d1,d0
0000F920 0C40 0280                  		cmpi.w	#$280,d0
0000F924 6E00 0000                  		bgt.w	Obj43_ChkGone
0000F928 6000 F040                  		bra.w	DisplaySprite
0000F92C                            ; ===========================================================================
0000F92C                            
0000F92C                            Obj43_ChkGone:				; XREF: Obj43_Action
0000F92C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000F930 6700                       		beq.s	Obj43_Delete		; if it's zero, don't remember object
0000F932 3440                       		movea.w	d0,a2	; load address into a2
0000F934 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000F938                            
0000F938                            Obj43_Delete:
0000F938 6000 F080                  		bra.w	DeleteObject
0000F93C                            ; ===========================================================================
0000F93C 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000F93E 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000F940 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000F942 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000F944                            ; ===========================================================================
0000F944                            
0000F944                            Obj43_RollChk:				; XREF: Obj43_Index2
0000F944 3038 D008                  		move.w	($FFFFD008).w,d0
0000F948 0440 0100                  		subi.w	#$100,d0
0000F94C 6500                       		bcs.s	loc_E0D2
0000F94E 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000F952 6500                       		bcs.s	loc_E0D2
0000F954 5828 0025                  		addq.b	#4,$25(a0)
0000F958 117C 0002 001C             		move.b	#2,$1C(a0)
0000F95E 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000F964 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000F96A                            
0000F96A                            loc_E0D2:
0000F96A 588F                       		addq.l	#4,sp
0000F96C 4E75                       		rts	
0000F96E                            ; ===========================================================================
0000F96E                            
0000F96E                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000F96E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000F974 6700                       		beq.s	loc_E0F8
0000F976 5368 0030                  		subq.w	#1,$30(a0)
0000F97A 6A00                       		bpl.s	locret_E0F6
0000F97C 117C 0001 001C             		move.b	#1,$1C(a0)
0000F982 317C 0700 0010             		move.w	#$700,$10(a0)
0000F988 117C 008E 0020             		move.b	#$8E,$20(a0)
0000F98E                            
0000F98E                            locret_E0F6:
0000F98E 4E75                       		rts	
0000F990                            ; ===========================================================================
0000F990                            
0000F990                            loc_E0F8:
0000F990 5428 0025                  		addq.b	#2,$25(a0)
0000F994 4E75                       		rts	
0000F996                            ; ===========================================================================
0000F996                            
0000F996                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000F996 6100 0000                  		bsr.w	Obj43_Stop
0000F99A 6100 EFB4                  		bsr.w	SpeedToPos
0000F99E 6100 0000                  		bsr.w	ObjHitFloor
0000F9A2 0C41 FFF8                  		cmpi.w	#-8,d1
0000F9A6 6D00                       		blt.s	Obj43_Jump
0000F9A8 0C41 000C                  		cmpi.w	#$C,d1
0000F9AC 6C00                       		bge.s	Obj43_Jump
0000F9AE D368 000C                  		add.w	d1,$C(a0)
0000F9B2 4E75                       		rts	
0000F9B4                            ; ===========================================================================
0000F9B4                            
0000F9B4                            Obj43_Jump:
0000F9B4 5428 0025                  		addq.b	#2,$25(a0)
0000F9B8 08E8 0000 0032             		bset	#0,$32(a0)
0000F9BE 6700                       		beq.s	locret_E12E
0000F9C0 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000F9C6                            
0000F9C6                            locret_E12E:
0000F9C6 4E75                       		rts	
0000F9C8                            ; ===========================================================================
0000F9C8                            
0000F9C8                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000F9C8 6100 EF66                  		bsr.w	ObjectFall
0000F9CC 4A68 0012                  		tst.w	$12(a0)
0000F9D0 6B00                       		bmi.s	locret_E150
0000F9D2 6100 0000                  		bsr.w	ObjHitFloor
0000F9D6 4A41                       		tst.w	d1
0000F9D8 6A00                       		bpl.s	locret_E150
0000F9DA D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000F9DE 5528 0025                  		subq.b	#2,$25(a0)
0000F9E2 317C 0000 0012             		move.w	#0,$12(a0)
0000F9E8                            
0000F9E8                            locret_E150:
0000F9E8 4E75                       		rts	
0000F9EA                            
0000F9EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9EA                            
0000F9EA                            
0000F9EA                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000F9EA 4A28 0032                  		tst.b	$32(a0)
0000F9EE 6B00                       		bmi.s	locret_E188
0000F9F0 3038 D008                  		move.w	($FFFFD008).w,d0
0000F9F4 0440 0030                  		subi.w	#$30,d0
0000F9F8 9068 0008                  		sub.w	8(a0),d0
0000F9FC 6400                       		bcc.s	locret_E188
0000F9FE 117C 0000 001C             		move.b	#0,$1C(a0)
0000FA04 117C 000E 0020             		move.b	#$E,$20(a0)
0000FA0A 4268 0010                  		clr.w	$10(a0)
0000FA0E 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000FA14 117C 0002 0025             		move.b	#2,$25(a0)
0000FA1A 08E8 0007 0032             		bset	#7,$32(a0)
0000FA20                            
0000FA20                            locret_E188:
0000FA20 4E75                       		rts	
0000FA22                            ; End of function Obj43_Stop
0000FA22                            
0000FA22                            ; ===========================================================================
0000FA22                            Ani_obj43:
0000FA22                            	include "_anim\obj43.asm"
0000FA22                            ; ---------------------------------------------------------------------------
0000FA22                            ; Animation script - Roller enemy
0000FA22                            ; ---------------------------------------------------------------------------
0000FA22 0000                       		dc.w byte_E190-Ani_obj43
0000FA24 0000                       		dc.w byte_E196-Ani_obj43
0000FA26 0000                       		dc.w byte_E19C-Ani_obj43
0000FA28 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000FA2E 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000FA34 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000FA3A 00                         		even
0000FA3A 00                         		even
0000FA3A                            
0000FA3A                            ; ---------------------------------------------------------------------------
0000FA3A                            ; Sprite mappings - Roller enemy (SYZ)
0000FA3A                            ; ---------------------------------------------------------------------------
0000FA3A                            Map_obj43:
0000FA3A                            	include "_maps\obj43.asm"
0000FA3A                            ; ---------------------------------------------------------------------------
0000FA3A                            ; Sprite mappings - Roller enemy (SYZ)
0000FA3A                            ; ---------------------------------------------------------------------------
0000FA3A 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000FA3E 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000FA42 0000                       		dc.w byte_E1CE-Map_obj43
0000FA44 02                         byte_E1AC:	dc.b 2
0000FA45 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000FA4A F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000FA4F 02                         byte_E1B7:	dc.b 2
0000FA50 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000FA55 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000FA5A 01                         byte_E1C2:	dc.b 1
0000FA5B F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000FA60 01                         byte_E1C8:	dc.b 1
0000FA61 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000FA66 01                         byte_E1CE:	dc.b 1
0000FA67 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000FA6C                            		even
0000FA6C                            		even
0000FA6C                            
0000FA6C                            ; ===========================================================================
0000FA6C                            ; ---------------------------------------------------------------------------
0000FA6C                            ; Object 44 - walls (GHZ)
0000FA6C                            ; ---------------------------------------------------------------------------
0000FA6C                            
0000FA6C                            Obj44:					; XREF: Obj_Index
0000FA6C 7000                       		moveq	#0,d0
0000FA6E 1028 0024                  		move.b	$24(a0),d0
0000FA72 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000FA76 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000FA7A                            ; ===========================================================================
0000FA7A 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000FA7C 0000                       		dc.w Obj44_Solid-Obj44_Index
0000FA7E 0000                       		dc.w Obj44_Display-Obj44_Index
0000FA80                            ; ===========================================================================
0000FA80                            
0000FA80                            Obj44_Main:				; XREF: Obj44_Index
0000FA80 5428 0024                  		addq.b	#2,$24(a0)
0000FA84 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000FA8C 317C 434C 0002             		move.w	#$434C,2(a0)
0000FA92 0028 0004 0001             		ori.b	#4,1(a0)
0000FA98 117C 0008 0019             		move.b	#8,$19(a0)
0000FA9E 117C 0006 0018             		move.b	#6,$18(a0)
0000FAA4 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000FAAA 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000FAB0 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000FAB2 5428 0024                  		addq.b	#2,$24(a0)
0000FAB6 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000FAB8                            ; ===========================================================================
0000FAB8                            
0000FAB8                            Obj44_Solid:				; XREF: Obj44_Index
0000FAB8 323C 0013                  		move.w	#$13,d1
0000FABC 343C 0028                  		move.w	#$28,d2
0000FAC0 6100 A332                  		bsr.w	Obj44_SolidWall
0000FAC4                            
0000FAC4                            Obj44_Display:				; XREF: Obj44_Index
0000FAC4 6100 EEA4                  		bsr.w	DisplaySprite
0000FAC8 3028 0008                  		move.w	8(a0),d0
0000FACC 0240 FF80                  		andi.w	#$FF80,d0
0000FAD0 3238 F700                  		move.w	($FFFFF700).w,d1
0000FAD4 0441 0080                  		subi.w	#$80,d1
0000FAD8 0241 FF80                  		andi.w	#$FF80,d1
0000FADC 9041                       		sub.w	d1,d0
0000FADE 0C40 0280                  		cmpi.w	#$280,d0
0000FAE2 6300                       		bls.s	Obj44_NoDel
0000FAE4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000FAE8 6700 EED0                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000FAEC 3440                       		movea.w	d0,a2	; load address into a2
0000FAEE 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000FAF2 6000 EEC6                  		bra.w	DeleteObject	; and delete object
0000FAF6                            
0000FAF6                            Obj44_NoDel:
0000FAF6 4E75                       		rts	
0000FAF8                            ; ===========================================================================
0000FAF8                            ; ---------------------------------------------------------------------------
0000FAF8                            ; Sprite mappings - walls (GHZ)
0000FAF8                            ; ---------------------------------------------------------------------------
0000FAF8                            Map_obj44:
0000FAF8                            	include "_maps\obj44.asm"
0000FAF8                            ; ---------------------------------------------------------------------------
0000FAF8                            ; Sprite mappings - walls (GHZ)
0000FAF8                            ; ---------------------------------------------------------------------------
0000FAF8 0000                       		dc.w byte_E256-Map_obj44
0000FAFA 0000                       		dc.w byte_E26B-Map_obj44
0000FAFC 0000                       		dc.w byte_E280-Map_obj44
0000FAFE 04                         byte_E256:	dc.b 4
0000FAFF E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000FB04 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FB09 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000FB0E 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000FB13 04                         byte_E26B:	dc.b 4
0000FB14 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000FB19 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FB1E 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000FB23 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000FB28 04                         byte_E280:	dc.b 4
0000FB29 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000FB2E F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000FB33 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000FB38 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000FB3E 00                         		even
0000FB3E 00                         		even
0000FB3E                            
0000FB3E                            ; ===========================================================================
0000FB3E                            ; ---------------------------------------------------------------------------
0000FB3E                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000FB3E                            ; ---------------------------------------------------------------------------
0000FB3E                            
0000FB3E                            Obj13:					; XREF: Obj_Index
0000FB3E 7000                       		moveq	#0,d0
0000FB40 1028 0024                  		move.b	$24(a0),d0
0000FB44 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000FB48 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000FB4C 6000 0000                  		bra.w	Obj14_ChkDel
0000FB50                            ; ===========================================================================
0000FB50 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000FB52 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000FB54                            ; ---------------------------------------------------------------------------
0000FB54                            ;
0000FB54                            ; Lava ball production rates
0000FB54                            ;
0000FB54 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000FB5A                            ; ===========================================================================
0000FB5A                            
0000FB5A                            Obj13_Main:				; XREF: Obj13_Index
0000FB5A 5428 0024                  		addq.b	#2,$24(a0)
0000FB5E 1028 0028                  		move.b	$28(a0),d0
0000FB62 E848                       		lsr.w	#4,d0
0000FB64 0240 000F                  		andi.w	#$F,d0
0000FB68 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000FB6E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000FB74 0228 000F 0028             		andi.b	#$F,$28(a0)
0000FB7A                            
0000FB7A                            Obj13_MakeLava:				; XREF: Obj13_Index
0000FB7A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000FB7E 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000FB80 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000FB86 6100 F1A8                  		bsr.w	ChkObjOnScreen
0000FB8A 6600                       		bne.s	locret_E302
0000FB8C 6100 F532                  		bsr.w	SingleObjLoad
0000FB90 6600                       		bne.s	locret_E302
0000FB92 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000FB96 3368 0008 0008             		move.w	8(a0),8(a1)
0000FB9C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FBA2 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FBA8                            
0000FBA8                            locret_E302:
0000FBA8 4E75                       		rts	
0000FBAA                            ; ===========================================================================
0000FBAA                            ; ---------------------------------------------------------------------------
0000FBAA                            ; Object 14 - lava balls (MZ, SLZ)
0000FBAA                            ; ---------------------------------------------------------------------------
0000FBAA                            
0000FBAA                            Obj14:					; XREF: Obj_Index
0000FBAA 7000                       		moveq	#0,d0
0000FBAC 1028 0024                  		move.b	$24(a0),d0
0000FBB0 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000FBB4 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000FBB8 6000 EDB0                  		bra.w	DisplaySprite
0000FBBC                            ; ===========================================================================
0000FBBC 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000FBBE 0000                       		dc.w Obj14_Action-Obj14_Index
0000FBC0 0000                       		dc.w Obj14_Delete-Obj14_Index
0000FBC2                            
0000FBC2 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000FBCC 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000FBD4                            ; ===========================================================================
0000FBD4                            
0000FBD4                            Obj14_Main:				; XREF: Obj14_Index
0000FBD4 5428 0024                  		addq.b	#2,$24(a0)
0000FBD8 117C 0008 0016             		move.b	#8,$16(a0)
0000FBDE 117C 0008 0017             		move.b	#8,$17(a0)
0000FBE4 217C 0000 C664 0004        		move.l	#Map_obj14,4(a0)
0000FBEC 317C 0345 0002             		move.w	#$345,2(a0)
0000FBF2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000FBF8 6600                       		bne.s	loc_E35A
0000FBFA 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000FC00                            
0000FC00                            loc_E35A:
0000FC00 117C 0004 0001             		move.b	#4,1(a0)
0000FC06 117C 0003 0018             		move.b	#3,$18(a0)
0000FC0C 117C 008B 0020             		move.b	#$8B,$20(a0)
0000FC12 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FC18 4A28 0029                  		tst.b	$29(a0)
0000FC1C 6700                       		beq.s	Obj14_SetSpeed
0000FC1E 5428 0018                  		addq.b	#2,$18(a0)
0000FC22                            
0000FC22                            Obj14_SetSpeed:
0000FC22 7000                       		moveq	#0,d0
0000FC24 1028 0028                  		move.b	$28(a0),d0
0000FC28 D040                       		add.w	d0,d0
0000FC2A 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000FC30 117C 0008 0019             		move.b	#8,$19(a0)
0000FC36 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000FC3C 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000FC3E 117C 0010 0019             		move.b	#$10,$19(a0)
0000FC44 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000FC4A 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000FC50 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000FC56                            
0000FC56                            Obj14_PlaySnd:
0000FC56 303C 00AE                  		move.w	#$AE,d0
0000FC5A 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000FC60                            
0000FC60                            Obj14_Action:				; XREF: Obj14_Index
0000FC60 7000                       		moveq	#0,d0
0000FC62 1028 0028                  		move.b	$28(a0),d0
0000FC66 D040                       		add.w	d0,d0
0000FC68 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000FC6C 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000FC70 6100 ECDE                  		bsr.w	SpeedToPos
0000FC74 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000FC7A 6100 BD4E                  		bsr.w	AnimateSprite
0000FC7E                            
0000FC7E                            Obj14_ChkDel:				; XREF: Obj13
0000FC7E 3028 0008                  		move.w	8(a0),d0
0000FC82 0240 FF80                  		andi.w	#$FF80,d0
0000FC86 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC8A 0441 0080                  		subi.w	#$80,d1
0000FC8E 0241 FF80                  		andi.w	#$FF80,d1
0000FC92 9041                       		sub.w	d1,d0
0000FC94 0C40 0280                  		cmpi.w	#$280,d0
0000FC98 6300                       		bls.s	Obj14_NoDel
0000FC9A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000FC9E 6700 ED1A                  		beq.w	DeleteObject	; if it's zero, don't remember object
0000FCA2 3440                       		movea.w	d0,a2	; load address into a2
0000FCA4 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000FCA8 6000 ED10                  		bra.w	DeleteObject	; and delete object
0000FCAC                            
0000FCAC                            Obj14_NoDel:
0000FCAC 4E75                       		rts	
0000FCAE                            ; ===========================================================================
0000FCAE 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FCB2 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FCB6 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000FCBA 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000FCBE 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000FCC0                            ; ===========================================================================
0000FCC0                            ; lavaball types 00-03 fly up and fall back down
0000FCC0                            
0000FCC0                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000FCC0 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000FCC6 3028 0030                  		move.w	$30(a0),d0
0000FCCA B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000FCCE 6400                       		bcc.s	loc_E41E	; if not, branch
0000FCD0 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000FCD4                            
0000FCD4                            loc_E41E:
0000FCD4 08A8 0001 0022             		bclr	#1,$22(a0)
0000FCDA 4A68 0012                  		tst.w	$12(a0)
0000FCDE 6A00                       		bpl.s	locret_E430
0000FCE0 08E8 0001 0022             		bset	#1,$22(a0)
0000FCE6                            
0000FCE6                            locret_E430:
0000FCE6 4E75                       		rts	
0000FCE8                            ; ===========================================================================
0000FCE8                            ; lavaball type	04 flies up until it hits the ceiling
0000FCE8                            
0000FCE8                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000FCE8 08E8 0001 0022             		bset	#1,$22(a0)
0000FCEE 6100 0000                  		bsr.w	ObjHitCeiling
0000FCF2 4A41                       		tst.w	d1
0000FCF4 6A00                       		bpl.s	locret_E452
0000FCF6 117C 0008 0028             		move.b	#8,$28(a0)
0000FCFC 117C 0001 001C             		move.b	#1,$1C(a0)
0000FD02 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000FD08                            
0000FD08                            locret_E452:
0000FD08 4E75                       		rts	
0000FD0A                            ; ===========================================================================
0000FD0A                            ; lavaball type	05 falls down until it hits the	floor
0000FD0A                            
0000FD0A                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000FD0A 08A8 0001 0022             		bclr	#1,$22(a0)
0000FD10 6100 0000                  		bsr.w	ObjHitFloor
0000FD14 4A41                       		tst.w	d1
0000FD16 6A00                       		bpl.s	locret_E474
0000FD18 117C 0008 0028             		move.b	#8,$28(a0)
0000FD1E 117C 0001 001C             		move.b	#1,$1C(a0)
0000FD24 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000FD2A                            
0000FD2A                            locret_E474:
0000FD2A 4E75                       		rts	
0000FD2C                            ; ===========================================================================
0000FD2C                            ; lavaball types 06-07 move sideways
0000FD2C                            
0000FD2C                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000FD2C 08E8 0000 0022             		bset	#0,$22(a0)
0000FD32 76F8                       		moveq	#-8,d3
0000FD34 6100 0000                  		bsr.w	ObjHitWallLeft
0000FD38 4A41                       		tst.w	d1
0000FD3A 6A00                       		bpl.s	locret_E498
0000FD3C 117C 0008 0028             		move.b	#8,$28(a0)
0000FD42 117C 0003 001C             		move.b	#3,$1C(a0)
0000FD48 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000FD4E                            
0000FD4E                            locret_E498:
0000FD4E 4E75                       		rts	
0000FD50                            ; ===========================================================================
0000FD50                            
0000FD50                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000FD50 08A8 0000 0022             		bclr	#0,$22(a0)
0000FD56 7608                       		moveq	#8,d3
0000FD58 6100 0000                  		bsr.w	ObjHitWallRight
0000FD5C 4A41                       		tst.w	d1
0000FD5E 6A00                       		bpl.s	locret_E4BC
0000FD60 117C 0008 0028             		move.b	#8,$28(a0)
0000FD66 117C 0003 001C             		move.b	#3,$1C(a0)
0000FD6C 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000FD72                            
0000FD72                            locret_E4BC:
0000FD72 4E75                       		rts	
0000FD74                            ; ===========================================================================
0000FD74                            
0000FD74                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000FD74 4E75                       		rts	
0000FD76                            ; ===========================================================================
0000FD76                            
0000FD76                            Obj14_Delete:				; XREF: Obj14_Index
0000FD76 6000 EC42                  		bra.w	DeleteObject
0000FD7A                            ; ===========================================================================
0000FD7A                            Ani_obj14:
0000FD7A                            	include "_anim\obj14.asm"
0000FD7A                            ; ---------------------------------------------------------------------------
0000FD7A                            ; Animation script - lava balls
0000FD7A                            ; ---------------------------------------------------------------------------
0000FD7A 0000                       		dc.w byte_E4CC-Ani_obj14
0000FD7C 0000                       		dc.w byte_E4D2-Ani_obj14
0000FD7E 0000                       		dc.w byte_E4D6-Ani_obj14
0000FD80 0000                       		dc.w byte_E4DC-Ani_obj14
0000FD82 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000FD88 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000FD8C 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000FD92 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000FD96                            		even
0000FD96                            		even
0000FD96                            
0000FD96                            ; ===========================================================================
0000FD96                            ; ---------------------------------------------------------------------------
0000FD96                            ; Object 6D - flame thrower (SBZ)
0000FD96                            ; ---------------------------------------------------------------------------
0000FD96                            
0000FD96                            Obj6D:					; XREF: Obj_Index
0000FD96 7000                       		moveq	#0,d0
0000FD98 1028 0024                  		move.b	$24(a0),d0
0000FD9C 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000FDA0 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000FDA4                            ; ===========================================================================
0000FDA4 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000FDA6 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000FDA8                            ; ===========================================================================
0000FDA8                            
0000FDA8                            Obj6D_Main:				; XREF: Obj6D_Index
0000FDA8 5428 0024                  		addq.b	#2,$24(a0)
0000FDAC 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000FDB4 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000FDBA 0028 0004 0001             		ori.b	#4,1(a0)
0000FDC0 117C 0001 0018             		move.b	#1,$18(a0)
0000FDC6 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FDCC 117C 000C 0019             		move.b	#$C,$19(a0)
0000FDD2 1028 0028                  		move.b	$28(a0),d0
0000FDD6 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000FDDA D040                       		add.w	d0,d0		; multiply by 2
0000FDDC 3140 0030                  		move.w	d0,$30(a0)
0000FDE0 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000FDE4 1028 0028                  		move.b	$28(a0),d0
0000FDE8 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000FDEC EB48                       		lsl.w	#5,d0		; multiply by $20
0000FDEE 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000FDF2 117C 000A 0036             		move.b	#$A,$36(a0)
0000FDF8 0828 0001 0022             		btst	#1,$22(a0)
0000FDFE 6700                       		beq.s	Obj6D_Action
0000FE00 117C 0002 001C             		move.b	#2,$1C(a0)
0000FE06 117C 0015 0036             		move.b	#$15,$36(a0)
0000FE0C                            
0000FE0C                            Obj6D_Action:				; XREF: Obj6D_Index
0000FE0C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000FE10 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000FE12 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000FE18 0868 0000 001C             		bchg	#0,$1C(a0)
0000FE1E 6700                       		beq.s	loc_E57A
0000FE20 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000FE26 303C 00B3                  		move.w	#$B3,d0
0000FE2A 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play flame sound
0000FE30                            
0000FE30                            loc_E57A:
0000FE30 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000FE36 6100 BB92                  		bsr.w	AnimateSprite
0000FE3A 117C 0000 0020             		move.b	#0,$20(a0)
0000FE40 1028 0036                  		move.b	$36(a0),d0
0000FE44 B028 001A                  		cmp.b	$1A(a0),d0
0000FE48 6600                       		bne.s	Obj6D_ChkDel
0000FE4A 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000FE50                            
0000FE50                            Obj6D_ChkDel:
0000FE50 3028 0008                  		move.w	8(a0),d0
0000FE54 0240 FF80                  		andi.w	#$FF80,d0
0000FE58 3238 F700                  		move.w	($FFFFF700).w,d1
0000FE5C 0441 0080                  		subi.w	#$80,d1
0000FE60 0241 FF80                  		andi.w	#$FF80,d1
0000FE64 9041                       		sub.w	d1,d0
0000FE66 0C40 0280                  		cmpi.w	#$280,d0
0000FE6A 6300 EAFE                  		bls.w	DisplaySprite
0000FE6E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000FE72 6700 EB46                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
0000FE76 3440                       		movea.w	d0,a2	; load address into a2
0000FE78 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
0000FE7C 6000 EB3C                  		bra.w	DeleteObject
0000FE80                            ; ===========================================================================
0000FE80                            Ani_obj6D:
0000FE80                            	include "_anim\obj6D.asm"
0000FE80                            ; ---------------------------------------------------------------------------
0000FE80                            ; Animation script - flamethrower (SBZ)
0000FE80                            ; ---------------------------------------------------------------------------
0000FE80 0000                       		dc.w byte_E5C4-Ani_obj6D
0000FE82 0000                       		dc.w byte_E5D2-Ani_obj6D
0000FE84 0000                       		dc.w byte_E5DC-Ani_obj6D
0000FE86 0000                       		dc.w byte_E5EA-Ani_obj6D
0000FE88 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000FE96 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000FEA0 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000FEAE 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000FEB8                            		even
0000FEB8                            		even
0000FEB8                            
0000FEB8                            ; ---------------------------------------------------------------------------
0000FEB8                            ; Sprite mappings - flame thrower (SBZ)
0000FEB8                            ; ---------------------------------------------------------------------------
0000FEB8                            Map_obj6D:
0000FEB8                            	include "_maps\obj6D.asm"
0000FEB8                            ; ---------------------------------------------------------------------------
0000FEB8                            ; Sprite mappings - flame thrower (SBZ)
0000FEB8                            ; ---------------------------------------------------------------------------
0000FEB8 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000FEBC 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000FEC0 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000FEC4 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000FEC8 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000FECC 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000FED0 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000FED4 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000FED8 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000FEDC 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000FEE0 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000FEE4 01                         byte_E620:	dc.b 1
0000FEE5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FEEA 02                         byte_E626:	dc.b 2
0000FEEB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FEF0 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FEF5 02                         byte_E631:	dc.b 2
0000FEF6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FEFB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF00 03                         byte_E63C:	dc.b 3
0000FF01 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FF06 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FF0B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF10 03                         byte_E64C:	dc.b 3
0000FF11 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FF16 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FF1B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF20 04                         byte_E65C:	dc.b 4
0000FF21 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FF26 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FF2B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FF30 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF35 04                         byte_E671:	dc.b 4
0000FF36 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000FF3B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FF40 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FF45 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF4A 05                         byte_E686:	dc.b 5
0000FF4B F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000FF50 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FF55 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FF5A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FF5F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF64 05                         byte_E6A0:	dc.b 5
0000FF65 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000FF6A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000FF6F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FF74 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FF79 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF7E 06                         byte_E6BA:	dc.b 6
0000FF7F E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000FF84 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000FF89 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FF8E 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000FF93 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FF98 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF9D 06                         byte_E6D9:	dc.b 6
0000FF9E E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000FFA3 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000FFA8 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000FFAD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FFB2 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FFB7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FFBC 01                         byte_E6F8:	dc.b 1
0000FFBD 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFC2 02                         byte_E6FE:	dc.b 2
0000FFC3 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFC8 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FFCD 02                         byte_E709:	dc.b 2
0000FFCE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFD3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FFD8 03                         byte_E714:	dc.b 3
0000FFD9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FFDE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFE3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FFE8 03                         byte_E724:	dc.b 3
0000FFE9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FFEE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFF3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FFF8 04                         byte_E734:	dc.b 4
0000FFF9 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FFFE 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010003 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010008 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001000D 04                         byte_E749:	dc.b 4
0001000E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010013 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010018 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001001D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010022 05                         byte_E75E:	dc.b 5
00010023 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010028 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001002D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010032 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010037 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001003C 05                         byte_E778:	dc.b 5
0001003D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010042 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010047 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001004C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010051 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010056 06                         byte_E792:	dc.b 6
00010057 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0001005C F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010061 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010066 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0001006B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010070 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010075 06                         byte_E7B1:	dc.b 6
00010076 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0001007B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010080 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010085 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001008A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001008F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010094                            		even
00010094                            		even
00010094                            
00010094                            ; ===========================================================================
00010094                            ; ---------------------------------------------------------------------------
00010094                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
00010094                            ; ---------------------------------------------------------------------------
00010094                            
00010094                            Obj46:					; XREF: Obj_Index
00010094 7000                       		moveq	#0,d0
00010096 1028 0024                  		move.b	$24(a0),d0
0001009A 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0001009E 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
000100A2                            ; ===========================================================================
000100A2 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
000100A4 0000                       		dc.w Obj46_Action-Obj46_Index
000100A6                            ; ===========================================================================
000100A6                            
000100A6                            Obj46_Main:				; XREF: Obj46_Index
000100A6 5428 0024                  		addq.b	#2,$24(a0)
000100AA 117C 000F 0016             		move.b	#$F,$16(a0)
000100B0 117C 000F 0017             		move.b	#$F,$17(a0)
000100B6 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
000100BE 317C 4000 0002             		move.w	#$4000,2(a0)
000100C4 117C 0004 0001             		move.b	#4,1(a0)
000100CA 117C 0003 0018             		move.b	#3,$18(a0)
000100D0 117C 0010 0019             		move.b	#$10,$19(a0)
000100D6 3168 000C 0030             		move.w	$C(a0),$30(a0)
000100DC 317C 05C0 0032             		move.w	#$5C0,$32(a0)
000100E2                            
000100E2                            Obj46_Action:				; XREF: Obj46_Index
000100E2 4A28 0001                  		tst.b	1(a0)
000100E6 6A00                       		bpl.s	Obj46_ChkDel
000100E8 7000                       		moveq	#0,d0
000100EA 1028 0028                  		move.b	$28(a0),d0	; get object type
000100EE 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
000100F2 D040                       		add.w	d0,d0
000100F4 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
000100F8 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
000100FC 323C 001B                  		move.w	#$1B,d1
00010100 343C 0010                  		move.w	#$10,d2
00010104 363C 0011                  		move.w	#$11,d3
00010108 3828 0008                  		move.w	8(a0),d4
0001010C 6100 0000                  		bsr.w	SolidObject
00010110                            
00010110                            Obj46_ChkDel:
00010110 6100 E858                  		bsr.w	DisplaySprite
00010114 3028 0008                  		move.w	8(a0),d0
00010118 0240 FF80                  		andi.w	#$FF80,d0
0001011C 3238 F700                  		move.w	($FFFFF700).w,d1
00010120 0441 0080                  		subi.w	#$80,d1
00010124 0241 FF80                  		andi.w	#$FF80,d1
00010128 9041                       		sub.w	d1,d0
0001012A 0C40 0280                  		cmpi.w	#$280,d0
0001012E 6300                       		bls.s	Obj46_NoDel
00010130 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010134 6700 E884                  		beq.w	DeleteObject		; if it's zero, don't remember object
00010138 3440                       		movea.w	d0,a2	; load address into a2
0001013A 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001013E 6000 E87A                  		bra.w	DeleteObject	; and delete object
00010142                            
00010142                            Obj46_NoDel:
00010142 4E75                       		rts	
00010144                            ; ===========================================================================
00010144 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
00010146 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
00010148 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0001014A 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0001014C 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0001014E                            ; ===========================================================================
0001014E                            
0001014E                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0001014E 4E75                       		rts	
00010150                            ; ===========================================================================
00010150                            
00010150                            Obj46_Type02:				; XREF: Obj46_TypeIndex
00010150 3038 D008                  		move.w	($FFFFD008).w,d0
00010154 9068 0008                  		sub.w	8(a0),d0
00010158 6400                       		bcc.s	loc_E888
0001015A 4440                       		neg.w	d0
0001015C                            
0001015C                            loc_E888:
0001015C 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010160 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
00010162 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
00010168                            
00010168                            Obj46_Type01:				; XREF: Obj46_TypeIndex
00010168 7000                       		moveq	#0,d0
0001016A 1038 FE74                  		move.b	($FFFFFE74).w,d0
0001016E 0828 0003 0028             		btst	#3,$28(a0)
00010174 6700                       		beq.s	loc_E8A8
00010176 4440                       		neg.w	d0
00010178 0640 0010                  		addi.w	#$10,d0
0001017C                            
0001017C                            loc_E8A8:
0001017C 3228 0030                  		move.w	$30(a0),d1
00010180 9240                       		sub.w	d0,d1
00010182 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
00010186 4E75                       		rts	
00010188                            ; ===========================================================================
00010188                            
00010188                            Obj46_Type03:				; XREF: Obj46_TypeIndex
00010188 6100 E7C6                  		bsr.w	SpeedToPos
0001018C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
00010192 6100 0000                  		bsr.w	ObjHitFloor
00010196 4A41                       		tst.w	d1		; has the block	hit the	floor?
00010198 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0001019C D368 000C                  		add.w	d1,$C(a0)
000101A0 4268 0012                  		clr.w	$12(a0)		; stop the block falling
000101A4 3168 000C 0030             		move.w	$C(a0),$30(a0)
000101AA 117C 0004 0028             		move.b	#4,$28(a0)
000101B0 3011                       		move.w	(a1),d0
000101B2 0240 03FF                  		andi.w	#$3FF,d0
000101B6 0C40 02E8                  		cmpi.w	#$2E8,d0
000101BA 6400                       		bcc.s	locret_E8EE
000101BC 117C 0000 0028             		move.b	#0,$28(a0)
000101C2                            
000101C2                            locret_E8EE:
000101C2 4E75                       		rts	
000101C4                            ; ===========================================================================
000101C4                            
000101C4                            Obj46_Type04:				; XREF: Obj46_TypeIndex
000101C4 7000                       		moveq	#0,d0
000101C6 1038 FE70                  		move.b	($FFFFFE70).w,d0
000101CA E648                       		lsr.w	#3,d0
000101CC 3228 0030                  		move.w	$30(a0),d1
000101D0 9240                       		sub.w	d0,d1
000101D2 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
000101D6 4E75                       		rts	
000101D8                            ; ===========================================================================
000101D8                            ; ---------------------------------------------------------------------------
000101D8                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
000101D8                            ; ---------------------------------------------------------------------------
000101D8                            Map_obj46:
000101D8                            	include "_maps\obj46.asm"
000101D8                            ; ---------------------------------------------------------------------------
000101D8                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
000101D8                            ; ---------------------------------------------------------------------------
000101D8 0000                       		dc.w byte_E906-Map_obj46
000101DA 01                         byte_E906:	dc.b 1
000101DB F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
000101E0                            		even
000101E0                            		even
000101E0                            
000101E0                            ; ===========================================================================
000101E0                            ; ---------------------------------------------------------------------------
000101E0                            ; Object 12 - lamp (SYZ)
000101E0                            ; ---------------------------------------------------------------------------
000101E0                            
000101E0                            Obj12:					; XREF: Obj_Index
000101E0 7000                       		moveq	#0,d0
000101E2 1028 0024                  		move.b	$24(a0),d0
000101E6 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
000101EA 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
000101EE                            ; ===========================================================================
000101EE 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
000101F0 0000                       		dc.w Obj12_Animate-Obj12_Index
000101F2                            ; ===========================================================================
000101F2                            
000101F2                            Obj12_Main:				; XREF: Obj12_Index
000101F2 5428 0024                  		addq.b	#2,$24(a0)
000101F6 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
000101FE 317C 0000 0002             		move.w	#0,2(a0)
00010204 117C 0004 0001             		move.b	#4,1(a0)
0001020A 117C 0010 0019             		move.b	#$10,$19(a0)
00010210 117C 0006 0018             		move.b	#6,$18(a0)
00010216                            
00010216                            Obj12_Animate:				; XREF: Obj12_Index
00010216 5328 001E                  		subq.b	#1,$1E(a0)
0001021A 6A00                       		bpl.s	Obj12_ChkDel
0001021C 117C 0007 001E             		move.b	#7,$1E(a0)
00010222 5228 001A                  		addq.b	#1,$1A(a0)
00010226 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0001022C 6500                       		bcs.s	Obj12_ChkDel
0001022E 117C 0000 001A             		move.b	#0,$1A(a0)
00010234                            
00010234                            Obj12_ChkDel:
00010234 3028 0008                  		move.w	8(a0),d0
00010238 0240 FF80                  		andi.w	#$FF80,d0
0001023C 3238 F700                  		move.w	($FFFFF700).w,d1
00010240 0441 0080                  		subi.w	#$80,d1
00010244 0241 FF80                  		andi.w	#$FF80,d1
00010248 9041                       		sub.w	d1,d0
0001024A 0C40 0280                  		cmpi.w	#$280,d0
0001024E 6300 E71A                  		bls.w	DisplaySprite
00010252 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010256 6700 E762                  		beq.w	DeleteObject		; if it's zero, don't remember object
0001025A 3440                       		movea.w	d0,a2	; load address into a2
0001025C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010260 6000 E758                  		bra.w	DeleteObject	; and delete object
00010264                            ; ===========================================================================
00010264                            ; ---------------------------------------------------------------------------
00010264                            ; Sprite mappings - lamp (SYZ)
00010264                            ; ---------------------------------------------------------------------------
00010264                            Map_obj12:
00010264                            	include "_maps\obj12.asm"
00010264                            ; ---------------------------------------------------------------------------
00010264                            ; Sprite mappings - lamp (SYZ)
00010264                            ; ---------------------------------------------------------------------------
00010264 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
00010268 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0001026C 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
00010270 02                         byte_E98E:	dc.b 2
00010271 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
00010276 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0001027B 02                         byte_E999:	dc.b 2
0001027C F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
00010281 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
00010286 02                         byte_E9A4:	dc.b 2
00010287 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0001028C 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
00010291 02                         byte_E9AF:	dc.b 2
00010292 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
00010297 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0001029C 02                         byte_E9BA:	dc.b 2
0001029D F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
000102A2 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
000102A7 02                         byte_E9C5:	dc.b 2
000102A8 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
000102AD 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
000102B2                            		even
000102B2                            		even
000102B2                            
000102B2                            ; ===========================================================================
000102B2                            ; ---------------------------------------------------------------------------
000102B2                            ; Object 47 - pinball bumper (SYZ)
000102B2                            ; ---------------------------------------------------------------------------
000102B2                            
000102B2                            Obj47:					; XREF: Obj_Index
000102B2 7000                       		moveq	#0,d0
000102B4 1028 0024                  		move.b	$24(a0),d0
000102B8 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
000102BC 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
000102C0                            ; ===========================================================================
000102C0 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
000102C2 0000                       		dc.w Obj47_Hit-Obj47_Index
000102C4                            ; ===========================================================================
000102C4                            
000102C4                            Obj47_Main:				; XREF: Obj47_Index
000102C4 5428 0024                  		addq.b	#2,$24(a0)
000102C8 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
000102D0 317C 0380 0002             		move.w	#$380,2(a0)
000102D6 117C 0004 0001             		move.b	#4,1(a0)
000102DC 117C 0010 0019             		move.b	#$10,$19(a0)
000102E2 117C 0001 0018             		move.b	#1,$18(a0)
000102E8 117C 00D7 0020             		move.b	#$D7,$20(a0)
000102EE                            
000102EE                            Obj47_Hit:				; XREF: Obj47_Index
000102EE 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
000102F2 6700 0000                  		beq.w	Obj47_Display	; if not, branch
000102F6 11FC 0008 F5CE             		move.b	#face_confused,(SonimeSST+sonime_face).w
000102FC 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
00010302 4228 0021                  		clr.b	$21(a0)
00010306 43F8 D000                  		lea	($FFFFD000).w,a1
0001030A 3228 0008                  		move.w	8(a0),d1
0001030E 3428 000C                  		move.w	$C(a0),d2
00010312 9269 0008                  		sub.w	8(a1),d1
00010316 9469 000C                  		sub.w	$C(a1),d2
0001031A 4EB9 0000 2CBE             		jsr	(CalcAngle).l
00010320 4EB9 0000 29F6             		jsr	(CalcSine).l
00010326 C3FC F900                  		muls.w	#-$700,d1
0001032A E081                       		asr.l	#8,d1
0001032C 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
00010330 C1FC F900                  		muls.w	#-$700,d0
00010334 E080                       		asr.l	#8,d0
00010336 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0001033A 08E9 0001 0022             		bset	#1,$22(a1)
00010340 08A9 0004 0022             		bclr	#4,$22(a1)
00010346 08A9 0005 0022             		bclr	#5,$22(a1)
0001034C 4229 003C                  		clr.b	$3C(a1)
00010350 117C 0001 001C             		move.b	#1,$1C(a0)
00010356 303C 00B4                  		move.w	#$B4,d0
0001035A 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play bumper sound
00010360 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010364 6700                       		beq.s	Obj47_Score		; if it's zero, don't remember object
00010366 3440                       		movea.w	d0,a2	; load address into a2
00010368 0C12 008A                  		cmpi.b	#$8A,(a2)	; has bumper been hit $8A times?
0001036C 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0001036E 5212                       		addq.b	#1,(a2)
00010370                            
00010370                            Obj47_Score:
00010370 7001                       		moveq	#1,d0
00010372 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
00010378 6100 ED46                  		bsr.w	SingleObjLoad
0001037C 6600                       		bne.s	Obj47_Display
0001037E 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010382 3368 0008 0008             		move.w	8(a0),8(a1)
00010388 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001038E 137C 0004 001A             		move.b	#4,$1A(a1)
00010394                            
00010394                            Obj47_Display:
00010394 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0001039A 6100 B62E                  		bsr.w	AnimateSprite
0001039E 3028 0008                  		move.w	8(a0),d0
000103A2 0240 FF80                  		andi.w	#$FF80,d0
000103A6 3238 F700                  		move.w	($FFFFF700).w,d1
000103AA 0441 0080                  		subi.w	#$80,d1
000103AE 0241 FF80                  		andi.w	#$FF80,d1
000103B2 9041                       		sub.w	d1,d0
000103B4 0C40 0280                  		cmpi.w	#$280,d0
000103B8 6200                       		bhi.s	Obj47_ChkHit
000103BA 6000 E5AE                  		bra.w	DisplaySprite
000103BE                            ; ===========================================================================
000103BE                            
000103BE                            Obj47_ChkHit:				; XREF: Obj47_Display
000103BE 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000103C2 6700                       		beq.s	Obj47_Delete		; if it's zero, don't remember object
000103C4 3440                       		movea.w	d0,a2	; load address into a2
000103C6 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000103CA                            
000103CA                            Obj47_Delete:
000103CA 6000 E5EE                  		bra.w	DeleteObject
000103CE                            ; ===========================================================================
000103CE                            Ani_obj47:
000103CE                            	include "_anim\obj47.asm"
000103CE                            ; ---------------------------------------------------------------------------
000103CE                            ; Animation script - flamethrower (SBZ)
000103CE                            ; ---------------------------------------------------------------------------
000103CE 0000                       		dc.w byte_EAF4-Ani_obj47
000103D0 0000                       		dc.w byte_EAF8-Ani_obj47
000103D2 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
000103D6 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
000103DE                            		even
000103DE                            		even
000103DE                            
000103DE                            ; ---------------------------------------------------------------------------
000103DE                            ; Sprite mappings - pinball bumper (SYZ)
000103DE                            ; ---------------------------------------------------------------------------
000103DE                            Map_obj47:
000103DE                            	include "_maps\obj47.asm"
000103DE                            ; ---------------------------------------------------------------------------
000103DE                            ; Sprite mappings - pinball bumper (SYZ)
000103DE                            ; ---------------------------------------------------------------------------
000103DE 0000                       		dc.w byte_EB06-Map_obj47
000103E0 0000                       		dc.w byte_EB11-Map_obj47
000103E2 0000                       		dc.w byte_EB1C-Map_obj47
000103E4 02                         byte_EB06:	dc.b 2
000103E5 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
000103EA F007 0800 00               		dc.b $F0, 7, 8,	0, 0
000103EF 02                         byte_EB11:	dc.b 2
000103F0 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
000103F5 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
000103FA 02                         byte_EB1C:	dc.b 2
000103FB F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010400 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010406 00                         		even
00010406 00                         		even
00010406                            
00010406                            ; ===========================================================================
00010406                            ; ---------------------------------------------------------------------------
00010406                            ; Object 0D - signpost at the end of a level
00010406                            ; ---------------------------------------------------------------------------
00010406                            
00010406                            Obj0D:					; XREF: Obj_Index
00010406 7000                       		moveq	#0,d0
00010408 1028 0024                  		move.b	$24(a0),d0
0001040C 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
00010410 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
00010414 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0001041A 6100 B5AE                  		bsr.w	AnimateSprite
0001041E 6100 E54A                  		bsr.w	DisplaySprite
00010422 3028 0008                  		move.w	8(a0),d0
00010426 0240 FF80                  		andi.w	#$FF80,d0
0001042A 3238 F700                  		move.w	($FFFFF700).w,d1
0001042E 0441 0080                  		subi.w	#$80,d1
00010432 0241 FF80                  		andi.w	#$FF80,d1
00010436 9041                       		sub.w	d1,d0
00010438 0C40 0280                  		cmpi.w	#$280,d0
0001043C 6300                       		bls.s	Obj0D_NoDel
0001043E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010442 6700 E576                  		beq.w	DeleteObject		; if it's zero, don't remember object
00010446 3440                       		movea.w	d0,a2	; load address into a2
00010448 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001044C 6000 E56C                  		bra.w	DeleteObject	; and delete object
00010450                            
00010450                            Obj0D_NoDel:
00010450 4E75                       		rts	
00010452                            ; ===========================================================================
00010452 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
00010454 0000                       		dc.w Obj0D_Touch-Obj0D_Index
00010456 0000                       		dc.w Obj0D_Spin-Obj0D_Index
00010458 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0001045A 0000                       		dc.w locret_ED1A-Obj0D_Index
0001045C                            ; ===========================================================================
0001045C                            
0001045C                            Obj0D_Main:				; XREF: Obj0D_Index
0001045C 5428 0024                  		addq.b	#2,$24(a0)
00010460 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
00010468 317C 0680 0002             		move.w	#$680,2(a0)
0001046E 117C 0004 0001             		move.b	#4,1(a0)
00010474 117C 0018 0019             		move.b	#$18,$19(a0)
0001047A 117C 0004 0018             		move.b	#4,$18(a0)
00010480                            
00010480                            Obj0D_Touch:				; XREF: Obj0D_Index
00010480 3038 D008                  		move.w	($FFFFD008).w,d0
00010484 9068 0008                  		sub.w	8(a0),d0
00010488 6500                       		bcs.s	locret_EBBA
0001048A 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0001048E 6400                       		bcc.s	locret_EBBA	; if not, branch
00010490 303C 00CF                  		move.w	#$CF,d0
00010494 4EB9 0000 121A             		jsr	(PlaySound).l	; play signpost	sound
0001049A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001049E 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
000104A4 5428 0024                  		addq.b	#2,$24(a0)
000104A8                            
000104A8                            locret_EBBA:
000104A8 4E75                       		rts	
000104AA                            ; ===========================================================================
000104AA                            
000104AA                            Obj0D_Spin:				; XREF: Obj0D_Index
000104AA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
000104AE 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
000104B0 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
000104B6 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
000104BA 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
000104C0 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
000104C2 5428 0024                  		addq.b	#2,$24(a0)
000104C6                            
000104C6                            Obj0D_Sparkle:
000104C6 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
000104CA 6A00                       		bpl.s	locret_EC42	; if time remains, branch
000104CC 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
000104D2 7000                       		moveq	#0,d0
000104D4 1028 0034                  		move.b	$34(a0),d0
000104D8 5428 0034                  		addq.b	#2,$34(a0)
000104DC 0228 000E 0034             		andi.b	#$E,$34(a0)
000104E2 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
000104E6 6100 EBD8                  		bsr.w	SingleObjLoad
000104EA 6600                       		bne.s	locret_EC42
000104EC 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
000104F0 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
000104F6 101A                       		move.b	(a2)+,d0
000104F8 4880                       		ext.w	d0
000104FA D068 0008                  		add.w	8(a0),d0
000104FE 3340 0008                  		move.w	d0,8(a1)
00010502 101A                       		move.b	(a2)+,d0
00010504 4880                       		ext.w	d0
00010506 D068 000C                  		add.w	$C(a0),d0
0001050A 3340 000C                  		move.w	d0,$C(a1)
0001050E 237C 0000 B274 0004        		move.l	#Map_obj25,4(a1)
00010516 337C 26BA 0002             		move.w	#($2000+ringart),2(a1)
0001051C 137C 0004 0001             		move.b	#4,1(a1)
00010522 137C 0002 0018             		move.b	#2,$18(a1)
00010528 137C 0008 0019             		move.b	#8,$19(a1)
0001052E                            
0001052E                            locret_EC42:
0001052E 4E75                       		rts	
00010530                            ; ===========================================================================
00010530 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010532 0808                       		dc.b	8,   8
00010534 F000                       		dc.b -$10,   0
00010536 18F8                       		dc.b  $18,  -8
00010538 00F8                       		dc.b	0,  -8
0001053A 1000                       		dc.b  $10,   0
0001053C E808                       		dc.b -$18,   8
0001053E 1810                       		dc.b  $18, $10
00010540                            ; ===========================================================================
00010540                            
00010540                            Obj0D_SonicRun:				; XREF: Obj0D_Index
00010540 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010544 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00010548 0838 0001 D022             		btst	#1,($FFFFD022).w
0001054E 6600                       		bne.s	loc_EC70
00010550 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00010556 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001055C                            
0001055C                            loc_EC70:
0001055C 4A38 D000                  		tst.b	($FFFFD000).w
00010560 6700                       		beq.s	loc_EC86
00010562 3038 D008                  		move.w	($FFFFD008).w,d0
00010566 3238 F72A                  		move.w	($FFFFF72A).w,d1
0001056A 0641 0128                  		addi.w	#$128,d1
0001056E B041                       		cmp.w	d1,d0
00010570 6500                       		bcs.s	locret_ECEE
00010572                            
00010572                            loc_EC86:
00010572 5428 0024                  		addq.b	#2,$24(a0)
00010576                            
00010576                            ; ---------------------------------------------------------------------------
00010576                            ; Subroutine to	set up bonuses at the end of an	act
00010576                            ; ---------------------------------------------------------------------------
00010576                            
00010576                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010576                            
00010576                            
00010576                            GotThroughAct:				; XREF: Obj3E_EndAct
00010576 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0001057A 6600                       		bne.s	locret_ECEE
0001057C 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
00010582 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
00010586 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001058A 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
00010590 2F08                               move.l  a0,-(sp)            ; save object address to stack
00010592 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
0001059C 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
000105A2 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
000105A8 4EB8 143A                          jsr LoadUncArt          ; load uncompressed art
000105AC 205F                               move.l  (sp)+,a0            ; get object address from stack
000105AE 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
000105B4 7000                       		moveq	#0,d0
000105B6 1038 FE23                  		move.b	($FFFFFE23).w,d0
000105BA C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
000105BE 7200                       		moveq	#0,d1
000105C0 1238 FE24                  		move.b	($FFFFFE24).w,d1
000105C4 D041                       		add.w	d1,d0		; add up your time
000105C6 80FC 000F                  		divu.w	#15,d0		; divide by 15
000105CA 7214                       		moveq	#$14,d1
000105CC B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
000105CE 6500                       		bcs.s	loc_ECD0	; if not, branch
000105D0 3001                       		move.w	d1,d0		; use minimum time bonus (0)
000105D2                            
000105D2                            loc_ECD0:
000105D2 D040                       		add.w	d0,d0
000105D4 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
000105DA 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
000105DE C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
000105E2 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
000105E6 303C 008E                  		move.w	#$8E,d0
000105EA 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
000105F0                            
000105F0                            locret_ECEE:
000105F0 4E75                       		rts	
000105F2                            ; End of function GotThroughAct
000105F2                            
000105F2                            ; ===========================================================================
000105F2 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010606 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0001061C                            ; ===========================================================================
0001061C                            
0001061C                            locret_ED1A:				; XREF: Obj0D_Index
0001061C 4E75                       		rts	
0001061E                            ; ===========================================================================
0001061E                            Ani_obj0D:
0001061E                            	include "_anim\obj0D.asm"
0001061E                            ; ---------------------------------------------------------------------------
0001061E                            ; Animation script - signpost
0001061E                            ; ---------------------------------------------------------------------------
0001061E 0000                       		dc.w byte_ED24-Ani_obj0D
00010620 0000                       		dc.w byte_ED28-Ani_obj0D
00010622 0000                       		dc.w byte_ED2E-Ani_obj0D
00010624 0000                       		dc.w byte_ED34-Ani_obj0D
00010626 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0001062A 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
00010630 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
00010636 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0001063A 00                         		even
0001063A 00                         		even
0001063A                            
0001063A                            ; ---------------------------------------------------------------------------
0001063A                            ; Sprite mappings - signpost
0001063A                            ; ---------------------------------------------------------------------------
0001063A                            Map_obj0D:
0001063A                            	include "_maps\obj0D.asm"
0001063A                            ; ---------------------------------------------------------------------------
0001063A                            ; Sprite mappings - signpost
0001063A                            ; ---------------------------------------------------------------------------
0001063A 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0001063E 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
00010642 0000                       		dc.w byte_ED73-Map_obj0D
00010644 03                         byte_ED42:	dc.b 3
00010645 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0001064A F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0001064F 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00010654 02                         byte_ED52:	dc.b 2
00010655 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0001065A 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0001065F 02                         byte_ED5D:	dc.b 2
00010660 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
00010665 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0001066A 02                         byte_ED68:	dc.b 2
0001066B F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
00010670 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
00010675 03                         byte_ED73:	dc.b 3
00010676 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0001067B F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
00010680 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00010686 00                         		even
00010686 00                         		even
00010686                            
00010686                            ; ===========================================================================
00010686                            ; ---------------------------------------------------------------------------
00010686                            ; Object 4C - lava geyser / lavafall producer (MZ)
00010686                            ; ---------------------------------------------------------------------------
00010686                            
00010686                            Obj4C:					; XREF: Obj_Index
00010686 7000                       		moveq	#0,d0
00010688 1028 0024                  		move.b	$24(a0),d0
0001068C 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
00010690 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
00010694 6000 0000                  		bra.w	Obj4D_ChkDel
00010698                            ; ===========================================================================
00010698 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0001069A 0000                       		dc.w loc_EDCC-Obj4C_Index
0001069C 0000                       		dc.w loc_EE3E-Obj4C_Index
0001069E 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
000106A0 0000                       		dc.w Obj4C_Display-Obj4C_Index
000106A2 0000                       		dc.w Obj4C_Delete-Obj4C_Index
000106A4                            ; ===========================================================================
000106A4                            
000106A4                            Obj4C_Main:				; XREF: Obj4C_Index
000106A4 5428 0024                  		addq.b	#2,$24(a0)
000106A8 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
000106B0 317C E3A8 0002             		move.w	#$E3A8,2(a0)
000106B6 117C 0004 0001             		move.b	#4,1(a0)
000106BC 117C 0001 0018             		move.b	#1,$18(a0)
000106C2 117C 0038 0019             		move.b	#$38,$19(a0)
000106C8 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
000106CE                            
000106CE                            loc_EDCC:				; XREF: Obj4C_Index
000106CE 5368 0032                  		subq.w	#1,$32(a0)
000106D2 6A00                       		bpl.s	locret_EDF0
000106D4 3168 0034 0032             		move.w	$34(a0),$32(a0)
000106DA 3038 D00C                  		move.w	($FFFFD00C).w,d0
000106DE 3228 000C                  		move.w	$C(a0),d1
000106E2 B041                       		cmp.w	d1,d0
000106E4 6400                       		bcc.s	locret_EDF0
000106E6 0441 0170                  		subi.w	#$170,d1
000106EA B041                       		cmp.w	d1,d0
000106EC 6500                       		bcs.s	locret_EDF0
000106EE 5428 0024                  		addq.b	#2,$24(a0)
000106F2                            
000106F2                            locret_EDF0:
000106F2 4E75                       		rts	
000106F4                            ; ===========================================================================
000106F4                            
000106F4                            Obj4C_MakeLava:				; XREF: Obj4C_Index
000106F4 5428 0024                  		addq.b	#2,$24(a0)
000106F8 6100 E9DC                  		bsr.w	SingleObjLoad2
000106FC 6600                       		bne.s	loc_EE18
000106FE 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
00010702 3368 0008 0008             		move.w	8(a0),8(a1)
00010708 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001070E 1368 0028 0028             		move.b	$28(a0),$28(a1)
00010714 2348 003C                  		move.l	a0,$3C(a1)
00010718                            
00010718                            loc_EE18:
00010718 117C 0001 001C             		move.b	#1,$1C(a0)
0001071E 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
00010722 6700                       		beq.s	Obj4C_Type00	; if yes, branch
00010724 117C 0004 001C             		move.b	#4,$1C(a0)
0001072A 6000                       		bra.s	Obj4C_Display
0001072C                            ; ===========================================================================
0001072C                            
0001072C                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0001072C 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
00010730 08E9 0001 0022             		bset	#1,$22(a1)
00010736 337C FA80 0012             		move.w	#-$580,$12(a1)
0001073C 6000                       		bra.s	Obj4C_Display
0001073E                            ; ===========================================================================
0001073E                            
0001073E                            loc_EE3E:				; XREF: Obj4C_Index
0001073E 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
00010742 6700                       		beq.s	Obj4C_Display	; if yes, branch
00010744 5428 0024                  		addq.b	#2,$24(a0)
00010748 4E75                       		rts	
0001074A                            ; ===========================================================================
0001074A                            
0001074A                            Obj4C_Display:				; XREF: Obj4C_Index
0001074A 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00010750 6100 B278                  		bsr.w	AnimateSprite
00010754 6100 E214                  		bsr.w	DisplaySprite
00010758 4E75                       		rts	
0001075A                            ; ===========================================================================
0001075A                            
0001075A                            Obj4C_Delete:				; XREF: Obj4C_Index
0001075A 117C 0000 001C             		move.b	#0,$1C(a0)
00010760 117C 0002 0024             		move.b	#2,$24(a0)
00010766 4A28 0028                  		tst.b	$28(a0)
0001076A 6700 E24E                  		beq.w	DeleteObject
0001076E 4E75                       		rts	
00010770                            ; ===========================================================================
00010770                            ; ---------------------------------------------------------------------------
00010770                            ; Object 4D - lava geyser / lavafall (MZ)
00010770                            ; ---------------------------------------------------------------------------
00010770                            
00010770                            Obj4D:					; XREF: Obj_Index
00010770 7000                       		moveq	#0,d0
00010772 1028 0024                  		move.b	$24(a0),d0
00010776 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0001077A 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0001077E 6000 E1EA                  		bra.w	DisplaySprite
00010782                            ; ===========================================================================
00010782 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
00010784 0000                       		dc.w Obj4D_Action-Obj4D_Index
00010786 0000                       		dc.w loc_EFFC-Obj4D_Index
00010788 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0001078A                            
0001078A FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0001078E                            ; ===========================================================================
0001078E                            
0001078E                            Obj4D_Main:				; XREF: Obj4D_Index
0001078E 5428 0024                  		addq.b	#2,$24(a0)
00010792 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010798 4A28 0028                  		tst.b	$28(a0)
0001079C 6700                       		beq.s	loc_EEA4
0001079E 0468 0250 000C             		subi.w	#$250,$C(a0)
000107A4                            
000107A4                            loc_EEA4:
000107A4 7000                       		moveq	#0,d0
000107A6 1028 0028                  		move.b	$28(a0),d0
000107AA D040                       		add.w	d0,d0
000107AC 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
000107B2 2248                       		movea.l	a0,a1
000107B4 7201                       		moveq	#1,d1
000107B6 6100                       		bsr.s	Obj4D_MakeLava
000107B8 6000                       		bra.s	loc_EF10
000107BA                            ; ===========================================================================
000107BA                            
000107BA                            Obj4D_Loop:
000107BA 6100 E91A                  		bsr.w	SingleObjLoad2
000107BE 6600                       		bne.s	loc_EF0A
000107C0                            
000107C0                            Obj4D_MakeLava:				; XREF: Obj4D_Main
000107C0 12BC 004D                  		move.b	#$4D,0(a1)
000107C4 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
000107CC 337C 63A8 0002             		move.w	#$63A8,2(a1)
000107D2 137C 0004 0001             		move.b	#4,1(a1)
000107D8 137C 0020 0019             		move.b	#$20,$19(a1)
000107DE 3368 0008 0008             		move.w	8(a0),8(a1)
000107E4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000107EA 1368 0028 0028             		move.b	$28(a0),$28(a1)
000107F0 137C 0001 0018             		move.b	#1,$18(a1)
000107F6 137C 0005 001C             		move.b	#5,$1C(a1)
000107FC 4A28 0028                  		tst.b	$28(a0)
00010800 6700                       		beq.s	loc_EF0A
00010802 137C 0002 001C             		move.b	#2,$1C(a1)
00010808                            
00010808                            loc_EF0A:
00010808 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0001080C 4E75                       		rts	
0001080E                            ; ===========================================================================
0001080E                            
0001080E                            loc_EF10:				; XREF: Obj4D_Main
0001080E 0669 0060 000C             		addi.w	#$60,$C(a1)
00010814 3368 0030 0030             		move.w	$30(a0),$30(a1)
0001081A 0669 0060 0030             		addi.w	#$60,$30(a1)
00010820 137C 0093 0020             		move.b	#$93,$20(a1)
00010826 137C 0080 0016             		move.b	#$80,$16(a1)
0001082C 08E9 0004 0001             		bset	#4,1(a1)
00010832 5829 0024                  		addq.b	#4,$24(a1)
00010836 2348 003C                  		move.l	a0,$3C(a1)
0001083A 4A28 0028                  		tst.b	$28(a0)
0001083E 6700                       		beq.s	Obj4D_PlaySnd
00010840 7200                       		moveq	#0,d1
00010842 6100 FF76                  		bsr.w	Obj4D_Loop
00010846 5429 0024                  		addq.b	#2,$24(a1)
0001084A 08E9 0004 0002             		bset	#4,2(a1)
00010850 0669 0100 000C             		addi.w	#$100,$C(a1)
00010856 137C 0000 0018             		move.b	#0,$18(a1)
0001085C 3368 0030 0030             		move.w	$30(a0),$30(a1)
00010862 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00010868 117C 0000 0028             		move.b	#0,$28(a0)
0001086E                            
0001086E                            Obj4D_PlaySnd:
0001086E 303C 00C8                  		move.w	#$C8,d0
00010872 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play flame sound
00010878                            
00010878                            Obj4D_Action:				; XREF: Obj4D_Index
00010878 7000                       		moveq	#0,d0
0001087A 1028 0028                  		move.b	$28(a0),d0
0001087E D040                       		add.w	d0,d0
00010880 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
00010884 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
00010888 6100 E0C6                  		bsr.w	SpeedToPos
0001088C 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00010892 6100 B136                  		bsr.w	AnimateSprite
00010896                            
00010896                            Obj4D_ChkDel:				; XREF: Obj4C
00010896 3028 0008                  		move.w	8(a0),d0
0001089A 0240 FF80                  		andi.w	#$FF80,d0
0001089E 3238 F700                  		move.w	($FFFFF700).w,d1
000108A2 0441 0080                  		subi.w	#$80,d1
000108A6 0241 FF80                  		andi.w	#$FF80,d1
000108AA 9041                       		sub.w	d1,d0
000108AC 0C40 0280                  		cmpi.w	#$280,d0
000108B0 6300                       		bls.s	Obj4D_NoDel
000108B2 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000108B6 6700 E102                  		beq.w	DeleteObject	; if it's zero, don't remember object
000108BA 3440                       		movea.w	d0,a2	; load address into a2
000108BC 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000108C0 6000 E0F8                  		bra.w	DeleteObject	; and delete object
000108C4                            
000108C4                            Obj4D_NoDel:
000108C4 4E75                       		rts	
000108C6                            ; ===========================================================================
000108C6 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
000108C8 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
000108CA                            ; ===========================================================================
000108CA                            
000108CA                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
000108CA 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
000108D0 3028 0030                  		move.w	$30(a0),d0
000108D4 B068 000C                  		cmp.w	$C(a0),d0
000108D8 6400                       		bcc.s	locret_EFDA
000108DA 5828 0024                  		addq.b	#4,$24(a0)
000108DE 2268 003C                  		movea.l	$3C(a0),a1
000108E2 137C 0003 001C             		move.b	#3,$1C(a1)
000108E8                            
000108E8                            locret_EFDA:
000108E8 4E75                       		rts	
000108EA                            ; ===========================================================================
000108EA                            
000108EA                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
000108EA 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
000108F0 3028 0030                  		move.w	$30(a0),d0
000108F4 B068 000C                  		cmp.w	$C(a0),d0
000108F8 6400                       		bcc.s	locret_EFFA
000108FA 5828 0024                  		addq.b	#4,$24(a0)
000108FE 2268 003C                  		movea.l	$3C(a0),a1
00010902 137C 0001 001C             		move.b	#1,$1C(a1)
00010908                            
00010908                            locret_EFFA:
00010908 4E75                       		rts	
0001090A                            ; ===========================================================================
0001090A                            
0001090A                            loc_EFFC:				; XREF: Obj4D_Index
0001090A 2268 003C                  		movea.l	$3C(a0),a1
0001090E 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00010914 6700 0000                  		beq.w	Obj4D_Delete
00010918 3029 000C                  		move.w	$C(a1),d0
0001091C 0640 0060                  		addi.w	#$60,d0
00010920 3140 000C                  		move.w	d0,$C(a0)
00010924 9068 0030                  		sub.w	$30(a0),d0
00010928 4440                       		neg.w	d0
0001092A 7208                       		moveq	#8,d1
0001092C 0C40 0040                  		cmpi.w	#$40,d0
00010930 6C00                       		bge.s	loc_F026
00010932 720B                       		moveq	#$B,d1
00010934                            
00010934                            loc_F026:
00010934 0C40 0080                  		cmpi.w	#$80,d0
00010938 6F00                       		ble.s	loc_F02E
0001093A 720E                       		moveq	#$E,d1
0001093C                            
0001093C                            loc_F02E:
0001093C 5328 001E                  		subq.b	#1,$1E(a0)
00010940 6A00                       		bpl.s	loc_F04C
00010942 117C 0007 001E             		move.b	#7,$1E(a0)
00010948 5228 001B                  		addq.b	#1,$1B(a0)
0001094C 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
00010952 6500                       		bcs.s	loc_F04C
00010954 117C 0000 001B             		move.b	#0,$1B(a0)
0001095A                            
0001095A                            loc_F04C:
0001095A 1028 001B                  		move.b	$1B(a0),d0
0001095E D001                       		add.b	d1,d0
00010960 1140 001A                  		move.b	d0,$1A(a0)
00010964 6000 FF30                  		bra.w	Obj4D_ChkDel
00010968                            ; ===========================================================================
00010968                            
00010968                            Obj4D_Delete:				; XREF: Obj4D_Index
00010968 6000 E050                  		bra.w	DeleteObject
0001096C                            ; ===========================================================================
0001096C                            ; ---------------------------------------------------------------------------
0001096C                            ; Object 4E - advancing	wall of	lava (MZ)
0001096C                            ; ---------------------------------------------------------------------------
0001096C                            
0001096C                            Obj4E:					; XREF: Obj_Index
0001096C 7000                       		moveq	#0,d0
0001096E 1028 0024                  		move.b	$24(a0),d0
00010972 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
00010976 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0001097A                            ; ===========================================================================
0001097A 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0001097C 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0001097E 0000                       		dc.w Obj4E_Action-Obj4E_Index
00010980 0000                       		dc.w Obj4E_Move2-Obj4E_Index
00010982 0000                       		dc.w Obj4E_Delete-Obj4E_Index
00010984                            ; ===========================================================================
00010984                            
00010984                            Obj4E_Main:				; XREF: Obj4E_Index
00010984 5828 0024                  		addq.b	#4,$24(a0)
00010988 2248                       		movea.l	a0,a1
0001098A 7201                       		moveq	#1,d1
0001098C 6000                       		bra.s	Obj4E_Main2
0001098E                            ; ===========================================================================
0001098E                            
0001098E                            Obj4E_Loop:
0001098E 6100 E746                  		bsr.w	SingleObjLoad2
00010992 6600                       		bne.s	loc_F0C8
00010994                            
00010994                            Obj4E_Main2:				; XREF: Obj4E_Main
00010994 12BC 004E                  		move.b	#$4E,0(a1)	; load object
00010998 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
000109A0 337C 63A8 0002             		move.w	#$63A8,2(a1)
000109A6 137C 0004 0001             		move.b	#4,1(a1)
000109AC 137C 0050 0019             		move.b	#$50,$19(a1)
000109B2 3368 0008 0008             		move.w	8(a0),8(a1)
000109B8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000109BE 137C 0001 0018             		move.b	#1,$18(a1)
000109C4 137C 0000 001C             		move.b	#0,$1C(a1)
000109CA 137C 0094 0020             		move.b	#$94,$20(a1)
000109D0 2348 003C                  		move.l	a0,$3C(a1)
000109D4                            
000109D4                            loc_F0C8:
000109D4 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
000109D8                            
000109D8 5C29 0024                  		addq.b	#6,$24(a1)
000109DC 137C 0004 001A             		move.b	#4,$1A(a1)
000109E2                            
000109E2                            Obj4E_Action:				; XREF: Obj4E_Index
000109E2 3038 D008                  		move.w	($FFFFD008).w,d0
000109E6 9068 0008                  		sub.w	8(a0),d0
000109EA 6400                       		bcc.s	Obj4E_ChkSonic
000109EC 4440                       		neg.w	d0
000109EE                            
000109EE                            Obj4E_ChkSonic:
000109EE 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
000109F2 6400                       		bcc.s	Obj4E_Move	; if not, branch
000109F4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000109F8 9068 000C                  		sub.w	$C(a0),d0
000109FC 6400                       		bcc.s	loc_F0F4
000109FE 4440                       		neg.w	d0
00010A00                            
00010A00                            loc_F0F4:
00010A00 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
00010A04 6400                       		bcc.s	Obj4E_Move	; if not, branch
00010A06 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
00010A0C 6000                       		bra.s	Obj4E_Solid
00010A0E                            ; ===========================================================================
00010A0E                            
00010A0E                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
00010A0E 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
00010A12 6700                       		beq.s	Obj4E_Solid	; if not, branch
00010A14 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
00010A1A 5528 0024                  		subq.b	#2,$24(a0)
00010A1E                            
00010A1E                            Obj4E_Solid:				; XREF: Obj4E_Index
00010A1E 323C 002B                  		move.w	#$2B,d1
00010A22 343C 0018                  		move.w	#$18,d2
00010A26 3602                       		move.w	d2,d3
00010A28 5243                       		addq.w	#1,d3
00010A2A 3828 0008                  		move.w	8(a0),d4
00010A2E 1028 0024                  		move.b	$24(a0),d0
00010A32 3F00                       		move.w	d0,-(sp)
00010A34 6100 0000                  		bsr.w	SolidObject
00010A38 301F                       		move.w	(sp)+,d0
00010A3A 1140 0024                  		move.b	d0,$24(a0)
00010A3E 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
00010A44 6600                       		bne.s	Obj4E_Animate	; if not, branch
00010A46 4268 0010                  		clr.w	$10(a0)		; stop object moving
00010A4A 4228 0036                  		clr.b	$36(a0)
00010A4E                            
00010A4E                            Obj4E_Animate:
00010A4E 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
00010A54 6100 AF74                  		bsr.w	AnimateSprite
00010A58 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00010A5E 6400                       		bcc.s	Obj4E_ChkDel
00010A60 6100 DEEE                  		bsr.w	SpeedToPos
00010A64                            
00010A64                            Obj4E_ChkDel:
00010A64 6100 DF04                  		bsr.w	DisplaySprite
00010A68 4A28 0036                  		tst.b	$36(a0)
00010A6C 6600                       		bne.s	locret_F17E
00010A6E 3028 0008                  		move.w	8(a0),d0
00010A72 0240 FF80                  		andi.w	#$FF80,d0
00010A76 3238 F700                  		move.w	($FFFFF700).w,d1
00010A7A 0441 0080                  		subi.w	#$80,d1
00010A7E 0241 FF80                  		andi.w	#$FF80,d1
00010A82 9041                       		sub.w	d1,d0
00010A84 0C40 0280                  		cmpi.w	#$280,d0
00010A88 6200                       		bhi.s	Obj4E_ChkGone
00010A8A                            
00010A8A                            locret_F17E:
00010A8A 4E75                       		rts	
00010A8C                            ; ===========================================================================
00010A8C                            
00010A8C                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
00010A8C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010A90 3440                       		movea.w	d0,a2	; load address into a2
00010A92 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010A96 117C 0008 0024             		move.b	#8,$24(a0)
00010A9C 4E75                       		rts	
00010A9E                            ; ===========================================================================
00010A9E                            
00010A9E                            Obj4E_Move2:				; XREF: Obj4E_Index
00010A9E 2268 003C                  		movea.l	$3C(a0),a1
00010AA2 0C29 0008 0024             		cmpi.b	#8,$24(a1)
00010AA8 6700                       		beq.s	Obj4E_Delete
00010AAA 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
00010AB0 0468 0080 0008             		subi.w	#$80,8(a0)
00010AB6 6000 DEB2                  		bra.w	DisplaySprite
00010ABA                            ; ===========================================================================
00010ABA                            
00010ABA                            Obj4E_Delete:				; XREF: Obj4E_Index
00010ABA 6000 DEFE                  		bra.w	DeleteObject
00010ABE                            ; ===========================================================================
00010ABE                            ; ---------------------------------------------------------------------------
00010ABE                            ; Object 54 - invisible	lava tag (MZ)
00010ABE                            ; ---------------------------------------------------------------------------
00010ABE                            
00010ABE                            Obj54:					; XREF: Obj_Index
00010ABE 7000                       		moveq	#0,d0
00010AC0 1028 0024                  		move.b	$24(a0),d0
00010AC4 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
00010AC8 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
00010ACC                            ; ===========================================================================
00010ACC 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
00010ACE 0000                       		dc.w Obj54_ChkDel-Obj54_Index
00010AD0                            
00010AD0 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
00010AD4                            ; ===========================================================================
00010AD4                            
00010AD4                            Obj54_Main:				; XREF: Obj54_Index
00010AD4 5428 0024                  		addq.b	#2,$24(a0)
00010AD8 7000                       		moveq	#0,d0
00010ADA 1028 0028                  		move.b	$28(a0),d0
00010ADE 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
00010AE4 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
00010AEC 117C 0084 0001             		move.b	#$84,1(a0)
00010AF2                            
00010AF2                            Obj54_ChkDel:				; XREF: Obj54_Index
00010AF2 3028 0008                  		move.w	8(a0),d0
00010AF6 0240 FF80                  		andi.w	#$FF80,d0
00010AFA 3238 F700                  		move.w	($FFFFF700).w,d1
00010AFE 0441 0080                  		subi.w	#$80,d1
00010B02 0241 FF80                  		andi.w	#$FF80,d1
00010B06 9041                       		sub.w	d1,d0
00010B08 6B00 DEB0                  		bmi.w	DeleteObject
00010B0C 0C40 0280                  		cmpi.w	#$280,d0
00010B10 6300                       		bls.s	Obj54_NoDel
00010B12                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
00010B12                            	;	beq.w	DeleteObject		; if it's zero, don't remember object
00010B12                            	;	movea.w	d0,a2	; load address into a2
00010B12                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010B12 6000 DEA6                  		bra.w	DeleteObject	; and delete object
00010B16                            
00010B16                            Obj54_NoDel:
00010B16 4E75                       		rts	
00010B18                            ; ===========================================================================
00010B18                            ; ---------------------------------------------------------------------------
00010B18                            ; Sprite mappings - invisible lava tag (MZ)
00010B18                            ; ---------------------------------------------------------------------------
00010B18                            Map_obj54:
00010B18                            	include "_maps\obj54.asm"
00010B18                            ; ---------------------------------------------------------------------------
00010B18                            ; Sprite mappings - invisible lava tag (MZ)
00010B18                            ; ---------------------------------------------------------------------------
00010B18 0000                       		dc.w byte_F212-Map_obj54
00010B1A 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
00010B1C 00                         		even
00010B1C 00                         		even
00010B1C                            
00010B1C                            Ani_obj4C:
00010B1C                            	include "_anim\obj4C.asm"
00010B1C                            ; ---------------------------------------------------------------------------
00010B1C                            ; Animation script - geyser of lava (MZ)
00010B1C                            ; ---------------------------------------------------------------------------
00010B1C 0000                       		dc.w byte_F220-Ani_obj4C
00010B1E 0000                       		dc.w byte_F22A-Ani_obj4C
00010B20 0000                       		dc.w byte_F22E-Ani_obj4C
00010B22 0000                       		dc.w byte_F232-Ani_obj4C
00010B24 0000                       		dc.w byte_F23A-Ani_obj4C
00010B26 0000                       		dc.w byte_F23E-Ani_obj4C
00010B28 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
00010B32 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
00010B36 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
00010B3A 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
00010B42 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
00010B46 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
00010B4A                            		even
00010B4A                            		even
00010B4A                            
00010B4A                            Ani_obj4E:
00010B4A                            	include "_anim\obj4E.asm"
00010B4A                            ; ---------------------------------------------------------------------------
00010B4A                            ; Animation script - advancing wall of lava (MZ)
00010B4A                            ; ---------------------------------------------------------------------------
00010B4A 0000                       		dc.w byte_F244-Ani_obj4E
00010B4C 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
00010B52                            		even
00010B52                            		even
00010B52                            
00010B52                            ; ---------------------------------------------------------------------------
00010B52                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010B52                            ; ---------------------------------------------------------------------------
00010B52                            Map_obj4C:
00010B52                            	include "_maps\obj4C.asm"
00010B52                            ; ---------------------------------------------------------------------------
00010B52                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010B52                            ; ---------------------------------------------------------------------------
00010B52 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
00010B56 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
00010B5A 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
00010B5E 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
00010B62 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
00010B66 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
00010B6A 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
00010B6E 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
00010B72 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
00010B76 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
00010B7A 02                         byte_F272:	dc.b 2
00010B7B EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00010B80 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
00010B85 02                         byte_F27D:	dc.b 2
00010B86 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00010B8B EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00010B90 04                         byte_F288:	dc.b 4
00010B91 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010B96 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010B9B F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010BA0 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010BA5 04                         byte_F29D:	dc.b 4
00010BA6 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010BAB F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010BB0 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010BB5 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010BBA 06                         byte_F2B2:	dc.b 6
00010BBB EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010BC0 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010BC5 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010BCA EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010BCF E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
00010BD4 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00010BD9 06                         byte_F2D1:	dc.b 6
00010BDA EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010BDF F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010BE4 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010BE9 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010BEE E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00010BF3 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00010BF8 02                         byte_F2F0:	dc.b 2
00010BF9 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00010BFE E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00010C03 02                         byte_F2FB:	dc.b 2
00010C04 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00010C09 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00010C0E 0A                         byte_F306:	dc.b $A
00010C0F 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010C14 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010C19 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010C1E B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010C23 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010C28 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010C2D F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010C32 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010C37 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010C3C 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010C41 0A                         byte_F339:	dc.b $A
00010C42 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010C47 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010C4C B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010C51 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010C56 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010C5B D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010C60 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010C65 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010C6A 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010C6F 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010C74 0A                         byte_F36C:	dc.b $A
00010C75 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010C7A 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010C7F B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010C84 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010C89 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010C8E D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010C93 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010C98 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010C9D 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010CA2 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010CA7 06                         byte_F39F:	dc.b 6
00010CA8 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010CAD 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010CB2 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010CB7 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010CBC D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010CC1 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010CC6 06                         byte_F3BE:	dc.b 6
00010CC7 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010CCC 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010CD1 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010CD6 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010CDB D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010CE0 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010CE5 06                         byte_F3DD:	dc.b 6
00010CE6 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010CEB 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010CF0 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010CF5 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010CFA D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010CFF D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010D04 10                         byte_F3FC:	dc.b $10
00010D05 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010D0A 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010D0F B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010D14 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010D19 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010D1E D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010D23 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010D28 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010D2D 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010D32 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010D37 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00010D3C 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00010D41 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00010D46 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00010D4B 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00010D50 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00010D55 10                         byte_F44D:	dc.b $10
00010D56 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010D5B 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010D60 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010D65 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010D6A D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010D6F D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010D74 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010D79 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010D7E 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010D83 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010D88 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00010D8D 300F 0850 00               		dc.b $30, $F, 8, $50, 0
00010D92 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
00010D97 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00010D9C 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00010DA1 700F 0850 00               		dc.b $70, $F, 8, $50, 0
00010DA6 10                         byte_F49E:	dc.b $10
00010DA7 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010DAC 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010DB1 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010DB6 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010DBB D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010DC0 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010DC5 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010DCA F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010DCF 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010DD4 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010DD9 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00010DDE 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00010DE3 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00010DE8 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00010DED 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00010DF2 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00010DF7 06                         byte_F4EF:	dc.b 6
00010DF8 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00010DFD E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00010E02 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00010E07 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00010E0C D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00010E11 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00010E16 06                         byte_F50E:	dc.b 6
00010E17 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00010E1C E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00010E21 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00010E26 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00010E2B D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00010E30 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00010E35 00                         byte_F52D:	dc.b 0
00010E36                            		even
00010E36                            		even
00010E36                            
00010E36                            ; ---------------------------------------------------------------------------
00010E36                            ; Sprite mappings - advancing wall of lava (MZ)
00010E36                            ; ---------------------------------------------------------------------------
00010E36                            Map_obj4E:
00010E36                            	include "_maps\obj4E.asm"
00010E36                            ; ---------------------------------------------------------------------------
00010E36                            ; Sprite mappings - advancing wall of lava (MZ)
00010E36                            ; ---------------------------------------------------------------------------
00010E36 0000                       		dc.w byte_F538-Map_obj4E
00010E38 0000                       		dc.w byte_F566-Map_obj4E
00010E3A 0000                       		dc.w byte_F594-Map_obj4E
00010E3C 0000                       		dc.w byte_F5C2-Map_obj4E
00010E3E 0000                       		dc.w byte_F5F0-Map_obj4E
00010E40 09                         byte_F538:	dc.b 9
00010E41 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
00010E46 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010E4B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010E50 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010E55 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010E5A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010E5F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010E64 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010E69 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010E6E 09                         byte_F566:	dc.b 9
00010E6F E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010E74 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
00010E79 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010E7E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010E83 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010E88 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010E8D 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010E92 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010E97 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010E9C 09                         byte_F594:	dc.b 9
00010E9D E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
00010EA2 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010EA7 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010EAC E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010EB1 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010EB6 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010EBB 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010EC0 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010EC5 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010ECA 09                         byte_F5C2:	dc.b 9
00010ECB E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010ED0 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
00010ED5 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010EDA E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010EDF 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010EE4 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010EE9 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010EEE E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010EF3 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010EF8 08                         byte_F5F0:	dc.b 8
00010EF9 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00010EFE 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010F03 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010F08 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010F0D E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010F12 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010F17 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010F1C 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010F22 00                         		even
00010F22 00                         		even
00010F22                            
00010F22                            ; ===========================================================================
00010F22                            ; ---------------------------------------------------------------------------
00010F22                            ; Object 40 - Moto Bug enemy (GHZ)
00010F22                            ; ---------------------------------------------------------------------------
00010F22                            
00010F22                            Obj40:					; XREF: Obj_Index
00010F22 7000                       		moveq	#0,d0
00010F24 1028 0024                  		move.b	$24(a0),d0
00010F28 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00010F2C 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00010F30                            ; ===========================================================================
00010F30 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
00010F32 0000                       		dc.w Obj40_Action-Obj40_Index
00010F34 0000                       		dc.w Obj40_Animate-Obj40_Index
00010F36 0000                       		dc.w Obj40_Delete-Obj40_Index
00010F38                            ; ===========================================================================
00010F38                            
00010F38                            Obj40_Main:				; XREF: Obj40_Index
00010F38 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00010F40 317C 04F0 0002             		move.w	#$4F0,2(a0)
00010F46 117C 0004 0001             		move.b	#4,1(a0)
00010F4C 117C 0004 0018             		move.b	#4,$18(a0)
00010F52 117C 0014 0019             		move.b	#$14,$19(a0)
00010F58 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00010F5C 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
00010F5E 117C 000E 0016             		move.b	#$E,$16(a0)
00010F64 117C 0008 0017             		move.b	#8,$17(a0)
00010F6A 117C 000C 0020             		move.b	#$C,$20(a0)
00010F70 6100 D9BE                  		bsr.w	ObjectFall
00010F74 4EB9 0000 0000             		jsr	ObjHitFloor
00010F7A 4A41                       		tst.w	d1
00010F7C 6A00                       		bpl.s	locret_F68A
00010F7E D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010F82 317C 0000 0012             		move.w	#0,$12(a0)
00010F88 5428 0024                  		addq.b	#2,$24(a0)
00010F8C 0868 0000 0022             		bchg	#0,$22(a0)
00010F92                            
00010F92                            locret_F68A:
00010F92 4E75                       		rts	
00010F94                            ; ===========================================================================
00010F94                            
00010F94                            Obj40_SetSmoke:				; XREF: Obj40_Main
00010F94 5828 0024                  		addq.b	#4,$24(a0)
00010F98 6000 0000                  		bra.w	Obj40_Animate
00010F9C                            ; ===========================================================================
00010F9C                            
00010F9C                            Obj40_Action:				; XREF: Obj40_Index
00010F9C 7000                       		moveq	#0,d0
00010F9E 1028 0025                  		move.b	$25(a0),d0
00010FA2 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
00010FA6 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
00010FAA 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00010FB0 6100 AA18                  		bsr.w	AnimateSprite
00010FB4                            
00010FB4                            ; ---------------------------------------------------------------------------
00010FB4                            ; Routine to mark an enemy/monitor/ring	as destroyed
00010FB4                            ; ---------------------------------------------------------------------------
00010FB4                            
00010FB4                            MarkObjGone:
00010FB4 3028 0008                  		move.w	8(a0),d0
00010FB8 0240 FF80                  		andi.w	#$FF80,d0
00010FBC 3238 F700                  		move.w	($FFFFF700).w,d1
00010FC0 0441 0080                  		subi.w	#$80,d1
00010FC4 0241 FF80                  		andi.w	#$FF80,d1
00010FC8 9041                       		sub.w	d1,d0
00010FCA 0C40 0280                  		cmpi.w	#$280,d0
00010FCE 6200 0000                  		bhi.w	Mark_ChkGone
00010FD2 6000 D996                  		bra.w	DisplaySprite
00010FD6                            ; ===========================================================================
00010FD6                            
00010FD6                            Mark_ChkGone:
00010FD6 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010FDA 6700 D9DE                  		beq.w	DeleteObject	; if it's zero, don't remember object
00010FDE 3440                       		movea.w	d0,a2	; load address into a2
00010FE0 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010FE4                            
00010FE4                            Mark_Delete:
00010FE4 6000 D9D4                  		bra.w	DeleteObject
00010FE8                            
00010FE8                            ; ===========================================================================
00010FE8 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
00010FEA 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
00010FEC                            ; ===========================================================================
00010FEC                            
00010FEC                            Obj40_Move:				; XREF: Obj40_Index2
00010FEC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010FF0 6A00                       		bpl.s	locret_F70A	; if time remains, branch
00010FF2 5428 0025                  		addq.b	#2,$25(a0)
00010FF6 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
00010FFC 117C 0001 001C             		move.b	#1,$1C(a0)
00011002 0868 0000 0022             		bchg	#0,$22(a0)
00011008 6600                       		bne.s	locret_F70A
0001100A 4468 0010                  		neg.w	$10(a0)		; change direction
0001100E                            
0001100E                            locret_F70A:
0001100E 4E75                       		rts	
00011010                            ; ===========================================================================
00011010                            
00011010                            Obj40_FixToFloor:			; XREF: Obj40_Index2
00011010 6100 D93E                  		bsr.w	SpeedToPos
00011014 4EB9 0000 0000             		jsr	ObjHitFloor
0001101A 0C41 FFF8                  		cmpi.w	#-8,d1
0001101E 6D00                       		blt.s	Obj40_Pause
00011020 0C41 000C                  		cmpi.w	#$C,d1
00011024 6C00                       		bge.s	Obj40_Pause
00011026 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001102A 5328 0033                  		subq.b	#1,$33(a0)
0001102E 6A00                       		bpl.s	locret_F756
00011030 117C 000F 0033             		move.b	#$F,$33(a0)
00011036 6100 E088                  		bsr.w	SingleObjLoad
0001103A 6600                       		bne.s	locret_F756
0001103C 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
00011040 3368 0008 0008             		move.w	8(a0),8(a1)
00011046 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001104C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011052 137C 0002 001C             		move.b	#2,$1C(a1)
00011058                            
00011058                            locret_F756:
00011058 4E75                       		rts	
0001105A                            ; ===========================================================================
0001105A                            
0001105A                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0001105A 5528 0025                  		subq.b	#2,$25(a0)
0001105E 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00011064 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0001106A 117C 0000 001C             		move.b	#0,$1C(a0)
00011070 4E75                       		rts	
00011072                            ; ===========================================================================
00011072                            
00011072                            Obj40_Animate:				; XREF: Obj40_Index
00011072 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00011078 6100 A950                  		bsr.w	AnimateSprite
0001107C 6000 D8EC                  		bra.w	DisplaySprite
00011080                            ; ===========================================================================
00011080                            
00011080                            Obj40_Delete:				; XREF: Obj40_Index
00011080 6000 D938                  		bra.w	DeleteObject
00011084                            ; ===========================================================================
00011084                            Ani_obj40:
00011084                            	include "_anim\obj40.asm"
00011084                            ; ---------------------------------------------------------------------------
00011084                            ; Animation script - Motobug enemy
00011084                            ; ---------------------------------------------------------------------------
00011084 0000                       		dc.w byte_F788-Ani_obj40
00011086 0000                       		dc.w byte_F78C-Ani_obj40
00011088 0000                       		dc.w byte_F792-Ani_obj40
0001108A 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0001108E 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
00011094 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
000110A2                            		even
000110A2                            		even
000110A2                            
000110A2                            ; ---------------------------------------------------------------------------
000110A2                            ; Sprite mappings - Moto Bug enemy (GHZ)
000110A2                            ; ---------------------------------------------------------------------------
000110A2                            Map_obj40:
000110A2                            	include "_maps\obj40.asm"
000110A2                            ; ---------------------------------------------------------------------------
000110A2                            ; Sprite mappings - Moto Bug enemy (GHZ)
000110A2                            ; ---------------------------------------------------------------------------
000110A2 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
000110A6 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
000110AA 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
000110AE 0000                       		dc.w byte_F804-Map_obj40
000110B0 04                         byte_F7AE:	dc.b 4
000110B1 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
000110B6 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
000110BB F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000110C0 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
000110C5 04                         byte_F7C3:	dc.b 4
000110C6 F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
000110CB 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
000110D0 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
000110D5 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
000110DA 05                         byte_F7D8:	dc.b 5
000110DB F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
000110E0 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
000110E5 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000110EA 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
000110EF 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
000110F4 01                         byte_F7F2:	dc.b 1
000110F5 FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
000110FA 01                         byte_F7F8:	dc.b 1
000110FB FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
00011100 01                         byte_F7FE:	dc.b 1
00011101 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
00011106 00                         byte_F804:	dc.b 0
00011108 00                         		even
00011108 00                         		even
00011108                            
00011108                            ; ===========================================================================
00011108                            ; ---------------------------------------------------------------------------
00011108                            ; Object 4F - blank
00011108                            ; ---------------------------------------------------------------------------
00011108                            
00011108                            Obj4F:					; XREF: Obj_Index
00011108 4E75                       		rts	
0001110A                            
0001110A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001110A                            
0001110A                            
0001110A                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0001110A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001110E D047                       		add.w	d7,d0
00011110 0240 0003                  		andi.w	#3,d0
00011114 6600                       		bne.s	loc_F836
00011116 7600                       		moveq	#0,d3
00011118 1628 0019                  		move.b	$19(a0),d3
0001111C 4A68 0010                  		tst.w	$10(a0)
00011120 6B00                       		bmi.s	loc_F82C
00011122 6100 0000                  		bsr.w	ObjHitWallRight
00011126 4A41                       		tst.w	d1
00011128 6A00                       		bpl.s	loc_F836
0001112A                            
0001112A                            loc_F828:
0001112A 7001                       		moveq	#1,d0
0001112C 4E75                       		rts	
0001112E                            ; ===========================================================================
0001112E                            
0001112E                            loc_F82C:
0001112E 4643                       		not.w	d3
00011130 6100 0000                  		bsr.w	ObjHitWallLeft
00011134 4A41                       		tst.w	d1
00011136 6BF2                       		bmi.s	loc_F828
00011138                            
00011138                            loc_F836:
00011138 7000                       		moveq	#0,d0
0001113A 4E75                       		rts	
0001113C                            ; End of function Obj50_ChkWall
0001113C                            
0001113C                            ; ===========================================================================
0001113C                            ; ---------------------------------------------------------------------------
0001113C                            ; Object 50 - Yadrin enemy (SYZ)
0001113C                            ; ---------------------------------------------------------------------------
0001113C                            
0001113C                            Obj50:					; XREF: Obj_Index
0001113C 7000                       		moveq	#0,d0
0001113E 1028 0024                  		move.b	$24(a0),d0
00011142 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00011146 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0001114A                            ; ===========================================================================
0001114A 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0001114C 0000                       		dc.w Obj50_Action-Obj50_Index
0001114E                            ; ===========================================================================
0001114E                            
0001114E                            Obj50_Main:				; XREF: Obj50_Index
0001114E 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
00011156 317C 247B 0002             		move.w	#$247B,2(a0)
0001115C 117C 0004 0001             		move.b	#4,1(a0)
00011162 117C 0004 0018             		move.b	#4,$18(a0)
00011168 117C 0014 0019             		move.b	#$14,$19(a0)
0001116E 117C 0011 0016             		move.b	#$11,$16(a0)
00011174 117C 0008 0017             		move.b	#8,$17(a0)
0001117A 117C 00CC 0020             		move.b	#$CC,$20(a0)
00011180 6100 D7AE                  		bsr.w	ObjectFall
00011184 6100 0000                  		bsr.w	ObjHitFloor
00011188 4A41                       		tst.w	d1
0001118A 6A00                       		bpl.s	locret_F89E
0001118C D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00011190 317C 0000 0012             		move.w	#0,$12(a0)
00011196 5428 0024                  		addq.b	#2,$24(a0)
0001119A 0868 0000 0022             		bchg	#0,$22(a0)
000111A0                            
000111A0                            locret_F89E:
000111A0 4E75                       		rts	
000111A2                            ; ===========================================================================
000111A2                            
000111A2                            Obj50_Action:				; XREF: Obj50_Index
000111A2 7000                       		moveq	#0,d0
000111A4 1028 0025                  		move.b	$25(a0),d0
000111A8 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
000111AC 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
000111B0 43F9 0000 0000             		lea	(Ani_obj50).l,a1
000111B6 6100 A812                  		bsr.w	AnimateSprite
000111BA 6000 FDF8                  		bra.w	MarkObjGone
000111BE                            ; ===========================================================================
000111BE 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
000111C0 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
000111C2                            ; ===========================================================================
000111C2                            
000111C2                            Obj50_Move:				; XREF: Obj50_Index2
000111C2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000111C6 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
000111C8 5428 0025                  		addq.b	#2,$25(a0)
000111CC 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
000111D2 117C 0001 001C             		move.b	#1,$1C(a0)
000111D8 0868 0000 0022             		bchg	#0,$22(a0)
000111DE 6600                       		bne.s	locret_F8E2
000111E0 4468 0010                  		neg.w	$10(a0)		; change direction
000111E4                            
000111E4                            locret_F8E2:
000111E4 4E75                       		rts	
000111E6                            ; ===========================================================================
000111E6                            
000111E6                            Obj50_FixToFloor:			; XREF: Obj50_Index2
000111E6 6100 D768                  		bsr.w	SpeedToPos
000111EA 6100 0000                  		bsr.w	ObjHitFloor
000111EE 0C41 FFF8                  		cmpi.w	#-8,d1
000111F2 6D00                       		blt.s	Obj50_Pause
000111F4 0C41 000C                  		cmpi.w	#$C,d1
000111F8 6C00                       		bge.s	Obj50_Pause
000111FA D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
000111FE 6100 FF0A                  		bsr.w	Obj50_ChkWall
00011202 6600                       		bne.s	Obj50_Pause
00011204 4E75                       		rts	
00011206                            ; ===========================================================================
00011206                            
00011206                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00011206 5528 0025                  		subq.b	#2,$25(a0)
0001120A 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00011210 317C 0000 0010             		move.w	#0,$10(a0)
00011216 117C 0000 001C             		move.b	#0,$1C(a0)
0001121C 4E75                       		rts	
0001121E                            ; ===========================================================================
0001121E                            Ani_obj50:
0001121E                            	include "_anim\obj50.asm"
0001121E                            ; ---------------------------------------------------------------------------
0001121E                            ; Animation script - Yadrin enemy
0001121E                            ; ---------------------------------------------------------------------------
0001121E 0000                       		dc.w byte_F920-Ani_obj50
00011220 0000                       		dc.w byte_F924-Ani_obj50
00011222 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00011226 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00011230                            		even
00011230                            		even
00011230                            
00011230                            ; ---------------------------------------------------------------------------
00011230                            ; Sprite mappings - Yadrin enemy (SYZ)
00011230                            ; ---------------------------------------------------------------------------
00011230                            Map_obj50:
00011230                            	include "_maps\obj50.asm"
00011230                            ; ---------------------------------------------------------------------------
00011230                            ; Sprite mappings - Yadrin enemy (SYZ)
00011230                            ; ---------------------------------------------------------------------------
00011230 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
00011234 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
00011238 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0001123C 05                         byte_F93A:	dc.b 5
0001123D F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00011242 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
00011247 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001124C F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011251 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00011256 05                         byte_F954:	dc.b 5
00011257 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0001125C FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00011261 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011266 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001126B 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00011270 05                         byte_F96E:	dc.b 5
00011271 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
00011276 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0001127B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011280 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011285 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0001128A 05                         byte_F988:	dc.b 5
0001128B F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00011290 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
00011295 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001129A F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001129F 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000112A4 05                         byte_F9A2:	dc.b 5
000112A5 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
000112AA FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
000112AF EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000112B4 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000112B9 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000112BE 05                         byte_F9BC:	dc.b 5
000112BF F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
000112C4 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
000112C9 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000112CE F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000112D3 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000112D8                            		even
000112D8                            		even
000112D8                            
000112D8                            ; ---------------------------------------------------------------------------
000112D8                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
000112D8                            ;
000112D8                            ; variables:
000112D8                            ; d1 = width
000112D8                            ; d2 = height /	2 (when	jumping)
000112D8                            ; d3 = height /	2 (when	walking)
000112D8                            ; d4 = x-axis position
000112D8                            ; ---------------------------------------------------------------------------
000112D8                            
000112D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000112D8                            
000112D8                            
000112D8                            SolidObject:
000112D8 4A28 0025                  		tst.b	$25(a0)
000112DC 6700 0000                  		beq.w	loc_FAC8
000112E0 3401                       		move.w	d1,d2
000112E2 D442                       		add.w	d2,d2
000112E4 43F8 D000                  		lea	($FFFFD000).w,a1
000112E8 0829 0001 0022             		btst	#1,$22(a1)
000112EE 6600                       		bne.s	loc_F9FE
000112F0 3029 0008                  		move.w	8(a1),d0
000112F4 9068 0008                  		sub.w	8(a0),d0
000112F8 D041                       		add.w	d1,d0
000112FA 6B00                       		bmi.s	loc_F9FE
000112FC B042                       		cmp.w	d2,d0
000112FE 6500                       		bcs.s	loc_FA12
00011300                            
00011300                            loc_F9FE:
00011300 08A9 0003 0022             		bclr	#3,$22(a1)
00011306 08A8 0003 0022             		bclr	#3,$22(a0)
0001130C 4228 0025                  		clr.b	$25(a0)
00011310 7800                       		moveq	#0,d4
00011312 4E75                       		rts	
00011314                            ; ===========================================================================
00011314                            
00011314                            loc_FA12:
00011314 3404                       		move.w	d4,d2
00011316 4EB9 0000 8C48             		jsr	(MvSonicOnPtfm).l
0001131C 7800                       		moveq	#0,d4
0001131E 4E75                       		rts	
00011320                            ; ===========================================================================
00011320                            
00011320                            SolidObject71:				; XREF: Obj71_Solid
00011320 4A28 0025                  		tst.b	$25(a0)
00011324 6700 0000                  		beq.w	loc_FAD0
00011328 3401                       		move.w	d1,d2
0001132A D442                       		add.w	d2,d2
0001132C 43F8 D000                  		lea	($FFFFD000).w,a1
00011330 0829 0001 0022             		btst	#1,$22(a1)
00011336 6600                       		bne.s	loc_FA44
00011338 3029 0008                  		move.w	8(a1),d0
0001133C 9068 0008                  		sub.w	8(a0),d0
00011340 D041                       		add.w	d1,d0
00011342 6B00                       		bmi.s	loc_FA44
00011344 B042                       		cmp.w	d2,d0
00011346 6500                       		bcs.s	loc_FA58
00011348                            
00011348                            loc_FA44:
00011348 08A9 0003 0022             		bclr	#3,$22(a1)
0001134E 08A8 0003 0022             		bclr	#3,$22(a0)
00011354 4228 0025                  		clr.b	$25(a0)
00011358 7800                       		moveq	#0,d4
0001135A 4E75                       		rts	
0001135C                            ; ===========================================================================
0001135C                            
0001135C                            loc_FA58:
0001135C 3404                       		move.w	d4,d2
0001135E 4EB9 0000 8C48             		jsr	(MvSonicOnPtfm).l
00011364 7800                       		moveq	#0,d4
00011366 4E75                       		rts	
00011368                            ; ===========================================================================
00011368                            
00011368                            SolidObject2F:				; XREF: Obj2F_Solid
00011368 43F8 D000                  		lea	($FFFFD000).w,a1
0001136C 4A28 0001                  		tst.b	1(a0)
00011370 6A00 0000                  		bpl.w	loc_FB92
00011374 3029 0008                  		move.w	8(a1),d0
00011378 9068 0008                  		sub.w	8(a0),d0
0001137C D041                       		add.w	d1,d0
0001137E 6B00 0000                  		bmi.w	loc_FB92
00011382 3601                       		move.w	d1,d3
00011384 D643                       		add.w	d3,d3
00011386 B043                       		cmp.w	d3,d0
00011388 6200 0000                  		bhi.w	loc_FB92
0001138C 3A00                       		move.w	d0,d5
0001138E 0828 0000 0001             		btst	#0,1(a0)
00011394 6700                       		beq.s	loc_FA94
00011396 4645                       		not.w	d5
00011398 DA43                       		add.w	d3,d5
0001139A                            
0001139A                            loc_FA94:
0001139A E24D                       		lsr.w	#1,d5
0001139C 7600                       		moveq	#0,d3
0001139E 1632 5000                  		move.b	(a2,d5.w),d3
000113A2 9612                       		sub.b	(a2),d3
000113A4 3A28 000C                  		move.w	$C(a0),d5
000113A8 9A43                       		sub.w	d3,d5
000113AA 1629 0016                  		move.b	$16(a1),d3
000113AE 4883                       		ext.w	d3
000113B0 D443                       		add.w	d3,d2
000113B2 3629 000C                  		move.w	$C(a1),d3
000113B6 9645                       		sub.w	d5,d3
000113B8 5843                       		addq.w	#4,d3
000113BA D642                       		add.w	d2,d3
000113BC 6B00 0000                  		bmi.w	loc_FB92
000113C0 3802                       		move.w	d2,d4
000113C2 D844                       		add.w	d4,d4
000113C4 B644                       		cmp.w	d4,d3
000113C6 6400 0000                  		bcc.w	loc_FB92
000113CA 6000 0000                  		bra.w	loc_FB0E
000113CE                            ; ===========================================================================
000113CE                            
000113CE                            loc_FAC8:
000113CE 4A28 0001                  		tst.b	1(a0)
000113D2 6A00 0000                  		bpl.w	loc_FB92
000113D6                            
000113D6                            loc_FAD0:
000113D6 43F8 D000                  		lea	($FFFFD000).w,a1
000113DA 3029 0008                  		move.w	8(a1),d0
000113DE 9068 0008                  		sub.w	8(a0),d0
000113E2 D041                       		add.w	d1,d0
000113E4 6B00 0000                  		bmi.w	loc_FB92
000113E8 3601                       		move.w	d1,d3
000113EA D643                       		add.w	d3,d3
000113EC B043                       		cmp.w	d3,d0
000113EE 6200 0000                  		bhi.w	loc_FB92
000113F2 1629 0016                  		move.b	$16(a1),d3
000113F6 4883                       		ext.w	d3
000113F8 D443                       		add.w	d3,d2
000113FA 3629 000C                  		move.w	$C(a1),d3
000113FE 9668 000C                  		sub.w	$C(a0),d3
00011402 5843                       		addq.w	#4,d3
00011404 D642                       		add.w	d2,d3
00011406 6B00 0000                  		bmi.w	loc_FB92
0001140A 3802                       		move.w	d2,d4
0001140C D844                       		add.w	d4,d4
0001140E B644                       		cmp.w	d4,d3
00011410 6400 0000                  		bcc.w	loc_FB92
00011414                            
00011414                            loc_FB0E:
00011414 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00011418 6B00 0000                  		bmi.w	loc_FB92
0001141C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00011422 6400 0000                  		bcc.w	loc_FB92
00011426 4A78 FE08                  		tst.w	($FFFFFE08).w
0001142A 6600 0000                  		bne.w	loc_FBAC
0001142E 3A00                       		move.w	d0,d5
00011430 B240                       		cmp.w	d0,d1
00011432 6400                       		bcc.s	loc_FB36
00011434 D241                       		add.w	d1,d1
00011436 9041                       		sub.w	d1,d0
00011438 3A00                       		move.w	d0,d5
0001143A 4445                       		neg.w	d5
0001143C                            
0001143C                            loc_FB36:
0001143C 3203                       		move.w	d3,d1
0001143E B443                       		cmp.w	d3,d2
00011440 6400                       		bcc.s	loc_FB44
00011442 5943                       		subq.w	#4,d3
00011444 9644                       		sub.w	d4,d3
00011446 3203                       		move.w	d3,d1
00011448 4441                       		neg.w	d1
0001144A                            
0001144A                            loc_FB44:
0001144A BA41                       		cmp.w	d1,d5
0001144C 6200 0000                  		bhi.w	loc_FBB0
00011450 0C41 0004                  		cmpi.w	#4,d1
00011454 6300                       		bls.s	loc_FB8C
00011456 4A40                       		tst.w	d0
00011458 6700                       		beq.s	loc_FB70
0001145A 6B00                       		bmi.s	loc_FB5E
0001145C 4A69 0010                  		tst.w	$10(a1)
00011460 6B00                       		bmi.s	loc_FB70
00011462 6000                       		bra.s	loc_FB64
00011464                            ; ===========================================================================
00011464                            
00011464                            loc_FB5E:
00011464 4A69 0010                  		tst.w	$10(a1)
00011468 6A00                       		bpl.s	loc_FB70
0001146A                            
0001146A                            loc_FB64:
0001146A 337C 0000 0020             		move.w	#0,$20(a1)	; stop Sonic moving
00011470 337C 0000 0010             		move.w	#0,$10(a1)
00011476                            
00011476                            loc_FB70:
00011476 9169 0008                  		sub.w	d0,8(a1)
0001147A 0829 0001 0022             		btst	#1,$22(a1)
00011480 6600                       		bne.s	loc_FB8C
00011482 08E9 0005 0022             		bset	#5,$22(a1)
00011488 08E8 0005 0022             		bset	#5,$22(a0)
0001148E 7801                       		moveq	#1,d4
00011490 4E75                       		rts	
00011492                            ; ===========================================================================
00011492                            
00011492                            loc_FB8C:
00011492 6100                       		bsr.s	loc_FBA0
00011494 7801                       		moveq	#1,d4
00011496 4E75                       		rts	
00011498                            ; ===========================================================================
00011498                            loc_FB92:
00011498 0828 0005 0022             		btst	#5,$22(a0)
0001149E 6700                       		beq.s	loc_FBAC
000114A0 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
000114A6 6700                       		beq.s	loc_FBA0
000114A8 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
000114AE 6700                       		beq.s	loc_FBA0
000114B0 0C29 001A 001C             		cmp.b	#$1A,$1C(a1)	; check if in hurt animation
000114B6 6700                       		beq.s	loc_FBA0
000114B8 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
000114BE                            
000114BE                            loc_FBA0:
000114BE 08A8 0005 0022             		bclr	#5,$22(a0)
000114C4 08A9 0005 0022             		bclr	#5,$22(a1)
000114CA                            
000114CA                            loc_FBAC:
000114CA 7800                       		moveq	#0,d4
000114CC 4E75                       		rts	
000114CE                            ; ===========================================================================
000114CE                            
000114CE                            loc_FBB0:
000114CE 4A43                       		tst.w	d3
000114D0 6B00                       		bmi.s	loc_FBBC
000114D2 0C43 0010                  		cmpi.w	#$10,d3
000114D6 6500                       		bcs.s	loc_FBEE
000114D8 60BE                       		bra.s	loc_FB92
000114DA                            ; ===========================================================================
000114DA                            
000114DA                            loc_FBBC:
000114DA 4A69 0012                  		tst.w	$12(a1)
000114DE 6700                       		beq.s	loc_FBD6
000114E0 6A00                       		bpl.s	loc_FBD2
000114E2 4A43                       		tst.w	d3
000114E4 6A00                       		bpl.s	loc_FBD2
000114E6 9769 000C                  		sub.w	d3,$C(a1)
000114EA 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
000114F0                            
000114F0                            loc_FBD2:
000114F0 78FF                       		moveq	#-1,d4
000114F2 4E75                       		rts	
000114F4                            ; ===========================================================================
000114F4                            
000114F4                            loc_FBD6:
000114F4 0829 0001 0022             		btst	#1,$22(a1)
000114FA 66F4                       		bne.s	loc_FBD2
000114FC 2F08                       		move.l	a0,-(sp)
000114FE 2049                       		movea.l	a1,a0
00011500 4EB9 0000 0000             		jsr	KillSonic
00011506 205F                       		movea.l	(sp)+,a0
00011508 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001150E 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
00011514 78FF                       		moveq	#-1,d4
00011516 4E75                       		rts	
00011518                            ; ===========================================================================
00011518                            
00011518                            loc_FBEE:
00011518 5943                       		subq.w	#4,d3
0001151A 7200                       		moveq	#0,d1
0001151C 1228 0019                  		move.b	$19(a0),d1
00011520 3401                       		move.w	d1,d2
00011522 D442                       		add.w	d2,d2
00011524 D269 0008                  		add.w	8(a1),d1
00011528 9268 0008                  		sub.w	8(a0),d1
0001152C 6B00                       		bmi.s	loc_FC28
0001152E B242                       		cmp.w	d2,d1
00011530 6400                       		bcc.s	loc_FC28
00011532 4A69 0012                  		tst.w	$12(a1)
00011536 6B00                       		bmi.s	loc_FC28
00011538 9769 000C                  		sub.w	d3,$C(a1)
0001153C 5369 000C                  		subq.w	#1,$C(a1)
00011540 6100                       		bsr.s	sub_FC2C
00011542 117C 0002 0025             		move.b	#2,$25(a0)
00011548 08E8 0003 0022             		bset	#3,$22(a0)
0001154E 78FF                       		moveq	#-1,d4
00011550 4E75                       		rts	
00011552                            ; ===========================================================================
00011552                            
00011552                            loc_FC28:
00011552 7800                       		moveq	#0,d4
00011554 4E75                       		rts	
00011556                            ; End of function SolidObject
00011556                            
00011556                            
00011556                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011556                            
00011556                            
00011556                            sub_FC2C:				; XREF: SolidObject
00011556 0829 0003 0022             		btst	#3,$22(a1)
0001155C 6700                       		beq.s	loc_FC4E
0001155E 7000                       		moveq	#0,d0
00011560 1029 003D                  		move.b	$3D(a1),d0
00011564 ED48                       		lsl.w	#6,d0
00011566 0680 00FF D000             		addi.l	#$FFD000,d0
0001156C 2440                       		movea.l	d0,a2
0001156E 08AA 0003 0022             		bclr	#3,$22(a2)
00011574 422A 0025                  		clr.b	$25(a2)
00011578                            
00011578                            loc_FC4E:
00011578 3008                       		move.w	a0,d0
0001157A 0440 D000                  		subi.w	#-$3000,d0
0001157E EC48                       		lsr.w	#6,d0
00011580 0240 007F                  		andi.w	#$7F,d0
00011584 1340 003D                  		move.b	d0,$3D(a1)
00011588 137C 0000 0026             		move.b	#0,$26(a1)
0001158E 337C 0000 0012             		move.w	#0,$12(a1)
00011594 3369 0010 0020             		move.w	$10(a1),$20(a1)
0001159A 0829 0001 0022             		btst	#1,$22(a1)
000115A0 6700                       		beq.s	loc_FC84
000115A2 2F08                       		move.l	a0,-(sp)
000115A4 2049                       		movea.l	a1,a0
000115A6 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000115AC 205F                       		movea.l	(sp)+,a0
000115AE                            
000115AE                            loc_FC84:
000115AE 08E9 0003 0022             		bset	#3,$22(a1)
000115B4 08E8 0003 0022             		bset	#3,$22(a0)
000115BA 4E75                       		rts	
000115BC                            ; End of function sub_FC2C
000115BC                            
000115BC                            ; ===========================================================================
000115BC                            ; ---------------------------------------------------------------------------
000115BC                            ; Object 51 - smashable	green block (MZ)
000115BC                            ; ---------------------------------------------------------------------------
000115BC                            
000115BC                            Obj51:					; XREF: Obj_Index
000115BC 7000                       		moveq	#0,d0
000115BE 1028 0024                  		move.b	$24(a0),d0
000115C2 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
000115C6 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
000115CA 6000 F9E8                  		bra.w	MarkObjGone
000115CE                            ; ===========================================================================
000115CE 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000115D0 0000                       		dc.w Obj51_Solid-Obj51_Index
000115D2 0000                       		dc.w Obj51_Display-Obj51_Index
000115D4                            ; ===========================================================================
000115D4                            
000115D4                            Obj51_Main:				; XREF: Obj51_Index
000115D4 5428 0024                  		addq.b	#2,$24(a0)
000115D8 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000115E0 317C 42B8 0002             		move.w	#$42B8,2(a0)
000115E6 117C 0004 0001             		move.b	#4,1(a0)
000115EC 117C 0010 0019             		move.b	#$10,$19(a0)
000115F2 117C 0004 0018             		move.b	#4,$18(a0)
000115F8 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000115FE                            
000115FE                            Obj51_Solid:				; XREF: Obj51_Index
000115FE 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00011604 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0001160A 323C 001B                  		move.w	#$1B,d1
0001160E 343C 0010                  		move.w	#$10,d2
00011612 363C 0011                  		move.w	#$11,d3
00011616 3828 0008                  		move.w	8(a0),d4
0001161A 6100 FCBC                  		bsr.w	SolidObject
0001161E 0828 0003 0022             		btst	#3,$22(a0)
00011624 6600                       		bne.s	Obj51_Smash
00011626                            
00011626                            locret_FCFC:
00011626 4E75                       		rts	
00011628                            ; ===========================================================================
00011628                            
00011628                            Obj51_Smash:				; XREF: Obj51_Solid
00011628 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
0001162E 66F6                       		bne.s	locret_FCFC	; if not, branch
00011630 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00011636 08E9 0002 0022             		bset	#2,$22(a1)
0001163C 137C 000E 0016             		move.b	#$E,$16(a1)
00011642 137C 0007 0017             		move.b	#7,$17(a1)
00011648 137C 0002 001C             		move.b	#2,$1C(a1)
0001164E 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00011654 08E9 0001 0022             		bset	#1,$22(a1)
0001165A 08A9 0003 0022             		bclr	#3,$22(a1)
00011660 137C 0002 0024             		move.b	#2,$24(a1)
00011666 08A8 0003 0022             		bclr	#3,$22(a0)
0001166C 4228 0025                  		clr.b	$25(a0)
00011670 117C 0001 001A             		move.b	#1,$1A(a0)
00011676 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0001167C 7203                       		moveq	#3,d1		; set number of	fragments to 4
0001167E 343C 0038                  		move.w	#$38,d2
00011682 6100 CEE4                  		bsr.w	SmashObject
00011686 6100 DA38                  		bsr.w	SingleObjLoad
0001168A 6600                       		bne.s	Obj51_Display
0001168C 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00011690 3368 0008 0008             		move.w	8(a0),8(a1)
00011696 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001169C 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
000116A0 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000116A4 0C42 0006                  		cmpi.w	#6,d2
000116A8 6500                       		bcs.s	Obj51_Bonus
000116AA 7406                       		moveq	#6,d2
000116AC                            
000116AC                            Obj51_Bonus:
000116AC 7000                       		moveq	#0,d0
000116AE 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
000116B2 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
000116B8 6500                       		bcs.s	loc_FD98	; if not, branch
000116BA 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000116BE 740A                       		moveq	#10,d2
000116C0                            
000116C0                            loc_FD98:
000116C0 4EB9 0000 0000             		jsr	AddPoints
000116C6 E24A                       		lsr.w	#1,d2
000116C8 1342 001A                  		move.b	d2,$1A(a1)
000116CC                            
000116CC                            Obj51_Display:				; XREF: Obj51_Index
000116CC 6100 D282                  		bsr.w	SpeedToPos
000116D0 0668 0038 0012             		addi.w	#$38,$12(a0)
000116D6 6100 D292                  		bsr.w	DisplaySprite
000116DA 4A28 0001                  		tst.b	1(a0)
000116DE 6A00 D2DA                  		bpl.w	DeleteObject
000116E2 4E75                       		rts	
000116E4                            ; ===========================================================================
000116E4 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000116E8 FF00 FF00                  		dc.w $FF00, $FF00
000116EC 0200 FE00                  		dc.w $200, $FE00
000116F0 0100 FF00                  		dc.w $100, $FF00
000116F4                            
000116F4 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000116FC                            ; ---------------------------------------------------------------------------
000116FC                            ; Sprite mappings - smashable green block (MZ)
000116FC                            ; ---------------------------------------------------------------------------
000116FC                            Map_obj51:
000116FC                            	include "_maps\obj51.asm"
000116FC                            ; ---------------------------------------------------------------------------
000116FC                            ; Sprite mappings - smashable green block (MZ)
000116FC                            ; ---------------------------------------------------------------------------
000116FC 0000                       		dc.w byte_FDD8-Map_obj51
000116FE 0000                       		dc.w byte_FDE3-Map_obj51
00011700 02                         byte_FDD8:	dc.b 2
00011701 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00011706 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0001170B 04                         byte_FDE3:	dc.b 4
0001170C F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00011711 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00011716 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0001171B 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00011720                            		even
00011720                            		even
00011720                            
00011720                            ; ===========================================================================
00011720                            ; ---------------------------------------------------------------------------
00011720                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00011720                            ; ---------------------------------------------------------------------------
00011720                            
00011720                            Obj52:					; XREF: Obj_Index
00011720 7000                       		moveq	#0,d0
00011722 1028 0024                  		move.b	$24(a0),d0
00011726 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0001172A 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0001172E                            ; ===========================================================================
0001172E 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00011730 0000                       		dc.w Obj52_Platform-Obj52_Index
00011732 0000                       		dc.w Obj52_StandOn-Obj52_Index
00011734                            
00011734 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00011736 2001                       		dc.b $20, 1
00011738 2002                       		dc.b $20, 2
0001173A 4003                       		dc.b $40, 3
0001173C 3004                       		dc.b $30, 4
0001173E                            ; ===========================================================================
0001173E                            
0001173E                            Obj52_Main:				; XREF: Obj52_Index
0001173E 5428 0024                  		addq.b	#2,$24(a0)
00011742 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0001174A 317C 42B8 0002             		move.w	#$42B8,2(a0)
00011750 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011756 6600                       		bne.s	loc_FE44
00011758 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00011760 317C 43BC 0002             		move.w	#$43BC,2(a0)
00011766 117C 0007 0016             		move.b	#7,$16(a0)
0001176C                            
0001176C                            loc_FE44:
0001176C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00011772 6600                       		bne.s	loc_FE60
00011774 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0001177A 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00011780 6700                       		beq.s	loc_FE60	; if yes, branch
00011782 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00011788                            
00011788                            loc_FE60:
00011788 117C 0004 0001             		move.b	#4,1(a0)
0001178E 7000                       		moveq	#0,d0
00011790 1028 0028                  		move.b	$28(a0),d0
00011794 E648                       		lsr.w	#3,d0
00011796 0240 001E                  		andi.w	#$1E,d0
0001179A 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0001179E 115A 0019                  		move.b	(a2)+,$19(a0)
000117A2 115A 001A                  		move.b	(a2)+,$1A(a0)
000117A6 117C 0004 0018             		move.b	#4,$18(a0)
000117AC 3168 0008 0030             		move.w	8(a0),$30(a0)
000117B2 3168 000C 0032             		move.w	$C(a0),$32(a0)
000117B8 0228 000F 0028             		andi.b	#$F,$28(a0)
000117BE                            
000117BE                            Obj52_Platform:				; XREF: Obj52_Index
000117BE 6100 0000                  		bsr.w	Obj52_Move
000117C2 7200                       		moveq	#0,d1
000117C4 1228 0019                  		move.b	$19(a0),d1
000117C8 4EB9 0000 856A             		jsr	(PlatformObject).l
000117CE 6000                       		bra.s	Obj52_ChkDel
000117D0                            ; ===========================================================================
000117D0                            
000117D0                            Obj52_StandOn:				; XREF: Obj52_Index
000117D0 7200                       		moveq	#0,d1
000117D2 1228 0019                  		move.b	$19(a0),d1
000117D6 4EB9 0000 86DE             		jsr	(ExitPlatform).l
000117DC 3F28 0008                  		move.w	8(a0),-(sp)
000117E0 6100 0000                  		bsr.w	Obj52_Move
000117E4 341F                       		move.w	(sp)+,d2
000117E6 4EB9 0000 8C54             		jsr	(MvSonicOnPtfm2).l
000117EC                            
000117EC                            Obj52_ChkDel:				; XREF: Obj52_Platform
000117EC 3028 0030                  		move.w	$30(a0),d0
000117F0 0240 FF80                  		andi.w	#$FF80,d0
000117F4 3238 F700                  		move.w	($FFFFF700).w,d1
000117F8 0441 0080                  		subi.w	#$80,d1
000117FC 0241 FF80                  		andi.w	#$FF80,d1
00011800 9041                       		sub.w	d1,d0
00011802 0C40 0280                  		cmpi.w	#$280,d0
00011806 6300 D162                  		bls.w	DisplaySprite
0001180A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001180E 6700 D1AA                  		beq.w	DeleteObject		; if it's zero, don't remember object
00011812 3440                       		movea.w	d0,a2	; load address into a2
00011814 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00011818 6000 D1A0                  		bra.w	DeleteObject	; and delete object
0001181C                            ; ===========================================================================
0001181C                            
0001181C                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0001181C 7000                       		moveq	#0,d0
0001181E 1028 0028                  		move.b	$28(a0),d0
00011822 0240 000F                  		andi.w	#$F,d0
00011826 D040                       		add.w	d0,d0
00011828 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0001182C 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00011830                            ; ===========================================================================
00011830 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00011834 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00011838 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0001183C 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00011840 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00011844 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00011846                            ; ===========================================================================
00011846                            
00011846                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00011846 4E75                       		rts	
00011848                            ; ===========================================================================
00011848                            
00011848                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00011848 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001184C 323C 0060                  		move.w	#$60,d1
00011850 0828 0000 0022             		btst	#0,$22(a0)
00011856 6700                       		beq.s	loc_FF26
00011858 4440                       		neg.w	d0
0001185A D041                       		add.w	d1,d0
0001185C                            
0001185C                            loc_FF26:
0001185C 3228 0030                  		move.w	$30(a0),d1
00011860 9240                       		sub.w	d0,d1
00011862 3141 0008                  		move.w	d1,8(a0)
00011866 4E75                       		rts	
00011868                            ; ===========================================================================
00011868                            
00011868                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00011868 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
0001186E 6600                       		bne.s	Obj52_02_Wait
00011870 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011874                            
00011874                            Obj52_02_Wait:
00011874 4E75                       		rts	
00011876                            ; ===========================================================================
00011876                            
00011876                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00011876 7600                       		moveq	#0,d3
00011878 1628 0019                  		move.b	$19(a0),d3
0001187C 6100 0000                  		bsr.w	ObjHitWallRight
00011880 4A41                       		tst.w	d1		; has the platform hit a wall?
00011882 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00011884 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00011888 3168 0008 0030             		move.w	8(a0),$30(a0)
0001188E 4E75                       		rts	
00011890                            ; ===========================================================================
00011890                            
00011890                            Obj52_03_End:
00011890 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00011894 4E75                       		rts	
00011896                            ; ===========================================================================
00011896                            
00011896                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00011896 7600                       		moveq	#0,d3
00011898 1628 0019                  		move.b	$19(a0),d3
0001189C 6100 0000                  		bsr.w	ObjHitWallRight
000118A0 4A41                       		tst.w	d1		; has the platform hit a wall?
000118A2 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000118A4 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000118A8 3168 0008 0030             		move.w	8(a0),$30(a0)
000118AE 4E75                       		rts	
000118B0                            ; ===========================================================================
000118B0                            
000118B0                            Obj52_05_End:
000118B0 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000118B4 4E75                       		rts	
000118B6                            ; ===========================================================================
000118B6                            
000118B6                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000118B6 6100 D098                  		bsr.w	SpeedToPos
000118BA 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000118C0 6100 0000                  		bsr.w	ObjHitFloor
000118C4 4A41                       		tst.w	d1		; has platform hit the floor?
000118C6 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000118CA D368 000C                  		add.w	d1,$C(a0)
000118CE 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
000118D2 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
000118D6                            
000118D6                            locret_FFA0:
000118D6 4E75                       		rts	
000118D8                            ; ===========================================================================
000118D8                            
000118D8                            Obj52_Type07:				; XREF: Obj52_TypeIndex
000118D8 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
000118DC 6700                       		beq.s	Obj52_07_ChkDel
000118DE 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
000118E2                            
000118E2                            Obj52_07_ChkDel:
000118E2 588F                       		addq.l	#4,sp
000118E4 3028 0030                  		move.w	$30(a0),d0
000118E8 0240 FF80                  		andi.w	#$FF80,d0
000118EC 3238 F700                  		move.w	($FFFFF700).w,d1
000118F0 0441 0080                  		subi.w	#$80,d1
000118F4 0241 FF80                  		andi.w	#$FF80,d1
000118F8 9041                       		sub.w	d1,d0
000118FA 0C40 0280                  		cmpi.w	#$280,d0
000118FE 6200 D0BA                  		bhi.w	DeleteObject
00011902 4E75                       		rts	
00011904                            ; ===========================================================================
00011904                            
00011904                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00011904 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011908 323C 0080                  		move.w	#$80,d1
0001190C 0828 0000 0022             		btst	#0,$22(a0)
00011912 6700                       		beq.s	loc_FFE2
00011914 4440                       		neg.w	d0
00011916 D041                       		add.w	d1,d0
00011918                            
00011918                            loc_FFE2:
00011918 3228 0032                  		move.w	$32(a0),d1
0001191C 9240                       		sub.w	d0,d1
0001191E 3141 000C                  		move.w	d1,$C(a0)
00011922 4E75                       		rts	
00011924                            ; ===========================================================================
00011924                            
00011924                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00011924 7600                       		moveq	#0,d3
00011926 1628 0019                  		move.b	$19(a0),d3
0001192A D643                       		add.w	d3,d3
0001192C 7208                       		moveq	#8,d1
0001192E 0828 0000 0022             		btst	#0,$22(a0)
00011934 6700                       		beq.s	loc_10004
00011936 4441                       		neg.w	d1
00011938 4443                       		neg.w	d3
0001193A                            
0001193A                            loc_10004:
0001193A 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
0001193E 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00011940 3028 0008                  		move.w	8(a0),d0
00011944 9068 0030                  		sub.w	$30(a0),d0
00011948 B043                       		cmp.w	d3,d0
0001194A 6700                       		beq.s	Obj52_0A_Wait
0001194C D368 0008                  		add.w	d1,8(a0)	; move platform
00011950 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00011956 4E75                       		rts	
00011958                            ; ===========================================================================
00011958                            
00011958                            Obj52_0A_Wait:
00011958 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
0001195C 6600                       		bne.s	locret_1002E	; if time remains, branch
0001195E 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00011964                            
00011964                            locret_1002E:
00011964 4E75                       		rts	
00011966                            ; ===========================================================================
00011966                            
00011966                            Obj52_0A_Back:
00011966 3028 0008                  		move.w	8(a0),d0
0001196A 9068 0030                  		sub.w	$30(a0),d0
0001196E 6700                       		beq.s	Obj52_0A_Reset
00011970 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00011974 4E75                       		rts	
00011976                            ; ===========================================================================
00011976                            
00011976                            Obj52_0A_Reset:
00011976 4268 0036                  		clr.w	$36(a0)
0001197A 5328 0028                  		subq.b	#1,$28(a0)
0001197E 4E75                       		rts	
00011980                            ; ===========================================================================
00011980                            ; ---------------------------------------------------------------------------
00011980                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011980                            ; ---------------------------------------------------------------------------
00011980                            Map_obj52:
00011980                            	include "_maps\obj52mz.asm"
00011980                            ; ---------------------------------------------------------------------------
00011980                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011980                            ; ---------------------------------------------------------------------------
00011980 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00011984 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00011988 0000                       		dc.w byte_1008F-Map_obj52
0001198A 01                         byte_10054:	dc.b 1
0001198B F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011990 02                         byte_1005A:	dc.b 2
00011991 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00011996 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
0001199B 04                         byte_10065:	dc.b 4
0001199C F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000119A1 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000119A6 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000119AB 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000119B0 04                         byte_1007A:	dc.b 4
000119B1 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000119B6 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000119BB F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000119C0 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000119C5 03                         byte_1008F:	dc.b 3
000119C6 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000119CB F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000119D0 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000119D6 00                         		even
000119D6 00                         		even
000119D6                            
000119D6                            ; ---------------------------------------------------------------------------
000119D6                            ; Sprite mappings - moving block (LZ)
000119D6                            ; ---------------------------------------------------------------------------
000119D6                            Map_obj52a:
000119D6                            	include "_maps\obj52lz.asm"
000119D6                            ; ---------------------------------------------------------------------------
000119D6                            ; Sprite mappings - moving block (LZ)
000119D6                            ; ---------------------------------------------------------------------------
000119D6 0000                       		dc.w byte_100A2-Map_obj52a
000119D8 01                         byte_100A2:	dc.b 1
000119D9 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
000119DE                            		even
000119DE                            		even
000119DE                            
000119DE                            ; ===========================================================================
000119DE                            ; ---------------------------------------------------------------------------
000119DE                            ; Object 55 - Basaran enemy (MZ)
000119DE                            ; ---------------------------------------------------------------------------
000119DE                            
000119DE                            Obj55:					; XREF: Obj_Index
000119DE 7000                       		moveq	#0,d0
000119E0 1028 0024                  		move.b	$24(a0),d0
000119E4 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
000119E8 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
000119EC                            ; ===========================================================================
000119EC 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
000119EE 0000                       		dc.w Obj55_Action-Obj55_Index
000119F0                            ; ===========================================================================
000119F0                            
000119F0                            Obj55_Main:				; XREF: Obj55_Index
000119F0 5428 0024                  		addq.b	#2,$24(a0)
000119F4 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
000119FC 317C 84B8 0002             		move.w	#$84B8,2(a0)
00011A02 117C 0004 0001             		move.b	#4,1(a0)
00011A08 117C 000C 0016             		move.b	#$C,$16(a0)
00011A0E 117C 0002 0018             		move.b	#2,$18(a0)
00011A14 117C 000B 0020             		move.b	#$B,$20(a0)
00011A1A 117C 0010 0019             		move.b	#$10,$19(a0)
00011A20                            
00011A20                            Obj55_Action:				; XREF: Obj55_Index
00011A20 7000                       		moveq	#0,d0
00011A22 1028 0025                  		move.b	$25(a0),d0
00011A26 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00011A2A 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00011A2E 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00011A34 6100 9F94                  		bsr.w	AnimateSprite
00011A38 6000 F57A                  		bra.w	MarkObjGone
00011A3C                            ; ===========================================================================
00011A3C 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00011A3E 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00011A40 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00011A42 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00011A44                            ; ===========================================================================
00011A44                            
00011A44                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00011A44 343C 0080                  		move.w	#$80,d2
00011A48 6100 0000                  		bsr.w	Obj55_ChkSonic
00011A4C 6400                       		bcc.s	Obj55_NoDrop
00011A4E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011A52 3140 0036                  		move.w	d0,$36(a0)
00011A56 9068 000C                  		sub.w	$C(a0),d0
00011A5A 6500                       		bcs.s	Obj55_NoDrop
00011A5C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00011A60 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00011A62 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00011A66 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00011A68 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011A6C D007                       		add.b	d7,d0
00011A6E 0200 0007                  		andi.b	#7,d0
00011A72 6600                       		bne.s	Obj55_NoDrop
00011A74 117C 0001 001C             		move.b	#1,$1C(a0)
00011A7A 5428 0025                  		addq.b	#2,$25(a0)
00011A7E                            
00011A7E                            Obj55_NoDrop:
00011A7E 4E75                       		rts	
00011A80                            ; ===========================================================================
00011A80                            
00011A80                            Obj55_DropFly:				; XREF: Obj55_Index2
00011A80 6100 CECE                  		bsr.w	SpeedToPos
00011A84 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00011A8A 343C 0080                  		move.w	#$80,d2
00011A8E 6100 0000                  		bsr.w	Obj55_ChkSonic
00011A92 3028 0036                  		move.w	$36(a0),d0
00011A96 9068 000C                  		sub.w	$C(a0),d0
00011A9A 6500                       		bcs.s	Obj55_ChkDel
00011A9C 0C40 0010                  		cmpi.w	#$10,d0
00011AA0 6400                       		bcc.s	locret_10180
00011AA2 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00011AA6 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00011AAC 117C 0002 001C             		move.b	#2,$1C(a0)
00011AB2 5428 0025                  		addq.b	#2,$25(a0)
00011AB6                            
00011AB6                            locret_10180:
00011AB6 4E75                       		rts	
00011AB8                            ; ===========================================================================
00011AB8                            
00011AB8                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00011AB8 4A28 0001                  		tst.b	1(a0)
00011ABC 6A00 CEFC                  		bpl.w	DeleteObject
00011AC0 4E75                       		rts	
00011AC2                            ; ===========================================================================
00011AC2                            
00011AC2                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00011AC2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011AC6 0200 000F                  		andi.b	#$F,d0
00011ACA 6600                       		bne.s	loc_101A0
00011ACC 303C 00C0                  		move.w	#$C0,d0
00011AD0 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play flapping sound
00011AD6                            
00011AD6                            loc_101A0:
00011AD6 6100 CE78                  		bsr.w	SpeedToPos
00011ADA 3038 D008                  		move.w	($FFFFD008).w,d0
00011ADE 9068 0008                  		sub.w	8(a0),d0
00011AE2 6400                       		bcc.s	loc_101B0
00011AE4 4440                       		neg.w	d0
00011AE6                            
00011AE6                            loc_101B0:
00011AE6 0C40 0080                  		cmpi.w	#$80,d0
00011AEA 6500                       		bcs.s	locret_101C6
00011AEC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011AF0 D007                       		add.b	d7,d0
00011AF2 0200 0007                  		andi.b	#7,d0
00011AF6 6600                       		bne.s	locret_101C6
00011AF8 5428 0025                  		addq.b	#2,$25(a0)
00011AFC                            
00011AFC                            locret_101C6:
00011AFC 4E75                       		rts	
00011AFE                            ; ===========================================================================
00011AFE                            
00011AFE                            Obj55_FlyUp:				; XREF: Obj55_Index2
00011AFE 6100 CE50                  		bsr.w	SpeedToPos
00011B02 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00011B08 6100 0000                  		bsr.w	ObjHitCeiling
00011B0C 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00011B0E 6A00                       		bpl.s	locret_101F4	; if not, branch
00011B10 9368 000C                  		sub.w	d1,$C(a0)
00011B14 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00011B1A 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00011B1E 4268 0012                  		clr.w	$12(a0)
00011B22 4228 001C                  		clr.b	$1C(a0)
00011B26 4228 0025                  		clr.b	$25(a0)
00011B2A                            
00011B2A                            locret_101F4:
00011B2A 4E75                       		rts	
00011B2C                            ; ===========================================================================
00011B2C                            
00011B2C                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00011B2C 323C 0100                  		move.w	#$100,d1
00011B30 08E8 0000 0022             		bset	#0,$22(a0)
00011B36 3038 D008                  		move.w	($FFFFD008).w,d0
00011B3A 9068 0008                  		sub.w	8(a0),d0
00011B3E 6400                       		bcc.s	loc_10214
00011B40 4440                       		neg.w	d0
00011B42 4441                       		neg.w	d1
00011B44 08A8 0000 0022             		bclr	#0,$22(a0)
00011B4A                            
00011B4A                            loc_10214:
00011B4A B042                       		cmp.w	d2,d0
00011B4C 4E75                       		rts	
00011B4E                            ; ===========================================================================
00011B4E 6100 CE00                  		bsr.w	SpeedToPos
00011B52 6100 CE16                  		bsr.w	DisplaySprite
00011B56 4A28 0001                  		tst.b	1(a0)
00011B5A 6A00 CE5E                  		bpl.w	DeleteObject
00011B5E 4E75                       		rts	
00011B60                            ; ===========================================================================
00011B60                            Ani_obj55:
00011B60                            	include "_anim\obj55.asm"
00011B60                            ; ---------------------------------------------------------------------------
00011B60                            ; Animation script - Basaran enemy
00011B60                            ; ---------------------------------------------------------------------------
00011B60 0000                       		dc.w byte_10230-Ani_obj55
00011B62 0000                       		dc.w byte_10234-Ani_obj55
00011B64 0000                       		dc.w byte_10238-Ani_obj55
00011B66 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00011B6A 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00011B6E 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00011B74                            		even
00011B74                            		even
00011B74                            
00011B74                            ; ---------------------------------------------------------------------------
00011B74                            ; Sprite mappings - Basaran enemy (MZ)
00011B74                            ; ---------------------------------------------------------------------------
00011B74                            Map_obj55:
00011B74                            	include "_maps\obj55.asm"
00011B74                            ; ---------------------------------------------------------------------------
00011B74                            ; Sprite mappings - Basaran enemy (MZ)
00011B74                            ; ---------------------------------------------------------------------------
00011B74 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00011B78 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00011B7C 01                         byte_10246:	dc.b 1
00011B7D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00011B82 03                         byte_1024C:	dc.b 3
00011B83 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00011B88 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00011B8D 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00011B92 04                         byte_1025C:	dc.b 4
00011B93 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00011B98 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00011B9D 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00011BA2 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00011BA7 04                         byte_10271:	dc.b 4
00011BA8 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00011BAD 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00011BB2 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00011BB7 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00011BBC                            		even
00011BBC                            		even
00011BBC                            
00011BBC                            ; ===========================================================================
00011BBC                            ; ---------------------------------------------------------------------------
00011BBC                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00011BBC                            ; ---------------------------------------------------------------------------
00011BBC                            
00011BBC                            Obj56:					; XREF: Obj_Index
00011BBC 7000                       		moveq	#0,d0
00011BBE 1028 0024                  		move.b	$24(a0),d0
00011BC2 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00011BC6 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00011BCA                            ; ===========================================================================
00011BCA 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00011BCC 0000                       		dc.w Obj56_Action-Obj56_Index
00011BCE                            
00011BCE 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00011BD0 2020                       		dc.b  $20, $20
00011BD2 1020                       		dc.b  $10, $20
00011BD4 201A                       		dc.b  $20, $1A
00011BD6 1027                       		dc.b  $10, $27
00011BD8 1010                       		dc.b  $10, $10
00011BDA 0820                       		dc.b	8, $20
00011BDC 4010                       		dc.b  $40, $10
00011BDE                            ; ===========================================================================
00011BDE                            
00011BDE                            Obj56_Main:				; XREF: Obj56_Index
00011BDE 5428 0024                  		addq.b	#2,$24(a0)
00011BE2 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00011BEA 317C 4000 0002             		move.w	#$4000,2(a0)
00011BF0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011BF6 6600                       		bne.s	loc_102C8
00011BF8 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00011BFE                            
00011BFE                            loc_102C8:
00011BFE 117C 0004 0001             		move.b	#4,1(a0)
00011C04 117C 0003 0018             		move.b	#3,$18(a0)
00011C0A 7000                       		moveq	#0,d0
00011C0C 1028 0028                  		move.b	$28(a0),d0
00011C10 E648                       		lsr.w	#3,d0
00011C12 0240 000E                  		andi.w	#$E,d0
00011C16 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00011C1A 115A 0019                  		move.b	(a2)+,$19(a0)
00011C1E 1152 0016                  		move.b	(a2),$16(a0)
00011C22 E248                       		lsr.w	#1,d0
00011C24 1140 001A                  		move.b	d0,$1A(a0)
00011C28 3168 0008 0034             		move.w	8(a0),$34(a0)
00011C2E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011C34 7000                       		moveq	#0,d0
00011C36 1012                       		move.b	(a2),d0
00011C38 D040                       		add.w	d0,d0
00011C3A 3140 003A                  		move.w	d0,$3A(a0)
00011C3E 7000                       		moveq	#0,d0
00011C40 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011C46 6700                       		beq.s	loc_10332
00011C48 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00011C4C 0240 000F                  		andi.w	#$F,d0
00011C50 5140                       		subq.w	#8,d0
00011C52 6500                       		bcs.s	loc_10332
00011C54 E548                       		lsl.w	#2,d0
00011C56 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00011C5A 45F2 0000                  		lea	(a2,d0.w),a2
00011C5E 4A52                       		tst.w	(a2)
00011C60 6A00                       		bpl.s	loc_10332
00011C62 0868 0000 0022             		bchg	#0,$22(a0)
00011C68                            
00011C68                            loc_10332:
00011C68 1028 0028                  		move.b	$28(a0),d0
00011C6C 6A00                       		bpl.s	Obj56_Action
00011C6E 0200 000F                  		andi.b	#$F,d0
00011C72 1140 003C                  		move.b	d0,$3C(a0)
00011C76 117C 0005 0028             		move.b	#5,$28(a0)
00011C7C 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00011C82 6600                       		bne.s	Obj56_ChkGone
00011C84 117C 000C 0028             		move.b	#$C,$28(a0)
00011C8A 317C 0080 003A             		move.w	#$80,$3A(a0)
00011C90                            
00011C90                            Obj56_ChkGone:
00011C90 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011C94 6700                       		beq.s	Obj56_Action		; if it's zero, don't remember object
00011C96 3440                       		movea.w	d0,a2	; load address into a2
00011C98 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00011C9C 0812 0000                  		btst	#0,(a2)
00011CA0 6700                       		beq.s	Obj56_Action
00011CA2 5228 0028                  		addq.b	#1,$28(a0)
00011CA6 4268 003A                  		clr.w	$3A(a0)
00011CAA                            
00011CAA                            Obj56_Action:				; XREF: Obj56_Index
00011CAA 3F28 0008                  		move.w	8(a0),-(sp)
00011CAE 7000                       		moveq	#0,d0
00011CB0 1028 0028                  		move.b	$28(a0),d0	; get object type
00011CB4 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00011CB8 D040                       		add.w	d0,d0
00011CBA 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00011CBE 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00011CC2 381F                       		move.w	(sp)+,d4
00011CC4 4A28 0001                  		tst.b	1(a0)
00011CC8 6A00                       		bpl.s	Obj56_ChkDel
00011CCA 7200                       		moveq	#0,d1
00011CCC 1228 0019                  		move.b	$19(a0),d1
00011CD0 0641 000B                  		addi.w	#$B,d1
00011CD4 7400                       		moveq	#0,d2
00011CD6 1428 0016                  		move.b	$16(a0),d2
00011CDA 3602                       		move.w	d2,d3
00011CDC 5243                       		addq.w	#1,d3
00011CDE 6100 F5F8                  		bsr.w	SolidObject
00011CE2                            
00011CE2                            Obj56_ChkDel:
00011CE2 3028 0034                  		move.w	$34(a0),d0
00011CE6 0240 FF80                  		andi.w	#$FF80,d0
00011CEA 3238 F700                  		move.w	($FFFFF700).w,d1
00011CEE 0441 0080                  		subi.w	#$80,d1
00011CF2 0241 FF80                  		andi.w	#$FF80,d1
00011CF6 9041                       		sub.w	d1,d0
00011CF8 0C40 0280                  		cmpi.w	#$280,d0
00011CFC 6300 CC6C                  		bls.w	DisplaySprite
00011D00 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011D04 6700 CCB4                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
00011D08 3440                       		movea.w	d0,a2	; load address into a2
00011D0A 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
00011D0E 6000 CCAA                  		bra.w	DeleteObject
00011D12                            ; ===========================================================================
00011D12 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00011D16 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00011D1A 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00011D1E 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00011D22 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00011D26 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00011D2A 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00011D2E                            ; ===========================================================================
00011D2E                            
00011D2E                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00011D2E 4E75                       		rts	
00011D30                            ; ===========================================================================
00011D30                            
00011D30                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00011D30 323C 0040                  		move.w	#$40,d1
00011D34 7000                       		moveq	#0,d0
00011D36 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011D3A 6000                       		bra.s	Obj56_Move_LR
00011D3C                            ; ===========================================================================
00011D3C                            
00011D3C                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00011D3C 323C 0080                  		move.w	#$80,d1
00011D40 7000                       		moveq	#0,d0
00011D42 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011D46                            
00011D46                            Obj56_Move_LR:
00011D46 0828 0000 0022             		btst	#0,$22(a0)
00011D4C 6700                       		beq.s	loc_10416
00011D4E 4440                       		neg.w	d0
00011D50 D041                       		add.w	d1,d0
00011D52                            
00011D52                            loc_10416:
00011D52 3228 0034                  		move.w	$34(a0),d1
00011D56 9240                       		sub.w	d0,d1
00011D58 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011D5C 4E75                       		rts	
00011D5E                            ; ===========================================================================
00011D5E                            
00011D5E                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00011D5E 323C 0040                  		move.w	#$40,d1
00011D62 7000                       		moveq	#0,d0
00011D64 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011D68 6000                       		bra.s	Obj56_Move_UD
00011D6A                            ; ===========================================================================
00011D6A                            
00011D6A                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00011D6A 323C 0080                  		move.w	#$80,d1
00011D6E 7000                       		moveq	#0,d0
00011D70 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011D74                            
00011D74                            Obj56_Move_UD:
00011D74 0828 0000 0022             		btst	#0,$22(a0)
00011D7A 6700                       		beq.s	loc_10444
00011D7C 4440                       		neg.w	d0
00011D7E D041                       		add.w	d1,d0
00011D80                            
00011D80                            loc_10444:
00011D80 3228 0030                  		move.w	$30(a0),d1
00011D84 9240                       		sub.w	d0,d1
00011D86 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011D8A 4E75                       		rts	
00011D8C                            ; ===========================================================================
00011D8C                            
00011D8C                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00011D8C 4A28 0038                  		tst.b	$38(a0)
00011D90 6600                       		bne.s	loc_104A4
00011D92 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011D98 6600                       		bne.s	loc_1047A	; if not, branch
00011D9A 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00011DA0 6600                       		bne.s	loc_1047A
00011DA2 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011DA6 3038 D008                  		move.w	($FFFFD008).w,d0
00011DAA B068 0008                  		cmp.w	8(a0),d0
00011DAE 6400                       		bcc.s	loc_1047A
00011DB0 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00011DB6                            
00011DB6                            loc_1047A:
00011DB6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011DBA 7000                       		moveq	#0,d0
00011DBC 1028 003C                  		move.b	$3C(a0),d0
00011DC0 0832 0000 0000             		btst	#0,(a2,d0.w)
00011DC6 6700                       		beq.s	loc_104AE
00011DC8 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011DCE 6600                       		bne.s	loc_1049E	; if not, branch
00011DD0 0C00 0003                  		cmpi.b	#3,d0
00011DD4 6600                       		bne.s	loc_1049E
00011DD6 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011DDA                            
00011DDA                            loc_1049E:
00011DDA 117C 0001 0038             		move.b	#1,$38(a0)
00011DE0                            
00011DE0                            loc_104A4:
00011DE0 4A68 003A                  		tst.w	$3A(a0)
00011DE4 6700                       		beq.s	loc_104C8
00011DE6 5568 003A                  		subq.w	#2,$3A(a0)
00011DEA                            
00011DEA                            loc_104AE:
00011DEA 3028 003A                  		move.w	$3A(a0),d0
00011DEE 0828 0000 0022             		btst	#0,$22(a0)
00011DF4 6700                       		beq.s	loc_104BC
00011DF6 4440                       		neg.w	d0
00011DF8                            
00011DF8                            loc_104BC:
00011DF8 3228 0030                  		move.w	$30(a0),d1
00011DFC D240                       		add.w	d0,d1
00011DFE 3141 000C                  		move.w	d1,$C(a0)
00011E02 4E75                       		rts	
00011E04                            ; ===========================================================================
00011E04                            
00011E04                            loc_104C8:
00011E04 5228 0028                  		addq.b	#1,$28(a0)
00011E08 4228 0038                  		clr.b	$38(a0)
00011E0C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011E10 67D8                       		beq.s	loc_104AE		; if it's zero, don't remember object
00011E12 3440                       		movea.w	d0,a2	; load address into a2
00011E14 08D2 0000                  		bset	#0,(a2)
00011E18 60D0                       		bra.s	loc_104AE
00011E1A                            ; ===========================================================================
00011E1A                            
00011E1A                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00011E1A 4A28 0038                  		tst.b	$38(a0)
00011E1E 6600                       		bne.s	loc_10500
00011E20 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011E24 7000                       		moveq	#0,d0
00011E26 1028 003C                  		move.b	$3C(a0),d0
00011E2A 4A32 0000                  		tst.b	(a2,d0.w)
00011E2E 6A00                       		bpl.s	loc_10512
00011E30 117C 0001 0038             		move.b	#1,$38(a0)
00011E36                            
00011E36                            loc_10500:
00011E36 7000                       		moveq	#0,d0
00011E38 1028 0016                  		move.b	$16(a0),d0
00011E3C D040                       		add.w	d0,d0
00011E3E B068 003A                  		cmp.w	$3A(a0),d0
00011E42 6700                       		beq.s	loc_1052C
00011E44 5468 003A                  		addq.w	#2,$3A(a0)
00011E48                            
00011E48                            loc_10512:
00011E48 3028 003A                  		move.w	$3A(a0),d0
00011E4C 0828 0000 0022             		btst	#0,$22(a0)
00011E52 6700                       		beq.s	loc_10520
00011E54 4440                       		neg.w	d0
00011E56                            
00011E56                            loc_10520:
00011E56 3228 0030                  		move.w	$30(a0),d1
00011E5A D240                       		add.w	d0,d1
00011E5C 3141 000C                  		move.w	d1,$C(a0)
00011E60 4E75                       		rts	
00011E62                            ; ===========================================================================
00011E62                            
00011E62                            loc_1052C:
00011E62 5328 0028                  		subq.b	#1,$28(a0)
00011E66 4228 0038                  		clr.b	$38(a0)
00011E6A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011E6E 67D8                       		beq.s	loc_10512		; if it's zero, don't remember object
00011E70 3440                       		movea.w	d0,a2	; load address into a2
00011E72 0892 0000                  		bclr	#0,(a2)
00011E76 60D0                       		bra.s	loc_10512
00011E78                            ; ===========================================================================
00011E78                            
00011E78                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00011E78 4A28 0038                  		tst.b	$38(a0)
00011E7C 6600                       		bne.s	loc_1055E
00011E7E 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00011E82 6700                       		beq.s	locret_10578
00011E84 117C 0001 0038             		move.b	#1,$38(a0)
00011E8A 4268 003A                  		clr.w	$3A(a0)
00011E8E                            
00011E8E                            loc_1055E:
00011E8E 5268 0008                  		addq.w	#1,8(a0)
00011E92 3168 0008 0034             		move.w	8(a0),$34(a0)
00011E98 5268 003A                  		addq.w	#1,$3A(a0)
00011E9C 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00011EA2 6600                       		bne.s	locret_10578
00011EA4 4228 0028                  		clr.b	$28(a0)
00011EA8                            
00011EA8                            locret_10578:
00011EA8 4E75                       		rts	
00011EAA                            ; ===========================================================================
00011EAA                            
00011EAA                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00011EAA 4A28 0038                  		tst.b	$38(a0)
00011EAE 6600                       		bne.s	loc_10598
00011EB0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011EB4 7000                       		moveq	#0,d0
00011EB6 1028 003C                  		move.b	$3C(a0),d0
00011EBA 0832 0000 0000             		btst	#0,(a2,d0.w)
00011EC0 6700                       		beq.s	loc_105A2
00011EC2 117C 0001 0038             		move.b	#1,$38(a0)
00011EC8                            
00011EC8                            loc_10598:
00011EC8 4A68 003A                  		tst.w	$3A(a0)
00011ECC 6700                       		beq.s	loc_105C0
00011ECE 5568 003A                  		subq.w	#2,$3A(a0)
00011ED2                            
00011ED2                            loc_105A2:
00011ED2 3028 003A                  		move.w	$3A(a0),d0
00011ED6 0828 0000 0022             		btst	#0,$22(a0)
00011EDC 6700                       		beq.s	loc_105B4
00011EDE 4440                       		neg.w	d0
00011EE0 0640 0080                  		addi.w	#$80,d0
00011EE4                            
00011EE4                            loc_105B4:
00011EE4 3228 0034                  		move.w	$34(a0),d1
00011EE8 D240                       		add.w	d0,d1
00011EEA 3141 0008                  		move.w	d1,8(a0)
00011EEE 4E75                       		rts	
00011EF0                            ; ===========================================================================
00011EF0                            
00011EF0                            loc_105C0:
00011EF0 5228 0028                  		addq.b	#1,$28(a0)
00011EF4 4228 0038                  		clr.b	$38(a0)
00011EF8 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011EFC 67D4                       		beq.s	loc_105A2		; if it's zero, don't remember object
00011EFE 3440                       		movea.w	d0,a2	; load address into a2
00011F00 08D2 0000                  		bset	#0,(a2)
00011F04 60CC                       		bra.s	loc_105A2
00011F06                            ; ===========================================================================
00011F06                            
00011F06                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00011F06 4A28 0038                  		tst.b	$38(a0)
00011F0A 6600                       		bne.s	loc_105F8
00011F0C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011F10 7000                       		moveq	#0,d0
00011F12 1028 003C                  		move.b	$3C(a0),d0
00011F16 4A32 0000                  		tst.b	(a2,d0.w)
00011F1A 6A00                       		bpl.s	loc_10606
00011F1C 117C 0001 0038             		move.b	#1,$38(a0)
00011F22                            
00011F22                            loc_105F8:
00011F22 303C 0080                  		move.w	#$80,d0
00011F26 B068 003A                  		cmp.w	$3A(a0),d0
00011F2A 6700                       		beq.s	loc_10624
00011F2C 5468 003A                  		addq.w	#2,$3A(a0)
00011F30                            
00011F30                            loc_10606:
00011F30 3028 003A                  		move.w	$3A(a0),d0
00011F34 0828 0000 0022             		btst	#0,$22(a0)
00011F3A 6700                       		beq.s	loc_10618
00011F3C 4440                       		neg.w	d0
00011F3E 0640 0080                  		addi.w	#$80,d0
00011F42                            
00011F42                            loc_10618:
00011F42 3228 0034                  		move.w	$34(a0),d1
00011F46 D240                       		add.w	d0,d1
00011F48 3141 0008                  		move.w	d1,8(a0)
00011F4C 4E75                       		rts	
00011F4E                            ; ===========================================================================
00011F4E                            
00011F4E                            loc_10624:
00011F4E 5328 0028                  		subq.b	#1,$28(a0)
00011F52 4228 0038                  		clr.b	$38(a0)
00011F56 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011F5A 67D4                       		beq.s	loc_10606		; if it's zero, don't remember object
00011F5C 3440                       		movea.w	d0,a2	; load address into a2
00011F5E 0892 0000                  		bclr	#0,(a2)
00011F62 60CC                       		bra.s	loc_10606
00011F64                            ; ===========================================================================
00011F64                            
00011F64                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00011F64 323C 0010                  		move.w	#$10,d1
00011F68 7000                       		moveq	#0,d0
00011F6A 1038 FE88                  		move.b	($FFFFFE88).w,d0
00011F6E E248                       		lsr.w	#1,d0
00011F70 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00011F74 6000                       		bra.s	Obj56_Move_Sqr
00011F76                            ; ===========================================================================
00011F76                            
00011F76                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00011F76 323C 0030                  		move.w	#$30,d1
00011F7A 7000                       		moveq	#0,d0
00011F7C 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00011F80 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00011F84 6000                       		bra.s	Obj56_Move_Sqr
00011F86                            ; ===========================================================================
00011F86                            
00011F86                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00011F86 323C 0050                  		move.w	#$50,d1
00011F8A 7000                       		moveq	#0,d0
00011F8C 1038 FE90                  		move.b	($FFFFFE90).w,d0
00011F90 3638 FE92                  		move.w	($FFFFFE92).w,d3
00011F94 6000                       		bra.s	Obj56_Move_Sqr
00011F96                            ; ===========================================================================
00011F96                            
00011F96                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00011F96 323C 0070                  		move.w	#$70,d1
00011F9A 7000                       		moveq	#0,d0
00011F9C 1038 FE94                  		move.b	($FFFFFE94).w,d0
00011FA0 3638 FE96                  		move.w	($FFFFFE96).w,d3
00011FA4                            
00011FA4                            Obj56_Move_Sqr:
00011FA4 4A43                       		tst.w	d3
00011FA6 6600                       		bne.s	loc_1068E
00011FA8 5228 0022                  		addq.b	#1,$22(a0)
00011FAC 0228 0003 0022             		andi.b	#3,$22(a0)
00011FB2                            
00011FB2                            loc_1068E:
00011FB2 1428 0022                  		move.b	$22(a0),d2
00011FB6 0202 0003                  		andi.b	#3,d2
00011FBA 6600                       		bne.s	loc_106AE
00011FBC 9041                       		sub.w	d1,d0
00011FBE D068 0034                  		add.w	$34(a0),d0
00011FC2 3140 0008                  		move.w	d0,8(a0)
00011FC6 4441                       		neg.w	d1
00011FC8 D268 0030                  		add.w	$30(a0),d1
00011FCC 3141 000C                  		move.w	d1,$C(a0)
00011FD0 4E75                       		rts	
00011FD2                            ; ===========================================================================
00011FD2                            
00011FD2                            loc_106AE:
00011FD2 5302                       		subq.b	#1,d2
00011FD4 6600                       		bne.s	loc_106CC
00011FD6 5341                       		subq.w	#1,d1
00011FD8 9041                       		sub.w	d1,d0
00011FDA 4440                       		neg.w	d0
00011FDC D068 0030                  		add.w	$30(a0),d0
00011FE0 3140 000C                  		move.w	d0,$C(a0)
00011FE4 5241                       		addq.w	#1,d1
00011FE6 D268 0034                  		add.w	$34(a0),d1
00011FEA 3141 0008                  		move.w	d1,8(a0)
00011FEE 4E75                       		rts	
00011FF0                            ; ===========================================================================
00011FF0                            
00011FF0                            loc_106CC:
00011FF0 5302                       		subq.b	#1,d2
00011FF2 6600                       		bne.s	loc_106EA
00011FF4 5341                       		subq.w	#1,d1
00011FF6 9041                       		sub.w	d1,d0
00011FF8 4440                       		neg.w	d0
00011FFA D068 0034                  		add.w	$34(a0),d0
00011FFE 3140 0008                  		move.w	d0,8(a0)
00012002 5241                       		addq.w	#1,d1
00012004 D268 0030                  		add.w	$30(a0),d1
00012008 3141 000C                  		move.w	d1,$C(a0)
0001200C 4E75                       		rts	
0001200E                            ; ===========================================================================
0001200E                            
0001200E                            loc_106EA:
0001200E 9041                       		sub.w	d1,d0
00012010 D068 0030                  		add.w	$30(a0),d0
00012014 3140 000C                  		move.w	d0,$C(a0)
00012018 4441                       		neg.w	d1
0001201A D268 0034                  		add.w	$34(a0),d1
0001201E 3141 0008                  		move.w	d1,8(a0)
00012022 4E75                       		rts	
00012024                            ; ===========================================================================
00012024                            ; ---------------------------------------------------------------------------
00012024                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00012024                            ; ---------------------------------------------------------------------------
00012024                            Map_obj56:
00012024                            	include "_maps\obj56.asm"
00012024                            ; ---------------------------------------------------------------------------
00012024                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00012024                            ; ---------------------------------------------------------------------------
00012024 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00012028 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
0001202C 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00012030 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00012034 01                         byte_10710:	dc.b 1
00012035 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
0001203A 04                         byte_10716:	dc.b 4
0001203B E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00012040 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00012045 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
0001204A 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
0001204F 02                         byte_1072B:	dc.b 2
00012050 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00012055 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
0001205A 04                         byte_10736:	dc.b 4
0001205B E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00012060 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00012065 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
0001206A 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
0001206F 03                         byte_1074B:	dc.b 3
00012070 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00012075 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
0001207A 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
0001207F 01                         byte_1075B:	dc.b 1
00012080 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00012085 02                         byte_10761:	dc.b 2
00012086 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001208B 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012090 04                         byte_1076C:	dc.b 4
00012091 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00012096 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
0001209B F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
000120A0 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
000120A6 00                         		even
000120A6 00                         		even
000120A6                            
000120A6                            ; ===========================================================================
000120A6                            ; ---------------------------------------------------------------------------
000120A6                            ; Object 57 - spiked balls (SYZ, LZ)
000120A6                            ; ---------------------------------------------------------------------------
000120A6                            
000120A6                            Obj57:					; XREF: Obj_Index
000120A6 7000                       		moveq	#0,d0
000120A8 1028 0024                  		move.b	$24(a0),d0
000120AC 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
000120B0 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
000120B4                            ; ===========================================================================
000120B4 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
000120B6 0000                       		dc.w Obj57_Move-Obj57_Index
000120B8 0000                       		dc.w Obj57_Display-Obj57_Index
000120BA                            ; ===========================================================================
000120BA                            
000120BA                            Obj57_Main:				; XREF: Obj57_Index
000120BA 5428 0024                  		addq.b	#2,$24(a0)
000120BE 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
000120C6 317C 03BA 0002             		move.w	#$3BA,2(a0)
000120CC 117C 0004 0001             		move.b	#4,1(a0)
000120D2 117C 0004 0018             		move.b	#4,$18(a0)
000120D8 117C 0008 0019             		move.b	#8,$19(a0)
000120DE 3168 0008 003A             		move.w	8(a0),$3A(a0)
000120E4 3168 000C 0038             		move.w	$C(a0),$38(a0)
000120EA 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
000120F0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000120F6 6600                       		bne.s	loc_107E8
000120F8 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
000120FE 317C 0310 0002             		move.w	#$310,2(a0)
00012104 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
0001210C                            
0001210C                            loc_107E8:
0001210C 1228 0028                  		move.b	$28(a0),d1	; get object type
00012110 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012114 4881                       		ext.w	d1
00012116 E741                       		asl.w	#3,d1		; multiply by 8
00012118 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
0001211C 1028 0022                  		move.b	$22(a0),d0
00012120 E418                       		ror.b	#2,d0
00012122 0200 00C0                  		andi.b	#-$40,d0
00012126 1140 0026                  		move.b	d0,$26(a0)
0001212A 45E8 0029                  		lea	$29(a0),a2
0001212E 1228 0028                  		move.b	$28(a0),d1	; get object type
00012132 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00012136 14FC 0000                  		move.b	#0,(a2)+
0001213A 3601                       		move.w	d1,d3
0001213C E94B                       		lsl.w	#4,d3
0001213E 1143 003C                  		move.b	d3,$3C(a0)
00012142 5341                       		subq.w	#1,d1		; set chain length (type-1)
00012144 6500                       		bcs.s	loc_10894
00012146 0828 0003 0028             		btst	#3,$28(a0)
0001214C 6700                       		beq.s	Obj57_MakeChain
0001214E 5341                       		subq.w	#1,d1
00012150 6500                       		bcs.s	loc_10894
00012152                            
00012152                            Obj57_MakeChain:
00012152 6100 CF6C                  		bsr.w	SingleObjLoad
00012156 6600                       		bne.s	loc_10894
00012158 5228 0029                  		addq.b	#1,$29(a0)
0001215C 3A09                       		move.w	a1,d5
0001215E 0445 D000                  		subi.w	#-$3000,d5
00012162 EC4D                       		lsr.w	#6,d5
00012164 0245 007F                  		andi.w	#$7F,d5
00012168 14C5                       		move.b	d5,(a2)+
0001216A 137C 0004 0024             		move.b	#4,$24(a1)
00012170 1290                       		move.b	0(a0),0(a1)
00012172 2368 0004 0004             		move.l	4(a0),4(a1)
00012178 3368 0002 0002             		move.w	2(a0),2(a1)
0001217E 1368 0001 0001             		move.b	1(a0),1(a1)
00012184 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001218A 1368 0019 0019             		move.b	$19(a0),$19(a1)
00012190 1368 0020 0020             		move.b	$20(a0),$20(a1)
00012196 0403 0010                  		subi.b	#$10,d3
0001219A 1343 003C                  		move.b	d3,$3C(a1)
0001219E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000121A4 6600                       		bne.s	loc_10890
000121A6 4A03                       		tst.b	d3
000121A8 6600                       		bne.s	loc_10890
000121AA 137C 0002 001A             		move.b	#2,$1A(a1)
000121B0                            
000121B0                            loc_10890:
000121B0 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
000121B4                            
000121B4                            loc_10894:
000121B4 3A08                       		move.w	a0,d5
000121B6 0445 D000                  		subi.w	#-$3000,d5
000121BA EC4D                       		lsr.w	#6,d5
000121BC 0245 007F                  		andi.w	#$7F,d5
000121C0 14C5                       		move.b	d5,(a2)+
000121C2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000121C8 6600                       		bne.s	Obj57_Move
000121CA 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
000121D0 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000121D6                            
000121D6                            Obj57_Move:				; XREF: Obj57_Index
000121D6 6100 0000                  		bsr.w	Obj57_MoveSub
000121DA 6000 0000                  		bra.w	Obj57_ChkDel
000121DE                            ; ===========================================================================
000121DE                            
000121DE                            Obj57_MoveSub:				; XREF: Obj57_Move
000121DE 3028 003E                  		move.w	$3E(a0),d0
000121E2 D168 0026                  		add.w	d0,$26(a0)
000121E6 1028 0026                  		move.b	$26(a0),d0
000121EA 4EB9 0000 29F6             		jsr	(CalcSine).l
000121F0 3428 0038                  		move.w	$38(a0),d2
000121F4 3628 003A                  		move.w	$3A(a0),d3
000121F8 45E8 0029                  		lea	$29(a0),a2
000121FC 7C00                       		moveq	#0,d6
000121FE 1C1A                       		move.b	(a2)+,d6
00012200                            
00012200                            Obj57_MoveLoop:
00012200 7800                       		moveq	#0,d4
00012202 181A                       		move.b	(a2)+,d4
00012204 ED4C                       		lsl.w	#6,d4
00012206 0684 00FF D000             		addi.l	#$FFD000,d4
0001220C 2244                       		movea.l	d4,a1
0001220E 7800                       		moveq	#0,d4
00012210 1829 003C                  		move.b	$3C(a1),d4
00012214 2A04                       		move.l	d4,d5
00012216 C9C0                       		muls.w	d0,d4
00012218 E084                       		asr.l	#8,d4
0001221A CBC1                       		muls.w	d1,d5
0001221C E085                       		asr.l	#8,d5
0001221E D842                       		add.w	d2,d4
00012220 DA43                       		add.w	d3,d5
00012222 3344 000C                  		move.w	d4,$C(a1)
00012226 3345 0008                  		move.w	d5,8(a1)
0001222A 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
0001222E 4E75                       		rts	
00012230                            ; ===========================================================================
00012230                            
00012230                            Obj57_ChkDel:				; XREF: Obj57_Move
00012230 3028 003A                  		move.w	$3A(a0),d0
00012234 0240 FF80                  		andi.w	#$FF80,d0
00012238 3238 F700                  		move.w	($FFFFF700).w,d1
0001223C 0441 0080                  		subi.w	#$80,d1
00012240 0241 FF80                  		andi.w	#$FF80,d1
00012244 9041                       		sub.w	d1,d0
00012246 0C40 0280                  		cmpi.w	#$280,d0
0001224A 6300 C71E                  		bls.w	DisplaySprite
0001224E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012252 6700                       		beq.s	Obj57_Delete	; if it's zero, object was placed in debug mode
00012254 3440                       		movea.w	d0,a2	; load address into a2
00012256 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
0001225A                            ; ===========================================================================
0001225A                            
0001225A                            Obj57_Delete:				; XREF: Obj57_ChkDel
0001225A 7400                       		moveq	#0,d2
0001225C 45E8 0029                  		lea	$29(a0),a2
00012260 141A                       		move.b	(a2)+,d2
00012262                            
00012262                            Obj57_DelLoop:
00012262 7000                       		moveq	#0,d0
00012264 101A                       		move.b	(a2)+,d0
00012266 ED48                       		lsl.w	#6,d0
00012268 0680 00FF D000             		addi.l	#$FFD000,d0
0001226E 2240                       		movea.l	d0,a1
00012270 6100 C74A                  		bsr.w	DeleteObject2
00012274 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00012278                            
00012278 4E75                       		rts	
0001227A                            ; ===========================================================================
0001227A                            
0001227A                            Obj57_Display:				; XREF: Obj57_Index
0001227A 6000 C6EE                  		bra.w	DisplaySprite
0001227E                            ; ===========================================================================
0001227E                            ; ---------------------------------------------------------------------------
0001227E                            ; Sprite mappings - chain of spiked balls (SYZ)
0001227E                            ; ---------------------------------------------------------------------------
0001227E                            Map_obj57:
0001227E                            	include "_maps\obj57syz.asm"
0001227E                            ; ---------------------------------------------------------------------------
0001227E                            ; Sprite mappings - chain of spiked balls (SYZ)
0001227E                            ; ---------------------------------------------------------------------------
0001227E 0000                       		dc.w byte_10958-Map_obj57
00012280 01                         byte_10958:	dc.b 1
00012281 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012286                            		even
00012286                            		even
00012286                            
00012286                            ; ---------------------------------------------------------------------------
00012286                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012286                            ; ---------------------------------------------------------------------------
00012286                            Map_obj57a:
00012286                            	include "_maps\obj57lz.asm"
00012286                            ; ---------------------------------------------------------------------------
00012286                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012286                            ; ---------------------------------------------------------------------------
00012286 0000                       		dc.w byte_10964-Map_obj57a
00012288 0000                       		dc.w byte_1096A-Map_obj57a
0001228A 0000                       		dc.w byte_10970-Map_obj57a
0001228C 01                         byte_10964:	dc.b 1
0001228D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012292 01                         byte_1096A:	dc.b 1
00012293 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00012298 01                         byte_10970:	dc.b 1
00012299 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
0001229E                            		even
0001229E                            		even
0001229E                            
0001229E                            ; ===========================================================================
0001229E                            ; ---------------------------------------------------------------------------
0001229E                            ; Object 58 - giant spiked balls (SYZ)
0001229E                            ; ---------------------------------------------------------------------------
0001229E                            
0001229E                            Obj58:					; XREF: Obj_Index
0001229E 7000                       		moveq	#0,d0
000122A0 1028 0024                  		move.b	$24(a0),d0
000122A4 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
000122A8 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
000122AC                            ; ===========================================================================
000122AC 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
000122AE 0000                       		dc.w Obj58_Move-Obj58_Index
000122B0                            ; ===========================================================================
000122B0                            
000122B0                            Obj58_Main:				; XREF: Obj58_Index
000122B0 5428 0024                  		addq.b	#2,$24(a0)
000122B4 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
000122BC 317C 0396 0002             		move.w	#$396,2(a0)
000122C2 117C 0004 0001             		move.b	#4,1(a0)
000122C8 117C 0004 0018             		move.b	#4,$18(a0)
000122CE 117C 0018 0019             		move.b	#$18,$19(a0)
000122D4 3168 0008 003A             		move.w	8(a0),$3A(a0)
000122DA 3168 000C 0038             		move.w	$C(a0),$38(a0)
000122E0 117C 0086 0020             		move.b	#$86,$20(a0)
000122E6 1228 0028                  		move.b	$28(a0),d1	; get object type
000122EA 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000122EE 4881                       		ext.w	d1
000122F0 E741                       		asl.w	#3,d1		; multiply by 8
000122F2 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
000122F6 1028 0022                  		move.b	$22(a0),d0
000122FA E418                       		ror.b	#2,d0
000122FC 0200 00C0                  		andi.b	#$C0,d0
00012300 1140 0026                  		move.b	d0,$26(a0)
00012304 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
0001230A                            
0001230A                            Obj58_Move:				; XREF: Obj58_Index
0001230A 7000                       		moveq	#0,d0
0001230C 1028 0028                  		move.b	$28(a0),d0	; get object type
00012310 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00012314 D040                       		add.w	d0,d0
00012316 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
0001231A 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
0001231E 3028 003A                  		move.w	$3A(a0),d0
00012322 0240 FF80                  		andi.w	#$FF80,d0
00012326 3238 F700                  		move.w	($FFFFF700).w,d1
0001232A 0441 0080                  		subi.w	#$80,d1
0001232E 0241 FF80                  		andi.w	#$FF80,d1
00012332 9041                       		sub.w	d1,d0
00012334 0C40 0280                  		cmpi.w	#$280,d0
00012338 6300 C630                  		bls.w	DisplaySprite
0001233C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012340 6700 C678                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
00012344 3440                       		movea.w	d0,a2	; load address into a2
00012346 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
0001234A 6000 C66E                  		bra.w	DeleteObject
0001234E                            ; ===========================================================================
0001234E 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00012350 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00012352 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00012354 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00012356                            ; ===========================================================================
00012356                            
00012356                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00012356 4E75                       		rts	
00012358                            ; ===========================================================================
00012358                            
00012358                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00012358 323C 0060                  		move.w	#$60,d1
0001235C 7000                       		moveq	#0,d0
0001235E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00012362 0828 0000 0022             		btst	#0,$22(a0)
00012368 6700                       		beq.s	loc_10A38
0001236A 4440                       		neg.w	d0
0001236C D041                       		add.w	d1,d0
0001236E                            
0001236E                            loc_10A38:
0001236E 3228 003A                  		move.w	$3A(a0),d1
00012372 9240                       		sub.w	d0,d1
00012374 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00012378 4E75                       		rts	
0001237A                            ; ===========================================================================
0001237A                            
0001237A                            Obj58_Type02:				; XREF: Obj58_TypeIndex
0001237A 323C 0060                  		move.w	#$60,d1
0001237E 7000                       		moveq	#0,d0
00012380 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00012384 0828 0000 0022             		btst	#0,$22(a0)
0001238A 6700                       		beq.s	loc_10A5C
0001238C 4440                       		neg.w	d0
0001238E 0640 0080                  		addi.w	#$80,d0
00012392                            
00012392                            loc_10A5C:
00012392 3228 0038                  		move.w	$38(a0),d1
00012396 9240                       		sub.w	d0,d1
00012398 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
0001239C 4E75                       		rts	
0001239E                            ; ===========================================================================
0001239E                            
0001239E                            Obj58_Type03:				; XREF: Obj58_TypeIndex
0001239E 3028 003E                  		move.w	$3E(a0),d0
000123A2 D168 0026                  		add.w	d0,$26(a0)
000123A6 1028 0026                  		move.b	$26(a0),d0
000123AA 4EB9 0000 29F6             		jsr	(CalcSine).l
000123B0 3428 0038                  		move.w	$38(a0),d2
000123B4 3628 003A                  		move.w	$3A(a0),d3
000123B8 7800                       		moveq	#0,d4
000123BA 1828 003C                  		move.b	$3C(a0),d4
000123BE 2A04                       		move.l	d4,d5
000123C0 C9C0                       		muls.w	d0,d4
000123C2 E084                       		asr.l	#8,d4
000123C4 CBC1                       		muls.w	d1,d5
000123C6 E085                       		asr.l	#8,d5
000123C8 D842                       		add.w	d2,d4
000123CA DA43                       		add.w	d3,d5
000123CC 3144 000C                  		move.w	d4,$C(a0)
000123D0 3145 0008                  		move.w	d5,8(a0)
000123D4 4E75                       		rts	
000123D6                            ; ===========================================================================
000123D6                            ; ---------------------------------------------------------------------------
000123D6                            ; Sprite mappings - SBZ	spiked ball on a chain
000123D6                            ; ---------------------------------------------------------------------------
000123D6                            Map_obj15b:
000123D6                            	include "_maps\obj15sbz.asm"
000123D6                            ; ---------------------------------------------------------------------------
000123D6                            ; Sprite mappings - spiked ball on a chain (SBZ)
000123D6                            ; ---------------------------------------------------------------------------
000123D6 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
000123DA 0000                       		dc.w byte_10AC6-Map_obj15b
000123DC 05                         byte_10AA6:	dc.b 5
000123DD E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
000123E2 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
000123E7 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
000123EC F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000123F1 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000123F6 01                         byte_10AC0:	dc.b 1
000123F7 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000123FC 02                         byte_10AC6:	dc.b 2
000123FD F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00012402 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00012408 00                         		even
00012408 00                         		even
00012408                            
00012408                            ; ===========================================================================
00012408                            ; ---------------------------------------------------------------------------
00012408                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00012408                            ; ---------------------------------------------------------------------------
00012408                            
00012408                            Obj59:					; XREF: Obj_Index
00012408 7000                       		moveq	#0,d0
0001240A 1028 0024                  		move.b	$24(a0),d0
0001240E 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00012412 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00012416 3028 0032                  		move.w	$32(a0),d0
0001241A 0240 FF80                  		andi.w	#$FF80,d0
0001241E 3238 F700                  		move.w	($FFFFF700).w,d1
00012422 0441 0080                  		subi.w	#$80,d1
00012426 0241 FF80                  		andi.w	#$FF80,d1
0001242A 9041                       		sub.w	d1,d0
0001242C 0C40 0280                  		cmpi.w	#$280,d0
00012430 6300 C538                  		bls.w	DisplaySprite
00012434 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012438 6700 C580                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
0001243C 3440                       		movea.w	d0,a2	; load address into a2
0001243E 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
00012442 6000 C576                  		bra.w	DeleteObject
00012446                            ; ===========================================================================
00012446 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00012448 0000                       		dc.w Obj59_Platform-Obj59_Index
0001244A 0000                       		dc.w Obj59_Action-Obj59_Index
0001244C 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
0001244E                            
0001244E 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00012450                            
00012450 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00012452 2001                       		dc.b $20, 1
00012454 3401                       		dc.b $34, 1
00012456 1003                       		dc.b $10, 3
00012458 2003                       		dc.b $20, 3
0001245A 3403                       		dc.b $34, 3
0001245C 1401                       		dc.b $14, 1
0001245E 2401                       		dc.b $24, 1
00012460 2C01                       		dc.b $2C, 1
00012462 1403                       		dc.b $14, 3
00012464 2403                       		dc.b $24, 3
00012466 2C03                       		dc.b $2C, 3
00012468 2005                       		dc.b $20, 5
0001246A 2007                       		dc.b $20, 7
0001246C 3009                       		dc.b $30, 9
0001246E                            ; ===========================================================================
0001246E                            
0001246E                            Obj59_Main:				; XREF: Obj59_Index
0001246E 5428 0024                  		addq.b	#2,$24(a0)
00012472 7000                       		moveq	#0,d0
00012474 1028 0028                  		move.b	$28(a0),d0
00012478 6A00                       		bpl.s	Obj59_Main2
0001247A 5828 0024                  		addq.b	#4,$24(a0)
0001247E 0240 007F                  		andi.w	#$7F,d0
00012482 C0FC 0006                  		mulu.w	#6,d0
00012486 3140 003C                  		move.w	d0,$3C(a0)
0001248A 3140 003E                  		move.w	d0,$3E(a0)
0001248E 588F                       		addq.l	#4,sp
00012490 4E75                       		rts	
00012492                            ; ===========================================================================
00012492                            
00012492                            Obj59_Main2:
00012492 E648                       		lsr.w	#3,d0
00012494 0240 001E                  		andi.w	#$1E,d0
00012498 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
0001249C 115A 0019                  		move.b	(a2)+,$19(a0)
000124A0 115A 001A                  		move.b	(a2)+,$1A(a0)
000124A4 7000                       		moveq	#0,d0
000124A6 1028 0028                  		move.b	$28(a0),d0
000124AA D040                       		add.w	d0,d0
000124AC 0240 001E                  		andi.w	#$1E,d0
000124B0 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
000124B4 101A                       		move.b	(a2)+,d0
000124B6 E548                       		lsl.w	#2,d0
000124B8 3140 003C                  		move.w	d0,$3C(a0)
000124BC 115A 0028                  		move.b	(a2)+,$28(a0)
000124C0 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000124C8 317C 4000 0002             		move.w	#$4000,2(a0)
000124CE 117C 0004 0001             		move.b	#4,1(a0)
000124D4 117C 0004 0018             		move.b	#4,$18(a0)
000124DA 3168 0008 0032             		move.w	8(a0),$32(a0)
000124E0 3168 000C 0030             		move.w	$C(a0),$30(a0)
000124E6                            
000124E6                            Obj59_Platform:				; XREF: Obj59_Index
000124E6 7200                       		moveq	#0,d1
000124E8 1228 0019                  		move.b	$19(a0),d1
000124EC 4EB9 0000 856A             		jsr	(PlatformObject).l
000124F2 6000 0000                  		bra.w	Obj59_Types
000124F6                            ; ===========================================================================
000124F6                            
000124F6                            Obj59_Action:				; XREF: Obj59_Index
000124F6 7200                       		moveq	#0,d1
000124F8 1228 0019                  		move.b	$19(a0),d1
000124FC 4EB9 0000 86DE             		jsr	(ExitPlatform).l
00012502 3F28 0008                  		move.w	8(a0),-(sp)
00012506 6100 0000                  		bsr.w	Obj59_Types
0001250A 341F                       		move.w	(sp)+,d2
0001250C 4A10                       		tst.b	0(a0)
0001250E 6700                       		beq.s	locret_10BD4
00012510 4EF9 0000 8C54             		jmp	(MvSonicOnPtfm2).l
00012516                            ; ===========================================================================
00012516                            
00012516                            locret_10BD4:
00012516 4E75                       		rts	
00012518                            ; ===========================================================================
00012518                            
00012518                            Obj59_Types:
00012518 7000                       		moveq	#0,d0
0001251A 1028 0028                  		move.b	$28(a0),d0
0001251E 0240 000F                  		andi.w	#$F,d0
00012522 D040                       		add.w	d0,d0
00012524 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00012528 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
0001252C                            ; ===========================================================================
0001252C 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00012530 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00012534 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00012538 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001253C 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00012540                            ; ===========================================================================
00012540                            
00012540                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00012540 4E75                       		rts	
00012542                            ; ===========================================================================
00012542                            
00012542                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00012542 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00012548 6600                       		bne.s	locret_10C0C
0001254A 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001254E                            
0001254E                            locret_10C0C:
0001254E 4E75                       		rts	
00012550                            ; ===========================================================================
00012550                            
00012550                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00012550 6100 0000                  		bsr.w	Obj59_Move
00012554 3028 0034                  		move.w	$34(a0),d0
00012558 4440                       		neg.w	d0
0001255A D068 0030                  		add.w	$30(a0),d0
0001255E 3140 000C                  		move.w	d0,$C(a0)
00012562 4E75                       		rts	
00012564                            ; ===========================================================================
00012564                            
00012564                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00012564 6100 0000                  		bsr.w	Obj59_Move
00012568 3028 0034                  		move.w	$34(a0),d0
0001256C D068 0030                  		add.w	$30(a0),d0
00012570 3140 000C                  		move.w	d0,$C(a0)
00012574 4E75                       		rts	
00012576                            ; ===========================================================================
00012576                            
00012576                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00012576 6100 0000                  		bsr.w	Obj59_Move
0001257A 3028 0034                  		move.w	$34(a0),d0
0001257E E240                       		asr.w	#1,d0
00012580 4440                       		neg.w	d0
00012582 D068 0030                  		add.w	$30(a0),d0
00012586 3140 000C                  		move.w	d0,$C(a0)
0001258A 3028 0034                  		move.w	$34(a0),d0
0001258E D068 0032                  		add.w	$32(a0),d0
00012592 3140 0008                  		move.w	d0,8(a0)
00012596 4E75                       		rts	
00012598                            ; ===========================================================================
00012598                            
00012598                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00012598 6100 0000                  		bsr.w	Obj59_Move
0001259C 3028 0034                  		move.w	$34(a0),d0
000125A0 E240                       		asr.w	#1,d0
000125A2 D068 0030                  		add.w	$30(a0),d0
000125A6 3140 000C                  		move.w	d0,$C(a0)
000125AA 3028 0034                  		move.w	$34(a0),d0
000125AE 4440                       		neg.w	d0
000125B0 D068 0032                  		add.w	$32(a0),d0
000125B4 3140 0008                  		move.w	d0,8(a0)
000125B8 4E75                       		rts	
000125BA                            ; ===========================================================================
000125BA                            
000125BA                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000125BA 6100 0000                  		bsr.w	Obj59_Move
000125BE 3028 0034                  		move.w	$34(a0),d0
000125C2 4440                       		neg.w	d0
000125C4 D068 0030                  		add.w	$30(a0),d0
000125C8 3140 000C                  		move.w	d0,$C(a0)
000125CC 4A28 0028                  		tst.b	$28(a0)
000125D0 6700 0000                  		beq.w	loc_10C94
000125D4 4E75                       		rts	
000125D6                            ; ===========================================================================
000125D6                            
000125D6                            loc_10C94:
000125D6 0828 0003 0022             		btst	#3,$22(a0)
000125DC 6700                       		beq.s	Obj59_Delete
000125DE 08E9 0001 0022             		bset	#1,$22(a1)
000125E4 08A9 0003 0022             		bclr	#3,$22(a1)
000125EA 137C 0002 0024             		move.b	#2,$24(a1)
000125F0                            
000125F0                            Obj59_Delete:
000125F0 6000 C3C8                  		bra.w	DeleteObject
000125F4                            
000125F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000125F4                            
000125F4                            
000125F4                            Obj59_Move:				; XREF: Obj59_Type02; et al
000125F4 3028 0038                  		move.w	$38(a0),d0
000125F8 4A28 003A                  		tst.b	$3A(a0)
000125FC 6600                       		bne.s	loc_10CC8
000125FE 0C40 0800                  		cmpi.w	#$800,d0
00012602 6400                       		bcc.s	loc_10CD0
00012604 0640 0010                  		addi.w	#$10,d0
00012608 6000                       		bra.s	loc_10CD0
0001260A                            ; ===========================================================================
0001260A                            
0001260A                            loc_10CC8:
0001260A 4A40                       		tst.w	d0
0001260C 6700                       		beq.s	loc_10CD0
0001260E 0440 0010                  		subi.w	#$10,d0
00012612                            
00012612                            loc_10CD0:
00012612 3140 0038                  		move.w	d0,$38(a0)
00012616 48C0                       		ext.l	d0
00012618 E180                       		asl.l	#8,d0
0001261A D0A8 0034                  		add.l	$34(a0),d0
0001261E 2140 0034                  		move.l	d0,$34(a0)
00012622 4840                       		swap	d0
00012624 3428 003C                  		move.w	$3C(a0),d2
00012628 B042                       		cmp.w	d2,d0
0001262A 6300                       		bls.s	loc_10CF0
0001262C 117C 0001 003A             		move.b	#1,$3A(a0)
00012632                            
00012632                            loc_10CF0:
00012632 D442                       		add.w	d2,d2
00012634 B042                       		cmp.w	d2,d0
00012636 6600                       		bne.s	locret_10CFA
00012638 4228 0028                  		clr.b	$28(a0)
0001263C                            
0001263C                            locret_10CFA:
0001263C 4E75                       		rts	
0001263E                            ; End of function Obj59_Move
0001263E                            
0001263E                            ; ===========================================================================
0001263E                            
0001263E                            Obj59_MakeMulti:			; XREF: Obj59_Index
0001263E 5368 003C                  		subq.w	#1,$3C(a0)
00012642 6600                       		bne.s	Obj59_ChkDel
00012644 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
0001264A 6100 CA74                  		bsr.w	SingleObjLoad
0001264E 6600                       		bne.s	Obj59_ChkDel
00012650 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00012654 3368 0008 0008             		move.w	8(a0),8(a1)
0001265A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012660 137C 000E 0028             		move.b	#$E,$28(a1)
00012666                            
00012666                            Obj59_ChkDel:
00012666 588F                       		addq.l	#4,sp
00012668 3028 0008                  		move.w	8(a0),d0
0001266C 0240 FF80                  		andi.w	#$FF80,d0
00012670 3238 F700                  		move.w	($FFFFF700).w,d1
00012674 0441 0080                  		subi.w	#$80,d1
00012678 0241 FF80                  		andi.w	#$FF80,d1
0001267C 9041                       		sub.w	d1,d0
0001267E 0C40 0280                  		cmpi.w	#$280,d0
00012682 6200 C336                  		bhi.w	DeleteObject
00012686 4E75                       		rts	
00012688                            ; ===========================================================================
00012688                            ; ---------------------------------------------------------------------------
00012688                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00012688                            ; ---------------------------------------------------------------------------
00012688                            Map_obj59:
00012688                            	include "_maps\obj59.asm"
00012688                            ; ---------------------------------------------------------------------------
00012688                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00012688                            ; ---------------------------------------------------------------------------
00012688 0000                       		dc.w byte_10D4A-Map_obj59
0001268A 03                         byte_10D4A:	dc.b 3
0001268B F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00012690 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00012695 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001269A                            		even
0001269A                            		even
0001269A                            
0001269A                            ; ===========================================================================
0001269A                            ; ---------------------------------------------------------------------------
0001269A                            ; Object 5A - platforms	moving in circles (SLZ)
0001269A                            ; ---------------------------------------------------------------------------
0001269A                            
0001269A                            Obj5A:					; XREF: Obj_Index
0001269A 7000                       		moveq	#0,d0
0001269C 1028 0024                  		move.b	$24(a0),d0
000126A0 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000126A4 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000126A8 3028 0032                  		move.w	$32(a0),d0
000126AC 0240 FF80                  		andi.w	#$FF80,d0
000126B0 3238 F700                  		move.w	($FFFFF700).w,d1
000126B4 0441 0080                  		subi.w	#$80,d1
000126B8 0241 FF80                  		andi.w	#$FF80,d1
000126BC 9041                       		sub.w	d1,d0
000126BE 0C40 0280                  		cmpi.w	#$280,d0
000126C2 6300 C2A6                  		bls.w	DisplaySprite
000126C6 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000126CA 6700 C2EE                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
000126CE 3440                       		movea.w	d0,a2	; load address into a2
000126D0 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
000126D4 6000 C2E4                  		bra.w	DeleteObject
000126D8                            ; ===========================================================================
000126D8 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000126DA 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000126DC 0000                       		dc.w Obj5A_Action-Obj5A_Index
000126DE                            ; ===========================================================================
000126DE                            
000126DE                            Obj5A_Main:				; XREF: Obj5A_Index
000126DE 5428 0024                  		addq.b	#2,$24(a0)
000126E2 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000126EA 317C 4000 0002             		move.w	#$4000,2(a0)
000126F0 117C 0004 0001             		move.b	#4,1(a0)
000126F6 117C 0004 0018             		move.b	#4,$18(a0)
000126FC 117C 0018 0019             		move.b	#$18,$19(a0)
00012702 3168 0008 0032             		move.w	8(a0),$32(a0)
00012708 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001270E                            
0001270E                            Obj5A_Platform:				; XREF: Obj5A_Index
0001270E 7200                       		moveq	#0,d1
00012710 1228 0019                  		move.b	$19(a0),d1
00012714 4EB9 0000 856A             		jsr	(PlatformObject).l
0001271A 6000 0000                  		bra.w	Obj5A_Types
0001271E                            ; ===========================================================================
0001271E                            
0001271E                            Obj5A_Action:				; XREF: Obj5A_Index
0001271E 7200                       		moveq	#0,d1
00012720 1228 0019                  		move.b	$19(a0),d1
00012724 4EB9 0000 86DE             		jsr	(ExitPlatform).l
0001272A 3F28 0008                  		move.w	8(a0),-(sp)
0001272E 6100 0000                  		bsr.w	Obj5A_Types
00012732 341F                       		move.w	(sp)+,d2
00012734 4EF9 0000 8C54             		jmp	(MvSonicOnPtfm2).l
0001273A                            ; ===========================================================================
0001273A                            
0001273A                            Obj5A_Types:
0001273A 7000                       		moveq	#0,d0
0001273C 1028 0028                  		move.b	$28(a0),d0
00012740 0240 000C                  		andi.w	#$C,d0
00012744 E248                       		lsr.w	#1,d0
00012746 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
0001274A 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
0001274E                            ; ===========================================================================
0001274E 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00012750 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00012752                            ; ===========================================================================
00012752                            
00012752                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00012752 1238 FE80                  		move.b	($FFFFFE80).w,d1
00012756 0401 0050                  		subi.b	#$50,d1
0001275A 4881                       		ext.w	d1
0001275C 1438 FE84                  		move.b	($FFFFFE84).w,d2
00012760 0402 0050                  		subi.b	#$50,d2
00012764 4882                       		ext.w	d2
00012766 0828 0000 0028             		btst	#0,$28(a0)
0001276C 6700                       		beq.s	loc_10E24
0001276E 4441                       		neg.w	d1
00012770 4442                       		neg.w	d2
00012772                            
00012772                            loc_10E24:
00012772 0828 0001 0028             		btst	#1,$28(a0)
00012778 6700                       		beq.s	loc_10E30
0001277A 4441                       		neg.w	d1
0001277C C342                       		exg	d1,d2
0001277E                            
0001277E                            loc_10E30:
0001277E D268 0032                  		add.w	$32(a0),d1
00012782 3141 0008                  		move.w	d1,8(a0)
00012786 D468 0030                  		add.w	$30(a0),d2
0001278A 3142 000C                  		move.w	d2,$C(a0)
0001278E 4E75                       		rts	
00012790                            ; ===========================================================================
00012790                            
00012790                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00012790 1238 FE80                  		move.b	($FFFFFE80).w,d1
00012794 0401 0050                  		subi.b	#$50,d1
00012798 4881                       		ext.w	d1
0001279A 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001279E 0402 0050                  		subi.b	#$50,d2
000127A2 4882                       		ext.w	d2
000127A4 0828 0000 0028             		btst	#0,$28(a0)
000127AA 6700                       		beq.s	loc_10E62
000127AC 4441                       		neg.w	d1
000127AE 4442                       		neg.w	d2
000127B0                            
000127B0                            loc_10E62:
000127B0 0828 0001 0028             		btst	#1,$28(a0)
000127B6 6700                       		beq.s	loc_10E6E
000127B8 4441                       		neg.w	d1
000127BA C342                       		exg	d1,d2
000127BC                            
000127BC                            loc_10E6E:
000127BC 4441                       		neg.w	d1
000127BE D268 0032                  		add.w	$32(a0),d1
000127C2 3141 0008                  		move.w	d1,8(a0)
000127C6 D468 0030                  		add.w	$30(a0),d2
000127CA 3142 000C                  		move.w	d2,$C(a0)
000127CE 4E75                       		rts	
000127D0                            ; ===========================================================================
000127D0                            ; ---------------------------------------------------------------------------
000127D0                            ; Sprite mappings - platforms that move	in circles (SLZ)
000127D0                            ; ---------------------------------------------------------------------------
000127D0                            Map_obj5A:
000127D0                            	include "_maps\obj5A.asm"
000127D0                            ; ---------------------------------------------------------------------------
000127D0                            ; Sprite mappings - platforms that move	in circles (SLZ)
000127D0                            ; ---------------------------------------------------------------------------
000127D0 0000                       		dc.w byte_10E84-Map_obj5A
000127D2 02                         byte_10E84:	dc.b 2
000127D3 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000127D8 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000127DE 00                         		even
000127DE 00                         		even
000127DE                            
000127DE                            ; ===========================================================================
000127DE                            ; ---------------------------------------------------------------------------
000127DE                            ; Object 5B - blocks that form a staircase (SLZ)
000127DE                            ; ---------------------------------------------------------------------------
000127DE                            
000127DE                            Obj5B:					; XREF: Obj_Index
000127DE 7000                       		moveq	#0,d0
000127E0 1028 0024                  		move.b	$24(a0),d0
000127E4 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000127E8 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000127EC 3028 0030                  		move.w	$30(a0),d0
000127F0 0240 FF80                  		andi.w	#$FF80,d0
000127F4 3238 F700                  		move.w	($FFFFF700).w,d1
000127F8 0441 0080                  		subi.w	#$80,d1
000127FC 0241 FF80                  		andi.w	#$FF80,d1
00012800 9041                       		sub.w	d1,d0
00012802 0C40 0280                  		cmpi.w	#$280,d0
00012806 6300 C162                  		bls.w	DisplaySprite
0001280A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001280E 6700 C1AA                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
00012812 3440                       		movea.w	d0,a2	; load address into a2
00012814 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
00012818 6000 C1A0                  		bra.w	DeleteObject
0001281C                            ; ===========================================================================
0001281C 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
0001281E 0000                       		dc.w Obj5B_Move-Obj5B_Index
00012820 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00012822                            ; ===========================================================================
00012822                            
00012822                            Obj5B_Main:				; XREF: Obj5B_Index
00012822 5428 0024                  		addq.b	#2,$24(a0)
00012826 7638                       		moveq	#$38,d3
00012828 7801                       		moveq	#1,d4
0001282A 0828 0000 0022             		btst	#0,$22(a0)
00012830 6700                       		beq.s	loc_10EDA
00012832 763B                       		moveq	#$3B,d3
00012834 78FF                       		moveq	#-1,d4
00012836                            
00012836                            loc_10EDA:
00012836 3428 0008                  		move.w	8(a0),d2
0001283A 2248                       		movea.l	a0,a1
0001283C 7203                       		moveq	#3,d1
0001283E 6000                       		bra.s	Obj5B_MakeBlocks
00012840                            ; ===========================================================================
00012840                            
00012840                            Obj5B_Loop:
00012840 6100 C894                  		bsr.w	SingleObjLoad2
00012844 6600 0000                  		bne.w	Obj5B_Move
00012848 137C 0004 0024             		move.b	#4,$24(a1)
0001284E                            
0001284E                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
0001284E 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00012852 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
0001285A 337C 4000 0002             		move.w	#$4000,2(a1)
00012860 137C 0004 0001             		move.b	#4,1(a1)
00012866 137C 0003 0018             		move.b	#3,$18(a1)
0001286C 137C 0010 0019             		move.b	#$10,$19(a1)
00012872 1368 0028 0028             		move.b	$28(a0),$28(a1)
00012878 3342 0008                  		move.w	d2,8(a1)
0001287C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012882 3368 0008 0030             		move.w	8(a0),$30(a1)
00012888 3369 000C 0032             		move.w	$C(a1),$32(a1)
0001288E 0642 0020                  		addi.w	#$20,d2
00012892 1343 0037                  		move.b	d3,$37(a1)
00012896 2348 003C                  		move.l	a0,$3C(a1)
0001289A D604                       		add.b	d4,d3
0001289C 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
000128A0                            
000128A0                            Obj5B_Move:				; XREF: Obj5B_Index
000128A0 7000                       		moveq	#0,d0
000128A2 1028 0028                  		move.b	$28(a0),d0
000128A6 0240 0007                  		andi.w	#7,d0
000128AA D040                       		add.w	d0,d0
000128AC 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
000128B0 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
000128B4                            
000128B4                            Obj5B_Solid:				; XREF: Obj5B_Index
000128B4 2468 003C                  		movea.l	$3C(a0),a2
000128B8 7000                       		moveq	#0,d0
000128BA 1028 0037                  		move.b	$37(a0),d0
000128BE 1032 0000                  		move.b	(a2,d0.w),d0
000128C2 D068 0032                  		add.w	$32(a0),d0
000128C6 3140 000C                  		move.w	d0,$C(a0)
000128CA 7200                       		moveq	#0,d1
000128CC 1228 0019                  		move.b	$19(a0),d1
000128D0 0641 000B                  		addi.w	#$B,d1
000128D4 343C 0010                  		move.w	#$10,d2
000128D8 363C 0011                  		move.w	#$11,d3
000128DC 3828 0008                  		move.w	8(a0),d4
000128E0 6100 E9F6                  		bsr.w	SolidObject
000128E4 4A04                       		tst.b	d4
000128E6 6A00                       		bpl.s	loc_10F92
000128E8 1544 0036                  		move.b	d4,$36(a2)
000128EC                            
000128EC                            loc_10F92:
000128EC 0828 0003 0022             		btst	#3,$22(a0)
000128F2 6700                       		beq.s	locret_10FA0
000128F4 157C 0001 0036             		move.b	#1,$36(a2)
000128FA                            
000128FA                            locret_10FA0:
000128FA 4E75                       		rts	
000128FC                            ; ===========================================================================
000128FC 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000128FE 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00012900 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00012902 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00012904                            ; ===========================================================================
00012904                            
00012904                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00012904 4A68 0034                  		tst.w	$34(a0)
00012908 6600                       		bne.s	loc_10FC0
0001290A 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00012910 6600                       		bne.s	locret_10FBE
00012912 317C 001E 0034             		move.w	#$1E,$34(a0)
00012918                            
00012918                            locret_10FBE:
00012918 4E75                       		rts	
0001291A                            ; ===========================================================================
0001291A                            
0001291A                            loc_10FC0:
0001291A 5368 0034                  		subq.w	#1,$34(a0)
0001291E 66F8                       		bne.s	locret_10FBE
00012920 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012924 4E75                       		rts	
00012926                            ; ===========================================================================
00012926                            
00012926                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00012926 4A68 0034                  		tst.w	$34(a0)
0001292A 6600                       		bne.s	loc_10FE0
0001292C 4A28 0036                  		tst.b	$36(a0)
00012930 6A00                       		bpl.s	locret_10FDE
00012932 317C 003C 0034             		move.w	#$3C,$34(a0)
00012938                            
00012938                            locret_10FDE:
00012938 4E75                       		rts	
0001293A                            ; ===========================================================================
0001293A                            
0001293A                            loc_10FE0:
0001293A 5368 0034                  		subq.w	#1,$34(a0)
0001293E 6600                       		bne.s	loc_10FEC
00012940 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012944 4E75                       		rts	
00012946                            ; ===========================================================================
00012946                            
00012946                            loc_10FEC:
00012946 43E8 0038                  		lea	$38(a0),a1
0001294A 3028 0034                  		move.w	$34(a0),d0
0001294E E408                       		lsr.b	#2,d0
00012950 0200 0001                  		andi.b	#1,d0
00012954 12C0                       		move.b	d0,(a1)+
00012956 0A00 0001                  		eori.b	#1,d0
0001295A 12C0                       		move.b	d0,(a1)+
0001295C 0A00 0001                  		eori.b	#1,d0
00012960 12C0                       		move.b	d0,(a1)+
00012962 0A00 0001                  		eori.b	#1,d0
00012966 12C0                       		move.b	d0,(a1)+
00012968 4E75                       		rts	
0001296A                            ; ===========================================================================
0001296A                            
0001296A                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
0001296A 43E8 0038                  		lea	$38(a0),a1
0001296E 0C11 0080                  		cmpi.b	#$80,(a1)
00012972 6700                       		beq.s	locret_11038
00012974 5211                       		addq.b	#1,(a1)
00012976 7200                       		moveq	#0,d1
00012978 1219                       		move.b	(a1)+,d1
0001297A 4841                       		swap	d1
0001297C E289                       		lsr.l	#1,d1
0001297E 2401                       		move.l	d1,d2
00012980 E289                       		lsr.l	#1,d1
00012982 2601                       		move.l	d1,d3
00012984 D682                       		add.l	d2,d3
00012986 4841                       		swap	d1
00012988 4842                       		swap	d2
0001298A 4843                       		swap	d3
0001298C 12C3                       		move.b	d3,(a1)+
0001298E 12C2                       		move.b	d2,(a1)+
00012990 12C1                       		move.b	d1,(a1)+
00012992                            
00012992                            locret_11038:
00012992 4E75                       		rts	
00012994 4E75                       		rts	
00012996                            ; ===========================================================================
00012996                            ; ---------------------------------------------------------------------------
00012996                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00012996                            ; ---------------------------------------------------------------------------
00012996                            Map_obj5B:
00012996                            	include "_maps\obj5B.asm"
00012996                            ; ---------------------------------------------------------------------------
00012996                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00012996                            ; ---------------------------------------------------------------------------
00012996 0000                       		dc.w byte_1103E-Map_obj5B
00012998 01                         byte_1103E:	dc.b 1
00012999 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001299E                            		even
0001299E                            		even
0001299E                            
0001299E                            ; ===========================================================================
0001299E                            ; ---------------------------------------------------------------------------
0001299E                            ; Object 5C - metal girders in foreground (SLZ)
0001299E                            ; ---------------------------------------------------------------------------
0001299E                            
0001299E                            Obj5C:					; XREF: Obj_Index
0001299E 7000                       		moveq	#0,d0
000129A0 1028 0024                  		move.b	$24(a0),d0
000129A4 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
000129A8 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
000129AC                            ; ===========================================================================
000129AC 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
000129AE 0000                       		dc.w Obj5C_Display-Obj5C_Index
000129B0                            ; ===========================================================================
000129B0                            
000129B0                            Obj5C_Main:				; XREF: Obj5C_Index
000129B0 5428 0024                  		addq.b	#2,$24(a0)
000129B4 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
000129BC 317C 83CC 0002             		move.w	#$83CC,2(a0)
000129C2 117C 0010 0019             		move.b	#$10,$19(a0)
000129C8                            
000129C8                            Obj5C_Display:				; XREF: Obj5C_Index
000129C8 2238 F700                  		move.l	($FFFFF700).w,d1
000129CC D281                       		add.l	d1,d1
000129CE 4841                       		swap	d1
000129D0 4441                       		neg.w	d1
000129D2 3141 0008                  		move.w	d1,8(a0)
000129D6 2238 F704                  		move.l	($FFFFF704).w,d1
000129DA D281                       		add.l	d1,d1
000129DC 4841                       		swap	d1
000129DE 0241 003F                  		andi.w	#$3F,d1
000129E2 4441                       		neg.w	d1
000129E4 0641 0100                  		addi.w	#$100,d1
000129E8 3141 000A                  		move.w	d1,$A(a0)
000129EC 6000 BF7C                  		bra.w	DisplaySprite
000129F0                            ; ===========================================================================
000129F0                            ; ---------------------------------------------------------------------------
000129F0                            ; Sprite mappings - metal girders in foreground	(SLZ)
000129F0                            ; ---------------------------------------------------------------------------
000129F0                            Map_obj5C:
000129F0                            	include "_maps\obj5C.asm"
000129F0                            ; ---------------------------------------------------------------------------
000129F0                            ; Sprite mappings - metal girders in foreground	(SLZ)
000129F0                            ; ---------------------------------------------------------------------------
000129F0 0000                       		dc.w byte_11098-Map_obj5C
000129F2 09                         byte_11098:	dc.b 9
000129F3 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000129F8 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000129FD C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00012A02 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00012A07 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00012A0C 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00012A11 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00012A16 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00012A1B 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00012A20                            		even
00012A20                            		even
00012A20                            
00012A20                            ; ===========================================================================
00012A20                            ; ---------------------------------------------------------------------------
00012A20                            ; Object 1B - water surface (LZ)
00012A20                            ; ---------------------------------------------------------------------------
00012A20                            
00012A20                            Obj1B:					; XREF: Obj_Index
00012A20 7000                       		moveq	#0,d0
00012A22 1028 0024                  		move.b	$24(a0),d0
00012A26 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00012A2A 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00012A2E                            ; ===========================================================================
00012A2E 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00012A30 0000                       		dc.w Obj1B_Action-Obj1B_Index
00012A32                            ; ===========================================================================
00012A32                            
00012A32                            Obj1B_Main:				; XREF: Obj1B_Index
00012A32 5428 0024                  		addq.b	#2,$24(a0)
00012A36 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00012A3E 317C C300 0002             		move.w	#$C300,2(a0)
00012A44 117C 0004 0001             		move.b	#4,1(a0)
00012A4A 117C 0080 0019             		move.b	#$80,$19(a0)
00012A50 3168 0008 0030             		move.w	8(a0),$30(a0)
00012A56                            
00012A56                            Obj1B_Action:				; XREF: Obj1B_Index
00012A56 3238 F700                  		move.w	($FFFFF700).w,d1
00012A5A 0241 FFE0                  		andi.w	#$FFE0,d1
00012A5E D268 0030                  		add.w	$30(a0),d1
00012A62 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00012A68 6700                       		beq.s	loc_11114
00012A6A 0641 0020                  		addi.w	#$20,d1
00012A6E                            
00012A6E                            loc_11114:
00012A6E 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00012A72 3238 F646                  		move.w	($FFFFF646).w,d1
00012A76 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00012A7A 4A28 0032                  		tst.b	$32(a0)
00012A7E 6600                       		bne.s	Obj1B_Animate
00012A80 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00012A86 6700                       		beq.s	loc_1114A	; if not, branch
00012A88 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00012A8C 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00012A92 6000                       		bra.s	Obj1B_Display
00012A94                            ; ===========================================================================
00012A94                            
00012A94                            Obj1B_Animate:				; XREF: loc_11114
00012A94 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00012A98 6600                       		bne.s	Obj1B_Display	; if yes, branch
00012A9A 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00012AA0 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00012AA4                            
00012AA4                            loc_1114A:				; XREF: loc_11114
00012AA4 5328 001E                  		subq.b	#1,$1E(a0)
00012AA8 6A00                       		bpl.s	Obj1B_Display
00012AAA 117C 0007 001E             		move.b	#7,$1E(a0)
00012AB0 5228 001A                  		addq.b	#1,$1A(a0)
00012AB4 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00012ABA 6500                       		bcs.s	Obj1B_Display
00012ABC 117C 0000 001A             		move.b	#0,$1A(a0)
00012AC2                            
00012AC2                            Obj1B_Display:
00012AC2 6000 BEA6                  		bra.w	DisplaySprite
00012AC6                            ; ===========================================================================
00012AC6                            ; ---------------------------------------------------------------------------
00012AC6                            ; Sprite mappings - water surface (LZ)
00012AC6                            ; ---------------------------------------------------------------------------
00012AC6                            Map_obj1B:
00012AC6                            	include "_maps\obj1B.asm"
00012AC6                            ; ---------------------------------------------------------------------------
00012AC6                            ; Sprite mappings - water surface (LZ)
00012AC6                            ; ---------------------------------------------------------------------------
00012AC6 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00012ACA 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00012ACE 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00012AD2 03                         byte_11178:	dc.b 3
00012AD3 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00012AD8 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012ADD FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012AE2 03                         byte_11188:	dc.b 3
00012AE3 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012AE8 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012AED FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012AF2 03                         byte_11198:	dc.b 3
00012AF3 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012AF8 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012AFD FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012B02 06                         byte_111A8:	dc.b 6
00012B03 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00012B08 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00012B0D FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012B12 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00012B17 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012B1C FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00012B21 06                         byte_111C7:	dc.b 6
00012B22 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012B27 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00012B2C FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012B31 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00012B36 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012B3B FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00012B40 06                         byte_111E6:	dc.b 6
00012B41 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012B46 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00012B4B FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012B50 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00012B55 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012B5A FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00012B60 00                         		even
00012B60 00                         		even
00012B60                            
00012B60                            ; ===========================================================================
00012B60                            ; ---------------------------------------------------------------------------
00012B60                            ; Object 0B - pole that	breaks (LZ)
00012B60                            ; ---------------------------------------------------------------------------
00012B60                            
00012B60                            Obj0B:					; XREF: Obj_Index
00012B60 7000                       		moveq	#0,d0
00012B62 1028 0024                  		move.b	$24(a0),d0
00012B66 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00012B6A 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00012B6E                            ; ===========================================================================
00012B6E 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00012B70 0000                       		dc.w Obj0B_Action-Obj0B_Index
00012B72 0000                       		dc.w Obj0B_Display-Obj0B_Index
00012B74                            ; ===========================================================================
00012B74                            
00012B74                            Obj0B_Main:				; XREF: Obj0B_Index
00012B74 5428 0024                  		addq.b	#2,$24(a0)
00012B78 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00012B80 317C 43DE 0002             		move.w	#$43DE,2(a0)
00012B86 117C 0004 0001             		move.b	#4,1(a0)
00012B8C 117C 0008 0019             		move.b	#8,$19(a0)
00012B92 117C 0004 0018             		move.b	#4,$18(a0)
00012B98 117C 00E1 0020             		move.b	#$E1,$20(a0)
00012B9E 7000                       		moveq	#0,d0
00012BA0 1028 0028                  		move.b	$28(a0),d0	; get object type
00012BA4 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012BA8 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00012BAC                            
00012BAC                            Obj0B_Action:				; XREF: Obj0B_Index
00012BAC 4A28 0032                  		tst.b	$32(a0)
00012BB0 6700                       		beq.s	Obj0B_Grab
00012BB2 4A68 0030                  		tst.w	$30(a0)
00012BB6 6700                       		beq.s	Obj0B_MoveUp
00012BB8 5368 0030                  		subq.w	#1,$30(a0)
00012BBC 6600                       		bne.s	Obj0B_MoveUp
00012BBE 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00012BC4 6000                       		bra.s	Obj0B_Release
00012BC6                            ; ===========================================================================
00012BC6                            
00012BC6                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00012BC6 43F8 D000                  		lea	($FFFFD000).w,a1
00012BCA 3028 000C                  		move.w	$C(a0),d0
00012BCE 0440 0018                  		subi.w	#$18,d0
00012BD2 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00012BD8 6700                       		beq.s	Obj0B_MoveDown
00012BDA 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00012BDE B069 000C                  		cmp.w	$C(a1),d0
00012BE2 6500                       		bcs.s	Obj0B_MoveDown
00012BE4 3340 000C                  		move.w	d0,$C(a1)
00012BE8                            
00012BE8                            Obj0B_MoveDown:
00012BE8 0640 0024                  		addi.w	#$24,d0
00012BEC 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00012BF2 6700                       		beq.s	Obj0B_LetGo
00012BF4 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00012BF8 B069 000C                  		cmp.w	$C(a1),d0
00012BFC 6400                       		bcc.s	Obj0B_LetGo
00012BFE 3340 000C                  		move.w	d0,$C(a1)
00012C02                            
00012C02                            Obj0B_LetGo:
00012C02 1038 F603                  		move.b	($FFFFF603).w,d0
00012C06 0240 0070                  		andi.w	#$70,d0
00012C0A 6700                       		beq.s	Obj0B_Display
00012C0C                            
00012C0C                            Obj0B_Release:				; XREF: Obj0B_Action
00012C0C 4228 0020                  		clr.b	$20(a0)
00012C10 5428 0024                  		addq.b	#2,$24(a0)
00012C14 4238 F7C8                  		clr.b	($FFFFF7C8).w
00012C18 4238 F7C9                  		clr.b	($FFFFF7C9).w
00012C1C 4228 0032                  		clr.b	$32(a0)
00012C20 6000                       		bra.s	Obj0B_Display
00012C22                            ; ===========================================================================
00012C22                            
00012C22                            Obj0B_Grab:				; XREF: Obj0B_Action
00012C22 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00012C26 6700                       		beq.s	Obj0B_Display	; if not, branch
00012C28 43F8 D000                  		lea	($FFFFD000).w,a1
00012C2C 3028 0008                  		move.w	8(a0),d0
00012C30 0640 0014                  		addi.w	#$14,d0
00012C34 B069 0008                  		cmp.w	8(a1),d0
00012C38 6400                       		bcc.s	Obj0B_Display
00012C3A 4228 0021                  		clr.b	$21(a0)
00012C3E 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00012C44 6400                       		bcc.s	Obj0B_Display
00012C46 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00012C4A 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00012C4E 3028 0008                  		move.w	8(a0),d0
00012C52 0640 0014                  		addi.w	#$14,d0
00012C56 3340 0008                  		move.w	d0,8(a1)
00012C5A 08A9 0000 0022             		bclr	#0,$22(a1)
00012C60 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00012C66 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00012C6C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012C72 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00012C78                            
00012C78                            Obj0B_Display:				; XREF: Obj0B_Index
00012C78 6000 E33A                  		bra.w	MarkObjGone
00012C7C                            ; ===========================================================================
00012C7C                            ; ---------------------------------------------------------------------------
00012C7C                            ; Sprite mappings - pole that breaks (LZ)
00012C7C                            ; ---------------------------------------------------------------------------
00012C7C                            Map_obj0B:
00012C7C                            	include "_maps\obj0B.asm"
00012C7C                            ; ---------------------------------------------------------------------------
00012C7C                            ; Sprite mappings - pole that breaks (LZ)
00012C7C                            ; ---------------------------------------------------------------------------
00012C7C 0000                       		dc.w byte_11326-Map_obj0B
00012C7E 0000                       		dc.w byte_11331-Map_obj0B
00012C80 02                         byte_11326:	dc.b 2			; normal pole
00012C81 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00012C86 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00012C8B 04                         byte_11331:	dc.b 4			; broken pole
00012C8C E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00012C91 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00012C96 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00012C9B 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00012CA0                            		even
00012CA0                            		even
00012CA0                            
00012CA0                            ; ===========================================================================
00012CA0                            ; ---------------------------------------------------------------------------
00012CA0                            ; Object 0C - flapping door (LZ)
00012CA0                            ; ---------------------------------------------------------------------------
00012CA0                            
00012CA0                            Obj0C:					; XREF: Obj_Index
00012CA0 7000                       		moveq	#0,d0
00012CA2 1028 0024                  		move.b	$24(a0),d0
00012CA6 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00012CAA 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00012CAE                            ; ===========================================================================
00012CAE 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00012CB0 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00012CB2                            ; ===========================================================================
00012CB2                            
00012CB2                            Obj0C_Main:				; XREF: Obj0C_Index
00012CB2 5428 0024                  		addq.b	#2,$24(a0)
00012CB6 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00012CBE 317C 4328 0002             		move.w	#$4328,2(a0)
00012CC4 0028 0004 0001             		ori.b	#4,1(a0)
00012CCA 117C 0028 0019             		move.b	#$28,$19(a0)
00012CD0 7000                       		moveq	#0,d0
00012CD2 1028 0028                  		move.b	$28(a0),d0	; get object type
00012CD6 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012CDA 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00012CDE                            
00012CDE                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00012CDE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012CE2 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00012CE4 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00012CEA 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00012CF0 4A28 0001                  		tst.b	1(a0)
00012CF4 6A00                       		bpl.s	Obj0C_Solid
00012CF6 303C 00BB                  		move.w	#$BB,d0
00012CFA 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play door sound
00012D00                            
00012D00                            Obj0C_Solid:
00012D00 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00012D06 6100 8CC2                  		bsr.w	AnimateSprite
00012D0A 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00012D0E 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00012D12 6600                       		bne.s	Obj0C_Display	; if yes, branch
00012D14 3038 D008                  		move.w	($FFFFD008).w,d0
00012D18 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00012D1C 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00012D1E 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012D24 323C 0013                  		move.w	#$13,d1
00012D28 343C 0020                  		move.w	#$20,d2
00012D2C 3602                       		move.w	d2,d3
00012D2E 5243                       		addq.w	#1,d3
00012D30 3828 0008                  		move.w	8(a0),d4
00012D34 6100 E5A2                  		bsr.w	SolidObject	; make the door	solid
00012D38                            
00012D38                            Obj0C_Display:
00012D38 6000 E27A                  		bra.w	MarkObjGone
00012D3C                            ; ===========================================================================
00012D3C                            Ani_obj0C:
00012D3C                            	include "_anim\obj0C.asm"
00012D3C                            ; ---------------------------------------------------------------------------
00012D3C                            ; Animation script - flapping door (LZ)
00012D3C                            ; ---------------------------------------------------------------------------
00012D3C 0000                       		dc.w byte_113E6-Ani_obj0C
00012D3E 0000                       		dc.w byte_113EC-Ani_obj0C
00012D40 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00012D46 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00012D4C                            		even
00012D4C                            		even
00012D4C                            
00012D4C                            ; ---------------------------------------------------------------------------
00012D4C                            ; Sprite mappings - flapping door (LZ)
00012D4C                            ; ---------------------------------------------------------------------------
00012D4C                            Map_obj0C:
00012D4C                            	include "_maps\obj0C.asm"
00012D4C                            ; ---------------------------------------------------------------------------
00012D4C                            ; Sprite mappings - flapping door (LZ)
00012D4C                            ; ---------------------------------------------------------------------------
00012D4C 0000                       		dc.w byte_113F8-Map_obj0C
00012D4E 0000                       		dc.w byte_11403-Map_obj0C
00012D50 0000                       		dc.w byte_1140E-Map_obj0C
00012D52 02                         byte_113F8:	dc.b 2
00012D53 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00012D58 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012D5D 02                         byte_11403:	dc.b 2
00012D5E DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00012D63 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00012D68 02                         byte_1140E:	dc.b 2
00012D69 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00012D6E 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00012D74 00                         		even
00012D74 00                         		even
00012D74                            
00012D74                            ; ===========================================================================
00012D74                            ; ---------------------------------------------------------------------------
00012D74                            ; Object 71 - invisible	solid blocks
00012D74                            ; ---------------------------------------------------------------------------
00012D74                            
00012D74                            Obj71:					; XREF: Obj_Index
00012D74 7000                       		moveq	#0,d0
00012D76 1028 0024                  		move.b	$24(a0),d0
00012D7A 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00012D7E 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00012D82                            ; ===========================================================================
00012D82 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00012D84 0000                       		dc.w Obj71_Solid-Obj71_Index
00012D86                            ; ===========================================================================
00012D86                            
00012D86                            Obj71_Main:				; XREF: Obj71_Index
00012D86 5428 0024                  		addq.b	#2,$24(a0)
00012D8A 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00012D92 317C 8680 0002             		move.w	#$8680,2(a0)
00012D98 0028 0004 0001             		ori.b	#4,1(a0)
00012D9E 1028 0028                  		move.b	$28(a0),d0	; get object type
00012DA2 1200                       		move.b	d0,d1
00012DA4 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00012DA8 0640 0010                  		addi.w	#$10,d0
00012DAC E248                       		lsr.w	#1,d0
00012DAE 1140 0019                  		move.b	d0,$19(a0)	; set object width
00012DB2 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00012DB6 5241                       		addq.w	#1,d1
00012DB8 E749                       		lsl.w	#3,d1
00012DBA 1141 0016                  		move.b	d1,$16(a0)	; set object height
00012DBE                            
00012DBE                            Obj71_Solid:				; XREF: Obj71_Index
00012DBE 6100 BF70                  		bsr.w	ChkObjOnScreen
00012DC2 6600                       		bne.s	Obj71_ChkDel
00012DC4 7200                       		moveq	#0,d1
00012DC6 1228 0019                  		move.b	$19(a0),d1
00012DCA 0641 000B                  		addi.w	#$B,d1
00012DCE 7400                       		moveq	#0,d2
00012DD0 1428 0016                  		move.b	$16(a0),d2
00012DD4 3602                       		move.w	d2,d3
00012DD6 5243                       		addq.w	#1,d3
00012DD8 3828 0008                  		move.w	8(a0),d4
00012DDC 6100 E542                  		bsr.w	SolidObject71
00012DE0                            
00012DE0                            Obj71_ChkDel:
00012DE0 3028 0008                  		move.w	8(a0),d0
00012DE4 0240 FF80                  		andi.w	#$FF80,d0
00012DE8 3238 F700                  		move.w	($FFFFF700).w,d1
00012DEC 0441 0080                  		subi.w	#$80,d1
00012DF0 0241 FF80                  		andi.w	#$FF80,d1
00012DF4 9041                       		sub.w	d1,d0
00012DF6 0C40 0280                  		cmpi.w	#$280,d0
00012DFA 6300                       		bls.s	Obj71_NoDel
00012DFC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012E00 6700                       		beq.s	Obj71_Delete		; if it's zero, don't remember object
00012E02 3440                       		movea.w	d0,a2	; load address into a2
00012E04 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00012E08 6000                       		bra.s	Obj71_Delete	; and delete object
00012E0A                            
00012E0A                            Obj71_NoDel:
00012E0A 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00012E0E 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00012E10 4EFA BB58                  		jmp	DisplaySprite	; if yes, display the object
00012E14                            ; ===========================================================================
00012E14                            
00012E14                            Obj71_NoDisplay:
00012E14 4E75                       		rts	
00012E16                            ; ===========================================================================
00012E16                            
00012E16                            Obj71_Delete:
00012E16 4EFA BBA2                  		jmp	DeleteObject
00012E1A                            ; ===========================================================================
00012E1A                            ; ---------------------------------------------------------------------------
00012E1A                            ; Sprite mappings - invisible solid blocks
00012E1A                            ; ---------------------------------------------------------------------------
00012E1A                            Map_obj71:
00012E1A                            	include "_maps\obj71.asm"
00012E1A                            ; ---------------------------------------------------------------------------
00012E1A                            ; Sprite mappings - invisible solid blocks
00012E1A                            ; ---------------------------------------------------------------------------
00012E1A 0000                       		dc.w byte_114BC-Map_obj71
00012E1C 0000                       		dc.w byte_114D1-Map_obj71
00012E1E 0000                       		dc.w byte_114E6-Map_obj71
00012E20 04                         byte_114BC:	dc.b 4
00012E21 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00012E26 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00012E2B 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00012E30 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00012E35 04                         byte_114D1:	dc.b 4
00012E36 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00012E3B E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00012E40 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00012E45 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00012E4A 04                         byte_114E6:	dc.b 4
00012E4B E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00012E50 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00012E55 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00012E5A 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00012E60 00                         		even
00012E60 00                         		even
00012E60                            
00012E60                            ; ===========================================================================
00012E60                            ; ---------------------------------------------------------------------------
00012E60                            ; Object 5D - fans (SLZ)
00012E60                            ; ---------------------------------------------------------------------------
00012E60                            
00012E60                            Obj5D:					; XREF: Obj_Index
00012E60 7000                       		moveq	#0,d0
00012E62 1028 0024                  		move.b	$24(a0),d0
00012E66 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00012E6A 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00012E6E                            ; ===========================================================================
00012E6E 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00012E70 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00012E72                            ; ===========================================================================
00012E72                            
00012E72                            Obj5D_Main:				; XREF: Obj5D_Index
00012E72 5428 0024                  		addq.b	#2,$24(a0)
00012E76 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00012E7E 317C 43A0 0002             		move.w	#$43A0,2(a0)
00012E84 0028 0004 0001             		ori.b	#4,1(a0)
00012E8A 117C 0010 0019             		move.b	#$10,$19(a0)
00012E90 117C 0004 0018             		move.b	#4,$18(a0)
00012E96                            
00012E96                            Obj5D_Delay:				; XREF: Obj5D_Index
00012E96 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00012E9C 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00012E9E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012EA2 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00012EA4 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00012EAA 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00012EB0 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00012EB2 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00012EB8                            
00012EB8                            Obj5D_Blow:
00012EB8 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00012EBC 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00012EC0 43F8 D000                  		lea	($FFFFD000).w,a1
00012EC4 3029 0008                  		move.w	8(a1),d0
00012EC8 9068 0008                  		sub.w	8(a0),d0
00012ECC 0828 0000 0022             		btst	#0,$22(a0)
00012ED2 6600                       		bne.s	Obj5D_ChkSonic
00012ED4 4440                       		neg.w	d0
00012ED6                            
00012ED6                            Obj5D_ChkSonic:
00012ED6 0640 0050                  		addi.w	#$50,d0
00012EDA 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00012EDE 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00012EE0 3229 000C                  		move.w	$C(a1),d1
00012EE4 0641 0060                  		addi.w	#$60,d1
00012EE8 9268 000C                  		sub.w	$C(a0),d1
00012EEC 6500                       		bcs.s	Obj5D_Animate
00012EEE 0C41 0070                  		cmpi.w	#$70,d1
00012EF2 6400                       		bcc.s	Obj5D_Animate
00012EF4 0440 0050                  		subi.w	#$50,d0
00012EF8 6400                       		bcc.s	loc_1159A
00012EFA 4640                       		not.w	d0
00012EFC D040                       		add.w	d0,d0
00012EFE                            
00012EFE                            loc_1159A:
00012EFE 0640 0060                  		addi.w	#$60,d0
00012F02 0828 0000 0022             		btst	#0,$22(a0)
00012F08 6600                       		bne.s	loc_115A8
00012F0A 4440                       		neg.w	d0
00012F0C                            
00012F0C                            loc_115A8:
00012F0C 4400                       		neg.b	d0
00012F0E E840                       		asr.w	#4,d0
00012F10 0828 0000 0028             		btst	#0,$28(a0)
00012F16 6700                       		beq.s	Obj5D_MoveSonic
00012F18 4440                       		neg.w	d0
00012F1A                            
00012F1A                            Obj5D_MoveSonic:
00012F1A D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00012F1E                            
00012F1E                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00012F1E 5328 001E                  		subq.b	#1,$1E(a0)
00012F22 6A00                       		bpl.s	Obj5D_ChkDel
00012F24 117C 0000 001E             		move.b	#0,$1E(a0)
00012F2A 5228 001B                  		addq.b	#1,$1B(a0)
00012F2E 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00012F34 6500                       		bcs.s	loc_115D8
00012F36 117C 0000 001B             		move.b	#0,$1B(a0)
00012F3C                            
00012F3C                            loc_115D8:
00012F3C 7000                       		moveq	#0,d0
00012F3E 0828 0000 0028             		btst	#0,$28(a0)
00012F44 6700                       		beq.s	loc_115E4
00012F46 7002                       		moveq	#2,d0
00012F48                            
00012F48                            loc_115E4:
00012F48 D028 001B                  		add.b	$1B(a0),d0
00012F4C 1140 001A                  		move.b	d0,$1A(a0)
00012F50                            
00012F50                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00012F50 6100 BA18                  		bsr.w	DisplaySprite
00012F54 3028 0008                  		move.w	8(a0),d0
00012F58 0240 FF80                  		andi.w	#$FF80,d0
00012F5C 3238 F700                  		move.w	($FFFFF700).w,d1
00012F60 0441 0080                  		subi.w	#$80,d1
00012F64 0241 FF80                  		andi.w	#$FF80,d1
00012F68 9041                       		sub.w	d1,d0
00012F6A 0C40 0280                  		cmpi.w	#$280,d0
00012F6E 6300                       		bls.s	Obj5D_NoDel
00012F70 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012F74 6700 BA44                  		beq.w	DeleteObject		; if it's zero, don't remember object
00012F78 3440                       		movea.w	d0,a2	; load address into a2
00012F7A 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00012F7E 6000 BA3A                  		bra.w	DeleteObject	; and delete object
00012F82                            
00012F82                            Obj5D_NoDel:
00012F82 4E75                       		rts	
00012F84                            ; ===========================================================================
00012F84                            ; ---------------------------------------------------------------------------
00012F84                            ; Sprite mappings - fans (SLZ)
00012F84                            ; ---------------------------------------------------------------------------
00012F84                            Map_obj5D:
00012F84                            	include "_maps\obj5D.asm"
00012F84                            ; ---------------------------------------------------------------------------
00012F84                            ; Sprite mappings - fans (SLZ)
00012F84                            ; ---------------------------------------------------------------------------
00012F84 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00012F88 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00012F8C 0000                       		dc.w byte_1161A-Map_obj5D
00012F8E 02                         byte_1161A:	dc.b 2
00012F8F F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00012F94 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00012F99 02                         byte_11625:	dc.b 2
00012F9A F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00012F9F 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00012FA4 02                         byte_11630:	dc.b 2
00012FA5 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00012FAA 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00012FB0 00                         		even
00012FB0 00                         		even
00012FB0                            
00012FB0                            ; ===========================================================================
00012FB0                            ; ---------------------------------------------------------------------------
00012FB0                            ; Object 5E - seesaws (SLZ)
00012FB0                            ; ---------------------------------------------------------------------------
00012FB0                            
00012FB0                            Obj5E:					; XREF: Obj_Index
00012FB0 7000                       		moveq	#0,d0
00012FB2 1028 0024                  		move.b	$24(a0),d0
00012FB6 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00012FBA 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00012FBE 3028 0030                  		move.w	$30(a0),d0
00012FC2 0240 FF80                  		andi.w	#$FF80,d0
00012FC6 3238 F700                  		move.w	($FFFFF700).w,d1
00012FCA 0441 0080                  		subi.w	#$80,d1
00012FCE 0241 FF80                  		andi.w	#$FF80,d1
00012FD2 9041                       		sub.w	d1,d0
00012FD4 6B00 B9E4                  		bmi.w	DeleteObject
00012FD8 0C40 0280                  		cmpi.w	#$280,d0
00012FDC 6300 B98C                  		bls.w	DisplaySprite
00012FE0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012FE4 6700 B9D4                  		beq.w	DeleteObject		; if it's zero, don't remember object
00012FE8 3440                       		movea.w	d0,a2	; load address into a2
00012FEA 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00012FEE 6000 B9CA                  		bra.w	DeleteObject	; and delete object		
00012FF2                            ; ===========================================================================
00012FF2 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00012FF4 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00012FF6 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00012FF8 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00012FFA 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00012FFC 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00012FFE                            ; ===========================================================================
00012FFE                            
00012FFE                            Obj5E_Main:				; XREF: Obj5E_Index
00012FFE 5428 0024                  		addq.b	#2,$24(a0)
00013002 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
0001300A 317C 0374 0002             		move.w	#$374,2(a0)
00013010 0028 0004 0001             		ori.b	#4,1(a0)
00013016 117C 0004 0018             		move.b	#4,$18(a0)
0001301C 117C 0030 0019             		move.b	#$30,$19(a0)
00013022 3168 0008 0030             		move.w	8(a0),$30(a0)
00013028 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
0001302C 6600                       		bne.s	loc_116D2	; if not, branch
0001302E 6100 C0A6                  		bsr.w	SingleObjLoad2
00013032 6600                       		bne.s	loc_116D2
00013034 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00013038 5C29 0024                  		addq.b	#6,$24(a1)
0001303C 3368 0008 0008             		move.w	8(a0),8(a1)
00013042 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013048 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001304E 2348 003C                  		move.l	a0,$3C(a1)
00013052                            
00013052                            loc_116D2:
00013052 0828 0000 0022             		btst	#0,$22(a0)
00013058 6700                       		beq.s	loc_116E0
0001305A 117C 0002 001A             		move.b	#2,$1A(a0)
00013060                            
00013060                            loc_116E0:
00013060 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00013066                            
00013066                            Obj5E_Slope:				; XREF: Obj5E_Index
00013066 1228 003A                  		move.b	$3A(a0),d1
0001306A 6100 0000                  		bsr.w	loc_11766
0001306E 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00013074 0828 0000 001A             		btst	#0,$1A(a0)
0001307A 6700                       		beq.s	loc_11702
0001307C 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00013082                            
00013082                            loc_11702:
00013082 43F8 D000                  		lea	($FFFFD000).w,a1
00013086 3169 0012 0038             		move.w	$12(a1),$38(a0)
0001308C 323C 0030                  		move.w	#$30,d1
00013090 4EB9 0000 863E             		jsr	(SlopeObject).l
00013096 4E75                       		rts	
00013098                            ; ===========================================================================
00013098                            
00013098                            Obj5E_Slope2:				; XREF: Obj5E_Index
00013098 6100 0000                  		bsr.w	loc_1174A
0001309C 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000130A2 0828 0000 001A             		btst	#0,$1A(a0)
000130A8 6700                       		beq.s	loc_11730
000130AA 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000130B0                            
000130B0                            loc_11730:
000130B0 323C 0030                  		move.w	#$30,d1
000130B4 4EB9 0000 86DE             		jsr	(ExitPlatform).l
000130BA 323C 0030                  		move.w	#$30,d1
000130BE 3428 0008                  		move.w	8(a0),d2
000130C2 4EB9 0000 96B4             		jsr	SlopeObject2
000130C8 4E75                       		rts	
000130CA                            ; ===========================================================================
000130CA                            
000130CA                            loc_1174A:				; XREF: Obj5E_Slope2
000130CA 7202                       		moveq	#2,d1
000130CC 43F8 D000                  		lea	($FFFFD000).w,a1
000130D0 3028 0008                  		move.w	8(a0),d0
000130D4 9069 0008                  		sub.w	8(a1),d0
000130D8 6400                       		bcc.s	loc_1175E
000130DA 4440                       		neg.w	d0
000130DC 7200                       		moveq	#0,d1
000130DE                            
000130DE                            loc_1175E:
000130DE 0C40 0008                  		cmpi.w	#8,d0
000130E2 6400                       		bcc.s	loc_11766
000130E4 7201                       		moveq	#1,d1
000130E6                            
000130E6                            loc_11766:
000130E6 1028 001A                  		move.b	$1A(a0),d0
000130EA B001                       		cmp.b	d1,d0
000130EC 6700                       		beq.s	locret_11790
000130EE 6400                       		bcc.s	loc_11772
000130F0 5400                       		addq.b	#2,d0
000130F2                            
000130F2                            loc_11772:
000130F2 5300                       		subq.b	#1,d0
000130F4 1140 001A                  		move.b	d0,$1A(a0)
000130F8 1141 003A                  		move.b	d1,$3A(a0)
000130FC 08A8 0000 0001             		bclr	#0,1(a0)
00013102 0828 0001 001A             		btst	#1,$1A(a0)
00013108 6700                       		beq.s	locret_11790
0001310A 08E8 0000 0001             		bset	#0,1(a0)
00013110                            
00013110                            locret_11790:
00013110 4E75                       		rts	
00013112                            ; ===========================================================================
00013112                            
00013112                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00013112 5428 0024                  		addq.b	#2,$24(a0)
00013116 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
0001311E 317C 04F0 0002             		move.w	#$4F0,2(a0)
00013124 0028 0004 0001             		ori.b	#4,1(a0)
0001312A 117C 0004 0018             		move.b	#4,$18(a0)
00013130 117C 008B 0020             		move.b	#$8B,$20(a0)
00013136 117C 000C 0019             		move.b	#$C,$19(a0)
0001313C 3168 0008 0030             		move.w	8(a0),$30(a0)
00013142 0668 0028 0008             		addi.w	#$28,8(a0)
00013148 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001314E 117C 0001 001A             		move.b	#1,$1A(a0)
00013154 0828 0000 0022             		btst	#0,$22(a0)
0001315A 6700                       		beq.s	Obj5E_MoveSpike
0001315C 0468 0050 0008             		subi.w	#$50,8(a0)
00013162 117C 0002 003A             		move.b	#2,$3A(a0)
00013168                            
00013168                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00013168 2268 003C                  		movea.l	$3C(a0),a1
0001316C 7000                       		moveq	#0,d0
0001316E 1028 003A                  		move.b	$3A(a0),d0
00013172 9029 003A                  		sub.b	$3A(a1),d0
00013176 6700                       		beq.s	loc_1183E
00013178 6400                       		bcc.s	loc_117FC
0001317A 4400                       		neg.b	d0
0001317C                            
0001317C                            loc_117FC:
0001317C 323C F7E8                  		move.w	#-$818,d1
00013180 343C FEEC                  		move.w	#-$114,d2
00013184 0C00 0001                  		cmpi.b	#1,d0
00013188 6700                       		beq.s	loc_11822
0001318A 323C F510                  		move.w	#-$AF0,d1
0001318E 343C FF34                  		move.w	#-$CC,d2
00013192 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013198 6D00                       		blt.s	loc_11822
0001319A 323C F200                  		move.w	#-$E00,d1
0001319E 343C FF60                  		move.w	#-$A0,d2
000131A2                            
000131A2                            loc_11822:
000131A2 3141 0012                  		move.w	d1,$12(a0)
000131A6 3142 0010                  		move.w	d2,$10(a0)
000131AA 3028 0008                  		move.w	8(a0),d0
000131AE 9068 0030                  		sub.w	$30(a0),d0
000131B2 6400                       		bcc.s	loc_11838
000131B4 4468 0010                  		neg.w	$10(a0)
000131B8                            
000131B8                            loc_11838:
000131B8 5428 0024                  		addq.b	#2,$24(a0)
000131BC 6000                       		bra.s	Obj5E_SpikeFall
000131BE                            ; ===========================================================================
000131BE                            
000131BE                            loc_1183E:				; XREF: Obj5E_MoveSpike
000131BE 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000131C4 7000                       		moveq	#0,d0
000131C6 1029 001A                  		move.b	$1A(a1),d0
000131CA 343C 0028                  		move.w	#$28,d2
000131CE 3228 0008                  		move.w	8(a0),d1
000131D2 9268 0030                  		sub.w	$30(a0),d1
000131D6 6400                       		bcc.s	loc_1185C
000131D8 4442                       		neg.w	d2
000131DA 5440                       		addq.w	#2,d0
000131DC                            
000131DC                            loc_1185C:
000131DC D040                       		add.w	d0,d0
000131DE 3228 0034                  		move.w	$34(a0),d1
000131E2 D272 0000                  		add.w	(a2,d0.w),d1
000131E6 3141 000C                  		move.w	d1,$C(a0)
000131EA D468 0030                  		add.w	$30(a0),d2
000131EE 3142 0008                  		move.w	d2,8(a0)
000131F2 4268 000E                  		clr.w	$E(a0)
000131F6 4268 000A                  		clr.w	$A(a0)
000131FA 4E75                       		rts	
000131FC                            ; ===========================================================================
000131FC                            
000131FC                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000131FC 4A68 0012                  		tst.w	$12(a0)
00013200 6A00                       		bpl.s	loc_1189A
00013202 6100 B72C                  		bsr.w	ObjectFall
00013206 3028 0034                  		move.w	$34(a0),d0
0001320A 0440 002F                  		subi.w	#$2F,d0
0001320E B068 000C                  		cmp.w	$C(a0),d0
00013212 6E00                       		bgt.s	locret_11898
00013214 6100 B71A                  		bsr.w	ObjectFall
00013218                            
00013218                            locret_11898:
00013218 4E75                       		rts	
0001321A                            ; ===========================================================================
0001321A                            
0001321A                            loc_1189A:				; XREF: Obj5E_SpikeFall
0001321A 6100 B714                  		bsr.w	ObjectFall
0001321E 2268 003C                  		movea.l	$3C(a0),a1
00013222 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00013228 7000                       		moveq	#0,d0
0001322A 1029 001A                  		move.b	$1A(a1),d0
0001322E 3228 0008                  		move.w	8(a0),d1
00013232 9268 0030                  		sub.w	$30(a0),d1
00013236 6400                       		bcc.s	loc_118BA
00013238 5440                       		addq.w	#2,d0
0001323A                            
0001323A                            loc_118BA:
0001323A D040                       		add.w	d0,d0
0001323C 3228 0034                  		move.w	$34(a0),d1
00013240 D272 0000                  		add.w	(a2,d0.w),d1
00013244 B268 000C                  		cmp.w	$C(a0),d1
00013248 6E00                       		bgt.s	locret_11938
0001324A 2268 003C                  		movea.l	$3C(a0),a1
0001324E 7202                       		moveq	#2,d1
00013250 4A68 0010                  		tst.w	$10(a0)
00013254 6B00                       		bmi.s	Obj5E_Spring
00013256 7200                       		moveq	#0,d1
00013258                            
00013258                            Obj5E_Spring:
00013258 1341 003A                  		move.b	d1,$3A(a1)
0001325C 1141 003A                  		move.b	d1,$3A(a0)
00013260 B229 001A                  		cmp.b	$1A(a1),d1
00013264 6700                       		beq.s	loc_1192C
00013266 08A9 0003 0022             		bclr	#3,$22(a1)
0001326C 6700                       		beq.s	loc_1192C
0001326E 4229 0025                  		clr.b	$25(a1)
00013272 137C 0002 0024             		move.b	#2,$24(a1)
00013278 45F8 D000                  		lea	($FFFFD000).w,a2
0001327C 3568 0012 0012             		move.w	$12(a0),$12(a2)
00013282 446A 0012                  		neg.w	$12(a2)
00013286 08EA 0001 0022             		bset	#1,$22(a2)
0001328C 08AA 0003 0022             		bclr	#3,$22(a2)
00013292 422A 003C                  		clr.b	$3C(a2)
00013296 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
0001329C 157C 0002 0024             		move.b	#2,$24(a2)
000132A2 303C 00CC                  		move.w	#$CC,d0
000132A6 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play spring sound
000132AC                            
000132AC                            loc_1192C:
000132AC 4268 0010                  		clr.w	$10(a0)
000132B0 4268 0012                  		clr.w	$12(a0)
000132B4 5528 0024                  		subq.b	#2,$24(a0)
000132B8                            
000132B8                            locret_11938:
000132B8 4E75                       		rts	
000132BA                            ; ===========================================================================
000132BA FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000132C4                            
000132C4                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
000132F4                            		even
000132F4                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00013324                            		even
00013324                            ; ---------------------------------------------------------------------------
00013324                            ; Sprite mappings - seesaws (SLZ)
00013324                            ; ---------------------------------------------------------------------------
00013324                            Map_obj5E:
00013324                            	include "_maps\obj5E.asm"
00013324                            ; ---------------------------------------------------------------------------
00013324                            ; Sprite mappings - seesaws (SLZ)
00013324                            ; ---------------------------------------------------------------------------
00013324 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00013328 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001332C 07                         byte_119AC:	dc.b 7
0001332D D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013332 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013337 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
0001333C EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013341 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013346 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
0001334B FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013350 04                         byte_119D0:	dc.b 4
00013351 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00013356 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
0001335B E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013360 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00013366 00                         		even
00013366 00                         		even
00013366                            
00013366                            ; ---------------------------------------------------------------------------
00013366                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013366                            ; ---------------------------------------------------------------------------
00013366                            Map_obj5Ea:
00013366                            	include "_maps\obj5Eballs.asm"
00013366                            ; ---------------------------------------------------------------------------
00013366                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013366                            ; ---------------------------------------------------------------------------
00013366 0000                       		dc.w byte_119EA-Map_obj5Ea
00013368 0000                       		dc.w byte_119F0-Map_obj5Ea
0001336A 01                         byte_119EA:	dc.b 1
0001336B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013370 01                         byte_119F0:	dc.b 1
00013371 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00013376                            		even
00013376                            		even
00013376                            
00013376                            ; ===========================================================================
00013376                            ; ---------------------------------------------------------------------------
00013376                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00013376                            ; ---------------------------------------------------------------------------
00013376                            
00013376                            Obj5F:					; XREF: Obj_Index
00013376 7000                       		moveq	#0,d0
00013378 1028 0024                  		move.b	$24(a0),d0
0001337C 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00013380 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00013384                            ; ===========================================================================
00013384 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00013386 0000                       		dc.w Obj5F_Action-Obj5F_Index
00013388 0000                       		dc.w Obj5F_Display-Obj5F_Index
0001338A 0000                       		dc.w Obj5F_End-Obj5F_Index
0001338C                            ; ===========================================================================
0001338C                            
0001338C                            Obj5F_Main:				; XREF: Obj5F_Index
0001338C 5428 0024                  		addq.b	#2,$24(a0)
00013390 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00013398 317C 0400 0002             		move.w	#$400,2(a0)
0001339E 0028 0004 0001             		ori.b	#4,1(a0)
000133A4 117C 0003 0018             		move.b	#3,$18(a0)
000133AA 117C 000C 0019             		move.b	#$C,$19(a0)
000133B0 1028 0028                  		move.b	$28(a0),d0
000133B4 6700                       		beq.s	loc_11A3C
000133B6 1140 0024                  		move.b	d0,$24(a0)
000133BA 4E75                       		rts	
000133BC                            ; ===========================================================================
000133BC                            
000133BC                            loc_11A3C:
000133BC 117C 009A 0020             		move.b	#$9A,$20(a0)
000133C2 0868 0000 0022             		bchg	#0,$22(a0)
000133C8                            
000133C8                            Obj5F_Action:				; XREF: Obj5F_Index
000133C8 7000                       		moveq	#0,d0
000133CA 1028 0025                  		move.b	$25(a0),d0
000133CE 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
000133D2 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
000133D6 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000133DC 6100 85EC                  		bsr.w	AnimateSprite
000133E0 6000 DBD2                  		bra.w	MarkObjGone
000133E4                            ; ===========================================================================
000133E4 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
000133E6 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
000133E8 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
000133EA                            ; ===========================================================================
000133EA                            
000133EA                            Obj5F_Walk:				; XREF: Obj5F_Index2
000133EA 6100 0000                  		bsr.w	Obj5F_ChkSonic
000133EE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000133F2 6A00                       		bpl.s	locret_11A96	; if time remains, branch
000133F4 5428 0025                  		addq.b	#2,$25(a0)
000133F8 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
000133FE 317C 0010 0010             		move.w	#$10,$10(a0)
00013404 117C 0001 001C             		move.b	#1,$1C(a0)
0001340A 0868 0000 0022             		bchg	#0,$22(a0)
00013410 6700                       		beq.s	locret_11A96
00013412 4468 0010                  		neg.w	$10(a0)		; change direction
00013416                            
00013416                            locret_11A96:
00013416 4E75                       		rts	
00013418                            ; ===========================================================================
00013418                            
00013418                            Obj5F_Wait:				; XREF: Obj5F_Index2
00013418 6100 0000                  		bsr.w	Obj5F_ChkSonic
0001341C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00013420 6B00                       		bmi.s	loc_11AA8
00013422 6100 B52C                  		bsr.w	SpeedToPos
00013426 4E75                       		rts	
00013428                            ; ===========================================================================
00013428                            
00013428                            loc_11AA8:
00013428 5528 0025                  		subq.b	#2,$25(a0)
0001342C 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00013432 4268 0010                  		clr.w	$10(a0)		; stop walking
00013436 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
0001343C 4E75                       		rts	
0001343E                            ; ===========================================================================
0001343E                            
0001343E                            Obj5F_Explode:				; XREF: Obj5F_Index2
0001343E 5368 0030                  		subq.w	#1,$30(a0)
00013442 6A00                       		bpl.s	locret_11AD0
00013444 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00013448 117C 0000 0024             		move.b	#0,$24(a0)
0001344E                            
0001344E                            locret_11AD0:
0001344E 4E75                       		rts	
00013450                            ; ===========================================================================
00013450                            
00013450                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00013450 3038 D008                  		move.w	($FFFFD008).w,d0
00013454 9068 0008                  		sub.w	8(a0),d0
00013458 6400                       		bcc.s	loc_11ADE
0001345A 4440                       		neg.w	d0
0001345C                            
0001345C                            loc_11ADE:
0001345C 0C40 0060                  		cmpi.w	#$60,d0
00013460 6400                       		bcc.s	locret_11B5E
00013462 3038 D00C                  		move.w	($FFFFD00C).w,d0
00013466 9068 000C                  		sub.w	$C(a0),d0
0001346A 6400                       		bcc.s	Obj5F_MakeFuse
0001346C 4440                       		neg.w	d0
0001346E                            
0001346E                            Obj5F_MakeFuse:
0001346E 0C40 0060                  		cmpi.w	#$60,d0
00013472 6400                       		bcc.s	locret_11B5E
00013474 4A78 FE08                  		tst.w	($FFFFFE08).w
00013478 6600                       		bne.s	locret_11B5E
0001347A 117C 0004 0025             		move.b	#4,$25(a0)
00013480 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00013486 4268 0010                  		clr.w	$10(a0)
0001348A 117C 0002 001C             		move.b	#2,$1C(a0)
00013490 6100 BC44                  		bsr.w	SingleObjLoad2
00013494 6600                       		bne.s	locret_11B5E
00013496 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
0001349A 3368 0008 0008             		move.w	8(a0),8(a1)
000134A0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000134A6 3368 000C 0034             		move.w	$C(a0),$34(a1)
000134AC 1368 0022 0022             		move.b	$22(a0),$22(a1)
000134B2 137C 0004 0028             		move.b	#4,$28(a1)
000134B8 137C 0003 001C             		move.b	#3,$1C(a1)
000134BE 337C 0010 0012             		move.w	#$10,$12(a1)
000134C4 0828 0001 0022             		btst	#1,$22(a0)
000134CA 6700                       		beq.s	loc_11B54
000134CC 4469 0012                  		neg.w	$12(a1)
000134D0                            
000134D0                            loc_11B54:
000134D0 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
000134D6 2348 003C                  		move.l	a0,$3C(a1)
000134DA                            
000134DA                            locret_11B5E:
000134DA 4E75                       		rts	
000134DC                            ; ===========================================================================
000134DC                            
000134DC                            Obj5F_Display:				; XREF: Obj5F_Index
000134DC 6100                       		bsr.s	loc_11B70
000134DE 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000134E4 6100 84E4                  		bsr.w	AnimateSprite
000134E8 6000 DACA                  		bra.w	MarkObjGone
000134EC                            ; ===========================================================================
000134EC                            
000134EC                            loc_11B70:
000134EC 5368 0030                  		subq.w	#1,$30(a0)
000134F0 6B00                       		bmi.s	loc_11B7C
000134F2 6100 B45C                  		bsr.w	SpeedToPos
000134F6 4E75                       		rts	
000134F8                            ; ===========================================================================
000134F8                            
000134F8                            loc_11B7C:
000134F8 4268 0030                  		clr.w	$30(a0)
000134FC 4228 0024                  		clr.b	$24(a0)
00013500 3168 0034 000C             		move.w	$34(a0),$C(a0)
00013506 7203                       		moveq	#3,d1
00013508 2248                       		movea.l	a0,a1
0001350A 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00013510 6000                       		bra.s	Obj5F_MakeShrap
00013512                            ; ===========================================================================
00013512                            
00013512                            Obj5F_Loop:
00013512 6100 BBC2                  		bsr.w	SingleObjLoad2
00013516 6600                       		bne.s	loc_11BCE
00013518                            
00013518                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00013518 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
0001351C 3368 0008 0008             		move.w	8(a0),8(a1)
00013522 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013528 137C 0006 0028             		move.b	#6,$28(a1)
0001352E 137C 0004 001C             		move.b	#4,$1C(a1)
00013534 335A 0010                  		move.w	(a2)+,$10(a1)
00013538 335A 0012                  		move.w	(a2)+,$12(a1)
0001353C 137C 0098 0020             		move.b	#$98,$20(a1)
00013542 08E9 0007 0001             		bset	#7,1(a1)
00013548                            
00013548                            loc_11BCE:
00013548 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
0001354C                            
0001354C 117C 0006 0024             		move.b	#6,$24(a0)
00013552                            
00013552                            Obj5F_End:				; XREF: Obj5F_Index
00013552 6100 B3FC                  		bsr.w	SpeedToPos
00013556 0668 0018 0012             		addi.w	#$18,$12(a0)
0001355C 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00013562 6100 8466                  		bsr.w	AnimateSprite
00013566 4A28 0001                  		tst.b	1(a0)
0001356A 6A00 B44E                  		bpl.w	DeleteObject
0001356E 6000 B3FA                  		bra.w	DisplaySprite
00013572                            ; ===========================================================================
00013572 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00013582                            
00013582                            Ani_obj5F:
00013582                            	include "_anim\obj5F.asm"
00013582                            ; ---------------------------------------------------------------------------
00013582                            ; Animation script - Bomb enemy
00013582                            ; ---------------------------------------------------------------------------
00013582 0000                       		dc.w byte_11C12-Ani_obj5F
00013584 0000                       		dc.w byte_11C16-Ani_obj5F
00013586 0000                       		dc.w byte_11C1C-Ani_obj5F
00013588 0000                       		dc.w byte_11C20-Ani_obj5F
0001358A 0000                       		dc.w byte_11C24-Ani_obj5F
0001358C 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00013590 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00013596 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
0001359A 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
0001359E 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
000135A2                            		even
000135A2                            		even
000135A2                            
000135A2                            ; ---------------------------------------------------------------------------
000135A2                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000135A2                            ; ---------------------------------------------------------------------------
000135A2                            Map_obj5F:
000135A2                            	include "_maps\obj5F.asm"
000135A2                            ; ---------------------------------------------------------------------------
000135A2                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000135A2                            ; ---------------------------------------------------------------------------
000135A2 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
000135A6 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
000135AA 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
000135AE 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
000135B2 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
000135B6 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
000135BA 03                         byte_11C40:	dc.b 3
000135BB F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000135C0 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000135C5 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000135CA 03                         byte_11C50:	dc.b 3
000135CB F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000135D0 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000135D5 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000135DA 03                         byte_11C60:	dc.b 3
000135DB F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000135E0 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000135E5 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000135EA 03                         byte_11C70:	dc.b 3
000135EB F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000135F0 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000135F5 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000135FA 03                         byte_11C80:	dc.b 3
000135FB F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00013600 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00013605 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001360A 03                         byte_11C90:	dc.b 3
0001360B F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013610 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00013615 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001361A 02                         byte_11CA0:	dc.b 2
0001361B F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00013620 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013625 02                         byte_11CAB:	dc.b 2
00013626 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001362B 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013630 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00013631 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00013636 01                         byte_11CBC:	dc.b 1			; fuse
00013637 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
0001363C 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
0001363D FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00013642 01                         byte_11CC8:	dc.b 1			; fireball
00013643 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00013648                            		even
00013648                            		even
00013648                            
00013648                            ; ===========================================================================
00013648                            ; ---------------------------------------------------------------------------
00013648                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00013648                            ; ---------------------------------------------------------------------------
00013648                            
00013648                            Obj60:					; XREF: Obj_Index
00013648 7000                       		moveq	#0,d0
0001364A 1028 0024                  		move.b	$24(a0),d0
0001364E 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00013652 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00013656                            ; ===========================================================================
00013656 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00013658 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
0001365A 0000                       		dc.w Obj60_Display-Obj60_Index
0001365C 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
0001365E 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00013660                            ; ===========================================================================
00013660                            
00013660                            Obj60_Main:				; XREF: Obj60_Index
00013660 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00013668 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
0001366E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00013674 6700                       		beq.s	loc_11D02
00013676 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
0001367C                            
0001367C                            loc_11D02:
0001367C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00013682 6600                       		bne.s	loc_11D10
00013684 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
0001368A                            
0001368A                            loc_11D10:
0001368A 0028 0004 0001             		ori.b	#4,1(a0)
00013690 117C 0004 0018             		move.b	#4,$18(a0)
00013696 117C 000B 0020             		move.b	#$B,$20(a0)
0001369C 117C 000C 0019             		move.b	#$C,$19(a0)
000136A2 7400                       		moveq	#0,d2
000136A4 45E8 0037                  		lea	$37(a0),a2
000136A8 264A                       		movea.l	a2,a3
000136AA 524A                       		addq.w	#1,a2
000136AC 7203                       		moveq	#3,d1
000136AE                            
000136AE                            Obj60_MakeOrbs:
000136AE 6100 BA26                  		bsr.w	SingleObjLoad2
000136B2 6600                       		bne.s	loc_11D90
000136B4 5213                       		addq.b	#1,(a3)
000136B6 3A09                       		move.w	a1,d5
000136B8 0445 D000                  		subi.w	#-$3000,d5
000136BC EC4D                       		lsr.w	#6,d5
000136BE 0245 007F                  		andi.w	#$7F,d5
000136C2 14C5                       		move.b	d5,(a2)+
000136C4 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
000136C6 137C 0006 0024             		move.b	#6,$24(a1)
000136CC 2368 0004 0004             		move.l	4(a0),4(a1)
000136D2 3368 0002 0002             		move.w	2(a0),2(a1)
000136D8 0029 0004 0001             		ori.b	#4,1(a1)
000136DE 137C 0004 0018             		move.b	#4,$18(a1)
000136E4 137C 0008 0019             		move.b	#8,$19(a1)
000136EA 137C 0003 001A             		move.b	#3,$1A(a1)
000136F0 137C 0098 0020             		move.b	#$98,$20(a1)
000136F6 1342 0026                  		move.b	d2,$26(a1)
000136FA 0602 0040                  		addi.b	#$40,d2
000136FE 2348 003C                  		move.l	a0,$3C(a1)
00013702 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00013706                            
00013706                            loc_11D90:
00013706 7001                       		moveq	#1,d0
00013708 0828 0000 0022             		btst	#0,$22(a0)
0001370E 6700                       		beq.s	Obj60_Move
00013710 4440                       		neg.w	d0
00013712                            
00013712                            Obj60_Move:
00013712 1140 0036                  		move.b	d0,$36(a0)
00013716 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
0001371C 5428 0024                  		addq.b	#2,$24(a0)
00013720 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00013726 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
0001372C 6700                       		beq.s	locret_11DBC	; if not, branch
0001372E 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00013732                            
00013732                            locret_11DBC:
00013732 4E75                       		rts	
00013734                            ; ===========================================================================
00013734                            
00013734                            Obj60_ChkSonic:				; XREF: Obj60_Index
00013734 3038 D008                  		move.w	($FFFFD008).w,d0
00013738 9068 0008                  		sub.w	8(a0),d0
0001373C 6400                       		bcc.s	loc_11DCA
0001373E 4440                       		neg.w	d0
00013740                            
00013740                            loc_11DCA:
00013740 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00013744 6400                       		bcc.s	Obj60_Animate	; if not, branch
00013746 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001374A 9068 000C                  		sub.w	$C(a0),d0
0001374E 6400                       		bcc.s	loc_11DDC
00013750 4440                       		neg.w	d0
00013752                            
00013752                            loc_11DDC:
00013752 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00013756 6400                       		bcc.s	Obj60_Animate	; if not, branch
00013758 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001375C 6600                       		bne.s	Obj60_Animate	; if yes, branch
0001375E 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00013764                            
00013764                            Obj60_Animate:
00013764 43F9 0000 0000             		lea	(Ani_obj60).l,a1
0001376A 6100 825E                  		bsr.w	AnimateSprite
0001376E 6000 0000                  		bra.w	Obj60_ChkDel
00013772                            ; ===========================================================================
00013772                            
00013772                            Obj60_Display:				; XREF: Obj60_Index
00013772 6100 B1DC                  		bsr.w	SpeedToPos
00013776                            
00013776                            Obj60_ChkDel:				; XREF: Obj60_Animate
00013776 3028 0008                  		move.w	8(a0),d0
0001377A 0240 FF80                  		andi.w	#$FF80,d0
0001377E 3238 F700                  		move.w	($FFFFF700).w,d1
00013782 0441 0080                  		subi.w	#$80,d1
00013786 0241 FF80                  		andi.w	#$FF80,d1
0001378A 9041                       		sub.w	d1,d0
0001378C 0C40 0280                  		cmpi.w	#$280,d0
00013790 6200 0000                  		bhi.w	Obj60_ChkGone
00013794 6000 B1D4                  		bra.w	DisplaySprite
00013798                            ; ===========================================================================
00013798                            
00013798                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00013798 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001379C 6700                       		beq.s	loc_11E34		; if it's zero, don't remember object
0001379E 3440                       		movea.w	d0,a2	; load address into a2
000137A0 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000137A4                            
000137A4                            loc_11E34:
000137A4 45E8 0037                  		lea	$37(a0),a2
000137A8 7400                       		moveq	#0,d2
000137AA 141A                       		move.b	(a2)+,d2
000137AC 5342                       		subq.w	#1,d2
000137AE 6500                       		bcs.s	Obj60_Delete
000137B0                            
000137B0                            loc_11E40:
000137B0 7000                       		moveq	#0,d0
000137B2 101A                       		move.b	(a2)+,d0
000137B4 ED48                       		lsl.w	#6,d0
000137B6 0680 00FF D000             		addi.l	#$FFD000,d0
000137BC 2240                       		movea.l	d0,a1
000137BE 6100 B1FC                  		bsr.w	DeleteObject2
000137C2 51CA FFEC                  		dbf	d2,loc_11E40
000137C6                            
000137C6                            Obj60_Delete:
000137C6 6000 B1F2                  		bra.w	DeleteObject
000137CA                            ; ===========================================================================
000137CA                            
000137CA                            Obj60_MoveOrb:				; XREF: Obj60_Index
000137CA 2268 003C                  		movea.l	$3C(a0),a1
000137CE 0C11 0060                  		cmpi.b	#$60,0(a1)
000137D2 6600 B1E6                  		bne.w	DeleteObject
000137D6 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000137DC 6600                       		bne.s	Obj60_Circle
000137DE 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000137E4 6600                       		bne.s	Obj60_Circle
000137E6 5428 0024                  		addq.b	#2,$24(a0)
000137EA 5329 0037                  		subq.b	#1,$37(a1)
000137EE 6600                       		bne.s	Obj60_FireOrb
000137F0 5429 0024                  		addq.b	#2,$24(a1)
000137F4                            
000137F4                            Obj60_FireOrb:
000137F4 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000137FA 0829 0000 0022             		btst	#0,$22(a1)
00013800 6700                       		beq.s	Obj60_Display2
00013802 4468 0010                  		neg.w	$10(a0)
00013806                            
00013806                            Obj60_Display2:
00013806 6000 B162                  		bra.w	DisplaySprite
0001380A                            ; ===========================================================================
0001380A                            
0001380A                            Obj60_Circle:				; XREF: Obj60_MoveOrb
0001380A 1028 0026                  		move.b	$26(a0),d0
0001380E 4EB9 0000 29F6             		jsr	(CalcSine).l
00013814 E841                       		asr.w	#4,d1
00013816 D269 0008                  		add.w	8(a1),d1
0001381A 3141 0008                  		move.w	d1,8(a0)
0001381E E840                       		asr.w	#4,d0
00013820 D069 000C                  		add.w	$C(a1),d0
00013824 3140 000C                  		move.w	d0,$C(a0)
00013828 1029 0036                  		move.b	$36(a1),d0
0001382C D128 0026                  		add.b	d0,$26(a0)
00013830 6000 B138                  		bra.w	DisplaySprite
00013834                            ; ===========================================================================
00013834                            
00013834                            Obj60_ChkDel2:				; XREF: Obj60_Index
00013834 6100 B11A                  		bsr.w	SpeedToPos
00013838 4A28 0001                  		tst.b	1(a0)
0001383C 6A00 B17C                  		bpl.w	DeleteObject
00013840 6000 B128                  		bra.w	DisplaySprite
00013844                            ; ===========================================================================
00013844                            Ani_obj60:
00013844                            	include "_anim\obj60.asm"
00013844                            ; ---------------------------------------------------------------------------
00013844                            ; Animation script - Orbinaut enemy
00013844                            ; ---------------------------------------------------------------------------
00013844 0000                       		dc.w byte_11EDA-Ani_obj60
00013846 0000                       		dc.w byte_11EDE-Ani_obj60
00013848 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
0001384C 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00013852                            		even
00013852                            		even
00013852                            
00013852                            ; ---------------------------------------------------------------------------
00013852                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00013852                            ; ---------------------------------------------------------------------------
00013852                            Map_obj60:
00013852                            	include "_maps\obj60.asm"
00013852                            ; ---------------------------------------------------------------------------
00013852                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00013852                            ; ---------------------------------------------------------------------------
00013852 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00013856 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
0001385A 01                         byte_11EEC:	dc.b 1
0001385B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013860 01                         byte_11EF2:	dc.b 1
00013861 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00013866 01                         byte_11EF8:	dc.b 1
00013867 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001386C 01                         byte_11EFE:	dc.b 1
0001386D F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00013872                            		even
00013872                            		even
00013872                            
00013872                            ; ===========================================================================
00013872                            ; ---------------------------------------------------------------------------
00013872                            ; Object 16 - harpoon (LZ)
00013872                            ; ---------------------------------------------------------------------------
00013872                            
00013872                            Obj16:					; XREF: Obj_Index
00013872 7000                       		moveq	#0,d0
00013874 1028 0024                  		move.b	$24(a0),d0
00013878 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
0001387C 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00013880                            ; ===========================================================================
00013880 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00013882 0000                       		dc.w Obj16_Move-Obj16_Index
00013884 0000                       		dc.w Obj16_Wait-Obj16_Index
00013886                            ; ===========================================================================
00013886                            
00013886                            Obj16_Main:				; XREF: Obj16_Index
00013886 5428 0024                  		addq.b	#2,$24(a0)
0001388A 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00013892 317C 03CC 0002             		move.w	#$3CC,2(a0)
00013898 0028 0004 0001             		ori.b	#4,1(a0)
0001389E 117C 0004 0018             		move.b	#4,$18(a0)
000138A4 1168 0028 001C             		move.b	$28(a0),$1C(a0)
000138AA 117C 0014 0019             		move.b	#$14,$19(a0)
000138B0 317C 003C 0030             		move.w	#60,$30(a0)
000138B6                            
000138B6                            Obj16_Move:				; XREF: Obj16_Index
000138B6 43F9 0000 0000             		lea	(Ani_obj16).l,a1
000138BC 6100 810C                  		bsr.w	AnimateSprite
000138C0 7000                       		moveq	#0,d0
000138C2 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
000138C6 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
000138CC 6000 D6E6                  		bra.w	MarkObjGone
000138D0                            ; ===========================================================================
000138D0 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
000138D6                            ; ===========================================================================
000138D6                            
000138D6                            Obj16_Wait:				; XREF: Obj16_Index
000138D6 5368 0030                  		subq.w	#1,$30(a0)
000138DA 6A00                       		bpl.s	Obj16_ChkDel
000138DC 317C 003C 0030             		move.w	#60,$30(a0)
000138E2 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000138E6 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000138EC                            
000138EC                            Obj16_ChkDel:
000138EC 6000 D6C6                  		bra.w	MarkObjGone
000138F0                            ; ===========================================================================
000138F0                            Ani_obj16:
000138F0                            	include "_anim\obj16.asm"
000138F0                            ; ---------------------------------------------------------------------------
000138F0                            ; Animation script - harpoon (LZ)
000138F0                            ; ---------------------------------------------------------------------------
000138F0 0000                       		dc.w byte_11F8A-Ani_obj16
000138F2 0000                       		dc.w byte_11F8E-Ani_obj16
000138F4 0000                       		dc.w byte_11F92-Ani_obj16
000138F6 0000                       		dc.w byte_11F96-Ani_obj16
000138F8 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000138FC 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00013900 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00013904 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00013908                            		even
00013908                            		even
00013908                            
00013908                            ; ---------------------------------------------------------------------------
00013908                            ; Sprite mappings - harpoon (LZ)
00013908                            ; ---------------------------------------------------------------------------
00013908                            Map_obj16:
00013908                            	include "_maps\obj16.asm"
00013908                            ; ---------------------------------------------------------------------------
00013908                            ; Sprite mappings - harpoon (LZ)
00013908                            ; ---------------------------------------------------------------------------
00013908 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
0001390C 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00013910 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00013914 01                         byte_11FA6:	dc.b 1
00013915 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0001391A 01                         byte_11FAC:	dc.b 1
0001391B FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00013920 02                         byte_11FB2:	dc.b 2
00013921 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00013926 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
0001392B 01                         byte_11FBD:	dc.b 1
0001392C F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00013931 01                         byte_11FC3:	dc.b 1
00013932 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00013937 02                         byte_11FC9:	dc.b 2
00013938 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
0001393D F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00013942                            		even
00013942                            		even
00013942                            
00013942                            ; ===========================================================================
00013942                            ; ---------------------------------------------------------------------------
00013942                            ; Object 61 - blocks (LZ)
00013942                            ; ---------------------------------------------------------------------------
00013942                            
00013942                            Obj61:					; XREF: Obj_Index
00013942 7000                       		moveq	#0,d0
00013944 1028 0024                  		move.b	$24(a0),d0
00013948 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
0001394C 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00013950                            ; ===========================================================================
00013950 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00013952 0000                       		dc.w Obj61_Action-Obj61_Index
00013954                            
00013954 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00013956 200C                       		dc.b $20, $C
00013958 1010                       		dc.b $10, $10
0001395A 1010                       		dc.b $10, $10
0001395C                            ; ===========================================================================
0001395C                            
0001395C                            Obj61_Main:				; XREF: Obj61_Index
0001395C 5428 0024                  		addq.b	#2,$24(a0)
00013960 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00013968 317C 43E6 0002             		move.w	#$43E6,2(a0)
0001396E 117C 0004 0001             		move.b	#4,1(a0)
00013974 117C 0003 0018             		move.b	#3,$18(a0)
0001397A 7000                       		moveq	#0,d0
0001397C 1028 0028                  		move.b	$28(a0),d0
00013980 E648                       		lsr.w	#3,d0
00013982 0240 000E                  		andi.w	#$E,d0
00013986 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
0001398A 115A 0019                  		move.b	(a2)+,$19(a0)
0001398E 1152 0016                  		move.b	(a2),$16(a0)
00013992 E248                       		lsr.w	#1,d0
00013994 1140 001A                  		move.b	d0,$1A(a0)
00013998 3168 0008 0034             		move.w	8(a0),$34(a0)
0001399E 3168 000C 0030             		move.w	$C(a0),$30(a0)
000139A4 1028 0028                  		move.b	$28(a0),d0
000139A8 0200 000F                  		andi.b	#$F,d0
000139AC 6700                       		beq.s	Obj61_Action
000139AE 0C00 0007                  		cmpi.b	#7,d0
000139B2 6700                       		beq.s	Obj61_Action
000139B4 117C 0001 0038             		move.b	#1,$38(a0)
000139BA                            
000139BA                            Obj61_Action:				; XREF: Obj61_Index
000139BA 3F28 0008                  		move.w	8(a0),-(sp)
000139BE 7000                       		moveq	#0,d0
000139C0 1028 0028                  		move.b	$28(a0),d0
000139C4 0240 000F                  		andi.w	#$F,d0
000139C8 D040                       		add.w	d0,d0
000139CA 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
000139CE 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
000139D2 381F                       		move.w	(sp)+,d4
000139D4 4A28 0001                  		tst.b	1(a0)
000139D8 6A00                       		bpl.s	Obj61_ChkDel
000139DA 7200                       		moveq	#0,d1
000139DC 1228 0019                  		move.b	$19(a0),d1
000139E0 0641 000B                  		addi.w	#$B,d1
000139E4 7400                       		moveq	#0,d2
000139E6 1428 0016                  		move.b	$16(a0),d2
000139EA 3602                       		move.w	d2,d3
000139EC 5243                       		addq.w	#1,d3
000139EE 6100 D8E8                  		bsr.w	SolidObject
000139F2 1144 003F                  		move.b	d4,$3F(a0)
000139F6 6100 0000                  		bsr.w	loc_12180
000139FA                            
000139FA                            Obj61_ChkDel:
000139FA 3028 0034                  		move.w	$34(a0),d0
000139FE 0240 FF80                  		andi.w	#$FF80,d0
00013A02 3238 F700                  		move.w	($FFFFF700).w,d1
00013A06 0441 0080                  		subi.w	#$80,d1
00013A0A 0241 FF80                  		andi.w	#$FF80,d1
00013A0E 9041                       		sub.w	d1,d0
00013A10 0C40 0280                  		cmpi.w	#$280,d0
00013A14 6300 AF54                  		bls.w	DisplaySprite
00013A18 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00013A1C 6700 AF9C                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
00013A20 3440                       		movea.w	d0,a2	; load address into a2
00013A22 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
00013A26 6000 AF92                  		bra.w	DeleteObject
00013A2A                            ; ===========================================================================
00013A2A 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00013A2E 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00013A32 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00013A36 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00013A3A                            ; ===========================================================================
00013A3A                            
00013A3A                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00013A3A 4E75                       		rts	
00013A3C                            ; ===========================================================================
00013A3C                            
00013A3C                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00013A3C 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00013A40 6600                       		bne.s	loc_120D6	; if yes, branch
00013A42 0828 0003 0022             		btst	#3,$22(a0)
00013A48 6700                       		beq.s	locret_120D4
00013A4A 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
00013A50                            
00013A50                            locret_120D4:
00013A50 4E75                       		rts	
00013A52                            ; ===========================================================================
00013A52                            
00013A52                            loc_120D6:
00013A52 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00013A56 66F8                       		bne.s	locret_120D4	; if time remains, branch
00013A58 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00013A5C 4228 0038                  		clr.b	$38(a0)
00013A60 4E75                       		rts	
00013A62                            ; ===========================================================================
00013A62                            
00013A62                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00013A62 6100 AEEC                  		bsr.w	SpeedToPos
00013A66 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00013A6A 6100 0000                  		bsr.w	ObjHitFloor
00013A6E 4A41                       		tst.w	d1
00013A70 6A00 0000                  		bpl.w	locret_12106
00013A74 5241                       		addq.w	#1,d1
00013A76 D368 000C                  		add.w	d1,$C(a0)
00013A7A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00013A7E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013A82                            
00013A82                            locret_12106:
00013A82 4E75                       		rts	
00013A84                            ; ===========================================================================
00013A84                            
00013A84                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00013A84 6100 AECA                  		bsr.w	SpeedToPos
00013A88 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00013A8C 6100 0000                  		bsr.w	ObjHitCeiling
00013A90 4A41                       		tst.w	d1
00013A92 6A00 0000                  		bpl.w	locret_12126
00013A96 9368 000C                  		sub.w	d1,$C(a0)
00013A9A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00013A9E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013AA2                            
00013AA2                            locret_12126:
00013AA2 4E75                       		rts	
00013AA4                            ; ===========================================================================
00013AA4                            
00013AA4                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00013AA4 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00013AAA 6600                       		bne.s	locret_12138	; if not, branch
00013AAC 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00013AB0 4228 0038                  		clr.b	$38(a0)
00013AB4                            
00013AB4                            locret_12138:
00013AB4 4E75                       		rts	
00013AB6                            ; ===========================================================================
00013AB6                            
00013AB6                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00013AB6 3038 F646                  		move.w	($FFFFF646).w,d0
00013ABA 9068 000C                  		sub.w	$C(a0),d0
00013ABE 6700                       		beq.s	locret_1217E
00013AC0 6400                       		bcc.s	loc_12162
00013AC2 0C40 FFFE                  		cmpi.w	#-2,d0
00013AC6 6C00                       		bge.s	loc_1214E
00013AC8 70FE                       		moveq	#-2,d0
00013ACA                            
00013ACA                            loc_1214E:
00013ACA D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00013ACE 6100 0000                  		bsr.w	ObjHitCeiling
00013AD2 4A41                       		tst.w	d1
00013AD4 6A00 0000                  		bpl.w	locret_12160
00013AD8 9368 000C                  		sub.w	d1,$C(a0)
00013ADC                            
00013ADC                            locret_12160:
00013ADC 4E75                       		rts	
00013ADE                            ; ===========================================================================
00013ADE                            
00013ADE                            loc_12162:				; XREF: Obj61_Type07
00013ADE 0C40 0002                  		cmpi.w	#2,d0
00013AE2 6F00                       		ble.s	loc_1216A
00013AE4 7002                       		moveq	#2,d0
00013AE6                            
00013AE6                            loc_1216A:
00013AE6 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00013AEA 6100 0000                  		bsr.w	ObjHitFloor
00013AEE 4A41                       		tst.w	d1
00013AF0 6A00 0000                  		bpl.w	locret_1217E
00013AF4 5241                       		addq.w	#1,d1
00013AF6 D368 000C                  		add.w	d1,$C(a0)
00013AFA                            
00013AFA                            locret_1217E:
00013AFA 4E75                       		rts	
00013AFC                            ; ===========================================================================
00013AFC                            
00013AFC                            loc_12180:				; XREF: Obj61_Action
00013AFC 4A28 0038                  		tst.b	$38(a0)
00013B00 6700                       		beq.s	locret_121C0
00013B02 0828 0003 0022             		btst	#3,$22(a0)
00013B08 6600                       		bne.s	loc_1219A
00013B0A 4A28 003E                  		tst.b	$3E(a0)
00013B0E 6700                       		beq.s	locret_121C0
00013B10 5928 003E                  		subq.b	#4,$3E(a0)
00013B14 6000                       		bra.s	loc_121A6
00013B16                            ; ===========================================================================
00013B16                            
00013B16                            loc_1219A:
00013B16 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00013B1C 6700                       		beq.s	locret_121C0
00013B1E 5828 003E                  		addq.b	#4,$3E(a0)
00013B22                            
00013B22                            loc_121A6:
00013B22 1028 003E                  		move.b	$3E(a0),d0
00013B26 4EB9 0000 29F6             		jsr	(CalcSine).l
00013B2C 323C 0400                  		move.w	#$400,d1
00013B30 C1C1                       		muls.w	d1,d0
00013B32 4840                       		swap	d0
00013B34 D068 0030                  		add.w	$30(a0),d0
00013B38 3140 000C                  		move.w	d0,$C(a0)
00013B3C                            
00013B3C                            locret_121C0:
00013B3C 4E75                       		rts	
00013B3E                            ; ===========================================================================
00013B3E                            ; ---------------------------------------------------------------------------
00013B3E                            ; Sprite mappings - blocks (LZ)
00013B3E                            ; ---------------------------------------------------------------------------
00013B3E                            Map_obj61:
00013B3E                            	include "_maps\obj61.asm"
00013B3E                            ; ---------------------------------------------------------------------------
00013B3E                            ; Sprite mappings - blocks (LZ)
00013B3E                            ; ---------------------------------------------------------------------------
00013B3E 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00013B42 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00013B46 01                         byte_121CA:	dc.b 1
00013B47 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00013B4C 02                         byte_121D0:	dc.b 2
00013B4D F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00013B52 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00013B57 01                         byte_121DB:	dc.b 1
00013B58 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00013B5D 01                         byte_121E1:	dc.b 1
00013B5E F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00013B64 00                         		even
00013B64 00                         		even
00013B64                            
00013B64                            ; ===========================================================================
00013B64                            ; ---------------------------------------------------------------------------
00013B64                            ; Object 62 - gargoyle head (LZ)
00013B64                            ; ---------------------------------------------------------------------------
00013B64                            
00013B64                            Obj62:					; XREF: Obj_Index
00013B64 7000                       		moveq	#0,d0
00013B66 1028 0024                  		move.b	$24(a0),d0
00013B6A 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00013B6E 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00013B72 6000 D440                  		bra.w	MarkObjGone
00013B76                            ; ===========================================================================
00013B76 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00013B78 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00013B7A 0000                       		dc.w Obj62_FireBall-Obj62_Index
00013B7C 0000                       		dc.w Obj62_AniFire-Obj62_Index
00013B7E                            
00013B7E 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00013B86                            ; ===========================================================================
00013B86                            
00013B86                            Obj62_Main:				; XREF: Obj62_Index
00013B86 5428 0024                  		addq.b	#2,$24(a0)
00013B8A 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013B92 317C 42E9 0002             		move.w	#$42E9,2(a0)
00013B98 0028 0004 0001             		ori.b	#4,1(a0)
00013B9E 117C 0003 0018             		move.b	#3,$18(a0)
00013BA4 117C 0010 0019             		move.b	#$10,$19(a0)
00013BAA 1028 0028                  		move.b	$28(a0),d0	; get object type
00013BAE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00013BB2 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00013BB8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013BBE 0228 000F 0028             		andi.b	#$F,$28(a0)
00013BC4                            
00013BC4                            Obj62_MakeFire:				; XREF: Obj62_Index
00013BC4 5328 001E                  		subq.b	#1,$1E(a0)
00013BC8 6600                       		bne.s	Obj62_NoFire
00013BCA 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013BD0 6100 B15E                  		bsr.w	ChkObjOnScreen
00013BD4 6600                       		bne.s	Obj62_NoFire
00013BD6 6100 B4E8                  		bsr.w	SingleObjLoad
00013BDA 6600                       		bne.s	Obj62_NoFire
00013BDC 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00013BE0 5829 0024                  		addq.b	#4,$24(a1)
00013BE4 3368 0008 0008             		move.w	8(a0),8(a1)
00013BEA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013BF0 1368 0001 0001             		move.b	1(a0),1(a1)
00013BF6 1368 0022 0022             		move.b	$22(a0),$22(a1)
00013BFC                            
00013BFC                            Obj62_NoFire:
00013BFC 4E75                       		rts	
00013BFE                            ; ===========================================================================
00013BFE                            
00013BFE                            Obj62_FireBall:				; XREF: Obj62_Index
00013BFE 5428 0024                  		addq.b	#2,$24(a0)
00013C02 117C 0008 0016             		move.b	#8,$16(a0)
00013C08 117C 0008 0017             		move.b	#8,$17(a0)
00013C0E 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013C16 317C 02E9 0002             		move.w	#$2E9,2(a0)
00013C1C 0028 0004 0001             		ori.b	#4,1(a0)
00013C22 117C 0004 0018             		move.b	#4,$18(a0)
00013C28 117C 0098 0020             		move.b	#$98,$20(a0)
00013C2E 117C 0008 0019             		move.b	#8,$19(a0)
00013C34 117C 0002 001A             		move.b	#2,$1A(a0)
00013C3A 5068 000C                  		addq.w	#8,$C(a0)
00013C3E 317C 0200 0010             		move.w	#$200,$10(a0)
00013C44 0828 0000 0022             		btst	#0,$22(a0)
00013C4A 6600                       		bne.s	Obj62_Sound
00013C4C 4468 0010                  		neg.w	$10(a0)
00013C50                            
00013C50                            Obj62_Sound:
00013C50 303C 00AE                  		move.w	#$AE,d0
00013C54 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play lava ball sound
00013C5A                            
00013C5A                            Obj62_AniFire:				; XREF: Obj62_Index
00013C5A 1038 FE05                  		move.b	($FFFFFE05).w,d0
00013C5E 0200 0007                  		andi.b	#7,d0
00013C62 6600                       		bne.s	Obj62_StopFire
00013C64 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00013C6A                            
00013C6A                            Obj62_StopFire:
00013C6A 6100 ACE4                  		bsr.w	SpeedToPos
00013C6E 0828 0000 0022             		btst	#0,$22(a0)
00013C74 6600                       		bne.s	Obj62_StopFire2
00013C76 76F8                       		moveq	#-8,d3
00013C78 6100 0000                  		bsr.w	ObjHitWallLeft
00013C7C 4A41                       		tst.w	d1
00013C7E 6B00 AD3A                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00013C82 4E75                       		rts	
00013C84                            ; ===========================================================================
00013C84                            
00013C84                            Obj62_StopFire2:
00013C84 7608                       		moveq	#8,d3
00013C86 6100 0000                  		bsr.w	ObjHitWallRight
00013C8A 4A41                       		tst.w	d1
00013C8C 6B00 AD2C                  		bmi.w	DeleteObject
00013C90 4E75                       		rts	
00013C92                            ; ===========================================================================
00013C92                            ; ---------------------------------------------------------------------------
00013C92                            ; Sprite mappings - gargoyle head (LZ)
00013C92                            ; ---------------------------------------------------------------------------
00013C92                            Map_obj62:
00013C92                            	include "_maps\obj62.asm"
00013C92                            ; ---------------------------------------------------------------------------
00013C92                            ; Sprite mappings - gargoyle head (LZ)
00013C92                            ; ---------------------------------------------------------------------------
00013C92 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00013C96 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00013C9A 03                         byte_12320:	dc.b 3
00013C9B F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00013CA0 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00013CA5 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00013CAA 01                         byte_12330:	dc.b 1
00013CAB FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00013CB0 01                         byte_12336:	dc.b 1
00013CB1 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00013CB6                            		even
00013CB6                            		even
00013CB6                            
00013CB6                            ; ===========================================================================
00013CB6                            ; ---------------------------------------------------------------------------
00013CB6                            ; Object 63 - platforms	on a conveyor belt (LZ)
00013CB6                            ; ---------------------------------------------------------------------------
00013CB6                            
00013CB6                            Obj63:					; XREF: Obj_Index
00013CB6 7000                       		moveq	#0,d0
00013CB8 1028 0024                  		move.b	$24(a0),d0
00013CBC 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00013CC0 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00013CC4 3028 0030                  		move.w	$30(a0),d0
00013CC8 0240 FF80                  		andi.w	#$FF80,d0
00013CCC 3238 F700                  		move.w	($FFFFF700).w,d1
00013CD0 0441 0080                  		subi.w	#$80,d1
00013CD4 0241 FF80                  		andi.w	#$FF80,d1
00013CD8 9041                       		sub.w	d1,d0
00013CDA 0C40 0280                  		cmpi.w	#$280,d0
00013CDE 6300                       		bls.s	Obj63_Display
00013CE0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00013CE4 6700                       		beq.s	loc_1236A		; if it's zero, don't remember object
00013CE6 3440                       		movea.w	d0,a2	; load address into a2
00013CE8 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00013CEC 6000                       		bra.s	loc_1236A	; and delete object
00013CEE                            
00013CEE                            Obj63_Display:				; XREF: loc_1236A
00013CEE 6000 AC7A                  		bra.w	DisplaySprite
00013CF2                            ; ===========================================================================
00013CF2                            
00013CF2                            loc_1236A:				; XREF: Obj63
00013CF2 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00013CF8 6600                       		bne.s	loc_12378
00013CFA 0C40 FF80                  		cmpi.w	#-$80,d0
00013CFE 64EE                       		bcc.s	Obj63_Display
00013D00                            
00013D00                            loc_12378:
00013D00 1028 002F                  		move.b	$2F(a0),d0
00013D04 6A00 ACB4                  		bpl.w	DeleteObject
00013D08 0240 007F                  		andi.w	#$7F,d0
00013D0C 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013D10 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00013D16 6000 ACA2                  		bra.w	DeleteObject
00013D1A                            ; ===========================================================================
00013D1A 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00013D1C 0000                       		dc.w loc_124B2-Obj63_Index
00013D1E 0000                       		dc.w loc_124C2-Obj63_Index
00013D20 0000                       		dc.w loc_124DE-Obj63_Index
00013D22                            ; ===========================================================================
00013D22                            
00013D22                            Obj63_Main:				; XREF: Obj63_Index
00013D22 1028 0028                  		move.b	$28(a0),d0
00013D26 6B00 0000                  		bmi.w	loc_12460
00013D2A 5428 0024                  		addq.b	#2,$24(a0)
00013D2E 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00013D36 317C 43F6 0002             		move.w	#$43F6,2(a0)
00013D3C 0028 0004 0001             		ori.b	#4,1(a0)
00013D42 117C 0010 0019             		move.b	#$10,$19(a0)
00013D48 117C 0004 0018             		move.b	#4,$18(a0)
00013D4E 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00013D54 6600                       		bne.s	loc_123E2
00013D56 5828 0024                  		addq.b	#4,$24(a0)
00013D5A 317C 03F6 0002             		move.w	#$3F6,2(a0)
00013D60 117C 0001 0018             		move.b	#1,$18(a0)
00013D66 6000 0000                  		bra.w	loc_124DE
00013D6A                            ; ===========================================================================
00013D6A                            
00013D6A                            loc_123E2:
00013D6A 117C 0004 001A             		move.b	#4,$1A(a0)
00013D70 7000                       		moveq	#0,d0
00013D72 1028 0028                  		move.b	$28(a0),d0
00013D76 3200                       		move.w	d0,d1
00013D78 E648                       		lsr.w	#3,d0
00013D7A 0240 001E                  		andi.w	#$1E,d0
00013D7E 45FA 0000                  		lea	Obj63_Data(pc),a2
00013D82 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013D86 315A 0038                  		move.w	(a2)+,$38(a0)
00013D8A 315A 0030                  		move.w	(a2)+,$30(a0)
00013D8E 214A 003C                  		move.l	a2,$3C(a0)
00013D92 0241 000F                  		andi.w	#$F,d1
00013D96 E549                       		lsl.w	#2,d1
00013D98 1141 0038                  		move.b	d1,$38(a0)
00013D9C 117C 0004 003A             		move.b	#4,$3A(a0)
00013DA2 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013DA6 6700                       		beq.s	loc_1244C
00013DA8 117C 0001 003B             		move.b	#1,$3B(a0)
00013DAE 4428 003A                  		neg.b	$3A(a0)
00013DB2 7200                       		moveq	#0,d1
00013DB4 1228 0038                  		move.b	$38(a0),d1
00013DB8 D228 003A                  		add.b	$3A(a0),d1
00013DBC B228 0039                  		cmp.b	$39(a0),d1
00013DC0 6500                       		bcs.s	loc_12448
00013DC2 1001                       		move.b	d1,d0
00013DC4 7200                       		moveq	#0,d1
00013DC6 4A00                       		tst.b	d0
00013DC8 6A00                       		bpl.s	loc_12448
00013DCA 1228 0039                  		move.b	$39(a0),d1
00013DCE 5901                       		subq.b	#4,d1
00013DD0                            
00013DD0                            loc_12448:
00013DD0 1141 0038                  		move.b	d1,$38(a0)
00013DD4                            
00013DD4                            loc_1244C:
00013DD4 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00013DDA 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00013DE0 6100 0000                  		bsr.w	Obj63_ChangeDir
00013DE4 6000 0000                  		bra.w	loc_124B2
00013DE8                            ; ===========================================================================
00013DE8                            
00013DE8                            loc_12460:				; XREF: Obj63_Main
00013DE8 1140 002F                  		move.b	d0,$2F(a0)
00013DEC 0240 007F                  		andi.w	#$7F,d0
00013DF0 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013DF4 08F2 0000 0000             		bset	#0,(a2,d0.w)
00013DFA 6600 ABBE                  		bne.w	DeleteObject
00013DFE D040                       		add.w	d0,d0
00013E00 0240 001E                  		andi.w	#$1E,d0
00013E04 0640 0070                  		addi.w	#$70,d0
00013E08 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00013E0E D4F2 0000                  		adda.w	(a2,d0.w),a2
00013E12 321A                       		move.w	(a2)+,d1
00013E14 2248                       		movea.l	a0,a1
00013E16 6000                       		bra.s	Obj63_MakePtfms
00013E18                            ; ===========================================================================
00013E18                            
00013E18                            Obj63_Loop:
00013E18 6100 B2A6                  		bsr.w	SingleObjLoad
00013E1C 6600                       		bne.s	loc_124AA
00013E1E                            
00013E1E                            Obj63_MakePtfms:			; XREF: loc_12460
00013E1E 12BC 0063                  		move.b	#$63,0(a1)
00013E22 335A 0008                  		move.w	(a2)+,8(a1)
00013E26 335A 000C                  		move.w	(a2)+,$C(a1)
00013E2A 301A                       		move.w	(a2)+,d0
00013E2C 1340 0028                  		move.b	d0,$28(a1)
00013E30                            
00013E30                            loc_124AA:
00013E30 51C9 FFE6                  		dbf	d1,Obj63_Loop
00013E34                            
00013E34 588F                       		addq.l	#4,sp
00013E36 4E75                       		rts	
00013E38                            ; ===========================================================================
00013E38                            
00013E38                            loc_124B2:				; XREF: Obj63_Index
00013E38 7200                       		moveq	#0,d1
00013E3A 1228 0019                  		move.b	$19(a0),d1
00013E3E 4EB9 0000 856A             		jsr	(PlatformObject).l
00013E44 6000 0000                  		bra.w	sub_12502
00013E48                            ; ===========================================================================
00013E48                            
00013E48                            loc_124C2:				; XREF: Obj63_Index
00013E48 7200                       		moveq	#0,d1
00013E4A 1228 0019                  		move.b	$19(a0),d1
00013E4E 4EB9 0000 86DE             		jsr	(ExitPlatform).l
00013E54 3F28 0008                  		move.w	8(a0),-(sp)
00013E58 6100 0000                  		bsr.w	sub_12502
00013E5C 341F                       		move.w	(sp)+,d2
00013E5E 4EF9 0000 8C54             		jmp	(MvSonicOnPtfm2).l
00013E64                            ; ===========================================================================
00013E64                            
00013E64                            loc_124DE:				; XREF: Obj63_Index
00013E64 3038 FE04                  		move.w	($FFFFFE04).w,d0
00013E68 0240 0003                  		andi.w	#3,d0
00013E6C 6600                       		bne.s	loc_124FC
00013E6E 7201                       		moveq	#1,d1
00013E70 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013E74 6700                       		beq.s	loc_124F2
00013E76 4401                       		neg.b	d1
00013E78                            
00013E78                            loc_124F2:
00013E78 D328 001A                  		add.b	d1,$1A(a0)
00013E7C 0228 0003 001A             		andi.b	#3,$1A(a0)
00013E82                            
00013E82                            loc_124FC:
00013E82 588F                       		addq.l	#4,sp
00013E84 6000 D12E                  		bra.w	MarkObjGone
00013E88                            
00013E88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E88                            
00013E88                            
00013E88                            sub_12502:				; XREF: loc_124B2; loc_124C2
00013E88 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00013E8C 6700                       		beq.s	loc_12520
00013E8E 4A28 003B                  		tst.b	$3B(a0)
00013E92 6600                       		bne.s	loc_12520
00013E94 117C 0001 003B             		move.b	#1,$3B(a0)
00013E9A 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00013EA0 4428 003A                  		neg.b	$3A(a0)
00013EA4 6000                       		bra.s	loc_12534
00013EA6                            ; ===========================================================================
00013EA6                            
00013EA6                            loc_12520:
00013EA6 3028 0008                  		move.w	8(a0),d0
00013EAA B068 0034                  		cmp.w	$34(a0),d0
00013EAE 6600                       		bne.s	loc_1256A
00013EB0 3028 000C                  		move.w	$C(a0),d0
00013EB4 B068 0036                  		cmp.w	$36(a0),d0
00013EB8 6600                       		bne.s	loc_1256A
00013EBA                            
00013EBA                            loc_12534:
00013EBA 7200                       		moveq	#0,d1
00013EBC 1228 0038                  		move.b	$38(a0),d1
00013EC0 D228 003A                  		add.b	$3A(a0),d1
00013EC4 B228 0039                  		cmp.b	$39(a0),d1
00013EC8 6500                       		bcs.s	loc_12552
00013ECA 1001                       		move.b	d1,d0
00013ECC 7200                       		moveq	#0,d1
00013ECE 4A00                       		tst.b	d0
00013ED0 6A00                       		bpl.s	loc_12552
00013ED2 1228 0039                  		move.b	$39(a0),d1
00013ED6 5901                       		subq.b	#4,d1
00013ED8                            
00013ED8                            loc_12552:
00013ED8 1141 0038                  		move.b	d1,$38(a0)
00013EDC 2268 003C                  		movea.l	$3C(a0),a1
00013EE0 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00013EE6 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00013EEC 6100 0000                  		bsr.w	Obj63_ChangeDir
00013EF0                            
00013EF0                            loc_1256A:
00013EF0 6100 AA5E                  		bsr.w	SpeedToPos
00013EF4 4E75                       		rts	
00013EF6                            ; End of function sub_12502
00013EF6                            
00013EF6                            
00013EF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EF6                            
00013EF6                            
00013EF6                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00013EF6 7000                       		moveq	#0,d0
00013EF8 343C FF00                  		move.w	#-$100,d2
00013EFC 3028 0008                  		move.w	8(a0),d0
00013F00 9068 0034                  		sub.w	$34(a0),d0
00013F04 6400                       		bcc.s	loc_12584
00013F06 4440                       		neg.w	d0
00013F08 4442                       		neg.w	d2
00013F0A                            
00013F0A                            loc_12584:
00013F0A 7200                       		moveq	#0,d1
00013F0C 363C FF00                  		move.w	#-$100,d3
00013F10 3228 000C                  		move.w	$C(a0),d1
00013F14 9268 0036                  		sub.w	$36(a0),d1
00013F18 6400                       		bcc.s	loc_12598
00013F1A 4441                       		neg.w	d1
00013F1C 4443                       		neg.w	d3
00013F1E                            
00013F1E                            loc_12598:
00013F1E B240                       		cmp.w	d0,d1
00013F20 6500                       		bcs.s	loc_125C2
00013F22 3028 0008                  		move.w	8(a0),d0
00013F26 9068 0034                  		sub.w	$34(a0),d0
00013F2A 6700                       		beq.s	loc_125AE
00013F2C 48C0                       		ext.l	d0
00013F2E E180                       		asl.l	#8,d0
00013F30 81C1                       		divs.w	d1,d0
00013F32 4440                       		neg.w	d0
00013F34                            
00013F34                            loc_125AE:
00013F34 3140 0010                  		move.w	d0,$10(a0)
00013F38 3143 0012                  		move.w	d3,$12(a0)
00013F3C 4840                       		swap	d0
00013F3E 3140 000A                  		move.w	d0,$A(a0)
00013F42 4268 000E                  		clr.w	$E(a0)
00013F46 4E75                       		rts	
00013F48                            ; ===========================================================================
00013F48                            
00013F48                            loc_125C2:				; XREF: Obj63_ChangeDir
00013F48 3228 000C                  		move.w	$C(a0),d1
00013F4C 9268 0036                  		sub.w	$36(a0),d1
00013F50 6700                       		beq.s	loc_125D4
00013F52 48C1                       		ext.l	d1
00013F54 E181                       		asl.l	#8,d1
00013F56 83C0                       		divs.w	d0,d1
00013F58 4441                       		neg.w	d1
00013F5A                            
00013F5A                            loc_125D4:
00013F5A 3141 0012                  		move.w	d1,$12(a0)
00013F5E 3142 0010                  		move.w	d2,$10(a0)
00013F62 4841                       		swap	d1
00013F64 3141 000E                  		move.w	d1,$E(a0)
00013F68 4268 000A                  		clr.w	$A(a0)
00013F6C 4E75                       		rts	
00013F6E                            ; End of function Obj63_ChangeDir
00013F6E                            
00013F6E                            ; ===========================================================================
00013F6E 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00013F70 0000                       		dc.w word_12610-Obj63_Data
00013F72 0000                       		dc.w word_12628-Obj63_Data
00013F74 0000                       		dc.w word_1263C-Obj63_Data
00013F76 0000                       		dc.w word_12650-Obj63_Data
00013F78 0000                       		dc.w word_12668-Obj63_Data
00013F7A 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00013F8A 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00013F96 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00013FA6 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00013FAE 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00013FC2 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00013FD6 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00013FEE 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014002                            
00014002                            ; ---------------------------------------------------------------------------
00014002                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00014002                            ; ---------------------------------------------------------------------------
00014002                            Map_obj63:
00014002                            	include "_maps\obj63.asm"
00014002                            ; ---------------------------------------------------------------------------
00014002                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00014002                            ; ---------------------------------------------------------------------------
00014002 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00014006 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
0001400A 0000                       		dc.w byte_1269E-Map_obj63
0001400C 01                         byte_12686:	dc.b 1
0001400D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00014012 01                         byte_1268C:	dc.b 1
00014013 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00014018 01                         byte_12692:	dc.b 1
00014019 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0001401E 01                         byte_12698:	dc.b 1
0001401F F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00014024 01                         byte_1269E:	dc.b 1
00014025 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
0001402A                            		even
0001402A                            		even
0001402A                            
0001402A                            ; ===========================================================================
0001402A                            ; ---------------------------------------------------------------------------
0001402A                            ; Object 64 - bubbles (LZ)
0001402A                            ; ---------------------------------------------------------------------------
0001402A                            
0001402A                            Obj64:					; XREF: Obj_Index
0001402A 7000                       		moveq	#0,d0
0001402C 1028 0024                  		move.b	$24(a0),d0
00014030 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00014034 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00014038                            ; ===========================================================================
00014038 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
0001403A 0000                       		dc.w Obj64_Animate-Obj64_Index
0001403C 0000                       		dc.w Obj64_ChkWater-Obj64_Index
0001403E 0000                       		dc.w Obj64_Display2-Obj64_Index
00014040 0000                       		dc.w Obj64_Delete3-Obj64_Index
00014042 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00014044                            ; ===========================================================================
00014044                            
00014044                            Obj64_Main:				; XREF: Obj64_Index
00014044 5428 0024                  		addq.b	#2,$24(a0)
00014048 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00014050 317C 8348 0002             		move.w	#$8348,2(a0)
00014056 117C 0084 0001             		move.b	#$84,1(a0)
0001405C 117C 0010 0019             		move.b	#$10,$19(a0)
00014062 117C 0001 0018             		move.b	#1,$18(a0)
00014068 1028 0028                  		move.b	$28(a0),d0	; get object type
0001406C 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
0001406E 5028 0024                  		addq.b	#8,$24(a0)
00014072 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00014076 1140 0032                  		move.b	d0,$32(a0)
0001407A 1140 0033                  		move.b	d0,$33(a0)
0001407E 117C 0006 001C             		move.b	#6,$1C(a0)
00014084 6000 0000                  		bra.w	Obj64_BblMaker
00014088                            ; ===========================================================================
00014088                            
00014088                            Obj64_Bubble:				; XREF: Obj64_Main
00014088 1140 001C                  		move.b	d0,$1C(a0)
0001408C 3168 0008 0030             		move.w	8(a0),$30(a0)
00014092 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00014098 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001409E 1140 0026                  		move.b	d0,$26(a0)
000140A2                            
000140A2                            Obj64_Animate:				; XREF: Obj64_Index
000140A2 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000140A8 4EB9 0000 B9CA             		jsr	AnimateSprite
000140AE 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
000140B4 6600                       		bne.s	Obj64_ChkWater
000140B6 117C 0001 002E             		move.b	#1,$2E(a0)
000140BC                            
000140BC                            Obj64_ChkWater:				; XREF: Obj64_Index
000140BC 3038 F646                  		move.w	($FFFFF646).w,d0
000140C0 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
000140C4 6400                       		bcc.s	Obj64_Burst	; if yes, branch
000140C6 3038 F60E                  		move.w	(v_pocketbottom).w,d0
000140CA B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
000140CE 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
000140D0 3028 0008                  		move.w	8(a0),d0
000140D4 9078 F610                  		sub.w	(v_pocketx).w,d0
000140D8 0640 0060                  		addi.w	#$60,d0
000140DC 6B00                       		bmi.s	Obj64_Wobble
000140DE 0C40 00C0                  		cmpi.w	#$C0,d0
000140E2 6400                       		bcc.s	Obj64_Wobble
000140E4                            
000140E4                            Obj64_Burst:				; XREF: Obj64_Wobble
000140E4 117C 0006 0024             		move.b	#6,$24(a0)
000140EA 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
000140EE 6000 0000                  		bra.w	Obj64_Display2
000140F2                            ; ===========================================================================
000140F2                            
000140F2                            Obj64_Wobble:				; XREF: Obj64_ChkWater
000140F2 1028 0026                  		move.b	$26(a0),d0
000140F6 5228 0026                  		addq.b	#1,$26(a0)
000140FA 0240 007F                  		andi.w	#$7F,d0
000140FE 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014104 1031 0000                  		move.b	(a1,d0.w),d0
00014108 4880                       		ext.w	d0
0001410A D068 0030                  		add.w	$30(a0),d0
0001410E 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00014112 4A28 002E                  		tst.b	$2E(a0)
00014116 6700                       		beq.s	Obj64_Display
00014118 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
0001411C 6700                       		beq.s	Obj64_Display	; if not, branch
0001411E                            
0001411E 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00014122 303C 00AD                  		move.w	#$AD,d0
00014126 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
0001412C 43F8 D000                  		lea	($FFFFD000).w,a1
00014130 4269 0010                  		clr.w	$10(a1)
00014134 4269 0012                  		clr.w	$12(a1)
00014138 4269 0020                  		clr.w	$20(a1)
0001413C 137C 0015 001C             		move.b	#$15,$1C(a1)
00014142 337C 0023 003E             		move.w	#$23,$3E(a1)
00014148 137C 0000 003C             		move.b	#0,$3C(a1)
0001414E 08A9 0005 0022             		bclr	#5,$22(a1)
00014154 08A9 0004 0022             		bclr	#4,$22(a1)
0001415A 0829 0002 0022             		btst	#2,$22(a1)
00014160 6700 FF82                  		beq.w	Obj64_Burst
00014164 08A9 0002 0022             		bclr	#2,$22(a1)
0001416A 137C 0013 0016             		move.b	#$13,$16(a1)
00014170 137C 0009 0017             		move.b	#9,$17(a1)
00014176 5B69 000C                  		subq.w	#5,$C(a1)
0001417A 6000 FF68                  		bra.w	Obj64_Burst
0001417E                            ; ===========================================================================
0001417E                            
0001417E                            Obj64_Display:				; XREF: Obj64_Wobble
0001417E 6100 A7D0                  		bsr.w	SpeedToPos
00014182 4A28 0001                  		tst.b	1(a0)
00014186 6A00                       		bpl.s	Obj64_Delete
00014188 4EFA A7E0                  		jmp	DisplaySprite
0001418C                            ; ===========================================================================
0001418C                            
0001418C                            Obj64_Delete:
0001418C 4EFA A82C                  		jmp	DeleteObject
00014190                            ; ===========================================================================
00014190                            
00014190                            Obj64_Display2:				; XREF: Obj64_Index
00014190 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00014196 4EB9 0000 B9CA             		jsr	AnimateSprite
0001419C 4A28 0001                  		tst.b	1(a0)
000141A0 6A00                       		bpl.s	Obj64_Delete2
000141A2 4EFA A7C6                  		jmp	DisplaySprite
000141A6                            ; ===========================================================================
000141A6                            
000141A6                            Obj64_Delete2:
000141A6 4EFA A812                  		jmp	DeleteObject
000141AA                            ; ===========================================================================
000141AA                            
000141AA                            Obj64_Delete3:				; XREF: Obj64_Index
000141AA 6000 A80E                  		bra.w	DeleteObject
000141AE                            ; ===========================================================================
000141AE                            
000141AE                            Obj64_BblMaker:				; XREF: Obj64_Index
000141AE 4A68 0036                  		tst.w	$36(a0)
000141B2 6600                       		bne.s	loc_12874
000141B4 3038 F646                  		move.w	($FFFFF646).w,d0
000141B8 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
000141BC 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
000141C0 3038 F60E                  		move.w	(v_pocketbottom).w,d0
000141C4 B068 000C                  		cmp.w	$C(a0),d0
000141C8 6500                       		bcs.s	Obj64_Cont
000141CA 3028 0008                  		move.w	8(a0),d0
000141CE 9078 F610                  		sub.w	(v_pocketx).w,d0
000141D2 0640 0060                  		addi.w	#$60,d0
000141D6 6B00                       		bmi.s	Obj64_Cont
000141D8 0C40 00C0                  		cmpi.w	#$C0,d0
000141DC 6400                       		bcc.s	Obj64_Cont
000141DE 6000 0000                  		bra.w	Obj64_ChkDel
000141E2                            
000141E2                            Obj64_Cont:
000141E2 4A28 0001                  		tst.b	1(a0)
000141E6 6A00 0000                  		bpl.w	Obj64_ChkDel
000141EA 5368 0038                  		subq.w	#1,$38(a0)
000141EE 6A00 0000                  		bpl.w	loc_12914
000141F2 317C 0001 0036             		move.w	#1,$36(a0)
000141F8                            
000141F8                            loc_1283A:
000141F8 4EB9 0000 29D0             		jsr	(RandomNumber).l
000141FE 3200                       		move.w	d0,d1
00014200 0240 0007                  		andi.w	#7,d0
00014204 0C40 0006                  		cmpi.w	#6,d0
00014208 64EE                       		bcc.s	loc_1283A
0001420A                            
0001420A 1140 0034                  		move.b	d0,$34(a0)
0001420E 0241 000C                  		andi.w	#$C,d1
00014212 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00014218 D2C1                       		adda.w	d1,a1
0001421A 2149 003C                  		move.l	a1,$3C(a0)
0001421E 5328 0032                  		subq.b	#1,$32(a0)
00014222 6A00                       		bpl.s	loc_12872
00014224 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001422A 08E8 0007 0036             		bset	#7,$36(a0)
00014230                            
00014230                            loc_12872:
00014230 6000                       		bra.s	loc_1287C
00014232                            ; ===========================================================================
00014232                            
00014232                            loc_12874:				; XREF: Obj64_BblMaker
00014232 5368 0038                  		subq.w	#1,$38(a0)
00014236 6A00 0000                  		bpl.w	loc_12914
0001423A                            
0001423A                            loc_1287C:
0001423A 4EB9 0000 29D0             		jsr	(RandomNumber).l
00014240 0240 001F                  		andi.w	#$1F,d0
00014244 3140 0038                  		move.w	d0,$38(a0)
00014248 6100 AE76                  		bsr.w	SingleObjLoad
0001424C 6600                       		bne.s	loc_128F8
0001424E 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00014252 3368 0008 0008             		move.w	8(a0),8(a1)
00014258 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001425E 0240 000F                  		andi.w	#$F,d0
00014262 5140                       		subq.w	#8,d0
00014264 D169 0008                  		add.w	d0,8(a1)
00014268 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001426E 7000                       		moveq	#0,d0
00014270 1028 0034                  		move.b	$34(a0),d0
00014274 2468 003C                  		movea.l	$3C(a0),a2
00014278 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
0001427E 0828 0007 0036             		btst	#7,$36(a0)
00014284 6700                       		beq.s	loc_128F8
00014286 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001428C 0240 0003                  		andi.w	#3,d0
00014290 6600                       		bne.s	loc_128E4
00014292 08E8 0006 0036             		bset	#6,$36(a0)
00014298 6600                       		bne.s	loc_128F8
0001429A 137C 0002 0028             		move.b	#2,$28(a1)
000142A0                            
000142A0                            loc_128E4:
000142A0 4A28 0034                  		tst.b	$34(a0)
000142A4 6600                       		bne.s	loc_128F8
000142A6 08E8 0006 0036             		bset	#6,$36(a0)
000142AC 6600                       		bne.s	loc_128F8
000142AE 137C 0002 0028             		move.b	#2,$28(a1)
000142B4                            
000142B4                            loc_128F8:
000142B4 5328 0034                  		subq.b	#1,$34(a0)
000142B8 6A00                       		bpl.s	loc_12914
000142BA 4EB9 0000 29D0             		jsr	(RandomNumber).l
000142C0 0240 007F                  		andi.w	#$7F,d0
000142C4 0640 0080                  		addi.w	#$80,d0
000142C8 D168 0038                  		add.w	d0,$38(a0)
000142CC 4268 0036                  		clr.w	$36(a0)
000142D0                            
000142D0                            loc_12914:
000142D0 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000142D6 4EB9 0000 B9CA             		jsr	AnimateSprite
000142DC                            
000142DC                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
000142DC 3028 0008                  		move.w	8(a0),d0
000142E0 0240 FF80                  		andi.w	#$FF80,d0
000142E4 3238 F700                  		move.w	($FFFFF700).w,d1
000142E8 0441 0080                  		subi.w	#$80,d1
000142EC 0241 FF80                  		andi.w	#$FF80,d1
000142F0 9041                       		sub.w	d1,d0
000142F2 0C40 0280                  		cmpi.w	#$280,d0
000142F6 6300                       		bls.s	Obj64_NoDel
000142F8 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000142FC 6700 A6BC                  		beq.w	DeleteObject		; if it's zero, don't remember object
00014300 3440                       		movea.w	d0,a2	; load address into a2
00014302 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00014306 6000 A6B2                  		bra.w	DeleteObject	; and delete object
0001430A                            
0001430A                            Obj64_NoDel:	
0001430A 3038 F646                  		move.w	($FFFFF646).w,d0
0001430E B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00014312 6400                       		bcc.s	Obj64_UW	; if not, branch
00014314 3038 F60E                  		move.w	(v_pocketbottom).w,d0
00014318 B068 000C                  		cmp.w	$C(a0),d0
0001431C 6500 A64C                  		bcs.w	DisplaySprite
00014320 3028 0008                  		move.w	8(a0),d0
00014324 9078 F610                  		sub.w	(v_pocketx).w,d0
00014328 0640 0060                  		addi.w	#$60,d0
0001432C 6B00 A63C                  		bmi.w	DisplaySprite
00014330 0C40 00C0                  		cmpi.w	#$C0,d0
00014334 6400 A634                  		bcc.w	DisplaySprite
00014338                            
00014338                            Obj64_UW:
00014338 4E75                       		rts	
0001433A                            ; ===========================================================================
0001433A                            ; bubble production sequence
0001433A                            
0001433A                            ; 0 = small bubble, 1 =	large bubble
0001433A                            
0001433A 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
0001434C                            
0001434C                            ; ===========================================================================
0001434C                            
0001434C                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
0001434C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00014350 6B00                       		bmi.s	loc_12998
00014352 43F8 D000                  		lea	($FFFFD000).w,a1
00014356 3029 0008                  		move.w	8(a1),d0
0001435A 3228 0008                  		move.w	8(a0),d1
0001435E 0441 0010                  		subi.w	#$10,d1
00014362 B240                       		cmp.w	d0,d1
00014364 6400                       		bcc.s	loc_12998
00014366 0641 0020                  		addi.w	#$20,d1
0001436A B240                       		cmp.w	d0,d1
0001436C 6500                       		bcs.s	loc_12998
0001436E 3029 000C                  		move.w	$C(a1),d0
00014372 3228 000C                  		move.w	$C(a0),d1
00014376 B240                       		cmp.w	d0,d1
00014378 6400                       		bcc.s	loc_12998
0001437A 0641 0010                  		addi.w	#$10,d1
0001437E B240                       		cmp.w	d0,d1
00014380 6500                       		bcs.s	loc_12998
00014382 7001                       		moveq	#1,d0
00014384 4E75                       		rts	
00014386                            ; ===========================================================================
00014386                            
00014386                            loc_12998:
00014386 7000                       		moveq	#0,d0
00014388 4E75                       		rts	
0001438A                            ; ===========================================================================
0001438A                            Ani_obj64:
0001438A                            	include "_anim\obj64.asm"
0001438A                            ; ---------------------------------------------------------------------------
0001438A                            ; Animation script - bubbles (LZ)
0001438A                            ; ---------------------------------------------------------------------------
0001438A 0000                       		dc.w byte_129AA-Ani_obj64
0001438C 0000                       		dc.w byte_129B0-Ani_obj64
0001438E 0000                       		dc.w byte_129B6-Ani_obj64
00014390 0000                       		dc.w byte_129BE-Ani_obj64
00014392 0000                       		dc.w byte_129BE-Ani_obj64
00014394 0000                       		dc.w byte_129C0-Ani_obj64
00014396 0000                       		dc.w byte_129C6-Ani_obj64
00014398 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
0001439E 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
000143A4 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
000143AC 04FC                       byte_129BE:	dc.b 4,	$FC
000143AE 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
000143B4 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
000143BA 00                         		even
000143BA 00                         		even
000143BA                            
000143BA                            ; ---------------------------------------------------------------------------
000143BA                            ; Sprite mappings - bubbles (LZ)
000143BA                            ; ---------------------------------------------------------------------------
000143BA                            Map_obj64:
000143BA                            	include "_maps\obj64.asm"
000143BA                            bubmap:
000143BA 0000                       bubmap_0: 	dc.w bubmap_2E-bubmap
000143BC 0000                       bubmap_2: 	dc.w bubmap_34-bubmap
000143BE 0000                       bubmap_4: 	dc.w bubmap_3A-bubmap
000143C0 0000                       bubmap_6: 	dc.w bubmap_40-bubmap
000143C2 0000                       bubmap_8: 	dc.w bubmap_46-bubmap
000143C4 0000                       bubmap_A: 	dc.w bubmap_4C-bubmap
000143C6 0000                       bubmap_C: 	dc.w bubmap_52-bubmap
000143C8 0000                       bubmap_E: 	dc.w bubmap_58-bubmap
000143CA 0000                       bubmap_10: 	dc.w bubmap_6D-bubmap
000143CC 0000                       bubmap_12: 	dc.w bubmap_82-bubmap
000143CE 0000                       bubmap_14: 	dc.w bubmap_88-bubmap
000143D0 0000                       bubmap_16: 	dc.w bubmap_8E-bubmap
000143D2 0000                       bubmap_18: 	dc.w bubmap_94-bubmap
000143D4 0000                       bubmap_1A: 	dc.w bubmap_9A-bubmap
000143D6 0000                       bubmap_1C: 	dc.w bubmap_A0-bubmap
000143D8 0000                       bubmap_1E: 	dc.w bubmap_A6-bubmap
000143DA 0000                       bubmap_20: 	dc.w bubmap_AC-bubmap
000143DC 0000                       bubmap_22: 	dc.w bubmap_B2-bubmap
000143DE 0000                       bubmap_24: 	dc.w bubmap_B8-bubmap
000143E0 0000                       bubmap_26: 	dc.w bubmap_BE-bubmap
000143E2 0000                       bubmap_28: 	dc.w bubmap_C4-bubmap
000143E4 0000                       bubmap_2A: 	dc.w bubmap_CA-bubmap
000143E6 0000                       bubmap_2C: 	dc.w bubmap_D0-bubmap
000143E8 01                         bubmap_2E: 	dc.b $1
000143E9 FC00 6000 FC               	dc.b $FC, $0, $60, $0, $FC
000143EE 01                         bubmap_34: 	dc.b $1
000143EF FC00 6001 FC               	dc.b $FC, $0, $60, $1, $FC
000143F4 01                         bubmap_3A: 	dc.b $1
000143F5 FC00 6002 FC               	dc.b $FC, $0, $60, $2, $FC
000143FA 01                         bubmap_40: 	dc.b $1
000143FB F805 6003 F8               	dc.b $F8, $5, $60, $3, $F8
00014400 01                         bubmap_46: 	dc.b $1
00014401 F805 6007 F8               	dc.b $F8, $5, $60, $7, $F8
00014406 01                         bubmap_4C: 	dc.b $1
00014407 F40A 600B F4               	dc.b $F4, $A, $60, $B, $F4
0001440C 01                         bubmap_52: 	dc.b $1
0001440D F00F 6014 F0               	dc.b $F0, $F, $60, $14, $F0
00014412 04                         bubmap_58: 	dc.b $4
00014413 F005 6024 F0               	dc.b $F0, $5, $60, $24, $F0
00014418 F005 6824 00               	dc.b $F0, $5, $68, $24, $0
0001441D 0005 7024 F0               	dc.b $0, $5, $70, $24, $F0
00014422 0005 7824 00               	dc.b $0, $5, $78, $24, $0
00014427 04                         bubmap_6D: 	dc.b $4
00014428 F005 6028 F0               	dc.b $F0, $5, $60, $28, $F0
0001442D F005 6828 00               	dc.b $F0, $5, $68, $28, $0
00014432 0005 7028 F0               	dc.b $0, $5, $70, $28, $F0
00014437 0005 7828 00               	dc.b $0, $5, $78, $28, $0
0001443C 01                         bubmap_82: 	dc.b $1
0001443D F406 002C F8               	dc.b $F4, $6, $0, $2C, $F8
00014442 01                         bubmap_88: 	dc.b $1
00014443 F406 0032 F8               	dc.b $F4, $6, $0, $32, $F8
00014448 01                         bubmap_8E: 	dc.b $1
00014449 F406 0038 F8               	dc.b $F4, $6, $0, $38, $F8
0001444E 01                         bubmap_94: 	dc.b $1
0001444F F406 003E F8               	dc.b $F4, $6, $0, $3E, $F8
00014454 01                         bubmap_9A: 	dc.b $1
00014455 F406 2044 F8               	dc.b $F4, $6, $20, $44, $F8
0001445A 01                         bubmap_A0: 	dc.b $1
0001445B F406 204A F8               	dc.b $F4, $6, $20, $4A, $F8
00014460 01                         bubmap_A6: 	dc.b $1
00014461 F406 2050 F8               	dc.b $F4, $6, $20, $50, $F8
00014466 01                         bubmap_AC: 	dc.b $1
00014467 F406 2056 F8               	dc.b $F4, $6, $20, $56, $F8
0001446C 01                         bubmap_B2: 	dc.b $1
0001446D F406 205C F8               	dc.b $F4, $6, $20, $5C, $F8
00014472 01                         bubmap_B8: 	dc.b $1
00014473 F406 2062 F8               	dc.b $F4, $6, $20, $62, $F8
00014478 01                         bubmap_BE: 	dc.b $1
00014479 F805 6068 F8               	dc.b $F8, $5, $60, $68, $F8
0001447E 01                         bubmap_C4: 	dc.b $1
0001447F F805 606C F8               	dc.b $F8, $5, $60, $6C, $F8
00014484 01                         bubmap_CA: 	dc.b $1
00014485 F805 6070 F8               	dc.b $F8, $5, $60, $70, $F8
0001448A 00                         bubmap_D0: 	dc.b $0
0001448C 00                         	even
0001448C 00                         	even
0001448C                            
0001448C                            ; ===========================================================================
0001448C                            ; ---------------------------------------------------------------------------
0001448C                            ; Object 65 - waterfalls (LZ)
0001448C                            ; ---------------------------------------------------------------------------
0001448C                            
0001448C                            Obj65:					; XREF: Obj_Index
0001448C 7000                       		moveq	#0,d0
0001448E 1028 0024                  		move.b	$24(a0),d0
00014492 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00014496 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
0001449A                            ; ===========================================================================
0001449A 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
0001449C 0000                       		dc.w Obj65_Animate-Obj65_Index
0001449E 0000                       		dc.w Obj65_ChkDel-Obj65_Index
000144A0 0000                       		dc.w Obj65_FixHeight-Obj65_Index
000144A2 0000                       		dc.w loc_12B36-Obj65_Index
000144A4                            ; ===========================================================================
000144A4                            
000144A4                            Obj65_Main:				; XREF: Obj65_Index
000144A4 5828 0024                  		addq.b	#4,$24(a0)
000144A8 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
000144B0 317C 4259 0002             		move.w	#$4259,2(a0)
000144B6 0028 0004 0001             		ori.b	#4,1(a0)
000144BC 117C 0018 0019             		move.b	#$18,$19(a0)
000144C2 117C 0001 0018             		move.b	#1,$18(a0)
000144C8 1028 0028                  		move.b	$28(a0),d0	; get object type
000144CC 6A00                       		bpl.s	loc_12AE6
000144CE 08E8 0007 0002             		bset	#7,2(a0)
000144D4                            
000144D4                            loc_12AE6:
000144D4 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
000144D8 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000144DC 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000144E0 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000144E2 4228 0018                  		clr.b	$18(a0)
000144E6 5528 0024                  		subq.b	#2,$24(a0)
000144EA 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
000144F0 6700                       		beq.s	loc_12B0A	; if not, branch
000144F2 117C 0006 0024             		move.b	#6,$24(a0)
000144F8                            
000144F8                            loc_12B0A:
000144F8 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
000144FE 6700                       		beq.s	Obj65_Animate	; if not, branch
00014500 117C 0008 0024             		move.b	#8,$24(a0)
00014506                            
00014506                            Obj65_Animate:				; XREF: Obj65_Index
00014506 43F9 0000 0000             		lea	(Ani_obj65).l,a1
0001450C 4EB9 0000 B9CA             		jsr	AnimateSprite
00014512                            
00014512                            Obj65_ChkDel:				; XREF: Obj65_Index
00014512 6000 CAA0                  		bra.w	MarkObjGone
00014516                            ; ===========================================================================
00014516                            
00014516                            Obj65_FixHeight:			; XREF: Obj65_Index
00014516 3038 F646                  		move.w	($FFFFF646).w,d0
0001451A 0440 0010                  		subi.w	#$10,d0
0001451E 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00014522 60E2                       		bra.s	Obj65_Animate
00014524                            ; ===========================================================================
00014524                            
00014524                            loc_12B36:				; XREF: Obj65_Index
00014524 08A8 0007 0002             		bclr	#7,2(a0)
0001452A 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00014530 6600                       		bne.s	Obj65_Animate2
00014532 08E8 0007 0002             		bset	#7,2(a0)
00014538                            
00014538                            Obj65_Animate2:
00014538 60CC                       		bra.s	Obj65_Animate
0001453A                            ; ===========================================================================
0001453A                            Ani_obj65:
0001453A                            	include "_anim\obj65.asm"
0001453A                            ; ---------------------------------------------------------------------------
0001453A                            ; Animation script - waterfall (LZ)
0001453A                            ; ---------------------------------------------------------------------------
0001453A 0000                       		dc.w byte_12B4E-Ani_obj65
0001453C 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00014542 00                         		even
00014542 00                         		even
00014542                            
00014542                            ; ---------------------------------------------------------------------------
00014542                            ; Sprite mappings - waterfalls (LZ)
00014542                            ; ---------------------------------------------------------------------------
00014542                            Map_obj65:
00014542                            	include "_maps\obj65.asm"
00014542                            ; ---------------------------------------------------------------------------
00014542                            ; Sprite mappings - waterfalls (LZ)
00014542                            ; ---------------------------------------------------------------------------
00014542 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00014546 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
0001454A 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
0001454E 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00014552 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00014556 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
0001455A 01                         byte_12B6C:	dc.b 1
0001455B F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014560 02                         byte_12B72:	dc.b 2
00014561 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014566 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
0001456B 02                         byte_12B7D:	dc.b 2
0001456C F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014571 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014576 01                         byte_12B88:	dc.b 1
00014577 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
0001457C 02                         byte_12B8E:	dc.b 2
0001457D F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014582 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014587 01                         byte_12B99:	dc.b 1
00014588 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
0001458D 01                         byte_12B9F:	dc.b 1
0001458E F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014593 01                         byte_12BA5:	dc.b 1
00014594 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014599 02                         byte_12BAB:	dc.b 2
0001459A F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
0001459F 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
000145A4 02                         byte_12BB6:	dc.b 2
000145A5 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
000145AA F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
000145AF 02                         byte_12BC1:	dc.b 2
000145B0 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
000145B5 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
000145BA 02                         byte_12BCC:	dc.b 2
000145BB F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
000145C0 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
000145C6 00                         		even
000145C6 00                         		even
000145C6                            
000145C6                            ; ===========================================================================
000145C6                            ; ---------------------------------------------------------------------------
000145C6                            ; Object 01 - Sonic
000145C6                            ; ---------------------------------------------------------------------------
000145C6                            
000145C6                            Obj01:					; XREF: Obj_Index
000145C6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000145CA 6700                       		beq.s	Obj01_Normal	; if not, branch
000145CC 4EF9 0000 0000             		jmp	DebugMode
000145D2                            ; ===========================================================================
000145D2                            
000145D2                            Obj01_Normal:
000145D2 7000                       		moveq	#0,d0
000145D4 1028 0024                  		move.b	$24(a0),d0
000145D8 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000145DC 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
000145E0                            ; ===========================================================================
000145E0 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
000145E2 0000                       		dc.w Obj01_Control-Obj01_Index
000145E4 0000                       		dc.w Obj01_Hurt-Obj01_Index
000145E6 0000                       		dc.w Obj01_Death-Obj01_Index
000145E8 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
000145EA 0000                       		dc.w Sonic_Drowned-Obj01_Index
000145EC                            ;===========================================================================
000145EC                            
000145EC                            Obj01_Main:				; XREF: Obj01_Index
000145EC 5428 0024                  		addq.b	#2,$24(a0)
000145F0 117C 0013 0016             		move.b	#$13,$16(a0)
000145F6 117C 0009 0017             		move.b	#9,$17(a0)
000145FC 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00014604 317C 0780 0002             		move.w	#$780,2(a0)
0001460A 117C 0002 0018             		move.b	#2,$18(a0)
00014610 117C 0018 0019             		move.b	#$18,$19(a0)
00014616 117C 0004 0001             		move.b	#4,1(a0)
0001461C 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00014622 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00014628 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
0001462E                            
0001462E                            Obj01_Control:				; XREF: Obj01_Index
0001462E 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00014632 6700                       		beq.s	loc_12C58	; if not, branch
00014634 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
0001463A 6700                       		beq.s	loc_12C58	; if not, branch
0001463C 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00014642 4238 F7CC                  		clr.b	($FFFFF7CC).w
00014646 4E75                       		rts	
00014648                            ; ===========================================================================
00014648                            
00014648                            loc_12C58:
00014648 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
0001464C 6600                       		bne.s	loc_12C64	; if yes, branch
0001464E 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00014654                            
00014654                            loc_12C64:
00014654 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
0001465A 6600                       		bne.s	loc_12C7E	; if yes, branch
0001465C 7000                       		moveq	#0,d0
0001465E 1028 0022                  		move.b	$22(a0),d0
00014662 0240 0006                  		andi.w	#6,d0
00014666 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
0001466A 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
0001466E                            
0001466E                            loc_12C7E:
0001466E 6100                       		bsr.s	Sonic_Display
00014670 6100 0000                  		bsr.w	Sonic_RecordPos
00014674 6100 0000                  		bsr.w	Sonic_Water
00014678 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
0001467E 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00014684 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014688 6700                       		beq.s	loc_12CA6
0001468A 4A28 001C                  		tst.b	$1C(a0)
0001468E 6600                       		bne.s	loc_12CA6
00014690 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00014696                            
00014696                            loc_12CA6:
00014696 6100 0000                  		bsr.w	Sonic_Animate
0001469A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001469E 6B00                       		bmi.s	loc_12CB6
000146A0 4EB9 0000 0000             		jsr	TouchResponse
000146A6                            
000146A6                            loc_12CB6:
000146A6 6100 0000                  		bsr.w	Sonic_Loops
000146AA 6100 0000                  		bsr.w	LoadSonicDynPLC
000146AE 4E75                       		rts	
000146B0                            ; ===========================================================================
000146B0 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
000146B2 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000146B4 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000146B6 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
000146B8                            ; ---------------------------------------------------------------------------
000146B8                            ; Music	to play	after invincibility wears off
000146B8                            ; ---------------------------------------------------------------------------
000146B8                            MusicList2:	incbin	misc\muslist2.bin
000146BE                            		even
000146BE                            ; ===========================================================================
000146BE                            
000146BE                            Sonic_Display:				; XREF: loc_12C7E
000146BE 3028 0030                  		move.w	$30(a0),d0
000146C2 6700                       		beq.s	Obj01_Display
000146C4 5368 0030                  		subq.w	#1,$30(a0)
000146C8 E648                       		lsr.w	#3,d0
000146CA 6400                       		bcc.s	Obj01_ChkInvin
000146CC                            
000146CC                            Obj01_Display:
000146CC 4EBA A29C                  		jsr	DisplaySprite
000146D0                            
000146D0                            Obj01_ChkInvin:
000146D0 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000146D4 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
000146D6 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
000146DA 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
000146DC 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
000146E0 6600                       		bne.s	Obj01_ChkShoes
000146E2 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000146E6 6600                       		bne.s	Obj01_RmvInvin
000146E8 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000146EE 6500                       		bcs.s	Obj01_RmvInvin
000146F0 7000                       		moveq	#0,d0
000146F2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000146F6 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ3
000146FC 6600                       		bne.s	Obj01_PlayMusic
000146FE 7005                       		moveq	#5,d0		; play SBZ music
00014700                            
00014700                            Obj01_PlayMusic:
00014700 43F9 0001 46B8             		lea	(MusicList2).l,a1
00014706 1031 0000                  		move.b	(a1,d0.w),d0
0001470A 4EB9 0000 121A             		jsr	(PlaySound).l	; play normal music
00014710                            
00014710                            Obj01_RmvInvin:
00014710 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00014716                            
00014716                            Obj01_ChkShoes:
00014716 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
0001471A 6700                       		beq.s	Obj01_ExitChk	; if not, branch
0001471C 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00014720 6700                       		beq.s	Obj01_ExitChk
00014722 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00014726 6600                       		bne.s	Obj01_ExitChk
00014728 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001472E 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00014734 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001473A 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00014740 303C 00E3                  		move.w	#$E3,d0
00014744 4EF9 0000 121A             		jmp	(PlaySound).l	; run music at normal speed
0001474A                            ; ===========================================================================
0001474A                            
0001474A                            Obj01_ExitChk:
0001474A 4E75                       		rts	
0001474C                            
0001474C                            ; ---------------------------------------------------------------------------
0001474C                            ; Subroutine to	record Sonic's previous positions for invincibility stars
0001474C                            ; ---------------------------------------------------------------------------
0001474C                            
0001474C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001474C                            
0001474C                            
0001474C                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
0001474C 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014750 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014754 43F1 0000                  		lea	(a1,d0.w),a1
00014758 32E8 0008                  		move.w	8(a0),(a1)+
0001475C 32E8 000C                  		move.w	$C(a0),(a1)+
00014760 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00014764 4E75                       		rts	
00014766                            ; End of function Sonic_RecordPos
00014766                            
00014766                            ; ---------------------------------------------------------------------------
00014766                            ; Subroutine for Sonic when he's underwater
00014766                            ; ---------------------------------------------------------------------------
00014766                            
00014766                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014766                            
00014766                            
00014766                            Sonic_Water:				; XREF: loc_12C7E
00014766 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0001476C 6700                       		beq.s	Obj01_InWater	; if yes, branch
0001476E                            
0001476E                            locret_12D80:
0001476E 4E75                       		rts	
00014770                            ; ===========================================================================
00014770                            
00014770                            Obj01_InWater:
00014770 3038 F646                  		move.w	($FFFFF646).w,d0
00014774 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00014778 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
0001477A 4A38 F612                  		tst.b	(f_insidepocket).w
0001477E 6600                       		bne.s	Obj01_OutWater
00014780 08E8 0006 0022             		bset	#6,$22(a0)
00014786 66E6                       		bne.s	locret_12D80
00014788 6100 0000                  		bsr.w	ResumeMusic
0001478C 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00014792 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00014798 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
0001479E 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
000147A4 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
000147AA E0E8 0010                  		asr	$10(a0)
000147AE E0E8 0012                  		asr	$12(a0)
000147B2 E0E8 0012                  		asr	$12(a0)
000147B6 67B6                       		beq.s	locret_12D80
000147B8 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000147BE 303C 00AA                  		move.w	#$AA,d0
000147C2 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play splash sound
000147C8                            ; ===========================================================================
000147C8                            
000147C8                            Obj01_OutWater:
000147C8 08A8 0006 0022             		bclr	#6,$22(a0)
000147CE 679E                       		beq.s	locret_12D80
000147D0 6100 0000                  		bsr.w	ResumeMusic
000147D4 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000147DA 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000147E0 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000147E6 E1E8 0012                  		asl	$12(a0)
000147EA 6700 FF82                  		beq.w	locret_12D80
000147EE 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000147F4 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
000147FA 6E00                       		bgt.s	loc_12E0E
000147FC 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00014802                            
00014802                            loc_12E0E:
00014802 303C 00AA                  		move.w	#$AA,d0
00014806 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play splash sound
0001480C                            ; End of function Sonic_Water
0001480C                            
0001480C                            ; ===========================================================================
0001480C                            ; ---------------------------------------------------------------------------
0001480C                            ; Modes	for controlling	Sonic
0001480C                            ; ---------------------------------------------------------------------------
0001480C                            
0001480C                            Obj01_MdNormal:				; XREF: Obj01_Modes
0001480C 6100 0000                  		bsr.w	Sonic_Jump
00014810 6100 0000                  		bsr.w	Sonic_SlopeResist
00014814 6100 0000                  		bsr.w	Sonic_Move
00014818 6100 0000                  		bsr.w	Sonic_Roll
0001481C 6100 0000                  		bsr.w	Sonic_LevelBound
00014820 4EBA A12E                  		jsr	SpeedToPos
00014824 6100 0000                  		bsr.w	Sonic_AnglePos
00014828 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001482C 4E75                       		rts	
0001482E                            ; ===========================================================================
0001482E                            
0001482E                            Obj01_MdJump:				; XREF: Obj01_Modes
0001482E 6100 0000                  		bsr.w	Sonic_JumpHeight
00014832 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00014836 6100 0000                  		bsr.w	Sonic_LevelBound
0001483A 4EBA A0F4                  		jsr	ObjectFall
0001483E 0828 0006 0022             		btst	#6,$22(a0)
00014844 6700                       		beq.s	loc_12E5C
00014846 0468 0028 0012             		subi.w	#$28,$12(a0)
0001484C                            
0001484C                            loc_12E5C:
0001484C 6100 0000                  		bsr.w	Sonic_JumpAngle
00014850 6100 0000                  		bsr.w	Sonic_Floor
00014854 0C38 0030 F5E2             		cmpi.b	#$30,(SonimeSST+sonime_airtimer).w
0001485A 6600                       		bne.s	@addtimer
0001485C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00014862 6300                       		bls.s	@done
00014864 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w
0001486A 6700                       		beq.s	@done
0001486C 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00014872 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
00014878 6000                       		bra.s	@done
0001487A                            
0001487A                            
0001487A                            	@addtimer:
0001487A 5238 F5E2                  		addi.b	#1,(SonimeSST+sonime_airtimer).w
0001487E 4A38 D012                  		tst.b	($FFFFD012).w
00014882 6A00                       		bpl.s	@done
00014884 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
00014888                            
00014888                            	@done:
00014888 4E75                       		rts	
0001488A                            ; ===========================================================================
0001488A                            
0001488A                            Obj01_MdRoll:				; XREF: Obj01_Modes
0001488A 6100 0000                  		bsr.w	Sonic_Jump
0001488E 6100 0000                  		bsr.w	Sonic_RollRepel
00014892 6100 0000                  		bsr.w	Sonic_RollSpeed
00014896 6100 0000                  		bsr.w	Sonic_LevelBound
0001489A 4EBA A0B4                  		jsr	SpeedToPos
0001489E 6100 0000                  		bsr.w	Sonic_AnglePos
000148A2 6100 0000                  		bsr.w	Sonic_SlopeRepel
000148A6 4E75                       		rts	
000148A8                            ; ===========================================================================
000148A8                            
000148A8                            Obj01_MdJump2:				; XREF: Obj01_Modes
000148A8 6100 0000                  		bsr.w	Sonic_JumpHeight
000148AC 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000148B0 6100 0000                  		bsr.w	Sonic_LevelBound
000148B4 4EBA A07A                  		jsr	ObjectFall
000148B8 0828 0006 0022             		btst	#6,$22(a0)
000148BE 6700                       		beq.s	loc_12EA6
000148C0 0468 0028 0012             		subi.w	#$28,$12(a0)
000148C6                            
000148C6                            loc_12EA6:
000148C6 6100 0000                  		bsr.w	Sonic_JumpAngle
000148CA 6100 0000                  		bsr.w	Sonic_Floor
000148CE 0C38 0040 F5E2             		cmpi.b	#$40,(SonimeSST+sonime_airtimer).w
000148D4 6600                       		bne.s	@addtimer
000148D6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000148DC 6300                       		bls.s	@done
000148DE 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w
000148E4 6700                       		beq.s	@done
000148E6 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
000148EC 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
000148F2 6000                       		bra.s	@done
000148F4                            
000148F4                            
000148F4                            	@addtimer:
000148F4 5238 F5E2                  		addi.b	#1,(SonimeSST+sonime_airtimer).w
000148F8 4A38 D012                  		tst.b	($FFFFD012).w
000148FC 6A00                       		bpl.s	@done
000148FE 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
00014902                            
00014902                            	@done:
00014902 4E75                       		rts	
00014904                            ; ---------------------------------------------------------------------------
00014904                            ; Subroutine to	make Sonic walk/run
00014904                            ; ---------------------------------------------------------------------------
00014904                            
00014904                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014904                            
00014904                            
00014904                            Sonic_Move:				; XREF: Obj01_MdNormal
00014904 3C38 F760                  		move.w	($FFFFF760).w,d6
00014908 3A38 F762                  		move.w	($FFFFF762).w,d5
0001490C 3838 F764                  		move.w	($FFFFF764).w,d4
00014910 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014914 6600 0000                  		bne.w	loc_12FEE
00014918 4A68 003E                  		tst.w	$3E(a0)
0001491C 6600 0000                  		bne.w	Obj01_ResetScr
00014920 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014926 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00014928 6100 0000                  		bsr.w	Sonic_MoveLeft
0001492C                            
0001492C                            Obj01_NotLeft:
0001492C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014932 6700                       		beq.s	Obj01_NotRight	; if not, branch
00014934 6100 0000                  		bsr.w	Sonic_MoveRight
00014938                            
00014938                            Obj01_NotRight:
00014938 1028 0026                  		move.b	$26(a0),d0
0001493C 0600 0020                  		addi.b	#$20,d0
00014940 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00014944 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00014948 4A68 0020                  		tst.w	$20(a0)		; is Sonic moving?
0001494C 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00014950 08A8 0005 0022             		bclr	#5,$22(a0)
00014956 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001495C 0828 0003 0022             		btst	#3,$22(a0)
00014962 6700                       		beq.s	Sonic_Balance
00014964 7000                       		moveq	#0,d0
00014966 1028 003D                  		move.b	$3D(a0),d0
0001496A ED48                       		lsl.w	#6,d0
0001496C 43F8 D000                  		lea	($FFFFD000).w,a1
00014970 43F1 0000                  		lea	(a1,d0.w),a1
00014974 4A29 0022                  		tst.b	$22(a1)
00014978 6B00                       		bmi.s	Sonic_LookUp
0001497A 7200                       		moveq	#0,d1
0001497C 1229 0019                  		move.b	$19(a1),d1
00014980 3401                       		move.w	d1,d2
00014982 D442                       		add.w	d2,d2
00014984 5942                       		subq.w	#4,d2
00014986 D268 0008                  		add.w	8(a0),d1
0001498A 9269 0008                  		sub.w	8(a1),d1
0001498E 0C41 0004                  		cmpi.w	#4,d1
00014992 6D00                       		blt.s	loc_12F6A
00014994 B242                       		cmp.w	d2,d1
00014996 6C00                       		bge.s	loc_12F5A
00014998 6000                       		bra.s	Sonic_LookUp
0001499A                            ; ===========================================================================
0001499A                            
0001499A                            Sonic_Balance:
0001499A 4EB9 0000 0000             		jsr	ObjHitFloor
000149A0 0C41 000C                  		cmpi.w	#$C,d1
000149A4 6D00                       		blt.s	Sonic_LookUp
000149A6 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000149AC 6600                       		bne.s	loc_12F62
000149AE                            
000149AE                            loc_12F5A:
000149AE 08A8 0000 0022             		bclr	#0,$22(a0)
000149B4 6000                       		bra.s	loc_12F70
000149B6                            ; ===========================================================================
000149B6                            
000149B6                            loc_12F62:
000149B6 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000149BC 6600                       		bne.s	Sonic_LookUp
000149BE                            
000149BE                            loc_12F6A:
000149BE 08E8 0000 0022             		bset	#0,$22(a0)
000149C4                            
000149C4                            loc_12F70:
000149C4 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
000149CA 6000                       		bra.s	Obj01_ResetScr
000149CC                            ; ===========================================================================
000149CC                            
000149CC                            Sonic_LookUp:
000149CC 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000149D2 6700                       		beq.s	Sonic_Duck	; if not, branch
000149D4 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000149DA 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000149E0 6700                       		beq.s	loc_12FC2
000149E2 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000149E6 6000                       		bra.s	loc_12FC2
000149E8                            ; ===========================================================================
000149E8                            
000149E8                            Sonic_Duck:
000149E8 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000149EE 6700                       		beq.s	Obj01_ResetScr	; if not, branch
000149F0 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000149F6 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000149FC 6700                       		beq.s	loc_12FC2
000149FE 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014A02 6000                       		bra.s	loc_12FC2
00014A04                            ; ===========================================================================
00014A04                            
00014A04                            Obj01_ResetScr:
00014A04 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00014A0A 6700                       		beq.s	loc_12FC2	; if yes, branch
00014A0C 6400                       		bcc.s	loc_12FBE
00014A0E 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00014A12                            
00014A12                            loc_12FBE:
00014A12 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00014A16                            
00014A16                            loc_12FC2:
00014A16 1038 F602                  		move.b	($FFFFF602).w,d0
00014A1A 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00014A1E 6600                       		bne.s	loc_12FEE	; if yes, branch
00014A20 3028 0020                  		move.w	$20(a0),d0
00014A24 6700                       		beq.s	loc_12FEE
00014A26 6B00                       		bmi.s	loc_12FE2
00014A28 9045                       		sub.w	d5,d0
00014A2A 6400                       		bcc.s	loc_12FDC
00014A2C 303C 0000                  		move.w	#0,d0
00014A30                            
00014A30                            loc_12FDC:
00014A30 3140 0020                  		move.w	d0,$20(a0)
00014A34 6000                       		bra.s	loc_12FEE
00014A36                            ; ===========================================================================
00014A36                            
00014A36                            loc_12FE2:
00014A36 D045                       		add.w	d5,d0
00014A38 6400                       		bcc.s	loc_12FEA
00014A3A 303C 0000                  		move.w	#0,d0
00014A3E                            
00014A3E                            loc_12FEA:
00014A3E 3140 0020                  		move.w	d0,$20(a0)
00014A42                            
00014A42                            loc_12FEE:
00014A42 1028 0026                  		move.b	$26(a0),d0
00014A46 4EB9 0000 29F6             		jsr	(CalcSine).l
00014A4C C3E8 0020                  		muls.w	$20(a0),d1
00014A50 E081                       		asr.l	#8,d1
00014A52 3141 0010                  		move.w	d1,$10(a0)
00014A56 C1E8 0020                  		muls.w	$20(a0),d0
00014A5A E080                       		asr.l	#8,d0
00014A5C 3140 0012                  		move.w	d0,$12(a0)
00014A60                            
00014A60                            loc_1300C:
00014A60 1028 0026                  		move.b	$26(a0),d0
00014A64 0600 0040                  		addi.b	#$40,d0
00014A68 6B00                       		bmi.s	locret_1307C
00014A6A 123C 0040                  		move.b	#$40,d1
00014A6E 4A68 0020                  		tst.w	$20(a0)
00014A72 6700                       		beq.s	locret_1307C
00014A74 6B00                       		bmi.s	loc_13024
00014A76 4441                       		neg.w	d1
00014A78                            
00014A78                            loc_13024:
00014A78 1028 0026                  		move.b	$26(a0),d0
00014A7C D001                       		add.b	d1,d0
00014A7E 3F00                       		move.w	d0,-(sp)
00014A80 6100 0000                  		bsr.w	Sonic_WalkSpeed
00014A84 301F                       		move.w	(sp)+,d0
00014A86 4A41                       		tst.w	d1
00014A88 6A00                       		bpl.s	locret_1307C
00014A8A E141                       		asl.w	#8,d1
00014A8C 0600 0020                  		addi.b	#$20,d0
00014A90 0200 00C0                  		andi.b	#$C0,d0
00014A94 6700                       		beq.s	loc_13078
00014A96 0C00 0040                  		cmpi.b	#$40,d0
00014A9A 6700                       		beq.s	loc_13066
00014A9C 0C00 0080                  		cmpi.b	#$80,d0
00014AA0 6700                       		beq.s	loc_13060
00014AA2 D368 0010                  		add.w	d1,$10(a0)
00014AA6 08E8 0005 0022             		bset	#5,$22(a0)
00014AAC 317C 0000 0020             		move.w	#0,$20(a0)
00014AB2 4E75                       		rts	
00014AB4                            ; ===========================================================================
00014AB4                            
00014AB4                            loc_13060:
00014AB4 9368 0012                  		sub.w	d1,$12(a0)
00014AB8 4E75                       		rts	
00014ABA                            ; ===========================================================================
00014ABA                            
00014ABA                            loc_13066:
00014ABA 9368 0010                  		sub.w	d1,$10(a0)
00014ABE 08E8 0005 0022             		bset	#5,$22(a0)
00014AC4 317C 0000 0020             		move.w	#0,$20(a0)
00014ACA 4E75                       		rts	
00014ACC                            ; ===========================================================================
00014ACC                            
00014ACC                            loc_13078:
00014ACC D368 0012                  		add.w	d1,$12(a0)
00014AD0                            
00014AD0                            locret_1307C:
00014AD0 4E75                       		rts	
00014AD2                            ; End of function Sonic_Move
00014AD2                            
00014AD2                            
00014AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014AD2                            
00014AD2                            
00014AD2                            Sonic_MoveLeft:				; XREF: Sonic_Move
00014AD2 3028 0020                  		move.w	$20(a0),d0
00014AD6 6700                       		beq.s	loc_13086
00014AD8 6A00                       		bpl.s	loc_130B2
00014ADA                            
00014ADA                            loc_13086:
00014ADA 08E8 0000 0022             		bset	#0,$22(a0)
00014AE0 6600                       		bne.s	loc_1309A
00014AE2 08A8 0005 0022             		bclr	#5,$22(a0)
00014AE8 117C 0001 001D             		move.b	#1,$1D(a0)
00014AEE                            
00014AEE                            loc_1309A:
00014AEE 9045                       		sub.w	d5,d0
00014AF0 3206                       		move.w	d6,d1
00014AF2 4441                       		neg.w	d1
00014AF4 B041                       		cmp.w	d1,d0
00014AF6 6E00                       		bgt.s	loc_130A6
00014AF8 3001                       		move.w	d1,d0
00014AFA                            
00014AFA                            loc_130A6:
00014AFA 3140 0020                  		move.w	d0,$20(a0)
00014AFE 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00014B04 4E75                       		rts	
00014B06                            ; ===========================================================================
00014B06                            
00014B06                            loc_130B2:				; XREF: Sonic_MoveLeft
00014B06 9044                       		sub.w	d4,d0
00014B08 6400                       		bcc.s	loc_130BA
00014B0A 303C FF80                  		move.w	#-$80,d0
00014B0E                            
00014B0E                            loc_130BA:
00014B0E 3140 0020                  		move.w	d0,$20(a0)
00014B12 1028 0026                  		move.b	$26(a0),d0
00014B16 0600 0020                  		addi.b	#$20,d0
00014B1A 0200 00C0                  		andi.b	#$C0,d0
00014B1E 6600                       		bne.s	locret_130E8
00014B20 0C40 0400                  		cmpi.w	#$400,d0
00014B24 6D00                       		blt.s	locret_130E8
00014B26 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00014B2C 08A8 0000 0022             		bclr	#0,$22(a0)
00014B32 303C 00A4                  		move.w	#$A4,d0
00014B36 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play stopping sound
00014B3C                            
00014B3C                            locret_130E8:
00014B3C 4E75                       		rts	
00014B3E                            ; End of function Sonic_MoveLeft
00014B3E                            
00014B3E                            
00014B3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B3E                            
00014B3E                            
00014B3E                            Sonic_MoveRight:			; XREF: Sonic_Move
00014B3E 3028 0020                  		move.w	$20(a0),d0
00014B42 6B00                       		bmi.s	loc_13118
00014B44 08A8 0000 0022             		bclr	#0,$22(a0)
00014B4A 6700                       		beq.s	loc_13104
00014B4C 08A8 0005 0022             		bclr	#5,$22(a0)
00014B52 117C 0001 001D             		move.b	#1,$1D(a0)
00014B58                            
00014B58                            loc_13104:
00014B58 D045                       		add.w	d5,d0
00014B5A B046                       		cmp.w	d6,d0
00014B5C 6D00                       		blt.s	loc_1310C
00014B5E 3006                       		move.w	d6,d0
00014B60                            
00014B60                            loc_1310C:
00014B60 3140 0020                  		move.w	d0,$20(a0)
00014B64 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00014B6A 4E75                       		rts	
00014B6C                            ; ===========================================================================
00014B6C                            
00014B6C                            loc_13118:				; XREF: Sonic_MoveRight
00014B6C D044                       		add.w	d4,d0
00014B6E 6400                       		bcc.s	loc_13120
00014B70 303C 0080                  		move.w	#$80,d0
00014B74                            
00014B74                            loc_13120:
00014B74 3140 0020                  		move.w	d0,$20(a0)
00014B78 1028 0026                  		move.b	$26(a0),d0
00014B7C 0600 0020                  		addi.b	#$20,d0
00014B80 0200 00C0                  		andi.b	#$C0,d0
00014B84 6600                       		bne.s	locret_1314E
00014B86 0C40 FC00                  		cmpi.w	#-$400,d0
00014B8A 6E00                       		bgt.s	locret_1314E
00014B8C 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00014B92 08E8 0000 0022             		bset	#0,$22(a0)
00014B98 303C 00A4                  		move.w	#$A4,d0
00014B9C 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play stopping sound
00014BA2                            
00014BA2                            locret_1314E:
00014BA2 4E75                       		rts	
00014BA4                            ; End of function Sonic_MoveRight
00014BA4                            
00014BA4                            ; ---------------------------------------------------------------------------
00014BA4                            ; Subroutine to	change Sonic's speed as he rolls
00014BA4                            ; ---------------------------------------------------------------------------
00014BA4                            
00014BA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BA4                            
00014BA4                            
00014BA4                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00014BA4 3C38 F760                  		move.w	($FFFFF760).w,d6
00014BA8 E346                       		asl.w	#1,d6
00014BAA 3A38 F762                  		move.w	($FFFFF762).w,d5
00014BAE E245                       		asr.w	#1,d5
00014BB0 3838 F764                  		move.w	($FFFFF764).w,d4
00014BB4 E444                       		asr.w	#2,d4
00014BB6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014BBA 6600 0000                  		bne.w	loc_131CC
00014BBE 4A68 003E                  		tst.w	$3E(a0)
00014BC2 6600                       		bne.s	loc_13188
00014BC4 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014BCA 6700                       		beq.s	loc_1317C	; if not, branch
00014BCC 6100 0000                  		bsr.w	Sonic_RollLeft
00014BD0                            
00014BD0                            loc_1317C:
00014BD0 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014BD6 6700                       		beq.s	loc_13188	; if not, branch
00014BD8 6100 0000                  		bsr.w	Sonic_RollRight
00014BDC                            
00014BDC                            loc_13188:
00014BDC 3028 0020                  		move.w	$20(a0),d0
00014BE0 6700                       		beq.s	loc_131AA
00014BE2 6B00                       		bmi.s	loc_1319E
00014BE4 9045                       		sub.w	d5,d0
00014BE6 6400                       		bcc.s	loc_13198
00014BE8 303C 0000                  		move.w	#0,d0
00014BEC                            
00014BEC                            loc_13198:
00014BEC 3140 0020                  		move.w	d0,$20(a0)
00014BF0 6000                       		bra.s	loc_131AA
00014BF2                            ; ===========================================================================
00014BF2                            
00014BF2                            loc_1319E:				; XREF: Sonic_RollSpeed
00014BF2 D045                       		add.w	d5,d0
00014BF4 6400                       		bcc.s	loc_131A6
00014BF6 303C 0000                  		move.w	#0,d0
00014BFA                            
00014BFA                            loc_131A6:
00014BFA 3140 0020                  		move.w	d0,$20(a0)
00014BFE                            
00014BFE                            loc_131AA:
00014BFE 4A68 0020                  		tst.w	$20(a0)		; is Sonic moving?
00014C02 6600                       		bne.s	loc_131CC	; if yes, branch
00014C04                            
00014C04                            	@NoReset:
00014C04 08A8 0002 0022             		bclr	#2,$22(a0)
00014C0A 117C 0013 0016             		move.b	#$13,$16(a0)
00014C10 117C 0009 0017             		move.b	#9,$17(a0)
00014C16 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00014C1C 5B68 000C                  		subq.w	#5,$C(a0)
00014C20                            
00014C20                            loc_131CC:
00014C20 1028 0026                  		move.b	$26(a0),d0
00014C24 4EB9 0000 29F6             		jsr	(CalcSine).l
00014C2A C1E8 0020                  		muls.w	$20(a0),d0
00014C2E E080                       		asr.l	#8,d0
00014C30 3140 0012                  		move.w	d0,$12(a0)
00014C34 C3E8 0020                  		muls.w	$20(a0),d1
00014C38 E081                       		asr.l	#8,d1
00014C3A 0C41 1000                  		cmpi.w	#$1000,d1
00014C3E 6F00                       		ble.s	loc_131F0
00014C40 323C 1000                  		move.w	#$1000,d1
00014C44                            
00014C44                            loc_131F0:
00014C44 0C41 F000                  		cmpi.w	#-$1000,d1
00014C48 6C00                       		bge.s	loc_131FA
00014C4A 323C F000                  		move.w	#-$1000,d1
00014C4E                            
00014C4E                            loc_131FA:
00014C4E 3141 0010                  		move.w	d1,$10(a0)
00014C52 6000 FE0C                  		bra.w	loc_1300C
00014C56                            ; End of function Sonic_RollSpeed
00014C56                            
00014C56                            
00014C56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C56                            
00014C56                            
00014C56                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00014C56 3028 0020                  		move.w	$20(a0),d0
00014C5A 6700                       		beq.s	loc_1320A
00014C5C 6A00                       		bpl.s	loc_13218
00014C5E                            
00014C5E                            loc_1320A:
00014C5E 08E8 0000 0022             		bset	#0,$22(a0)
00014C64 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014C6A 4E75                       		rts	
00014C6C                            ; ===========================================================================
00014C6C                            
00014C6C                            loc_13218:
00014C6C 9044                       		sub.w	d4,d0
00014C6E 6400                       		bcc.s	loc_13220
00014C70 303C FF80                  		move.w	#-$80,d0
00014C74                            
00014C74                            loc_13220:
00014C74 3140 0020                  		move.w	d0,$20(a0)
00014C78 4E75                       		rts	
00014C7A                            ; End of function Sonic_RollLeft
00014C7A                            
00014C7A                            
00014C7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C7A                            
00014C7A                            
00014C7A                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00014C7A 3028 0020                  		move.w	$20(a0),d0
00014C7E 6B00                       		bmi.s	loc_1323A
00014C80 08A8 0000 0022             		bclr	#0,$22(a0)
00014C86 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014C8C 4E75                       		rts	
00014C8E                            ; ===========================================================================
00014C8E                            
00014C8E                            loc_1323A:
00014C8E D044                       		add.w	d4,d0
00014C90 6400                       		bcc.s	loc_13242
00014C92 303C 0080                  		move.w	#$80,d0
00014C96                            
00014C96                            loc_13242:
00014C96 3140 0020                  		move.w	d0,$20(a0)
00014C9A 4E75                       		rts	
00014C9C                            ; End of function Sonic_RollRight
00014C9C                            
00014C9C                            ; ---------------------------------------------------------------------------
00014C9C                            ; Subroutine to	change Sonic's direction while jumping
00014C9C                            ; ---------------------------------------------------------------------------
00014C9C                            
00014C9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C9C                            
00014C9C                            
00014C9C                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014C9C 3C38 F760                  		move.w	($FFFFF760).w,d6
00014CA0 3A38 F762                  		move.w	($FFFFF762).w,d5
00014CA4 E345                       		asl.w	#1,d5
00014CA6 0828 0004 0022             		btst	#4,$22(a0)
00014CAC 6600                       		bne.s	Obj01_ResetScr2
00014CAE 3028 0010                  		move.w	$10(a0),d0
00014CB2 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014CB8 6700                       		beq.s	loc_13278	; if not, branch
00014CBA 08E8 0000 0022             		bset	#0,$22(a0)
00014CC0 9045                       		sub.w	d5,d0
00014CC2 3206                       		move.w	d6,d1
00014CC4 4441                       		neg.w	d1
00014CC6 B041                       		cmp.w	d1,d0
00014CC8 6E00                       		bgt.s	loc_13278
00014CCA 3001                       		move.w	d1,d0
00014CCC                            
00014CCC                            loc_13278:
00014CCC 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014CD2 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00014CD4 08A8 0000 0022             		bclr	#0,$22(a0)
00014CDA D045                       		add.w	d5,d0
00014CDC B046                       		cmp.w	d6,d0
00014CDE 6D00                       		blt.s	Obj01_JumpMove
00014CE0 3006                       		move.w	d6,d0
00014CE2                            
00014CE2                            Obj01_JumpMove:
00014CE2 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00014CE6                            
00014CE6                            Obj01_ResetScr2:
00014CE6 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00014CEC 6700                       		beq.s	loc_132A4	; if yes, branch
00014CEE 6400                       		bcc.s	loc_132A0
00014CF0 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00014CF4                            
00014CF4                            loc_132A0:
00014CF4 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014CF8                            
00014CF8                            loc_132A4:
00014CF8 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00014CFE 6500                       		bcs.s	locret_132D2	; if yes, branch
00014D00 3028 0010                  		move.w	$10(a0),d0
00014D04 3200                       		move.w	d0,d1
00014D06 EA41                       		asr.w	#5,d1
00014D08 6700                       		beq.s	locret_132D2
00014D0A 6B00                       		bmi.s	loc_132C6
00014D0C 9041                       		sub.w	d1,d0
00014D0E 6400                       		bcc.s	loc_132C0
00014D10 303C 0000                  		move.w	#0,d0
00014D14                            
00014D14                            loc_132C0:
00014D14 3140 0010                  		move.w	d0,$10(a0)
00014D18 4E75                       		rts	
00014D1A                            ; ===========================================================================
00014D1A                            
00014D1A                            loc_132C6:
00014D1A 9041                       		sub.w	d1,d0
00014D1C 6500                       		bcs.s	loc_132CE
00014D1E 303C 0000                  		move.w	#0,d0
00014D22                            
00014D22                            loc_132CE:
00014D22 3140 0010                  		move.w	d0,$10(a0)
00014D26                            
00014D26                            locret_132D2:
00014D26 4E75                       		rts	
00014D28                            ; End of function Sonic_ChgJumpDir
00014D28                            
00014D28                            ; ===========================================================================
00014D28                            ; ---------------------------------------------------------------------------
00014D28                            ; Unused subroutine to squash Sonic
00014D28                            ; ---------------------------------------------------------------------------
00014D28 1028 0026                  		move.b	$26(a0),d0
00014D2C 0600 0020                  		addi.b	#$20,d0
00014D30 0200 00C0                  		andi.b	#$C0,d0
00014D34 6600                       		bne.s	locret_13302
00014D36 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014D3A 4A41                       		tst.w	d1
00014D3C 6A00                       		bpl.s	locret_13302
00014D3E 317C 0000 0020             		move.w	#0,$20(a0)	; stop Sonic moving
00014D44 317C 0000 0010             		move.w	#0,$10(a0)
00014D4A 317C 0000 0012             		move.w	#0,$12(a0)
00014D50 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00014D56                            
00014D56                            locret_13302:
00014D56 4E75                       		rts	
00014D58                            ; ---------------------------------------------------------------------------
00014D58                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00014D58                            ; ---------------------------------------------------------------------------
00014D58                            
00014D58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D58                            
00014D58                            
00014D58                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00014D58 2228 0008                  		move.l	8(a0),d1
00014D5C 3028 0010                  		move.w	$10(a0),d0
00014D60 48C0                       		ext.l	d0
00014D62 E180                       		asl.l	#8,d0
00014D64 D280                       		add.l	d0,d1
00014D66 4841                       		swap	d1
00014D68 3038 F728                  		move.w	($FFFFF728).w,d0
00014D6C 0640 0010                  		addi.w	#$10,d0
00014D70 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014D72 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00014D74 3038 F72A                  		move.w	($FFFFF72A).w,d0
00014D78 0640 0128                  		addi.w	#$128,d0
00014D7C 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00014D80 6600                       		bne.s	loc_13332
00014D82 0640 0040                  		addi.w	#$40,d0
00014D86                            
00014D86                            loc_13332:
00014D86 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014D88 6300                       		bls.s	Boundary_Sides	; if yes, branch
00014D8A                            
00014D8A                            loc_13336:
00014D8A 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014D8E 0640 00E0                  		addi.w	#$E0,d0
00014D92 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00014D96 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00014D98 4E75                       		rts	
00014D9A                            ; ===========================================================================
00014D9A                            
00014D9A                            Boundary_Bottom:
00014D9A 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00014DA0 6600                       		bne.s	JMPKillSonic	; if not, kill Sonic
00014DA2 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00014DA8 6500                       		bcs.s	JMPKillSonic
00014DAA 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00014DAE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014DB4 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00014DBA 4E75                       		rts	
00014DBC                            ; ===========================================================================
00014DBC                            
00014DBC                            Boundary_Sides:
00014DBC 3140 0008                  		move.w	d0,8(a0)
00014DC0 317C 0000 000A             		move.w	#0,$A(a0)
00014DC6 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00014DCC 317C 0000 0020             		move.w	#0,$20(a0)
00014DD2 60B6                       		bra.s	loc_13336
00014DD4                            
00014DD4                            JMPKillSonic:
00014DD4 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
00014DDA 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
00014DE0 4EF9 0000 0000             		jmp	KillSonic
00014DE6                            ; End of function Sonic_LevelBound
00014DE6                            
00014DE6                            ; ---------------------------------------------------------------------------
00014DE6                            ; Subroutine allowing Sonic to roll when he's moving
00014DE6                            ; ---------------------------------------------------------------------------
00014DE6                            
00014DE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DE6                            
00014DE6                            
00014DE6                            Sonic_Roll:				; XREF: Obj01_MdNormal
00014DE6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014DEA 6600                       		bne.s	Obj01_NoRoll
00014DEC 3028 0020                  		move.w	$20(a0),d0
00014DF0 6A00                       		bpl.s	loc_13392
00014DF2 4440                       		neg.w	d0
00014DF4                            
00014DF4                            loc_13392:
00014DF4 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00014DF8 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00014DFA 1038 F602                  		move.b	($FFFFF602).w,d0
00014DFE 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00014E02 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00014E04 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00014E0A 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00014E0C                            
00014E0C                            Obj01_NoRoll:
00014E0C 4E75                       		rts	
00014E0E                            ; ===========================================================================
00014E0E                            
00014E0E                            Obj01_ChkRoll:
00014E0E 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00014E14 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00014E16 4E75                       		rts	
00014E18                            ; ===========================================================================
00014E18                            
00014E18                            Obj01_DoRoll:
00014E18 08E8 0002 0022             		bset	#2,$22(a0)
00014E1E 117C 000E 0016             		move.b	#$E,$16(a0)
00014E24 117C 0007 0017             		move.b	#7,$17(a0)
00014E2A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014E30 5A68 000C                  		addq.w	#5,$C(a0)
00014E34 303C 00BE                  		move.w	#$BE,d0
00014E38 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play rolling sound
00014E3E 4A68 0020                  		tst.w	$20(a0)
00014E42 6600                       		bne.s	locret_133E8
00014E44 317C 0200 0020             		move.w	#$200,$20(a0)
00014E4A                            
00014E4A                            locret_133E8:
00014E4A 4E75                       		rts	
00014E4C                            ; End of function Sonic_Roll
00014E4C                            
00014E4C                            ; ---------------------------------------------------------------------------
00014E4C                            ; Subroutine allowing Sonic to jump
00014E4C                            ; ---------------------------------------------------------------------------
00014E4C                            
00014E4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E4C                            
00014E4C                            
00014E4C                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014E4C 1038 F603                  		move.b	($FFFFF603).w,d0
00014E50 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00014E54 6700 0000                  		beq.w	locret_1348E	; if not, branch
00014E58 31FC 6000 F5D8             		move.w	#$6000,(SonimeSST+sonime_waittimer).w
00014E5E 0C38 000B F5CE             		cmpi.b	#face_impatient,(SonimeSST+sonime_face).w
00014E64 6600                       		bne.s	@notfrustrated
00014E66 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00014E6C                            
00014E6C                            	@notfrustrated:
00014E6C 7000                       		moveq	#0,d0
00014E6E 1028 0026                  		move.b	$26(a0),d0
00014E72 0600 0080                  		addi.b	#$80,d0
00014E76 6100 0000                  		bsr.w	sub_14D48
00014E7A 0C41 0006                  		cmpi.w	#6,d1
00014E7E 6D00 0000                  		blt.w	locret_1348E
00014E82 343C 0680                  		move.w	#$680,d2
00014E86 0828 0006 0022             		btst	#6,$22(a0)
00014E8C 6700                       		beq.s	loc_1341C
00014E8E 343C 0380                  		move.w	#$380,d2
00014E92                            
00014E92                            loc_1341C:
00014E92 7000                       		moveq	#0,d0
00014E94 1028 0026                  		move.b	$26(a0),d0
00014E98 0400 0040                  		subi.b	#$40,d0
00014E9C 4EB9 0000 29F6             		jsr	(CalcSine).l
00014EA2 C3C2                       		muls.w	d2,d1
00014EA4 E081                       		asr.l	#8,d1
00014EA6 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00014EAA C1C2                       		muls.w	d2,d0
00014EAC E080                       		asr.l	#8,d0
00014EAE D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00014EB2 08E8 0001 0022             		bset	#1,$22(a0)
00014EB8 08A8 0005 0022             		bclr	#5,$22(a0)
00014EBE 588F                       		addq.l	#4,sp
00014EC0 117C 0001 003C             		move.b	#1,$3C(a0)
00014EC6 4228 0038                  		clr.b	$38(a0)
00014ECA 303C 00A0                  		move.w	#$A0,d0
00014ECE 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play jumping sound
00014ED4 117C 0013 0016             		move.b	#$13,$16(a0)
00014EDA 117C 0009 0017             		move.b	#9,$17(a0)
00014EE0 0828 0002 0022             		btst	#2,$22(a0)
00014EE6 6600                       		bne.s	loc_13490
00014EE8 117C 000E 0016             		move.b	#$E,$16(a0)
00014EEE 117C 0007 0017             		move.b	#7,$17(a0)
00014EF4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00014EFA 08E8 0002 0022             		bset	#2,$22(a0)
00014F00 5A68 000C                  		addq.w	#5,$C(a0)
00014F04                            
00014F04                            locret_1348E:
00014F04 4E75                       		rts	
00014F06                            ; ===========================================================================
00014F06                            
00014F06                            loc_13490:
00014F06 08E8 0004 0022             		bset	#4,$22(a0)
00014F0C 4E75                       		rts	
00014F0E                            ; End of function Sonic_Jump
00014F0E                            
00014F0E                            
00014F0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F0E                            
00014F0E                            
00014F0E                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014F0E 4A28 003C                  		tst.b	$3C(a0)
00014F12 6700                       		beq.s	loc_134C4
00014F14 323C FC00                  		move.w	#-$400,d1
00014F18 0828 0006 0022             		btst	#6,$22(a0)
00014F1E 6700                       		beq.s	loc_134AE
00014F20 323C FE00                  		move.w	#-$200,d1
00014F24                            
00014F24                            loc_134AE:
00014F24 B268 0012                  		cmp.w	$12(a0),d1
00014F28 6F00                       		ble.s	locret_134C2
00014F2A 1038 F602                  		move.b	($FFFFF602).w,d0
00014F2E 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00014F32 6600                       		bne.s	locret_134C2	; if yes, branch
00014F34 3141 0012                  		move.w	d1,$12(a0)
00014F38                            
00014F38                            locret_134C2:
00014F38 4E75                       		rts	
00014F3A                            ; ===========================================================================
00014F3A                            
00014F3A                            loc_134C4:
00014F3A 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00014F40 6C00                       		bge.s	locret_134D2
00014F42 317C F040 0012             		move.w	#-$FC0,$12(a0)
00014F48                            
00014F48                            locret_134D2:
00014F48 4E75                       		rts	
00014F4A                            ; End of function Sonic_JumpHeight
00014F4A                            
00014F4A                            ; ---------------------------------------------------------------------------
00014F4A                            ; Subroutine to	slow Sonic walking up a	slope
00014F4A                            ; ---------------------------------------------------------------------------
00014F4A                            
00014F4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F4A                            
00014F4A                            
00014F4A                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00014F4A 1028 0026                  		move.b	$26(a0),d0
00014F4E 0600 0060                  		addi.b	#$60,d0
00014F52 0C00 00C0                  		cmpi.b	#$C0,d0
00014F56 6400                       		bcc.s	locret_13508
00014F58 1028 0026                  		move.b	$26(a0),d0
00014F5C 4EB9 0000 29F6             		jsr	(CalcSine).l
00014F62 C1FC 0020                  		muls.w	#$20,d0
00014F66 E080                       		asr.l	#8,d0
00014F68 4A68 0020                  		tst.w	$20(a0)
00014F6C 6700                       		beq.s	locret_13508
00014F6E 6B00                       		bmi.s	loc_13504
00014F70 4A40                       		tst.w	d0
00014F72 6700                       		beq.s	locret_13502
00014F74 D168 0020                  		add.w	d0,$20(a0)	; change Sonic's inertia
00014F78                            
00014F78                            locret_13502:
00014F78 4E75                       		rts	
00014F7A                            ; ===========================================================================
00014F7A                            
00014F7A                            loc_13504:
00014F7A D168 0020                  		add.w	d0,$20(a0)
00014F7E                            
00014F7E                            locret_13508:
00014F7E 4E75                       		rts	
00014F80                            ; End of function Sonic_SlopeResist
00014F80                            
00014F80                            ; ---------------------------------------------------------------------------
00014F80                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00014F80                            ; ---------------------------------------------------------------------------
00014F80                            
00014F80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F80                            
00014F80                            
00014F80                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00014F80 1028 0026                  		move.b	$26(a0),d0
00014F84 0600 0060                  		addi.b	#$60,d0
00014F88 0C00 00C0                  		cmpi.b	#-$40,d0
00014F8C 6400                       		bcc.s	locret_13544
00014F8E 1028 0026                  		move.b	$26(a0),d0
00014F92 4EB9 0000 29F6             		jsr	(CalcSine).l
00014F98 C1FC 0050                  		muls.w	#$50,d0
00014F9C E080                       		asr.l	#8,d0
00014F9E 4A68 0020                  		tst.w	$20(a0)
00014FA2 6B00                       		bmi.s	loc_1353A
00014FA4 4A40                       		tst.w	d0
00014FA6 6A00                       		bpl.s	loc_13534
00014FA8 E480                       		asr.l	#2,d0
00014FAA                            
00014FAA                            loc_13534:
00014FAA D168 0020                  		add.w	d0,$20(a0)
00014FAE 4E75                       		rts	
00014FB0                            ; ===========================================================================
00014FB0                            
00014FB0                            loc_1353A:
00014FB0 4A40                       		tst.w	d0
00014FB2 6B00                       		bmi.s	loc_13540
00014FB4 E480                       		asr.l	#2,d0
00014FB6                            
00014FB6                            loc_13540:
00014FB6 D168 0020                  		add.w	d0,$20(a0)
00014FBA                            
00014FBA                            locret_13544:
00014FBA 4E75                       		rts	
00014FBC                            ; End of function Sonic_RollRepel
00014FBC                            
00014FBC                            ; ---------------------------------------------------------------------------
00014FBC                            ; Subroutine to	push Sonic down	a slope
00014FBC                            ; ---------------------------------------------------------------------------
00014FBC                            
00014FBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FBC                            
00014FBC                            
00014FBC                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00014FBC 4E71                       		nop	
00014FBE 4A28 0038                  		tst.b	$38(a0)
00014FC2 6600                       		bne.s	locret_13580
00014FC4 4A68 003E                  		tst.w	$3E(a0)
00014FC8 6600                       		bne.s	loc_13582
00014FCA 1028 0026                  		move.b	$26(a0),d0
00014FCE 0600 0020                  		addi.b	#$20,d0
00014FD2 0200 00C0                  		andi.b	#$C0,d0
00014FD6 6700                       		beq.s	locret_13580
00014FD8 3028 0020                  		move.w	$20(a0),d0
00014FDC 6A00                       		bpl.s	loc_1356A
00014FDE 4440                       		neg.w	d0
00014FE0                            
00014FE0                            loc_1356A:
00014FE0 0C40 0280                  		cmpi.w	#$280,d0
00014FE4 6400                       		bcc.s	locret_13580
00014FE6 4268 0020                  		clr.w	$20(a0)
00014FEA 08E8 0001 0022             		bset	#1,$22(a0)
00014FF0 317C 001E 003E             		move.w	#$1E,$3E(a0)
00014FF6                            
00014FF6                            locret_13580:
00014FF6 4E75                       		rts	
00014FF8                            ; ===========================================================================
00014FF8                            
00014FF8                            loc_13582:
00014FF8 5368 003E                  		subq.w	#1,$3E(a0)
00014FFC 4E75                       		rts	
00014FFE                            ; End of function Sonic_SlopeRepel
00014FFE                            
00014FFE                            ; ---------------------------------------------------------------------------
00014FFE                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00014FFE                            ; ---------------------------------------------------------------------------
00014FFE                            
00014FFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FFE                            
00014FFE                            
00014FFE                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014FFE 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00015002 6700                       		beq.s	locret_135A2	; if already 0,	branch
00015004 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00015006                            
00015006 5400                       		addq.b	#2,d0		; increase angle
00015008 6400                       		bcc.s	loc_13596
0001500A 7000                       		moveq	#0,d0
0001500C                            
0001500C                            loc_13596:
0001500C 6000                       		bra.s	loc_1359E
0001500E                            ; ===========================================================================
0001500E                            
0001500E                            loc_13598:
0001500E 5500                       		subq.b	#2,d0		; decrease angle
00015010 6400                       		bcc.s	loc_1359E
00015012 7000                       		moveq	#0,d0
00015014                            
00015014                            loc_1359E:
00015014 1140 0026                  		move.b	d0,$26(a0)
00015018                            
00015018                            locret_135A2:
00015018 4E75                       		rts	
0001501A                            ; End of function Sonic_JumpAngle
0001501A                            
0001501A                            ; ---------------------------------------------------------------------------
0001501A                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
0001501A                            ; ---------------------------------------------------------------------------
0001501A                            
0001501A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001501A                            
0001501A                            
0001501A                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
0001501A 3228 0010                  		move.w	$10(a0),d1
0001501E 3428 0012                  		move.w	$12(a0),d2
00015022 4EB9 0000 2CBE             		jsr	(CalcAngle).l
00015028 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
0001502C 0400 0020                  		subi.b	#$20,d0
00015030 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00015034 0200 00C0                  		andi.b	#$C0,d0
00015038 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
0001503C 0C00 0040                  		cmpi.b	#$40,d0
00015040 6700 0000                  		beq.w	loc_13680
00015044 0C00 0080                  		cmpi.b	#$80,d0
00015048 6700 0000                  		beq.w	loc_136E2
0001504C 0C00 00C0                  		cmpi.b	#-$40,d0
00015050 6700 0000                  		beq.w	loc_1373E
00015054 6100 0000                  		bsr.w	Sonic_HitWall
00015058 4A41                       		tst.w	d1
0001505A 6A00                       		bpl.s	loc_135F0
0001505C 9368 0008                  		sub.w	d1,8(a0)
00015060 317C 0000 0010             		move.w	#0,$10(a0)
00015066                            
00015066                            loc_135F0:
00015066 6100 0000                  		bsr.w	sub_14EB4
0001506A 4A41                       		tst.w	d1
0001506C 6A00                       		bpl.s	loc_13602
0001506E D368 0008                  		add.w	d1,8(a0)
00015072 317C 0000 0010             		move.w	#0,$10(a0)
00015078                            
00015078                            loc_13602:
00015078 6100 0000                  		bsr.w	Sonic_HitFloor
0001507C 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00015080 4A41                       		tst.w	d1
00015082 6A00                       		bpl.s	locret_1367E
00015084 1428 0012                  		move.b	$12(a0),d2
00015088 5002                       		addq.b	#8,d2
0001508A 4402                       		neg.b	d2
0001508C B202                       		cmp.b	d2,d1
0001508E 6C00                       		bge.s	loc_1361E
00015090 B002                       		cmp.b	d2,d0
00015092 6D00                       		blt.s	locret_1367E
00015094                            
00015094                            loc_1361E:
00015094 D368 000C                  		add.w	d1,$C(a0)
00015098 1143 0026                  		move.b	d3,$26(a0)
0001509C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000150A0 117C 0000 001C             		move.b	#0,$1C(a0)
000150A6 1003                       		move.b	d3,d0
000150A8 0600 0020                  		addi.b	#$20,d0
000150AC 0200 0040                  		andi.b	#$40,d0
000150B0 6600                       		bne.s	loc_1365C
000150B2 1003                       		move.b	d3,d0
000150B4 0600 0010                  		addi.b	#$10,d0
000150B8 0200 0020                  		andi.b	#$20,d0
000150BC 6700                       		beq.s	loc_1364E
000150BE E0E8 0012                  		asr	$12(a0)
000150C2 6000                       		bra.s	loc_13670
000150C4                            ; ===========================================================================
000150C4                            
000150C4                            loc_1364E:
000150C4 317C 0000 0012             		move.w	#0,$12(a0)
000150CA 3168 0010 0020             		move.w	$10(a0),$20(a0)
000150D0 4E75                       		rts	
000150D2                            ; ===========================================================================
000150D2                            
000150D2                            loc_1365C:
000150D2 317C 0000 0010             		move.w	#0,$10(a0)
000150D8 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
000150DE 6F00                       		ble.s	loc_13670
000150E0 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
000150E6                            
000150E6                            loc_13670:
000150E6 3168 0012 0020             		move.w	$12(a0),$20(a0)
000150EC 4A03                       		tst.b	d3
000150EE 6A00                       		bpl.s	locret_1367E
000150F0 4468 0020                  		neg.w	$20(a0)
000150F4                            
000150F4                            locret_1367E:
000150F4 4E75                       		rts	
000150F6                            ; ===========================================================================
000150F6                            
000150F6                            loc_13680:
000150F6 6100 0000                  		bsr.w	Sonic_HitWall
000150FA 4A41                       		tst.w	d1
000150FC 6A00                       		bpl.s	loc_1369A
000150FE 9368 0008                  		sub.w	d1,8(a0)
00015102 317C 0000 0010             		move.w	#0,$10(a0)
00015108 3168 0012 0020             		move.w	$12(a0),$20(a0)
0001510E 4E75                       		rts	
00015110                            ; ===========================================================================
00015110                            
00015110                            loc_1369A:
00015110 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015114 4A41                       		tst.w	d1
00015116 6A00                       		bpl.s	loc_136B4
00015118 9368 000C                  		sub.w	d1,$C(a0)
0001511C 4A68 0012                  		tst.w	$12(a0)
00015120 6A00                       		bpl.s	locret_136B2
00015122 317C 0000 0012             		move.w	#0,$12(a0)
00015128                            
00015128                            locret_136B2:
00015128 4E75                       		rts	
0001512A                            ; ===========================================================================
0001512A                            
0001512A                            loc_136B4:
0001512A 4A68 0012                  		tst.w	$12(a0)
0001512E 6B00                       		bmi.s	locret_136E0
00015130 6100 0000                  		bsr.w	Sonic_HitFloor
00015134 4A41                       		tst.w	d1
00015136 6A00                       		bpl.s	locret_136E0
00015138 D368 000C                  		add.w	d1,$C(a0)
0001513C 1143 0026                  		move.b	d3,$26(a0)
00015140 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015144 117C 0000 001C             		move.b	#0,$1C(a0)
0001514A 317C 0000 0012             		move.w	#0,$12(a0)
00015150 3168 0010 0020             		move.w	$10(a0),$20(a0)
00015156                            
00015156                            locret_136E0:
00015156 4E75                       		rts	
00015158                            ; ===========================================================================
00015158                            
00015158                            loc_136E2:
00015158 6100 0000                  		bsr.w	Sonic_HitWall
0001515C 4A41                       		tst.w	d1
0001515E 6A00                       		bpl.s	loc_136F4
00015160 9368 0008                  		sub.w	d1,8(a0)
00015164 317C 0000 0010             		move.w	#0,$10(a0)
0001516A                            
0001516A                            loc_136F4:
0001516A 6100 0000                  		bsr.w	sub_14EB4
0001516E 4A41                       		tst.w	d1
00015170 6A00                       		bpl.s	loc_13706
00015172 D368 0008                  		add.w	d1,8(a0)
00015176 317C 0000 0010             		move.w	#0,$10(a0)
0001517C                            
0001517C                            loc_13706:
0001517C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015180 4A41                       		tst.w	d1
00015182 6A00                       		bpl.s	locret_1373C
00015184 9368 000C                  		sub.w	d1,$C(a0)
00015188 1003                       		move.b	d3,d0
0001518A 0600 0020                  		addi.b	#$20,d0
0001518E 0200 0040                  		andi.b	#$40,d0
00015192 6600                       		bne.s	loc_13726
00015194 317C 0000 0012             		move.w	#0,$12(a0)
0001519A 4E75                       		rts	
0001519C                            ; ===========================================================================
0001519C                            
0001519C                            loc_13726:
0001519C 1143 0026                  		move.b	d3,$26(a0)
000151A0 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000151A4 3168 0012 0020             		move.w	$12(a0),$20(a0)
000151AA 4A03                       		tst.b	d3
000151AC 6A00                       		bpl.s	locret_1373C
000151AE 4468 0020                  		neg.w	$20(a0)
000151B2                            
000151B2                            locret_1373C:
000151B2 4E75                       		rts	
000151B4                            ; ===========================================================================
000151B4                            
000151B4                            loc_1373E:
000151B4 6100 0000                  		bsr.w	sub_14EB4
000151B8 4A41                       		tst.w	d1
000151BA 6A00                       		bpl.s	loc_13758
000151BC D368 0008                  		add.w	d1,8(a0)
000151C0 317C 0000 0010             		move.w	#0,$10(a0)
000151C6 3168 0012 0020             		move.w	$12(a0),$20(a0)
000151CC 4E75                       		rts	
000151CE                            ; ===========================================================================
000151CE                            
000151CE                            loc_13758:
000151CE 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000151D2 4A41                       		tst.w	d1
000151D4 6A00                       		bpl.s	loc_13772
000151D6 9368 000C                  		sub.w	d1,$C(a0)
000151DA 4A68 0012                  		tst.w	$12(a0)
000151DE 6A00                       		bpl.s	locret_13770
000151E0 317C 0000 0012             		move.w	#0,$12(a0)
000151E6                            
000151E6                            locret_13770:
000151E6 4E75                       		rts	
000151E8                            ; ===========================================================================
000151E8                            
000151E8                            loc_13772:
000151E8 4A68 0012                  		tst.w	$12(a0)
000151EC 6B00                       		bmi.s	locret_1379E
000151EE 6100 0000                  		bsr.w	Sonic_HitFloor
000151F2 4A41                       		tst.w	d1
000151F4 6A00                       		bpl.s	locret_1379E
000151F6 D368 000C                  		add.w	d1,$C(a0)
000151FA 1143 0026                  		move.b	d3,$26(a0)
000151FE 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015202 117C 0000 001C             		move.b	#0,$1C(a0)
00015208 317C 0000 0012             		move.w	#0,$12(a0)
0001520E 3168 0010 0020             		move.w	$10(a0),$20(a0)
00015214                            
00015214                            locret_1379E:
00015214 4E75                       		rts	
00015216                            ; End of function Sonic_Floor
00015216                            
00015216                            ; ---------------------------------------------------------------------------
00015216                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00015216                            ; ---------------------------------------------------------------------------
00015216                            
00015216                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015216                            
00015216                            
00015216                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00015216 0828 0004 0022             		btst	#4,$22(a0)
0001521C 6700                       		beq.s	loc_137AE
0001521E 4E71                       		nop	
00015220 4E71                       		nop	
00015222 4E71                       		nop	
00015224                            
00015224                            loc_137AE:
00015224 08A8 0005 0022             		bclr	#5,$22(a0)
0001522A 08A8 0001 0022             		bclr	#1,$22(a0)
00015230 08A8 0004 0022             		bclr	#4,$22(a0)
00015236 0828 0002 0022             		btst	#2,$22(a0)
0001523C 6700                       		beq.s	loc_137E4
0001523E 08A8 0002 0022             		bclr	#2,$22(a0)
00015244 117C 0013 0016             		move.b	#$13,$16(a0)
0001524A 117C 0009 0017             		move.b	#9,$17(a0)
00015250 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00015256 5B68 000C                  		subq.w	#5,$C(a0)
0001525A                            
0001525A                            loc_137E4:
0001525A 117C 0000 003C             		move.b	#0,$3C(a0)
00015260 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00015266 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001526A                            
0001526A                            	@NoReset:
0001526A 4E75                       		rts	
0001526C                            ; End of function Sonic_ResetOnFloor
0001526C                            
0001526C                            ; ===========================================================================
0001526C                            ; ---------------------------------------------------------------------------
0001526C                            ; Sonic	when he	gets hurt
0001526C                            ; ---------------------------------------------------------------------------
0001526C                            
0001526C                            Obj01_Hurt:				; XREF: Obj01_Index
0001526C 4EBA 96E2                  		jsr	SpeedToPos
00015270 0668 0030 0012             		addi.w	#$30,$12(a0)
00015276 0828 0006 0022             		btst	#6,$22(a0)
0001527C 6700                       		beq.s	loc_1380C
0001527E 0468 0020 0012             		subi.w	#$20,$12(a0)
00015284                            
00015284                            loc_1380C:
00015284 6100 0000                  		bsr.w	Sonic_HurtStop
00015288 6100 FACE                  		bsr.w	Sonic_LevelBound
0001528C 6100 F4BE                  		bsr.w	Sonic_RecordPos
00015290 6100 0000                  		bsr.w	Sonic_Animate
00015294 6100 0000                  		bsr.w	LoadSonicDynPLC
00015298 4EFA 96D0                  		jmp	DisplaySprite
0001529C                            
0001529C                            ; ---------------------------------------------------------------------------
0001529C                            ; Subroutine to	stop Sonic falling after he's been hurt
0001529C                            ; ---------------------------------------------------------------------------
0001529C                            
0001529C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001529C                            
0001529C                            
0001529C                            Sonic_HurtStop:				; XREF: Obj01_Hurt
0001529C 3038 F72E                  		move.w	($FFFFF72E).w,d0
000152A0 0640 00E0                  		addi.w	#$E0,d0
000152A4 B068 000C                  		cmp.w	$C(a0),d0
000152A8 6500 FB2A                  		bcs.w	JMPKillSonic
000152AC 6100 FD6C                  		bsr.w	Sonic_Floor
000152B0 0828 0001 0022             		btst	#1,$22(a0)
000152B6 6600                       		bne.s	locret_13860
000152B8 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
000152BE 7000                       		moveq	#0,d0
000152C0 3140 0012                  		move.w	d0,$12(a0)
000152C4 3140 0010                  		move.w	d0,$10(a0)
000152C8 3140 0020                  		move.w	d0,$20(a0)
000152CC 117C 0000 001C             		move.b	#0,$1C(a0)
000152D2 5528 0024                  		subq.b	#2,$24(a0)
000152D6 317C 0078 0030             		move.w	#$78,$30(a0)
000152DC                            
000152DC                            locret_13860:
000152DC 4E75                       		rts	
000152DE                            ; End of function Sonic_HurtStop
000152DE                            
000152DE                            ; ===========================================================================
000152DE                            ; ---------------------------------------------------------------------------
000152DE                            ; Sonic	when he	dies
000152DE                            ; ---------------------------------------------------------------------------
000152DE                            
000152DE                            Obj01_Death:				; XREF: Obj01_Index
000152DE 6100 0000                  		bsr.w	GameOver
000152E2 4EBA 964C                  		jsr	ObjectFall
000152E6 6100 F464                  		bsr.w	Sonic_RecordPos
000152EA 6100 0000                  		bsr.w	Sonic_Animate
000152EE 6100 0000                  		bsr.w	LoadSonicDynPLC
000152F2 4EFA 9676                  		jmp	DisplaySprite
000152F6                            
000152F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152F6                            
000152F6                            
000152F6                            GameOver:				; XREF: Obj01_Death
000152F6 3038 F72E                  		move.w	($FFFFF72E).w,d0
000152FA 0640 0100                  		addi.w	#$100,d0
000152FE B068 000C                  		cmp.w	$C(a0),d0
00015302 6400 0000                  		bcc.w	locret_13900
00015306 317C FFC8 0012             		move.w	#-$38,$12(a0)
0001530C 5428 0024                  		addq.b	#2,$24(a0)
00015310 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00015314 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00015318 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
0001531C 6600                       		bne.s	loc_138D4
0001531E 317C 0000 003A             		move.w	#0,$3A(a0)
00015324 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
0001532A 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00015330 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00015336 4238 FE1A                  		clr.b	($FFFFFE1A).w
0001533A                            
0001533A                            loc_138C2:
0001533A 303C 008F                  		move.w	#$8F,d0
0001533E 4EB9 0000 121A             		jsr	(PlaySound).l	; play game over music
00015344 7003                       		moveq	#3,d0
00015346 4EF9 0000 145E             		jmp	(LoadPLC).l	; load game over patterns
0001534C                            ; ===========================================================================
0001534C                            
0001534C                            loc_138D4:
0001534C 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00015352 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00015356 6700                       		beq.s	locret_13900	; if not, branch
00015358 317C 0000 003A             		move.w	#0,$3A(a0)
0001535E 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00015364 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001536A 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00015370 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00015376 60C2                       		bra.s	loc_138C2
00015378                            ; ===========================================================================
00015378                            
00015378                            locret_13900:
00015378 4E75                       		rts	
0001537A                            ; End of function GameOver
0001537A                            
0001537A                            ; ===========================================================================
0001537A                            ; ---------------------------------------------------------------------------
0001537A                            ; Sonic	when the level is restarted
0001537A                            ; ---------------------------------------------------------------------------
0001537A                            
0001537A                            Obj01_ResetLevel:			; XREF: Obj01_Index
0001537A 4A68 003A                  		tst.w	$3A(a0)
0001537E 6700                       		beq.s	locret_13914
00015380 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00015384 6600                       		bne.s	locret_13914
00015386 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001538C 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00015392                            
00015392                            locret_13914:
00015392 4E75                       		rts	
00015394                            
00015394                            ; ---------------------------------------------------------------------------
00015394                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00015394                            ; ---------------------------------------------------------------------------
00015394                            
00015394                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015394                            
00015394                            
00015394                            Sonic_Loops:				; XREF: Obj01_Control
00015394 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
0001539A 6700                       		beq.s	loc_13926	; if yes, branch
0001539C 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
000153A0 6600 0000                  		bne.w	locret_139C2	; if not, branch
000153A4                            
000153A4                            loc_13926:
000153A4 3028 000C                  		move.w	$C(a0),d0
000153A8 E248                       		lsr.w	#1,d0
000153AA 0240 0380                  		andi.w	#$380,d0
000153AE 1228 0008                  		move.b	8(a0),d1
000153B2 0241 007F                  		andi.w	#$7F,d1
000153B6 D041                       		add.w	d1,d0
000153B8 43F8 A400                  		lea	($FFFFA400).w,a1
000153BC 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
000153C0 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
000153C4 6700 FA48                  		beq.w	Obj01_ChkRoll
000153C8 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
000153CC 6700 FA40                  		beq.w	Obj01_ChkRoll
000153D0 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
000153D4 6700                       		beq.s	loc_13976
000153D6 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
000153DA 6700                       		beq.s	loc_13966
000153DC 08A8 0006 0001             		bclr	#6,1(a0)
000153E2 4E75                       		rts	
000153E4                            ; ===========================================================================
000153E4                            
000153E4                            loc_13966:
000153E4 0828 0001 0022             		btst	#1,$22(a0)
000153EA 6700                       		beq.s	loc_13976
000153EC 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000153F2 4E75                       		rts	
000153F4                            ; ===========================================================================
000153F4                            
000153F4                            loc_13976:
000153F4 3428 0008                  		move.w	8(a0),d2
000153F8 0C02 002C                  		cmpi.b	#$2C,d2
000153FC 6400                       		bcc.s	loc_13988
000153FE 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00015404 4E75                       		rts	
00015406                            ; ===========================================================================
00015406                            
00015406                            loc_13988:
00015406 0C02 00E0                  		cmpi.b	#-$20,d2
0001540A 6500                       		bcs.s	loc_13996
0001540C 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00015412 4E75                       		rts	
00015414                            ; ===========================================================================
00015414                            
00015414                            loc_13996:
00015414 0828 0006 0001             		btst	#6,1(a0)
0001541A 6600                       		bne.s	loc_139B2
0001541C 1228 0026                  		move.b	$26(a0),d1
00015420 6700                       		beq.s	locret_139C2
00015422 0C01 0080                  		cmpi.b	#-$80,d1
00015426 6200                       		bhi.s	locret_139C2
00015428 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001542E 4E75                       		rts	
00015430                            ; ===========================================================================
00015430                            
00015430                            loc_139B2:
00015430 1228 0026                  		move.b	$26(a0),d1
00015434 0C01 0080                  		cmpi.b	#-$80,d1
00015438 6300                       		bls.s	locret_139C2
0001543A 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00015440                            
00015440                            locret_139C2:
00015440 4E75                       		rts	
00015442                            ; End of function Sonic_Loops
00015442                            
00015442                            ; ---------------------------------------------------------------------------
00015442                            ; Sonic when he's drowning
00015442                            ; ---------------------------------------------------------------------------
00015442                             
00015442                            ; ||||||||||||||| S	U B	R O	U T	I N	E |||||||||||||||||||||||||||||||||||||||
00015442                             
00015442                             
00015442                            Sonic_Drowned:
00015442 6100 950C                  		bsr.w   SpeedToPos		; Make Sonic able to move
00015446 0668 0010 0012             		addi.w  #$10,$12(a0)	; Apply gravity
0001544C 6100 F2FE                  		bsr.w   Sonic_RecordPos	; Record position
00015450 6100                       		bsr.s   Sonic_Animate	; Animate Sonic
00015452 6100 0000                  		bsr.w   LoadSonicDynPLC	; Load Sonic's DPLCs
00015456 6000 9512                  		bra.w   DisplaySprite	; And finally, display Sonic
0001545A                            
0001545A                            ; ---------------------------------------------------------------------------
0001545A                            ; Subroutine to	animate	Sonic's sprites
0001545A                            ; ---------------------------------------------------------------------------
0001545A                            
0001545A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001545A                            
0001545A                            
0001545A                            Sonic_Animate:				; XREF: Obj01_Control; et al
0001545A 43F9 0000 0000             		lea	(SonicAniData).l,a1
00015460 7000                       		moveq	#0,d0
00015462 1028 001C                  		move.b	$1C(a0),d0
00015466 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0001546A 6700                       		beq.s	SAnim_Do	; if not, branch
0001546C 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00015470 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00015476 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0001547C                            
0001547C                            SAnim_Do:
0001547C D040                       		add.w	d0,d0
0001547E D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00015482 1011                       		move.b	(a1),d0
00015484 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00015486 1228 0022                  		move.b	$22(a0),d1
0001548A 0201 0001                  		andi.b	#1,d1
0001548E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00015494 8328 0001                  		or.b	d1,1(a0)
00015498 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0001549C 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
0001549E 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
000154A2                            
000154A2                            SAnim_Do2:
000154A2 7200                       		moveq	#0,d1
000154A4 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
000154A8 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000154AC 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
000154AE                            
000154AE                            SAnim_Next:
000154AE 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
000154B2 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
000154B6                            
000154B6                            SAnim_Delay:
000154B6 4E75                       		rts	
000154B8                            ; ===========================================================================
000154B8                            
000154B8                            SAnim_End_FF:
000154B8 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
000154BA 6600                       		bne.s	SAnim_End_FE	; if not, branch
000154BC 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
000154C2 1029 0001                  		move.b	1(a1),d0	; read sprite number
000154C6 60E6                       		bra.s	SAnim_Next
000154C8                            ; ===========================================================================
000154C8                            
000154C8                            SAnim_End_FE:
000154C8 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000154CA 6600                       		bne.s	SAnim_End_FD	; if not, branch
000154CC 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000154D0 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
000154D4 9200                       		sub.b	d0,d1
000154D6 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000154DA 60D2                       		bra.s	SAnim_Next
000154DC                            ; ===========================================================================
000154DC                            
000154DC                            SAnim_End_FD:
000154DC 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000154DE 6600                       		bne.s	SAnim_End	; if not, branch
000154E0 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000154E6                            
000154E6                            SAnim_End:
000154E6 4E75                       		rts	
000154E8                            ; ===========================================================================
000154E8                            
000154E8                            SAnim_WalkRun:				; XREF: SAnim_Do
000154E8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000154EC 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
000154EE 5200                       		addq.b	#1,d0		; is animation walking/running?
000154F0 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
000154F4 7200                       		moveq	#0,d1
000154F6 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
000154FA 1428 0022                  		move.b	$22(a0),d2
000154FE 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00015502 6600                       		bne.s	loc_13A70	; if yes, branch
00015504 4600                       		not.b	d0		; reverse angle
00015506                            
00015506                            loc_13A70:
00015506 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
0001550A 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
0001550C 7203                       		moveq	#3,d1
0001550E                            
0001550E                            loc_13A78:
0001550E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00015514 B302                       		eor.b	d1,d2
00015516 8528 0001                  		or.b	d2,1(a0)
0001551A 0828 0005 0022             		btst	#5,$22(a0)
00015520 6600 0000                  		bne.w	SAnim_Push
00015524 E808                       		lsr.b	#4,d0		; divide angle by $10
00015526 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
0001552A 3428 0020                  		move.w	$20(a0),d2	; get Sonic's speed
0001552E 6A00                       		bpl.s	loc_13A9C
00015530 4442                       		neg.w	d2
00015532                            
00015532                            loc_13A9C:
00015532 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00015538 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
0001553C 6400                       		bcc.s	loc_13AB4	; if yes, branch
0001553E 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00015544 1200                       		move.b	d0,d1
00015546 E209                       		lsr.b	#1,d1
00015548 D001                       		add.b	d1,d0
0001554A                            
0001554A                            loc_13AB4:
0001554A D000                       		add.b	d0,d0
0001554C 1600                       		move.b	d0,d3
0001554E 4442                       		neg.w	d2
00015550 0642 0800                  		addi.w	#$800,d2
00015554 6A00                       		bpl.s	loc_13AC2
00015556 7400                       		moveq	#0,d2
00015558                            
00015558                            loc_13AC2:
00015558 E04A                       		lsr.w	#8,d2
0001555A 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001555E 6100 FF42                  		bsr.w	SAnim_Do2
00015562 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00015566 4E75                       		rts	
00015568                            ; ===========================================================================
00015568                            
00015568                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00015568 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
0001556A 6600                       		bne.s	SAnim_Push	; if not, branch
0001556C 3428 0020                  		move.w	$20(a0),d2	; get Sonic's speed
00015570 6A00                       		bpl.s	loc_13ADE
00015572 4442                       		neg.w	d2
00015574                            
00015574                            loc_13ADE:
00015574 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
0001557A 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
0001557E 6400                       		bcc.s	loc_13AF0	; if yes, branch
00015580 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00015586                            
00015586                            loc_13AF0:
00015586 4442                       		neg.w	d2
00015588 0642 0400                  		addi.w	#$400,d2
0001558C 6A00                       		bpl.s	loc_13AFA
0001558E 7400                       		moveq	#0,d2
00015590                            
00015590                            loc_13AFA:
00015590 E04A                       		lsr.w	#8,d2
00015592 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00015596 1228 0022                  		move.b	$22(a0),d1
0001559A 0201 0001                  		andi.b	#1,d1
0001559E 0228 00FC 0001             		andi.b	#$FC,1(a0)
000155A4 8328 0001                  		or.b	d1,1(a0)
000155A8 6000 FEF8                  		bra.w	SAnim_Do2
000155AC                            ; ===========================================================================
000155AC                            
000155AC                            SAnim_Push:				; XREF: SAnim_RollJump
000155AC 3428 0020                  		move.w	$20(a0),d2	; get Sonic's speed
000155B0 6B00                       		bmi.s	loc_13B1E
000155B2 4442                       		neg.w	d2
000155B4                            
000155B4                            loc_13B1E:
000155B4 0642 0800                  		addi.w	#$800,d2
000155B8 6A00                       		bpl.s	loc_13B26
000155BA 7400                       		moveq	#0,d2
000155BC                            
000155BC                            loc_13B26:
000155BC EC4A                       		lsr.w	#6,d2
000155BE 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000155C2 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000155C8 1228 0022                  		move.b	$22(a0),d1
000155CC 0201 0001                  		andi.b	#1,d1
000155D0 0228 00FC 0001             		andi.b	#$FC,1(a0)
000155D6 8328 0001                  		or.b	d1,1(a0)
000155DA 6000 FEC6                  		bra.w	SAnim_Do2
000155DE                            ; End of function Sonic_Animate
000155DE                            
000155DE                            ; ===========================================================================
000155DE                            SonicAniData:
000155DE                            	include "_anim\Sonic.asm"
000155DE                            ; ---------------------------------------------------------------------------
000155DE                            ; Animation script - Sonic
000155DE                            ; ---------------------------------------------------------------------------
000155DE 0000                       		dc.w SonAni_Walk-SonicAniData
000155E0 0000                       		dc.w SonAni_Run-SonicAniData
000155E2 0000                       		dc.w SonAni_Roll-SonicAniData
000155E4 0000                       		dc.w SonAni_Roll2-SonicAniData
000155E6 0000                       		dc.w SonAni_Push-SonicAniData
000155E8 0000                       		dc.w SonAni_Wait-SonicAniData
000155EA 0000                       		dc.w SonAni_Balance-SonicAniData
000155EC 0000                       		dc.w SonAni_LookUp-SonicAniData
000155EE 0000                       		dc.w SonAni_Duck-SonicAniData
000155F0 0000                       		dc.w SonAni_Warp1-SonicAniData
000155F2 0000                       		dc.w SonAni_Warp2-SonicAniData
000155F4 0000                       		dc.w SonAni_Warp3-SonicAniData
000155F6 0000                       		dc.w SonAni_Warp4-SonicAniData
000155F8 0000                       		dc.w SonAni_Stop-SonicAniData
000155FA 0000                       		dc.w SonAni_Float1-SonicAniData
000155FC 0000                       		dc.w SonAni_Float2-SonicAniData
000155FE 0000                       		dc.w SonAni_Spring-SonicAniData
00015600 0000                       		dc.w SonAni_LZHang-SonicAniData
00015602 0000                       		dc.w SonAni_Leap1-SonicAniData
00015604 0000                       		dc.w SonAni_Leap2-SonicAniData
00015606 0000                       		dc.w SonAni_Surf-SonicAniData
00015608 0000                       		dc.w SonAni_Bubble-SonicAniData
0001560A 0000                       		dc.w SonAni_Death1-SonicAniData
0001560C 0000                       		dc.w SonAni_Drown-SonicAniData
0001560E 0000                       		dc.w SonAni_Death2-SonicAniData
00015610 0000                       		dc.w SonAni_Shrink-SonicAniData
00015612 0000                       		dc.w SonAni_Hurt-SonicAniData
00015614 0000                       		dc.w SonAni_LZSlide-SonicAniData
00015616 0000                       		dc.w SonAni_Blank-SonicAniData
00015618 0000                       		dc.w SonAni_Float3-SonicAniData
0001561A 0000                       		dc.w SonAni_Float4-SonicAniData
0001561C FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
00015624 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
0001562C FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00015634 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
0001563C FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00015644 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
0001565A 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
0001565E 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00015662 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00015666 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
0001566A 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
0001566E 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00015672 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00015676 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
0001567A 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
0001567E 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00015686 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
0001568A 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
0001568E 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00015694 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
0001569A 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
0001569E 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
000156A6 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
000156AA 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
000156AE 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
000156B2 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
000156BC 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
000156C0 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
000156C4 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
000156C8 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
000156D0 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
000156D4                            		even
000156D4                            		even
000156D4                            
000156D4                            ; ---------------------------------------------------------------------------
000156D4                            ; Sonic	pattern	loading	subroutine
000156D4                            ; ---------------------------------------------------------------------------
000156D4                            
000156D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156D4                            
000156D4                            
000156D4                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
000156D4 7000                       		moveq	#0,d0
000156D6 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000156DA B038 F766                  		cmp.b	($FFFFF766).w,d0
000156DE 6700 0000                  		beq.w	locret_13C96
000156E2 11C0 F766                  		move.b	d0,($FFFFF766).w
000156E6 45F9 0000 0000             		lea	(SonicDynPLC).l,a2	
000156EC D040                       		add.w	d0,d0
000156EE D4F2 0000                  		adda.w	(a2,d0.w),a2
000156F2 7A00                       		moveq	#0,d5
000156F4 1A1A                       		move.b	(a2)+,d5
000156F6 5345                       		subq.w	#1,d5
000156F8 6B00                       		bmi.s	locret_13C96
000156FA 383C F000                  		move.w	#$F000,d4
000156FE 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00015704                            
00015704                            SPLC_ReadEntry:
00015704 7200                       		moveq	#0,d1
00015706 121A                       		move.b	(a2)+,d1
00015708 E149                       		lsl.w	#8,d1
0001570A 121A                       		move.b	(a2)+,d1
0001570C 3601                       		move.w	d1,d3
0001570E E04B                       		lsr.w	#8,d3
00015710 0243 00F0                  		andi.w	#$F0,d3
00015714 0643 0010                  		addi.w	#$10,d3
00015718 0241 0FFF                  		andi.w	#$FFF,d1
0001571C EB89                       		lsl.l	#5,d1
0001571E D286                       		add.l	d6,d1
00015720 3404                       		move.w	d4,d2
00015722 D843                       		add.w	d3,d4
00015724 D843                       		add.w	d3,d4
00015726 4EB9 0000 4AB2             		jsr	(QueueDMATransfer).l
0001572C 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00015730                             
00015730                            locret_13C96:
00015730 4E75                       		rts	
00015732                            ; End of function LoadSonicDynPLC
00015732                            
00015732                            ; ===========================================================================
00015732                            ; ---------------------------------------------------------------------------
00015732                            ; Object 02 - Sonime
00015732                            ; ---------------------------------------------------------------------------
00015732                            
00015732                            Obj02:
00015732 7000                       		moveq	#0,d0
00015734 41F8 F5C0                  		lea	(SonimeSST).w,a0
00015738 1028 0004                  		move.b	sonime_routine(a0),d0
0001573C 323B 0000                  		move.w	Obj02_Index(pc,d0.w),d1
00015740 4EFB 1000                  		jmp	Obj02_Index(pc,d1.w)
00015744                            ; ===========================================================================
00015744 0000                       Obj02_Index:	dc.w Obj02_Init-Obj02_Index
00015746 0000                       		dc.w Obj02_MoveIn-Obj02_Index
00015748 0000                       		dc.w Obj02_Animate-Obj02_Index
0001574A                            ; ===========================================================================
0001574A                            
0001574A                            Obj02_Init:				; XREF: Obj0A_Index
0001574A 5428 0004                  		addq.b	#2,sonime_routine(a0)
0001574E 223C 0000 0000             		move.l #Art_Sonime_Torso,d1
00015754 343C F400                  		move.w #(torsoart*$20),d2
00015758 363C 00C0                  		move.w #$C0,d3
0001575C 4EB9 0000 4AB2             		jsr (QueueDMATransfer).l
00015762 223C 0000 0000             		move.l #Art_Sonime_Head,d1
00015768 343C F580                  		move.w #(headart*$20),d2
0001576C 363C 0140                  		move.w #$140,d3
00015770 4EB9 0000 4AB2             		jsr (QueueDMATransfer).l
00015776 223C 0000 0000             		move.l #Art_Sonime_Hair,d1
0001577C 343C F300                  		move.w #(hairart*$20),d2
00015780 363C 0080                  		move.w #$80,d3
00015784 4EB9 0000 4AB2             		jsr (QueueDMATransfer).l
0001578A 117C 0030 0017             		move.b	#$30,sonime_movein(a0)
00015790 31FC 0200 F5E0             		move.w	#$200,(SonimeSST+sonime_pausetimer).w
00015796                            
00015796                            Obj02_MoveIn:
00015796 5528 0017                  		subq.b	#2,sonime_movein(a0)
0001579A 1028 0017                  		move.b	sonime_movein(a0),d0
0001579E 1140 0002                  		move.b	d0,sonime_headx(a0)
000157A2 1140 0016                  		move.b	d0,sonime_torsox(a0)
000157A6 1140 0009                  		move.b	d0,sonime_hairx(a0)
000157AA 4A00                       		tst.b	d0
000157AC 6600 0000                  		bne.w	Obj02_Display
000157B0 5428 0004                  		addq.b	#2,sonime_routine(a0)
000157B4                            
000157B4                            Obj02_Animate:
000157B4 5350                       		subi.w	#1,sonime_headtimer(a0)
000157B6 6A00 0000                  		bpl.w	Obj02_Face
000157BA 4EB8 29D0                  		jsr	RandomNumber
000157BE 0240 003F                  		andi.w	#$3F,d0
000157C2 0640 0080                  		addi.w	#$80,d0
000157C6 3080                       		move.w	d0,sonime_headtimer(a0)
000157C8 4EB8 29D0                  		jsr	RandomNumber
000157CC 0240 0006                  		andi.w	#6,d0
000157D0 303B 0000                  		move.w	Obj02_HeadIndex(pc,d0.w),d0
000157D4 4EFB 0000                  		jmp	Obj02_HeadIndex(pc,d0.w)
000157D8                            
000157D8                            ; ===========================================================================
000157D8 0000                       Obj02_HeadIndex:	dc.w Obj02_Up-Obj02_HeadIndex
000157DA 0000                       		dc.w Obj02_Down-Obj02_HeadIndex
000157DC 0000                       		dc.w Obj02_Left-Obj02_HeadIndex
000157DE 0000                       		dc.w Obj02_Right-Obj02_HeadIndex
000157E0                            ; ===========================================================================
000157E0                            
000157E0                            Obj02_Up:
000157E0 4A28 0003                  		tst.b	sonime_heady(a0)
000157E4 6D00                       		blt.s	Obj02_Down
000157E6 5328 0003                  		subi.b	#1,sonime_heady(a0)
000157EA 6000                       		bra.s	Obj02_Face
000157EC                            
000157EC                            Obj02_Down:
000157EC 4A28 0003                  		tst.b	sonime_heady(a0)
000157F0 6EEE                       		bgt.s	Obj02_Up
000157F2 5228 0003                  		addi.b	#1,sonime_heady(a0)
000157F6 6000                       		bra.s	Obj02_Face
000157F8                            
000157F8                            Obj02_Left:
000157F8 4A28 0002                  		tst.b	sonime_headx(a0)
000157FC 6D00                       		blt.s	Obj02_Right
000157FE 5328 0002                  		subi.b	#1,sonime_headx(a0)
00015802 6000                       		bra.s	Obj02_Face
00015804                            
00015804                            Obj02_Right:
00015804 4A28 0002                  		tst.b	sonime_headx(a0)
00015808 6EEE                       		bgt.s	Obj02_Left
0001580A 5228 0002                  		addi.b	#1,sonime_headx(a0)
0001580E                            
0001580E                            Obj02_Face:
0001580E 4A38 FE12                  		tst.b	($FFFFFE12).w
00015812 6700 0000                  		beq.w	@NoWait
00015816 0C28 0001 000E             		cmpi.b	#face_blink,sonime_face(a0)
0001581C 6700                       		beq.s	@UnBlink
0001581E 5368 0010                  		subi.w	#1,sonime_facetimer(a0)
00015822 6A00 0000                  		bpl.w	@NoWait
00015826 317C 0003 0010             		move.w	#3,sonime_facetimer(a0)
0001582C 117C 0001 000E             		move.b	#face_blink,sonime_face(a0)
00015832 6000 0000                  		bra.w	@NoWait
00015836                            
00015836                            	@UnBlink:
00015836 5368 0010                  		subi.w	#1,sonime_facetimer(a0)
0001583A 6A00 0000                  		bpl.w	@NoWait
0001583E 117C 0004 000E             		move.b	#face_neutralr,sonime_face(a0)
00015844 4EB8 29D0                  		jsr	RandomNumber
00015848 0240 003F                  		andi.w	#$3F,d0
0001584C 0640 00B0                  		addi.w	#$B0,d0
00015850 3140 0010                  		move.w	d0,sonime_facetimer(a0)
00015854 4EB8 29D0                  		jsr	RandomNumber
00015858 0200 000F                  		andi.b	#$F,d0
0001585C 4A00                       		tst.b	d0
0001585E 6700                       		beq.s	@NoBlink
00015860 117C 0003 000E             		move.b	#face_neutralm,sonime_face(a0)
00015866 0C00 0001                  		cmpi.b	#1,d0
0001586A 6700                       		beq.s	@NoBlink
0001586C 117C 0002 000E             		move.b	#face_neutrallm,sonime_face(a0)
00015872 0C00 0002                  		cmpi.b	#2,d0
00015876 6700                       		beq.s	@NoBlink
00015878 117C 0000 000E             		move.b	#face_neutrall,sonime_face(a0)
0001587E                            
0001587E                            	@NoBlink:
0001587E 0C38 0005 D01C             		cmpi.b	#5,($FFFFD01C).w
00015884 6600                       		bne.s	@NoWait
00015886 0C38 000F D01B             		cmpi.b	#$F,($FFFFD01B).w
0001588C 6500                       		bcs.s	@NoWait
0001588E 117C 000B 000E             		move.b	#face_impatient,sonime_face(a0)
00015894 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeImpatient		
000158FA                            
000158FA                            	@NoWait:
000158FA 0C78 0950 D010             		cmpi.w	#$950,($FFFFD010).w
00015900 6D00                       		blt.s	@TooSlow
00015902 117C 0007 000E             		move.b	#face_happy,sonime_face(a0)
00015908 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeSpeed
0001596E                            
0001596E                            	@TooSlow:
0001596E 0C78 F6B0 D010             		cmpi.w	#-$950,($FFFFD010).w
00015974 6E00                       		bgt.s	@TooSlow2
00015976 117C 0007 000E             		move.b	#face_happy,sonime_face(a0)	
0001597C 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeSpeed
000159E2                            		
000159E2                            	@TooSlow2:
000159E2 7800                       		moveq	#0,d4
000159E4 1828 000E                  		move.b	sonime_face(a0),d4
000159E8 B828 000F                  		cmp.b	sonime_faceold(a0),d4
000159EC 6700                       		beq.s	Obj02_Ear
000159EE 1144 000F                  		move.b	d4,sonime_faceold(a0)
000159F2 ED4C                       		lsl.w	#6,d4
000159F4 3A04                       		move.w	d4,d5
000159F6 DA45                       		add.w	d5,d5
000159F8 D845                       		add.w	d5,d4
000159FA 223C 0000 0000             		move.l #Art_Sonime_Faces,d1
00015A00 D244                       		add.w	d4,d1
00015A02 343C F5C0                  		move.w #(headart*$20+$40),d2
00015A06 363C 0020                  		move.w #$20,d3
00015A0A 4EB9 0000 4AB2             		jsr (QueueDMATransfer).l
00015A10 223C 0000 0000             		move.l #(Art_Sonime_Faces+$40),d1
00015A16 D244                       		add.w	d4,d1
00015A18 343C F640                  		move.w #(headart*$20+$C0),d2
00015A1C 363C 0020                  		move.w #$20,d3
00015A20 4EB9 0000 4AB2             		jsr (QueueDMATransfer).l
00015A26 223C 0000 0000             		move.l #(Art_Sonime_Faces+$80),d1
00015A2C D244                       		add.w	d4,d1
00015A2E 343C F6C0                  		move.w #(headart*$20+$140),d2
00015A32 363C 0020                  		move.w #$20,d3
00015A36 4EB9 0000 4AB2             		jsr (QueueDMATransfer).l
00015A3C                            
00015A3C                            Obj02_Ear:
00015A3C 4A28 0012                  		tst.b	sonime_ear(a0)
00015A40 6600                       		bne.s	@UnTwitch
00015A42 5368 0014                  		subi.w	#1,sonime_eartimer(a0)
00015A46 6A00                       		bpl.s	@NoTwitch
00015A48 317C 000F 0014             		move.w	#$F,sonime_eartimer(a0)
00015A4E 4EB8 29D0                  		jsr	RandomNumber
00015A52 0200 0001                  		andi.b	#1,d0
00015A56 5200                       		addq.b	#1,d0
00015A58 1140 0012                  		move.b	d0,sonime_ear(a0)
00015A5C 6000                       		bra.s	@NoTwitch
00015A5E                            
00015A5E                            	@UnTwitch:
00015A5E 5368 0014                  		subi.w	#1,sonime_eartimer(a0)
00015A62 6A00                       		bpl.s	@NoTwitch
00015A64 117C 0000 0012             		move.b	#0,sonime_ear(a0)
00015A6A 4EB8 29D0                  		jsr	RandomNumber
00015A6E 0240 007F                  		andi.w	#$7F,d0
00015A72 0640 0100                  		addi.w	#$100,d0
00015A76 3140 0014                  		move.w	d0,sonime_eartimer(a0)
00015A7A                            
00015A7A                            	@NoTwitch:
00015A7A 7800                       		moveq	#0,d4
00015A7C 1828 0012                  		move.b	sonime_ear(a0),d4
00015A80 B828 0013                  		cmp.b	sonime_earold(a0),d4
00015A84 6700                       		beq.s	Obj02_Display
00015A86 1144 0013                  		move.b	d4,sonime_earold(a0)
00015A8A EB0C                       		lsl.b	#5,d4
00015A8C 0204 0020                  		andi.b	#$20,d4
00015A90 223C 0000 0000             		move.l #Art_Sonime_LeftEar,d1
00015A96 D284                       		add.l	d4,d1
00015A98 343C F580                  		move.w #(headart*$20),d2
00015A9C 363C 0010                  		move.w #$10,d3
00015AA0 4EB9 0000 4AB2             		jsr (QueueDMATransfer).l
00015AA6 7800                       		moveq	#0,d4
00015AA8 1828 0012                  		move.b	sonime_ear(a0),d4
00015AAC EB0C                       		lsl.b	#5,d4
00015AAE 0204 0040                  		andi.b	#$40,d4
00015AB2 223C 0000 0000             		move.l #Art_Sonime_RightEar,d1
00015AB8 D284                       		add.l	d4,d1
00015ABA 343C F680                  		move.w #(headart*$20+$100),d2
00015ABE 363C 0020                  		move.w #$20,d3
00015AC2 4EB9 0000 4AB2             		jsr (QueueDMATransfer).l
00015AC8                            
00015AC8                            Obj02_Display:
00015AC8 7200                       		moveq	#0,d1
00015ACA 7400                       		moveq	#0,d2
00015ACC 7600                       		moveq	#0,d3
00015ACE 7800                       		moveq	#0,d4
00015AD0 7A00                       		moveq	#0,d5
00015AD2 1628 0002                  		move.b	sonime_headx(a0),d3	; set X pos
00015AD6 1428 0003                  		move.b	sonime_heady(a0),d2	; set Y pos
00015ADA 4883                       		ext.w	d3
00015ADC 4882                       		ext.w	d2
00015ADE 0643 01A0                  		addi.w	#$1A0,d3
00015AE2 0642 0140                  		addi.w	#$140,d2
00015AE6 43F9 0000 0000             		lea	(Map_sonime_head).l,a1
00015AEC 367C 87AC                  		movea.w	#($8000+headart),a3	; set art tile and flags
00015AF0 D241                       		add.w	d1,d1
00015AF2 D2F1 1000                  		adda.w	(a1,d1.w),a1
00015AF6 1219                       		move.b	(a1)+,d1
00015AF8 5301                       		subq.b	#1,d1
00015AFA 6B00                       		bmi.s	@nextspr
00015AFC 6100 911C                  		bsr.w	DrawSprite_Loop
00015B00                            
00015B00                            	@nextspr:
00015B00 7200                       		moveq	#0,d1
00015B02 7600                       		moveq	#0,d3
00015B04 1628 0016                  		move.b	sonime_torsox(a0),d3
00015B08 0643 01A0                  		add.w	#$1A0,d3	; set X pos
00015B0C 343C 0154                  		move.w	#$154,d2	; set Y pos
00015B10 43F9 0000 0000             		lea	(Map_sonime_torso).l,a1
00015B16 367C 87A0                  		movea.w	#($8000+torsoart),a3	; set art tile and flags
00015B1A D241                       		add.w	d1,d1
00015B1C D2F1 1000                  		adda.w	(a1,d1.w),a1
00015B20 1219                       		move.b	(a1)+,d1
00015B22 5301                       		subq.b	#1,d1
00015B24 6B00                       		bmi.s	@nextspr2
00015B26 6100 90F2                  		bsr.w	DrawSprite_Loop
00015B2A                            
00015B2A                            	@nextspr2:
00015B2A 7200                       		moveq	#0,d1
00015B2C 7400                       		moveq	#0,d2
00015B2E 7600                       		moveq	#0,d3
00015B30 1628 0009                  		move.b	sonime_hairx(a0),d3	; set X pos
00015B34 1428 000D                  		move.b	sonime_hairy(a0),d2	; set Y pos
00015B38 4883                       		ext.w	d3
00015B3A 4882                       		ext.w	d2
00015B3C 0643 01A0                  		addi.w	#$1A0,d3
00015B40 0642 0153                  		addi.w	#$153,d2
00015B44 1168 0007 0009             		move.b	sonime_headx3(a0),sonime_hairx(a0)
00015B4A 1168 000B 000D             		move.b	sonime_heady3(a0),sonime_hairy(a0)
00015B50 1168 0006 0007             		move.b	sonime_headx2(a0),sonime_headx3(a0)
00015B56 1168 000A 000B             		move.b	sonime_heady2(a0),sonime_heady3(a0)
00015B5C 1168 0002 0006             		move.b	sonime_headx(a0),sonime_headx2(a0)
00015B62 1168 0003 000A             		move.b	sonime_heady(a0),sonime_heady2(a0)
00015B68 43F9 0000 0000             		lea	(Map_sonime_hair).l,a1
00015B6E 367C 8798                  		movea.w	#($8000+hairart),a3	; set art tile and flags
00015B72 D241                       		add.w	d1,d1
00015B74 D2F1 1000                  		adda.w	(a1,d1.w),a1
00015B78 1219                       		move.b	(a1)+,d1
00015B7A 5301                       		subq.b	#1,d1
00015B7C 6B00                       		bmi.s	Obj02_Done
00015B7E 6100 909A                  		bsr.w	DrawSprite_Loop
00015B82                            
00015B82                            Obj02_Done:		
00015B82 4E75                       		rts	
00015B84                            
00015B84                            ; ---------------------------------------------------------------------------
00015B84                            ; Sprite mappings - sonime
00015B84                            ; ---------------------------------------------------------------------------
00015B84                            Map_sonime_torso:
00015B84                            	include "_maps\sonime_torso.asm"
00015B84                            ; ================================================================================
00015B84                            ; Sprite Mappings - generated by Flex 2 Fri Dec 18 2020 22:06:55 GMT-0500 (Eastern Standard Time)
00015B84                            ; ================================================================================
00015B84                            
00015B84                            DATAUI6DX8OCWY:
00015B84 0000                       	dc.w DATAUI6DX8OCWY_0-DATAUI6DX8OCWY
00015B86 01                         DATAUI6DX8OCWY_0: dc.b $1
00015B87 F40E 0000 F0               	dc.b $F4, $E, $0, $0, $F0
00015B8C                            	even
00015B8C                            	even
00015B8C                            
00015B8C                            Map_sonime_head:
00015B8C                            	include "_maps\sonime_head.asm"
00015B8C                            ; ================================================================================
00015B8C                            ; Sprite Mappings - generated by Flex 2 Fri Dec 18 2020 22:05:21 GMT-0500 (Eastern Standard Time)
00015B8C                            ; ================================================================================
00015B8C                            
00015B8C                            DATAYDZD849MEMA:
00015B8C 0000                       	dc.w DATAYDZD849MEMA_0-DATAYDZD849MEMA
00015B8E 03                         DATAYDZD849MEMA_0: dc.b $3
00015B8F E80F 0000 F0               	dc.b $E8, $F, $0, $0, $F0
00015B94 0808 0010 F0               	dc.b $8, $8, $0, $10, $F0
00015B99 1000 0013 00               	dc.b $10, $0, $0, $13, $0
00015B9E                            	even
00015B9E                            	even
00015B9E                            
00015B9E                            Map_sonime_hair:
00015B9E                            	include "_maps\sonime_hair.asm"
00015B9E                            ; ================================================================================
00015B9E                            ; Sprite Mappings - generated by Flex 2 Sun Dec 20 2020 17:48:20 GMT-0500 (Eastern Standard Time)
00015B9E                            ; ================================================================================
00015B9E                            
00015B9E                            DATAQZ9CZ11E8T:
00015B9E 0000                       	dc.w DATAQZ9CZ11E8T_0-DATAQZ9CZ11E8T
00015BA0 03                         DATAQZ9CZ11E8T_0: dc.b $3
00015BA1 F40C 0000 F0               	dc.b $F4, $C, $0, $0, $F0
00015BA6 FC01 0004 F0               	dc.b $FC, $1, $0, $4, $F0
00015BAB FC01 0006 08               	dc.b $FC, $1, $0, $6, $8
00015BB0                            	even
00015BB0                            	even
00015BB0                            
00015BB0                            ; ===========================================================================
00015BB0                            ; ---------------------------------------------------------------------------
00015BB0                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00015BB0                            ; ---------------------------------------------------------------------------
00015BB0                            
00015BB0                            Obj0A:					; XREF: Obj_Index
00015BB0 7000                       		moveq	#0,d0
00015BB2 1028 0024                  		move.b	$24(a0),d0
00015BB6 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00015BBA 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00015BBE                            ; ===========================================================================
00015BBE 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00015BC2 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00015BC6 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00015BCA 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00015BCE 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00015BD0                            ; ===========================================================================
00015BD0                            
00015BD0                            Obj0A_Main:				; XREF: Obj0A_Index
00015BD0 5428 0024                  		addq.b	#2,$24(a0)
00015BD4 217C 0001 43BA 0004        		move.l	#Map_obj64,4(a0)
00015BDC 317C 8348 0002             		move.w	#$8348,2(a0)
00015BE2 117C 0084 0001             		move.b	#$84,1(a0)
00015BE8 117C 0010 0019             		move.b	#$10,$19(a0)
00015BEE 117C 0001 0018             		move.b	#1,$18(a0)
00015BF4 1028 0028                  		move.b	$28(a0),d0
00015BF8 6A00                       		bpl.s	loc_13D00
00015BFA 5028 0024                  		addq.b	#8,$24(a0)
00015BFE 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00015C06 317C 0440 0002             		move.w	#$440,2(a0)
00015C0C 0240 007F                  		andi.w	#$7F,d0
00015C10 1140 0033                  		move.b	d0,$33(a0)
00015C14 6000 0000                  		bra.w	Obj0A_Countdown
00015C18                            ; ===========================================================================
00015C18                            
00015C18                            loc_13D00:
00015C18 1140 001C                  		move.b	d0,$1C(a0)
00015C1C 3168 0008 0030             		move.w	8(a0),$30(a0)
00015C22 317C FF78 0012             		move.w	#-$88,$12(a0)
00015C28                            
00015C28                            Obj0A_Animate:				; XREF: Obj0A_Index
00015C28 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015C2E 4EB9 0000 B9CA             		jsr	AnimateSprite
00015C34                            
00015C34                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00015C34 3038 F646                  		move.w	($FFFFF646).w,d0
00015C38 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00015C3C 6400                       		bcc.s	Obj0A_ChkDel	; if not, branch
00015C3E 3038 F60E                  		move.w	(v_pocketbottom).w,d0
00015C42 B068 000C                  		cmp.w	$C(a0),d0
00015C46 6500                       		bcs.s	Obj0A_Wobble
00015C48 3028 0008                  		move.w	8(a0),d0
00015C4C 9078 F610                  		sub.w	(v_pocketx).w,d0
00015C50 0640 0060                  		addi.w	#$60,d0
00015C54 6B00                       		bmi.s	Obj0A_Wobble
00015C56 0C40 00C0                  		cmpi.w	#$C0,d0
00015C5A 6400                       		bcc.s	Obj0A_Wobble
00015C5C                            
00015C5C                            Obj0A_ChkDel:
00015C5C 117C 0006 0024             		move.b	#6,$24(a0)
00015C62 5E28 001C                  		addq.b	#7,$1C(a0)
00015C66 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00015C6C 6700                       		beq.s	Obj0A_Display
00015C6E 6000                       		bra.s	Obj0A_Display
00015C70                            ; ===========================================================================
00015C70                            
00015C70                            Obj0A_Wobble:
00015C70 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00015C74 6700                       		beq.s	loc_13D44
00015C76 5868 0030                  		addq.w	#4,$30(a0)
00015C7A                            
00015C7A                            loc_13D44:
00015C7A 1028 0026                  		move.b	$26(a0),d0
00015C7E 5228 0026                  		addq.b	#1,$26(a0)
00015C82 0240 007F                  		andi.w	#$7F,d0
00015C86 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00015C8C 1031 0000                  		move.b	(a1,d0.w),d0
00015C90 4880                       		ext.w	d0
00015C92 D068 0030                  		add.w	$30(a0),d0
00015C96 3140 0008                  		move.w	d0,8(a0)
00015C9A 6100                       		bsr.s	Obj0A_ShowNumber
00015C9C 4EBA 8CB2                  		jsr	SpeedToPos
00015CA0 4A28 0001                  		tst.b	1(a0)
00015CA4 6A00                       		bpl.s	Obj0A_Delete
00015CA6 4EFA 8CC2                  		jmp	DisplaySprite
00015CAA                            ; ===========================================================================
00015CAA                            
00015CAA                            Obj0A_Delete:
00015CAA 4EFA 8D0E                  		jmp	DeleteObject
00015CAE                            ; ===========================================================================
00015CAE                            
00015CAE                            Obj0A_Display:				; XREF: Obj0A_Index
00015CAE 6100                       		bsr.s	Obj0A_ShowNumber
00015CB0 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015CB6 4EB9 0000 B9CA             		jsr	AnimateSprite
00015CBC 4EFA 8CAC                  		jmp	DisplaySprite
00015CC0                            ; ===========================================================================
00015CC0                            
00015CC0                            Obj0A_Delete2:				; XREF: Obj0A_Index
00015CC0 4EFA 8CF8                  		jmp	DeleteObject
00015CC4                            ; ===========================================================================
00015CC4                            
00015CC4                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00015CC4 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00015CCA 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00015CCC 5368 0038                  		subq.w	#1,$38(a0)
00015CD0 6600                       		bne.s	Obj0A_Display2
00015CD2 117C 000E 0024             		move.b	#$E,$24(a0)
00015CD8 5E28 001C                  		addq.b	#7,$1C(a0)
00015CDC 60D0                       		bra.s	Obj0A_Display
00015CDE                            ; ===========================================================================
00015CDE                            
00015CDE                            Obj0A_Display2:
00015CDE 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015CE4 4EB9 0000 B9CA             		jsr	AnimateSprite
00015CEA 4A28 0001                  		tst.b	1(a0)
00015CEE 6A00                       		bpl.s	Obj0A_Delete3
00015CF0 4EFA 8C78                  		jmp	DisplaySprite
00015CF4                            ; ===========================================================================
00015CF4                            
00015CF4                            Obj0A_Delete3:
00015CF4 4EFA 8CC4                  		jmp	DeleteObject
00015CF8                            ; ===========================================================================
00015CF8                            
00015CF8                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00015CF8 4A68 0038                  		tst.w	$38(a0)
00015CFC 6700                       		beq.s	locret_13E1A
00015CFE 5368 0038                  		subq.w	#1,$38(a0)
00015D02 6600                       		bne.s	locret_13E1A
00015D04 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00015D0A 6400                       		bcc.s	locret_13E1A
00015D0C 317C 000F 0038             		move.w	#$F,$38(a0)
00015D12 4268 0012                  		clr.w	$12(a0)
00015D16 117C 0080 0001             		move.b	#$80,1(a0)
00015D1C 3028 0008                  		move.w	8(a0),d0
00015D20 9078 F700                  		sub.w	($FFFFF700).w,d0
00015D24 0640 0080                  		addi.w	#$80,d0
00015D28 3140 0008                  		move.w	d0,8(a0)
00015D2C 3028 000C                  		move.w	$C(a0),d0
00015D30 9078 F704                  		sub.w	($FFFFF704).w,d0
00015D34 0640 0080                  		addi.w	#$80,d0
00015D38 3140 000A                  		move.w	d0,$A(a0)
00015D3C 117C 000C 0024             		move.b	#$C,$24(a0)
00015D42                            
00015D42                            locret_13E1A:
00015D42 4E75                       		rts	
00015D44                            ; ===========================================================================
00015D44                            Obj0A_WobbleData:
00015D44 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00015D55 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00015D66 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00015D77 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00015D87 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00015D94 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015DA1 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015DAE FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015DBB FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00015DC4 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00015DD5 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00015DE6 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00015DF7 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00015E07 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00015E14 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015E21 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015E2E FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015E3B FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00015E44                            ;===========================================================================
00015E44                            
00015E44                            Obj0A_Countdown:			; XREF: Obj0A_Index
00015E44 4A68 002C                  		tst.w	$2C(a0)
00015E48 6600 0000                  		bne.w	loc_13F86
00015E4C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00015E52 6400 0000                  		bcc.w	locret_1408C
00015E56 0838 0006 D022             		btst	#6,($FFFFD022).w
00015E5C 6700 0000                  		beq.w	locret_1408C
00015E60 5368 0038                  		subq.w	#1,$38(a0)
00015E64 6A00 0000                  		bpl.w	loc_13FAC
00015E68 317C 003B 0038             		move.w	#59,$38(a0)
00015E6E 317C 0001 0036             		move.w	#1,$36(a0)
00015E74 4EB9 0000 29D0             		jsr	(RandomNumber).l
00015E7A 0240 0001                  		andi.w	#1,d0
00015E7E 1140 0034                  		move.b	d0,$34(a0)
00015E82 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00015E86 0C40 0019                  		cmpi.w	#$19,d0
00015E8A 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00015E8C 0C40 0014                  		cmpi.w	#$14,d0
00015E90 6700                       		beq.s	Obj0A_WarnSound
00015E92 0C40 000F                  		cmpi.w	#$F,d0
00015E96 6700                       		beq.s	Obj0A_WarnSound
00015E98 0C40 000C                  		cmpi.w	#$C,d0
00015E9C 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00015E9E 6600                       		bne.s	loc_13F02
00015EA0 303C 0092                  		move.w	#$92,d0
00015EA4 4EB9 0000 121A             		jsr	(PlaySound).l	; play countdown music
00015EAA                            
00015EAA                            loc_13F02:
00015EAA 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00015EB0 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00015EB6 5328 0032                  		subq.b	#1,$32(a0)
00015EBA 6A00                       		bpl.s	Obj0A_ReduceAir
00015EBC 1168 0033 0032             		move.b	$33(a0),$32(a0)
00015EC2 08E8 0007 0036             		bset	#7,$36(a0)
00015EC8 6000                       		bra.s	Obj0A_ReduceAir
00015ECA                            ; ===========================================================================
00015ECA                            
00015ECA                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00015ECA 303C 00C2                  		move.w	#$C2,d0
00015ECE 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00015ED4                            
00015ED4                            Obj0A_ReduceAir:
00015ED4 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00015ED8 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00015EDC 6100 0000                  		bsr.w	ResumeMusic
00015EE0 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00015EE6 303C 00B2                  		move.w	#$B2,d0
00015EEA 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play drowning sound
00015EF0 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
00015EF6 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
00015EFC 117C 000A 0034             		move.b	#$A,$34(a0)
00015F02 317C 0001 0036             		move.w	#1,$36(a0)
00015F08 317C 0078 002C             		move.w	#$78,$2C(a0)
00015F0E 2F08                       		move.l	a0,-(sp)
00015F10 41F8 D000                  		lea	($FFFFD000).w,a0
00015F14 6100 F300                  		bsr.w	Sonic_ResetOnFloor
00015F18 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00015F1E 08E8 0001 0022             		bset	#1,$22(a0)
00015F24 08E8 0007 0002             		bset	#7,2(a0)
00015F2A 317C 0000 0012             		move.w	#0,$12(a0)
00015F30 317C 0000 0010             		move.w	#0,$10(a0)
00015F36 317C 0000 0020             		move.w	#0,$20(a0)
00015F3C 117C 000A 0024             		move.b	#$A,$24(a0)		; Force the character to drown		
00015F42 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00015F48 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w	; Stop the timer immediately		
00015F4E 205F                       		movea.l	(sp)+,a0
00015F50 4E75                       		rts	
00015F52                            ; ===========================================================================
00015F52                            
00015F52                            loc_13F86:
00015F52 5368 002C                  		subq.w	#1,$2C(a0)
00015F56 6600                       		bne.s	loc_13FAC	; Make it jump straight to this location
00015F58 11FC 0006 D024             		move.b	#6,($FFFFD000+$24).w
00015F5E 4E75                       		rts
00015F60                            ; ===========================================================================
00015F60                            
00015F60                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00015F60 6000                       		bra.s	Obj0A_MakeItem
00015F62                            ; ===========================================================================
00015F62                            
00015F62                            loc_13FAC:
00015F62 4A68 0036                  		tst.w	$36(a0)
00015F66 6700 0000                  		beq.w	locret_1408C
00015F6A 5368 003A                  		subq.w	#1,$3A(a0)
00015F6E 6A00 0000                  		bpl.w	locret_1408C
00015F72                            
00015F72                            Obj0A_MakeItem:
00015F72 4EB9 0000 29D0             		jsr	(RandomNumber).l
00015F78 0240 000F                  		andi.w	#$F,d0
00015F7C 3140 003A                  		move.w	d0,$3A(a0)
00015F80 4EBA 913E                  		jsr	SingleObjLoad
00015F84 6600 0000                  		bne.w	locret_1408C
00015F88 12BC 000A                  		move.b	#$A,0(a1)	; load object
00015F8C 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00015F92 7006                       		moveq	#6,d0
00015F94 0838 0000 D022             		btst	#0,($FFFFD022).w
00015F9A 6700                       		beq.s	loc_13FF2
00015F9C 4440                       		neg.w	d0
00015F9E 137C 0040 0026             		move.b	#$40,$26(a1)
00015FA4                            
00015FA4                            loc_13FF2:
00015FA4 D169 0008                  		add.w	d0,8(a1)
00015FA8 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00015FAE 137C 0006 0028             		move.b	#6,$28(a1)
00015FB4 4A68 002C                  		tst.w	$2C(a0)
00015FB8 6700 0000                  		beq.w	loc_1403E
00015FBC 0268 0007 003A             		andi.w	#7,$3A(a0)
00015FC2 0668 0000 003A             		addi.w	#0,$3A(a0)
00015FC8 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015FCC 0440 000C                  		subi.w	#$C,d0
00015FD0 3340 000C                  		move.w	d0,$C(a1)
00015FD4 4EB9 0000 29D0             		jsr	(RandomNumber).l
00015FDA 1340 0026                  		move.b	d0,$26(a1)
00015FDE 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015FE2 0200 0003                  		andi.b	#3,d0
00015FE6 6600                       		bne.s	loc_14082
00015FE8 137C 000E 0028             		move.b	#$E,$28(a1)
00015FEE 6000                       		bra.s	loc_14082
00015FF0                            ; ===========================================================================
00015FF0                            
00015FF0                            loc_1403E:
00015FF0 0828 0007 0036             		btst	#7,$36(a0)
00015FF6 6700                       		beq.s	loc_14082
00015FF8 3438 FE14                  		move.w	($FFFFFE14).w,d2
00015FFC E24A                       		lsr.w	#1,d2
00015FFE 4EB9 0000 29D0             		jsr	(RandomNumber).l
00016004 0240 0003                  		andi.w	#3,d0
00016008 6600                       		bne.s	loc_1406A
0001600A 08E8 0006 0036             		bset	#6,$36(a0)
00016010 6600                       		bne.s	loc_14082
00016012 1342 0028                  		move.b	d2,$28(a1)
00016016 337C 001C 0038             		move.w	#$1C,$38(a1)
0001601C                            
0001601C                            loc_1406A:
0001601C 4A28 0034                  		tst.b	$34(a0)
00016020 6600                       		bne.s	loc_14082
00016022 08E8 0006 0036             		bset	#6,$36(a0)
00016028 6600                       		bne.s	loc_14082
0001602A 1342 0028                  		move.b	d2,$28(a1)
0001602E 337C 001C 0038             		move.w	#$1C,$38(a1)
00016034                            
00016034                            loc_14082:
00016034 5328 0034                  		subq.b	#1,$34(a0)
00016038 6A00                       		bpl.s	locret_1408C
0001603A 4268 0036                  		clr.w	$36(a0)
0001603E                            
0001603E                            locret_1408C:
0001603E 4E75                       		rts	
00016040                            
00016040                            ; ---------------------------------------------------------------------------
00016040                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00016040                            ; ---------------------------------------------------------------------------
00016040                            
00016040                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016040                            
00016040                            
00016040                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00016040 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00016046 6200                       		bhi.s	loc_140AC
00016048 303C 0082                  		move.w	#$82,d0		; play LZ music
0001604C 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	0103 (SBZ3)
00016052 6600                       		bne.s	loc_140A6
00016054 303C 0086                  		move.w	#$86,d0		; play SBZ music
00016058                            
00016058                            loc_140A6:
00016058 4EB9 0000 121A             		jsr	(PlaySound).l
0001605E 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00016064 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001606A                            
0001606A                            loc_140AC:
0001606A 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00016070 4238 D372                  		clr.b	($FFFFD372).w
00016074 4E75                       		rts	
00016076                            ; End of function ResumeMusic
00016076                            
00016076                            ; ===========================================================================
00016076                            Ani_obj0A:
00016076                            	include "_anim\obj0A.asm"
00016076                            ; ---------------------------------------------------------------------------
00016076                            ; Animation script - countdown numbers and bubbles (LZ)
00016076                            ; ---------------------------------------------------------------------------
00016076 0000                       		dc.w byte_140D6-Ani_obj0A
00016078 0000                       		dc.w byte_140E0-Ani_obj0A
0001607A 0000                       		dc.w byte_140EA-Ani_obj0A
0001607C 0000                       		dc.w byte_140F4-Ani_obj0A
0001607E 0000                       		dc.w byte_140FE-Ani_obj0A
00016080 0000                       		dc.w byte_14108-Ani_obj0A
00016082 0000                       		dc.w byte_14112-Ani_obj0A
00016084 0000                       		dc.w byte_14118-Ani_obj0A
00016086 0000                       		dc.w byte_14120-Ani_obj0A
00016088 0000                       		dc.w byte_14128-Ani_obj0A
0001608A 0000                       		dc.w byte_14130-Ani_obj0A
0001608C 0000                       		dc.w byte_14138-Ani_obj0A
0001608E 0000                       		dc.w byte_14140-Ani_obj0A
00016090 0000                       		dc.w byte_14148-Ani_obj0A
00016092 0000                       		dc.w byte_1414A-Ani_obj0A
00016094 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
0001609E 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000160A8 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000160B2 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
000160BC 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
000160C6 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
000160D0 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
000160D6 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
000160DE 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
000160E6 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
000160EE 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
000160F6 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
000160FE 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00016106 0EFC                       byte_14148:	dc.b $E, $FC
00016108 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
0001610E                            		even
0001610E                            		even
0001610E                            
0001610E                            ; ---------------------------------------------------------------------------
0001610E                            ; Sprite mappings - drowning countdown numbers (LZ)
0001610E                            ; ---------------------------------------------------------------------------
0001610E                            Map_obj0A:
0001610E                            	include "_maps\obj0A.asm"
0001610E                            ; ---------------------------------------------------------------------------
0001610E                            ; Sprite mappings - drowning countdown numbers (LZ)
0001610E                            ; ---------------------------------------------------------------------------
0001610E 0000                       		dc.w byte_14152-Map_obj0A
00016110 01                         byte_14152:	dc.b 1
00016111 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00016116                            		even
00016116                            		even
00016116                            
00016116                            ; ===========================================================================
00016116                            ; ---------------------------------------------------------------------------
00016116                            ; Object 38 - shield
00016116                            ; ---------------------------------------------------------------------------
00016116                            
00016116                            Obj38: ; XREF: Obj_Index
00016116 223C 0000 0000             		move.l #UnC_Shield,d1 ; Call for Regular Shield Art
0001611C 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016120                            ; In this case, VRAM = $541*20
00016120 363C 0200                  		move.w #$200,d3
00016124 4EB9 0000 4AB2             		jsr (QueueDMATransfer).l
0001612A                            ; ---------------------------------------------------------------------------
0001612A                            
0001612A                            ShieldObj_Main:
0001612A 7000                       		moveq #0,d0
0001612C 1028 0024                  		move.b $24(a0),d0
00016130 323B 0000                  		move.w Shield_Index(pc,d0.w),d1
00016134 4EFB 1000                  		jmp Shield_Index(pc,d1.w)
00016138                            ; ===========================================================================
00016138                            Shield_Index:
00016138 0000                       		dc.w Shield_Init-Shield_Index
0001613A 0000                       		dc.w ShieldChecks-Shield_Index
0001613C                            ; ===========================================================================
0001613C                            
0001613C                            Shield_Init:
0001613C 5428 0024                  		addq.b #2,$24(a0)
00016140 217C 0000 0000 0004        		move.l #Map_Obj38, $0004(A0) ; Load Shield Map into place
00016148 117C 0004 0001             		move.b #4,1(a0)
0001614E 117C 0001 0018             		move.b #1,$18(a0)
00016154 117C 0018 0019             		move.b #$18,$19(a0)
0001615A 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016160 0838 0007 D002             		btst #7,($FFFFD002).w
00016166 6700                       		beq.s ShieldChecks
00016168 08E8 0007 0002             		bset #7,2(a0)
0001616E                            ; ---------------------------------------------------------------------------
0001616E                            
0001616E                            ShieldChecks:
0001616E 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016172 6600                       		bne.s SonicHasShield ; If so, branch to do nothing
00016174 4A38 FE2C                  		tst.b ($FFFFFE2C).w ; Test if Sonic got invisibility
00016178 6700                       		beq.s jmp_DeleteObj38 ; If so, delete object temporarily
0001617A                            
0001617A                            ShieldProperties:
0001617A 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016180 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016186 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
0001618C 43F9 0000 0000             		lea (Ani_obj38).l, a1 ; Load Animation Scripts into a1
00016192 4EB9 0000 B9CA             		jsr AnimateSprite
00016198 4EFA 87D0                  		jmp DisplaySprite
0001619C                            
0001619C                            SonicHasShield:
0001619C 4E75                       		rts
0001619E                            
0001619E                            jmp_DeleteObj38: ; loc_12648:
0001619E 4EFA 881A                  		jmp DeleteObject 
000161A2                            
000161A2                            ; ---------------------------------------------------------------------------
000161A2                            ; Object 4A - New Invincibility Object (ported from Sonic 2)
000161A2                            ; ---------------------------------------------------------------------------
000161A2                            
000161A2                            Obj4A: ; XREF: Obj_Index
000161A2 7000                       		moveq	#0,d0
000161A4 1028 0000                  		move.b	InvStars_routine(a0),d0
000161A8 323B 0000                  		move.w	InvStars_Index(pc,d0.w),d1
000161AC 4EFB 1000                  		jmp	InvStars_Index(pc,d1.w)
000161B0                            ; ===========================================================================
000161B0                            
000161B0 0000                       InvStars_Index:	dc.w Obj4A_Init-InvStars_Index
000161B2 0000                       		dc.w Obj4A_Main-InvStars_Index
000161B4 0000                       		dc.w Obj4A_SubObject-InvStars_Index
000161B6                            ; ===========================================================================
000161B6                            
000161B6                            off_1D992:
000161B6 0000 0000                  		dc.l Ani_InvStars2 ; animation script
000161BA 000B                       		dc.w $B ; speed index,sub3 anim
000161BC 0000 0000                  		dc.l Ani_InvStars3
000161C0 160D                       		dc.w $160D
000161C2 0000 0000                  		dc.l Ani_InvStars4
000161C6 2C0D                       		dc.w $2C0D
000161C8                            ; ===========================================================================	
000161C8                            
000161C8 =0000000A                  InvStars_routine: equ $A ; the same as obRoutine in other objects
000161C8 =00000030                  InvStars_AniScript: equ $30 ; animation script used by sub-objects(in main object it's clear and unused) (4 bytes)
000161C8 =00000034                  InvStars_SpeedIndex: equ $34  ; (2 bytes)
000161C8 =00000036                  InvStars_PrevPosIndex: equ $36 ; clear and unused in main object
000161C8                            
000161C8                            
000161C8                            Obj4A_Init:
000161C8 223C 0000 0000             		move.l	#ArtUnc_InvStars,d1
000161CE 343C A820                  		move.w	#$A820,d2
000161D2 363C 0200                  		move.w	#$200,d3
000161D6 4EB9 0000 4AB2             		jsr	(QueueDMATransfer).l
000161DC 7400                       		moveq	#0,d2
000161DE 45FA FFD0                  		lea	off_1D992-6(pc),a2
000161E2 43D0                       		lea	(a0),a1
000161E4 7203                       		moveq	#3,d1
000161E6                            LoadStarsObject:	
000161E6 1290                       		move.b	(a0),(a1) ; load obj35
000161E8 137C 0004 000A             		move.b	#4,InvStars_routine(a1)		; => @SubObject
000161EE 237C 0000 0000 0004        		move.l	#Map_InvStars,$4(a1)
000161F6 337C 0541 0002             		move.w	#$541,$2(a1)
000161FC 137C 0044 0001             		move.b  #%001000100,1(a1)
00016202 137C 0010 000E             		move.b	#$10,mainspr_width(a1)
00016208 137C 0002 000F             		move.b	#2,mainspr_childsprites(a1)
0001620E 1342 0036                  		move.b	d2,InvStars_PrevPosIndex(a1)
00016212 5242                       		addq.w	#1,d2
00016214 235A 0030                  		move.l	(a2)+,InvStars_AniScript(a1)
00016218 335A 0034                  		move.w	(a2)+,InvStars_SpeedIndex(a1)
0001621C 43E9 0040                  		lea	$40(a1),a1 ; a1=object
00016220 51C9 FFC4                  		dbf	d1,LoadStarsObject
00016224                            
00016224 117C 0002 000A             		move.b	#2,InvStars_routine(a0)		; => @MainObject
0001622A 117C 0004 0034             		move.b	#4,InvStars_SpeedIndex(a0)
00016230                            
00016230                            Obj4A_Main:
00016230 43F8 D000                  		lea ($FFFFD000).w,a1 ; a1=character
00016234 4A38 FE2D                  		tst.b   ($FFFFFE2D).w
00016238 6700 8780                  		beq.w	DeleteObject
0001623C 3029 0008                  		move.w	8(a1),d0
00016240 3140 0008                  		move.w	d0,8(a0)
00016244 3229 000C                  		move.w	$C(a1),d1
00016248 3141 000C                  		move.w	d1,$C(a0)
0001624C 45E8 0010                  		lea	sub2_x_pos(a0),a2
00016250 47F9 0000 0000             		lea	Ani_InvStars1,a3
00016256 7A00                       		moveq	#0,d5
00016258                            
00016258                            Obj4A_GetFrame:
00016258 3428 0038                  		move.w	$38(a0),d2
0001625C 1A33 2000                  		move.b	(a3,d2.w),d5
00016260 6A00                       		bpl.s	Obj4A_SetFrameandPos
00016262 4268 0038                  		clr.w	$38(a0)
00016266 60F0                       		bra.s	Obj4A_GetFrame
00016268                            ; ===========================================================================
00016268                            
00016268                            Obj4A_SetFrameandPos:
00016268 5268 0038                  		addq.w	#1,$38(a0)
0001626C 4DF9 0000 0000             		lea	InvStars_Speeds,a6
00016272 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
00016276 4EB9 0000 0000             		jsr	Obj4A_Display2
0001627C 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
0001627E 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
00016280 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
00016282 0646 0020                  		addi.w	#$20,d6
00016286 4EB9 0000 0000             		jsr	Obj4A_Display2
0001628C 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
0001628E 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
00016290 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
00016292 7012                       		moveq	#$12,d0
00016294 0829 0000 0022             		btst	#0,$22(a1)
0001629A 6700                       		beq.s	Obj4A_Display
0001629C 4440                       		neg.w	d0
0001629E                            
0001629E                            Obj4A_Display:
0001629E D128 0034                  		add.b	d0,InvStars_SpeedIndex(a0)
000162A2 303C 0080                  		move.w	#(1*$80),d0
000162A6 6000 86FE                  		bra.w	DisplaySprite3
000162AA                            ; ===========================================================================
000162AA                            
000162AA                            Obj4A_SubObject:
000162AA 43F8 D000                  		lea ($FFFFD000).w,a1 ; a1=character
000162AE 4A38 FE2D                  		tst.b   ($FFFFFE2D).w
000162B2 6700 8706                  		beq.w	DeleteObject
000162B6 4BF8 F7A8                  		lea	($FFFFF7A8).w,a5
000162BA 4DF8 CB00                  		lea	($FFFFCB00).w,a6
000162BE                            	
000162BE                            @getPosition_sub:
000162BE 1228 0036                  		move.b	InvStars_PrevPosIndex(a0),d1
000162C2 E509                       		lsl.b	#2,d1
000162C4 3401                       		move.w	d1,d2
000162C6 D241                       		add.w	d1,d1
000162C8 D242                       		add.w	d2,d1 
000162CA 3015                       		move.w	(a5),d0
000162CC 9001                       		sub.b	d1,d0
000162CE 45F6 0000                  		lea	(a6,d0.w),a2
000162D2 301A                       		move.w	(a2)+,d0
000162D4 321A                       		move.w	(a2)+,d1
000162D6 3140 0008                  		move.w	d0,8(a0)
000162DA 3141 000C                  		move.w	d1,$C(a0)
000162DE 45E8 0010                  		lea	sub2_x_pos(a0),a2
000162E2 2668 0030                  		movea.l	InvStars_AniScript(a0),a3
000162E6                            
000162E6                            Obj4A_GetSubFrame:
000162E6 3428 0038                  		move.w	$38(a0),d2
000162EA 1A33 2000                  		move.b	(a3,d2.w),d5
000162EE 6A00                       		bpl.s	Obj4A_SetSubFrameandPos
000162F0 4268 0038                  		clr.w	$38(a0)
000162F4 60F0                       		bra.s	Obj4A_GetSubFrame
000162F6                            ; ===========================================================================
000162F6                            
000162F6                            Obj4A_SetSubFrameandPos:
000162F6 4845                       		swap	d5
000162F8 D428 0035                  		add.b	$35(a0),d2
000162FC 1A33 2000                  		move.b	(a3,d2.w),d5
00016300 5268 0038                  		addq.w	#1,$38(a0)
00016304 4DFA 0000                  		lea	InvStars_Speeds(pc),a6
00016308 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
0001630C 6100                       		bsr.s	Obj4A_Display2
0001630E 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
00016310 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
00016312 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
00016314 0646 0020                  		addi.w	#$20,d6
00016318 4845                       		swap	d5
0001631A 6100                       		bsr.s	Obj4A_Display2
0001631C 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
0001631E 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
00016320 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
00016322 7002                       		moveq	#2,d0
00016324 0829 0000 0022             		btst	#0,$22(a1)
0001632A 6700                       		beq.s	loc_1DB20
0001632C 4440                       		neg.w	d0
0001632E                            
0001632E                            loc_1DB20:
0001632E D128 0034                  		add.b    d0,InvStars_SpeedIndex(a0)
00016332 303C 0080                  		move.w    #(1*$80),d0
00016336 6000 866E                  		bra.w    DisplaySprite3
0001633A                            ; ===========================================================================
0001633A                            Obj4A_Display2:
0001633A 0246 003E                  		andi.w	#$3E,d6 ; limit to 6 bits and clear first bit
0001633E 1436 6000                  		move.b	(a6,d6.w),d2 ; move x-move speed to d2
00016342 1636 6001                  		move.b	1(a6,d6.w),d3 ; move y-move speed to d3
00016346 4882                       		ext.w	d2
00016348 4883                       		ext.w	d3
0001634A D440                       		add.w	d0,d2 ; add object x position to x-move speed
0001634C D641                       		add.w	d1,d3 ; add object y position to y-move speed
0001634E 4E75                       		rts
00016350                            
00016350                            InvStars_Speeds: ; x-move speed,	y-move speed	
00016350 0F00 0F03 0E06 0D08 0B0B+  		dc.w   $F00,  $F03,  $E06,  $D08,  $B0B,  $80D,  $60E,  $30F,   $10, $FC0F, $F90E, $F70D, $F40B, $F208, $F106, $F003
00016370 F000 F0FC F1F9 F2F7 F4F4+  		dc.w  $F000, $F0FC, $F1F9, $F2F7, $F4F4, $F7F2, $F9F1, $FCF0, $FFF0,  $3F0,  $6F1,  $8F2,  $BF4,  $DF7,  $EF9,  $FFC
00016390                            
00016390                            ; ---------------------------------------------------------------------------
00016390                            ; Animation script - invincibility stars
00016390                            ; ---------------------------------------------------------------------------
00016390                            
00016390                            ; The animation script differs from the animate_sprite subroutine
00016390                            ; Every positive byte - mapping
00016390                            ; Every negative byte - loop flag 
00016390                            
00016390 0805 0706 0607 0508 0607+  Ani_InvStars1:	dc.b   8,  5,  7,  6,  6,  7,  5,  8,  6,  7,  7,  6,$FF
0001639E 00                         	even
0001639E 0807 0605 0403 0405 0607+  Ani_InvStars2:	dc.b   8,  7,  6,  5,  4,  3,  4,  5,  6,  7,$FF
000163A9 0304 0506 0708 0706 0504   		dc.b   3,  4,  5,  6,  7,  8,  7,  6,  5,  4
000163B4 00                         	even
000163B4 0807 0605 0403 0203 0405+  Ani_InvStars3:	dc.b   8,  7,  6,  5,  4,  3,  2,  3,  4,  5,  6,  7,$FF
000163C1 0203 0405 0607 0807 0605+  		dc.b   2,  3,  4,  5,  6,  7,  8,  7,  6,  5,  4,  3
000163CE 00                         	even
000163CE 0706 0504 0302 0102 0304+  Ani_InvStars4:	dc.b   7,  6,  5,  4,  3,  2,  1,  2,  3,  4,  5,  6,$FF
000163DB 0102 0304 0506 0706 0504+  		dc.b   1,  2,  3,  4,  5,  6,  7,  6,  5,  4,  3,  2
000163E8 00                         	even		
000163E8                            
000163E8                            
000163E8                            Map_InvStars:
000163E8                            	include "_maps\obj4A.asm"
000163E8                            ; ================================================================================
000163E8                            ; Sprite Mappings - generated by Flex 2 Wed Aug 11 2021 18:32:48 GMT+0100 (British Summer Time)
000163E8                            ; ================================================================================
000163E8                            
000163E8                            DATAZEB5V6JRJ3H:
000163E8 0000 0000                  	dc.w DATAZEB5V6JRJ3H_0-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_1-DATAZEB5V6JRJ3H
000163EC 0000 0000                  	dc.w DATAZEB5V6JRJ3H_2-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_3-DATAZEB5V6JRJ3H
000163F0 0000 0000                  	dc.w DATAZEB5V6JRJ3H_4-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_5-DATAZEB5V6JRJ3H
000163F4 0000 0000                  	dc.w DATAZEB5V6JRJ3H_6-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_7-DATAZEB5V6JRJ3H
000163F8 0000                       	dc.w DATAZEB5V6JRJ3H_8-DATAZEB5V6JRJ3H
000163FA 01                         DATAZEB5V6JRJ3H_0: dc.b $1
000163FB EF0F 0000 F0               	dc.b $EF, $F, $0, $0, $F0
00016400 01                         DATAZEB5V6JRJ3H_1: dc.b $1
00016401 F800 0000 FC               	dc.b $F8, $0, $0, $0, $FC
00016406 01                         DATAZEB5V6JRJ3H_2: dc.b $1
00016407 F800 0001 FC               	dc.b $F8, $0, $0, $1, $FC
0001640C 01                         DATAZEB5V6JRJ3H_3: dc.b $1
0001640D F801 0002 FC               	dc.b $F8, $1, $0, $2, $FC
00016412 01                         DATAZEB5V6JRJ3H_4: dc.b $1
00016413 F801 0004 FC               	dc.b $F8, $1, $0, $4, $FC
00016418 01                         DATAZEB5V6JRJ3H_5: dc.b $1
00016419 F801 0006 FC               	dc.b $F8, $1, $0, $6, $FC
0001641E 01                         DATAZEB5V6JRJ3H_6: dc.b $1
0001641F F805 0008 F8               	dc.b $F8, $5, $0, $8, $F8
00016424 01                         DATAZEB5V6JRJ3H_7: dc.b $1
00016425 F805 000C F8               	dc.b $F8, $5, $0, $C, $F8
0001642A 01                         DATAZEB5V6JRJ3H_8: dc.b $1
0001642B F00F 0010 F0               	dc.b $F0, $F, $0, $10, $F0
00016430                            	even
00016430                            	even
00016430                            ; ===========================================================================
00016430                            ; ---------------------------------------------------------------------------
00016430                            ; Object 08 - water splash (LZ)
00016430                            ; ---------------------------------------------------------------------------
00016430                            
00016430                            Obj08:					; XREF: Obj_Index
00016430 7000                       		moveq	#0,d0
00016432 1028 0024                  		move.b	$24(a0),d0
00016436 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
0001643A 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
0001643E                            ; ===========================================================================
0001643E 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00016440 0000                       		dc.w Obj08_Display-Obj08_Index
00016442 0000                       		dc.w Obj08_Delete-Obj08_Index
00016444                            ; ===========================================================================
00016444                            
00016444                            Obj08_Main:				; XREF: Obj08_Index
00016444 5428 0024                  		addq.b	#2,$24(a0)
00016448 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00016450 0028 0004 0001             		ori.b	#4,1(a0)
00016456 117C 0001 0018             		move.b	#1,$18(a0)
0001645C 117C 0010 0019             		move.b	#$10,$19(a0)
00016462 317C 4259 0002             		move.w	#$4259,2(a0)
00016468 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
0001646E                            
0001646E                            Obj08_Display:				; XREF: Obj08_Index
0001646E 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00016474 4A38 F64E                  		tst.b	($FFFFF64E).w
00016478 6700                       		beq.s	Obj08_Animate
0001647A 3178 F60E 000C             		move.w	(v_pocketbottom).w,$C(a0) ; copy y-position from water height
00016480                            
00016480                            Obj08_Animate:
00016480 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00016486 4EB9 0000 B9CA             		jsr	AnimateSprite
0001648C 4EFA 84DC                  		jmp	DisplaySprite
00016490                            ; ===========================================================================
00016490                            
00016490                            Obj08_Delete:				; XREF: Obj08_Index
00016490 4EFA 8528                  		jmp	DeleteObject	; delete when animation	is complete
00016494                            ; ===========================================================================
00016494                            Ani_obj38:
00016494                            	include "_anim\obj38.asm"
00016494                            ; ---------------------------------------------------------------------------
00016494                            ; Animation script - shield and invincibility stars
00016494                            ; ---------------------------------------------------------------------------
00016494 0000                       		dc.w byte_14356-Ani_obj38
00016496 0000                       		dc.w byte_1435E-Ani_obj38
00016498 0000                       		dc.w byte_14364-Ani_obj38
0001649A 0000                       		dc.w byte_1437E-Ani_obj38
0001649C 0000                       		dc.w byte_14398-Ani_obj38
0001649E 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
000164A6 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
000164AC 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
000164BD 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
000164C6 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
000164D7 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
000164E0 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
000164F1 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
000164FA                            		even
000164FA                            		even
000164FA                            
000164FA                            ; ---------------------------------------------------------------------------
000164FA                            ; Sprite mappings - shield and invincibility stars
000164FA                            ; ---------------------------------------------------------------------------
000164FA                            Map_obj38:
000164FA                            	include "_maps\obj38.asm"
000164FA                            ; ---------------------------------------------------------------------------
000164FA                            ; Sprite mappings - shield and invincibility stars
000164FA                            ; ---------------------------------------------------------------------------
000164FA 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
000164FE 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00016502 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00016506 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
0001650A 04                         byte_143C2:	dc.b 4
0001650B E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00016510 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00016515 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
0001651A 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
0001651F 04                         byte_143D7:	dc.b 4
00016520 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00016525 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
0001652A 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
0001652F 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00016534 04                         byte_143EC:	dc.b 4
00016535 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
0001653A E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0001653F 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00016544 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00016549 04                         byte_14401:	dc.b 4
0001654A E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0001654F E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00016554 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00016559 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0001655E 04                         byte_14416:	dc.b 4
0001655F E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00016564 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00016569 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0001656E 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00016573 04                         byte_1442B:	dc.b 4
00016574 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00016579 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0001657E 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00016583 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00016588 04                         byte_14440:	dc.b 4
00016589 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0001658E E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00016593 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00016598 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0001659E 00                         		even
0001659E 00                         		even
0001659E                            
0001659E                            ; ---------------------------------------------------------------------------
0001659E                            ; Sprite mappings - special stage entry	from beta
0001659E                            ; ---------------------------------------------------------------------------
0001659E                            
0001659E                            Ani_obj08:
0001659E                            	include "_anim\obj08.asm"
0001659E                            ; ---------------------------------------------------------------------------
0001659E                            ; Animation script - water splash (LZ)
0001659E                            ; ---------------------------------------------------------------------------
0001659E 0000                       		dc.w byte_145C6-Ani_obj08
000165A0 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
000165A6                            		even
000165A6                            		even
000165A6                            
000165A6                            ; ---------------------------------------------------------------------------
000165A6                            ; Sprite mappings - water splash (LZ)
000165A6                            ; ---------------------------------------------------------------------------
000165A6                            Map_obj08:
000165A6                            	include "_maps\obj08.asm"
000165A6                            ; ---------------------------------------------------------------------------
000165A6                            ; Sprite mappings - water splash (LZ)
000165A6                            ; ---------------------------------------------------------------------------
000165A6 0000                       		dc.w byte_145D2-Map_obj08
000165A8 0000                       		dc.w byte_145DD-Map_obj08
000165AA 0000                       		dc.w byte_145E8-Map_obj08
000165AC 02                         byte_145D2:	dc.b 2
000165AD F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000165B2 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000165B7 02                         byte_145DD:	dc.b 2
000165B8 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000165BD EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000165C2 01                         byte_145E8:	dc.b 1
000165C3 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000165C8                            		even
000165C8                            		even
000165C8                            
000165C8                            ; ---------------------------------------------------------------------------
000165C8                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000165C8                            ; ---------------------------------------------------------------------------
000165C8                            
000165C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000165C8                            
000165C8                            
000165C8                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000165C8 0828 0003 0022             		btst	#3,$22(a0)
000165CE 6700                       		beq.s	loc_14602
000165D0 7000                       		moveq	#0,d0
000165D2 11C0 F768                  		move.b	d0,($FFFFF768).w
000165D6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000165DA 4E75                       		rts	
000165DC                            ; ===========================================================================
000165DC                            
000165DC                            loc_14602:
000165DC 7003                       		moveq	#3,d0
000165DE 11C0 F768                  		move.b	d0,($FFFFF768).w
000165E2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000165E6 1028 0026                  		move.b	$26(a0),d0
000165EA 0600 0020                  		addi.b	#$20,d0
000165EE 6A00                       		bpl.s	loc_14624
000165F0 1028 0026                  		move.b	$26(a0),d0
000165F4 6A00                       		bpl.s	loc_1461E
000165F6 5300                       		subq.b	#1,d0
000165F8                            
000165F8                            loc_1461E:
000165F8 0600 0020                  		addi.b	#$20,d0
000165FC 6000                       		bra.s	loc_14630
000165FE                            ; ===========================================================================
000165FE                            
000165FE                            loc_14624:
000165FE 1028 0026                  		move.b	$26(a0),d0
00016602 6A00                       		bpl.s	loc_1462C
00016604 5200                       		addq.b	#1,d0
00016606                            
00016606                            loc_1462C:
00016606 0600 001F                  		addi.b	#$1F,d0
0001660A                            
0001660A                            loc_14630:
0001660A 0200 00C0                  		andi.b	#$C0,d0
0001660E 0C00 0040                  		cmpi.b	#$40,d0
00016612 6700 0000                  		beq.w	Sonic_WalkVertL
00016616 0C00 0080                  		cmpi.b	#$80,d0
0001661A 6700 0000                  		beq.w	Sonic_WalkCeiling
0001661E 0C00 00C0                  		cmpi.b	#$C0,d0
00016622 6700 0000                  		beq.w	Sonic_WalkVertR
00016626 3428 000C                  		move.w	$C(a0),d2
0001662A 3628 0008                  		move.w	8(a0),d3
0001662E 7000                       		moveq	#0,d0
00016630 1028 0016                  		move.b	$16(a0),d0
00016634 4880                       		ext.w	d0
00016636 D440                       		add.w	d0,d2
00016638 1028 0017                  		move.b	$17(a0),d0
0001663C 4880                       		ext.w	d0
0001663E D640                       		add.w	d0,d3
00016640 49F8 F768                  		lea	($FFFFF768).w,a4
00016644 367C 0010                  		movea.w	#$10,a3
00016648 3C3C 0000                  		move.w	#0,d6
0001664C 7A0D                       		moveq	#$D,d5
0001664E 6100 0000                  		bsr.w	FindFloor
00016652 3F01                       		move.w	d1,-(sp)
00016654 3428 000C                  		move.w	$C(a0),d2
00016658 3628 0008                  		move.w	8(a0),d3
0001665C 7000                       		moveq	#0,d0
0001665E 1028 0016                  		move.b	$16(a0),d0
00016662 4880                       		ext.w	d0
00016664 D440                       		add.w	d0,d2
00016666 1028 0017                  		move.b	$17(a0),d0
0001666A 4880                       		ext.w	d0
0001666C 4440                       		neg.w	d0
0001666E D640                       		add.w	d0,d3
00016670 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016674 367C 0010                  		movea.w	#$10,a3
00016678 3C3C 0000                  		move.w	#0,d6
0001667C 7A0D                       		moveq	#$D,d5
0001667E 6100 0000                  		bsr.w	FindFloor
00016682 301F                       		move.w	(sp)+,d0
00016684 6100 0000                  		bsr.w	Sonic_Angle
00016688 4A41                       		tst.w	d1
0001668A 6700                       		beq.s	locret_146BE
0001668C 6A00                       		bpl.s	loc_146C0
0001668E 0C41 FFF2                  		cmpi.w	#-$E,d1
00016692 6D00                       		blt.s	locret_146E6
00016694 D368 000C                  		add.w	d1,$C(a0)
00016698                            
00016698                            locret_146BE:
00016698 4E75                       		rts	
0001669A                            ; ===========================================================================
0001669A                            
0001669A                            loc_146C0:
0001669A 0C41 000E                  		cmpi.w	#$E,d1
0001669E 6E00                       		bgt.s	loc_146CC
000166A0                            
000166A0                            loc_146C6:
000166A0 D368 000C                  		add.w	d1,$C(a0)
000166A4 4E75                       		rts	
000166A6                            ; ===========================================================================
000166A6                            
000166A6                            loc_146CC:
000166A6 4A28 0038                  		tst.b	$38(a0)
000166AA 66F4                       		bne.s	loc_146C6
000166AC 08E8 0001 0022             		bset	#1,$22(a0)
000166B2 08A8 0005 0022             		bclr	#5,$22(a0)
000166B8 117C 0001 001D             		move.b	#1,$1D(a0)
000166BE 4E75                       		rts	
000166C0                            ; ===========================================================================
000166C0                            
000166C0                            locret_146E6:
000166C0 4E75                       		rts	
000166C2                            ; End of function Sonic_AnglePos
000166C2                            
000166C2                            ; ===========================================================================
000166C2 2428 0008                  		move.l	8(a0),d2
000166C6 3028 0010                  		move.w	$10(a0),d0
000166CA 48C0                       		ext.l	d0
000166CC E180                       		asl.l	#8,d0
000166CE 9480                       		sub.l	d0,d2
000166D0 2142 0008                  		move.l	d2,8(a0)
000166D4 303C 0038                  		move.w	#$38,d0
000166D8 48C0                       		ext.l	d0
000166DA E180                       		asl.l	#8,d0
000166DC 9680                       		sub.l	d0,d3
000166DE 2143 000C                  		move.l	d3,$C(a0)
000166E2 4E75                       		rts	
000166E4                            ; ===========================================================================
000166E4                            
000166E4                            locret_1470A:
000166E4 4E75                       		rts	
000166E6                            ; ===========================================================================
000166E6 2628 000C                  		move.l	$C(a0),d3
000166EA 3028 0012                  		move.w	$12(a0),d0
000166EE 0440 0038                  		subi.w	#$38,d0
000166F2 3140 0012                  		move.w	d0,$12(a0)
000166F6 48C0                       		ext.l	d0
000166F8 E180                       		asl.l	#8,d0
000166FA 9680                       		sub.l	d0,d3
000166FC 2143 000C                  		move.l	d3,$C(a0)
00016700 4E75                       		rts	
00016702 4E75                       		rts	
00016704                            ; ===========================================================================
00016704 2428 0008                  		move.l	8(a0),d2
00016708 2628 000C                  		move.l	$C(a0),d3
0001670C 3028 0010                  		move.w	$10(a0),d0
00016710 48C0                       		ext.l	d0
00016712 E180                       		asl.l	#8,d0
00016714 9480                       		sub.l	d0,d2
00016716 3028 0012                  		move.w	$12(a0),d0
0001671A 48C0                       		ext.l	d0
0001671C E180                       		asl.l	#8,d0
0001671E 9680                       		sub.l	d0,d3
00016720 2142 0008                  		move.l	d2,8(a0)
00016724 2143 000C                  		move.l	d3,$C(a0)
00016728 4E75                       		rts	
0001672A                            
0001672A                            ; ---------------------------------------------------------------------------
0001672A                            ; Subroutine to	change Sonic's angle as he walks along the floor
0001672A                            ; ---------------------------------------------------------------------------
0001672A                            
0001672A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001672A                            
0001672A                            
0001672A                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
0001672A 1438 F76A                  		move.b	($FFFFF76A).w,d2
0001672E B240                       		cmp.w	d0,d1
00016730 6F00                       		ble.s	loc_1475E
00016732 1438 F768                  		move.b	($FFFFF768).w,d2
00016736 3200                       		move.w	d0,d1
00016738                            
00016738                            loc_1475E:
00016738 0802 0000                  		btst	#0,d2
0001673C 6600                       		bne.s	loc_1476A
0001673E 1142 0026                  		move.b	d2,$26(a0)
00016742 4E75                       		rts	
00016744                            ; ===========================================================================
00016744                            
00016744                            loc_1476A:
00016744 1428 0026                  		move.b	$26(a0),d2
00016748 0602 0020                  		addi.b	#$20,d2
0001674C 0202 00C0                  		andi.b	#$C0,d2
00016750 1142 0026                  		move.b	d2,$26(a0)
00016754 4E75                       		rts	
00016756                            ; End of function Sonic_Angle
00016756                            
00016756                            ; ---------------------------------------------------------------------------
00016756                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00016756                            ; ---------------------------------------------------------------------------
00016756                            
00016756                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016756                            
00016756                            
00016756                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00016756 3428 000C                  		move.w	$C(a0),d2
0001675A 3628 0008                  		move.w	8(a0),d3
0001675E 7000                       		moveq	#0,d0
00016760 1028 0017                  		move.b	$17(a0),d0
00016764 4880                       		ext.w	d0
00016766 4440                       		neg.w	d0
00016768 D440                       		add.w	d0,d2
0001676A 1028 0016                  		move.b	$16(a0),d0
0001676E 4880                       		ext.w	d0
00016770 D640                       		add.w	d0,d3
00016772 49F8 F768                  		lea	($FFFFF768).w,a4
00016776 367C 0010                  		movea.w	#$10,a3
0001677A 3C3C 0000                  		move.w	#0,d6
0001677E 7A0D                       		moveq	#$D,d5
00016780 6100 0000                  		bsr.w	FindWall
00016784 3F01                       		move.w	d1,-(sp)
00016786 3428 000C                  		move.w	$C(a0),d2
0001678A 3628 0008                  		move.w	8(a0),d3
0001678E 7000                       		moveq	#0,d0
00016790 1028 0017                  		move.b	$17(a0),d0
00016794 4880                       		ext.w	d0
00016796 D440                       		add.w	d0,d2
00016798 1028 0016                  		move.b	$16(a0),d0
0001679C 4880                       		ext.w	d0
0001679E D640                       		add.w	d0,d3
000167A0 49F8 F76A                  		lea	($FFFFF76A).w,a4
000167A4 367C 0010                  		movea.w	#$10,a3
000167A8 3C3C 0000                  		move.w	#0,d6
000167AC 7A0D                       		moveq	#$D,d5
000167AE 6100 0000                  		bsr.w	FindWall
000167B2 301F                       		move.w	(sp)+,d0
000167B4 6100 FF74                  		bsr.w	Sonic_Angle
000167B8 4A41                       		tst.w	d1
000167BA 6700                       		beq.s	locret_147F0
000167BC 6A00                       		bpl.s	loc_147F2
000167BE 0C41 FFF2                  		cmpi.w	#-$E,d1
000167C2 6D00 FF20                  		blt.w	locret_1470A
000167C6 D368 0008                  		add.w	d1,8(a0)
000167CA                            
000167CA                            locret_147F0:
000167CA 4E75                       		rts	
000167CC                            ; ===========================================================================
000167CC                            
000167CC                            loc_147F2:
000167CC 0C41 000E                  		cmpi.w	#$E,d1
000167D0 6E00                       		bgt.s	loc_147FE
000167D2                            
000167D2                            loc_147F8:
000167D2 D368 0008                  		add.w	d1,8(a0)
000167D6 4E75                       		rts	
000167D8                            ; ===========================================================================
000167D8                            
000167D8                            loc_147FE:
000167D8 4A28 0038                  		tst.b	$38(a0)
000167DC 66F4                       		bne.s	loc_147F8
000167DE 08E8 0001 0022             		bset	#1,$22(a0)
000167E4 08A8 0005 0022             		bclr	#5,$22(a0)
000167EA 117C 0001 001D             		move.b	#1,$1D(a0)
000167F0 4E75                       		rts	
000167F2                            ; End of function Sonic_WalkVertR
000167F2                            
000167F2                            ; ---------------------------------------------------------------------------
000167F2                            ; Subroutine allowing Sonic to walk upside-down
000167F2                            ; ---------------------------------------------------------------------------
000167F2                            
000167F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167F2                            
000167F2                            
000167F2                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
000167F2 3428 000C                  		move.w	$C(a0),d2
000167F6 3628 0008                  		move.w	8(a0),d3
000167FA 7000                       		moveq	#0,d0
000167FC 1028 0016                  		move.b	$16(a0),d0
00016800 4880                       		ext.w	d0
00016802 9440                       		sub.w	d0,d2
00016804 0A42 000F                  		eori.w	#$F,d2
00016808 1028 0017                  		move.b	$17(a0),d0
0001680C 4880                       		ext.w	d0
0001680E D640                       		add.w	d0,d3
00016810 49F8 F768                  		lea	($FFFFF768).w,a4
00016814 367C FFF0                  		movea.w	#-$10,a3
00016818 3C3C 1000                  		move.w	#$1000,d6
0001681C 7A0D                       		moveq	#$D,d5
0001681E 6100 0000                  		bsr.w	FindFloor
00016822 3F01                       		move.w	d1,-(sp)
00016824 3428 000C                  		move.w	$C(a0),d2
00016828 3628 0008                  		move.w	8(a0),d3
0001682C 7000                       		moveq	#0,d0
0001682E 1028 0016                  		move.b	$16(a0),d0
00016832 4880                       		ext.w	d0
00016834 9440                       		sub.w	d0,d2
00016836 0A42 000F                  		eori.w	#$F,d2
0001683A 1028 0017                  		move.b	$17(a0),d0
0001683E 4880                       		ext.w	d0
00016840 9640                       		sub.w	d0,d3
00016842 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016846 367C FFF0                  		movea.w	#-$10,a3
0001684A 3C3C 1000                  		move.w	#$1000,d6
0001684E 7A0D                       		moveq	#$D,d5
00016850 6100 0000                  		bsr.w	FindFloor
00016854 301F                       		move.w	(sp)+,d0
00016856 6100 FED2                  		bsr.w	Sonic_Angle
0001685A 4A41                       		tst.w	d1
0001685C 6700                       		beq.s	locret_14892
0001685E 6A00                       		bpl.s	loc_14894
00016860 0C41 FFF2                  		cmpi.w	#-$E,d1
00016864 6D00 FE5A                  		blt.w	locret_146E6
00016868 9368 000C                  		sub.w	d1,$C(a0)
0001686C                            
0001686C                            locret_14892:
0001686C 4E75                       		rts	
0001686E                            ; ===========================================================================
0001686E                            
0001686E                            loc_14894:
0001686E 0C41 000E                  		cmpi.w	#$E,d1
00016872 6E00                       		bgt.s	loc_148A0
00016874                            
00016874                            loc_1489A:
00016874 9368 000C                  		sub.w	d1,$C(a0)
00016878 4E75                       		rts	
0001687A                            ; ===========================================================================
0001687A                            
0001687A                            loc_148A0:
0001687A 4A28 0038                  		tst.b	$38(a0)
0001687E 66F4                       		bne.s	loc_1489A
00016880 08E8 0001 0022             		bset	#1,$22(a0)
00016886 08A8 0005 0022             		bclr	#5,$22(a0)
0001688C 117C 0001 001D             		move.b	#1,$1D(a0)
00016892 4E75                       		rts	
00016894                            ; End of function Sonic_WalkCeiling
00016894                            
00016894                            ; ---------------------------------------------------------------------------
00016894                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00016894                            ; ---------------------------------------------------------------------------
00016894                            
00016894                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016894                            
00016894                            
00016894                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00016894 3428 000C                  		move.w	$C(a0),d2
00016898 3628 0008                  		move.w	8(a0),d3
0001689C 7000                       		moveq	#0,d0
0001689E 1028 0017                  		move.b	$17(a0),d0
000168A2 4880                       		ext.w	d0
000168A4 9440                       		sub.w	d0,d2
000168A6 1028 0016                  		move.b	$16(a0),d0
000168AA 4880                       		ext.w	d0
000168AC 9640                       		sub.w	d0,d3
000168AE 0A43 000F                  		eori.w	#$F,d3
000168B2 49F8 F768                  		lea	($FFFFF768).w,a4
000168B6 367C FFF0                  		movea.w	#-$10,a3
000168BA 3C3C 0800                  		move.w	#$800,d6
000168BE 7A0D                       		moveq	#$D,d5
000168C0 6100 0000                  		bsr.w	FindWall
000168C4 3F01                       		move.w	d1,-(sp)
000168C6 3428 000C                  		move.w	$C(a0),d2
000168CA 3628 0008                  		move.w	8(a0),d3
000168CE 7000                       		moveq	#0,d0
000168D0 1028 0017                  		move.b	$17(a0),d0
000168D4 4880                       		ext.w	d0
000168D6 D440                       		add.w	d0,d2
000168D8 1028 0016                  		move.b	$16(a0),d0
000168DC 4880                       		ext.w	d0
000168DE 9640                       		sub.w	d0,d3
000168E0 0A43 000F                  		eori.w	#$F,d3
000168E4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000168E8 367C FFF0                  		movea.w	#-$10,a3
000168EC 3C3C 0800                  		move.w	#$800,d6
000168F0 7A0D                       		moveq	#$D,d5
000168F2 6100 0000                  		bsr.w	FindWall
000168F6 301F                       		move.w	(sp)+,d0
000168F8 6100 FE30                  		bsr.w	Sonic_Angle
000168FC 4A41                       		tst.w	d1
000168FE 6700                       		beq.s	locret_14934
00016900 6A00                       		bpl.s	loc_14936
00016902 0C41 FFF2                  		cmpi.w	#-$E,d1
00016906 6D00 FDDC                  		blt.w	locret_1470A
0001690A 9368 0008                  		sub.w	d1,8(a0)
0001690E                            
0001690E                            locret_14934:
0001690E 4E75                       		rts	
00016910                            ; ===========================================================================
00016910                            
00016910                            loc_14936:
00016910 0C41 000E                  		cmpi.w	#$E,d1
00016914 6E00                       		bgt.s	loc_14942
00016916                            
00016916                            loc_1493C:
00016916 9368 0008                  		sub.w	d1,8(a0)
0001691A 4E75                       		rts	
0001691C                            ; ===========================================================================
0001691C                            
0001691C                            loc_14942:
0001691C 4A28 0038                  		tst.b	$38(a0)
00016920 66F4                       		bne.s	loc_1493C
00016922 08E8 0001 0022             		bset	#1,$22(a0)
00016928 08A8 0005 0022             		bclr	#5,$22(a0)
0001692E 117C 0001 001D             		move.b	#1,$1D(a0)
00016934 4E75                       		rts	
00016936                            ; End of function Sonic_WalkVertL
00016936                            
00016936                            ; ---------------------------------------------------------------------------
00016936                            ; Subroutine to	find which tile	the object is standing on
00016936                            ; ---------------------------------------------------------------------------
00016936                            
00016936                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016936                            
00016936                            
00016936                            Floor_ChkTile_LocateBlock:
00016936 43F8 A400                  		lea	($FFFFA400).w,a1
0001693A 1231 0000                  		move.b	(a1,d0.w),d1
0001693E 6700                       		beq.s	Floor_ChkTile_EmptyChunk	; if the chunk ID is 0 (empty chunk), branch
00016940 6B00                       		bmi.s	loc_1499A
00016942 5301                       		subq.b	#1,d1		; the empty chunk is not included in the chunk mappings, subtract 1 to read the correct data
00016944 4881                       		ext.w	d1
00016946 EE59                       		ror.w	#7,d1
00016948 3002                       		move.w	d2,d0
0001694A D040                       		add.w	d0,d0
0001694C 0240 01E0                  		andi.w	#$1E0,d0
00016950 D240                       		add.w	d0,d1
00016952 3003                       		move.w	d3,d0
00016954 E648                       		lsr.w	#3,d0
00016956 0240 001E                  		andi.w	#$1E,d0
0001695A D240                       		add.w	d0,d1
0001695C 4E75                       		rts	
0001695E                            ; ---------------------------------------------------------------------------
0001695E                            
0001695E                            loc_1499A:
0001695E 0241 007F                  		andi.w	#$7F,d1
00016962 0828 0006 0001             		btst	#6,1(a0)
00016968 6700                       		beq.s	loc_149B2
0001696A 5241                       		addq.w	#1,d1
0001696C 0C41 0029                  		cmpi.w	#$29,d1
00016970 6600                       		bne.s	loc_149B2
00016972 323C 0051                  		move.w	#$51,d1
00016976                            
00016976                            loc_149B2:
00016976 5301                       		subq.b	#1,d1
00016978 EE59                       		ror.w	#7,d1
0001697A 3002                       		move.w	d2,d0
0001697C D040                       		add.w	d0,d0
0001697E 0240 01E0                  		andi.w	#$1E0,d0
00016982 D240                       		add.w	d0,d1
00016984 3003                       		move.w	d3,d0
00016986 E648                       		lsr.w	#3,d0
00016988 0240 001E                  		andi.w	#$1E,d0
0001698C D240                       		add.w	d0,d1
0001698E 4E75                       		rts	
00016990                            ; ---------------------------------------------------------------------------
00016990                            
00016990                            Floor_ChkTile_EmptyChunk:
00016990 43F8 FF00                  		lea	($FFFFFF00).w,a1	; override a1
00016994 584F                       		addq.w	#4,sp			; pop a stack frame to avoid adding the address of the chunk mappings to a1
00016996 4E75                       		rts	
00016998                            
00016998                            ; ---------------------------------------------------------------------------
00016998                            ; Subroutine to	find which tile	the object is standing on
00016998                            ; ---------------------------------------------------------------------------
00016998                            
00016998                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016998                            
00016998                            
00016998                            Floor_ChkTile:				; XREF: FindFloor; et al
00016998 3002                       		move.w	d2,d0
0001699A E248                       		lsr.w	#1,d0
0001699C 0240 0380                  		andi.w	#$380,d0
000169A0 3203                       		move.w	d3,d1
000169A2 E049                       		lsr.w	#8,d1
000169A4 0241 007F                  		andi.w	#$7F,d1
000169A8 D041                       		add.w	d1,d0
000169AA 4A38 FE10                  		tst.b	($FFFFFE10).w	; are we in Green Hill Zone?
000169AE 6700                       		beq.s	@ghz		; if yes, branch		
000169B0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w	
000169B6 6700                       		beq.s	@lz		
000169B8 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w	
000169BE 6700                       		beq.s	@mz		
000169C0 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w	
000169C6 6700                       		beq.s	@slz		
000169C8 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w	
000169CE 6700                       		beq.s	@syz		
000169D0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w	
000169D6 6700                       		beq.s	@sbz				
000169D8 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
000169DE 6700                       		beq.s	@ghz		; if yes, branch
000169E0 72FF                       		moveq	#-1,d1
000169E2 6100 FF52                  		bsr.w	Floor_ChkTile_LocateBlock
000169E6 2241                       		movea.l	d1,a1
000169E8 4E75                       		rts	
000169EA                            ; ---------------------------------------------------------------------------
000169EA                            
000169EA                            @ghz:
000169EA 7200                       		moveq	#0,d1
000169EC 6100 FF48                  		bsr.w	Floor_ChkTile_LocateBlock
000169F0 0681 0000 0000             		add.l	#Blk256_GHZ,d1
000169F6 2241                       		movea.l	d1,a1
000169F8 4E75                       		rts	
000169FA                            
000169FA                            @lz:
000169FA 7200                       		moveq	#0,d1
000169FC 6100 FF38                  		bsr.w	Floor_ChkTile_LocateBlock
00016A00 0681 0000 0000             		add.l	#Blk256_LZ,d1
00016A06 2241                       		movea.l	d1,a1
00016A08 4E75                       		rts	
00016A0A                            
00016A0A                            @mz:
00016A0A 7200                       		moveq	#0,d1
00016A0C 6100 FF28                  		bsr.w	Floor_ChkTile_LocateBlock
00016A10 0681 0000 0000             		add.l	#Blk256_MZ,d1
00016A16 2241                       		movea.l	d1,a1
00016A18 4E75                       		rts	
00016A1A                            
00016A1A                            @slz:
00016A1A 7200                       		moveq	#0,d1
00016A1C 6100 FF18                  		bsr.w	Floor_ChkTile_LocateBlock
00016A20 0681 0000 0000             		add.l	#Blk256_SLZ,d1
00016A26 2241                       		movea.l	d1,a1
00016A28 4E75                       		rts	
00016A2A                            
00016A2A                            @syz:
00016A2A 7200                       		moveq	#0,d1
00016A2C 6100 FF08                  		bsr.w	Floor_ChkTile_LocateBlock
00016A30 0681 0000 0000             		add.l	#Blk256_SYZ,d1
00016A36 2241                       		movea.l	d1,a1
00016A38 4E75                       		rts	
00016A3A                            
00016A3A                            @sbz:
00016A3A 7200                       		moveq	#0,d1
00016A3C 6100 FEF8                  		bsr.w	Floor_ChkTile_LocateBlock
00016A40 0681 0000 0000             		add.l	#Blk256_SBZ,d1
00016A46 2241                       		movea.l	d1,a1
00016A48 4E75                       		rts			
00016A4A                            ; End of function Floor_ChkTile
00016A4A                            
00016A4A                            
00016A4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A4A                            
00016A4A                            
00016A4A                            FindFloor:				; XREF: Sonic_AnglePos; et al
00016A4A 6100 FF4C                  		bsr.w	Floor_ChkTile
00016A4E 3011                       		move.w	(a1),d0
00016A50 3800                       		move.w	d0,d4
00016A52 0240 07FF                  		andi.w	#$7FF,d0
00016A56 6700                       		beq.s	loc_149DE
00016A58 0B04                       		btst	d5,d4
00016A5A 6600                       		bne.s	loc_149EC
00016A5C                            
00016A5C                            loc_149DE:
00016A5C D44B                       		add.w	a3,d2
00016A5E 6100 0000                  		bsr.w	FindFloor2
00016A62 944B                       		sub.w	a3,d2
00016A64 0641 0010                  		addi.w	#$10,d1
00016A68 4E75                       		rts	
00016A6A                            ; ===========================================================================
00016A6A                            
00016A6A                            loc_149EC:
00016A6A 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00016A6E 1032 0000                  		move.b	(a2,d0.w),d0
00016A72 0240 00FF                  		andi.w	#$FF,d0
00016A76 67E4                       		beq.s	loc_149DE
00016A78 45F9 0000 0000             		lea	(AngleMap).l,a2
00016A7E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016A82 E948                       		lsl.w	#4,d0
00016A84 3203                       		move.w	d3,d1
00016A86 0804 000B                  		btst	#$B,d4
00016A8A 6700                       		beq.s	loc_14A12
00016A8C 4641                       		not.w	d1
00016A8E 4414                       		neg.b	(a4)
00016A90                            
00016A90                            loc_14A12:
00016A90 0804 000C                  		btst	#$C,d4
00016A94 6700                       		beq.s	loc_14A22
00016A96 0614 0040                  		addi.b	#$40,(a4)
00016A9A 4414                       		neg.b	(a4)
00016A9C 0414 0040                  		subi.b	#$40,(a4)
00016AA0                            
00016AA0                            loc_14A22:
00016AA0 0241 000F                  		andi.w	#$F,d1
00016AA4 D240                       		add.w	d0,d1
00016AA6 45F9 0000 0000             		lea	(CollArray1).l,a2
00016AAC 1032 1000                  		move.b	(a2,d1.w),d0
00016AB0 4880                       		ext.w	d0
00016AB2 BD44                       		eor.w	d6,d4
00016AB4 0804 000C                  		btst	#$C,d4
00016AB8 6700                       		beq.s	loc_14A3E
00016ABA 4440                       		neg.w	d0
00016ABC                            
00016ABC                            loc_14A3E:
00016ABC 4A40                       		tst.w	d0
00016ABE 679C                       		beq.s	loc_149DE
00016AC0 6B00                       		bmi.s	loc_14A5A
00016AC2 0C00 0010                  		cmpi.b	#$10,d0
00016AC6 6700                       		beq.s	loc_14A66
00016AC8 3202                       		move.w	d2,d1
00016ACA 0241 000F                  		andi.w	#$F,d1
00016ACE D041                       		add.w	d1,d0
00016AD0 323C 000F                  		move.w	#$F,d1
00016AD4 9240                       		sub.w	d0,d1
00016AD6 4E75                       		rts	
00016AD8                            ; ===========================================================================
00016AD8                            
00016AD8                            loc_14A5A:
00016AD8 3202                       		move.w	d2,d1
00016ADA 0241 000F                  		andi.w	#$F,d1
00016ADE D041                       		add.w	d1,d0
00016AE0 6A00 FF7A                  		bpl.w	loc_149DE
00016AE4                            
00016AE4                            loc_14A66:
00016AE4 944B                       		sub.w	a3,d2
00016AE6 6100 0000                  		bsr.w	FindFloor2
00016AEA D44B                       		add.w	a3,d2
00016AEC 0441 0010                  		subi.w	#$10,d1
00016AF0 4E75                       		rts	
00016AF2                            ; End of function FindFloor
00016AF2                            
00016AF2                            
00016AF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016AF2                            
00016AF2                            
00016AF2                            FindFloor2:				; XREF: FindFloor
00016AF2 6100 FEA4                  		bsr.w	Floor_ChkTile
00016AF6 3011                       		move.w	(a1),d0
00016AF8 3800                       		move.w	d0,d4
00016AFA 0240 07FF                  		andi.w	#$7FF,d0
00016AFE 6700                       		beq.s	loc_14A86
00016B00 0B04                       		btst	d5,d4
00016B02 6600                       		bne.s	loc_14A94
00016B04                            
00016B04                            loc_14A86:
00016B04 323C 000F                  		move.w	#$F,d1
00016B08 3002                       		move.w	d2,d0
00016B0A 0240 000F                  		andi.w	#$F,d0
00016B0E 9240                       		sub.w	d0,d1
00016B10 4E75                       		rts	
00016B12                            ; ===========================================================================
00016B12                            
00016B12                            loc_14A94:
00016B12 2478 F796                  		movea.l	($FFFFF796).w,a2
00016B16 1032 0000                  		move.b	(a2,d0.w),d0
00016B1A 0240 00FF                  		andi.w	#$FF,d0
00016B1E 67E4                       		beq.s	loc_14A86
00016B20 45F9 0000 0000             		lea	(AngleMap).l,a2
00016B26 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016B2A E948                       		lsl.w	#4,d0
00016B2C 3203                       		move.w	d3,d1
00016B2E 0804 000B                  		btst	#$B,d4
00016B32 6700                       		beq.s	loc_14ABA
00016B34 4641                       		not.w	d1
00016B36 4414                       		neg.b	(a4)
00016B38                            
00016B38                            loc_14ABA:
00016B38 0804 000C                  		btst	#$C,d4
00016B3C 6700                       		beq.s	loc_14ACA
00016B3E 0614 0040                  		addi.b	#$40,(a4)
00016B42 4414                       		neg.b	(a4)
00016B44 0414 0040                  		subi.b	#$40,(a4)
00016B48                            
00016B48                            loc_14ACA:
00016B48 0241 000F                  		andi.w	#$F,d1
00016B4C D240                       		add.w	d0,d1
00016B4E 45F9 0000 0000             		lea	(CollArray1).l,a2
00016B54 1032 1000                  		move.b	(a2,d1.w),d0
00016B58 4880                       		ext.w	d0
00016B5A BD44                       		eor.w	d6,d4
00016B5C 0804 000C                  		btst	#$C,d4
00016B60 6700                       		beq.s	loc_14AE6
00016B62 4440                       		neg.w	d0
00016B64                            
00016B64                            loc_14AE6:
00016B64 4A40                       		tst.w	d0
00016B66 679C                       		beq.s	loc_14A86
00016B68 6B00                       		bmi.s	loc_14AFC
00016B6A 3202                       		move.w	d2,d1
00016B6C 0241 000F                  		andi.w	#$F,d1
00016B70 D041                       		add.w	d1,d0
00016B72 323C 000F                  		move.w	#$F,d1
00016B76 9240                       		sub.w	d0,d1
00016B78 4E75                       		rts	
00016B7A                            ; ===========================================================================
00016B7A                            
00016B7A                            loc_14AFC:
00016B7A 3202                       		move.w	d2,d1
00016B7C 0241 000F                  		andi.w	#$F,d1
00016B80 D041                       		add.w	d1,d0
00016B82 6A00 FF80                  		bpl.w	loc_14A86
00016B86 4641                       		not.w	d1
00016B88 4E75                       		rts	
00016B8A                            ; End of function FindFloor2
00016B8A                            
00016B8A                            
00016B8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016B8A                            
00016B8A                            
00016B8A                            FindWall:				; XREF: Sonic_WalkVertR; et al
00016B8A 6100 FE0C                  		bsr.w	Floor_ChkTile
00016B8E 3011                       		move.w	(a1),d0
00016B90 3800                       		move.w	d0,d4
00016B92 0240 07FF                  		andi.w	#$7FF,d0
00016B96 6700                       		beq.s	loc_14B1E
00016B98 0B04                       		btst	d5,d4
00016B9A 6600                       		bne.s	loc_14B2C
00016B9C                            
00016B9C                            loc_14B1E:
00016B9C D64B                       		add.w	a3,d3
00016B9E 6100 0000                  		bsr.w	FindWall2
00016BA2 964B                       		sub.w	a3,d3
00016BA4 0641 0010                  		addi.w	#$10,d1
00016BA8 4E75                       		rts	
00016BAA                            ; ===========================================================================
00016BAA                            
00016BAA                            loc_14B2C:
00016BAA 2478 F796                  		movea.l	($FFFFF796).w,a2
00016BAE 1032 0000                  		move.b	(a2,d0.w),d0
00016BB2 0240 00FF                  		andi.w	#$FF,d0
00016BB6 67E4                       		beq.s	loc_14B1E
00016BB8 45F9 0000 0000             		lea	(AngleMap).l,a2
00016BBE 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016BC2 E948                       		lsl.w	#4,d0
00016BC4 3202                       		move.w	d2,d1
00016BC6 0804 000C                  		btst	#$C,d4
00016BCA 6700                       		beq.s	loc_14B5A
00016BCC 4641                       		not.w	d1
00016BCE 0614 0040                  		addi.b	#$40,(a4)
00016BD2 4414                       		neg.b	(a4)
00016BD4 0414 0040                  		subi.b	#$40,(a4)
00016BD8                            
00016BD8                            loc_14B5A:
00016BD8 0804 000B                  		btst	#$B,d4
00016BDC 6700                       		beq.s	loc_14B62
00016BDE 4414                       		neg.b	(a4)
00016BE0                            
00016BE0                            loc_14B62:
00016BE0 0241 000F                  		andi.w	#$F,d1
00016BE4 D240                       		add.w	d0,d1
00016BE6 45F9 0000 0000             		lea	(CollArray2).l,a2
00016BEC 1032 1000                  		move.b	(a2,d1.w),d0
00016BF0 4880                       		ext.w	d0
00016BF2 BD44                       		eor.w	d6,d4
00016BF4 0804 000B                  		btst	#$B,d4
00016BF8 6700                       		beq.s	loc_14B7E
00016BFA 4440                       		neg.w	d0
00016BFC                            
00016BFC                            loc_14B7E:
00016BFC 4A40                       		tst.w	d0
00016BFE 679C                       		beq.s	loc_14B1E
00016C00 6B00                       		bmi.s	loc_14B9A
00016C02 0C00 0010                  		cmpi.b	#$10,d0
00016C06 6700                       		beq.s	loc_14BA6
00016C08 3203                       		move.w	d3,d1
00016C0A 0241 000F                  		andi.w	#$F,d1
00016C0E D041                       		add.w	d1,d0
00016C10 323C 000F                  		move.w	#$F,d1
00016C14 9240                       		sub.w	d0,d1
00016C16 4E75                       		rts	
00016C18                            ; ===========================================================================
00016C18                            
00016C18                            loc_14B9A:
00016C18 3203                       		move.w	d3,d1
00016C1A 0241 000F                  		andi.w	#$F,d1
00016C1E D041                       		add.w	d1,d0
00016C20 6A00 FF7A                  		bpl.w	loc_14B1E
00016C24                            
00016C24                            loc_14BA6:
00016C24 964B                       		sub.w	a3,d3
00016C26 6100 0000                  		bsr.w	FindWall2
00016C2A D64B                       		add.w	a3,d3
00016C2C 0441 0010                  		subi.w	#$10,d1
00016C30 4E75                       		rts	
00016C32                            ; End of function FindWall
00016C32                            
00016C32                            
00016C32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C32                            
00016C32                            
00016C32                            FindWall2:				; XREF: FindWall
00016C32 6100 FD64                  		bsr.w	Floor_ChkTile
00016C36 3011                       		move.w	(a1),d0
00016C38 3800                       		move.w	d0,d4
00016C3A 0240 07FF                  		andi.w	#$7FF,d0
00016C3E 6700                       		beq.s	loc_14BC6
00016C40 0B04                       		btst	d5,d4
00016C42 6600                       		bne.s	loc_14BD4
00016C44                            
00016C44                            loc_14BC6:
00016C44 323C 000F                  		move.w	#$F,d1
00016C48 3003                       		move.w	d3,d0
00016C4A 0240 000F                  		andi.w	#$F,d0
00016C4E 9240                       		sub.w	d0,d1
00016C50 4E75                       		rts	
00016C52                            ; ===========================================================================
00016C52                            
00016C52                            loc_14BD4:
00016C52 2478 F796                  		movea.l	($FFFFF796).w,a2
00016C56 1032 0000                  		move.b	(a2,d0.w),d0
00016C5A 0240 00FF                  		andi.w	#$FF,d0
00016C5E 67E4                       		beq.s	loc_14BC6
00016C60 45F9 0000 0000             		lea	(AngleMap).l,a2
00016C66 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016C6A E948                       		lsl.w	#4,d0
00016C6C 3202                       		move.w	d2,d1
00016C6E 0804 000C                  		btst	#$C,d4
00016C72 6700                       		beq.s	loc_14C02
00016C74 4641                       		not.w	d1
00016C76 0614 0040                  		addi.b	#$40,(a4)
00016C7A 4414                       		neg.b	(a4)
00016C7C 0414 0040                  		subi.b	#$40,(a4)
00016C80                            
00016C80                            loc_14C02:
00016C80 0804 000B                  		btst	#$B,d4
00016C84 6700                       		beq.s	loc_14C0A
00016C86 4414                       		neg.b	(a4)
00016C88                            
00016C88                            loc_14C0A:
00016C88 0241 000F                  		andi.w	#$F,d1
00016C8C D240                       		add.w	d0,d1
00016C8E 45F9 0000 0000             		lea	(CollArray2).l,a2
00016C94 1032 1000                  		move.b	(a2,d1.w),d0
00016C98 4880                       		ext.w	d0
00016C9A BD44                       		eor.w	d6,d4
00016C9C 0804 000B                  		btst	#$B,d4
00016CA0 6700                       		beq.s	loc_14C26
00016CA2 4440                       		neg.w	d0
00016CA4                            
00016CA4                            loc_14C26:
00016CA4 4A40                       		tst.w	d0
00016CA6 679C                       		beq.s	loc_14BC6
00016CA8 6B00                       		bmi.s	loc_14C3C
00016CAA 3203                       		move.w	d3,d1
00016CAC 0241 000F                  		andi.w	#$F,d1
00016CB0 D041                       		add.w	d1,d0
00016CB2 323C 000F                  		move.w	#$F,d1
00016CB6 9240                       		sub.w	d0,d1
00016CB8 4E75                       		rts	
00016CBA                            ; ===========================================================================
00016CBA                            
00016CBA                            loc_14C3C:
00016CBA 3203                       		move.w	d3,d1
00016CBC 0241 000F                  		andi.w	#$F,d1
00016CC0 D041                       		add.w	d1,d0
00016CC2 6A00 FF80                  		bpl.w	loc_14BC6
00016CC6 4641                       		not.w	d1
00016CC8 4E75                       		rts	
00016CCA                            ; End of function FindWall2
00016CCA                            
00016CCA                            ; ---------------------------------------------------------------------------
00016CCA                            ; Unused floor/wall subroutine - logs something	to do with collision
00016CCA                            ; ---------------------------------------------------------------------------
00016CCA                            
00016CCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016CCA                            
00016CCA                            
00016CCA                            FloorLog_Unk:				; XREF: Level
00016CCA 4E75                       		rts	
00016CCC                            
00016CCC 43F9 0000 0000             		lea	(CollArray1).l,a1
00016CD2 45F9 0000 0000             		lea	(CollArray1).l,a2
00016CD8 363C 00FF                  		move.w	#$FF,d3
00016CDC                            
00016CDC                            loc_14C5E:
00016CDC 7A10                       		moveq	#$10,d5
00016CDE 343C 000F                  		move.w	#$F,d2
00016CE2                            
00016CE2                            loc_14C64:
00016CE2 7800                       		moveq	#0,d4
00016CE4 323C 000F                  		move.w	#$F,d1
00016CE8                            
00016CE8                            loc_14C6A:
00016CE8 3019                       		move.w	(a1)+,d0
00016CEA EAA8                       		lsr.l	d5,d0
00016CEC D944                       		addx.w	d4,d4
00016CEE 51C9 FFF8                  		dbf	d1,loc_14C6A
00016CF2                            
00016CF2 34C4                       		move.w	d4,(a2)+
00016CF4 92FC 0020                  		suba.w	#$20,a1
00016CF8 5345                       		subq.w	#1,d5
00016CFA 51CA FFE6                  		dbf	d2,loc_14C64
00016CFE                            
00016CFE D2FC 0020                  		adda.w	#$20,a1
00016D02 51CB FFD8                  		dbf	d3,loc_14C5E
00016D06                            
00016D06 43F9 0000 0000             		lea	(CollArray1).l,a1
00016D0C 45F9 0000 0000             		lea	(CollArray2).l,a2
00016D12 6100                       		bsr.s	FloorLog_Unk2
00016D14 43F9 0000 0000             		lea	(CollArray1).l,a1
00016D1A 45F9 0000 0000             		lea	(CollArray1).l,a2
00016D20                            
00016D20                            ; End of function FloorLog_Unk
00016D20                            
00016D20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016D20                            
00016D20                            
00016D20                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00016D20 363C 0FFF                  		move.w	#$FFF,d3
00016D24                            
00016D24                            loc_14CA6:
00016D24 7400                       		moveq	#0,d2
00016D26 323C 000F                  		move.w	#$F,d1
00016D2A 3019                       		move.w	(a1)+,d0
00016D2C 6700                       		beq.s	loc_14CD4
00016D2E 6B00                       		bmi.s	loc_14CBE
00016D30                            
00016D30                            loc_14CB2:
00016D30 E248                       		lsr.w	#1,d0
00016D32 6400                       		bcc.s	loc_14CB8
00016D34 5202                       		addq.b	#1,d2
00016D36                            
00016D36                            loc_14CB8:
00016D36 51C9 FFF8                  		dbf	d1,loc_14CB2
00016D3A                            
00016D3A 6000                       		bra.s	loc_14CD6
00016D3C                            ; ===========================================================================
00016D3C                            
00016D3C                            loc_14CBE:
00016D3C 0C40 FFFF                  		cmpi.w	#-1,d0
00016D40 6700                       		beq.s	loc_14CD0
00016D42                            
00016D42                            loc_14CC4:
00016D42 E348                       		lsl.w	#1,d0
00016D44 6400                       		bcc.s	loc_14CCA
00016D46 5302                       		subq.b	#1,d2
00016D48                            
00016D48                            loc_14CCA:
00016D48 51C9 FFF8                  		dbf	d1,loc_14CC4
00016D4C                            
00016D4C 6000                       		bra.s	loc_14CD6
00016D4E                            ; ===========================================================================
00016D4E                            
00016D4E                            loc_14CD0:
00016D4E 303C 0010                  		move.w	#$10,d0
00016D52                            
00016D52                            loc_14CD4:
00016D52 3400                       		move.w	d0,d2
00016D54                            
00016D54                            loc_14CD6:
00016D54 14C2                       		move.b	d2,(a2)+
00016D56 51CB FFCC                  		dbf	d3,loc_14CA6
00016D5A                            
00016D5A 4E75                       		rts	
00016D5C                            
00016D5C                            ; End of function FloorLog_Unk2
00016D5C                            
00016D5C                            
00016D5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016D5C                            
00016D5C                            
00016D5C                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00016D5C 2628 0008                  		move.l	8(a0),d3
00016D60 2428 000C                  		move.l	$C(a0),d2
00016D64 3228 0010                  		move.w	$10(a0),d1
00016D68 48C1                       		ext.l	d1
00016D6A E181                       		asl.l	#8,d1
00016D6C D681                       		add.l	d1,d3
00016D6E 3228 0012                  		move.w	$12(a0),d1
00016D72 48C1                       		ext.l	d1
00016D74 E181                       		asl.l	#8,d1
00016D76 D481                       		add.l	d1,d2
00016D78 4842                       		swap	d2
00016D7A 4843                       		swap	d3
00016D7C 11C0 F768                  		move.b	d0,($FFFFF768).w
00016D80 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016D84 1200                       		move.b	d0,d1
00016D86 0600 0020                  		addi.b	#$20,d0
00016D8A 6A00                       		bpl.s	loc_14D1A
00016D8C 1001                       		move.b	d1,d0
00016D8E 6A00                       		bpl.s	loc_14D14
00016D90 5300                       		subq.b	#1,d0
00016D92                            
00016D92                            loc_14D14:
00016D92 0600 0020                  		addi.b	#$20,d0
00016D96 6000                       		bra.s	loc_14D24
00016D98                            ; ===========================================================================
00016D98                            
00016D98                            loc_14D1A:
00016D98 1001                       		move.b	d1,d0
00016D9A 6A00                       		bpl.s	loc_14D20
00016D9C 5200                       		addq.b	#1,d0
00016D9E                            
00016D9E                            loc_14D20:
00016D9E 0600 001F                  		addi.b	#$1F,d0
00016DA2                            
00016DA2                            loc_14D24:
00016DA2 0200 00C0                  		andi.b	#$C0,d0
00016DA6 6700 0000                  		beq.w	loc_14DF0
00016DAA 0C00 0080                  		cmpi.b	#$80,d0
00016DAE 6700 0000                  		beq.w	loc_14F7C
00016DB2 0201 0038                  		andi.b	#$38,d1
00016DB6 6600                       		bne.s	loc_14D3C
00016DB8 5042                       		addq.w	#8,d2
00016DBA                            
00016DBA                            loc_14D3C:
00016DBA 0C00 0040                  		cmpi.b	#$40,d0
00016DBE 6700 0000                  		beq.w	loc_1504A
00016DC2 6000 0000                  		bra.w	loc_14EBC
00016DC6                            
00016DC6                            ; End of function Sonic_WalkSpeed
00016DC6                            
00016DC6                            
00016DC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DC6                            
00016DC6                            
00016DC6                            sub_14D48:				; XREF: Sonic_Jump
00016DC6 11C0 F768                  		move.b	d0,($FFFFF768).w
00016DCA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016DCE 0600 0020                  		addi.b	#$20,d0
00016DD2 0200 00C0                  		andi.b	#$C0,d0
00016DD6 0C00 0040                  		cmpi.b	#$40,d0
00016DDA 6700 0000                  		beq.w	loc_14FD6
00016DDE 0C00 0080                  		cmpi.b	#$80,d0
00016DE2 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00016DE6 0C00 00C0                  		cmpi.b	#$C0,d0
00016DEA 6700 0000                  		beq.w	sub_14E50
00016DEE                            
00016DEE                            ; End of function sub_14D48
00016DEE                            
00016DEE                            ; ---------------------------------------------------------------------------
00016DEE                            ; Subroutine to	make Sonic land	on the floor after jumping
00016DEE                            ; ---------------------------------------------------------------------------
00016DEE                            
00016DEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DEE                            
00016DEE                            
00016DEE                            Sonic_HitFloor:				; XREF: Sonic_Floor
00016DEE 3428 000C                  		move.w	$C(a0),d2
00016DF2 3628 0008                  		move.w	8(a0),d3
00016DF6 7000                       		moveq	#0,d0
00016DF8 1028 0016                  		move.b	$16(a0),d0
00016DFC 4880                       		ext.w	d0
00016DFE D440                       		add.w	d0,d2
00016E00 1028 0017                  		move.b	$17(a0),d0
00016E04 4880                       		ext.w	d0
00016E06 D640                       		add.w	d0,d3
00016E08 49F8 F768                  		lea	($FFFFF768).w,a4
00016E0C 367C 0010                  		movea.w	#$10,a3
00016E10 3C3C 0000                  		move.w	#0,d6
00016E14 7A0D                       		moveq	#$D,d5
00016E16 6100 FC32                  		bsr.w	FindFloor
00016E1A 3F01                       		move.w	d1,-(sp)
00016E1C 3428 000C                  		move.w	$C(a0),d2
00016E20 3628 0008                  		move.w	8(a0),d3
00016E24 7000                       		moveq	#0,d0
00016E26 1028 0016                  		move.b	$16(a0),d0
00016E2A 4880                       		ext.w	d0
00016E2C D440                       		add.w	d0,d2
00016E2E 1028 0017                  		move.b	$17(a0),d0
00016E32 4880                       		ext.w	d0
00016E34 9640                       		sub.w	d0,d3
00016E36 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016E3A 367C 0010                  		movea.w	#$10,a3
00016E3E 3C3C 0000                  		move.w	#0,d6
00016E42 7A0D                       		moveq	#$D,d5
00016E44 6100 FC04                  		bsr.w	FindFloor
00016E48 301F                       		move.w	(sp)+,d0
00016E4A 143C 0000                  		move.b	#0,d2
00016E4E                            
00016E4E                            loc_14DD0:
00016E4E 1638 F76A                  		move.b	($FFFFF76A).w,d3
00016E52 B240                       		cmp.w	d0,d1
00016E54 6F00                       		ble.s	loc_14DDE
00016E56 1638 F768                  		move.b	($FFFFF768).w,d3
00016E5A C141                       		exg	d0,d1
00016E5C                            
00016E5C                            loc_14DDE:
00016E5C 0803 0000                  		btst	#0,d3
00016E60 6700                       		beq.s	locret_14DE6
00016E62 1602                       		move.b	d2,d3
00016E64                            
00016E64                            locret_14DE6:
00016E64 4E75                       		rts	
00016E66                            
00016E66                            ; End of function Sonic_HitFloor
00016E66                            
00016E66                            ; ===========================================================================
00016E66 3428 000C                  		move.w	$C(a0),d2
00016E6A 3628 0008                  		move.w	8(a0),d3
00016E6E                            
00016E6E                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00016E6E 0642 000A                  		addi.w	#$A,d2
00016E72 49F8 F768                  		lea	($FFFFF768).w,a4
00016E76 367C 0010                  		movea.w	#$10,a3
00016E7A 3C3C 0000                  		move.w	#0,d6
00016E7E 7A0E                       		moveq	#$E,d5
00016E80 6100 FBC8                  		bsr.w	FindFloor
00016E84 143C 0000                  		move.b	#0,d2
00016E88                            
00016E88                            loc_14E0A:				; XREF: sub_14EB4
00016E88 1638 F768                  		move.b	($FFFFF768).w,d3
00016E8C 0803 0000                  		btst	#0,d3
00016E90 6700                       		beq.s	locret_14E16
00016E92 1602                       		move.b	d2,d3
00016E94                            
00016E94                            locret_14E16:
00016E94 4E75                       		rts	
00016E96                            
00016E96                            ; ---------------------------------------------------------------------------
00016E96                            ; Subroutine allowing objects to interact with the floor
00016E96                            ; ---------------------------------------------------------------------------
00016E96                            
00016E96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E96                            
00016E96                            
00016E96                            ObjHitFloor:
00016E96 3628 0008                  		move.w	8(a0),d3
00016E9A                            
00016E9A                            ; End of function ObjHitFloor
00016E9A                            
00016E9A                            
00016E9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E9A                            
00016E9A                            
00016E9A                            ObjHitFloor2:
00016E9A 3428 000C                  		move.w	$C(a0),d2
00016E9E 7000                       		moveq	#0,d0
00016EA0 1028 0016                  		move.b	$16(a0),d0
00016EA4 4880                       		ext.w	d0
00016EA6 D440                       		add.w	d0,d2
00016EA8 49F8 F768                  		lea	($FFFFF768).w,a4
00016EAC 18BC 0000                  		move.b	#0,(a4)
00016EB0 367C 0010                  		movea.w	#$10,a3
00016EB4 3C3C 0000                  		move.w	#0,d6
00016EB8 7A0D                       		moveq	#$D,d5
00016EBA 6100 FB8E                  		bsr.w	FindFloor
00016EBE 1638 F768                  		move.b	($FFFFF768).w,d3
00016EC2 0803 0000                  		btst	#0,d3
00016EC6 6700                       		beq.s	locret_14E4E
00016EC8 163C 0000                  		move.b	#0,d3
00016ECC                            
00016ECC                            locret_14E4E:
00016ECC 4E75                       		rts	
00016ECE                            ; End of function ObjHitFloor2
00016ECE                            
00016ECE                            
00016ECE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016ECE                            
00016ECE                            
00016ECE                            sub_14E50:				; XREF: sub_14D48
00016ECE 3428 000C                  		move.w	$C(a0),d2
00016ED2 3628 0008                  		move.w	8(a0),d3
00016ED6 7000                       		moveq	#0,d0
00016ED8 1028 0017                  		move.b	$17(a0),d0
00016EDC 4880                       		ext.w	d0
00016EDE 9440                       		sub.w	d0,d2
00016EE0 1028 0016                  		move.b	$16(a0),d0
00016EE4 4880                       		ext.w	d0
00016EE6 D640                       		add.w	d0,d3
00016EE8 49F8 F768                  		lea	($FFFFF768).w,a4
00016EEC 367C 0010                  		movea.w	#$10,a3
00016EF0 3C3C 0000                  		move.w	#0,d6
00016EF4 7A0E                       		moveq	#$E,d5
00016EF6 6100 FC92                  		bsr.w	FindWall
00016EFA 3F01                       		move.w	d1,-(sp)
00016EFC 3428 000C                  		move.w	$C(a0),d2
00016F00 3628 0008                  		move.w	8(a0),d3
00016F04 7000                       		moveq	#0,d0
00016F06 1028 0017                  		move.b	$17(a0),d0
00016F0A 4880                       		ext.w	d0
00016F0C D440                       		add.w	d0,d2
00016F0E 1028 0016                  		move.b	$16(a0),d0
00016F12 4880                       		ext.w	d0
00016F14 D640                       		add.w	d0,d3
00016F16 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016F1A 367C 0010                  		movea.w	#$10,a3
00016F1E 3C3C 0000                  		move.w	#0,d6
00016F22 7A0E                       		moveq	#$E,d5
00016F24 6100 FC64                  		bsr.w	FindWall
00016F28 301F                       		move.w	(sp)+,d0
00016F2A 143C 00C0                  		move.b	#-$40,d2
00016F2E 6000 FF1E                  		bra.w	loc_14DD0
00016F32                            
00016F32                            ; End of function sub_14E50
00016F32                            
00016F32                            
00016F32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F32                            
00016F32                            
00016F32                            sub_14EB4:				; XREF: Sonic_Floor
00016F32 3428 000C                  		move.w	$C(a0),d2
00016F36 3628 0008                  		move.w	8(a0),d3
00016F3A                            
00016F3A                            loc_14EBC:
00016F3A 0643 000A                  		addi.w	#$A,d3
00016F3E 49F8 F768                  		lea	($FFFFF768).w,a4
00016F42 367C 0010                  		movea.w	#$10,a3
00016F46 3C3C 0000                  		move.w	#0,d6
00016F4A 7A0E                       		moveq	#$E,d5
00016F4C 6100 FC3C                  		bsr.w	FindWall
00016F50 143C 00C0                  		move.b	#-$40,d2
00016F54 6000 FF32                  		bra.w	loc_14E0A
00016F58                            
00016F58                            ; End of function sub_14EB4
00016F58                            
00016F58                            ; ---------------------------------------------------------------------------
00016F58                            ; Subroutine to	detect when an object hits a wall to its right
00016F58                            ; ---------------------------------------------------------------------------
00016F58                            
00016F58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F58                            
00016F58                            
00016F58                            ObjHitWallRight:
00016F58 D668 0008                  		add.w	8(a0),d3
00016F5C 3428 000C                  		move.w	$C(a0),d2
00016F60 49F8 F768                  		lea	($FFFFF768).w,a4
00016F64 18BC 0000                  		move.b	#0,(a4)
00016F68 367C 0010                  		movea.w	#$10,a3
00016F6C 3C3C 0000                  		move.w	#0,d6
00016F70 7A0E                       		moveq	#$E,d5
00016F72 6100 FC16                  		bsr.w	FindWall
00016F76 1638 F768                  		move.b	($FFFFF768).w,d3
00016F7A 0803 0000                  		btst	#0,d3
00016F7E 6700                       		beq.s	locret_14F06
00016F80 163C 00C0                  		move.b	#-$40,d3
00016F84                            
00016F84                            locret_14F06:
00016F84 4E75                       		rts	
00016F86                            
00016F86                            ; End of function ObjHitWallRight
00016F86                            
00016F86                            ; ---------------------------------------------------------------------------
00016F86                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00016F86                            ; touches them
00016F86                            ; ---------------------------------------------------------------------------
00016F86                            
00016F86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F86                            
00016F86                            
00016F86                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00016F86 3428 000C                  		move.w	$C(a0),d2
00016F8A 3628 0008                  		move.w	8(a0),d3
00016F8E 7000                       		moveq	#0,d0
00016F90 1028 0016                  		move.b	$16(a0),d0
00016F94 4880                       		ext.w	d0
00016F96 9440                       		sub.w	d0,d2
00016F98 0A42 000F                  		eori.w	#$F,d2
00016F9C 1028 0017                  		move.b	$17(a0),d0
00016FA0 4880                       		ext.w	d0
00016FA2 D640                       		add.w	d0,d3
00016FA4 49F8 F768                  		lea	($FFFFF768).w,a4
00016FA8 367C FFF0                  		movea.w	#-$10,a3
00016FAC 3C3C 1000                  		move.w	#$1000,d6
00016FB0 7A0E                       		moveq	#$E,d5
00016FB2 6100 FA96                  		bsr.w	FindFloor
00016FB6 3F01                       		move.w	d1,-(sp)
00016FB8 3428 000C                  		move.w	$C(a0),d2
00016FBC 3628 0008                  		move.w	8(a0),d3
00016FC0 7000                       		moveq	#0,d0
00016FC2 1028 0016                  		move.b	$16(a0),d0
00016FC6 4880                       		ext.w	d0
00016FC8 9440                       		sub.w	d0,d2
00016FCA 0A42 000F                  		eori.w	#$F,d2
00016FCE 1028 0017                  		move.b	$17(a0),d0
00016FD2 4880                       		ext.w	d0
00016FD4 9640                       		sub.w	d0,d3
00016FD6 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016FDA 367C FFF0                  		movea.w	#-$10,a3
00016FDE 3C3C 1000                  		move.w	#$1000,d6
00016FE2 7A0E                       		moveq	#$E,d5
00016FE4 6100 FA64                  		bsr.w	FindFloor
00016FE8 301F                       		move.w	(sp)+,d0
00016FEA 143C 0080                  		move.b	#-$80,d2
00016FEE 6000 FE5E                  		bra.w	loc_14DD0
00016FF2                            ; End of function Sonic_DontRunOnWalls
00016FF2                            
00016FF2                            ; ===========================================================================
00016FF2 3428 000C                  		move.w	$C(a0),d2
00016FF6 3628 0008                  		move.w	8(a0),d3
00016FFA                            
00016FFA                            loc_14F7C:
00016FFA 0442 000A                  		subi.w	#$A,d2
00016FFE 0A42 000F                  		eori.w	#$F,d2
00017002 49F8 F768                  		lea	($FFFFF768).w,a4
00017006 367C FFF0                  		movea.w	#-$10,a3
0001700A 3C3C 1000                  		move.w	#$1000,d6
0001700E 7A0E                       		moveq	#$E,d5
00017010 6100 FA38                  		bsr.w	FindFloor
00017014 143C 0080                  		move.b	#-$80,d2
00017018 6000 FE6E                  		bra.w	loc_14E0A
0001701C                            
0001701C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001701C                            
0001701C                            
0001701C                            ObjHitCeiling:
0001701C 3428 000C                  		move.w	$C(a0),d2
00017020 3628 0008                  		move.w	8(a0),d3
00017024 7000                       		moveq	#0,d0
00017026 1028 0016                  		move.b	$16(a0),d0
0001702A 4880                       		ext.w	d0
0001702C 9440                       		sub.w	d0,d2
0001702E 0A42 000F                  		eori.w	#$F,d2
00017032 49F8 F768                  		lea	($FFFFF768).w,a4
00017036 367C FFF0                  		movea.w	#-$10,a3
0001703A 3C3C 1000                  		move.w	#$1000,d6
0001703E 7A0E                       		moveq	#$E,d5
00017040 6100 FA08                  		bsr.w	FindFloor
00017044 1638 F768                  		move.b	($FFFFF768).w,d3
00017048 0803 0000                  		btst	#0,d3
0001704C 6700                       		beq.s	locret_14FD4
0001704E 163C 0080                  		move.b	#-$80,d3
00017052                            
00017052                            locret_14FD4:
00017052 4E75                       		rts	
00017054                            ; End of function ObjHitCeiling
00017054                            
00017054                            ; ===========================================================================
00017054                            
00017054                            loc_14FD6:				; XREF: sub_14D48
00017054 3428 000C                  		move.w	$C(a0),d2
00017058 3628 0008                  		move.w	8(a0),d3
0001705C 7000                       		moveq	#0,d0
0001705E 1028 0017                  		move.b	$17(a0),d0
00017062 4880                       		ext.w	d0
00017064 9440                       		sub.w	d0,d2
00017066 1028 0016                  		move.b	$16(a0),d0
0001706A 4880                       		ext.w	d0
0001706C 9640                       		sub.w	d0,d3
0001706E 0A43 000F                  		eori.w	#$F,d3
00017072 49F8 F768                  		lea	($FFFFF768).w,a4
00017076 367C FFF0                  		movea.w	#-$10,a3
0001707A 3C3C 0800                  		move.w	#$800,d6
0001707E 7A0E                       		moveq	#$E,d5
00017080 6100 FB08                  		bsr.w	FindWall
00017084 3F01                       		move.w	d1,-(sp)
00017086 3428 000C                  		move.w	$C(a0),d2
0001708A 3628 0008                  		move.w	8(a0),d3
0001708E 7000                       		moveq	#0,d0
00017090 1028 0017                  		move.b	$17(a0),d0
00017094 4880                       		ext.w	d0
00017096 D440                       		add.w	d0,d2
00017098 1028 0016                  		move.b	$16(a0),d0
0001709C 4880                       		ext.w	d0
0001709E 9640                       		sub.w	d0,d3
000170A0 0A43 000F                  		eori.w	#$F,d3
000170A4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000170A8 367C FFF0                  		movea.w	#-$10,a3
000170AC 3C3C 0800                  		move.w	#$800,d6
000170B0 7A0E                       		moveq	#$E,d5
000170B2 6100 FAD6                  		bsr.w	FindWall
000170B6 301F                       		move.w	(sp)+,d0
000170B8 143C 0040                  		move.b	#$40,d2
000170BC 6000 FD90                  		bra.w	loc_14DD0
000170C0                            
000170C0                            ; ---------------------------------------------------------------------------
000170C0                            ; Subroutine to	stop Sonic when	he jumps at a wall
000170C0                            ; ---------------------------------------------------------------------------
000170C0                            
000170C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000170C0                            
000170C0                            
000170C0                            Sonic_HitWall:				; XREF: Sonic_Floor
000170C0 3428 000C                  		move.w	$C(a0),d2
000170C4 3628 0008                  		move.w	8(a0),d3
000170C8                            
000170C8                            loc_1504A:
000170C8 0443 000A                  		subi.w	#$A,d3
000170CC 0A43 000F                  		eori.w	#$F,d3
000170D0 49F8 F768                  		lea	($FFFFF768).w,a4
000170D4 367C FFF0                  		movea.w	#-$10,a3
000170D8 3C3C 0800                  		move.w	#$800,d6
000170DC 7A0E                       		moveq	#$E,d5
000170DE 6100 FAAA                  		bsr.w	FindWall
000170E2 143C 0040                  		move.b	#$40,d2
000170E6 6000 FDA0                  		bra.w	loc_14E0A
000170EA                            ; End of function Sonic_HitWall
000170EA                            
000170EA                            ; ---------------------------------------------------------------------------
000170EA                            ; Subroutine to	detect when an object hits a wall to its left
000170EA                            ; ---------------------------------------------------------------------------
000170EA                            
000170EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000170EA                            
000170EA                            
000170EA                            ObjHitWallLeft:
000170EA D668 0008                  		add.w	8(a0),d3
000170EE 3428 000C                  		move.w	$C(a0),d2
000170F2 49F8 F768                  		lea	($FFFFF768).w,a4
000170F6 18BC 0000                  		move.b	#0,(a4)
000170FA 367C FFF0                  		movea.w	#-$10,a3
000170FE 3C3C 0800                  		move.w	#$800,d6
00017102 7A0E                       		moveq	#$E,d5
00017104 6100 FA84                  		bsr.w	FindWall
00017108 1638 F768                  		move.b	($FFFFF768).w,d3
0001710C 0803 0000                  		btst	#0,d3
00017110 6700                       		beq.s	locret_15098
00017112 163C 0040                  		move.b	#$40,d3
00017116                            
00017116                            locret_15098:
00017116 4E75                       		rts	
00017118                            ; End of function ObjHitWallLeft
00017118                            
00017118                            ; ===========================================================================
00017118                            ; ---------------------------------------------------------------------------
00017118                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00017118                            ; ---------------------------------------------------------------------------
00017118                            
00017118                            Obj66:					; XREF: Obj_Index
00017118 7000                       		moveq	#0,d0
0001711A 1028 0024                  		move.b	$24(a0),d0
0001711E 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00017122 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00017126                            ; ===========================================================================
00017126 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00017128 0000                       		dc.w Obj66_Action-Obj66_Index
0001712A 0000                       		dc.w Obj66_Display-Obj66_Index
0001712C 0000                       		dc.w Obj66_Release-Obj66_Index
0001712E                            ; ===========================================================================
0001712E                            
0001712E                            Obj66_Main:				; XREF: Obj66_Index
0001712E 5428 0024                  		addq.b	#2,$24(a0)
00017132 323C 0001                  		move.w	#1,d1
00017136 2248                       		movea.l	a0,a1
00017138 6000                       		bra.s	Obj66_MakeItem
0001713A                            ; ===========================================================================
0001713A                            
0001713A                            Obj66_Loop:
0001713A 4EB9 0000 F0C0             		jsr	(SingleObjLoad).l
00017140 6600                       		bne.s	loc_150FE
00017142 12BC 0066                  		move.b	#$66,0(a1)
00017146 5829 0024                  		addq.b	#4,$24(a1)
0001714A 3368 0008 0008             		move.w	8(a0),8(a1)
00017150 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017156 137C 0003 0018             		move.b	#3,$18(a1)
0001715C 137C 0010 001A             		move.b	#$10,$1A(a1)
00017162                            
00017162                            Obj66_MakeItem:				; XREF: Obj66_Main
00017162 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
0001716A 337C 4348 0002             		move.w	#$4348,2(a1)
00017170 0029 0004 0001             		ori.b	#4,1(a1)
00017176 137C 0038 0019             		move.b	#$38,$19(a1)
0001717C                            
0001717C                            loc_150FE:
0001717C 51C9 FFBC                  		dbf	d1,Obj66_Loop
00017180                            
00017180 117C 0030 0019             		move.b	#$30,$19(a0)
00017186 117C 0004 0018             		move.b	#4,$18(a0)
0001718C 317C 003C 0030             		move.w	#$3C,$30(a0)
00017192 117C 0001 0034             		move.b	#1,$34(a0)
00017198 1168 0028 0038             		move.b	$28(a0),$38(a0)
0001719E                            
0001719E                            Obj66_Action:				; XREF: Obj66_Index
0001719E 6100 0000                  		bsr.w	Obj66_ChkSwitch
000171A2 4A28 0001                  		tst.b	1(a0)
000171A6 6A00 0000                  		bpl.w	Obj66_Display
000171AA 323C 0030                  		move.w	#$30,d1
000171AE 3401                       		move.w	d1,d2
000171B0 3602                       		move.w	d2,d3
000171B2 5243                       		addq.w	#1,d3
000171B4 3828 0008                  		move.w	8(a0),d4
000171B8 6100 A11E                  		bsr.w	SolidObject
000171BC 0828 0005 0022             		btst	#5,$22(a0)
000171C2 6700 0000                  		beq.w	Obj66_Display
000171C6 43F8 D000                  		lea	($FFFFD000).w,a1
000171CA 720E                       		moveq	#$E,d1
000171CC 3029 0008                  		move.w	8(a1),d0
000171D0 B068 0008                  		cmp.w	8(a0),d0
000171D4 6500                       		bcs.s	Obj66_GrabSonic
000171D6 7207                       		moveq	#7,d1
000171D8                            
000171D8                            Obj66_GrabSonic:
000171D8 B228 001A                  		cmp.b	$1A(a0),d1
000171DC 6600                       		bne.s	Obj66_Display
000171DE 1141 0032                  		move.b	d1,$32(a0)
000171E2 5828 0024                  		addq.b	#4,$24(a0)
000171E6 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000171EC 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
000171F2 337C 0800 0020             		move.w	#$800,$20(a1)
000171F8 337C 0000 0010             		move.w	#0,$10(a1)
000171FE 337C 0000 0012             		move.w	#0,$12(a1)
00017204 08A8 0005 0022             		bclr	#5,$22(a0)
0001720A 08A9 0005 0022             		bclr	#5,$22(a1)
00017210 08E9 0001 0022             		bset	#1,$22(a1)
00017216 3429 0008                  		move.w	8(a1),d2
0001721A 3629 000C                  		move.w	$C(a1),d3
0001721E 6100 0000                  		bsr.w	Obj66_ChgPos
00017222 D569 0008                  		add.w	d2,8(a1)
00017226 D769 000C                  		add.w	d3,$C(a1)
0001722A E0E9 0008                  		asr	8(a1)
0001722E E0E9 000C                  		asr	$C(a1)
00017232                            
00017232                            Obj66_Display:				; XREF: Obj66_Index
00017232 6000 9D80                  		bra.w	MarkObjGone
00017236                            ; ===========================================================================
00017236                            
00017236                            Obj66_Release:				; XREF: Obj66_Index
00017236 1028 001A                  		move.b	$1A(a0),d0
0001723A 0C00 0004                  		cmpi.b	#4,d0
0001723E 6700                       		beq.s	loc_151C8
00017240 0C00 0007                  		cmpi.b	#7,d0
00017244 6600                       		bne.s	loc_151F8
00017246                            
00017246                            loc_151C8:
00017246 B028 0032                  		cmp.b	$32(a0),d0
0001724A 6700                       		beq.s	loc_151F8
0001724C 43F8 D000                  		lea	($FFFFD000).w,a1
00017250 337C 0000 0010             		move.w	#0,$10(a1)
00017256 337C 0800 0012             		move.w	#$800,$12(a1)
0001725C 0C00 0004                  		cmpi.b	#4,d0
00017260 6700                       		beq.s	loc_151F0
00017262 337C 0800 0010             		move.w	#$800,$10(a1)
00017268 337C 0800 0012             		move.w	#$800,$12(a1)
0001726E                            
0001726E                            loc_151F0:
0001726E 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00017272 5928 0024                  		subq.b	#4,$24(a0)
00017276                            
00017276                            loc_151F8:
00017276 6100                       		bsr.s	Obj66_ChkSwitch
00017278 6100                       		bsr.s	Obj66_ChgPos
0001727A 6000 9D38                  		bra.w	MarkObjGone
0001727E                            
0001727E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001727E                            
0001727E                            
0001727E                            Obj66_ChkSwitch:			; XREF: Obj66_Action
0001727E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017282 7000                       		moveq	#0,d0
00017284 1028 0038                  		move.b	$38(a0),d0
00017288 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
0001728E 6700                       		beq.s	loc_15224	; if not, branch
00017290 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00017294 6600                       		bne.s	Obj66_Animate	; if yes, branch
00017296 4428 0034                  		neg.b	$34(a0)
0001729A 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
000172A0 6000                       		bra.s	Obj66_Animate
000172A2                            ; ===========================================================================
000172A2                            
000172A2                            loc_15224:
000172A2 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
000172A6                            
000172A6                            Obj66_Animate:
000172A6 5328 001E                  		subq.b	#1,$1E(a0)
000172AA 6A00                       		bpl.s	locret_15246
000172AC 117C 0007 001E             		move.b	#7,$1E(a0)
000172B2 1228 0034                  		move.b	$34(a0),d1
000172B6 1028 001A                  		move.b	$1A(a0),d0
000172BA D001                       		add.b	d1,d0
000172BC 0200 000F                  		andi.b	#$F,d0
000172C0 1140 001A                  		move.b	d0,$1A(a0)
000172C4                            
000172C4                            locret_15246:
000172C4 4E75                       		rts	
000172C6                            ; End of function Obj66_ChkSwitch
000172C6                            
000172C6                            
000172C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000172C6                            
000172C6                            
000172C6                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
000172C6 43F8 D000                  		lea	($FFFFD000).w,a1
000172CA 7000                       		moveq	#0,d0
000172CC 1028 001A                  		move.b	$1A(a0),d0
000172D0 D040                       		add.w	d0,d0
000172D2 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
000172D6 101A                       		move.b	(a2)+,d0
000172D8 4880                       		ext.w	d0
000172DA D068 0008                  		add.w	8(a0),d0
000172DE 3340 0008                  		move.w	d0,8(a1)
000172E2 101A                       		move.b	(a2)+,d0
000172E4 4880                       		ext.w	d0
000172E6 D068 000C                  		add.w	$C(a0),d0
000172EA 3340 000C                  		move.w	d0,$C(a1)
000172EE 4E75                       		rts	
000172F0                            ; End of function Obj66_ChgPos
000172F0                            
000172F0                            ; ===========================================================================
000172F0 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
000172F4 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
000172F8 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
000172FC 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00017300 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00017304 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00017308 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
0001730C E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00017310                            ; ---------------------------------------------------------------------------
00017310                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00017310                            ; ---------------------------------------------------------------------------
00017310                            Map_obj66:
00017310                            	include "_maps\obj66.asm"
00017310                            ; ---------------------------------------------------------------------------
00017310                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00017310                            ; ---------------------------------------------------------------------------
00017310 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00017314 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00017318 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
0001731C 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00017320 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00017324 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00017328 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
0001732C 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00017330 0000                       		dc.w byte_154A4-Map_obj66
00017332 06                         byte_152B4:	dc.b 6
00017333 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00017338 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
0001733D E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00017342 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00017347 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
0001734C 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00017351 06                         byte_152D3:	dc.b 6
00017352 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00017357 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
0001735C F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00017361 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00017366 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
0001736B 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00017370 06                         byte_152F2:	dc.b 6
00017371 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00017376 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
0001737B 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00017380 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00017385 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
0001738A 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
0001738F 06                         byte_15311:	dc.b 6
00017390 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00017395 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
0001739A 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
0001739F 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
000173A4 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
000173A9 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
000173AE 06                         byte_15330:	dc.b 6
000173AF 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
000173B4 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
000173B9 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
000173BE 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
000173C3 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
000173C8 200A 1800 00               		dc.b $20, $A, $18, 0, 0
000173CD 06                         byte_1534F:	dc.b 6
000173CE 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
000173D3 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
000173D8 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
000173DD 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
000173E2 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
000173E7 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
000173EC 06                         byte_1536E:	dc.b 6
000173ED 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
000173F2 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
000173F7 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
000173FC 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00017401 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00017406 180A 1800 18               		dc.b $18, $A, $18, 0, $18
0001740B 06                         byte_1538D:	dc.b 6
0001740C 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00017411 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00017416 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
0001741B F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00017420 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00017425 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
0001742A 06                         byte_153AC:	dc.b 6
0001742B E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00017430 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00017435 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
0001743A E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
0001743F 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00017444 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00017449 06                         byte_153CB:	dc.b 6
0001744A D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
0001744F E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00017454 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00017459 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
0001745E F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00017463 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00017468 06                         byte_153EA:	dc.b 6
00017469 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
0001746E E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00017473 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00017478 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
0001747D E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00017482 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00017487 06                         byte_15409:	dc.b 6
00017488 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
0001748D D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00017492 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00017497 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
0001749C E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
000174A1 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
000174A6 06                         byte_15428:	dc.b 6
000174A7 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
000174AC D005 1845 08               		dc.b $D0, 5, $18, $45, 8
000174B1 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
000174B6 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
000174BB E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
000174C0 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
000174C5 06                         byte_15447:	dc.b 6
000174C6 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
000174CB D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
000174D0 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
000174D5 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
000174DA E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
000174DF E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
000174E4 06                         byte_15466:	dc.b 6
000174E5 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
000174EA D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
000174EF D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
000174F4 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
000174F9 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
000174FE E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00017503 06                         byte_15485:	dc.b 6
00017504 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00017509 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
0001750E DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00017513 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00017518 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
0001751D F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00017522 0C                         byte_154A4:	dc.b $C
00017523 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00017528 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
0001752D E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00017532 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00017537 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
0001753C E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00017541 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00017546 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
0001754B 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00017550 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00017555 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
0001755A 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00017560 00                         		even
00017560 00                         		even
00017560                            
00017560                            ; ===========================================================================
00017560                            ; ---------------------------------------------------------------------------
00017560                            ; Object 67 - disc that	you run	around (SBZ)
00017560                            ; ---------------------------------------------------------------------------
00017560                            
00017560                            Obj67:					; XREF: Obj_Index
00017560 7000                       		moveq	#0,d0
00017562 1028 0024                  		move.b	$24(a0),d0
00017566 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
0001756A 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
0001756E                            ; ===========================================================================
0001756E 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00017570 0000                       		dc.w Obj67_Action-Obj67_Index
00017572                            ; ===========================================================================
00017572                            
00017572                            Obj67_Main:				; XREF: Obj67_Index
00017572 5428 0024                  		addq.b	#2,$24(a0)
00017576 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
0001757E 317C C344 0002             		move.w	#$C344,2(a0)
00017584 117C 0004 0001             		move.b	#4,1(a0)
0001758A 117C 0004 0018             		move.b	#4,$18(a0)
00017590 117C 0008 0019             		move.b	#8,$19(a0)
00017596 3168 0008 0032             		move.w	8(a0),$32(a0)
0001759C 3168 000C 0030             		move.w	$C(a0),$30(a0)
000175A2 117C 0018 0034             		move.b	#$18,$34(a0)
000175A8 117C 0048 0038             		move.b	#$48,$38(a0)
000175AE 1228 0028                  		move.b	$28(a0),d1	; get object type
000175B2 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000175B6 6700                       		beq.s	loc_15546
000175B8 117C 0010 0034             		move.b	#$10,$34(a0)
000175BE 117C 0038 0038             		move.b	#$38,$38(a0)
000175C4                            
000175C4                            loc_15546:
000175C4 1228 0028                  		move.b	$28(a0),d1	; get object type
000175C8 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000175CC 4881                       		ext.w	d1
000175CE E741                       		asl.w	#3,d1
000175D0 3141 0036                  		move.w	d1,$36(a0)
000175D4 1028 0022                  		move.b	$22(a0),d0
000175D8 E418                       		ror.b	#2,d0
000175DA 0200 00C0                  		andi.b	#-$40,d0
000175DE 1140 0026                  		move.b	d0,$26(a0)
000175E2                            
000175E2                            Obj67_Action:				; XREF: Obj67_Index
000175E2 6100 0000                  		bsr.w	Obj67_MoveSonic
000175E6 6100 0000                  		bsr.w	Obj67_MoveSpot
000175EA 6000 0000                  		bra.w	Obj67_ChkDel
000175EE                            ; ===========================================================================
000175EE                            
000175EE                            Obj67_MoveSonic:			; XREF: Obj67_Action
000175EE 7400                       		moveq	#0,d2
000175F0 1428 0038                  		move.b	$38(a0),d2
000175F4 3602                       		move.w	d2,d3
000175F6 D643                       		add.w	d3,d3
000175F8 43F8 D000                  		lea	($FFFFD000).w,a1
000175FC 3029 0008                  		move.w	8(a1),d0
00017600 9068 0032                  		sub.w	$32(a0),d0
00017604 D042                       		add.w	d2,d0
00017606 B043                       		cmp.w	d3,d0
00017608 6400                       		bcc.s	loc_155A8
0001760A 3229 000C                  		move.w	$C(a1),d1
0001760E 9268 0030                  		sub.w	$30(a0),d1
00017612 D242                       		add.w	d2,d1
00017614 B243                       		cmp.w	d3,d1
00017616 6400                       		bcc.s	loc_155A8
00017618 0829 0001 0022             		btst	#1,$22(a1)
0001761E 6700                       		beq.s	loc_155B8
00017620 4228 003A                  		clr.b	$3A(a0)
00017624 4E75                       		rts	
00017626                            ; ===========================================================================
00017626                            
00017626                            loc_155A8:
00017626 4A28 003A                  		tst.b	$3A(a0)
0001762A 6700                       		beq.s	locret_155B6
0001762C 4229 0038                  		clr.b	$38(a1)
00017630 4228 003A                  		clr.b	$3A(a0)
00017634                            
00017634                            locret_155B6:
00017634 4E75                       		rts	
00017636                            ; ===========================================================================
00017636                            
00017636                            loc_155B8:
00017636 4A28 003A                  		tst.b	$3A(a0)
0001763A 6600                       		bne.s	loc_155E2
0001763C 117C 0001 003A             		move.b	#1,$3A(a0)
00017642 0829 0002 0022             		btst	#2,$22(a1)
00017648 6600                       		bne.s	loc_155D0
0001764A 4229 001C                  		clr.b	$1C(a1)
0001764E                            
0001764E                            loc_155D0:
0001764E 08A9 0005 0022             		bclr	#5,$22(a1)
00017654 137C 0001 001D             		move.b	#1,$1D(a1)
0001765A 137C 0001 0038             		move.b	#1,$38(a1)
00017660                            
00017660                            loc_155E2:
00017660 3029 0020                  		move.w	$20(a1),d0
00017664 4A68 0036                  		tst.w	$36(a0)
00017668 6A00                       		bpl.s	loc_15608
0001766A 0C40 FC00                  		cmpi.w	#-$400,d0
0001766E 6F00                       		ble.s	loc_155FA
00017670 337C FC00 0020             		move.w	#-$400,$20(a1)
00017676 4E75                       		rts	
00017678                            ; ===========================================================================
00017678                            
00017678                            loc_155FA:
00017678 0C40 F100                  		cmpi.w	#-$F00,d0
0001767C 6C00                       		bge.s	locret_15606
0001767E 337C F100 0020             		move.w	#-$F00,$20(a1)
00017684                            
00017684                            locret_15606:
00017684 4E75                       		rts	
00017686                            ; ===========================================================================
00017686                            
00017686                            loc_15608:
00017686 0C40 0400                  		cmpi.w	#$400,d0
0001768A 6C00                       		bge.s	loc_15616
0001768C 337C 0400 0020             		move.w	#$400,$20(a1)
00017692 4E75                       		rts	
00017694                            ; ===========================================================================
00017694                            
00017694                            loc_15616:
00017694 0C40 0F00                  		cmpi.w	#$F00,d0
00017698 6F00                       		ble.s	locret_15622
0001769A 337C 0F00 0020             		move.w	#$F00,$20(a1)
000176A0                            
000176A0                            locret_15622:
000176A0 4E75                       		rts	
000176A2                            ; ===========================================================================
000176A2                            
000176A2                            Obj67_MoveSpot:				; XREF: Obj67_Action
000176A2 3028 0036                  		move.w	$36(a0),d0
000176A6 D168 0026                  		add.w	d0,$26(a0)
000176AA 1028 0026                  		move.b	$26(a0),d0
000176AE 4EB9 0000 29F6             		jsr	(CalcSine).l
000176B4 3428 0030                  		move.w	$30(a0),d2
000176B8 3628 0032                  		move.w	$32(a0),d3
000176BC 7800                       		moveq	#0,d4
000176BE 1828 0034                  		move.b	$34(a0),d4
000176C2 E14C                       		lsl.w	#8,d4
000176C4 2A04                       		move.l	d4,d5
000176C6 C9C0                       		muls.w	d0,d4
000176C8 4844                       		swap	d4
000176CA CBC1                       		muls.w	d1,d5
000176CC 4845                       		swap	d5
000176CE D842                       		add.w	d2,d4
000176D0 DA43                       		add.w	d3,d5
000176D2 3144 000C                  		move.w	d4,$C(a0)
000176D6 3145 0008                  		move.w	d5,8(a0)
000176DA 4E75                       		rts	
000176DC                            ; ===========================================================================
000176DC                            
000176DC                            Obj67_ChkDel:				; XREF: Obj67_Action
000176DC 3028 0032                  		move.w	$32(a0),d0
000176E0 0240 FF80                  		andi.w	#-$80,d0
000176E4 3238 F700                  		move.w	($FFFFF700).w,d1
000176E8 0441 0080                  		subi.w	#$80,d1
000176EC 0241 FF80                  		andi.w	#-$80,d1
000176F0 9041                       		sub.w	d1,d0
000176F2 0C40 0280                  		cmpi.w	#$280,d0
000176F6 6200                       		bhi.s	Obj67_Delete
000176F8 4EF9 0000 E96A             		jmp	DisplaySprite
000176FE                            ; ===========================================================================
000176FE                            
000176FE                            Obj67_Delete:
000176FE 4EF9 0000 E9BA             		jmp	DeleteObject
00017704                            ; ===========================================================================
00017704                            ; ---------------------------------------------------------------------------
00017704                            ; Sprite mappings - disc that you run around (SBZ)
00017704                            ; (It's just a small blob that moves around in a circle. The disc itself is
00017704                            ; part of the level tiles.)
00017704                            ; ---------------------------------------------------------------------------
00017704                            Map_obj67:
00017704                            	include "_maps\obj67.asm"
00017704                            ; ---------------------------------------------------------------------------
00017704                            ; Sprite mappings - disc that you run around (SBZ)
00017704                            ; (It's just a small blob that moves around in a circle. The disc itself is
00017704                            ; part of the level tiles.)
00017704                            ; ---------------------------------------------------------------------------
00017704 0000                       		dc.w byte_15688-Map_obj67
00017706 01                         byte_15688:	dc.b 1
00017707 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001770C                            		even
0001770C                            		even
0001770C                            
0001770C                            ; ===========================================================================
0001770C                            ; ---------------------------------------------------------------------------
0001770C                            ; Object 68 - conveyor belts (SBZ)
0001770C                            ; ---------------------------------------------------------------------------
0001770C                            
0001770C                            Obj68:					; XREF: Obj_Index
0001770C 7000                       		moveq	#0,d0
0001770E 1028 0024                  		move.b	$24(a0),d0
00017712 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00017716 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
0001771A                            ; ===========================================================================
0001771A 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
0001771C 0000                       		dc.w Obj68_Action-Obj68_Index
0001771E                            ; ===========================================================================
0001771E                            
0001771E                            Obj68_Main:				; XREF: Obj68_Index
0001771E 5428 0024                  		addq.b	#2,$24(a0)
00017722 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00017728 1228 0028                  		move.b	$28(a0),d1	; get object type
0001772C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00017730 6700                       		beq.s	loc_156BA	; if zero, branch
00017732 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00017738                            
00017738                            loc_156BA:
00017738 1228 0028                  		move.b	$28(a0),d1	; get object type
0001773C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00017740 4881                       		ext.w	d1
00017742 E841                       		asr.w	#4,d1
00017744 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00017748                            
00017748                            Obj68_Action:				; XREF: Obj68_Index
00017748 6100                       		bsr.s	Obj68_MoveSonic
0001774A 3028 0008                  		move.w	8(a0),d0
0001774E 0240 FF80                  		andi.w	#$FF80,d0
00017752 3238 F700                  		move.w	($FFFFF700).w,d1
00017756 0441 0080                  		subi.w	#$80,d1
0001775A 0241 FF80                  		andi.w	#$FF80,d1
0001775E 9041                       		sub.w	d1,d0
00017760 0C40 0280                  		cmpi.w	#$280,d0
00017764 6300                       		bls.s	Obj68_NoDel
00017766 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001776A 6700                       		beq.s	Obj68_Delete		; if it's zero, don't remember object
0001776C 3440                       		movea.w	d0,a2	; load address into a2
0001776E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017772 6000                       		bra.s	Obj68_Delete	; and delete object
00017774                            
00017774                            Obj68_NoDel:
00017774 4E75                       		rts	
00017776                            ; ===========================================================================
00017776                            
00017776                            Obj68_Delete:
00017776 4EF9 0000 E9BA             		jmp	DeleteObject
0001777C                            ; ===========================================================================
0001777C                            
0001777C                            Obj68_MoveSonic:			; XREF: Obj68_Action
0001777C 7400                       		moveq	#0,d2
0001777E 1428 0038                  		move.b	$38(a0),d2
00017782 3602                       		move.w	d2,d3
00017784 D643                       		add.w	d3,d3
00017786 43F8 D000                  		lea	($FFFFD000).w,a1
0001778A 3029 0008                  		move.w	8(a1),d0
0001778E 9068 0008                  		sub.w	8(a0),d0
00017792 D042                       		add.w	d2,d0
00017794 B043                       		cmp.w	d3,d0
00017796 6400                       		bcc.s	locret_1572E
00017798 3229 000C                  		move.w	$C(a1),d1
0001779C 9268 000C                  		sub.w	$C(a0),d1
000177A0 0641 0030                  		addi.w	#$30,d1
000177A4 0C41 0030                  		cmpi.w	#$30,d1
000177A8 6400                       		bcc.s	locret_1572E
000177AA 0829 0001 0022             		btst	#1,$22(a1)
000177B0 6600                       		bne.s	locret_1572E
000177B2 3028 0036                  		move.w	$36(a0),d0
000177B6 D169 0008                  		add.w	d0,8(a1)
000177BA                            
000177BA                            locret_1572E:
000177BA 4E75                       		rts	
000177BC                            
000177BC                            ; ===========================================================================
000177BC                            ; ---------------------------------------------------------------------------
000177BC                            ; Object 69 - spinning platforms and trapdoors (SBZ)
000177BC                            ; ---------------------------------------------------------------------------
000177BC                            
000177BC                            Obj69:					; XREF: Obj_Index
000177BC 7000                       		moveq	#0,d0
000177BE 1028 0024                  		move.b	$24(a0),d0
000177C2 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
000177C6 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
000177CA                            ; ===========================================================================
000177CA 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
000177CC 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
000177CE 0000                       		dc.w Obj69_Spinner-Obj69_Index
000177D0                            ; ===========================================================================
000177D0                            
000177D0                            Obj69_Main:				; XREF: Obj69_Index
000177D0 5428 0024                  		addq.b	#2,$24(a0)
000177D4 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
000177DC 317C 4492 0002             		move.w	#$4492,2(a0)
000177E2 0028 0004 0001             		ori.b	#4,1(a0)
000177E8 117C 0080 0019             		move.b	#$80,$19(a0)
000177EE 7000                       		moveq	#0,d0
000177F0 1028 0028                  		move.b	$28(a0),d0
000177F4 0240 000F                  		andi.w	#$F,d0
000177F8 C0FC 003C                  		mulu.w	#$3C,d0
000177FC 3140 0032                  		move.w	d0,$32(a0)
00017800 4A28 0028                  		tst.b	$28(a0)
00017804 6A00                       		bpl.s	Obj69_Trapdoor
00017806 5428 0024                  		addq.b	#2,$24(a0)
0001780A 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00017812 317C 04DF 0002             		move.w	#$4DF,2(a0)
00017818 117C 0010 0019             		move.b	#$10,$19(a0)
0001781E 117C 0002 001C             		move.b	#2,$1C(a0)
00017824 7000                       		moveq	#0,d0
00017826 1028 0028                  		move.b	$28(a0),d0	; get object type
0001782A 3200                       		move.w	d0,d1
0001782C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00017830 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00017834 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00017838 3140 0032                  		move.w	d0,$32(a0)
0001783C 0241 0070                  		andi.w	#$70,d1
00017840 0641 0010                  		addi.w	#$10,d1
00017844 E549                       		lsl.w	#2,d1
00017846 5341                       		subq.w	#1,d1
00017848 3141 0036                  		move.w	d1,$36(a0)
0001784C 6000                       		bra.s	Obj69_Spinner
0001784E                            ; ===========================================================================
0001784E                            
0001784E                            Obj69_Trapdoor:				; XREF: Obj69_Index
0001784E 5368 0030                  		subq.w	#1,$30(a0)
00017852 6A00                       		bpl.s	Obj69_Animate
00017854 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001785A 0868 0000 001C             		bchg	#0,$1C(a0)
00017860 4A28 0001                  		tst.b	1(a0)
00017864 6A00                       		bpl.s	Obj69_Animate
00017866 303C 00BB                  		move.w	#$BB,d0
0001786A 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play door sound
00017870                            
00017870                            Obj69_Animate:
00017870 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00017876 4EB9 0000 B9CA             		jsr	AnimateSprite
0001787C 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00017880 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00017882 323C 004B                  		move.w	#$4B,d1
00017886 343C 000C                  		move.w	#$C,d2
0001788A 3602                       		move.w	d2,d3
0001788C 5243                       		addq.w	#1,d3
0001788E 3828 0008                  		move.w	8(a0),d4
00017892 6100 9A44                  		bsr.w	SolidObject
00017896 6000 971C                  		bra.w	MarkObjGone
0001789A                            ; ===========================================================================
0001789A                            
0001789A                            Obj69_NotSolid:
0001789A 0828 0003 0022             		btst	#3,$22(a0)
000178A0 6700                       		beq.s	Obj69_Display
000178A2 43F8 D000                  		lea	($FFFFD000).w,a1
000178A6 08A9 0003 0022             		bclr	#3,$22(a1)
000178AC 08A8 0003 0022             		bclr	#3,$22(a0)
000178B2 4228 0025                  		clr.b	$25(a0)
000178B6                            
000178B6                            Obj69_Display:
000178B6 6000 96FC                  		bra.w	MarkObjGone
000178BA                            ; ===========================================================================
000178BA                            
000178BA                            Obj69_Spinner:				; XREF: Obj69_Index
000178BA 3038 FE04                  		move.w	($FFFFFE04).w,d0
000178BE C068 0036                  		and.w	$36(a0),d0
000178C2 6600                       		bne.s	Obj69_Delay
000178C4 117C 0001 0034             		move.b	#1,$34(a0)
000178CA                            
000178CA                            Obj69_Delay:
000178CA 4A28 0034                  		tst.b	$34(a0)
000178CE 6700                       		beq.s	Obj69_Animate2
000178D0 5368 0030                  		subq.w	#1,$30(a0)
000178D4 6A00                       		bpl.s	Obj69_Animate2
000178D6 3168 0032 0030             		move.w	$32(a0),$30(a0)
000178DC 4228 0034                  		clr.b	$34(a0)
000178E0 0868 0000 001C             		bchg	#0,$1C(a0)
000178E6                            
000178E6                            Obj69_Animate2:
000178E6 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000178EC 4EB9 0000 B9CA             		jsr	AnimateSprite
000178F2 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
000178F6 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
000178F8 323C 001B                  		move.w	#$1B,d1
000178FC 343C 0007                  		move.w	#7,d2
00017900 3602                       		move.w	d2,d3
00017902 5243                       		addq.w	#1,d3
00017904 3828 0008                  		move.w	8(a0),d4
00017908 6100 99CE                  		bsr.w	SolidObject
0001790C 6000 96A6                  		bra.w	MarkObjGone
00017910                            ; ===========================================================================
00017910                            
00017910                            Obj69_NotSolid2:
00017910 0828 0003 0022             		btst	#3,$22(a0)
00017916 6700                       		beq.s	Obj69_Display2
00017918 43F8 D000                  		lea	($FFFFD000).w,a1
0001791C 08A9 0003 0022             		bclr	#3,$22(a1)
00017922 08A8 0003 0022             		bclr	#3,$22(a0)
00017928 4228 0025                  		clr.b	$25(a0)
0001792C                            
0001792C                            Obj69_Display2:
0001792C 6000 9686                  		bra.w	MarkObjGone
00017930                            ; ===========================================================================
00017930                            Ani_obj69:
00017930                            	include "_anim\obj69.asm"
00017930                            ; ---------------------------------------------------------------------------
00017930                            ; Animation script - trapdoor (SBZ)
00017930                            ; ---------------------------------------------------------------------------
00017930 0000                       		dc.w byte_158AC-Ani_obj69
00017932 0000                       		dc.w byte_158B2-Ani_obj69
00017934 0000                       		dc.w byte_158B8-Ani_obj69
00017936 0000                       		dc.w byte_158CC-Ani_obj69
00017938 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
0001793E 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00017944 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00017951 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00017958 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00017965 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0001796C                            		even
0001796C                            		even
0001796C                            
0001796C                            ; ---------------------------------------------------------------------------
0001796C                            ; Sprite mappings - trapdoor (SBZ)
0001796C                            ; ---------------------------------------------------------------------------
0001796C                            Map_obj69:
0001796C                            	include "_maps\obj69.asm"
0001796C                            ; ---------------------------------------------------------------------------
0001796C                            ; Sprite mappings - trapdoor (SBZ)
0001796C                            ; ---------------------------------------------------------------------------
0001796C 0000                       		dc.w byte_158E6-Map_obj69
0001796E 0000                       		dc.w byte_158FB-Map_obj69
00017970 0000                       		dc.w byte_15924-Map_obj69
00017972 04                         byte_158E6:	dc.b 4
00017973 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00017978 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
0001797D F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00017982 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00017987 08                         byte_158FB:	dc.b 8
00017988 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
0001798D 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00017992 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00017997 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
0001799C F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000179A1 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000179A6 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000179AB 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
000179B0 04                         byte_15924:	dc.b 4
000179B1 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
000179B6 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
000179BB 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
000179C0 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
000179C6 00                         		even
000179C6 00                         		even
000179C6                            
000179C6                            ; ---------------------------------------------------------------------------
000179C6                            ; Sprite mappings - spinning platforms (SBZ)
000179C6                            ; ---------------------------------------------------------------------------
000179C6                            Map_obj69a:
000179C6                            	include "_maps\obj69a.asm"
000179C6                            ; ---------------------------------------------------------------------------
000179C6                            ; Sprite mappings - spinning platforms (SBZ)
000179C6                            ; ---------------------------------------------------------------------------
000179C6 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
000179CA 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
000179CE 0000                       		dc.w byte_15970-Map_obj69a
000179D0 02                         byte_15944:	dc.b 2
000179D1 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000179D6 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
000179DB 02                         byte_1594F:	dc.b 2
000179DC F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000179E1 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
000179E6 02                         byte_1595A:	dc.b 2
000179E7 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000179EC 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000179F1 02                         byte_15965:	dc.b 2
000179F2 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000179F7 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000179FC 02                         byte_15970:	dc.b 2
000179FD F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00017A02 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00017A08 00                         		even
00017A08 00                         		even
00017A08                            
00017A08                            ; ===========================================================================
00017A08                            ; ---------------------------------------------------------------------------
00017A08                            ; Object 6A - ground saws and pizza cutters (SBZ)
00017A08                            ; ---------------------------------------------------------------------------
00017A08                            
00017A08                            Obj6A:					; XREF: Obj_Index
00017A08 7000                       		moveq	#0,d0
00017A0A 1028 0024                  		move.b	$24(a0),d0
00017A0E 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00017A12 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00017A16                            ; ===========================================================================
00017A16 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00017A18 0000                       		dc.w Obj6A_Action-Obj6A_Index
00017A1A                            ; ===========================================================================
00017A1A                            
00017A1A                            Obj6A_Main:				; XREF: Obj6A_Index
00017A1A 5428 0024                  		addq.b	#2,$24(a0)
00017A1E 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00017A26 317C 43B5 0002             		move.w	#$43B5,2(a0)
00017A2C 117C 0004 0001             		move.b	#4,1(a0)
00017A32 117C 0004 0018             		move.b	#4,$18(a0)
00017A38 117C 0020 0019             		move.b	#$20,$19(a0)
00017A3E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017A44 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017A4A 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00017A50 6400                       		bcc.s	Obj6A_Action
00017A52 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017A58                            
00017A58                            Obj6A_Action:				; XREF: Obj6A_Index
00017A58 7000                       		moveq	#0,d0
00017A5A 1028 0028                  		move.b	$28(a0),d0
00017A5E 0240 0007                  		andi.w	#7,d0
00017A62 D040                       		add.w	d0,d0
00017A64 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00017A68 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00017A6C 3028 003A                  		move.w	$3A(a0),d0
00017A70 0240 FF80                  		andi.w	#$FF80,d0
00017A74 3238 F700                  		move.w	($FFFFF700).w,d1
00017A78 0441 0080                  		subi.w	#$80,d1
00017A7C 0241 FF80                  		andi.w	#$FF80,d1
00017A80 9041                       		sub.w	d1,d0
00017A82 0C40 0280                  		cmpi.w	#$280,d0
00017A86 6300                       		bls.s	Obj6A_NoDel
00017A88                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
00017A88                            	;	beq.s	Obj6A_Delete		; if it's zero, don't remember object
00017A88                            	;	movea.w	d0,a2	; load address into a2
00017A88                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017A88 6000                       		bra.s	Obj6A_Delete	; and delete object
00017A8A                            
00017A8A                            Obj6A_NoDel:
00017A8A 4EF9 0000 E96A             		jmp	DisplaySprite
00017A90                            ; ===========================================================================
00017A90                            
00017A90                            Obj6A_Delete:
00017A90 4EF9 0000 E9BA             		jmp	DeleteObject
00017A96                            ; ===========================================================================
00017A96 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00017A9A 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00017A9E 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00017AA0                            ; ===========================================================================
00017AA0                            
00017AA0                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00017AA0 4E75                       		rts	
00017AA2                            ; ===========================================================================
00017AA2                            
00017AA2                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00017AA2 323C 0060                  		move.w	#$60,d1
00017AA6 7000                       		moveq	#0,d0
00017AA8 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00017AAC 0828 0000 0022             		btst	#0,$22(a0)
00017AB2 6700                       		beq.s	Obj6A_Animate01
00017AB4 4440                       		neg.w	d0
00017AB6 D041                       		add.w	d1,d0
00017AB8                            
00017AB8                            Obj6A_Animate01:
00017AB8 3228 003A                  		move.w	$3A(a0),d1
00017ABC 9240                       		sub.w	d0,d1
00017ABE 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00017AC2 5328 001E                  		subq.b	#1,$1E(a0)
00017AC6 6A00                       		bpl.s	loc_15A46
00017AC8 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00017ACE 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00017AD4                            
00017AD4                            loc_15A46:
00017AD4 4A28 0001                  		tst.b	1(a0)
00017AD8 6A00                       		bpl.s	locret_15A60
00017ADA 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017ADE 0240 000F                  		andi.w	#$F,d0
00017AE2 6600                       		bne.s	locret_15A60
00017AE4 303C 00B0                  		move.w	#$B0,d0
00017AE8 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play saw sound
00017AEE                            
00017AEE                            locret_15A60:
00017AEE 4E75                       		rts	
00017AF0                            ; ===========================================================================
00017AF0                            
00017AF0                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00017AF0 323C 0030                  		move.w	#$30,d1
00017AF4 7000                       		moveq	#0,d0
00017AF6 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017AFA 0828 0000 0022             		btst	#0,$22(a0)
00017B00 6700                       		beq.s	Obj6A_Animate02
00017B02 4440                       		neg.w	d0
00017B04 0640 0080                  		addi.w	#$80,d0
00017B08                            
00017B08                            Obj6A_Animate02:
00017B08 3228 0038                  		move.w	$38(a0),d1
00017B0C 9240                       		sub.w	d0,d1
00017B0E 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00017B12 5328 001E                  		subq.b	#1,$1E(a0)
00017B16 6A00                       		bpl.s	loc_15A96
00017B18 117C 0002 001E             		move.b	#2,$1E(a0)
00017B1E 0868 0000 001A             		bchg	#0,$1A(a0)
00017B24                            
00017B24                            loc_15A96:
00017B24 4A28 0001                  		tst.b	1(a0)
00017B28 6A00                       		bpl.s	locret_15AB0
00017B2A 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017B2E 0C00 0018                  		cmpi.b	#$18,d0
00017B32 6600                       		bne.s	locret_15AB0
00017B34 303C 00B0                  		move.w	#$B0,d0
00017B38 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play saw sound
00017B3E                            
00017B3E                            locret_15AB0:
00017B3E 4E75                       		rts	
00017B40                            ; ===========================================================================
00017B40                            
00017B40                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00017B40 4A28 003D                  		tst.b	$3D(a0)
00017B44 6600                       		bne.s	Obj6A_Animate03
00017B46 3038 D008                  		move.w	($FFFFD008).w,d0
00017B4A 0440 00C0                  		subi.w	#$C0,d0
00017B4E 6500                       		bcs.s	loc_15B02
00017B50 9068 0008                  		sub.w	8(a0),d0
00017B54 6500                       		bcs.s	loc_15B02
00017B56 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017B5A 0440 0080                  		subi.w	#$80,d0
00017B5E B068 000C                  		cmp.w	$C(a0),d0
00017B62 6400                       		bcc.s	locret_15B04
00017B64 0640 0100                  		addi.w	#$100,d0
00017B68 B068 000C                  		cmp.w	$C(a0),d0
00017B6C 6500                       		bcs.s	locret_15B04
00017B6E 117C 0001 003D             		move.b	#1,$3D(a0)
00017B74 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00017B7A 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017B80 117C 0002 001A             		move.b	#2,$1A(a0)
00017B86 303C 00B0                  		move.w	#$B0,d0
00017B8A 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play saw sound
00017B90                            
00017B90                            loc_15B02:
00017B90 588F                       		addq.l	#4,sp
00017B92                            
00017B92                            locret_15B04:
00017B92 4E75                       		rts	
00017B94                            ; ===========================================================================
00017B94                            
00017B94                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00017B94 4EB9 0000 E950             		jsr	SpeedToPos
00017B9A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017BA0 5328 001E                  		subq.b	#1,$1E(a0)
00017BA4 6A00                       		bpl.s	locret_15B24
00017BA6 117C 0002 001E             		move.b	#2,$1E(a0)
00017BAC 0868 0000 001A             		bchg	#0,$1A(a0)
00017BB2                            
00017BB2                            locret_15B24:
00017BB2 4E75                       		rts	
00017BB4                            ; ===========================================================================
00017BB4                            
00017BB4                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00017BB4 4A28 003D                  		tst.b	$3D(a0)
00017BB8 6600                       		bne.s	Obj6A_Animate04
00017BBA 3038 D008                  		move.w	($FFFFD008).w,d0
00017BBE 0640 00E0                  		addi.w	#$E0,d0
00017BC2 9068 0008                  		sub.w	8(a0),d0
00017BC6 6400                       		bcc.s	loc_15B74
00017BC8 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017BCC 0440 0080                  		subi.w	#$80,d0
00017BD0 B068 000C                  		cmp.w	$C(a0),d0
00017BD4 6400                       		bcc.s	locret_15B76
00017BD6 0640 0100                  		addi.w	#$100,d0
00017BDA B068 000C                  		cmp.w	$C(a0),d0
00017BDE 6500                       		bcs.s	locret_15B76
00017BE0 117C 0001 003D             		move.b	#1,$3D(a0)
00017BE6 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00017BEC 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017BF2 117C 0002 001A             		move.b	#2,$1A(a0)
00017BF8 303C 00B0                  		move.w	#$B0,d0
00017BFC 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play saw sound
00017C02                            
00017C02                            loc_15B74:
00017C02 588F                       		addq.l	#4,sp
00017C04                            
00017C04                            locret_15B76:
00017C04 4E75                       		rts	
00017C06                            ; ===========================================================================
00017C06                            
00017C06                            Obj6A_Animate04:
00017C06 4EB9 0000 E950             		jsr	SpeedToPos
00017C0C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017C12 5328 001E                  		subq.b	#1,$1E(a0)
00017C16 6A00                       		bpl.s	locret_15B96
00017C18 117C 0002 001E             		move.b	#2,$1E(a0)
00017C1E 0868 0000 001A             		bchg	#0,$1A(a0)
00017C24                            
00017C24                            locret_15B96:
00017C24 4E75                       		rts	
00017C26                            ; ===========================================================================
00017C26                            ; ---------------------------------------------------------------------------
00017C26                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017C26                            ; ---------------------------------------------------------------------------
00017C26                            Map_obj6A:
00017C26                            	include "_maps\obj6A.asm"
00017C26                            ; ---------------------------------------------------------------------------
00017C26                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017C26                            ; ---------------------------------------------------------------------------
00017C26 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00017C2A 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00017C2E 07                         byte_15BA0:	dc.b 7
00017C2F C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017C34 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017C39 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017C3E E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017C43 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017C48 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017C4D 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017C52 07                         byte_15BC4:	dc.b 7
00017C53 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017C58 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017C5D E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017C62 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00017C67 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00017C6C 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00017C71 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00017C76 04                         byte_15BE8:	dc.b 4
00017C77 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017C7C E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017C81 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017C86 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017C8B 04                         byte_15BFD:	dc.b 4
00017C8C E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00017C91 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00017C96 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00017C9B 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00017CA0                            		even
00017CA0                            		even
00017CA0                            
00017CA0                            ; ===========================================================================
00017CA0                            ; ---------------------------------------------------------------------------
00017CA0                            ; Object 6B - stomper (SBZ)
00017CA0                            ; ---------------------------------------------------------------------------
00017CA0                            
00017CA0                            Obj6B:					; XREF: Obj_Index
00017CA0 7000                       		moveq	#0,d0
00017CA2 1028 0024                  		move.b	$24(a0),d0
00017CA6 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00017CAA 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00017CAE                            ; ===========================================================================
00017CAE 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00017CB0 0000                       		dc.w Obj6B_Action-Obj6B_Index
00017CB2                            
00017CB2 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00017CB6 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00017CBA 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00017CBE 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00017CC2 8040 0005                  		dc.b  $80, $40,	  0,   5
00017CC6                            ; ===========================================================================
00017CC6                            
00017CC6                            Obj6B_Main:				; XREF: Obj6B_Index
00017CC6 5428 0024                  		addq.b	#2,$24(a0)
00017CCA 7000                       		moveq	#0,d0
00017CCC 1028 0028                  		move.b	$28(a0),d0
00017CD0 E448                       		lsr.w	#2,d0
00017CD2 0240 001C                  		andi.w	#$1C,d0
00017CD6 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00017CDA 115B 0019                  		move.b	(a3)+,$19(a0)
00017CDE 115B 0016                  		move.b	(a3)+,$16(a0)
00017CE2 E448                       		lsr.w	#2,d0
00017CE4 1140 001A                  		move.b	d0,$1A(a0)
00017CE8 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00017CF0 317C 22C0 0002             		move.w	#$22C0,2(a0)
00017CF6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00017CFC 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00017CFE 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00017D04 6700                       		beq.s	Obj6B_SBZ3
00017D06                            
00017D06                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00017D06 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017D0A 6700                       		beq.s	Obj6B_Delete		; if it's zero, don't remember object
00017D0C 3440                       		movea.w	d0,a2	; load address into a2
00017D0E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017D12                            
00017D12                            Obj6B_Delete:
00017D12 4EF9 0000 E9BA             		jmp	DeleteObject
00017D18                            ; ===========================================================================
00017D18                            
00017D18                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00017D18 317C 41F0 0002             		move.w	#$41F0,2(a0)
00017D1E 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00017D24 6600                       		bne.s	Obj6B_SBZ12
00017D26 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017D2A 6700                       		beq.s	Obj6B_SBZ12		; if it's zero, don't remember object
00017D2C 3440                       		movea.w	d0,a2	; load address into a2
00017D2E 0812 0000                  		btst	#0,(a2)
00017D32 6700                       		beq.s	Obj6B_SBZ12
00017D34 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017D38 60CC                       		bra.s	Obj6B_ChkGone
00017D3A                            ; ===========================================================================
00017D3A                            
00017D3A                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00017D3A 0028 0004 0001             		ori.b	#4,1(a0)
00017D40 117C 0004 0018             		move.b	#4,$18(a0)
00017D46 3168 0008 0034             		move.w	8(a0),$34(a0)
00017D4C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017D52 7000                       		moveq	#0,d0
00017D54 101B                       		move.b	(a3)+,d0
00017D56 3140 003C                  		move.w	d0,$3C(a0)
00017D5A 7000                       		moveq	#0,d0
00017D5C 1028 0028                  		move.b	$28(a0),d0
00017D60 6A00                       		bpl.s	Obj6B_Action
00017D62 0200 000F                  		andi.b	#$F,d0
00017D66 1140 003E                  		move.b	d0,$3E(a0)
00017D6A 1153 0028                  		move.b	(a3),$28(a0)
00017D6E 0C13 0005                  		cmpi.b	#5,(a3)
00017D72 6600                       		bne.s	Obj6B_ChkGone2
00017D74 08E8 0004 0001             		bset	#4,1(a0)
00017D7A                            
00017D7A                            Obj6B_ChkGone2:
00017D7A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017D7E 6700                       		beq.s	Obj6B_Action		; if it's zero, don't remember object
00017D80 3440                       		movea.w	d0,a2	; load address into a2
00017D82 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017D86                            
00017D86                            Obj6B_Action:				; XREF: Obj6B_Index
00017D86 3F28 0008                  		move.w	8(a0),-(sp)
00017D8A 7000                       		moveq	#0,d0
00017D8C 1028 0028                  		move.b	$28(a0),d0
00017D90 0240 000F                  		andi.w	#$F,d0
00017D94 D040                       		add.w	d0,d0
00017D96 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00017D9A 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00017D9E 381F                       		move.w	(sp)+,d4
00017DA0 4A28 0001                  		tst.b	1(a0)
00017DA4 6A00                       		bpl.s	Obj6B_ChkDel
00017DA6 7200                       		moveq	#0,d1
00017DA8 1228 0019                  		move.b	$19(a0),d1
00017DAC 0641 000B                  		addi.w	#$B,d1
00017DB0 7400                       		moveq	#0,d2
00017DB2 1428 0016                  		move.b	$16(a0),d2
00017DB6 3602                       		move.w	d2,d3
00017DB8 5243                       		addq.w	#1,d3
00017DBA 6100 951C                  		bsr.w	SolidObject
00017DBE                            
00017DBE                            Obj6B_ChkDel:
00017DBE 3028 0034                  		move.w	$34(a0),d0
00017DC2 0240 FF80                  		andi.w	#$FF80,d0
00017DC6 3238 F700                  		move.w	($FFFFF700).w,d1
00017DCA 0441 0080                  		subi.w	#$80,d1
00017DCE 0241 FF80                  		andi.w	#$FF80,d1
00017DD2 9041                       		sub.w	d1,d0
00017DD4 0C40 0280                  		cmpi.w	#$280,d0
00017DD8 6200                       		bhi.s	loc_15D64
00017DDA 4EF9 0000 E96A             		jmp	DisplaySprite
00017DE0                            ; ===========================================================================
00017DE0                            
00017DE0                            loc_15D64:
00017DE0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017DE6 6600                       		bne.s	Obj6B_Delete2
00017DE8 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017DEC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017DF0 6700                       		beq.s	Obj6B_Delete2		; if it's zero, don't remember object
00017DF2 3440                       		movea.w	d0,a2	; load address into a2
00017DF4 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017DF8                            
00017DF8                            Obj6B_Delete2:
00017DF8 4EF9 0000 E9BA             		jmp	DeleteObject
00017DFE                            ; ===========================================================================
00017DFE 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00017E02 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00017E06 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00017E0A                            ; ===========================================================================
00017E0A                            
00017E0A                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00017E0A 4E75                       		rts	
00017E0C                            ; ===========================================================================
00017E0C                            
00017E0C                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00017E0C 4A28 0038                  		tst.b	$38(a0)
00017E10 6600                       		bne.s	loc_15DB4
00017E12 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017E16 7000                       		moveq	#0,d0
00017E18 1028 003E                  		move.b	$3E(a0),d0
00017E1C 0832 0000 0000             		btst	#0,(a2,d0.w)
00017E22 6700                       		beq.s	loc_15DC2
00017E24 117C 0001 0038             		move.b	#1,$38(a0)
00017E2A                            
00017E2A                            loc_15DB4:
00017E2A 3028 003C                  		move.w	$3C(a0),d0
00017E2E B068 003A                  		cmp.w	$3A(a0),d0
00017E32 6700                       		beq.s	loc_15DE0
00017E34 5468 003A                  		addq.w	#2,$3A(a0)
00017E38                            
00017E38                            loc_15DC2:
00017E38 3028 003A                  		move.w	$3A(a0),d0
00017E3C 0828 0000 0022             		btst	#0,$22(a0)
00017E42 6700                       		beq.s	loc_15DD4
00017E44 4440                       		neg.w	d0
00017E46 0640 0080                  		addi.w	#$80,d0
00017E4A                            
00017E4A                            loc_15DD4:
00017E4A 3228 0034                  		move.w	$34(a0),d1
00017E4E 9240                       		sub.w	d0,d1
00017E50 3141 0008                  		move.w	d1,8(a0)
00017E54 4E75                       		rts	
00017E56                            ; ===========================================================================
00017E56                            
00017E56                            loc_15DE0:
00017E56 5228 0028                  		addq.b	#1,$28(a0)
00017E5A 317C 00B4 0036             		move.w	#$B4,$36(a0)
00017E60 4228 0038                  		clr.b	$38(a0)
00017E64 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017E68 67CE                       		beq.s	loc_15DC2		; if it's zero, don't remember object
00017E6A 3440                       		movea.w	d0,a2	; load address into a2
00017E6C 08D2 0000                  		bset	#0,(a2)
00017E70 60C6                       		bra.s	loc_15DC2
00017E72                            ; ===========================================================================
00017E72                            
00017E72                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00017E72 4A28 0038                  		tst.b	$38(a0)
00017E76 6600                       		bne.s	loc_15E14
00017E78 5368 0036                  		subq.w	#1,$36(a0)
00017E7C 6600                       		bne.s	loc_15E1E
00017E7E 117C 0001 0038             		move.b	#1,$38(a0)
00017E84                            
00017E84                            loc_15E14:
00017E84 4A68 003A                  		tst.w	$3A(a0)
00017E88 6700                       		beq.s	loc_15E3C
00017E8A 5568 003A                  		subq.w	#2,$3A(a0)
00017E8E                            
00017E8E                            loc_15E1E:
00017E8E 3028 003A                  		move.w	$3A(a0),d0
00017E92 0828 0000 0022             		btst	#0,$22(a0)
00017E98 6700                       		beq.s	loc_15E30
00017E9A 4440                       		neg.w	d0
00017E9C 0640 0080                  		addi.w	#$80,d0
00017EA0                            
00017EA0                            loc_15E30:
00017EA0 3228 0034                  		move.w	$34(a0),d1
00017EA4 9240                       		sub.w	d0,d1
00017EA6 3141 0008                  		move.w	d1,8(a0)
00017EAA 4E75                       		rts	
00017EAC                            ; ===========================================================================
00017EAC                            
00017EAC                            loc_15E3C:
00017EAC 5328 0028                  		subq.b	#1,$28(a0)
00017EB0 4228 0038                  		clr.b	$38(a0)
00017EB4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017EB8 67D4                       		beq.s	loc_15E1E		; if it's zero, don't remember object
00017EBA 3440                       		movea.w	d0,a2	; load address into a2
00017EBC 0892 0000                  		bclr	#0,(a2)
00017EC0 60CC                       		bra.s	loc_15E1E
00017EC2                            ; ===========================================================================
00017EC2                            
00017EC2                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00017EC2 4A28 0038                  		tst.b	$38(a0)
00017EC6 6600                       		bne.s	loc_15E7C
00017EC8 4A68 003A                  		tst.w	$3A(a0)
00017ECC 6700                       		beq.s	loc_15E6A
00017ECE 5368 003A                  		subq.w	#1,$3A(a0)
00017ED2 6000                       		bra.s	loc_15E8E
00017ED4                            ; ===========================================================================
00017ED4                            
00017ED4                            loc_15E6A:
00017ED4 5368 0036                  		subq.w	#1,$36(a0)
00017ED8 6A00                       		bpl.s	loc_15E8E
00017EDA 317C 003C 0036             		move.w	#$3C,$36(a0)
00017EE0 117C 0001 0038             		move.b	#1,$38(a0)
00017EE6                            
00017EE6                            loc_15E7C:
00017EE6 5068 003A                  		addq.w	#8,$3A(a0)
00017EEA 3028 003A                  		move.w	$3A(a0),d0
00017EEE B068 003C                  		cmp.w	$3C(a0),d0
00017EF2 6600                       		bne.s	loc_15E8E
00017EF4 4228 0038                  		clr.b	$38(a0)
00017EF8                            
00017EF8                            loc_15E8E:
00017EF8 3028 003A                  		move.w	$3A(a0),d0
00017EFC 0828 0000 0022             		btst	#0,$22(a0)
00017F02 6700                       		beq.s	loc_15EA0
00017F04 4440                       		neg.w	d0
00017F06 0640 0038                  		addi.w	#$38,d0
00017F0A                            
00017F0A                            loc_15EA0:
00017F0A 3228 0030                  		move.w	$30(a0),d1
00017F0E D240                       		add.w	d0,d1
00017F10 3141 000C                  		move.w	d1,$C(a0)
00017F14 4E75                       		rts	
00017F16                            ; ===========================================================================
00017F16                            
00017F16                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00017F16 4A28 0038                  		tst.b	$38(a0)
00017F1A 6600                       		bne.s	loc_15ED0
00017F1C 4A68 003A                  		tst.w	$3A(a0)
00017F20 6700                       		beq.s	loc_15EBE
00017F22 5168 003A                  		subq.w	#8,$3A(a0)
00017F26 6000                       		bra.s	loc_15EF0
00017F28                            ; ===========================================================================
00017F28                            
00017F28                            loc_15EBE:
00017F28 5368 0036                  		subq.w	#1,$36(a0)
00017F2C 6A00                       		bpl.s	loc_15EF0
00017F2E 317C 003C 0036             		move.w	#$3C,$36(a0)
00017F34 117C 0001 0038             		move.b	#1,$38(a0)
00017F3A                            
00017F3A                            loc_15ED0:
00017F3A 3028 003A                  		move.w	$3A(a0),d0
00017F3E B068 003C                  		cmp.w	$3C(a0),d0
00017F42 6700                       		beq.s	loc_15EE0
00017F44 5068 003A                  		addq.w	#8,$3A(a0)
00017F48 6000                       		bra.s	loc_15EF0
00017F4A                            ; ===========================================================================
00017F4A                            
00017F4A                            loc_15EE0:
00017F4A 5368 0036                  		subq.w	#1,$36(a0)
00017F4E 6A00                       		bpl.s	loc_15EF0
00017F50 317C 003C 0036             		move.w	#$3C,$36(a0)
00017F56 4228 0038                  		clr.b	$38(a0)
00017F5A                            
00017F5A                            loc_15EF0:
00017F5A 3028 003A                  		move.w	$3A(a0),d0
00017F5E 0828 0000 0022             		btst	#0,$22(a0)
00017F64 6700                       		beq.s	loc_15F02
00017F66 4440                       		neg.w	d0
00017F68 0640 0038                  		addi.w	#$38,d0
00017F6C                            
00017F6C                            loc_15F02:
00017F6C 3228 0030                  		move.w	$30(a0),d1
00017F70 D240                       		add.w	d0,d1
00017F72 3141 000C                  		move.w	d1,$C(a0)
00017F76 4E75                       		rts	
00017F78                            ; ===========================================================================
00017F78                            
00017F78                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00017F78 4A28 0038                  		tst.b	$38(a0)
00017F7C 6600                       		bne.s	loc_15F3E
00017F7E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017F82 7000                       		moveq	#0,d0
00017F84 1028 003E                  		move.b	$3E(a0),d0
00017F88 0832 0000 0000             		btst	#0,(a2,d0.w)
00017F8E 6700                       		beq.s	locret_15F5C
00017F90 117C 0001 0038             		move.b	#1,$38(a0)
00017F96 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017F9A 6700                       		beq.s	loc_15F3E		; if it's zero, don't remember object
00017F9C 3440                       		movea.w	d0,a2	; load address into a2
00017F9E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017FA2                            
00017FA2                            loc_15F3E:
00017FA2 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00017FAA 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00017FB2 3168 0008 0034             		move.w	8(a0),$34(a0)
00017FB8 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00017FBE 6700                       		beq.s	loc_15F5E
00017FC0                            
00017FC0                            locret_15F5C:
00017FC0 4E75                       		rts	
00017FC2                            ; ===========================================================================
00017FC2                            
00017FC2                            loc_15F5E:
00017FC2 4228 0028                  		clr.b	$28(a0)
00017FC6 4228 0038                  		clr.b	$38(a0)
00017FCA 4E75                       		rts	
00017FCC                            ; ===========================================================================
00017FCC                            ; ---------------------------------------------------------------------------
00017FCC                            ; Sprite mappings - stomper and	platforms (SBZ)
00017FCC                            ; ---------------------------------------------------------------------------
00017FCC                            Map_obj6B:
00017FCC                            	include "_maps\obj6B.asm"
00017FCC                            ; ---------------------------------------------------------------------------
00017FCC                            ; Sprite mappings - stomper and	platforms (SBZ)
00017FCC                            ; ---------------------------------------------------------------------------
00017FCC 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00017FD0 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00017FD4 0000                       		dc.w byte_15FB0-Map_obj6B
00017FD6 04                         byte_15F72:	dc.b 4
00017FD7 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00017FDC F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00017FE1 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00017FE6 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00017FEB 08                         byte_15F87:	dc.b 8
00017FEC E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00017FF1 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00017FF6 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00017FFB E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00018000 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00018005 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
0001800A 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
0001800F 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00018014 0E                         byte_15FB0:	dc.b $E
00018015 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
0001801A C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
0001801F C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00018024 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00018029 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
0001802E C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00018033 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00018038 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
0001803D E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00018042 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00018047 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
0001804C 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00018051 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00018056 200F 0058 80               		dc.b $20, $F, 0, $58, $80
0001805C 00                         		even
0001805C 00                         		even
0001805C                            
0001805C                            ; ===========================================================================
0001805C                            ; ---------------------------------------------------------------------------
0001805C                            ; Object 6C - vanishing	platforms (SBZ)
0001805C                            ; ---------------------------------------------------------------------------
0001805C                            
0001805C                            Obj6C:					; XREF: Obj_Index
0001805C 7000                       		moveq	#0,d0
0001805E 1028 0024                  		move.b	$24(a0),d0
00018062 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00018066 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
0001806A                            ; ===========================================================================
0001806A 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
0001806C 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
0001806E 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00018070 0000                       		dc.w loc_16068-Obj6C_Index
00018072                            ; ===========================================================================
00018072                            
00018072                            Obj6C_Main:				; XREF: Obj6C_Index
00018072 5C28 0024                  		addq.b	#6,$24(a0)
00018076 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
0001807E 317C 44C3 0002             		move.w	#$44C3,2(a0)
00018084 0028 0004 0001             		ori.b	#4,1(a0)
0001808A 117C 0010 0019             		move.b	#$10,$19(a0)
00018090 117C 0004 0018             		move.b	#4,$18(a0)
00018096 7000                       		moveq	#0,d0
00018098 1028 0028                  		move.b	$28(a0),d0	; get object type
0001809C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000180A0 5240                       		addq.w	#1,d0		; add 1
000180A2 EF48                       		lsl.w	#7,d0		; multiply by $80
000180A4 3200                       		move.w	d0,d1
000180A6 5340                       		subq.w	#1,d0
000180A8 3140 0030                  		move.w	d0,$30(a0)
000180AC 3140 0032                  		move.w	d0,$32(a0)
000180B0 7000                       		moveq	#0,d0
000180B2 1028 0028                  		move.b	$28(a0),d0	; get object type
000180B6 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
000180BA 0641 0080                  		addi.w	#$80,d1
000180BE C0C1                       		mulu.w	d1,d0
000180C0 E088                       		lsr.l	#8,d0
000180C2 3140 0036                  		move.w	d0,$36(a0)
000180C6 5341                       		subq.w	#1,d1
000180C8 3141 0038                  		move.w	d1,$38(a0)
000180CC                            
000180CC                            loc_16068:				; XREF: Obj6C_Index
000180CC 3038 FE04                  		move.w	($FFFFFE04).w,d0
000180D0 9068 0036                  		sub.w	$36(a0),d0
000180D4 C068 0038                  		and.w	$38(a0),d0
000180D8 6600                       		bne.s	Obj6C_Animate
000180DA 5928 0024                  		subq.b	#4,$24(a0)
000180DE 6000                       		bra.s	Obj6C_Vanish
000180E0                            ; ===========================================================================
000180E0                            
000180E0                            Obj6C_Animate:
000180E0 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000180E6 4EB9 0000 B9CA             		jsr	AnimateSprite
000180EC 6000 8EC6                  		bra.w	MarkObjGone
000180F0                            ; ===========================================================================
000180F0                            
000180F0                            Obj6C_Vanish:				; XREF: Obj6C_Index
000180F0 5368 0030                  		subq.w	#1,$30(a0)
000180F4 6A00                       		bpl.s	loc_160AA
000180F6 317C 007F 0030             		move.w	#127,$30(a0)
000180FC 4A28 001C                  		tst.b	$1C(a0)
00018100 6700                       		beq.s	loc_160A4
00018102 3168 0032 0030             		move.w	$32(a0),$30(a0)
00018108                            
00018108                            loc_160A4:
00018108 0868 0000 001C             		bchg	#0,$1C(a0)
0001810E                            
0001810E                            loc_160AA:
0001810E 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00018114 4EB9 0000 B9CA             		jsr	AnimateSprite
0001811A 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00018120 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00018122 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00018128 6600                       		bne.s	loc_160D6
0001812A 7200                       		moveq	#0,d1
0001812C 1228 0019                  		move.b	$19(a0),d1
00018130 4EB9 0000 856A             		jsr	(PlatformObject).l
00018136 6000 8E7C                  		bra.w	MarkObjGone
0001813A                            ; ===========================================================================
0001813A                            
0001813A                            loc_160D6:
0001813A 7200                       		moveq	#0,d1
0001813C 1228 0019                  		move.b	$19(a0),d1
00018140 4EB9 0000 86DE             		jsr	(ExitPlatform).l
00018146 3428 0008                  		move.w	8(a0),d2
0001814A 4EB9 0000 8C54             		jsr	(MvSonicOnPtfm2).l
00018150 6000 8E62                  		bra.w	MarkObjGone
00018154                            ; ===========================================================================
00018154                            
00018154                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00018154 0828 0003 0022             		btst	#3,$22(a0)
0001815A 6700                       		beq.s	Obj6C_Display
0001815C 43F8 D000                  		lea	($FFFFD000).w,a1
00018160 08A9 0003 0022             		bclr	#3,$22(a1)
00018166 08A8 0003 0022             		bclr	#3,$22(a0)
0001816C 117C 0002 0024             		move.b	#2,$24(a0)
00018172 4228 0025                  		clr.b	$25(a0)
00018176                            
00018176                            Obj6C_Display:
00018176 6000 8E3C                  		bra.w	MarkObjGone
0001817A                            ; ===========================================================================
0001817A                            Ani_obj6C:
0001817A                            	include "_anim\obj6C.asm"
0001817A                            ; ---------------------------------------------------------------------------
0001817A                            ; Animation script - vanishing platforms (SBZ)
0001817A                            ; ---------------------------------------------------------------------------
0001817A 0000                       		dc.w byte_1611A-Ani_obj6C
0001817C 0000                       		dc.w byte_16122-Ani_obj6C
0001817E 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00018186 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
0001818E                            		even
0001818E                            		even
0001818E                            
0001818E                            ; ---------------------------------------------------------------------------
0001818E                            ; Sprite mappings - vanishing platforms	(SBZ)
0001818E                            ; ---------------------------------------------------------------------------
0001818E                            Map_obj6C:
0001818E                            	include "_maps\obj6C.asm"
0001818E                            ; ---------------------------------------------------------------------------
0001818E                            ; Sprite mappings - vanishing platforms	(SBZ)
0001818E                            ; ---------------------------------------------------------------------------
0001818E 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00018192 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00018196 01                         byte_16132:	dc.b 1
00018197 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
0001819C 01                         byte_16138:	dc.b 1
0001819D F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
000181A2 01                         byte_1613E:	dc.b 1
000181A3 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
000181A8 00                         byte_16144:	dc.b 0
000181AA 00                         		even
000181AA 00                         		even
000181AA                            
000181AA                            ; ===========================================================================
000181AA                            ; ---------------------------------------------------------------------------
000181AA                            ; Object 6E - electrocution orbs (SBZ)
000181AA                            ; ---------------------------------------------------------------------------
000181AA                            
000181AA                            Obj6E:					; XREF: Obj_Index
000181AA 7000                       		moveq	#0,d0
000181AC 1028 0024                  		move.b	$24(a0),d0
000181B0 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
000181B4 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
000181B8                            ; ===========================================================================
000181B8 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
000181BA 0000                       		dc.w Obj6E_Shock-Obj6E_Index
000181BC                            ; ===========================================================================
000181BC                            
000181BC                            Obj6E_Main:				; XREF: Obj6E_Index
000181BC 5428 0024                  		addq.b	#2,$24(a0)
000181C0 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
000181C8 317C 047E 0002             		move.w	#$47E,2(a0)
000181CE 0028 0004 0001             		ori.b	#4,1(a0)
000181D4 117C 0028 0019             		move.b	#$28,$19(a0)
000181DA 7000                       		moveq	#0,d0
000181DC 1028 0028                  		move.b	$28(a0),d0	; read object type
000181E0 E948                       		lsl.w	#4,d0		; multiply by $10
000181E2 5340                       		subq.w	#1,d0
000181E4 3140 0034                  		move.w	d0,$34(a0)
000181E8                            
000181E8                            Obj6E_Shock:				; XREF: Obj6E_Index
000181E8 3038 FE04                  		move.w	($FFFFFE04).w,d0
000181EC C068 0034                  		and.w	$34(a0),d0
000181F0 6600                       		bne.s	Obj6E_Animate
000181F2 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
000181F8 4A28 0001                  		tst.b	1(a0)
000181FC 6A00                       		bpl.s	Obj6E_Animate
000181FE 303C 00B1                  		move.w	#$B1,d0
00018202 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play electricity sound
00018208                            
00018208                            Obj6E_Animate:
00018208 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
0001820E 4EB9 0000 B9CA             		jsr	AnimateSprite
00018214 117C 0000 0020             		move.b	#0,$20(a0)
0001821A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00018220 6600                       		bne.s	Obj6E_Display	; if not, branch
00018222 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00018228                            
00018228                            Obj6E_Display:
00018228 6000 8D8A                  		bra.w	MarkObjGone
0001822C                            ; ===========================================================================
0001822C                            Ani_obj6E:
0001822C                            	include "_anim\obj6E.asm"
0001822C                            ; ---------------------------------------------------------------------------
0001822C                            ; Animation script - electrocution orbs (SBZ)
0001822C                            ; ---------------------------------------------------------------------------
0001822C 0000                       		dc.w byte_161CC-Ani_obj6E
0001822E 0000                       		dc.w byte_161D0-Ani_obj6E
00018230 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00018234 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00018244                            		even
00018244                            		even
00018244                            
00018244                            ; ---------------------------------------------------------------------------
00018244                            ; Sprite mappings - electrocution orbs (SBZ)
00018244                            ; ---------------------------------------------------------------------------
00018244                            Map_obj6E:
00018244                            	include "_maps\obj6E.asm"
00018244                            ; ---------------------------------------------------------------------------
00018244                            ; Sprite mappings - electrocution orbs (SBZ)
00018244                            ; ---------------------------------------------------------------------------
00018244 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
00018248 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
0001824C 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00018250 02                         byte_161EC:	dc.b 2
00018251 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018256 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001825B 03                         byte_161F7:	dc.b 3
0001825C F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00018261 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018266 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001826B 05                         byte_16207:	dc.b 5
0001826C F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00018271 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018276 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001827B F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00018280 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00018285 04                         byte_16221:	dc.b 4
00018286 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001828B 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018290 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00018295 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
0001829A 06                         byte_16236:	dc.b 6
0001829B F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000182A0 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000182A5 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
000182AA F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
000182AF F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
000182B4 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
000182B9 04                         byte_16255:	dc.b 4
000182BA F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000182BF 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000182C4 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
000182C9 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
000182CE                            		even
000182CE                            		even
000182CE                            
000182CE                            ; ===========================================================================
000182CE                            ; ---------------------------------------------------------------------------
000182CE                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
000182CE                            ; ---------------------------------------------------------------------------
000182CE                            
000182CE                            Obj6F:					; XREF: Obj_Index
000182CE 7000                       		moveq	#0,d0
000182D0 1028 0024                  		move.b	$24(a0),d0
000182D4 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
000182D8 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
000182DC 3028 0030                  		move.w	$30(a0),d0
000182E0 0240 FF80                  		andi.w	#$FF80,d0
000182E4 3238 F700                  		move.w	($FFFFF700).w,d1
000182E8 0441 0080                  		subi.w	#$80,d1
000182EC 0241 FF80                  		andi.w	#$FF80,d1
000182F0 9041                       		sub.w	d1,d0
000182F2 0C40 0280                  		cmpi.w	#$280,d0
000182F6 6300                       		bls.s	Obj6F_Display
000182F8                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
000182F8                            	;	beq.s	loc_1629A		; if it's zero, don't remember object
000182F8                            	;	movea.w	d0,a2	; load address into a2
000182F8                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000182F8 6000                       		bra.s	loc_1629A	; and delete object
000182FA                            
000182FA                            Obj6F_Display:
000182FA 4EF9 0000 E96A             		jmp	DisplaySprite
00018300                            ; ===========================================================================
00018300                            
00018300                            loc_1629A:
00018300 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00018306 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00018308 0C40 FF80                  		cmpi.w	#-$80,d0
0001830C 64EC                       		bcc.s	Obj6F_Display
0001830E                            
0001830E                            Obj6F_Act1or2:
0001830E 1028 002F                  		move.b	$2F(a0),d0
00018312 6A00                       		bpl.s	Obj6F_Delete
00018314 0240 007F                  		andi.w	#$7F,d0
00018318 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001831C 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00018322                            
00018322                            Obj6F_Delete:
00018322 4EF9 0000 E9BA             		jmp	DeleteObject
00018328                            ; ===========================================================================
00018328 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
0001832A 0000                       		dc.w loc_163D8-Obj6F_Index
0001832C                            ; ===========================================================================
0001832C                            
0001832C                            Obj6F_Main:				; XREF: Obj6F_Index
0001832C 1028 0028                  		move.b	$28(a0),d0
00018330 6B00 0000                  		bmi.w	loc_16380
00018334 5428 0024                  		addq.b	#2,$24(a0)
00018338 217C 0001 79C6 0004        		move.l	#Map_obj69a,4(a0)
00018340 317C 04DF 0002             		move.w	#$4DF,2(a0)
00018346 117C 0010 0019             		move.b	#$10,$19(a0)
0001834C 0028 0004 0001             		ori.b	#4,1(a0)
00018352 117C 0004 0018             		move.b	#4,$18(a0)
00018358 7000                       		moveq	#0,d0
0001835A 1028 0028                  		move.b	$28(a0),d0
0001835E 3200                       		move.w	d0,d1
00018360 E648                       		lsr.w	#3,d0
00018362 0240 001E                  		andi.w	#$1E,d0
00018366 45FA 0000                  		lea	off_164A6(pc),a2
0001836A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001836E 315A 0038                  		move.w	(a2)+,$38(a0)
00018372 315A 0030                  		move.w	(a2)+,$30(a0)
00018376 214A 003C                  		move.l	a2,$3C(a0)
0001837A 0241 000F                  		andi.w	#$F,d1
0001837E E549                       		lsl.w	#2,d1
00018380 1141 0038                  		move.b	d1,$38(a0)
00018384 117C 0004 003A             		move.b	#4,$3A(a0)
0001838A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001838E 6700                       		beq.s	loc_16356
00018390 117C 0001 003B             		move.b	#1,$3B(a0)
00018396 4428 003A                  		neg.b	$3A(a0)
0001839A 7200                       		moveq	#0,d1
0001839C 1228 0038                  		move.b	$38(a0),d1
000183A0 D228 003A                  		add.b	$3A(a0),d1
000183A4 B228 0039                  		cmp.b	$39(a0),d1
000183A8 6500                       		bcs.s	loc_16352
000183AA 1001                       		move.b	d1,d0
000183AC 7200                       		moveq	#0,d1
000183AE 4A00                       		tst.b	d0
000183B0 6A00                       		bpl.s	loc_16352
000183B2 1228 0039                  		move.b	$39(a0),d1
000183B6 5901                       		subq.b	#4,d1
000183B8                            
000183B8                            loc_16352:
000183B8 1141 0038                  		move.b	d1,$38(a0)
000183BC                            
000183BC                            loc_16356:
000183BC 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000183C2 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000183C8 4A41                       		tst.w	d1
000183CA 6600                       		bne.s	loc_1636C
000183CC 117C 0001 001C             		move.b	#1,$1C(a0)
000183D2                            
000183D2                            loc_1636C:
000183D2 0C41 0008                  		cmpi.w	#8,d1
000183D6 6600                       		bne.s	loc_16378
000183D8 117C 0000 001C             		move.b	#0,$1C(a0)
000183DE                            
000183DE                            loc_16378:
000183DE 6100 BB16                  		bsr.w	Obj63_ChangeDir
000183E2 6000 0000                  		bra.w	loc_163D8
000183E6                            ; ===========================================================================
000183E6                            
000183E6                            loc_16380:				; XREF: Obj6F_Main
000183E6 1140 002F                  		move.b	d0,$2F(a0)
000183EA 0240 007F                  		andi.w	#$7F,d0
000183EE 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000183F2 08F2 0000 0000             		bset	#0,(a2,d0.w)
000183F8 6700                       		beq.s	loc_1639A
000183FA 4EF9 0000 E9BA             		jmp	DeleteObject
00018400                            ; ===========================================================================
00018400                            
00018400                            loc_1639A:
00018400 D040                       		add.w	d0,d0
00018402 0240 001E                  		andi.w	#$1E,d0
00018406 0640 0080                  		addi.w	#$80,d0
0001840A 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00018410 D4F2 0000                  		adda.w	(a2,d0.w),a2
00018414 321A                       		move.w	(a2)+,d1
00018416 2248                       		movea.l	a0,a1
00018418 6000                       		bra.s	Obj6F_LoadPform
0001841A                            ; ===========================================================================
0001841A                            
0001841A                            Obj6F_Loop:
0001841A 4EB9 0000 F0C0             		jsr	SingleObjLoad
00018420 6600                       		bne.s	loc_163D0
00018422                            
00018422                            Obj6F_LoadPform:			; XREF: loc_1639A
00018422 12BC 006F                  		move.b	#$6F,0(a1)
00018426 335A 0008                  		move.w	(a2)+,8(a1)
0001842A 335A 000C                  		move.w	(a2)+,$C(a1)
0001842E 301A                       		move.w	(a2)+,d0
00018430 1340 0028                  		move.b	d0,$28(a1)
00018434                            
00018434                            loc_163D0:
00018434 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00018438                            
00018438 588F                       		addq.l	#4,sp
0001843A 4E75                       		rts	
0001843C                            ; ===========================================================================
0001843C                            
0001843C                            loc_163D8:				; XREF: Obj6F_Index
0001843C 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00018442 4EB9 0000 B9CA             		jsr	AnimateSprite
00018448 4A28 001A                  		tst.b	$1A(a0)
0001844C 6600                       		bne.s	loc_16404
0001844E 3F28 0008                  		move.w	8(a0),-(sp)
00018452 6100 0000                  		bsr.w	loc_16424
00018456 323C 001B                  		move.w	#$1B,d1
0001845A 343C 0007                  		move.w	#7,d2
0001845E 3602                       		move.w	d2,d3
00018460 5243                       		addq.w	#1,d3
00018462 381F                       		move.w	(sp)+,d4
00018464 6000 8E72                  		bra.w	SolidObject
00018468                            ; ===========================================================================
00018468                            
00018468                            loc_16404:
00018468 0828 0003 0022             		btst	#3,$22(a0)
0001846E 6700                       		beq.s	loc_16420
00018470 43F8 D000                  		lea	($FFFFD000).w,a1
00018474 08A9 0003 0022             		bclr	#3,$22(a1)
0001847A 08A8 0003 0022             		bclr	#3,$22(a0)
00018480 4228 0025                  		clr.b	$25(a0)
00018484                            
00018484                            loc_16420:
00018484 6000 0002                  		bra.w	*+4
00018488                            
00018488                            loc_16424:
00018488 3028 0008                  		move.w	8(a0),d0
0001848C B068 0034                  		cmp.w	$34(a0),d0
00018490 6600                       		bne.s	loc_16484
00018492 3028 000C                  		move.w	$C(a0),d0
00018496 B068 0036                  		cmp.w	$36(a0),d0
0001849A 6600                       		bne.s	loc_16484
0001849C 7200                       		moveq	#0,d1
0001849E 1228 0038                  		move.b	$38(a0),d1
000184A2 D228 003A                  		add.b	$3A(a0),d1
000184A6 B228 0039                  		cmp.b	$39(a0),d1
000184AA 6500                       		bcs.s	loc_16456
000184AC 1001                       		move.b	d1,d0
000184AE 7200                       		moveq	#0,d1
000184B0 4A00                       		tst.b	d0
000184B2 6A00                       		bpl.s	loc_16456
000184B4 1228 0039                  		move.b	$39(a0),d1
000184B8 5901                       		subq.b	#4,d1
000184BA                            
000184BA                            loc_16456:
000184BA 1141 0038                  		move.b	d1,$38(a0)
000184BE 2268 003C                  		movea.l	$3C(a0),a1
000184C2 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000184C8 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000184CE 4A41                       		tst.w	d1
000184D0 6600                       		bne.s	loc_16474
000184D2 117C 0001 001C             		move.b	#1,$1C(a0)
000184D8                            
000184D8                            loc_16474:
000184D8 0C41 0008                  		cmpi.w	#8,d1
000184DC 6600                       		bne.s	loc_16480
000184DE 117C 0000 001C             		move.b	#0,$1C(a0)
000184E4                            
000184E4                            loc_16480:
000184E4 6100 BA10                  		bsr.w	Obj63_ChangeDir
000184E8                            
000184E8                            loc_16484:
000184E8 4EF9 0000 E950             		jmp	SpeedToPos
000184EE                            ; ===========================================================================
000184EE                            Ani_obj6F:
000184EE                            	include "_anim\obj6F.asm"
000184EE                            ; ---------------------------------------------------------------------------
000184EE                            ; Animation script - platform on conveyor belt (SBZ)
000184EE                            ; ---------------------------------------------------------------------------
000184EE 0000                       		dc.w byte_1648E-Ani_obj6F
000184F0 0000                       		dc.w byte_164A2-Ani_obj6F
000184F2 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000184FF 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00018506 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
0001850A 00                         		even
0001850A 00                         		even
0001850A                            
0001850A 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00018510 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00018516 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
0001852A 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
0001853E 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00018552 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00018566 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
0001857A 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
0001858E                            ; ===========================================================================
0001858E                            ; ---------------------------------------------------------------------------
0001858E                            ; Object 70 - large girder block (SBZ)
0001858E                            ; ---------------------------------------------------------------------------
0001858E                            
0001858E                            Obj70:					; XREF: Obj_Index
0001858E 7000                       		moveq	#0,d0
00018590 1028 0024                  		move.b	$24(a0),d0
00018594 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00018598 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
0001859C                            ; ===========================================================================
0001859C 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
0001859E 0000                       		dc.w Obj70_Action-Obj70_Index
000185A0                            ; ===========================================================================
000185A0                            
000185A0                            Obj70_Main:				; XREF: Obj70_Index
000185A0 5428 0024                  		addq.b	#2,$24(a0)
000185A4 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
000185AC 317C 42F0 0002             		move.w	#$42F0,2(a0)
000185B2 0028 0004 0001             		ori.b	#4,1(a0)
000185B8 117C 0004 0018             		move.b	#4,$18(a0)
000185BE 117C 0060 0019             		move.b	#$60,$19(a0)
000185C4 117C 0018 0016             		move.b	#$18,$16(a0)
000185CA 3168 0008 0032             		move.w	8(a0),$32(a0)
000185D0 3168 000C 0030             		move.w	$C(a0),$30(a0)
000185D6 6100 0000                  		bsr.w	Obj70_Move2
000185DA                            
000185DA                            Obj70_Action:				; XREF: Obj70_Index
000185DA 3F28 0008                  		move.w	8(a0),-(sp)
000185DE 4A68 003A                  		tst.w	$3A(a0)
000185E2 6700                       		beq.s	Obj70_Move
000185E4 5368 003A                  		subq.w	#1,$3A(a0)
000185E8 6600                       		bne.s	Obj70_Solid
000185EA                            
000185EA                            Obj70_Move:
000185EA 4EB9 0000 E950             		jsr	SpeedToPos
000185F0 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
000185F4 6600                       		bne.s	Obj70_Solid	; if time remains, branch
000185F6 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
000185FA                            
000185FA                            Obj70_Solid:
000185FA 381F                       		move.w	(sp)+,d4
000185FC 4A28 0001                  		tst.b	1(a0)
00018600 6A00                       		bpl.s	Obj70_ChkDel
00018602 7200                       		moveq	#0,d1
00018604 1228 0019                  		move.b	$19(a0),d1
00018608 0641 000B                  		addi.w	#$B,d1
0001860C 7400                       		moveq	#0,d2
0001860E 1428 0016                  		move.b	$16(a0),d2
00018612 3602                       		move.w	d2,d3
00018614 5243                       		addq.w	#1,d3
00018616 6100 8CC0                  		bsr.w	SolidObject
0001861A                            
0001861A                            Obj70_ChkDel:
0001861A 3028 0032                  		move.w	$32(a0),d0
0001861E 0240 FF80                  		andi.w	#$FF80,d0
00018622 3238 F700                  		move.w	($FFFFF700).w,d1
00018626 0441 0080                  		subi.w	#$80,d1
0001862A 0241 FF80                  		andi.w	#$FF80,d1
0001862E 9041                       		sub.w	d1,d0
00018630 0C40 0280                  		cmpi.w	#$280,d0
00018634 6300                       		bls.s	Obj70_NoDel
00018636                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
00018636                            	;	beq.s	Obj70_Delete		; if it's zero, don't remember object
00018636                            	;	movea.w	d0,a2	; load address into a2
00018636                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00018636 6000                       		bra.s	Obj70_Delete	; and delete object
00018638                            
00018638                            Obj70_NoDel:
00018638 4EF9 0000 E96A             		jmp	DisplaySprite
0001863E                            ; ===========================================================================
0001863E                            
0001863E                            Obj70_Delete:
0001863E 4EF9 0000 E9BA             		jmp	DeleteObject
00018644                            ; ===========================================================================
00018644                            
00018644                            Obj70_Move2:				; XREF: Obj70_Main
00018644 1028 0038                  		move.b	$38(a0),d0
00018648 0240 0018                  		andi.w	#$18,d0
0001864C 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00018652 43F1 0000                  		lea	(a1,d0.w),a1
00018656 3159 0010                  		move.w	(a1)+,$10(a0)
0001865A 3159 0012                  		move.w	(a1)+,$12(a0)
0001865E 3159 0034                  		move.w	(a1)+,$34(a0)
00018662 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00018666 317C 0007 003A             		move.w	#7,$3A(a0)
0001866C 4E75                       		rts	
0001866E                            ; ===========================================================================
0001866E 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00018676 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
0001867E FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00018686 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
0001868E                            ; ---------------------------------------------------------------------------
0001868E                            ; Sprite mappings - large girder block (SBZ)
0001868E                            ; ---------------------------------------------------------------------------
0001868E                            Map_obj70:
0001868E                            	include "_maps\obj70.asm"
0001868E                            ; ---------------------------------------------------------------------------
0001868E                            ; Sprite mappings - large girder block (SBZ)
0001868E                            ; ---------------------------------------------------------------------------
0001868E 0000                       		dc.w byte_1662A-Map_obj70
00018690 0C                         byte_1662A:	dc.b $C
00018691 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00018696 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0001869B E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
000186A0 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
000186A5 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
000186AA 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
000186AF E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
000186B4 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
000186B9 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
000186BE 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
000186C3 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
000186C8 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
000186CE 00                         		even
000186CE 00                         		even
000186CE                            
000186CE                            ; ===========================================================================
000186CE                            ; ---------------------------------------------------------------------------
000186CE                            ; Object 72 - teleporter (SBZ)
000186CE                            ; ---------------------------------------------------------------------------
000186CE                            
000186CE                            Obj72:					; XREF: Obj_Index
000186CE 7000                       		moveq	#0,d0
000186D0 1028 0024                  		move.b	$24(a0),d0
000186D4 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
000186D8 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
000186DC 3028 0008                  		move.w	8(a0),d0
000186E0 0240 FF80                  		andi.w	#$FF80,d0
000186E4 3238 F700                  		move.w	($FFFFF700).w,d1
000186E8 0441 0080                  		subi.w	#$80,d1
000186EC 0241 FF80                  		andi.w	#$FF80,d1
000186F0 9041                       		sub.w	d1,d0
000186F2 0C40 0280                  		cmpi.w	#$280,d0
000186F6 6300                       		bls.s	Obj72_NoDel
000186F8 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000186FC 6700                       		beq.s	Obj72_Delete	; if it's zero, don't remember object
000186FE 3440                       		movea.w	d0,a2	; load address into a2
00018700 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00018704 6000                       		bra.s	Obj72_Delete	; and delete object
00018706                            
00018706                            Obj72_NoDel:
00018706 4E75                       		rts	
00018708                            ; ===========================================================================
00018708                            
00018708                            Obj72_Delete:
00018708 4EF9 0000 E9BA             		jmp	DeleteObject
0001870E                            ; ===========================================================================
0001870E 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00018710 0000                       		dc.w loc_166C8-Obj72_Index
00018712 0000                       		dc.w loc_1675E-Obj72_Index
00018714 0000                       		dc.w loc_16798-Obj72_Index
00018716                            ; ===========================================================================
00018716                            
00018716                            Obj72_Main:				; XREF: Obj72_Index
00018716 5428 0024                  		addq.b	#2,$24(a0)
0001871A 1028 0028                  		move.b	$28(a0),d0
0001871E D040                       		add.w	d0,d0
00018720 0240 001E                  		andi.w	#$1E,d0
00018724 45FA 0000                  		lea	Obj72_Data(pc),a2
00018728 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001872C 315A 003A                  		move.w	(a2)+,$3A(a0)
00018730 214A 003C                  		move.l	a2,$3C(a0)
00018734 315A 0036                  		move.w	(a2)+,$36(a0)
00018738 315A 0038                  		move.w	(a2)+,$38(a0)
0001873C                            
0001873C                            loc_166C8:				; XREF: Obj72_Index
0001873C 43F8 D000                  		lea	($FFFFD000).w,a1
00018740 3029 0008                  		move.w	8(a1),d0
00018744 9068 0008                  		sub.w	8(a0),d0
00018748 0828 0000 0022             		btst	#0,$22(a0)
0001874E 6700                       		beq.s	loc_166E0
00018750 0640 000F                  		addi.w	#$F,d0
00018754                            
00018754                            loc_166E0:
00018754 0C40 0010                  		cmpi.w	#$10,d0
00018758 6400                       		bcc.s	locret_1675C
0001875A 3229 000C                  		move.w	$C(a1),d1
0001875E 9268 000C                  		sub.w	$C(a0),d1
00018762 0641 0020                  		addi.w	#$20,d1
00018766 0C41 0040                  		cmpi.w	#$40,d1
0001876A 6400                       		bcc.s	locret_1675C
0001876C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018770 6600                       		bne.s	locret_1675C
00018772 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00018778 6600                       		bne.s	loc_1670E
0001877A 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00018780 6500                       		bcs.s	locret_1675C
00018782                            
00018782                            loc_1670E:
00018782 5428 0024                  		addq.b	#2,$24(a0)
00018786 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001878C 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00018792 337C 0800 0020             		move.w	#$800,$20(a1)
00018798 337C 0000 0010             		move.w	#0,$10(a1)
0001879E 337C 0000 0012             		move.w	#0,$12(a1)
000187A4 08A8 0005 0022             		bclr	#5,$22(a0)
000187AA 08A9 0005 0022             		bclr	#5,$22(a1)
000187B0 08E9 0001 0022             		bset	#1,$22(a1)
000187B6 3368 0008 0008             		move.w	8(a0),8(a1)
000187BC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000187C2 4228 0032                  		clr.b	$32(a0)
000187C6 303C 00BE                  		move.w	#$BE,d0
000187CA 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
000187D0                            
000187D0                            locret_1675C:
000187D0 4E75                       		rts	
000187D2                            ; ===========================================================================
000187D2                            
000187D2                            loc_1675E:				; XREF: Obj72_Index
000187D2 43F8 D000                  		lea	($FFFFD000).w,a1
000187D6 1028 0032                  		move.b	$32(a0),d0
000187DA 5428 0032                  		addq.b	#2,$32(a0)
000187DE 4EB9 0000 29F6             		jsr	(CalcSine).l
000187E4 EA40                       		asr.w	#5,d0
000187E6 3428 000C                  		move.w	$C(a0),d2
000187EA 9440                       		sub.w	d0,d2
000187EC 3342 000C                  		move.w	d2,$C(a1)
000187F0 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000187F6 6600                       		bne.s	locret_16796
000187F8 6100 0000                  		bsr.w	sub_1681C
000187FC 5428 0024                  		addq.b	#2,$24(a0)
00018800 303C 00BC                  		move.w	#$BC,d0
00018804 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play teleport sound
0001880A                            
0001880A                            locret_16796:
0001880A 4E75                       		rts	
0001880C                            ; ===========================================================================
0001880C                            
0001880C                            loc_16798:				; XREF: Obj72_Index
0001880C 588F                       		addq.l	#4,sp
0001880E 43F8 D000                  		lea	($FFFFD000).w,a1
00018812 5328 002E                  		subq.b	#1,$2E(a0)
00018816 6A00                       		bpl.s	loc_167DA
00018818 3368 0036 0008             		move.w	$36(a0),8(a1)
0001881E 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018824 7200                       		moveq	#0,d1
00018826 1228 003A                  		move.b	$3A(a0),d1
0001882A 5801                       		addq.b	#4,d1
0001882C B228 003B                  		cmp.b	$3B(a0),d1
00018830 6500                       		bcs.s	loc_167C2
00018832 7200                       		moveq	#0,d1
00018834 6000                       		bra.s	loc_16800
00018836                            ; ===========================================================================
00018836                            
00018836                            loc_167C2:
00018836 1141 003A                  		move.b	d1,$3A(a0)
0001883A 2468 003C                  		movea.l	$3C(a0),a2
0001883E 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00018844 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
0001884A 6000 0000                  		bra.w	sub_1681C
0001884E                            ; ===========================================================================
0001884E                            
0001884E                            loc_167DA:
0001884E 2429 0008                  		move.l	8(a1),d2
00018852 2629 000C                  		move.l	$C(a1),d3
00018856 3029 0010                  		move.w	$10(a1),d0
0001885A 48C0                       		ext.l	d0
0001885C E180                       		asl.l	#8,d0
0001885E D480                       		add.l	d0,d2
00018860 3029 0012                  		move.w	$12(a1),d0
00018864 48C0                       		ext.l	d0
00018866 E180                       		asl.l	#8,d0
00018868 D680                       		add.l	d0,d3
0001886A 2342 0008                  		move.l	d2,8(a1)
0001886E 2343 000C                  		move.l	d3,$C(a1)
00018872 4E75                       		rts	
00018874                            ; ===========================================================================
00018874                            
00018874                            loc_16800:
00018874 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
0001887A 4228 0024                  		clr.b	$24(a0)
0001887E 4238 F7C8                  		clr.b	($FFFFF7C8).w
00018882 337C 0000 0010             		move.w	#0,$10(a1)
00018888 337C 0200 0012             		move.w	#$200,$12(a1)
0001888E 4E75                       		rts	
00018890                            
00018890                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018890                            
00018890                            
00018890                            sub_1681C:
00018890 7000                       		moveq	#0,d0
00018892 343C 1000                  		move.w	#$1000,d2
00018896 3028 0036                  		move.w	$36(a0),d0
0001889A 9069 0008                  		sub.w	8(a1),d0
0001889E 6C00                       		bge.s	loc_16830
000188A0 4440                       		neg.w	d0
000188A2 4442                       		neg.w	d2
000188A4                            
000188A4                            loc_16830:
000188A4 7200                       		moveq	#0,d1
000188A6 363C 1000                  		move.w	#$1000,d3
000188AA 3228 0038                  		move.w	$38(a0),d1
000188AE 9269 000C                  		sub.w	$C(a1),d1
000188B2 6C00                       		bge.s	loc_16844
000188B4 4441                       		neg.w	d1
000188B6 4443                       		neg.w	d3
000188B8                            
000188B8                            loc_16844:
000188B8 B240                       		cmp.w	d0,d1
000188BA 6500                       		bcs.s	loc_1687A
000188BC 7200                       		moveq	#0,d1
000188BE 3228 0038                  		move.w	$38(a0),d1
000188C2 9269 000C                  		sub.w	$C(a1),d1
000188C6 4841                       		swap	d1
000188C8 83C3                       		divs.w	d3,d1
000188CA 7000                       		moveq	#0,d0
000188CC 3028 0036                  		move.w	$36(a0),d0
000188D0 9069 0008                  		sub.w	8(a1),d0
000188D4 6700                       		beq.s	loc_16866
000188D6 4840                       		swap	d0
000188D8 81C1                       		divs.w	d1,d0
000188DA                            
000188DA                            loc_16866:
000188DA 3340 0010                  		move.w	d0,$10(a1)
000188DE 3343 0012                  		move.w	d3,$12(a1)
000188E2 4A41                       		tst.w	d1
000188E4 6A00                       		bpl.s	loc_16874
000188E6 4441                       		neg.w	d1
000188E8                            
000188E8                            loc_16874:
000188E8 3141 002E                  		move.w	d1,$2E(a0)
000188EC 4E75                       		rts	
000188EE                            ; ===========================================================================
000188EE                            
000188EE                            loc_1687A:
000188EE 7000                       		moveq	#0,d0
000188F0 3028 0036                  		move.w	$36(a0),d0
000188F4 9069 0008                  		sub.w	8(a1),d0
000188F8 4840                       		swap	d0
000188FA 81C2                       		divs.w	d2,d0
000188FC 7200                       		moveq	#0,d1
000188FE 3228 0038                  		move.w	$38(a0),d1
00018902 9269 000C                  		sub.w	$C(a1),d1
00018906 6700                       		beq.s	loc_16898
00018908 4841                       		swap	d1
0001890A 83C0                       		divs.w	d0,d1
0001890C                            
0001890C                            loc_16898:
0001890C 3341 0012                  		move.w	d1,$12(a1)
00018910 3342 0010                  		move.w	d2,$10(a1)
00018914 4A40                       		tst.w	d0
00018916 6A00                       		bpl.s	loc_168A6
00018918 4440                       		neg.w	d0
0001891A                            
0001891A                            loc_168A6:
0001891A 3140 002E                  		move.w	d0,$2E(a0)
0001891E 4E75                       		rts	
00018920                            ; End of function sub_1681C
00018920                            
00018920                            ; ===========================================================================
00018920 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00018926 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
0001892C 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00018930 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00018936 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
0001893C 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00018942 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00018948 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
0001894E 0884 0298 0894             		dc.w $884, $298, $894
00018954 0270 0894 0190             		dc.w $270, $894, $190
0001895A 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00018960 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00018966 1184 0498 1158             		dc.w $1184, $498, $1158
0001896C 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00018972 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00018978 04E8 0F94 0590             		dc.w $4E8, $F94, $590
0001897E 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00018984 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
0001898A 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00018990 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00018996 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
0001899C FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
000189A2 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
000189A8                            ; ===========================================================================
000189A8                            ; ---------------------------------------------------------------------------
000189A8                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
000189A8                            ; ---------------------------------------------------------------------------
000189A8                            
000189A8                            Obj78:					; XREF: Obj_Index
000189A8 7000                       		moveq	#0,d0
000189AA 1028 0024                  		move.b	$24(a0),d0
000189AE 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
000189B2 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
000189B6                            ; ===========================================================================
000189B6 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
000189B8 0000                       		dc.w Obj78_Action-Obj78_Index
000189BA 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000189BC 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
000189BE 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000189C0 0000                       		dc.w Obj78_Delete-Obj78_Index
000189C2 0000                       		dc.w loc_16CC0-Obj78_Index
000189C4                            ; ===========================================================================
000189C4                            
000189C4                            locret_16950:
000189C4 4E75                       		rts	
000189C6                            ; ===========================================================================
000189C6                            
000189C6                            Obj78_Main:				; XREF: Obj78_Index
000189C6 117C 0007 0016             		move.b	#7,$16(a0)
000189CC 117C 0008 0017             		move.b	#8,$17(a0)
000189D2 4EB9 0000 E930             		jsr	ObjectFall
000189D8 4EBA E4BC                  		jsr	ObjHitFloor
000189DC 4A41                       		tst.w	d1
000189DE 6AE4                       		bpl.s	locret_16950
000189E0 D368 000C                  		add.w	d1,$C(a0)
000189E4 4268 0012                  		clr.w	$12(a0)
000189E8 5428 0024                  		addq.b	#2,$24(a0)
000189EC 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
000189F4 317C 22B0 0002             		move.w	#$22B0,2(a0)
000189FA 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00018A00 6700                       		beq.s	loc_16996
00018A02 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00018A08                            
00018A08                            loc_16996:
00018A08 0228 0003 0001             		andi.b	#3,1(a0)
00018A0E 0028 0004 0001             		ori.b	#4,1(a0)
00018A14 1168 0001 0022             		move.b	1(a0),$22(a0)
00018A1A 117C 0004 0018             		move.b	#4,$18(a0)
00018A20 117C 0008 0019             		move.b	#8,$19(a0)
00018A26 117C 000B 0020             		move.b	#$B,$20(a0)
00018A2C 3428 0008                  		move.w	8(a0),d2
00018A30 7A0C                       		moveq	#$C,d5
00018A32 0828 0000 0022             		btst	#0,$22(a0)
00018A38 6700                       		beq.s	loc_169CA
00018A3A 4445                       		neg.w	d5
00018A3C                            
00018A3C                            loc_169CA:
00018A3C 1C3C 0004                  		move.b	#4,d6
00018A40 7600                       		moveq	#0,d3
00018A42 7804                       		moveq	#4,d4
00018A44 2448                       		movea.l	a0,a2
00018A46 7202                       		moveq	#2,d1
00018A48                            
00018A48                            Obj78_LoadBody:
00018A48 4EB9 0000 F0D6             		jsr	SingleObjLoad2
00018A4E 6600                       		bne.s	Obj78_QuitLoad
00018A50 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00018A54 1346 0024                  		move.b	d6,$24(a1)
00018A58 5406                       		addq.b	#2,d6
00018A5A 2368 0004 0004             		move.l	4(a0),4(a1)
00018A60 3368 0002 0002             		move.w	2(a0),2(a1)
00018A66 137C 0005 0018             		move.b	#5,$18(a1)
00018A6C 137C 0008 0019             		move.b	#8,$19(a1)
00018A72 137C 00CB 0020             		move.b	#$CB,$20(a1)
00018A78 D445                       		add.w	d5,d2
00018A7A 3342 0008                  		move.w	d2,8(a1)
00018A7E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018A84 1368 0022 0022             		move.b	$22(a0),$22(a1)
00018A8A 1368 0022 0001             		move.b	$22(a0),1(a1)
00018A90 137C 0008 001A             		move.b	#8,$1A(a1)
00018A96 234A 003C                  		move.l	a2,$3C(a1)
00018A9A 1344 003C                  		move.b	d4,$3C(a1)
00018A9E 5804                       		addq.b	#4,d4
00018AA0 2449                       		movea.l	a1,a2
00018AA2                            
00018AA2                            Obj78_QuitLoad:
00018AA2 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00018AA6                            
00018AA6 117C 0007 002A             		move.b	#7,$2A(a0)
00018AAC 4228 003C                  		clr.b	$3C(a0)
00018AB0                            
00018AB0                            Obj78_Action:				; XREF: Obj78_Index
00018AB0 4A28 0022                  		tst.b	$22(a0)
00018AB4 6B00 0000                  		bmi.w	loc_16C96
00018AB8 7000                       		moveq	#0,d0
00018ABA 1028 0025                  		move.b	$25(a0),d0
00018ABE 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00018AC2 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00018AC6 1228 002B                  		move.b	$2B(a0),d1
00018ACA 6A00                       		bpl.s	Obj78_Display
00018ACC 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018AD2 1028 0026                  		move.b	$26(a0),d0
00018AD6 0240 007F                  		andi.w	#$7F,d0
00018ADA 5828 0026                  		addq.b	#4,$26(a0)
00018ADE 1031 0000                  		move.b	(a1,d0.w),d0
00018AE2 6A00                       		bpl.s	Obj78_AniHead
00018AE4 08A8 0007 002B             		bclr	#7,$2B(a0)
00018AEA 6000                       		bra.s	Obj78_Display
00018AEC                            ; ===========================================================================
00018AEC                            
00018AEC                            Obj78_AniHead:
00018AEC 0201 0010                  		andi.b	#$10,d1
00018AF0 D001                       		add.b	d1,d0
00018AF2 1140 001A                  		move.b	d0,$1A(a0)
00018AF6                            
00018AF6                            Obj78_Display:
00018AF6 3028 0008                  		move.w	8(a0),d0
00018AFA 0240 FF80                  		andi.w	#$FF80,d0
00018AFE 3238 F700                  		move.w	($FFFFF700).w,d1
00018B02 0441 0080                  		subi.w	#$80,d1
00018B06 0241 FF80                  		andi.w	#$FF80,d1
00018B0A 9041                       		sub.w	d1,d0
00018B0C 0C40 0280                  		cmpi.w	#$280,d0
00018B10 6200 0000                  		bhi.w	Obj78_ChkGone
00018B14 4EF9 0000 E96A             		jmp	DisplaySprite
00018B1A                            ; ===========================================================================
00018B1A                            
00018B1A                            Obj78_ChkGone:
00018B1A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018B1E 6700                       		beq.s	loc_16ABC		; if it's zero, don't remember object
00018B20 3440                       		movea.w	d0,a2	; load address into a2
00018B22 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00018B26                            
00018B26                            loc_16ABC:
00018B26 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00018B2C 4E75                       		rts	
00018B2E                            ; ===========================================================================
00018B2E                            
00018B2E                            Obj78_Delete:				; XREF: Obj78_Index
00018B2E 4EF9 0000 E9BA             		jmp	DeleteObject
00018B34                            ; ===========================================================================
00018B34 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00018B36 0000                       		dc.w loc_16B02-Obj78_Index2
00018B38                            ; ===========================================================================
00018B38                            
00018B38                            Obj78_Move:				; XREF: Obj78_Index2
00018B38 5328 002A                  		subq.b	#1,$2A(a0)
00018B3C 6B00                       		bmi.s	Obj78_Move2
00018B3E 4E75                       		rts	
00018B40                            ; ===========================================================================
00018B40                            
00018B40                            Obj78_Move2:
00018B40 5428 0025                  		addq.b	#2,$25(a0)
00018B44 117C 0010 002A             		move.b	#$10,$2A(a0)
00018B4A 317C FF40 0010             		move.w	#-$C0,$10(a0)
00018B50 317C 0040 001C             		move.w	#$40,$1C(a0)
00018B56 0868 0004 002B             		bchg	#4,$2B(a0)
00018B5C 6600                       		bne.s	loc_16AFC
00018B5E 4268 0010                  		clr.w	$10(a0)
00018B62 4468 001C                  		neg.w	$1C(a0)
00018B66                            
00018B66                            loc_16AFC:
00018B66 08E8 0007 002B             		bset	#7,$2B(a0)
00018B6C                            
00018B6C                            loc_16B02:				; XREF: Obj78_Index2
00018B6C 5328 002A                  		subq.b	#1,$2A(a0)
00018B70 6B00                       		bmi.s	loc_16B5E
00018B72 2F28 0008                  		move.l	8(a0),-(sp)
00018B76 2428 0008                  		move.l	8(a0),d2
00018B7A 3028 0010                  		move.w	$10(a0),d0
00018B7E 0828 0000 0022             		btst	#0,$22(a0)
00018B84 6700                       		beq.s	loc_16B1E
00018B86 4440                       		neg.w	d0
00018B88                            
00018B88                            loc_16B1E:
00018B88 48C0                       		ext.l	d0
00018B8A E180                       		asl.l	#8,d0
00018B8C D480                       		add.l	d0,d2
00018B8E 2142 0008                  		move.l	d2,8(a0)
00018B92 4EBA E302                  		jsr	ObjHitFloor
00018B96 241F                       		move.l	(sp)+,d2
00018B98 0C41 FFF8                  		cmpi.w	#-8,d1
00018B9C 6D00                       		blt.s	loc_16B70
00018B9E 0C41 000C                  		cmpi.w	#$C,d1
00018BA2 6C00                       		bge.s	loc_16B70
00018BA4 D368 000C                  		add.w	d1,$C(a0)
00018BA8 4842                       		swap	d2
00018BAA B468 0008                  		cmp.w	8(a0),d2
00018BAE 6700                       		beq.s	locret_16B5C
00018BB0 7000                       		moveq	#0,d0
00018BB2 1028 003C                  		move.b	$3C(a0),d0
00018BB6 5228 003C                  		addq.b	#1,$3C(a0)
00018BBA 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018BC0 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018BC4                            
00018BC4                            locret_16B5C:
00018BC4 4E75                       		rts	
00018BC6                            ; ===========================================================================
00018BC6                            
00018BC6                            loc_16B5E:
00018BC6 5528 0025                  		subq.b	#2,$25(a0)
00018BCA 117C 0007 002A             		move.b	#7,$2A(a0)
00018BD0 317C 0000 0010             		move.w	#0,$10(a0)
00018BD6 4E75                       		rts	
00018BD8                            ; ===========================================================================
00018BD8                            
00018BD8                            loc_16B70:
00018BD8 2142 0008                  		move.l	d2,8(a0)
00018BDC 0868 0000 0022             		bchg	#0,$22(a0)
00018BE2 1168 0022 0001             		move.b	$22(a0),1(a0)
00018BE8 7000                       		moveq	#0,d0
00018BEA 1028 003C                  		move.b	$3C(a0),d0
00018BEE 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00018BF4 5228 003C                  		addq.b	#1,$3C(a0)
00018BF8 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018BFE 4E75                       		rts	
00018C00                            ; ===========================================================================
00018C00                            
00018C00                            Obj78_BodySeg2:				; XREF: Obj78_Index
00018C00 2268 003C                  		movea.l	$3C(a0),a1
00018C04 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018C0A 6A00                       		bpl.s	Obj78_BodySeg1
00018C0C 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018C12 1028 0026                  		move.b	$26(a0),d0
00018C16 0240 007F                  		andi.w	#$7F,d0
00018C1A 5828 0026                  		addq.b	#4,$26(a0)
00018C1E 4A31 0004                  		tst.b	4(a1,d0.w)
00018C22 6A00                       		bpl.s	Obj78_AniBody
00018C24 5828 0026                  		addq.b	#4,$26(a0)
00018C28                            
00018C28                            Obj78_AniBody:
00018C28 1031 0000                  		move.b	(a1,d0.w),d0
00018C2C 5000                       		addq.b	#8,d0
00018C2E 1140 001A                  		move.b	d0,$1A(a0)
00018C32                            
00018C32                            Obj78_BodySeg1:				; XREF: Obj78_Index
00018C32 2268 003C                  		movea.l	$3C(a0),a1
00018C36 4A28 0022                  		tst.b	$22(a0)
00018C3A 6B00 0000                  		bmi.w	loc_16C90
00018C3E 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018C44 1169 0025 0025             		move.b	$25(a1),$25(a0)
00018C4A 6700 0000                  		beq.w	loc_16C64
00018C4E 3169 001C 001C             		move.w	$1C(a1),$1C(a0)
00018C54 3029 0010                  		move.w	$10(a1),d0
00018C58 D069 001C                  		add.w	$1C(a1),d0
00018C5C 3140 0010                  		move.w	d0,$10(a0)
00018C60 2428 0008                  		move.l	8(a0),d2
00018C64 2602                       		move.l	d2,d3
00018C66 3028 0010                  		move.w	$10(a0),d0
00018C6A 0828 0000 0022             		btst	#0,$22(a0)
00018C70 6700                       		beq.s	loc_16C0C
00018C72 4440                       		neg.w	d0
00018C74                            
00018C74                            loc_16C0C:
00018C74 48C0                       		ext.l	d0
00018C76 E180                       		asl.l	#8,d0
00018C78 D480                       		add.l	d0,d2
00018C7A 2142 0008                  		move.l	d2,8(a0)
00018C7E 4843                       		swap	d3
00018C80 B668 0008                  		cmp.w	8(a0),d3
00018C84 6700                       		beq.s	loc_16C64
00018C86 7000                       		moveq	#0,d0
00018C88 1028 003C                  		move.b	$3C(a0),d0
00018C8C 1231 002C                  		move.b	$2C(a1,d0.w),d1
00018C90 0C01 0080                  		cmpi.b	#-$80,d1
00018C94 6600                       		bne.s	loc_16C50
00018C96 4843                       		swap	d3
00018C98 2143 0008                  		move.l	d3,8(a0)
00018C9C 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018CA0 0868 0000 0022             		bchg	#0,$22(a0)
00018CA6 1168 0022 0001             		move.b	$22(a0),1(a0)
00018CAC 5228 003C                  		addq.b	#1,$3C(a0)
00018CB0 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018CB6 6000                       		bra.s	loc_16C64
00018CB8                            ; ===========================================================================
00018CB8                            
00018CB8                            loc_16C50:
00018CB8 4881                       		ext.w	d1
00018CBA D368 000C                  		add.w	d1,$C(a0)
00018CBE 5228 003C                  		addq.b	#1,$3C(a0)
00018CC2 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018CC8 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018CCC                            
00018CCC                            loc_16C64:
00018CCC 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00018CD2 6700                       		beq.s	loc_16C90
00018CD4 0C11 0027                  		cmpi.b	#$27,0(a1)
00018CD8 6700                       		beq.s	loc_16C7C
00018CDA 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00018CE0 6600                       		bne.s	loc_16C82
00018CE2                            
00018CE2                            loc_16C7C:
00018CE2 4229 0020                  		clr.b	$20(a1)	; immediately remove all touch response values when destroying the head to avoid taking damage
00018CE6 117C 000A 0024             		move.b	#$A,$24(a0)
00018CEC                            
00018CEC                            loc_16C82:
00018CEC 4EF9 0000 E96A             		jmp	DisplaySprite
00018CF2                            
00018CF2                            ; ===========================================================================
00018CF2 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00018CFA                            ; ===========================================================================
00018CFA                            
00018CFA                            loc_16C90:
00018CFA 08E9 0007 0022             		bset	#7,$22(a1)
00018D00                            
00018D00                            loc_16C96:
00018D00 7000                       		moveq	#0,d0
00018D02 1028 0024                  		move.b	$24(a0),d0
00018D06 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00018D0A 0828 0000 0022             		btst	#0,$22(a0)
00018D10 6700                       		beq.s	loc_16CAA
00018D12 4440                       		neg.w	d0
00018D14                            
00018D14                            loc_16CAA:
00018D14 3140 0010                  		move.w	d0,$10(a0)
00018D18 317C FC00 0012             		move.w	#-$400,$12(a0)
00018D1E 117C 000C 0024             		move.b	#$C,$24(a0)
00018D24 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00018D2A                            
00018D2A                            loc_16CC0:				; XREF: Obj78_Index
00018D2A 4EB9 0000 E930             		jsr	ObjectFall
00018D30 4A68 0012                  		tst.w	$12(a0)
00018D34 6B00                       		bmi.s	loc_16CE0
00018D36 4EBA E15E                  		jsr	ObjHitFloor
00018D3A 4A41                       		tst.w	d1
00018D3C 6A00                       		bpl.s	loc_16CE0
00018D3E D368 000C                  		add.w	d1,$C(a0)
00018D42 317C FC00 0012             		move.w	#-$400,$12(a0)
00018D48                            
00018D48                            loc_16CE0:
00018D48 4A28 0001                  		tst.b	1(a0)
00018D4C 6A00 FDCC                  		bpl.w	Obj78_ChkGone
00018D50 4EF9 0000 E96A             		jmp	DisplaySprite
00018D56                            ; ===========================================================================
00018D56                            Ani_obj78:
00018D56                            	include "_anim\obj78.asm"
00018D56                            ; ---------------------------------------------------------------------------
00018D56                            ; Animation script - Caterkiller enemy (uses non-standard format)
00018D56                            ; ---------------------------------------------------------------------------
00018D56 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00018D66 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00018D76 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00018D86 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00018D96 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00018DA6 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00018DB6 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00018DC6 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00018DD6                            	even
00018DD6                            	even
00018DD6                            
00018DD6                            ; ---------------------------------------------------------------------------
00018DD6                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018DD6                            ; ---------------------------------------------------------------------------
00018DD6                            Map_obj78:
00018DD6                            	include "_maps\obj78.asm"
00018DD6                            ; ---------------------------------------------------------------------------
00018DD6                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018DD6                            ; ---------------------------------------------------------------------------
00018DD6 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00018DDA 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00018DDE 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00018DE2 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00018DE6 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00018DEA 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00018DEE 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00018DF2 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00018DF6 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00018DFA 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00018DFE 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00018E02 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00018E06 01                         byte_16D9E:	dc.b 1
00018E07 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00018E0C 01                         byte_16DA4:	dc.b 1
00018E0D F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00018E12 01                         byte_16DAA:	dc.b 1
00018E13 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00018E18 01                         byte_16DB0:	dc.b 1
00018E19 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00018E1E 01                         byte_16DB6:	dc.b 1
00018E1F EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00018E24 01                         byte_16DBC:	dc.b 1
00018E25 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00018E2A 01                         byte_16DC2:	dc.b 1
00018E2B EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00018E30 01                         byte_16DC8:	dc.b 1
00018E31 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00018E36 01                         byte_16DCE:	dc.b 1
00018E37 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00018E3C 01                         byte_16DD4:	dc.b 1
00018E3D F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00018E42 01                         byte_16DDA:	dc.b 1
00018E43 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00018E48 01                         byte_16DE0:	dc.b 1
00018E49 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00018E4E 01                         byte_16DE6:	dc.b 1
00018E4F F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00018E54 01                         byte_16DEC:	dc.b 1
00018E55 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00018E5A 01                         byte_16DF2:	dc.b 1
00018E5B F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00018E60 01                         byte_16DF8:	dc.b 1
00018E61 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00018E66 01                         byte_16DFE:	dc.b 1
00018E67 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00018E6C 01                         byte_16E04:	dc.b 1
00018E6D F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00018E72 01                         byte_16E0A:	dc.b 1
00018E73 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00018E78 01                         byte_16E10:	dc.b 1
00018E79 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00018E7E 01                         byte_16E16:	dc.b 1
00018E7F EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00018E84 01                         byte_16E1C:	dc.b 1
00018E85 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00018E8A 01                         byte_16E22:	dc.b 1
00018E8B EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00018E90 01                         byte_16E28:	dc.b 1
00018E91 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00018E96                            		even
00018E96                            		even
00018E96                            
00018E96                            ; ===========================================================================
00018E96                            ; ---------------------------------------------------------------------------
00018E96                            ; Object 79 - lamppost
00018E96                            ; ---------------------------------------------------------------------------
00018E96                            
00018E96                            Obj79:					; XREF: Obj_Index
00018E96 7000                       		moveq	#0,d0
00018E98 1028 0024                  		move.b	$24(a0),d0
00018E9C 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00018EA0 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00018EA4 4EFA 810E                  		jmp	MarkObjGone
00018EA8                            ; ===========================================================================
00018EA8 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00018EAA 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00018EAC 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00018EAE 0000                       		dc.w Obj79_Twirl-Obj79_Index
00018EB0                            ; ===========================================================================
00018EB0                            
00018EB0                            Obj79_Main:				; XREF: Obj79_Index
00018EB0 5428 0024                  		addq.b	#2,$24(a0)
00018EB4 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00018EBC 317C 0571 0002             		move.w	#lamppostart,2(a0)
00018EC2 117C 0004 0001             		move.b	#4,1(a0)
00018EC8 117C 0008 0019             		move.b	#8,$19(a0)
00018ECE 117C 0005 0018             		move.b	#5,$18(a0)
00018ED4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018ED8 3440                       		movea.w	d0,a2	; load address into a2
00018EDA 0812 0000                  		btst	#0,(a2)
00018EDE 6600                       		bne.s	Obj79_RedLamp
00018EE0 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018EE4 0201 007F                  		andi.b	#$7F,d1
00018EE8 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00018EEC 0202 007F                  		andi.b	#$7F,d2
00018EF0 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00018EF2 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00018EF4                            
00018EF4                            Obj79_RedLamp:
00018EF4 08D2 0000                  		bset	#0,(a2)
00018EF8 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00018EFE 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00018F04 4E75                       		rts	
00018F06                            ; ===========================================================================
00018F06                            
00018F06                            Obj79_BlueLamp:				; XREF: Obj79_Index
00018F06 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00018F0A 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00018F0E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018F12 6B00 0000                  		bmi.w	locret_16F90
00018F16 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018F1A 0201 007F                  		andi.b	#$7F,d1
00018F1E 1428 0028                  		move.b	$28(a0),d2
00018F22 0202 007F                  		andi.b	#$7F,d2
00018F26 B202                       		cmp.b	d2,d1
00018F28 6500                       		bcs.s	Obj79_HitLamp
00018F2A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018F2E 3440                       		movea.w	d0,a2	; load address into a2
00018F30 08D2 0000                  		bset	#0,(a2)
00018F34 117C 0004 0024             		move.b	#4,$24(a0)
00018F3A 117C 0003 001A             		move.b	#3,$1A(a0)
00018F40 6000 0000                  		bra.w	locret_16F90
00018F44                            ; ===========================================================================
00018F44                            
00018F44                            Obj79_HitLamp:
00018F44 3038 D008                  		move.w	($FFFFD008).w,d0
00018F48 9068 0008                  		sub.w	8(a0),d0
00018F4C 5040                       		addq.w	#8,d0
00018F4E 0C40 0010                  		cmpi.w	#$10,d0
00018F52 6400 0000                  		bcc.w	locret_16F90
00018F56 3038 D00C                  		move.w	($FFFFD00C).w,d0
00018F5A 9068 000C                  		sub.w	$C(a0),d0
00018F5E 0640 0040                  		addi.w	#$40,d0
00018F62 0C40 0068                  		cmpi.w	#$68,d0
00018F66 6400                       		bcc.s	locret_16F90
00018F68 303C 00A1                  		move.w	#$A1,d0
00018F6C 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play lamppost sound
00018F72 5428 0024                  		addq.b	#2,$24(a0)
00018F76 4EB9 0000 F0C0             		jsr	SingleObjLoad
00018F7C 6600                       		bne.s	loc_16F76
00018F7E 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00018F82 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00018F88 3368 0008 0030             		move.w	8(a0),$30(a1)
00018F8E 3368 000C 0032             		move.w	$C(a0),$32(a1)
00018F94 0469 0018 0032             		subi.w	#$18,$32(a1)
00018F9A 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00018FA2 337C 0571 0002             		move.w	#lamppostart,2(a1)
00018FA8 137C 0004 0001             		move.b	#4,1(a1)
00018FAE 137C 0008 0019             		move.b	#8,$19(a1)
00018FB4 137C 0004 0018             		move.b	#4,$18(a1)
00018FBA 137C 0002 001A             		move.b	#2,$1A(a1)
00018FC0 337C 0020 0036             		move.w	#$20,$36(a1)
00018FC6                            
00018FC6                            loc_16F76:
00018FC6 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00018FCC 6100 0000                  		bsr.w	Obj79_StoreInfo
00018FD0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018FD4 3440                       		movea.w	d0,a2	; load address into a2
00018FD6 08D2 0000                  		bset	#0,(a2)
00018FDA                            
00018FDA                            locret_16F90:
00018FDA 4E75                       		rts	
00018FDC                            ; ===========================================================================
00018FDC                            
00018FDC                            Obj79_AfterHit:				; XREF: Obj79_Index
00018FDC 4E75                       		rts	
00018FDE                            ; ===========================================================================
00018FDE                            
00018FDE                            Obj79_Twirl:				; XREF: Obj79_Index
00018FDE 5368 0036                  		subq.w	#1,$36(a0)
00018FE2 6A00                       		bpl.s	loc_16FA0
00018FE4 117C 0004 0024             		move.b	#4,$24(a0)
00018FEA                            
00018FEA                            loc_16FA0:
00018FEA 1028 0026                  		move.b	$26(a0),d0
00018FEE 0428 0010 0026             		subi.b	#$10,$26(a0)
00018FF4 0400 0040                  		subi.b	#$40,d0
00018FF8 4EB9 0000 29F6             		jsr	(CalcSine).l
00018FFE C3FC 0C00                  		muls.w	#$C00,d1
00019002 4841                       		swap	d1
00019004 D268 0030                  		add.w	$30(a0),d1
00019008 3141 0008                  		move.w	d1,8(a0)
0001900C C1FC 0C00                  		muls.w	#$C00,d0
00019010 4840                       		swap	d0
00019012 D068 0032                  		add.w	$32(a0),d0
00019016 3140 000C                  		move.w	d0,$C(a0)
0001901A 4E75                       		rts	
0001901C                            ; ===========================================================================
0001901C                            ; ---------------------------------------------------------------------------
0001901C                            ; Subroutine to	store information when you hit a lamppost
0001901C                            ; ---------------------------------------------------------------------------
0001901C                            
0001901C                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
0001901C 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00019022 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00019028 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
0001902E 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00019034 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
0001903A 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00019040 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00019046 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
0001904C 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00019052 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00019058 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
0001905E 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00019064 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
0001906A 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00019070 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00019076 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
0001907C 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00019082 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00019088 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
0001908E 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00019094 4E75                       		rts	
00019096                            
00019096                            ; ---------------------------------------------------------------------------
00019096                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00019096                            ; ---------------------------------------------------------------------------
00019096                            
00019096                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019096                            
00019096                            
00019096                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00019096 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
0001909C 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
000190A2 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
000190A8 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
000190AE 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
000190B4 4278 FE20                  		clr.w	($FFFFFE20).w
000190B8 4238 FE1B                  		clr.b	($FFFFFE1B).w
000190BC 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
000190C2 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
000190C8 5338 FE24                  		subq.b	#1,($FFFFFE24).w
000190CC 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
000190D2 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000190D8 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
000190DE 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
000190E4 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
000190EA 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
000190F0 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
000190F6 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
000190FC 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00019102 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00019108 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
0001910E 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00019114 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001911A 6600                       		bne.s	loc_170E4
0001911C 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00019122 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00019128 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0001912E                            
0001912E                            loc_170E4:
0001912E 4A38 FE30                  		tst.b	($FFFFFE30).w
00019132 6A00                       		bpl.s	locret_170F6
00019134 3038 FE32                  		move.w	($FFFFFE32).w,d0
00019138 0440 00A0                  		subi.w	#$A0,d0
0001913C 31C0 F728                  		move.w	d0,($FFFFF728).w
00019140                            
00019140                            locret_170F6:
00019140 4E75                       		rts	
00019142                            ; End of function Obj79_LoadInfo
00019142                            
00019142                            ; ===========================================================================
00019142                            ; ---------------------------------------------------------------------------
00019142                            ; Sprite mappings - lamppost
00019142                            ; ---------------------------------------------------------------------------
00019142                            Map_obj79:
00019142                            	include "_maps\obj79.asm"
00019142                            ; ---------------------------------------------------------------------------
00019142                            ; Sprite mappings - lamppost
00019142                            ; ---------------------------------------------------------------------------
00019142 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00019146 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
0001914A 06                         byte_17100:	dc.b 6
0001914B E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00019150 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00019155 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001915A F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001915F D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00019164 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00019169 04                         byte_1711F:	dc.b 4
0001916A E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001916F E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00019174 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00019179 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001917E 02                         byte_17134:	dc.b 2
0001917F F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00019184 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00019189 06                         byte_1713F:	dc.b 6
0001918A E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001918F E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00019194 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00019199 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001919E D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
000191A3 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
000191A8                            		even
000191A8                            		even
000191A8                            
000191A8                            ; ===========================================================================
000191A8                            ; ---------------------------------------------------------------------------
000191A8                            ; Object 7D - hidden points at the end of a level
000191A8                            ; ---------------------------------------------------------------------------
000191A8                            
000191A8                            Obj7D:					; XREF: Obj_Index
000191A8 7000                       		moveq	#0,d0
000191AA 1028 0024                  		move.b	$24(a0),d0
000191AE 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
000191B2 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
000191B6                            ; ===========================================================================
000191B6 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
000191B8 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
000191BA                            ; ===========================================================================
000191BA                            
000191BA                            Obj7D_Main:				; XREF: Obj7D_Index
000191BA 7410                       		moveq	#$10,d2
000191BC 3602                       		move.w	d2,d3
000191BE D643                       		add.w	d3,d3
000191C0 43F8 D000                  		lea	($FFFFD000).w,a1
000191C4 3029 0008                  		move.w	8(a1),d0
000191C8 9068 0008                  		sub.w	8(a0),d0
000191CC D042                       		add.w	d2,d0
000191CE B043                       		cmp.w	d3,d0
000191D0 6400                       		bcc.s	Obj7D_ChkDel
000191D2 3229 000C                  		move.w	$C(a1),d1
000191D6 9268 000C                  		sub.w	$C(a0),d1
000191DA D242                       		add.w	d2,d1
000191DC B243                       		cmp.w	d3,d1
000191DE 6400                       		bcc.s	Obj7D_ChkDel
000191E0 4A78 FE08                  		tst.w	($FFFFFE08).w
000191E4 6600                       		bne.s	Obj7D_ChkDel
000191E6 4A38 F7CD                  		tst.b	($FFFFF7CD).w
000191EA 6600                       		bne.s	Obj7D_ChkDel
000191EC 5428 0024                  		addq.b	#2,$24(a0)
000191F0 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
000191F8 317C 84B6 0002             		move.w	#$84B6,2(a0)
000191FE 0028 0004 0001             		ori.b	#4,1(a0)
00019204 117C 0000 0018             		move.b	#0,$18(a0)
0001920A 117C 0010 0019             		move.b	#$10,$19(a0)
00019210 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00019216 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
0001921C 303C 00C9                  		move.w	#$C9,d0
00019220 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play bonus sound
00019226 7000                       		moveq	#0,d0
00019228 1028 0028                  		move.b	$28(a0),d0
0001922C D040                       		add.w	d0,d0
0001922E 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00019232 4EB9 0000 0000             		jsr	AddPoints
00019238                            
00019238                            Obj7D_ChkDel:
00019238 3028 0008                  		move.w	8(a0),d0
0001923C 0240 FF80                  		andi.w	#$FF80,d0
00019240 3238 F700                  		move.w	($FFFFF700).w,d1
00019244 0441 0080                  		subi.w	#$80,d1
00019248 0241 FF80                  		andi.w	#$FF80,d1
0001924C 9041                       		sub.w	d1,d0
0001924E 0C40 0280                  		cmpi.w	#$280,d0
00019252 6300                       		bls.s	Obj7D_NoDel
00019254 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00019258 6700                       		beq.s	Obj7D_Delete		; if it's zero, don't remember object
0001925A 3440                       		movea.w	d0,a2	; load address into a2
0001925C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00019260 6000                       		bra.s	Obj7D_Delete	; and delete object
00019262                            
00019262                            Obj7D_NoDel:
00019262 4E75                       		rts	
00019264                            ; ===========================================================================
00019264                            
00019264                            Obj7D_Delete:
00019264 4EF9 0000 E9BA             		jmp	DeleteObject
0001926A                            ; ===========================================================================
0001926A 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
0001926C 03E8                       		dc.w 1000		; earn 1000*10 points for revealing 10000 object
0001926E 0064                       		dc.w 100		; earn 100*10 points for revealing 1000 object
00019270 000A                       		dc.w 10			; earn 10*10 points for revealing 100 object
00019272                            ; ===========================================================================
00019272                            
00019272                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00019272 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00019276 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00019278 3028 0008                  		move.w	8(a0),d0
0001927C 0240 FF80                  		andi.w	#-$80,d0
00019280 3238 F700                  		move.w	($FFFFF700).w,d1
00019284 0441 0080                  		subi.w	#$80,d1
00019288 0241 FF80                  		andi.w	#-$80,d1
0001928C 9041                       		sub.w	d1,d0
0001928E 0C40 0280                  		cmpi.w	#$280,d0
00019292 6200                       		bhi.s	Obj7D_Delete2
00019294 4EF9 0000 E96A             		jmp	DisplaySprite
0001929A                            ; ===========================================================================
0001929A                            
0001929A                            Obj7D_Delete2:
0001929A 4EF9 0000 E9BA             		jmp	DeleteObject
000192A0                            ; ===========================================================================
000192A0                            ; ---------------------------------------------------------------------------
000192A0                            ; Sprite mappings - hidden points at the end of	a level
000192A0                            ; ---------------------------------------------------------------------------
000192A0                            Map_obj7D:
000192A0                            	include "_maps\obj7D.asm"
000192A0                            ; ---------------------------------------------------------------------------
000192A0                            ; Sprite mappings - hidden points at the end of	a level
000192A0                            ; ---------------------------------------------------------------------------
000192A0 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
000192A4 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
000192A8 00                         byte_17250:	dc.b 0
000192A9 01                         byte_17251:	dc.b 1
000192AA F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
000192AF 01                         byte_17257:	dc.b 1
000192B0 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
000192B5 01                         byte_1725D:	dc.b 1
000192B6 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
000192BC 00                         		even
000192BC 00                         		even
000192BC                            
000192BC                            ; ===========================================================================
000192BC                            ; ---------------------------------------------------------------------------
000192BC                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
000192BC                            ; ---------------------------------------------------------------------------
000192BC                            
000192BC                            Obj8A:					; XREF: Obj_Index
000192BC 7000                       		moveq	#0,d0
000192BE 1028 0024                  		move.b	$24(a0),d0
000192C2 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
000192C6 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
000192CA                            ; ===========================================================================
000192CA 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
000192CC 0000                       		dc.w Obj8A_Display-Obj8A_Index
000192CE                            ; ===========================================================================
000192CE                            
000192CE                            Obj8A_Main:				; XREF: Obj8A_Index
000192CE 5428 0024                  		addq.b	#2,$24(a0)
000192D2 317C 0120 0008             		move.w	#$120,8(a0)
000192D8 317C 00F0 000A             		move.w	#$F0,$A(a0)
000192DE 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
000192E6 317C 25A0 0002             		move.w	#$25A0,2(a0)
000192EC 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
000192F0 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
000192F4 117C 0000 0001             		move.b	#0,1(a0)
000192FA 117C 0000 0018             		move.b	#0,$18(a0)
00019300 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00019306 6600                       		bne.s	Obj8A_Display	; if not, branch
00019308 317C 20A6 0002             		move.w	#$20A6,2(a0)
0001930E 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00019314 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00019318 6700                       		beq.s	Obj8A_Display	; if not, branch
0001931A 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00019320 6600                       		bne.s	Obj8A_Display	; if not, branch
00019322 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00019328 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
0001932E 4EF9 0000 E9BA             		jmp	DeleteObject
00019334                            ; ===========================================================================
00019334                            
00019334                            Obj8A_Display:				; XREF: Obj8A_Index
00019334 4EF9 0000 E96A             		jmp	DisplaySprite
0001933A                            ; ===========================================================================
0001933A                            ; ---------------------------------------------------------------------------
0001933A                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001933A                            ; ---------------------------------------------------------------------------
0001933A                            Map_obj8A:
0001933A                            	include "_maps\obj8A.asm"
0001933A                            ; ---------------------------------------------------------------------------
0001933A                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001933A                            ; ---------------------------------------------------------------------------
0001933A 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
0001933E 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
00019342 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
00019346 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
0001934A 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
0001934E 0000                       		dc.w byte_176A9-Map_obj8A
00019350 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
00019351 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
00019356 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001935B F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
00019360 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
00019365 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001936A F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001936F F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
00019374 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00019379 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001937E F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
00019383 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
00019388 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001938D F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
00019392 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
00019397 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
00019398 D805 0000 80               		dc.b $D8, 5, 0,	0, $80
0001939D D805 0004 90               		dc.b $D8, 5, 0,	4, $90
000193A2 D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
000193A7 D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
000193AC D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
000193B1 D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
000193B6 D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
000193BB D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
000193C0 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
000193C5 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
000193CA 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
000193CF 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
000193D4 0805 0016 08               		dc.b 8,	5, 0, $16, 8
000193D9 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
000193DE 0805 0004 30               		dc.b 8,	5, 0, 4, $30
000193E3 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
000193E8 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
000193E9 D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
000193EE D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
000193F3 D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
000193F8 D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
000193FD D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
00019402 D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
00019407 D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
0001940C 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
00019411 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
00019416 0805 0036 08               		dc.b 8,	5, 0, $36, 8
0001941B 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
0001941C D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
00019421 D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
00019426 D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
0001942B D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
00019430 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00019435 D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
0001943A D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
0001943F D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
00019444 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00019449 D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
0001944E D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
00019453 D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
00019458 D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
0001945D D805 0000 58               		dc.b $D8, 5, 0,	0, $58
00019462 D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
00019467 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
0001946C 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
00019471 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
00019476 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
0001947B 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
00019480 0805 0016 00               		dc.b 8,	5, 0, $16, 0
00019485 0805 0004 10               		dc.b 8,	5, 0, 4, $10
0001948A 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
0001948F 0805 0042 30               		dc.b 8,	5, 0, $42, $30
00019494 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
00019495 D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
0001949A D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
0001949F D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
000194A4 D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
000194A9 D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
000194AE D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
000194B3 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
000194B8 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
000194BD 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
000194C2 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
000194C7 0005 0004 24               		dc.b 0,	5, 0, 4, $24
000194CC 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
000194D1 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
000194D6 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
000194DB 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
000194E0 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
000194E5 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
000194EA 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
000194EF 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
000194F4 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
000194F9 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
000194FA D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
000194FF D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
00019504 D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
00019509 D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
0001950E D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
00019513 D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
00019518 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
0001951D D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
00019522 D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
00019527 D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
0001952C D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
00019531 D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
00019536 0809 0008 88               		dc.b 8,	9, 0, 8, $88
0001953B 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
00019540 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
00019545 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
0001954A 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
0001954F 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
00019554 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
00019559 0805 0004 08               		dc.b 8,	5, 0, 4, 8
0001955E 0805 0058 18               		dc.b 8,	5, 0, $58, $18
00019563 0805 0004 28               		dc.b 8,	5, 0, 4, $28
00019568 0809 0008 38               		dc.b 8,	9, 0, 8, $38
0001956D 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
00019572 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
00019577 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
0001957C 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001957D D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
00019582 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
00019587 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001958C D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
00019591 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
00019596 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001959B D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
000195A0 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
000195A5 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
000195AA D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
000195AF D005 0004 48               		dc.b $D0, 5, 0,	4, $48
000195B4 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
000195B9 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
000195BE 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
000195C3 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
000195C8 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
000195CD 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
000195D2 0005 0004 14               		dc.b 0,	5, 0, 4, $14
000195D7 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
000195DC 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
000195E1 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
000195E6 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
000195EB 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
000195F0 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
000195F1 D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
000195F6 D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
000195FB D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
00019600 D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
00019605 D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
0001960A D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
0001960F D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
00019614 D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
00019619 D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
0001961E D805 0004 18               		dc.b $D8, 5, 0,	4, $18
00019623 D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
00019628 D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
0001962D D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
00019632 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
00019637 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
0001963C 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00019641 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00019646 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
0001964B 0009 0008 00               		dc.b 0,	9, 0, 8, 0
00019650 0001 0046 14               		dc.b 0,	1, 0, $46, $14
00019655 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
0001965A 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
0001965F 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
00019664 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
00019669 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
0001966E 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
00019673 0001 0046 74               		dc.b 0,	1, 0, $46, $74
00019678 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
0001967D 2005 0004 08               		dc.b $20, 5, 0,	4, 8
00019682 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
00019687 2005 0004 28               		dc.b $20, 5, 0,	4, $28
0001968C 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
0001968D F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
00019692 F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
00019697 F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
0001969C F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
000196A1 F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
000196A6 F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
000196AB F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
000196B0 F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
000196B5 F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
000196BA F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
000196BF F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
000196C4 F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
000196C9 F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
000196CE F805 0000 60               		dc.b $F8, 5, 0,	0, $60
000196D3 F805 0004 70               		dc.b $F8, 5, 0,	4, $70
000196D8 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
000196D9 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
000196DE 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
000196E3 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
000196E8 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
000196ED 3005 0000 08               		dc.b $30, 5, 0,	0, 8
000196F2 3005 0004 18               		dc.b $30, 5, 0,	4, $18
000196F7 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
000196FC 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
00019701 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
00019702 E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
00019707 E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
0001970C E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
00019711 E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
00019716 E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
0001971B E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
00019720 E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
00019725 E805 0004 24               		dc.b $E8, 5, 0,	4, $24
0001972A E809 0008 34               		dc.b $E8, 9, 0,	8, $34
0001972F 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
00019734 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
00019739 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
0001973E 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
00019743 0005 000E 00               		dc.b 0,	5, 0, $E, 0
00019748 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
0001974D 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
00019752 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
00019758 00                         		even
00019758 00                         		even
00019758                            
00019758                            ; ===========================================================================
00019758                            ; ---------------------------------------------------------------------------
00019758                            ; Object 3D - Eggman (GHZ)
00019758                            ; ---------------------------------------------------------------------------
00019758                            
00019758                            Obj3D:					; XREF: Obj_Index
00019758 7000                       		moveq	#0,d0
0001975A 1028 0024                  		move.b	$24(a0),d0
0001975E 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00019762 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00019766                            ; ===========================================================================
00019766 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00019768 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
0001976A 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
0001976C 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
0001976E                            
0001976E 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00019770 0401                       		dc.b 4,	1
00019772 0607                       		dc.b 6,	7
00019774                            ; ===========================================================================
00019774                            
00019774                            Obj3D_Main:				; XREF: Obj3D_Index
00019774 45F9 0001 976E             		lea	(Obj3D_ObjData).l,a2
0001977A 2248                       		movea.l	a0,a1
0001977C 7202                       		moveq	#2,d1
0001977E 6000                       		bra.s	Obj3D_LoadBoss
00019780                            ; ===========================================================================
00019780                            
00019780                            Obj3D_Loop:
00019780 4EB9 0000 F0D6             		jsr	SingleObjLoad2
00019786 6600                       		bne.s	loc_17772
00019788                            
00019788                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00019788 135A 0024                  		move.b	(a2)+,$24(a1)
0001978C 12BC 003D                  		move.b	#$3D,0(a1)
00019790 3368 0008 0008             		move.w	8(a0),8(a1)
00019796 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001979C 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
000197A4 337C 0400 0002             		move.w	#$400,2(a1)
000197AA 137C 0004 0001             		move.b	#4,1(a1)
000197B0 137C 0020 0019             		move.b	#$20,$19(a1)
000197B6 137C 0003 0018             		move.b	#3,$18(a1)
000197BC 135A 001C                  		move.b	(a2)+,$1C(a1)
000197C0 2348 0034                  		move.l	a0,$34(a1)
000197C4 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
000197C8                            
000197C8                            loc_17772:
000197C8 3168 0008 0030             		move.w	8(a0),$30(a0)
000197CE 3168 000C 0038             		move.w	$C(a0),$38(a0)
000197D4 117C 000F 0020             		move.b	#$F,$20(a0)
000197DA 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000197E0                            
000197E0                            Obj3D_ShipMain:				; XREF: Obj3D_Index
000197E0 7000                       		moveq	#0,d0
000197E2 1028 0025                  		move.b	$25(a0),d0
000197E6 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
000197EA 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
000197EE 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000197F4 4EB9 0000 B9CA             		jsr	AnimateSprite
000197FA 1028 0022                  		move.b	$22(a0),d0
000197FE 0200 0003                  		andi.b	#3,d0
00019802 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019808 8128 0001                  		or.b	d0,1(a0)
0001980C 4EF9 0000 E96A             		jmp	DisplaySprite
00019812                            ; ===========================================================================
00019812 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00019814 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00019816 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00019818 0000                       		dc.w loc_17954-Obj3D_ShipIndex
0001981A 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
0001981C 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
0001981E 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00019820                            ; ===========================================================================
00019820                            
00019820                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00019820 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00019826 6100 0000                  		bsr.w	BossMove
0001982A 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00019830 6600                       		bne.s	loc_177E6
00019832 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00019838 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
0001983C                            
0001983C                            loc_177E6:
0001983C 1028 003F                  		move.b	$3F(a0),d0
00019840 4EB9 0000 29F6             		jsr	(CalcSine).l
00019846 EC40                       		asr.w	#6,d0
00019848 D068 0038                  		add.w	$38(a0),d0
0001984C 3140 000C                  		move.w	d0,$C(a0)
00019850 3168 0030 0008             		move.w	$30(a0),8(a0)
00019856 5428 003F                  		addq.b	#2,$3F(a0)
0001985A 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00019860 6400                       		bcc.s	locret_1784A
00019862 4A28 0022                  		tst.b	$22(a0)
00019866 6B00                       		bmi.s	loc_1784C
00019868 4A28 0020                  		tst.b	$20(a0)
0001986C 6600                       		bne.s	locret_1784A
0001986E 4A28 003E                  		tst.b	$3E(a0)
00019872 6600                       		bne.s	Obj3D_ShipFlash
00019874 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001987A 303C 00AC                  		move.w	#$AC,d0
0001987E 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019884                            
00019884                            Obj3D_ShipFlash:
00019884 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00019888 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001988A 4A51                       		tst.w	(a1)
0001988C 6600                       		bne.s	loc_1783C
0001988E 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00019892                            
00019892                            loc_1783C:
00019892 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00019894 5328 003E                  		subq.b	#1,$3E(a0)
00019898 6600                       		bne.s	locret_1784A
0001989A 117C 000F 0020             		move.b	#$F,$20(a0)
000198A0                            
000198A0                            locret_1784A:
000198A0 4E75                       		rts	
000198A2                            ; ===========================================================================
000198A2                            
000198A2                            loc_1784C:				; XREF: loc_177E6
000198A2 7064                       		moveq	#100,d0
000198A4 6100 0000                  		bsr.w	AddPoints
000198A8 117C 0008 0025             		move.b	#8,$25(a0)
000198AE 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000198B4 4E75                       		rts	
000198B6                            
000198B6                            ; ---------------------------------------------------------------------------
000198B6                            ; Defeated boss	subroutine
000198B6                            ; ---------------------------------------------------------------------------
000198B6                            
000198B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000198B6                            
000198B6                            
000198B6                            BossDefeated:
000198B6 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
000198BC 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w	
000198C2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000198C6 0200 0007                  		andi.b	#7,d0
000198CA 6600                       		bne.s	locret_178A2
000198CC 4EB9 0000 F0C0             		jsr	SingleObjLoad
000198D2 6600                       		bne.s	locret_178A2
000198D4 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
000198D8 3368 0008 0008             		move.w	8(a0),8(a1)
000198DE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000198E4 4EB9 0000 29D0             		jsr	(RandomNumber).l
000198EA 3200                       		move.w	d0,d1
000198EC 7200                       		moveq	#0,d1
000198EE 1200                       		move.b	d0,d1
000198F0 E409                       		lsr.b	#2,d1
000198F2 0441 0020                  		subi.w	#$20,d1
000198F6 D369 0008                  		add.w	d1,8(a1)
000198FA E048                       		lsr.w	#8,d0
000198FC E608                       		lsr.b	#3,d0
000198FE D169 000C                  		add.w	d0,$C(a1)
00019902                            
00019902                            locret_178A2:
00019902 4E75                       		rts	
00019904                            ; End of function BossDefeated
00019904                            
00019904                            ; ---------------------------------------------------------------------------
00019904                            ; Subroutine to	move a boss
00019904                            ; ---------------------------------------------------------------------------
00019904                            
00019904                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019904                            
00019904                            
00019904                            BossMove:
00019904 2428 0030                  		move.l	$30(a0),d2
00019908 2628 0038                  		move.l	$38(a0),d3
0001990C 3028 0010                  		move.w	$10(a0),d0
00019910 48C0                       		ext.l	d0
00019912 E180                       		asl.l	#8,d0
00019914 D480                       		add.l	d0,d2
00019916 3028 0012                  		move.w	$12(a0),d0
0001991A 48C0                       		ext.l	d0
0001991C E180                       		asl.l	#8,d0
0001991E D680                       		add.l	d0,d3
00019920 2142 0030                  		move.l	d2,$30(a0)
00019924 2143 0038                  		move.l	d3,$38(a0)
00019928 4E75                       		rts	
0001992A                            ; End of function BossMove
0001992A                            
0001992A                            ; ===========================================================================
0001992A                            
0001992A                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
0001992A 317C FF00 0010             		move.w	#-$100,$10(a0)
00019930 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019936 6100 FFCC                  		bsr.w	BossMove
0001993A 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00019940 6600                       		bne.s	loc_17916
00019942 317C 0000 0010             		move.w	#0,$10(a0)
00019948 317C 0000 0012             		move.w	#0,$12(a0)
0001994E 5428 0025                  		addq.b	#2,$25(a0)
00019952 4EB9 0000 F0D6             		jsr	SingleObjLoad2
00019958 6600                       		bne.s	loc_17910
0001995A 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
0001995E 3368 0030 0008             		move.w	$30(a0),8(a1)
00019964 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001996A 2348 0034                  		move.l	a0,$34(a1)
0001996E                            
0001996E                            loc_17910:
0001996E 317C 0077 003C             		move.w	#$77,$3C(a0)
00019974                            
00019974                            loc_17916:
00019974 6000 FEC6                  		bra.w	loc_177E6
00019978                            ; ===========================================================================
00019978                            
00019978                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00019978 5368 003C                  		subq.w	#1,$3C(a0)
0001997C 6A00                       		bpl.s	Obj3D_Reverse
0001997E 5428 0025                  		addq.b	#2,$25(a0)
00019982 317C 003F 003C             		move.w	#$3F,$3C(a0)
00019988 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
0001998E 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00019994 6600                       		bne.s	Obj3D_Reverse
00019996 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001999C 317C 0040 0010             		move.w	#$40,$10(a0)
000199A2                            
000199A2                            Obj3D_Reverse:
000199A2 0828 0000 0022             		btst	#0,$22(a0)
000199A8 6600                       		bne.s	loc_17950
000199AA 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
000199AE                            
000199AE                            loc_17950:
000199AE 6000 FE8C                  		bra.w	loc_177E6
000199B2                            ; ===========================================================================
000199B2                            
000199B2                            loc_17954:				; XREF: Obj3D_ShipIndex
000199B2 5368 003C                  		subq.w	#1,$3C(a0)
000199B6 6B00                       		bmi.s	loc_17960
000199B8 6100 FF4A                  		bsr.w	BossMove
000199BC 6000                       		bra.s	loc_17976
000199BE                            ; ===========================================================================
000199BE                            
000199BE                            loc_17960:
000199BE 0868 0000 0022             		bchg	#0,$22(a0)
000199C4 317C 003F 003C             		move.w	#$3F,$3C(a0)
000199CA 5528 0025                  		subq.b	#2,$25(a0)
000199CE 317C 0000 0010             		move.w	#0,$10(a0)
000199D4                            
000199D4                            loc_17976:
000199D4 6000 FE66                  		bra.w	loc_177E6
000199D8                            ; ===========================================================================
000199D8                            
000199D8                            loc_1797A:				; XREF: Obj3D_ShipIndex
000199D8 5368 003C                  		subq.w	#1,$3C(a0)
000199DC 6B00                       		bmi.s	loc_17984
000199DE 6000 FED6                  		bra.w	BossDefeated
000199E2                            ; ===========================================================================
000199E2                            
000199E2                            loc_17984:
000199E2 08E8 0000 0022             		bset	#0,$22(a0)
000199E8 08A8 0007 0022             		bclr	#7,$22(a0)
000199EE 4268 0010                  		clr.w	$10(a0)
000199F2 5428 0025                  		addq.b	#2,$25(a0)
000199F6 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000199FC 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019A00 6600                       		bne.s	locret_179AA
00019A02 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019A08                            
00019A08                            locret_179AA:
00019A08 4E75                       		rts	
00019A0A                            ; ===========================================================================
00019A0A                            
00019A0A                            loc_179AC:				; XREF: Obj3D_ShipIndex
00019A0A 5268 003C                  		addq.w	#1,$3C(a0)
00019A0E 6700                       		beq.s	loc_179BC
00019A10 6A00                       		bpl.s	loc_179C2
00019A12 0668 0018 0012             		addi.w	#$18,$12(a0)
00019A18 6000 0000                  		bra.w	loc_179EE
00019A1C                            ; ===========================================================================
00019A1C                            
00019A1C                            loc_179BC:
00019A1C 4268 0012                  		clr.w	$12(a0)
00019A20 6000 0000                  		bra.w	loc_179EE
00019A24                            ; ===========================================================================
00019A24                            
00019A24                            loc_179C2:
00019A24 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019A2A 6500                       		bcs.s	loc_179DA
00019A2C 6700                       		beq.s	loc_179E0
00019A2E 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019A34 6500 0000                  		bcs.w	loc_179EE
00019A38 5428 0025                  		addq.b	#2,$25(a0)
00019A3C 6000                       		bra.s	loc_179EE
00019A3E                            ; ===========================================================================
00019A3E                            
00019A3E                            loc_179DA:
00019A3E 5168 0012                  		subq.w	#8,$12(a0)
00019A42 6000                       		bra.s	loc_179EE
00019A44                            ; ===========================================================================
00019A44                            
00019A44                            loc_179E0:
00019A44 4268 0012                  		clr.w	$12(a0)
00019A48 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeBossDefeated			
00019AAE 303C 0081                  		move.w	#$81,d0
00019AB2 4EB9 0000 121A             		jsr	(PlaySound).l	; play GHZ music
00019AB8                            
00019AB8                            loc_179EE:
00019AB8 6100 FE4A                  		bsr.w	BossMove
00019ABC 6000 FD7E                  		bra.w	loc_177E6
00019AC0                            ; ===========================================================================
00019AC0                            
00019AC0                            loc_179F6:				; XREF: Obj3D_ShipIndex
00019AC0 317C 0400 0010             		move.w	#$400,$10(a0)
00019AC6 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019ACC 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00019AD2 6700                       		beq.s	loc_17A10
00019AD4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019AD8 6000                       		bra.s	loc_17A16
00019ADA                            ; ===========================================================================
00019ADA                            
00019ADA                            loc_17A10:
00019ADA 4A28 0001                  		tst.b	1(a0)
00019ADE 6A00                       		bpl.s	Obj3D_ShipDel
00019AE0                            
00019AE0                            loc_17A16:
00019AE0 6100 FE22                  		bsr.w	BossMove
00019AE4 6000 FD56                  		bra.w	loc_177E6
00019AE8                            ; ===========================================================================
00019AE8                            
00019AE8                            Obj3D_ShipDel:
00019AE8 4EF9 0000 E9BA             		jmp	DeleteObject
00019AEE                            ; ===========================================================================
00019AEE                            
00019AEE                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00019AEE 7000                       		moveq	#0,d0
00019AF0 7201                       		moveq	#1,d1
00019AF2 2268 0034                  		movea.l	$34(a0),a1
00019AF6 1029 0025                  		move.b	$25(a1),d0
00019AFA 5900                       		subq.b	#4,d0
00019AFC 6600                       		bne.s	loc_17A3E
00019AFE 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00019B04 6600                       		bne.s	loc_17A46
00019B06 7204                       		moveq	#4,d1
00019B08                            
00019B08                            loc_17A3E:
00019B08 5D00                       		subq.b	#6,d0
00019B0A 6B00                       		bmi.s	loc_17A46
00019B0C 720A                       		moveq	#$A,d1
00019B0E 6000                       		bra.s	loc_17A5A
00019B10                            ; ===========================================================================
00019B10                            
00019B10                            loc_17A46:
00019B10 4A29 0020                  		tst.b	$20(a1)
00019B14 6600                       		bne.s	loc_17A50
00019B16 7205                       		moveq	#5,d1
00019B18 6000                       		bra.s	loc_17A5A
00019B1A                            ; ===========================================================================
00019B1A                            
00019B1A                            loc_17A50:
00019B1A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019B20 6500                       		bcs.s	loc_17A5A
00019B22 7204                       		moveq	#4,d1
00019B24                            
00019B24                            loc_17A5A:
00019B24 1141 001C                  		move.b	d1,$1C(a0)
00019B28 5500                       		subq.b	#2,d0
00019B2A 6600                       		bne.s	Obj3D_FaceDisp
00019B2C 117C 0006 001C             		move.b	#6,$1C(a0)
00019B32 4A28 0001                  		tst.b	1(a0)
00019B36 6A00                       		bpl.s	Obj3D_FaceDel
00019B38                            
00019B38                            Obj3D_FaceDisp:
00019B38 6000                       		bra.s	Obj3D_Display
00019B3A                            ; ===========================================================================
00019B3A                            
00019B3A                            Obj3D_FaceDel:
00019B3A 4EF9 0000 E9BA             		jmp	DeleteObject
00019B40                            ; ===========================================================================
00019B40                            
00019B40                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00019B40 117C 0007 001C             		move.b	#7,$1C(a0)
00019B46 2268 0034                  		movea.l	$34(a0),a1
00019B4A 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00019B50 6600                       		bne.s	loc_17A96
00019B52 117C 000B 001C             		move.b	#$B,$1C(a0)
00019B58 4A28 0001                  		tst.b	1(a0)
00019B5C 6A00                       		bpl.s	Obj3D_FlameDel
00019B5E 6000                       		bra.s	Obj3D_FlameDisp
00019B60                            ; ===========================================================================
00019B60                            
00019B60                            loc_17A96:
00019B60 3029 0010                  		move.w	$10(a1),d0
00019B64 6700                       		beq.s	Obj3D_FlameDisp
00019B66 117C 0008 001C             		move.b	#8,$1C(a0)
00019B6C                            
00019B6C                            Obj3D_FlameDisp:
00019B6C 6000                       		bra.s	Obj3D_Display
00019B6E                            ; ===========================================================================
00019B6E                            
00019B6E                            Obj3D_FlameDel:
00019B6E 4EF9 0000 E9BA             		jmp	DeleteObject
00019B74                            ; ===========================================================================
00019B74                            
00019B74                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00019B74 2268 0034                  		movea.l	$34(a0),a1
00019B78 3169 0008 0008             		move.w	8(a1),8(a0)
00019B7E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019B84 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019B8A 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00019B90 4EB9 0000 B9CA             		jsr	AnimateSprite
00019B96 1028 0022                  		move.b	$22(a0),d0
00019B9A 0200 0003                  		andi.b	#3,d0
00019B9E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019BA4 8128 0001                  		or.b	d0,1(a0)
00019BA8 4EF9 0000 E96A             		jmp	DisplaySprite
00019BAE                            ; ===========================================================================
00019BAE                            ; ---------------------------------------------------------------------------
00019BAE                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00019BAE                            ; ---------------------------------------------------------------------------
00019BAE                            
00019BAE                            Obj48:					; XREF: Obj_Index
00019BAE 7000                       		moveq	#0,d0
00019BB0 1028 0024                  		move.b	$24(a0),d0
00019BB4 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00019BB8 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00019BBC                            ; ===========================================================================
00019BBC 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00019BBE 0000                       		dc.w Obj48_Base-Obj48_Index
00019BC0 0000                       		dc.w Obj48_Display2-Obj48_Index
00019BC2 0000                       		dc.w loc_17C68-Obj48_Index
00019BC4 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00019BC6                            ; ===========================================================================
00019BC6                            
00019BC6                            Obj48_Main:				; XREF: Obj48_Index
00019BC6 5428 0024                  		addq.b	#2,$24(a0)
00019BCA 317C 4080 0026             		move.w	#$4080,$26(a0)
00019BD0 317C FE00 003E             		move.w	#-$200,$3E(a0)
00019BD6 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00019BDE 317C 046C 0002             		move.w	#$46C,2(a0)
00019BE4 45E8 0028                  		lea	$28(a0),a2
00019BE8 14FC 0000                  		move.b	#0,(a2)+
00019BEC 7205                       		moveq	#5,d1
00019BEE 2248                       		movea.l	a0,a1
00019BF0 6000                       		bra.s	loc_17B60
00019BF2                            ; ===========================================================================
00019BF2                            
00019BF2                            Obj48_MakeLinks:
00019BF2 4EB9 0000 F0D6             		jsr	SingleObjLoad2
00019BF8 6600                       		bne.s	Obj48_MakeBall
00019BFA 3368 0008 0008             		move.w	8(a0),8(a1)
00019C00 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019C06 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00019C0A 137C 0006 0024             		move.b	#6,$24(a1)
00019C10 237C 0000 8DC0 0004        		move.l	#Map_obj15,4(a1)
00019C18 337C 0380 0002             		move.w	#$380,2(a1)
00019C1E 137C 0001 001A             		move.b	#1,$1A(a1)
00019C24 5228 0028                  		addq.b	#1,$28(a0)
00019C28                            
00019C28                            loc_17B60:				; XREF: Obj48_Main
00019C28 3A09                       		move.w	a1,d5
00019C2A 0445 D000                  		subi.w	#$D000,d5
00019C2E EC4D                       		lsr.w	#6,d5
00019C30 0245 007F                  		andi.w	#$7F,d5
00019C34 14C5                       		move.b	d5,(a2)+
00019C36 137C 0004 0001             		move.b	#4,1(a1)
00019C3C 137C 0008 0019             		move.b	#8,$19(a1)
00019C42 137C 0006 0018             		move.b	#6,$18(a1)
00019C48 2368 0034 0034             		move.l	$34(a0),$34(a1)
00019C4E 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00019C52                            
00019C52                            Obj48_MakeBall:
00019C52 137C 0008 0024             		move.b	#8,$24(a1)
00019C58 237C 0000 9338 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00019C60 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00019C66 137C 0001 001A             		move.b	#1,$1A(a1)
00019C6C 137C 0005 0018             		move.b	#5,$18(a1)
00019C72 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00019C78 4E75                       		rts	
00019C7A                            ; ===========================================================================
00019C7A                            
00019C7A 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00019C80                            
00019C80                            ; ===========================================================================
00019C80                            
00019C80                            Obj48_Base:				; XREF: Obj48_Index
00019C80 47F9 0001 9C7A             		lea	(Obj48_PosData).l,a3
00019C86 45E8 0028                  		lea	$28(a0),a2
00019C8A 7C00                       		moveq	#0,d6
00019C8C 1C1A                       		move.b	(a2)+,d6
00019C8E                            
00019C8E                            loc_17BC6:
00019C8E 7800                       		moveq	#0,d4
00019C90 181A                       		move.b	(a2)+,d4
00019C92 ED4C                       		lsl.w	#6,d4
00019C94 0684 00FF D000             		addi.l	#$FFD000,d4
00019C9A 2244                       		movea.l	d4,a1
00019C9C 101B                       		move.b	(a3)+,d0
00019C9E B029 003C                  		cmp.b	$3C(a1),d0
00019CA2 6700                       		beq.s	loc_17BE0
00019CA4 5229 003C                  		addq.b	#1,$3C(a1)
00019CA8                            
00019CA8                            loc_17BE0:
00019CA8 51CE FFE4                  		dbf	d6,loc_17BC6
00019CAC                            
00019CAC B029 003C                  		cmp.b	$3C(a1),d0
00019CB0 6600                       		bne.s	loc_17BFA
00019CB2 2268 0034                  		movea.l	$34(a0),a1
00019CB6 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00019CBC 6600                       		bne.s	loc_17BFA
00019CBE 5428 0024                  		addq.b	#2,$24(a0)
00019CC2                            
00019CC2                            loc_17BFA:
00019CC2 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00019CC8 6700                       		beq.s	Obj48_Display
00019CCA 5268 0032                  		addq.w	#1,$32(a0)
00019CCE                            
00019CCE                            Obj48_Display:
00019CCE 6100 0000                  		bsr.w	sub_17C2A
00019CD2 1028 0026                  		move.b	$26(a0),d0
00019CD6 4EB9 0000 8D26             		jsr	(Obj15_Move2).l
00019CDC 4EF9 0000 E96A             		jmp	DisplaySprite
00019CE2                            ; ===========================================================================
00019CE2                            
00019CE2                            Obj48_Display2:				; XREF: Obj48_Index
00019CE2 6100 0000                  		bsr.w	sub_17C2A
00019CE6 4EB9 0000 8CE6             		jsr	(Obj48_Move).l
00019CEC 4EF9 0000 E96A             		jmp	DisplaySprite
00019CF2                            
00019CF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019CF2                            
00019CF2                            
00019CF2                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00019CF2 2268 0034                  		movea.l	$34(a0),a1
00019CF6 0628 0020 001B             		addi.b	#$20,$1B(a0)
00019CFC 6400                       		bcc.s	loc_17C3C
00019CFE 0868 0000 001A             		bchg	#0,$1A(a0)
00019D04                            
00019D04                            loc_17C3C:
00019D04 3169 0008 003A             		move.w	8(a1),$3A(a0)
00019D0A 3029 000C                  		move.w	$C(a1),d0
00019D0E D068 0032                  		add.w	$32(a0),d0
00019D12 3140 0038                  		move.w	d0,$38(a0)
00019D16 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019D1C 4A29 0022                  		tst.b	$22(a1)
00019D20 6A00                       		bpl.s	locret_17C66
00019D22 10BC 003F                  		move.b	#$3F,0(a0)
00019D26 117C 0000 0024             		move.b	#0,$24(a0)
00019D2C                            
00019D2C                            locret_17C66:
00019D2C 4E75                       		rts	
00019D2E                            ; End of function sub_17C2A
00019D2E                            
00019D2E                            ; ===========================================================================
00019D2E                            
00019D2E                            loc_17C68:				; XREF: Obj48_Index
00019D2E 2268 0034                  		movea.l	$34(a0),a1
00019D32 4A29 0022                  		tst.b	$22(a1)
00019D36 6A00                       		bpl.s	Obj48_Display3
00019D38 10BC 003F                  		move.b	#$3F,0(a0)
00019D3C 117C 0000 0024             		move.b	#0,$24(a0)
00019D42                            
00019D42                            Obj48_Display3:
00019D42 4EF9 0000 E96A             		jmp	DisplaySprite
00019D48                            ; ===========================================================================
00019D48                            
00019D48                            Obj48_ChkVanish:			; XREF: Obj48_Index
00019D48 7000                       		moveq	#0,d0
00019D4A 4A28 001A                  		tst.b	$1A(a0)
00019D4E 6600                       		bne.s	Obj48_Vanish
00019D50 5200                       		addq.b	#1,d0
00019D52                            
00019D52                            Obj48_Vanish:
00019D52 1140 001A                  		move.b	d0,$1A(a0)
00019D56 2268 0034                  		movea.l	$34(a0),a1
00019D5A 4A29 0022                  		tst.b	$22(a1)
00019D5E 6A00                       		bpl.s	Obj48_Display4
00019D60 117C 0000 0020             		move.b	#0,$20(a0)
00019D66 6100 FB4E                  		bsr.w	BossDefeated
00019D6A 5328 003C                  		subq.b	#1,$3C(a0)
00019D6E 6A00                       		bpl.s	Obj48_Display4
00019D70 10BC 003F                  		move.b	#$3F,(a0)
00019D74 117C 0000 0024             		move.b	#0,$24(a0)
00019D7A                            
00019D7A                            Obj48_Display4:
00019D7A 4EF9 0000 E96A             		jmp	DisplaySprite
00019D80                            ; ===========================================================================
00019D80                            Ani_Eggman:
00019D80                            	include "_anim\Eggman.asm"
00019D80                            ; ---------------------------------------------------------------------------
00019D80                            ; Animation script - Eggman (bosses)
00019D80                            ; ---------------------------------------------------------------------------
00019D80 0000                       		dc.w byte_17CD4-Ani_Eggman
00019D82 0000                       		dc.w byte_17CD8-Ani_Eggman
00019D84 0000                       		dc.w byte_17CDC-Ani_Eggman
00019D86 0000                       		dc.w byte_17CE0-Ani_Eggman
00019D88 0000                       		dc.w byte_17CE4-Ani_Eggman
00019D8A 0000                       		dc.w byte_17CE8-Ani_Eggman
00019D8C 0000                       		dc.w byte_17CEC-Ani_Eggman
00019D8E 0000                       		dc.w byte_17CF0-Ani_Eggman
00019D90 0000                       		dc.w byte_17CF4-Ani_Eggman
00019D92 0000                       		dc.w byte_17CF8-Ani_Eggman
00019D94 0000                       		dc.w byte_17CFC-Ani_Eggman
00019D96 0000                       		dc.w byte_17D00-Ani_Eggman
00019D98 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00019D9C 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00019DA0 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00019DA4 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00019DA8 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00019DAC 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00019DB0 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00019DB4 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00019DB8 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00019DBC 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00019DC0 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00019DC4 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00019DD0                            		even
00019DD0                            		even
00019DD0                            
00019DD0                            ; ---------------------------------------------------------------------------
00019DD0                            ; Sprite mappings - Eggman (boss levels)
00019DD0                            ; ---------------------------------------------------------------------------
00019DD0                            Map_Eggman:
00019DD0                            	include "_maps\Eggman.asm"
00019DD0                            ; ---------------------------------------------------------------------------
00019DD0                            ; Sprite mappings - Eggman (boss levels)
00019DD0                            ; ---------------------------------------------------------------------------
00019DD0 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00019DD4 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00019DD8 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
00019DDC 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
00019DE0 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
00019DE4 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
00019DE8 0000                       		dc.w byte_17DC8-Map_Eggman
00019DEA 06                         byte_17D26:	dc.b 6
00019DEB EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
00019DF0 EC01 000E 14               		dc.b $EC, 1, 0,	$E, $14
00019DF5 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
00019DFA FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
00019DFF 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00019E04 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00019E09 02                         byte_17D45:	dc.b 2
00019E0A E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019E0F EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00019E14 02                         byte_17D50:	dc.b 2
00019E15 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019E1A EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019E1F 03                         byte_17D5B:	dc.b 3
00019E20 E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
00019E25 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00019E2A EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00019E2F 03                         byte_17D6B:	dc.b 3
00019E30 E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
00019E35 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00019E3A EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00019E3F 03                         byte_17D7B:	dc.b 3
00019E40 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019E45 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019E4A EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019E4F 03                         byte_17D8B:	dc.b 3
00019E50 E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
00019E55 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019E5A EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019E5F 04                         byte_17D9B:	dc.b 4
00019E60 E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
00019E65 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019E6A EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019E6F EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019E74 01                         byte_17DB0:	dc.b 1
00019E75 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00019E7A 01                         byte_17DB6:	dc.b 1
00019E7B 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00019E80 00                         byte_17DBC:	dc.b 0
00019E81 02                         byte_17DBD:	dc.b 2
00019E82 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00019E87 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
00019E8C 02                         byte_17DC8:	dc.b 2
00019E8D F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00019E92 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00019E98 00                         		even
00019E98 00                         		even
00019E98                            
00019E98                            ; ---------------------------------------------------------------------------
00019E98                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019E98                            ; ---------------------------------------------------------------------------
00019E98                            Map_BossItems:
00019E98                            	include "_maps\Boss items.asm"
00019E98                            ; ---------------------------------------------------------------------------
00019E98                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019E98                            ; ---------------------------------------------------------------------------
00019E98 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00019E9C 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00019EA0 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00019EA4 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00019EA8 01                         byte_17DE4:	dc.b 1
00019EA9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019EAE 02                         byte_17DEA:	dc.b 2
00019EAF FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00019EB4 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019EB9 00                         		dc.b 0
00019EBA 01                         byte_17DF6:	dc.b 1
00019EBB FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00019EC0 01                         byte_17DFC:	dc.b 1
00019EC1 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00019EC6 01                         byte_17E02:	dc.b 1
00019EC7 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00019ECC 04                         byte_17E08:	dc.b 4
00019ECD F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00019ED2 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00019ED7 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00019EDC 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00019EE1 00                         		dc.b 0
00019EE2 02                         byte_17E1E:	dc.b 2
00019EE3 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00019EE8 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00019EED 00                         		dc.b 0
00019EEE 02                         byte_17E2A:	dc.b 2
00019EEF 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00019EF4 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00019EFA 00                         		even
00019EFA 00                         		even
00019EFA                            
00019EFA                            ; ===========================================================================
00019EFA                            ; ---------------------------------------------------------------------------
00019EFA                            ; Object 77 - Eggman (LZ)
00019EFA                            ; ---------------------------------------------------------------------------
00019EFA                            
00019EFA                            Obj77:					; XREF: Obj_Index
00019EFA 7000                       		moveq	#0,d0
00019EFC 1028 0024                  		move.b	$24(a0),d0
00019F00 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00019F04 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00019F08                            ; ===========================================================================
00019F08 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00019F0A 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00019F0C 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00019F0E 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00019F10                            
00019F10 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00019F12 0401                       		dc.b 4,	1
00019F14 0607                       		dc.b 6,	7
00019F16                            ; ===========================================================================
00019F16                            
00019F16                            Obj77_Main:				; XREF: Obj77_Index
00019F16 317C 1E10 0008             		move.w	#$1E10,8(a0)
00019F1C 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00019F22 3168 0008 0030             		move.w	8(a0),$30(a0)
00019F28 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019F2E 117C 000F 0020             		move.b	#$F,$20(a0)
00019F34 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019F3A 117C 0004 0018             		move.b	#4,$18(a0)
00019F40 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00019F44 2248                       		movea.l	a0,a1
00019F46 7202                       		moveq	#2,d1
00019F48 6000                       		bra.s	Obj77_LoadBoss
00019F4A                            ; ===========================================================================
00019F4A                            
00019F4A                            Obj77_Loop:
00019F4A 4EB9 0000 F0D6             		jsr	SingleObjLoad2
00019F50 6600                       		bne.s	Obj77_ShipMain
00019F52 12BC 0077                  		move.b	#$77,0(a1)
00019F56 3368 0008 0008             		move.w	8(a0),8(a1)
00019F5C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019F62                            
00019F62                            Obj77_LoadBoss:				; XREF: Obj77_Main
00019F62 08A8 0000 0022             		bclr	#0,$22(a0)
00019F68 4229 0025                  		clr.b	$25(a1)
00019F6C 135A 0024                  		move.b	(a2)+,$24(a1)
00019F70 135A 001C                  		move.b	(a2)+,$1C(a1)
00019F74 1368 0018 0018             		move.b	$18(a0),$18(a1)
00019F7A 237C 0001 9DD0 0004        		move.l	#Map_Eggman,4(a1)
00019F82 337C 0400 0002             		move.w	#$400,2(a1)
00019F88 137C 0004 0001             		move.b	#4,1(a1)
00019F8E 137C 0020 0019             		move.b	#$20,$19(a1)
00019F94 2348 0034                  		move.l	a0,$34(a1)
00019F98 51C9 FFB0                  		dbf	d1,Obj77_Loop
00019F9C                            
00019F9C                            Obj77_ShipMain:
00019F9C 43F8 D000                  		lea	($FFFFD000).w,a1
00019FA0 7000                       		moveq	#0,d0
00019FA2 1028 0025                  		move.b	$25(a0),d0
00019FA6 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00019FAA 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
00019FAE 43F9 0001 9D80             		lea	(Ani_Eggman).l,a1
00019FB4 4EB9 0000 B9CA             		jsr	AnimateSprite
00019FBA 7003                       		moveq	#3,d0
00019FBC C028 0022                  		and.b	$22(a0),d0
00019FC0 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019FC6 8128 0001                  		or.b	d0,1(a0)
00019FCA 4EF9 0000 E96A             		jmp	DisplaySprite
00019FD0                            ; ===========================================================================
00019FD0 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00019FD4 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00019FD8 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00019FDC 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
00019FE0                            ; ===========================================================================
00019FE0                            
00019FE0                            loc_17F1E:				; XREF: Obj77_ShipIndex
00019FE0 3029 0008                  		move.w	8(a1),d0
00019FE4 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00019FE8 6500                       		bcs.s	loc_17F38
00019FEA 317C FE80 0012             		move.w	#-$180,$12(a0)
00019FF0 317C 0060 0010             		move.w	#$60,$10(a0)
00019FF6 5428 0025                  		addq.b	#2,$25(a0)
00019FFA                            
00019FFA                            loc_17F38:
00019FFA 6100 F908                  		bsr.w	BossMove
00019FFE 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A004 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A00A                            
0001A00A                            loc_17F48:
0001A00A 4A28 003D                  		tst.b	$3D(a0)
0001A00E 6600                       		bne.s	loc_17F8E
0001A010 4A28 0022                  		tst.b	$22(a0)
0001A014 6B00                       		bmi.s	loc_17F92
0001A016 4A28 0020                  		tst.b	$20(a0)
0001A01A 6600                       		bne.s	locret_17F8C
0001A01C 4A28 003E                  		tst.b	$3E(a0)
0001A020 6600                       		bne.s	loc_17F70
0001A022 117C 0020 003E             		move.b	#$20,$3E(a0)
0001A028 303C 00AC                  		move.w	#$AC,d0
0001A02C 4EB9 0000 1220             		jsr	(PlaySound_Special).l
0001A032                            
0001A032                            loc_17F70:
0001A032 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A036 7000                       		moveq	#0,d0
0001A038 4A51                       		tst.w	(a1)
0001A03A 6600                       		bne.s	loc_17F7E
0001A03C 303C 0EEE                  		move.w	#$EEE,d0
0001A040                            
0001A040                            loc_17F7E:
0001A040 3280                       		move.w	d0,(a1)
0001A042 5328 003E                  		subq.b	#1,$3E(a0)
0001A046 6600                       		bne.s	locret_17F8C
0001A048 117C 000F 0020             		move.b	#$F,$20(a0)
0001A04E                            
0001A04E                            locret_17F8C:
0001A04E 4E75                       		rts	
0001A050                            ; ===========================================================================
0001A050                            
0001A050                            loc_17F8E:				; XREF: loc_17F48
0001A050 6000 F864                  		bra.w	BossDefeated
0001A054                            ; ===========================================================================
0001A054                            
0001A054                            loc_17F92:				; XREF: loc_17F48
0001A054 7064                       		moveq	#100,d0
0001A056 6100 0000                  		bsr.w	AddPoints
0001A05A 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001A060 4E75                       		rts	
0001A062                            ; ===========================================================================
0001A062                            
0001A062                            loc_17FA0:				; XREF: Obj77_ShipIndex
0001A062 70FE                       		moveq	#-2,d0
0001A064 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001A06A 6500                       		bcs.s	loc_17FB6
0001A06C 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001A072 4268 0010                  		clr.w	$10(a0)
0001A076 5240                       		addq.w	#1,d0
0001A078                            
0001A078                            loc_17FB6:
0001A078 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001A07E 6E00                       		bgt.s	loc_17FCA
0001A080 317C 0500 0038             		move.w	#$500,$38(a0)
0001A086 4268 0012                  		clr.w	$12(a0)
0001A08A 5240                       		addq.w	#1,d0
0001A08C                            
0001A08C                            loc_17FCA:
0001A08C 6600                       		bne.s	loc_17FDC
0001A08E 317C 0140 0010             		move.w	#$140,$10(a0)
0001A094 317C FE00 0012             		move.w	#-$200,$12(a0)
0001A09A 5428 0025                  		addq.b	#2,$25(a0)
0001A09E                            
0001A09E                            loc_17FDC:
0001A09E 6000 FF5A                  		bra.w	loc_17F38
0001A0A2                            ; ===========================================================================
0001A0A2                            
0001A0A2                            loc_17FE0:				; XREF: Obj77_ShipIndex
0001A0A2 70FE                       		moveq	#-2,d0
0001A0A4 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001A0AA 6500                       		bcs.s	loc_17FF6
0001A0AC 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001A0B2 4268 0010                  		clr.w	$10(a0)
0001A0B6 5240                       		addq.w	#1,d0
0001A0B8                            
0001A0B8                            loc_17FF6:
0001A0B8 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001A0BE 6E00                       		bgt.s	loc_1800A
0001A0C0 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001A0C6 4268 0012                  		clr.w	$12(a0)
0001A0CA 5240                       		addq.w	#1,d0
0001A0CC                            
0001A0CC                            loc_1800A:
0001A0CC 6600                       		bne.s	loc_1801A
0001A0CE 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A0D4 5428 0025                  		addq.b	#2,$25(a0)
0001A0D8 4228 003F                  		clr.b	$3F(a0)
0001A0DC                            
0001A0DC                            loc_1801A:
0001A0DC 6000 FF1C                  		bra.w	loc_17F38
0001A0E0                            ; ===========================================================================
0001A0E0                            
0001A0E0                            loc_1801E:				; XREF: Obj77_ShipIndex
0001A0E0 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001A0E6 6E00                       		bgt.s	loc_1804E
0001A0E8 317C 0100 0038             		move.w	#$100,$38(a0)
0001A0EE 317C 0140 0010             		move.w	#$140,$10(a0)
0001A0F4 317C FF80 0012             		move.w	#-$80,$12(a0)
0001A0FA 4A28 003D                  		tst.b	$3D(a0)
0001A0FE 6700                       		beq.s	loc_18046
0001A100 E1E8 0010                  		asl	$10(a0)
0001A104 E1E8 0012                  		asl	$12(a0)
0001A108                            
0001A108                            loc_18046:
0001A108 5428 0025                  		addq.b	#2,$25(a0)
0001A10C 6000 FEEC                  		bra.w	loc_17F38
0001A110                            ; ===========================================================================
0001A110                            
0001A110                            loc_1804E:
0001A110 08E8 0000 0022             		bset	#0,$22(a0)
0001A116 5428 003F                  		addq.b	#2,$3F(a0)
0001A11A 1028 003F                  		move.b	$3F(a0),d0
0001A11E 4EB9 0000 29F6             		jsr	(CalcSine).l
0001A124 4A41                       		tst.w	d1
0001A126 6A00                       		bpl.s	loc_1806C
0001A128 08A8 0000 0022             		bclr	#0,$22(a0)
0001A12E                            
0001A12E                            loc_1806C:
0001A12E E840                       		asr.w	#4,d0
0001A130 4840                       		swap	d0
0001A132 4240                       		clr.w	d0
0001A134 D0A8 0030                  		add.l	$30(a0),d0
0001A138 4840                       		swap	d0
0001A13A 3140 0008                  		move.w	d0,8(a0)
0001A13E 3028 0012                  		move.w	$12(a0),d0
0001A142 3238 D00C                  		move.w	($FFFFD00C).w,d1
0001A146 9268 000C                  		sub.w	$C(a0),d1
0001A14A 6500                       		bcs.s	loc_180A2
0001A14C 0441 0048                  		subi.w	#$48,d1
0001A150 6500                       		bcs.s	loc_180A2
0001A152 E240                       		asr.w	#1,d0
0001A154 0441 0028                  		subi.w	#$28,d1
0001A158 6500                       		bcs.s	loc_180A2
0001A15A E240                       		asr.w	#1,d0
0001A15C 0441 0028                  		subi.w	#$28,d1
0001A160 6500                       		bcs.s	loc_180A2
0001A162 7000                       		moveq	#0,d0
0001A164                            
0001A164                            loc_180A2:
0001A164 48C0                       		ext.l	d0
0001A166 E180                       		asl.l	#8,d0
0001A168 4A28 003D                  		tst.b	$3D(a0)
0001A16C 6700                       		beq.s	loc_180AE
0001A16E D080                       		add.l	d0,d0
0001A170                            
0001A170                            loc_180AE:
0001A170 D1A8 0038                  		add.l	d0,$38(a0)
0001A174 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A17A 6000 FE8E                  		bra.w	loc_17F48
0001A17E                            ; ===========================================================================
0001A17E                            
0001A17E                            loc_180BC:				; XREF: Obj77_ShipIndex
0001A17E 70FE                       		moveq	#-2,d0
0001A180 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001A186 6500                       		bcs.s	loc_180D2
0001A188 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001A18E 4268 0010                  		clr.w	$10(a0)
0001A192 5240                       		addq.w	#1,d0
0001A194                            
0001A194                            loc_180D2:
0001A194 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001A19A 6E00                       		bgt.s	loc_180E6
0001A19C 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001A1A2 4268 0012                  		clr.w	$12(a0)
0001A1A6 5240                       		addq.w	#1,d0
0001A1A8                            
0001A1A8                            loc_180E6:
0001A1A8 6600                       		bne.s	loc_180F2
0001A1AA 5428 0025                  		addq.b	#2,$25(a0)
0001A1AE 08A8 0000 0022             		bclr	#0,$22(a0)
0001A1B4                            
0001A1B4                            loc_180F2:
0001A1B4 6000 FE44                  		bra.w	loc_17F38
0001A1B8                            ; ===========================================================================
0001A1B8                            
0001A1B8                            loc_180F6:				; XREF: Obj77_ShipIndex
0001A1B8 4A28 003D                  		tst.b	$3D(a0)
0001A1BC 6600                       		bne.s	loc_18112
0001A1BE 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
0001A1C4 6D00 0000                  		blt.w	loc_18126
0001A1C8 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
0001A1CE 6E00 0000                  		bgt.w	loc_18126
0001A1D2 117C 0032 003C             		move.b	#$32,$3C(a0)
0001A1D8                            
0001A1D8                            loc_18112:
0001A1D8 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeBossDefeated	
0001A23E 303C 0082                  		move.w	#$82,d0
0001A242 4EB9 0000 121A             		jsr	(PlaySound).l	; play LZ music
0001A248 08E8 0000 0022             		bset	#0,$22(a0)
0001A24E 5428 0025                  		addq.b	#2,$25(a0)
0001A252                            
0001A252                            loc_18126:
0001A252 6000 FDA6                  		bra.w	loc_17F38
0001A256                            ; ===========================================================================
0001A256                            
0001A256                            loc_1812A:				; XREF: Obj77_ShipIndex
0001A256 4A28 003D                  		tst.b	$3D(a0)
0001A25A 6600                       		bne.s	loc_18136
0001A25C 5328 003C                  		subq.b	#1,$3C(a0)
0001A260 6600                       		bne.s	loc_1814E
0001A262                            
0001A262                            loc_18136:
0001A262 4228 003C                  		clr.b	$3C(a0)
0001A266 317C 0400 0010             		move.w	#$400,$10(a0)
0001A26C 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A272 4228 003D                  		clr.b	$3D(a0)
0001A276 5428 0025                  		addq.b	#2,$25(a0)
0001A27A                            
0001A27A                            loc_1814E:
0001A27A 6000 FD7E                  		bra.w	loc_17F38
0001A27E                            ; ===========================================================================
0001A27E                            
0001A27E                            loc_18152:				; XREF: Obj77_ShipIndex
0001A27E 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
0001A284 6400                       		bcc.s	loc_18160
0001A286 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A28A 6000                       		bra.s	loc_18166
0001A28C                            ; ===========================================================================
0001A28C                            
0001A28C                            loc_18160:
0001A28C 4A28 0001                  		tst.b	1(a0)
0001A290 6A00                       		bpl.s	Obj77_ShipDel
0001A292                            
0001A292                            loc_18166:
0001A292 6000 FD66                  		bra.w	loc_17F38
0001A296                            ; ===========================================================================
0001A296                            
0001A296                            Obj77_ShipDel:
0001A296 4EF9 0000 E9BA             		jmp	DeleteObject
0001A29C                            ; ===========================================================================
0001A29C                            
0001A29C                            Obj77_FaceMain:				; XREF: Obj77_Index
0001A29C 2268 0034                  		movea.l	$34(a0),a1
0001A2A0 1011                       		move.b	(a1),d0
0001A2A2 B010                       		cmp.b	(a0),d0
0001A2A4 6600                       		bne.s	Obj77_FaceDel
0001A2A6 7000                       		moveq	#0,d0
0001A2A8 1029 0025                  		move.b	$25(a1),d0
0001A2AC 7201                       		moveq	#1,d1
0001A2AE 4A28 003D                  		tst.b	$3D(a0)
0001A2B2 6700                       		beq.s	loc_1818C
0001A2B4 720A                       		moveq	#$A,d1
0001A2B6 6000                       		bra.s	loc_181A0
0001A2B8                            ; ===========================================================================
0001A2B8                            
0001A2B8                            loc_1818C:
0001A2B8 4A29 0020                  		tst.b	$20(a1)
0001A2BC 6600                       		bne.s	loc_18196
0001A2BE 7205                       		moveq	#5,d1
0001A2C0 6000                       		bra.s	loc_181A0
0001A2C2                            ; ===========================================================================
0001A2C2                            
0001A2C2                            loc_18196:
0001A2C2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A2C8 6500                       		bcs.s	loc_181A0
0001A2CA 7204                       		moveq	#4,d1
0001A2CC                            
0001A2CC                            loc_181A0:
0001A2CC 1141 001C                  		move.b	d1,$1C(a0)
0001A2D0 0C00 000E                  		cmpi.b	#$E,d0
0001A2D4 6600                       		bne.s	loc_181B6
0001A2D6 117C 0006 001C             		move.b	#6,$1C(a0)
0001A2DC 4A28 0001                  		tst.b	1(a0)
0001A2E0 6A00                       		bpl.s	Obj77_FaceDel
0001A2E2                            
0001A2E2                            loc_181B6:
0001A2E2 6000                       		bra.s	Obj77_Display
0001A2E4                            ; ===========================================================================
0001A2E4                            
0001A2E4                            Obj77_FaceDel:
0001A2E4 4EF9 0000 E9BA             		jmp	DeleteObject
0001A2EA                            ; ===========================================================================
0001A2EA                            
0001A2EA                            Obj77_FlameMain:			; XREF: Obj77_Index
0001A2EA 117C 0007 001C             		move.b	#7,$1C(a0)
0001A2F0 2268 0034                  		movea.l	$34(a0),a1
0001A2F4 1011                       		move.b	(a1),d0
0001A2F6 B010                       		cmp.b	(a0),d0
0001A2F8 6600                       		bne.s	Obj77_FlameDel
0001A2FA 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
0001A300 6600                       		bne.s	loc_181F0
0001A302 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A308 4A28 0001                  		tst.b	1(a0)
0001A30C 6A00                       		bpl.s	Obj77_FlameDel
0001A30E 6000                       		bra.s	loc_181F0
0001A310                            ; ===========================================================================
0001A310 4A69 0010                  		tst.w	$10(a1)
0001A314 6700                       		beq.s	loc_181F0
0001A316 117C 0008 001C             		move.b	#8,$1C(a0)
0001A31C                            
0001A31C                            loc_181F0:
0001A31C 6000                       		bra.s	Obj77_Display
0001A31E                            ; ===========================================================================
0001A31E                            
0001A31E                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
0001A31E 4EF9 0000 E9BA             		jmp	DeleteObject
0001A324                            ; ===========================================================================
0001A324                            
0001A324                            Obj77_Display:
0001A324 43F9 0001 9D80             		lea	(Ani_Eggman).l,a1
0001A32A 4EB9 0000 B9CA             		jsr	AnimateSprite
0001A330 2268 0034                  		movea.l	$34(a0),a1
0001A334 3169 0008 0008             		move.w	8(a1),8(a0)
0001A33A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A340 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A346 7003                       		moveq	#3,d0
0001A348 C028 0022                  		and.b	$22(a0),d0
0001A34C 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A352 8128 0001                  		or.b	d0,1(a0)
0001A356 4EF9 0000 E96A             		jmp	DisplaySprite
0001A35C                            ; ===========================================================================
0001A35C                            ; ---------------------------------------------------------------------------
0001A35C                            ; Object 73 - Eggman (MZ)
0001A35C                            ; ---------------------------------------------------------------------------
0001A35C                            
0001A35C                            Obj73:					; XREF: Obj_Index
0001A35C 7000                       		moveq	#0,d0
0001A35E 1028 0024                  		move.b	$24(a0),d0
0001A362 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001A366 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001A36A                            ; ===========================================================================
0001A36A 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001A36C 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001A36E 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001A370 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001A372 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001A374                            
0001A374 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A377 0401 04                    		dc.b 4,	1, 4
0001A37A 0607 04                    		dc.b 6,	7, 4
0001A37D 0800 03                    		dc.b 8,	0, 3
0001A380                            ; ===========================================================================
0001A380                            
0001A380                            Obj73_Main:				; XREF: Obj73_Index
0001A380 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A386 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A38C 117C 000F 0020             		move.b	#$F,$20(a0)
0001A392 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A398 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001A39C 2248                       		movea.l	a0,a1
0001A39E 7203                       		moveq	#3,d1
0001A3A0 6000                       		bra.s	Obj73_LoadBoss
0001A3A2                            ; ===========================================================================
0001A3A2                            
0001A3A2                            Obj73_Loop:
0001A3A2 4EB9 0000 F0D6             		jsr	SingleObjLoad2
0001A3A8 6600                       		bne.s	Obj73_ShipMain
0001A3AA 12BC 0073                  		move.b	#$73,0(a1)
0001A3AE 3368 0008 0008             		move.w	8(a0),8(a1)
0001A3B4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A3BA                            
0001A3BA                            Obj73_LoadBoss:				; XREF: Obj73_Main
0001A3BA 08A8 0000 0022             		bclr	#0,$22(a0)
0001A3C0 4229 0025                  		clr.b	$25(a1)
0001A3C4 135A 0024                  		move.b	(a2)+,$24(a1)
0001A3C8 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A3CC 135A 0018                  		move.b	(a2)+,$18(a1)
0001A3D0 237C 0001 9DD0 0004        		move.l	#Map_Eggman,4(a1)
0001A3D8 337C 0400 0002             		move.w	#$400,2(a1)
0001A3DE 137C 0004 0001             		move.b	#4,1(a1)
0001A3E4 137C 0020 0019             		move.b	#$20,$19(a1)
0001A3EA 2348 0034                  		move.l	a0,$34(a1)
0001A3EE 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001A3F2                            
0001A3F2                            Obj73_ShipMain:
0001A3F2 7000                       		moveq	#0,d0
0001A3F4 1028 0025                  		move.b	$25(a0),d0
0001A3F8 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001A3FC 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001A400 43F9 0001 9D80             		lea	(Ani_Eggman).l,a1
0001A406 4EB9 0000 B9CA             		jsr	AnimateSprite
0001A40C 7003                       		moveq	#3,d0
0001A40E C028 0022                  		and.b	$22(a0),d0
0001A412 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A418 8128 0001                  		or.b	d0,1(a0)
0001A41C 4EF9 0000 E96A             		jmp	DisplaySprite
0001A422                            ; ===========================================================================
0001A422 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001A424 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001A426 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001A428 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001A42A 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001A42C                            ; ===========================================================================
0001A42C                            
0001A42C                            loc_18302:				; XREF: Obj73_ShipIndex
0001A42C 1028 003F                  		move.b	$3F(a0),d0
0001A430 5428 003F                  		addq.b	#2,$3F(a0)
0001A434 4EB9 0000 29F6             		jsr	(CalcSine).l
0001A43A E440                       		asr.w	#2,d0
0001A43C 3140 0012                  		move.w	d0,$12(a0)
0001A440 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A446 6100 F4BC                  		bsr.w	BossMove
0001A44A 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A450 6600                       		bne.s	loc_18334
0001A452 5428 0025                  		addq.b	#2,$25(a0)
0001A456 4228 0028                  		clr.b	$28(a0)
0001A45A 42A8 0010                  		clr.l	$10(a0)
0001A45E                            
0001A45E                            loc_18334:
0001A45E 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001A464 1140 0034                  		move.b	d0,$34(a0)
0001A468                            
0001A468                            loc_1833E:
0001A468 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A46E 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A474 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0001A47A 6400                       		bcc.s	locret_18390
0001A47C 4A28 0022                  		tst.b	$22(a0)
0001A480 6B00                       		bmi.s	loc_18392
0001A482 4A28 0020                  		tst.b	$20(a0)
0001A486 6600                       		bne.s	locret_18390
0001A488 4A28 003E                  		tst.b	$3E(a0)
0001A48C 6600                       		bne.s	loc_18374
0001A48E 117C 0028 003E             		move.b	#$28,$3E(a0)
0001A494 303C 00AC                  		move.w	#$AC,d0
0001A498 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A49E                            
0001A49E                            loc_18374:
0001A49E 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A4A2 7000                       		moveq	#0,d0
0001A4A4 4A51                       		tst.w	(a1)
0001A4A6 6600                       		bne.s	loc_18382
0001A4A8 303C 0EEE                  		move.w	#$EEE,d0
0001A4AC                            
0001A4AC                            loc_18382:
0001A4AC 3280                       		move.w	d0,(a1)
0001A4AE 5328 003E                  		subq.b	#1,$3E(a0)
0001A4B2 6600                       		bne.s	locret_18390
0001A4B4 117C 000F 0020             		move.b	#$F,$20(a0)
0001A4BA                            
0001A4BA                            locret_18390:
0001A4BA 4E75                       		rts	
0001A4BC                            ; ===========================================================================
0001A4BC                            
0001A4BC                            loc_18392:				; XREF: loc_1833E
0001A4BC 7064                       		moveq	#100,d0
0001A4BE 6100 0000                  		bsr.w	AddPoints
0001A4C2 117C 0004 0025             		move.b	#4,$25(a0)
0001A4C8 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001A4CE 4268 0010                  		clr.w	$10(a0)
0001A4D2 4E75                       		rts	
0001A4D4                            ; ===========================================================================
0001A4D4                            
0001A4D4                            loc_183AA:				; XREF: Obj73_ShipIndex
0001A4D4 7000                       		moveq	#0,d0
0001A4D6 1028 0028                  		move.b	$28(a0),d0
0001A4DA 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001A4DE 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001A4E2 0228 0006 0028             		andi.b	#6,$28(a0)
0001A4E8 6000 FF7E                  		bra.w	loc_1833E
0001A4EC                            ; ===========================================================================
0001A4EC 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001A4EE 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A4F0 0000                       		dc.w loc_183CA-off_183C2
0001A4F2 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A4F4                            ; ===========================================================================
0001A4F4                            
0001A4F4                            loc_183CA:				; XREF: off_183C2
0001A4F4 4A68 0010                  		tst.w	$10(a0)
0001A4F8 6600                       		bne.s	loc_183FE
0001A4FA 7040                       		moveq	#$40,d0
0001A4FC 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A502 6700                       		beq.s	loc_183E6
0001A504 6500                       		bcs.s	loc_183DE
0001A506 4440                       		neg.w	d0
0001A508                            
0001A508                            loc_183DE:
0001A508 3140 0012                  		move.w	d0,$12(a0)
0001A50C 6000 F3F6                  		bra.w	BossMove
0001A510                            ; ===========================================================================
0001A510                            
0001A510                            loc_183E6:
0001A510 317C 0200 0010             		move.w	#$200,$10(a0)
0001A516 317C 0100 0012             		move.w	#$100,$12(a0)
0001A51C 0828 0000 0022             		btst	#0,$22(a0)
0001A522 6600                       		bne.s	loc_183FE
0001A524 4468 0010                  		neg.w	$10(a0)
0001A528                            
0001A528                            loc_183FE:
0001A528 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001A52E 6400                       		bcc.s	Obj73_MakeLava
0001A530 6100 F3D2                  		bsr.w	BossMove
0001A534 5968 0012                  		subq.w	#4,$12(a0)
0001A538                            
0001A538                            Obj73_MakeLava:
0001A538 5328 0034                  		subq.b	#1,$34(a0)
0001A53C 6400                       		bcc.s	loc_1845C
0001A53E 4EB9 0000 F0C0             		jsr	SingleObjLoad
0001A544 6600                       		bne.s	loc_1844A
0001A546 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0001A54A 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
0001A550 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001A556 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001A55C 80FC 0050                  		divu.w	#$50,d0
0001A560 4840                       		swap	d0
0001A562 0640 1878                  		addi.w	#$1878,d0
0001A566 3340 0008                  		move.w	d0,8(a1)
0001A56A EE09                       		lsr.b	#7,d1
0001A56C 337C 00FF 0028             		move.w	#$FF,$28(a1)
0001A572                            
0001A572                            loc_1844A:
0001A572 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001A578 0200 001F                  		andi.b	#$1F,d0
0001A57C 0600 0040                  		addi.b	#$40,d0
0001A580 1140 0034                  		move.b	d0,$34(a0)
0001A584                            
0001A584                            loc_1845C:
0001A584 0828 0000 0022             		btst	#0,$22(a0)
0001A58A 6700                       		beq.s	loc_18474
0001A58C 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A592 6D00                       		blt.s	locret_1849C
0001A594 317C 1910 0030             		move.w	#$1910,$30(a0)
0001A59A 6000                       		bra.s	loc_18482
0001A59C                            ; ===========================================================================
0001A59C                            
0001A59C                            loc_18474:
0001A59C 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001A5A2 6E00                       		bgt.s	locret_1849C
0001A5A4 317C 1830 0030             		move.w	#$1830,$30(a0)
0001A5AA                            
0001A5AA                            loc_18482:
0001A5AA 4268 0010                  		clr.w	$10(a0)
0001A5AE 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A5B4 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A5BA 6400                       		bcc.s	loc_18498
0001A5BC 4468 0012                  		neg.w	$12(a0)
0001A5C0                            
0001A5C0                            loc_18498:
0001A5C0 5428 0028                  		addq.b	#2,$28(a0)
0001A5C4                            
0001A5C4                            locret_1849C:
0001A5C4 4E75                       		rts	
0001A5C6                            ; ===========================================================================
0001A5C6                            
0001A5C6                            Obj73_MakeLava2:			; XREF: off_183C2
0001A5C6 6100 F33C                  		bsr.w	BossMove
0001A5CA 3028 0038                  		move.w	$38(a0),d0
0001A5CE 0440 022C                  		subi.w	#$22C,d0
0001A5D2 6E00                       		bgt.s	locret_184F4
0001A5D4 303C 022C                  		move.w	#$22C,d0
0001A5D8 4A68 0012                  		tst.w	$12(a0)
0001A5DC 6700                       		beq.s	loc_184EA
0001A5DE 4268 0012                  		clr.w	$12(a0)
0001A5E2 317C 0050 003C             		move.w	#$50,$3C(a0)
0001A5E8 0868 0000 0022             		bchg	#0,$22(a0)
0001A5EE 4EB9 0000 F0C0             		jsr	SingleObjLoad
0001A5F4 6600                       		bne.s	loc_184EA
0001A5F6 3368 0030 0008             		move.w	$30(a0),8(a1)
0001A5FC 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001A602 0669 0018 000C             		addi.w	#$18,$C(a1)
0001A608 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001A60C 137C 0001 0028             		move.b	#1,$28(a1)
0001A612                            
0001A612                            loc_184EA:
0001A612 5368 003C                  		subq.w	#1,$3C(a0)
0001A616 6600                       		bne.s	locret_184F4
0001A618 5428 0028                  		addq.b	#2,$28(a0)
0001A61C                            
0001A61C                            locret_184F4:
0001A61C 4E75                       		rts	
0001A61E                            ; ===========================================================================
0001A61E                            
0001A61E                            loc_184F6:				; XREF: Obj73_ShipIndex
0001A61E 5368 003C                  		subq.w	#1,$3C(a0)
0001A622 6B00                       		bmi.s	loc_18500
0001A624 6000 F290                  		bra.w	BossDefeated
0001A628                            ; ===========================================================================
0001A628                            
0001A628                            loc_18500:
0001A628 08E8 0000 0022             		bset	#0,$22(a0)
0001A62E 08A8 0007 0022             		bclr	#7,$22(a0)
0001A634 4268 0010                  		clr.w	$10(a0)
0001A638 5428 0025                  		addq.b	#2,$25(a0)
0001A63C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001A642 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A646 6600                       		bne.s	locret_1852A
0001A648 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A64E 4268 0012                  		clr.w	$12(a0)
0001A652                            
0001A652                            locret_1852A:
0001A652 4E75                       		rts	
0001A654                            ; ===========================================================================
0001A654                            
0001A654                            loc_1852C:				; XREF: Obj73_ShipIndex
0001A654 5268 003C                  		addq.w	#1,$3C(a0)
0001A658 6700                       		beq.s	loc_18544
0001A65A 6A00                       		bpl.s	loc_1854E
0001A65C 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001A662 6400                       		bcc.s	loc_18544
0001A664 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A66A 6000 0000                  		bra.w	loc_1857A
0001A66E                            ; ===========================================================================
0001A66E                            
0001A66E                            loc_18544:
0001A66E 4268 0012                  		clr.w	$12(a0)
0001A672 4268 003C                  		clr.w	$3C(a0)
0001A676 6000 0000                  		bra.w	loc_1857A
0001A67A                            ; ===========================================================================
0001A67A                            
0001A67A                            loc_1854E:
0001A67A 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001A680 6500                       		bcs.s	loc_18566
0001A682 6700                       		beq.s	loc_1856C
0001A684 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001A68A 6500 0000                  		bcs.w	loc_1857A
0001A68E 5428 0025                  		addq.b	#2,$25(a0)
0001A692 6000                       		bra.s	loc_1857A
0001A694                            ; ===========================================================================
0001A694                            
0001A694                            loc_18566:
0001A694 5168 0012                  		subq.w	#8,$12(a0)
0001A698 6000                       		bra.s	loc_1857A
0001A69A                            ; ===========================================================================
0001A69A                            
0001A69A                            loc_1856C:
0001A69A 4268 0012                  		clr.w	$12(a0)
0001A69E 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeBossDefeated			
0001A704 303C 0083                  		move.w	#$83,d0
0001A708 4EB9 0000 121A             		jsr	(PlaySound).l	; play MZ music
0001A70E                            
0001A70E                            loc_1857A:
0001A70E 6100 F1F4                  		bsr.w	BossMove
0001A712 6000 FD54                  		bra.w	loc_1833E
0001A716                            ; ===========================================================================
0001A716                            
0001A716                            loc_18582:				; XREF: Obj73_ShipIndex
0001A716 317C 0500 0010             		move.w	#$500,$10(a0)
0001A71C 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A722 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
0001A728 6400                       		bcc.s	loc_1859C
0001A72A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A72E 6000                       		bra.s	loc_185A2
0001A730                            ; ===========================================================================
0001A730                            
0001A730                            loc_1859C:
0001A730 4A28 0001                  		tst.b	1(a0)
0001A734 6A00                       		bpl.s	Obj73_ShipDel
0001A736                            
0001A736                            loc_185A2:
0001A736 6100 F1CC                  		bsr.w	BossMove
0001A73A 6000 FD2C                  		bra.w	loc_1833E
0001A73E                            ; ===========================================================================
0001A73E                            
0001A73E                            Obj73_ShipDel:
0001A73E 4EF9 0000 E9BA             		jmp	DeleteObject
0001A744                            ; ===========================================================================
0001A744                            
0001A744                            Obj73_FaceMain:				; XREF: Obj73_Index
0001A744 7000                       		moveq	#0,d0
0001A746 7201                       		moveq	#1,d1
0001A748 2268 0034                  		movea.l	$34(a0),a1
0001A74C 1029 0025                  		move.b	$25(a1),d0
0001A750 5540                       		subq.w	#2,d0
0001A752 6600                       		bne.s	loc_185D2
0001A754 0829 0001 0028             		btst	#1,$28(a1)
0001A75A 6700                       		beq.s	loc_185DA
0001A75C 4A69 0012                  		tst.w	$12(a1)
0001A760 6600                       		bne.s	loc_185DA
0001A762 7204                       		moveq	#4,d1
0001A764 6000                       		bra.s	loc_185EE
0001A766                            ; ===========================================================================
0001A766                            
0001A766                            loc_185D2:
0001A766 5500                       		subq.b	#2,d0
0001A768 6B00                       		bmi.s	loc_185DA
0001A76A 720A                       		moveq	#$A,d1
0001A76C 6000                       		bra.s	loc_185EE
0001A76E                            ; ===========================================================================
0001A76E                            
0001A76E                            loc_185DA:
0001A76E 4A29 0020                  		tst.b	$20(a1)
0001A772 6600                       		bne.s	loc_185E4
0001A774 7205                       		moveq	#5,d1
0001A776 6000                       		bra.s	loc_185EE
0001A778                            ; ===========================================================================
0001A778                            
0001A778                            loc_185E4:
0001A778 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A77E 6500                       		bcs.s	loc_185EE
0001A780 7204                       		moveq	#4,d1
0001A782                            
0001A782                            loc_185EE:
0001A782 1141 001C                  		move.b	d1,$1C(a0)
0001A786 5900                       		subq.b	#4,d0
0001A788 6600                       		bne.s	loc_18602
0001A78A 117C 0006 001C             		move.b	#6,$1C(a0)
0001A790 4A28 0001                  		tst.b	1(a0)
0001A794 6A00                       		bpl.s	Obj73_FaceDel
0001A796                            
0001A796                            loc_18602:
0001A796 6000                       		bra.s	Obj73_Display
0001A798                            ; ===========================================================================
0001A798                            
0001A798                            Obj73_FaceDel:
0001A798 4EF9 0000 E9BA             		jmp	DeleteObject
0001A79E                            ; ===========================================================================
0001A79E                            
0001A79E                            Obj73_FlameMain:			; XREF: Obj73_Index
0001A79E 117C 0007 001C             		move.b	#7,$1C(a0)
0001A7A4 2268 0034                  		movea.l	$34(a0),a1
0001A7A8 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A7AE 6D00                       		blt.s	loc_1862A
0001A7B0 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A7B6 4A28 0001                  		tst.b	1(a0)
0001A7BA 6A00                       		bpl.s	Obj73_FlameDel
0001A7BC 6000                       		bra.s	loc_18636
0001A7BE                            ; ===========================================================================
0001A7BE                            
0001A7BE                            loc_1862A:
0001A7BE 4A69 0010                  		tst.w	$10(a1)
0001A7C2 6700                       		beq.s	loc_18636
0001A7C4 117C 0008 001C             		move.b	#8,$1C(a0)
0001A7CA                            
0001A7CA                            loc_18636:
0001A7CA 6000                       		bra.s	Obj73_Display
0001A7CC                            ; ===========================================================================
0001A7CC                            
0001A7CC                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
0001A7CC 4EF9 0000 E9BA             		jmp	DeleteObject
0001A7D2                            ; ===========================================================================
0001A7D2                            
0001A7D2                            Obj73_Display:
0001A7D2 43F9 0001 9D80             		lea	(Ani_Eggman).l,a1
0001A7D8 4EB9 0000 B9CA             		jsr	AnimateSprite
0001A7DE                            
0001A7DE                            loc_1864A:
0001A7DE 2268 0034                  		movea.l	$34(a0),a1
0001A7E2 3169 0008 0008             		move.w	8(a1),8(a0)
0001A7E8 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A7EE 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A7F4 7003                       		moveq	#3,d0
0001A7F6 C028 0022                  		and.b	$22(a0),d0
0001A7FA 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A800 8128 0001                  		or.b	d0,1(a0)
0001A804 4EF9 0000 E96A             		jmp	DisplaySprite
0001A80A                            ; ===========================================================================
0001A80A                            
0001A80A                            Obj73_TubeMain:				; XREF: Obj73_Index
0001A80A 2268 0034                  		movea.l	$34(a0),a1
0001A80E 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A814 6600                       		bne.s	loc_18688
0001A816 4A28 0001                  		tst.b	1(a0)
0001A81A 6A00                       		bpl.s	Obj73_TubeDel
0001A81C                            
0001A81C                            loc_18688:
0001A81C 217C 0001 9E98 0004        		move.l	#Map_BossItems,4(a0)
0001A824 317C 246C 0002             		move.w	#$246C,2(a0)
0001A82A 117C 0004 001A             		move.b	#4,$1A(a0)
0001A830 60AC                       		bra.s	loc_1864A
0001A832                            ; ===========================================================================
0001A832                            
0001A832                            Obj73_TubeDel:
0001A832 4EF9 0000 E9BA             		jmp	DeleteObject
0001A838                            ; ===========================================================================
0001A838                            ; ---------------------------------------------------------------------------
0001A838                            ; Object 74 - lava that	Eggman drops (MZ)
0001A838                            ; ---------------------------------------------------------------------------
0001A838                            
0001A838                            Obj74:					; XREF: Obj_Index
0001A838 7000                       		moveq	#0,d0
0001A83A 1028 0024                  		move.b	$24(a0),d0
0001A83E 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001A842 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001A846 4EF9 0000 E96A             		jmp	DisplaySprite
0001A84C                            ; ===========================================================================
0001A84C 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001A84E 0000                       		dc.w Obj74_Action-Obj74_Index
0001A850 0000                       		dc.w loc_18886-Obj74_Index
0001A852 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001A854                            ; ===========================================================================
0001A854                            
0001A854                            Obj74_Main:				; XREF: Obj74_Index
0001A854 117C 0008 0016             		move.b	#8,$16(a0)
0001A85A 117C 0008 0017             		move.b	#8,$17(a0)
0001A860 217C 0000 C664 0004        		move.l	#Map_obj14,4(a0)
0001A868 317C 0345 0002             		move.w	#$345,2(a0)
0001A86E 117C 0004 0001             		move.b	#4,1(a0)
0001A874 117C 0005 0018             		move.b	#5,$18(a0)
0001A87A 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A880 117C 0008 0019             		move.b	#8,$19(a0)
0001A886 5428 0024                  		addq.b	#2,$24(a0)
0001A88A 4A28 0028                  		tst.b	$28(a0)
0001A88E 6600                       		bne.s	loc_1870A
0001A890 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A896 5428 0024                  		addq.b	#2,$24(a0)
0001A89A 6000 0000                  		bra.w	loc_18886
0001A89E                            ; ===========================================================================
0001A89E                            
0001A89E                            loc_1870A:
0001A89E 117C 001E 0029             		move.b	#$1E,$29(a0)
0001A8A4 303C 00AE                  		move.w	#$AE,d0
0001A8A8 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play lava sound
0001A8AE                            
0001A8AE                            Obj74_Action:				; XREF: Obj74_Index
0001A8AE 7000                       		moveq	#0,d0
0001A8B0 1028 0025                  		move.b	$25(a0),d0
0001A8B4 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001A8B8 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001A8BC 4EB9 0000 E950             		jsr	SpeedToPos
0001A8C2 43F9 0000 FD7A             		lea	(Ani_obj14).l,a1
0001A8C8 4EB9 0000 B9CA             		jsr	AnimateSprite
0001A8CE 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001A8D4 6200                       		bhi.s	Obj74_Delete
0001A8D6 4E75                       		rts	
0001A8D8                            ; ===========================================================================
0001A8D8                            
0001A8D8                            Obj74_Delete:
0001A8D8 4EF9 0000 E9BA             		jmp	DeleteObject
0001A8DE                            ; ===========================================================================
0001A8DE 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001A8E0 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001A8E2 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001A8E4 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001A8E6                            ; ===========================================================================
0001A8E6                            
0001A8E6                            Obj74_Drop:				; XREF: Obj74_Index2
0001A8E6 08E8 0001 0022             		bset	#1,$22(a0)
0001A8EC 5328 0029                  		subq.b	#1,$29(a0)
0001A8F0 6A00                       		bpl.s	locret_18780
0001A8F2 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A8F8 4228 0028                  		clr.b	$28(a0)
0001A8FC 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A902 08A8 0001 0022             		bclr	#1,$22(a0)
0001A908 6100 C58C                  		bsr.w	ObjHitFloor
0001A90C 4A41                       		tst.w	d1
0001A90E 6A00                       		bpl.s	locret_18780
0001A910 5428 0025                  		addq.b	#2,$25(a0)
0001A914                            
0001A914                            locret_18780:
0001A914 4E75                       		rts	
0001A916                            ; ===========================================================================
0001A916                            
0001A916                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001A916 5568 000C                  		subq.w	#2,$C(a0)
0001A91A 08E8 0007 0002             		bset	#7,2(a0)
0001A920 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001A926 4268 0012                  		clr.w	$12(a0)
0001A92A 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A930 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A936 117C 0003 0029             		move.b	#3,$29(a0)
0001A93C 4EB9 0000 F0D6             		jsr	SingleObjLoad2
0001A942 6600                       		bne.s	loc_187CA
0001A944 47D1                       		lea	(a1),a3
0001A946 45D0                       		lea	(a0),a2
0001A948 7003                       		moveq	#3,d0
0001A94A                            
0001A94A                            Obj74_Loop:
0001A94A 26DA                       		move.l	(a2)+,(a3)+
0001A94C 26DA                       		move.l	(a2)+,(a3)+
0001A94E 26DA                       		move.l	(a2)+,(a3)+
0001A950 26DA                       		move.l	(a2)+,(a3)+
0001A952 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001A956                            
0001A956 4469 0010                  		neg.w	$10(a1)
0001A95A 5429 0025                  		addq.b	#2,$25(a1)
0001A95E                            
0001A95E                            loc_187CA:
0001A95E 5428 0025                  		addq.b	#2,$25(a0)
0001A962 4E75                       		rts	
0001A964                            
0001A964                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A964                            
0001A964                            
0001A964                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001A964 4EB9 0000 F0D6             		jsr	SingleObjLoad2
0001A96A 6600                       		bne.s	locret_187EE
0001A96C 3368 0008 0008             		move.w	8(a0),8(a1)
0001A972 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A978 12BC 0074                  		move.b	#$74,(a1)
0001A97C 337C 0067 0028             		move.w	#$67,$28(a1)
0001A982                            
0001A982                            locret_187EE:
0001A982 4E75                       		rts	
0001A984                            ; End of function Obj74_Duplicate2
0001A984                            
0001A984                            ; ===========================================================================
0001A984                            
0001A984                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001A984 6100 C510                  		bsr.w	ObjHitFloor
0001A988 4A41                       		tst.w	d1
0001A98A 6A00                       		bpl.s	loc_18826
0001A98C 3028 0008                  		move.w	8(a0),d0
0001A990 0C40 1940                  		cmpi.w	#$1940,d0
0001A994 6E00                       		bgt.s	loc_1882C
0001A996 3228 0030                  		move.w	$30(a0),d1
0001A99A B240                       		cmp.w	d0,d1
0001A99C 6700                       		beq.s	loc_1881E
0001A99E 0240 0010                  		andi.w	#$10,d0
0001A9A2 0241 0010                  		andi.w	#$10,d1
0001A9A6 B240                       		cmp.w	d0,d1
0001A9A8 6700                       		beq.s	loc_1881E
0001A9AA 61B8                       		bsr.s	Obj74_Duplicate2
0001A9AC 3168 0008 0032             		move.w	8(a0),$32(a0)
0001A9B2                            
0001A9B2                            loc_1881E:
0001A9B2 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A9B8 4E75                       		rts	
0001A9BA                            ; ===========================================================================
0001A9BA                            
0001A9BA                            loc_18826:
0001A9BA 5428 0025                  		addq.b	#2,$25(a0)
0001A9BE 4E75                       		rts	
0001A9C0                            ; ===========================================================================
0001A9C0                            
0001A9C0                            loc_1882C:
0001A9C0 5428 0024                  		addq.b	#2,$24(a0)
0001A9C4 4E75                       		rts	
0001A9C6                            ; ===========================================================================
0001A9C6                            
0001A9C6                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001A9C6 08A8 0001 0022             		bclr	#1,$22(a0)
0001A9CC 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001A9D2 3028 0008                  		move.w	8(a0),d0
0001A9D6 9068 0032                  		sub.w	$32(a0),d0
0001A9DA 6A00                       		bpl.s	loc_1884A
0001A9DC 4440                       		neg.w	d0
0001A9DE                            
0001A9DE                            loc_1884A:
0001A9DE 0C40 0012                  		cmpi.w	#$12,d0
0001A9E2 6600                       		bne.s	loc_18856
0001A9E4 08A8 0007 0002             		bclr	#7,2(a0)
0001A9EA                            
0001A9EA                            loc_18856:
0001A9EA 6100 C4AA                  		bsr.w	ObjHitFloor
0001A9EE 4A41                       		tst.w	d1
0001A9F0 6A00                       		bpl.s	locret_1887E
0001A9F2 5328 0029                  		subq.b	#1,$29(a0)
0001A9F6 6700                       		beq.s	Obj74_Delete2
0001A9F8 4268 0012                  		clr.w	$12(a0)
0001A9FC 3168 0032 0008             		move.w	$32(a0),8(a0)
0001AA02 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001AA08 08E8 0007 0002             		bset	#7,2(a0)
0001AA0E 5528 0025                  		subq.b	#2,$25(a0)
0001AA12                            
0001AA12                            locret_1887E:
0001AA12 4E75                       		rts	
0001AA14                            ; ===========================================================================
0001AA14                            
0001AA14                            Obj74_Delete2:
0001AA14 4EF9 0000 E9BA             		jmp	DeleteObject
0001AA1A                            ; ===========================================================================
0001AA1A                            
0001AA1A                            loc_18886:				; XREF: Obj74_Index
0001AA1A 08E8 0007 0002             		bset	#7,2(a0)
0001AA20 5328 0029                  		subq.b	#1,$29(a0)
0001AA24 6600                       		bne.s	Obj74_Animate
0001AA26 117C 0001 001C             		move.b	#1,$1C(a0)
0001AA2C 5968 000C                  		subq.w	#4,$C(a0)
0001AA30 4228 0020                  		clr.b	$20(a0)
0001AA34                            
0001AA34                            Obj74_Animate:
0001AA34 43F9 0000 FD7A             		lea	(Ani_obj14).l,a1
0001AA3A 4EF9 0000 B9CA             		jmp	AnimateSprite
0001AA40                            ; ===========================================================================
0001AA40                            
0001AA40                            Obj74_Delete3:				; XREF: Obj74_Index
0001AA40 4EF9 0000 E9BA             		jmp	DeleteObject
0001AA46                            ; ===========================================================================
0001AA46                            
0001AA46                            Obj7A_Delete:
0001AA46 4EF9 0000 E9BA             		jmp	DeleteObject
0001AA4C                            ; ===========================================================================
0001AA4C                            ; ---------------------------------------------------------------------------
0001AA4C                            ; Object 7A - Eggman (SLZ)
0001AA4C                            ; ---------------------------------------------------------------------------
0001AA4C                            
0001AA4C                            Obj7A:					; XREF: Obj_Index
0001AA4C 7000                       		moveq	#0,d0
0001AA4E 1028 0024                  		move.b	$24(a0),d0
0001AA52 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001AA56 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001AA5A                            ; ===========================================================================
0001AA5A 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001AA5C 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001AA5E 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001AA60 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001AA62 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001AA64                            
0001AA64 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001AA67 0401 04                    		dc.b 4,	1, 4
0001AA6A 0607 04                    		dc.b 6,	7, 4
0001AA6D 0800 03                    		dc.b 8,	0, 3
0001AA70                            ; ===========================================================================
0001AA70                            
0001AA70                            Obj7A_Main:				; XREF: Obj7A_Index
0001AA70 317C 2188 0008             		move.w	#$2188,8(a0)
0001AA76 317C 0228 000C             		move.w	#$228,$C(a0)
0001AA7C 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AA82 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001AA88 117C 000F 0020             		move.b	#$F,$20(a0)
0001AA8E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001AA94 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001AA98 2248                       		movea.l	a0,a1
0001AA9A 7203                       		moveq	#3,d1
0001AA9C 6000                       		bra.s	Obj7A_LoadBoss
0001AA9E                            ; ===========================================================================
0001AA9E                            
0001AA9E                            Obj7A_Loop:
0001AA9E 4EB9 0000 F0D6             		jsr	SingleObjLoad2
0001AAA4 6600                       		bne.s	loc_1895C
0001AAA6 12BC 007A                  		move.b	#$7A,0(a1)
0001AAAA 3368 0008 0008             		move.w	8(a0),8(a1)
0001AAB0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AAB6                            
0001AAB6                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001AAB6 08A8 0000 0022             		bclr	#0,$22(a0)
0001AABC 4229 0025                  		clr.b	$25(a1)
0001AAC0 135A 0024                  		move.b	(a2)+,$24(a1)
0001AAC4 135A 001C                  		move.b	(a2)+,$1C(a1)
0001AAC8 135A 0018                  		move.b	(a2)+,$18(a1)
0001AACC 237C 0001 9DD0 0004        		move.l	#Map_Eggman,4(a1)
0001AAD4 337C 0400 0002             		move.w	#$400,2(a1)
0001AADA 137C 0004 0001             		move.b	#4,1(a1)
0001AAE0 137C 0020 0019             		move.b	#$20,$19(a1)
0001AAE6 2348 0034                  		move.l	a0,$34(a1)
0001AAEA 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001AAEE                            
0001AAEE                            loc_1895C:
0001AAEE 43F8 D040                  		lea	($FFFFD040).w,a1
0001AAF2 45E8 002A                  		lea	$2A(a0),a2
0001AAF6 705E                       		moveq	#$5E,d0
0001AAF8 723E                       		moveq	#$3E,d1
0001AAFA                            
0001AAFA                            loc_18968:
0001AAFA B011                       		cmp.b	(a1),d0
0001AAFC 6600                       		bne.s	loc_18974
0001AAFE 4A29 0028                  		tst.b	$28(a1)
0001AB02 6700                       		beq.s	loc_18974
0001AB04 34C9                       		move.w	a1,(a2)+
0001AB06                            
0001AB06                            loc_18974:
0001AB06 D2FC 0040                  		adda.w	#$40,a1
0001AB0A 51C9 FFEE                  		dbf	d1,loc_18968
0001AB0E                            
0001AB0E                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001AB0E 7000                       		moveq	#0,d0
0001AB10 1028 0025                  		move.b	$25(a0),d0
0001AB14 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001AB18 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001AB1C 43F9 0001 9D80             		lea	(Ani_Eggman).l,a1
0001AB22 4EB9 0000 B9CA             		jsr	AnimateSprite
0001AB28 7003                       		moveq	#3,d0
0001AB2A C028 0022                  		and.b	$22(a0),d0
0001AB2E 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001AB34 8128 0001                  		or.b	d0,1(a0)
0001AB38 4EF9 0000 E96A             		jmp	DisplaySprite
0001AB3E                            ; ===========================================================================
0001AB3E 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001AB40 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001AB42 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001AB44 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001AB46 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001AB48 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001AB4A                            ; ===========================================================================
0001AB4A                            
0001AB4A                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001AB4A 317C FF00 0010             		move.w	#-$100,$10(a0)
0001AB50 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001AB56 6400                       		bcc.s	loc_189CA
0001AB58 5428 0025                  		addq.b	#2,$25(a0)
0001AB5C                            
0001AB5C                            loc_189CA:
0001AB5C 6100 EDA6                  		bsr.w	BossMove
0001AB60 1028 003F                  		move.b	$3F(a0),d0
0001AB64 5428 003F                  		addq.b	#2,$3F(a0)
0001AB68 4EB9 0000 29F6             		jsr	(CalcSine).l
0001AB6E EC40                       		asr.w	#6,d0
0001AB70 D068 0038                  		add.w	$38(a0),d0
0001AB74 3140 000C                  		move.w	d0,$C(a0)
0001AB78 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AB7E 6000                       		bra.s	loc_189FE
0001AB80                            ; ===========================================================================
0001AB80                            
0001AB80                            loc_189EE:
0001AB80 6100 ED82                  		bsr.w	BossMove
0001AB84 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001AB8A 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AB90                            
0001AB90                            loc_189FE:
0001AB90 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001AB96 6400                       		bcc.s	locret_18A44
0001AB98 4A28 0022                  		tst.b	$22(a0)
0001AB9C 6B00                       		bmi.s	loc_18A46
0001AB9E 4A28 0020                  		tst.b	$20(a0)
0001ABA2 6600                       		bne.s	locret_18A44
0001ABA4 4A28 003E                  		tst.b	$3E(a0)
0001ABA8 6600                       		bne.s	loc_18A28
0001ABAA 117C 0020 003E             		move.b	#$20,$3E(a0)
0001ABB0 303C 00AC                  		move.w	#$AC,d0
0001ABB4 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001ABBA                            
0001ABBA                            loc_18A28:
0001ABBA 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001ABBE 7000                       		moveq	#0,d0
0001ABC0 4A51                       		tst.w	(a1)
0001ABC2 6600                       		bne.s	loc_18A36
0001ABC4 303C 0EEE                  		move.w	#$EEE,d0
0001ABC8                            
0001ABC8                            loc_18A36:
0001ABC8 3280                       		move.w	d0,(a1)
0001ABCA 5328 003E                  		subq.b	#1,$3E(a0)
0001ABCE 6600                       		bne.s	locret_18A44
0001ABD0 117C 000F 0020             		move.b	#$F,$20(a0)
0001ABD6                            
0001ABD6                            locret_18A44:
0001ABD6 4E75                       		rts	
0001ABD8                            ; ===========================================================================
0001ABD8                            
0001ABD8                            loc_18A46:
0001ABD8 7064                       		moveq	#100,d0
0001ABDA 6100 0000                  		bsr.w	AddPoints
0001ABDE 117C 0006 0025             		move.b	#6,$25(a0)
0001ABE4 117C 0078 003C             		move.b	#$78,$3C(a0)
0001ABEA 4268 0010                  		clr.w	$10(a0)
0001ABEE 4E75                       		rts	
0001ABF0                            ; ===========================================================================
0001ABF0                            
0001ABF0                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001ABF0 3028 0030                  		move.w	$30(a0),d0
0001ABF4 317C 0200 0010             		move.w	#$200,$10(a0)
0001ABFA 0828 0000 0022             		btst	#0,$22(a0)
0001AC00 6600                       		bne.s	loc_18A7C
0001AC02 4468 0010                  		neg.w	$10(a0)
0001AC06 0C40 2008                  		cmpi.w	#$2008,d0
0001AC0A 6E00                       		bgt.s	loc_18A88
0001AC0C 6000                       		bra.s	loc_18A82
0001AC0E                            ; ===========================================================================
0001AC0E                            
0001AC0E                            loc_18A7C:
0001AC0E 0C40 2138                  		cmpi.w	#$2138,d0
0001AC12 6D00                       		blt.s	loc_18A88
0001AC14                            
0001AC14                            loc_18A82:
0001AC14 0868 0000 0022             		bchg	#0,$22(a0)
0001AC1A                            
0001AC1A                            loc_18A88:
0001AC1A 3028 0008                  		move.w	8(a0),d0
0001AC1E 72FF                       		moveq	#-1,d1
0001AC20 7402                       		moveq	#2,d2
0001AC22 45E8 002A                  		lea	$2A(a0),a2
0001AC26 7828                       		moveq	#$28,d4
0001AC28 4A68 0010                  		tst.w	$10(a0)
0001AC2C 6A00                       		bpl.s	loc_18A9E
0001AC2E 4444                       		neg.w	d4
0001AC30                            
0001AC30                            loc_18A9E:
0001AC30 321A                       		move.w	(a2)+,d1
0001AC32 2641                       		movea.l	d1,a3
0001AC34 082B 0003 0022             		btst	#3,$22(a3)
0001AC3A 6600                       		bne.s	loc_18AB4
0001AC3C 362B 0008                  		move.w	8(a3),d3
0001AC40 D644                       		add.w	d4,d3
0001AC42 9640                       		sub.w	d0,d3
0001AC44 6700                       		beq.s	loc_18AC0
0001AC46                            
0001AC46                            loc_18AB4:
0001AC46 51CA FFE8                  		dbf	d2,loc_18A9E
0001AC4A                            
0001AC4A 1142 0028                  		move.b	d2,$28(a0)
0001AC4E 6000 FF0C                  		bra.w	loc_189CA
0001AC52                            ; ===========================================================================
0001AC52                            
0001AC52                            loc_18AC0:
0001AC52 1142 0028                  		move.b	d2,$28(a0)
0001AC56 5428 0025                  		addq.b	#2,$25(a0)
0001AC5A 117C 0028 003C             		move.b	#$28,$3C(a0)
0001AC60 6000 FEFA                  		bra.w	loc_189CA
0001AC64                            ; ===========================================================================
0001AC64                            
0001AC64                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001AC64 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001AC6A 6600                       		bne.s	loc_18B36
0001AC6C 70FF                       		moveq	#-1,d0
0001AC6E 1028 0028                  		move.b	$28(a0),d0
0001AC72 4880                       		ext.w	d0
0001AC74 6B00                       		bmi.s	loc_18B40
0001AC76 5540                       		subq.w	#2,d0
0001AC78 4440                       		neg.w	d0
0001AC7A D040                       		add.w	d0,d0
0001AC7C 43E8 002A                  		lea	$2A(a0),a1
0001AC80 3031 0000                  		move.w	(a1,d0.w),d0
0001AC84 2440                       		movea.l	d0,a2
0001AC86 43F8 D040                  		lea	($FFFFD040).w,a1
0001AC8A 723E                       		moveq	#$3E,d1
0001AC8C                            
0001AC8C                            loc_18AFA:
0001AC8C B0A9 003C                  		cmp.l	$3C(a1),d0
0001AC90 6700                       		beq.s	loc_18B40
0001AC92 D2FC 0040                  		adda.w	#$40,a1
0001AC96 51C9 FFF4                  		dbf	d1,loc_18AFA
0001AC9A                            
0001AC9A 2F08                       		move.l	a0,-(sp)
0001AC9C 41D2                       		lea	(a2),a0
0001AC9E 4EB9 0000 F0D6             		jsr	SingleObjLoad2
0001ACA4 205F                       		movea.l	(sp)+,a0
0001ACA6 6600                       		bne.s	loc_18B40
0001ACA8 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001ACAC 3368 0008 0008             		move.w	8(a0),8(a1)
0001ACB2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001ACB8 0669 0020 000C             		addi.w	#$20,$C(a1)
0001ACBE 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001ACC4 234A 003C                  		move.l	a2,$3C(a1)
0001ACC8                            
0001ACC8                            loc_18B36:
0001ACC8 5328 003C                  		subq.b	#1,$3C(a0)
0001ACCC 6700                       		beq.s	loc_18B40
0001ACCE 6000 FEC0                  		bra.w	loc_189FE
0001ACD2                            ; ===========================================================================
0001ACD2                            
0001ACD2                            loc_18B40:
0001ACD2 5528 0025                  		subq.b	#2,$25(a0)
0001ACD6 6000 FE84                  		bra.w	loc_189CA
0001ACDA                            ; ===========================================================================
0001ACDA                            
0001ACDA                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001ACDA 5328 003C                  		subq.b	#1,$3C(a0)
0001ACDE 6B00                       		bmi.s	loc_18B52
0001ACE0 6000 EBD4                  		bra.w	BossDefeated
0001ACE4                            ; ===========================================================================
0001ACE4                            
0001ACE4                            loc_18B52:
0001ACE4 5428 0025                  		addq.b	#2,$25(a0)
0001ACE8 4268 0012                  		clr.w	$12(a0)
0001ACEC 08E8 0000 0022             		bset	#0,$22(a0)
0001ACF2 08A8 0007 0022             		bclr	#7,$22(a0)
0001ACF8 4268 0010                  		clr.w	$10(a0)
0001ACFC 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001AD02 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001AD06 6600                       		bne.s	loc_18B7C
0001AD08 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001AD0E                            
0001AD0E                            loc_18B7C:
0001AD0E 6000 FE80                  		bra.w	loc_189FE
0001AD12                            ; ===========================================================================
0001AD12                            
0001AD12                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001AD12 5228 003C                  		addq.b	#1,$3C(a0)
0001AD16 6700                       		beq.s	loc_18B90
0001AD18 6A00                       		bpl.s	loc_18B96
0001AD1A 0668 0018 0012             		addi.w	#$18,$12(a0)
0001AD20 6000 0000                  		bra.w	loc_18BC2
0001AD24                            ; ===========================================================================
0001AD24                            
0001AD24                            loc_18B90:
0001AD24 4268 0012                  		clr.w	$12(a0)
0001AD28 6000 0000                  		bra.w	loc_18BC2
0001AD2C                            ; ===========================================================================
0001AD2C                            
0001AD2C                            loc_18B96:
0001AD2C 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001AD32 6500                       		bcs.s	loc_18BAE
0001AD34 6700                       		beq.s	loc_18BB4
0001AD36 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001AD3C 6500 0000                  		bcs.w	loc_18BC2
0001AD40 5428 0025                  		addq.b	#2,$25(a0)
0001AD44 6000                       		bra.s	loc_18BC2
0001AD46                            ; ===========================================================================
0001AD46                            
0001AD46                            loc_18BAE:
0001AD46 5168 0012                  		subq.w	#8,$12(a0)
0001AD4A 6000                       		bra.s	loc_18BC2
0001AD4C                            ; ===========================================================================
0001AD4C                            
0001AD4C                            loc_18BB4:
0001AD4C 4268 0012                  		clr.w	$12(a0)
0001AD50 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeBossDefeated			
0001ADB6 303C 0084                  		move.w	#$84,d0
0001ADBA 4EB9 0000 121A             		jsr	(PlaySound).l	; play SLZ music
0001ADC0                            
0001ADC0                            loc_18BC2:
0001ADC0 6000 FDBE                  		bra.w	loc_189EE
0001ADC4                            ; ===========================================================================
0001ADC4                            
0001ADC4                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001ADC4 317C 0400 0010             		move.w	#$400,$10(a0)
0001ADCA 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001ADD0 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001ADD6 6400                       		bcc.s	loc_18BE0
0001ADD8 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001ADDC 6000                       		bra.s	loc_18BE8
0001ADDE                            ; ===========================================================================
0001ADDE                            
0001ADDE                            loc_18BE0:
0001ADDE 4A28 0001                  		tst.b	1(a0)
0001ADE2 6A00 FC62                  		bpl.w	Obj7A_Delete
0001ADE6                            
0001ADE6                            loc_18BE8:
0001ADE6 6100 EB1C                  		bsr.w	BossMove
0001ADEA 6000 FD70                  		bra.w	loc_189CA
0001ADEE                            ; ===========================================================================
0001ADEE                            
0001ADEE                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001ADEE 7000                       		moveq	#0,d0
0001ADF0 7201                       		moveq	#1,d1
0001ADF2 2268 0034                  		movea.l	$34(a0),a1
0001ADF6 1029 0025                  		move.b	$25(a1),d0
0001ADFA 0C00 0006                  		cmpi.b	#6,d0
0001ADFE 6B00                       		bmi.s	loc_18C06
0001AE00 720A                       		moveq	#$A,d1
0001AE02 6000                       		bra.s	loc_18C1A
0001AE04                            ; ===========================================================================
0001AE04                            
0001AE04                            loc_18C06:
0001AE04 4A29 0020                  		tst.b	$20(a1)
0001AE08 6600                       		bne.s	loc_18C10
0001AE0A 7205                       		moveq	#5,d1
0001AE0C 6000                       		bra.s	loc_18C1A
0001AE0E                            ; ===========================================================================
0001AE0E                            
0001AE0E                            loc_18C10:
0001AE0E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001AE14 6500                       		bcs.s	loc_18C1A
0001AE16 7204                       		moveq	#4,d1
0001AE18                            
0001AE18                            loc_18C1A:
0001AE18 1141 001C                  		move.b	d1,$1C(a0)
0001AE1C 0C00 000A                  		cmpi.b	#$A,d0
0001AE20 6600                       		bne.s	loc_18C32
0001AE22 117C 0006 001C             		move.b	#6,$1C(a0)
0001AE28 4A28 0001                  		tst.b	1(a0)
0001AE2C 6A00 FC18                  		bpl.w	Obj7A_Delete
0001AE30                            
0001AE30                            loc_18C32:
0001AE30 6000                       		bra.s	loc_18C6C
0001AE32                            ; ===========================================================================
0001AE32                            
0001AE32                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001AE32 117C 0008 001C             		move.b	#8,$1C(a0)
0001AE38 2268 0034                  		movea.l	$34(a0),a1
0001AE3C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AE42 6600                       		bne.s	loc_18C56
0001AE44 4A28 0001                  		tst.b	1(a0)
0001AE48 6A00 FBFC                  		bpl.w	Obj7A_Delete
0001AE4C 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AE52 6000                       		bra.s	loc_18C6C
0001AE54                            ; ===========================================================================
0001AE54                            
0001AE54                            loc_18C56:
0001AE54 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001AE5A 6E00                       		bgt.s	loc_18C6C
0001AE5C 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001AE62 6D00                       		blt.s	loc_18C6C
0001AE64 117C 0007 001C             		move.b	#7,$1C(a0)
0001AE6A                            
0001AE6A                            loc_18C6C:
0001AE6A 43F9 0001 9D80             		lea	(Ani_Eggman).l,a1
0001AE70 4EB9 0000 B9CA             		jsr	AnimateSprite
0001AE76                            
0001AE76                            loc_18C78:
0001AE76 2268 0034                  		movea.l	$34(a0),a1
0001AE7A 3169 0008 0008             		move.w	8(a1),8(a0)
0001AE80 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AE86 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AE8C 7003                       		moveq	#3,d0
0001AE8E C028 0022                  		and.b	$22(a0),d0
0001AE92 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AE98 8128 0001                  		or.b	d0,1(a0)
0001AE9C 4EF9 0000 E96A             		jmp	DisplaySprite
0001AEA2                            ; ===========================================================================
0001AEA2                            
0001AEA2                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001AEA2 2268 0034                  		movea.l	$34(a0),a1
0001AEA6 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AEAC 6600                       		bne.s	loc_18CB8
0001AEAE 4A28 0001                  		tst.b	1(a0)
0001AEB2 6A00 FB92                  		bpl.w	Obj7A_Delete
0001AEB6                            
0001AEB6                            loc_18CB8:
0001AEB6 217C 0001 9E98 0004        		move.l	#Map_BossItems,4(a0)
0001AEBE 317C 246C 0002             		move.w	#$246C,2(a0)
0001AEC4 117C 0003 001A             		move.b	#3,$1A(a0)
0001AECA 60AA                       		bra.s	loc_18C78
0001AECC                            ; ===========================================================================
0001AECC                            ; ---------------------------------------------------------------------------
0001AECC                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001AECC                            ; ---------------------------------------------------------------------------
0001AECC                            
0001AECC                            Obj7B:					; XREF: Obj_Index
0001AECC 7000                       		moveq	#0,d0
0001AECE 1028 0024                  		move.b	$24(a0),d0
0001AED2 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001AED6 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001AEDA 3028 0030                  		move.w	$30(a0),d0
0001AEDE 0240 FF80                  		andi.w	#$FF80,d0
0001AEE2 3238 F700                  		move.w	($FFFFF700).w,d1
0001AEE6 0441 0080                  		subi.w	#$80,d1
0001AEEA 0241 FF80                  		andi.w	#$FF80,d1
0001AEEE 9041                       		sub.w	d1,d0
0001AEF0 6B00 FB54                  		bmi.w	Obj7A_Delete
0001AEF4 0C40 0280                  		cmpi.w	#$280,d0
0001AEF8 6300                       		bls.s	Obj7B_NoDel
0001AEFA                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
0001AEFA                            	;	beq.s	Obj7B_Delete		; if it's zero, don't remember object
0001AEFA                            	;	movea.w	d0,a2	; load address into a2
0001AEFA                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001AEFA                            
0001AEFA                            Obj7B_Delete:
0001AEFA 4EF9 0000 E9BA             		jmp	DeleteObject	; and delete object
0001AF00                            
0001AF00                            Obj7B_NoDel:
0001AF00 4EF9 0000 E96A             		jmp	DisplaySprite
0001AF06                            ; ===========================================================================
0001AF06 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001AF08 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001AF0A 0000                       		dc.w loc_18DC6-Obj7B_Index
0001AF0C 0000                       		dc.w loc_18EAA-Obj7B_Index
0001AF0E 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001AF10 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001AF12                            ; ===========================================================================
0001AF12                            
0001AF12                            Obj7B_Main:				; XREF: Obj7B_Index
0001AF12 217C 0001 3366 0004        		move.l	#Map_obj5Ea,4(a0)
0001AF1A 317C 0518 0002             		move.w	#$518,2(a0)
0001AF20 117C 0001 001A             		move.b	#1,$1A(a0)
0001AF26 0028 0004 0001             		ori.b	#4,1(a0)
0001AF2C 117C 0004 0018             		move.b	#4,$18(a0)
0001AF32 117C 008B 0020             		move.b	#$8B,$20(a0)
0001AF38 117C 000C 0019             		move.b	#$C,$19(a0)
0001AF3E 2268 003C                  		movea.l	$3C(a0),a1
0001AF42 3169 0008 0030             		move.w	8(a1),$30(a0)
0001AF48 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001AF4E 08E8 0000 0022             		bset	#0,$22(a0)
0001AF54 3028 0008                  		move.w	8(a0),d0
0001AF58 B069 0008                  		cmp.w	8(a1),d0
0001AF5C 6E00                       		bgt.s	loc_18D68
0001AF5E 08A8 0000 0022             		bclr	#0,$22(a0)
0001AF64 117C 0002 003A             		move.b	#2,$3A(a0)
0001AF6A                            
0001AF6A                            loc_18D68:
0001AF6A 5428 0024                  		addq.b	#2,$24(a0)
0001AF6E                            
0001AF6E                            Obj7B_Fall:				; XREF: Obj7B_Index
0001AF6E 4EB9 0000 E930             		jsr	ObjectFall
0001AF74 2268 003C                  		movea.l	$3C(a0),a1
0001AF78 45F9 0000 0000             		lea	(word_19018).l,a2
0001AF7E 7000                       		moveq	#0,d0
0001AF80 1029 001A                  		move.b	$1A(a1),d0
0001AF84 3228 0008                  		move.w	8(a0),d1
0001AF88 9268 0030                  		sub.w	$30(a0),d1
0001AF8C 6400                       		bcc.s	loc_18D8E
0001AF8E 5440                       		addq.w	#2,d0
0001AF90                            
0001AF90                            loc_18D8E:
0001AF90 D040                       		add.w	d0,d0
0001AF92 3228 0034                  		move.w	$34(a0),d1
0001AF96 D272 0000                  		add.w	(a2,d0.w),d1
0001AF9A B268 000C                  		cmp.w	$C(a0),d1
0001AF9E 6E00                       		bgt.s	locret_18DC4
0001AFA0 2268 003C                  		movea.l	$3C(a0),a1
0001AFA4 7202                       		moveq	#2,d1
0001AFA6 0828 0000 0022             		btst	#0,$22(a0)
0001AFAC 6700                       		beq.s	loc_18DAE
0001AFAE 7200                       		moveq	#0,d1
0001AFB0                            
0001AFB0                            loc_18DAE:
0001AFB0 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001AFB6 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001AFBC 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001AFC2 6000 0000                  		bra.w	loc_18FA2
0001AFC6                            ; ===========================================================================
0001AFC6                            
0001AFC6                            locret_18DC4:
0001AFC6 4E75                       		rts	
0001AFC8                            ; ===========================================================================
0001AFC8                            
0001AFC8                            loc_18DC6:				; XREF: Obj7B_Index
0001AFC8 2268 003C                  		movea.l	$3C(a0),a1
0001AFCC 7000                       		moveq	#0,d0
0001AFCE 1028 003A                  		move.b	$3A(a0),d0
0001AFD2 9029 003A                  		sub.b	$3A(a1),d0
0001AFD6 6700                       		beq.s	loc_18E2A
0001AFD8 6400                       		bcc.s	loc_18DDA
0001AFDA 4400                       		neg.b	d0
0001AFDC                            
0001AFDC                            loc_18DDA:
0001AFDC 323C F7E8                  		move.w	#-$818,d1
0001AFE0 343C FEEC                  		move.w	#-$114,d2
0001AFE4 0C00 0001                  		cmpi.b	#1,d0
0001AFE8 6700                       		beq.s	loc_18E00
0001AFEA 323C F6A0                  		move.w	#-$960,d1
0001AFEE 343C FF0C                  		move.w	#-$F4,d2
0001AFF2 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001AFF8 6D00                       		blt.s	loc_18E00
0001AFFA 323C F5E0                  		move.w	#-$A20,d1
0001AFFE 343C FF80                  		move.w	#-$80,d2
0001B002                            
0001B002                            loc_18E00:
0001B002 3141 0012                  		move.w	d1,$12(a0)
0001B006 3142 0010                  		move.w	d2,$10(a0)
0001B00A 3028 0008                  		move.w	8(a0),d0
0001B00E 9068 0030                  		sub.w	$30(a0),d0
0001B012 6400                       		bcc.s	loc_18E16
0001B014 4468 0010                  		neg.w	$10(a0)
0001B018                            
0001B018                            loc_18E16:
0001B018 117C 0001 001A             		move.b	#1,$1A(a0)
0001B01E 317C 0020 0028             		move.w	#$20,$28(a0)
0001B024 5428 0024                  		addq.b	#2,$24(a0)
0001B028 6000 0000                  		bra.w	loc_18EAA
0001B02C                            ; ===========================================================================
0001B02C                            
0001B02C                            loc_18E2A:				; XREF: loc_18DC6
0001B02C 45F9 0000 0000             		lea	(word_19018).l,a2
0001B032 7000                       		moveq	#0,d0
0001B034 1029 001A                  		move.b	$1A(a1),d0
0001B038 343C 0028                  		move.w	#$28,d2
0001B03C 3228 0008                  		move.w	8(a0),d1
0001B040 9268 0030                  		sub.w	$30(a0),d1
0001B044 6400                       		bcc.s	loc_18E48
0001B046 4442                       		neg.w	d2
0001B048 5440                       		addq.w	#2,d0
0001B04A                            
0001B04A                            loc_18E48:
0001B04A D040                       		add.w	d0,d0
0001B04C 3228 0034                  		move.w	$34(a0),d1
0001B050 D272 0000                  		add.w	(a2,d0.w),d1
0001B054 3141 000C                  		move.w	d1,$C(a0)
0001B058 D468 0030                  		add.w	$30(a0),d2
0001B05C 3142 0008                  		move.w	d2,8(a0)
0001B060 4268 000E                  		clr.w	$E(a0)
0001B064 4268 000A                  		clr.w	$A(a0)
0001B068 5368 0028                  		subq.w	#1,$28(a0)
0001B06C 6600                       		bne.s	loc_18E7A
0001B06E 317C 0020 0028             		move.w	#$20,$28(a0)
0001B074 117C 0008 0024             		move.b	#8,$24(a0)
0001B07A 4E75                       		rts	
0001B07C                            ; ===========================================================================
0001B07C                            
0001B07C                            loc_18E7A:
0001B07C 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001B082 6600                       		bne.s	loc_18E88
0001B084 117C 0005 001F             		move.b	#5,$1F(a0)
0001B08A                            
0001B08A                            loc_18E88:
0001B08A 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001B090 6600                       		bne.s	loc_18E96
0001B092 117C 0002 001F             		move.b	#2,$1F(a0)
0001B098                            
0001B098                            loc_18E96:
0001B098 5328 001E                  		subq.b	#1,$1E(a0)
0001B09C 6E00                       		bgt.s	locret_18EA8
0001B09E 0868 0000 001A             		bchg	#0,$1A(a0)
0001B0A4 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001B0AA                            
0001B0AA                            locret_18EA8:
0001B0AA 4E75                       		rts	
0001B0AC                            ; ===========================================================================
0001B0AC                            
0001B0AC                            loc_18EAA:				; XREF: Obj7B_Index
0001B0AC 43F8 D040                  		lea	($FFFFD040).w,a1
0001B0B0 707A                       		moveq	#$7A,d0
0001B0B2 7240                       		moveq	#$40,d1
0001B0B4 743E                       		moveq	#$3E,d2
0001B0B6                            
0001B0B6                            loc_18EB4:
0001B0B6 B011                       		cmp.b	(a1),d0
0001B0B8 6700                       		beq.s	loc_18EC0
0001B0BA D2C1                       		adda.w	d1,a1
0001B0BC 51CA FFF8                  		dbf	d2,loc_18EB4
0001B0C0                            
0001B0C0 6000                       		bra.s	loc_18F38
0001B0C2                            ; ===========================================================================
0001B0C2                            
0001B0C2                            loc_18EC0:
0001B0C2 3029 0008                  		move.w	8(a1),d0
0001B0C6 3229 000C                  		move.w	$C(a1),d1
0001B0CA 3428 0008                  		move.w	8(a0),d2
0001B0CE 3628 000C                  		move.w	$C(a0),d3
0001B0D2 45FA 0000                  		lea	byte_19022(pc),a2
0001B0D6 47FA 0000                  		lea	byte_19026(pc),a3
0001B0DA 181A                       		move.b	(a2)+,d4
0001B0DC 4884                       		ext.w	d4
0001B0DE D044                       		add.w	d4,d0
0001B0E0 181B                       		move.b	(a3)+,d4
0001B0E2 4884                       		ext.w	d4
0001B0E4 D444                       		add.w	d4,d2
0001B0E6 B440                       		cmp.w	d0,d2
0001B0E8 6500                       		bcs.s	loc_18F38
0001B0EA 181A                       		move.b	(a2)+,d4
0001B0EC 4884                       		ext.w	d4
0001B0EE D044                       		add.w	d4,d0
0001B0F0 181B                       		move.b	(a3)+,d4
0001B0F2 4884                       		ext.w	d4
0001B0F4 D444                       		add.w	d4,d2
0001B0F6 B042                       		cmp.w	d2,d0
0001B0F8 6500                       		bcs.s	loc_18F38
0001B0FA 181A                       		move.b	(a2)+,d4
0001B0FC 4884                       		ext.w	d4
0001B0FE D244                       		add.w	d4,d1
0001B100 181B                       		move.b	(a3)+,d4
0001B102 4884                       		ext.w	d4
0001B104 D644                       		add.w	d4,d3
0001B106 B641                       		cmp.w	d1,d3
0001B108 6500                       		bcs.s	loc_18F38
0001B10A 181A                       		move.b	(a2)+,d4
0001B10C 4884                       		ext.w	d4
0001B10E D244                       		add.w	d4,d1
0001B110 181B                       		move.b	(a3)+,d4
0001B112 4884                       		ext.w	d4
0001B114 D644                       		add.w	d4,d3
0001B116 B243                       		cmp.w	d3,d1
0001B118 6500                       		bcs.s	loc_18F38
0001B11A 5428 0024                  		addq.b	#2,$24(a0)
0001B11E 4268 0028                  		clr.w	$28(a0)
0001B122 4229 0020                  		clr.b	$20(a1)
0001B126 5329 0021                  		subq.b	#1,$21(a1)
0001B12A 6600                       		bne.s	loc_18F38
0001B12C 08E9 0007 0022             		bset	#7,$22(a1)
0001B132 4268 0010                  		clr.w	$10(a0)
0001B136 4268 0012                  		clr.w	$12(a0)
0001B13A                            
0001B13A                            loc_18F38:
0001B13A 4A68 0012                  		tst.w	$12(a0)
0001B13E 6A00                       		bpl.s	loc_18F5C
0001B140 4EB9 0000 E930             		jsr	ObjectFall
0001B146 3028 0034                  		move.w	$34(a0),d0
0001B14A 0440 002F                  		subi.w	#$2F,d0
0001B14E B068 000C                  		cmp.w	$C(a0),d0
0001B152 6E00                       		bgt.s	loc_18F58
0001B154 4EB9 0000 E930             		jsr	ObjectFall
0001B15A                            
0001B15A                            loc_18F58:
0001B15A 6000 FF20                  		bra.w	loc_18E7A
0001B15E                            ; ===========================================================================
0001B15E                            
0001B15E                            loc_18F5C:
0001B15E 4EB9 0000 E930             		jsr	ObjectFall
0001B164 2268 003C                  		movea.l	$3C(a0),a1
0001B168 45F9 0000 0000             		lea	(word_19018).l,a2
0001B16E 7000                       		moveq	#0,d0
0001B170 1029 001A                  		move.b	$1A(a1),d0
0001B174 3228 0008                  		move.w	8(a0),d1
0001B178 9268 0030                  		sub.w	$30(a0),d1
0001B17C 6400                       		bcc.s	loc_18F7E
0001B17E 5440                       		addq.w	#2,d0
0001B180                            
0001B180                            loc_18F7E:
0001B180 D040                       		add.w	d0,d0
0001B182 3228 0034                  		move.w	$34(a0),d1
0001B186 D272 0000                  		add.w	(a2,d0.w),d1
0001B18A B268 000C                  		cmp.w	$C(a0),d1
0001B18E 6ECA                       		bgt.s	loc_18F58
0001B190 2268 003C                  		movea.l	$3C(a0),a1
0001B194 7202                       		moveq	#2,d1
0001B196 4A68 0010                  		tst.w	$10(a0)
0001B19A 6B00                       		bmi.s	loc_18F9C
0001B19C 7200                       		moveq	#0,d1
0001B19E                            
0001B19E                            loc_18F9C:
0001B19E 317C 0000 0028             		move.w	#0,$28(a0)
0001B1A4                            
0001B1A4                            loc_18FA2:
0001B1A4 1341 003A                  		move.b	d1,$3A(a1)
0001B1A8 1141 003A                  		move.b	d1,$3A(a0)
0001B1AC B229 001A                  		cmp.b	$1A(a1),d1
0001B1B0 6700                       		beq.s	loc_19008
0001B1B2 08A9 0003 0022             		bclr	#3,$22(a1)
0001B1B8 6700                       		beq.s	loc_19008
0001B1BA 4229 0025                  		clr.b	$25(a1)
0001B1BE 137C 0002 0024             		move.b	#2,$24(a1)
0001B1C4 45F8 D000                  		lea	($FFFFD000).w,a2
0001B1C8 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001B1CE 446A 0012                  		neg.w	$12(a2)
0001B1D2 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001B1D8 6600                       		bne.s	loc_18FDC
0001B1DA E0EA 0012                  		asr	$12(a2)
0001B1DE                            
0001B1DE                            loc_18FDC:
0001B1DE 08EA 0001 0022             		bset	#1,$22(a2)
0001B1E4 08AA 0003 0022             		bclr	#3,$22(a2)
0001B1EA 422A 003C                  		clr.b	$3C(a2)
0001B1EE 2F08                       		move.l	a0,-(sp)
0001B1F0 41D2                       		lea	(a2),a0
0001B1F2 4EBA 9C1A                  		jsr	Obj01_ChkRoll
0001B1F6 205F                       		movea.l	(sp)+,a0
0001B1F8 157C 0002 0024             		move.b	#2,$24(a2)
0001B1FE 303C 00CC                  		move.w	#$CC,d0
0001B202 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001B208                            
0001B208                            loc_19008:
0001B208 4268 0010                  		clr.w	$10(a0)
0001B20C 4268 0012                  		clr.w	$12(a0)
0001B210 5428 0024                  		addq.b	#2,$24(a0)
0001B214 6000 FE66                  		bra.w	loc_18E7A
0001B218                            ; ===========================================================================
0001B218 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001B222                            		even
0001B222 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001B226                            		even
0001B226 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001B22A                            		even
0001B22A                            ; ===========================================================================
0001B22A                            
0001B22A                            Obj7B_Explode:				; XREF: Obj7B_Index
0001B22A 10BC 003F                  		move.b	#$3F,(a0)
0001B22E 4228 0024                  		clr.b	$24(a0)
0001B232 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001B238 6700                       		beq.s	Obj7B_MakeFrag
0001B23A 4E75                       		rts	
0001B23C                            ; ===========================================================================
0001B23C                            
0001B23C                            Obj7B_MakeFrag:
0001B23C 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001B242 7203                       		moveq	#3,d1
0001B244 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001B248                            
0001B248                            Obj7B_Loop:
0001B248 4EB9 0000 F0C0             		jsr	SingleObjLoad
0001B24E 6600                       		bne.s	loc_1909A
0001B250 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001B254 137C 000A 0024             		move.b	#$A,$24(a1)
0001B25A 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001B262 137C 0003 0018             		move.b	#3,$18(a1)
0001B268 337C 0518 0002             		move.w	#$518,2(a1)
0001B26E 3368 0008 0008             		move.w	8(a0),8(a1)
0001B274 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B27A 335A 0010                  		move.w	(a2)+,$10(a1)
0001B27E 335A 0012                  		move.w	(a2)+,$12(a1)
0001B282 137C 0098 0020             		move.b	#$98,$20(a1)
0001B288 0029 0004 0001             		ori.b	#4,1(a1)
0001B28E 08E9 0007 0001             		bset	#7,1(a1)
0001B294 137C 000C 0019             		move.b	#$C,$19(a1)
0001B29A                            
0001B29A                            loc_1909A:
0001B29A 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001B29E                            
0001B29E 4E75                       		rts	
0001B2A0                            ; ===========================================================================
0001B2A0 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001B2A4 FF60 FDC0                  		dc.w $FF60, $FDC0
0001B2A8 0100 FCC0                  		dc.w $100, $FCC0
0001B2AC 00A0 FDC0                  		dc.w $A0, $FDC0
0001B2B0                            ; ===========================================================================
0001B2B0                            
0001B2B0                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001B2B0 4EB9 0000 E950             		jsr	SpeedToPos
0001B2B6 3168 0008 0030             		move.w	8(a0),$30(a0)
0001B2BC 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001B2C2 0668 0018 0012             		addi.w	#$18,$12(a0)
0001B2C8 7004                       		moveq	#4,d0
0001B2CA C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001B2CE E448                       		lsr.w	#2,d0
0001B2D0 1140 001A                  		move.b	d0,$1A(a0)
0001B2D4 4A28 0001                  		tst.b	1(a0)
0001B2D8 6A00 F76C                  		bpl.w	Obj7A_Delete
0001B2DC 4E75                       		rts	
0001B2DE                            ; ===========================================================================
0001B2DE                            ; ---------------------------------------------------------------------------
0001B2DE                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001B2DE                            ; ---------------------------------------------------------------------------
0001B2DE                            Map_obj7B:
0001B2DE                            	include "_maps\obj7B.asm"
0001B2DE                            ; ---------------------------------------------------------------------------
0001B2DE                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001B2DE                            ; ---------------------------------------------------------------------------
0001B2DE 0000                       		dc.w byte_190E2-Map_obj7B
0001B2E0 0000                       		dc.w byte_190E8-Map_obj7B
0001B2E2 01                         byte_190E2:	dc.b 1
0001B2E3 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001B2E8 01                         byte_190E8:	dc.b 1
0001B2E9 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001B2EE                            		even
0001B2EE                            		even
0001B2EE                            
0001B2EE                            ; ===========================================================================
0001B2EE                            ; ---------------------------------------------------------------------------
0001B2EE                            ; Object 75 - Eggman (SYZ)
0001B2EE                            ; ---------------------------------------------------------------------------
0001B2EE                            
0001B2EE                            Obj75:					; XREF: Obj_Index
0001B2EE 7000                       		moveq	#0,d0
0001B2F0 1028 0024                  		move.b	$24(a0),d0
0001B2F4 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001B2F8 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001B2FC                            ; ===========================================================================
0001B2FC 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001B2FE 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001B300 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001B302 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001B304 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001B306                            
0001B306 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001B309 0401 05                    		dc.b 4,	1, 5
0001B30C 0607 05                    		dc.b 6,	7, 5
0001B30F 0800 05                    		dc.b 8,	0, 5
0001B312                            ; ===========================================================================
0001B312                            
0001B312                            Obj75_Main:				; XREF: Obj75_Index
0001B312 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001B318 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001B31E 3168 0008 0030             		move.w	8(a0),$30(a0)
0001B324 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B32A 117C 000F 0020             		move.b	#$F,$20(a0)
0001B330 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001B336 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001B33A 2248                       		movea.l	a0,a1
0001B33C 7203                       		moveq	#3,d1
0001B33E 6000                       		bra.s	Obj75_LoadBoss
0001B340                            ; ===========================================================================
0001B340                            
0001B340                            Obj75_Loop:
0001B340 4EB9 0000 F0D6             		jsr	SingleObjLoad2
0001B346 6600                       		bne.s	Obj75_ShipMain
0001B348 12BC 0075                  		move.b	#$75,(a1)
0001B34C 3368 0008 0008             		move.w	8(a0),8(a1)
0001B352 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B358                            
0001B358                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001B358 08A8 0000 0022             		bclr	#0,$22(a0)
0001B35E 4229 0025                  		clr.b	$25(a1)
0001B362 135A 0024                  		move.b	(a2)+,$24(a1)
0001B366 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B36A 135A 0018                  		move.b	(a2)+,$18(a1)
0001B36E 237C 0001 9DD0 0004        		move.l	#Map_Eggman,4(a1)
0001B376 337C 0400 0002             		move.w	#$400,2(a1)
0001B37C 137C 0004 0001             		move.b	#4,1(a1)
0001B382 137C 0020 0019             		move.b	#$20,$19(a1)
0001B388 2348 0034                  		move.l	a0,$34(a1)
0001B38C 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001B390                            
0001B390                            Obj75_ShipMain:				; XREF: Obj75_Index
0001B390 7000                       		moveq	#0,d0
0001B392 1028 0025                  		move.b	$25(a0),d0
0001B396 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001B39A 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001B39E 43F9 0001 9D80             		lea	(Ani_Eggman).l,a1
0001B3A4 4EB9 0000 B9CA             		jsr	AnimateSprite
0001B3AA 7003                       		moveq	#3,d0
0001B3AC C028 0022                  		and.b	$22(a0),d0
0001B3B0 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B3B6 8128 0001                  		or.b	d0,1(a0)
0001B3BA 4EF9 0000 E96A             		jmp	DisplaySprite
0001B3C0                            ; ===========================================================================
0001B3C0 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001B3C4 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001B3C8 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001B3CC                            ; ===========================================================================
0001B3CC                            
0001B3CC                            loc_191CC:				; XREF: Obj75_ShipIndex
0001B3CC 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B3D2 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001B3D8 6400                       		bcc.s	loc_191DE
0001B3DA 5428 0025                  		addq.b	#2,$25(a0)
0001B3DE                            
0001B3DE                            loc_191DE:
0001B3DE 1028 003F                  		move.b	$3F(a0),d0
0001B3E2 5428 003F                  		addq.b	#2,$3F(a0)
0001B3E6 4EB9 0000 29F6             		jsr	(CalcSine).l
0001B3EC E440                       		asr.w	#2,d0
0001B3EE 3140 0012                  		move.w	d0,$12(a0)
0001B3F2                            
0001B3F2                            loc_191F2:
0001B3F2 6100 E510                  		bsr.w	BossMove
0001B3F6 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001B3FC 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B402                            
0001B402                            loc_19202:
0001B402 3028 0008                  		move.w	8(a0),d0
0001B406 0440 2C00                  		subi.w	#$2C00,d0
0001B40A EA48                       		lsr.w	#5,d0
0001B40C 1140 0034                  		move.b	d0,$34(a0)
0001B410 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001B416 6400                       		bcc.s	locret_19256
0001B418 4A28 0022                  		tst.b	$22(a0)
0001B41C 6B00                       		bmi.s	loc_19258
0001B41E 4A28 0020                  		tst.b	$20(a0)
0001B422 6600                       		bne.s	locret_19256
0001B424 4A28 003E                  		tst.b	$3E(a0)
0001B428 6600                       		bne.s	loc_1923A
0001B42A 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B430 303C 00AC                  		move.w	#$AC,d0
0001B434 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B43A                            
0001B43A                            loc_1923A:
0001B43A 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001B43E 7000                       		moveq	#0,d0
0001B440 4A51                       		tst.w	(a1)
0001B442 6600                       		bne.s	loc_19248
0001B444 303C 0EEE                  		move.w	#$EEE,d0
0001B448                            
0001B448                            loc_19248:
0001B448 3280                       		move.w	d0,(a1)
0001B44A 5328 003E                  		subq.b	#1,$3E(a0)
0001B44E 6600                       		bne.s	locret_19256
0001B450 117C 000F 0020             		move.b	#$F,$20(a0)
0001B456                            
0001B456                            locret_19256:
0001B456 4E75                       		rts	
0001B458                            ; ===========================================================================
0001B458                            
0001B458                            loc_19258:				; XREF: loc_19202
0001B458 7064                       		moveq	#100,d0
0001B45A 6100 0000                  		bsr.w	AddPoints
0001B45E 117C 0006 0025             		move.b	#6,$25(a0)
0001B464 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B46A 4268 0010                  		clr.w	$10(a0)
0001B46E 4E75                       		rts	
0001B470                            ; ===========================================================================
0001B470                            
0001B470                            loc_19270:				; XREF: Obj75_ShipIndex
0001B470 3028 0030                  		move.w	$30(a0),d0
0001B474 317C 0140 0010             		move.w	#$140,$10(a0)
0001B47A 0828 0000 0022             		btst	#0,$22(a0)
0001B480 6600                       		bne.s	loc_1928E
0001B482 4468 0010                  		neg.w	$10(a0)
0001B486 0C40 2C08                  		cmpi.w	#$2C08,d0
0001B48A 6E00                       		bgt.s	loc_1929E
0001B48C 6000                       		bra.s	loc_19294
0001B48E                            ; ===========================================================================
0001B48E                            
0001B48E                            loc_1928E:
0001B48E 0C40 2D38                  		cmpi.w	#$2D38,d0
0001B492 6D00                       		blt.s	loc_1929E
0001B494                            
0001B494                            loc_19294:
0001B494 0868 0000 0022             		bchg	#0,$22(a0)
0001B49A 4228 003D                  		clr.b	$3D(a0)
0001B49E                            
0001B49E                            loc_1929E:
0001B49E 0440 2C10                  		subi.w	#$2C10,d0
0001B4A2 0240 001F                  		andi.w	#$1F,d0
0001B4A6 0440 001F                  		subi.w	#$1F,d0
0001B4AA 6A00                       		bpl.s	loc_192AE
0001B4AC 4440                       		neg.w	d0
0001B4AE                            
0001B4AE                            loc_192AE:
0001B4AE 5340                       		subq.w	#1,d0
0001B4B0 6E00                       		bgt.s	loc_192E8
0001B4B2 4A28 003D                  		tst.b	$3D(a0)
0001B4B6 6600                       		bne.s	loc_192E8
0001B4B8 3238 D008                  		move.w	($FFFFD008).w,d1
0001B4BC 0441 2C00                  		subi.w	#$2C00,d1
0001B4C0 EA41                       		asr.w	#5,d1
0001B4C2 B228 0034                  		cmp.b	$34(a0),d1
0001B4C6 6600                       		bne.s	loc_192E8
0001B4C8 7000                       		moveq	#0,d0
0001B4CA 1028 0034                  		move.b	$34(a0),d0
0001B4CE EB40                       		asl.w	#5,d0
0001B4D0 0640 2C10                  		addi.w	#$2C10,d0
0001B4D4 3140 0030                  		move.w	d0,$30(a0)
0001B4D8 6100 0000                  		bsr.w	Obj75_FindBlocks
0001B4DC 5428 0025                  		addq.b	#2,$25(a0)
0001B4E0 4268 0028                  		clr.w	$28(a0)
0001B4E4 4268 0010                  		clr.w	$10(a0)
0001B4E8                            
0001B4E8                            loc_192E8:
0001B4E8 6000 FEF4                  		bra.w	loc_191DE
0001B4EC                            ; ===========================================================================
0001B4EC                            
0001B4EC                            loc_192EC:				; XREF: Obj75_ShipIndex
0001B4EC 7000                       		moveq	#0,d0
0001B4EE 1028 0028                  		move.b	$28(a0),d0
0001B4F2 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001B4F6 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001B4FA                            ; ===========================================================================
0001B4FA 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001B4FC 0000                       		dc.w loc_19348-off_192FA
0001B4FE 0000                       		dc.w loc_1938E-off_192FA
0001B500 0000                       		dc.w loc_193D0-off_192FA
0001B502                            ; ===========================================================================
0001B502                            
0001B502                            loc_19302:				; XREF: off_192FA
0001B502 317C 0180 0012             		move.w	#$180,$12(a0)
0001B508 3028 0038                  		move.w	$38(a0),d0
0001B50C 0C40 0556                  		cmpi.w	#$556,d0
0001B510 6500                       		bcs.s	loc_19344
0001B512 317C 0556 0038             		move.w	#$556,$38(a0)
0001B518 4268 003C                  		clr.w	$3C(a0)
0001B51C 70FF                       		moveq	#-1,d0
0001B51E 3028 0036                  		move.w	$36(a0),d0
0001B522 6700                       		beq.s	loc_1933C
0001B524 2240                       		movea.l	d0,a1
0001B526 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B52C 117C 00FF 0029             		move.b	#-1,$29(a0)
0001B532 2348 0034                  		move.l	a0,$34(a1)
0001B536 317C 0032 003C             		move.w	#$32,$3C(a0)
0001B53C                            
0001B53C                            loc_1933C:
0001B53C 4268 0012                  		clr.w	$12(a0)
0001B540 5428 0028                  		addq.b	#2,$28(a0)
0001B544                            
0001B544                            loc_19344:
0001B544 6000 FEAC                  		bra.w	loc_191F2
0001B548                            ; ===========================================================================
0001B548                            
0001B548                            loc_19348:				; XREF: off_192FA
0001B548 5368 003C                  		subq.w	#1,$3C(a0)
0001B54C 6A00                       		bpl.s	loc_19366
0001B54E 5428 0028                  		addq.b	#2,$28(a0)
0001B552 317C F800 0012             		move.w	#-$800,$12(a0)
0001B558 4A68 0036                  		tst.w	$36(a0)
0001B55C 6600                       		bne.s	loc_19362
0001B55E E0E8 0012                  		asr	$12(a0)
0001B562                            
0001B562                            loc_19362:
0001B562 7000                       		moveq	#0,d0
0001B564 6000                       		bra.s	loc_1937C
0001B566                            ; ===========================================================================
0001B566                            
0001B566                            loc_19366:
0001B566 7000                       		moveq	#0,d0
0001B568 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001B56E 6E00                       		bgt.s	loc_1937C
0001B570 7002                       		moveq	#2,d0
0001B572 0828 0001 003D             		btst	#1,$3D(a0)
0001B578 6700                       		beq.s	loc_1937C
0001B57A 4440                       		neg.w	d0
0001B57C                            
0001B57C                            loc_1937C:
0001B57C D068 0038                  		add.w	$38(a0),d0
0001B580 3140 000C                  		move.w	d0,$C(a0)
0001B584 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B58A 6000 FE76                  		bra.w	loc_19202
0001B58E                            ; ===========================================================================
0001B58E                            
0001B58E                            loc_1938E:				; XREF: off_192FA
0001B58E 303C 04DA                  		move.w	#$4DA,d0
0001B592 4A68 0036                  		tst.w	$36(a0)
0001B596 6700                       		beq.s	loc_1939C
0001B598 0440 0018                  		subi.w	#$18,d0
0001B59C                            
0001B59C                            loc_1939C:
0001B59C B068 0038                  		cmp.w	$38(a0),d0
0001B5A0 6D00                       		blt.s	loc_193BE
0001B5A2 317C 0008 003C             		move.w	#8,$3C(a0)
0001B5A8 4A68 0036                  		tst.w	$36(a0)
0001B5AC 6700                       		beq.s	loc_193B4
0001B5AE 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001B5B4                            
0001B5B4                            loc_193B4:
0001B5B4 5428 0028                  		addq.b	#2,$28(a0)
0001B5B8 4268 0012                  		clr.w	$12(a0)
0001B5BC 6000                       		bra.s	loc_193CC
0001B5BE                            ; ===========================================================================
0001B5BE                            
0001B5BE                            loc_193BE:
0001B5BE 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001B5C4 6C00                       		bge.s	loc_193CC
0001B5C6 0668 000C 0012             		addi.w	#$C,$12(a0)
0001B5CC                            
0001B5CC                            loc_193CC:
0001B5CC 6000 FE24                  		bra.w	loc_191F2
0001B5D0                            ; ===========================================================================
0001B5D0                            
0001B5D0                            loc_193D0:				; XREF: off_192FA
0001B5D0 5368 003C                  		subq.w	#1,$3C(a0)
0001B5D4 6E00                       		bgt.s	loc_19406
0001B5D6 6B00                       		bmi.s	loc_193EE
0001B5D8 70FF                       		moveq	#-1,d0
0001B5DA 3028 0036                  		move.w	$36(a0),d0
0001B5DE 6700                       		beq.s	loc_193E8
0001B5E0 2240                       		movea.l	d0,a1
0001B5E2 137C 000A 0029             		move.b	#$A,$29(a1)
0001B5E8                            
0001B5E8                            loc_193E8:
0001B5E8 4268 0036                  		clr.w	$36(a0)
0001B5EC 6000                       		bra.s	loc_19406
0001B5EE                            ; ===========================================================================
0001B5EE                            
0001B5EE                            loc_193EE:
0001B5EE 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001B5F4 6600                       		bne.s	loc_19406
0001B5F6 4228 0029                  		clr.b	$29(a0)
0001B5FA 5528 0025                  		subq.b	#2,$25(a0)
0001B5FE 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001B604 6000                       		bra.s	loc_19446
0001B606                            ; ===========================================================================
0001B606                            
0001B606                            loc_19406:
0001B606 7001                       		moveq	#1,d0
0001B608 4A68 0036                  		tst.w	$36(a0)
0001B60C 6700                       		beq.s	loc_19410
0001B60E 7002                       		moveq	#2,d0
0001B610                            
0001B610                            loc_19410:
0001B610 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001B616 6700                       		beq.s	loc_19424
0001B618 6D00                       		blt.s	loc_1941C
0001B61A 4440                       		neg.w	d0
0001B61C                            
0001B61C                            loc_1941C:
0001B61C 4A68 0036                  		tst.w	$36(a0)
0001B620 D168 0038                  		add.w	d0,$38(a0)
0001B624                            
0001B624                            loc_19424:
0001B624 7000                       		moveq	#0,d0
0001B626 4A68 0036                  		tst.w	$36(a0)
0001B62A 6700                       		beq.s	loc_19438
0001B62C 7002                       		moveq	#2,d0
0001B62E 0828 0000 003D             		btst	#0,$3D(a0)
0001B634 6700                       		beq.s	loc_19438
0001B636 4440                       		neg.w	d0
0001B638                            
0001B638                            loc_19438:
0001B638 D068 0038                  		add.w	$38(a0),d0
0001B63C 3140 000C                  		move.w	d0,$C(a0)
0001B640 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B646                            
0001B646                            loc_19446:
0001B646 6000 FDBA                  		bra.w	loc_19202
0001B64A                            
0001B64A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B64A                            
0001B64A                            
0001B64A                            Obj75_FindBlocks:			; XREF: loc_192AE
0001B64A 4268 0036                  		clr.w	$36(a0)
0001B64E 43F8 D040                  		lea	($FFFFD040).w,a1
0001B652 703E                       		moveq	#$3E,d0
0001B654 7276                       		moveq	#$76,d1
0001B656 1428 0034                  		move.b	$34(a0),d2
0001B65A                            
0001B65A                            Obj75_FindLoop:
0001B65A B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001B65C 6600                       		bne.s	loc_1946A	; if not, branch
0001B65E B429 0028                  		cmp.b	$28(a1),d2
0001B662 6600                       		bne.s	loc_1946A
0001B664 3149 0036                  		move.w	a1,$36(a0)
0001B668 6000                       		bra.s	locret_19472
0001B66A                            ; ===========================================================================
0001B66A                            
0001B66A                            loc_1946A:
0001B66A 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001B66E 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001B672                            
0001B672                            locret_19472:
0001B672 4E75                       		rts	
0001B674                            ; End of function Obj75_FindBlocks
0001B674                            
0001B674                            ; ===========================================================================
0001B674                            
0001B674                            loc_19474:				; XREF: Obj75_ShipIndex
0001B674 5368 003C                  		subq.w	#1,$3C(a0)
0001B678 6B00                       		bmi.s	loc_1947E
0001B67A 6000 E23A                  		bra.w	BossDefeated
0001B67E                            ; ===========================================================================
0001B67E                            
0001B67E                            loc_1947E:
0001B67E 5428 0025                  		addq.b	#2,$25(a0)
0001B682 4268 0012                  		clr.w	$12(a0)
0001B686 08E8 0000 0022             		bset	#0,$22(a0)
0001B68C 08A8 0007 0022             		bclr	#7,$22(a0)
0001B692 4268 0010                  		clr.w	$10(a0)
0001B696 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001B69C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001B6A0 6600                       		bne.s	loc_194A8
0001B6A2 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001B6A8                            
0001B6A8                            loc_194A8:
0001B6A8 6000 FD58                  		bra.w	loc_19202
0001B6AC                            ; ===========================================================================
0001B6AC                            
0001B6AC                            loc_194AC:				; XREF: Obj75_ShipIndex
0001B6AC 5268 003C                  		addq.w	#1,$3C(a0)
0001B6B0 6700                       		beq.s	loc_194BC
0001B6B2 6A00                       		bpl.s	loc_194C2
0001B6B4 0668 0018 0012             		addi.w	#$18,$12(a0)
0001B6BA 6000 0000                  		bra.w	loc_194EE
0001B6BE                            ; ===========================================================================
0001B6BE                            
0001B6BE                            loc_194BC:
0001B6BE 4268 0012                  		clr.w	$12(a0)
0001B6C2 6000 0000                  		bra.w	loc_194EE
0001B6C6                            ; ===========================================================================
0001B6C6                            
0001B6C6                            loc_194C2:
0001B6C6 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001B6CC 6500                       		bcs.s	loc_194DA
0001B6CE 6700                       		beq.s	loc_194E0
0001B6D0 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001B6D6 6500 0000                  		bcs.w	loc_194EE
0001B6DA 5428 0025                  		addq.b	#2,$25(a0)
0001B6DE 6000                       		bra.s	loc_194EE
0001B6E0                            ; ===========================================================================
0001B6E0                            
0001B6E0                            loc_194DA:
0001B6E0 5168 0012                  		subq.w	#8,$12(a0)
0001B6E4 6000                       		bra.s	loc_194EE
0001B6E6                            ; ===========================================================================
0001B6E6                            
0001B6E6                            loc_194E0:
0001B6E6 4268 0012                  		clr.w	$12(a0)
0001B6EA 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeBossDefeated			
0001B750 303C 0085                  		move.w	#$85,d0
0001B754 4EB9 0000 121A             		jsr	(PlaySound).l	; play SYZ music
0001B75A                            
0001B75A                            loc_194EE:
0001B75A 6000 FC96                  		bra.w	loc_191F2
0001B75E                            ; ===========================================================================
0001B75E                            
0001B75E                            loc_194F2:				; XREF: Obj75_ShipIndex
0001B75E 317C 0400 0010             		move.w	#$400,$10(a0)
0001B764 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001B76A 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001B770 6400                       		bcc.s	loc_1950C
0001B772 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001B776 6000                       		bra.s	loc_19512
0001B778                            ; ===========================================================================
0001B778                            
0001B778                            loc_1950C:
0001B778 4A28 0001                  		tst.b	1(a0)
0001B77C 6A00                       		bpl.s	Obj75_ShipDelete
0001B77E                            
0001B77E                            loc_19512:
0001B77E 6100 E184                  		bsr.w	BossMove
0001B782 6000 FC5A                  		bra.w	loc_191DE
0001B786                            ; ===========================================================================
0001B786                            
0001B786                            Obj75_ShipDelete:
0001B786 4EF9 0000 E9BA             		jmp	DeleteObject
0001B78C                            ; ===========================================================================
0001B78C                            
0001B78C                            Obj75_FaceMain:				; XREF: Obj75_Index
0001B78C 7201                       		moveq	#1,d1
0001B78E 2268 0034                  		movea.l	$34(a0),a1
0001B792 7000                       		moveq	#0,d0
0001B794 1029 0025                  		move.b	$25(a1),d0
0001B798 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001B79C 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001B7A0 1141 001C                  		move.b	d1,$1C(a0)
0001B7A4 1010                       		move.b	(a0),d0
0001B7A6 B011                       		cmp.b	(a1),d0
0001B7A8 6600                       		bne.s	Obj75_FaceDelete
0001B7AA 6000                       		bra.s	loc_195BE
0001B7AC                            ; ===========================================================================
0001B7AC                            
0001B7AC                            Obj75_FaceDelete:
0001B7AC 4EF9 0000 E9BA             		jmp	DeleteObject
0001B7B2                            ; ===========================================================================
0001B7B2 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001B7B6 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001B7BA 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001B7BE                            ; ===========================================================================
0001B7BE                            
0001B7BE                            loc_19552:				; XREF: off_19546
0001B7BE 720A                       		moveq	#$A,d1
0001B7C0 4E75                       		rts	
0001B7C2                            ; ===========================================================================
0001B7C2                            
0001B7C2                            loc_19556:				; XREF: off_19546
0001B7C2 7206                       		moveq	#6,d1
0001B7C4 4E75                       		rts	
0001B7C6                            ; ===========================================================================
0001B7C6                            
0001B7C6                            loc_1955A:				; XREF: off_19546
0001B7C6 7000                       		moveq	#0,d0
0001B7C8 1029 0028                  		move.b	$28(a1),d0
0001B7CC 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001B7D0 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001B7D4                            ; ===========================================================================
0001B7D4 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001B7D8 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001B7DC                            ; ===========================================================================
0001B7DC                            
0001B7DC                            loc_19570:				; XREF: off_19568
0001B7DC 6000                       		bra.s	loc_19574
0001B7DE                            ; ===========================================================================
0001B7DE                            
0001B7DE                            loc_19572:				; XREF: off_19568
0001B7DE 7206                       		moveq	#6,d1
0001B7E0                            
0001B7E0                            loc_19574:				; XREF: off_19546
0001B7E0 4A29 0020                  		tst.b	$20(a1)
0001B7E4 6600                       		bne.s	loc_1957E
0001B7E6 7205                       		moveq	#5,d1
0001B7E8 4E75                       		rts	
0001B7EA                            ; ===========================================================================
0001B7EA                            
0001B7EA                            loc_1957E:
0001B7EA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001B7F0 6500                       		bcs.s	locret_19588
0001B7F2 7204                       		moveq	#4,d1
0001B7F4                            
0001B7F4                            locret_19588:
0001B7F4 4E75                       		rts	
0001B7F6                            ; ===========================================================================
0001B7F6                            
0001B7F6                            Obj75_FlameMain:			; XREF: Obj75_Index
0001B7F6 117C 0007 001C             		move.b	#7,$1C(a0)
0001B7FC 2268 0034                  		movea.l	$34(a0),a1
0001B800 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B806 6600                       		bne.s	loc_195AA
0001B808 117C 000B 001C             		move.b	#$B,$1C(a0)
0001B80E 4A28 0001                  		tst.b	1(a0)
0001B812 6A00                       		bpl.s	Obj75_FlameDelete
0001B814 6000                       		bra.s	loc_195B6
0001B816                            ; ===========================================================================
0001B816                            
0001B816                            loc_195AA:
0001B816 4A69 0010                  		tst.w	$10(a1)
0001B81A 6700                       		beq.s	loc_195B6
0001B81C 117C 0008 001C             		move.b	#8,$1C(a0)
0001B822                            
0001B822                            loc_195B6:
0001B822 6000                       		bra.s	loc_195BE
0001B824                            ; ===========================================================================
0001B824                            
0001B824                            Obj75_FlameDelete:
0001B824 4EF9 0000 E9BA             		jmp	DeleteObject
0001B82A                            ; ===========================================================================
0001B82A                            
0001B82A                            loc_195BE:
0001B82A 43F9 0001 9D80             		lea	(Ani_Eggman).l,a1
0001B830 4EB9 0000 B9CA             		jsr	AnimateSprite
0001B836 2268 0034                  		movea.l	$34(a0),a1
0001B83A 3169 0008 0008             		move.w	8(a1),8(a0)
0001B840 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B846                            
0001B846                            loc_195DA:
0001B846 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001B84C 7003                       		moveq	#3,d0
0001B84E C028 0022                  		and.b	$22(a0),d0
0001B852 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B858 8128 0001                  		or.b	d0,1(a0)
0001B85C 4EF9 0000 E96A             		jmp	DisplaySprite
0001B862                            ; ===========================================================================
0001B862                            
0001B862                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001B862 217C 0001 9E98 0004        		move.l	#Map_BossItems,4(a0)
0001B86A 317C 246C 0002             		move.w	#$246C,2(a0)
0001B870 117C 0005 001A             		move.b	#5,$1A(a0)
0001B876 2268 0034                  		movea.l	$34(a0),a1
0001B87A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B880 6600                       		bne.s	loc_1961C
0001B882 4A28 0001                  		tst.b	1(a0)
0001B886 6A00                       		bpl.s	Obj75_SpikeDelete
0001B888                            
0001B888                            loc_1961C:
0001B888 3169 0008 0008             		move.w	8(a1),8(a0)
0001B88E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B894 3028 003C                  		move.w	$3C(a0),d0
0001B898 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001B89E 6600                       		bne.s	loc_19652
0001B8A0 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001B8A6 6700                       		beq.s	loc_1964C
0001B8A8 4A29 0028                  		tst.b	$28(a1)
0001B8AC 6600                       		bne.s	loc_19658
0001B8AE 0C40 0094                  		cmpi.w	#$94,d0
0001B8B2 6C00                       		bge.s	loc_19658
0001B8B4 5E40                       		addq.w	#7,d0
0001B8B6 6000                       		bra.s	loc_19658
0001B8B8                            ; ===========================================================================
0001B8B8                            
0001B8B8                            loc_1964C:
0001B8B8 4A69 003C                  		tst.w	$3C(a1)
0001B8BC 6A00                       		bpl.s	loc_19658
0001B8BE                            
0001B8BE                            loc_19652:
0001B8BE 4A40                       		tst.w	d0
0001B8C0 6F00                       		ble.s	loc_19658
0001B8C2 5B40                       		subq.w	#5,d0
0001B8C4                            
0001B8C4                            loc_19658:
0001B8C4 3140 003C                  		move.w	d0,$3C(a0)
0001B8C8 E440                       		asr.w	#2,d0
0001B8CA D168 000C                  		add.w	d0,$C(a0)
0001B8CE 117C 0008 0019             		move.b	#8,$19(a0)
0001B8D4 117C 000C 0016             		move.b	#$C,$16(a0)
0001B8DA 4228 0020                  		clr.b	$20(a0)
0001B8DE 2268 0034                  		movea.l	$34(a0),a1
0001B8E2 4A29 0020                  		tst.b	$20(a1)
0001B8E6 6700                       		beq.s	loc_19688
0001B8E8 4A29 0029                  		tst.b	$29(a1)
0001B8EC 6600                       		bne.s	loc_19688
0001B8EE 117C 0084 0020             		move.b	#$84,$20(a0)
0001B8F4                            
0001B8F4                            loc_19688:
0001B8F4 6000 FF50                  		bra.w	loc_195DA
0001B8F8                            ; ===========================================================================
0001B8F8                            
0001B8F8                            Obj75_SpikeDelete:
0001B8F8 4EF9 0000 E9BA             		jmp	DeleteObject
0001B8FE                            ; ===========================================================================
0001B8FE                            ; ---------------------------------------------------------------------------
0001B8FE                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001B8FE                            ; ---------------------------------------------------------------------------
0001B8FE                            
0001B8FE                            Obj76:					; XREF: Obj_Index
0001B8FE 7000                       		moveq	#0,d0
0001B900 1028 0024                  		move.b	$24(a0),d0
0001B904 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001B908 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001B90C                            ; ===========================================================================
0001B90C 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001B90E 0000                       		dc.w Obj76_Action-Obj76_Index
0001B910 0000                       		dc.w loc_19762-Obj76_Index
0001B912                            ; ===========================================================================
0001B912                            
0001B912                            Obj76_Main:				; XREF: Obj76_Index
0001B912 7800                       		moveq	#0,d4
0001B914 3A3C 2C10                  		move.w	#$2C10,d5
0001B918 7C09                       		moveq	#9,d6
0001B91A 43D0                       		lea	(a0),a1
0001B91C 6000                       		bra.s	Obj76_MakeBlock
0001B91E                            ; ===========================================================================
0001B91E                            
0001B91E                            Obj76_Loop:
0001B91E 4EB9 0000 F0C0             		jsr	SingleObjLoad
0001B924 6600                       		bne.s	Obj76_ExitLoop
0001B926                            
0001B926                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001B926 12BC 0076                  		move.b	#$76,(a1)
0001B92A 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001B932 337C 4000 0002             		move.w	#$4000,2(a1)
0001B938 137C 0004 0001             		move.b	#4,1(a1)
0001B93E 137C 0010 0019             		move.b	#$10,$19(a1)
0001B944 137C 0010 0016             		move.b	#$10,$16(a1)
0001B94A 137C 0003 0018             		move.b	#3,$18(a1)
0001B950 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001B954 337C 0582 000C             		move.w	#$582,$C(a1)
0001B95A 3344 0028                  		move.w	d4,$28(a1)
0001B95E 0644 0101                  		addi.w	#$101,d4
0001B962 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001B966 5429 0024                  		addq.b	#2,$24(a1)
0001B96A 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001B96E                            
0001B96E                            Obj76_ExitLoop:
0001B96E 4E75                       		rts	
0001B970                            ; ===========================================================================
0001B970                            
0001B970                            Obj76_Action:				; XREF: Obj76_Index
0001B970 1028 0029                  		move.b	$29(a0),d0
0001B974 B028 0028                  		cmp.b	$28(a0),d0
0001B978 6700                       		beq.s	Obj76_Solid
0001B97A 4A00                       		tst.b	d0
0001B97C 6B00                       		bmi.s	loc_19718
0001B97E                            
0001B97E                            loc_19712:
0001B97E 6100 0000                  		bsr.w	Obj76_Break
0001B982 6000                       		bra.s	Obj76_Display
0001B984                            ; ===========================================================================
0001B984                            
0001B984                            loc_19718:
0001B984 2268 0034                  		movea.l	$34(a0),a1
0001B988 4A29 0021                  		tst.b	$21(a1)
0001B98C 67F0                       		beq.s	loc_19712
0001B98E 3169 0008 0008             		move.w	8(a1),8(a0)
0001B994 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B99A 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001B9A0 B2C8                       		cmpa.w	a0,a1
0001B9A2 6500                       		bcs.s	Obj76_Display
0001B9A4 3029 0012                  		move.w	$12(a1),d0
0001B9A8 48C0                       		ext.l	d0
0001B9AA E080                       		asr.l	#8,d0
0001B9AC D168 000C                  		add.w	d0,$C(a0)
0001B9B0 6000                       		bra.s	Obj76_Display
0001B9B2                            ; ===========================================================================
0001B9B2                            
0001B9B2                            Obj76_Solid:				; XREF: Obj76_Action
0001B9B2 323C 001B                  		move.w	#$1B,d1
0001B9B6 343C 0010                  		move.w	#$10,d2
0001B9BA 363C 0011                  		move.w	#$11,d3
0001B9BE 3828 0008                  		move.w	8(a0),d4
0001B9C2 4EB9 0001 12D8             		jsr	SolidObject
0001B9C8                            
0001B9C8                            Obj76_Display:				; XREF: Obj76_Action
0001B9C8 4EF9 0000 E96A             		jmp	DisplaySprite
0001B9CE                            ; ===========================================================================
0001B9CE                            
0001B9CE                            loc_19762:				; XREF: Obj76_Index
0001B9CE 4A28 0001                  		tst.b	1(a0)
0001B9D2 6A00                       		bpl.s	Obj76_Delete
0001B9D4 4EB9 0000 E930             		jsr	ObjectFall
0001B9DA 4EF9 0000 E96A             		jmp	DisplaySprite
0001B9E0                            ; ===========================================================================
0001B9E0                            
0001B9E0                            Obj76_Delete:
0001B9E0 4EF9 0000 E9BA             		jmp	DeleteObject
0001B9E6                            
0001B9E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B9E6                            
0001B9E6                            
0001B9E6                            Obj76_Break:				; XREF: Obj76_Action
0001B9E6 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001B9EA 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001B9EE 7801                       		moveq	#1,d4
0001B9F0 7203                       		moveq	#3,d1
0001B9F2 7438                       		moveq	#$38,d2
0001B9F4 5428 0024                  		addq.b	#2,$24(a0)
0001B9F8 117C 0008 0019             		move.b	#8,$19(a0)
0001B9FE 117C 0008 0016             		move.b	#8,$16(a0)
0001BA04 43D0                       		lea	(a0),a1
0001BA06 6000                       		bra.s	Obj76_MakeFrag
0001BA08                            ; ===========================================================================
0001BA08                            
0001BA08                            Obj76_LoopFrag:
0001BA08 4EB9 0000 F0D6             		jsr	SingleObjLoad2
0001BA0E 6600                       		bne.s	loc_197D4
0001BA10                            
0001BA10                            Obj76_MakeFrag:
0001BA10 45D0                       		lea	(a0),a2
0001BA12 47D1                       		lea	(a1),a3
0001BA14 7603                       		moveq	#3,d3
0001BA16                            
0001BA16                            loc_197AA:
0001BA16 26DA                       		move.l	(a2)+,(a3)+
0001BA18 26DA                       		move.l	(a2)+,(a3)+
0001BA1A 26DA                       		move.l	(a2)+,(a3)+
0001BA1C 26DA                       		move.l	(a2)+,(a3)+
0001BA1E 51CB FFF6                  		dbf	d3,loc_197AA
0001BA22                            
0001BA22 335C 0010                  		move.w	(a4)+,$10(a1)
0001BA26 335C 0012                  		move.w	(a4)+,$12(a1)
0001BA2A 361D                       		move.w	(a5)+,d3
0001BA2C D769 0008                  		add.w	d3,8(a1)
0001BA30 361D                       		move.w	(a5)+,d3
0001BA32 D769 000C                  		add.w	d3,$C(a1)
0001BA36 1344 001A                  		move.b	d4,$1A(a1)
0001BA3A 5244                       		addq.w	#1,d4
0001BA3C 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001BA40                            
0001BA40                            loc_197D4:
0001BA40 303C 00CB                  		move.w	#$CB,d0
0001BA44 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play smashing sound
0001BA4A                            ; End of function Obj76_Break
0001BA4A                            
0001BA4A                            ; ===========================================================================
0001BA4A FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001BA4E 0180 FE00                  		dc.w $180, $FE00
0001BA52 FF00 FF00                  		dc.w $FF00, $FF00
0001BA56 0100 FF00                  		dc.w $100, $FF00
0001BA5A FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001BA5E 0010 0000                  		dc.w $10, 0
0001BA62 0000 0010                  		dc.w 0,	$10
0001BA66 0010 0010                  		dc.w $10, $10
0001BA6A                            ; ---------------------------------------------------------------------------
0001BA6A                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001BA6A                            ; ---------------------------------------------------------------------------
0001BA6A                            Map_obj76:
0001BA6A                            	include "_maps\obj76.asm"
0001BA6A                            ; ---------------------------------------------------------------------------
0001BA6A                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001BA6A                            ; ---------------------------------------------------------------------------
0001BA6A 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001BA6E 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001BA72 0000                       		dc.w byte_19826-Map_obj76
0001BA74 02                         byte_19808:	dc.b 2
0001BA75 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001BA7A 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001BA7F 00                         		dc.b 0
0001BA80 01                         byte_19814:	dc.b 1
0001BA81 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001BA86 01                         byte_1981A:	dc.b 1
0001BA87 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001BA8C 01                         byte_19820:	dc.b 1
0001BA8D F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001BA92 01                         byte_19826:	dc.b 1
0001BA93 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001BA98                            		even
0001BA98                            		even
0001BA98                            
0001BA98                            ; ===========================================================================
0001BA98                            
0001BA98                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001BA98 4EF9 0000 E9BA             		jmp	DeleteObject
0001BA9E                            ; ===========================================================================
0001BA9E                            ; ---------------------------------------------------------------------------
0001BA9E                            ; Object 82 - Eggman (SBZ2)
0001BA9E                            ; ---------------------------------------------------------------------------
0001BA9E                            
0001BA9E                            Obj82:					; XREF: Obj_Index
0001BA9E 7000                       		moveq	#0,d0
0001BAA0 1028 0024                  		move.b	$24(a0),d0
0001BAA4 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001BAA8 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001BAAC                            ; ===========================================================================
0001BAAC 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001BAAE 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001BAB0 0000                       		dc.w Obj82_Switch-Obj82_Index
0001BAB2                            
0001BAB2 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001BAB5 0400 03                    		dc.b 4,	0, 3
0001BAB8                            ; ===========================================================================
0001BAB8                            
0001BAB8                            Obj82_Main:				; XREF: Obj82_Index
0001BAB8 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001BABC 317C 2160 0008             		move.w	#$2160,8(a0)
0001BAC2 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001BAC8 117C 000F 0020             		move.b	#$F,$20(a0)
0001BACE 117C 0010 0021             		move.b	#$10,$21(a0)
0001BAD4 08A8 0000 0022             		bclr	#0,$22(a0)
0001BADA 4228 0025                  		clr.b	$25(a0)
0001BADE 115A 0024                  		move.b	(a2)+,$24(a0)
0001BAE2 115A 001C                  		move.b	(a2)+,$1C(a0)
0001BAE6 115A 0018                  		move.b	(a2)+,$18(a0)
0001BAEA 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001BAF2 317C 0400 0002             		move.w	#$400,2(a0)
0001BAF8 117C 0004 0001             		move.b	#4,1(a0)
0001BAFE 08E8 0007 0001             		bset	#7,1(a0)
0001BB04 117C 0020 0019             		move.b	#$20,$19(a0)
0001BB0A 4EB9 0000 F0D6             		jsr	SingleObjLoad2
0001BB10 6600                       		bne.s	Obj82_Eggman
0001BB12 2348 0034                  		move.l	a0,$34(a1)
0001BB16 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001BB1A 337C 2130 0008             		move.w	#$2130,8(a1)
0001BB20 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001BB26 4228 0025                  		clr.b	$25(a0)
0001BB2A 135A 0024                  		move.b	(a2)+,$24(a1)
0001BB2E 135A 001C                  		move.b	(a2)+,$1C(a1)
0001BB32 135A 0018                  		move.b	(a2)+,$18(a1)
0001BB36 237C 0000 D1D4 0004        		move.l	#Map_obj32,4(a1)
0001BB3E 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001BB44 137C 0004 0001             		move.b	#4,1(a1)
0001BB4A 08E9 0007 0001             		bset	#7,1(a1)
0001BB50 137C 0010 0019             		move.b	#$10,$19(a1)
0001BB56 137C 0000 001A             		move.b	#0,$1A(a1)
0001BB5C                            
0001BB5C                            Obj82_Eggman:				; XREF: Obj82_Index
0001BB5C 7000                       		moveq	#0,d0
0001BB5E 1028 0025                  		move.b	$25(a0),d0
0001BB62 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001BB66 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001BB6A 43FA 0000                  		lea	Ani_obj82(pc),a1
0001BB6E 4EB9 0000 B9CA             		jsr	AnimateSprite
0001BB74 4EF9 0000 E96A             		jmp	DisplaySprite
0001BB7A                            ; ===========================================================================
0001BB7A 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001BB7C 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001BB7E 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001BB80 0000                       		dc.w loc_19934-Obj82_EggIndex
0001BB82                            ; ===========================================================================
0001BB82                            
0001BB82                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001BB82 3028 0008                  		move.w	8(a0),d0
0001BB86 9078 D008                  		sub.w	($FFFFD008).w,d0
0001BB8A 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001BB8E 6400                       		bcc.s	loc_19934	; if not, branch
0001BB90 5428 0025                  		addq.b	#2,$25(a0)
0001BB94 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001BB9A 117C 0001 001C             		move.b	#1,$1C(a0)
0001BBA0                            
0001BBA0                            loc_19934:				; XREF: Obj82_EggIndex
0001BBA0 4EF9 0000 E950             		jmp	SpeedToPos
0001BBA6                            ; ===========================================================================
0001BBA6                            
0001BBA6                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001BBA6 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001BBAA 6600                       		bne.s	loc_19954	; if time remains, branch
0001BBAC 5428 0025                  		addq.b	#2,$25(a0)
0001BBB0 117C 0002 001C             		move.b	#2,$1C(a0)
0001BBB6 5868 000C                  		addq.w	#4,$C(a0)
0001BBBA 317C 000F 003C             		move.w	#15,$3C(a0)
0001BBC0                            
0001BBC0                            loc_19954:
0001BBC0 60DE                       		bra.s	loc_19934
0001BBC2                            ; ===========================================================================
0001BBC2                            
0001BBC2                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001BBC2 5368 003C                  		subq.w	#1,$3C(a0)
0001BBC6 6E00                       		bgt.s	loc_199D0
0001BBC8 6600                       		bne.s	loc_1996A
0001BBCA 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001BBD0 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001BBD6                            
0001BBD6                            loc_1996A:
0001BBD6 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001BBDC 6E00                       		bgt.s	loc_19976
0001BBDE 4268 0010                  		clr.w	$10(a0)
0001BBE2                            
0001BBE2                            loc_19976:
0001BBE2 0668 0024 0012             		addi.w	#$24,$12(a0)
0001BBE8 4A68 0012                  		tst.w	$12(a0)
0001BBEC 6B00                       		bmi.s	Obj82_FindBlocks
0001BBEE 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001BBF4 6500                       		bcs.s	Obj82_FindBlocks
0001BBF6 317C 5357 0028             		move.w	#$5357,$28(a0)
0001BBFC 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001BC02 6500                       		bcs.s	Obj82_FindBlocks
0001BC04 317C 059B 000C             		move.w	#$59B,$C(a0)
0001BC0A 4268 0012                  		clr.w	$12(a0)
0001BC0E                            
0001BC0E                            Obj82_FindBlocks:
0001BC0E 3028 0010                  		move.w	$10(a0),d0
0001BC12 8068 0012                  		or.w	$12(a0),d0
0001BC16 6600                       		bne.s	loc_199D0
0001BC18 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001BC1C 703E                       		moveq	#$3E,d0
0001BC1E 7240                       		moveq	#$40,d1
0001BC20                            
0001BC20                            Obj82_FindLoop:	
0001BC20 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001BC22 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001BC26 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001BC2A                            
0001BC2A 6600                       		bne.s	loc_199D0
0001BC2C 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001BC32 5428 0025                  		addq.b	#2,$25(a0)
0001BC36 117C 0001 001C             		move.b	#1,$1C(a0)
0001BC3C                            
0001BC3C                            loc_199D0:
0001BC3C 6000 FF62                  		bra.w	loc_19934
0001BC40                            ; ===========================================================================
0001BC40                            
0001BC40                            Obj82_Switch:				; XREF: Obj82_Index
0001BC40 7000                       		moveq	#0,d0
0001BC42 1028 0025                  		move.b	$25(a0),d0
0001BC46 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001BC4A 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001BC4E                            ; ===========================================================================
0001BC4E 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001BC50 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001BC52                            ; ===========================================================================
0001BC52                            
0001BC52                            loc_199E6:				; XREF: Obj82_SwIndex
0001BC52 2268 0034                  		movea.l	$34(a0),a1
0001BC56 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001BC5C 6600                       		bne.s	Obj82_SwDisplay
0001BC5E 117C 0001 001A             		move.b	#1,$1A(a0)
0001BC64 5428 0025                  		addq.b	#2,$25(a0)
0001BC68                            
0001BC68                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001BC68 4EF9 0000 E96A             		jmp	DisplaySprite
0001BC6E                            ; ===========================================================================
0001BC6E                            Ani_obj82:
0001BC6E                            	include "_anim\obj82.asm"
0001BC6E                            ; ---------------------------------------------------------------------------
0001BC6E                            ; Animation script - Eggman (SBZ2)
0001BC6E                            ; ---------------------------------------------------------------------------
0001BC6E 0000                       		dc.w byte_19A10-Ani_obj82
0001BC70 0000                       		dc.w byte_19A14-Ani_obj82
0001BC72 0000                       		dc.w byte_19A18-Ani_obj82
0001BC74 0000                       		dc.w byte_19A20-Ani_obj82
0001BC76 0000                       		dc.w byte_19A24-Ani_obj82
0001BC78 0000                       		dc.w byte_19A2A-Ani_obj82
0001BC7A 0000                       		dc.w byte_19A30-Ani_obj82
0001BC7C 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001BC80 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001BC84 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001BC8C 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001BC90 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001BC96 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001BC9C 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001BCA0                            		even
0001BCA0                            		even
0001BCA0                            
0001BCA0                            ; ---------------------------------------------------------------------------
0001BCA0                            ; Sprite mappings - Eggman (SBZ2)
0001BCA0                            ; ---------------------------------------------------------------------------
0001BCA0                            Map_obj82:
0001BCA0                            	include "_maps\obj82.asm"
0001BCA0                            ; ---------------------------------------------------------------------------
0001BCA0                            ; Sprite mappings - Eggman (SBZ2)
0001BCA0                            ; ---------------------------------------------------------------------------
0001BCA0 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0001BCA4 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
0001BCA8 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
0001BCAC 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001BCB0 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0001BCB4 0000                       		dc.w byte_19B4F-Map_obj82
0001BCB6 03                         byte_19A4A:	dc.b 3
0001BCB7 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001BCBC E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BCC1 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BCC6 04                         byte_19A5A:	dc.b 4
0001BCC7 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001BCCC E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BCD1 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BCD6 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001BCDB 00                         		dc.b 0
0001BCDC 04                         byte_19A70:	dc.b 4
0001BCDD E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001BCE2 E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001BCE7 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001BCEC FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001BCF1 00                         		dc.b 0
0001BCF2 04                         byte_19A86:	dc.b 4
0001BCF3 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001BCF8 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001BCFD 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001BD02 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001BD07 00                         		dc.b 0
0001BD08 04                         byte_19A9C:	dc.b 4
0001BD09 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BD0E F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001BD13 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001BD18 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BD1D 00                         		dc.b 0
0001BD1E 04                         byte_19AB2:	dc.b 4
0001BD1F E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BD24 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BD29 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BD2E 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BD33 00                         		dc.b 0
0001BD34 07                         byte_19AC8:	dc.b 7
0001BD35 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BD3A E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BD3F 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001BD44 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001BD49 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BD4E F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001BD53 F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001BD58 05                         byte_19AEC:	dc.b 5
0001BD59 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BD5E F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001BD63 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001BD68 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001BD6D E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BD72 06                         byte_19B06:	dc.b 6
0001BD73 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001BD78 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001BD7D 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001BD82 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001BD87 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001BD8C E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001BD91 00                         		dc.b 0
0001BD92 08                         byte_19B26:	dc.b 8
0001BD93 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BD98 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BD9D E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BDA2 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BDA7 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001BDAC F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001BDB1 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001BDB6 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001BDBB 03                         byte_19B4F:	dc.b 3
0001BDBC EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
0001BDC1 F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001BDC6 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001BDCC 00                         		even
0001BDCC 00                         		even
0001BDCC                            
0001BDCC                            ; ===========================================================================
0001BDCC                            ; ---------------------------------------------------------------------------
0001BDCC                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001BDCC                            ; ---------------------------------------------------------------------------
0001BDCC                            
0001BDCC                            Obj83:					; XREF: Obj_Index
0001BDCC 7000                       		moveq	#0,d0
0001BDCE 1028 0024                  		move.b	$24(a0),d0
0001BDD2 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001BDD6 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001BDDA                            ; ===========================================================================
0001BDDA 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001BDDC 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001BDDE 0000                       		dc.w loc_19C36-Obj83_Index
0001BDE0 0000                       		dc.w loc_19C62-Obj83_Index
0001BDE2 0000                       		dc.w loc_19C72-Obj83_Index
0001BDE4 0000                       		dc.w loc_19C80-Obj83_Index
0001BDE6                            ; ===========================================================================
0001BDE6                            
0001BDE6                            Obj83_Main:				; XREF: Obj83_Index
0001BDE6 317C 2080 0008             		move.w	#$2080,8(a0)
0001BDEC 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001BDF2 117C 0080 0019             		move.b	#$80,$19(a0)
0001BDF8 117C 0010 0016             		move.b	#$10,$16(a0)
0001BDFE 117C 0004 0001             		move.b	#4,1(a0)
0001BE04 08E8 0007 0001             		bset	#7,1(a0)
0001BE0A 7800                       		moveq	#0,d4
0001BE0C 3A3C 2010                  		move.w	#$2010,d5
0001BE10 7C07                       		moveq	#7,d6
0001BE12 45E8 0030                  		lea	$30(a0),a2
0001BE16                            
0001BE16                            Obj83_MakeBlock:
0001BE16 4EB9 0000 F0C0             		jsr	SingleObjLoad
0001BE1C 6600                       		bne.s	Obj83_ExitMake
0001BE1E 34C9                       		move.w	a1,(a2)+
0001BE20 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001BE24 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001BE2C 337C 4518 0002             		move.w	#$4518,2(a1)
0001BE32 137C 0004 0001             		move.b	#4,1(a1)
0001BE38 137C 0010 0019             		move.b	#$10,$19(a1)
0001BE3E 137C 0010 0016             		move.b	#$10,$16(a1)
0001BE44 137C 0003 0018             		move.b	#3,$18(a1)
0001BE4A 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001BE4E 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001BE54 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001BE58 137C 0008 0024             		move.b	#8,$24(a1)
0001BE5E 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001BE62                            
0001BE62                            Obj83_ExitMake:
0001BE62 5428 0024                  		addq.b	#2,$24(a0)
0001BE66 4E75                       		rts	
0001BE68                            ; ===========================================================================
0001BE68                            
0001BE68                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001BE68 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001BE6E 6600                       		bne.s	Obj83_Solid	; if not, branch
0001BE70 4228 001A                  		clr.b	$1A(a0)
0001BE74 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001BE78                            
0001BE78                            Obj83_Solid:
0001BE78 7000                       		moveq	#0,d0
0001BE7A 1028 001A                  		move.b	$1A(a0),d0
0001BE7E 4400                       		neg.b	d0
0001BE80 4880                       		ext.w	d0
0001BE82 5040                       		addq.w	#8,d0
0001BE84 E940                       		asl.w	#4,d0
0001BE86 383C 2100                  		move.w	#$2100,d4
0001BE8A 9840                       		sub.w	d0,d4
0001BE8C 1140 0019                  		move.b	d0,$19(a0)
0001BE90 3144 0008                  		move.w	d4,8(a0)
0001BE94 720B                       		moveq	#$B,d1
0001BE96 D240                       		add.w	d0,d1
0001BE98 7410                       		moveq	#$10,d2
0001BE9A 7611                       		moveq	#$11,d3
0001BE9C 4EF9 0001 12D8             		jmp	SolidObject
0001BEA2                            ; ===========================================================================
0001BEA2                            
0001BEA2                            loc_19C36:				; XREF: Obj83_Index
0001BEA2 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001BEA8 6400                       		bcc.s	Obj83_Solid2
0001BEAA 70FF                       		moveq	#-1,d0
0001BEAC 1028 001A                  		move.b	$1A(a0),d0
0001BEB0 4880                       		ext.w	d0
0001BEB2 D040                       		add.w	d0,d0
0001BEB4 3030 0030                  		move.w	$30(a0,d0.w),d0
0001BEB8 2240                       		movea.l	d0,a1
0001BEBA 337C 474F 0028             		move.w	#$474F,$28(a1)
0001BEC0 5228 001A                  		addq.b	#1,$1A(a0)
0001BEC4 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001BECA 6700                       		beq.s	loc_19C62
0001BECC                            
0001BECC                            Obj83_Solid2:
0001BECC 60AA                       		bra.s	Obj83_Solid
0001BECE                            ; ===========================================================================
0001BECE                            
0001BECE                            loc_19C62:				; XREF: Obj83_Index
0001BECE 08A8 0003 0022             		bclr	#3,$22(a0)
0001BED4 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001BEDA 6000 FBBC                  		bra.w	loc_1982C
0001BEDE                            ; ===========================================================================
0001BEDE                            
0001BEDE                            loc_19C72:				; XREF: Obj83_Index
0001BEDE 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001BEE4 6700                       		beq.s	Obj83_Break	; if yes, branch
0001BEE6 4EF9 0000 E96A             		jmp	DisplaySprite
0001BEEC                            ; ===========================================================================
0001BEEC                            
0001BEEC                            loc_19C80:				; XREF: Obj83_Index
0001BEEC 4A28 0001                  		tst.b	1(a0)
0001BEF0 6A00 FBA6                  		bpl.w	loc_1982C
0001BEF4 4EB9 0000 E930             		jsr	ObjectFall
0001BEFA 4EF9 0000 E96A             		jmp	DisplaySprite
0001BF00                            ; ===========================================================================
0001BF00                            
0001BF00                            Obj83_Break:				; XREF: loc_19C72
0001BF00 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001BF04 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001BF08 7801                       		moveq	#1,d4
0001BF0A 7203                       		moveq	#3,d1
0001BF0C 7438                       		moveq	#$38,d2
0001BF0E 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001BF14 31FC 0200 F5D0             		move.w	#$200,(SonimeSST+sonime_facetimer).w
0001BF1A 5428 0024                  		addq.b	#2,$24(a0)
0001BF1E 117C 0008 0019             		move.b	#8,$19(a0)
0001BF24 117C 0008 0016             		move.b	#8,$16(a0)
0001BF2A 43D0                       		lea	(a0),a1
0001BF2C 6000                       		bra.s	Obj83_MakeFrag
0001BF2E                            ; ===========================================================================
0001BF2E                            
0001BF2E                            Obj83_LoopFrag:
0001BF2E 4EB9 0000 F0D6             		jsr	SingleObjLoad2
0001BF34 6600                       		bne.s	Obj83_BreakSnd
0001BF36                            
0001BF36                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001BF36 45D0                       		lea	(a0),a2
0001BF38 47D1                       		lea	(a1),a3
0001BF3A 7603                       		moveq	#3,d3
0001BF3C                            
0001BF3C                            loc_19CC4:
0001BF3C 26DA                       		move.l	(a2)+,(a3)+
0001BF3E 26DA                       		move.l	(a2)+,(a3)+
0001BF40 26DA                       		move.l	(a2)+,(a3)+
0001BF42 26DA                       		move.l	(a2)+,(a3)+
0001BF44 51CB FFF6                  		dbf	d3,loc_19CC4
0001BF48                            
0001BF48 335C 0012                  		move.w	(a4)+,$12(a1)
0001BF4C 361D                       		move.w	(a5)+,d3
0001BF4E D769 0008                  		add.w	d3,8(a1)
0001BF52 361D                       		move.w	(a5)+,d3
0001BF54 D769 000C                  		add.w	d3,$C(a1)
0001BF58 1344 001A                  		move.b	d4,$1A(a1)
0001BF5C 5244                       		addq.w	#1,d4
0001BF5E 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001BF62                            
0001BF62                            Obj83_BreakSnd:
0001BF62 303C 00CB                  		move.w	#$CB,d0
0001BF66 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play smashing sound
0001BF6C 4EF9 0000 E96A             		jmp	DisplaySprite
0001BF72                            ; ===========================================================================
0001BF72 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001BF76 0120 00C0                  		dc.w $120, $C0
0001BF7A FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001BF7E 0010 0000                  		dc.w $10, 0
0001BF82 0000 0010                  		dc.w 0,	$10
0001BF86 0010 0010                  		dc.w $10, $10
0001BF8A                            ; ---------------------------------------------------------------------------
0001BF8A                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001BF8A                            ; ---------------------------------------------------------------------------
0001BF8A                            Map_obj83:
0001BF8A                            	include "_maps\obj83.asm"
0001BF8A                            ; ---------------------------------------------------------------------------
0001BF8A                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001BF8A                            ; ---------------------------------------------------------------------------
0001BF8A 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001BF8E 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001BF92 0000                       		dc.w byte_19D46-Map_obj83
0001BF94 01                         byte_19D1C:	dc.b 1
0001BF95 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001BF9A 02                         byte_19D22:	dc.b 2
0001BF9B F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001BFA0 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001BFA5 00                         		dc.b 0
0001BFA6 02                         byte_19D2E:	dc.b 2
0001BFA7 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001BFAC F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001BFB1 00                         		dc.b 0
0001BFB2 02                         byte_19D3A:	dc.b 2
0001BFB3 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001BFB8 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001BFBD 00                         		dc.b 0
0001BFBE 02                         byte_19D46:	dc.b 2
0001BFBF F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001BFC4 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001BFCA 00                         		even
0001BFCA 00                         		even
0001BFCA                            
0001BFCA                            ; ===========================================================================
0001BFCA                            ; ---------------------------------------------------------------------------
0001BFCA                            ; Object 85 - Eggman (FZ)
0001BFCA                            ; ---------------------------------------------------------------------------
0001BFCA                            
0001BFCA                            Obj85_Delete:
0001BFCA 4EF9 0000 E9BA             		jmp	DeleteObject
0001BFD0                            ; ===========================================================================
0001BFD0                            
0001BFD0                            Obj85:					; XREF: Obj_Index
0001BFD0 7000                       		moveq	#0,d0
0001BFD2 1028 0024                  		move.b	$24(a0),d0
0001BFD6 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001BFDA 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001BFDE                            ; ===========================================================================
0001BFDE 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001BFE0 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001BFE2 0000                       		dc.w loc_1A38E-Obj85_Index
0001BFE4 0000                       		dc.w loc_1A346-Obj85_Index
0001BFE6 0000                       		dc.w loc_1A2C6-Obj85_Index
0001BFE8 0000                       		dc.w loc_1A3AC-Obj85_Index
0001BFEA 0000                       		dc.w loc_1A264-Obj85_Index
0001BFEC                            
0001BFEC 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001BFF2 0001 BCA0                  		dc.l Map_obj82		; mappings pointer
0001BFF6 25B0 0590 0300             		dc.w $25B0, $590, $300
0001BFFC 0000 0000                  		dc.l Map_obj84
0001C000 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001C006 0000 0000                  		dc.l Map_FZBoss
0001C00A 26E0 0596 0470             		dc.w $26E0, $596, $470
0001C010 0001 BCA0                  		dc.l Map_obj82
0001C014 26E0 0596 0400             		dc.w $26E0, $596, $400
0001C01A 0001 9DD0                  		dc.l Map_Eggman
0001C01E 26E0 0596 0400             		dc.w $26E0, $596, $400
0001C024 0001 9DD0                  		dc.l Map_Eggman
0001C028                            
0001C028 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001C02D 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001C032 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001C037 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001C03C 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001C041 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001C046                            ; ===========================================================================
0001C046                            
0001C046                            Obj85_Main:				; XREF: Obj85_Index
0001C046 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001C04A 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001C04E 2248                       		movea.l	a0,a1
0001C050 7205                       		moveq	#5,d1
0001C052 6000                       		bra.s	Obj85_LoadBoss
0001C054                            ; ===========================================================================
0001C054                            
0001C054                            Obj85_Loop:
0001C054 4EB9 0000 F0D6             		jsr	SingleObjLoad2
0001C05A 6600                       		bne.s	loc_19E20
0001C05C                            
0001C05C                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001C05C 12BC 0085                  		move.b	#$85,(a1)
0001C060 335A 0008                  		move.w	(a2)+,8(a1)
0001C064 335A 000C                  		move.w	(a2)+,$C(a1)
0001C068 335A 0002                  		move.w	(a2)+,2(a1)
0001C06C 235A 0004                  		move.l	(a2)+,4(a1)
0001C070 135B 0024                  		move.b	(a3)+,$24(a1)
0001C074 135B 001C                  		move.b	(a3)+,$1C(a1)
0001C078 135B 0018                  		move.b	(a3)+,$18(a1)
0001C07C 135B 0017                  		move.b	(a3)+,$17(a1)
0001C080 135B 0016                  		move.b	(a3)+,$16(a1)
0001C084 137C 0004 0001             		move.b	#4,1(a1)
0001C08A 08E8 0007 0001             		bset	#7,1(a0)
0001C090 2348 0034                  		move.l	a0,$34(a1)
0001C094 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001C098                            
0001C098                            loc_19E20:
0001C098 45E8 0036                  		lea	$36(a0),a2
0001C09C 4EB9 0000 F0C0             		jsr	SingleObjLoad
0001C0A2 6600                       		bne.s	loc_19E5A
0001C0A4 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001C0A8 3489                       		move.w	a1,(a2)
0001C0AA 2348 0034                  		move.l	a0,$34(a1)
0001C0AE 45E8 0038                  		lea	$38(a0),a2
0001C0B2 7400                       		moveq	#0,d2
0001C0B4 7203                       		moveq	#3,d1
0001C0B6                            
0001C0B6                            loc_19E3E:
0001C0B6 4EB9 0000 F0D6             		jsr	SingleObjLoad2
0001C0BC 6600                       		bne.s	loc_19E5A
0001C0BE 34C9                       		move.w	a1,(a2)+
0001C0C0 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001C0C4 2348 0034                  		move.l	a0,$34(a1)
0001C0C8 1342 0028                  		move.b	d2,$28(a1)
0001C0CC 5442                       		addq.w	#2,d2
0001C0CE 51C9 FFE6                  		dbf	d1,loc_19E3E
0001C0D2                            
0001C0D2                            loc_19E5A:
0001C0D2 317C 0000 0034             		move.w	#0,$34(a0)
0001C0D8 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001C0DE 317C FFFF 0030             		move.w	#-1,$30(a0)
0001C0E4                            
0001C0E4                            Obj85_Eggman:				; XREF: Obj85_Index
0001C0E4 7000                       		moveq	#0,d0
0001C0E6 1028 0034                  		move.b	$34(a0),d0
0001C0EA 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001C0EE 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001C0F2 4EF9 0000 E96A             		jmp	DisplaySprite
0001C0F8                            ; ===========================================================================
0001C0F8 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001C0FC 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001C100 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001C104 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001C108                            ; ===========================================================================
0001C108                            
0001C108                            loc_19E90:				; XREF: off_19E80
0001C108 4AB8 F680                  		tst.l	($FFFFF680).w
0001C10C 6600                       		bne.s	loc_19EA2
0001C10E 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001C114 6500                       		bcs.s	loc_19EA2
0001C116 5428 0034                  		addq.b	#2,$34(a0)
0001C11A                            
0001C11A                            loc_19EA2:
0001C11A 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001C11E 4E75                       		rts	
0001C120                            ; ===========================================================================
0001C120                            
0001C120                            loc_19EA8:				; XREF: off_19E80
0001C120 4A68 0030                  		tst.w	$30(a0)
0001C124 6A00                       		bpl.s	loc_19F10
0001C126 4268 0030                  		clr.w	$30(a0)
0001C12A 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001C130 0240 000C                  		andi.w	#$C,d0
0001C134 3200                       		move.w	d0,d1
0001C136 5441                       		addq.w	#2,d1
0001C138 4A80                       		tst.l	d0
0001C13A 6A00                       		bpl.s	loc_19EC6
0001C13C C141                       		exg	d1,d0
0001C13E                            
0001C13E                            loc_19EC6:
0001C13E 43FA 0000                  		lea	word_19FD6(pc),a1
0001C142 3031 0000                  		move.w	(a1,d0.w),d0
0001C146 3231 1000                  		move.w	(a1,d1.w),d1
0001C14A 3140 0030                  		move.w	d0,$30(a0)
0001C14E 74FF                       		moveq	#-1,d2
0001C150 3430 0038                  		move.w	$38(a0,d0.w),d2
0001C154 2242                       		movea.l	d2,a1
0001C156 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C15C 337C FFFF 0030             		move.w	#-1,$30(a1)
0001C162 3430 1038                  		move.w	$38(a0,d1.w),d2
0001C166 2242                       		movea.l	d2,a1
0001C168 137C 0001 0029             		move.b	#1,$29(a1)
0001C16E 337C 0000 0030             		move.w	#0,$30(a1)
0001C174 317C 0001 0032             		move.w	#1,$32(a0)
0001C17A 4228 0035                  		clr.b	$35(a0)
0001C17E 303C 00B7                  		move.w	#$B7,d0
0001C182 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001C188                            
0001C188                            loc_19F10:
0001C188 4A68 0032                  		tst.w	$32(a0)
0001C18C 6B00 0000                  		bmi.w	loc_19FA6
0001C190 08A8 0000 0022             		bclr	#0,$22(a0)
0001C196 3038 D008                  		move.w	($FFFFD008).w,d0
0001C19A 9068 0008                  		sub.w	8(a0),d0
0001C19E 6500                       		bcs.s	loc_19F2E
0001C1A0 08E8 0000 0022             		bset	#0,$22(a0)
0001C1A6                            
0001C1A6                            loc_19F2E:
0001C1A6 323C 002B                  		move.w	#$2B,d1
0001C1AA 343C 0014                  		move.w	#$14,d2
0001C1AE 363C 0014                  		move.w	#$14,d3
0001C1B2 3828 0008                  		move.w	8(a0),d4
0001C1B6 4EB9 0001 12D8             		jsr	SolidObject
0001C1BC 4A44                       		tst.w	d4
0001C1BE 6E00                       		bgt.s	loc_19F50
0001C1C0                            
0001C1C0                            loc_19F48:
0001C1C0 4A28 0035                  		tst.b	$35(a0)
0001C1C4 6600                       		bne.s	loc_19F88
0001C1C6 6000                       		bra.s	loc_19F96
0001C1C8                            ; ===========================================================================
0001C1C8                            
0001C1C8                            loc_19F50:
0001C1C8 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001C1CC 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001C1D2 66EC                       		bne.s	loc_19F48
0001C1D4 303C 0300                  		move.w	#$300,d0
0001C1D8 0828 0000 0022             		btst	#0,$22(a0)
0001C1DE 6600                       		bne.s	loc_19F6A
0001C1E0 4440                       		neg.w	d0
0001C1E2                            
0001C1E2                            loc_19F6A:
0001C1E2 31C0 D010                  		move.w	d0,($FFFFD010).w
0001C1E6 4A28 0035                  		tst.b	$35(a0)
0001C1EA 6600                       		bne.s	loc_19F88
0001C1EC 4A28 0021                  		tst.b	$21(a0)	;has the boss been defeated?
0001C1F0 6700                       		beq.s	loc_19F9C	;if so, don't let it be hit again.		
0001C1F2 5328 0021                  		subq.b	#1,$21(a0)
0001C1F6 117C 00FF 0035             		move.b	#255,$35(a0)
0001C1FC 303C 00AC                  		move.w	#$AC,d0
0001C200 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001C206                            
0001C206                            loc_19F88:
0001C206 5328 0035                  		subq.b	#1,$35(a0)
0001C20A 6700                       		beq.s	loc_19F96
0001C20C 117C 0003 001C             		move.b	#3,$1C(a0)
0001C212 6000                       		bra.s	loc_19F9C
0001C214                            ; ===========================================================================
0001C214                            
0001C214                            loc_19F96:
0001C214 117C 0001 001C             		move.b	#1,$1C(a0)
0001C21A                            
0001C21A                            loc_19F9C:
0001C21A 43FA FA52                  		lea	Ani_obj82(pc),a1
0001C21E 4EF9 0000 B9CA             		jmp	AnimateSprite
0001C224                            ; ===========================================================================
0001C224                            
0001C224                            loc_19FA6:
0001C224 4A28 0021                  		tst.b	$21(a0)
0001C228 6700                       		beq.s	loc_19FBC
0001C22A 5428 0034                  		addq.b	#2,$34(a0)
0001C22E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001C234 4268 0032                  		clr.w	$32(a0)
0001C238 4E75                       		rts	
0001C23A                            ; ===========================================================================
0001C23A                            
0001C23A                            loc_19FBC:
0001C23A 117C 0006 0034             		move.b	#6,$34(a0)
0001C240 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001C246 317C 053C 000C             		move.w	#$53C,$C(a0)
0001C24C 117C 0014 0016             		move.b	#$14,$16(a0)
0001C252 4E75                       		rts	
0001C254                            ; ===========================================================================
0001C254 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001C264                            ; ===========================================================================
0001C264                            
0001C264                            loc_19FE6:				; XREF: off_19E80
0001C264 70FF                       		moveq	#-1,d0
0001C266 3028 0036                  		move.w	$36(a0),d0
0001C26A 2240                       		movea.l	d0,a1
0001C26C 4A68 0030                  		tst.w	$30(a0)
0001C270 6A00                       		bpl.s	loc_1A000
0001C272 4268 0030                  		clr.w	$30(a0)
0001C276 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C27C 6100                       		bsr.s	loc_1A020
0001C27E                            
0001C27E                            loc_1A000:
0001C27E 700F                       		moveq	#$F,d0
0001C280 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001C284 6600                       		bne.s	loc_1A00A
0001C286 6100                       		bsr.s	loc_1A020
0001C288                            
0001C288                            loc_1A00A:
0001C288 4A68 0032                  		tst.w	$32(a0)
0001C28C 6700                       		beq.s	locret_1A01E
0001C28E 5528 0034                  		subq.b	#2,$34(a0)
0001C292 317C FFFF 0030             		move.w	#-1,$30(a0)
0001C298 4268 0032                  		clr.w	$32(a0)
0001C29C                            
0001C29C                            locret_1A01E:
0001C29C 4E75                       		rts	
0001C29E                            ; ===========================================================================
0001C29E                            
0001C29E                            loc_1A020:
0001C29E 303C 00B1                  		move.w	#$B1,d0
0001C2A2 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play electricity sound
0001C2A8                            ; ===========================================================================
0001C2A8                            
0001C2A8                            loc_1A02A:				; XREF: off_19E80
0001C2A8 117C 0030 0017             		move.b	#$30,$17(a0)
0001C2AE 08E8 0000 0022             		bset	#0,$22(a0)
0001C2B4 4EB9 0000 E950             		jsr	SpeedToPos
0001C2BA 117C 0006 001A             		move.b	#6,$1A(a0)
0001C2C0 0668 0010 0012             		addi.w	#$10,$12(a0)
0001C2C6 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001C2CC 6500                       		bcs.s	loc_1A070
0001C2CE 317C 059C 000C             		move.w	#$59C,$C(a0)
0001C2D4 5428 0034                  		addq.b	#2,$34(a0)
0001C2D8 117C 0020 0017             		move.b	#$20,$17(a0)
0001C2DE 317C 0100 0010             		move.w	#$100,$10(a0)
0001C2E4 317C FF00 0012             		move.w	#-$100,$12(a0)
0001C2EA 5438 F742                  		addq.b	#2,($FFFFF742).w
0001C2EE                            
0001C2EE                            loc_1A070:
0001C2EE 6000 0000                  		bra.w	loc_1A166
0001C2F2                            ; ===========================================================================
0001C2F2                            
0001C2F2                            loc_1A074:				; XREF: off_19E80
0001C2F2 08E8 0000 0022             		bset	#0,$22(a0)
0001C2F8 117C 0004 001C             		move.b	#4,$1C(a0)
0001C2FE 4EB9 0000 E950             		jsr	SpeedToPos
0001C304 0668 0010 0012             		addi.w	#$10,$12(a0)
0001C30A 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001C310 6500                       		bcs.s	loc_1A09A
0001C312 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001C318                            
0001C318                            loc_1A09A:
0001C318 317C 0400 0010             		move.w	#$400,$10(a0)
0001C31E 3028 0008                  		move.w	8(a0),d0
0001C322 9078 D008                  		sub.w	($FFFFD008).w,d0
0001C326 6A00                       		bpl.s	loc_1A0B4
0001C328 317C 0500 0010             		move.w	#$500,$10(a0)
0001C32E 6000 0000                  		bra.w	loc_1A0F2
0001C332                            ; ===========================================================================
0001C332                            
0001C332                            loc_1A0B4:
0001C332 0440 0070                  		subi.w	#$70,d0
0001C336 6500                       		bcs.s	loc_1A0F2
0001C338 0468 0100 0010             		subi.w	#$100,$10(a0)
0001C33E 5140                       		subq.w	#8,d0
0001C340 6500                       		bcs.s	loc_1A0F2
0001C342 0468 0100 0010             		subi.w	#$100,$10(a0)
0001C348 5140                       		subq.w	#8,d0
0001C34A 6500                       		bcs.s	loc_1A0F2
0001C34C 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C352 5140                       		subq.w	#8,d0
0001C354 6500                       		bcs.s	loc_1A0F2
0001C356 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C35C 5140                       		subq.w	#8,d0
0001C35E 6500                       		bcs.s	loc_1A0F2
0001C360 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C366 0440 0038                  		subi.w	#$38,d0
0001C36A 6500                       		bcs.s	loc_1A0F2
0001C36C 4268 0010                  		clr.w	$10(a0)
0001C370                            
0001C370                            loc_1A0F2:
0001C370 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001C376 6500                       		bcs.s	loc_1A110
0001C378 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001C37E 317C 0240 0010             		move.w	#$240,$10(a0)
0001C384 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001C38A 5428 0034                  		addq.b	#2,$34(a0)
0001C38E                            
0001C38E                            loc_1A110:
0001C38E 6000                       		bra.s	loc_1A15C
0001C390                            ; ===========================================================================
0001C390                            
0001C390                            loc_1A112:				; XREF: off_19E80
0001C390 4EB9 0000 E950             		jsr	SpeedToPos
0001C396 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001C39C 6500                       		bcs.s	loc_1A124
0001C39E 4268 0010                  		clr.w	$10(a0)
0001C3A2                            
0001C3A2                            loc_1A124:
0001C3A2 0668 0034 0012             		addi.w	#$34,$12(a0)
0001C3A8 4A68 0012                  		tst.w	$12(a0)
0001C3AC 6B00                       		bmi.s	loc_1A142
0001C3AE 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001C3B4 6500                       		bcs.s	loc_1A142
0001C3B6 317C 0592 000C             		move.w	#$592,$C(a0)
0001C3BC 4268 0012                  		clr.w	$12(a0)
0001C3C0                            
0001C3C0                            loc_1A142:
0001C3C0 3028 0010                  		move.w	$10(a0),d0
0001C3C4 8068 0012                  		or.w	$12(a0),d0
0001C3C8 6600                       		bne.s	loc_1A15C
0001C3CA 5428 0034                  		addq.b	#2,$34(a0)
0001C3CE 317C FE80 0012             		move.w	#-$180,$12(a0)
0001C3D4 117C 0001 0021             		move.b	#1,$21(a0)
0001C3DA                            
0001C3DA                            loc_1A15C:
0001C3DA 43FA F892                  		lea	Ani_obj82(pc),a1
0001C3DE 4EB9 0000 B9CA             		jsr	AnimateSprite
0001C3E4                            
0001C3E4                            loc_1A166:
0001C3E4 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001C3EA 6C00                       		bge.s	loc_1A172
0001C3EC 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001C3F0                            
0001C3F0                            loc_1A172:
0001C3F0 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001C3F6 6C00                       		bge.s	locret_1A190
0001C3F8 323C 001B                  		move.w	#$1B,d1
0001C3FC 343C 0070                  		move.w	#$70,d2
0001C400 363C 0071                  		move.w	#$71,d3
0001C404 3828 0008                  		move.w	8(a0),d4
0001C408 4EF9 0001 12D8             		jmp	SolidObject
0001C40E                            ; ===========================================================================
0001C40E                            
0001C40E                            locret_1A190:
0001C40E 4E75                       		rts	
0001C410                            ; ===========================================================================
0001C410                            
0001C410                            loc_1A192:				; XREF: off_19E80
0001C410 217C 0001 9DD0 0004        		move.l	#Map_Eggman,4(a0)
0001C418 317C 0400 0002             		move.w	#$400,2(a0)
0001C41E 117C 0000 001C             		move.b	#0,$1C(a0)
0001C424 08E8 0000 0022             		bset	#0,$22(a0)
0001C42A 4EB9 0000 E950             		jsr	SpeedToPos
0001C430 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001C436 6400                       		bcc.s	loc_1A1D0
0001C438 317C 0180 0010             		move.w	#$180,$10(a0)
0001C43E 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001C444 117C 000F 0020             		move.b	#$F,$20(a0)
0001C44A 5428 0034                  		addq.b	#2,$34(a0)
0001C44E                            
0001C44E                            loc_1A1D0:
0001C44E 6000 FF8A                  		bra.w	loc_1A15C
0001C452                            ; ===========================================================================
0001C452                            
0001C452                            loc_1A1D4:				; XREF: off_19E80
0001C452 08E8 0000 0022             		bset	#0,$22(a0)
0001C458 4EB9 0000 E950             		jsr	SpeedToPos
0001C45E 4A68 0030                  		tst.w	$30(a0)
0001C462 6600                       		bne.s	loc_1A1FC
0001C464 4A28 0020                  		tst.b	$20(a0)
0001C468 6600                       		bne.s	loc_1A216
0001C46A 317C 001E 0030             		move.w	#$1E,$30(a0)
0001C470 303C 00AC                  		move.w	#$AC,d0
0001C474 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001C47A                            
0001C47A                            loc_1A1FC:
0001C47A 5368 0030                  		subq.w	#1,$30(a0)
0001C47E 6600                       		bne.s	loc_1A216
0001C480 4A28 0022                  		tst.b	$22(a0)
0001C484 6A00                       		bpl.s	loc_1A210
0001C486 317C 0060 0012             		move.w	#$60,$12(a0)
0001C48C 6000                       		bra.s	loc_1A216
0001C48E                            ; ===========================================================================
0001C48E                            
0001C48E                            loc_1A210:
0001C48E 117C 000F 0020             		move.b	#$F,$20(a0)
0001C494                            
0001C494                            loc_1A216:
0001C494 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001C49A 6D00                       		blt.s	loc_1A23A
0001C49C 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001C4A2 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001C4A8 4278 D020                  		clr.w	($FFFFD020).w
0001C4AC 4A68 0012                  		tst.w	$12(a0)
0001C4B0 6A00                       		bpl.s	loc_1A248
0001C4B2 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001C4B8                            
0001C4B8                            loc_1A23A:
0001C4B8 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001C4BE 6D00                       		blt.s	loc_1A248
0001C4C0 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001C4C6                            
0001C4C6                            loc_1A248:
0001C4C6 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001C4CC 6500                       		bcs.s	loc_1A260
0001C4CE 4A28 0001                  		tst.b	1(a0)
0001C4D2 6B00                       		bmi.s	loc_1A260
0001C4D4 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001C4DA 6000 FAEE                  		bra.w	Obj85_Delete
0001C4DE                            ; ===========================================================================
0001C4DE                            
0001C4DE                            loc_1A260:
0001C4DE 6000 FEFA                  		bra.w	loc_1A15C
0001C4E2                            ; ===========================================================================
0001C4E2                            
0001C4E2                            loc_1A264:				; XREF: Obj85_Index
0001C4E2 2268 0034                  		movea.l	$34(a0),a1
0001C4E6 1011                       		move.b	(a1),d0
0001C4E8 B010                       		cmp.b	(a0),d0
0001C4EA 6600 FADE                  		bne.w	Obj85_Delete
0001C4EE 117C 0007 001C             		move.b	#7,$1C(a0)
0001C4F4 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C4FA 6C00                       		bge.s	loc_1A280
0001C4FC 6000                       		bra.s	loc_1A2A6
0001C4FE                            ; ===========================================================================
0001C4FE                            
0001C4FE                            loc_1A280:
0001C4FE 4A69 0010                  		tst.w	$10(a1)
0001C502 6700                       		beq.s	loc_1A28C
0001C504 117C 000B 001C             		move.b	#$B,$1C(a0)
0001C50A                            
0001C50A                            loc_1A28C:
0001C50A 43FA D874                  		lea	Ani_Eggman(pc),a1
0001C50E 4EB9 0000 B9CA             		jsr	AnimateSprite
0001C514                            
0001C514                            loc_1A296:
0001C514 2268 0034                  		movea.l	$34(a0),a1
0001C518 3169 0008 0008             		move.w	8(a1),8(a0)
0001C51E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C524                            
0001C524                            loc_1A2A6:
0001C524 2268 0034                  		movea.l	$34(a0),a1
0001C528 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001C52E 7003                       		moveq	#3,d0
0001C530 C028 0022                  		and.b	$22(a0),d0
0001C534 0228 00FC 0001             		andi.b	#-4,1(a0)
0001C53A 8128 0001                  		or.b	d0,1(a0)
0001C53E 4EF9 0000 E96A             		jmp	DisplaySprite
0001C544                            ; ===========================================================================
0001C544                            
0001C544                            loc_1A2C6:				; XREF: Obj85_Index
0001C544 2268 0034                  		movea.l	$34(a0),a1
0001C548 1011                       		move.b	(a1),d0
0001C54A B010                       		cmp.b	(a0),d0
0001C54C 6600 FA7C                  		bne.w	Obj85_Delete
0001C550 0CA9 0001 9DD0 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C558 6700                       		beq.s	loc_1A2E4
0001C55A 117C 000A 001A             		move.b	#$A,$1A(a0)
0001C560 60C2                       		bra.s	loc_1A2A6
0001C562                            ; ===========================================================================
0001C562                            
0001C562                            loc_1A2E4:
0001C562 117C 0001 001C             		move.b	#1,$1C(a0)
0001C568 4A29 0021                  		tst.b	$21(a1)
0001C56C 6F00                       		ble.s	loc_1A312
0001C56E 117C 0006 001C             		move.b	#6,$1C(a0)
0001C574 217C 0001 9DD0 0004        		move.l	#Map_Eggman,4(a0)
0001C57C 317C 0400 0002             		move.w	#$400,2(a0)
0001C582 43FA D7FC                  		lea	Ani_Eggman(pc),a1
0001C586 4EB9 0000 B9CA             		jsr	AnimateSprite
0001C58C 6000 FF86                  		bra.w	loc_1A296
0001C590                            ; ===========================================================================
0001C590                            
0001C590                            loc_1A312:
0001C590 4A28 0001                  		tst.b	1(a0)
0001C594 6A00 FA34                  		bpl.w	Obj85_Delete
0001C598 6100 D31C                  		bsr.w	BossDefeated
0001C59C 117C 0002 0018             		move.b	#2,$18(a0)
0001C5A2 117C 0000 001C             		move.b	#0,$1C(a0)
0001C5A8 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001C5B0 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001C5B6 43FA 0000                  		lea	Ani_obj85(pc),a1
0001C5BA 4EB9 0000 B9CA             		jsr	AnimateSprite
0001C5C0 6000 FF52                  		bra.w	loc_1A296
0001C5C4                            ; ===========================================================================
0001C5C4                            
0001C5C4                            loc_1A346:				; XREF: Obj85_Index
0001C5C4 08E8 0000 0022             		bset	#0,$22(a0)
0001C5CA 2268 0034                  		movea.l	$34(a0),a1
0001C5CE 0CA9 0001 9DD0 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C5D6 6700                       		beq.s	loc_1A35E
0001C5D8 6000 FF4A                  		bra.w	loc_1A2A6
0001C5DC                            ; ===========================================================================
0001C5DC                            
0001C5DC                            loc_1A35E:
0001C5DC 3169 0008 0008             		move.w	8(a1),8(a0)
0001C5E2 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C5E8 4A28 001E                  		tst.b	$1E(a0)
0001C5EC 6600                       		bne.s	loc_1A376
0001C5EE 117C 0014 001E             		move.b	#$14,$1E(a0)
0001C5F4                            
0001C5F4                            loc_1A376:
0001C5F4 5328 001E                  		subq.b	#1,$1E(a0)
0001C5F8 6E00                       		bgt.s	loc_1A38A
0001C5FA 5228 001A                  		addq.b	#1,$1A(a0)
0001C5FE 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001C604 6E00 F9C4                  		bgt.w	Obj85_Delete
0001C608                            
0001C608                            loc_1A38A:
0001C608 6000 FF0A                  		bra.w	loc_1A296
0001C60C                            ; ===========================================================================
0001C60C                            
0001C60C                            loc_1A38E:				; XREF: Obj85_Index
0001C60C 117C 000B 001A             		move.b	#$B,$1A(a0)
0001C612 3038 D008                  		move.w	($FFFFD008).w,d0
0001C616 9068 0008                  		sub.w	8(a0),d0
0001C61A 6500                       		bcs.s	loc_1A3A6
0001C61C 4A28 0001                  		tst.b	1(a0)
0001C620 6A00 F9A8                  		bpl.w	Obj85_Delete
0001C624                            
0001C624                            loc_1A3A6:
0001C624 4EF9 0000 E96A             		jmp	DisplaySprite
0001C62A                            ; ===========================================================================
0001C62A                            
0001C62A                            loc_1A3AC:				; XREF: Obj85_Index
0001C62A 117C 0000 001A             		move.b	#0,$1A(a0)
0001C630 08E8 0000 0022             		bset	#0,$22(a0)
0001C636 2268 0034                  		movea.l	$34(a0),a1
0001C63A 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C640 6600                       		bne.s	loc_1A3D0
0001C642 0CA9 0001 9DD0 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C64A 6700 F97E                  		beq.w	Obj85_Delete
0001C64E                            
0001C64E                            loc_1A3D0:
0001C64E 6000 FED4                  		bra.w	loc_1A2A6
0001C652                            ; ===========================================================================
0001C652                            Ani_obj85:
0001C652                            	include "_anim\obj85.asm"
0001C652                            ; ---------------------------------------------------------------------------
0001C652                            ; Animation script - Eggman (FZ)
0001C652                            ; ---------------------------------------------------------------------------
0001C652 0000                       		dc.w byte_1A3D6-Ani_obj85
0001C654 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001C658                            		even
0001C658                            		even
0001C658                            
0001C658                            Map_Eggman2:
0001C658                            	include "_maps\Eggman2.asm"
0001C658                            ; ---------------------------------------------------------------------------
0001C658                            ; Sprite mappings - Eggman (FZ)
0001C658                            ; ---------------------------------------------------------------------------
0001C658 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001C65A 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001C65C 06                         byte_1A3DE:	dc.b 6
0001C65D E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001C662 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001C667 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C66C FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C671 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C676 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C67B 06                         byte_1A3FD:	dc.b 6
0001C67C E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001C681 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001C686 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C68B FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C690 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C695 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C69A                            		even
0001C69A                            		even
0001C69A                            
0001C69A                            Map_FZBoss:
0001C69A                            	include "_maps\FZ boss.asm"
0001C69A                            ; ---------------------------------------------------------------------------
0001C69A                            ; Sprite mappings - boss (FZ)
0001C69A                            ; ---------------------------------------------------------------------------
0001C69A 0000                       		dc.w byte_1A422-Map_FZBoss
0001C69C 0000                       		dc.w byte_1A42D-Map_FZBoss
0001C69E 0000                       		dc.w byte_1A43D-Map_FZBoss
0001C6A0 02                         byte_1A422:	dc.b 2
0001C6A1 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001C6A6 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001C6AB 03                         byte_1A42D:	dc.b 3
0001C6AC 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001C6B1 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001C6B6 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001C6BB 02                         byte_1A43D:	dc.b 2
0001C6BC 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001C6C1 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001C6C6                            		even
0001C6C6                            		even
0001C6C6                            
0001C6C6                            ; ===========================================================================
0001C6C6                            
0001C6C6                            Obj84_Delete:
0001C6C6 4EF9 0000 E9BA             		jmp	DeleteObject
0001C6CC                            ; ===========================================================================
0001C6CC                            ; ---------------------------------------------------------------------------
0001C6CC                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001C6CC                            ; ---------------------------------------------------------------------------
0001C6CC                            
0001C6CC                            Obj84:					; XREF: Obj_Index
0001C6CC 7000                       		moveq	#0,d0
0001C6CE 1028 0024                  		move.b	$24(a0),d0
0001C6D2 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001C6D6 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001C6DA                            ; ===========================================================================
0001C6DA 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001C6DC 0000                       		dc.w loc_1A4CE-Obj84_Index
0001C6DE 0000                       		dc.w loc_1A57E-Obj84_Index
0001C6E0                            
0001C6E0 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001C6E4 2550 0620                  		dc.w $2550, $620
0001C6E8 2490 04C0                  		dc.w $2490, $4C0
0001C6EC 2510 04C0                  		dc.w $2510, $4C0
0001C6F0                            ; ===========================================================================
0001C6F0                            
0001C6F0                            Obj84_Main:				; XREF: Obj84_Index
0001C6F0 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001C6F4 7000                       		moveq	#0,d0
0001C6F6 1028 0028                  		move.b	$28(a0),d0
0001C6FA D040                       		add.w	d0,d0
0001C6FC D2C0                       		adda.w	d0,a1
0001C6FE 117C 0004 0001             		move.b	#4,1(a0)
0001C704 08E8 0007 0001             		bset	#7,1(a0)
0001C70A 08E8 0004 0001             		bset	#4,1(a0)
0001C710 317C 0300 0002             		move.w	#$300,2(a0)
0001C716 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001C71E 3159 0008                  		move.w	(a1)+,8(a0)
0001C722 3151 000C                  		move.w	(a1),$C(a0)
0001C726 3159 0038                  		move.w	(a1)+,$38(a0)
0001C72A 117C 0020 0016             		move.b	#$20,$16(a0)
0001C730 117C 0060 0017             		move.b	#$60,$17(a0)
0001C736 117C 0020 0019             		move.b	#$20,$19(a0)
0001C73C 117C 0060 0016             		move.b	#$60,$16(a0)
0001C742 117C 0003 0018             		move.b	#3,$18(a0)
0001C748 5428 0024                  		addq.b	#2,$24(a0)
0001C74C                            
0001C74C                            loc_1A4CE:				; XREF: Obj84_Index
0001C74C 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C752 6F00                       		ble.s	loc_1A4DC
0001C754 08E8 0001 0001             		bset	#1,1(a0)
0001C75A                            
0001C75A                            loc_1A4DC:
0001C75A 42A8 003C                  		clr.l	$3C(a0)
0001C75E 4A28 0029                  		tst.b	$29(a0)
0001C762 6700                       		beq.s	loc_1A4EA
0001C764 5428 0024                  		addq.b	#2,$24(a0)
0001C768                            
0001C768                            loc_1A4EA:
0001C768 2028 003C                  		move.l	$3C(a0),d0
0001C76C 2228 0038                  		move.l	$38(a0),d1
0001C770 D280                       		add.l	d0,d1
0001C772 4841                       		swap	d1
0001C774 3141 000C                  		move.w	d1,$C(a0)
0001C778 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001C77E 6600                       		bne.s	loc_1A524
0001C780 4A68 0030                  		tst.w	$30(a0)
0001C784 6A00                       		bpl.s	loc_1A524
0001C786 70F6                       		moveq	#-$A,d0
0001C788 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C78E 6F00                       		ble.s	loc_1A514
0001C790 700E                       		moveq	#$E,d0
0001C792                            
0001C792                            loc_1A514:
0001C792 D240                       		add.w	d0,d1
0001C794 2268 0034                  		movea.l	$34(a0),a1
0001C798 3341 000C                  		move.w	d1,$C(a1)
0001C79C 3368 0008 0008             		move.w	8(a0),8(a1)
0001C7A2                            
0001C7A2                            loc_1A524:
0001C7A2 323C 002B                  		move.w	#$2B,d1
0001C7A6 343C 0060                  		move.w	#$60,d2
0001C7AA 363C 0061                  		move.w	#$61,d3
0001C7AE 3828 0008                  		move.w	8(a0),d4
0001C7B2 4EB9 0001 12D8             		jsr	SolidObject
0001C7B8 7000                       		moveq	#0,d0
0001C7BA 3228 003C                  		move.w	$3C(a0),d1
0001C7BE 6A00                       		bpl.s	loc_1A550
0001C7C0 4441                       		neg.w	d1
0001C7C2 5141                       		subq.w	#8,d1
0001C7C4 6500                       		bcs.s	loc_1A55C
0001C7C6 5200                       		addq.b	#1,d0
0001C7C8 E841                       		asr.w	#4,d1
0001C7CA D041                       		add.w	d1,d0
0001C7CC 6000                       		bra.s	loc_1A55C
0001C7CE                            ; ===========================================================================
0001C7CE                            
0001C7CE                            loc_1A550:
0001C7CE 0441 0027                  		subi.w	#$27,d1
0001C7D2 6500                       		bcs.s	loc_1A55C
0001C7D4 5200                       		addq.b	#1,d0
0001C7D6 E841                       		asr.w	#4,d1
0001C7D8 D041                       		add.w	d1,d0
0001C7DA                            
0001C7DA                            loc_1A55C:
0001C7DA 1140 001A                  		move.b	d0,$1A(a0)
0001C7DE 3038 D008                  		move.w	($FFFFD008).w,d0
0001C7E2 9068 0008                  		sub.w	8(a0),d0
0001C7E6 6B00                       		bmi.s	loc_1A578
0001C7E8 0440 0140                  		subi.w	#$140,d0
0001C7EC 6B00                       		bmi.s	loc_1A578
0001C7EE 4A28 0001                  		tst.b	1(a0)
0001C7F2 6A00 FED2                  		bpl.w	Obj84_Delete
0001C7F6                            
0001C7F6                            loc_1A578:
0001C7F6 4EF9 0000 E96A             		jmp	DisplaySprite
0001C7FC                            ; ===========================================================================
0001C7FC                            
0001C7FC                            loc_1A57E:				; XREF: Obj84_Index
0001C7FC 7000                       		moveq	#0,d0
0001C7FE 1028 0028                  		move.b	$28(a0),d0
0001C802 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001C806 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001C80A 6000 FF5C                  		bra.w	loc_1A4EA
0001C80E                            ; ===========================================================================
0001C80E 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001C810 0000                       		dc.w loc_1A598-off_1A590
0001C812 0000                       		dc.w loc_1A604-off_1A590
0001C814 0000                       		dc.w loc_1A604-off_1A590
0001C816                            ; ===========================================================================
0001C816                            
0001C816                            loc_1A598:				; XREF: off_1A590
0001C816 4A28 0029                  		tst.b	$29(a0)
0001C81A 6600                       		bne.s	loc_1A5D4
0001C81C 2268 0034                  		movea.l	$34(a0),a1
0001C820 4A29 0021                  		tst.b	$21(a1)
0001C824 6600                       		bne.s	loc_1A5B4
0001C826 6100 D08E                  		bsr.w	BossDefeated
0001C82A 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001C832                            
0001C832                            loc_1A5B4:
0001C832 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001C83A 6400                       		bcc.s	locret_1A602
0001C83C 42A8 003C                  		clr.l	$3C(a0)
0001C840 2268 0034                  		movea.l	$34(a0),a1
0001C844 5369 0032                  		subq.w	#1,$32(a1)
0001C848 4269 0030                  		clr.w	$30(a1)
0001C84C 5528 0024                  		subq.b	#2,$24(a0)
0001C850 4E75                       		rts	
0001C852                            ; ===========================================================================
0001C852                            
0001C852                            loc_1A5D4:
0001C852 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001C858 6C00                       		bge.s	loc_1A5E4
0001C85A 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001C862                            
0001C862                            loc_1A5E4:
0001C862 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001C86A 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001C870 6E00                       		bgt.s	locret_1A602
0001C872 4268 003E                  		clr.w	$3E(a0)
0001C876 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001C87C 4228 0029                  		clr.b	$29(a0)
0001C880                            
0001C880                            locret_1A602:
0001C880 4E75                       		rts	
0001C882                            ; ===========================================================================
0001C882                            
0001C882                            loc_1A604:				; XREF: off_1A590
0001C882 08E8 0001 0001             		bset	#1,1(a0)
0001C888 4A28 0029                  		tst.b	$29(a0)
0001C88C 6600                       		bne.s	loc_1A646
0001C88E 2268 0034                  		movea.l	$34(a0),a1
0001C892 4A29 0021                  		tst.b	$21(a1)
0001C896 6600                       		bne.s	loc_1A626
0001C898 6100 D01C                  		bsr.w	BossDefeated
0001C89C 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001C8A4                            
0001C8A4                            loc_1A626:
0001C8A4 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001C8AC 6400                       		bcc.s	locret_1A674
0001C8AE 42A8 003C                  		clr.l	$3C(a0)
0001C8B2 2268 0034                  		movea.l	$34(a0),a1
0001C8B6 5369 0032                  		subq.w	#1,$32(a1)
0001C8BA 4269 0030                  		clr.w	$30(a1)
0001C8BE 5528 0024                  		subq.b	#2,$24(a0)
0001C8C2 4E75                       		rts	
0001C8C4                            ; ===========================================================================
0001C8C4                            
0001C8C4                            loc_1A646:
0001C8C4 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001C8CA 6D00                       		blt.s	loc_1A656
0001C8CC 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001C8D4                            
0001C8D4                            loc_1A656:
0001C8D4 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001C8DC 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001C8E2 6D00                       		blt.s	locret_1A674
0001C8E4 4268 003E                  		clr.w	$3E(a0)
0001C8E8 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001C8EE 4228 0029                  		clr.b	$29(a0)
0001C8F2                            
0001C8F2                            locret_1A674:
0001C8F2 4E75                       		rts	
0001C8F4                            ; ===========================================================================
0001C8F4                            ; ---------------------------------------------------------------------------
0001C8F4                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C8F4                            ; ---------------------------------------------------------------------------
0001C8F4                            Map_obj84:
0001C8F4                            	include "_maps\obj84.asm"
0001C8F4                            ; ---------------------------------------------------------------------------
0001C8F4                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C8F4                            ; ---------------------------------------------------------------------------
0001C8F4 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001C8F8 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001C8FC 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001C900 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C904 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C908 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001C90C 06                         byte_1A68E:	dc.b 6
0001C90D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C912 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C917 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C91C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C921 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C926 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C92B 08                         byte_1A6AD:	dc.b 8
0001C92C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C931 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C936 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C93B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C940 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C945 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C94A D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C94F D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C954 0A                         byte_1A6D6:	dc.b $A
0001C955 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C95A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C95F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C964 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C969 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C96E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C973 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C978 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C97D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C982 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C987 0C                         byte_1A709:	dc.b $C
0001C988 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C98D A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C992 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C997 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C99C B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C9A1 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C9A6 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C9AB D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C9B0 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C9B5 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C9BA 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C9BF 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C9C4 0D                         byte_1A746:	dc.b $D
0001C9C5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C9CA A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C9CF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C9D4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C9D9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C9DE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C9E3 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C9E8 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C9ED F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C9F2 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C9F7 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C9FC 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001CA01 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001CA06 0E                         byte_1A788:	dc.b $E
0001CA07 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001CA0C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001CA11 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001CA16 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001CA1B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001CA20 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001CA25 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001CA2A D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001CA2F F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001CA34 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001CA39 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001CA3E 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001CA43 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001CA48 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001CA4D 02                         byte_1A7CF:	dc.b 2
0001CA4E F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001CA53 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001CA58                            		even
0001CA58                            		even
0001CA58                            
0001CA58                            ; ===========================================================================
0001CA58                            ; ---------------------------------------------------------------------------
0001CA58                            ; Object 86 - energy balls (FZ)
0001CA58                            ; ---------------------------------------------------------------------------
0001CA58                            
0001CA58                            Obj86:					; XREF: Obj_Index
0001CA58 7000                       		moveq	#0,d0
0001CA5A 1028 0024                  		move.b	$24(a0),d0
0001CA5E 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001CA62 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001CA66                            ; ===========================================================================
0001CA66 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001CA68 0000                       		dc.w Obj86_Generator-Obj86_Index
0001CA6A 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001CA6C 0000                       		dc.w loc_1A962-Obj86_Index
0001CA6E 0000                       		dc.w loc_1A982-Obj86_Index
0001CA70                            ; ===========================================================================
0001CA70                            
0001CA70                            Obj86_Main:				; XREF: Obj86_Index
0001CA70 317C 2588 0008             		move.w	#$2588,8(a0)
0001CA76 317C 053C 000C             		move.w	#$53C,$C(a0)
0001CA7C 317C 0300 0002             		move.w	#$300,2(a0)
0001CA82 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001CA8A 117C 0000 001C             		move.b	#0,$1C(a0)
0001CA90 117C 0003 0018             		move.b	#3,$18(a0)
0001CA96 117C 0008 0017             		move.b	#8,$17(a0)
0001CA9C 117C 0008 0016             		move.b	#8,$16(a0)
0001CAA2 117C 0004 0001             		move.b	#4,1(a0)
0001CAA8 08E8 0007 0001             		bset	#7,1(a0)
0001CAAE 5428 0024                  		addq.b	#2,$24(a0)
0001CAB2                            
0001CAB2                            Obj86_Generator:			; XREF: Obj86_Index
0001CAB2 2268 0034                  		movea.l	$34(a0),a1
0001CAB6 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001CABC 6600                       		bne.s	loc_1A850
0001CABE 10BC 003F                  		move.b	#$3F,(a0)
0001CAC2 117C 0000 0024             		move.b	#0,$24(a0)
0001CAC8 4EF9 0000 E96A             		jmp	DisplaySprite
0001CACE                            ; ===========================================================================
0001CACE                            
0001CACE                            loc_1A850:
0001CACE 117C 0000 001C             		move.b	#0,$1C(a0)
0001CAD4 4A28 0029                  		tst.b	$29(a0)
0001CAD8 6700                       		beq.s	loc_1A86C
0001CADA 5428 0024                  		addq.b	#2,$24(a0)
0001CADE 117C 0001 001C             		move.b	#1,$1C(a0)
0001CAE4 117C 003E 0028             		move.b	#$3E,$28(a0)
0001CAEA                            
0001CAEA                            loc_1A86C:
0001CAEA 323C 0013                  		move.w	#$13,d1
0001CAEE 343C 0008                  		move.w	#8,d2
0001CAF2 363C 0011                  		move.w	#$11,d3
0001CAF6 3828 0008                  		move.w	8(a0),d4
0001CAFA 4EB9 0001 12D8             		jsr	SolidObject
0001CB00 3038 D008                  		move.w	($FFFFD008).w,d0
0001CB04 9068 0008                  		sub.w	8(a0),d0
0001CB08 6B00                       		bmi.s	loc_1A89A
0001CB0A 0440 0140                  		subi.w	#$140,d0
0001CB0E 6B00                       		bmi.s	loc_1A89A
0001CB10 4A28 0001                  		tst.b	1(a0)
0001CB14 6A00 FBB0                  		bpl.w	Obj84_Delete
0001CB18                            
0001CB18                            loc_1A89A:
0001CB18 43FA 0000                  		lea	Ani_obj86(pc),a1
0001CB1C 4EB9 0000 B9CA             		jsr	AnimateSprite
0001CB22 4EF9 0000 E96A             		jmp	DisplaySprite
0001CB28                            ; ===========================================================================
0001CB28                            
0001CB28                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001CB28 4A28 0029                  		tst.b	$29(a0)
0001CB2C 6700 0000                  		beq.w	loc_1A954
0001CB30 4228 0029                  		clr.b	$29(a0)
0001CB34 D068 0030                  		add.w	$30(a0),d0
0001CB38 0240 001E                  		andi.w	#$1E,d0
0001CB3C D4C0                       		adda.w	d0,a2
0001CB3E 5868 0030                  		addq.w	#4,$30(a0)
0001CB42 4268 0032                  		clr.w	$32(a0)
0001CB46 7403                       		moveq	#3,d2
0001CB48                            
0001CB48                            Obj86_Loop:
0001CB48 4EB9 0000 F0D6             		jsr	SingleObjLoad2
0001CB4E 6600 0000                  		bne.w	loc_1A954
0001CB52 12BC 0086                  		move.b	#$86,(a1)
0001CB56 3368 0008 0008             		move.w	8(a0),8(a1)
0001CB5C 337C 053C 000C             		move.w	#$53C,$C(a1)
0001CB62 137C 0008 0024             		move.b	#8,$24(a1)
0001CB68 337C 2300 0002             		move.w	#$2300,2(a1)
0001CB6E 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001CB76 137C 000C 0016             		move.b	#$C,$16(a1)
0001CB7C 137C 000C 0017             		move.b	#$C,$17(a1)
0001CB82 137C 0000 0020             		move.b	#0,$20(a1)
0001CB88 137C 0003 0018             		move.b	#3,$18(a1)
0001CB8E 337C 003E 0028             		move.w	#$3E,$28(a1)
0001CB94 137C 0004 0001             		move.b	#4,1(a1)
0001CB9A 08E9 0007 0001             		bset	#7,1(a1)
0001CBA0 2348 0034                  		move.l	a0,$34(a1)
0001CBA4 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001CBAA 3228 0032                  		move.w	$32(a0),d1
0001CBAE C3FC FFB1                  		muls.w	#-$4F,d1
0001CBB2 0641 2578                  		addi.w	#$2578,d1
0001CBB6 0240 001F                  		andi.w	#$1F,d0
0001CBBA 0440 0010                  		subi.w	#$10,d0
0001CBBE D041                       		add.w	d1,d0
0001CBC0 3340 0030                  		move.w	d0,$30(a1)
0001CBC4 5268 0032                  		addq.w	#1,$32(a0)
0001CBC8 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001CBCE 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001CBD2                            
0001CBD2                            loc_1A954:
0001CBD2 4A68 0032                  		tst.w	$32(a0)
0001CBD6 6600                       		bne.s	loc_1A95E
0001CBD8 5428 0024                  		addq.b	#2,$24(a0)
0001CBDC                            
0001CBDC                            loc_1A95E:
0001CBDC 6000 FF0C                  		bra.w	loc_1A86C
0001CBE0                            ; ===========================================================================
0001CBE0                            
0001CBE0                            loc_1A962:				; XREF: Obj86_Index
0001CBE0 117C 0002 001C             		move.b	#2,$1C(a0)
0001CBE6 4A68 0038                  		tst.w	$38(a0)
0001CBEA 6600                       		bne.s	loc_1A97E
0001CBEC 117C 0002 0024             		move.b	#2,$24(a0)
0001CBF2 2268 0034                  		movea.l	$34(a0),a1
0001CBF6 337C FFFF 0032             		move.w	#-1,$32(a1)
0001CBFC                            
0001CBFC                            loc_1A97E:
0001CBFC 6000 FEEC                  		bra.w	loc_1A86C
0001CC00                            ; ===========================================================================
0001CC00                            
0001CC00                            loc_1A982:				; XREF: Obj86_Index
0001CC00 7000                       		moveq	#0,d0
0001CC02 1028 0025                  		move.b	$25(a0),d0
0001CC06 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001CC0A 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001CC0E 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001CC12 4EB9 0000 B9CA             		jsr	AnimateSprite
0001CC18 4EF9 0000 E96A             		jmp	DisplaySprite
0001CC1E                            ; ===========================================================================
0001CC1E 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001CC20 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001CC22 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001CC24                            ; ===========================================================================
0001CC24                            
0001CC24                            loc_1A9A6:				; XREF: Obj86_Index2
0001CC24 3028 0030                  		move.w	$30(a0),d0
0001CC28 9068 0008                  		sub.w	8(a0),d0
0001CC2C E940                       		asl.w	#4,d0
0001CC2E 3140 0010                  		move.w	d0,$10(a0)
0001CC32 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001CC38 5428 0025                  		addq.b	#2,$25(a0)
0001CC3C 4E75                       		rts	
0001CC3E                            ; ===========================================================================
0001CC3E                            
0001CC3E                            loc_1A9C0:				; XREF: Obj86_Index2
0001CC3E 4A68 0010                  		tst.w	$10(a0)
0001CC42 6700                       		beq.s	loc_1A9E6
0001CC44 4EB9 0000 E950             		jsr	SpeedToPos
0001CC4A 3028 0008                  		move.w	8(a0),d0
0001CC4E 9068 0030                  		sub.w	$30(a0),d0
0001CC52 6400                       		bcc.s	loc_1A9E6
0001CC54 4268 0010                  		clr.w	$10(a0)
0001CC58 D168 0008                  		add.w	d0,8(a0)
0001CC5C 2268 0034                  		movea.l	$34(a0),a1
0001CC60 5369 0032                  		subq.w	#1,$32(a1)
0001CC64                            
0001CC64                            loc_1A9E6:
0001CC64 117C 0000 001C             		move.b	#0,$1C(a0)
0001CC6A 5368 0028                  		subq.w	#1,$28(a0)
0001CC6E 6600                       		bne.s	locret_1AA1C
0001CC70 5428 0025                  		addq.b	#2,$25(a0)
0001CC74 117C 0001 001C             		move.b	#1,$1C(a0)
0001CC7A 117C 009A 0020             		move.b	#$9A,$20(a0)
0001CC80 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001CC86 7000                       		moveq	#0,d0
0001CC88 3038 D008                  		move.w	($FFFFD008).w,d0
0001CC8C 9068 0008                  		sub.w	8(a0),d0
0001CC90 3140 0010                  		move.w	d0,$10(a0)
0001CC94 317C 0140 0012             		move.w	#$140,$12(a0)
0001CC9A                            
0001CC9A                            locret_1AA1C:
0001CC9A 4E75                       		rts	
0001CC9C                            ; ===========================================================================
0001CC9C                            
0001CC9C                            loc_1AA1E:				; XREF: Obj86_Index2
0001CC9C 4EB9 0000 E950             		jsr	SpeedToPos
0001CCA2 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001CCA8 6400                       		bcc.s	loc_1AA34
0001CCAA 5368 0028                  		subq.w	#1,$28(a0)
0001CCAE 6700                       		beq.s	loc_1AA34
0001CCB0 4E75                       		rts	
0001CCB2                            ; ===========================================================================
0001CCB2                            
0001CCB2                            loc_1AA34:
0001CCB2 2268 0034                  		movea.l	$34(a0),a1
0001CCB6 5369 0038                  		subq.w	#1,$38(a1)
0001CCBA 6000 FA0A                  		bra.w	Obj84_Delete
0001CCBE                            ; ===========================================================================
0001CCBE                            Ani_obj86:
0001CCBE                            	include "_anim\obj86.asm"
0001CCBE                            ; ---------------------------------------------------------------------------
0001CCBE                            ; Animation script - energy ball launcher (FZ)
0001CCBE                            ; ---------------------------------------------------------------------------
0001CCBE 0000                       		dc.w byte_1AA46-Ani_obj86
0001CCC0 0000                       		dc.w byte_1AA4A-Ani_obj86
0001CCC2 0000                       		dc.w byte_1AA50-Ani_obj86
0001CCC4 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001CCC8 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001CCCE 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001CCD4                            		even
0001CCD4                            		even
0001CCD4                            
0001CCD4                            ; ---------------------------------------------------------------------------
0001CCD4                            ; Sprite mappings - energy ball	launcher (FZ)
0001CCD4                            ; ---------------------------------------------------------------------------
0001CCD4                            Map_obj86:
0001CCD4                            	include "_maps\obj86.asm"
0001CCD4                            ; ---------------------------------------------------------------------------
0001CCD4                            ; Sprite mappings - energy ball	launcher (FZ)
0001CCD4                            ; ---------------------------------------------------------------------------
0001CCD4 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001CCD8 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001CCDC 01                         byte_1AA5E:	dc.b 1
0001CCDD F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001CCE2 01                         byte_1AA64:	dc.b 1
0001CCE3 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001CCE8 01                         byte_1AA6A:	dc.b 1
0001CCE9 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001CCEE 01                         byte_1AA70:	dc.b 1
0001CCEF F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001CCF4                            		even
0001CCF4                            		even
0001CCF4                            
0001CCF4                            Ani_obj86a:
0001CCF4                            	include "_anim\obj86a.asm"
0001CCF4                            ; ---------------------------------------------------------------------------
0001CCF4                            ; Animation script - energy balls (FZ)
0001CCF4                            ; ---------------------------------------------------------------------------
0001CCF4 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001CCF6 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001CCF8 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001CD07 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001CD16 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001CD1A 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001CD24                            		even
0001CD24                            		even
0001CD24                            
0001CD24                            ; ---------------------------------------------------------------------------
0001CD24                            ; Sprite mappings - energy balls (FZ)
0001CD24                            ; ---------------------------------------------------------------------------
0001CD24                            Map_obj86a:
0001CD24                            	include "_maps\obj86a.asm"
0001CD24                            ; ---------------------------------------------------------------------------
0001CD24                            ; Sprite mappings - energy balls (FZ)
0001CD24                            ; ---------------------------------------------------------------------------
0001CD24 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001CD28 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001CD2C 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001CD30 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001CD34 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001CD38 0000                       		dc.w byte_1AB20-Map_obj86a
0001CD3A 02                         byte_1AABC:	dc.b 2
0001CD3B F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001CD40 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001CD45 02                         byte_1AAC7:	dc.b 2
0001CD46 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001CD4B F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001CD50 02                         byte_1AAD2:	dc.b 2
0001CD51 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001CD56 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001CD5B 02                         byte_1AADD:	dc.b 2
0001CD5C F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001CD61 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001CD66 02                         byte_1AAE8:	dc.b 2
0001CD67 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001CD6C 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001CD71 02                         byte_1AAF3:	dc.b 2
0001CD72 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001CD77 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001CD7C 01                         byte_1AAFE:	dc.b 1
0001CD7D F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001CD82 01                         byte_1AB04:	dc.b 1
0001CD83 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001CD88 02                         byte_1AB0A:	dc.b 2
0001CD89 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001CD8E 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001CD93 02                         byte_1AB15:	dc.b 2
0001CD94 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001CD99 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001CD9E 00                         byte_1AB20:	dc.b 0
0001CDA0 00                         		even
0001CDA0 00                         		even
0001CDA0                            
0001CDA0                            ; ===========================================================================
0001CDA0                            ; ---------------------------------------------------------------------------
0001CDA0                            ; Object 3E - prison capsule
0001CDA0                            ; ---------------------------------------------------------------------------
0001CDA0                            
0001CDA0                            Obj3E:					; XREF: Obj_Index
0001CDA0 7000                       		moveq	#0,d0
0001CDA2 1028 0024                  		move.b	$24(a0),d0
0001CDA6 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001CDAA 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001CDAE 3028 0008                  		move.w	8(a0),d0
0001CDB2 0240 FF80                  		andi.w	#$FF80,d0
0001CDB6 3238 F700                  		move.w	($FFFFF700).w,d1
0001CDBA 0441 0080                  		subi.w	#$80,d1
0001CDBE 0241 FF80                  		andi.w	#$FF80,d1
0001CDC2 9041                       		sub.w	d1,d0
0001CDC4 0C40 0280                  		cmpi.w	#$280,d0
0001CDC8 6300                       		bls.s	Obj3E_NoDel
0001CDCA 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001CDCE 6700                       		beq.s	Obj3E_Delete		; if it's zero, don't remember object
0001CDD0 3440                       		movea.w	d0,a2	; load address into a2
0001CDD2 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001CDD6 6000                       		bra.s	Obj3E_Delete	; and delete object
0001CDD8                            
0001CDD8                            Obj3E_NoDel:
0001CDD8 4EF9 0000 E96A             		jmp	DisplaySprite
0001CDDE                            ; ===========================================================================
0001CDDE                            
0001CDDE                            Obj3E_Delete:
0001CDDE 4EF9 0000 E9BA             		jmp	DeleteObject
0001CDE4                            ; ===========================================================================
0001CDE4 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001CDE6 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001CDE8 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001CDEA 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CDEC 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CDEE 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CDF0 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001CDF2 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001CDF4                            
0001CDF4 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001CDF8 040C 0501                  		dc.b 4,	$C, 5, 1
0001CDFC 0610 0403                  		dc.b 6,	$10, 4,	3
0001CE00 0810 0305                  		dc.b 8,	$10, 3,	5
0001CE04                            ; ===========================================================================
0001CE04                            
0001CE04                            Obj3E_Main:				; XREF: Obj3E_Index
0001CE04 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001CE0C 317C 049D 0002             		move.w	#$49D,2(a0)
0001CE12 117C 0004 0001             		move.b	#4,1(a0)
0001CE18 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001CE1E 7000                       		moveq	#0,d0
0001CE20 1028 0028                  		move.b	$28(a0),d0
0001CE24 E548                       		lsl.w	#2,d0
0001CE26 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001CE2A 1159 0024                  		move.b	(a1)+,$24(a0)
0001CE2E 1159 0019                  		move.b	(a1)+,$19(a0)
0001CE32 1159 0018                  		move.b	(a1)+,$18(a0)
0001CE36 1159 001A                  		move.b	(a1)+,$1A(a0)
0001CE3A 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001CE3E 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001CE40 117C 0006 0020             		move.b	#6,$20(a0)
0001CE46 117C 0008 0021             		move.b	#8,$21(a0)
0001CE4C                            
0001CE4C                            Obj3E_Not02:
0001CE4C 4E75                       		rts	
0001CE4E                            ; ===========================================================================
0001CE4E                            
0001CE4E                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001CE4E 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001CE54 6700                       		beq.s	Obj3E_ChkOpened
0001CE56 323C 002B                  		move.w	#$2B,d1
0001CE5A 343C 0018                  		move.w	#$18,d2
0001CE5E 363C 0018                  		move.w	#$18,d3
0001CE62 3828 0008                  		move.w	8(a0),d4
0001CE66 4EF9 0001 12D8             		jmp	SolidObject
0001CE6C                            ; ===========================================================================
0001CE6C                            
0001CE6C                            Obj3E_ChkOpened:
0001CE6C 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001CE70 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001CE72 4228 0025                  		clr.b	$25(a0)
0001CE76 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001CE7C 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001CE82                            
0001CE82                            Obj3E_DoOpen:
0001CE82 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001CE88 4E75                       		rts	
0001CE8A                            ; ===========================================================================
0001CE8A                            
0001CE8A                            Obj3E_Switched:				; XREF: Obj3E_Index
0001CE8A 323C 0017                  		move.w	#$17,d1
0001CE8E 343C 0008                  		move.w	#8,d2
0001CE92 363C 0008                  		move.w	#8,d3
0001CE96 3828 0008                  		move.w	8(a0),d4
0001CE9A 4EB9 0001 12D8             		jsr	SolidObject
0001CEA0 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001CEA6 4EB9 0000 B9CA             		jsr	AnimateSprite
0001CEAC 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001CEB2 4A28 0025                  		tst.b	$25(a0)
0001CEB6 6700                       		beq.s	locret_1AC60
0001CEB8 5068 000C                  		addq.w	#8,$C(a0)
0001CEBC 117C 000A 0024             		move.b	#$A,$24(a0)
0001CEC2 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001CEC8 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001CECC 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001CED0 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001CED6 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001CEDC 4228 0025                  		clr.b	$25(a0)
0001CEE0 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001CEE6 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001CEEC                            
0001CEEC                            locret_1AC60:
0001CEEC 4E75                       		rts	
0001CEEE                            ; ===========================================================================
0001CEEE                            
0001CEEE                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001CEEE 7007                       		moveq	#7,d0
0001CEF0 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001CEF4 6600                       		bne.s	loc_1ACA0
0001CEF6 4EB9 0000 F0C0             		jsr	SingleObjLoad
0001CEFC 6600                       		bne.s	loc_1ACA0
0001CEFE 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001CF02 3368 0008 0008             		move.w	8(a0),8(a1)
0001CF08 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CF0E 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001CF14 7200                       		moveq	#0,d1
0001CF16 1200                       		move.b	d0,d1
0001CF18 E409                       		lsr.b	#2,d1
0001CF1A 0441 0020                  		subi.w	#$20,d1
0001CF1E D369 0008                  		add.w	d1,8(a1)
0001CF22 E048                       		lsr.w	#8,d0
0001CF24 E608                       		lsr.b	#3,d0
0001CF26 D169 000C                  		add.w	d0,$C(a1)
0001CF2A                            
0001CF2A                            loc_1ACA0:
0001CF2A 5368 001E                  		subq.w	#1,$1E(a0)
0001CF2E 6700                       		beq.s	Obj3E_MakeAnimal
0001CF30 4E75                       		rts	
0001CF32                            ; ===========================================================================
0001CF32                            
0001CF32                            Obj3E_MakeAnimal:
0001CF32 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001CF38 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001CF3E 117C 0006 001A             		move.b	#6,$1A(a0)
0001CF44 317C 0096 001E             		move.w	#$96,$1E(a0)
0001CF4A 0668 0020 000C             		addi.w	#$20,$C(a0)
0001CF50 7C07                       		moveq	#7,d6
0001CF52 3A3C 009A                  		move.w	#$9A,d5
0001CF56 78E4                       		moveq	#-$1C,d4
0001CF58                            
0001CF58                            Obj3E_Loop:
0001CF58 4EB9 0000 F0C0             		jsr	SingleObjLoad
0001CF5E 6600                       		bne.s	locret_1ACF8
0001CF60 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001CF64 3368 0008 0008             		move.w	8(a0),8(a1)
0001CF6A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CF70 D969 0008                  		add.w	d4,8(a1)
0001CF74 5E44                       		addq.w	#7,d4
0001CF76 3345 0036                  		move.w	d5,$36(a1)
0001CF7A 5145                       		subq.w	#8,d5
0001CF7C 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001CF80                            
0001CF80                            locret_1ACF8:
0001CF80 4E75                       		rts	
0001CF82                            ; ===========================================================================
0001CF82                            
0001CF82                            Obj3E_Animals:				; XREF: Obj3E_Index
0001CF82 7007                       		moveq	#7,d0
0001CF84 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001CF88 6600                       		bne.s	loc_1AD38
0001CF8A 4EB9 0000 F0C0             		jsr	SingleObjLoad
0001CF90 6600                       		bne.s	loc_1AD38
0001CF92 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001CF96 3368 0008 0008             		move.w	8(a0),8(a1)
0001CF9C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CFA2 4EB9 0000 29D0             		jsr	(RandomNumber).l
0001CFA8 0240 001F                  		andi.w	#$1F,d0
0001CFAC 5D40                       		subq.w	#6,d0
0001CFAE 4A41                       		tst.w	d1
0001CFB0 6A00                       		bpl.s	loc_1AD2E
0001CFB2 4440                       		neg.w	d0
0001CFB4                            
0001CFB4                            loc_1AD2E:
0001CFB4 D169 0008                  		add.w	d0,8(a1)
0001CFB8 337C 000C 0036             		move.w	#$C,$36(a1)
0001CFBE                            
0001CFBE                            loc_1AD38:
0001CFBE 5368 001E                  		subq.w	#1,$1E(a0)
0001CFC2 6600                       		bne.s	locret_1AD48
0001CFC4 5428 0024                  		addq.b	#2,$24(a0)
0001CFC8 317C 00B4 001E             		move.w	#180,$1E(a0)
0001CFCE                            
0001CFCE                            locret_1AD48:
0001CFCE 4E75                       		rts	
0001CFD0                            ; ===========================================================================
0001CFD0                            
0001CFD0                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001CFD0 703E                       		moveq	#$3E,d0
0001CFD2 7228                       		moveq	#$28,d1
0001CFD4 7440                       		moveq	#$40,d2
0001CFD6 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001CFDA                            
0001CFDA                            Obj3E_FindObj28:
0001CFDA B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001CFDC 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001CFDE D2C2                       		adda.w	d2,a1		; next object RAM
0001CFE0 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001CFE4                            
0001CFE4 4EB9 0001 0576             		jsr	GotThroughAct
0001CFEA 4EF9 0000 E9BA             		jmp	DeleteObject
0001CFF0                            ; ===========================================================================
0001CFF0                            
0001CFF0                            Obj3E_Obj28Found:
0001CFF0 4E75                       		rts	
0001CFF2                            ; ===========================================================================
0001CFF2                            Ani_obj3E:
0001CFF2                            	include "_anim\obj3E.asm"
0001CFF2                            ; ---------------------------------------------------------------------------
0001CFF2                            ; Animation script - prison capsule
0001CFF2                            ; ---------------------------------------------------------------------------
0001CFF2 0000                       		dc.w byte_1AD70-Ani_obj3E
0001CFF4 0000                       		dc.w byte_1AD70-Ani_obj3E
0001CFF6 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001CFFA                            		even
0001CFFA                            		even
0001CFFA                            
0001CFFA                            ; ---------------------------------------------------------------------------
0001CFFA                            ; Sprite mappings - prison capsule
0001CFFA                            ; ---------------------------------------------------------------------------
0001CFFA                            Map_obj3E:
0001CFFA                            	include "_maps\obj3E.asm"
0001CFFA                            ; ---------------------------------------------------------------------------
0001CFFA                            ; Sprite mappings - prison capsule
0001CFFA                            ; ---------------------------------------------------------------------------
0001CFFA 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001CFFE 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001D002 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001D006 0000                       		dc.w byte_1ADE2-Map_obj3E
0001D008 07                         byte_1AD82:	dc.b 7
0001D009 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001D00E E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001D013 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001D018 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001D01D F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001D022 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001D027 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001D02C 01                         byte_1ADA6:	dc.b 1
0001D02D F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001D032 06                         byte_1ADAC:	dc.b 6
0001D033 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001D038 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001D03D 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001D042 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001D047 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001D04C 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001D051 01                         byte_1ADCB:	dc.b 1
0001D052 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001D057 02                         byte_1ADD1:	dc.b 2
0001D058 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001D05D 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001D062 01                         byte_1ADDC:	dc.b 1
0001D063 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001D068 00                         byte_1ADE2:	dc.b 0
0001D06A 00                         		even
0001D06A 00                         		even
0001D06A                            
0001D06A                            ; ---------------------------------------------------------------------------
0001D06A                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001D06A                            ; ---------------------------------------------------------------------------
0001D06A                            
0001D06A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D06A                            
0001D06A                            
0001D06A                            TouchResponse:				; XREF: Obj01
0001D06A 4E71                       		nop	
0001D06C 4EB9 0000 F1C8             		jsr	(Touch_Rings).l
0001D072 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001D076 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001D07A 5142                       		subq.w	#8,d2
0001D07C 7A00                       		moveq	#0,d5
0001D07E 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001D082 5705                       		subq.b	#3,d5
0001D084 9645                       		sub.w	d5,d3
0001D086 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001D08C 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001D08E 0643 000C                  		addi.w	#$C,d3
0001D092 7A0A                       		moveq	#$A,d5
0001D094                            
0001D094                            Touch_NoDuck:
0001D094 383C 0010                  		move.w	#$10,d4
0001D098 DA45                       		add.w	d5,d5
0001D09A 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001D09E 3C3C 005F                  		move.w	#$5F,d6
0001D0A2                            
0001D0A2                            Touch_Loop:
0001D0A2 4A29 0001                  		tst.b	1(a1)
0001D0A6 6A00                       		bpl.s	Touch_NextObj
0001D0A8 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001D0AC 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001D0AE                            
0001D0AE                            Touch_NextObj:
0001D0AE 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001D0B2 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001D0B6                            
0001D0B6 7000                       		moveq	#0,d0
0001D0B8 4E75                       		rts	
0001D0BA                            ; ===========================================================================
0001D0BA 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001D0BC 0C14                       		dc.b   $C, $14
0001D0BE 140C                       		dc.b  $14,  $C
0001D0C0 0410                       		dc.b	4, $10
0001D0C2 0C12                       		dc.b   $C, $12
0001D0C4 1010                       		dc.b  $10, $10
0001D0C6 0606                       		dc.b	6,   6
0001D0C8 180C                       		dc.b  $18,  $C
0001D0CA 0C10                       		dc.b   $C, $10
0001D0CC 100C                       		dc.b  $10,  $C
0001D0CE 0808                       		dc.b	8,   8
0001D0D0 1410                       		dc.b  $14, $10
0001D0D2 1408                       		dc.b  $14,   8
0001D0D4 0E0E                       		dc.b   $E,  $E
0001D0D6 1818                       		dc.b  $18, $18
0001D0D8 2810                       		dc.b  $28, $10
0001D0DA 1018                       		dc.b  $10, $18
0001D0DC 0810                       		dc.b	8, $10
0001D0DE 2070                       		dc.b  $20, $70
0001D0E0 4020                       		dc.b  $40, $20
0001D0E2 8020                       		dc.b  $80, $20
0001D0E4 2020                       		dc.b  $20, $20
0001D0E6 0808                       		dc.b	8,   8
0001D0E8 0404                       		dc.b	4,   4
0001D0EA 2008                       		dc.b  $20,   8
0001D0EC 0C0C                       		dc.b   $C,  $C
0001D0EE 0804                       		dc.b	8,   4
0001D0F0 1804                       		dc.b  $18,   4
0001D0F2 2804                       		dc.b  $28,   4
0001D0F4 0408                       		dc.b	4,   8
0001D0F6 0418                       		dc.b	4, $18
0001D0F8 0428                       		dc.b	4, $28
0001D0FA 0420                       		dc.b	4, $20
0001D0FC 1818                       		dc.b  $18, $18
0001D0FE 0C18                       		dc.b   $C, $18
0001D100 4808                       		dc.b  $48,   8
0001D102                            ; ===========================================================================
0001D102                            
0001D102                            Touch_Height:				; XREF: TouchResponse
0001D102 0240 003F                  		andi.w	#$3F,d0
0001D106 D040                       		add.w	d0,d0
0001D108 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001D10C 7200                       		moveq	#0,d1
0001D10E 121A                       		move.b	(a2)+,d1
0001D110 3029 0008                  		move.w	8(a1),d0
0001D114 9041                       		sub.w	d1,d0
0001D116 9042                       		sub.w	d2,d0
0001D118 6400                       		bcc.s	loc_1AE98
0001D11A D241                       		add.w	d1,d1
0001D11C D041                       		add.w	d1,d0
0001D11E 6500                       		bcs.s	Touch_Width
0001D120 6000 FF8C                  		bra.w	Touch_NextObj
0001D124                            ; ===========================================================================
0001D124                            
0001D124                            loc_1AE98:
0001D124 B044                       		cmp.w	d4,d0
0001D126 6200 FF86                  		bhi.w	Touch_NextObj
0001D12A                            
0001D12A                            Touch_Width:
0001D12A 7200                       		moveq	#0,d1
0001D12C 121A                       		move.b	(a2)+,d1
0001D12E 3029 000C                  		move.w	$C(a1),d0
0001D132 9041                       		sub.w	d1,d0
0001D134 9043                       		sub.w	d3,d0
0001D136 6400                       		bcc.s	loc_1AEB6
0001D138 D241                       		add.w	d1,d1
0001D13A D240                       		add.w	d0,d1
0001D13C 6500                       		bcs.s	Touch_ChkValue
0001D13E 6000 FF6E                  		bra.w	Touch_NextObj
0001D142                            ; ===========================================================================
0001D142                            
0001D142                            loc_1AEB6:
0001D142 B045                       		cmp.w	d5,d0
0001D144 6200 FF68                  		bhi.w	Touch_NextObj
0001D148                            
0001D148                            Touch_ChkValue:
0001D148 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001D14C 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001D150 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001D154 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001D158 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001D15C 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001D15E 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001D162                            
0001D162                            ; touch	response is $40-$7F
0001D162                            
0001D162 1029 0020                  		move.b	$20(a1),d0
0001D166 0200 003F                  		andi.b	#$3F,d0
0001D16A 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001D16E 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001D170 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001D176 6400 0000                  		bcc.w	locret_1AEF2
0001D17A 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001D17E                            
0001D17E                            locret_1AEF2:
0001D17E 4E75                       		rts	
0001D180                            ; ===========================================================================
0001D180                            
0001D180                            Touch_Monitor:
0001D180 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001D184 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001D186 3028 000C                  		move.w	$C(a0),d0
0001D18A 0440 0010                  		subi.w	#$10,d0
0001D18E B069 000C                  		cmp.w	$C(a1),d0
0001D192 6500 0000                  		bcs.w	locret_1AF2E
0001D196 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001D19A 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001D19E 337C FE80 0012             		move.w	#-$180,$12(a1)
0001D1A4 4A29 0025                  		tst.b	$25(a1)
0001D1A8 6600 0000                  		bne.w	locret_1AF2E
0001D1AC 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001D1B0 4E75                       		rts	
0001D1B2                            ; ===========================================================================
0001D1B2                            
0001D1B2                            loc_1AF1E:
0001D1B2 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001D1B8 6600 0000                  		bne.w	locret_1AF2E
0001D1BC 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001D1C0 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001D1C4 0C68 0400 0010             		cmpi.w	#$400,$10(a0)
0001D1CA 6E00                       		bgt.s	@happy
0001D1CC 0C68 FC00 0010             		cmpi.w	#-$400,$10(a0)
0001D1D2 6D00                       		blt.s	@happy
0001D1D4 0C68 0800 0012             		cmpi.w	#$800,$12(a0)
0001D1DA 6E00                       		bgt.s	@happy
0001D1DC 0C68 F800 0012             		cmpi.w	#-$800,$12(a0)
0001D1E2 6C00                       		bge.s	locret_1AF2E
0001D1E4                            
0001D1E4                            	@happy:
0001D1E4 0828 0001 0022             		btst	#1,$22(a0)
0001D1EA 6700                       		beq.s	locret_1AF2E
0001D1EC 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001D1F2 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001D1F8 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeHappy2
0001D25E                            
0001D25E                            locret_1AF2E:
0001D25E 4E75                       		rts	
0001D260                            ; ===========================================================================
0001D260                            
0001D260                            Touch_Enemy:				; XREF: Touch_ChkValue
0001D260 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001D264 6600                       		bne.s	loc_1AF40	; if yes, branch
0001D266 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001D26C 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001D270                            
0001D270                            loc_1AF40:
0001D270 4A29 0021                  		tst.b	$21(a1)
0001D274 6700                       		beq.s	Touch_KillEnemy
0001D276 4468 0010                  		neg.w	$10(a0)
0001D27A 4468 0012                  		neg.w	$12(a0)
0001D27E 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001D282 E0E8 0010                  		asr	$10(a0)
0001D286 E0E8 0012                  		asr	$12(a0)
0001D28A 137C 0000 0020             		move.b	#0,$20(a1)
0001D290 5329 0021                  		subq.b	#1,$21(a1)
0001D294 6600                       		bne.s	locret_1AF68
0001D296 08E9 0007 0022             		bset	#7,$22(a1)
0001D29C                            
0001D29C                            locret_1AF68:
0001D29C 4E75                       		rts	
0001D29E                            ; ===========================================================================
0001D29E                            
0001D29E                            Touch_KillEnemy:
0001D29E 0C68 0400 0010             		cmpi.w	#$400,$10(a0)
0001D2A4 6E00                       		bgt.s	@happy
0001D2A6 0C68 FC00 0010             		cmpi.w	#-$400,$10(a0)
0001D2AC 6D00                       		blt.s	@happy
0001D2AE 0C68 0800 0012             		cmpi.w	#$800,$12(a0)
0001D2B4 6E00                       		bgt.s	@happy
0001D2B6 0C68 F800 0012             		cmpi.w	#-$800,$12(a0)
0001D2BC 6C00                       		bge.s	@nothappy
0001D2BE                            
0001D2BE                            	@happy:
0001D2BE 0828 0001 0022             		btst	#1,$22(a0)
0001D2C4 6700                       		beq.s	@nothappy
0001D2C6 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001D2CC 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001D2D2                            
0001D2D2                            	@nothappy:
0001D2D2 08E9 0007 0022             		bset	#7,$22(a1)
0001D2D8 7000                       		moveq	#0,d0
0001D2DA 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001D2DE 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001D2E2 0C40 0006                  		cmpi.w	#6,d0
0001D2E6 6500                       		bcs.s	loc_1AF82
0001D2E8 7006                       		moveq	#6,d0
0001D2EA                            
0001D2EA                            loc_1AF82:
0001D2EA 3340 003E                  		move.w	d0,$3E(a1)
0001D2EE 4A40                       		tst.w	d0
0001D2F0 6700                       		beq.s	@nocombo
0001D2F2 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001D2F8 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001D2FE                            
0001D2FE                            	@nocombo:
0001D2FE 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001D302 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001D308 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001D30A 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001D30E 337C 000A 003E             		move.w	#$A,$3E(a1)
0001D314                            
0001D314                            loc_1AF9C:
0001D314 6100 0000                  		bsr.w	AddPoints
0001D318 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001D31C 137C 0000 0024             		move.b	#0,$24(a1)
0001D322 4A68 0012                  		tst.w	$12(a0)
0001D326 6B00                       		bmi.s	loc_1AFC2
0001D328 3028 000C                  		move.w	$C(a0),d0
0001D32C B069 000C                  		cmp.w	$C(a1),d0
0001D330 6400                       		bcc.s	loc_1AFCA
0001D332 4468 0012                  		neg.w	$12(a0)
0001D336 4E75                       		rts	
0001D338                            ; ===========================================================================
0001D338                            
0001D338                            loc_1AFC2:
0001D338 0668 0100 0012             		addi.w	#$100,$12(a0)
0001D33E 4E75                       		rts	
0001D340                            ; ===========================================================================
0001D340                            
0001D340                            loc_1AFCA:
0001D340 0468 0100 0012             		subi.w	#$100,$12(a0)
0001D346 4E75                       		rts	
0001D348                            ; ===========================================================================
0001D348 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001D350                            ; ===========================================================================
0001D350                            
0001D350                            loc_1AFDA:				; XREF: Touch_CatKiller
0001D350 08E9 0007 0022             		bset	#7,$22(a1)
0001D356                            
0001D356                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001D356 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001D35A 6700                       		beq.s	Touch_Hurt	; if not, branch
0001D35C                            
0001D35C                            loc_1AFE6:				; XREF: Touch_Hurt
0001D35C 0C78 0100 D032             		cmpi.w	#$100,($FFFFD032).w
0001D362 6E00                       		bgt.s	locret_1AFE6
0001D364                            
0001D364                            loc2_1AFE6:				; XREF: Touch_Hurt
0001D364 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
0001D36A 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001D370                            
0001D370                            locret_1AFE6:
0001D370 70FF                       		moveq	#-1,d0
0001D372 4E75                       		rts	
0001D374                            ; ===========================================================================
0001D374                            
0001D374                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001D374 4E71                       		nop	
0001D376 4A68 0030                  		tst.w	$30(a0)
0001D37A 66E8                       		bne.s	loc2_1AFE6
0001D37C 2449                       		movea.l	a1,a2
0001D37E                            
0001D37E                            ; End of function TouchResponse
0001D37E                            ; continue straight to HurtSonic
0001D37E                            
0001D37E                            ; ---------------------------------------------------------------------------
0001D37E                            ; Hurting Sonic	subroutine
0001D37E                            ; ---------------------------------------------------------------------------
0001D37E                            
0001D37E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D37E                            
0001D37E                            
0001D37E                            HurtSonic:
0001D37E 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
0001D384 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0001D38A 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeHurt
0001D3F0 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001D3F4 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001D3F6 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001D3FA 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001D3FE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0001D404 6500                       		bcs.s	@notbad
0001D406 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001D40C                            
0001D40C                            	@notbad:
0001D40C 4EB9 0000 F0C0             		jsr	SingleObjLoad
0001D412 6600                       		bne.s	Hurt_Shield
0001D414 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001D418 3368 0008 0008             		move.w	8(a0),8(a1)
0001D41E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D424                            
0001D424                            Hurt_Shield:
0001D424 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001D42A 117C 0004 0024             		move.b	#4,$24(a0)
0001D430 4EB9 0001 5216             		jsr	(Sonic_ResetOnFloor).l
0001D436 08E8 0001 0022             		bset	#1,$22(a0)
0001D43C 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001D442 317C FE00 0010             		move.w	#-$200,$10(a0)
0001D448 0828 0006 0022             		btst	#6,$22(a0)
0001D44E 6700                       		beq.s	Hurt_Reverse
0001D450 317C FE00 0012             		move.w	#-$200,$12(a0)
0001D456 317C FF00 0010             		move.w	#-$100,$10(a0)
0001D45C                            
0001D45C                            Hurt_Reverse:
0001D45C 3028 0008                  		move.w	8(a0),d0
0001D460 B06A 0008                  		cmp.w	8(a2),d0
0001D464 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001D466 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001D46A                            
0001D46A                            Hurt_ChkSpikes:
0001D46A 317C 0000 0020             		move.w	#0,$20(a0)
0001D470 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001D476 317C 0078 0030             		move.w	#$78,$30(a0)
0001D47C 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001D480 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001D484 6600                       		bne.s	Hurt_Sound	; if not, branch
0001D486 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001D48A 6600                       		bne.s	Hurt_Sound	; if not, branch
0001D48C 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001D490                            
0001D490                            Hurt_Sound:
0001D490 4EB9 0000 1220             		jsr	(PlaySound_Special).l
0001D496 70FF                       		moveq	#-1,d0
0001D498 4E75                       		rts	
0001D49A                            ; ===========================================================================
0001D49A                            
0001D49A                            Hurt_NoRings:
0001D49A 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001D49E 6600 FF84                  		bne.w	Hurt_Shield	; if yes, branch
0001D4A2 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeDies
0001D508                            ; End of function HurtSonic
0001D508                            
0001D508                            ; ---------------------------------------------------------------------------
0001D508                            ; Subroutine to	kill Sonic
0001D508                            ; ---------------------------------------------------------------------------
0001D508                            
0001D508                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D508                            
0001D508                            
0001D508                            KillSonic:
0001D508 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001D50C 6600 0000                  		bne.w	Kill_NoDeath	; if yes, branch
0001D510 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001D516 117C 0006 0024             		move.b	#6,$24(a0)
0001D51C 4EB9 0001 5216             		jsr	(Sonic_ResetOnFloor).l
0001D522 08E8 0001 0022             		bset	#1,$22(a0)
0001D528 317C F900 0012             		move.w	#-$700,$12(a0)
0001D52E 317C 0000 0010             		move.w	#0,$10(a0)
0001D534 317C 0000 0020             		move.w	#0,$20(a0)
0001D53A 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001D540 117C 0018 001C             		move.b	#$18,$1C(a0)
0001D546 08E8 0007 0002             		bset	#7,2(a0)
0001D54C 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001D550 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeFrustrated		
0001D5B6 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001D5BA 6600                       		bne.s	Kill_Sound
0001D5BC 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001D5C0 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeSpikey
0001D626                            
0001D626                            Kill_Sound:
0001D626 4EB9 0000 1220             		jsr	(PlaySound_Special).l
0001D62C                            
0001D62C                            Kill_NoDeath:
0001D62C 70FF                       		moveq	#-1,d0
0001D62E 4E75                       		rts	
0001D630                            ; End of function KillSonic
0001D630                            
0001D630                            
0001D630                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D630                            
0001D630                            
0001D630                            Touch_Special:				; XREF: Touch_ChkValue
0001D630 1229 0020                  		move.b	$20(a1),d1
0001D634 0201 003F                  		andi.b	#$3F,d1
0001D638 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001D63C 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001D63E 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001D642 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001D644 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001D648 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001D64A 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001D64E 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001D650 4E75                       		rts	
0001D652                            ; ===========================================================================
0001D652                            
0001D652                            Touch_CatKiller:			; XREF: Touch_Special
0001D652 6000 FCFC                  		bra.w	loc_1AFDA
0001D656                            ; ===========================================================================
0001D656                            
0001D656                            Touch_Yadrin:				; XREF: Touch_Special
0001D656 9A40                       		sub.w	d0,d5
0001D658 0C45 0008                  		cmpi.w	#8,d5
0001D65C 6400                       		bcc.s	loc_1B144
0001D65E 3029 0008                  		move.w	8(a1),d0
0001D662 5940                       		subq.w	#4,d0
0001D664 0829 0000 0022             		btst	#0,$22(a1)
0001D66A 6700                       		beq.s	loc_1B130
0001D66C 0440 0010                  		subi.w	#$10,d0
0001D670                            
0001D670                            loc_1B130:
0001D670 9042                       		sub.w	d2,d0
0001D672 6400                       		bcc.s	loc_1B13C
0001D674 0640 0018                  		addi.w	#$18,d0
0001D678 6500                       		bcs.s	loc_1B140
0001D67A 6000                       		bra.s	loc_1B144
0001D67C                            ; ===========================================================================
0001D67C                            
0001D67C                            loc_1B13C:
0001D67C B044                       		cmp.w	d4,d0
0001D67E 6200                       		bhi.s	loc_1B144
0001D680                            
0001D680                            loc_1B140:
0001D680 6000 FCD4                  		bra.w	Touch_ChkHurt
0001D684                            ; ===========================================================================
0001D684                            
0001D684                            loc_1B144:
0001D684 6000 FBDA                  		bra.w	Touch_Enemy
0001D688                            ; ===========================================================================
0001D688                            
0001D688                            Touch_D7orE1:				; XREF: Touch_Special
0001D688 5229 0021                  		addq.b	#1,$21(a1)
0001D68C 4E75                       		rts	
0001D68E                            ; End of function Touch_Special
0001D68E                            
0001D68E                            ; ---------------------------------------------------------------------------
0001D68E                            ; Subroutine to	show the special stage layout
0001D68E                            ; ---------------------------------------------------------------------------
0001D68E                            
0001D68E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D68E                            
0001D68E                            
0001D68E                            SS_ShowLayout:				; XREF: SpecialStage
0001D68E 4A78 F63A                  		tst.w	($FFFFF63A).w
0001D692 6600                       		bne.s	@noanimate
0001D694 6100 0000                  		bsr.w	SS_AniWallsRings
0001D698 6100 0000                  		bsr.w	SS_AniItems
0001D69C                            
0001D69C                            	@noanimate:
0001D69C 3F05                       		move.w	d5,-(sp)
0001D69E 43F8 8000                  		lea	($FFFF8000).w,a1
0001D6A2 1038 F780                  		move.b	($FFFFF780).w,d0
0001D6A6 0200 00FC                  		andi.b	#$FC,d0
0001D6AA 4EB9 0000 29F6             		jsr	(CalcSine).l
0001D6B0 3800                       		move.w	d0,d4
0001D6B2 3A01                       		move.w	d1,d5
0001D6B4 C9FC 0018                  		muls.w	#$18,d4
0001D6B8 CBFC 0018                  		muls.w	#$18,d5
0001D6BC 7400                       		moveq	#0,d2
0001D6BE 3438 F700                  		move.w	($FFFFF700).w,d2
0001D6C2 84FC 0018                  		divu.w	#$18,d2
0001D6C6 4842                       		swap	d2
0001D6C8 4442                       		neg.w	d2
0001D6CA 0642 FF4C                  		addi.w	#-$B4,d2
0001D6CE 7600                       		moveq	#0,d3
0001D6D0 3638 F704                  		move.w	($FFFFF704).w,d3
0001D6D4 86FC 0018                  		divu.w	#$18,d3
0001D6D8 4843                       		swap	d3
0001D6DA 4443                       		neg.w	d3
0001D6DC 0643 FF4C                  		addi.w	#-$B4,d3
0001D6E0 3E3C 000F                  		move.w	#$F,d7
0001D6E4                            
0001D6E4                            loc_1B19E:
0001D6E4 48A7 E000                  		movem.w	d0-d2,-(sp)
0001D6E8 48A7 C000                  		movem.w	d0-d1,-(sp)
0001D6EC 4440                       		neg.w	d0
0001D6EE C3C2                       		muls.w	d2,d1
0001D6F0 C1C3                       		muls.w	d3,d0
0001D6F2 2C00                       		move.l	d0,d6
0001D6F4 DC81                       		add.l	d1,d6
0001D6F6 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001D6FA C1C2                       		muls.w	d2,d0
0001D6FC C3C3                       		muls.w	d3,d1
0001D6FE D280                       		add.l	d0,d1
0001D700 2406                       		move.l	d6,d2
0001D702 3C3C 000F                  		move.w	#$F,d6
0001D706                            
0001D706                            loc_1B1C0:
0001D706 2002                       		move.l	d2,d0
0001D708 E080                       		asr.l	#8,d0
0001D70A 32C0                       		move.w	d0,(a1)+
0001D70C 2001                       		move.l	d1,d0
0001D70E E080                       		asr.l	#8,d0
0001D710 32C0                       		move.w	d0,(a1)+
0001D712 D485                       		add.l	d5,d2
0001D714 D284                       		add.l	d4,d1
0001D716 51CE FFEE                  		dbf	d6,loc_1B1C0
0001D71A                            
0001D71A 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001D71E 0643 0018                  		addi.w	#$18,d3
0001D722 51CF FFC0                  		dbf	d7,loc_1B19E
0001D726                            
0001D726 3A1F                       		move.w	(sp)+,d5
0001D728 41F9 00FF 0000             		lea	($FF0000).l,a0
0001D72E 7000                       		moveq	#0,d0
0001D730 3038 F704                  		move.w	($FFFFF704).w,d0
0001D734 80FC 0018                  		divu.w	#$18,d0
0001D738 C0FC 0080                  		mulu.w	#$80,d0
0001D73C D1C0                       		adda.l	d0,a0
0001D73E 7000                       		moveq	#0,d0
0001D740 3038 F700                  		move.w	($FFFFF700).w,d0
0001D744 80FC 0018                  		divu.w	#$18,d0
0001D748 D0C0                       		adda.w	d0,a0
0001D74A 49F8 8000                  		lea	($FFFF8000).w,a4
0001D74E 3E3C 000F                  		move.w	#$F,d7
0001D752                            
0001D752                            loc_1B20C:
0001D752 3C3C 000F                  		move.w	#$F,d6
0001D756                            
0001D756                            loc_1B210:
0001D756 7000                       		moveq	#0,d0
0001D758 1018                       		move.b	(a0)+,d0
0001D75A 6700                       		beq.s	loc_1B268
0001D75C 0C00 004E                  		cmpi.b	#$4E,d0
0001D760 6200                       		bhi.s	loc_1B268
0001D762 3614                       		move.w	(a4),d3
0001D764 0643 0120                  		addi.w	#$120,d3
0001D768 0C43 0070                  		cmpi.w	#$70,d3
0001D76C 6500                       		bcs.s	loc_1B268
0001D76E 0C43 01D0                  		cmpi.w	#$1D0,d3
0001D772 6400                       		bcc.s	loc_1B268
0001D774 342C 0002                  		move.w	2(a4),d2
0001D778 0642 00F0                  		addi.w	#$F0,d2
0001D77C 0C42 0070                  		cmpi.w	#$70,d2
0001D780 6500                       		bcs.s	loc_1B268
0001D782 0C42 0170                  		cmpi.w	#$170,d2
0001D786 6400                       		bcc.s	loc_1B268
0001D788 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001D78E E748                       		lsl.w	#3,d0
0001D790 4BF5 0000                  		lea	(a5,d0.w),a5
0001D794 225D                       		movea.l	(a5)+,a1
0001D796 321D                       		move.w	(a5)+,d1
0001D798 D241                       		add.w	d1,d1
0001D79A D2F1 1000                  		adda.w	(a1,d1.w),a1
0001D79E 365D                       		movea.w	(a5)+,a3
0001D7A0 7200                       		moveq	#0,d1
0001D7A2 1219                       		move.b	(a1)+,d1
0001D7A4 5301                       		subq.b	#1,d1
0001D7A6 6B00                       		bmi.s	loc_1B268
0001D7A8 4EB9 0000 EC14             		jsr	sub_D762
0001D7AE                            
0001D7AE                            loc_1B268:
0001D7AE 584C                       		addq.w	#4,a4
0001D7B0 51CE FFA4                  		dbf	d6,loc_1B210
0001D7B4                            
0001D7B4 41E8 0070                  		lea	$70(a0),a0
0001D7B8 51CF FF98                  		dbf	d7,loc_1B20C
0001D7BC                            
0001D7BC 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001D7C0 0C05 0050                  		cmpi.b	#$50,d5
0001D7C4 6700                       		beq.s	loc_1B288
0001D7C6 24BC 0000 0000             		move.l	#0,(a2)
0001D7CC 4E75                       		rts	
0001D7CE                            ; ===========================================================================
0001D7CE                            
0001D7CE                            loc_1B288:
0001D7CE 157C 0000 FFFB             		move.b	#0,-5(a2)
0001D7D4 4E75                       		rts	
0001D7D6                            ; End of function SS_ShowLayout
0001D7D6                            
0001D7D6                            ; ---------------------------------------------------------------------------
0001D7D6                            ; Subroutine to	animate	walls and rings	in the special stage
0001D7D6                            ; ---------------------------------------------------------------------------
0001D7D6                            
0001D7D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D7D6                            
0001D7D6                            
0001D7D6                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001D7D6 43F9 00FF 4005             		lea	($FF4005).l,a1
0001D7DC 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001D7E0 6A00                       		bpl.s	loc_1B2C8
0001D7E2 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001D7E8 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001D7EC 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001D7F2                            
0001D7F2                            loc_1B2C8:
0001D7F2 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001D7F8 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001D7FC 6A00                       		bpl.s	loc_1B2E4
0001D7FE 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001D804 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001D808 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001D80E                            
0001D80E                            loc_1B2E4:
0001D80E 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001D812 1340 0138                  		move.b	d0,$138(a1)
0001D816 1340 0160                  		move.b	d0,$160(a1)
0001D81A 1340 0148                  		move.b	d0,$148(a1)
0001D81E 1340 0150                  		move.b	d0,$150(a1)
0001D822 1340 01D8                  		move.b	d0,$1D8(a1)
0001D826 1340 01E0                  		move.b	d0,$1E0(a1)
0001D82A 1340 01E8                  		move.b	d0,$1E8(a1)
0001D82E 1340 01F0                  		move.b	d0,$1F0(a1)
0001D832 1340 01F8                  		move.b	d0,$1F8(a1)
0001D836 1340 0200                  		move.b	d0,$200(a1)
0001D83A 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001D83E 6A00                       		bpl.s	loc_1B326
0001D840 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001D846 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001D84A 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001D850                            
0001D850                            loc_1B326:
0001D850 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001D854 1340 0168                  		move.b	d0,$168(a1)
0001D858 1340 0170                  		move.b	d0,$170(a1)
0001D85C 1340 0178                  		move.b	d0,$178(a1)
0001D860 1340 0180                  		move.b	d0,$180(a1)
0001D864 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001D868 6A00                       		bpl.s	loc_1B350
0001D86A 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001D870 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001D874 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001D87A                            
0001D87A                            loc_1B350:
0001D87A 43F9 00FF 4016             		lea	($FF4016).l,a1
0001D880 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001D886 7000                       		moveq	#0,d0
0001D888 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001D88C D040                       		add.w	d0,d0
0001D88E 41F0 0000                  		lea	(a0,d0.w),a0
0001D892 3290                       		move.w	(a0),(a1)
0001D894 3368 0002 0008             		move.w	2(a0),8(a1)
0001D89A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D8A0 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D8A6 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D8AC 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D8B2 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D8B8 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D8BE D0FC 0020                  		adda.w	#$20,a0
0001D8C2 D2FC 0048                  		adda.w	#$48,a1
0001D8C6 3290                       		move.w	(a0),(a1)
0001D8C8 3368 0002 0008             		move.w	2(a0),8(a1)
0001D8CE 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D8D4 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D8DA 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D8E0 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D8E6 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D8EC 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D8F2 D0FC 0020                  		adda.w	#$20,a0
0001D8F6 D2FC 0048                  		adda.w	#$48,a1
0001D8FA 3290                       		move.w	(a0),(a1)
0001D8FC 3368 0002 0008             		move.w	2(a0),8(a1)
0001D902 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D908 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D90E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D914 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D91A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D920 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D926 D0FC 0020                  		adda.w	#$20,a0
0001D92A D2FC 0048                  		adda.w	#$48,a1
0001D92E 3290                       		move.w	(a0),(a1)
0001D930 3368 0002 0008             		move.w	2(a0),8(a1)
0001D936 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D93C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D942 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D948 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D94E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D954 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D95A D0FC 0020                  		adda.w	#$20,a0
0001D95E D2FC 0048                  		adda.w	#$48,a1
0001D962 4E75                       		rts	
0001D964                            ; End of function SS_AniWallsRings
0001D964                            
0001D964                            SS_LoadWalls:
0001D964 7000                       		moveq	#0,d0
0001D966 1038 F780                  		move.b	($FFFFF780).w,d0	; get the Special Stage angle
0001D96A E408                       		lsr.b	#2,d0			; modify so it can be used as a frame ID
0001D96C 0240 000F                  		andi.w	#$F,d0
0001D970 B038 FFF9                  		cmp.b	(v_ssangleprev).w,d0	; does the modified angle match the recorded value?
0001D974 6700                       		beq.s	@return			; if so, branch
0001D976                            
0001D976 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D97C 43F9 0000 0000             		lea	(Art_SSWalls).l,a1	; load wall art
0001D982 3200                       		move.w	d0,d1
0001D984 E149                       		lsl.w	#8,d1
0001D986 D241                       		add.w	d1,d1
0001D988 D2C1                       		add.w	d1,a1
0001D98A                            
0001D994                            
0001D994 323C 000F                  		move.w	#$F,d1			; number of 8x8 tiles
0001D998 4EB9 0000 0000             		jsr	LoadTiles
0001D99E 11C0 FFF9                  		move.b	d0,(v_ssangleprev).w	; record the modified angle for comparison
0001D9A2                            
0001D9A2                            	@return:
0001D9A2 4E75                       		rts
0001D9A4                            
0001D9A4                            ; ===========================================================================
0001D9A4 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001D9B4 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001D9C4 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001D9D4 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001D9E4 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001D9F4 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001DA04 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001DA14 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001DA24                            ; ---------------------------------------------------------------------------
0001DA24                            ; Subroutine to	remove items when you collect them in the special stage
0001DA24                            ; ---------------------------------------------------------------------------
0001DA24                            
0001DA24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DA24                            
0001DA24                            
0001DA24                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001DA24 45F9 00FF 4400             		lea	($FF4400).l,a2
0001DA2A 303C 001F                  		move.w	#$1F,d0
0001DA2E                            
0001DA2E                            loc_1B4C4:
0001DA2E 4A12                       		tst.b	(a2)
0001DA30 6700                       		beq.s	locret_1B4CE
0001DA32 504A                       		addq.w	#8,a2
0001DA34 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001DA38                            
0001DA38                            locret_1B4CE:
0001DA38 4E75                       		rts	
0001DA3A                            ; End of function SS_RemoveCollectedItem
0001DA3A                            
0001DA3A                            ; ---------------------------------------------------------------------------
0001DA3A                            ; Subroutine to	animate	special	stage items when you touch them
0001DA3A                            ; ---------------------------------------------------------------------------
0001DA3A                            
0001DA3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DA3A                            
0001DA3A                            
0001DA3A                            SS_AniItems:				; XREF: SS_ShowLayout
0001DA3A 41F9 00FF 4400             		lea	($FF4400).l,a0
0001DA40 3E3C 001F                  		move.w	#$1F,d7
0001DA44                            
0001DA44                            loc_1B4DA:
0001DA44 7000                       		moveq	#0,d0
0001DA46 1010                       		move.b	(a0),d0
0001DA48 6700                       		beq.s	loc_1B4E8
0001DA4A E548                       		lsl.w	#2,d0
0001DA4C 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001DA50 4E91                       		jsr	(a1)
0001DA52                            
0001DA52                            loc_1B4E8:
0001DA52 5048                       		addq.w	#8,a0
0001DA54                            
0001DA54                            loc_1B4EA:
0001DA54 51CF FFEE                  		dbf	d7,loc_1B4DA
0001DA58                            
0001DA58 4E75                       		rts	
0001DA5A                            ; End of function SS_AniItems
0001DA5A                            
0001DA5A                            ; ===========================================================================
0001DA5A 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001DA5E 0000 0000                  		dc.l SS_AniBumper
0001DA62 0000 0000                  		dc.l SS_Ani1Up
0001DA66 0000 0000                  		dc.l SS_AniReverse
0001DA6A 0000 0000                  		dc.l SS_AniEmeraldSparks
0001DA6E 0000 0000                  		dc.l SS_AniGlassBlock
0001DA72                            ; ===========================================================================
0001DA72                            
0001DA72                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001DA72 5328 0002                  		subq.b	#1,2(a0)
0001DA76 6A00                       		bpl.s	locret_1B530
0001DA78 117C 0005 0002             		move.b	#5,2(a0)
0001DA7E 7000                       		moveq	#0,d0
0001DA80 1028 0003                  		move.b	3(a0),d0
0001DA84 5228 0003                  		addq.b	#1,3(a0)
0001DA88 2268 0004                  		movea.l	4(a0),a1
0001DA8C 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001DA90 1280                       		move.b	d0,(a1)
0001DA92 6600                       		bne.s	locret_1B530
0001DA94 4290                       		clr.l	(a0)
0001DA96 42A8 0004                  		clr.l	4(a0)
0001DA9A                            
0001DA9A                            locret_1B530:
0001DA9A 4E75                       		rts	
0001DA9C                            ; ===========================================================================
0001DA9C 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001DAA2                            ; ===========================================================================
0001DAA2                            
0001DAA2                            SS_AniBumper:				; XREF: SS_AniIndex
0001DAA2 5328 0002                  		subq.b	#1,2(a0)
0001DAA6 6A00                       		bpl.s	locret_1B566
0001DAA8 117C 0007 0002             		move.b	#7,2(a0)
0001DAAE 7000                       		moveq	#0,d0
0001DAB0 1028 0003                  		move.b	3(a0),d0
0001DAB4 5228 0003                  		addq.b	#1,3(a0)
0001DAB8 2268 0004                  		movea.l	4(a0),a1
0001DABC 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001DAC0 6600                       		bne.s	loc_1B564
0001DAC2 4290                       		clr.l	(a0)
0001DAC4 42A8 0004                  		clr.l	4(a0)
0001DAC8 12BC 0025                  		move.b	#$25,(a1)
0001DACC 4E75                       		rts	
0001DACE                            ; ===========================================================================
0001DACE                            
0001DACE                            loc_1B564:
0001DACE 1280                       		move.b	d0,(a1)
0001DAD0                            
0001DAD0                            locret_1B566:
0001DAD0 4E75                       		rts	
0001DAD2                            ; ===========================================================================
0001DAD2 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001DAD8                            ; ===========================================================================
0001DAD8                            
0001DAD8                            SS_Ani1Up:				; XREF: SS_AniIndex
0001DAD8 5328 0002                  		subq.b	#1,2(a0)
0001DADC 6A00                       		bpl.s	locret_1B596
0001DADE 117C 0005 0002             		move.b	#5,2(a0)
0001DAE4 7000                       		moveq	#0,d0
0001DAE6 1028 0003                  		move.b	3(a0),d0
0001DAEA 5228 0003                  		addq.b	#1,3(a0)
0001DAEE 2268 0004                  		movea.l	4(a0),a1
0001DAF2 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001DAF6 1280                       		move.b	d0,(a1)
0001DAF8 6600                       		bne.s	locret_1B596
0001DAFA 4290                       		clr.l	(a0)
0001DAFC 42A8 0004                  		clr.l	4(a0)
0001DB00                            
0001DB00                            locret_1B596:
0001DB00 4E75                       		rts	
0001DB02                            ; ===========================================================================
0001DB02 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001DB08                            ; ===========================================================================
0001DB08                            
0001DB08                            SS_AniReverse:				; XREF: SS_AniIndex
0001DB08 5328 0002                  		subq.b	#1,2(a0)
0001DB0C 6A00                       		bpl.s	locret_1B5CC
0001DB0E 117C 0007 0002             		move.b	#7,2(a0)
0001DB14 7000                       		moveq	#0,d0
0001DB16 1028 0003                  		move.b	3(a0),d0
0001DB1A 5228 0003                  		addq.b	#1,3(a0)
0001DB1E 2268 0004                  		movea.l	4(a0),a1
0001DB22 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001DB26 6600                       		bne.s	loc_1B5CA
0001DB28 4290                       		clr.l	(a0)
0001DB2A 42A8 0004                  		clr.l	4(a0)
0001DB2E 12BC 002B                  		move.b	#$2B,(a1)
0001DB32 4E75                       		rts	
0001DB34                            ; ===========================================================================
0001DB34                            
0001DB34                            loc_1B5CA:
0001DB34 1280                       		move.b	d0,(a1)
0001DB36                            
0001DB36                            locret_1B5CC:
0001DB36 4E75                       		rts	
0001DB38                            ; ===========================================================================
0001DB38 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001DB3E                            ; ===========================================================================
0001DB3E                            
0001DB3E                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001DB3E 5328 0002                  		subq.b	#1,2(a0)
0001DB42 6A00                       		bpl.s	locret_1B60C
0001DB44 117C 0005 0002             		move.b	#5,2(a0)
0001DB4A 7000                       		moveq	#0,d0
0001DB4C 1028 0003                  		move.b	3(a0),d0
0001DB50 5228 0003                  		addq.b	#1,3(a0)
0001DB54 2268 0004                  		movea.l	4(a0),a1
0001DB58 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001DB5C 1280                       		move.b	d0,(a1)
0001DB5E 6600                       		bne.s	locret_1B60C
0001DB60 4290                       		clr.l	(a0)
0001DB62 42A8 0004                  		clr.l	4(a0)
0001DB66 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001DB6C 303C 00A8                  		move.w	#$A8,d0
0001DB70 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001DB76                            
0001DB76                            locret_1B60C:
0001DB76 4E75                       		rts	
0001DB78                            ; ===========================================================================
0001DB78 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001DB7E                            ; ===========================================================================
0001DB7E                            
0001DB7E                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001DB7E 5328 0002                  		subq.b	#1,2(a0)
0001DB82 6A00                       		bpl.s	locret_1B640
0001DB84 117C 0001 0002             		move.b	#1,2(a0)
0001DB8A 7000                       		moveq	#0,d0
0001DB8C 1028 0003                  		move.b	3(a0),d0
0001DB90 5228 0003                  		addq.b	#1,3(a0)
0001DB94 2268 0004                  		movea.l	4(a0),a1
0001DB98 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001DB9C 1280                       		move.b	d0,(a1)
0001DB9E 6600                       		bne.s	locret_1B640
0001DBA0 12A8 0004                  		move.b	4(a0),(a1)
0001DBA4 4290                       		clr.l	(a0)
0001DBA6 42A8 0004                  		clr.l	4(a0)
0001DBAA                            
0001DBAA                            locret_1B640:
0001DBAA 4E75                       		rts	
0001DBAC                            ; ===========================================================================
0001DBAC 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001DBB6                            ; ---------------------------------------------------------------------------
0001DBB6                            ; Special stage	layout pointers
0001DBB6                            ; ---------------------------------------------------------------------------
0001DBB6                            SS_LayoutIndex:
0001DBB6                            	include "_inc\Special stage layout pointers.asm"
0001DBB6                            ; ---------------------------------------------------------------------------
0001DBB6                            ; Special stage	layout pointers
0001DBB6                            ; ---------------------------------------------------------------------------
0001DBB6 0000 0000                  	dc.l SS_1
0001DBBA 0000 0000                  	dc.l SS_2
0001DBBE 0000 0000                  	dc.l SS_3
0001DBC2 0000 0000                  	dc.l SS_4
0001DBC6 0000 0000                  	dc.l SS_5
0001DBCA 0000 0000                  	dc.l SS_6
0001DBCE                            	even
0001DBCE                            	even
0001DBCE                            
0001DBCE                            ; ---------------------------------------------------------------------------
0001DBCE                            ; Special stage	start locations
0001DBCE                            ; ---------------------------------------------------------------------------
0001DBCE                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001DBE6                            		even
0001DBE6                            
0001DBE6                            ; ---------------------------------------------------------------------------
0001DBE6                            ; Subroutine to	load special stage layout
0001DBE6                            ; ---------------------------------------------------------------------------
0001DBE6                            
0001DBE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DBE6                            
0001DBE6                            
0001DBE6                            SS_Load:				; XREF: SpecialStage
0001DBE6 7000                       		moveq	#0,d0
0001DBE8 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001DBEC 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001DBF0 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001DBF6 6500                       		bcs.s	SS_ChkEmldNum
0001DBF8 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001DBFE                            
0001DBFE                            SS_ChkEmldNum:
0001DBFE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001DC04 6700                       		beq.s	SS_LoadData	; if yes, branch
0001DC06 7200                       		moveq	#0,d1
0001DC08 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001DC0C 5301                       		subq.b	#1,d1
0001DC0E 6500                       		bcs.s	SS_LoadData
0001DC10 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001DC14                            
0001DC14                            SS_ChkEmldLoop:	
0001DC14 B033 1000                  		cmp.b	(a3,d1.w),d0
0001DC18 6600                       		bne.s	SS_ChkEmldRepeat
0001DC1A 60CA                       		bra.s	SS_Load
0001DC1C                            ; ===========================================================================
0001DC1C                            
0001DC1C                            SS_ChkEmldRepeat:
0001DC1C 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001DC20                            
0001DC20                            SS_LoadData:
0001DC20 E548                       		lsl.w	#2,d0
0001DC22 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001DC26 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001DC2A 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001DC2E 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001DC32 43F9 00FF 4000             		lea	($FF4000).l,a1
0001DC38 303C 0000                  		move.w	#0,d0
0001DC3C 4EB9 0000 15FC             		jsr	(EniDec).l
0001DC42 43F9 00FF 0000             		lea	($FF0000).l,a1
0001DC48 303C 0FFF                  		move.w	#$FFF,d0
0001DC4C                            
0001DC4C                            SS_ClrRAM3:
0001DC4C 4299                       		clr.l	(a1)+
0001DC4E 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001DC52                            
0001DC52 43F9 00FF 1020             		lea	($FF1020).l,a1
0001DC58 41F9 00FF 4000             		lea	($FF4000).l,a0
0001DC5E 723F                       		moveq	#$3F,d1
0001DC60                            
0001DC60                            loc_1B6F6:
0001DC60 743F                       		moveq	#$3F,d2
0001DC62                            
0001DC62                            loc_1B6F8:
0001DC62 12D8                       		move.b	(a0)+,(a1)+
0001DC64 51CA FFFC                  		dbf	d2,loc_1B6F8
0001DC68                            
0001DC68 43E9 0040                  		lea	$40(a1),a1
0001DC6C 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001DC70                            
0001DC70 43F9 00FF 4008             		lea	($FF4008).l,a1
0001DC76 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001DC7C 724D                       		moveq	#$4D,d1
0001DC7E                            
0001DC7E                            loc_1B714:
0001DC7E 22D8                       		move.l	(a0)+,(a1)+
0001DC80 32FC 0000                  		move.w	#0,(a1)+
0001DC84 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001DC8A 32D8                       		move.w	(a0)+,(a1)+
0001DC8C 51C9 FFF0                  		dbf	d1,loc_1B714
0001DC90                            
0001DC90 43F9 00FF 4400             		lea	($FF4400).l,a1
0001DC96 323C 003F                  		move.w	#$3F,d1
0001DC9A                            
0001DC9A                            loc_1B730:
0001DC9A                            
0001DC9A 4299                       		clr.l	(a1)+
0001DC9C 51C9 FFFC                  		dbf	d1,loc_1B730
0001DCA0                            
0001DCA0 4E75                       		rts	
0001DCA2                            ; End of function SS_Load
0001DCA2                            
0001DCA2                            ; ===========================================================================
0001DCA2                            ; ---------------------------------------------------------------------------
0001DCA2                            ; Special stage	mappings and VRAM pointers
0001DCA2                            ; ---------------------------------------------------------------------------
0001DCA2                            SS_MapIndex:
0001DCA2                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001DCA2                            ; ---------------------------------------------------------------------------
0001DCA2                            ; Special stage	mappings and VRAM pointers
0001DCA2                            ; ---------------------------------------------------------------------------
0001DCA2 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001DCA6 0142                       	dc.w $142		; VRAM setting
0001DCA8 0000 0000                  	dc.l Map_SSWalls
0001DCAC 0142                       	dc.w $142
0001DCAE 0000 0000                  	dc.l Map_SSWalls
0001DCB2 0142                       	dc.w $142
0001DCB4 0000 0000                  	dc.l Map_SSWalls
0001DCB8 0142                       	dc.w $142
0001DCBA 0000 0000                  	dc.l Map_SSWalls
0001DCBE 0142                       	dc.w $142
0001DCC0 0000 0000                  	dc.l Map_SSWalls
0001DCC4 0142                       	dc.w $142
0001DCC6 0000 0000                  	dc.l Map_SSWalls
0001DCCA 0142                       	dc.w $142
0001DCCC 0000 0000                  	dc.l Map_SSWalls
0001DCD0 0142                       	dc.w $142
0001DCD2 0000 0000                  	dc.l Map_SSWalls
0001DCD6 0142                       	dc.w $142
0001DCD8 0000 0000                  	dc.l Map_SSWalls
0001DCDC 2142                       	dc.w $2142
0001DCDE 0000 0000                  	dc.l Map_SSWalls
0001DCE2 2142                       	dc.w $2142
0001DCE4 0000 0000                  	dc.l Map_SSWalls
0001DCE8 2142                       	dc.w $2142
0001DCEA 0000 0000                  	dc.l Map_SSWalls
0001DCEE 2142                       	dc.w $2142
0001DCF0 0000 0000                  	dc.l Map_SSWalls
0001DCF4 2142                       	dc.w $2142
0001DCF6 0000 0000                  	dc.l Map_SSWalls
0001DCFA 2142                       	dc.w $2142
0001DCFC 0000 0000                  	dc.l Map_SSWalls
0001DD00 2142                       	dc.w $2142
0001DD02 0000 0000                  	dc.l Map_SSWalls
0001DD06 2142                       	dc.w $2142
0001DD08 0000 0000                  	dc.l Map_SSWalls
0001DD0C 2142                       	dc.w $2142
0001DD0E 0000 0000                  	dc.l Map_SSWalls
0001DD12 4142                       	dc.w $4142
0001DD14 0000 0000                  	dc.l Map_SSWalls
0001DD18 4142                       	dc.w $4142
0001DD1A 0000 0000                  	dc.l Map_SSWalls
0001DD1E 4142                       	dc.w $4142
0001DD20 0000 0000                  	dc.l Map_SSWalls
0001DD24 4142                       	dc.w $4142
0001DD26 0000 0000                  	dc.l Map_SSWalls
0001DD2A 4142                       	dc.w $4142
0001DD2C 0000 0000                  	dc.l Map_SSWalls
0001DD30 4142                       	dc.w $4142
0001DD32 0000 0000                  	dc.l Map_SSWalls
0001DD36 4142                       	dc.w $4142
0001DD38 0000 0000                  	dc.l Map_SSWalls
0001DD3C 4142                       	dc.w $4142
0001DD3E 0000 0000                  	dc.l Map_SSWalls
0001DD42 4142                       	dc.w $4142
0001DD44 0000 0000                  	dc.l Map_SSWalls
0001DD48 6142                       	dc.w $6142
0001DD4A 0000 0000                  	dc.l Map_SSWalls
0001DD4E 6142                       	dc.w $6142
0001DD50 0000 0000                  	dc.l Map_SSWalls
0001DD54 6142                       	dc.w $6142
0001DD56 0000 0000                  	dc.l Map_SSWalls
0001DD5A 6142                       	dc.w $6142
0001DD5C 0000 0000                  	dc.l Map_SSWalls
0001DD60 6142                       	dc.w $6142
0001DD62 0000 0000                  	dc.l Map_SSWalls
0001DD66 6142                       	dc.w $6142
0001DD68 0000 0000                  	dc.l Map_SSWalls
0001DD6C 6142                       	dc.w $6142
0001DD6E 0000 0000                  	dc.l Map_SSWalls
0001DD72 6142                       	dc.w $6142
0001DD74 0000 0000                  	dc.l Map_SSWalls
0001DD78 6142                       	dc.w $6142
0001DD7A 0001 03DE                  	dc.l Map_obj47
0001DD7E 023B                       	dc.w $23B
0001DD80 0000 0000                  	dc.l Map_SS_R
0001DD84 0570                       	dc.w $570
0001DD86 0000 0000                  	dc.l Map_SS_R
0001DD8A 0251                       	dc.w $251
0001DD8C 0000 0000                  	dc.l Map_SS_R
0001DD90 0370                       	dc.w $370
0001DD92 0000 0000                  	dc.l Map_SS_Up
0001DD96 0263                       	dc.w $263
0001DD98 0000 0000                  	dc.l Map_SS_Down
0001DD9C 0263                       	dc.w $263
0001DD9E 0000 0000                  	dc.l Map_SS_R
0001DDA2 22F0                       	dc.w $22F0
0001DDA4 0000 0000                  	dc.l Map_SS_Glass
0001DDA8 0470                       	dc.w $470
0001DDAA 0000 0000                  	dc.l Map_SS_Glass
0001DDAE 05F0                       	dc.w $5F0
0001DDB0 0000 0000                  	dc.l Map_SS_Glass
0001DDB4 65F0                       	dc.w $65F0
0001DDB6 0000 0000                  	dc.l Map_SS_Glass
0001DDBA 25F0                       	dc.w $25F0
0001DDBC 0000 0000                  	dc.l Map_SS_Glass
0001DDC0 45F0                       	dc.w $45F0
0001DDC2 0000 0000                  	dc.l Map_SS_R
0001DDC6 02F0                       	dc.w $2F0
0001DDC8 0101 03DE                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001DDCC 023B                       	dc.w $23B
0001DDCE 0201 03DE                  	dc.l Map_obj47+$2000000
0001DDD2 023B                       	dc.w $23B
0001DDD4 0000 0000                  	dc.l Map_SS_R
0001DDD8 0797                       	dc.w $797
0001DDDA 0000 0000                  	dc.l Map_SS_R
0001DDDE 07A0                       	dc.w $7A0
0001DDE0 0000 0000                  	dc.l Map_SS_R
0001DDE4 07A9                       	dc.w $7A9
0001DDE6 0000 0000                  	dc.l Map_SS_R
0001DDEA 0797                       	dc.w $797
0001DDEC 0000 0000                  	dc.l Map_SS_R
0001DDF0 07A0                       	dc.w $7A0
0001DDF2 0000 0000                  	dc.l Map_SS_R
0001DDF6 07A9                       	dc.w $7A9
0001DDF8 0000 B274                  	dc.l Map_obj25
0001DDFC 222D                       	dc.w $2000+ssringart
0001DDFE 0000 0000                  	dc.l Map_SS_Chaos3
0001DE02 0770                       	dc.w $770
0001DE04 0000 0000                  	dc.l Map_SS_Chaos3
0001DE08 2770                       	dc.w $2770
0001DE0A 0000 0000                  	dc.l Map_SS_Chaos3
0001DE0E 4770                       	dc.w $4770
0001DE10 0000 0000                  	dc.l Map_SS_Chaos3
0001DE14 6770                       	dc.w $6770
0001DE16 0000 0000                  	dc.l Map_SS_Chaos1
0001DE1A 0770                       	dc.w $770
0001DE1C 0000 0000                  	dc.l Map_SS_Chaos2
0001DE20 0770                       	dc.w $770
0001DE22 0000 0000                  	dc.l Map_SS_R
0001DE26 04F0                       	dc.w $4F0
0001DE28 0400 B274                  	dc.l Map_obj25+$4000000
0001DE2C 222D                       	dc.w $2000+ssringart
0001DE2E 0500 B274                  	dc.l Map_obj25+$5000000
0001DE32 222D                       	dc.w $2000+ssringart
0001DE34 0600 B274                  	dc.l Map_obj25+$6000000
0001DE38 222D                       	dc.w $2000+ssringart
0001DE3A 0700 B274                  	dc.l Map_obj25+$7000000
0001DE3E 222D                       	dc.w $2000+ssringart
0001DE40 0000 0000                  	dc.l Map_SS_Glass
0001DE44 23F0                       	dc.w $23F0
0001DE46 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001DE4A 23F0                       	dc.w $23F0
0001DE4C 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001DE50 23F0                       	dc.w $23F0
0001DE52 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001DE56 23F0                       	dc.w $23F0
0001DE58 0000 0000                  	dc.l Map_SS_R+$2000000
0001DE5C 04F0                       	dc.w $4F0
0001DE5E 0000 0000                  	dc.l Map_SS_Glass
0001DE62 05F0                       	dc.w $5F0
0001DE64 0000 0000                  	dc.l Map_SS_Glass
0001DE68 65F0                       	dc.w $65F0
0001DE6A 0000 0000                  	dc.l Map_SS_Glass
0001DE6E 25F0                       	dc.w $25F0
0001DE70 0000 0000                  	dc.l Map_SS_Glass
0001DE74 45F0                       	dc.w $45F0
0001DE74 45F0                       	dc.w $45F0
0001DE76                            
0001DE76                            ; ---------------------------------------------------------------------------
0001DE76                            ; Sprite mappings - special stage "R" block
0001DE76                            ; ---------------------------------------------------------------------------
0001DE76                            Map_SS_R:
0001DE76                            	include "_maps\SSRblock.asm"
0001DE76                            ; ---------------------------------------------------------------------------
0001DE76                            ; Sprite mappings - special stage "R" block
0001DE76                            ; ---------------------------------------------------------------------------
0001DE76 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001DE7A 0000                       		dc.w byte_1B91E-Map_SS_R
0001DE7C 01                         byte_1B912:	dc.b 1
0001DE7D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001DE82 01                         byte_1B918:	dc.b 1
0001DE83 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001DE88 00                         byte_1B91E:	dc.b 0
0001DE8A 00                         		even
0001DE8A 00                         		even
0001DE8A                            
0001DE8A                            ; ---------------------------------------------------------------------------
0001DE8A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001DE8A                            ; ---------------------------------------------------------------------------
0001DE8A                            Map_SS_Glass:
0001DE8A                            	include "_maps\SSglassblock.asm"
0001DE8A                            ; ---------------------------------------------------------------------------
0001DE8A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001DE8A                            ; ---------------------------------------------------------------------------
0001DE8A 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001DE8E 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001DE92 01                         byte_1B928:	dc.b 1
0001DE93 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001DE98 01                         byte_1B92E:	dc.b 1
0001DE99 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001DE9E 01                         byte_1B934:	dc.b 1
0001DE9F F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001DEA4 01                         byte_1B93A:	dc.b 1
0001DEA5 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001DEAA                            		even
0001DEAA                            		even
0001DEAA                            
0001DEAA                            ; ---------------------------------------------------------------------------
0001DEAA                            ; Sprite mappings - special stage "UP" block
0001DEAA                            ; ---------------------------------------------------------------------------
0001DEAA                            Map_SS_Up:
0001DEAA                            	include "_maps\SSUPblock.asm"
0001DEAA                            ; ---------------------------------------------------------------------------
0001DEAA                            ; Sprite mappings - special stage "UP" block
0001DEAA                            ; ---------------------------------------------------------------------------
0001DEAA 0000                       		dc.w byte_1B944-Map_SS_Up
0001DEAC 0000                       		dc.w byte_1B94A-Map_SS_Up
0001DEAE 01                         byte_1B944:	dc.b 1
0001DEAF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001DEB4 01                         byte_1B94A:	dc.b 1
0001DEB5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001DEBA                            		even
0001DEBA                            		even
0001DEBA                            
0001DEBA                            ; ---------------------------------------------------------------------------
0001DEBA                            ; Sprite mappings - special stage "DOWN" block
0001DEBA                            ; ---------------------------------------------------------------------------
0001DEBA                            Map_SS_Down:
0001DEBA                            	include "_maps\SSDOWNblock.asm"
0001DEBA                            ; ---------------------------------------------------------------------------
0001DEBA                            ; Sprite mappings - special stage "DOWN" block
0001DEBA                            ; ---------------------------------------------------------------------------
0001DEBA 0000                       		dc.w byte_1B954-Map_SS_Down
0001DEBC 0000                       		dc.w byte_1B95A-Map_SS_Down
0001DEBE 01                         byte_1B954:	dc.b 1
0001DEBF F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001DEC4 01                         byte_1B95A:	dc.b 1
0001DEC5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001DECA                            		even
0001DECA                            		even
0001DECA                            
0001DECA                            ; ---------------------------------------------------------------------------
0001DECA                            ; Sprite mappings - special stage chaos	emeralds
0001DECA                            ; ---------------------------------------------------------------------------
0001DECA 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001DECC 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001DECE 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001DED0 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001DED2 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001DED4 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001DED6 01                         byte_1B96C:	dc.b 1
0001DED7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001DEDC 01                         byte_1B972:	dc.b 1
0001DEDD F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001DEE2 01                         byte_1B978:	dc.b 1
0001DEE3 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001DEE8 01                         byte_1B97E:	dc.b 1
0001DEE9 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001DEEE                            		even
0001DEEE                            ; ===========================================================================
0001DEEE                            ; ---------------------------------------------------------------------------
0001DEEE                            ; Object 09 - Sonic (special stage)
0001DEEE                            ; ---------------------------------------------------------------------------
0001DEEE                            
0001DEEE                            Obj09:					; XREF: Obj_Index
0001DEEE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001DEF2 6700                       		beq.s	Obj09_Normal	; if not, branch
0001DEF4 6100 0000                  		bsr.w	SS_FixCamera
0001DEF8 6000 0000                  		bra.w	DebugMode
0001DEFC                            ; ===========================================================================
0001DEFC                            
0001DEFC                            Obj09_Normal:
0001DEFC 7000                       		moveq	#0,d0
0001DEFE 1028 0024                  		move.b	$24(a0),d0
0001DF02 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001DF06 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001DF0A                            ; ===========================================================================
0001DF0A 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001DF0C 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001DF0E 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001DF10 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001DF12                            ; ===========================================================================
0001DF12                            
0001DF12                            Obj09_Main:				; XREF: Obj09_Index
0001DF12 5428 0024                  		addq.b	#2,$24(a0)
0001DF16 117C 000E 0016             		move.b	#$E,$16(a0)
0001DF1C 117C 0007 0017             		move.b	#7,$17(a0)
0001DF22 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001DF2A 317C 0780 0002             		move.w	#$780,2(a0)
0001DF30 117C 0004 0001             		move.b	#4,1(a0)
0001DF36 117C 0000 0018             		move.b	#0,$18(a0)
0001DF3C 117C 0002 001C             		move.b	#2,$1C(a0)
0001DF42 08E8 0002 0022             		bset	#2,$22(a0)
0001DF48 08E8 0001 0022             		bset	#1,$22(a0)
0001DF4E                            
0001DF4E                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001DF4E 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001DF52 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001DF54 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DF5A 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001DF5C 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001DF62                            
0001DF62                            Obj09_NoDebug:
0001DF62 117C 0000 0030             		move.b	#0,$30(a0)
0001DF68 7000                       		moveq	#0,d0
0001DF6A 1028 0022                  		move.b	$22(a0),d0
0001DF6E 0240 0002                  		andi.w	#2,d0
0001DF72 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001DF76 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001DF7A 4EB9 0001 56D4             		jsr	LoadSonicDynPLC
0001DF80 4EF9 0000 E96A             		jmp	DisplaySprite
0001DF86                            ; ===========================================================================
0001DF86 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001DF88 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001DF8A                            ; ===========================================================================
0001DF8A                            
0001DF8A                            Obj09_OnWall:				; XREF: Obj09_Modes
0001DF8A 6100 0000                  		bsr.w	Obj09_Jump
0001DF8E 6100 0000                  		bsr.w	Obj09_Move
0001DF92 6100 0000                  		bsr.w	Obj09_Fall
0001DF96 6000                       		bra.s	Obj09_Display
0001DF98                            ; ===========================================================================
0001DF98                            
0001DF98                            Obj09_InAir:				; XREF: Obj09_Modes
0001DF98 6100 0000                  		bsr.w	nullsub_2
0001DF9C 6100 0000                  		bsr.w	Obj09_Move
0001DFA0 6100 0000                  		bsr.w	Obj09_Fall
0001DFA4                            
0001DFA4                            Obj09_Display:				; XREF: Obj09_OnWall
0001DFA4 6100 0000                  		bsr.w	Obj09_ChkItems
0001DFA8 6100 0000                  		bsr.w	Obj09_ChkItems2
0001DFAC 4EB9 0000 E950             		jsr	SpeedToPos
0001DFB2 6100 0000                  		bsr.w	SS_FixCamera
0001DFB6 3038 F780                  		move.w	($FFFFF780).w,d0
0001DFBA D078 F782                  		add.w	($FFFFF782).w,d0
0001DFBE 31C0 F780                  		move.w	d0,($FFFFF780).w
0001DFC2 4EB9 0001 545A             		jsr	Sonic_Animate
0001DFC8 4E75                       		rts	
0001DFCA                            
0001DFCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DFCA                            
0001DFCA                            
0001DFCA                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001DFCA 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001DFD0 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001DFD2 6100 0000                  		bsr.w	Obj09_MoveLeft
0001DFD6                            
0001DFD6                            Obj09_ChkRight:
0001DFD6 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001DFDC 6700                       		beq.s	loc_1BA78	; if not, branch
0001DFDE 6100 0000                  		bsr.w	Obj09_MoveRight
0001DFE2                            
0001DFE2                            loc_1BA78:
0001DFE2 1038 F602                  		move.b	($FFFFF602).w,d0
0001DFE6 0200 000C                  		andi.b	#$C,d0
0001DFEA 6600                       		bne.s	loc_1BAA8
0001DFEC 3028 0020                  		move.w	$20(a0),d0
0001DFF0 6700                       		beq.s	loc_1BAA8
0001DFF2 6B00                       		bmi.s	loc_1BA9A
0001DFF4 0440 000C                  		subi.w	#$C,d0
0001DFF8 6400                       		bcc.s	loc_1BA94
0001DFFA 303C 0000                  		move.w	#0,d0
0001DFFE                            
0001DFFE                            loc_1BA94:
0001DFFE 3140 0020                  		move.w	d0,$20(a0)
0001E002 6000                       		bra.s	loc_1BAA8
0001E004                            ; ===========================================================================
0001E004                            
0001E004                            loc_1BA9A:
0001E004 0640 000C                  		addi.w	#$C,d0
0001E008 6400                       		bcc.s	loc_1BAA4
0001E00A 303C 0000                  		move.w	#0,d0
0001E00E                            
0001E00E                            loc_1BAA4:
0001E00E 3140 0020                  		move.w	d0,$20(a0)
0001E012                            
0001E012                            loc_1BAA8:
0001E012 1038 F780                  		move.b	($FFFFF780).w,d0
0001E016 0600 0020                  		addi.b	#$20,d0
0001E01A 0200 00C0                  		andi.b	#$C0,d0
0001E01E 4400                       		neg.b	d0
0001E020 4EB9 0000 29F6             		jsr	(CalcSine).l
0001E026 C3E8 0020                  		muls.w	$20(a0),d1
0001E02A D3A8 0008                  		add.l	d1,8(a0)
0001E02E C1E8 0020                  		muls.w	$20(a0),d0
0001E032 D1A8 000C                  		add.l	d0,$C(a0)
0001E036 48E7 C000                  		movem.l	d0-d1,-(sp)
0001E03A 2428 000C                  		move.l	$C(a0),d2
0001E03E 2628 0008                  		move.l	8(a0),d3
0001E042 6100 0000                  		bsr.w	sub_1BCE8
0001E046 6700                       		beq.s	loc_1BAF2
0001E048 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001E04C 93A8 0008                  		sub.l	d1,8(a0)
0001E050 91A8 000C                  		sub.l	d0,$C(a0)
0001E054 317C 0000 0020             		move.w	#0,$20(a0)
0001E05A 4E75                       		rts	
0001E05C                            ; ===========================================================================
0001E05C                            
0001E05C                            loc_1BAF2:
0001E05C 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001E060 4E75                       		rts	
0001E062                            ; End of function Obj09_Move
0001E062                            
0001E062                            
0001E062                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E062                            
0001E062                            
0001E062                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001E062 08E8 0000 0022             		bset	#0,$22(a0)
0001E068 3028 0020                  		move.w	$20(a0),d0
0001E06C 6700                       		beq.s	loc_1BB06
0001E06E 6A00                       		bpl.s	loc_1BB1A
0001E070                            
0001E070                            loc_1BB06:
0001E070 0440 000C                  		subi.w	#$C,d0
0001E074 0C40 F800                  		cmpi.w	#-$800,d0
0001E078 6E00                       		bgt.s	loc_1BB14
0001E07A 303C F800                  		move.w	#-$800,d0
0001E07E                            
0001E07E                            loc_1BB14:
0001E07E 3140 0020                  		move.w	d0,$20(a0)
0001E082 4E75                       		rts	
0001E084                            ; ===========================================================================
0001E084                            
0001E084                            loc_1BB1A:
0001E084 0440 0040                  		subi.w	#$40,d0
0001E088 6400                       		bcc.s	loc_1BB22
0001E08A 4E71                       		nop	
0001E08C                            
0001E08C                            loc_1BB22:
0001E08C 3140 0020                  		move.w	d0,$20(a0)
0001E090 4E75                       		rts	
0001E092                            ; End of function Obj09_MoveLeft
0001E092                            
0001E092                            
0001E092                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E092                            
0001E092                            
0001E092                            Obj09_MoveRight:			; XREF: Obj09_Move
0001E092 08A8 0000 0022             		bclr	#0,$22(a0)
0001E098 3028 0020                  		move.w	$20(a0),d0
0001E09C 6B00                       		bmi.s	loc_1BB48
0001E09E 0640 000C                  		addi.w	#$C,d0
0001E0A2 0C40 0800                  		cmpi.w	#$800,d0
0001E0A6 6D00                       		blt.s	loc_1BB42
0001E0A8 303C 0800                  		move.w	#$800,d0
0001E0AC                            
0001E0AC                            loc_1BB42:
0001E0AC 3140 0020                  		move.w	d0,$20(a0)
0001E0B0 6000                       		bra.s	locret_1BB54
0001E0B2                            ; ===========================================================================
0001E0B2                            
0001E0B2                            loc_1BB48:
0001E0B2 0640 0040                  		addi.w	#$40,d0
0001E0B6 6400                       		bcc.s	loc_1BB50
0001E0B8 4E71                       		nop	
0001E0BA                            
0001E0BA                            loc_1BB50:
0001E0BA 3140 0020                  		move.w	d0,$20(a0)
0001E0BE                            
0001E0BE                            locret_1BB54:
0001E0BE 4E75                       		rts	
0001E0C0                            ; End of function Obj09_MoveRight
0001E0C0                            
0001E0C0                            
0001E0C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E0C0                            
0001E0C0                            
0001E0C0                            Obj09_Jump:				; XREF: Obj09_OnWall
0001E0C0 1038 F603                  		move.b	($FFFFF603).w,d0
0001E0C4 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001E0C8 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001E0CA 1038 F780                  		move.b	($FFFFF780).w,d0
0001E0CE 0200 00FC                  		andi.b	#$FC,d0
0001E0D2 4400                       		neg.b	d0
0001E0D4 0400 0040                  		subi.b	#$40,d0
0001E0D8 4EB9 0000 29F6             		jsr	(CalcSine).l
0001E0DE C3FC 0680                  		muls.w	#$680,d1
0001E0E2 E081                       		asr.l	#8,d1
0001E0E4 3141 0010                  		move.w	d1,$10(a0)
0001E0E8 C1FC 0680                  		muls.w	#$680,d0
0001E0EC E080                       		asr.l	#8,d0
0001E0EE 3140 0012                  		move.w	d0,$12(a0)
0001E0F2 08E8 0001 0022             		bset	#1,$22(a0)
0001E0F8 303C 00A0                  		move.w	#$A0,d0
0001E0FC 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play jumping sound
0001E102                            
0001E102                            Obj09_NoJump:
0001E102 4E75                       		rts	
0001E104                            ; End of function Obj09_Jump
0001E104                            
0001E104                            
0001E104                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E104                            
0001E104                            
0001E104                            nullsub_2:				; XREF: Obj09_InAir
0001E104 4E75                       		rts	
0001E106                            ; End of function nullsub_2
0001E106                            
0001E106                            ; ===========================================================================
0001E106                            ; ---------------------------------------------------------------------------
0001E106                            ; unused subroutine to limit Sonic's upward vertical speed
0001E106                            ; ---------------------------------------------------------------------------
0001E106 323C FC00                  		move.w	#-$400,d1
0001E10A B268 0012                  		cmp.w	$12(a0),d1
0001E10E 6F00                       		ble.s	locret_1BBB4
0001E110 1038 F602                  		move.b	($FFFFF602).w,d0
0001E114 0200 0070                  		andi.b	#$70,d0
0001E118 6600                       		bne.s	locret_1BBB4
0001E11A 3141 0012                  		move.w	d1,$12(a0)
0001E11E                            
0001E11E                            locret_1BBB4:
0001E11E 4E75                       		rts	
0001E120                            ; ---------------------------------------------------------------------------
0001E120                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001E120                            ; ---------------------------------------------------------------------------
0001E120                            
0001E120                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E120                            
0001E120                            
0001E120                            SS_FixCamera:				; XREF: Obj09
0001E120 3428 000C                  		move.w	$C(a0),d2
0001E124 3628 0008                  		move.w	8(a0),d3
0001E128 3038 F700                  		move.w	($FFFFF700).w,d0
0001E12C 0443 00A0                  		subi.w	#$A0,d3
0001E130 6500                       		bcs.s	loc_1BBCE
0001E132 9043                       		sub.w	d3,d0
0001E134 9178 F700                  		sub.w	d0,($FFFFF700).w
0001E138                            
0001E138                            loc_1BBCE:
0001E138 3038 F704                  		move.w	($FFFFF704).w,d0
0001E13C 0442 0070                  		subi.w	#$70,d2
0001E140 6500                       		bcs.s	locret_1BBDE
0001E142 9042                       		sub.w	d2,d0
0001E144 9178 F704                  		sub.w	d0,($FFFFF704).w
0001E148                            
0001E148                            locret_1BBDE:
0001E148 4E75                       		rts	
0001E14A                            ; End of function SS_FixCamera
0001E14A                            
0001E14A                            ; ===========================================================================
0001E14A                            
0001E14A                            Obj09_ExitStage:			; XREF: Obj09_Index
0001E14A 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001E150 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001E156 6600                       		bne.s	loc_1BBF4
0001E158 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001E15E                            
0001E15E                            loc_1BBF4:
0001E15E 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001E164 6D00                       		blt.s	loc_1BC12
0001E166 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001E16C 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001E172 5428 0024                  		addq.b	#2,$24(a0)
0001E176 317C 003C 0038             		move.w	#$3C,$38(a0)
0001E17C                            
0001E17C                            loc_1BC12:
0001E17C 3038 F780                  		move.w	($FFFFF780).w,d0
0001E180 D078 F782                  		add.w	($FFFFF782).w,d0
0001E184 31C0 F780                  		move.w	d0,($FFFFF780).w
0001E188 4EB9 0001 545A             		jsr	Sonic_Animate
0001E18E 4EB9 0001 56D4             		jsr	LoadSonicDynPLC
0001E194 6100 FF8A                  		bsr.w	SS_FixCamera
0001E198 4EF9 0000 E96A             		jmp	DisplaySprite
0001E19E                            ; ===========================================================================
0001E19E                            
0001E19E                            Obj09_Exit2:				; XREF: Obj09_Index
0001E19E 5368 0038                  		subq.w	#1,$38(a0)
0001E1A2 6600                       		bne.s	loc_1BC40
0001E1A4 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001E1AA                            
0001E1AA                            loc_1BC40:
0001E1AA 4EB9 0001 545A             		jsr	Sonic_Animate
0001E1B0 4EB9 0001 56D4             		jsr	LoadSonicDynPLC
0001E1B6 6100 FF68                  		bsr.w	SS_FixCamera
0001E1BA 4EF9 0000 E96A             		jmp	DisplaySprite
0001E1C0                            
0001E1C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E1C0                            
0001E1C0                            
0001E1C0                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001E1C0 2428 000C                  		move.l	$C(a0),d2
0001E1C4 2628 0008                  		move.l	8(a0),d3
0001E1C8 1038 F780                  		move.b	($FFFFF780).w,d0
0001E1CC 0200 00FC                  		andi.b	#$FC,d0
0001E1D0 4EB9 0000 29F6             		jsr	(CalcSine).l
0001E1D6 3828 0010                  		move.w	$10(a0),d4
0001E1DA 48C4                       		ext.l	d4
0001E1DC E184                       		asl.l	#8,d4
0001E1DE C1FC 002A                  		muls.w	#$2A,d0
0001E1E2 D084                       		add.l	d4,d0
0001E1E4 3828 0012                  		move.w	$12(a0),d4
0001E1E8 48C4                       		ext.l	d4
0001E1EA E184                       		asl.l	#8,d4
0001E1EC C3FC 002A                  		muls.w	#$2A,d1
0001E1F0 D284                       		add.l	d4,d1
0001E1F2 D680                       		add.l	d0,d3
0001E1F4 6100 0000                  		bsr.w	sub_1BCE8
0001E1F8 6700                       		beq.s	loc_1BCB0
0001E1FA 9680                       		sub.l	d0,d3
0001E1FC 7000                       		moveq	#0,d0
0001E1FE 3140 0010                  		move.w	d0,$10(a0)
0001E202 08A8 0001 0022             		bclr	#1,$22(a0)
0001E208 D481                       		add.l	d1,d2
0001E20A 6100 0000                  		bsr.w	sub_1BCE8
0001E20E 6700                       		beq.s	loc_1BCC6
0001E210 9481                       		sub.l	d1,d2
0001E212 7200                       		moveq	#0,d1
0001E214 3141 0012                  		move.w	d1,$12(a0)
0001E218 4E75                       		rts	
0001E21A                            ; ===========================================================================
0001E21A                            
0001E21A                            loc_1BCB0:
0001E21A D481                       		add.l	d1,d2
0001E21C 6100 0000                  		bsr.w	sub_1BCE8
0001E220 6700                       		beq.s	loc_1BCD4
0001E222 9481                       		sub.l	d1,d2
0001E224 7200                       		moveq	#0,d1
0001E226 3141 0012                  		move.w	d1,$12(a0)
0001E22A 08A8 0001 0022             		bclr	#1,$22(a0)
0001E230                            
0001E230                            loc_1BCC6:
0001E230 E080                       		asr.l	#8,d0
0001E232 E081                       		asr.l	#8,d1
0001E234 3140 0010                  		move.w	d0,$10(a0)
0001E238 3141 0012                  		move.w	d1,$12(a0)
0001E23C 4E75                       		rts	
0001E23E                            ; ===========================================================================
0001E23E                            
0001E23E                            loc_1BCD4:
0001E23E E080                       		asr.l	#8,d0
0001E240 E081                       		asr.l	#8,d1
0001E242 3140 0010                  		move.w	d0,$10(a0)
0001E246 3141 0012                  		move.w	d1,$12(a0)
0001E24A 08E8 0001 0022             		bset	#1,$22(a0)
0001E250 4E75                       		rts	
0001E252                            ; End of function Obj09_Fall
0001E252                            
0001E252                            
0001E252                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E252                            
0001E252                            
0001E252                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001E252 43F9 00FF 0000             		lea	($FF0000).l,a1
0001E258 7800                       		moveq	#0,d4
0001E25A 4842                       		swap	d2
0001E25C 3802                       		move.w	d2,d4
0001E25E 4842                       		swap	d2
0001E260 0644 0044                  		addi.w	#$44,d4
0001E264 88FC 0018                  		divu.w	#$18,d4
0001E268 C8FC 0080                  		mulu.w	#$80,d4
0001E26C D3C4                       		adda.l	d4,a1
0001E26E 7800                       		moveq	#0,d4
0001E270 4843                       		swap	d3
0001E272 3803                       		move.w	d3,d4
0001E274 4843                       		swap	d3
0001E276 0644 0014                  		addi.w	#$14,d4
0001E27A 88FC 0018                  		divu.w	#$18,d4
0001E27E D2C4                       		adda.w	d4,a1
0001E280 7A00                       		moveq	#0,d5
0001E282 1819                       		move.b	(a1)+,d4
0001E284 6100                       		bsr.s	sub_1BD30
0001E286 1819                       		move.b	(a1)+,d4
0001E288 6100                       		bsr.s	sub_1BD30
0001E28A D2FC 007E                  		adda.w	#$7E,a1
0001E28E 1819                       		move.b	(a1)+,d4
0001E290 6100                       		bsr.s	sub_1BD30
0001E292 1819                       		move.b	(a1)+,d4
0001E294 6100                       		bsr.s	sub_1BD30
0001E296 4A05                       		tst.b	d5
0001E298 4E75                       		rts	
0001E29A                            ; End of function sub_1BCE8
0001E29A                            
0001E29A                            
0001E29A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E29A                            
0001E29A                            
0001E29A                            sub_1BD30:				; XREF: sub_1BCE8
0001E29A 6700                       		beq.s	locret_1BD44
0001E29C 0C04 0028                  		cmpi.b	#$28,d4
0001E2A0 6700                       		beq.s	locret_1BD44
0001E2A2 0C04 003A                  		cmpi.b	#$3A,d4
0001E2A6 6500                       		bcs.s	loc_1BD46
0001E2A8 0C04 004B                  		cmpi.b	#$4B,d4
0001E2AC 6400                       		bcc.s	loc_1BD46
0001E2AE                            
0001E2AE                            locret_1BD44:
0001E2AE 4E75                       		rts	
0001E2B0                            ; ===========================================================================
0001E2B0                            
0001E2B0                            loc_1BD46:
0001E2B0 1144 0030                  		move.b	d4,$30(a0)
0001E2B4 2149 0032                  		move.l	a1,$32(a0)
0001E2B8 7AFF                       		moveq	#-1,d5
0001E2BA 4E75                       		rts	
0001E2BC                            ; End of function sub_1BD30
0001E2BC                            
0001E2BC                            
0001E2BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E2BC                            
0001E2BC                            
0001E2BC                            Obj09_ChkItems:				; XREF: Obj09_Display
0001E2BC 43F9 00FF 0000             		lea	($FF0000).l,a1
0001E2C2 7800                       		moveq	#0,d4
0001E2C4 3828 000C                  		move.w	$C(a0),d4
0001E2C8 0644 0050                  		addi.w	#$50,d4
0001E2CC 88FC 0018                  		divu.w	#$18,d4
0001E2D0 C8FC 0080                  		mulu.w	#$80,d4
0001E2D4 D3C4                       		adda.l	d4,a1
0001E2D6 7800                       		moveq	#0,d4
0001E2D8 3828 0008                  		move.w	8(a0),d4
0001E2DC 0644 0020                  		addi.w	#$20,d4
0001E2E0 88FC 0018                  		divu.w	#$18,d4
0001E2E4 D2C4                       		adda.w	d4,a1
0001E2E6 1811                       		move.b	(a1),d4
0001E2E8 6600                       		bne.s	Obj09_ChkCont
0001E2EA 4A28 003A                  		tst.b	$3A(a0)
0001E2EE 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001E2F2 7800                       		moveq	#0,d4
0001E2F4 4E75                       		rts	
0001E2F6                            ; ===========================================================================
0001E2F6                            
0001E2F6                            Obj09_ChkCont:
0001E2F6 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001E2FA 6600                       		bne.s	Obj09_Chk1Up
0001E2FC 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001E300 6600                       		bne.s	Obj09_GetCont
0001E302 14BC 0001                  		move.b	#1,(a2)
0001E306 2549 0004                  		move.l	a1,4(a2)
0001E30A                            
0001E30A                            Obj09_GetCont:
0001E30A 4EB9 0000 AF1C             		jsr	CollectRing
0001E310 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001E316 6500                       		bcs.s	Obj09_NoCont
0001E318 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001E31E 6600                       		bne.s	Obj09_NoCont
0001E320 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001E326 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001E32C 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001E330 303C 00BF                  		move.w	#$BF,d0
0001E334 4EB9 0000 121A             		jsr	(PlaySound).l	; play extra continue sound
0001E33A                            
0001E33A                            Obj09_NoCont:
0001E33A 7800                       		moveq	#0,d4
0001E33C 4E75                       		rts	
0001E33E                            ; ===========================================================================
0001E33E                            
0001E33E                            Obj09_Chk1Up:
0001E33E 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001E342 6600                       		bne.s	Obj09_ChkEmer
0001E344 6100 F6DE                  		bsr.w	SS_RemoveCollectedItem
0001E348 6600                       		bne.s	Obj09_Get1Up
0001E34A 14BC 0003                  		move.b	#3,(a2)
0001E34E 2549 0004                  		move.l	a1,4(a2)
0001E352                            
0001E352                            Obj09_Get1Up:
0001E352 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001E356 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001E35A 303C 0088                  		move.w	#$88,d0
0001E35E 4EB9 0000 121A             		jsr	(PlaySound).l	; play extra life music
0001E364 7800                       		moveq	#0,d4
0001E366 4E75                       		rts	
0001E368                            ; ===========================================================================
0001E368                            
0001E368                            Obj09_ChkEmer:
0001E368 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001E36C 6500                       		bcs.s	Obj09_ChkGhost
0001E36E 0C04 0040                  		cmpi.b	#$40,d4
0001E372 6200                       		bhi.s	Obj09_ChkGhost
0001E374 6100 F6AE                  		bsr.w	SS_RemoveCollectedItem
0001E378 6600                       		bne.s	Obj09_GetEmer
0001E37A 14BC 0005                  		move.b	#5,(a2)
0001E37E 2549 0004                  		move.l	a1,4(a2)
0001E382                            
0001E382                            Obj09_GetEmer:
0001E382 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001E388 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001E38A 0404 003B                  		subi.b	#$3B,d4
0001E38E 7000                       		moveq	#0,d0
0001E390 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001E394 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001E398 1584 0000                  		move.b	d4,(a2,d0.w)
0001E39C 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001E3A0 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001E3A6 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001E3AC                            
0001E3AC                            Obj09_NoEmer:
0001E3AC 303C 0093                  		move.w	#$93,d0
0001E3B0 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play emerald music
0001E3B6 7800                       		moveq	#0,d4
0001E3B8 4E75                       		rts	
0001E3BA                            ; ===========================================================================
0001E3BA                            
0001E3BA                            Obj09_ChkGhost:
0001E3BA 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001E3BE 6600                       		bne.s	Obj09_ChkGhostTag
0001E3C0 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001E3C6                            
0001E3C6                            Obj09_ChkGhostTag:
0001E3C6 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001E3CA 6600                       		bne.s	Obj09_NoGhost
0001E3CC 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001E3D2 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001E3D4 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001E3DA                            
0001E3DA                            Obj09_NoGhost:
0001E3DA 78FF                       		moveq	#-1,d4
0001E3DC 4E75                       		rts	
0001E3DE                            ; ===========================================================================
0001E3DE                            
0001E3DE                            Obj09_MakeGhostSolid:
0001E3DE 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001E3E4 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001E3E6 43F9 00FF 1020             		lea	($FF1020).l,a1
0001E3EC 723F                       		moveq	#$3F,d1
0001E3EE                            
0001E3EE                            Obj09_GhostLoop2:
0001E3EE 743F                       		moveq	#$3F,d2
0001E3F0                            
0001E3F0                            Obj09_GhostLoop:
0001E3F0 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001E3F4 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001E3F6 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001E3FA                            
0001E3FA                            Obj09_NoReplace:
0001E3FA 5249                       		addq.w	#1,a1
0001E3FC 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001E400 43E9 0040                  		lea	$40(a1),a1
0001E404 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001E408                            
0001E408                            Obj09_GhostNotSolid:
0001E408 4228 003A                  		clr.b	$3A(a0)
0001E40C 7800                       		moveq	#0,d4
0001E40E 4E75                       		rts	
0001E410                            ; End of function Obj09_ChkItems
0001E410                            
0001E410                            
0001E410                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E410                            
0001E410                            
0001E410                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001E410 1028 0030                  		move.b	$30(a0),d0
0001E414 6600                       		bne.s	Obj09_ChkBumper
0001E416 5328 0036                  		subq.b	#1,$36(a0)
0001E41A 6A00                       		bpl.s	loc_1BEA0
0001E41C 117C 0000 0036             		move.b	#0,$36(a0)
0001E422                            
0001E422                            loc_1BEA0:
0001E422 5328 0037                  		subq.b	#1,$37(a0)
0001E426 6A00                       		bpl.s	locret_1BEAC
0001E428 117C 0000 0037             		move.b	#0,$37(a0)
0001E42E                            
0001E42E                            locret_1BEAC:
0001E42E 4E75                       		rts	
0001E430                            ; ===========================================================================
0001E430                            
0001E430                            Obj09_ChkBumper:
0001E430 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001E434 6600                       		bne.s	Obj09_GOAL	
0001E436 11FC 0008 F5CE             		move.b	#face_confused,(SonimeSST+sonime_face).w
0001E43C 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0001E442 2228 0032                  		move.l	$32(a0),d1
0001E446 0481 00FF 0001             		subi.l	#$FF0001,d1
0001E44C 3401                       		move.w	d1,d2
0001E44E 0241 007F                  		andi.w	#$7F,d1
0001E452 C2FC 0018                  		mulu.w	#$18,d1
0001E456 0441 0014                  		subi.w	#$14,d1
0001E45A EE4A                       		lsr.w	#7,d2
0001E45C 0242 007F                  		andi.w	#$7F,d2
0001E460 C4FC 0018                  		mulu.w	#$18,d2
0001E464 0442 0044                  		subi.w	#$44,d2
0001E468 9268 0008                  		sub.w	8(a0),d1
0001E46C 9468 000C                  		sub.w	$C(a0),d2
0001E470 4EB9 0000 2CBE             		jsr	(CalcAngle).l
0001E476 4EB9 0000 29F6             		jsr	(CalcSine).l
0001E47C C3FC F900                  		muls.w	#-$700,d1
0001E480 E081                       		asr.l	#8,d1
0001E482 3141 0010                  		move.w	d1,$10(a0)
0001E486 C1FC F900                  		muls.w	#-$700,d0
0001E48A E080                       		asr.l	#8,d0
0001E48C 3140 0012                  		move.w	d0,$12(a0)
0001E490 08E8 0001 0022             		bset	#1,$22(a0)
0001E496 6100 F58C                  		bsr.w	SS_RemoveCollectedItem
0001E49A 6600                       		bne.s	Obj09_BumpSnd
0001E49C 14BC 0002                  		move.b	#2,(a2)
0001E4A0 2028 0032                  		move.l	$32(a0),d0
0001E4A4 5380                       		subq.l	#1,d0
0001E4A6 2540 0004                  		move.l	d0,4(a2)
0001E4AA                            
0001E4AA                            Obj09_BumpSnd:
0001E4AA 303C 00B4                  		move.w	#$B4,d0
0001E4AE 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play bumper sound
0001E4B4                            ; ===========================================================================
0001E4B4                            
0001E4B4                            Obj09_GOAL:
0001E4B4 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001E4B8 6600                       		bne.s	Obj09_UPblock
0001E4BA 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001E4BE 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
0001E4C4 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001E4CA 303C 00A8                  		move.w	#$A8,d0		; change item
0001E4CE 4EB9 0000 1220             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001E4D4 4E75                       		rts	
0001E4D6                            ; ===========================================================================
0001E4D6                            
0001E4D6                            Obj09_UPblock:
0001E4D6 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001E4DA 6600                       		bne.s	Obj09_DOWNblock
0001E4DC 4A28 0036                  		tst.b	$36(a0)
0001E4E0 6600 0000                  		bne.w	Obj09_NoGlass
0001E4E4 117C 001E 0036             		move.b	#$1E,$36(a0)
0001E4EA 0838 0006 F783             		btst	#6,($FFFFF783).w
0001E4F0 6700                       		beq.s	Obj09_UPsnd
0001E4F2 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001E4F6 2268 0032                  		movea.l	$32(a0),a1
0001E4FA 5389                       		subq.l	#1,a1
0001E4FC 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001E500                            
0001E500                            Obj09_UPsnd:
0001E500 303C 00A9                  		move.w	#$A9,d0
0001E504 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play up/down sound
0001E50A                            ; ===========================================================================
0001E50A                            
0001E50A                            Obj09_DOWNblock:
0001E50A 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001E50E 6600                       		bne.s	Obj09_Rblock
0001E510 4A28 0036                  		tst.b	$36(a0)
0001E514 6600 0000                  		bne.w	Obj09_NoGlass
0001E518 117C 001E 0036             		move.b	#$1E,$36(a0)
0001E51E 0838 0006 F783             		btst	#6,($FFFFF783).w
0001E524 6600                       		bne.s	Obj09_DOWNsnd
0001E526 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001E52A 2268 0032                  		movea.l	$32(a0),a1
0001E52E 5389                       		subq.l	#1,a1
0001E530 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001E534                            
0001E534                            Obj09_DOWNsnd:
0001E534 303C 00A9                  		move.w	#$A9,d0
0001E538 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play up/down sound
0001E53E                            ; ===========================================================================
0001E53E                            
0001E53E                            Obj09_Rblock:
0001E53E 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001E542 6600                       		bne.s	Obj09_ChkGlass
0001E544 4A28 0037                  		tst.b	$37(a0)
0001E548 6600 0000                  		bne.w	Obj09_NoGlass
0001E54C 117C 001E 0037             		move.b	#$1E,$37(a0)
0001E552 6100 F4D0                  		bsr.w	SS_RemoveCollectedItem
0001E556 6600                       		bne.s	Obj09_RevStage
0001E558 14BC 0004                  		move.b	#4,(a2)
0001E55C 2028 0032                  		move.l	$32(a0),d0
0001E560 5380                       		subq.l	#1,d0
0001E562 2540 0004                  		move.l	d0,4(a2)
0001E566                            
0001E566                            Obj09_RevStage:
0001E566 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001E56A 303C 00A9                  		move.w	#$A9,d0
0001E56E 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play sound
0001E574                            ; ===========================================================================
0001E574                            
0001E574                            Obj09_ChkGlass:
0001E574 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001E578 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001E57A 0C00 002E                  		cmpi.b	#$2E,d0
0001E57E 6700                       		beq.s	Obj09_Glass
0001E580 0C00 002F                  		cmpi.b	#$2F,d0
0001E584 6700                       		beq.s	Obj09_Glass
0001E586 0C00 0030                  		cmpi.b	#$30,d0
0001E58A 6600 0000                  		bne.w	Obj09_NoGlass	; if not, branch
0001E58E                            
0001E58E                            Obj09_Glass:
0001E58E 0C38 0007 F5CE             		cmpi.b	#face_happy,(SonimeSST+sonime_face).w
0001E594 6700                       		beq.s	@happy
0001E596 11FC 000B F5CE             		move.b	#face_impatient,(SonimeSST+sonime_face).w
0001E59C 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0001E5A2 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeImpatient		
0001E608                            
0001E608                            	@happy:
0001E608 6100 F41A                  		bsr.w	SS_RemoveCollectedItem
0001E60C 6600                       		bne.s	Obj09_GlassSnd
0001E60E 14BC 0006                  		move.b	#6,(a2)
0001E612 2268 0032                  		movea.l	$32(a0),a1
0001E616 5389                       		subq.l	#1,a1
0001E618 2549 0004                  		move.l	a1,4(a2)
0001E61C 1011                       		move.b	(a1),d0
0001E61E 5200                       		addq.b	#1,d0		; change glass type when touched
0001E620 0C00 0030                  		cmpi.b	#$30,d0
0001E624 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001E626 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001E628                            
0001E628                            Obj09_GlassUpdate:
0001E628 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001E62C                            
0001E62C                            Obj09_GlassSnd:
0001E62C 303C 00BA                  		move.w	#$BA,d0
0001E630 4EF9 0000 1220             		jmp	(PlaySound_Special).l ;	play glass block sound
0001E636                            ; ===========================================================================
0001E636                            
0001E636                            Obj09_NoGlass:
0001E636 4E75                       		rts	
0001E638                            ; End of function Obj09_ChkItems2
0001E638                            
0001E638                            ; ===========================================================================
0001E638                            ; ---------------------------------------------------------------------------
0001E638                            ; Object 10 - blank
0001E638                            ; ---------------------------------------------------------------------------
0001E638                            
0001E638                            Obj10:					; XREF: Obj_Index
0001E638 4E75                       		rts	
0001E63A                            ; ---------------------------------------------------------------------------
0001E63A                            ; Subroutine to	animate	level graphics
0001E63A                            ; ---------------------------------------------------------------------------
0001E63A                            
0001E63A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E63A                            
0001E63A                            
0001E63A                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001E63A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001E63E 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001E640 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E646 6100 0000                  		bsr.w	AniArt_GiantRing
0001E64A 7000                       		moveq	#0,d0
0001E64C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001E650 D040                       		add.w	d0,d0
0001E652 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001E656 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001E65A                            ; ===========================================================================
0001E65A                            
0001E65A                            AniArt_Pause:
0001E65A 4E75                       		rts	
0001E65C                            ; End of function AniArt_Load
0001E65C                            
0001E65C                            ; ===========================================================================
0001E65C 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001E660 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001E664 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001E668 0000                       		dc.w AniArt_Ending-AniArt_Index
0001E66A                            ; ===========================================================================
0001E66A                            ; ---------------------------------------------------------------------------
0001E66A                            ; Animated pattern routine - Green Hill
0001E66A                            ; ---------------------------------------------------------------------------
0001E66A                            
0001E66A                            AniArt_GHZ:				; XREF: AniArt_Index
0001E66A 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E66E 6A00                       		bpl.s	loc_1C08A
0001E670 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001E676 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001E67C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E680 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E684 0240 0001                  		andi.w	#1,d0
0001E688 6700                       		beq.s	loc_1C078
0001E68A 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001E68E                            
0001E68E                            loc_1C078:
0001E68E 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001E698 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001E69C 6000 0000                  		bra.w	LoadTiles
0001E6A0                            ; ===========================================================================
0001E6A0                            
0001E6A0                            loc_1C08A:
0001E6A0 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E6A4 6A00                       		bpl.s	loc_1C0C0
0001E6A6 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001E6AC 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001E6B2 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E6B6 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E6BA 0240 0001                  		andi.w	#1,d0
0001E6BE 6700                       		beq.s	loc_1C0AE
0001E6C0 43E9 0200                  		lea	$200(a1),a1
0001E6C4                            
0001E6C4                            loc_1C0AE:
0001E6C4 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001E6CE 323C 000F                  		move.w	#$F,d1
0001E6D2 6000 0000                  		bra.w	LoadTiles
0001E6D6                            ; ===========================================================================
0001E6D6                            
0001E6D6                            loc_1C0C0:
0001E6D6 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E6DA 6A00                       		bpl.s	locret_1C10C
0001E6DC 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E6E2 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001E6E6 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001E6EA 0240 0003                  		andi.w	#3,d0
0001E6EE 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001E6F2 0800 0000                  		btst	#0,d0
0001E6F6 6600                       		bne.s	loc_1C0E8
0001E6F8 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001E6FE                            
0001E6FE                            loc_1C0E8:
0001E6FE EF48                       		lsl.w	#7,d0
0001E700 3200                       		move.w	d0,d1
0001E702 D040                       		add.w	d0,d0
0001E704 D041                       		add.w	d1,d0
0001E706 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001E710 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001E716 43F1 0000                  		lea	(a1,d0.w),a1
0001E71A 323C 000B                  		move.w	#$B,d1
0001E71E 6100 0000                  		bsr.w	LoadTiles
0001E722                            
0001E722                            locret_1C10C:
0001E722 4E75                       		rts	
0001E724                            ; ===========================================================================
0001E724 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001E728                            ; ===========================================================================
0001E728                            ; ---------------------------------------------------------------------------
0001E728                            ; Animated pattern routine - Marble
0001E728                            ; ---------------------------------------------------------------------------
0001E728                            
0001E728                            AniArt_MZ:				; XREF: AniArt_Index
0001E728 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E72C 6A00                       		bpl.s	loc_1C150
0001E72E 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001E734 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001E73A 7000                       		moveq	#0,d0
0001E73C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E740 5200                       		addq.b	#1,d0
0001E742 0C00 0003                  		cmpi.b	#3,d0
0001E746 6600                       		bne.s	loc_1C134
0001E748 7000                       		moveq	#0,d0
0001E74A                            
0001E74A                            loc_1C134:
0001E74A 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001E74E C0FC 0100                  		mulu.w	#$100,d0
0001E752 D2C0                       		adda.w	d0,a1
0001E754 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001E75E 323C 0007                  		move.w	#7,d1
0001E762 6100 0000                  		bsr.w	LoadTiles
0001E766                            
0001E766                            loc_1C150:
0001E766 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E76A 6A00                       		bpl.s	loc_1C1AE
0001E76C 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001E772 7000                       		moveq	#0,d0
0001E774 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E778 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001E77E EE58                       		ror.w	#7,d0
0001E780 D8C0                       		adda.w	d0,a4
0001E782 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001E78C 7600                       		moveq	#0,d3
0001E78E 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001E792 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E796 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001E79A 343C 0003                  		move.w	#3,d2
0001E79E                            
0001E79E                            loc_1C188:
0001E79E 3003                       		move.w	d3,d0
0001E7A0 D040                       		add.w	d0,d0
0001E7A2 0240 001E                  		andi.w	#$1E,d0
0001E7A6 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001E7AC 3033 0000                  		move.w	(a3,d0.w),d0
0001E7B0 47F3 0000                  		lea	(a3,d0.w),a3
0001E7B4 224C                       		movea.l	a4,a1
0001E7B6 323C 001F                  		move.w	#$1F,d1
0001E7BA 4E93                       		jsr	(a3)
0001E7BC 5843                       		addq.w	#4,d3
0001E7BE 51CA FFDE                  		dbf	d2,loc_1C188
0001E7C2 4E75                       		rts	
0001E7C4                            ; ===========================================================================
0001E7C4                            
0001E7C4                            loc_1C1AE:
0001E7C4 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E7C8 6A00 0000                  		bpl.w	locret_1C1EA
0001E7CC 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E7D2 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001E7D8 7000                       		moveq	#0,d0
0001E7DA 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001E7DE 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001E7E2 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001E7E8 C0FC 00C0                  		mulu.w	#$C0,d0
0001E7EC D2C0                       		adda.w	d0,a1
0001E7EE 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001E7F8 323C 0005                  		move.w	#5,d1
0001E7FC 6000 0000                  		bra.w	LoadTiles
0001E800                            ; ===========================================================================
0001E800                            
0001E800                            locret_1C1EA:
0001E800 4E75                       		rts	
0001E802                            ; ===========================================================================
0001E802                            ; ---------------------------------------------------------------------------
0001E802                            ; Animated pattern routine - Scrap Brain
0001E802                            ; ---------------------------------------------------------------------------
0001E802                            
0001E802                            AniArt_SBZ:				; XREF: AniArt_Index
0001E802 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001E806 6700                       		beq.s	loc_1C1F8
0001E808 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001E80C 6000                       		bra.s	loc_1C250
0001E80E                            ; ===========================================================================
0001E80E                            
0001E80E                            loc_1C1F8:
0001E80E 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E812 6A00                       		bpl.s	loc_1C250
0001E814 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001E81A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001E820 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001E82A 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E82E 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E832 0240 0007                  		andi.w	#7,d0
0001E836 6700                       		beq.s	loc_1C234
0001E838 5340                       		subq.w	#1,d0
0001E83A C0FC 0180                  		mulu.w	#$180,d0
0001E83E 43F1 0000                  		lea	(a1,d0.w),a1
0001E842 323C 000B                  		move.w	#$B,d1
0001E846 6000 0000                  		bra.w	LoadTiles
0001E84A                            ; ===========================================================================
0001E84A                            
0001E84A                            loc_1C234:
0001E84A 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001E850                            
0001E850                            loc_1C23A:
0001E850 323C 0005                  		move.w	#5,d1
0001E854 6100 0000                  		bsr.w	LoadTiles
0001E858 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001E85E 323C 0005                  		move.w	#5,d1
0001E862 6000 0000                  		bra.w	LoadTiles
0001E866                            ; ===========================================================================
0001E866                            
0001E866                            loc_1C250:
0001E866 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001E86A 6700                       		beq.s	loc_1C25C
0001E86C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E870 6000                       		bra.s	locret_1C2A0
0001E872                            ; ===========================================================================
0001E872                            
0001E872                            loc_1C25C:
0001E872 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E876 6A00                       		bpl.s	locret_1C2A0
0001E878 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001E87E 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001E884 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001E88E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E892 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E896 0240 0007                  		andi.w	#7,d0
0001E89A 6700                       		beq.s	loc_1C298
0001E89C 5340                       		subq.w	#1,d0
0001E89E C0FC 0180                  		mulu.w	#$180,d0
0001E8A2 43F1 0000                  		lea	(a1,d0.w),a1
0001E8A6 323C 000B                  		move.w	#$B,d1
0001E8AA 6000 0000                  		bra.w	LoadTiles
0001E8AE                            ; ===========================================================================
0001E8AE                            
0001E8AE                            loc_1C298:
0001E8AE 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001E8B4 609A                       		bra.s	loc_1C23A
0001E8B6                            ; ===========================================================================
0001E8B6                            
0001E8B6                            locret_1C2A0:
0001E8B6 4E75                       		rts	
0001E8B8                            ; ===========================================================================
0001E8B8                            ; ---------------------------------------------------------------------------
0001E8B8                            ; Animated pattern routine - ending sequence
0001E8B8                            ; ---------------------------------------------------------------------------
0001E8B8                            
0001E8B8                            AniArt_Ending:				; XREF: AniArt_Index
0001E8B8 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E8BC 6A00                       		bpl.s	loc_1C2F4
0001E8BE 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001E8C4 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001E8CA 45F8 9400                  		lea	($FFFF9400).w,a2
0001E8CE 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E8D2 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E8D6 0240 0001                  		andi.w	#1,d0
0001E8DA 6700                       		beq.s	loc_1C2CE
0001E8DC 43E9 0200                  		lea	$200(a1),a1
0001E8E0 45EA 0200                  		lea	$200(a2),a2
0001E8E4                            
0001E8E4                            loc_1C2CE:
0001E8E4 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001E8EE 323C 000F                  		move.w	#$F,d1
0001E8F2 6100 0000                  		bsr.w	LoadTiles
0001E8F6 224A                       		movea.l	a2,a1
0001E8F8 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001E902 323C 000F                  		move.w	#$F,d1
0001E906 6000 0000                  		bra.w	LoadTiles
0001E90A                            ; ===========================================================================
0001E90A                            
0001E90A                            loc_1C2F4:
0001E90A 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E90E 6A00                       		bpl.s	loc_1C33C
0001E910 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E916 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001E91A 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001E91E 0240 0007                  		andi.w	#7,d0
0001E922 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001E926 EF48                       		lsl.w	#7,d0
0001E928 3200                       		move.w	d0,d1
0001E92A D040                       		add.w	d0,d0
0001E92C D041                       		add.w	d1,d0
0001E92E 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001E938 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001E93E 43F1 0000                  		lea	(a1,d0.w),a1
0001E942 323C 000B                  		move.w	#$B,d1
0001E946 6000 0000                  		bra.w	LoadTiles
0001E94A                            ; ===========================================================================
0001E94A 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001E952                            ; ===========================================================================
0001E952                            
0001E952                            loc_1C33C:
0001E952 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001E956 6A00                       		bpl.s	loc_1C37A
0001E958 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001E95E 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001E962 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001E966 0240 0003                  		andi.w	#3,d0
0001E96A 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001E96E E148                       		lsl.w	#8,d0
0001E970 D040                       		add.w	d0,d0
0001E972 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001E97C 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001E980 43F1 0000                  		lea	(a1,d0.w),a1
0001E984 323C 000F                  		move.w	#$F,d1
0001E988 6000 0000                  		bra.w	LoadTiles
0001E98C                            ; ===========================================================================
0001E98C 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001E990                            ; ===========================================================================
0001E990                            
0001E990                            loc_1C37A:
0001E990 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001E994 6A00                       		bpl.s	locret_1C3B4
0001E996 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001E99C 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001E9A0 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001E9A4 0240 0003                  		andi.w	#3,d0
0001E9A8 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001E9AC E148                       		lsl.w	#8,d0
0001E9AE D040                       		add.w	d0,d0
0001E9B0 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001E9BA 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001E9BE 43F1 0000                  		lea	(a1,d0.w),a1
0001E9C2 323C 000F                  		move.w	#$F,d1
0001E9C6 6000 0000                  		bra.w	LoadTiles
0001E9CA                            ; ===========================================================================
0001E9CA                            
0001E9CA                            locret_1C3B4:
0001E9CA 4E75                       		rts	
0001E9CC                            ; ===========================================================================
0001E9CC                            
0001E9CC                            AniArt_none:				; XREF: AniArt_Index
0001E9CC 4E75                       		rts	
0001E9CE                            
0001E9CE                            ; ---------------------------------------------------------------------------
0001E9CE                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001E9CE                            ; ---------------------------------------------------------------------------
0001E9CE                            
0001E9CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E9CE                            
0001E9CE                            
0001E9CE                            LoadTiles:
0001E9CE 2C99                       		move.l	(a1)+,(a6)
0001E9D0 2C99                       		move.l	(a1)+,(a6)
0001E9D2 2C99                       		move.l	(a1)+,(a6)
0001E9D4 2C99                       		move.l	(a1)+,(a6)
0001E9D6 2C99                       		move.l	(a1)+,(a6)
0001E9D8 2C99                       		move.l	(a1)+,(a6)
0001E9DA 2C99                       		move.l	(a1)+,(a6)
0001E9DC 2C99                       		move.l	(a1)+,(a6)
0001E9DE 51C9 FFEE                  		dbf	d1,LoadTiles
0001E9E2 4E75                       		rts	
0001E9E4                            ; End of function LoadTiles
0001E9E4                            
0001E9E4                            ; ===========================================================================
0001E9E4                            ; ---------------------------------------------------------------------------
0001E9E4                            ; Animated pattern routine - more Marble Zone
0001E9E4                            ; ---------------------------------------------------------------------------
0001E9E4 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001E9E8 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001E9EC 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001E9F0 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001E9F4 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001E9F8 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001E9FC 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001EA00 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001EA04                            ; ===========================================================================
0001EA04                            
0001EA04                            loc_1C3EE:				; XREF: AniArt_MZextra
0001EA04 2C91                       		move.l	(a1),(a6)
0001EA06 43E9 0010                  		lea	$10(a1),a1
0001EA0A 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001EA0E 4E75                       		rts	
0001EA10                            ; ===========================================================================
0001EA10                            
0001EA10                            loc_1C3FA:				; XREF: AniArt_MZextra
0001EA10 2029 0002                  		move.l	2(a1),d0
0001EA14 1029 0001                  		move.b	1(a1),d0
0001EA18 E098                       		ror.l	#8,d0
0001EA1A 2C80                       		move.l	d0,(a6)
0001EA1C 43E9 0010                  		lea	$10(a1),a1
0001EA20 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001EA24 4E75                       		rts	
0001EA26                            ; ===========================================================================
0001EA26                            
0001EA26                            loc_1C410:				; XREF: AniArt_MZextra
0001EA26 2CA9 0002                  		move.l	2(a1),(a6)
0001EA2A 43E9 0010                  		lea	$10(a1),a1
0001EA2E 51C9 FFF6                  		dbf	d1,loc_1C410
0001EA32 4E75                       		rts	
0001EA34                            ; ===========================================================================
0001EA34                            
0001EA34                            loc_1C41E:				; XREF: AniArt_MZextra
0001EA34 2029 0004                  		move.l	4(a1),d0
0001EA38 1029 0003                  		move.b	3(a1),d0
0001EA3C E098                       		ror.l	#8,d0
0001EA3E 2C80                       		move.l	d0,(a6)
0001EA40 43E9 0010                  		lea	$10(a1),a1
0001EA44 51C9 FFEE                  		dbf	d1,loc_1C41E
0001EA48 4E75                       		rts	
0001EA4A                            ; ===========================================================================
0001EA4A                            
0001EA4A                            loc_1C434:				; XREF: AniArt_MZextra
0001EA4A 2CA9 0004                  		move.l	4(a1),(a6)
0001EA4E 43E9 0010                  		lea	$10(a1),a1
0001EA52 51C9 FFF6                  		dbf	d1,loc_1C434
0001EA56 4E75                       		rts	
0001EA58                            ; ===========================================================================
0001EA58                            
0001EA58                            loc_1C442:				; XREF: AniArt_MZextra
0001EA58 2029 0006                  		move.l	6(a1),d0
0001EA5C 1029 0005                  		move.b	5(a1),d0
0001EA60 E098                       		ror.l	#8,d0
0001EA62 2C80                       		move.l	d0,(a6)
0001EA64 43E9 0010                  		lea	$10(a1),a1
0001EA68 51C9 FFEE                  		dbf	d1,loc_1C442
0001EA6C 4E75                       		rts	
0001EA6E                            ; ===========================================================================
0001EA6E                            
0001EA6E                            loc_1C458:				; XREF: AniArt_MZextra
0001EA6E 2CA9 0006                  		move.l	6(a1),(a6)
0001EA72 43E9 0010                  		lea	$10(a1),a1
0001EA76 51C9 FFF6                  		dbf	d1,loc_1C458
0001EA7A 4E75                       		rts	
0001EA7C                            ; ===========================================================================
0001EA7C                            
0001EA7C                            loc_1C466:				; XREF: AniArt_MZextra
0001EA7C 2029 0008                  		move.l	8(a1),d0
0001EA80 1029 0007                  		move.b	7(a1),d0
0001EA84 E098                       		ror.l	#8,d0
0001EA86 2C80                       		move.l	d0,(a6)
0001EA88 43E9 0010                  		lea	$10(a1),a1
0001EA8C 51C9 FFEE                  		dbf	d1,loc_1C466
0001EA90 4E75                       		rts	
0001EA92                            ; ===========================================================================
0001EA92                            
0001EA92                            loc_1C47C:				; XREF: AniArt_MZextra
0001EA92 2CA9 0008                  		move.l	8(a1),(a6)
0001EA96 43E9 0010                  		lea	$10(a1),a1
0001EA9A 51C9 FFF6                  		dbf	d1,loc_1C47C
0001EA9E 4E75                       		rts	
0001EAA0                            ; ===========================================================================
0001EAA0                            
0001EAA0                            loc_1C48A:				; XREF: AniArt_MZextra
0001EAA0 2029 000A                  		move.l	$A(a1),d0
0001EAA4 1029 0009                  		move.b	9(a1),d0
0001EAA8 E098                       		ror.l	#8,d0
0001EAAA 2C80                       		move.l	d0,(a6)
0001EAAC 43E9 0010                  		lea	$10(a1),a1
0001EAB0 51C9 FFEE                  		dbf	d1,loc_1C48A
0001EAB4 4E75                       		rts	
0001EAB6                            ; ===========================================================================
0001EAB6                            
0001EAB6                            loc_1C4A0:				; XREF: AniArt_MZextra
0001EAB6 2CA9 000A                  		move.l	$A(a1),(a6)
0001EABA 43E9 0010                  		lea	$10(a1),a1
0001EABE 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001EAC2 4E75                       		rts	
0001EAC4                            ; ===========================================================================
0001EAC4                            
0001EAC4                            loc_1C4AE:				; XREF: AniArt_MZextra
0001EAC4 2029 000C                  		move.l	$C(a1),d0
0001EAC8 1029 000B                  		move.b	$B(a1),d0
0001EACC E098                       		ror.l	#8,d0
0001EACE 2C80                       		move.l	d0,(a6)
0001EAD0 43E9 0010                  		lea	$10(a1),a1
0001EAD4 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001EAD8 4E75                       		rts	
0001EADA                            ; ===========================================================================
0001EADA                            
0001EADA                            loc_1C4C4:				; XREF: AniArt_MZextra
0001EADA 2CA9 000C                  		move.l	$C(a1),(a6)
0001EADE 43E9 0010                  		lea	$10(a1),a1
0001EAE2 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001EAE6 4E75                       		rts	
0001EAE8                            ; ===========================================================================
0001EAE8                            
0001EAE8                            loc_1C4D2:				; XREF: AniArt_MZextra
0001EAE8 2029 000C                  		move.l	$C(a1),d0
0001EAEC E198                       		rol.l	#8,d0
0001EAEE 1011                       		move.b	0(a1),d0
0001EAF0 2C80                       		move.l	d0,(a6)
0001EAF2 43E9 0010                  		lea	$10(a1),a1
0001EAF6 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001EAFA 4E75                       		rts	
0001EAFC                            ; ===========================================================================
0001EAFC                            
0001EAFC                            loc_1C4E8:				; XREF: AniArt_MZextra
0001EAFC 3CA9 000E                  		move.w	$E(a1),(a6)
0001EB00 3C91                       		move.w	0(a1),(a6)
0001EB02 43E9 0010                  		lea	$10(a1),a1
0001EB06 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001EB0A 4E75                       		rts	
0001EB0C                            ; ===========================================================================
0001EB0C                            
0001EB0C                            loc_1C4FA:				; XREF: AniArt_MZextra
0001EB0C 2011                       		move.l	0(a1),d0
0001EB0E 1029 000F                  		move.b	$F(a1),d0
0001EB12 E098                       		ror.l	#8,d0
0001EB14 2C80                       		move.l	d0,(a6)
0001EB16 43E9 0010                  		lea	$10(a1),a1
0001EB1A 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001EB1E 4E75                       		rts	
0001EB20                            
0001EB20                            ; ---------------------------------------------------------------------------
0001EB20                            ; Animated pattern routine - giant ring
0001EB20                            ; ---------------------------------------------------------------------------
0001EB20                            
0001EB20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB20                            
0001EB20                            
0001EB20                            AniArt_GiantRing:			; XREF: AniArt_Load
0001EB20 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001EB24 6600                       		bne.s	loc_1C518
0001EB26 4E75                       		rts	
0001EB28                            ; ===========================================================================
0001EB28                            
0001EB28                            loc_1C518:
0001EB28 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001EB2E 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001EB34 7000                       		moveq	#0,d0
0001EB36 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001EB3A 43F1 0000                  		lea	(a1,d0.w),a1
0001EB3E 0640 8000                  		addi.w	#$8000,d0
0001EB42 E588                       		lsl.l	#2,d0
0001EB44 E448                       		lsr.w	#2,d0
0001EB46 0040 4000                  		ori.w	#$4000,d0
0001EB4A 4840                       		swap	d0
0001EB4C 2D40 0004                  		move.l	d0,4(a6)
0001EB50 323C 000D                  		move.w	#$D,d1
0001EB54 6000 FE78                  		bra.w	LoadTiles
0001EB58                            ; End of function AniArt_GiantRing
0001EB58                            
0001EB58                            ; ===========================================================================
0001EB58                            Obj21:                    ; XREF: Obj_Index
0001EB58 4E75                               rts
0001EB5A                            ; ===========================================================================
0001EB5A                            ; ---------------------------------------------------------------------------
0001EB5A                            ; HUD Object code - SCORE, TIME, RINGS
0001EB5A                            ; ---------------------------------------------------------------------------
0001EB5A                            loc_40804:
0001EB5A 4A78 FE20                      tst.w    ($FFFFFE20).w
0001EB5E 6700                           beq.s    loc_40820
0001EB60 7200                           moveq    #0,d1
0001EB62 0838 0003 FE05                 btst    #3,($FFFFFE05).w
0001EB68 6600                           bne.s    BranchTo_loc_40836
0001EB6A 0C38 0009 FE23                 cmpi.b    #9,($FFFFFE23).w
0001EB70 6600                           bne.s    BranchTo_loc_40836
0001EB72 5441                           addq.w    #2,d1
0001EB74                            
0001EB74                            BranchTo_loc_40836
0001EB74 6000                           bra.s    loc_40836
0001EB76                            ; ===========================================================================
0001EB76                            
0001EB76                            loc_40820:
0001EB76 7200                           moveq    #0,d1
0001EB78 0838 0003 FE05                 btst    #3,($FFFFFE05).w
0001EB7E 6600                           bne.s    loc_40836
0001EB80 5241                           addq.w    #1,d1
0001EB82 0C38 0009 FE23                 cmpi.b    #9,($FFFFFE23).w
0001EB88 6600                           bne.s    loc_40836
0001EB8A 5441                           addq.w    #2,d1
0001EB8C                            
0001EB8C                            loc_40836:
0001EB8C 363C 0090                      move.w    #$90,d3
0001EB90 343C 0108                      move.w    #$108,d2
0001EB94 43F9 0000 0000                 lea    (Map_Obj21).l,a1
0001EB9A 367C 06CA                      movea.w    #$6CA,a3
0001EB9E D241                           add.w    d1,d1
0001EBA0 D2F1 1000                      adda.w    (a1,d1.w),a1
0001EBA4 7200                           moveq    #0,d1
0001EBA6 1219                           move.b    (a1)+,d1
0001EBA8 5301                           subq.b    #1,d1
0001EBAA 6B00                           bmi.s    return_40858
0001EBAC 4EB9 0000 EC14                 jsr    sub_D762
0001EBB2                            
0001EBB2                            return_40858:
0001EBB2 4E75                           rts
0001EBB4                            ; End of function h
0001EBB4                            ; ===========================================================================
0001EBB4                            ; ---------------------------------------------------------------------------
0001EBB4                            ; Sprite mappings - SCORE, TIME, RINGS
0001EBB4                            ; ---------------------------------------------------------------------------
0001EBB4                            Map_obj21:
0001EBB4                            	include "_maps\obj21.asm"
0001EBB4                            ; ---------------------------------------------------------------------------
0001EBB4                            ; Sprite mappings - SCORE, TIME, RINGS
0001EBB4                            ; ---------------------------------------------------------------------------
0001EBB4 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001EBB8 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001EBBC 0A                         byte_1C5BC:	dc.b $A
0001EBBD 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001EBC2 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001EBC7 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001EBCC 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001EBD1 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001EBD6 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001EBDB A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001EBE0 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001EBE5 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001EBEA 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001EBEF 00                         		dc.b 0
0001EBF0 0A                         byte_1C5F0:	dc.b $A
0001EBF1 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001EBF6 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001EBFB 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001EC00 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001EC05 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001EC0A A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001EC0F A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001EC14 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001EC19 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001EC1E 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001EC23 00                         		dc.b 0
0001EC24 0A                         byte_1C624:	dc.b $A
0001EC25 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001EC2A 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001EC2F 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001EC34 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001EC39 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001EC3E A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001EC43 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001EC48 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001EC4D 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001EC52 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001EC57 00                         		dc.b 0
0001EC58 0A                         byte_1C658:	dc.b $A
0001EC59 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001EC5E 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001EC63 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001EC68 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001EC6D 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001EC72 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001EC77 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001EC7C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001EC81 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001EC86 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001EC8C 00                         		even
0001EC8C 00                         		even
0001EC8C                            
0001EC8C                            ; ---------------------------------------------------------------------------
0001EC8C                            ; Add points subroutine
0001EC8C                            ; ---------------------------------------------------------------------------
0001EC8C                            
0001EC8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC8C                            
0001EC8C                            
0001EC8C                            AddPoints:                      ; ...
0001EC8C 11FC 0001 FE1F                     move.b    #1,($FFFFFE1F).w
0001EC92 47F8 FE26                          lea    ($FFFFFE26).w,a3
0001EC96 D193                               add.l    d0,(a3)
0001EC98 223C 000F 423F                     move.l    #999999,d1
0001EC9E B293                               cmp.l    (a3),d1
0001ECA0 6200                               bhi.s    loc_1C6AC
0001ECA2 2681                               move.l    d1,(a3)
0001ECA4                            
0001ECA4                            loc_1C6AC:                      ; ...
0001ECA4 2013                               move.l    (a3),d0
0001ECA6 B0B8 FFC0                          cmp.l    ($FFFFFFC0).w,d0
0001ECAA 6500                               blo.s    locret_1C6B6
0001ECAC 06B8 0000 1388 FFC0                add.l    #$1388,($FFFFFFC0).w
0001ECB4 4EF9 0000 B648                     jmp        ExtraLife
0001ECBA                            
0001ECBA                            locret_1C6B6:
0001ECBA 4E75                       		rts
0001ECBC                            ; End of function AddPoints
0001ECBC                            
0001ECBC                            ; ---------------------------------------------------------------------------
0001ECBC                            ; Subroutine to	update the HUD
0001ECBC                            ; ---------------------------------------------------------------------------
0001ECBC                            
0001ECBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ECBC                            
0001ECBC                            
0001ECBC                            HudUpdate:
0001ECBC 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001ECC0 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001ECC4 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001ECC8 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001ECCA 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001ECCE 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001ECD4 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001ECD8 6100 0000                  		bsr.w	Hud_Score
0001ECDC                            
0001ECDC                            Hud_ChkRings:
0001ECDC 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001ECE0 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001ECE2 6A00                       		bpl.s	loc_1C6E4
0001ECE4 6100 0000                  		bsr.w	Hud_LoadZero
0001ECE8                            
0001ECE8                            loc_1C6E4:
0001ECE8 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001ECEC 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001ECF2 7200                       		moveq	#0,d1
0001ECF4 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001ECF8 6100 0000                  		bsr.w	Hud_Rings
0001ECFC                            
0001ECFC                            Hud_ChkTime:
0001ECFC 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001ED00 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001ED02 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001ED06 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001ED08 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001ED0C 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001ED12 6700                       		beq.s	TimeOver	; if yes, branch
0001ED14 5221                       		addq.b	#1,-(a1)
0001ED16 0C11 003C                  		cmpi.b	#60,(a1)
0001ED1A 6500                       		bcs.s	Hud_ChkLives
0001ED1C 12BC 0000                  		move.b	#0,(a1)
0001ED20 5221                       		addq.b	#1,-(a1)
0001ED22 0C11 003C                  		cmpi.b	#60,(a1)
0001ED26 6500                       		bcs.s	loc_1C734
0001ED28 12BC 0000                  		move.b	#0,(a1)
0001ED2C 5221                       		addq.b	#1,-(a1)
0001ED2E 0C11 0009                  		cmpi.b	#9,(a1)
0001ED32 6500                       		bcs.s	loc_1C734
0001ED34 12BC 0009                  		move.b	#9,(a1)
0001ED38                            
0001ED38                            loc_1C734:
0001ED38 203C 5E40 0003             		move.l	#$5E400003,d0
0001ED3E 7200                       		moveq	#0,d1
0001ED40 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001ED44 6100 0000                  		bsr.w	Hud_Mins
0001ED48 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001ED4E 7200                       		moveq	#0,d1
0001ED50 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001ED54 6100 0000                  		bsr.w	Hud_Secs
0001ED58                            
0001ED58                            Hud_ChkLives:
0001ED58 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001ED5C 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001ED5E 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001ED62 6100 0000                  		bsr.w	Hud_Lives
0001ED66                            
0001ED66                            Hud_ChkBonus:
0001ED66 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001ED6A 6700                       		beq.s	Hud_End		; if not, branch
0001ED6C 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001ED70 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001ED7A 7200                       		moveq	#0,d1
0001ED7C 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001ED80 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001ED84 7200                       		moveq	#0,d1
0001ED86 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001ED8A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001ED8E                            
0001ED8E                            Hud_End:
0001ED8E 4E75                       		rts	
0001ED90                            ; ===========================================================================
0001ED90                            
0001ED90                            TimeOver:				; XREF: Hud_ChkTime
0001ED90 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001ED94 41F8 D000                  		lea	($FFFFD000).w,a0
0001ED98 2448                       		movea.l	a0,a2
0001ED9A 6100 E76C                  		bsr.w	KillSonic
0001ED9E 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001EDA4 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0001EDAA 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001EDB0 4E75                       		rts	
0001EDB2                            ; ===========================================================================
0001EDB2                            
0001EDB2                            HudDebug:				; XREF: HudUpdate
0001EDB2 6100 0000                  		bsr.w	HudDb_XY
0001EDB6 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001EDBA 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001EDBC 6A00                       		bpl.s	HudDb_Rings
0001EDBE 6100 0000                  		bsr.w	Hud_LoadZero
0001EDC2                            
0001EDC2                            HudDb_Rings:
0001EDC2 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001EDC6 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001EDCC 7200                       		moveq	#0,d1
0001EDCE 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001EDD2 6100 0000                  		bsr.w	Hud_Rings
0001EDD6                            
0001EDD6                            HudDb_ObjCount:
0001EDD6 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001EDDC 7200                       		moveq	#0,d1
0001EDDE 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001EDE2 6100 0000                  		bsr.w	Hud_Secs
0001EDE6 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001EDEA 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001EDEC 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001EDF0 6100 0000                  		bsr.w	Hud_Lives
0001EDF4                            
0001EDF4                            HudDb_ChkBonus:
0001EDF4 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001EDF8 6700                       		beq.s	HudDb_End	; if not, branch
0001EDFA 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001EDFE 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001EE08 7200                       		moveq	#0,d1
0001EE0A 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001EE0E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EE12 7200                       		moveq	#0,d1
0001EE14 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001EE18 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EE1C                            
0001EE1C                            HudDb_End:
0001EE1C 4E75                       		rts	
0001EE1E                            ; End of function HudUpdate
0001EE1E                            
0001EE1E                            ; ---------------------------------------------------------------------------
0001EE1E                            ; Subroutine to	load "0" on the	HUD
0001EE1E                            ; ---------------------------------------------------------------------------
0001EE1E                            
0001EE1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE1E                            
0001EE1E                            
0001EE1E                            Hud_LoadZero:				; XREF: HudUpdate
0001EE1E 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001EE28 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001EE2C 343C 0002                  		move.w	#2,d2
0001EE30 6000                       		bra.s	loc_1C83E
0001EE32                            ; End of function Hud_LoadZero
0001EE32                            
0001EE32                            ; ---------------------------------------------------------------------------
0001EE32                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001EE32                            ; ---------------------------------------------------------------------------
0001EE32                            
0001EE32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE32                            
0001EE32                            
0001EE32                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001EE32 4DF9 00C0 0000             		lea	($C00000).l,a6
0001EE38 6100 0000                  		bsr.w	Hud_Lives
0001EE3C 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001EE46 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001EE4A 343C 000E                  		move.w	#$E,d2
0001EE4E                            
0001EE4E                            loc_1C83E:				; XREF: Hud_LoadZero
0001EE4E 43FA 0000                  		lea	Art_Hud(pc),a1
0001EE52                            
0001EE52                            loc_1C842:
0001EE52 323C 000F                  		move.w	#$F,d1
0001EE56 101A                       		move.b	(a2)+,d0
0001EE58 6B00                       		bmi.s	loc_1C85E
0001EE5A 4880                       		ext.w	d0
0001EE5C EB48                       		lsl.w	#5,d0
0001EE5E 47F1 0000                  		lea	(a1,d0.w),a3
0001EE62                            
0001EE62                            loc_1C852:
0001EE62 2C9B                       		move.l	(a3)+,(a6)
0001EE64 51C9 FFFC                  		dbf	d1,loc_1C852
0001EE68                            
0001EE68                            loc_1C858:
0001EE68 51CA FFE8                  		dbf	d2,loc_1C842
0001EE6C                            
0001EE6C 4E75                       		rts	
0001EE6E                            ; ===========================================================================
0001EE6E                            
0001EE6E                            loc_1C85E:
0001EE6E 2CBC 0000 0000             		move.l	#0,(a6)
0001EE74 51C9 FFF8                  		dbf	d1,loc_1C85E
0001EE78                            
0001EE78 60EE                       		bra.s	loc_1C858
0001EE7A                            ; End of function Hud_Base
0001EE7A                            
0001EE7A                            ; ===========================================================================
0001EE7A 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001EE86 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001EE8A                            ; ---------------------------------------------------------------------------
0001EE8A                            ; Subroutine to	load debug mode	numbers	patterns
0001EE8A                            ; ---------------------------------------------------------------------------
0001EE8A                            
0001EE8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE8A                            
0001EE8A                            
0001EE8A                            HudDb_XY:				; XREF: HudDebug
0001EE8A 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001EE94 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001EE98 4841                       		swap	d1
0001EE9A 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001EE9E 6100                       		bsr.s	HudDb_XY2
0001EEA0 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001EEA4 4841                       		swap	d1
0001EEA6 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001EEAA                            ; End of function HudDb_XY
0001EEAA                            
0001EEAA                            
0001EEAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EEAA                            
0001EEAA                            
0001EEAA                            HudDb_XY2:
0001EEAA 7C07                       		moveq	#7,d6
0001EEAC 43F9 0000 0550             		lea	(Art_Text).l,a1
0001EEB2                            
0001EEB2                            HudDb_XYLoop:
0001EEB2 E959                       		rol.w	#4,d1
0001EEB4 3401                       		move.w	d1,d2
0001EEB6 0242 000F                  		andi.w	#$F,d2
0001EEBA 0C42 000A                  		cmpi.w	#$A,d2
0001EEBE 6500                       		bcs.s	loc_1C8B2
0001EEC0 5E42                       		addq.w	#7,d2
0001EEC2                            
0001EEC2                            loc_1C8B2:
0001EEC2 EB4A                       		lsl.w	#5,d2
0001EEC4 47F1 2000                  		lea	(a1,d2.w),a3
0001EEC8 2C9B                       		move.l	(a3)+,(a6)
0001EECA 2C9B                       		move.l	(a3)+,(a6)
0001EECC 2C9B                       		move.l	(a3)+,(a6)
0001EECE 2C9B                       		move.l	(a3)+,(a6)
0001EED0 2C9B                       		move.l	(a3)+,(a6)
0001EED2 2C9B                       		move.l	(a3)+,(a6)
0001EED4 2C9B                       		move.l	(a3)+,(a6)
0001EED6 2C9B                       		move.l	(a3)+,(a6)
0001EED8 4841                       		swap	d1
0001EEDA 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001EEDE                            
0001EEDE 4E75                       		rts	
0001EEE0                            ; End of function HudDb_XY2
0001EEE0                            
0001EEE0                            ; ---------------------------------------------------------------------------
0001EEE0                            ; Subroutine to	load rings numbers patterns
0001EEE0                            ; ---------------------------------------------------------------------------
0001EEE0                            
0001EEE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EEE0                            
0001EEE0                            
0001EEE0                            Hud_Rings:				; XREF: HudUpdate
0001EEE0 45F9 0000 0000             		lea	(Hud_100).l,a2
0001EEE6 7C02                       		moveq	#2,d6
0001EEE8 6000                       		bra.s	Hud_LoadArt
0001EEEA                            ; End of function Hud_Rings
0001EEEA                            
0001EEEA                            ; ---------------------------------------------------------------------------
0001EEEA                            ; Subroutine to	load score numbers patterns
0001EEEA                            ; ---------------------------------------------------------------------------
0001EEEA                            
0001EEEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EEEA                            
0001EEEA                            
0001EEEA                            Hud_Score:				; XREF: HudUpdate
0001EEEA 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001EEF0 7C05                       		moveq	#5,d6
0001EEF2                            
0001EEF2                            Hud_LoadArt:
0001EEF2 7800                       		moveq	#0,d4
0001EEF4 43FA 0000                  		lea	Art_Hud(pc),a1
0001EEF8                            
0001EEF8                            Hud_ScoreLoop:
0001EEF8 7400                       		moveq	#0,d2
0001EEFA 261A                       		move.l	(a2)+,d3
0001EEFC                            
0001EEFC                            loc_1C8EC:
0001EEFC 9283                       		sub.l	d3,d1
0001EEFE 6500                       		bcs.s	loc_1C8F4
0001EF00 5242                       		addq.w	#1,d2
0001EF02 60F8                       		bra.s	loc_1C8EC
0001EF04                            ; ===========================================================================
0001EF04                            
0001EF04                            loc_1C8F4:
0001EF04 D283                       		add.l	d3,d1
0001EF06 4A42                       		tst.w	d2
0001EF08 6700                       		beq.s	loc_1C8FE
0001EF0A 383C 0001                  		move.w	#1,d4
0001EF0E                            
0001EF0E                            loc_1C8FE:
0001EF0E 4A44                       		tst.w	d4
0001EF10 6700                       		beq.s	loc_1C92C
0001EF12 ED4A                       		lsl.w	#6,d2
0001EF14 2D40 0004                  		move.l	d0,4(a6)
0001EF18 47F1 2000                  		lea	(a1,d2.w),a3
0001EF1C 2C9B                       		move.l	(a3)+,(a6)
0001EF1E 2C9B                       		move.l	(a3)+,(a6)
0001EF20 2C9B                       		move.l	(a3)+,(a6)
0001EF22 2C9B                       		move.l	(a3)+,(a6)
0001EF24 2C9B                       		move.l	(a3)+,(a6)
0001EF26 2C9B                       		move.l	(a3)+,(a6)
0001EF28 2C9B                       		move.l	(a3)+,(a6)
0001EF2A 2C9B                       		move.l	(a3)+,(a6)
0001EF2C 2C9B                       		move.l	(a3)+,(a6)
0001EF2E 2C9B                       		move.l	(a3)+,(a6)
0001EF30 2C9B                       		move.l	(a3)+,(a6)
0001EF32 2C9B                       		move.l	(a3)+,(a6)
0001EF34 2C9B                       		move.l	(a3)+,(a6)
0001EF36 2C9B                       		move.l	(a3)+,(a6)
0001EF38 2C9B                       		move.l	(a3)+,(a6)
0001EF3A 2C9B                       		move.l	(a3)+,(a6)
0001EF3C                            
0001EF3C                            loc_1C92C:
0001EF3C 0680 0040 0000             		addi.l	#$400000,d0
0001EF42 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001EF46                            
0001EF46 4E75                       		rts	
0001EF48                            ; End of function Hud_Score
0001EF48                            
0001EF48                            ; ---------------------------------------------------------------------------
0001EF48                            ; Subroutine to	load countdown numbers on the continue screen
0001EF48                            ; ---------------------------------------------------------------------------
0001EF48                            
0001EF48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF48                            
0001EF48                            
0001EF48                            ContScrCounter:				; XREF: ContinueScreen
0001EF48 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001EF52 4DF9 00C0 0000             		lea	($C00000).l,a6
0001EF58 45F9 0000 0000             		lea	(Hud_10).l,a2
0001EF5E 7C01                       		moveq	#1,d6
0001EF60 7800                       		moveq	#0,d4
0001EF62 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001EF66                            
0001EF66                            ContScr_Loop:
0001EF66 7400                       		moveq	#0,d2
0001EF68 261A                       		move.l	(a2)+,d3
0001EF6A                            
0001EF6A                            loc_1C95A:
0001EF6A 9283                       		sub.l	d3,d1
0001EF6C 6500                       		bcs.s	loc_1C962
0001EF6E 5242                       		addq.w	#1,d2
0001EF70 60F8                       		bra.s	loc_1C95A
0001EF72                            ; ===========================================================================
0001EF72                            
0001EF72                            loc_1C962:
0001EF72 D283                       		add.l	d3,d1
0001EF74 ED4A                       		lsl.w	#6,d2
0001EF76 47F1 2000                  		lea	(a1,d2.w),a3
0001EF7A 2C9B                       		move.l	(a3)+,(a6)
0001EF7C 2C9B                       		move.l	(a3)+,(a6)
0001EF7E 2C9B                       		move.l	(a3)+,(a6)
0001EF80 2C9B                       		move.l	(a3)+,(a6)
0001EF82 2C9B                       		move.l	(a3)+,(a6)
0001EF84 2C9B                       		move.l	(a3)+,(a6)
0001EF86 2C9B                       		move.l	(a3)+,(a6)
0001EF88 2C9B                       		move.l	(a3)+,(a6)
0001EF8A 2C9B                       		move.l	(a3)+,(a6)
0001EF8C 2C9B                       		move.l	(a3)+,(a6)
0001EF8E 2C9B                       		move.l	(a3)+,(a6)
0001EF90 2C9B                       		move.l	(a3)+,(a6)
0001EF92 2C9B                       		move.l	(a3)+,(a6)
0001EF94 2C9B                       		move.l	(a3)+,(a6)
0001EF96 2C9B                       		move.l	(a3)+,(a6)
0001EF98 2C9B                       		move.l	(a3)+,(a6)
0001EF9A 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001EF9E                            
0001EF9E 4E75                       		rts	
0001EFA0                            ; End of function ContScrCounter
0001EFA0                            
0001EFA0                            ; ===========================================================================
0001EFA0                            ; ---------------------------------------------------------------------------
0001EFA0                            ; HUD counter sizes
0001EFA0                            ; ---------------------------------------------------------------------------
0001EFA0 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001EFA4 0000 2710                  Hud_10000:	dc.l 10000
0001EFA8 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001EFAC 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001EFB0 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001EFB4 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001EFB8                            
0001EFB8                            ; ---------------------------------------------------------------------------
0001EFB8                            ; Subroutine to	load time numbers patterns
0001EFB8                            ; ---------------------------------------------------------------------------
0001EFB8                            
0001EFB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EFB8                            
0001EFB8                            
0001EFB8                            Hud_Mins:				; XREF: Hud_ChkTime
0001EFB8 45F9 0001 EFB4             		lea	(Hud_1).l,a2
0001EFBE 7C00                       		moveq	#0,d6
0001EFC0 6000                       		bra.s	loc_1C9BA
0001EFC2                            ; End of function Hud_Mins
0001EFC2                            
0001EFC2                            
0001EFC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EFC2                            
0001EFC2                            
0001EFC2                            Hud_Secs:				; XREF: Hud_ChkTime
0001EFC2 45F9 0001 EFB0             		lea	(Hud_10).l,a2
0001EFC8 7C01                       		moveq	#1,d6
0001EFCA                            
0001EFCA                            loc_1C9BA:
0001EFCA 7800                       		moveq	#0,d4
0001EFCC 43FA 0000                  		lea	Art_Hud(pc),a1
0001EFD0                            
0001EFD0                            Hud_TimeLoop:
0001EFD0 7400                       		moveq	#0,d2
0001EFD2 261A                       		move.l	(a2)+,d3
0001EFD4                            
0001EFD4                            loc_1C9C4:
0001EFD4 9283                       		sub.l	d3,d1
0001EFD6 6500                       		bcs.s	loc_1C9CC
0001EFD8 5242                       		addq.w	#1,d2
0001EFDA 60F8                       		bra.s	loc_1C9C4
0001EFDC                            ; ===========================================================================
0001EFDC                            
0001EFDC                            loc_1C9CC:
0001EFDC D283                       		add.l	d3,d1
0001EFDE 4A42                       		tst.w	d2
0001EFE0 6700                       		beq.s	loc_1C9D6
0001EFE2 383C 0001                  		move.w	#1,d4
0001EFE6                            
0001EFE6                            loc_1C9D6:
0001EFE6 ED4A                       		lsl.w	#6,d2
0001EFE8 2D40 0004                  		move.l	d0,4(a6)
0001EFEC 47F1 2000                  		lea	(a1,d2.w),a3
0001EFF0 2C9B                       		move.l	(a3)+,(a6)
0001EFF2 2C9B                       		move.l	(a3)+,(a6)
0001EFF4 2C9B                       		move.l	(a3)+,(a6)
0001EFF6 2C9B                       		move.l	(a3)+,(a6)
0001EFF8 2C9B                       		move.l	(a3)+,(a6)
0001EFFA 2C9B                       		move.l	(a3)+,(a6)
0001EFFC 2C9B                       		move.l	(a3)+,(a6)
0001EFFE 2C9B                       		move.l	(a3)+,(a6)
0001F000 2C9B                       		move.l	(a3)+,(a6)
0001F002 2C9B                       		move.l	(a3)+,(a6)
0001F004 2C9B                       		move.l	(a3)+,(a6)
0001F006 2C9B                       		move.l	(a3)+,(a6)
0001F008 2C9B                       		move.l	(a3)+,(a6)
0001F00A 2C9B                       		move.l	(a3)+,(a6)
0001F00C 2C9B                       		move.l	(a3)+,(a6)
0001F00E 2C9B                       		move.l	(a3)+,(a6)
0001F010 0680 0040 0000             		addi.l	#$400000,d0
0001F016 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001F01A                            
0001F01A 4E75                       		rts	
0001F01C                            ; End of function Hud_Secs
0001F01C                            
0001F01C                            ; ---------------------------------------------------------------------------
0001F01C                            ; Subroutine to	load time/ring bonus numbers patterns
0001F01C                            ; ---------------------------------------------------------------------------
0001F01C                            
0001F01C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F01C                            
0001F01C                            
0001F01C                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001F01C 45F9 0001 EFA8             		lea	(Hud_1000).l,a2
0001F022 7C03                       		moveq	#3,d6
0001F024 7800                       		moveq	#0,d4
0001F026 43FA 0000                  		lea	Art_Hud(pc),a1
0001F02A                            
0001F02A                            Hud_BonusLoop:
0001F02A 7400                       		moveq	#0,d2
0001F02C 261A                       		move.l	(a2)+,d3
0001F02E                            
0001F02E                            loc_1CA1E:
0001F02E 9283                       		sub.l	d3,d1
0001F030 6500                       		bcs.s	loc_1CA26
0001F032 5242                       		addq.w	#1,d2
0001F034 60F8                       		bra.s	loc_1CA1E
0001F036                            ; ===========================================================================
0001F036                            
0001F036                            loc_1CA26:
0001F036 D283                       		add.l	d3,d1
0001F038 4A42                       		tst.w	d2
0001F03A 6700                       		beq.s	loc_1CA30
0001F03C 383C 0001                  		move.w	#1,d4
0001F040                            
0001F040                            loc_1CA30:
0001F040 4A44                       		tst.w	d4
0001F042 6700                       		beq.s	Hud_ClrBonus
0001F044 ED4A                       		lsl.w	#6,d2
0001F046 47F1 2000                  		lea	(a1,d2.w),a3
0001F04A 2C9B                       		move.l	(a3)+,(a6)
0001F04C 2C9B                       		move.l	(a3)+,(a6)
0001F04E 2C9B                       		move.l	(a3)+,(a6)
0001F050 2C9B                       		move.l	(a3)+,(a6)
0001F052 2C9B                       		move.l	(a3)+,(a6)
0001F054 2C9B                       		move.l	(a3)+,(a6)
0001F056 2C9B                       		move.l	(a3)+,(a6)
0001F058 2C9B                       		move.l	(a3)+,(a6)
0001F05A 2C9B                       		move.l	(a3)+,(a6)
0001F05C 2C9B                       		move.l	(a3)+,(a6)
0001F05E 2C9B                       		move.l	(a3)+,(a6)
0001F060 2C9B                       		move.l	(a3)+,(a6)
0001F062 2C9B                       		move.l	(a3)+,(a6)
0001F064 2C9B                       		move.l	(a3)+,(a6)
0001F066 2C9B                       		move.l	(a3)+,(a6)
0001F068 2C9B                       		move.l	(a3)+,(a6)
0001F06A                            
0001F06A                            loc_1CA5A:
0001F06A 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001F06E                            
0001F06E 4E75                       		rts	
0001F070                            ; ===========================================================================
0001F070                            
0001F070                            Hud_ClrBonus:
0001F070 7A0F                       		moveq	#$F,d5
0001F072                            
0001F072                            Hud_ClrBonusLoop:
0001F072 2CBC 0000 0000             		move.l	#0,(a6)
0001F078 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001F07C                            
0001F07C 60EC                       		bra.s	loc_1CA5A
0001F07E                            ; End of function Hud_TimeRingBonus
0001F07E                            
0001F07E                            ; ---------------------------------------------------------------------------
0001F07E                            ; Subroutine to	load uncompressed lives	counter	patterns
0001F07E                            ; ---------------------------------------------------------------------------
0001F07E                            
0001F07E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F07E                            
0001F07E                            
0001F07E                            Hud_Lives:				; XREF: Hud_ChkLives
0001F07E 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001F084 7200                       		moveq	#0,d1
0001F086 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001F08A 45F9 0001 EFB0             		lea	(Hud_10).l,a2
0001F090 7C01                       		moveq	#1,d6
0001F092 7800                       		moveq	#0,d4
0001F094 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001F098                            
0001F098                            Hud_LivesLoop:
0001F098 2D40 0004                  		move.l	d0,4(a6)
0001F09C 7400                       		moveq	#0,d2
0001F09E 261A                       		move.l	(a2)+,d3
0001F0A0                            
0001F0A0                            loc_1CA90:
0001F0A0 9283                       		sub.l	d3,d1
0001F0A2 6500                       		bcs.s	loc_1CA98
0001F0A4 5242                       		addq.w	#1,d2
0001F0A6 60F8                       		bra.s	loc_1CA90
0001F0A8                            ; ===========================================================================
0001F0A8                            
0001F0A8                            loc_1CA98:
0001F0A8 D283                       		add.l	d3,d1
0001F0AA 4A42                       		tst.w	d2
0001F0AC 6700                       		beq.s	loc_1CAA2
0001F0AE 383C 0001                  		move.w	#1,d4
0001F0B2                            
0001F0B2                            loc_1CAA2:
0001F0B2 4A44                       		tst.w	d4
0001F0B4 6700                       		beq.s	Hud_ClrLives
0001F0B6                            
0001F0B6                            loc_1CAA6:
0001F0B6 EB4A                       		lsl.w	#5,d2
0001F0B8 47F1 2000                  		lea	(a1,d2.w),a3
0001F0BC 2C9B                       		move.l	(a3)+,(a6)
0001F0BE 2C9B                       		move.l	(a3)+,(a6)
0001F0C0 2C9B                       		move.l	(a3)+,(a6)
0001F0C2 2C9B                       		move.l	(a3)+,(a6)
0001F0C4 2C9B                       		move.l	(a3)+,(a6)
0001F0C6 2C9B                       		move.l	(a3)+,(a6)
0001F0C8 2C9B                       		move.l	(a3)+,(a6)
0001F0CA 2C9B                       		move.l	(a3)+,(a6)
0001F0CC                            
0001F0CC                            loc_1CABC:
0001F0CC 0680 0040 0000             		addi.l	#$400000,d0
0001F0D2 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001F0D6                            
0001F0D6 4E75                       		rts	
0001F0D8                            ; ===========================================================================
0001F0D8                            
0001F0D8                            Hud_ClrLives:
0001F0D8 4A46                       		tst.w	d6
0001F0DA 67DA                       		beq.s	loc_1CAA6
0001F0DC 7A07                       		moveq	#7,d5
0001F0DE                            
0001F0DE                            Hud_ClrLivesLoop:
0001F0DE 2CBC 0000 0000             		move.l	#0,(a6)
0001F0E4 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001F0E8 60E2                       		bra.s	loc_1CABC
0001F0EA                            ; End of function Hud_Lives
0001F0EA                            
0001F0EA                            ; ===========================================================================
0001F0EA                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001F3EA                            		even
0001F3EA                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001F52A                            		even
0001F52A                            ; ===========================================================================
0001F52A                            ; ---------------------------------------------------------------------------
0001F52A                            ; When debug mode is currently in use
0001F52A                            ; ---------------------------------------------------------------------------
0001F52A                            
0001F52A                            DebugMode:				; XREF: Obj01; Obj09
0001F52A 7000                       		moveq	#0,d0
0001F52C 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001F530 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001F534 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001F538                            ; ===========================================================================
0001F538 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001F53A 0000                       		dc.w Debug_Skip-Debug_Index
0001F53C                            ; ===========================================================================
0001F53C                            
0001F53C                            Debug_Main:				; XREF: Debug_Index
0001F53C 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001F540 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001F546 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001F54C 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001F552 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001F558 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001F55E 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001F564 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001F56A 117C 0000 001A             		move.b	#0,$1A(a0)
0001F570 117C 0000 001C             		move.b	#0,$1C(a0)
0001F576 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001F57C 6600                       		bne.s	Debug_Zone	; if not, branch
0001F57E 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001F584 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001F58A 7006                       		moveq	#6,d0		; use 6th debug	item list
0001F58C 6000                       		bra.s	Debug_UseList
0001F58E                            ; ===========================================================================
0001F58E                            
0001F58E                            Debug_Zone:
0001F58E 7000                       		moveq	#0,d0
0001F590 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001F594                            
0001F594                            Debug_UseList:
0001F594 45F9 0000 0000             		lea	(DebugList).l,a2
0001F59A D040                       		add.w	d0,d0
0001F59C D4F2 0000                  		adda.w	(a2,d0.w),a2
0001F5A0 3C1A                       		move.w	(a2)+,d6
0001F5A2 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001F5A6 6200                       		bhi.s	loc_1CF9E
0001F5A8 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001F5AE                            
0001F5AE                            loc_1CF9E:
0001F5AE 6100 0000                  		bsr.w	Debug_ShowItem
0001F5B2 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001F5B8 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001F5BE                            
0001F5BE                            Debug_Skip:				; XREF: Debug_Index
0001F5BE 7006                       		moveq	#6,d0
0001F5C0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001F5C6 6700                       		beq.s	loc_1CFBE
0001F5C8 7000                       		moveq	#0,d0
0001F5CA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001F5CE                            
0001F5CE                            loc_1CFBE:
0001F5CE 45F9 0000 0000             		lea	(DebugList).l,a2
0001F5D4 D040                       		add.w	d0,d0
0001F5D6 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001F5DA 3C1A                       		move.w	(a2)+,d6
0001F5DC 6100 0000                  		bsr.w	Debug_Control
0001F5E0 4EF9 0000 E96A             		jmp	DisplaySprite
0001F5E6                            
0001F5E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F5E6                            
0001F5E6                            
0001F5E6                            Debug_Control:
0001F5E6 7800                       		moveq	#0,d4
0001F5E8 323C 0001                  		move.w	#1,d1
0001F5EC 1838 F605                  		move.b	($FFFFF605).w,d4
0001F5F0 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001F5F4 6600                       		bne.s	loc_1D018	; if yes, branch
0001F5F6 1038 F604                  		move.b	($FFFFF604).w,d0
0001F5FA 0240 000F                  		andi.w	#$F,d0
0001F5FE 6600                       		bne.s	loc_1D000
0001F600 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001F606 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001F60C 6000 0000                  		bra.w	Debug_BackItem
0001F610                            ; ===========================================================================
0001F610                            
0001F610                            loc_1D000:
0001F610 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001F614 6600                       		bne.s	loc_1D01C
0001F616 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001F61C 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001F620 6600                       		bne.s	loc_1D018
0001F622 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001F628                            
0001F628                            loc_1D018:
0001F628 1838 F604                  		move.b	($FFFFF604).w,d4
0001F62C                            
0001F62C                            loc_1D01C:
0001F62C 7200                       		moveq	#0,d1
0001F62E 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001F632 5241                       		addq.w	#1,d1
0001F634 4841                       		swap	d1
0001F636 E881                       		asr.l	#4,d1
0001F638 2428 000C                  		move.l	$C(a0),d2
0001F63C 2628 0008                  		move.l	8(a0),d3
0001F640 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001F644 6700                       		beq.s	loc_1D03C	; if not, branch
0001F646 9481                       		sub.l	d1,d2
0001F648 6400                       		bcc.s	loc_1D03C
0001F64A 7400                       		moveq	#0,d2
0001F64C                            
0001F64C                            loc_1D03C:
0001F64C 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001F650 6700                       		beq.s	loc_1D052	; if not, branch
0001F652 D481                       		add.l	d1,d2
0001F654 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001F65A 6500                       		bcs.s	loc_1D052
0001F65C 243C 07FF 0000             		move.l	#$7FF0000,d2
0001F662                            
0001F662                            loc_1D052:
0001F662 0804 0002                  		btst	#2,d4
0001F666 6700                       		beq.s	loc_1D05E
0001F668 9681                       		sub.l	d1,d3
0001F66A 6400                       		bcc.s	loc_1D05E
0001F66C 7600                       		moveq	#0,d3
0001F66E                            
0001F66E                            loc_1D05E:
0001F66E 0804 0003                  		btst	#3,d4
0001F672 6700                       		beq.s	loc_1D066
0001F674 D681                       		add.l	d1,d3
0001F676                            
0001F676                            loc_1D066:
0001F676 2142 000C                  		move.l	d2,$C(a0)
0001F67A 2143 0008                  		move.l	d3,8(a0)
0001F67E                            
0001F67E                            Debug_BackItem:
0001F67E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001F684 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001F686 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001F68C 6700                       		beq.s	Debug_NextItem	; if not, branch
0001F68E 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001F692 6400                       		bcc.s	Debug_NoLoop
0001F694 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001F698 6000                       		bra.s	Debug_NoLoop
0001F69A                            ; ===========================================================================
0001F69A                            
0001F69A                            Debug_NextItem:
0001F69A 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001F6A0 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001F6A2 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001F6A6 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001F6AA 6200                       		bhi.s	Debug_NoLoop
0001F6AC 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001F6B2                            
0001F6B2                            Debug_NoLoop:
0001F6B2 6000 0000                  		bra.w	Debug_ShowItem
0001F6B6                            ; ===========================================================================
0001F6B6                            
0001F6B6                            Debug_MakeItem:
0001F6B6 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001F6BC 6700                       		beq.s	Debug_Exit	; if not, branch
0001F6BE 4EB9 0000 F0C0             		jsr	SingleObjLoad
0001F6C4 6600                       		bne.s	Debug_Exit
0001F6C6 3368 0008 0008             		move.w	8(a0),8(a1)
0001F6CC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001F6D2 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001F6D6 1368 0001 0001             		move.b	1(a0),1(a1)
0001F6DC 1368 0001 0022             		move.b	1(a0),$22(a1)
0001F6E2 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001F6E8 7000                       		moveq	#0,d0
0001F6EA 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001F6EE E748                       		lsl.w	#3,d0
0001F6F0 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001F6F6 4E75                       		rts	
0001F6F8                            ; ===========================================================================
0001F6F8                            
0001F6F8                            Debug_Exit:
0001F6F8 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001F6FE 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001F700 7000                       		moveq	#0,d0
0001F702 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001F706 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001F70E 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001F714 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001F718 3140 000A                  		move.w	d0,$A(a0)
0001F71C 3140 000E                  		move.w	d0,$E(a0)
0001F720 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001F726 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001F72C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001F732 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001F734 4278 F780                  		clr.w	($FFFFF780).w
0001F738 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001F73E 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001F746 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001F74C 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001F752 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001F758 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001F75E                            
0001F75E                            Debug_DoNothing:
0001F75E 4E75                       		rts	
0001F760                            ; End of function Debug_Control
0001F760                            
0001F760                            
0001F760                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F760                            
0001F760                            
0001F760                            Debug_ShowItem:				; XREF: Debug_Main
0001F760 7000                       		moveq	#0,d0
0001F762 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001F766 E748                       		lsl.w	#3,d0
0001F768 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001F76E 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001F774 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001F77A 4E75                       		rts	
0001F77C                            ; End of function Debug_ShowItem
0001F77C                            
0001F77C                            ; ===========================================================================
0001F77C                            ; ---------------------------------------------------------------------------
0001F77C                            ; Debug	list pointers
0001F77C                            ; ---------------------------------------------------------------------------
0001F77C                            DebugList:
0001F77C                            	include "_inc\Debug list pointers.asm"
0001F77C                            ; ---------------------------------------------------------------------------
0001F77C                            ; Debug	list pointers
0001F77C                            ; ---------------------------------------------------------------------------
0001F77C 0000                       	dc.w Debug_GHZ-DebugList
0001F77E 0000                       	dc.w Debug_LZ-DebugList
0001F780 0000                       	dc.w Debug_MZ-DebugList
0001F782 0000                       	dc.w Debug_SLZ-DebugList
0001F784 0000                       	dc.w Debug_SYZ-DebugList
0001F786 0000                       	dc.w Debug_SBZ-DebugList
0001F788 0000                       	dc.w Debug_Ending-DebugList
0001F788 0000                       	dc.w Debug_Ending-DebugList
0001F78A                            
0001F78A                            ; ---------------------------------------------------------------------------
0001F78A                            ; Debug	list - Green Hill
0001F78A                            ; ---------------------------------------------------------------------------
0001F78A                            Debug_GHZ:
0001F78A                            	include "_inc\Debug list - GHZ.asm"
0001F78A                            ; ---------------------------------------------------------------------------
0001F78A                            ; Debug	list - Green Hill
0001F78A                            ; ---------------------------------------------------------------------------
0001F78A 0010                       	dc.w $10			; number of items in list
0001F78C 2500 B274                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001F790 0000 26BA                  	dc.w 0, ringart+$2000		; subtype, frame, VRAM setting (2 bytes)
0001F794 2600 B85A                  	dc.l Map_obj26+$26000000
0001F798 0000 0680                  	dc.b 0,	0, 6, $80
0001F79C 1F00 AAD4                  	dc.l Map_obj1F+$1F000000
0001F7A0 0000 0400                  	dc.b 0,	0, 4, 0
0001F7A4 2200 ADB4                  	dc.l Map_obj22+$22000000
0001F7A8 0000 0444                  	dc.b 0,	0, 4, $44
0001F7AC 2B00 BE7C                  	dc.l Map_obj2B+$2B000000
0001F7B0 0000 047B                  	dc.b 0,	0, 4, $7B
0001F7B4 3600 E342                  	dc.l Map_obj36+$36000000
0001F7B8 0000 051B                  	dc.b 0,	0, 5, $1B
0001F7BC 1800 92CA                  	dc.l Map_obj18+$18000000
0001F7C0 0000 4000                  	dc.b 0,	0, $40,	0
0001F7C4 3B00 E488                  	dc.l Map_obj3B+$3B000000
0001F7C8 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001F7CC 4001 10A2                  	dc.l Map_obj40+$40000000
0001F7D0 0000 04F0                  	dc.b 0,	0, 4, $F0
0001F7D4 4100 F5BA                  	dc.l Map_obj41+$41000000
0001F7D8 0000 0523                  	dc.b 0,	0, 5, $23
0001F7DC 4200 F7E0                  	dc.l Map_obj42+$42000000
0001F7E0 0000 249B                  	dc.b 0,	0, $24,	$9B
0001F7E4 4400 FAF8                  	dc.l Map_obj44+$44000000
0001F7E8 0000 434C                  	dc.b 0,	0, $43,	$4C
0001F7EC 1900 9338                  	dc.l Map_obj48+$19000000
0001F7F0 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001F7F4 7901 9142                  	dc.l Map_obj79+$79000000
0001F7F8 0100 0571                  	dc.w $100, lamppostart
0001F7FC 4B00 B2B4                  	dc.l Map_obj4B+$4B000000
0001F800 0000 222D                  	dc.w 0, ssringart+$2000
0001F804 7D01 92A0                  	dc.l Map_obj7D+$7D000000
0001F808 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001F80C                            	even
0001F80C                            	even
0001F80C                            
0001F80C                            ; ---------------------------------------------------------------------------
0001F80C                            ; Debug	list - Labyrinth
0001F80C                            ; ---------------------------------------------------------------------------
0001F80C                            Debug_LZ:
0001F80C                            	include "_inc\Debug list - LZ.asm"
0001F80C                            ; ---------------------------------------------------------------------------
0001F80C                            ; Debug	list - Labyrinth
0001F80C                            ; ---------------------------------------------------------------------------
0001F80C 0019                       	dc.w $19
0001F80E 2500 B274                  	dc.l Map_obj25+$25000000
0001F812 0000 26BA                  	dc.w 0, ringart+$2000
0001F816 2600 B85A                  	dc.l Map_obj26+$26000000
0001F81A 0000 0680                  	dc.b 0,	0, 6, $80
0001F81E 4100 F5BA                  	dc.l Map_obj41+$41000000
0001F822 0000 0523                  	dc.b 0,	0, 5, $23
0001F826 2C00 BF22                  	dc.l Map_obj2C+$2C000000
0001F82A 0800 2486                  	dc.b 8,	0, $24,	$86
0001F82E 2D00 C136                  	dc.l Map_obj2D+$2D000000
0001F832 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001F836 1601 3908                  	dc.l Map_obj16+$16000000
0001F83A 0000 03CC                  	dc.b 0,	0, 3, $CC
0001F83E 1601 3908                  	dc.l Map_obj16+$16000000
0001F842 0203 03CC                  	dc.b 2,	3, 3, $CC
0001F846 3300 D610                  	dc.l Map_obj33+$33000000
0001F84A 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001F84E 3200 D1D4                  	dc.l Map_obj32+$32000000
0001F852 0000 0513                  	dc.b 0,	0, 5, $13
0001F856 3600 E342                  	dc.l Map_obj36+$36000000
0001F85A 0000 051B                  	dc.b 0,	0, 5, $1B
0001F85E 5201 19D6                  	dc.l Map_obj52a+$52000000
0001F862 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001F866 6101 3B3E                  	dc.l Map_obj61+$61000000
0001F86A 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001F86E 6101 3B3E                  	dc.l Map_obj61+$61000000
0001F872 1301 43E6                  	dc.b $13, 1, $43, $E6
0001F876 6101 3B3E                  	dc.l Map_obj61+$61000000
0001F87A 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001F87E 6201 3C92                  	dc.l Map_obj62+$62000000
0001F882 0000 443E                  	dc.b 0,	0, $44,	$3E
0001F886 6101 3B3E                  	dc.l Map_obj61+$61000000
0001F88A 2702 43E6                  	dc.b $27, 2, $43, $E6
0001F88E 6101 3B3E                  	dc.l Map_obj61+$61000000
0001F892 3003 43E6                  	dc.b $30, 3, $43, $E6
0001F896 6301 4002                  	dc.l Map_obj63+$63000000
0001F89A 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001F89E 6001 3852                  	dc.l Map_obj60+$60000000
0001F8A2 0000 0467                  	dc.b 0,	0, 4, $67
0001F8A6 6401 43BA                  	dc.l Map_obj64+$64000000
0001F8AA 8413 8348                  	dc.b $84, $13, $83, $48
0001F8AE 6501 4542                  	dc.l Map_obj65+$65000000
0001F8B2 0202 C259                  	dc.b 2,	2, $C2,	$59
0001F8B6 6501 4542                  	dc.l Map_obj65+$65000000
0001F8BA 0909 C259                  	dc.b 9,	9, $C2,	$59
0001F8BE 0B01 2C7C                  	dc.l Map_obj0B+$B000000
0001F8C2 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001F8C6 0C01 2D4C                  	dc.l Map_obj0C+$C000000
0001F8CA 0200 4328                  	dc.b 2,	0, $43,	$28
0001F8CE 7901 9142                  	dc.l Map_obj79+$79000000
0001F8D2 0100 0571                  	dc.w $100, lamppostart
0001F8D6                            	even
0001F8D6                            	even
0001F8D6                            
0001F8D6                            ; ---------------------------------------------------------------------------
0001F8D6                            ; Debug	list - Marble
0001F8D6                            ; ---------------------------------------------------------------------------
0001F8D6                            Debug_MZ:
0001F8D6                            	include "_inc\Debug list - MZ.asm"
0001F8D6                            ; ---------------------------------------------------------------------------
0001F8D6                            ; Debug	list - Marble
0001F8D6                            ; ---------------------------------------------------------------------------
0001F8D6 0012                       	dc.w $12
0001F8D8 2500 B274                  	dc.l Map_obj25+$25000000
0001F8DC 0000 26BA                  	dc.w 0, ringart+$2000
0001F8E0 2600 B85A                  	dc.l Map_obj26+$26000000
0001F8E4 0000 0680                  	dc.b 0,	0, 6, $80
0001F8E8 2200 ADB4                  	dc.l Map_obj22+$22000000
0001F8EC 0000 0444                  	dc.b 0,	0, 4, $44
0001F8F0 3600 E342                  	dc.l Map_obj36+$36000000
0001F8F4 0000 051B                  	dc.b 0,	0, 5, $1B
0001F8F8 4100 F5BA                  	dc.l Map_obj41+$41000000
0001F8FC 0000 0523                  	dc.b 0,	0, 5, $23
0001F900 1300 C664                  	dc.l Map_obj14+$13000000
0001F904 0000 0345                  	dc.b 0,	0, 3, $45
0001F908 4601 01D8                  	dc.l Map_obj46+$46000000
0001F90C 0000 4000                  	dc.b 0,	0, $40,	0
0001F910 4C01 0B52                  	dc.l Map_obj4C+$4C000000
0001F914 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001F918 4E01 0E36                  	dc.l Map_obj4E+$4E000000
0001F91C 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001F920 3300 D610                  	dc.l Map_obj33+$33000000
0001F924 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001F928 5001 1230                  	dc.l Map_obj50+$50000000
0001F92C 0000 247B                  	dc.b 0,	0, $24,	$7B
0001F930 5101 16FC                  	dc.l Map_obj51+$51000000
0001F934 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001F938 5201 1980                  	dc.l Map_obj52+$52000000
0001F93C 0000 02B8                  	dc.b 0,	0, 2, $B8
0001F940 5300 98D0                  	dc.l Map_obj53+$53000000
0001F944 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001F948 5401 0B18                  	dc.l Map_obj54+$54000000
0001F94C 0000 8680                  	dc.b 0,	0, $86,	$80
0001F950 5501 1B74                  	dc.l Map_obj55+$55000000
0001F954 0000 04B8                  	dc.b 0,	0, 4, $B8
0001F958 7801 8DD6                  	dc.l Map_obj78+$78000000
0001F95C 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001F960 7901 9142                  	dc.l Map_obj79+$79000000
0001F964 0100 0571                  	dc.w $100, lamppostart
0001F968                            	even
0001F968                            	even
0001F968                            
0001F968                            ; ---------------------------------------------------------------------------
0001F968                            ; Debug	list - Star Light
0001F968                            ; ---------------------------------------------------------------------------
0001F968                            Debug_SLZ:
0001F968                            	include "_inc\Debug list - SLZ.asm"
0001F968                            ; ---------------------------------------------------------------------------
0001F968                            ; Debug	list - Star Light
0001F968                            ; ---------------------------------------------------------------------------
0001F968 000F                       	dc.w $F
0001F96A 2500 B274                  	dc.l Map_obj25+$25000000
0001F96E 0000 26BA                  	dc.w 0, ringart+$2000
0001F972 2600 B85A                  	dc.l Map_obj26+$26000000
0001F976 0000 0680                  	dc.b 0,	0, 6, $80
0001F97A 5901 2688                  	dc.l Map_obj59+$59000000
0001F97E 0000 4000                  	dc.b 0,	0, $40,	0
0001F982 5300 98D0                  	dc.l Map_obj53+$53000000
0001F986 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001F98A 1800 9328                  	dc.l Map_obj18b+$18000000
0001F98E 0000 4000                  	dc.b 0,	0, $40,	0
0001F992 5A01 27D0                  	dc.l Map_obj5A+$5A000000
0001F996 0000 4000                  	dc.b 0,	0, $40,	0
0001F99A 5B01 2996                  	dc.l Map_obj5B+$5B000000
0001F99E 0000 4000                  	dc.b 0,	0, $40,	0
0001F9A2 5D01 2F84                  	dc.l Map_obj5D+$5D000000
0001F9A6 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001F9AA 5E01 3324                  	dc.l Map_obj5E+$5E000000
0001F9AE 0000 0374                  	dc.b 0,	0, 3, $74
0001F9B2 4100 F5BA                  	dc.l Map_obj41+$41000000
0001F9B6 0000 0523                  	dc.b 0,	0, 5, $23
0001F9BA 1300 C664                  	dc.l Map_obj14+$13000000
0001F9BE 0000 0480                  	dc.b 0,	0, 4, $80
0001F9C2 1C00 9A16                  	dc.l Map_obj1C+$1C000000
0001F9C6 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001F9CA 5F01 35A2                  	dc.l Map_obj5F+$5F000000
0001F9CE 0000 0400                  	dc.b 0,	0, 4, 0
0001F9D2 6001 3852                  	dc.l Map_obj60+$60000000
0001F9D6 0000 2429                  	dc.b 0,	0, $24,	$29
0001F9DA 7901 9142                  	dc.l Map_obj79+$79000000
0001F9DE 0100 0571                  	dc.w $100, lamppostart
0001F9E2                            	even
0001F9E2                            	even
0001F9E2                            
0001F9E2                            ; ---------------------------------------------------------------------------
0001F9E2                            ; Debug	list - Spring Yard
0001F9E2                            ; ---------------------------------------------------------------------------
0001F9E2                            Debug_SYZ:
0001F9E2                            	include "_inc\Debug list - SYZ.asm"
0001F9E2                            ; ---------------------------------------------------------------------------
0001F9E2                            ; Debug	list - Spring Yard
0001F9E2                            ; ---------------------------------------------------------------------------
0001F9E2 000F                       	dc.w $F
0001F9E4 2500 B274                  	dc.l Map_obj25+$25000000
0001F9E8 0000 26BA                  	dc.w 0, ringart+$2000
0001F9EC 2600 B85A                  	dc.l Map_obj26+$26000000
0001F9F0 0000 0680                  	dc.b 0,	0, 6, $80
0001F9F4 3600 E342                  	dc.l Map_obj36+$36000000
0001F9F8 0000 051B                  	dc.b 0,	0, 5, $1B
0001F9FC 4100 F5BA                  	dc.l Map_obj41+$41000000
0001FA00 0000 0523                  	dc.b 0,	0, 5, $23
0001FA04 4300 FA3A                  	dc.l Map_obj43+$43000000
0001FA08 0000 04B8                  	dc.b 0,	0, 4, $B8
0001FA0C 1201 0264                  	dc.l Map_obj12+$12000000
0001FA10 0000 0000                  	dc.b 0,	0, 0, 0
0001FA14 4701 03DE                  	dc.l Map_obj47+$47000000
0001FA18 0000 0380                  	dc.b 0,	0, 3, $80
0001FA1C 1F00 AAD4                  	dc.l Map_obj1F+$1F000000
0001FA20 0000 0400                  	dc.b 0,	0, 4, 0
0001FA24 2200 ADB4                  	dc.l Map_obj22+$22000000
0001FA28 0000 0444                  	dc.b 0,	0, 4, $44
0001FA2C 5001 1230                  	dc.l Map_obj50+$50000000
0001FA30 0000 247B                  	dc.b 0,	0, $24,	$7B
0001FA34 1800 9316                  	dc.l Map_obj18a+$18000000
0001FA38 0000 4000                  	dc.b 0,	0, $40,	0
0001FA3C 5601 2024                  	dc.l Map_obj56+$56000000
0001FA40 0000 4000                  	dc.b 0,	0, $40,	0
0001FA44 3200 D1D4                  	dc.l Map_obj32+$32000000
0001FA48 0000 0513                  	dc.b 0,	0, 5, $13
0001FA4C 7801 8DD6                  	dc.l Map_obj78+$78000000
0001FA50 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001FA54 7901 9142                  	dc.l Map_obj79+$79000000
0001FA58 0100 0571                  	dc.w $100, lamppostart
0001FA5C                            	even
0001FA5C                            	even
0001FA5C                            
0001FA5C                            ; ---------------------------------------------------------------------------
0001FA5C                            ; Debug	list - Scrap Brain
0001FA5C                            ; ---------------------------------------------------------------------------
0001FA5C                            Debug_SBZ:
0001FA5C                            	include "_inc\Debug list - SBZ.asm"
0001FA5C                            ; ---------------------------------------------------------------------------
0001FA5C                            ; Debug	list - Scrap Brain
0001FA5C                            ; ---------------------------------------------------------------------------
0001FA5C 001D                       	dc.w $1D
0001FA5E 2500 B274                  	dc.l Map_obj25+$25000000
0001FA62 0000 26BA                  	dc.w 0, ringart+$2000
0001FA66 2600 B85A                  	dc.l Map_obj26+$26000000
0001FA6A 0000 0680                  	dc.b 0,	0, 6, $80
0001FA6E 5F01 35A2                  	dc.l Map_obj5F+$5F000000
0001FA72 0000 0400                  	dc.b 0,	0, 4, 0
0001FA76 6001 3852                  	dc.l Map_obj60+$60000000
0001FA7A 0000 0429                  	dc.b 0,	0, 4, $29
0001FA7E 7801 8DD6                  	dc.l Map_obj78+$78000000
0001FA82 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001FA86 1501 23D6                  	dc.l Map_obj15b+$15000000
0001FA8A 0702 4391                  	dc.b 7,	2, $43,	$91
0001FA8E 6701 7704                  	dc.l Map_obj67+$67000000
0001FA92 E000 C344                  	dc.b $E0, 0, $C3, $44
0001FA96 5201 1980                  	dc.l Map_obj52+$52000000
0001FA9A 2802 22C0                  	dc.b $28, 2, $22, $C0
0001FA9E 3200 D1D4                  	dc.l Map_obj32+$32000000
0001FAA2 0000 0513                  	dc.b 0,	0, 5, $13
0001FAA6 6901 796C                  	dc.l Map_obj69+$69000000
0001FAAA 0300 4492                  	dc.b 3,	0, $44,	$92
0001FAAE 6901 79C6                  	dc.l Map_obj69a+$69000000
0001FAB2 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001FAB6 6A01 7C26                  	dc.l Map_obj6A+$6A000000
0001FABA 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001FABE 5300 98D0                  	dc.l Map_obj53+$53000000
0001FAC2 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001FAC6 5201 1980                  	dc.l Map_obj52+$52000000
0001FACA 3903 4460                  	dc.b $39, 3, $44, $60
0001FACE 6B01 7FCC                  	dc.l Map_obj6B+$6B000000
0001FAD2 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001FAD6 2A00 9D7E                  	dc.l Map_obj2A+$2A000000
0001FADA 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001FADE 6B01 7FCC                  	dc.l Map_obj6B+$6B000000
0001FAE2 1301 22C0                  	dc.b $13, 1, $22, $C0
0001FAE6 6A01 7C26                  	dc.l Map_obj6A+$6A000000
0001FAEA 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001FAEE 6B01 7FCC                  	dc.l Map_obj6B+$6B000000
0001FAF2 2401 22C0                  	dc.b $24, 1, $22, $C0
0001FAF6 6A01 7C26                  	dc.l Map_obj6A+$6A000000
0001FAFA 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001FAFE 6B01 7FCC                  	dc.l Map_obj6B+$6B000000
0001FB02 3401 22C0                  	dc.b $34, 1, $22, $C0
0001FB06 6C01 818E                  	dc.l Map_obj6C+$6C000000
0001FB0A 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001FB0E 6D00 FEB8                  	dc.l Map_obj6D+$6D000000
0001FB12 6400 83D9                  	dc.b $64, 0, $83, $D9
0001FB16 6D00 FEB8                  	dc.l Map_obj6D+$6D000000
0001FB1A 640B 83D9                  	dc.b $64, $B, $83, $D9
0001FB1E 6E01 8244                  	dc.l Map_obj6E+$6E000000
0001FB22 0400 047E                  	dc.b 4,	0, 4, $7E
0001FB26 7001 868E                  	dc.l Map_obj70+$70000000
0001FB2A 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001FB2E 7101 2E1A                  	dc.l Map_obj71+$71000000
0001FB32 1100 8680                  	dc.b $11, 0, $86, $80
0001FB36 1E00 A1EC                  	dc.l Map_obj1E+$1E000000
0001FB3A 0400 2302                  	dc.b 4,	0, $23,	2
0001FB3E 7901 9142                  	dc.l Map_obj79+$79000000
0001FB42 0100 0571                  	dc.w $100, lamppostart
0001FB46                            	even
0001FB46                            	even
0001FB46                            
0001FB46                            ; ---------------------------------------------------------------------------
0001FB46                            ; Debug	list - ending sequence / special stage
0001FB46                            ; ---------------------------------------------------------------------------
0001FB46                            Debug_Ending:
0001FB46                            	include "_inc\Debug list - Ending and SS.asm"
0001FB46                            ; ---------------------------------------------------------------------------
0001FB46                            ; Debug	list - ending sequence / special stage
0001FB46                            ; ---------------------------------------------------------------------------
0001FB46 000D                       	dc.w $D
0001FB48 2500 B274                  	dc.l Map_obj25+$25000000
0001FB4C 0000 26BA                  	dc.w 0, ringart+$2000
0001FB50 4701 03DE                  	dc.l Map_obj47+$47000000
0001FB54 0000 0380                  	dc.b 0,	0, 3, $80
0001FB58 2800 A806                  	dc.l Map_obj28a+$28000000
0001FB5C 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001FB60 2800 A806                  	dc.l Map_obj28a+$28000000
0001FB64 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001FB68 2800 A806                  	dc.l Map_obj28a+$28000000
0001FB6C 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001FB70 2800 A7EE                  	dc.l Map_obj28+$28000000
0001FB74 0D00 0553                  	dc.b $D, 0, 5, $53
0001FB78 2800 A7EE                  	dc.l Map_obj28+$28000000
0001FB7C 0E00 0553                  	dc.b $E, 0, 5, $53
0001FB80 2800 A7EE                  	dc.l Map_obj28+$28000000
0001FB84 0F00 0573                  	dc.b $F, 0, 5, $73
0001FB88 2800 A7EE                  	dc.l Map_obj28+$28000000
0001FB8C 1000 0573                  	dc.b $10, 0, 5,	$73
0001FB90 2800 A806                  	dc.l Map_obj28a+$28000000
0001FB94 1100 0585                  	dc.b $11, 0, 5,	$85
0001FB98 2800 A81E                  	dc.l Map_obj28b+$28000000
0001FB9C 1200 0593                  	dc.b $12, 0, 5,	$93
0001FBA0 2800 A806                  	dc.l Map_obj28a+$28000000
0001FBA4 1300 0565                  	dc.b $13, 0, 5,	$65
0001FBA8 2800 A81E                  	dc.l Map_obj28b+$28000000
0001FBAC 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001FBB0                            	even
0001FBB0                            	even
0001FBB0                            
0001FBB0                            ; ---------------------------------------------------------------------------
0001FBB0                            ; Main level load blocks
0001FBB0                            ; ---------------------------------------------------------------------------
0001FBB0                            MainLoadBlocks:
0001FBB0                            	include "_inc\Main level load blocks.asm"
0001FBB0                            ; ---------------------------------------------------------------------------
0001FBB0                            ; Main level load blocks
0001FBB0                            ;
0001FBB0                            ; ===FORMAT===
0001FBB0                            ; level	patterns + (1st	PLC num	* 10^6)
0001FBB0                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001FBB0                            ; 256x256 mappings
0001FBB0                            ; blank, music (unused), pal index (unused), pal index
0001FBB0                            ; ---------------------------------------------------------------------------
0001FBB0 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001FBB4 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001FBB8 0000 0000                  	dc.l Blk256_GHZ
0001FBBC 0081 0404                  	dc.b 0,	$81, 4,	4
0001FBC0 0000 0000                  	dc.l Nem_LZ+$6000000
0001FBC4 0000 0000                  	dc.l Blk16_LZ+$7000000
0001FBC8 0000 0000                  	dc.l Blk256_LZ
0001FBCC 0082 0505                  	dc.b 0,	$82, 5,	5
0001FBD0 0000 0000                  	dc.l Nem_MZ+$8000000
0001FBD4 0000 0000                  	dc.l Blk16_MZ+$9000000
0001FBD8 0000 0000                  	dc.l Blk256_MZ
0001FBDC 0083 0606                  	dc.b 0,	$83, 6,	6
0001FBE0 0000 0000                  	dc.l Nem_SLZ+$A000000
0001FBE4 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001FBE8 0000 0000                  	dc.l Blk256_SLZ
0001FBEC 0084 0707                  	dc.b 0,	$84, 7,	7
0001FBF0 0000 0000                  	dc.l Nem_SYZ+$C000000
0001FBF4 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001FBF8 0000 0000                  	dc.l Blk256_SYZ
0001FBFC 0085 0808                  	dc.b 0,	$85, 8,	8
0001FC00 0000 0000                  	dc.l Nem_SBZ+$E000000
0001FC04 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001FC08 0000 0000                  	dc.l Blk256_SBZ
0001FC0C 0086 0909                  	dc.b 0,	$86, 9,	9
0001FC10 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001FC14 0000 0000                  	dc.l Blk16_GHZ
0001FC18 0000 0000                  	dc.l Blk256_GHZ
0001FC1C 0086 1313                  	dc.b 0,	$86, $13, $13
0001FC20                            	even
0001FC20                            	even
0001FC20                            
0001FC20                            ; ---------------------------------------------------------------------------
0001FC20                            ; Pattern load cues
0001FC20                            ; ---------------------------------------------------------------------------
0001FC20                            ArtLoadCues:
0001FC20                            	include "_inc\Pattern load cues.asm"
0001FC20                            ; ---------------------------------------------------------------------------
0001FC20                            ; Pattern load cues - index
0001FC20                            ; ---------------------------------------------------------------------------
0001FC20 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001FC24 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001FC28 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001FC2C 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001FC30 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001FC34 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001FC38 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001FC3C 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001FC40 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001FC44 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001FC48 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001FC4C 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001FC50 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001FC54 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001FC58 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001FC5C 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001FC60                            ; ---------------------------------------------------------------------------
0001FC60                            ; Pattern load cues - standard block 1
0001FC60                            ; ---------------------------------------------------------------------------
0001FC60 0002                       PLC_Main:	dc.w 2
0001FC62 0000 0000                  		dc.l Nem_Hud		; HUD
0001FC66 D940                       		dc.w $D940
0001FC68 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001FC6C FA80                       		dc.w $FA80
0001FC6E 0000 0000                  		dc.l Nem_Ring		; rings
0001FC72 D740                       		dc.w ringart*$20
0001FC74                            ; ---------------------------------------------------------------------------
0001FC74                            ; Pattern load cues - standard block 2
0001FC74                            ; ---------------------------------------------------------------------------
0001FC74 0002                       PLC_Main2:	dc.w 2
0001FC76 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001FC7A AE20                       		dc.w lamppostart*$20
0001FC7C 0000 0000                  		dc.l Nem_Points		; points from enemy
0001FC80 AD00                       		dc.w pointsart*$20
0001FC82 0000 0000                  		dc.l Nem_Monitors	; monitors
0001FC86 D000                       		dc.w $D000
0001FC88                            ; ---------------------------------------------------------------------------
0001FC88                            ; Pattern load cues - explosion
0001FC88                            ; ---------------------------------------------------------------------------
0001FC88 0000                       PLC_Explode:	dc.w 0
0001FC8A 0000 0000                  		dc.l Nem_Explode	; explosion
0001FC8E B400                       		dc.w $B400
0001FC90                            ; ---------------------------------------------------------------------------
0001FC90                            ; Pattern load cues - game/time	over
0001FC90                            ; ---------------------------------------------------------------------------
0001FC90 0000                       PLC_GameOver:	dc.w 0
0001FC92 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001FC96 ABC0                       		dc.w $ABC0
0001FC98                            ; ---------------------------------------------------------------------------
0001FC98                            ; Pattern load cues - Green Hill
0001FC98                            ; ---------------------------------------------------------------------------
0001FC98 0009                       PLC_GHZ:	dc.w $9
0001FC9A 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001FC9E 6B00                       		dc.w $6B00
0001FCA0 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001FCA4 7A00                       		dc.w $7A00
0001FCA6 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001FCAA 8000                       		dc.w $8000
0001FCAC 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FCB0 8880                       		dc.w $8880
0001FCB2 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001FCB6 8F60                       		dc.w $8F60
0001FCB8 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001FCBC 9360                       		dc.w $9360
0001FCBE 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001FCC2 9E00                       		dc.w $9E00
0001FCC4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FCC8 A360                       		dc.w $A360
0001FCCA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FCCE A460                       		dc.w $A460
0001FCD0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FCD4 A660                       		dc.w $A660
0001FCD6 0005                       PLC_GHZ2:	dc.w 5
0001FCD8 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001FCDC 7000                       		dc.w $7000
0001FCDE 0000 0000                  		dc.l Nem_Bridge		; bridge
0001FCE2 71C0                       		dc.w $71C0
0001FCE4 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001FCE8 7300                       		dc.w $7300
0001FCEA 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001FCEE 7540                       		dc.w $7540
0001FCF0 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001FCF4 A1E0                       		dc.w $A1E0
0001FCF6 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001FCFA 6980                       		dc.w $6980
0001FCFC                            ; ---------------------------------------------------------------------------
0001FCFC                            ; Pattern load cues - Labyrinth
0001FCFC                            ; ---------------------------------------------------------------------------
0001FCFC 000A                       PLC_LZ:		dc.w $A
0001FCFE 0000 0000                  		dc.l Nem_LzBlock1	; block
0001FD02 3C00                       		dc.w $3C00
0001FD04 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001FD08 3E00                       		dc.w $3E00
0001FD0A 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001FD0E 4B20                       		dc.w $4B20
0001FD10 0000 0000                  		dc.l Nem_Water		; water	surface
0001FD14 6000                       		dc.w $6000
0001FD16 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001FD1A 6200                       		dc.w $6200
0001FD1C 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001FD20 6500                       		dc.w $6500
0001FD22 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001FD26 6900                       		dc.w $6900
0001FD28 0000 0000                  		dc.l Nem_LzBlock3	; block
0001FD2C 7780                       		dc.w $7780
0001FD2E 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001FD32 7880                       		dc.w $7880
0001FD34 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001FD38 7980                       		dc.w $7980
0001FD3A 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001FD3E 94C0                       		dc.w $94C0
0001FD40 000C                       PLC_LZ2:	dc.w $C
0001FD42 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001FD46 7BC0                       		dc.w $7BC0
0001FD48 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001FD4C 7CC0                       		dc.w $7CC0
0001FD4E 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001FD52 7EC0                       		dc.w $7EC0
0001FD54 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001FD58 5D20                       		dc.w $5D20
0001FD5A 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001FD5E 8800                       		dc.w $8800
0001FD60 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001FD64 89E0                       		dc.w $89E0
0001FD66 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FD6A 8CE0                       		dc.w $8CE0
0001FD6C 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001FD70 90C0                       		dc.w $90C0
0001FD72 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FD76 A1E0                       		dc.w $A1E0
0001FD78 0000 0000                  		dc.l Nem_Cork		; cork block
0001FD7C A000                       		dc.w $A000
0001FD7E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FD82 A360                       		dc.w $A360
0001FD84 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FD88 A460                       		dc.w $A460
0001FD8A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FD8E A660                       		dc.w $A660
0001FD90                            ; ---------------------------------------------------------------------------
0001FD90                            ; Pattern load cues - Marble
0001FD90                            ; ---------------------------------------------------------------------------
0001FD90 0008                       PLC_MZ:		dc.w 8
0001FD92 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001FD96 6000                       		dc.w $6000
0001FD98 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001FD9C 68A0                       		dc.w $68A0
0001FD9E 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001FDA2 7000                       		dc.w $7000
0001FDA4 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001FDA8 71C0                       		dc.w $71C0
0001FDAA 0000 0000                  		dc.l Nem_Lava		; lava
0001FDAE 7500                       		dc.w $7500
0001FDB0 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FDB4 8880                       		dc.w $8880
0001FDB6 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001FDBA 8F60                       		dc.w $8F60
0001FDBC 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001FDC0 9700                       		dc.w $9700
0001FDC2 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FDC6 9FE0                       		dc.w $9FE0
0001FDC8 0004                       PLC_MZ2:	dc.w 4
0001FDCA 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001FDCE A260                       		dc.w $A260
0001FDD0 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FDD4 A360                       		dc.w $A360
0001FDD6 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FDDA A460                       		dc.w $A460
0001FDDC 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FDE0 A660                       		dc.w $A660
0001FDE2 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001FDE6 5700                       		dc.w $5700
0001FDE8                            ; ---------------------------------------------------------------------------
0001FDE8                            ; Pattern load cues - Star Light
0001FDE8                            ; ---------------------------------------------------------------------------
0001FDE8 0007                       PLC_SLZ:	dc.w 7
0001FDEA 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001FDEE 8000                       		dc.w $8000
0001FDF0 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FDF4 8520                       		dc.w $8520
0001FDF6 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001FDFA 9000                       		dc.w $9000
0001FDFC 0000 0000                  		dc.l Nem_SlzBlock	; block
0001FE00 9C00                       		dc.w $9C00
0001FE02 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001FE06 A260                       		dc.w $A260
0001FE08 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FE0C A360                       		dc.w $A360
0001FE0E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FE12 A460                       		dc.w $A460
0001FE14 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FE18 A660                       		dc.w $A660
0001FE1A 0005                       PLC_SLZ2:	dc.w 5
0001FE1C 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001FE20 6E80                       		dc.w $6E80
0001FE22 0000 0000                  		dc.l Nem_Fan		; fan
0001FE26 7400                       		dc.w $7400
0001FE28 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001FE2C 7980                       		dc.w $7980
0001FE2E 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001FE32 7B80                       		dc.w $7B80
0001FE34 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001FE38 9B00                       		dc.w $9B00
0001FE3A 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001FE3E 9E00                       		dc.w $9E00
0001FE40                            ; ---------------------------------------------------------------------------
0001FE40                            ; Pattern load cues - Spring Yard
0001FE40                            ; ---------------------------------------------------------------------------
0001FE40 0003                       PLC_SYZ:	dc.w 3
0001FE42 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001FE46 8000                       		dc.w $8000
0001FE48 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FE4C 8880                       		dc.w $8880
0001FE4E 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001FE52 8F60                       		dc.w $8F60
0001FE54 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001FE58 9700                       		dc.w $9700
0001FE5A 0006                       PLC_SYZ2:	dc.w 6
0001FE5C 0000 0000                  		dc.l Nem_Bumper		; bumper
0001FE60 7000                       		dc.w $7000
0001FE62 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001FE66 72C0                       		dc.w $72C0
0001FE68 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001FE6C 7740                       		dc.w $7740
0001FE6E 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FE72 A1E0                       		dc.w $A1E0
0001FE74 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FE78 A360                       		dc.w $A360
0001FE7A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FE7E A460                       		dc.w $A460
0001FE80 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FE84 A660                       		dc.w $A660
0001FE86                            ; ---------------------------------------------------------------------------
0001FE86                            ; Pattern load cues - Scrap Brain
0001FE86                            ; ---------------------------------------------------------------------------
0001FE86 000A                       PLC_SBZ:	dc.w $A
0001FE88 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001FE8C 5800                       		dc.w $5800
0001FE8E 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001FE92 5D00                       		dc.w $5D00
0001FE94 0000 0000                  		dc.l Nem_Girder		; girder
0001FE98 5E00                       		dc.w $5E00
0001FE9A 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001FE9E 6040                       		dc.w $6040
0001FEA0 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001FEA4 6880                       		dc.w $6880
0001FEA6 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001FEAA 6900                       		dc.w $6900
0001FEAC 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001FEB0 7220                       		dc.w $7220
0001FEB2 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001FEB6 76A0                       		dc.w $76A0
0001FEB8 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001FEBC 7B20                       		dc.w $7B20
0001FEBE 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001FEC2 7EA0                       		dc.w $7EA0
0001FEC4 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001FEC8 9860                       		dc.w $9860
0001FECA 000C                       PLC_SBZ2:	dc.w $C
0001FECC 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FED0 5600                       		dc.w $5600
0001FED2 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001FED6 8000                       		dc.w $8000
0001FED8 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FEDC 8520                       		dc.w $8520
0001FEDE 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001FEE2 8C00                       		dc.w $8C00
0001FEE4 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001FEE8 8DE0                       		dc.w $8DE0
0001FEEA 0000 0000                  		dc.l Nem_Electric	; electric orb
0001FEEE 8FC0                       		dc.w $8FC0
0001FEF0 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001FEF4 9240                       		dc.w $9240
0001FEF6 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001FEFA 7F20                       		dc.w $7F20
0001FEFC 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001FF00 9BE0                       		dc.w $9BE0
0001FF02 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FF06 A1E0                       		dc.w $A1E0
0001FF08 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FF0C A360                       		dc.w $A360
0001FF0E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FF12 A460                       		dc.w $A460
0001FF14 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FF18 A660                       		dc.w $A660
0001FF1A                            ; ---------------------------------------------------------------------------
0001FF1A                            ; Pattern load cues - title card
0001FF1A                            ; ---------------------------------------------------------------------------
0001FF1A 0000                       PLC_TitleCard:	dc.w 0
0001FF1C 0000 0000                  		dc.l Nem_TitleCard
0001FF20 B000                       		dc.w $B000
0001FF22                            ; ---------------------------------------------------------------------------
0001FF22                            ; Pattern load cues - act 3 boss
0001FF22                            ; ---------------------------------------------------------------------------
0001FF22 0005                       PLC_Boss:	dc.w 5
0001FF24 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001FF28 8000                       		dc.w $8000
0001FF2A 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001FF2E 8D80                       		dc.w $8D80
0001FF30 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001FF34 93A0                       		dc.w $93A0
0001FF36 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001FF3A A300                       		dc.w $A300
0001FF3C 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001FF40 A300                       		dc.w $A300
0001FF42 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001FF46 A540                       		dc.w $A540
0001FF48                            ; ---------------------------------------------------------------------------
0001FF48                            ; Pattern load cues - act 1/2 signpost
0001FF48                            ; ---------------------------------------------------------------------------
0001FF48 0002                       PLC_Signpost:	dc.w 2
0001FF4A 0000 0000                  		dc.l Nem_SignPost	; signpost
0001FF4E D000                       		dc.w $D000
0001FF50 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001FF54 96C0                       		dc.w $96C0
0001FF56 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001FF5A 8C40                       		dc.w $8C40
0001FF5C                            ; ---------------------------------------------------------------------------
0001FF5C                            ; Pattern load cues - beta special stage warp effect
0001FF5C                            ; ---------------------------------------------------------------------------
0001FF5C 0000                       PLC_Warp:	dc.w 0
0001FF5E 0000 0000                  		dc.l Nem_Warp
0001FF62 A820                       		dc.w $A820
0001FF64                            ; ---------------------------------------------------------------------------
0001FF64                            ; Pattern load cues - special stage
0001FF64                            ; ---------------------------------------------------------------------------
0001FF64 000C                       PLC_SpeStage:	dc.w $C
0001FF66 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001FF6A 0000                       		dc.w 0
0001FF6C 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001FF70 0A20                       		dc.w $A20
0001FF72 0000 0000                  		dc.l Nem_Bumper		; bumper
0001FF76 4760                       		dc.w $4760
0001FF78 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001FF7C 4A20                       		dc.w $4A20
0001FF7E 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001FF82 4C60                       		dc.w $4C60
0001FF84 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001FF88 5E00                       		dc.w $5E00
0001FF8A 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001FF8E 6E00                       		dc.w $6E00
0001FF90 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001FF94 7E00                       		dc.w $7E00
0001FF96 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001FF9A 8E00                       		dc.w $8E00
0001FF9C 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001FFA0 9E00                       		dc.w $9E00
0001FFA2 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001FFA6 BE00                       		dc.w $BE00
0001FFA8 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001FFAC EE00                       		dc.w $EE00
0001FFAE 0000 0000                  		dc.l Nem_Ring		; rings
0001FFB2 45A0                       		dc.w ssringart*$20
0001FFB4                            ; ---------------------------------------------------------------------------
0001FFB4                            ; Pattern load cues - GHZ animals
0001FFB4                            ; ---------------------------------------------------------------------------
0001FFB4 0001                       PLC_GHZAnimals:	dc.w 1
0001FFB6 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FFBA B000                       		dc.w $B000
0001FFBC 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FFC0 B240                       		dc.w $B240
0001FFC2                            ; ---------------------------------------------------------------------------
0001FFC2                            ; Pattern load cues - LZ animals
0001FFC2                            ; ---------------------------------------------------------------------------
0001FFC2 0001                       PLC_LZAnimals:	dc.w 1
0001FFC4 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001FFC8 B000                       		dc.w $B000
0001FFCA 0000 0000                  		dc.l Nem_Seal		; seal
0001FFCE B240                       		dc.w $B240
0001FFD0                            ; ---------------------------------------------------------------------------
0001FFD0                            ; Pattern load cues - MZ animals
0001FFD0                            ; ---------------------------------------------------------------------------
0001FFD0 0001                       PLC_MZAnimals:	dc.w 1
0001FFD2 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001FFD6 B000                       		dc.w $B000
0001FFD8 0000 0000                  		dc.l Nem_Seal		; seal
0001FFDC B240                       		dc.w $B240
0001FFDE                            ; ---------------------------------------------------------------------------
0001FFDE                            ; Pattern load cues - SLZ animals
0001FFDE                            ; ---------------------------------------------------------------------------
0001FFDE 0001                       PLC_SLZAnimals:	dc.w 1
0001FFE0 0000 0000                  		dc.l Nem_Pig		; pig
0001FFE4 B000                       		dc.w $B000
0001FFE6 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FFEA B240                       		dc.w $B240
0001FFEC                            ; ---------------------------------------------------------------------------
0001FFEC                            ; Pattern load cues - SYZ animals
0001FFEC                            ; ---------------------------------------------------------------------------
0001FFEC 0001                       PLC_SYZAnimals:	dc.w 1
0001FFEE 0000 0000                  		dc.l Nem_Pig		; pig
0001FFF2 B000                       		dc.w $B000
0001FFF4 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FFF8 B240                       		dc.w $B240
0001FFFA                            ; ---------------------------------------------------------------------------
0001FFFA                            ; Pattern load cues - SBZ animals
0001FFFA                            ; ---------------------------------------------------------------------------
0001FFFA 0001                       PLC_SBZAnimals:	dc.w 1
0001FFFC 0000 0000                  		dc.l Nem_Rabbit		; rabbit
00020000 B000                       		dc.w $B000
00020002 0000 0000                  		dc.l Nem_Chicken	; chicken
00020006 B240                       		dc.w $B240
00020008                            ; ---------------------------------------------------------------------------
00020008                            ; Pattern load cues - special stage results screen
00020008                            ; ---------------------------------------------------------------------------
00020008 0001                       PLC_SpeStResult:dc.w 1
0002000A 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0002000E A820                       		dc.w $A820
00020010 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
00020014 AA20                       		dc.w $AA20
00020016                            ; ---------------------------------------------------------------------------
00020016                            ; Pattern load cues - ending sequence
00020016                            ; ---------------------------------------------------------------------------
00020016 000C                       PLC_Ending:	dc.w $C
00020018 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0002001C 6B00                       		dc.w $6B00
0002001E 0000 0000                  		dc.l Nem_EndFlower	; flowers
00020022 7400                       		dc.w $7400
00020024 0000 0000                  		dc.l Nem_EndEm		; emeralds
00020028 78A0                       		dc.w $78A0
0002002A 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0002002E 7C20                       		dc.w $7C20
00020030 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
00020034 A480                       		dc.w $A480
00020036 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0002003A AA60                       		dc.w $AA60
0002003C 0000 0000                  		dc.l Nem_Chicken	; chicken
00020040 ACA0                       		dc.w $ACA0
00020042 0000 0000                  		dc.l Nem_BlackBird	; blackbird
00020046 AE60                       		dc.w $AE60
00020048 0000 0000                  		dc.l Nem_Seal		; seal
0002004C B0A0                       		dc.w $B0A0
0002004E 0000 0000                  		dc.l Nem_Pig		; pig
00020052 B260                       		dc.w $B260
00020054 0000 0000                  		dc.l Nem_Flicky		; flicky
00020058 B4A0                       		dc.w $B4A0
0002005A 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0002005E B660                       		dc.w $B660
00020060 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
00020064 B8A0                       		dc.w $B8A0
00020066                            ; ---------------------------------------------------------------------------
00020066                            ; Pattern load cues - "TRY AGAIN" and "END" screens
00020066                            ; ---------------------------------------------------------------------------
00020066 0002                       PLC_TryAgain:	dc.w 2
00020068 0000 0000                  		dc.l Nem_EndEm		; emeralds
0002006C 78A0                       		dc.w $78A0
0002006E 0000 0000                  		dc.l Nem_TryAgain	; Eggman
00020072 7C20                       		dc.w $7C20
00020074 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
00020078 B400                       		dc.w $B400
0002007A                            ; ---------------------------------------------------------------------------
0002007A                            ; Pattern load cues - Eggman on SBZ 2
0002007A                            ; ---------------------------------------------------------------------------
0002007A 0002                       PLC_EggmanSBZ2:	dc.w 2
0002007C 0000 0000                  		dc.l Nem_SbzBlock	; block
00020080 A300                       		dc.w $A300
00020082 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
00020086 8000                       		dc.w $8000
00020088 0000 0000                  		dc.l Nem_LzSwitch	; switch
0002008C 9400                       		dc.w $9400
0002008E                            ; ---------------------------------------------------------------------------
0002008E                            ; Pattern load cues - final boss
0002008E                            ; ---------------------------------------------------------------------------
0002008E 0004                       PLC_FZBoss:	dc.w 4
00020090 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
00020094 7400                       		dc.w $7400
00020096 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0002009A 6000                       		dc.w $6000
0002009C 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
000200A0 8000                       		dc.w $8000
000200A2 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
000200A6 8E00                       		dc.w $8E00
000200A8 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
000200AC A540                       		dc.w $A540
000200AE                            		even
000200AE                            		even
000200AE                            
000200AE                            		incbin	misc\padding.bin
0002019C                            		even
0002019C                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
000205FE                            		even
000205FE                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
000206F6                            		even
000206F6                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
000207F0                            		even
000207F0                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
000217BC                            		even
000217BC                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023166 00                         		even
00023166                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
000231A8                            		even
000231A8                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023266                            		even
00023266                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
0002370E                            		even
0002370E                            ; ---------------------------------------------------------------------------
0002370E                            ; Sprite mappings - Sonic
0002370E                            ; ---------------------------------------------------------------------------
0002370E                            Map_Sonic:
0002370E                            	include "_maps\Sonic.asm"
0002370E                            ; ---------------------------------------------------------------------------
0002370E                            ; Sprite mappings - Sonic
0002370E                            ; ---------------------------------------------------------------------------
0002370E 0000 0000                  		dc.w byte_21292-Map_Sonic, byte_21293-Map_Sonic
00023712 0000 0000                  		dc.w byte_212A8-Map_Sonic, byte_212B8-Map_Sonic
00023716 0000 0000                  		dc.w byte_212C8-Map_Sonic, byte_212D8-Map_Sonic
0002371A 0000 0000                  		dc.w byte_212E8-Map_Sonic, byte_212FD-Map_Sonic
0002371E 0000 0000                  		dc.w byte_21308-Map_Sonic, byte_21313-Map_Sonic
00023722 0000 0000                  		dc.w byte_21328-Map_Sonic, byte_21333-Map_Sonic
00023726 0000 0000                  		dc.w byte_21343-Map_Sonic, byte_2135D-Map_Sonic
0002372A 0000 0000                  		dc.w byte_2137C-Map_Sonic, byte_21391-Map_Sonic
0002372E 0000 0000                  		dc.w byte_213AB-Map_Sonic, byte_213C0-Map_Sonic
00023732 0000 0000                  		dc.w byte_213DA-Map_Sonic, byte_213EF-Map_Sonic
00023736 0000 0000                  		dc.w byte_213FA-Map_Sonic, byte_21405-Map_Sonic
0002373A 0000 0000                  		dc.w byte_2141A-Map_Sonic, byte_21425-Map_Sonic
0002373E 0000 0000                  		dc.w byte_21435-Map_Sonic, byte_21454-Map_Sonic
00023742 0000 0000                  		dc.w byte_21473-Map_Sonic, byte_21488-Map_Sonic
00023746 0000 0000                  		dc.w byte_214A2-Map_Sonic, byte_214B7-Map_Sonic
0002374A 0000 0000                  		dc.w byte_214D1-Map_Sonic, byte_214DC-Map_Sonic
0002374E 0000 0000                  		dc.w byte_214E7-Map_Sonic, byte_214F2-Map_Sonic
00023752 0000 0000                  		dc.w byte_214FD-Map_Sonic, byte_21512-Map_Sonic
00023756 0000 0000                  		dc.w byte_21522-Map_Sonic, byte_21537-Map_Sonic
0002375A 0000 0000                  		dc.w byte_21547-Map_Sonic, byte_21552-Map_Sonic
0002375E 0000 0000                  		dc.w byte_2155D-Map_Sonic, byte_21568-Map_Sonic
00023762 0000 0000                  		dc.w byte_21573-Map_Sonic, byte_21588-Map_Sonic
00023766 0000 0000                  		dc.w byte_21593-Map_Sonic, byte_215A8-Map_Sonic
0002376A 0000 0000                  		dc.w byte_215B3-Map_Sonic, byte_215B9-Map_Sonic
0002376E 0000 0000                  		dc.w byte_215BF-Map_Sonic, byte_215C5-Map_Sonic
00023772 0000 0000                  		dc.w byte_215CB-Map_Sonic, byte_215D1-Map_Sonic
00023776 0000 0000                  		dc.w byte_215DC-Map_Sonic, byte_215E2-Map_Sonic
0002377A 0000 0000                  		dc.w byte_215ED-Map_Sonic, byte_215F3-Map_Sonic
0002377E 0000 0000                  		dc.w byte_215FE-Map_Sonic, byte_21613-Map_Sonic
00023782 0000 0000                  		dc.w byte_21628-Map_Sonic, byte_21638-Map_Sonic
00023786 0000 0000                  		dc.w byte_21648-Map_Sonic, byte_21658-Map_Sonic
0002378A 0000 0000                  		dc.w byte_21663-Map_Sonic, byte_21673-Map_Sonic
0002378E 0000 0000                  		dc.w byte_21683-Map_Sonic, byte_21693-Map_Sonic
00023792 0000 0000                  		dc.w byte_216A8-Map_Sonic, byte_216BD-Map_Sonic
00023796 0000 0000                  		dc.w byte_216D7-Map_Sonic, byte_216F1-Map_Sonic
0002379A 0000 0000                  		dc.w byte_216FC-Map_Sonic, byte_2170C-Map_Sonic
0002379E 0000 0000                  		dc.w byte_21717-Map_Sonic, byte_21727-Map_Sonic
000237A2 0000 0000                  		dc.w byte_21732-Map_Sonic, byte_21742-Map_Sonic
000237A6 0000 0000                  		dc.w byte_21752-Map_Sonic, byte_2176C-Map_Sonic
000237AA 0000 0000                  		dc.w byte_21786-Map_Sonic, byte_21791-Map_Sonic
000237AE 0000 0000                  		dc.w byte_217A1-Map_Sonic, byte_217A7-Map_Sonic
000237B2 0000 0000                  		dc.w byte_217AD-Map_Sonic, byte_217B3-Map_Sonic
000237B6 0000 0000                  		dc.w byte_217C3-Map_Sonic, byte_217D3-Map_Sonic
000237BA 0000 0000                  		dc.w byte_217E3-Map_Sonic, byte_217F3-Map_Sonic
000237BE 00                         byte_21292:	dc.b 0
000237BF 04                         byte_21293:	dc.b 4			; standing
000237C0 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
000237C5 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0
000237CA 0408 000B F0               		dc.b 4,	8, 0, $B, $F0
000237CF 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8
000237D4 03                         byte_212A8:	dc.b 3			; waiting 1
000237D5 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
000237DA FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
000237DF 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
000237E4 03                         byte_212B8:	dc.b 3			; waiting 2
000237E5 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
000237EA FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
000237EF 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
000237F4 03                         byte_212C8:	dc.b 3			; waiting 3
000237F5 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
000237FA FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
000237FF 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00023804 03                         byte_212D8:	dc.b 3			; looking up
00023805 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0002380A 0408 0009 F0               		dc.b 4,	8, 0, 9, $F0
0002380F 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00023814 04                         byte_212E8:	dc.b 4			; walking 1-1
00023815 EB0D 0000 EC               		dc.b $EB, $D, 0, 0, $EC
0002381A FB09 0008 EC               		dc.b $FB, 9, 0,	8, $EC
0002381F FB06 000E 04               		dc.b $FB, 6, 0,	$E, 4
00023824 0B04 0014 EC               		dc.b $B, 4, 0, $14, $EC
00023829 02                         byte_212FD:	dc.b 2			; walking 1-2
0002382A EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED
0002382F FC0E 0008 F5               		dc.b $FC, $E, 0, 8, $F5
00023834 02                         byte_21308:	dc.b 2			; walking 1-3
00023835 ED09 0000 F3               		dc.b $ED, 9, 0,	0, $F3
0002383A FD0A 0006 F3               		dc.b $FD, $A, 0, 6, $F3
0002383F 04                         byte_21313:	dc.b 4			; walking 1-4
00023840 EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
00023845 FB09 0006 EC               		dc.b $FB, 9, 0,	6, $EC
0002384A FB06 000C 04               		dc.b $FB, 6, 0,	$C, 4
0002384F 0B04 0012 EC               		dc.b $B, 4, 0, $12, $EC
00023854 02                         byte_21328:	dc.b 2			; walking 1-5
00023855 EC09 0000 F3               		dc.b $EC, 9, 0,	0, $F3
0002385A FC0E 0006 EB               		dc.b $FC, $E, 0, 6, $EB
0002385F 03                         byte_21333:	dc.b 3			; walking 1-6
00023860 ED0D 0000 EC               		dc.b $ED, $D, 0, 0, $EC
00023865 FD0C 0008 F4               		dc.b $FD, $C, 0, 8, $F4
0002386A 0509 000C F4               		dc.b 5,	9, 0, $C, $F4
0002386F 05                         byte_21343:	dc.b 5			; walking 2-1
00023870 EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
00023875 EB06 0006 03               		dc.b $EB, 6, 0,	6, 3
0002387A FB08 000C EB               		dc.b $FB, 8, 0,	$C, $EB
0002387F 0309 000F F3               		dc.b 3,	9, 0, $F, $F3
00023884 1300 0015 FB               		dc.b $13, 0, 0,	$15, $FB
00023889 06                         byte_2135D:	dc.b 6			; walking 2-2
0002388A EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
0002388F EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
00023894 FC0C 0008 EC               		dc.b $FC, $C, 0, 8, $EC
00023899 0409 000C F4               		dc.b 4,	9, 0, $C, $F4
0002389E FC05 0012 0C               		dc.b $FC, 5, 0,	$12, $C
000238A3 F400 0016 14               		dc.b $F4, 0, 0,	$16, $14
000238A8 04                         byte_2137C:	dc.b 4			; walking 2-3
000238A9 ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
000238AE ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
000238B3 FD0D 0008 F5               		dc.b $FD, $D, 0, 8, $F5
000238B8 0D08 0010 FD               		dc.b $D, 8, 0, $10, $FD
000238BD 05                         byte_21391:	dc.b 5			; walking 2-4
000238BE EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
000238C3 EB05 0006 03               		dc.b $EB, 5, 0,	6, 3
000238C8 FB0D 000A F3               		dc.b $FB, $D, 0, $A, $F3
000238CD 0B08 0012 F3               		dc.b $B, 8, 0, $12, $F3
000238D2 1304 0015 FB               		dc.b $13, 4, 0,	$15, $FB
000238D7 04                         byte_213AB:	dc.b 4			; walking 2-5
000238D8 EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
000238DD EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
000238E2 FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4
000238E7 0C08 0010 FC               		dc.b $C, 8, 0, $10, $FC
000238EC 05                         byte_213C0:	dc.b 5			; walking 2-6
000238ED ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
000238F2 ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
000238F7 FD00 0008 ED               		dc.b $FD, 0, 0,	8, $ED
000238FC FD0D 0009 F5               		dc.b $FD, $D, 0, 9, $F5
00023901 0D08 0011 FD               		dc.b $D, 8, 0, $11, $FD
00023906 04                         byte_213DA:	dc.b 4			; walking 3-1
00023907 F407 0000 EB               		dc.b $F4, 7, 0,	0, $EB
0002390C EC09 0008 FB               		dc.b $EC, 9, 0,	8, $FB
00023911 FC04 000E FB               		dc.b $FC, 4, 0,	$E, $FB
00023916 0409 0010 FB               		dc.b 4,	9, 0, $10, $FB
0002391B 02                         byte_213EF:	dc.b 2			; walking 3-2
0002391C F407 0000 EC               		dc.b $F4, 7, 0,	0, $EC
00023921 EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC
00023926 02                         byte_213FA:	dc.b 2			; walking 3-3
00023927 F406 0000 ED               		dc.b $F4, 6, 0,	0, $ED
0002392C F40A 0006 FD               		dc.b $F4, $A, 0, 6, $FD
00023931 04                         byte_21405:	dc.b 4			; walking 3-4
00023932 F406 0000 EB               		dc.b $F4, 6, 0,	0, $EB
00023937 EC09 0006 FB               		dc.b $EC, 9, 0,	6, $FB
0002393C FC04 000C FB               		dc.b $FC, 4, 0,	$C, $FB
00023941 0409 000E FB               		dc.b 4,	9, 0, $E, $FB
00023946 02                         byte_2141A:	dc.b 2			; walking 3-5
00023947 F406 0000 EC               		dc.b $F4, 6, 0,	0, $EC
0002394C F40B 0006 FC               		dc.b $F4, $B, 0, 6, $FC
00023951 03                         byte_21425:	dc.b 3			; walking 3-6
00023952 F407 0000 ED               		dc.b $F4, 7, 0,	0, $ED
00023957 EC00 0008 FD               		dc.b $EC, 0, 0,	8, $FD
0002395C F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD
00023961 06                         byte_21435:	dc.b 6			; walking 4-1
00023962 FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
00023967 ED04 0006 F3               		dc.b $ED, 4, 0,	6, $F3
0002396C F504 0008 EB               		dc.b $F5, 4, 0,	8, $EB
00023971 F50A 000A FB               		dc.b $F5, $A, 0, $A, $FB
00023976 0D00 0013 FB               		dc.b $D, 0, 0, $13, $FB
0002397B FD00 0014 13               		dc.b $FD, 0, 0,	$14, $13
00023980 06                         byte_21454:	dc.b 6			; walking 4-2
00023981 FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
00023986 E408 0006 F4               		dc.b $E4, 8, 0,	6, $F4
0002398B EC04 0009 FC               		dc.b $EC, 4, 0,	9, $FC
00023990 F404 000B EC               		dc.b $F4, 4, 0,	$B, $EC
00023995 F40A 000D FC               		dc.b $F4, $A, 0, $D, $FC
0002399A 0C00 0016 FC               		dc.b $C, 0, 0, $16, $FC
0002399F 04                         byte_21473:	dc.b 4			; walking 4-3
000239A0 FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
000239A5 F304 0006 ED               		dc.b $F3, 4, 0,	6, $ED
000239AA EB0A 0008 FD               		dc.b $EB, $A, 0, 8, $FD
000239AF 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
000239B4 05                         byte_21488:	dc.b 5			; walking 4-4
000239B5 FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
000239BA ED08 0006 F3               		dc.b $ED, 8, 0,	6, $F3
000239BF F504 0009 EB               		dc.b $F5, 4, 0,	9, $EB
000239C4 F50D 000B FB               		dc.b $F5, $D, 0, $B, $FB
000239C9 0508 0013 FB               		dc.b 5,	8, 0, $13, $FB
000239CE 04                         byte_214A2:	dc.b 4			; walking 4-5
000239CF FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
000239D4 F404 0006 EC               		dc.b $F4, 4, 0,	6, $EC
000239D9 EC0A 0008 FC               		dc.b $EC, $A, 0, 8, $FC
000239DE 0404 0011 FC               		dc.b 4,	4, 0, $11, $FC
000239E3 05                         byte_214B7:	dc.b 5			; walking 4-6
000239E4 FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
000239E9 EB0A 0006 FD               		dc.b $EB, $A, 0, 6, $FD
000239EE F304 000F ED               		dc.b $F3, 4, 0,	$F, $ED
000239F3 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
000239F8 0B00 0013 FD               		dc.b $B, 0, 0, $13, $FD
000239FD 02                         byte_214D1:	dc.b 2			; running 1-1
000239FE EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00023A03 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00023A08 02                         byte_214DC:	dc.b 2			; running 1-2
00023A09 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00023A0E FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00023A13 02                         byte_214E7:	dc.b 2			; running 1-3
00023A14 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00023A19 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00023A1E 02                         byte_214F2:	dc.b 2			; running 1-4
00023A1F EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00023A24 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00023A29 04                         byte_214FD:	dc.b 4			; running 2-1
00023A2A EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
00023A2F EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00023A34 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00023A39 FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
00023A3E 03                         byte_21512:	dc.b 3			; running 2-2
00023A3F EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
00023A44 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00023A49 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00023A4E 04                         byte_21522:	dc.b 4			; running 2-3
00023A4F EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
00023A54 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00023A59 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00023A5E FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
00023A63 03                         byte_21537:	dc.b 3			; running 2-4
00023A64 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
00023A69 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00023A6E FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00023A73 02                         byte_21547:	dc.b 2			; running 3-1
00023A74 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00023A79 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00023A7E 02                         byte_21552:	dc.b 2			; running 3-2
00023A7F F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00023A84 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00023A89 02                         byte_2155D:	dc.b 2			; running 3-3
00023A8A F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00023A8F F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00023A94 02                         byte_21568:	dc.b 2			; running 3-4
00023A95 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00023A9A F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00023A9F 04                         byte_21573:	dc.b 4			; running 4-1
00023AA0 FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
00023AA5 F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
00023AAA EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00023AAF 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
00023AB4 02                         byte_21588:	dc.b 2			; running 4-2
00023AB5 F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
00023ABA EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00023ABF 04                         byte_21593:	dc.b 4			; running 4-3
00023AC0 FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
00023AC5 F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
00023ACA EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00023ACF 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
00023AD4 02                         byte_215A8:	dc.b 2			; running 4-4
00023AD5 F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
00023ADA EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00023ADF 01                         byte_215B3:	dc.b 1			; rolling 1
00023AE0 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023AE5 01                         byte_215B9:	dc.b 1			; rolling 2
00023AE6 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023AEB 01                         byte_215BF:	dc.b 1			; rolling 3
00023AEC F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023AF1 01                         byte_215C5:	dc.b 1			; rolling 4
00023AF2 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023AF7 01                         byte_215CB:	dc.b 1			; rolling 5
00023AF8 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023AFD 02                         byte_215D1:	dc.b 2			; warped 1 (unused)
00023AFE F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC
00023B03 F402 000C 0C               		dc.b $F4, 2, 0,	$C, $C
00023B08 01                         byte_215DC:	dc.b 1			; warped 2 (unused)
00023B09 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023B0E 02                         byte_215E2:	dc.b 2			; warped 3 (unused)
00023B0F EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4
00023B14 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4
00023B19 01                         byte_215ED:	dc.b 1			; warped 4 (unused)
00023B1A F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023B1F 02                         byte_215F3:	dc.b 2			; stopping 1
00023B20 ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
00023B25 FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0
00023B2A 04                         byte_215FE:	dc.b 4			; stopping 2
00023B2B ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
00023B30 FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0
00023B35 0D04 000E 00               		dc.b $D, 4, 0, $E, 0
00023B3A 0500 0010 E8               		dc.b 5,	0, 0, $10, $E8
00023B3F 04                         byte_21613:	dc.b 4			; ducking
00023B40 F404 0000 FC               		dc.b $F4, 4, 0,	0, $FC
00023B45 FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4
00023B4A 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4
00023B4F 0400 000D EC               		dc.b 4,	0, 0, $D, $EC
00023B54 03                         byte_21628:	dc.b 3			; balancing 1
00023B55 EC08 0800 E8               		dc.b $EC, 8, 8,	0, $E8
00023B5A F402 0803 00               		dc.b $F4, 2, 8,	3, 0
00023B5F F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0
00023B64 03                         byte_21638:	dc.b 3			; balancing 2
00023B65 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8
00023B6A 040D 080C E0               		dc.b 4,	$D, 8, $C, $E0
00023B6F 0C00 1814 00               		dc.b $C, 0, $18, $14, 0
00023B74 03                         byte_21648:	dc.b 3			; spinning 1 (LZ)
00023B75 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
00023B7A FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
00023B7F 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
00023B84 02                         byte_21658:	dc.b 2			; spinning 2 (LZ)
00023B85 F40A 0000 E8               		dc.b $F4, $A, 0, 0, $E8
00023B8A F40A 0800 00               		dc.b $F4, $A, 8, 0, 0
00023B8F 03                         byte_21663:	dc.b 3			; spinning 3 (LZ)
00023B90 F40D 0000 E4               		dc.b $F4, $D, 0, 0, $E4
00023B95 FC00 0008 04               		dc.b $FC, 0, 0,	8, 4
00023B9A 040C 0009 EC               		dc.b 4,	$C, 0, 9, $EC
00023B9F 03                         byte_21673:	dc.b 3			; spinning 4 (LZ)
00023BA0 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
00023BA5 FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
00023BAA 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
00023BAF 03                         byte_21683:	dc.b 3			; bouncing
00023BB0 E80B 0000 F0               		dc.b $E8, $B, 0, 0, $F0
00023BB5 0804 000C F8               		dc.b 8,	4, 0, $C, $F8
00023BBA 1000 000E F8               		dc.b $10, 0, 0,	$E, $F8
00023BBF 04                         byte_21693:	dc.b 4			; hanging 1 (LZ)
00023BC0 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
00023BC5 0005 000C 08               		dc.b 0,	5, 0, $C, 8
00023BCA F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
00023BCF F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
00023BD4 04                         byte_216A8:	dc.b 4			; hanging 2 (LZ)
00023BD5 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
00023BDA 0005 000C 08               		dc.b 0,	5, 0, $C, 8
00023BDF F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
00023BE4 F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
00023BE9 05                         byte_216BD:	dc.b 5			; celebration leap 1 (unused)
00023BEA E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
00023BEF F001 0009 0C               		dc.b $F0, 1, 0,	9, $C
00023BF4 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
00023BF9 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
00023BFE 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
00023C03 05                         byte_216D7:	dc.b 5			; celebration leap 2 (unused)
00023C04 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
00023C09 E801 0009 0C               		dc.b $E8, 1, 0,	9, $C
00023C0E 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
00023C13 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
00023C18 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
00023C1D 02                         byte_216F1:	dc.b 2			; pushing 1
00023C1E ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
00023C23 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
00023C28 03                         byte_216FC:	dc.b 3			; pushing 2
00023C29 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
00023C2E 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
00023C33 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
00023C38 02                         byte_2170C:	dc.b 2			; pushing 3
00023C39 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
00023C3E 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
00023C43 03                         byte_21717:	dc.b 3			; pushing 4
00023C44 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
00023C49 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
00023C4E 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
00023C53 02                         byte_21727:	dc.b 2			; surfing or sliding (unused)
00023C54 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00023C59 FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0
00023C5E 03                         byte_21732:	dc.b 3			; collecting bubble (unused)
00023C5F EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
00023C64 0405 0009 F8               		dc.b 4,	5, 0, 9, $F8
00023C69 E400 000D F8               		dc.b $E4, 0, 0,	$D, $F8
00023C6E 03                         byte_21742:	dc.b 3			; death	1
00023C6F E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
00023C74 E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
00023C79 F80B 000A F4               		dc.b $F8, $B, 0, $A, $F4
00023C7E 05                         byte_21752:	dc.b 5			; drowning
00023C7F E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
00023C84 E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
00023C89 F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
00023C8E 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
00023C93 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
00023C98 05                         byte_2176C:	dc.b 5			; death	2
00023C99 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
00023C9E E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
00023CA3 F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
00023CA8 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
00023CAD 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
00023CB2 02                         byte_21786:	dc.b 2			; shrinking 1 (unused)
00023CB3 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00023CB8 F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0
00023CBD 03                         byte_21791:	dc.b 3			; shrinking 2 (unused)
00023CBE EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00023CC3 F40E 0003 F0               		dc.b $F4, $E, 0, 3, $F0
00023CC8 0C08 000F F8               		dc.b $C, 8, 0, $F, $F8
00023CCD 01                         byte_217A1:	dc.b 1			; shrinking 3 (unused)
00023CCE F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4
00023CD3 01                         byte_217A7:	dc.b 1			; shrinking 4 (unused)
00023CD4 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00023CD9 01                         byte_217AD:	dc.b 1			; shrinking 5 (unused)
00023CDA F801 0000 FC               		dc.b $F8, 1, 0,	0, $FC
00023CDF 03                         byte_217B3:	dc.b 3			; injury
00023CE0 F40D 0800 E4               		dc.b $F4, $D, 8, 0, $E4
00023CE5 FC05 0808 04               		dc.b $FC, 5, 8,	8, 4
00023CEA 0408 080C EC               		dc.b 4,	8, 8, $C, $EC
00023CEF 03                         byte_217C3:	dc.b 3			; spinning 5 (LZ)
00023CF0 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC
00023CF5 FC00 0808 F4               		dc.b $FC, 0, 8,	8, $F4
00023CFA 040C 0809 F4               		dc.b 4,	$C, 8, 9, $F4
00023CFF 03                         byte_217D3:	dc.b 3			; spinning 6 (LZ)
00023D00 F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC
00023D05 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00023D0A 080C 000E F4               		dc.b 8,	$C, 0, $E, $F4
00023D0F 03                         byte_217E3:	dc.b 3			; collecting bubble (LZ)
00023D10 EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
00023D15 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC
00023D1A 0301 0012 0C               		dc.b 3,	1, 0, $12, $C
00023D1F 02                         byte_217F3:	dc.b 2			; water	slide (LZ)
00023D20 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC
00023D25 F802 0010 0C               		dc.b $F8, 2, 0,	$10, $C
00023D2A                            		even
00023D2A                            		even
00023D2A                            
00023D2A                            ; ---------------------------------------------------------------------------
00023D2A                            ; Uncompressed graphics	loading	array for Sonic
00023D2A                            ; ---------------------------------------------------------------------------
00023D2A                            SonicDynPLC:
00023D2A                            	include "_inc\Sonic dynamic pattern load cues.asm"
00023D2A                            ; ---------------------------------------------------------------------------
00023D2A                            ; Uncompressed graphics	loading	array for Sonic
00023D2A                            ; ---------------------------------------------------------------------------
00023D2A 0000                       		dc.w SonPLC_Blank-SonicDynPLC
00023D2C 0000                       		dc.w SonPLC_Stand-SonicDynPLC
00023D2E 0000                       		dc.w SonPLC_Wait1-SonicDynPLC
00023D30 0000                       		dc.w SonPLC_Wait2-SonicDynPLC
00023D32 0000                       		dc.w SonPLC_Wait3-SonicDynPLC
00023D34 0000                       		dc.w SonPLC_LookUp-SonicDynPLC
00023D36 0000                       		dc.w SonPLC_Walk11-SonicDynPLC
00023D38 0000                       		dc.w SonPLC_Walk12-SonicDynPLC
00023D3A 0000                       		dc.w SonPLC_Walk13-SonicDynPLC
00023D3C 0000                       		dc.w SonPLC_Walk14-SonicDynPLC
00023D3E 0000                       		dc.w SonPLC_Walk15-SonicDynPLC
00023D40 0000                       		dc.w SonPLC_Walk16-SonicDynPLC
00023D42 0000                       		dc.w SonPLC_Walk21-SonicDynPLC
00023D44 0000                       		dc.w SonPLC_Walk22-SonicDynPLC
00023D46 0000                       		dc.w SonPLC_Walk23-SonicDynPLC
00023D48 0000                       		dc.w SonPLC_Walk24-SonicDynPLC
00023D4A 0000                       		dc.w SonPLC_Walk25-SonicDynPLC
00023D4C 0000                       		dc.w SonPLC_Walk26-SonicDynPLC
00023D4E 0000                       		dc.w SonPLC_Walk31-SonicDynPLC
00023D50 0000                       		dc.w SonPLC_Walk32-SonicDynPLC
00023D52 0000                       		dc.w SonPLC_Walk33-SonicDynPLC
00023D54 0000                       		dc.w SonPLC_Walk34-SonicDynPLC
00023D56 0000                       		dc.w SonPLC_Walk35-SonicDynPLC
00023D58 0000                       		dc.w SonPLC_Walk36-SonicDynPLC
00023D5A 0000                       		dc.w SonPLC_Walk41-SonicDynPLC
00023D5C 0000                       		dc.w SonPLC_Walk42-SonicDynPLC
00023D5E 0000                       		dc.w SonPLC_Walk43-SonicDynPLC
00023D60 0000                       		dc.w SonPLC_Walk44-SonicDynPLC
00023D62 0000                       		dc.w SonPLC_Walk45-SonicDynPLC
00023D64 0000                       		dc.w SonPLC_Walk46-SonicDynPLC
00023D66 0000                       		dc.w SonPLC_Run11-SonicDynPLC
00023D68 0000                       		dc.w SonPLC_Run12-SonicDynPLC
00023D6A 0000                       		dc.w SonPLC_Run13-SonicDynPLC
00023D6C 0000                       		dc.w SonPLC_Run14-SonicDynPLC
00023D6E 0000                       		dc.w SonPLC_Run21-SonicDynPLC
00023D70 0000                       		dc.w SonPLC_Run22-SonicDynPLC
00023D72 0000                       		dc.w SonPLC_Run23-SonicDynPLC
00023D74 0000                       		dc.w SonPLC_Run24-SonicDynPLC
00023D76 0000                       		dc.w SonPLC_Run31-SonicDynPLC
00023D78 0000                       		dc.w SonPLC_Run32-SonicDynPLC
00023D7A 0000                       		dc.w SonPLC_Run33-SonicDynPLC
00023D7C 0000                       		dc.w SonPLC_Run34-SonicDynPLC
00023D7E 0000                       		dc.w SonPLC_Run41-SonicDynPLC
00023D80 0000                       		dc.w SonPLC_Run42-SonicDynPLC
00023D82 0000                       		dc.w SonPLC_Run43-SonicDynPLC
00023D84 0000                       		dc.w SonPLC_Run44-SonicDynPLC
00023D86 0000                       		dc.w SonPLC_Roll1-SonicDynPLC
00023D88 0000                       		dc.w SonPLC_Roll2-SonicDynPLC
00023D8A 0000                       		dc.w SonPLC_Roll3-SonicDynPLC
00023D8C 0000                       		dc.w SonPLC_Roll4-SonicDynPLC
00023D8E 0000                       		dc.w SonPLC_Roll5-SonicDynPLC
00023D90 0000                       		dc.w SonPLC_Warp1-SonicDynPLC
00023D92 0000                       		dc.w SonPLC_Warp2-SonicDynPLC
00023D94 0000                       		dc.w SonPLC_Warp3-SonicDynPLC
00023D96 0000                       		dc.w SonPLC_Warp4-SonicDynPLC
00023D98 0000                       		dc.w SonPLC_Stop1-SonicDynPLC
00023D9A 0000                       		dc.w SonPLC_Stop2-SonicDynPLC
00023D9C 0000                       		dc.w SonPLC_Duck-SonicDynPLC
00023D9E 0000                       		dc.w SonPLC_Balance1-SonicDynPLC
00023DA0 0000                       		dc.w SonPLC_Balance2-SonicDynPLC
00023DA2 0000                       		dc.w SonPLC_Float1-SonicDynPLC
00023DA4 0000                       		dc.w SonPLC_Float2-SonicDynPLC
00023DA6 0000                       		dc.w SonPLC_Float3-SonicDynPLC
00023DA8 0000                       		dc.w SonPLC_Float4-SonicDynPLC
00023DAA 0000                       		dc.w SonPLC_Spring-SonicDynPLC
00023DAC 0000                       		dc.w SonPLC_Hang1-SonicDynPLC
00023DAE 0000                       		dc.w SonPLC_Hang2-SonicDynPLC
00023DB0 0000                       		dc.w SonPLC_Leap1-SonicDynPLC
00023DB2 0000                       		dc.w SonPLC_Leap2-SonicDynPLC
00023DB4 0000                       		dc.w SonPLC_Push1-SonicDynPLC
00023DB6 0000                       		dc.w SonPLC_Push2-SonicDynPLC
00023DB8 0000                       		dc.w SonPLC_Push3-SonicDynPLC
00023DBA 0000                       		dc.w SonPLC_Push4-SonicDynPLC
00023DBC 0000                       		dc.w SonPLC_Slide-SonicDynPLC
00023DBE 0000                       		dc.w SonPLC_BblUnk-SonicDynPLC
00023DC0 0000                       		dc.w SonPLC_Death1-SonicDynPLC
00023DC2 0000                       		dc.w SonPLC_Drown-SonicDynPLC
00023DC4 0000                       		dc.w SonPLC_Burnt-SonicDynPLC
00023DC6 0000                       		dc.w SonPLC_Shrink1-SonicDynPLC
00023DC8 0000                       		dc.w SonPLC_Shrink2-SonicDynPLC
00023DCA 0000                       		dc.w SonPLC_Shrink3-SonicDynPLC
00023DCC 0000                       		dc.w SonPLC_Shrink4-SonicDynPLC
00023DCE 0000                       		dc.w SonPLC_Shrink5-SonicDynPLC
00023DD0 0000                       		dc.w SonPLC_Float1-SonicDynPLC
00023DD2 0000                       		dc.w SonPLC_Float3-SonicDynPLC
00023DD4 0000                       		dc.w SonPLC_Injury1-SonicDynPLC
00023DD6 0000                       		dc.w SonPLC_Bubble-SonicDynPLC
00023DD8 0000                       		dc.w SonPLC_Injury2-SonicDynPLC
00023DDA 00                         SonPLC_Blank:	dc.b 0
00023DDB 0420 0070 0320 0B20 0E     SonPLC_Stand:	dc.b 4,	$20, 0,	$70, 3,	$20, $B, $20, $E
00023DE4 0350 1150 1720 1D          SonPLC_Wait1:	dc.b 3,	$50, $11, $50, $17, $20, $1D
00023DEB 0350 2050 1720 1D          SonPLC_Wait2:	dc.b 3,	$50, $20, $50, $17, $20, $1D
00023DF2 0350 2050 1720 26          SonPLC_Wait3:	dc.b 3,	$50, $20, $50, $17, $20, $26
00023DF9 0380 2920 0B20 0E          SonPLC_LookUp:	dc.b 3,	$80, $29, $20, $B, $20,	$E
00023E00 0470 3250 3A50 4010 46     SonPLC_Walk11:	dc.b 4,	$70, $32, $50, $3A, $50, $40, $10, $46
00023E09 0270 32B0 48               SonPLC_Walk12:	dc.b 2,	$70, $32, $B0, $48
00023E0E 0250 5480 5A               SonPLC_Walk13:	dc.b 2,	$50, $54, $80, $5A
00023E13 0450 5450 6350 6910 6F     SonPLC_Walk14:	dc.b 4,	$50, $54, $50, $63, $50, $69, $10, $6F
00023E1C 0250 54B0 71               SonPLC_Walk15:	dc.b 2,	$50, $54, $B0, $71
00023E21 0370 3230 7D50 81          SonPLC_Walk16:	dc.b 3,	$70, $32, $30, $7D, $50, $81
00023E28 0550 8750 8D20 9350 9600+  SonPLC_Walk21:	dc.b 5,	$50, $87, $50, $8D, $20, $93, $50, $96,	0, $9C
00023E33 0650 8710 9D30 9F50 A330+  SonPLC_Walk22:	dc.b 6,	$50, $87, $10, $9D, $30, $9F, $50, $A3,	$30, $A9, 0, $AD
00023E40 0450 AE10 B470 B620 BE     SonPLC_Walk23:	dc.b 4,	$50, $AE, $10, $B4, $70, $B6, $20, $BE
00023E49 0550 C130 C770 CB20 D310+  SonPLC_Walk24:	dc.b 5,	$50, $C1, $30, $C7, $70, $CB, $20, $D3,	$10, $D6
00023E54 0450 C110 D870 DA20 E2     SonPLC_Walk25:	dc.b 4,	$50, $C1, $10, $D8, $70, $DA, $20, $E2
00023E5D 0550 8710 9D00 9370 E520+  SonPLC_Walk26:	dc.b 5,	$50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED
00023E68 0470 F050 F810 FE51 00     SonPLC_Walk31:	dc.b 4,	$70, $F0, $50, $F8, $10, $FE, $51, 0
00023E71 0270 F0B1 06               SonPLC_Walk32:	dc.b 2,	$70, $F0, $B1, 6
00023E76 0251 1281 18               SonPLC_Walk33:	dc.b 2,	$51, $12, $81, $18
00023E7B 0451 1251 2111 2751 29     SonPLC_Walk34:	dc.b 4,	$51, $12, $51, $21, $11, $27, $51, $29
00023E84 0251 12B1 2F               SonPLC_Walk35:	dc.b 2,	$51, $12, $B1, $2F
00023E89 0370 F001 0681 3B          SonPLC_Walk36:	dc.b 3,	$70, $F0, 1, 6,	$81, $3B
00023E90 0651 4411 4A11 4C81 4E01+  SonPLC_Walk41:	dc.b 6,	$51, $44, $11, $4A, $11, $4C, $81, $4E,	1, $57,	1, $58
00023E9D 0651 4421 5911 5C11 5E81+  SonPLC_Walk42:	dc.b 6,	$51, $44, $21, $59, $11, $5C, $11, $5E,	$81, $60, 1, $57
00023EAA 0451 6911 6F81 7111 7A     SonPLC_Walk43:	dc.b 4,	$51, $69, $11, $6F, $81, $71, $11, $7A
00023EB3 0551 7C21 8211 8571 8721+  SonPLC_Walk44:	dc.b 5,	$51, $7C, $21, $82, $11, $85, $71, $87,	$21, $8F
00023EBE 0451 7C11 9281 9411 9D     SonPLC_Walk45:	dc.b 4,	$51, $7C, $11, $92, $81, $94, $11, $9D
00023EC7 0551 4481 9F11 5E11 A801+  SonPLC_Walk46:	dc.b 5,	$51, $44, $81, $9F, $11, $5E, $11, $A8,	1, $57
00023ED2 0251 AAB1 B0               SonPLC_Run11:	dc.b 2,	$51, $AA, $B1, $B0
00023ED7 0250 54B1 BC               SonPLC_Run12:	dc.b 2,	$50, $54, $B1, $BC
00023EDC 0251 AAB1 C8               SonPLC_Run13:	dc.b 2,	$51, $AA, $B1, $C8
00023EE1 0250 54B1 D4               SonPLC_Run14:	dc.b 2,	$50, $54, $B1, $D4
00023EE6 0451 E011 E6B1 E801 F4     SonPLC_Run21:	dc.b 4,	$51, $E0, $11, $E6, $B1, $E8, 1, $F4
00023EEF 0351 F511 FBB1 FD          SonPLC_Run22:	dc.b 3,	$51, $F5, $11, $FB, $B1, $FD
00023EF6 0451 E012 09B2 0B01 F4     SonPLC_Run23:	dc.b 4,	$51, $E0, $12, 9, $B2, $B, 1, $F4
00023EFF 0351 F511 FBB2 17          SonPLC_Run24:	dc.b 3,	$51, $F5, $11, $FB, $B2, $17
00023F06 0252 23B2 29               SonPLC_Run31:	dc.b 2,	$52, $23, $B2, $29
00023F0B 0251 12B2 35               SonPLC_Run32:	dc.b 2,	$51, $12, $B2, $35
00023F10 0252 23B2 41               SonPLC_Run33:	dc.b 2,	$52, $23, $B2, $41
00023F15 0251 12B2 4D               SonPLC_Run34:	dc.b 2,	$51, $12, $B2, $4D
00023F1A 0452 5912 5FB2 6102 6D     SonPLC_Run41:	dc.b 4,	$52, $59, $12, $5F, $B2, $61, 2, $6D
00023F23 0272 6EB2 76               SonPLC_Run42:	dc.b 2,	$72, $6E, $B2, $76
00023F28 0452 5912 82B2 8402 6D     SonPLC_Run43:	dc.b 4,	$52, $59, $12, $82, $B2, $84, 2, $6D
00023F31 0272 6EB2 90               SonPLC_Run44:	dc.b 2,	$72, $6E, $B2, $90
00023F36 01F2 9C                    SonPLC_Roll1:	dc.b 1,	$F2, $9C
00023F39 01F2 AC                    SonPLC_Roll2:	dc.b 1,	$F2, $AC
00023F3C 01F2 BC                    SonPLC_Roll3:	dc.b 1,	$F2, $BC
00023F3F 01F2 CC                    SonPLC_Roll4:	dc.b 1,	$F2, $CC
00023F42 01F2 DC                    SonPLC_Roll5:	dc.b 1,	$F2, $DC
00023F45 02B2 EC22 F8               SonPLC_Warp1:	dc.b 2,	$B2, $EC, $22, $F8
00023F4A 01F2 FB                    SonPLC_Warp2:	dc.b 1,	$F2, $FB
00023F4D 02B3 0B23 17               SonPLC_Warp3:	dc.b 2,	$B3, $B, $23, $17
00023F52 01F3 1A                    SonPLC_Warp4:	dc.b 1,	$F3, $1A
00023F55 0253 2AB3 30               SonPLC_Stop1:	dc.b 2,	$53, $2A, $B3, $30
00023F5A 0453 3C73 4213 4A03 4C     SonPLC_Stop2:	dc.b 4,	$53, $3C, $73, $42, $13, $4A, 3, $4C
00023F63 0413 4D73 4F23 5703 5A     SonPLC_Duck:	dc.b 4,	$13, $4D, $73, $4F, $23, $57, 3, $5A
00023F6C 0323 5B23 5EF3 61          SonPLC_Balance1:dc.b 3,	$23, $5B, $23, $5E, $F3, $61
00023F73 03B3 7173 7D00 71          SonPLC_Balance2:dc.b 3,	$B3, $71, $73, $7D, 0, $71
00023F7A 0373 8533 8D23 91          SonPLC_Float1:	dc.b 3,	$73, $85, $33, $8D, $23, $91
00023F81 0183 94                    SonPLC_Float2:	dc.b 1,	$83, $94
00023F84 0373 9D03 A533 A6          SonPLC_Float3:	dc.b 3,	$73, $9D, 3, $A5, $33, $A6
00023F8B 0373 AA33 B223 B6          SonPLC_Float4:	dc.b 3,	$73, $AA, $33, $B2, $23, $B6
00023F92 03B3 B913 C503 C7          SonPLC_Spring:	dc.b 3,	$B3, $B9, $13, $C5, 3, $C7
00023F99 04B3 C833 D403 D803 D9     SonPLC_Hang1:	dc.b 4,	$B3, $C8, $33, $D4, 3, $D8, 3, $D9
00023FA2 04B3 DA33 E603 EA03 EB     SonPLC_Hang2:	dc.b 4,	$B3, $DA, $33, $E6, 3, $EA, 3, $EB
00023FAB 0583 EC13 F553 F713 FD03+  SonPLC_Leap1:	dc.b 5,	$83, $EC, $13, $F5, $53, $F7, $13, $FD,	3, $FF
00023FB6 0584 0014 0953 F713 FD03+  SonPLC_Leap2:	dc.b 5,	$84, 0,	$14, 9,	$53, $F7, $13, $FD, 3, $FF
00023FC1 0284 0B74 14               SonPLC_Push1:	dc.b 2,	$84, $B, $74, $14
00023FC6 0384 1C24 2514 28          SonPLC_Push2:	dc.b 3,	$84, $1C, $24, $25, $14, $28
00023FCD 0284 2A74 33               SonPLC_Push3:	dc.b 2,	$84, $2A, $74, $33
00023FD2 0384 1C24 3B14 3E          SonPLC_Push4:	dc.b 3,	$84, $1C, $24, $3B, $14, $3E
00023FD9 0254 40B4 46               SonPLC_Slide:	dc.b 2,	$54, $40, $B4, $46
00023FDE 0384 5234 5B04 5F          SonPLC_BblUnk:	dc.b 3,	$84, $52, $34, $5B, 4, $5F
00023FE5 0374 6014 68B4 6A          SonPLC_Death1:	dc.b 3,	$74, $60, $14, $68, $B4, $6A
00023FEC 0574 7614 7E54 8034 8604+  SonPLC_Drown:	dc.b 5,	$74, $76, $14, $7E, $54, $80, $34, $86,	4, $8A
00023FF7 0574 8B14 7E54 9334 8604+  SonPLC_Burnt:	dc.b 5,	$74, $8B, $14, $7E, $54, $93, $34, $86,	4, $8A
00024002 0224 99F4 9C               SonPLC_Shrink1:	dc.b 2,	$24, $99, $F4, $9C
00024007 0324 ACB4 AF24 BB          SonPLC_Shrink2:	dc.b 3,	$24, $AC, $B4, $AF, $24, $BB
0002400E 01B4 BE                    SonPLC_Shrink3:	dc.b 1,	$B4, $BE
00024011 0154 CA                    SonPLC_Shrink4:	dc.b 1,	$54, $CA
00024014 0114 D0                    SonPLC_Shrink5:	dc.b 1,	$14, $D0
00024017 03B4 D214 DE34 E0          SonPLC_Injury1:	dc.b 3,	$B4, $D2, $14, $DE, $34, $E0
0002401E 0354 E4B4 EA10 6D          SonPLC_Bubble:	dc.b 3,	$54, $E4, $B4, $EA, $10, $6D
00024025 02F4 F625 06               SonPLC_Injury2:	dc.b 2,	$F4, $F6, $25, 6
0002402A                            		even
0002402A                            		even
0002402A                            
0002402A                            ; ---------------------------------------------------------------------------
0002402A                            ; Uncompressed graphics	- Sonic
0002402A                            ; ---------------------------------------------------------------------------
0002402A                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002E14A                            		even
0002E14A                            
0002E14A                            ; ---------------------------------------------------------------------------
0002E14A                            ; Uncompressed graphics	- Sonime
0002E14A                            ; ---------------------------------------------------------------------------
0002E14A                            Art_Sonime_Torso:	incbin	artunc\sonime_torso.bin
0002E2CA                            		even
0002E2CA                            Art_Sonime_Head:	incbin	artunc\sonime_head.bin
0002E54A                            		even
0002E54A                            Art_Sonime_Hair:	incbin	artunc\sonime_hair.bin
0002E64A                            		even
0002E64A                            Art_Sonime_Faces:	incbin	artunc\sonime_faces.bin
0002EF4A                            		even
0002EF4A                            Art_Sonime_LeftEar:	incbin	artunc\sonime_leftear.bin
0002EF8A                            		even
0002EF8A                            Art_Sonime_RightEar:	incbin	artunc\sonime_rightear.bin
0002F00A                            		even
0002F00A                            
0002F00A                            ; ---------------------------------------------------------------------------
0002F00A                            ; Compressed graphics - various
0002F00A                            ; ---------------------------------------------------------------------------
0002F00A                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002F10E                            		even
0002F10E                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002F148                            		even
0002F148                            UnC_Shield:	incbin	artunc\shield.bin	; shield
0002F4A8                            		even
0002F4A8                            ArtUnc_InvStars:	incbin	artunc\invstars.bin	; invincibility stars
0002F8A8                            		even
0002F8A8                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002F9B2                            		even
0002F9B2                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002FA04                            		even
0002FA04                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002FC4C                            		even
0002FC4C                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002FDD2                            		even
0002FDD2                            ; ---------------------------------------------------------------------------
0002FDD2                            ; Sprite mappings - walls of the special stage
0002FDD2                            ; ---------------------------------------------------------------------------
0002FDD2                            Map_SSWalls:
0002FDD2                            	include "_maps\SSwalls.asm"
0002FDD2                            ; ---------------------------------------------------------------------------
0002FDD2                            ; Sprite mappings - walls of the special stage
0002FDD2                            ; ---------------------------------------------------------------------------
0002FDD2 0000                       Map_SSWalls2:	dc.w byte_2C584-Map_SSWalls2
0002FDD4 01                         byte_2C584:	dc.b 1
0002FDD5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002FDDA                            		even
0002FDDA                            		even
0002FDDA                            ; ---------------------------------------------------------------------------
0002FDDA                            ; Compressed graphics - special stage
0002FDDA                            ; ---------------------------------------------------------------------------
0002FDDA                            Art_SSWalls:	incbin	artunc\sswalls.bin	; special stage walls
00031DDA                            		even
00031DDA                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00031F0E                            		even
00031F0E                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00032B9E                            		even
00032B9E                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00032E9E                            		even
00032E9E                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00033392                            		even
00033392                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00033480                            		even
00033480                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00033550                            		even
00033550                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00033646                            		even
00033646                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
000336A4                            		even
000336A4                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00033736                            		even
00033736                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
000337F8                            		even
000337F8                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
000338C6                            		even
000338C6                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00033992                            		even
00033992                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00033A5A                            		even
00033A5A                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00033B24                            		even
00033B24                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00033BF4                            		even
00033BF4                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00033DE8                            		even
00033DE8                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00033F50                            		even
00033F50                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00034000                            		even
00034000                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
000340DA                            		even
000340DA                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0003415E                            		even
0003415E                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
000342DC                            		even
000342DC                            ; ---------------------------------------------------------------------------
000342DC                            ; Compressed graphics - GHZ stuff
000342DC                            ; ---------------------------------------------------------------------------
000342DC                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00034326                            		even
00034326                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00034440                            		even
00034440                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
0003452C                            		even
0003452C                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00034574                            		even
00034574                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00034712                            		even
00034712                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
0003478E                            		even
0003478E                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
000349A2                            		even
000349A2                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00034ACE                            		even
00034ACE                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00034BFC                            		even
00034BFC                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00034C9A                            		even
00034C9A                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00034CFA                            		even
00034CFA                            ; ---------------------------------------------------------------------------
00034CFA                            ; Compressed graphics - LZ stuff
00034CFA                            ; ---------------------------------------------------------------------------
00034CFA                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00034E1E                            		even
00034E1E                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00035612                            		even
00035612                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00035792                            		even
00035792                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
000358FC                            		even
000358FC                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00035EE6 00                         		even
00035EE6                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00035F9C                            		even
00035F9C                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0003603E                            		even
0003603E                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0003619A                            		even
0003619A                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000361FE                            		even
000361FE                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00036350                            		even
00036350                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00036832                            		even
00036832                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
000369A2                            		even
000369A2                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00036C5A                            		even
00036C5A                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00036D92                            		even
00036D92                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00036EBC                            		even
00036EBC                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00036FCC                            		even
00036FCC                            ; ---------------------------------------------------------------------------
00036FCC                            ; Compressed graphics - MZ stuff
00036FCC                            ; ---------------------------------------------------------------------------
00036FCC                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
0003725A                            		even
0003725A                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00037318                            		even
00037318                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
000373D0                            		even
000373D0                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00037424                            		even
00037424                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00037702                            		even
00037702                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00038018                            		even
00038018                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0003817C                            		even
0003817C                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00038204                            		even
00038204                            ; ---------------------------------------------------------------------------
00038204                            ; Compressed graphics - SLZ stuff
00038204                            ; ---------------------------------------------------------------------------
00038204                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00038440                            		even
00038440                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00038586                            		even
00038586                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
000387CA                            		even
000387CA                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
0003882C                            		even
0003882C                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
0003890E                            		even
0003890E                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00038AF0                            		even
00038AF0                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00038BFC                            		even
00038BFC                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00038CA0                            		even
00038CA0                            ; ---------------------------------------------------------------------------
00038CA0                            ; Compressed graphics - SYZ stuff
00038CA0                            ; ---------------------------------------------------------------------------
00038CA0                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00038E0A                            		even
00038E0A                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00038E6C                            		even
00038E6C                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00038F4E                            		even
00038F4E                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000391DC                            		even
000391DC                            ; ---------------------------------------------------------------------------
000391DC                            ; Compressed graphics - SBZ stuff
000391DC                            ; ---------------------------------------------------------------------------
000391DC                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00039230                            		even
00039230                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
000394CC                            		even
000394CC                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
000396D0                            		even
000396D0                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0003986E                            		even
0003986E                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00039B9E                            		even
00039B9E                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00039D7C                            		even
00039D7C                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00039DD4                            		even
00039DD4                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00039F54                            		even
00039F54                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003A052                            		even
0003A052                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003A1DE                            		even
0003A1DE                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003A22E                            		even
0003A22E                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003A286                            		even
0003A286                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003A382                            		even
0003A382                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003A498                            		even
0003A498                            ; ---------------------------------------------------------------------------
0003A498                            ; Compressed graphics - enemies
0003A498                            ; ---------------------------------------------------------------------------
0003A498                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003A858                            		even
0003A858                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003AD46                            		even
0003AD46                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003B0EC                            		even
0003B0EC                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003B2D4                            		even
0003B2D4                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B9BE                            		even
0003B9BE                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003BC26                            		even
0003BC26                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003BEA2 00                         		even
0003BEA2                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003C3C6                            		even
0003C3C6                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003C650                            		even
0003C650                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003CC6E                            		even
0003CC6E                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003D056                            		even
0003D056                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003D352                            		even
0003D352                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003D59A                            		even
0003D59A                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D832                            		even
0003D832                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003DA10                            		even
0003DA10                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003DB9E                            		even
0003DB9E                            ; ---------------------------------------------------------------------------
0003DB9E                            ; Compressed graphics - various
0003DB9E                            ; ---------------------------------------------------------------------------
0003DB9E                            Nem_TitleCard:      incbin  artnem\ttlcards.bin ; title cards
0003EB9E                            Nem_TitleCard_End:  even
0003EB9E                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003EC94                            		even
0003EC94                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003ED9A                            		even
0003ED9A                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003EE8E                            		even
0003EE8E                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003F240 00                         		even
0003F240                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003F8A6                            		even
0003F8A6                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003F956                            		even
0003F956                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003FAE8                            		even
0003FAE8                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003FBEA                            		even
0003FBEA                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003FCC6                            		even
0003FCC6                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
00040142                            		even
00040142                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
00040202                            		even
00040202                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
00040376                            		even
00040376                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
00040678                            		even
00040678                            ; ---------------------------------------------------------------------------
00040678                            ; Compressed graphics - continue screen
00040678                            ; ---------------------------------------------------------------------------
00040678                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
00040928                            		even
00040928                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
00040B62                            		even
00040B62                            ; ---------------------------------------------------------------------------
00040B62                            ; Compressed graphics - animals
00040B62                            ; ---------------------------------------------------------------------------
00040B62                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00040CBA                            		even
00040CBA                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
00040E16                            		even
00040E16                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00040F92                            		even
00040F92                            Nem_Seal:	incbin	artnem\seal.bin		; seal
000410AE                            		even
000410AE                            Nem_Pig:	incbin	artnem\pig.bin		; pig
000411E4                            		even
000411E4                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0004131E                            		even
0004131E                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0004147A                            		even
0004147A                            ; ---------------------------------------------------------------------------
0004147A                            ; Compressed graphics - primary patterns and block mappings
0004147A                            ; ---------------------------------------------------------------------------
0004147A                            Blk16_GHZ:	incbin	map16\ghz.bin
00041D8E                            		even
00041D8E                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
000433EE                            		even
000433EE                            Nem_GHZ_2nd:	incbin	artkos\8x8ghz.kos	; GHZ secondary patterns
00045974                            		even
00045974                            Blk256_GHZ:	incbin	map256_u\ghz.bin
0004FD74                            		even
0004FD74                            Blk16_LZ:	incbin	map16\lz.bin
00050178                            		even
00050178                            Nem_LZ:		incbin	artkos\8x8lz.kos	; LZ primary patterns
00051CE8                            		even
00051CE8                            Blk256_LZ:	incbin	map256_u\lz.bin
0005BCE8                            		even
0005BCE8                            Blk16_MZ:	incbin	map16\mz.bin
0005C4F2                            		even
0005C4F2                            Nem_MZ:		incbin	artkos\8x8mz.kos	; MZ primary patterns
0005E4AC                            		even
0005E4AC                            Blk256_MZ:	incbin	map256_u\mz.bin
000688AC                            		even
000688AC                            Blk16_SLZ:	incbin	map16\slz.bin
00069090                            		even
00069090                            Nem_SLZ:	incbin	artkos\8x8slz.kos	; SLZ primary patterns
0006B78A                            		even
0006B78A                            Blk256_SLZ:	incbin	map256_u\slz.bin
00075B8A                            		even
00075B8A                            Blk16_SYZ:	incbin	map16\syz.bin
00076438                            		even
00076438                            Nem_SYZ:	incbin	artkos\8x8syz.kos	; SYZ primary patterns
00078AAC                            		even
00078AAC                            Blk256_SYZ:	incbin	map256_u\syz.bin
00082EAC                            		even
00082EAC                            Blk16_SBZ:	incbin	map16\sbz.bin
00083C6C                            		even
00083C6C                            Nem_SBZ:	incbin	artkos\8x8sbz.kos	; SBZ primary patterns
00085E9A                            		even
00085E9A                            Blk256_SBZ:	incbin	map256_u\sbz.bin
0009029A                            		even
0009029A                            ; ---------------------------------------------------------------------------
0009029A                            ; Compressed graphics - bosses and ending sequence
0009029A                            ; ---------------------------------------------------------------------------
0009029A                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00090AFE                            		even
00090AFE                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00090DE8                            		even
00090DE8                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0009166C                            		even
0009166C                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00091E98                            		even
00091E98                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00092600                            		even
00092600                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00092B80                            		even
00092B80                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00092CA0                            		even
00092CA0                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00092E9E                            		even
00092E9E                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0009407C                            		even
0009407C                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
000949C0                            		even
000949C0                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00094D96                            		even
00094D96                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00095326                            		even
00095326                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
000955AE                            		even
000955AE                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00095BAC                            		even
00095BAC                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00095E34                            		even
00095E34                            		incbin	misc\padding2.bin
00095F38                            		even
00095F38                            ; ---------------------------------------------------------------------------
00095F38                            ; Collision data
00095F38                            ; ---------------------------------------------------------------------------
00095F38                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00096038                            		even
00096038                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00097038                            		even
00097038                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00098038                            		even
00098038                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
000981F0 00                         		even
000981F0                            Col_LZ:		incbin	collide\lz.bin		; LZ index
000982D6                            		even
000982D6                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00098466                            		even
00098466                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
0009865A                            		even
0009865A                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
0009884E                            		even
0009884E                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00098AA6                            		even
00098AA6                            ; ---------------------------------------------------------------------------
00098AA6                            ; Special layouts
00098AA6                            ; ---------------------------------------------------------------------------
00098AA6                            SS_1:		incbin	sslayout\1.bin
00098D20                            		even
00098D20                            SS_2:		incbin	sslayout\2.bin
00099132                            		even
00099132                            SS_3:		incbin	sslayout\3.bin
0009948E                            		even
0009948E                            SS_4:		incbin	sslayout\4.bin
00099968                            		even
00099968                            SS_5:		incbin	sslayout\5.bin
00099E3A                            		even
00099E3A                            SS_6:		incbin	sslayout\6.bin
0009A14A                            		even
0009A14A                            ; ---------------------------------------------------------------------------
0009A14A                            ; Animated uncompressed graphics
0009A14A                            ; ---------------------------------------------------------------------------
0009A14A                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0009A34A                            		even
0009A34A                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0009A74A                            		even
0009A74A                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0009ABCA                            		even
0009ABCA                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0009AECA                            		even
0009AECA                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0009B4CA                            		even
0009B4CA                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0009B7CA                            		even
0009B7CA                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0009C24A                            		even
0009C24A                            
0009C24A                            ; ---------------------------------------------------------------------------
0009C24A                            ; Level	layout index
0009C24A                            ; ---------------------------------------------------------------------------
0009C24A 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0009C250 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0009C256 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0009C25C 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0009C262 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0009C268 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0009C26E 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0009C274 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0009C27A 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0009C280 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0009C286 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0009C28C 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0009C292 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0009C298 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0009C29E 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0009C2A4 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0009C2AA 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0009C2B0 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0009C2B6 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0009C2BC 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0009C2C2 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0009C2C8 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0009C2CE 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0009C2D4 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0009C2DA 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0009C2E0 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0009C2E6 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0009C2EC 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0009C2F2                            
0009C2F2                            Level_GHZ1:	incbin	levels\ghz1.bin
0009C3E4                            		even
0009C3E4 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0009C3E8                            Level_GHZ2:	incbin	levels\ghz2.bin
0009C4B0                            		even
0009C4B0 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0009C4B4                            Level_GHZ3:	incbin	levels\ghz3.bin
0009C5D6                            		even
0009C5D6                            Level_GHZbg:	incbin	levels\ghzbg.bin
0009C5F8                            		even
0009C5F8 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0009C5FC 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0009C600                            
0009C600                            Level_LZ1:	incbin	levels\lz1.bin
0009C702                            		even
0009C702                            Level_LZbg:	incbin	levels\lzbg.bin
0009C804                            		even
0009C804 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0009C808                            Level_LZ2:	incbin	levels\lz2.bin
0009C8A2                            		even
0009C8A2 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0009C8A6                            Level_LZ3:	incbin	levels\lz3.bin
0009C9C0                            		even
0009C9C0 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0009C9C4                            Level_SBZ3:	incbin	levels\sbz3.bin
0009CA7E                            		even
0009CA7E 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0009CA82                            
0009CA82                            Level_MZ1:	incbin	levels\mz1.bin
0009CB20                            		even
0009CB20                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0009CB9A                            		even
0009CB9A                            Level_MZ2:	incbin	levels\mz2.bin
0009CC3E                            		even
0009CC3E                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0009CCD0                            		even
0009CCD0 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0009CCD4                            Level_MZ3:	incbin	levels\mz3.bin
0009CDB6                            		even
0009CDB6                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0009CE5A                            		even
0009CE5A 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0009CE5E 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0009CE62                            
0009CE62                            Level_SLZ1:	incbin	levels\slz1.bin
0009CF74                            		even
0009CF74                            Level_SLZbg:	incbin	levels\slzbg.bin
0009CFEE                            		even
0009CFEE                            Level_SLZ2:	incbin	levels\slz2.bin
0009D0DE                            		even
0009D0DE                            Level_SLZ3:	incbin	levels\slz3.bin
0009D1F8                            		even
0009D1F8 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0009D1FC                            
0009D1FC                            Level_SYZ1:	incbin	levels\syz1.bin
0009D2B8                            		even
0009D2B8                            Level_SYZbg:	incbin	levels\syzbg.bin
0009D2F2                            		even
0009D2F2 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0009D2F6                            Level_SYZ2:	incbin	levels\syz2.bin
0009D3FA                            		even
0009D3FA 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0009D3FE                            Level_SYZ3:	incbin	levels\syz3.bin
0009D558                            		even
0009D558 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0009D55C 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0009D560                            
0009D560                            Level_SBZ1:	incbin	levels\sbz1.bin
0009D682                            		even
0009D682                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0009D6C0                            		even
0009D6C0                            Level_SBZ2:	incbin	levels\sbz2.bin
0009D802                            		even
0009D802                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0009D96C                            		even
0009D96C 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0009D970 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0009D974                            Level_End:	incbin	levels\ending.bin
0009D9A4 00                         		even
0009D9A4 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0009D9A8                            
0009D9A8                            ; ---------------------------------------------------------------------------
0009D9A8                            ; Animated uncompressed giant ring graphics
0009D9A8                            ; ---------------------------------------------------------------------------
0009D9A8                            Art_BigRing:	incbin	artunc\bigring.bin
0009E5E8                            		even
0009E5E8                            
0009E5E8                            		incbin	misc\padding3.bin
0009E684                            		even
0009E684                            
0009E684                            ; ---------------------------------------------------------------------------
0009E684                            ; Sprite locations index
0009E684                            ; ---------------------------------------------------------------------------
0009E684 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E688 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E68C 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E690 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E694 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E698 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E69C 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E6A0 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E6A4 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E6A8 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E6AC 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E6B0 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E6B4 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E6B8 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E6BC 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E6C0 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E6C4 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E6C8 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E6CC 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E6D0 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E6D4 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E6D8 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E6DC 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E6E0 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E6E4 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E6E8 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E6EC 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E6F0 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E6F4 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0009E6F8 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0009E6FC 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0009E700 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0009E704 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0009E708 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0009E70C 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0009E710 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0009E714 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0009E71A                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0009EA38                            		even
0009EA38                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0009EE3A                            		even
0009EE3A                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0009F338                            		even
0009F338                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0009F71C                            		even
0009F71C                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0009F9D4                            		even
0009F9D4                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0009FFE0                            		even
0009FFE0                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000A0448                            		even
000A0448                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000A047A                            		even
000A047A                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
000A04AC                            		even
000A04AC                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
000A04DE                            		even
000A04DE                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
000A0510                            		even
000A0510                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000A055A                            		even
000A055A                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
000A0598                            		even
000A0598                            ObjPos_MZ1:	incbin	objpos\mz1.bin
000A0832                            		even
000A0832                            ObjPos_MZ2:	incbin	objpos\mz2.bin
000A0C52                            		even
000A0C52                            ObjPos_MZ3:	incbin	objpos\mz3.bin
000A110E                            		even
000A110E                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
000A150A                            		even
000A150A                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
000A17EC                            		even
000A17EC                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
000A1C48                            		even
000A1C48                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000A1FD8                            		even
000A1FD8                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
000A23B0                            		even
000A23B0                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
000A28A2                            		even
000A28A2                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
000A2ED2                            		even
000A2ED2                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
000A344E                            		even
000A344E                            ObjPos_FZ:	incbin	objpos\fz.bin
000A3460                            		even
000A3460                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
000A3492                            		even
000A3492                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
000A34C4                            		even
000A34C4                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
000A34F6                            		even
000A34F6                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
000A3528                            		even
000A3528                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
000A355A                            		even
000A355A                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
000A3592                            		even
000A3592                            ObjPos_End:	incbin	objpos\ending.bin
000A36EE                            		even
000A36EE FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000A36F4                            ; ---------------------------------------------------------------------------
000A36F4                            ; Sprite locations index
000A36F4                            ; ---------------------------------------------------------------------------
000A36F4 0000 0000                  RingPos_Index:	dc.w Rings_GHZ1-RingPos_Index, Rings_Null-RingPos_Index
000A36F8 0000 0000                  		dc.w Rings_GHZ2-RingPos_Index, Rings_Null-RingPos_Index
000A36FC 0000 0000                  		dc.w Rings_GHZ3-RingPos_Index, Rings_Null-RingPos_Index
000A3700 0000 0000                  		dc.w Rings_GHZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3704 0000 0000                  		dc.w Rings_LZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3708 0000 0000                  		dc.w Rings_LZ2-RingPos_Index, Rings_Null-RingPos_Index
000A370C 0000 0000                  		dc.w Rings_LZ3-RingPos_Index, Rings_Null-RingPos_Index
000A3710 0000 0000                  		dc.w Rings_SBZ3-RingPos_Index, Rings_Null-RingPos_Index
000A3714 0000 0000                  		dc.w Rings_MZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3718 0000 0000                  		dc.w Rings_MZ2-RingPos_Index, Rings_Null-RingPos_Index
000A371C 0000 0000                  		dc.w Rings_MZ3-RingPos_Index, Rings_Null-RingPos_Index
000A3720 0000 0000                  		dc.w Rings_MZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3724 0000 0000                  		dc.w Rings_SLZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3728 0000 0000                  		dc.w Rings_SLZ2-RingPos_Index, Rings_Null-RingPos_Index
000A372C 0000 0000                  		dc.w Rings_SLZ3-RingPos_Index, Rings_Null-RingPos_Index
000A3730 0000 0000                  		dc.w Rings_SLZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3734 0000 0000                  		dc.w Rings_SYZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3738 0000 0000                  		dc.w Rings_SYZ2-RingPos_Index, Rings_Null-RingPos_Index
000A373C 0000 0000                  		dc.w Rings_SYZ3-RingPos_Index, Rings_Null-RingPos_Index
000A3740 0000 0000                  		dc.w Rings_SYZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3744 0000 0000                  		dc.w Rings_SBZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3748 0000 0000                  		dc.w Rings_SBZ2-RingPos_Index, Rings_Null-RingPos_Index
000A374C 0000 0000                  		dc.w Rings_FZ-RingPos_Index, Rings_Null-RingPos_Index
000A3750 0000 0000                  		dc.w Rings_SBZ1-RingPos_Index, Rings_Null-RingPos_Index
000A3754 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A3758 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A375C 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A3760 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A3764                            Rings_GHZ1:	incbin	rings\ghz1_INDIVIDUAL.bin
000A39D6                            		even
000A39D6                            Rings_GHZ2:	incbin	rings\ghz2_INDIVIDUAL.bin
000A3BC8                            		even
000A3BC8                            Rings_GHZ3:	incbin	rings\ghz3_INDIVIDUAL.bin
000A3DBA                            		even
000A3DBA                            Rings_LZ1:	incbin	rings\lz1_INDIVIDUAL.bin
000A3ED4                            		even
000A3ED4                            Rings_LZ2:	incbin	rings\lz2_INDIVIDUAL.bin
000A3FBE                            		even
000A3FBE                            Rings_LZ3:	incbin	rings\lz3_INDIVIDUAL.bin
000A4034                            		even
000A4034                            Rings_SBZ3:	incbin	rings\sbz3_INDIVIDUAL.bin
000A41EA                            		even
000A41EA                            Rings_MZ1:	incbin	rings\mz1_INDIVIDUAL.bin
000A42E8                            		even
000A42E8                            Rings_MZ2:	incbin	rings\mz2_INDIVIDUAL.bin
000A43CA                            		even
000A43CA                            Rings_MZ3:	incbin	rings\mz3_INDIVIDUAL.bin
000A44F0                            		even
000A44F0                            Rings_SLZ1:	incbin	rings\slz1_INDIVIDUAL.bin
000A4732                            		even
000A4732                            Rings_SLZ2:	incbin	rings\slz2_INDIVIDUAL.bin
000A4A04                            		even
000A4A04                            Rings_SLZ3:	incbin	rings\slz3_INDIVIDUAL.bin
000A4CD6                            		even
000A4CD6                            Rings_SYZ1:	incbin	rings\syz1_INDIVIDUAL.bin
000A4F50                            		even
000A4F50                            Rings_SYZ2:	incbin	rings\syz2_INDIVIDUAL.bin
000A52CE                            		even
000A52CE                            Rings_SYZ3:	incbin	rings\syz3_INDIVIDUAL.bin
000A5560                            		even
000A5560                            Rings_SBZ1:	incbin	rings\sbz1_INDIVIDUAL.bin
000A587A                            		even
000A587A                            Rings_SBZ2:	incbin	rings\sbz2_INDIVIDUAL.bin
000A5AE4                            		even
000A5AE4                            Rings_FZ:	incbin	rings\fz_INDIVIDUAL.bin
000A5AEA                            		even
000A5AEA                            Rings_End:	incbin	rings\ending_INDIVIDUAL.bin
000A5AF0                            		even
000A5AF0 FFFF 0000                  Rings_Null:	dc.b $FF, $FF, 0, 0
000A5AF4                            ; ---------------------------------------------------------------------------
000A5AF4                            ; ---------------------------------------------------------------------------
000A5AF4                            		incbin	misc\padding4.bin
000A611E                            		even
000A611E 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
000A6122 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
000A6126 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
000A612A 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
000A612E 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
000A6132 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
000A6136                            ; ---------------------------------------------------------------------------
000A6136                            ; PSG instruments used in music
000A6136                            ; ---------------------------------------------------------------------------
000A6136 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
000A6142 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
000A614E 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000A615A                            PSG1:		incbin	sound\psg1.bin
000A6171                            PSG2:		incbin	sound\psg2.bin
000A6178                            PSG3:		incbin	sound\psg3.bin
000A6189                            PSG4:		incbin	sound\psg4.bin
000A6194                            PSG6:		incbin	sound\psg6.bin
000A61A3                            PSG5:		incbin	sound\psg5.bin
000A61CD                            PSG7:		incbin	sound\psg7.bin
000A61E9                            PSG8:		incbin	sound\psg8.bin
000A6211                            PSG9:		incbin	sound\psg9.bin
000A6222                            
000A6222 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
000A622A                            ; ---------------------------------------------------------------------------
000A622A                            ; Music	Pointers
000A622A                            ; ---------------------------------------------------------------------------
000A622A 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
000A6232 0000 0000 0000 0000        		dc.l Music83, Music84
000A623A 0000 0000 0000 0000        		dc.l Music85, Music86
000A6242 0000 0000 0000 0000        		dc.l Music87, Music88
000A624A 0000 0000 0000 0000        		dc.l Music89, Music8A
000A6252 0000 0000 0000 0000        		dc.l Music8B, Music8C
000A625A 0000 0000 0000 0000        		dc.l Music8D, Music8E
000A6262 0000 0000 0000 0000        		dc.l Music8F, Music90
000A626A 0000 0000 0000 0000        		dc.l Music91, Music92
000A6272 0000 0000                  		dc.l Music93
000A6276                            ; ---------------------------------------------------------------------------
000A6276                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
000A6276                            ; ---------------------------------------------------------------------------
000A6276 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
000A6286 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
000A6296 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
000A62A6 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
000A62B6 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
000A62C6 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
000A62D6 9090 9090                  		dc.b $90, $90, $90, $90
000A62DA                            
000A62DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A62DA                            
000A62DA                            sub_71B4C:	
000A62DA 4DF9 00FF F000             		lea	($FFF000).l,a6
000A62E0                            
000A62E0 41F9 00A0 0C68             		lea	($A00000+YM_Buffer).l,a0		; CHG: load buffer ID address
000A62E6 33FC 0100 00A1 1100 0839+  		StopZ80						; CHG: request Z80 stop on
000A62F8 1010                       		move.b	(a0),d0					; CHG: load buffer ID
000A62FA 33FC 0000 00A1 1100        		StartZ80					; CHG: request Z80 stop off
000A6302 B02E 0010                  		cmp.b	$10(a6),d0				; CHG: has the 68k recently written to this buffer?
000A6306 6600                       		bne.s	SD_ValidList				; CHG: if not, branch
000A6308 4E75                       		rts						; CHG: return (cannot write to YM cue until Z80 is finished with it)
000A630A                            
000A630A                            SD_ValidList:
000A630A 2D7C 00A0 1000 0010        		move.l	#$A00000+YM_Buffer1,$10(a6)		; set the cue address to buffer 1
000A6312 4A00                       		tst.b	d0					; is the Z80 accessing buffer 1?
000A6314 6600                       		bne.s	SD_WriteBuffer1				; if not, branch
000A6316 2D7C 00A0 1400 0010        		move.l	#$A00000+YM_Buffer2,$10(a6)		; set the cue address to buffer 2
000A631E                            
000A631E                            SD_WriteBuffer1:
000A631E 1D40 0010                  		move.b	d0,$10(a6)				; set buffer ID the 68k is writing to
000A6322 422E 000E                  		clr.b	$E(a6)
000A6326 4A2E 0003                  		tst.b	3(a6)		; is music paused?
000A632A 6600 0000                  		bne.w	loc_71E50	; if yes, branch
000A632E 532E 0001                  		subq.b	#1,1(a6)
000A6332 6600                       		bne.s	loc_71B9E
000A6334 4EBA 0000                  		jsr	sub_7260C(pc)
000A6338                            
000A6338                            loc_71B9E:
000A6338 102E 0004                  		move.b	4(a6),d0
000A633C 6700                       		beq.s	loc_71BA8
000A633E 4EBA 0000                  		jsr	sub_72504(pc)
000A6342                            
000A6342                            loc_71BA8:
000A6342 4A2E 0024                  		tst.b	$24(a6)
000A6346 6700                       		beq.s	loc_71BB2
000A6348 4EBA 0000                  		jsr	sub_7267C(pc)
000A634C                            
000A634C                            loc_71BB2:
000A634C 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
000A6350 6700                       		beq.s	loc_71BBC	; if not, branch
000A6352 4EBA 0000                  		jsr	Sound_Play(pc)
000A6356                            
000A6356                            loc_71BBC:
000A6356 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000A635C 6700                       		beq.s	loc_71BC8
000A635E 4EBA 0000                  		jsr	Sound_ChkValue(pc)
000A6362                            
000A6362                            loc_71BC8:
000A6362 4BEE 0010                  		lea	$40-$30(a6),a5			; MJ: making correction for flow below
000A6366 7E01                       		moveq	#2-1,d7				; MJ: set number of PCM channels to run
000A6368 1D7C 007F 0008             		move.b	#$80-1,$08(a6)			; MJ: reset as PCM channel
000A636E                            
000A636E                            SD_NextPCM:
000A636E 522E 0008                  		addq.b	#$01,$08(a6)			; MJ: advance PCM channel ID
000A6372 4BED 0030                  		lea	$30(a5),a5			; MJ: advance to next channel
000A6376 4A15                       		tst.b	(a5)
000A6378 6A00                       		bpl.s	loc_71BD4
000A637A 4EBA 0000                  		jsr	sub_71C4E(pc)
000A637E                            
000A637E                            loc_71BD4:
000A637E 51CF FFEE                  		dbf	d7,SD_NextPCM			; MJ: repeat for number of PCM channels available
000A6382 422E 0008                  		clr.b	8(a6)
000A6386 7E05                       		moveq	#5,d7
000A6388                            
000A6388                            loc_71BDA:
000A6388 DAFC 0030                  		adda.w	#$30,a5
000A638C 4A15                       		tst.b	(a5)
000A638E 6A00                       		bpl.s	loc_71BE6
000A6390 4EBA 0000                  		jsr	sub_71CCA(pc)
000A6394                            
000A6394                            loc_71BE6:
000A6394 51CF FFF2                  		dbf	d7,loc_71BDA
000A6398                            
000A6398 7E02                       		moveq	#2,d7
000A639A                            
000A639A                            loc_71BEC:
000A639A DAFC 0030                  		adda.w	#$30,a5
000A639E 4A15                       		tst.b	(a5)
000A63A0 6A00                       		bpl.s	loc_71BF8
000A63A2 4EBA 0000                  		jsr	sub_72850(pc)
000A63A6                            
000A63A6                            loc_71BF8:
000A63A6 51CF FFF2                  		dbf	d7,loc_71BEC
000A63AA                            
000A63AA 1D7C 0080 000E             		move.b	#$80,$E(a6)
000A63B0 7E02                       		moveq	#2,d7
000A63B2                            
000A63B2                            loc_71C04:
000A63B2 DAFC 0030                  		adda.w	#$30,a5
000A63B6 4A15                       		tst.b	(a5)
000A63B8 6A00                       		bpl.s	loc_71C10
000A63BA 4EBA 0000                  		jsr	sub_71CCA(pc)
000A63BE                            
000A63BE                            loc_71C10:
000A63BE 51CF FFF2                  		dbf	d7,loc_71C04
000A63C2                            
000A63C2 7E02                       		moveq	#2,d7
000A63C4                            
000A63C4                            loc_71C16:
000A63C4 DAFC 0030                  		adda.w	#$30,a5
000A63C8 4A15                       		tst.b	(a5)
000A63CA 6A00                       		bpl.s	loc_71C22
000A63CC 4EBA 0000                  		jsr	sub_72850(pc)
000A63D0                            
000A63D0                            loc_71C22:
000A63D0 51CF FFF2                  		dbf	d7,loc_71C16
000A63D4 1D7C 0040 000E             		move.b	#$40,$E(a6)
000A63DA DAFC 0030                  		adda.w	#$30,a5
000A63DE 4A15                       		tst.b	(a5)
000A63E0 6A00                       		bpl.s	loc_71C38
000A63E2 4EBA 0000                  		jsr	sub_71CCA(pc)
000A63E6                            
000A63E6                            loc_71C38:
000A63E6 DAFC 0030                  		adda.w	#$30,a5
000A63EA 4A15                       		tst.b	(a5)
000A63EC 6A00                       		bpl.s	loc_71C44
000A63EE 4EBA 0000                  		jsr	sub_72850(pc)
000A63F2                            
000A63F2                            loc_71C44:
000A63F2 4E75                       		rts	
000A63F4                            
000A63F4                            ; End of function sub_71B4C
000A63F4                            
000A63F4                            
000A63F4                            ; ===========================================================================
000A63F4                            ; ---------------------------------------------------------------------------
000A63F4                            ; Subroutine to run an FM channel ; EXTRA - ON/OFF
000A63F4                            ; ---------------------------------------------------------------------------
000A63F4                            
000A63F4                            SDAC_CheckMute:
000A63F4 102D 0021                  	move.b	$21(a5),d0
000A63F8 B02D 0022                  	cmp.b	$22(a5),d0
000A63FC 6700                       	beq.s	S71C4E_NoCHG
000A63FE 4A00                       	tst.b	d0
000A6400 6A00                       	bpl.s	S71C4E_NoMute
000A6402                            
000A6402 70DA                       		moveq	#%11011010|$FFFFFF00,d0			; prepare "JP Z" instruction
000A6404 49F9 0000 0000             		lea	(StopSample).l,a4		; MUTE
000A640A 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1		; load PCM 2 slot address
000A6410 41F9 00A0 0651             		lea	($A00000+PCM2_NewRET).l,a0		; ''
000A6416 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A641C 6600                       		bne.s	SDAC_CM_NotePCM2				; if not, branch for PCM 2 writing
000A641E 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1		; load PCM 1 slot address
000A6424 41F9 00A0 064E             		lea	($A00000+PCM1_NewRET).l,a0		; ''
000A642A                            
000A642A                            SDAC_CM_NotePCM2:
000A642A 33FC 0100 00A1 1100 0839+  		StopZ80
000A643C 12DC                       		move.b	(a4)+,(a1)+				; set address of sample
000A643E 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6440 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6442 12DC                       		move.b	(a4)+,(a1)+				; set address of reverse sample
000A6444 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6446 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6448 12DC                       		move.b	(a4)+,(a1)+				; set address of next sample
000A644A 12DC                       		move.b	(a4)+,(a1)+				; ''
000A644C 12DC                       		move.b	(a4)+,(a1)+				; ''
000A644E 12DC                       		move.b	(a4)+,(a1)+				; set address of next reverse sample
000A6450 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6452 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6454 1080                       		move.b	d0,(a0)					; change "JP NC" to "JP C"
000A6456 33FC 0000 00A1 1100        		StartZ80
000A645E                            
000A645E                            ;	jsr	sub_726FE(pc)
000A645E                            ;	move.b	$0A(a5),d1
000A645E                            ;	andi.b	#%00111111,d1
000A645E                            ;	move.b	#$B4,d0
000A645E                            ;	jsr	loc_72716
000A645E 08D5 0006                  	bset.b	#$06,(a5)
000A6462 1B6D 0021 0022             	move.b	$21(a5),$22(a5)
000A6468                            
000A6468                            S71C4E_NoCHG:
000A6468 4E75                       	rts
000A646A                            
000A646A                            S71C4E_NoMute:
000A646A 1B40 0022                  	move.b	d0,$22(a5)
000A646E                            ;	move.b	$0B(a5),d0
000A646E                            ;	jsr	SFM_UpdateVoice(pc)
000A646E                            ;	move.b	$0A(a5),d1
000A646E                            ;	move.b	#$B4,d0
000A646E                            ;	jsr	loc_72716
000A646E 08D5 0006                  	bset.b	#$06,(a5)
000A6472 4E75                       	rts
000A6474                            
000A6474                            ; ===========================================================================
000A6474                            ; ---------------------------------------------------------------------------
000A6474                            ; Subroutine to run a DAC channel ; CHG: The entire routine...
000A6474                            ; ---------------------------------------------------------------------------
000A6474                            
000A6474                            sub_71C4E:
000A6474 6100 FF7E                  	bsr.w	SDAC_CheckMute			; EXTRA - ON/OFF
000A6478                            
000A6478                            	; Volume is being done first, as it'll update with a single
000A6478                            	; frame delay, the PCM playback is a frame behind, as is the
000A6478                            	; pitch control, but the volume change happens immediately,
000A6478                            	; thus, a delay is needed.
000A6478                            
000A6478                            	; *VOLUME DELAY WAS HERE*
000A6478                            
000A6478                            		; And now back to the normal DAC
000A6478                            		; SMPS routine
000A6478                            
000A6478 532D 000E                  		subq.b	#$01,$0E(a5)				; decrease note timer
000A647C 6600 0000                  		bne.w	SDAC_HoldNote				; if still running, branch
000A6480 0895 0004                  		bclr.b	#$04,(a5)				; disable softkey
000A6484 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A6488 286D 0004                  		movea.l	$04(a5),a4				; load tracker address
000A648C 6000                       		bra.s	SDAC_ReadTracker			; continue into loop
000A648E                            
000A648E                            SDAC_ReadFlag:
000A648E 4EBA 0000                  		jsr	sub_72A5A(pc)				; run flags subroutine
000A6492                            
000A6492                            SDAC_ReadTracker:
000A6492 7A00                       		moveq	#$00,d5					; clear d5
000A6494 1A1C                       		move.b	(a4)+,d5				; load byte from SMPS track
000A6496 6A00 0000                  		bpl.w	SDAC_Timer				; if it's a timer, branch
000A649A 0C05 00E0                  		cmpi.b	#$E0,d5					; is it a flag?
000A649E 64EE                       		bcc.s	SDAC_ReadFlag				; if so, branch
000A64A0 1B45 0020                  	move.b	d5,$20(a5)			; EXTRA
000A64A4                            
000A64A4                            	SDAC_Update:				; EXTRA
000A64A4 08D5 0001                  		bset.b	#$01,(a5)				; set channel as resting
000A64A8 0405 0080                  		subi.b	#$80,d5					; minus starting note
000A64AC 6700                       		beq.s	SDAC_NoFrequency			; if it's mute, branch
000A64AE 5515                       		subq.b	#$02,(a5)				; set channel as NOT resting
000A64B0 DA2D 0008                  		add.b	$08(a5),d5				; add pitch to it
000A64B4 DA2E 0014                  	add.b	$14(a6),d5			; EXTRA
000A64B8 DA45                       		add.w	d5,d5					; multiply by size of word
000A64BA 3B7B 5000 0010             		move.w	(FrequenciesPCM-2)(pc,d5.w),$10(a5)	; save frequency to use
000A64C0                            
000A64C0                            SDAC_NoFrequency:
000A64C0                            
000A64C0 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A64C4 6600 0000                  	bne.w	SDAC_Frequency			; EXTRA
000A64C8 1A1C                       		move.b	(a4)+,d5				; load next note
000A64CA 6A00 0000                  		bpl.w	SDAC_Timer				; if it's a timer, branch
000A64CE 534C                       		subq.w	#$01,a4					; move back (it's not a timer after all)
000A64D0 1B6D 000F 000E             		move.b	$0F(a5),$0E(a5)				; reset timer
000A64D6 6000 0000                  		bra.w	SDAC_PlayNote				; continue
000A64DA                            
000A64DA                            ; ---------------------------------------------------------------------------
000A64DA                            ; Note to PCM frequency conversion table
000A64DA                            ; ---------------------------------------------------------------------------
000A64DA                            ; The octave numbers below assume the samples are playing a default pitch/note
000A64DA                            ; of C3 (A5)
000A64DA                            ; ---------------------------------------------------------------------------
000A64DA                            
000A64DA                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000A64DA                            
000A64DA 0010 0011 0012 0013 0014+  FrequenciesPCM:	dc.w	$0010,$0011,$0012,$0013,$0014,$0015,$0017,$0018,$0019,$001B,$001D,$001E   ; Octave 0 - (81 - 8C)
000A64F2 0020 0022 0024 0026 0028+  		dc.w	$0020,$0022,$0024,$0026,$0028,$002B,$002D,$0030,$0033,$0036,$0039,$003C   ; Octave 1 - (8D - 98)
000A650A 0040 0044 0048 004C 0051+  		dc.w	$0040,$0044,$0048,$004C,$0051,$0055,$005B,$0060,$0066,$006C,$0072,$0079   ; Octave 2 - (99 - A4)
000A6522 0080 0088 0090 0098 00A1+  		dc.w	$0080,$0088,$0090,$0098,$00A1,$00AB,$00B5,$00C0,$00CB,$00D7,$00E4,$00F2   ; Octave 3 - (A5 - B0)
000A653A 0100 010F 011F 0130 0143+  		dc.w	$0100,$010F,$011F,$0130,$0143,$0156,$016A,$0180,$0196,$01AF,$01C8,$01E3   ; Octave 4 - (B1 - BC)
000A6552 0200 021E 023F 0261 0285+  		dc.w	$0200,$021E,$023F,$0261,$0285,$02AB,$02D4,$02FF,$032D,$035D,$0390,$03C7   ; Octave 5 - (BD - C8)
000A656A 0400 043D 047D 04C2 050A+  		dc.w	$0400,$043D,$047D,$04C2,$050A,$0557,$05A8,$05FE,$0659,$06BA,$0721,$078D   ; Octave 6 - (C9 - D4)
000A6582 0800 087A 08FB 0983 0A14+  		dc.w	$0800,$087A,$08FB,$0983,$0A14,$0AAE,$0B50,$0BFD,$0CB3,$0D74,$0E41,$0F1A   ; Octave 7 - (D5 - DF)
000A659A                            
000A659A                            ; ---------------------------------------------------------------------------
000A659A                            ; Writing the sample to Dual PCM
000A659A                            ; ---------------------------------------------------------------------------
000A659A                            
000A659A                            SDAC_Timer:
000A659A 4EBA 0000                  		jsr	sub_71D40(pc)				; correct timer
000A659E                            
000A659E                            SDAC_PlayNote:
000A659E 2B4C 0004                  		move.l	a4,$04(a5)				; update tracker address
000A65A2                            
000A65A2                            	SDAC_MuteNote:
000A65A2 49F9 0000 0000             		lea	(StopSample).l,a4			; load "stop sample" address
000A65A8 4A2D 0022                  	tst.b	$22(a5)
000A65AC 6B00                       	bmi.s	SDAC_Rest
000A65AE 1015                       		move.b	(a5),d0					; load flags
000A65B0 0800 0004                  		btst	#$04,d0					; is soft key set?
000A65B4 6600                       		bne.s	SDAC_SoftKey				; if so, branch
000A65B6 E610                       		roxr.b	#$03,d0					; rotate around
000A65B8 6500 0000                  		bcs.w	SDAC_Return				; if the channel is being interrupted (bit 2), branch
000A65BC 6B00                       		bmi.s	SDAC_Rest				; if the rest bit was set, branch
000A65BE 7000                       		moveq	#$00,d0					; clear d0
000A65C0 102D 000B                  		move.b	$0B(a5),d0				; load sample ID
000A65C4 D040                       		add.w	d0,d0					; multiply by 4 (long-word size)
000A65C6 D040                       		add.w	d0,d0					; ''
000A65C8 49F9 0000 0000             		lea	(SampleList).l,a4			; load sample list
000A65CE 2874 0000                  		move.l	(a4,d0.w),a4				; load correct sample z80 pointer address
000A65D2                            
000A65D2                            SDAC_Rest:
000A65D2 70DA                       		moveq	#%11011010|$FFFFFF00,d0			; prepare "JP Z" instruction
000A65D4 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1		; load PCM 2 slot address
000A65DA 41F9 00A0 0651             		lea	($A00000+PCM2_NewRET).l,a0		; ''
000A65E0 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A65E6 6600                       		bne.s	SDAC_NotePCM2				; if not, branch for PCM 2 writing
000A65E8 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1		; load PCM 1 slot address
000A65EE 41F9 00A0 064E             		lea	($A00000+PCM1_NewRET).l,a0		; ''
000A65F4                            
000A65F4                            SDAC_NotePCM2:
000A65F4 33FC 0100 00A1 1100 0839+  		StopZ80
000A6606 12DC                       		move.b	(a4)+,(a1)+				; set address of sample
000A6608 12DC                       		move.b	(a4)+,(a1)+				; ''
000A660A 12DC                       		move.b	(a4)+,(a1)+				; ''
000A660C 12DC                       		move.b	(a4)+,(a1)+				; set address of reverse sample
000A660E 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6610 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6612 12DC                       		move.b	(a4)+,(a1)+				; set address of next sample
000A6614 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6616 12DC                       		move.b	(a4)+,(a1)+				; ''
000A6618 12DC                       		move.b	(a4)+,(a1)+				; set address of next reverse sample
000A661A 12DC                       		move.b	(a4)+,(a1)+				; ''
000A661C 12DC                       		move.b	(a4)+,(a1)+				; ''
000A661E 1080                       		move.b	d0,(a0)					; change "JP NC" to "JP C"
000A6620 33FC 0000 00A1 1100        		StartZ80
000A6628                            
000A6628                            SDAC_SoftKey:
000A6628                            
000A6628                            	SDAC_Frequency:
000A6628                            
000A6628 102D 0009                  		move.b	$09(a5),d0				; load current volume
000A662C 7200                       	moveq	#$00,d1				; EXTRA
000A662E 122E 0016                  	move.b	$16(a6),d1			; EXTRA
000A6632                            ;	lea	(FOP_VolumeList).l,a0		; EXTRA
000A6632                            ;	move.b	(a0,d1.w),d1			; EXTRA
000A6632 D201                       	add.b	d1,d1
000A6634 D001                       	add.b	d1,d0
000A6636                            
000A6636 1200                       		move.b	d0,d1					; copy volume to d1
000A6638 6A00                       		bpl.s	SDAC_ValidVolume			; if it is between 00 and 80, branch
000A663A 7080                       		moveq	#$FFFFFF80,d0				; set volume to mute (81 - FF is out of bounds)
000A663C                            
000A663C                            SDAC_ValidVolume:
000A663C B02D 000C                  		cmp.b	$0C(a5),d0				; has the volume changed?
000A6640 6700                       		beq.s	SDAC_NoVolume				; if not, branch (don't bother)
000A6642 1B40 000C                  		move.b	d0,$0C(a5)				; update volume
000A6646 72D2                       		moveq	#($FFFFFF00|%11010010),d1		; prepare Z80 "JP NC" instruction
000A6648 43F9 00A0 0634             		lea	($A00000+PCM_ChangeVolume).l,a1		; load volume change instruction address
000A664E 41F9 00A0 0647             		lea	($A00000+PCM2_Volume+1).l,a0		; load PCM 2 volume address
000A6654 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A665A 6600                       		bne.s	SDAC_VolumePCM2				; if not, branch for PCM 2 writing
000A665C 41F9 00A0 0642             		lea	($A00000+PCM1_Volume+1).l,a0		; load PCM 1 volume address
000A6662                            
000A6662                            SDAC_VolumePCM2:
000A6662 33FC 0100 00A1 1100 0839+  		StopZ80
000A6674 1080                       		move.b	d0,(a0)					; change PCM volume
000A6676 1281                       		move.b	d1,(a1)					; change "JP C" to "JP NC"
000A6678 33FC 0000 00A1 1100        		StartZ80
000A6680                            
000A6680                            SDAC_NoVolume:
000A6680                            
000A6680 3C2D 0010                  		move.w	$10(a5),d6				; load frequency
000A6684 0815 0003                  		btst	#$03,(a5)				; is modulation turned on?
000A6688 6700                       		beq.s	SDAC_WriteFrequency			; if not, branch
000A668A 286D 0014                  		movea.l	$14(a5),a4				; load modulation address
000A668E 43ED 0018                  		lea	$18(a5),a1				; load modulation settings RAM
000A6692 0815 0004                  		btst.b	#$04,(a5)				; is soft key set?
000A6696 6600                       		bne.s	SDAC_NoResetModulation			; if so, branch
000A6698 12DC                       		move.b	(a4)+,(a1)+				; reset settings...
000A669A 12DC                       		move.b	(a4)+,(a1)+				; ''
000A669C 12DC                       		move.b	(a4)+,(a1)+				; ''
000A669E 101C                       		move.b	(a4)+,d0				; ''
000A66A0 E208                       		lsr.b	#$01,d0					; ''
000A66A2 12C0                       		move.b	d0,(a1)+				; ''
000A66A4 4259                       		clr.w	(a1)+					; clear modulation frequency
000A66A6                            
000A66A6                            SDAC_NoResetModulation:
000A66A6 DC6D 001C                  		add.w	$1C(a5),d6				; add modulation pitch
000A66AA 6000                       		bra.s	SDAC_WriteFrequency			; continue
000A66AC                            
000A66AC                            ; ---------------------------------------------------------------------------
000A66AC                            ; Holding a note...
000A66AC                            ; ---------------------------------------------------------------------------
000A66AC                            
000A66AC                            SDAC_HoldNote:
000A66AC 1015                       		move.b	(a5),d0					; load flags
000A66AE 0200 0003                  		andi.b	#%00000011,d0				; is the channel being interrupted by an SFX, or is resting?
000A66B2 6600 0000                  		bne.w	SDAC_Return				; if so, branch
000A66B6                            
000A66B6 0815 0006                  	btst.b	#$06,(a5)			; EXTRA
000A66BA 6700                       	beq.s	SDAC_NoUpdate			; EXTRA
000A66BC 7A00                       	moveq	#$00,d5				; EXTRA
000A66BE 1A2D 0020                  	move.b	$20(a5),d5			; EXTRA
000A66C2 6000 FDE0                  	bra.w	SDAC_Update			; EXTRA
000A66C6                            
000A66C6                            	SDAC_NoUpdate:				; EXTRA
000A66C6 4EBA 0000                  		jsr	sub_71D9E(pc)				; check for release
000A66CA 4EBA 0000                  		jsr	sub_71DC6(pc)				; run modulation and get right frequency to d6
000A66CE                            
000A66CE                            	; d6 = frequency
000A66CE                            
000A66CE                            SDAC_WriteFrequency:
000A66CE 102D 001E                  		move.b	$1E(a5),d0				; load detune
000A66D2 4880                       		ext.w	d0					; sign extend to word
000A66D4 D046                       		add.w	d6,d0					; add to frequency (move it up or down subtly)
000A66D6 0815 0005                  		btst.b	#$05,(a5)				; is the reverse flag set?
000A66DA 6700                       		beq.s	SDAC_NoReverse				; if not, branch
000A66DC 4440                       		neg.w	d0					; reverse
000A66DE                            	;	subi.w	#$0100*2,d0				; move back to Dual PCM's neutral
000A66DE                            
000A66DE                            SDAC_NoReverse:
000A66DE                            	;	move.w	d0,d3					; copy to d3
000A66DE                            	;	smi	d2					; set extend byte if value is negative
000A66DE                            	;	addi.w	#$0100,d3				; convert to true neutral (for overflow)
000A66DE                            	;	muls.w	#Z80E_Read,d3				; multiply by number of reads the Z80 performs (read 18 vs playback 10)
000A66DE                            	;	move.b	d3,d5					; load fraction to d5
000A66DE                            	;	asr.l	#$08,d3					; divide by 100
000A66DE                            	;	move.w	d3,-(sp)				; get upper byte of overflow value
000A66DE                            	;	move.b	(sp),d4					; ''
000A66DE                            	;	move.w	d0,(sp)					; get upper byte of pitch/frequency
000A66DE                            	;	move.b	(sp),d1					; ''
000A66DE                            	;	addq.w	#$02,sp					; move stack forwards (would've done via increment and back...
000A66DE                            								; ...index, but interrupts could be a problem).
000A66DE                            	; d0 = XXXX.DD
000A66DE                            	; d1 = XXQQ.XX
000A66DE                            	; d2 = QQXX.XX
000A66DE                            	; d3 = XXVV.XX
000A66DE                            	; d4 = VVXX.XX
000A66DE                            	; d5 = XXXX.OO
000A66DE                            
000A66DE 74D2                       		moveq	#$FFFFFF00|%11010010,d2
000A66E0 1200                       		move.b	d0,d1
000A66E2 E048                       		lsr.w	#$08,d0
000A66E4 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A66EA 6600                       		bne.s	SDAC_FrequePCM2				; if not, branch for PCM 2 writing
000A66EC 33FC 0100 00A1 1100 0839+  		StopZ80
000A66FE                            	;	move.b	d0,($A00000+PCM1_RateDiv+1)		; write pitch main dividend
000A66FE                            	;	move.b	d1,($A00000+PCM1_RateQuo+1)		; write pitch quotient low
000A66FE                            	;	move.b	d2,($A00000+PCM1_RateQuo+2)		; write pitch quotient high
000A66FE                            	;	move.b	d3,($A00000+PCM1_Overflow+1)		; write low overflow
000A66FE                            	;	move.b	d4,($A00000+PCM1_Overflow+2)		; write high overflow
000A66FE                            	;	move.b	d5,($A00000+PCM1_OverDiv+1)		; write dividend overflow
000A66FE                            	;	move.b	#%11010010,($A00000+PCM_ChangePitch)	; change "JP C" to "JP NC"
000A66FE                            
000A66FE 13C0 00A0 05DD             		move.b	d0,($A00000+PCM1_PitchHigh+1)
000A6704 13C1 00A0 05E8             		move.b	d1,($A00000+PCM1_PitchLow+1)
000A670A 13C2 00A0 05D2             		move.b	d2,($A00000+PCM1_ChangePitch)		; change "JP C" to "JP NC"
000A6710 33FC 0000 00A1 1100        		StartZ80
000A6718                            
000A6718                            SDAC_Return:
000A6718 4E75                       		rts						; return
000A671A                            
000A671A                            SDAC_FrequePCM2:
000A671A 33FC 0100 00A1 1100 0839+  		StopZ80
000A672C                            	;	move.b	d0,($A00000+PCM2_RateDiv+1)		; write pitch main dividend
000A672C                            	;	move.b	d1,($A00000+PCM2_RateQuo+1)		; write pitch quotient low
000A672C                            	;	move.b	d2,($A00000+PCM2_RateQuo+2)		; write pitch quotient high
000A672C                            	;	move.b	d3,($A00000+PCM2_Overflow+1)		; write low overflow
000A672C                            	;	move.b	d4,($A00000+PCM2_Overflow+2)		; write high overflow
000A672C                            	;	move.b	d5,($A00000+PCM2_OverDiv+1)		; write dividend overflow
000A672C                            	;	move.b	#%11010010,($A00000+PCM_ChangePitch)	; change "JP C" to "JP NC"
000A672C                            
000A672C 13C0 00A0 060E             		move.b	d0,($A00000+PCM2_PitchHigh+1)
000A6732 13C1 00A0 0619             		move.b	d1,($A00000+PCM2_PitchLow+1)
000A6738 13C2 00A0 0603             		move.b	d2,($A00000+PCM2_ChangePitch)		; change "JP C" to "JP NC"
000A673E 33FC 0000 00A1 1100        		StartZ80
000A6746 4E75                       		rts						; return
000A6748                            
000A6748                            ; ===========================================================================
000A6748                            ; ---------------------------------------------------------------------------
000A6748                            ; Subroutine to run an FM channel ; EXTRA - ON/OFF
000A6748                            ; ---------------------------------------------------------------------------
000A6748                            
000A6748                            SFM_CheckMute:
000A6748 4A2E 000E                  	tst.b	$0E(a6)
000A674C 6600                       	bne.s	S71CCA_NoCHG
000A674E 102D 0021                  	move.b	$21(a5),d0
000A6752 B02D 0022                  	cmp.b	$22(a5),d0
000A6756 6700                       	beq.s	S71CCA_NoCHG
000A6758 4A00                       	tst.b	d0
000A675A 6A00                       	bpl.s	S71CCA_NoMute
000A675C 4EBA 0000                  	jsr	sub_726FE(pc)
000A6760 122D 000A                  	move.b	$0A(a5),d1
000A6764 0201 003F                  	andi.b	#%00111111,d1
000A6768 103C 00B4                  	move.b	#$B4,d0
000A676C 4EB9 0000 0000             	jsr	loc_72716
000A6772 08D5 0006                  	bset.b	#$06,(a5)
000A6776 1B6D 0021 0022             	move.b	$21(a5),$22(a5)
000A677C                            
000A677C                            S71CCA_NoCHG:
000A677C 4E75                       	rts
000A677E                            
000A677E                            S71CCA_NoMute:
000A677E 1B40 0022                  	move.b	d0,$22(a5)
000A6782 102D 000B                  	move.b	$0B(a5),d0
000A6786 4EBA 0000                  	jsr	SFM_UpdateVoice(pc)
000A678A                            ;	jsr	loc_726E2(pc)
000A678A 122D 000A                  	move.b	$0A(a5),d1
000A678E 103C 00B4                  	move.b	#$B4,d0
000A6792 4EB9 0000 0000             	jsr	loc_72716
000A6798 08D5 0006                  	bset.b	#$06,(a5)
000A679C 4E75                       	rts
000A679E                            
000A679E                            ; ===========================================================================
000A679E                            ; ---------------------------------------------------------------------------
000A679E                            ; Subroutine to run an FM channel
000A679E                            ; ---------------------------------------------------------------------------
000A679E                            
000A679E                            sub_71CCA:				; XREF: sub_71B4C
000A679E 61A8                       	bsr.s	SFM_CheckMute			; EXTRA - ON/OFF
000A67A0                            
000A67A0 532D 000E                  		subq.b	#1,$E(a5)
000A67A4 6600                       		bne.s	loc_71CE0
000A67A6 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A67AA 0895 0004                  		bclr	#4,(a5)
000A67AE 4EBA 0000                  		jsr	sub_71CEC(pc)
000A67B2 4EBA 0000                  		jsr	sub_71E18(pc)
000A67B6 6000 0000                  		bra.w	loc_726E2
000A67BA                            ; ===========================================================================
000A67BA                            
000A67BA                            loc_71CE0:
000A67BA 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A67BE 6700                       	beq.s	SFM_NoUpdate			; EXTRA
000A67C0 4EB9 0000 0000             	jsr	sub_72CB4			; EXTRA
000A67C6 7A00                       	moveq	#$00,d5				; EXTRA
000A67C8 1A2D 0020                  	move.b	$20(a5),d5			; EXTRA
000A67CC 0405 0080                  	subi.b	#$80,d5				; EXTRA
000A67D0 6700                       	beq.s	SFM_NoUpdate			; EXTRA
000A67D2 4EB9 0000 0000             	jsr	SFM_UpdateFreque		; EXTRA
000A67D8 6000 0000                  	bra.w	loc_71E24			; EXTRA
000A67DC                            
000A67DC                            	SFM_NoUpdate:				; EXTRA
000A67DC 4EBA 0000                  		jsr	sub_71D9E(pc)
000A67E0 4EBA 0000                  		jsr	sub_71DC6(pc)
000A67E4 6000 0000                  		bra.w	loc_71E24
000A67E8                            ; End of function sub_71CCA
000A67E8                            
000A67E8                            
000A67E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A67E8                            
000A67E8                            
000A67E8                            sub_71CEC:				; XREF: sub_71CCA
000A67E8 286D 0004                  		movea.l	4(a5),a4
000A67EC 0895 0001                  		bclr	#1,(a5)
000A67F0                            
000A67F0                            loc_71CF4:
000A67F0 7A00                       		moveq	#0,d5
000A67F2 1A1C                       		move.b	(a4)+,d5
000A67F4 0C05 00E0                  		cmpi.b	#-$20,d5
000A67F8 6500                       		bcs.s	loc_71D04
000A67FA 4EBA 0000                  		jsr	sub_72A5A(pc)
000A67FE 60F0                       		bra.s	loc_71CF4
000A6800                            ; ===========================================================================
000A6800                            
000A6800                            loc_71D04:
000A6800 4EBA 0000                  		jsr	sub_726FE(pc)
000A6804 4A05                       		tst.b	d5
000A6806 6A00                       		bpl.s	loc_71D1A
000A6808 1B45 0020                  	move.b	d5,$20(a5)			; EXTRA
000A680C 4EBA 0000                  		jsr	sub_71D22(pc)
000A6810 1A1C                       		move.b	(a4)+,d5
000A6812 6A00                       		bpl.s	loc_71D1A
000A6814 534C                       		subq.w	#1,a4
000A6816 6000 0000                  		bra.w	sub_71D60
000A681A                            ; ===========================================================================
000A681A                            
000A681A                            loc_71D1A:
000A681A 4EBA 0000                  		jsr	sub_71D40(pc)
000A681E 6000 0000                  		bra.w	sub_71D60
000A6822                            ; End of function sub_71CEC
000A6822                            
000A6822                            
000A6822                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6822                            
000A6822                            
000A6822                            sub_71D22:				; XREF: sub_71CEC
000A6822 0405 0080                  		subi.b	#$80,d5
000A6826 6700                       		beq.s	loc_71D58
000A6828                            
000A6828                            	SFM_UpdateFreque:			; EXTRA
000A6828 DA2D 0008                  		add.b	8(a5),d5
000A682C DA2E 0014                  	add.b	$14(a6),d5			; EXTRA
000A6830 0245 007F                  		andi.w	#$7F,d5
000A6834 E34D                       		lsl.w	#1,d5
000A6836 41FA 0000                  		lea	word_72790(pc),a0
000A683A 3C30 5000                  		move.w	(a0,d5.w),d6
000A683E 3B46 0010                  		move.w	d6,$10(a5)
000A6842 4E75                       		rts	
000A6844                            ; End of function sub_71D22
000A6844                            
000A6844                            
000A6844                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6844                            
000A6844                            
000A6844                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000A6844 1005                       		move.b	d5,d0
000A6846 122D 0002                  		move.b	2(a5),d1
000A684A                            
000A684A                            loc_71D46:
000A684A 5301                       		subq.b	#1,d1
000A684C 6700                       		beq.s	loc_71D4E
000A684E D005                       		add.b	d5,d0
000A6850 60F8                       		bra.s	loc_71D46
000A6852                            ; ===========================================================================
000A6852                            
000A6852                            loc_71D4E:
000A6852 1B40 000F                  		move.b	d0,$F(a5)
000A6856 1B40 000E                  		move.b	d0,$E(a5)
000A685A 4E75                       		rts	
000A685C                            ; End of function sub_71D40
000A685C                            
000A685C                            ; ===========================================================================
000A685C                            
000A685C                            loc_71D58:				; XREF: sub_71D22
000A685C 08D5 0001                  		bset	#1,(a5)
000A6860 426D 0010                  		clr.w	$10(a5)
000A6864                            
000A6864                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6864                            
000A6864                            
000A6864                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
000A6864 2B4C 0004                  		move.l	a4,4(a5)
000A6868 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000A686E 0815 0004                  		btst	#4,(a5)
000A6872 6600                       		bne.s	locret_71D9C
000A6874 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
000A687A 422D 000C                  		clr.b	$C(a5)
000A687E 0815 0003                  		btst	#3,(a5)
000A6882 6700                       		beq.s	locret_71D9C
000A6884 206D 0014                  		movea.l	$14(a5),a0
000A6888 1B58 0018                  		move.b	(a0)+,$18(a5)
000A688C 1B58 0019                  		move.b	(a0)+,$19(a5)
000A6890 1B58 001A                  		move.b	(a0)+,$1A(a5)
000A6894 1018                       		move.b	(a0)+,d0
000A6896 E208                       		lsr.b	#1,d0
000A6898 1B40 001B                  		move.b	d0,$1B(a5)
000A689C 426D 001C                  		clr.w	$1C(a5)
000A68A0                            
000A68A0                            locret_71D9C:
000A68A0 4E75                       		rts	
000A68A2                            ; End of function sub_71D60
000A68A2                            
000A68A2                            
000A68A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A68A2                            
000A68A2                            
000A68A2                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000A68A2 4A2D 0012                  		tst.b	$12(a5)
000A68A6 6700                       		beq.s	locret_71DC4
000A68A8 532D 0012                  		subq.b	#1,$12(a5)
000A68AC 6600                       		bne.s	locret_71DC4
000A68AE 4A2E 0008                  		tst.b	$08(a6)						; CHG: is this a PCM channel?
000A68B2 6B00                       		bmi.s	SDCR_StopPCM					; if so, branch (skipping rest flag setting)
000A68B4 08D5 0001                  		bset	#1,(a5)
000A68B8 4A2D 0001                  		tst.b	1(a5)
000A68BC 6B00 0000                  		bmi.w	loc_71DBE
000A68C0 4EBA 0000                  		jsr	sub_726FE(pc)
000A68C4 584F                       		addq.w	#4,sp
000A68C6 4E75                       		rts	
000A68C8                            ; ===========================================================================
000A68C8                            
000A68C8                            loc_71DBE:
000A68C8 4EBA 0000                  		jsr	sub_729A0(pc)
000A68CC 584F                       		addq.w	#4,sp
000A68CE                            
000A68CE                            locret_71DC4:
000A68CE 4E75                       		rts	
000A68D0                            ; End of function sub_71D9E
000A68D0                            
000A68D0                            SDCR_StopPCM:
000A68D0 33FC 0100 00A1 1100 0839+  		StopZ80
000A68E2 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A68E8 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A68EE 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A68F0 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A68F2 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A68F4 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A68F6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A68F8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A68FA 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A68FC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A68FE 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6900 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6902 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6904 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6906 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A690E 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A6914 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 2 slot address
000A691A 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A691C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A691E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6920 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6922 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6924 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6926 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6928 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A692A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A692C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A692E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6930 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6932 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A693A 33FC 0000 00A1 1100        		StartZ80
000A6942 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A6944 4E75                       		rts							; CHG: return
000A6946                            
000A6946                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6946                            
000A6946                            
000A6946                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
000A6946 0815 0003                  		btst	#3,(a5)
000A694A 6700                       		beq.s	locret_71E16
000A694C 4A2D 0018                  		tst.b	$18(a5)
000A6950 6700                       		beq.s	loc_71DDA
000A6952 532D 0018                  		subq.b	#1,$18(a5)
000A6956 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A6958 4E75                       		rts	
000A695A                            ; ===========================================================================
000A695A                            
000A695A                            loc_71DDA:
000A695A 532D 0019                  		subq.b	#1,$19(a5)
000A695E 6700                       		beq.s	loc_71DE2
000A6960 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A6962 4E75                       		rts	
000A6964                            ; ===========================================================================
000A6964                            
000A6964                            loc_71DE2:
000A6964 206D 0014                  		movea.l	$14(a5),a0
000A6968 1B68 0001 0019             		move.b	1(a0),$19(a5)
000A696E 4A2D 001B                  		tst.b	$1B(a5)
000A6972 6600                       		bne.s	loc_71DFE
000A6974 1B68 0003 001B             		move.b	3(a0),$1B(a5)
000A697A 442D 001A                  		neg.b	$1A(a5)
000A697E 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A6980 4E75                       		rts	
000A6982                            ; ===========================================================================
000A6982                            
000A6982                            loc_71DFE:
000A6982 532D 001B                  		subq.b	#1,$1B(a5)
000A6986 1C2D 001A                  		move.b	$1A(a5),d6
000A698A 4886                       		ext.w	d6
000A698C DC6D 001C                  		add.w	$1C(a5),d6
000A6990 3B46 001C                  		move.w	d6,$1C(a5)
000A6994 DC6D 0010                  		add.w	$10(a5),d6
000A6998 4E75                       		rts							; CHG: return (don't skip)
000A699A                            
000A699A                            locret_71E16:
000A699A 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A699C 4E75                       		rts	
000A699E                            ; End of function sub_71DC6
000A699E                            
000A699E                            
000A699E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A699E                            
000A699E                            
000A699E                            sub_71E18:				; XREF: sub_71CCA
000A699E 0815 0001                  		btst	#1,(a5)
000A69A2 6600                       		bne.s	locret_71E48
000A69A4 3C2D 0010                  		move.w	$10(a5),d6
000A69A8 6700                       		beq.s	loc_71E4A
000A69AA                            
000A69AA                            loc_71E24:				; XREF: sub_71CCA
000A69AA 102D 001E                  		move.b	$1E(a5),d0
000A69AE 4880                       		ext.w	d0
000A69B0 DC40                       		add.w	d0,d6
000A69B2 0815 0002                  		btst	#2,(a5)
000A69B6 6600                       		bne.s	locret_71E48
000A69B8 4A2E 000E                  	tst.b	$0E(a6)
000A69BC 6600                       	bne.s	locret_71E48_2
000A69BE 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A69C2 6600                       	bne.s	locret_71E48
000A69C4                            
000A69C4                            	locret_71E48_2:
000A69C4 3206                       		move.w	d6,d1
000A69C6 E049                       		lsr.w	#8,d1
000A69C8 103C 00A4                  		move.b	#-$5C,d0
000A69CC 4EBA 0000                  		jsr	sub_72722(pc)
000A69D0 1206                       		move.b	d6,d1
000A69D2 103C 00A0                  		move.b	#-$60,d0
000A69D6 4EBA 0000                  		jsr	sub_72722(pc)
000A69DA                            
000A69DA                            locret_71E48:
000A69DA 4E75                       		rts	
000A69DC                            ; ===========================================================================
000A69DC                            
000A69DC                            loc_71E4A:
000A69DC 08D5 0001                  		bset	#1,(a5)
000A69E0 4E75                       		rts	
000A69E2                            ; End of function sub_71E18
000A69E2                            
000A69E2                            ; ===========================================================================
000A69E2                            
000A69E2                            loc_71E50:				; XREF: sub_71B4C
000A69E2 6B00                       		bmi.s	loc_71E94
000A69E4 0C2E 0002 0003             		cmpi.b	#2,3(a6)
000A69EA 6700 0000                  		beq.w	loc_71EFE
000A69EE 1D7C 0002 0003             		move.b	#2,3(a6)
000A69F4 7602                       		moveq	#2,d3
000A69F6 103C 00B4                  		move.b	#-$4C,d0
000A69FA 7200                       		moveq	#0,d1
000A69FC                            
000A69FC                            loc_71E6A:
000A69FC 4EBA 0000                  		jsr	sub_7272E(pc)
000A6A00 4EBA 0000                  		jsr	sub_72764(pc)
000A6A04 5200                       		addq.b	#1,d0
000A6A06 51CB FFF4                  		dbf	d3,loc_71E6A
000A6A0A                            
000A6A0A 7602                       		moveq	#2,d3
000A6A0C 7028                       		moveq	#$28,d0
000A6A0E                            
000A6A0E                            loc_71E7C:
000A6A0E 1203                       		move.b	d3,d1
000A6A10 4EBA 0000                  		jsr	sub_7272E(pc)
000A6A14 5801                       		addq.b	#4,d1
000A6A16 4EBA 0000                  		jsr	sub_7272E(pc)
000A6A1A 51CB FFF2                  		dbf	d3,loc_71E7C
000A6A1E                            
000A6A1E 4EBA 0000                  		jsr	sub_729B6(pc)
000A6A22 6000 F9CE                  		bra.w	loc_71C44
000A6A26                            ; ===========================================================================
000A6A26                            
000A6A26                            loc_71E94:				; XREF: loc_71E50
000A6A26 422E 0003                  		clr.b	3(a6)
000A6A2A 7630                       		moveq	#$30,d3
000A6A2C 4BEE 0040                  		lea	$40(a6),a5
000A6A30 7807                       		moveq	#7,d4					; MJ: number of YM2612 based channels
000A6A32                            
000A6A32                            loc_71EA0:
000A6A32 0815 0007                  		btst	#7,(a5)
000A6A36 6700                       		beq.s	loc_71EB8
000A6A38 0815 0002                  		btst	#2,(a5)
000A6A3C 6600                       		bne.s	loc_71EB8
000A6A3E 4A2E 000E                  	tst.b	$0E(a6)
000A6A42 6600                       	bne.s	loc_71EB8_2
000A6A44 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6A48 6600                       	bne.s	loc_71EB8
000A6A4A                            
000A6A4A                            	loc_71EB8_2:
000A6A4A 103C 00B4                  		move.b	#-$4C,d0
000A6A4E 122D 000A                  		move.b	$A(a5),d1
000A6A52 4EBA 0000                  		jsr	sub_72722(pc)
000A6A56                            
000A6A56                            loc_71EB8:
000A6A56 DAC3                       		adda.w	d3,a5
000A6A58 51CC FFD8                  		dbf	d4,loc_71EA0
000A6A5C                            
000A6A5C 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000A6A60 7802                       		moveq	#2,d4
000A6A62                            
000A6A62                            loc_71EC4:
000A6A62 0815 0007                  		btst	#7,(a5)
000A6A66 6700                       		beq.s	loc_71EDC
000A6A68 0815 0002                  		btst	#2,(a5)
000A6A6C 6600                       		bne.s	loc_71EDC
000A6A6E 4A2E 000E                  	tst.b	$0E(a6)
000A6A72 6600                       	bne.s	loc_71EDC_2
000A6A74 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6A78 6600                       	bne.s	loc_71EDC
000A6A7A                            
000A6A7A                            	loc_71EDC_2:
000A6A7A 103C 00B4                  		move.b	#-$4C,d0
000A6A7E 122D 000A                  		move.b	$A(a5),d1
000A6A82 4EBA 0000                  		jsr	sub_72722(pc)
000A6A86                            
000A6A86                            loc_71EDC:
000A6A86 DAC3                       		adda.w	d3,a5
000A6A88 51CC FFD8                  		dbf	d4,loc_71EC4
000A6A8C                            
000A6A8C 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A6A90 0815 0007                  		btst	#7,(a5)
000A6A94 6700                       		beq.s	loc_71EFE
000A6A96 0815 0002                  		btst	#2,(a5)
000A6A9A 6600                       		bne.s	loc_71EFE
000A6A9C 4A2E 000E                  	tst.b	$0E(a6)
000A6AA0 6600                       	bne.s	loc_71EFE_2
000A6AA2 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6AA6 6600                       	bne.s	loc_71EFE
000A6AA8                            
000A6AA8                            	loc_71EFE_2:
000A6AA8 103C 00B4                  		move.b	#-$4C,d0
000A6AAC 122D 000A                  		move.b	$A(a5),d1
000A6AB0 4EBA 0000                  		jsr	sub_72722(pc)
000A6AB4                            
000A6AB4                            loc_71EFE:
000A6AB4 6000 F93C                  		bra.w	loc_71C44
000A6AB8                            
000A6AB8                            ; ---------------------------------------------------------------------------
000A6AB8                            ; Subroutine to	play a sound or	music track
000A6AB8                            ; ---------------------------------------------------------------------------
000A6AB8                            
000A6AB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6AB8                            
000A6AB8                            
000A6AB8                            Sound_Play:				; XREF: sub_71B4C
000A6AB8 2079 000A 611E             		movea.l	(Go_SoundTypes).l,a0
000A6ABE 43EE 000A                  		lea	$A(a6),a1	; load music track number
000A6AC2 1616                       		move.b	0(a6),d3
000A6AC4 7802                       		moveq	#2,d4
000A6AC6                            
000A6AC6                            loc_71F12:
000A6AC6 1011                       		move.b	(a1),d0		; move track number to d0
000A6AC8 1200                       		move.b	d0,d1
000A6ACA 4219                       		clr.b	(a1)+
000A6ACC 0400 0081                  		subi.b	#$81,d0
000A6AD0 6500                       		bcs.s	loc_71F3E
000A6AD2 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000A6AD8 6700                       		beq.s	loc_71F2C
000A6ADA 1D41 000A                  		move.b	d1,$A(a6)
000A6ADE 6000                       		bra.s	loc_71F3E
000A6AE0                            ; ===========================================================================
000A6AE0                            
000A6AE0                            loc_71F2C:
000A6AE0 0240 007F                  		andi.w	#$7F,d0
000A6AE4 1430 0000                  		move.b	(a0,d0.w),d2
000A6AE8 B403                       		cmp.b	d3,d2
000A6AEA 6500                       		bcs.s	loc_71F3E
000A6AEC 1602                       		move.b	d2,d3
000A6AEE 1D41 0009                  		move.b	d1,9(a6)	; set music flag
000A6AF2                            
000A6AF2                            loc_71F3E:
000A6AF2 51CC FFD2                  		dbf	d4,loc_71F12
000A6AF6                            
000A6AF6 4A03                       		tst.b	d3
000A6AF8 6B00                       		bmi.s	locret_71F4A
000A6AFA 1C83                       		move.b	d3,0(a6)
000A6AFC                            
000A6AFC                            locret_71F4A:
000A6AFC 4E75                       		rts	
000A6AFE                            ; End of function Sound_Play
000A6AFE                            
000A6AFE                            
000A6AFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6AFE                            
000A6AFE                            
000A6AFE                            Sound_ChkValue:				; XREF: sub_71B4C
000A6AFE 7E00                       		moveq	#0,d7
000A6B00 1E2E 0009                  		move.b	9(a6),d7
000A6B04 6700 0000                  		beq.w	Sound_E4
000A6B08 6A00                       		bpl.s	locret_71F8C
000A6B0A 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
000A6B10 0C07 009F                  		cmpi.b	#$9F,d7
000A6B14 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
000A6B18 0C07 00A0                  		cmpi.b	#$A0,d7
000A6B1C 6500 0000                  		bcs.w	locret_71F8C
000A6B20 0C07 00CF                  		cmpi.b	#$CF,d7
000A6B24 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
000A6B28 0C07 00D0                  		cmpi.b	#$D0,d7
000A6B2C 6500 0000                  		bcs.w	locret_71F8C
000A6B30 0C07 00E0                  		cmpi.b	#$E0,d7
000A6B34 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
000A6B38 0C07 00E4                  		cmpi.b	#$E4,d7
000A6B3C 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
000A6B3E                            
000A6B3E                            locret_71F8C:
000A6B3E 4E75                       		rts	
000A6B40                            ; ===========================================================================
000A6B40                            
000A6B40                            Sound_E0toE4:				; XREF: Sound_ChkValue
000A6B40 0407 00E0                  		subi.b	#$E0,d7
000A6B44 E54F                       		lsl.w	#2,d7
000A6B46 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000A6B4A                            ; ===========================================================================
000A6B4A                            
000A6B4A                            Sound_ExIndex:
000A6B4A 6000 0000                  		bra.w	Sound_E0
000A6B4E                            ; ===========================================================================
000A6B4E 6000 0000                  		bra.w	Sound_E1
000A6B52                            ; ===========================================================================
000A6B52 6000 0000                  		bra.w	Sound_E2
000A6B56                            ; ===========================================================================
000A6B56 6000 0000                  		bra.w	Sound_E3
000A6B5A                            ; ===========================================================================
000A6B5A 6000 0000                  		bra.w	Sound_E4
000A6B5E                            ; ===========================================================================
000A6B5E                            ; ---------------------------------------------------------------------------
000A6B5E                            ; Play "Say-gaa" PCM sound
000A6B5E                            ; ---------------------------------------------------------------------------
000A6B5E                            
000A6B5E                            Sound_E1:
000A6B5E 33FC 0100 00A1 1100 0839+  		StopZ80						; MJ: request Z80 stop "ON"
000A6B70 45F9 0000 0000             		lea	(SegaPCM).l,a2				; MJ: load sample address
000A6B76 47F9 00A0 4000             		lea	($A04000).l,a3				; MJ: load YM2612 port
000A6B7C 16FC 002A                  		move.b	#$2A,(a3)+				; MJ: set YM2612 address to the PCM data port
000A6B80 283C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM)-$01,d4		; MJ: prepare size
000A6B86 3604                       		move.w	d4,d3					; MJ: get lower word size
000A6B88 4844                       		swap	d4					; MJ: get upper word size
000A6B8A                            
000A6B8A                            PlayPCM_Loop:
000A6B8A 169A                       		move.b	(a2)+,(a3)				; MJ: save sample data to port
000A6B8C 702B                       		moveq	#$2B,d0					; MJ: set delay time
000A6B8E 51C8 FFFE                  		dbf	d0,*					; MJ: delay...
000A6B92 51CB FFF6                  		dbf	d3,PlayPCM_Loop				; MJ: repeat til done
000A6B96 51CC FFF2                  		dbf	d4,PlayPCM_Loop				; MJ: ''
000A6B9A 16BC 0080                  		move.b	#$80,(a3)				; MJ: save mute data to port
000A6B9E 584F                       		addq.w	#$04,sp					; MJ: skip return address
000A6BA0 534B                       		subq.w	#$01,a3					; MJ: move back to address port
000A6BA2 4A13                       		tst.b	(a3)					; MJ: is the YM2612 busy?
000A6BA4 6BFC                       		bmi.s	*-$02					; MJ: if so, branch and recheck
000A6BA6 16BC 002A                  		move.b	#$2A,(a3)				; MJ: write address (set it back to DAC port for the Z80)
000A6BAA 33FC 0000 00A1 1100        		StartZ80					; MJ: request Z80 stop "OFF"
000A6BB2 4E75                       		rts						; MJ: return
000A6BB4                            
000A6BB4                            ; ===========================================================================
000A6BB4                            ; ---------------------------------------------------------------------------
000A6BB4                            ; Play music track $81-$9F
000A6BB4                            ; ---------------------------------------------------------------------------
000A6BB4                            
000A6BB4                            Sound_81to9F:
000A6BB4 33FC 0100 00A1 1100 0839+  		StopZ80
000A6BC6 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A6BCC 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A6BD2 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6BD4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6BD6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6BD8 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6BDA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6BDC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6BDE 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6BE0 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6BE2 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6BE4 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6BE6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6BE8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6BEA 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A6BF2 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A6BF8 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 2 slot address
000A6BFE 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6C00 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6C02 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6C04 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6C06 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6C08 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6C0A 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6C0C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6C0E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6C10 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6C12 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6C14 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6C16 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A6C1E 33FC 0000 00A1 1100        		StartZ80
000A6C26                            
000A6C26 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
000A6C2A 6600                       		bne.s	loc_72024	; if not, branch
000A6C2C 4A2E 0027                  		tst.b	$27(a6)
000A6C30 6600 0000                  		bne.w	loc_721B6
000A6C34 4BEE 0040                  		lea	$40(a6),a5
000A6C38 700A                       		moveq	#10,d0					; MJ: number of channels in total
000A6C3A                            
000A6C3A                            loc_71FE6:
000A6C3A 0895 0002                  		bclr	#2,(a5)
000A6C3E DAFC 0030                  		adda.w	#$30,a5
000A6C42 51C8 FFF6                  		dbf	d0,loc_71FE6
000A6C46                            
000A6C46 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000A6C4A 7005                       		moveq	#5,d0
000A6C4C                            
000A6C4C                            loc_71FF8:
000A6C4C 0895 0007                  		bclr	#7,(a5)
000A6C50 DAFC 0030                  		adda.w	#$30,a5
000A6C54 51C8 FFF6                  		dbf	d0,loc_71FF8
000A6C58 4216                       		clr.b	0(a6)
000A6C5A 204E                       		movea.l	a6,a0
000A6C5C 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
000A6C60 303C 0087                  		move.w	#$87,d0
000A6C64                            
000A6C64                            loc_72012:
000A6C64 22D8                       		move.l	(a0)+,(a1)+
000A6C66 51C8 FFFC                  		dbf	d0,loc_72012
000A6C6A                            
000A6C6A 1D7C 0080 0027             		move.b	#$80,$27(a6)
000A6C70 4216                       		clr.b	0(a6)
000A6C72 6000                       		bra.s	loc_7202C
000A6C74                            ; ===========================================================================
000A6C74                            
000A6C74                            loc_72024:
000A6C74 422E 0027                  		clr.b	$27(a6)
000A6C78 422E 0026                  		clr.b	$26(a6)
000A6C7C                            
000A6C7C                            loc_7202C:
000A6C7C 4EBA 0000                  		jsr	sub_725CA(pc)
000A6C80                            
000A6C80 2879 000A 612E             		movea.l	(off_719A0).l,a4
000A6C86 0407 0081                  		subi.b	#$81,d7
000A6C8A 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000A6C90 2879 000A 6126             		movea.l	(Go_MusicIndex).l,a4
000A6C96 E54F                       		lsl.w	#2,d7
000A6C98 2874 7000                  		movea.l	(a4,d7.w),a4
000A6C9C 7000                       		moveq	#0,d0
000A6C9E 3014                       		move.w	(a4),d0
000A6CA0 D08C                       		add.l	a4,d0
000A6CA2 2D40 0018                  		move.l	d0,$18(a6)
000A6CA6 102C 0005                  		move.b	5(a4),d0
000A6CAA 1D40 0028                  		move.b	d0,$28(a6)
000A6CAE 4A2E 002A                  		tst.b	$2A(a6)
000A6CB2 6700                       		beq.s	loc_72068
000A6CB4 102E 0029                  		move.b	$29(a6),d0
000A6CB8                            
000A6CB8                            loc_72068:
000A6CB8 1D40 0002                  		move.b	d0,2(a6)
000A6CBC 1D40 0001                  		move.b	d0,1(a6)
000A6CC0 7200                       		moveq	#0,d1
000A6CC2 264C                       		movea.l	a4,a3
000A6CC4 5C4C                       		addq.w	#6,a4
000A6CC6 7E00                       		moveq	#0,d7
000A6CC8 1E2B 0002                  		move.b	2(a3),d7
000A6CCC 6700 0000                  		beq.w	loc_72114
000A6CD0 5307                       		subq.b	#1,d7
000A6CD2 123C 00C0                  		move.b	#-$40,d1
000A6CD6 182B 0004                  		move.b	4(a3),d4
000A6CDA 7C30                       		moveq	#$30,d6
000A6CDC 1A3C 0001                  		move.b	#1,d5
000A6CE0 43EE 0040                  		lea	$40(a6),a1
000A6CE4 45FA 0000                  		lea	byte_721BA(pc),a2
000A6CE8                            
000A6CE8                            loc_72098:
000A6CE8 08D1 0007                  		bset	#7,(a1)
000A6CEC 135A 0001                  		move.b	(a2)+,1(a1)
000A6CF0 1344 0002                  		move.b	d4,2(a1)
000A6CF4 1346 000D                  		move.b	d6,$D(a1)
000A6CF8 1341 000A                  		move.b	d1,$A(a1)
000A6CFC 1345 000E                  		move.b	d5,$E(a1)
000A6D00 7000                       		moveq	#0,d0
000A6D02 3340 0010                  		move.w	d0,$10(a1)				; MJ: clear FM's frequency (ensures no frequency writing)
000A6D06 137C 0080 000C             		move.b	#$80,$0C(a1)				; MJ: set last frame's volume to something impossible (volume is from C0 - 40)
000A6D0C 301C                       		move.w	(a4)+,d0
000A6D0E D08B                       		add.l	a3,d0
000A6D10 2340 0004                  		move.l	d0,4(a1)
000A6D14 335C 0008                  		move.w	(a4)+,8(a1)
000A6D18 D2C6                       		adda.w	d6,a1
000A6D1A 51CF FFCC                  		dbf	d7,loc_72098
000A6D1E 702B                       		moveq	#$2B,d0					; MJ: set YM2612 address to DAC/FM6 switch
000A6D20 123C 0080                  		move.b	#%10000000,d1				; MJ: set to turn DAC on
000A6D24 0C2B 0008 0002             		cmpi.b	#8,2(a3)				; MJ: changed to 8 (8 = 6FM channels, no DAC)
000A6D2A 6600                       		bne.s	loc_720D8
000A6D2C                            	;	moveq	#$2B,d0					; MJ: removed...
000A6D2C 7200                       		moveq	#0,d1
000A6D2E 4EBA 0000                  		jsr	sub_7272E(pc)
000A6D32 6000 0000                  		bra.w	loc_72114
000A6D36                            ; ===========================================================================
000A6D36                            
000A6D36                            loc_720D8:
000A6D36 4EBA 0000                  		jsr	sub_7272E(pc)				; MJ: added... (turn DAC on)
000A6D3A                            
000A6D3A                            	; --- Key off FM 6 ---
000A6D3A                            
000A6D3A 7028                       		moveq	#$28,d0
000A6D3C 7206                       		moveq	#6,d1
000A6D3E 4EBA 0000                  		jsr	sub_7272E(pc)
000A6D42                            
000A6D42                            	; --- Sets FM 6 to mute ---
000A6D42                            
000A6D42 103C 0042                  		move.b	#$42,d0
000A6D46 727F                       		moveq	#$7F,d1
000A6D48 4EBA 0000                  		jsr	sub_72764(pc)
000A6D4C 103C 004A                  		move.b	#$4A,d0
000A6D50 727F                       		moveq	#$7F,d1
000A6D52 4EBA 0000                  		jsr	sub_72764(pc)
000A6D56 103C 0046                  		move.b	#$46,d0
000A6D5A 727F                       		moveq	#$7F,d1
000A6D5C 4EBA 0000                  		jsr	sub_72764(pc)
000A6D60 103C 004E                  		move.b	#$4E,d0
000A6D64 727F                       		moveq	#$7F,d1
000A6D66 4EBA 0000                  		jsr	sub_72764(pc)
000A6D6A 103C 00B6                  		move.b	#-$4A,d0
000A6D6E 123C 00C0                  		move.b	#-$40,d1
000A6D72 4EBA 0000                  		jsr	sub_72764(pc)
000A6D76                            
000A6D76                            loc_72114:
000A6D76 7A02                       		moveq	#$02,d5					; EXT: set PSG to delay for 1 extra frame (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
000A6D78 7E00                       		moveq	#0,d7
000A6D7A 1E2B 0003                  		move.b	3(a3),d7
000A6D7E 6700                       		beq.s	loc_72154
000A6D80 5307                       		subq.b	#1,d7
000A6D82 43EE 01C0                  		lea	$1C0(a6),a1				; MJ: new BGM/SFX location
000A6D86 45FA 0000                  		lea	byte_721C2(pc),a2
000A6D8A                            
000A6D8A                            loc_72126:
000A6D8A 08D1 0007                  		bset	#7,(a1)
000A6D8E 135A 0001                  		move.b	(a2)+,1(a1)
000A6D92 1344 0002                  		move.b	d4,2(a1)
000A6D96 1346 000D                  		move.b	d6,$D(a1)
000A6D9A 1345 000E                  		move.b	d5,$E(a1)
000A6D9E 337C FFFF 0010             		move.w	#$FFFF,$10(a1)				; MJ: clear PSG's frequency (ensures no frequency writing)
000A6DA4 137C 0001 0012             		move.b	#$01,$12(a1)				; MJ: set key release rate to 1
000A6DAA 7000                       		moveq	#0,d0
000A6DAC 301C                       		move.w	(a4)+,d0
000A6DAE D08B                       		add.l	a3,d0
000A6DB0 2340 0004                  		move.l	d0,4(a1)
000A6DB4 335C 0008                  		move.w	(a4)+,8(a1)
000A6DB8 101C                       		move.b	(a4)+,d0
000A6DBA 135C 000B                  		move.b	(a4)+,$B(a1)
000A6DBE D2C6                       		adda.w	d6,a1
000A6DC0 51CF FFC8                  		dbf	d7,loc_72126
000A6DC4                            
000A6DC4                            loc_72154:
000A6DC4 43EE 0250                  		lea	$250(a6),a1				; MJ: new SFX location
000A6DC8 7E05                       		moveq	#5,d7
000A6DCA                            
000A6DCA                            loc_7215A:
000A6DCA 4A11                       		tst.b	(a1)
000A6DCC 6A00 0000                  		bpl.w	loc_7217C
000A6DD0 7000                       		moveq	#0,d0
000A6DD2 1029 0001                  		move.b	1(a1),d0
000A6DD6 6B00                       		bmi.s	loc_7216E
000A6DD8 5500                       		subq.b	#2,d0
000A6DDA E508                       		lsl.b	#2,d0
000A6DDC 6000                       		bra.s	loc_72170
000A6DDE                            ; ===========================================================================
000A6DDE                            
000A6DDE                            loc_7216E:
000A6DDE E608                       		lsr.b	#3,d0
000A6DE0                            
000A6DE0                            loc_72170:
000A6DE0 41FA 0000                  		lea	dword_722CC(pc),a0
000A6DE4 2070 0000                  		movea.l	(a0,d0.w),a0
000A6DE8 08D0 0002                  		bset	#2,(a0)
000A6DEC                            
000A6DEC                            loc_7217C:
000A6DEC D2C6                       		adda.w	d6,a1
000A6DEE 51CF FFDA                  		dbf	d7,loc_7215A
000A6DF2                            
000A6DF2 4A6E 0370                  		tst.w	$370(a6)				; MJ: new SFX location
000A6DF6 6A00                       		bpl.s	loc_7218E
000A6DF8 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
000A6DFE                            
000A6DFE                            loc_7218E:
000A6DFE 4A6E 03A0                  		tst.w	$3A0(a6)				; MJ: new SFX location
000A6E02 6A00                       		bpl.s	loc_7219A
000A6E04 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
000A6E0A                            
000A6E0A                            
000A6E0A                            loc_7219A:
000A6E0A 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
000A6E0E 7805                       		moveq	#5,d4
000A6E10                            
000A6E10                            loc_721A0:
000A6E10 4EBA 0000                  		jsr	sub_726FE(pc)
000A6E14 DAC6                       		adda.w	d6,a5
000A6E16 51CC FFF8                  		dbf	d4,loc_721A0
000A6E1A 7802                       		moveq	#2,d4
000A6E1C                            
000A6E1C                            loc_721AC:
000A6E1C 4EBA 0000                  		jsr	sub_729A0(pc)
000A6E20 DAC6                       		adda.w	d6,a5
000A6E22 51CC FFF8                  		dbf	d4,loc_721AC
000A6E26                            
000A6E26                            loc_721B6:
000A6E26 584F                       		addq.w	#4,sp
000A6E28 4E75                       		rts	
000A6E2A                            ; ===========================================================================
000A6E2A 0606 0001 0204 0506 00     byte_721BA:	dc.b 6,	6, 0, 1, 2, 4, 5, 6, 0			; MJ: extra 6 (for PCM 2)
000A6E34 00                         		even
000A6E34 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
000A6E38                            		even
000A6E38                            ; ===========================================================================
000A6E38                            ; ---------------------------------------------------------------------------
000A6E38                            ; Play normal sound effect
000A6E38                            ; ---------------------------------------------------------------------------
000A6E38                            
000A6E38                            Sound_A0toCF:				; XREF: Sound_ChkValue
000A6E38 4A2E 0027                  		tst.b	$27(a6)
000A6E3C 6600 0000                  		bne.w	loc_722C6
000A6E40 4A2E 0004                  		tst.b	4(a6)
000A6E44 6600 0000                  		bne.w	loc_722C6
000A6E48 4A2E 0024                  		tst.b	$24(a6)
000A6E4C 6600 0000                  		bne.w	loc_722C6
000A6E50 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000A6E54 6600                       		bne.s	Sound_notB5	; if not, branch
000A6E56 4A2E 002B                  		tst.b	$2B(a6)
000A6E5A 6600                       		bne.s	loc_721EE
000A6E5C 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000A6E60                            
000A6E60                            loc_721EE:
000A6E60 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000A6E66                            
000A6E66                            Sound_notB5:
000A6E66 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000A6E6A 6600                       		bne.s	Sound_notA7	; if not, branch
000A6E6C 4A2E 002C                  		tst.b	$2C(a6)
000A6E70 6600 0000                  		bne.w	locret_722C4
000A6E74 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000A6E7A                            
000A6E7A                            Sound_notA7:
000A6E7A 2079 000A 612A             		movea.l	(Go_SoundIndex).l,a0
000A6E80 0407 00A0                  		subi.b	#$A0,d7
000A6E84 E54F                       		lsl.w	#2,d7
000A6E86 2670 7000                  		movea.l	(a0,d7.w),a3
000A6E8A 224B                       		movea.l	a3,a1
000A6E8C 7200                       		moveq	#0,d1
000A6E8E 3219                       		move.w	(a1)+,d1
000A6E90 D28B                       		add.l	a3,d1
000A6E92 1A19                       		move.b	(a1)+,d5
000A6E94 1E19                       		move.b	(a1)+,d7
000A6E96 5307                       		subq.b	#1,d7
000A6E98 7C30                       		moveq	#$30,d6
000A6E9A                            
000A6E9A                            loc_72228:
000A6E9A 7600                       		moveq	#0,d3
000A6E9C 1629 0001                  		move.b	1(a1),d3
000A6EA0 7403                       		moveq	#$03,d2					; EXT: set PSG to delay for 2 extra frames (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
000A6EA2 1803                       		move.b	d3,d4
000A6EA4 6B00                       		bmi.s	loc_72244
000A6EA6 143C 0001                  		move.b	#$01,d2					; EXT: set DAC/FM to delay for 0 frames like normal (these have an auto delay of 1 frame in the Z80)
000A6EAA 5543                       		subq.w	#2,d3
000A6EAC E54B                       		lsl.w	#2,d3
000A6EAE 4BFA 0000                  		lea	dword_722CC(pc),a5
000A6EB2 2A75 3000                  		movea.l	(a5,d3.w),a5
000A6EB6 08D5 0002                  		bset	#2,(a5)
000A6EBA 6000                       		bra.s	loc_7226E
000A6EBC                            ; ===========================================================================
000A6EBC                            
000A6EBC                            loc_72244:
000A6EBC E64B                       		lsr.w	#3,d3
000A6EBE 4BFA 0000                  		lea	dword_722CC(pc),a5
000A6EC2 2A75 3000                  		movea.l	(a5,d3.w),a5
000A6EC6 08D5 0002                  		bset	#2,(a5)
000A6ECA 0C04 00C0                  		cmpi.b	#$C0,d4
000A6ECE 6600                       		bne.s	loc_7226E
000A6ED0 1004                       		move.b	d4,d0
000A6ED2 0000 001F                  		ori.b	#$1F,d0
000A6ED6 13C0 00C0 0011             		move.b	d0,($C00011).l
000A6EDC 0840 0005                  		bchg	#5,d0
000A6EE0 13C0 00C0 0011             		move.b	d0,($C00011).l
000A6EE6                            
000A6EE6                            loc_7226E:
000A6EE6 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
000A6EEA 244D                       		movea.l	a5,a2
000A6EEC 700B                       		moveq	#$B,d0
000A6EEE                            
000A6EEE                            loc_72276:
000A6EEE 429A                       		clr.l	(a2)+
000A6EF0 51C8 FFFC                  		dbf	d0,loc_72276
000A6EF4                            
000A6EF4 3A99                       		move.w	(a1)+,(a5)
000A6EF6 1B45 0002                  		move.b	d5,2(a5)
000A6EFA 7000                       		moveq	#0,d0
000A6EFC 3019                       		move.w	(a1)+,d0
000A6EFE D08B                       		add.l	a3,d0
000A6F00 2B40 0004                  		move.l	d0,4(a5)
000A6F04 3B59 0008                  		move.w	(a1)+,8(a5)
000A6F08 1B42 000E                  		move.b	d2,$E(a5)				; EXT: moving d2 contents (1 for FM/4 for PSG)
000A6F0C 1B46 000D                  		move.b	d6,$D(a5)
000A6F10 3B7C FFFF 0010             		move.w	#$FFFF,$10(a5)				; CHG: clear PSG's frequency (ensures no frequency writing)
000A6F16 4A04                       		tst.b	d4
000A6F18 6B00                       		bmi.s	loc_722A8
000A6F1A 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000A6F20 2B41 0020                  		move.l	d1,$20(a5)
000A6F24                            
000A6F24                            loc_722A8:
000A6F24 51CF FF74                  		dbf	d7,loc_72228
000A6F28                            
000A6F28 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000A6F2C 6A00                       		bpl.s	loc_722B8
000A6F2E 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
000A6F34                            
000A6F34                            loc_722B8:
000A6F34 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
000A6F38 6A00                       		bpl.s	locret_722C4
000A6F3A 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
000A6F40                            
000A6F40                            locret_722C4:
000A6F40 4E75                       		rts	
000A6F42                            ; ===========================================================================
000A6F42                            
000A6F42                            loc_722C6:
000A6F42 4216                       		clr.b	0(a6)
000A6F44 4E75                       		rts	
000A6F46                            ; ===========================================================================
000A6F46 00FF F100                  dword_722CC:	dc.l $FFF0D0+$30				; MJ: new locations (see all +$30)
000A6F4A 0000 0000                  		dc.l 0
000A6F4E 00FF F130                  		dc.l $FFF100+$30
000A6F52 00FF F160                  		dc.l $FFF130+$30
000A6F56 00FF F1C0                  		dc.l $FFF190+$30
000A6F5A 00FF F1F0                  		dc.l $FFF1C0+$30
000A6F5E 00FF F220                  		dc.l $FFF1F0+$30
000A6F62 00FF F220                  		dc.l $FFF1F0+$30
000A6F66 00FF F250                  dword_722EC:	dc.l $FFF220+$30
000A6F6A 0000 0000                  		dc.l 0
000A6F6E 00FF F280                  		dc.l $FFF250+$30
000A6F72 00FF F2B0                  		dc.l $FFF280+$30
000A6F76 00FF F2E0                  		dc.l $FFF2B0+$30
000A6F7A 00FF F310                  		dc.l $FFF2E0+$30
000A6F7E 00FF F340                  		dc.l $FFF310+$30
000A6F82 00FF F340                  		dc.l $FFF310+$30
000A6F86                            ; ===========================================================================
000A6F86                            ; ---------------------------------------------------------------------------
000A6F86                            ; Play GHZ waterfall sound
000A6F86                            ; ---------------------------------------------------------------------------
000A6F86                            
000A6F86                            Sound_D0toDF:				; XREF: Sound_ChkValue
000A6F86 4A2E 0027                  		tst.b	$27(a6)
000A6F8A 6600 0000                  		bne.w	locret_723C6
000A6F8E 4A2E 0004                  		tst.b	4(a6)
000A6F92 6600 0000                  		bne.w	locret_723C6
000A6F96 4A2E 0024                  		tst.b	$24(a6)
000A6F9A 6600 0000                  		bne.w	locret_723C6
000A6F9E 2079 000A 6122             		movea.l	(Go_SoundD0).l,a0
000A6FA4 0407 00D0                  		subi.b	#$D0,d7
000A6FA8 E54F                       		lsl.w	#2,d7
000A6FAA 2670 7000                  		movea.l	(a0,d7.w),a3
000A6FAE 224B                       		movea.l	a3,a1
000A6FB0 7000                       		moveq	#0,d0
000A6FB2 3019                       		move.w	(a1)+,d0
000A6FB4 D08B                       		add.l	a3,d0
000A6FB6 2D40 0020                  		move.l	d0,$20(a6)
000A6FBA 1A19                       		move.b	(a1)+,d5
000A6FBC 1E19                       		move.b	(a1)+,d7
000A6FBE 5307                       		subq.b	#1,d7
000A6FC0 7C30                       		moveq	#$30,d6
000A6FC2                            
000A6FC2                            loc_72348:
000A6FC2 1829 0001                  		move.b	1(a1),d4
000A6FC6 6B00                       		bmi.s	loc_7235A
000A6FC8 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
000A6FCE 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A6FD2 6000                       		bra.s	loc_72364
000A6FD4                            ; ===========================================================================
000A6FD4                            
000A6FD4                            loc_7235A:
000A6FD4 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
000A6FDA 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
000A6FDE                            
000A6FDE                            loc_72364:
000A6FDE 244D                       		movea.l	a5,a2
000A6FE0 700B                       		moveq	#$B,d0
000A6FE2                            
000A6FE2                            loc_72368:
000A6FE2 429A                       		clr.l	(a2)+
000A6FE4 51C8 FFFC                  		dbf	d0,loc_72368
000A6FE8                            
000A6FE8 3A99                       		move.w	(a1)+,(a5)
000A6FEA 1B45 0002                  		move.b	d5,2(a5)
000A6FEE 7000                       		moveq	#0,d0
000A6FF0 3019                       		move.w	(a1)+,d0
000A6FF2 D08B                       		add.l	a3,d0
000A6FF4 2B40 0004                  		move.l	d0,4(a5)
000A6FF8 3B59 0008                  		move.w	(a1)+,8(a5)
000A6FFC 1B7C 0001 000E             		move.b	#1,$E(a5)
000A7002 1B46 000D                  		move.b	d6,$D(a5)
000A7006 4A04                       		tst.b	d4
000A7008 6B00                       		bmi.s	loc_72396
000A700A 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000A7010                            
000A7010                            loc_72396:
000A7010 51CF FFB0                  		dbf	d7,loc_72348
000A7014                            
000A7014 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000A7018 6A00                       		bpl.s	loc_723A6
000A701A 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
000A7020                            
000A7020                            loc_723A6:
000A7020 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
000A7024 6A00                       		bpl.s	locret_723C6
000A7026 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
000A702C 0004 001F                  		ori.b	#$1F,d4
000A7030 13C4 00C0 0011             		move.b	d4,($C00011).l
000A7036 0844 0005                  		bchg	#5,d4
000A703A 13C4 00C0 0011             		move.b	d4,($C00011).l
000A7040                            
000A7040                            locret_723C6:
000A7040 4E75                       		rts	
000A7042                            ; End of function Sound_ChkValue
000A7042                            
000A7042                            ; ===========================================================================
000A7042 00FF F130                  		dc.l $FFF100+$30				; MJ: new channel locations (see +$30)
000A7046 00FF F220                  		dc.l $FFF1F0+$30
000A704A 00FF F280                  		dc.l $FFF250+$30
000A704E 00FF F340                  		dc.l $FFF310+$30
000A7052 00FF F370                  		dc.l $FFF340+$30
000A7056 00FF F3A0                  		dc.l $FFF370+$30
000A705A                            
000A705A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A705A                            
000A705A                            
000A705A                            Snd_FadeOut1:				; XREF: Sound_E0
000A705A 4216                       		clr.b	0(a6)
000A705C 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000A7060 7E05                       		moveq	#5,d7
000A7062                            
000A7062                            loc_723EA:
000A7062 4A15                       		tst.b	(a5)
000A7064 6A00 0000                  		bpl.w	loc_72472
000A7068 0895 0007                  		bclr	#7,(a5)
000A706C 7600                       		moveq	#0,d3
000A706E 162D 0001                  		move.b	1(a5),d3
000A7072 6B00                       		bmi.s	loc_7243C
000A7074 4EBA 0000                  		jsr	sub_726FE(pc)
000A7078 0C03 0004                  		cmpi.b	#4,d3
000A707C 6600                       		bne.s	loc_72416
000A707E 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
000A7082 6A00                       		bpl.s	loc_72416
000A7084 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A7088 226E 0020                  		movea.l	$20(a6),a1
000A708C 6000                       		bra.s	loc_72428
000A708E                            ; ===========================================================================
000A708E                            
000A708E                            loc_72416:
000A708E 5503                       		subq.b	#2,d3
000A7090 E50B                       		lsl.b	#2,d3
000A7092 41FA FEB2                  		lea	dword_722CC(pc),a0
000A7096 264D                       		movea.l	a5,a3
000A7098 2A70 3000                  		movea.l	(a0,d3.w),a5
000A709C 226E 0018                  		movea.l	$18(a6),a1
000A70A0                            
000A70A0                            loc_72428:
000A70A0 0895 0002                  		bclr	#2,(a5)
000A70A4 08D5 0001                  		bset	#1,(a5)
000A70A8 102D 000B                  		move.b	$B(a5),d0
000A70AC 4EBA 0000                  		jsr	sub_72C4E(pc)
000A70B0 2A4B                       		movea.l	a3,a5
000A70B2 6000                       		bra.s	loc_72472
000A70B4                            ; ===========================================================================
000A70B4                            
000A70B4                            loc_7243C:
000A70B4 4EBA 0000                  		jsr	sub_729A0(pc)
000A70B8 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
000A70BC 0C03 00E0                  		cmpi.b	#$E0,d3
000A70C0 6700                       		beq.s	loc_7245A
000A70C2 0C03 00C0                  		cmpi.b	#$C0,d3
000A70C6 6700                       		beq.s	loc_7245A
000A70C8 E60B                       		lsr.b	#3,d3
000A70CA 41FA FE7A                  		lea	dword_722CC(pc),a0
000A70CE 2070 3000                  		movea.l	(a0,d3.w),a0
000A70D2                            
000A70D2                            loc_7245A:
000A70D2 0890 0002                  		bclr	#2,(a0)
000A70D6 08D0 0001                  		bset	#1,(a0)
000A70DA 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000A70E0 6600                       		bne.s	loc_72472
000A70E2 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000A70EA                            
000A70EA                            loc_72472:
000A70EA DAFC 0030                  		adda.w	#$30,a5
000A70EE 51CF FF72                  		dbf	d7,loc_723EA
000A70F2                            
000A70F2 4E75                       		rts	
000A70F4                            ; End of function Snd_FadeOut1
000A70F4                            
000A70F4                            
000A70F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A70F4                            
000A70F4                            
000A70F4                            Snd_FadeOut2:				; XREF: Sound_E0
000A70F4 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A70F8 4A15                       		tst.b	(a5)
000A70FA 6A00                       		bpl.s	loc_724AE
000A70FC 0895 0007                  		bclr	#7,(a5)
000A7100 0815 0002                  		btst	#2,(a5)
000A7104 6600                       		bne.s	loc_724AE
000A7106 4A2E 000E                  	tst.b	$0E(a6)
000A710A 6600                       	bne.s	loc_724AE_2
000A710C 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7110 6600                       	bne.s	loc_724AE
000A7112                            
000A7112                            	loc_724AE_2:
000A7112 4EBA 0000                  		jsr	loc_7270A(pc)
000A7116 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
000A711A 0895 0002                  		bclr	#2,(a5)
000A711E 08D5 0001                  		bset	#1,(a5)
000A7122 4A15                       		tst.b	(a5)
000A7124 6A00                       		bpl.s	loc_724AE
000A7126 226E 0018                  		movea.l	$18(a6),a1
000A712A 102D 000B                  		move.b	$B(a5),d0
000A712E 4EBA 0000                  		jsr	sub_72C4E(pc)
000A7132                            
000A7132                            loc_724AE:
000A7132 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
000A7136 4A15                       		tst.b	(a5)
000A7138 6A00                       		bpl.s	locret_724E4
000A713A 0895 0007                  		bclr	#7,(a5)
000A713E 0815 0002                  		btst	#2,(a5)
000A7142 6600                       		bne.s	locret_724E4
000A7144 4A2E 000E                  	tst.b	$0E(a6)
000A7148 6600                       	bne.s	locret_724E4_2
000A714A 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A714E 6600                       	bne.s	locret_724E4
000A7150                            
000A7150                            	locret_724E4_2:
000A7150 4EBA 0000                  		jsr	loc_729A6(pc)
000A7154 4BEE 0220                  		lea	$220(a6),a5				; MJ: new BGM location
000A7158 0895 0002                  		bclr	#2,(a5)
000A715C 08D5 0001                  		bset	#1,(a5)
000A7160 4A15                       		tst.b	(a5)
000A7162 6A00                       		bpl.s	locret_724E4
000A7164 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000A716A 6600                       		bne.s	locret_724E4
000A716C 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000A7174                            
000A7174                            locret_724E4:
000A7174 4E75                       		rts	
000A7176                            ; End of function Snd_FadeOut2
000A7176                            
000A7176                            ; ===========================================================================
000A7176                            ; ---------------------------------------------------------------------------
000A7176                            ; Fade out music
000A7176                            ; ---------------------------------------------------------------------------
000A7176                            
000A7176                            Sound_E0:				; XREF: Sound_ExIndex
000A7176 4EBA FEE2                  		jsr	Snd_FadeOut1(pc)
000A717A 4EBA FF78                  		jsr	Snd_FadeOut2(pc)
000A717E 1D7C 0003 0006             		move.b	#3,6(a6)
000A7184 1D7C 0028 0004             		move.b	#$28,4(a6)
000A718A                            	;	clr.b	$40(a6)
000A718A                            	;	clr.b	$70(a6)					; MJ: stop PCM 2 as well
000A718A 422E 002A                  		clr.b	$2A(a6)
000A718E 4E75                       		rts	
000A7190                            
000A7190                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7190                            
000A7190                            
000A7190                            sub_72504:				; XREF: sub_71B4C
000A7190 102E 0006                  		move.b	6(a6),d0
000A7194 6700                       		beq.s	loc_72510
000A7196 532E 0006                  		subq.b	#1,6(a6)
000A719A 4E75                       		rts	
000A719C                            ; ===========================================================================
000A719C                            
000A719C                            loc_72510:
000A719C 532E 0004                  		subq.b	#1,4(a6)
000A71A0 6700 0000                  		beq.w	Sound_E4
000A71A4 1D7C 0003 0006             		move.b	#3,6(a6)
000A71AA                            
000A71AA                            
000A71AA 43F9 00A0 0634             		lea	($A00000+PCM_ChangeVolume).l,a1		; CHG: load volume change instruction address
000A71B0 7C00                       		moveq	#$00,d6					; CHG: clear d6
000A71B2 1C2E 0004                  		move.b	$04(a6),d6				; CHG: load fade counter
000A71B6 72D2                       		moveq	#($FFFFFF00|%11010010),d1		; prepare Z80 "JP NC" instruction
000A71B8 4BEE 0040                  		lea	$40(a6),a5				; CHG: load PCM 1 address
000A71BC 41F9 00A0 0642             		lea	($A00000+PCM1_Volume+1).l,a0		; CHG: load PCM 1 volume address
000A71C2 6100                       		bsr.s	FadeOut_PCM				; CHG: do PCM 1
000A71C4 41F9 00A0 0647             		lea	($A00000+PCM2_Volume+1).l,a0		; CHG: load PCM 2 volume address
000A71CA 6100                       		bsr.s	FadeOut_PCM				; CHG: do PCM 2
000A71CC 6000 0000                  		bra.w	FadeOut_FM				; CHG: continue to FM fade out
000A71D0                            
000A71D0                            FadeOut_PCM:
000A71D0 4A15                       		tst.b	(a5)					; CHG: is the channel running?
000A71D2 6A00                       		bpl.s	FOP_NotRunning				; CHG: if not, branch
000A71D4 7000                       		moveq	#$00,d0					; CHG: clear d0
000A71D6 102D 0009                  		move.b	$09(a5),d0				; CHG: load volume
000A71DA 6A00                       		bpl.s	FOP_NoMute				; CHG: if the channel is not mute (not from 80 - FF), branch
000A71DC 7080                       		moveq	#$FFFFFF80,d0				; CHG: force volume 80 (mute)
000A71DE 0895 0007                  		bclr	#$07,(a5)				; CHG: stop PCM channel
000A71E2 6000                       		bra.s	FOP_Mute				; CHG: continue to mute the channel
000A71E4                            
000A71E4                            FOP_NoMute:
000A71E4                            	;	add.b	FOP_FadeList(pc,d0.w),d0		; CHG: reduce the volume
000A71E4 5400                       	addq.b	#$02,d0					; reduce the volume
000A71E6                            
000A71E6                            FOP_Mute:
000A71E6 1B40 0009                  		move.b	d0,$09(a5)				; CHG: update
000A71EA B02D 000C                  		cmp.b	$0C(a5),d0				; CHG: has the volume changed?
000A71EE 6700                       		beq.s	FOP_NotRunning				; CHG: if not, branch
000A71F0 1B40 000C                  		move.b	d0,$0C(a5)				; CHG: update volume
000A71F4 142E 0004                  	move.b	$04(a6),d2				; CHG: load fade timer
000A71F8 0202 0003                  	andi.b	#$03,d2					; CHG: has it been four frames?
000A71FC 6600                       	bne.s	FOP_NotRunning				; CHG: if not, branch (temp until Z80 volume struggling is fixed)
000A71FE 33FC 0100 00A1 1100 0839+  		StopZ80
000A7210 1080                       		move.b	d0,(a0)					; change PCM volume
000A7212 1281                       		move.b	d1,(a1)					; change "JP C" to "JP NC"
000A7214 33FC 0000 00A1 1100        		StartZ80
000A721C                            
000A721C                            FOP_NotRunning:
000A721C 4BED 0030                  		lea	$30(a5),a5				; CHG: advance to next channel
000A7220 4E75                       		rts						; CHG: return
000A7222                            
000A7222                            ;FOP_FadeList:	dc.b	$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
000A7222                            ;		dc.b	$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
000A7222                            ;		dc.b	$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08
000A7222                            ;		dc.b	$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08
000A7222                            ;		dc.b	$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
000A7222                            ;		dc.b	$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
000A7222                            ;		dc.b	$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000A7222                            ;		dc.b	$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
000A7222                            
000A7222                            ;FOP_VolumeList:	dc.b	$00,$0C,$18,$20,$28,$30,$34,$38,$3C,$40,$44,$48,$4C,$50,$56,$5A
000A7222                            ;		dc.b	$60,$63,$66,$69,$6B,$6D,$6F,$70,$71,$72,$73,$74,$75,$76,$76,$77
000A7222                            ;		dc.b	$77,$78,$78,$79,$79,$79,$7A,$7A,$7A,$7B,$7B,$7B,$7C,$7C,$7C,$7C
000A7222                            ;		dc.b	$7D,$7D,$7D,$7D,$7D,$7D,$7D,$7D,$7E,$7E,$7E,$7E,$7E,$7E,$7E,$7E
000A7222                            ;		dc.b	$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
000A7222                            ;		dc.b	$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
000A7222                            ;		dc.b	$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000A7222                            ;		dc.b	$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000A7222                            
000A7222                            ; ===========================================================================
000A7222                            
000A7222                            FadeOut_FM:
000A7222 7E05                       		moveq	#5,d7
000A7224                            
000A7224                            loc_72524:
000A7224 4A15                       		tst.b	(a5)
000A7226 6A00                       		bpl.s	loc_72538
000A7228 522D 0009                  		addq.b	#1,9(a5)
000A722C 6A00                       		bpl.s	loc_72534
000A722E 0895 0007                  		bclr	#7,(a5)
000A7232 6000                       		bra.s	loc_72538
000A7234                            ; ===========================================================================
000A7234                            
000A7234                            loc_72534:
000A7234 4EBA 0000                  		jsr	sub_72CB4(pc)
000A7238                            
000A7238                            loc_72538:
000A7238 DAFC 0030                  		adda.w	#$30,a5
000A723C 51CF FFE6                  		dbf	d7,loc_72524
000A7240                            
000A7240 7E02                       		moveq	#2,d7
000A7242                            
000A7242                            loc_72542:
000A7242 4A15                       		tst.b	(a5)
000A7244 6A00                       		bpl.s	loc_72560
000A7246 522D 0009                  		addq.b	#1,9(a5)
000A724A 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
000A7250 6500                       		bcs.s	loc_72558
000A7252 0895 0007                  		bclr	#7,(a5)
000A7256 6000                       		bra.s	loc_72560
000A7258                            ; ===========================================================================
000A7258                            
000A7258                            loc_72558:
000A7258 1C2D 0009                  		move.b	9(a5),d6
000A725C DC2E 0016                  	add.b	$16(a6),d6			; EXTRA
000A7260 4EBA 0000                  		jsr	sub_7296A(pc)
000A7264                            
000A7264                            loc_72560:
000A7264 DAFC 0030                  		adda.w	#$30,a5
000A7268 51CF FFD8                  		dbf	d7,loc_72542
000A726C                            
000A726C 4E75                       		rts	
000A726E                            ; End of function sub_72504
000A726E                            
000A726E                            
000A726E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A726E                            
000A726E                            
000A726E                            sub_7256A:				; XREF: Sound_E4; sub_725CA
000A726E 7602                       		moveq	#2,d3
000A7270 7028                       		moveq	#$28,d0
000A7272                            
000A7272                            loc_7256E:
000A7272 1203                       		move.b	d3,d1
000A7274 4EBA 0000                  		jsr	sub_7272E(pc)
000A7278 5801                       		addq.b	#4,d1
000A727A 4EBA 0000                  		jsr	sub_7272E(pc)
000A727E 51CB FFF2                  		dbf	d3,loc_7256E
000A7282                            
000A7282 7040                       		moveq	#$40,d0
000A7284 727F                       		moveq	#$7F,d1
000A7286 7802                       		moveq	#2,d4
000A7288                            
000A7288                            loc_72584:
000A7288 7603                       		moveq	#3,d3
000A728A                            
000A728A                            loc_72586:
000A728A 4EBA 0000                  		jsr	sub_7272E(pc)
000A728E 4EBA 0000                  		jsr	sub_72764(pc)
000A7292 5840                       		addq.w	#4,d0
000A7294 51CB FFF4                  		dbf	d3,loc_72586
000A7298                            
000A7298 0400 000F                  		subi.b	#$F,d0
000A729C 51CC FFEA                  		dbf	d4,loc_72584
000A72A0                            
000A72A0 4E75                       		rts	
000A72A2                            ; End of function sub_7256A
000A72A2                            
000A72A2                            ; ===========================================================================
000A72A2                            ; ---------------------------------------------------------------------------
000A72A2                            ; Stop music
000A72A2                            ; ---------------------------------------------------------------------------
000A72A2                            
000A72A2                            Sound_E4:
000A72A2 33FC 0100 00A1 1100 0839+  		StopZ80
000A72B4 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A72BA 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A72C0 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A72C2 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A72C4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A72C6 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A72C8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A72CA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A72CC 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A72CE 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A72D0 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A72D2 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A72D4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A72D6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A72D8 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A72E0 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A72E6 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 2 slot address
000A72EC 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A72EE 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A72F0 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A72F2 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A72F4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A72F6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A72F8 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A72FA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A72FC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A72FE 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7300 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7302 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7304 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A730C 33FC 0000 00A1 1100        		StartZ80
000A7314                            
000A7314 702B                       		moveq	#$2B,d0
000A7316 123C 0080                  		move.b	#$80,d1
000A731A 4EBA 0000                  		jsr	sub_7272E(pc)
000A731E 7027                       		moveq	#$27,d0
000A7320 7200                       		moveq	#0,d1
000A7322 4EBA 0000                  		jsr	sub_7272E(pc)
000A7326 204E                       		movea.l	a6,a0
000A7328 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
000A732C 2F2E 0014                  	move.l	$14(a6),-(sp)			; EXTRA
000A7330 303C 00EF                  		move.w	#$EF,d0						; MJ: new size of data to clear
000A7334                            
000A7334                            loc_725B6:
000A7334 4298                       		clr.l	(a0)+
000A7336 51C8 FFFC                  		dbf	d0,loc_725B6
000A733A                            
000A733A 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
000A733E 2D5F 0014                  	move.l	(sp)+,$14(a6)			; EXTRA
000A7342 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
000A7348 4EBA FF24                  		jsr	sub_7256A(pc)
000A734C 6000 0000                  		bra.w	sub_729B6
000A7350                            
000A7350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7350                            
000A7350                            
000A7350                            sub_725CA:				; XREF: Sound_ChkValue
000A7350 204E                       		movea.l	a6,a0
000A7352 1216                       		move.b	0(a6),d1
000A7354 142E 0027                  		move.b	$27(a6),d2
000A7358 162E 002A                  		move.b	$2A(a6),d3
000A735C 182E 0026                  		move.b	$26(a6),d4
000A7360 3A2E 000A                  		move.w	$A(a6),d5
000A7364 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
000A7368 2F2E 0014                  	move.l	$14(a6),-(sp)			; EXTRA
000A736C 303C 0093                  		move.w	#$93,d0						; MJ: new size
000A7370                            
000A7370                            loc_725E4:
000A7370 4298                       		clr.l	(a0)+
000A7372 51C8 FFFC                  		dbf	d0,loc_725E4
000A7376                            
000A7376 1C81                       		move.b	d1,0(a6)
000A7378 1D42 0027                  		move.b	d2,$27(a6)
000A737C 1D43 002A                  		move.b	d3,$2A(a6)
000A7380 1D44 0026                  		move.b	d4,$26(a6)
000A7384 3D45 000A                  		move.w	d5,$A(a6)
000A7388 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
000A738C 2D5F 0014                  	move.l	(sp)+,$14(a6)			; EXTRA
000A7390 1D7C 0080 0009             		move.b	#$80,9(a6)
000A7396 4EBA FED6                  		jsr	sub_7256A(pc)
000A739A 6000 0000                  		bra.w	sub_729B6
000A739E                            ; End of function sub_725CA
000A739E                            
000A739E                            
000A739E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A739E                            
000A739E                            
000A739E                            sub_7260C:				; XREF: sub_71B4C
000A739E                            	;	move.b	2(a6),1(a6)
000A739E 102E 0015                  	move.b	$15(a6),d0			; EXTRA
000A73A2 6A00                       	bpl.s	STempo_CheckMax			; EXTRA
000A73A4 D02E 0002                  	add.b	$02(a6),d0			; EXTRA
000A73A8 0C00 0002                  	cmpi.b	#$02,d0				; EXTRA
000A73AC 6A00                       	bpl.s	STempo_Valid			; EXTRA
000A73AE 7002                       	moveq	#$02,d0				; EXTRA
000A73B0 6000                       	bra.s	STempo_Valid			; EXTRA
000A73B2                            
000A73B2                            STempo_CheckMax:
000A73B2 D02E 0002                  	add.b	$02(a6),d0			; EXTRA
000A73B6                            
000A73B6                            STempo_Valid:
000A73B6 1D40 0001                  	move.b	d0,$01(a6)			; EXTRA
000A73BA                            
000A73BA 41EE 004E                  		lea	$4E(a6),a0
000A73BE 7030                       		moveq	#$30,d0
000A73C0 720A                       		moveq	#10,d1						; MJ: new number of channels
000A73C2                            
000A73C2                            loc_7261A:
000A73C2 5210                       		addq.b	#1,(a0)
000A73C4 D0C0                       		adda.w	d0,a0
000A73C6 51C9 FFFA                  		dbf	d1,loc_7261A
000A73CA                            
000A73CA 4E75                       		rts	
000A73CC                            ; End of function sub_7260C
000A73CC                            
000A73CC                            ; ===========================================================================
000A73CC                            ; ---------------------------------------------------------------------------
000A73CC                            ; Speed	up music
000A73CC                            ; ---------------------------------------------------------------------------
000A73CC                            
000A73CC                            Sound_E2:				; XREF: Sound_ExIndex
000A73CC 4A2E 0027                  		tst.b	$27(a6)
000A73D0 6600                       		bne.s	loc_7263E
000A73D2 1D6E 0029 0002             		move.b	$29(a6),2(a6)
000A73D8 1D6E 0029 0001             		move.b	$29(a6),1(a6)
000A73DE 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000A73E4 4E75                       		rts	
000A73E6                            ; ===========================================================================
000A73E6                            
000A73E6                            loc_7263E:
000A73E6 1D6E 03F9 03D2             		move.b	$3F9(a6),$3D2(a6)			; MJ: new location
000A73EC 1D6E 03F9 03D1             		move.b	$3F9(a6),$3D1(a6)			; MJ: new location
000A73F2 1D7C 0080 03FA             		move.b	#$80,$3FA(a6)
000A73F8 4E75                       		rts	
000A73FA                            ; ===========================================================================
000A73FA                            ; ---------------------------------------------------------------------------
000A73FA                            ; Change music back to normal speed
000A73FA                            ; ---------------------------------------------------------------------------
000A73FA                            
000A73FA                            Sound_E3:				; XREF: Sound_ExIndex
000A73FA 4A2E 0027                  		tst.b	$27(a6)
000A73FE 6600                       		bne.s	loc_7266A
000A7400 1D6E 0028 0002             		move.b	$28(a6),2(a6)
000A7406 1D6E 0028 0001             		move.b	$28(a6),1(a6)
000A740C 422E 002A                  		clr.b	$2A(a6)
000A7410 4E75                       		rts	
000A7412                            ; ===========================================================================
000A7412                            
000A7412                            loc_7266A:
000A7412 1D6E 03F8 03D2             		move.b	$3F8(a6),$3D2(a6)
000A7418 1D6E 03F8 03D1             		move.b	$3F8(a6),$3D1(a6)
000A741E 422E 03FA                  		clr.b	$3FA(a6)
000A7422 4E75                       		rts	
000A7424                            
000A7424                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7424                            
000A7424                            
000A7424                            sub_7267C:				; XREF: sub_71B4C
000A7424 4A2E 0025                  		tst.b	$25(a6)
000A7428 6700                       		beq.s	loc_72688
000A742A 532E 0025                  		subq.b	#1,$25(a6)
000A742E 4E75                       		rts	
000A7430                            ; ===========================================================================
000A7430                            
000A7430                            loc_72688:
000A7430 4A2E 0026                  		tst.b	$26(a6)
000A7434 6700                       		beq.s	loc_726D6
000A7436 532E 0026                  		subq.b	#1,$26(a6)
000A743A 1D7C 0002 0025             		move.b	#2,$25(a6)
000A7440                            
000A7440 4BEE 0040                  		lea	$40(a6),a5				; CHG: load starting from PCM channels
000A7444 7E01                       		moveq	#$02-1,d7				; CHG: set number of PCM channels to alter
000A7446                            
000A7446                            FadeIn_NextPCM:
000A7446 4A15                       		tst.b	(a5)					; CHG: is this channel running?
000A7448 6A00                       		bpl.s	FadeIn_NoPCM				; CHG: if not, branch
000A744A 572D 0009                  		subq.b	#$03,$09(a5)				; CHG: increase volume
000A744E                            
000A744E                            FadeIn_NoPCM:
000A744E 4BED 0030                  		lea	$30(a5),a5				; CHG: advance to next channel
000A7452 51CF FFF2                  		dbf	d7,FadeIn_NextPCM			; CHG: repeat for all channels
000A7456                            
000A7456                            	;	lea	$A0(a6),a5				; MJ: new SFX location
000A7456                            
000A7456 7E05                       		moveq	#5,d7
000A7458                            
000A7458                            loc_7269E:
000A7458 4A15                       		tst.b	(a5)
000A745A 6A00                       		bpl.s	loc_726AA
000A745C 532D 0009                  		subq.b	#1,9(a5)
000A7460 4EBA 0000                  		jsr	sub_72CB4(pc)
000A7464                            
000A7464                            loc_726AA:
000A7464 DAFC 0030                  		adda.w	#$30,a5
000A7468 51CF FFEE                  		dbf	d7,loc_7269E
000A746C 7E02                       		moveq	#2,d7
000A746E                            
000A746E                            loc_726B4:
000A746E 4A15                       		tst.b	(a5)
000A7470 6A00                       		bpl.s	loc_726CC
000A7472 532D 0009                  		subq.b	#1,9(a5)
000A7476 1C2D 0009                  		move.b	9(a5),d6
000A747A 0C06 0010                  		cmpi.b	#$10,d6
000A747E 6500                       		bcs.s	loc_726C8
000A7480 7C0F                       		moveq	#$F,d6
000A7482                            
000A7482                            loc_726C8:
000A7482 4EBA 0000                  		jsr	sub_7296A(pc)
000A7486                            
000A7486                            loc_726CC:
000A7486 DAFC 0030                  		adda.w	#$30,a5
000A748A 51CF FFE2                  		dbf	d7,loc_726B4
000A748E 4E75                       		rts	
000A7490                            ; ===========================================================================
000A7490                            
000A7490                            loc_726D6:
000A7490                            	;	bclr	#2,$40(a6)
000A7490                            	;	bclr	#2,$70(a6)				; MJ: do PCM 2 as well...
000A7490 422E 0024                  		clr.b	$24(a6)
000A7494 4E75                       		rts	
000A7496                            ; End of function sub_7267C
000A7496                            
000A7496                            ; ===========================================================================
000A7496                            
000A7496                            loc_726E2:				; XREF: sub_71CCA
000A7496 0815 0001                  		btst	#1,(a5)
000A749A 6600                       		bne.s	locret_726FC
000A749C 0815 0002                  		btst	#2,(a5)
000A74A0 6600                       		bne.s	locret_726FC
000A74A2 4A2E 000E                  	tst.b	$0E(a6)
000A74A6 6600                       	bne.s	locret_726FC_2
000A74A8 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A74AC 6600                       	bne.s	locret_726FC
000A74AE                            
000A74AE                            	locret_726FC_2:
000A74AE 7028                       		moveq	#$28,d0
000A74B0 122D 0001                  		move.b	1(a5),d1
000A74B4 0001 00F0                  		ori.b	#-$10,d1
000A74B8 6000 0000                  		bra.w	sub_7272E
000A74BC                            ; ===========================================================================
000A74BC                            
000A74BC                            locret_726FC:
000A74BC 4E75                       		rts	
000A74BE                            
000A74BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A74BE                            
000A74BE                            
000A74BE                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000A74BE 0815 0004                  		btst	#4,(a5)
000A74C2 6600                       		bne.s	locret_72714
000A74C4 0815 0002                  		btst	#2,(a5)
000A74C8 6600                       		bne.s	locret_72714
000A74CA 4A2E 000E                  	tst.b	$0E(a6)
000A74CE 6600                       	bne.s	loc_7270A
000A74D0 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A74D4 6600                       	bne.s	locret_72714
000A74D6                            
000A74D6                            loc_7270A:				; XREF: Snd_FadeOut2
000A74D6 7028                       		moveq	#$28,d0
000A74D8 122D 0001                  		move.b	1(a5),d1
000A74DC 6000 0000                  		bra.w	sub_7272E
000A74E0                            ; ===========================================================================
000A74E0                            
000A74E0                            locret_72714:
000A74E0 4E75                       		rts	
000A74E2                            ; End of function sub_726FE
000A74E2                            
000A74E2                            ; ===========================================================================
000A74E2                            
000A74E2                            loc_72716:				; XREF: sub_72A5A
000A74E2 0815 0002                  		btst	#2,(a5)
000A74E6 6600                       		bne.s	locret_72720
000A74E8 4A2E 000E                  	tst.b	$0E(a6)
000A74EC 6600                       	bne.s	sub_72722
000A74EE 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A74F2 6600                       	bne.s	locret_72720
000A74F4 6000 0000                  		bra.w	sub_72722
000A74F8                            ; ===========================================================================
000A74F8                            
000A74F8                            locret_72720:
000A74F8 4E75                       		rts	
000A74FA                            
000A74FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A74FA                            
000A74FA                            
000A74FA                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000A74FA 082D 0002 0001             		btst	#2,1(a5)
000A7500 6600                       		bne.s	loc_7275A
000A7502 D02D 0001                  		add.b	1(a5),d0
000A7506                            ; End of function sub_72722
000A7506                            
000A7506                            
000A7506                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7506                            
000A7506                            sub_7272E:
000A7506 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
000A750A 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
000A750E 143C 0000                  		move.b	#$00,d2					; EXT: prepare d2 for YM2612 port address ($4000 - $4001)
000A7512 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
000A7524 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
000A7526 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
000A7528 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
000A752A 50D0                       		st.b	(a0)					; EXT: set end of list marker
000A752C 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
000A7534 2D48 0010                  		move.l	a0,$10(a6)				; EXT: store cue address
000A7538 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
000A753C 4E75                       		rts						; EXT: return
000A753E                            
000A753E                            ; ===========================================================================
000A753E                            
000A753E                            loc_7275A:				; XREF: sub_72722
000A753E 142D 0001                  		move.b	1(a5),d2
000A7542 0882 0002                  		bclr	#2,d2
000A7546 D002                       		add.b	d2,d0
000A7548                            
000A7548                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7548                            
000A7548                            
000A7548                            sub_72764:
000A7548 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
000A754C 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
000A7550 143C 0002                  		move.b	#$02,d2					; EXT: prepare d2 for YM2612 port address ($4002 - $4003)
000A7554 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
000A7566 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
000A7568 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
000A756A 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
000A756C 50D0                       		st.b	(a0)					; EXT: set end of list marker
000A756E 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
000A7576 2D48 0010                  		move.l	a0,$10(a6)				; EXT: store cue address
000A757A 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
000A757E 4E75                       		rts						; EXT: return
000A7580                            
000A7580                            ; ===========================================================================
000A7580 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
000A7592 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
000A75A4 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
000A75B4 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
000A75C4 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000A75D4 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000A75E4 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000A75F4 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000A7604 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000A7614 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
000A7624 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
000A7634 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
000A7640                            
000A7640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7640                            
000A7640                            
000A7640                            ; ===========================================================================
000A7640                            ; ---------------------------------------------------------------------------
000A7640                            ; Subroutine to run an FM channel ; EXTRA - ON/OFF
000A7640                            ; ---------------------------------------------------------------------------
000A7640                            
000A7640                            SPSG_CheckMute:
000A7640 4A2E 000E                  	tst.b	$0E(a6)
000A7644 6600                       	bne.s	S72850_NoCHG
000A7646 102D 0021                  	move.b	$21(a5),d0
000A764A B02D 0022                  	cmp.b	$22(a5),d0
000A764E 6700                       	beq.s	S72850_NoCHG
000A7650 4A00                       	tst.b	d0
000A7652 6A00                       	bpl.s	S72850_NoMute
000A7654 08D5 0006                  	bset.b	#$06,(a5)
000A7658 1B6D 0021 0022             	move.b	$21(a5),$22(a5)
000A765E 4EB9 0000 0000             	jsr	SPSG_UpdateTone
000A7664                            
000A7664                            S72850_NoCHG:
000A7664 4E75                       	rts
000A7666                            
000A7666                            S72850_NoMute:
000A7666 1B40 0022                  	move.b	d0,$22(a5)
000A766A 08D5 0006                  	bset.b	#$06,(a5)
000A766E 4EB9 0000 0000             	jsr	loc_7292E
000A7674 4E75                       	rts
000A7676                            
000A7676                            ; ===========================================================================
000A7676                            ; ---------------------------------------------------------------------------
000A7676                            ; Subroutine to run a PSG channel
000A7676                            ; ---------------------------------------------------------------------------
000A7676                            
000A7676                            sub_72850:				; XREF: sub_71B4C
000A7676 61C8                       	bsr.s	SPSG_CheckMute			; EXTRA - ON/OFF
000A7678 532D 000E                  		subq.b	#1,$E(a5)
000A767C 6600                       		bne.s	loc_72866
000A767E 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A7682 0895 0004                  		bclr	#4,(a5)
000A7686 4EBA 0000                  		jsr	sub_72878(pc)
000A768A 4EBA 0000                  		jsr	sub_728DC(pc)
000A768E 6000 0000                  		bra.w	loc_7292E
000A7692                            ; ===========================================================================
000A7692                            
000A7692                            loc_72866:
000A7692 0815 0006                  	btst.b	#$06,(a5)			; EXTRA
000A7696 6700                       	beq.s	SPSG_NoUpdate			; EXTRA
000A7698 7A00                       	moveq	#$00,d5				; EXTRA
000A769A 1A2D 0020                  	move.b	$20(a5),d5			; EXTRA
000A769E 0405 0081                  	subi.b	#$81,d5				; EXTRA
000A76A2 6500                       	bcs.s	SPSG_NoUpdate			; EXTRA
000A76A4 4EB9 0000 0000             	jsr	SPSG_UpdateFreque		; EXTRA
000A76AA 3C2D 0010                  	move.w	$10(a5),d6			; EXTRA
000A76AE 6000 0000                  	bra.w	SPSG_Update			; EXTRA
000A76B2                            
000A76B2                            	SPSG_NoUpdate:				; EXTRA
000A76B2 4EBA F1EE                  		jsr	sub_71D9E(pc)
000A76B6 4EBA 0000                  		jsr	sub_72926(pc)
000A76BA 4EBA F28A                  		jsr	sub_71DC6(pc)
000A76BE                            
000A76BE                            	SPSG_Update:				; EXTRA
000A76BE 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A76C2 4EBA 0000                  		jsr	sub_728E2(pc)
000A76C6 4E75                       		rts	
000A76C8                            ; End of function sub_72850
000A76C8                            
000A76C8                            
000A76C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A76C8                            
000A76C8                            
000A76C8                            sub_72878:				; XREF: sub_72850
000A76C8 0895 0001                  		bclr	#1,(a5)
000A76CC 286D 0004                  		movea.l	4(a5),a4
000A76D0                            
000A76D0                            loc_72880:
000A76D0 7A00                       		moveq	#0,d5
000A76D2 1A1C                       		move.b	(a4)+,d5
000A76D4 0C05 00E0                  		cmpi.b	#$E0,d5
000A76D8 6500                       		bcs.s	loc_72890
000A76DA 4EBA 0000                  		jsr	sub_72A5A(pc)
000A76DE 60F0                       		bra.s	loc_72880
000A76E0                            ; ===========================================================================
000A76E0                            
000A76E0                            loc_72890:
000A76E0 4A05                       		tst.b	d5
000A76E2 6A00                       		bpl.s	loc_728A4
000A76E4 1B45 0020                  	move.b	d5,$20(a5)			; EXTRA
000A76E8 4EBA 0000                  		jsr	sub_728AC(pc)
000A76EC 1A1C                       		move.b	(a4)+,d5
000A76EE 4A05                       		tst.b	d5
000A76F0 6A00                       		bpl.s	loc_728A4
000A76F2 534C                       		subq.w	#1,a4
000A76F4 6000 F16E                  		bra.w	sub_71D60
000A76F8                            ; ===========================================================================
000A76F8                            
000A76F8                            loc_728A4:
000A76F8 4EBA F14A                  		jsr	sub_71D40(pc)
000A76FC 6000 F166                  		bra.w	sub_71D60
000A7700                            ; End of function sub_72878
000A7700                            
000A7700                            
000A7700                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7700                            
000A7700                            
000A7700                            sub_728AC:				; XREF: sub_72878
000A7700 0405 0081                  		subi.b	#$81,d5
000A7704 6500                       		bcs.s	loc_728CA
000A7706                            
000A7706                            	SPSG_UpdateFreque:			; EXTRA
000A7706 DA2D 0008                  		add.b	8(a5),d5
000A770A DA2E 0014                  	add.b	$14(a6),d5			; EXTRA
000A770E 0245 007F                  		andi.w	#$7F,d5
000A7712 E34D                       		lsl.w	#1,d5
000A7714 41FA 0000                  		lea	word_729CE(pc),a0
000A7718 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
000A771E 0815 0006                  	btst.b	#$06,(a5)			; EXTRA
000A7722 669A                       	bne.s	SPSG_Update			; EXTRA
000A7724 6000 F13E                  		bra.w	sub_71D60
000A7728                            ; ===========================================================================
000A7728                            
000A7728                            loc_728CA:
000A7728 08D5 0001                  		bset	#1,(a5)
000A772C 3B7C FFFF 0010             		move.w	#-1,$10(a5)
000A7732 4EBA F130                  		jsr	sub_71D60(pc)
000A7736 6000 0000                  		bra.w	sub_729A0
000A773A                            ; End of function sub_728AC
000A773A                            
000A773A                            
000A773A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A773A                            
000A773A                            
000A773A                            sub_728DC:				; XREF: sub_72850
000A773A 3C2D 0010                  		move.w	$10(a5),d6
000A773E 6B00                       		bmi.s	loc_72920
000A7740                            ; End of function sub_728DC
000A7740                            
000A7740                            
000A7740                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7740                            
000A7740                            
000A7740                            sub_728E2:				; XREF: sub_72850
000A7740 102D 001E                  		move.b	$1E(a5),d0
000A7744 4880                       		ext.w	d0
000A7746 DC40                       		add.w	d0,d6
000A7748 0815 0002                  		btst	#2,(a5)
000A774C 6600                       		bne.s	locret_7291E
000A774E 4A2E 000E                  	tst.b	$0E(a6)
000A7752 6600                       	bne.s	locret_7291E_2
000A7754 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7758 6600                       	bne.s	locret_7291E
000A775A                            
000A775A                            	locret_7291E_2:
000A775A 0815 0001                  		btst	#1,(a5)
000A775E 6600                       		bne.s	locret_7291E
000A7760 102D 0001                  		move.b	1(a5),d0
000A7764 0C00 00E0                  		cmpi.b	#$E0,d0
000A7768 6600                       		bne.s	loc_72904
000A776A 103C 00C0                  		move.b	#$C0,d0
000A776E                            
000A776E                            loc_72904:
000A776E 3206                       		move.w	d6,d1
000A7770 0201 000F                  		andi.b	#$F,d1
000A7774 8001                       		or.b	d1,d0
000A7776 E84E                       		lsr.w	#4,d6
000A7778 0206 003F                  		andi.b	#$3F,d6
000A777C 13C0 00C0 0011             		move.b	d0,($C00011).l
000A7782 13C6 00C0 0011             		move.b	d6,($C00011).l
000A7788                            
000A7788                            locret_7291E:
000A7788 4E75                       		rts	
000A778A                            ; End of function sub_728E2
000A778A                            
000A778A                            ; ===========================================================================
000A778A                            
000A778A                            loc_72920:				; XREF: sub_728DC
000A778A 08D5 0001                  		bset	#1,(a5)
000A778E 4E75                       		rts	
000A7790                            
000A7790                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7790                            
000A7790                            
000A7790                            sub_72926:				; XREF: sub_72850
000A7790 4A2D 000B                  		tst.b	$B(a5)
000A7794 6700 0000                  		beq.w	locret_7298A
000A7798                            
000A7798                            loc_7292E:				; XREF: sub_72850
000A7798                            	;	move.b	9(a5),d6
000A7798 1C2E 0016                  	move.b	$16(a6),d6			; EXTRA
000A779C E406                       	asr.b	#$02,d6				; EXTRA
000A779E DC2D 0009                  	add.b	$09(a5),d6			; EXTRA
000A77A2 7000                       		moveq	#0,d0
000A77A4 102D 000B                  		move.b	$B(a5),d0
000A77A8 6700                       		beq.s	sub_7296A
000A77AA 2079 000A 6132             		movea.l	(Go_PSGIndex).l,a0
000A77B0 5340                       		subq.w	#1,d0
000A77B2 E548                       		lsl.w	#2,d0
000A77B4 2070 0000                  		movea.l	(a0,d0.w),a0
000A77B8 102D 000C                  		move.b	$C(a5),d0
000A77BC 1030 0000                  		move.b	(a0,d0.w),d0
000A77C0 522D 000C                  		addq.b	#1,$C(a5)
000A77C4 0800 0007                  		btst	#7,d0
000A77C8 6700                       		beq.s	loc_72960
000A77CA 0C00 0080                  		cmpi.b	#$80,d0
000A77CE 6700                       		beq.s	loc_7299A
000A77D0                            
000A77D0                            loc_72960:
000A77D0 DC40                       		add.w	d0,d6
000A77D2 0C06 0010                  		cmpi.b	#$10,d6
000A77D6 6500                       		bcs.s	sub_7296A
000A77D8 7C0F                       		moveq	#$F,d6
000A77DA                            ; End of function sub_72926
000A77DA                            
000A77DA                            
000A77DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A77DA                            
000A77DA                            
000A77DA                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
000A77DA 0815 0001                  		btst	#1,(a5)
000A77DE 6600                       		bne.s	locret_7298A
000A77E0                            
000A77E0                            	SPSG_UpdateTone:
000A77E0 0815 0002                  		btst	#2,(a5)
000A77E4 6600                       		bne.s	locret_7298A
000A77E6 4A2E 000E                  	tst.b	$0E(a6)
000A77EA 6600                       	bne.s	locret_7298A_2
000A77EC 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A77F0 6700                       	beq.s	locret_7298A_2
000A77F2 1C2D 0001                  	move.b	$01(a5),d6
000A77F6 0606 0010                  	addi.b	#$10,d6
000A77FA 0006 000F                  	ori.b	#$0F,d6
000A77FE 13C6 00C0 0011             	move.b	d6,($C00011).l
000A7804 4E75                       	rts
000A7806                            
000A7806                            	locret_7298A_2:
000A7806 0815 0004                  		btst	#4,(a5)
000A780A 6600                       		bne.s	loc_7298C
000A780C                            
000A780C                            loc_7297C:
000A780C 8C2D 0001                  		or.b	1(a5),d6
000A7810 0606 0010                  		addi.b	#$10,d6
000A7814 13C6 00C0 0011             		move.b	d6,($C00011).l
000A781A                            
000A781A                            locret_7298A:
000A781A 4E75                       		rts	
000A781C                            ; ===========================================================================
000A781C                            
000A781C                            loc_7298C:
000A781C 4A2D 0013                  		tst.b	$13(a5)
000A7820 67EA                       		beq.s	loc_7297C
000A7822 4A2D 0012                  		tst.b	$12(a5)
000A7826 66E4                       		bne.s	loc_7297C
000A7828 4E75                       		rts	
000A782A                            ; End of function sub_7296A
000A782A                            
000A782A                            ; ===========================================================================
000A782A                            
000A782A                            loc_7299A:				; XREF: sub_72926
000A782A 532D 000C                  		subq.b	#1,$C(a5)
000A782E 4E75                       		rts	
000A7830                            
000A7830                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7830                            
000A7830                            
000A7830                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
000A7830 0815 0002                  		btst	#2,(a5)
000A7834 6600                       		bne.s	locret_729B4
000A7836 4A2E 000E                  	tst.b	$0E(a6)
000A783A 6600                       	bne.s	loc_729A6
000A783C 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7840 6600                       	bne.s	locret_729B4
000A7842                            
000A7842                            loc_729A6:				; XREF: Snd_FadeOut2
000A7842 102D 0001                  		move.b	1(a5),d0
000A7846 0000 001F                  		ori.b	#$1F,d0
000A784A 13C0 00C0 0011             		move.b	d0,($C00011).l
000A7850                            
000A7850                            locret_729B4:
000A7850 4E75                       		rts	
000A7852                            ; End of function sub_729A0
000A7852                            
000A7852                            
000A7852                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7852                            
000A7852                            
000A7852                            sub_729B6:				; XREF: loc_71E7C
000A7852 41F9 00C0 0011             		lea	($C00011).l,a0
000A7858 10BC 009F                  		move.b	#$9F,(a0)
000A785C 10BC 00BF                  		move.b	#$BF,(a0)
000A7860 10BC 00DF                  		move.b	#$DF,(a0)
000A7864 10BC 00FF                  		move.b	#$FF,(a0)
000A7868 4E75                       		rts	
000A786A                            ; End of function sub_729B6
000A786A                            
000A786A                            ; ===========================================================================
000A786A 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
000A787C 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000A788E 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000A78A2 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000A78B6 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
000A78CA 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
000A78DE 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
000A78F2 0011 0000                  		dc.w $11, 0
000A78F6                            
000A78F6                            	; PSG can overflow here by accident (SYZ does when it plays low notes
000A78F6                            	; but the pitch of the channel is low, and wraps to high).
000A78F6                            
000A78F6                            	; The flag pointers have been altered slightly, causing the frequencies
000A78F6                            	; to be different, even though it's wrong in the first place, this
000A78F6                            	; table will ensure it's put back the original way (not correct, just
000A78F6                            	; original).
000A78F6                            
000A78F6 0445 00E0 E54D 4EFB 5002+  		dc.w	$0445,$00E0,$E54D,$4EFB,$5002,$6000,$0066,$6000	; CHG: end of table
000A7906 0082 6000 0084 6000 0086+  		dc.w	$0082,$6000,$0084,$6000,$0086,$6000,$009E,$6000
000A7916 0124 6000 0126 6000 012C+  		dc.w	$0124,$6000,$0126,$6000,$012C,$6000,$012E,$6000
000A7926 0134 6000 0138 6000 013E+  		dc.w	$0134,$6000,$0138,$6000,$013E,$6000,$0150,$6000
000A7936 0154 6000 0156 6000 0184+  		dc.w	$0154,$6000,$0156,$6000,$0184,$6000,$028A,$6000
000A7946 02A8 6000 02AA 6000 0354+  		dc.w	$02A8,$6000,$02AA,$6000,$0354,$6000,$036A,$6000
000A7956 036C 6000 036E 6000 0376+  		dc.w	$036C,$6000,$036E,$6000,$0376,$6000,$038C,$6000
000A7966 039A 121C                  		dc.w	$039A,$121C
000A796A                            
000A796A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A796A                            
000A796A                            
000A796A                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000A796A 0445 00E0                  		subi.w	#$E0,d5
000A796E E54D                       		lsl.w	#2,d5
000A7970 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
000A7974                            ; End of function sub_72A5A
000A7974                            
000A7974                            ; ===========================================================================
000A7974                            
000A7974                            loc_72A64:
000A7974 6000 0000                  		bra.w	loc_72ACC			; E0
000A7978                            ; ===========================================================================
000A7978 6000 0000                  		bra.w	loc_72AEC			; E1
000A797C                            ; ===========================================================================
000A797C 6000 0000                  		bra.w	loc_72AF2			; E2
000A7980                            ; ===========================================================================
000A7980 6000 0000                  		bra.w	loc_72AF8			; E3
000A7984                            ; ===========================================================================
000A7984 6000 0000                  		bra.w	loc_72B14			; E4
000A7988                            ; ===========================================================================
000A7988 6000 0000                  		bra.w	loc_72B9E			; E5
000A798C                            ; ===========================================================================
000A798C 6000 0000                  		bra.w	loc_72BA4			; E6
000A7990                            ; ===========================================================================
000A7990 6000 0000                  		bra.w	loc_72BAE			; E7
000A7994                            ; ===========================================================================
000A7994 6000 0000                  		bra.w	loc_72BB4			; E8
000A7998                            ; ===========================================================================
000A7998 6000 0000                  		bra.w	loc_72BBE			; E9
000A799C                            ; ===========================================================================
000A799C 6000 0000                  		bra.w	loc_72BC6			; EA
000A79A0                            ; ===========================================================================
000A79A0 6000 0000                  		bra.w	loc_72BD0			; EB
000A79A4                            ; ===========================================================================
000A79A4 6000 0000                  		bra.w	loc_72BE6			; EC
000A79A8                            ; ===========================================================================
000A79A8 6000 0000                  		bra.w	loc_72BEE			; ED
000A79AC                            ; ===========================================================================
000A79AC 6000 0000                  		bra.w	loc_72BF4			; EE
000A79B0                            ; ===========================================================================
000A79B0 6000 0000                  		bra.w	loc_72C26			; EF
000A79B4                            ; ===========================================================================
000A79B4 6000 0000                  		bra.w	loc_72D30			; F0
000A79B8                            ; ===========================================================================
000A79B8 6000 0000                  		bra.w	loc_72D52			; F1
000A79BC                            ; ===========================================================================
000A79BC 6000 0000                  		bra.w	loc_72D58			; F2
000A79C0                            ; ===========================================================================
000A79C0 6000 0000                  		bra.w	loc_72E06			; F3
000A79C4                            ; ===========================================================================
000A79C4 6000 0000                  		bra.w	loc_72E20			; F4
000A79C8                            ; ===========================================================================
000A79C8 6000 0000                  		bra.w	loc_72E26			; F5
000A79CC                            ; ===========================================================================
000A79CC 6000 0000                  		bra.w	loc_72E2C			; F6
000A79D0                            ; ===========================================================================
000A79D0 6000 0000                  		bra.w	loc_72E38			; F7
000A79D4                            ; ===========================================================================
000A79D4 6000 0000                  		bra.w	loc_72E52			; F8
000A79D8                            ; ===========================================================================
000A79D8 6000 0000                  		bra.w	loc_72E64			; F9
000A79DC                            ; ===========================================================================
000A79DC                            ; ---------------------------------------------------------------------------
000A79DC                            ; Flag FA - Reverse flag
000A79DC                            ; ---------------------------------------------------------------------------
000A79DC                            
000A79DC                            FlagFA:
000A79DC 0855 0005                  		bchg.b	#$05,(a5)			; CHG: change reverse flag
000A79E0 4E75                       		rts					; CHG: return
000A79E2                            
000A79E2                            ; ===========================================================================
000A79E2                            
000A79E2                            loc_72ACC:				; XREF: loc_72A64
000A79E2 121C                       		move.b	(a4)+,d1
000A79E4 4A2D 0001                  		tst.b	1(a5)
000A79E8 6B00                       		bmi.s	locret_72AEA
000A79EA 102D 000A                  		move.b	$A(a5),d0
000A79EE 0200 0037                  		andi.b	#$37,d0
000A79F2 8200                       		or.b	d0,d1
000A79F4 1B41 000A                  		move.b	d1,$A(a5)
000A79F8 103C 00B4                  		move.b	#$B4,d0
000A79FC 6000 FAE4                  		bra.w	loc_72716
000A7A00                            ; ===========================================================================
000A7A00                            
000A7A00                            locret_72AEA:
000A7A00 4E75                       		rts	
000A7A02                            ; ===========================================================================
000A7A02                            
000A7A02                            loc_72AEC:				; XREF: loc_72A64
000A7A02 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000A7A06 4E75                       		rts	
000A7A08                            ; ===========================================================================
000A7A08                            
000A7A08                            loc_72AF2:				; XREF: loc_72A64
000A7A08 1D5C 0007                  		move.b	(a4)+,7(a6)
000A7A0C 4E75                       		rts	
000A7A0E                            ; ===========================================================================
000A7A0E                            
000A7A0E                            loc_72AF8:				; XREF: loc_72A64
000A7A0E 7000                       		moveq	#0,d0
000A7A10 102D 000D                  		move.b	$D(a5),d0
000A7A14 2875 0000                  		movea.l	(a5,d0.w),a4
000A7A18 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000A7A20 544C                       		addq.w	#2,a4
000A7A22 5800                       		addq.b	#4,d0
000A7A24 1B40 000D                  		move.b	d0,$D(a5)
000A7A28 4E75                       		rts	
000A7A2A                            ; ===========================================================================
000A7A2A                            
000A7A2A                            loc_72B14:				; XREF: loc_72A64
000A7A2A 204E                       		movea.l	a6,a0
000A7A2C 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
000A7A30 236E 0010 0010             	move.l	$10(a6),$10(a1)				; CHG: copy buffer address across
000A7A36 303C 0093                  		move.w	#$93,d0					; MJ: new size to store
000A7A3A                            
000A7A3A                            loc_72B1E:
000A7A3A 20D9                       		move.l	(a1)+,(a0)+
000A7A3C 51C8 FFFC                  		dbf	d0,loc_72B1E
000A7A40                            
000A7A40                            	;	bset	#2,$40(a6)
000A7A40                            	;	bset	#2,$70(a6)				; MJ: enable PCM 2
000A7A40 264D                       		movea.l	a5,a3
000A7A42 1C3C 0028                  		move.b	#$28,d6
000A7A46 9C2E 0026                  		sub.b	$26(a6),d6
000A7A4A 1A06                       	move.b	d6,d5
000A7A4C DA05                       	add.b	d5,d5
000A7A4E DA06                       	add.b	d6,d5
000A7A50                            
000A7A50 7E01                       		moveq	#$02-1,d7				; CHG: set number of PCM channels to do
000A7A52 4BEE 0040                  		lea	$40(a6),a5				; CHG: start from PCM 1
000A7A56                            
000A7A56                            FE4_NextPCM:
000A7A56 0815 0007                  		btst	#$07,(a5)				; CHG: is the channel running?
000A7A5A 6700                       		beq.s	FE4_NoPCM				; CHG: if not, branch
000A7A5C                            	;	bset	#$01,(a5)				; CHG: set the channel as resting
000A7A5C DB2D 0009                  		add.b	d5,$09(a5)				; CHG: reduce its volume
000A7A60                            
000A7A60                            FE4_NoPCM:
000A7A60 4BED 0030                  		lea	$30(a5),a5				; CHG: advance to next channel
000A7A64 51CF FFF0                  		dbf	d7,FE4_NextPCM				; CHG: repeat for all channels
000A7A68                            
000A7A68 7E05                       		moveq	#5,d7
000A7A6A                            	;	lea	$A0(a6),a5				; MJ: new FM location
000A7A6A                            
000A7A6A                            loc_72B3A:
000A7A6A 0815 0007                  		btst	#7,(a5)
000A7A6E 6700                       		beq.s	loc_72B5C
000A7A70 08D5 0001                  		bset	#1,(a5)
000A7A74 DD2D 0009                  		add.b	d6,9(a5)
000A7A78 0815 0002                  		btst	#2,(a5)
000A7A7C 6600                       		bne.s	loc_72B5C
000A7A7E 4A2E 000E                  	tst.b	$0E(a6)
000A7A82 6600                       	bne.s	locret_72B5C_2
000A7A84 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7A88 6600                       	bne.s	loc_72B5C
000A7A8A                            
000A7A8A                            	locret_72B5C_2:
000A7A8A 7000                       		moveq	#0,d0
000A7A8C 102D 000B                  		move.b	$B(a5),d0
000A7A90 226E 0018                  		movea.l	$18(a6),a1
000A7A94 4EBA 0000                  		jsr	sub_72C4E(pc)
000A7A98                            
000A7A98                            loc_72B5C:
000A7A98 DAFC 0030                  		adda.w	#$30,a5
000A7A9C 51CF FFCC                  		dbf	d7,loc_72B3A
000A7AA0                            
000A7AA0 7E02                       		moveq	#2,d7
000A7AA2                            
000A7AA2                            loc_72B66:
000A7AA2 0815 0007                  		btst	#7,(a5)
000A7AA6 6700                       		beq.s	loc_72B78
000A7AA8 08D5 0001                  		bset	#1,(a5)
000A7AAC 4EBA FD82                  		jsr	sub_729A0(pc)
000A7AB0 DD2D 0009                  		add.b	d6,9(a5)
000A7AB4                            
000A7AB4                            loc_72B78:
000A7AB4 DAFC 0030                  		adda.w	#$30,a5
000A7AB8 51CF FFE8                  		dbf	d7,loc_72B66
000A7ABC 2A4B                       		movea.l	a3,a5
000A7ABE 1D7C 0080 0024             		move.b	#$80,$24(a6)
000A7AC4 1D7C 0028 0026             		move.b	#$28,$26(a6)
000A7ACA 422E 0027                  		clr.b	$27(a6)
000A7ACE 504F                       		addq.w	#8,sp
000A7AD0 4E75                       		rts	
000A7AD2                            ; ===========================================================================
000A7AD2                            
000A7AD2                            loc_72B9E:				; XREF: loc_72A64
000A7AD2 1B5C 0002                  		move.b	(a4)+,2(a5)
000A7AD6 4E75                       		rts	
000A7AD8                            ; ===========================================================================
000A7AD8                            
000A7AD8                            loc_72BA4:				; XREF: loc_72A64
000A7AD8 101C                       		move.b	(a4)+,d0
000A7ADA D12D 0009                  		add.b	d0,9(a5)
000A7ADE 6000 0000                  		bra.w	sub_72CB4
000A7AE2                            ; ===========================================================================
000A7AE2                            
000A7AE2                            loc_72BAE:				; XREF: loc_72A64
000A7AE2 08D5 0004                  		bset	#4,(a5)
000A7AE6 4E75                       		rts	
000A7AE8                            ; ===========================================================================
000A7AE8                            
000A7AE8                            loc_72BB4:				; XREF: loc_72A64
000A7AE8 1B54 0012                  		move.b	(a4),$12(a5)
000A7AEC 1B5C 0013                  		move.b	(a4)+,$13(a5)
000A7AF0 4E75                       		rts	
000A7AF2                            ; ===========================================================================
000A7AF2                            
000A7AF2                            loc_72BBE:				; XREF: loc_72A64
000A7AF2 101C                       		move.b	(a4)+,d0
000A7AF4 D12D 0008                  		add.b	d0,8(a5)
000A7AF8 4E75                       		rts	
000A7AFA                            ; ===========================================================================
000A7AFA                            
000A7AFA                            loc_72BC6:				; XREF: loc_72A64
000A7AFA 1D54 0002                  		move.b	(a4),2(a6)
000A7AFE 1D5C 0001                  		move.b	(a4)+,1(a6)
000A7B02 4E75                       		rts	
000A7B04                            ; ===========================================================================
000A7B04                            
000A7B04                            loc_72BD0:				; XREF: loc_72A64
000A7B04 41EE 0040                  		lea	$40(a6),a0
000A7B08 101C                       		move.b	(a4)+,d0
000A7B0A 7230                       		moveq	#$30,d1
000A7B0C 740A                       		moveq	#10,d2				; MJ: extra channel
000A7B0E                            
000A7B0E                            loc_72BDA:
000A7B0E 1140 0002                  		move.b	d0,2(a0)
000A7B12 D0C1                       		adda.w	d1,a0
000A7B14 51CA FFF8                  		dbf	d2,loc_72BDA
000A7B18                            
000A7B18 4E75                       		rts	
000A7B1A                            ; ===========================================================================
000A7B1A                            
000A7B1A                            loc_72BE6:				; XREF: loc_72A64
000A7B1A 101C                       		move.b	(a4)+,d0
000A7B1C D12D 0009                  		add.b	d0,9(a5)
000A7B20 4E75                       		rts	
000A7B22                            ; ===========================================================================
000A7B22                            
000A7B22                            loc_72BEE:				; XREF: loc_72A64
000A7B22 422E 002C                  		clr.b	$2C(a6)
000A7B26 4E75                       		rts	
000A7B28                            ; ===========================================================================
000A7B28                            
000A7B28                            loc_72BF4:				; XREF: loc_72A64
000A7B28 0895 0007                  		bclr	#7,(a5)
000A7B2C 0895 0004                  		bclr	#4,(a5)
000A7B30 4EBA F98C                  		jsr	sub_726FE(pc)
000A7B34 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000A7B38 6B00                       		bmi.s	loc_72C22
000A7B3A 264D                       		movea.l	a5,a3
000A7B3C 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
000A7B40 226E 0018                  		movea.l	$18(a6),a1
000A7B44 0895 0002                  		bclr	#2,(a5)
000A7B48 08D5 0001                  		bset	#1,(a5)
000A7B4C 102D 000B                  		move.b	$B(a5),d0
000A7B50 4EBA 0000                  		jsr	sub_72C4E(pc)
000A7B54 2A4B                       		movea.l	a3,a5
000A7B56                            
000A7B56                            loc_72C22:
000A7B56 504F                       		addq.w	#8,sp
000A7B58 4E75                       		rts	
000A7B5A                            ; ===========================================================================
000A7B5A                            
000A7B5A                            loc_72C26:				; XREF: loc_72A64
000A7B5A 7000                       		moveq	#0,d0
000A7B5C 101C                       		move.b	(a4)+,d0
000A7B5E 1B40 000B                  		move.b	d0,$B(a5)
000A7B62                            
000A7B62                            SFM_UpdateVoice:
000A7B62 0815 0002                  		btst	#2,(a5)
000A7B66 6600 0000                  		bne.w	locret_72CAA
000A7B6A 4A2E 000E                  	tst.b	$0E(a6)
000A7B6E 6600                       	bne.s	locret_72CAA_2
000A7B70 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7B74 6600                       	bne.s	locret_72CAA
000A7B76                            
000A7B76                            	locret_72CAA_2:
000A7B76                            
000A7B76 226E 0018                  		movea.l	$18(a6),a1
000A7B7A 4A2E 000E                  		tst.b	$E(a6)
000A7B7E 6700                       		beq.s	sub_72C4E
000A7B80 226D 0020                  		movea.l	$20(a5),a1	; ERROR HERE...
000A7B84 4A2E 000E                  		tst.b	$E(a6)
000A7B88 6B00                       		bmi.s	sub_72C4E
000A7B8A 226E 0020                  		movea.l	$20(a6),a1
000A7B8E                            
000A7B8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7B8E                            
000A7B8E                            
000A7B8E                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
000A7B8E 5340                       		subq.w	#1,d0
000A7B90 6B00                       		bmi.s	loc_72C5C
000A7B92 323C 0019                  		move.w	#$19,d1
000A7B96                            
000A7B96                            loc_72C56:
000A7B96 D2C1                       		adda.w	d1,a1
000A7B98 51C8 FFFC                  		dbf	d0,loc_72C56
000A7B9C                            
000A7B9C                            loc_72C5C:
000A7B9C 1219                       		move.b	(a1)+,d1
000A7B9E 1B41 001F                  		move.b	d1,$1F(a5)
000A7BA2 1801                       		move.b	d1,d4
000A7BA4 103C 00B0                  		move.b	#$B0,d0
000A7BA8 4EBA F950                  		jsr	sub_72722(pc)
000A7BAC 45FA 0000                  		lea	byte_72D18(pc),a2
000A7BB0 7613                       		moveq	#$13,d3
000A7BB2                            
000A7BB2                            loc_72C72:
000A7BB2 101A                       		move.b	(a2)+,d0
000A7BB4 1219                       		move.b	(a1)+,d1
000A7BB6 4EBA F942                  		jsr	sub_72722(pc)
000A7BBA 51CB FFF6                  		dbf	d3,loc_72C72
000A7BBE 7A03                       		moveq	#3,d5
000A7BC0 0244 0007                  		andi.w	#7,d4
000A7BC4 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
000A7BC8 162D 0009                  		move.b	9(a5),d3
000A7BCC D62E 0016                  	add.b	$16(a6),d3			; EXTRA
000A7BD0                            
000A7BD0                            loc_72C8C:
000A7BD0 101A                       		move.b	(a2)+,d0
000A7BD2 1219                       		move.b	(a1)+,d1
000A7BD4 E20C                       		lsr.b	#1,d4
000A7BD6 6400                       		bcc.s	loc_72C96
000A7BD8 D203                       		add.b	d3,d1
000A7BDA                            
000A7BDA                            loc_72C96:
000A7BDA 4EBA F91E                  		jsr	sub_72722(pc)
000A7BDE 51CD FFF0                  		dbf	d5,loc_72C8C
000A7BE2 103C 00B4                  		move.b	#$B4,d0
000A7BE6 122D 000A                  		move.b	$A(a5),d1
000A7BEA 4EBA F90E                  		jsr	sub_72722(pc)
000A7BEE                            
000A7BEE                            locret_72CAA:
000A7BEE 4E75                       		rts	
000A7BF0                            ; End of function sub_72C4E
000A7BF0                            
000A7BF0                            ; ===========================================================================
000A7BF0 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000A7BF8                            
000A7BF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7BF8                            
000A7BF8                            
000A7BF8                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
000A7BF8 0815 0002                  		btst	#2,(a5)
000A7BFC 6600                       		bne.s	locret_72D16
000A7BFE                            
000A7BFE 4A2E 000E                  	tst.b	$0E(a6)
000A7C02 6600                       	bne.s	locret_72D16_2
000A7C04 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7C08 6600                       	bne.s	locret_72D16
000A7C0A                            
000A7C0A                            	locret_72D16_2:
000A7C0A 7000                       		moveq	#0,d0
000A7C0C 102D 000B                  		move.b	$B(a5),d0
000A7C10 226E 0018                  		movea.l	$18(a6),a1
000A7C14 4A2E 000E                  		tst.b	$E(a6)
000A7C18 6700                       		beq.s	loc_72CD8
000A7C1A 226D 0020                  		movea.l	$20(a5),a1
000A7C1E 4A2E 000E                  		tst.b	$E(a6)
000A7C22 6B00                       		bmi.s	loc_72CD8
000A7C24 226E 0020                  		movea.l	$20(a6),a1
000A7C28                            
000A7C28                            loc_72CD8:
000A7C28 5340                       		subq.w	#1,d0
000A7C2A 6B00                       		bmi.s	loc_72CE6
000A7C2C 323C 0019                  		move.w	#$19,d1
000A7C30                            
000A7C30                            loc_72CE0:
000A7C30 D2C1                       		adda.w	d1,a1
000A7C32 51C8 FFFC                  		dbf	d0,loc_72CE0
000A7C36                            
000A7C36                            loc_72CE6:
000A7C36 D2FC 0015                  		adda.w	#$15,a1
000A7C3A 45FA 0000                  		lea	byte_72D2C(pc),a2
000A7C3E 102D 001F                  		move.b	$1F(a5),d0
000A7C42 0240 0007                  		andi.w	#7,d0
000A7C46 183B 00A8                  		move.b	byte_72CAC(pc,d0.w),d4
000A7C4A 162D 0009                  		move.b	9(a5),d3
000A7C4E D62E 0016                  	add.b	$16(a6),d3			; EXTRA
000A7C52 6B00                       		bmi.s	locret_72D16
000A7C54 7A03                       		moveq	#3,d5
000A7C56                            
000A7C56                            loc_72D02:
000A7C56 101A                       		move.b	(a2)+,d0
000A7C58 1219                       		move.b	(a1)+,d1
000A7C5A E20C                       		lsr.b	#1,d4
000A7C5C 6400                       		bcc.s	loc_72D12
000A7C5E D203                       		add.b	d3,d1
000A7C60 6500                       		bcs.s	loc_72D12
000A7C62 4EBA F896                  		jsr	sub_72722(pc)
000A7C66                            
000A7C66                            loc_72D12:
000A7C66 51CD FFEE                  		dbf	d5,loc_72D02
000A7C6A                            
000A7C6A                            locret_72D16:
000A7C6A 4E75                       		rts	
000A7C6C                            ; End of function sub_72CB4
000A7C6C                            
000A7C6C                            ; ===========================================================================
000A7C6C 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
000A7C76 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
000A7C80 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
000A7C84                            ; ===========================================================================
000A7C84                            
000A7C84                            loc_72D30:				; XREF: loc_72A64
000A7C84 08D5 0003                  		bset	#3,(a5)
000A7C88 2B4C 0014                  		move.l	a4,$14(a5)
000A7C8C 1B5C 0018                  		move.b	(a4)+,$18(a5)
000A7C90 1B5C 0019                  		move.b	(a4)+,$19(a5)
000A7C94 1B5C 001A                  		move.b	(a4)+,$1A(a5)
000A7C98 101C                       		move.b	(a4)+,d0
000A7C9A E208                       		lsr.b	#1,d0
000A7C9C 1B40 001B                  		move.b	d0,$1B(a5)
000A7CA0 426D 001C                  		clr.w	$1C(a5)
000A7CA4 4E75                       		rts	
000A7CA6                            ; ===========================================================================
000A7CA6                            
000A7CA6                            loc_72D52:				; XREF: loc_72A64
000A7CA6 08D5 0003                  		bset	#3,(a5)
000A7CAA 206D 0014                  		movea.l	$14(a5),a0				; CHG: load modulation address
000A7CAE 43ED 0018                  		lea	$18(a5),a1				; CHG: load modulation settings RAM
000A7CB2 12D8                       		move.b	(a0)+,(a1)+				; CHG: reset settings...
000A7CB4 12D8                       		move.b	(a0)+,(a1)+				; CHG: ''
000A7CB6 12D8                       		move.b	(a0)+,(a1)+				; CHG: ''
000A7CB8 1018                       		move.b	(a0)+,d0				; CHG: ''
000A7CBA E208                       		lsr.b	#$01,d0					; CHG: ''
000A7CBC 12C0                       		move.b	d0,(a1)+				; CHG: ''
000A7CBE 4259                       		clr.w	(a1)+					; CHG: clear modulation frequency
000A7CC0 4E75                       		rts	
000A7CC2                            ; ===========================================================================
000A7CC2                            
000A7CC2                            loc_72D58:				; XREF: loc_72A64
000A7CC2 0895 0007                  		bclr	#7,(a5)
000A7CC6 0895 0004                  		bclr	#4,(a5)
000A7CCA 4A2D 0001                  		tst.b	1(a5)
000A7CCE 6B00                       		bmi.s	loc_72D74
000A7CD0 4A2E 0008                  		tst.b	8(a6)
000A7CD4 6B00 0000                  		bmi.w	SF2_MutePCM				; CHG: for PCM, branch to a differen mute routine
000A7CD8 4EBA F7E4                  		jsr	sub_726FE(pc)
000A7CDC 6000                       		bra.s	loc_72D78
000A7CDE                            ; ===========================================================================
000A7CDE                            
000A7CDE                            loc_72D74:
000A7CDE 4EBA FB50                  		jsr	sub_729A0(pc)
000A7CE2                            
000A7CE2                            loc_72D78:
000A7CE2 4A2E 000E                  		tst.b	$E(a6)
000A7CE6 6A00 0000                  		bpl.w	loc_72E02
000A7CEA 4216                       		clr.b	0(a6)
000A7CEC 7000                       		moveq	#0,d0
000A7CEE 102D 0001                  		move.b	1(a5),d0
000A7CF2 6B00                       		bmi.s	loc_72DCC
000A7CF4 41FA F250                  		lea	dword_722CC(pc),a0
000A7CF8 264D                       		movea.l	a5,a3
000A7CFA 0C00 0004                  		cmpi.b	#4,d0
000A7CFE 6600                       		bne.s	loc_72DA8
000A7D00 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
000A7D04 6A00                       		bpl.s	loc_72DA8
000A7D06 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A7D0A 226E 0020                  		movea.l	$20(a6),a1
000A7D0E 6000                       		bra.s	loc_72DB8
000A7D10                            ; ===========================================================================
000A7D10                            
000A7D10                            loc_72DA8:
000A7D10 5500                       		subq.b	#2,d0
000A7D12 E508                       		lsl.b	#2,d0
000A7D14 2A70 0000                  		movea.l	(a0,d0.w),a5
000A7D18 4A15                       		tst.b	(a5)
000A7D1A 6A00                       		bpl.s	loc_72DC8
000A7D1C 226E 0018                  		movea.l	$18(a6),a1
000A7D20                            
000A7D20                            loc_72DB8:
000A7D20 0895 0002                  		bclr	#2,(a5)
000A7D24 08D5 0001                  		bset	#1,(a5)
000A7D28 102D 000B                  		move.b	$B(a5),d0
000A7D2C 4EBA FE60                  		jsr	sub_72C4E(pc)
000A7D30                            
000A7D30                            loc_72DC8:
000A7D30 2A4B                       		movea.l	a3,a5
000A7D32 6000                       		bra.s	loc_72E02
000A7D34                            ; ===========================================================================
000A7D34                            
000A7D34                            loc_72DCC:
000A7D34 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
000A7D38 4A10                       		tst.b	(a0)
000A7D3A 6A00                       		bpl.s	loc_72DE0
000A7D3C 0C00 00E0                  		cmpi.b	#$E0,d0
000A7D40 6700                       		beq.s	loc_72DEA
000A7D42 0C00 00C0                  		cmpi.b	#$C0,d0
000A7D46 6700                       		beq.s	loc_72DEA
000A7D48                            
000A7D48                            loc_72DE0:
000A7D48 41FA F1FC                  		lea	dword_722CC(pc),a0
000A7D4C E608                       		lsr.b	#3,d0
000A7D4E 2070 0000                  		movea.l	(a0,d0.w),a0
000A7D52                            
000A7D52                            loc_72DEA:
000A7D52 0890 0002                  		bclr	#2,(a0)
000A7D56 08D0 0001                  		bset	#1,(a0)
000A7D5A 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000A7D60 6600                       		bne.s	loc_72E02
000A7D62 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000A7D6A                            
000A7D6A                            loc_72E02:
000A7D6A 504F                       		addq.w	#$04*2,sp					; CHG: skip return addresses (returns back outside of the sound driver)
000A7D6C 4E75                       		rts	
000A7D6E                            
000A7D6E                            SF2_MutePCM:
000A7D6E 584F                       		addq.w	#4,sp						; CHG: go back, but not out of sound driver
000A7D70 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)					; CHG: is this PCM 1?
000A7D76 6600                       		bne.s	SF2_MutePCM2					; CHG: if not, branch to mute PCM 2
000A7D78 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A7D7E 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A7D84 33FC 0100 00A1 1100 0839+  		StopZ80
000A7D96 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7D98 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7D9A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7D9C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7D9E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7DA0 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7DA2 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7DA4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7DA6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7DA8 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7DAA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7DAC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7DAE 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A7DB6 33FC 0000 00A1 1100        		StartZ80
000A7DBE 4E75                       		rts							; CHG: return
000A7DC0                            
000A7DC0                            SF2_MutePCM2:
000A7DC0 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A7DC6 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 1 slot address
000A7DCC 33FC 0100 00A1 1100 0839+  		StopZ80
000A7DDE 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7DE0 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7DE2 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7DE4 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7DE6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7DE8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7DEA 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A7DEC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7DEE 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7DF0 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A7DF2 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7DF4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A7DF6 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A7DFE 33FC 0000 00A1 1100        		StartZ80
000A7E06 4E75                       		rts							; CHG: return
000A7E08                            
000A7E08                            ; ===========================================================================
000A7E08                            
000A7E08                            loc_72E06:				; XREF: loc_72A64
000A7E08 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000A7E0E 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000A7E12 0815 0002                  		btst	#2,(a5)
000A7E16 6600                       		bne.s	locret_72E1E 
000A7E18 4A2E 000E                  	tst.b	$0E(a6)
000A7E1C 6600                       	bne.s	locret_72E1E_2
000A7E1E 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7E22 6600                       	bne.s	locret_72E1E 
000A7E24                            
000A7E24                            	locret_72E1E_2:
000A7E24 102C FFFF                  		move.b	-1(a4),d0				; MJ: reload F3 setting to d0
000A7E28 13C0 00C0 0011             		move.b	d0,($C00011).l				; MJ: save F3 setting (should be EX (PSG 4) related)
000A7E2E 0200 0003                  		andi.b	#%00000011,d0				; MJ: get only frequency mode bits
000A7E32 0C00 0003                  		cmpi.b	#%00000011,d0				; MJ: has it been set to use PSG 3's frequency?
000A7E36 6600                       		bne.s	locret_72E1E				; MJ: if not, branch
000A7E38 13FC 00DF 00C0 0011        		move.b	#%11011111,($C00011).l			; MJ: mute PSG 3's volume
000A7E40                            
000A7E40                            locret_72E1E:
000A7E40 4E75                       		rts	
000A7E42                            ; ===========================================================================
000A7E42                            
000A7E42                            loc_72E20:				; XREF: loc_72A64
000A7E42 0895 0003                  		bclr	#3,(a5)
000A7E46 4E75                       		rts	
000A7E48                            ; ===========================================================================
000A7E48                            
000A7E48                            loc_72E26:				; XREF: loc_72A64
000A7E48 1B5C 000B                  		move.b	(a4)+,$B(a5)
000A7E4C 4E75                       		rts	
000A7E4E                            ; ===========================================================================
000A7E4E                            
000A7E4E                            loc_72E2C:				; XREF: loc_72A64
000A7E4E 101C                       		move.b	(a4)+,d0
000A7E50 E148                       		lsl.w	#8,d0
000A7E52 101C                       		move.b	(a4)+,d0
000A7E54 D8C0                       		adda.w	d0,a4
000A7E56 534C                       		subq.w	#1,a4
000A7E58 4E75                       		rts	
000A7E5A                            ; ===========================================================================
000A7E5A                            
000A7E5A                            loc_72E38:				; XREF: loc_72A64
000A7E5A 7000                       		moveq	#0,d0
000A7E5C 101C                       		move.b	(a4)+,d0
000A7E5E 121C                       		move.b	(a4)+,d1
000A7E60 4A35 0024                  		tst.b	$24(a5,d0.w)
000A7E64 6600                       		bne.s	loc_72E48
000A7E66 1B81 0024                  		move.b	d1,$24(a5,d0.w)
000A7E6A                            
000A7E6A                            loc_72E48:
000A7E6A 5335 0024                  		subq.b	#1,$24(a5,d0.w)
000A7E6E 66DE                       		bne.s	loc_72E2C
000A7E70 544C                       		addq.w	#2,a4
000A7E72 4E75                       		rts	
000A7E74                            ; ===========================================================================
000A7E74                            
000A7E74                            loc_72E52:				; XREF: loc_72A64
000A7E74 7000                       		moveq	#0,d0
000A7E76 102D 000D                  		move.b	$D(a5),d0
000A7E7A 5900                       		subq.b	#4,d0
000A7E7C 2B8C 0000                  		move.l	a4,(a5,d0.w)
000A7E80 1B40 000D                  		move.b	d0,$D(a5)
000A7E84 60C8                       		bra.s	loc_72E2C
000A7E86                            ; ===========================================================================
000A7E86                            
000A7E86                            loc_72E64:				; XREF: loc_72A64
000A7E86 103C 0088                  		move.b	#$88,d0
000A7E8A 123C 000F                  		move.b	#$F,d1
000A7E8E 4EBA F676                  		jsr	sub_7272E(pc)
000A7E92 103C 008C                  		move.b	#$8C,d0
000A7E96 123C 000F                  		move.b	#$F,d1
000A7E9A 6000 F66A                  		bra.w	sub_7272E
000A7E9E                            ; ===========================================================================
000A7E9E                            Music81:	incbin	sound\music81.bin
000A867C 00                         		even
000A867C                            Music82:	incbin	sound\music82.bin
000A8BAA 00                         		even
000A8BAA                            Music83:	incbin	sound\music83.bin
000A9024 00                         		even
000A9024                            Music84:	incbin	sound\music84.bin
000A94A2 00                         		even
000A94A2                            Music85:	incbin	sound\music85.bin
000A99FA 00                         		even
000A99FA                            Music86:	incbin	sound\music86.bin
000AA12E                            		even
000AA12E                            Music87:	incbin	sound\music87.bin
000AA3D4 00                         		even
000AA3D4                            Music88:	incbin	sound\music88.bin
000AA4E0 00                         		even
000AA4E0                            Music89:	incbin	sound\music89.bin
000AA814 00                         		even
000AA814                            Music8A:	incbin	sound\music8A.bin
000AAA2C                            		even
000AAA2C                            Music8B:	incbin	sound\music8B.bin
000AAD58                            		even
000AAD58                            Music8C:	incbin	sound\music8C.bin
000AB016 00                         		even
000AB016                            Music8D:	incbin	sound\music8D.bin
000AB2B8                            		even
000AB2B8                            Music8E:	incbin	sound\music8E.bin
000AB44E 00                         		even
000AB44E                            Music8F:	incbin	sound\music8F.bin
000AB5B0 00                         		even
000AB5B0                            Music90:	incbin	sound\music90.bin
000AB730 00                         		even
000AB730                            Music91:	incbin	sound\music91.bin
000ACD58 00                         		even
000ACD58                            Music92:	incbin	sound\music92.bin
000ACEA0 00                         		even
000ACEA0                            Music93:	incbin	sound\music93.bin
000ACF78 00                         		even
000ACF78                            ; ---------------------------------------------------------------------------
000ACF78                            ; Sound	effect pointers
000ACF78                            ; ---------------------------------------------------------------------------
000ACF78 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000ACF84 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000ACF90 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000ACF9C 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000ACFA8 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000ACFB4 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000ACFC0 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000ACFCC 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000ACFD8 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000ACFE4 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000ACFF0 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000ACFFC 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000AD008 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000AD014 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000AD020 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000AD02C 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000AD038 0000 0000                  SoundD0Index:	dc.l SoundD0
000AD03C                            SoundA0:	incbin	sound\soundA0.bin
000AD052                            		even
000AD052                            SoundA1:	incbin	sound\soundA1.bin
000AD07C                            		even
000AD07C                            SoundA2:	incbin	sound\soundA2.bin
000AD09C                            		even
000AD09C                            SoundA3:	incbin	sound\soundA3.bin
000AD0CE                            		even
000AD0CE                            SoundA4:	incbin	sound\soundA4.bin
000AD104                            		even
000AD104                            SoundA5:	incbin	sound\soundA5.bin
000AD130                            		even
000AD130                            SoundA6:	incbin	sound\soundA6.bin
000AD160                            		even
000AD160                            SoundA7:	incbin	sound\soundA7.bin
000AD190                            		even
000AD190                            SoundA8:	incbin	sound\soundA8.bin
000AD1C4                            		even
000AD1C4                            SoundA9:	incbin	sound\soundA9.bin
000AD1D6                            		even
000AD1D6                            SoundAA:	incbin	sound\soundAA.bin
000AD218                            		even
000AD218                            SoundAB:	incbin	sound\soundAB.bin
000AD238                            		even
000AD238                            SoundAC:	incbin	sound\soundAC.bin
000AD26C                            		even
000AD26C                            SoundAD:	incbin	sound\soundAD.bin
000AD2A2                            		even
000AD2A2                            SoundAE:	incbin	sound\soundAE.bin
000AD2EC                            		even
000AD2EC                            SoundAF:	incbin	sound\soundAF.bin
000AD31A                            		even
000AD31A                            SoundB0:	incbin	sound\soundB0.bin
000AD34C                            		even
000AD34C                            SoundB1:	incbin	sound\soundB1.bin
000AD378                            		even
000AD378                            SoundB2:	incbin	sound\soundB2.bin
000AD3C8                            		even
000AD3C8                            SoundB3:	incbin	sound\soundB3.bin
000AD412                            		even
000AD412                            SoundB4:	incbin	sound\soundB4.bin
000AD46E                            		even
000AD46E                            SoundB5:	incbin	sound\soundB5.bin
000AD49C                            		even
000AD49C                            SoundB6:	incbin	sound\soundB6.bin
000AD4BA                            		even
000AD4BA                            SoundB7:	incbin	sound\soundB7.bin
000AD4F6                            		even
000AD4F6                            SoundB8:	incbin	sound\soundB8.bin
000AD514                            		even
000AD514                            SoundB9:	incbin	sound\soundB9.bin
000AD578                            		even
000AD578                            SoundBA:	incbin	sound\soundBA.bin
000AD5A0                            		even
000AD5A0                            SoundBB:	incbin	sound\soundBB.bin
000AD5CC                            		even
000AD5CC                            SoundBC:	incbin	sound\soundBC.bin
000AD60E                            		even
000AD60E                            SoundBD:	incbin	sound\soundBD.bin
000AD662                            		even
000AD662                            SoundBE:	incbin	sound\soundBE.bin
000AD69C                            		even
000AD69C                            SoundBF:	incbin	sound\soundBF.bin
000AD70E                            		even
000AD70E                            SoundC0:	incbin	sound\soundC0.bin
000AD73C                            		even
000AD73C                            SoundC1:	incbin	sound\soundC1.bin
000AD776                            		even
000AD776                            SoundC2:	incbin	sound\soundC2.bin
000AD7A0                            		even
000AD7A0                            SoundC3:	incbin	sound\soundC3.bin
000AD81A                            		even
000AD81A                            SoundC4:	incbin	sound\soundC4.bin
000AD842                            		even
000AD842                            SoundC5:	incbin	sound\soundC5.bin
000AD8AA                            		even
000AD8AA                            SoundC6:	incbin	sound\soundC6.bin
000AD8EC                            		even
000AD8EC                            SoundC7:	incbin	sound\soundC7.bin
000AD91A                            		even
000AD91A                            SoundC8:	incbin	sound\soundC8.bin
000AD92C                            		even
000AD92C                            SoundC9:	incbin	sound\soundC9.bin
000AD95A                            		even
000AD95A                            SoundCA:	incbin	sound\soundCA.bin
000AD988                            		even
000AD988                            SoundCB:	incbin	sound\soundCB.bin
000AD9D4                            		even
000AD9D4                            SoundCC:	incbin	sound\soundCC.bin
000ADA0E                            		even
000ADA0E                            SoundCD:	incbin	sound\soundCD.bin
000ADA1C                            		even
000ADA1C                            SoundCE:	incbin	sound\soundCE.bin
000ADA4A                            		even
000ADA4A                            SoundCF:	incbin	sound\soundCF.bin
000ADA82                            		even
000ADA82                            SoundD0:	incbin	sound\soundD0.bin
000ADABC                            		even
000ADABC                            SegaPCM:	incbin	"Dual PCM\Samples\incswf\Sega.swf",$3A
000B3902                            SegaPCM_End:	even
000B3902                            
000B3902                            ; ===========================================================================
000B3902                            ; ---------------------------------------------------------------------------
000B3902                            ; Z80 ROM address
000B3902                            ; ---------------------------------------------------------------------------
000B3902                            
000B3902                            Z80ROM:		incbin	"Dual PCM\Z80.bin"
000B543A 00                         Z80ROM_End:	even
000B543A                            
000B543A                            ; ===========================================================================
000B543A                            ; ---------------------------------------------------------------------------
000B543A                            ; Sample 68k PCM list
000B543A                            ; ---------------------------------------------------------------------------
000B543A                            ; SampleList:
000B543A                            		include	"Dual PCM\Samples.asm"
000B543A                            ; ===========================================================================
000B543A                            ; ---------------------------------------------------------------------------
000B543A                            ; Sample 68k PCM list
000B543A                            ; ---------------------------------------------------------------------------
000B543A                            
000B543A                            SampleList:
000B543A                            
000B543A                            	; --- Sonic 1 Samples ---
000B543A                            
000B543A 0000 0000                  		dc.l	Sonic1Kick			; 00
000B543E 0000 0000                  		dc.l	Sonic1Snare			; 01
000B5442 0000 0000                  		dc.l	Sonic1Timpani		; 02
000B5446 0000 0000                  		dc.l	SonimeDies			; 03
000B544A 0000 0000                  		dc.l	SonimeFrustrated	; 04
000B544E 0000 0000                  		dc.l	SonimeHappy			; 05
000B5452 0000 0000                  		dc.l	SonimeHappy2		; 06
000B5456 0000 0000                  		dc.l	SonimeHurt			; 07
000B545A 0000 0000                  		dc.l	SonimeImpatient		; 08
000B545E 0000 0000                  		dc.l	SonimeInvincibility	; 09
000B5462 0000 0000                  		dc.l	SonimeSpikey	; 0A
000B5466 0000 0000                  		dc.l	SonimeSpeed	; 0B
000B546A 0000 0000                  		dc.l	SonimeBossDefeated	; 0C
000B546E                            		
000B546E                            ; ---------------------------------------------------------------------------
000B546E                            ; Sample z80 pointers
000B546E                            ; ---------------------------------------------------------------------------
000B546E =000036B0                  Sec	=	14000	; Hz per second
000B546E =000003E8                  Mil	=	1000	; centi-seconds per second
000B546E                            
000B546E                            	; --- Stop Sample (used by note 80) ---
000B546E                            
000B546E 0000 0000 0000 0000 0000+  StopSample:				dcz80	SWF_StopSample,		SWF_StopSample_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B547A                            
000B547A                            	; --- Sonic 1 Samples ---
000B547A                            
000B547A 0000 0000 0000 0000 0000+  Sonic1Kick:				dcz80	SWF_S1_Kick,		SWF_S1_Kick_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B5486 0000 0000 0000 0000 0000+  Sonic1Snare:			dcz80	SWF_S1_Snare,		SWF_S1_Snare_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B5492 0000 0000 0000 0000 0000+  Sonic1Timpani:			dcz80	SWF_S1_Timpani,		SWF_S1_Timpani,			SWF_StopSample,		SWF_StopSample_Rev
000B549E 0000 0000 0000 0000 0000+  SonimeDies:				dcz80	SWF_Dies,			SWF_Dies_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B54AA 0000 0000 0000 0000 0000+  SonimeFrustrated:		dcz80	SWF_Frustrated,		SWF_Frustrated_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B54B6 0000 0000 0000 0000 0000+  SonimeHappy:			dcz80	SWF_Happy,			SWF_Happy_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B54C2 0000 0000 0000 0000 0000+  SonimeHappy2:			dcz80	SWF_Happy2,			SWF_Happy2_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B54CE 0000 0000 0000 0000 0000+  SonimeHurt:				dcz80	SWF_Hurt,			SWF_Hurt_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B54DA 0000 0000 0000 0000 0000+  SonimeImpatient:		dcz80	SWF_Impatient,		SWF_Impatient_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B54E6 0000 0000 0000 0000 0000+  SonimeInvincibility:	dcz80	SWF_Invincibility,	SWF_Invincibility_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000B54F2 0000 0000 0000 0000 0000+  SonimeSpikey:	dcz80	SWF_Spikey,	SWF_Spikey_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000B54FE 0000 0000 0000 0000 0000+  SonimeSpeed:		dcz80	SWF_Speed,		SWF_Speed_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B550A 0000 0000 0000 0000 0000+  SonimeBossDefeated:		dcz80	SWF_BossDefeated,		SWF_BossDefeated_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B5516                            ; ---------------------------------------------------------------------------
000B5516                            ; Sample file includes
000B5516                            ; ---------------------------------------------------------------------------
000B5516                            			align	$8000,$FF
000B8000                            ; ---------------------------------------------------------------------------
000B8000                            
000B8000                            	; --- Volume tables ---
000B8000                            
000B8000                            PCM_Volumes:		incbin	"Dual PCM\Volume Maker\Volumes.bin"
000C0000                            
000C0000                            	; --- Stop Sample (used by note 80) ---
000C0000                            
000C0000                            			EndMarker
000C0198                            SWF_StopSample:		dcb.b	$8000-((Z80E_Read*(($1000+$100)/$100))*2),$80
000C7E68                            SWF_StopSample_Rev:	EndMarker
000C8000                            
000C8000                            	; --- Sonic 1 Samples ---
000C8000                            
000C8000                            SWF_S1_Kick:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Kick.swf"
000C8894                            SWF_S1_Kick_Rev:	EndMarker
000C8A2C                            SWF_S1_Snare:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare.swf"
000C9303                            SWF_S1_Snare_Rev:	EndMarker
000C949B                            SWF_S1_Timpani:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani.swf"
000CC41F                            SWF_S1_Timpani_Rev:	EndMarker
000CC5B7                            SWF_Dies:			incbin	"Dual PCM\Samples\incswf\dies.swf"
000D0D24                            SWF_Dies_Rev:		EndMarker
000D0EBC                            SWF_Frustrated:		incbin	"Dual PCM\Samples\incswf\frustrated.swf"
000D8283                            SWF_Frustrated_Rev:	EndMarker
000D841B                            SWF_Happy:			incbin	"Dual PCM\Samples\incswf\happy.swf"
000DF3D3                            SWF_Happy_Rev:		EndMarker
000DF56B                            SWF_Happy2:			incbin	"Dual PCM\Samples\incswf\happy 2.swf"
000ECBB7                            SWF_Happy2_Rev:		EndMarker
000ECD4F                            SWF_Hurt:			incbin	"Dual PCM\Samples\incswf\hurt.swf"
000EF942                            SWF_Hurt_Rev:		EndMarker
000EFADA                            SWF_Impatient:		incbin	"Dual PCM\Samples\incswf\impatient.swf"
000F922E                            SWF_Impatient_Rev:	EndMarker
000F93C6                            SWF_Invincibility:	incbin	"Dual PCM\Samples\incswf\invincibility.swf"
001107C1                            SWF_Invincibility_Rev:	EndMarker
00110959                            SWF_Spikey:	incbin	"Dual PCM\Samples\incswf\spikey.swf"
00114934                            SWF_Spikey_Rev:	EndMarker
00114ACC                            SWF_Speed:	incbin	"Dual PCM\Samples\incswf\goingatsupersonicspeed.swf"
0011F331                            SWF_Speed_Rev:	EndMarker
0011F4C9                            SWF_BossDefeated:	incbin	"Dual PCM\Samples\incswf\bossdefeated.swf"
0012783F                            SWF_BossDefeated_Rev:	EndMarker
001279D7                            ; ===========================================================================
001279D7                            ; ===========================================================================
001279D8 00                         		even
001279D8                            
001279D8                            ; ===========================================================================
001279D8                            
001279D8                            SHC2021:    incbin "SHC21_Lite_Sonic12.bin"
0012DC3C                                        even
0012DC3C                            
0012DC3C                            ; ===============================================================
0012DC3C                            ; ---------------------------------------------------------------
0012DC3C                            ; Error handling module
0012DC3C                            ; ---------------------------------------------------------------
0012DC3C                            
0012DC3C 4EBA 0000                  BusError:	jsr	ErrorHandler(pc)
0012DC40 4255 5320 4552 524F 5200   		dc.b	"BUS ERROR",0			; text
0012DC4A 01                         		dc.b	1				; extended stack frame
0012DC4C 00                         		even
0012DC4C                            
0012DC4C 4EBA 0000                  AddressError:	jsr	ErrorHandler(pc)
0012DC50 4144 4452 4553 5320 4552+  		dc.b	"ADDRESS ERROR",0		; text
0012DC5E 01                         		dc.b	1				; extended stack frame
0012DC60 00                         		even
0012DC60                            
0012DC60 4EBA 0000                  IllegalInstr:	jsr	ErrorHandler(pc)
0012DC64 494C 4C45 4741 4C20 494E+  		dc.b	"ILLEGAL INSTRUCTION",0		; text
0012DC78 00                         		dc.b	0				; extended stack frame
0012DC7A 00                         		even
0012DC7A                            
0012DC7A 4EBA 0000                  ZeroDivide:	jsr	ErrorHandler(pc)
0012DC7E 5A45 524F 2044 4956 4944+  		dc.b	"ZERO DIVIDE",0  		; text
0012DC8A 00                         		dc.b	0				; extended stack frame
0012DC8C 00                         		even
0012DC8C                            
0012DC8C 4EBA 0000                  ChkInstr:	jsr	ErrorHandler(pc)
0012DC90 4348 4B20 494E 5354 5255+  		dc.b	"CHK INSTRUCTION",0  		; text
0012DCA0 00                         		dc.b	0				; extended stack frame
0012DCA2 00                         		even
0012DCA2                            
0012DCA2 4EBA 0000                  TrapvInstr:	jsr	ErrorHandler(pc)
0012DCA6 5452 4150 5620 494E 5354+  		dc.b	"TRAPV INSTRUCTION",0  		; text
0012DCB8 00                         		dc.b	0				; extended stack frame
0012DCBA 00                         		even
0012DCBA                            
0012DCBA 4EBA 0000                  PrivilegeViol:	jsr	ErrorHandler(pc)
0012DCBE 5052 4956 494C 4547 4520+  		dc.b	"PRIVILEGE VIOLATION",0  	; text
0012DCD2 00                         		dc.b	0				; extended stack frame
0012DCD4 00                         		even
0012DCD4                            
0012DCD4 4EBA 0000                  Trace:		jsr	ErrorHandler(pc)
0012DCD8 5452 4143 4500             		dc.b	"TRACE",0 	  		; text
0012DCDE 00                         		dc.b	0				; extended stack frame
0012DCE0 00                         		even
0012DCE0                            
0012DCE0 4EBA 0000                  Line1010Emu:	jsr	ErrorHandler(pc)
0012DCE4 4C49 4E45 2031 3031 3020+  		dc.b	"LINE 1010 EMULATOR",0  	; text
0012DCF7 00                         		dc.b	0				; extended stack frame
0012DCF8                            		even
0012DCF8                            
0012DCF8 4EBA 0000                  Line1111Emu:	jsr	ErrorHandler(pc)
0012DCFC 4C49 4E45 2031 3131 3120+  		dc.b	"LINE 1111 EMULATOR",0  	; text
0012DD0F 00                         		dc.b	0				; extended stack frame
0012DD10                            		even
0012DD10                            
0012DD10 4EBA 0000                  ErrorExcept:	jsr	ErrorHandler(pc)
0012DD14 4552 524F 5220 4558 4345+  		dc.b	"ERROR EXCEPTION",0    		; text
0012DD24 00                         		dc.b	0				; extended stack frame
0012DD26 00                         		even
0012DD26                            
0012DD26                            ErrorHandler:	incbin	"ErrorHandler.bin"
0012F73A                            
0012F73A                            ; end of 'ROM'
0012F73A                            EndOfRom:
0012F73A                            
0012F73A                            
